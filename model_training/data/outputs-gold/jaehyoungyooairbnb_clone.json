[comment] [EOL] from typing import Any [EOL] import typing [EOL] import random [EOL] import django [EOL] import os [EOL] import pickle [EOL] from django . core . files . uploadedfile import SimpleUploadedFile [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] django . setup ( ) [EOL] [EOL] from airbnb . rooms . models import Room , RoomPhoto [EOL] [EOL] rooms = Room . objects . all ( ) [EOL] room_photos = RoomPhoto . objects . all ( ) [EOL] [EOL] with open ( [string] , [string] ) as f : [EOL] pickle . dump ( rooms , f ) [EOL] [EOL] with open ( [string] , [string] ) as f : [EOL] pickle . dump ( room_photos , f ) [EOL] [EOL] print ( [string] ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any , List [EOL] import typing [EOL] import random [EOL] import django [EOL] import os [EOL] from django . core . files . uploadedfile import SimpleUploadedFile [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] django . setup ( ) [EOL] [EOL] from airbnb . rooms . models import Room [EOL] [EOL] city_list = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] city = [string] [EOL] min_price = [number] [EOL] max_price = [number] [EOL] [EOL] city_rooms = Room . objects . filter ( city = city ) [EOL] [EOL] for room in city_rooms : [EOL] room . price = random . randrange ( min_price , max_price ) * [number] [EOL] room . save ( ) [EOL] [EOL] print ( [string] . format ( city ) ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0
	0
	0
from typing import Tuple , Union [EOL] import typing [EOL] __version__ = [string] [EOL] __version_info__ = tuple ( [ int ( num ) if num . isdigit ( ) else num for num in __version__ . replace ( [string] , [string] , [number] ) . split ( [string] ) ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[typing.Union[builtins.int,builtins.str],...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Tuple , Type [EOL] import typing [EOL] import airbnb [EOL] from rest_framework import serializers [EOL] [EOL] from . models import User [EOL] [EOL] [EOL] class UserSerializer ( serializers . ModelSerializer ) : [EOL] [EOL] class Meta : [EOL] model = User [EOL] fields = ( [string] , [string] , [string] , [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[airbnb.users.serializers.UserSerializer.Meta]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] from django . core . management . base import BaseCommand [EOL] from django . contrib . auth import get_user_model [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] [EOL] User = get_user_model ( ) [EOL] User . objects . create_superuser ( [string] , [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0
	0
import django [EOL] import pytest [EOL] from django . conf import settings [EOL] [EOL] pytestmark = pytest . mark . django_db [EOL] [EOL] [EOL] def test_user_get_absolute_url ( user ) : [EOL] assert user . get_absolute_url ( ) == f" [string] { user . username } [string] " [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
	0
[comment] [EOL] [comment] [EOL] import builtins [EOL] from typing import Any , List , Type [EOL] import typing [EOL] import airbnb [EOL] from rest_framework import generics [EOL] from django_filters import rest_framework [EOL] from rest_framework . views import APIView [EOL] from rest_framework import status [EOL] from rest_framework . response import Response [EOL] [EOL] from airbnb . rooms . serializers import RoomSerializer , ReviewSerializer , ReservationSerializer [EOL] from . models import Room , Review , Reservation [EOL] [comment] [EOL] [EOL] [EOL] class RoomsFilter ( rest_framework . FilterSet ) : [EOL] [EOL] capacity = rest_framework . NumberFilter ( lookup_expr = [string] ) [EOL] startPrice = rest_framework . NumberFilter ( field_name = [string] , lookup_expr = [string] ) [EOL] endPrice = rest_framework . NumberFilter ( field_name = [string] , lookup_expr = [string] ) [EOL] [EOL] class Meta : [EOL] model = Room [EOL] fields = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] class Rooms ( generics . ListAPIView ) : [EOL] [docstring] [EOL] serializer_class = RoomSerializer [EOL] filter_backends = ( rest_framework . DjangoFilterBackend , ) [EOL] filter_class = RoomsFilter [EOL] [EOL] def get_queryset ( self ) : [EOL] [docstring] [EOL] queryset = Room . objects . all ( ) . prefetch_related ( [string] ) . order_by ( [string] ) [EOL] query = self . request . query_params . get ( [string] , None ) [EOL] queryset = queryset . filter ( city__icontains = query ) | Room . objects . filter ( location__icontains = query ) [EOL] return queryset [EOL] [EOL] def list ( self , request , * args , ** kwargs ) : [EOL] [comment] [EOL] response = super ( Rooms , self ) . list ( request , * args , ** kwargs ) [EOL] [EOL] [comment] [EOL] query = self . request . query_params . get ( [string] , None ) [EOL] start_price = self . request . query_params . get ( [string] , None ) [EOL] end_price = self . request . query_params . get ( [string] , None ) [EOL] rooms = Room . objects . filter ( city__icontains = query ) | Room . objects . filter ( location__icontains = query ) [EOL] rooms = rooms . filter ( price__gte = start_price ) [EOL] rooms = rooms . filter ( price__lte = end_price ) [EOL] [EOL] response . data [ [string] ] = self . get_average_price ( rooms ) [EOL] response . data [ [string] ] = self . get_average_rating ( rooms ) [EOL] response . data [ [string] ] = self . get_total_reviews ( rooms ) [EOL] [EOL] [comment] [EOL] return response [EOL] [EOL] def get_average_price ( self , rooms ) : [EOL] [EOL] total_rooms = len ( rooms ) [EOL] total_price = [number] [EOL] [EOL] for room in rooms : [EOL] total_price += room . price [EOL] [EOL] if total_rooms == [number] : [EOL] return [number] [EOL] else : [EOL] return int ( total_price / total_rooms ) [EOL] [EOL] def get_average_rating ( self , rooms ) : [EOL] [EOL] total_rooms = [number] [EOL] total_rating = [number] [EOL] [EOL] for room in rooms : [EOL] rating = float ( room . rating ) [EOL] [EOL] if rating > [number] : [EOL] total_rating += rating [EOL] total_rooms += [number] [EOL] [EOL] if total_rooms == [number] : [EOL] return [number] [EOL] else : [EOL] return round ( total_rating / total_rooms , [number] ) [EOL] [EOL] def get_total_reviews ( self , rooms ) : [EOL] [EOL] total_review_count = [number] [EOL] [EOL] for room in rooms : [EOL] total_review_count += room . review_count [EOL] [EOL] return total_review_count [EOL] [EOL] [EOL] class RoomDetail ( APIView ) : [EOL] [EOL] def get ( self , request , room_id ) : [EOL] [EOL] try : [EOL] room = Room . objects . get ( pk = room_id ) [EOL] [comment] [EOL] except Room . DoesNotExist : [EOL] return Response ( status = status . HTTP_404_NOT_FOUND ) [EOL] [EOL] serializer = RoomSerializer ( room , context = { [string] : request } ) [EOL] [EOL] return Response ( data = serializer . data , status = status . HTTP_200_OK ) [EOL] [EOL] [EOL] class RoomReviews ( APIView ) : [EOL] [EOL] def get ( self , request , room_id ) : [EOL] [EOL] try : [EOL] reviews = Review . objects . filter ( room__pk = room_id ) [EOL] [comment] [EOL] except Room . DoesNotExist : [EOL] return Response ( status = status . HTTP_404_NOT_FOUND ) [EOL] [EOL] serializer = ReviewSerializer ( reviews , many = True ) [EOL] [EOL] return Response ( data = serializer . data , status = status . HTTP_200_OK ) [EOL] [EOL] def post ( self , request , room_id ) : [EOL] [EOL] user = request . user [EOL] [EOL] try : [EOL] room = Room . objects . get ( id = room_id ) [EOL] except Room . DoesNotExist : [EOL] return Response ( status = status . HTTP_404_NOT_FOUND ) [EOL] [EOL] serializer = ReviewSerializer ( data = request . data ) [EOL] [EOL] if serializer . is_valid ( ) : [EOL] serializer . save ( creator = user , room = room ) [EOL] return Response ( data = serializer . data , status = status . HTTP_201_CREATED ) [EOL] else : [EOL] return Response ( data = serializer . errors , status = status . HTTP_400_BAD_REQUEST ) [EOL] [EOL] [EOL] class RoomReview ( APIView ) : [EOL] [EOL] def get ( self , request , room_id , review_id ) : [EOL] try : [EOL] review = Review . objects . get ( id = review_id , room__id = room_id ) [EOL] except Review . DoesNotExist : [EOL] return Response ( status = status . HTTP_404_NOT_FOUND ) [EOL] [EOL] serializer = ReviewSerializer ( review ) [EOL] return Response ( data = serializer . data , status = status . HTTP_200_OK ) [EOL] [EOL] def delete ( self , request , room_id , review_id ) : [EOL] [EOL] user = request . user [EOL] [EOL] try : [EOL] review = Review . objects . get ( id = review_id , creator = user , room__id = room_id ) [EOL] review . delete ( ) [EOL] return Response ( status = status . HTTP_204_NO_CONTENT ) [EOL] [EOL] except Review . DoesNotExist : [EOL] return Response ( status = status . HTTP_404_NOT_FOUND ) [EOL] [EOL] [EOL] class RoomReservation ( APIView ) : [EOL] [EOL] def post ( self , request , room_id ) : [EOL] [EOL] user = request . user [EOL] [EOL] try : [EOL] room = Room . objects . get ( id = room_id ) [EOL] except Room . DoesNotExist : [EOL] return Response ( status = status . HTTP_404_NOT_FOUND ) [EOL] [EOL] serializer = ReservationSerializer ( data = request . data ) [EOL] [EOL] if serializer . is_valid ( ) : [EOL] serializer . save ( creator = user , room = room ) [EOL] return Response ( data = serializer . data , status = status . HTTP_201_CREATED ) [EOL] else : [EOL] return Response ( data = serializer . errors , status = status . HTTP_400_BAD_REQUEST ) [EOL] [EOL] def get ( self , _ , room_id ) : [EOL] [EOL] try : [EOL] reservation = Reservation . objects . get ( room__id = room_id ) [EOL] serializer = ReservationSerializer ( reservation ) [EOL] except Review . DoesNotExist : [EOL] return Response ( status = status . HTTP_404_NOT_FOUND ) [EOL] [EOL] return Response ( data = serializer . data , status = status . HTTP_200_OK ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[airbnb.rooms.views.RoomsFilter]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.int$ 0 $builtins.float$ 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $airbnb.rooms.serializers.RoomSerializer$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $airbnb.rooms.serializers.RoomSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $airbnb.rooms.serializers.ReviewSerializer$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $airbnb.rooms.serializers.ReviewSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $airbnb.rooms.serializers.ReviewSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 $airbnb.rooms.serializers.ReviewSerializer$ 0 0 0 0 0 0 $airbnb.rooms.serializers.ReviewSerializer$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $airbnb.rooms.serializers.ReviewSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $airbnb.rooms.serializers.ReviewSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $airbnb.rooms.serializers.ReviewSerializer$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $airbnb.rooms.serializers.ReviewSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $airbnb.rooms.serializers.ReservationSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 $airbnb.rooms.serializers.ReservationSerializer$ 0 0 0 0 0 0 $airbnb.rooms.serializers.ReservationSerializer$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $airbnb.rooms.serializers.ReservationSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $airbnb.rooms.serializers.ReservationSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $airbnb.rooms.serializers.ReservationSerializer$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $airbnb.rooms.serializers.ReservationSerializer$ 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Tuple , Type [EOL] import typing [EOL] import airbnb [EOL] from rest_framework import serializers [EOL] [EOL] from airbnb . rooms . models import Room , RoomPhoto , Review , Reservation [EOL] from airbnb . users . serializers import UserSerializer [EOL] [EOL] [EOL] class RoomIdNameLocationPriceSerializer ( serializers . ModelSerializer ) : [EOL] [EOL] class Meta : [EOL] model = Room [EOL] fields = ( [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class ReservationSerializer ( serializers . ModelSerializer ) : [EOL] [EOL] creator = UserSerializer ( read_only = True ) [EOL] room = RoomIdNameLocationPriceSerializer ( read_only = True ) [EOL] [EOL] class Meta : [EOL] model = Reservation [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class ReviewSerializer ( serializers . ModelSerializer ) : [EOL] [EOL] creator = UserSerializer ( read_only = True ) [EOL] room = serializers . StringRelatedField ( ) [EOL] is_own = serializers . SerializerMethodField ( read_only = True ) [EOL] [EOL] class Meta : [EOL] model = Review [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] def get_is_own ( self , obj ) : [EOL] if [string] in self . context : [EOL] request = self . context [ [string] ] [EOL] if request . user == obj . creator : [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] return False [EOL] [EOL] [EOL] class RoomPhotoSerializer ( serializers . ModelSerializer ) : [EOL] [EOL] class Meta : [EOL] model = RoomPhoto [EOL] fields = ( [string] , ) [EOL] [EOL] [EOL] class RoomSerializer ( serializers . ModelSerializer ) : [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] reviews = ReviewSerializer ( many = True ) [EOL] room_photos = RoomPhotoSerializer ( many = True ) [EOL] reservations = ReservationSerializer ( many = True ) [EOL] host = UserSerializer ( read_only = True ) [EOL] rating = serializers . ReadOnlyField ( ) [EOL] [EOL] class Meta : [EOL] model = Room [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[airbnb.rooms.serializers.RoomSerializer.Meta]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $airbnb.users.serializers.UserSerializer$ 0 0 0 0 0 0 0 0 $airbnb.rooms.serializers.RoomIdNameLocationPriceSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[airbnb.rooms.serializers.RoomSerializer.Meta]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $airbnb.users.serializers.UserSerializer$ 0 0 0 0 0 0 0 0 $typing.Type[airbnb.rooms.serializers.ReviewSerializer]$ 0 0 0 0 0 0 0 $typing.Type[airbnb.rooms.serializers.ReviewSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[airbnb.rooms.serializers.RoomSerializer.Meta]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[airbnb.rooms.serializers.RoomSerializer.Meta]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $airbnb.rooms.serializers.ReviewSerializer$ 0 0 0 0 0 0 0 0 $airbnb.rooms.serializers.RoomPhotoSerializer$ 0 0 0 0 0 0 0 0 $airbnb.rooms.serializers.ReservationSerializer$ 0 0 0 0 0 0 0 0 $airbnb.users.serializers.UserSerializer$ 0 0 0 0 0 0 0 0 $typing.Type[airbnb.rooms.serializers.RoomSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[airbnb.rooms.serializers.RoomSerializer.Meta]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class RoomsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RenameField ( model_name = [string] , old_name = [string] , new_name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0