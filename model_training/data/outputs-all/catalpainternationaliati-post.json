[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Any , List [EOL] import typing [EOL] import os [EOL] import sys [EOL] [EOL] sys . path . insert ( [number] , os . path . abspath ( [string] ) ) [EOL] [EOL] import django [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] django . setup ( ) [EOL] [EOL] [comment] [EOL] [EOL] project = [string] [EOL] copyright = [string] [EOL] author = [string] [EOL] [EOL] [comment] [EOL] release = [string] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] extensions = [ [string] , [string] ] [EOL] [EOL] [comment] [EOL] templates_path = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] exclude_patterns = [ ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_theme = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_static_path = [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from channels . auth import AuthMiddlewareStack [EOL] from channels . routing import ChannelNameRouter , ProtocolTypeRouter , URLRouter [EOL] from django . conf . urls import url [EOL] [EOL] from iati_fetch import consumers [EOL] [EOL] application = ProtocolTypeRouter ( { [string] : ChannelNameRouter ( { [string] : consumers . RequestConsumer , [string] : consumers . IatiRequestConsumer , } ) , [string] : AuthMiddlewareStack ( URLRouter ( [ url ( [string] , consumers . IatiConsumer ) , url ( [string] , consumers . EchoConsumer ) , url ( [string] , consumers . FetchUrl ) , ] ) ) , } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] [docstring] [EOL] from django . contrib import admin [EOL] from django . urls import include , path [EOL] [EOL] urlpatterns = [ path ( [string] , admin . site . urls ) , path ( [string] , include ( [string] , namespace = [string] ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import iati_post [EOL] import logging [EOL] import json [EOL] import logging [EOL] [EOL] from channels . consumer import AsyncConsumer , SyncConsumer [EOL] from channels . generic . websocket import AsyncWebsocketConsumer [EOL] [EOL] from . import requesters [EOL] [EOL] from aiohttp import ClientSession [EOL] [EOL] logging . captureWarnings ( True ) [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class RequestConsumer ( SyncConsumer ) : [EOL] [docstring] [EOL] [EOL] async def get ( self , event ) : [EOL] [docstring] [EOL] request = requesters . BaseRequest . from_event ( ) [EOL] async with ClientSession ( ) as session : [EOL] await request . get ( session = session ) [EOL] [EOL] async def clear_cache ( self , event ) : [EOL] request = requesters . BaseRequest . from_event ( ) [EOL] await request . drop ( ) [EOL] [EOL] [EOL] class IatiRequestConsumer ( AsyncConsumer ) : [EOL] [docstring] [EOL] [EOL] async def parse_xml ( self , event ) : [EOL] [docstring] [EOL] url = requesters . IatiXMLRequest ( event [ [string] ] ) [EOL] await url . to_instances ( ) [EOL] [EOL] async def organisation_list_fetch ( self , _ ) : [EOL] [docstring] [EOL] orgs = requesters . OrganisationRequestList ( ) [EOL] await orgs . get ( ) [EOL] [EOL] [EOL] class EchoConsumer ( AsyncWebsocketConsumer ) : [EOL] async def connect ( self ) : [EOL] await self . accept ( ) [EOL] [EOL] async def receive ( self , text_data = None , bytes_data = None ) : [EOL] await self . send ( text_data = text_data + [string] ) [EOL] [EOL] async def disconnect ( self , close_code ) : [EOL] await self . close ( ) [EOL] [EOL] [EOL] class FetchUrl ( AsyncWebsocketConsumer ) : [EOL] async def connect ( self ) : [EOL] await self . accept ( ) [EOL] [EOL] async def receive ( self , text_data = None , bytes_data = None ) : [EOL] request = requesters . BaseRequest ( url = [string] ) [EOL] async with ClientSession ( ) as session : [EOL] response_text = await request . get ( session = session ) [EOL] await self . send ( text_data = response_text ) [EOL] [EOL] async def disconnect ( self , close_code ) : [EOL] await self . close ( ) [EOL] [EOL] [EOL] class IatiConsumer ( AsyncWebsocketConsumer ) : [EOL] async def connect ( self ) : [EOL] await self . accept ( ) [EOL] [EOL] async def receive ( self , text_data = None , bytes_data = None ) : [EOL] request = requesters . OrganisationRequestList ( ) [EOL] async with ClientSession ( ) as session : [EOL] response_text = await request . get ( session = session ) [EOL] await self . send ( text_data = json . dumps ( response_text ) ) [EOL] [EOL] async def disconnect ( self , close_code ) : [EOL] await self . close ( ) [EOL] [EOL] [EOL] class IatiActivitiesConsumer ( AsyncWebsocketConsumer ) : [EOL] [docstring] [EOL] async def connect ( self ) : [EOL] await self . accept ( ) [EOL] [EOL] async def receive ( self , text_data = None , bytes_data = None ) : [EOL] [docstring] [EOL] request = requesters . IatiXMLRequest ( url = [string] ) [EOL] async with ClientSession ( ) as session : [EOL] response_text = await request . get ( session = session ) [EOL] await self . send ( text_data = json . dumps ( response_text ) ) [EOL] [EOL] async def disconnect ( self , close_code ) : [EOL] await self . close ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $iati_post.iati_fetch.requesters.IatiXMLRequest$ 0 0 0 0 0 0 0 0 0 0 0 0 $iati_post.iati_fetch.requesters.IatiXMLRequest$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $iati_post.iati_fetch.requesters.OrganisationRequestList$ 0 0 0 0 0 0 0 0 $iati_post.iati_fetch.requesters.OrganisationRequestList$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $iati_post.iati_fetch.requesters.BaseRequest$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $iati_post.iati_fetch.requesters.BaseRequest$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $iati_post.iati_fetch.requesters.OrganisationRequestList$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $iati_post.iati_fetch.requesters.OrganisationRequestList$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $iati_post.iati_fetch.requesters.IatiXMLRequest$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $iati_post.iati_fetch.requesters.IatiXMLRequest$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class IatiFetchConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Any [EOL] import typing [EOL] from django . apps import apps [EOL] from django . views . generic import TemplateView , View [EOL] [EOL] [comment] [EOL] [EOL] [EOL] class FrontPage ( TemplateView ) : [EOL] template_name = [string] [EOL] [EOL] [EOL] class Organisations ( TemplateView ) : [EOL] template_name = [string] [EOL] [EOL] def get_context_data ( self ) : [EOL] return { [string] : apps . get_model ( [string] , [string] ) . objects . all ( ) } [EOL] [EOL] [EOL] class OrganisationDetail ( TemplateView ) : [EOL] template_name = [string] [EOL] [EOL] def get_context_data ( self , organisation_id ) : [EOL] org = apps . get_model ( [string] , [string] ) . objects . get ( pk = organisation_id ) [EOL] return { [string] : org } [EOL] [EOL] [EOL] class OrganisationFetchXml ( View ) : [EOL] def get ( self , request , organisation_id ) : [EOL] raise NotImplementedError [EOL] [EOL] [EOL] class OrganisationFetchJson ( View ) : [EOL] def get ( self , request , organisation_id ) : [EOL] raise NotImplementedError [EOL] [EOL] [EOL] class OrganisationRefresh ( View ) : [EOL] def get ( self , request ) : [EOL] raise NotImplementedError [EOL] [EOL] [EOL] class OrganisationDelete ( TemplateView ) : [EOL] def get ( self , request ) : [EOL] raise NotImplementedError [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any , List [EOL] import typing [EOL] import iati_post [EOL] import requesters [EOL] import asyncio [EOL] import builtins [EOL] import logging [EOL] import asyncio [EOL] import logging [EOL] from typing import List [EOL] from xml . parsers . expat import ExpatError [EOL] [EOL] from aiohttp import ClientSession , TCPConnector [EOL] from channels . db import database_sync_to_async [EOL] [EOL] from iati_fetch . models import Activity , ActivityFormatException , Organisation [EOL] [EOL] from . import requesters [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] async def fetch_requests ( * requests , semaphore_count = [number] , cached = True , uncached = True ) : [EOL] sem = asyncio . Semaphore ( semaphore_count ) [EOL] tasks = [ ] [EOL] print ( len ( requests ) ) [EOL] [EOL] async def only_uncached_requests ( ) : [EOL] returned = [ ] [EOL] for r in requests : [EOL] include = await r . is_cached ( ) [EOL] print ( include ) [EOL] if not include : [EOL] returned . append ( r ) [EOL] return returned [EOL] [EOL] async def only_cached_requests ( ) : [EOL] returned = [ ] [EOL] for r in requests : [EOL] include = await r . is_cached ( ) [EOL] if include : [EOL] returned . append ( r ) [EOL] return returned [EOL] [EOL] if not cached : [EOL] requests = await only_uncached_requests ( ) [EOL] if not uncached : [EOL] requests = await only_cached_requests ( ) [EOL] [EOL] async with ClientSession ( connector = TCPConnector ( ssl = False ) ) as session : [EOL] for request in requests : [EOL] tasks . append ( request . bound_get ( sem , session = session ) ) [EOL] task_count = len ( tasks ) [EOL] print ( f" [string] { task_count } [string] " ) [EOL] await asyncio . gather ( * tasks ) [EOL] return requests [EOL] [EOL] [EOL] async def organisation_requests_list ( organisation_abbreviations ) : [EOL] return [ requesters . OrganisationRequestDetail ( organisation_handle = abbr ) for abbr in organisation_abbreviations ] [EOL] [EOL] [EOL] async def organisation_requests_fetch ( organisations ) : [EOL] await fetch_requests ( * organisations ) [EOL] [EOL] [EOL] async def xml_requests_list ( organisations ) : [EOL] [docstring] [EOL] requests_list = [ ] [EOL] async with ClientSession ( connector = TCPConnector ( ssl = False ) ) as session : [EOL] for detail_request in organisations : [EOL] xml_requests = await detail_request . iati_xml_requests ( session = session ) [EOL] for xml_request in xml_requests : [EOL] assert xml_request . organisation_handle [EOL] requests_list . append ( xml_request ) [EOL] [EOL] return requests_list [EOL] [EOL] [EOL] async def xml_requests_fetch ( requests_list ) : [EOL] return await fetch_requests ( * requests_list ) [EOL] [EOL] [EOL] async def xml_requests_get ( organisations = None ) : [EOL] [docstring] [EOL] logger . info ( [string] ) [EOL] if not organisations : [EOL] orl = requesters . OrganisationRequestList ( ) [EOL] organisations = await orl . to_list ( session = None ) [EOL] logger . info ( [string] ) [EOL] organisation_requests = await organisation_requests_list ( organisations ) [EOL] logger . info ( [string] ) [EOL] await organisation_requests_fetch ( organisation_requests ) [EOL] logger . info ( [string] ) [EOL] xml_requests = await xml_requests_list ( organisation_requests ) [EOL] logger . info ( [string] ) [EOL] [comment] [EOL] logger . info ( [string] ) [EOL] [EOL] xml_requests . reverse ( ) [EOL] return xml_requests [EOL] [EOL] [EOL] async def xml_requests_process ( organisations = None , include_activities = True , include_organisations = True ) : [EOL] [comment] [EOL] xml_requests = await xml_requests_get ( organisations ) [EOL] logger . info ( [string] ) [EOL] for req in xml_requests : [EOL] [comment] [EOL] activity_elements = [ ] [EOL] organisation_elements = [ ] [EOL] [EOL] if include_activities : [EOL] activity_elements = await req . activities ( ) [EOL] if activity_elements : [EOL] try : [EOL] logger . info ( f" [string] { req }" ) [EOL] await database_sync_to_async ( Activity . from_xml ) ( activity_elements ) [EOL] except ActivityFormatException : [EOL] logger . error ( [string] , activity_elements ) [EOL] logger . error ( [string] , req ) [EOL] except ( ExpatError , TypeError ) as e : [EOL] logger . error ( [string] , e , req ) [EOL] raise [EOL] pass [EOL] if include_organisations : [EOL] logger . info ( f" [string] { req }" ) [EOL] organisation_elements = await req . organisations ( ) [EOL] if organisation_elements : [EOL] try : [EOL] await database_sync_to_async ( Organisation . from_xml ) ( organisation_elements , abbr = req . organisation_handle ) [EOL] except KeyError : [EOL] logger . error ( [string] , organisation_elements ) [EOL] logger . error ( [string] , req ) [EOL] raise [EOL] except ( ExpatError , TypeError ) as e : [EOL] logger . error ( [string] , e , req ) [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Union , Dict , Type , List , Any [EOL] import typing [EOL] import iati_post [EOL] import builtins [EOL] import logging [EOL] from __future__ import annotations [EOL] [EOL] import logging [EOL] from typing import Tuple , Union [EOL] [EOL] from django . contrib . postgres . fields import JSONField [EOL] from django . db import IntegrityError , models [EOL] from django . utils import timezone [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class OrganisationAbbreviation ( models . Model ) : [EOL] abbreviation = models . TextField ( primary_key = True ) [EOL] withdrawn = models . BooleanField ( default = False ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . abbreviation [EOL] [EOL] [EOL] class Organisation ( models . Model ) : [EOL] [EOL] id = models . TextField ( primary_key = True ) [EOL] element = JSONField ( null = True ) [comment] [EOL] abbreviation = models . OneToOneField ( OrganisationAbbreviation , on_delete = models . CASCADE ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . id [EOL] [EOL] @ classmethod def from_xml ( cls , organisation_element , abbr , update = False , attempt = [number] , ) : [EOL] assert abbr [EOL] if isinstance ( organisation_element , list ) : [EOL] for child_element in organisation_element : [EOL] return cls . from_xml ( child_element , abbr , update ) [EOL] return [EOL] if [string] not in organisation_element : [EOL] [EOL] [comment] [EOL] if [string] in organisation_element : [EOL] logger . error ( [string] ) [EOL] Activity . from_xml ( organisation_element ) [EOL] return [EOL] [EOL] logger . error ( [string] , str ( organisation_element ) [ : [number] ] ) [EOL] logger . error ( [string] ) [EOL] return [EOL] [EOL] pk = organisation_element [ [string] ] [EOL] [EOL] exists = cls . objects . filter ( pk = pk ) . exists ( ) [EOL] [EOL] if exists and not update : [EOL] logger . debug ( f" [string] { pk }" ) [EOL] return [EOL] [EOL] ab_instance = OrganisationAbbreviation . objects . get_or_create ( pk = abbr ) [ [number] ] [EOL] try : [EOL] o , _created = cls . objects . get_or_create ( pk = pk , abbreviation = ab_instance , defaults = dict ( element = organisation_element ) , ) [EOL] except IntegrityError : [EOL] if attempt < [number] : [EOL] attempt += [number] [EOL] return cls . from_xml ( organisation_element , abbr , update , attempt = attempt ) [EOL] logger . error ( [string] ) [EOL] return cls . objects . filter ( pk = pk ) . first ( ) [EOL] if _created : [EOL] logger . debug ( f" [string] { o }" ) [EOL] if not _created : [EOL] logger . debug ( f" [string] { o }" ) [EOL] o . iatiorganisation = organisation_element [EOL] o . save ( ) [EOL] return o [EOL] [EOL] [EOL] class ActivityFormatException ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class ActivityLinkedModel ( models . Model ) : [EOL] activity = models . ForeignKey ( [string] , on_delete = models . CASCADE ) [EOL] element = JSONField ( db_index = True , blank = True , null = True ) [EOL] [EOL] class Meta : [EOL] abstract = True [EOL] [EOL] @ classmethod def from_xml ( cls , activity_id , element_list ) : [EOL] for e in element_list : [EOL] cls . objects . create ( activity_id = activity_id , element = e ) [EOL] [EOL] [EOL] class Transaction ( ActivityLinkedModel ) : [EOL] [EOL] activity = models . ForeignKey ( [string] , on_delete = models . CASCADE ) [EOL] element = JSONField ( db_index = True , blank = True , null = True ) [EOL] [EOL] [comment] [EOL] ref = JSONField ( blank = True , null = True ) [EOL] description = JSONField ( blank = True , null = True ) [EOL] [EOL] @ classmethod def from_xml ( cls , activity_id , transactions ) : [EOL] cls . objects . filter ( activity_id = activity_id ) . delete ( ) [EOL] for t in transactions : [EOL] try : [EOL] transaction_ref = t . pop ( [string] , None ) [EOL] transaction_description = t . pop ( [string] , None ) [EOL] cls . objects . create ( activity_id = activity_id , element = t , ref = transaction_ref , description = transaction_description , ) [EOL] except BaseException : [EOL] logger . error ( [string] , (t) , exc_info = [number] ) [EOL] raise [EOL] [EOL] [EOL] class ActivityNarrative ( models . Model ) : [EOL] [docstring] [EOL] [EOL] activity = models . ForeignKey ( [string] , on_delete = models . CASCADE ) [EOL] path = models . TextField ( blank = True , null = True ) [EOL] lang = models . TextField ( blank = True , null = True ) [EOL] text = models . TextField ( blank = True , null = True ) [EOL] [EOL] [EOL] class Budget ( ActivityLinkedModel ) : [EOL] pass [EOL] [EOL] [EOL] class Result ( ActivityLinkedModel ) : [EOL] pass [EOL] [EOL] [EOL] class DocumentLink ( ActivityLinkedModel ) : [EOL] pass [EOL] [EOL] [EOL] class Activity ( models . Model ) : [EOL] [EOL] identifier = models . TextField ( primary_key = True ) [EOL] element = JSONField ( db_index = True , blank = True , null = True ) [EOL] [EOL] def save_narratives ( self , narratives , activity_element ) : [EOL] [EOL] [comment] [EOL] narrative_instances = [ ] [EOL] for path , text_or_items in narratives . items ( ) : [EOL] for text_item in text_or_items : [EOL] if text_item is None : [EOL] logger . debug ( [string] ) [EOL] continue [EOL] text = None [EOL] lang = None [EOL] [EOL] if isinstance ( text_item , str ) : [EOL] text = text_item [EOL] lang = activity_element . get ( [string] , None ) [EOL] elif isinstance ( text_item , dict ) : [EOL] lang = text_item . get ( [string] , None ) [EOL] text = text_item . get ( [string] , None ) [EOL] [EOL] if not lang : [EOL] logger . debug ( [string] ) [EOL] lang = [string] [EOL] [EOL] if text : [EOL] narrative_instances . append ( ActivityNarrative ( activity_id = self . pk , lang = lang , text = text ) ) [EOL] [EOL] else : [EOL] [comment] [EOL] logger . debug ( [string] ) [EOL] continue [EOL] [EOL] ActivityNarrative . objects . bulk_create ( narrative_instances ) [EOL] [EOL] @ staticmethod def _validate_activity_xml ( activity_element ) : [EOL] if not isinstance ( activity_element , dict ) : [EOL] raise ActivityFormatException ( [string] , type ( activity_element ) , ) [EOL] if [string] not in activity_element : [EOL] raise ActivityFormatException ( [string] ) [EOL] [EOL] @ staticmethod def _iid ( activity_element ) : [EOL] iid = activity_element [ [string] ] [EOL] if not isinstance ( iid , str ) : [EOL] raise ActivityFormatException ( [string] ) [EOL] if iid == [string] : [EOL] raise ActivityFormatException ( [string] ) [EOL] return iid [EOL] [EOL] @ classmethod def from_xml ( cls , activity_element , update = True ) : [EOL] def find_narratives ( element , path , narratives = { } ) : [EOL] [docstring] [EOL] for k , v in element . items ( ) : [EOL] if k == [string] : [EOL] narratives [ f"{ path } [string] { k } [string] " ] = element . pop ( k ) [EOL] elif isinstance ( v , dict ) : [EOL] narratives . update ( find_narratives ( v , f"{ path } [string] { k } [string] " , narratives ) ) [EOL] elif isinstance ( v , list ) : [EOL] for index , _element in enumerate ( v ) : [EOL] narratives . update ( find_narratives ( _element , f"{ path } [string] { k } [string] { index } [string] " , narratives ) ) [EOL] return narratives [EOL] [EOL] [comment] [EOL] if isinstance ( activity_element , list ) : [EOL] for child_element in activity_element : [EOL] cls . from_xml ( child_element ) [EOL] return [EOL] [EOL] cls . _validate_activity_xml ( activity_element ) [EOL] iid = cls . _iid ( activity_element ) [EOL] [EOL] [comment] [EOL] transactions = activity_element . pop ( [string] , [ ] ) [EOL] [EOL] [comment] [EOL] budget = activity_element . pop ( [string] , [ ] ) [EOL] doclink = activity_element . pop ( [string] , [ ] ) [EOL] result = activity_element . pop ( [string] , [ ] ) [EOL] [EOL] narratives = find_narratives ( activity_element , [string] ) [EOL] [EOL] [comment] [EOL] exists = cls . objects . filter ( pk = iid ) . exists ( ) [EOL] if cls . objects . filter ( pk = iid ) . exists ( ) and not update : [EOL] logger . debug ( f" [string] { iid }" ) [EOL] return [EOL] [EOL] elif exists : [EOL] cls . objects . filter ( pk = iid ) . update ( element = activity_element ) [EOL] logger . debug ( f" [string] { iid }" ) [EOL] [EOL] else : [EOL] try : [EOL] cls . objects . create ( pk = iid , element = activity_element ) [EOL] logger . debug ( f" [string] { iid }" ) [EOL] except IntegrityError : [EOL] [docstring] [EOL] try : [EOL] cls . objects . create ( pk = iid , element = activity_element ) [EOL] except IntegrityError as e : [EOL] logger . error ( [string] , e ) [EOL] except Exception as e : [EOL] logger . error ( [string] , e ) [EOL] logger . error ( [string] , activity_element ) [EOL] raise [EOL] [EOL] [comment] [EOL] if not cls . objects . filter ( pk = iid ) . exists ( ) : [EOL] logger . error ( [string] , iid ) [EOL] return [EOL] [EOL] [comment] [EOL] instance = cls . objects . filter ( pk = iid ) . get ( ) [EOL] Transaction . from_xml ( iid , transactions ) [EOL] Budget . from_xml ( iid , budget ) [EOL] DocumentLink . from_xml ( iid , doclink ) [EOL] Result . from_xml ( iid , result ) [EOL] instance . save_narratives ( narratives , activity_element ) [EOL] [EOL] [EOL] class CodelistManager ( models . Manager ) : [EOL] def names ( self ) : [EOL] return self . get_queryset ( ) . values_list ( [string] , flat = True ) [EOL] [EOL] def get_by_name ( self , name ) : [EOL] return self . get_queryset ( ) . get ( ** { [string] : name } ) [EOL] [EOL] [EOL] class Codelist ( models . Model ) : [EOL] [docstring] [EOL] [EOL] element = JSONField ( null = True ) [EOL] objects = CodelistManager ( ) [EOL] [EOL] @ classmethod def from_dict ( cls , element ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] codelist = element [ [string] ] [EOL] codelist_wrapper = codelist . pop ( [string] ) [EOL] codelists = codelist_wrapper [ [string] ] [EOL] [EOL] [comment] [EOL] if isinstance ( codelists , dict ) : [EOL] codelists = [ codelists ] [EOL] [EOL] instance , _ = cls . objects . get_or_create ( element = codelist ) [EOL] CodelistItem . objects . bulk_create ( [ CodelistItem ( element = item , codelist = instance ) for item in codelists ] ) [EOL] logger . debug ( [string] , instance . element [ [string] ] , len ( codelists ) , ) [EOL] [EOL] [EOL] class CodelistItemManager ( models . Manager ) : [EOL] def by_name ( self , name ) : [EOL] return self . get_queryset ( ) . filter ( ** { [string] : name } ) [EOL] [EOL] def withdrawn ( self ) : [EOL] [docstring] [EOL] return ( self . get_queryset ( ) . filter ( ** { [string] : False } ) . select_related ( [string] ) ) [EOL] [EOL] [EOL] class CodelistItem ( models . Model ) : [EOL] element = JSONField ( null = True ) [EOL] codelist = models . ForeignKey ( Codelist , on_delete = models . CASCADE ) [EOL] objects = CodelistItemManager ( ) [EOL] [EOL] @ property def name ( self ) : [EOL] try : [EOL] narrative = self . element [ [string] ] [ [string] ] [EOL] except KeyError : [EOL] logger . warn ( [string] ) [EOL] return [string] [EOL] [EOL] if isinstance ( narrative , str ) : [EOL] return narrative [EOL] elif isinstance ( narrative , list ) : [EOL] return narrative [ [number] ] [EOL] else : [EOL] logger . warn ( [string] ) [EOL] return [string] [EOL] [EOL] [EOL] class Request ( models . Model ) : [EOL] request_hash = models . TextField ( primary_key = True ) [EOL] [EOL] [EOL] class RequestCacheRecord ( models . Model ) : [EOL] request = models . ForeignKey ( Request , on_delete = models . CASCADE ) [EOL] when = models . DateTimeField ( ) [EOL] response_code = models . IntegerField ( ) [EOL] exception = models . TextField ( ) [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] self . when = timezone . now ( ) . date ( ) [EOL]	
[comment] [EOL] [EOL] from typing import Tuple , Union , Dict , List , Set , Any [EOL] import typing [EOL] import builtins [EOL] import logging [EOL] import logging [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def make_hashable ( o ) : [EOL] if isinstance ( o , ( tuple , list ) ) : [EOL] return tuple ( ( make_hashable ( e ) for e in o ) ) [EOL] [EOL] if isinstance ( o , dict ) : [EOL] return tuple ( sorted ( ( k , make_hashable ( v ) ) for k , v in o . items ( ) ) ) [EOL] [EOL] if isinstance ( o , ( set , frozenset ) ) : [EOL] return tuple ( sorted ( make_hashable ( e ) for e in o ) ) [EOL] [EOL] return o [EOL] [EOL] [EOL] def request_hash ( params = None , url = [string] , method = [string] , ** kwargs ) : [EOL] dict_to_hash = { [string] : url , [string] : method } [EOL] if params : [EOL] dict_to_hash . update ( params ) [EOL] rhash = make_hashable ( dict_to_hash ) [EOL] logger . debug ( [string] , dict_to_hash , rhash ) [EOL] return rhash [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] o = dict ( x = [number] , b = [number] , c = [ [number] , [number] , [number] ] , d = { [number] , [number] } ) [EOL] o2 = dict ( x = [number] , d = { [number] , [number] } , b = [number] , c = [ [number] , [number] , [number] ] ) [EOL] print ( make_hashable ( o ) ) [EOL] [comment] [EOL] print ( make_hashable ( [number] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.tuple$ 0 $typing.Dict[builtins.str,typing.Union[typing.List[builtins.int],typing.Set[builtins.int],builtins.int]]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[builtins.int],typing.Set[builtins.int],builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[builtins.int],typing.Set[builtins.int],builtins.int]]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[builtins.int],typing.Set[builtins.int],builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[builtins.int],typing.Set[builtins.int],builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[builtins.int],typing.Set[builtins.int],builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[builtins.int],typing.Set[builtins.int],builtins.int]]$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[builtins.int],typing.Set[builtins.int],builtins.int]]$ 0 0 0 0 $builtins.tuple$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[builtins.int],typing.Set[builtins.int],builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[builtins.int],typing.Set[builtins.int],builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[builtins.int],typing.Set[builtins.int],builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . DeleteModel ( name = [string] ) , migrations . RemoveField ( model_name = [string] , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] import django . contrib . postgres . fields . jsonb [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . AlterField ( model_name = [string] , name = [string] , field = django . contrib . postgres . fields . jsonb . JSONField ( blank = True , db_index = True , null = True ) , ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] import django . contrib . postgres . fields . jsonb [EOL] import django . db . models . deletion [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] ) , migrations . RemoveField ( model_name = [string] , name = [string] ) , migrations . RemoveField ( model_name = [string] , name = [string] ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] , ) , ) , ( [string] , django . contrib . postgres . fields . jsonb . JSONField ( blank = True , null = True ) , ) , ( [string] , models . TextField ( blank = True , null = True ) ) , ( [string] , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = [string] , ) , ) , ] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . DeleteModel ( name = [string] ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] import builtins [EOL] import django . contrib . postgres . fields . hstore [EOL] import django . contrib . postgres . fields . jsonb [EOL] from django . contrib . postgres . operations import HStoreExtension [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] initial = True [EOL] [EOL] dependencies = [ ] [EOL] [EOL] operations = [ HStoreExtension ( ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . TextField ( primary_key = True , serialize = False ) ) ] , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] , ) , ) , ( [string] , models . CharField ( choices = [ ( [string] , [string] ) , ( [string] , [string] ) ] , default = [string] , max_length = [number] , ) , ) , ( [string] , django . contrib . postgres . fields . hstore . HStoreField ( null = True ) , ) , ( [string] , models . URLField ( ) ) , ( [string] , models . CharField ( blank = True , choices = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ] , default = [string] , max_length = [number] , null = True , ) , ) , ( [string] , models . NullBooleanField ( default = None ) ) , ( [string] , models . TextField ( blank = True , null = True ) ) , ( [string] , django . contrib . postgres . fields . jsonb . JSONField ( blank = True , null = True ) , ) , ( [string] , models . TextField ( blank = True , null = True ) ) , ] , options = { [string] : { ( [string] , [string] , [string] ) } } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.list
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] import django . contrib . postgres . fields . jsonb [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] ) , migrations . AddField ( model_name = [string] , name = [string] , field = django . contrib . postgres . fields . jsonb . JSONField ( blank = True , null = True ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] import django . contrib . postgres . fields . jsonb [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] , ) , ) , ( [string] , django . contrib . postgres . fields . jsonb . JSONField ( null = True ) ) , ] , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] , ) , ) , ( [string] , django . contrib . postgres . fields . jsonb . JSONField ( null = True ) ) , ] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . TextField ( primary_key = True , serialize = False ) ) ] , ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] import django . contrib . postgres . fields . jsonb [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] , ) , ) , ( [string] , models . TextField ( ) ) , ( [string] , django . contrib . postgres . fields . jsonb . JSONField ( ) ) , ] , ) , migrations . DeleteModel ( name = [string] ) , migrations . AddField ( model_name = [string] , name = [string] , field = django . contrib . postgres . fields . jsonb . JSONField ( default = { } ) , preserve_default = False , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . test import TestCase [EOL] [EOL] from iati_fetch import requesters [EOL] [EOL] [EOL] class ImportActivity ( TestCase ) : [EOL] def test_animals_can_speak ( self ) : [EOL] [docstring] [EOL] pass [EOL] url = [string] [EOL] requesters . IatiXMLRequest ( url = url ) [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] from iati_fetch import make_hashable [EOL] [EOL] [comment] [EOL] [EOL] [EOL] class HashRequestsCase ( TestCase ) : [EOL] def test_default_request_hash ( self ) : [EOL] [EOL] self . assertEqual ( make_hashable . request_hash ( ) , ( ( [string] , [string] ) , ( [string] , [string] ) ) , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] from channels . testing import WebsocketCommunicator [EOL] [EOL] from iati_post . routing import application [EOL] [EOL] [EOL] @ pytest . mark . asyncio async def test_echo ( ) : [EOL] [docstring] [EOL] communicator = WebsocketCommunicator ( application , [string] ) [EOL] connected , subprotocol = await communicator . connect ( ) [EOL] assert connected [EOL] [comment] [EOL] await communicator . send_to ( text_data = [string] ) [EOL] response = await communicator . receive_from ( ) [EOL] assert response . startswith ( [string] ) [EOL] [comment] [EOL] await communicator . disconnect ( ) [EOL] [EOL] [EOL] @ pytest . mark . asyncio async def test_fetch_organisation_list ( ) : [EOL] [docstring] [EOL] communicator = WebsocketCommunicator ( application , [string] ) [EOL] connected , subprotocol = await communicator . connect ( ) [EOL] assert connected [EOL] [comment] [EOL] await communicator . send_to ( text_data = [string] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] await communicator . disconnect ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any , List [EOL] import typing [EOL] import asyncio [EOL] [EOL] from aiohttp import ClientSession , TCPConnector [EOL] from asgiref . sync import async_to_sync [EOL] from django . test import TestCase [EOL] [EOL] from iati_fetch import requesters , tasks [EOL] [EOL] [comment] [EOL] [EOL] [EOL] class RequestsTestCase ( TestCase ) : [EOL] def test_organisation_list ( self ) : [EOL] [docstring] [EOL] req = requesters . OrganisationRequestList ( ) [EOL] result = async_to_sync ( req . get ) ( refresh = False ) [EOL] self . assertTrue ( isinstance ( result [ [string] ] , list ) ) [EOL] [docstring] [EOL] result_again = async_to_sync ( req . get ) ( refresh = False ) [EOL] self . assertTrue ( isinstance ( result_again [ [string] ] , list ) ) [EOL] [EOL] def test_fetch_organisation ( self ) : [EOL] [docstring] [EOL] req = requesters . OrganisationRequestDetail ( organisation_handle = [string] ) [EOL] result = async_to_sync ( req . get ) ( refresh = False , internal_session = True ) [EOL] self . assertTrue ( isinstance ( result , dict ) ) [EOL] [EOL] @ async_to_sync async def test_fetch_many_xmls ( self ) : [EOL] [docstring] [EOL] await tasks . xml_requests_get ( organisations = [ [string] ] ) [EOL] [EOL] @ async_to_sync async def test_create_instances_from_iatixml ( self ) : [EOL] await tasks . xml_requests_get ( organisations = [ [string] ] ) [EOL] [EOL] def test_fetch_organisation_xml ( self ) : [EOL] [docstring] [EOL] url = [string] [EOL] req = requesters . IatiXMLRequest ( url = url ) [EOL] async_to_sync ( req . get ) ( refresh = False , internal_session = True ) [EOL] async_to_sync ( req . organisations ) ( ) [EOL] [EOL] def test_activities_xml ( self ) : [EOL] [docstring] [EOL] url = [string] [EOL] requester = requesters . IatiXMLRequest ( url = url ) [EOL] async_to_sync ( requester . get ) ( refresh = False , internal_session = True ) [EOL] async_to_sync ( requester . activities ) ( ) [EOL] [EOL] def test_save_one_activity ( self ) : [EOL] import json [EOL] [EOL] url = [string] [EOL] requester = requesters . IatiXMLRequest ( url = url ) [EOL] async_to_sync ( requester . get ) ( refresh = False , internal_session = True ) [EOL] activities = async_to_sync ( requester . activities ) ( ) [EOL] json . dumps ( activities [ [number] ] ) [EOL] async_to_sync ( requester . to_instances ) ( ) [EOL] [EOL] @ async_to_sync async def test_multiple_get_one_session ( self ) : [EOL] url_list = { [string] : requesters . IatiXMLRequest ( url = [string] ) , [string] : requesters . IatiXMLRequest ( url = [string] ) , [string] : requesters . BaseRequest ( url = [string] ) , [string] : requesters . BaseRequest ( url = [string] ) , } [EOL] [EOL] for i in url_list . values ( ) : [EOL] i . drop_sync ( ) [EOL] [EOL] async with ClientSession ( connector = TCPConnector ( ssl = False ) ) as session : [EOL] coros = [ i . get ( session = session ) for i in url_list . values ( ) ] [EOL] await asyncio . gather ( * coros ) [EOL] [EOL] @ async_to_sync async def test_fetch_codelists ( self ) : [EOL] [docstring] [EOL] await requesters . IatiCodelistListRequest ( ) . to_instances ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0