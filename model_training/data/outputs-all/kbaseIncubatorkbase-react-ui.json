	0
import builtins [EOL] from typing import Dict , Any [EOL] import jinja2 [EOL] import src [EOL] import typing [EOL] [docstring] [EOL] import sanic [EOL] import traceback [EOL] import jinja2 [EOL] [EOL] from src . utils . config import ServerConf [EOL] [EOL] _CONF = ServerConf ( ) [EOL] [EOL] [comment] [EOL] app = sanic . Sanic ( [string] , strict_slashes = False ) [EOL] app . config . URL_PREFIX = _CONF . url_prefix [EOL] app . config . KBASE_ENDPOINT = _CONF . kbase_endpoint [EOL] app . config . KBASE_UI_ROOT = _CONF . kbase_root [EOL] app . static ( [string] , _CONF . app_root_path + [string] ) [EOL] [EOL] [comment] [EOL] jinja_env = jinja2 . Environment ( loader = jinja2 . PackageLoader ( [string] , [string] ) , autoescape = jinja2 . select_autoescape ( [ [string] ] ) ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) async def js ( req ) : [EOL] [docstring] [EOL] return await sanic . response . file ( _CONF . app_root_path + [string] , headers = { [string] : [string] , [string] : [string] } ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) async def root ( request ) : [EOL] return sanic . response . redirect ( _url_for ( [string] ) ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) async def newnav_root ( request ) : [EOL] return sanic . response . redirect ( _url_for ( [string] ) ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) @ app . route ( [string] , methods = [ [string] ] ) async def dashboard_newnav ( request , suffix = None ) : [EOL] [docstring] [EOL] opts = { [string] : [string] , [string] : [string] } [EOL] return _render_template ( [string] , opts ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) @ app . route ( [string] , methods = [ [string] ] ) async def dashboard ( request , suffix = None ) : [EOL] [docstring] [EOL] opts = { [string] : [string] } [EOL] return _render_template ( [string] , opts ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) @ app . route ( [string] , methods = [ [string] ] ) async def notifications_newnav ( request , suffix = None ) : [EOL] [docstring] [EOL] opts = { [string] : [string] , [string] : [string] } [EOL] return _render_template ( [string] , opts ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) async def catalog_root ( request ) : [EOL] return sanic . response . redirect ( _url_for ( [string] , suffix = [string] ) ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) async def catalog_newnav ( request , suffix = None ) : [EOL] [docstring] [EOL] opts = { [string] : [string] , [string] : [string] } [EOL] return _render_template ( [string] , opts ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) @ app . route ( [string] , methods = [ [string] ] ) async def search_newnav ( request , suffix = None ) : [EOL] [docstring] [EOL] opts = { [string] : [string] , [string] : [string] } [EOL] return _render_template ( [string] , opts ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) @ app . route ( [string] , methods = [ [string] ] ) async def account_newnav ( request , suffix = None ) : [EOL] [docstring] [EOL] opts = { [string] : [string] , [string] : [string] } [EOL] return _render_template ( [string] , opts ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) @ app . route ( [string] , methods = [ [string] ] ) async def orgs_newnav ( request , suffix = None ) : [EOL] [docstring] [EOL] opts = { [string] : [string] , [string] : [string] } [EOL] return _render_template ( [string] , opts ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) async def newnav_catch_all ( request , suffix = None ) : [EOL] return _render_template ( [string] , { [string] : [string] } , status = [number] ) [EOL] [EOL] [EOL] @ app . exception ( sanic . exceptions . NotFound ) async def page_not_found ( request , err ) : [EOL] [docstring] [EOL] print ( [string] , request . path ) [EOL] return _render_template ( [string] , { [string] : [string] } , status = [number] ) [EOL] [EOL] [EOL] @ app . exception ( Exception ) async def server_error ( request , err ) : [EOL] [docstring] [EOL] print ( [string] * [number] ) [EOL] print ( [string] ) [EOL] print ( [string] * [number] ) [EOL] traceback . print_exc ( ) [EOL] print ( [string] * [number] ) [EOL] return _render_template ( [string] , status = [number] ) [EOL] [EOL] [EOL] def _url_for ( arg , * args , ** kwargs ) : [EOL] [docstring] [EOL] url = app . url_for ( arg , * args , ** kwargs ) [EOL] [comment] [EOL] return _CONF . url_prefix + [string] + url . strip ( [string] ) [EOL] [EOL] [EOL] def _render_template ( path , args = None , status = [number] ) : [EOL] [docstring] [EOL] template = jinja_env . get_template ( path ) [EOL] if not args : [EOL] args = { } [EOL] args [ [string] ] = app [EOL] args [ [string] ] = _url_for [EOL] args . setdefault ( [string] , [string] ) [EOL] args . setdefault ( [string] , [string] ) [EOL] args [ [string] ] = _CONF . url_prefix + args [ [string] ] [EOL] html = template . render ( ** args ) [EOL] return sanic . response . html ( html , status = status ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] app . run ( host = [string] , port = _CONF . server_port , workers = _CONF . n_workers , access_log = _CONF . development , debug = _CONF . development , auto_reload = False ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jinja2.environment.Environment$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jinja2.environment.Environment$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] import os [EOL] [EOL] [EOL] class ServerConf : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] self . load_conf ( ) [EOL] [EOL] def load_conf ( self ) : [EOL] self . app_root_path = [string] [EOL] self . development = [string] in os . environ [EOL] self . server_port = os . environ . get ( [string] , [number] ) [EOL] self . n_workers = int ( os . environ . get ( [string] , [number] ) ) [EOL] self . url_prefix = os . environ . get ( [string] , [string] ) . strip ( [string] ) [EOL] if self . url_prefix and not self . url_prefix . startswith ( [string] ) : [EOL] self . url_prefix = [string] + self . url_prefix [EOL] self . kbase_endpoint = os . environ . get ( [string] , [string] ) . strip ( [string] ) [EOL] self . kbase_root = os . environ . get ( [string] , [string] ) . strip ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0