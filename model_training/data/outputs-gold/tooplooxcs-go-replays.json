import argparse [EOL] import logging [EOL] import logging [EOL] from argparse import ArgumentParser [EOL] from multiprocessing import Pool [EOL] [EOL] from backend import backend [EOL] [EOL] log = logging . getLogger ( ) [EOL] [EOL] parser = ArgumentParser ( ) [EOL] parser . add_argument ( [string] , [string] , action = [string] , help = [string] ) [EOL] parser . add_argument ( [string] , [string] , default = [string] , help = [string] ) [EOL] parser . add_argument ( [string] , [string] , default = [number] , help = [string] , type = int ) [EOL] parser . add_argument ( [string] , [string] , default = [number] , help = [string] , type = int ) [EOL] parser . add_argument ( [string] , help = [string] , default = [string] , choices = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] ) ) [EOL] [EOL] options = parser . parse_args ( ) [EOL] [EOL] logging . basicConfig ( level = getattr ( logging , options . log_level . upper ( ) , logging . INFO ) , format = [string] ) [EOL] [EOL] log . info ( [string] , options . listen , options . port ) [EOL] [EOL] with Pool ( options . pool ) as p : [EOL] backend ( p , host = options . listen , port = options . port , debug = options . debug ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $argparse.Namespace$ 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0
from typing import Any [EOL] import cachetools [EOL] import flask [EOL] import typing [EOL] import os [EOL] from uuid import uuid4 [EOL] import json [EOL] from multiprocessing import Pool [EOL] [EOL] from flask_socketio import SocketIO , emit , join_room [EOL] from flask import Flask , render_template , request , send_from_directory [EOL] from cachetools import LRUCache [EOL] [EOL] def render ( path , data ) : [EOL] from visualize . animator import Animator [EOL] [EOL] Animator ( data ) . create ( path ) [EOL] [EOL] def backend ( worker_pool , ** kwargs ) : [EOL] app = Flask ( __name__ ) [EOL] app . config [ [string] ] = os . environ [ [string] ] [EOL] socketio = SocketIO ( app ) [EOL] [EOL] buf = LRUCache ( [number] ) [EOL] [EOL] @ socketio . on ( [string] , namespace = [string] ) def on_message ( data ) : [EOL] if request . sid not in buf : [EOL] buf [ request . sid ] = [ ] [EOL] buf [ request . sid ] . append ( json . loads ( data ) ) [EOL] [EOL] @ socketio . on ( [string] , namespace = [string] ) def on_reset ( ) : [EOL] if request . sid in buf : [EOL] buf [ request . sid ] = [ ] [EOL] [EOL] @ app . route ( [string] ) def send_anim ( path ) : [EOL] return send_from_directory ( [string] , path ) [EOL] [EOL] @ app . route ( [string] ) def send_dist ( path ) : [EOL] return send_from_directory ( [string] , path ) [EOL] [EOL] @ socketio . on ( [string] , namespace = [string] ) def on_render ( ) : [EOL] if request . sid not in buf or buf [ request . sid ] == [ ] : [EOL] emit ( [string] , [string] ) [EOL] else : [EOL] room = str ( uuid4 ( ) ) [EOL] path = f" [string] { room } [string] " [EOL] join_room ( room ) [EOL] try : [EOL] res = worker_pool . apply_async ( func = render , args = ( path , buf [ request . sid ] , ) , error_callback = lambda x : socketio . emit ( [string] , [string] , room = room ) ) [EOL] res . get ( timeout = [number] ) [EOL] emit ( [string] , path ) , [EOL] except : [EOL] emit ( [string] , [string] ) [EOL] raise [EOL] return socketio . run ( app , ** kwargs ) [EOL] [EOL] if __name__ == [string] : [EOL] with Pool ( [number] ) as p : [EOL] backend ( p ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Dict , Any [EOL] import backend [EOL] import typing [EOL] import numpy as np [EOL] import matplotlib . pyplot as plt [EOL] from matplotlib . animation import FuncAnimation [EOL] from tqdm import tqdm [EOL] import json [EOL] import sys [EOL] [EOL] MAPS = [string] [EOL] [EOL] class Recording : [EOL] def __init__ ( self , stream ) : [EOL] self . stream = stream [EOL] self . ps = self . _ps ( ) [EOL] self . ts = self . _ts ( ) [EOL] self . user_ids = self . _user_ids ( ) [EOL] [EOL] self . header = self . _header ( ) [EOL] self . first_round_start = self . _round_start ( ) [EOL] self . first_round_end = self . _round_end ( ) [EOL] [EOL] self . footsteps = self . _footsteps ( ) [EOL] [EOL] def _ps ( self ) : [EOL] return [ data [ [string] ] for [ ev , data ] in self . stream if ev == [string] ] [EOL] [EOL] def _ts ( self ) : [EOL] return [ data [ [string] ] for [ ev , data ] in self . stream if data is not None and [string] in data ] [EOL] [EOL] def _user_ids ( self ) : [EOL] return list ( set ( [ data [ [string] ] for [ ev , data ] in self . stream if data is not None and [string] in data ] ) ) [EOL] [EOL] def _header ( self ) : [EOL] return [ data for ( ev , data ) in self . stream if ev == [string] ] [ [number] ] [EOL] [EOL] def _round_start ( self , round_num = [number] ) : [EOL] return [ data for ( ev , data ) in self . stream if ev == [string] ] [ round_num ] [EOL] [EOL] def _round_end ( self , round_num = [number] ) : [EOL] return [ data for ( ev , data ) in self . stream if ev == [string] ] [ round_num ] [EOL] [EOL] def _footsteps ( self ) : [EOL] return { data [ [string] ] : data for ( ev , data ) in self . stream if ev == [string] } [EOL] [EOL] [EOL] class UserColors : [EOL] def __init__ ( self , user_ids ) : [EOL] self . _mapping = { id : np . random . uniform ( low = [number] , high = [number] , size = [number] ) for id in user_ids } [EOL] [EOL] def get ( self , user_id ) : [EOL] return self . _mapping [ user_id ] [EOL] [EOL] class Extent : [EOL] def __init__ ( self , ps ) : [EOL] self . _ps = ps [EOL] [EOL] xs = self . _xs ( ) [EOL] ys = self . _ys ( ) [EOL] [EOL] self . min_x = min ( xs ) [EOL] self . max_x = max ( xs ) [EOL] self . min_y = min ( ys ) [EOL] self . max_y = max ( ys ) [EOL] [EOL] def _xs ( self ) : [EOL] return [ p [ [string] ] for p in self . _ps ] [EOL] [EOL] def _ys ( self ) : [EOL] return [ p [ [string] ] for p in self . _ps ] [EOL] [EOL] def tuple ( self ) : [EOL] return ( self . min_x , self . max_x , self . min_y , self . max_y ) [EOL] [EOL] class AnimationStream : [EOL] def __init__ ( self , footsteps , frames ) : [EOL] self . frames = frames [EOL] self . _footsteps = footsteps [EOL] self . keyframes = self . _keyframes ( ) [EOL] [EOL] def _keyframes ( self ) : [EOL] proto_keyframes = sorted ( list ( self . _footsteps . keys ( ) ) ) [EOL] keyframes = { } [EOL] last_idx = [number] [EOL] for x in self . frames : [EOL] keyframes [ x ] = [ ] [EOL] for idx in range ( last_idx , len ( proto_keyframes ) ) : [EOL] kf = proto_keyframes [ idx ] [EOL] if kf > x : [EOL] continue [EOL] last_idx = idx [EOL] keyframes [ x ] . append ( kf ) [EOL] return keyframes [EOL] [EOL] class Animator : [EOL] def __init__ ( self , stream ) : [EOL] self . _recording = Recording ( stream ) [EOL] self . _extent = Extent ( self . _recording . ps ) [EOL] self . _user_colors = UserColors ( self . _recording . user_ids ) [EOL] self . _animation_stream = AnimationStream ( frames = self . _frames , footsteps = self . _recording . footsteps ) [EOL] [EOL] @ property def _frames ( self ) : [EOL] return np . linspace ( self . _recording . first_round_start [ [string] ] , self . _recording . first_round_end [ [string] ] , [number] ) [EOL] [EOL] @ property def map_layout ( self ) : [EOL] map_name = self . _recording . header [ [string] ] [EOL] return f"{ MAPS } [string] { map_name } [string] " [EOL] [EOL] def create ( self , output_file ) : [EOL] img = plt . imread ( self . map_layout ) [EOL] fig , ax = plt . subplots ( ) [EOL] [EOL] ax . axis ( [string] ) [EOL] ax . imshow ( img , extent = self . _extent . tuple ( ) ) [EOL] [EOL] def init ( ) : [EOL] ax . set_xlim ( self . _extent . min_x , self . _extent . max_x ) [EOL] ax . set_ylim ( self . _extent . min_y , self . _extent . max_y ) [EOL] return [ ] [EOL] [EOL] def update ( frame ) : [EOL] if frame not in self . _animation_stream . keyframes : [EOL] return [ ] [EOL] for k in self . _animation_stream . keyframes [ frame ] : [EOL] data = self . _recording . footsteps [ k ] [EOL] position = data [ [string] ] [EOL] user_id = data [ [string] ] [EOL] ax . plot ( [ position [ [string] ] ] , [ position [ [string] ] ] , [string] , c = self . _user_colors . get ( user_id ) ) [EOL] return [ ] [EOL] [EOL] ani = FuncAnimation ( fig , update , frames = tqdm ( self . _animation_stream . frames ) , init_func = init , blit = True , interval = [number] , repeat = False ) [EOL] ani . save ( output_file ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.visualize.animator.Recording$ 0 0 0 0 0 0 0 0 $backend.visualize.animator.Extent$ 0 0 0 0 0 $backend.visualize.animator.Recording$ 0 0 0 0 0 0 $backend.visualize.animator.UserColors$ 0 0 0 0 0 $backend.visualize.animator.Recording$ 0 0 0 0 0 0 $backend.visualize.animator.AnimationStream$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.visualize.animator.Recording$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0