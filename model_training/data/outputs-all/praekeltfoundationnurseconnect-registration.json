from typing import Any [EOL] import typing [EOL] import cgi [EOL] [EOL] from fixtures import * [comment] [EOL] [EOL] [EOL] def mime_type ( content_type ) : [EOL] return cgi . parse_header ( content_type ) [ [number] ] [EOL] [EOL] [EOL] class TestHubContainer : [EOL] def test_db_tables_created ( self , ncreg_container , postgresql_container ) : [EOL] [docstring] [EOL] django_logs = ncreg_container . get_logs ( ) . decode ( [string] ) [EOL] assert [string] in django_logs [EOL] [EOL] psql_output = postgresql_container . exec_psql ( ( [string] [string] ) ) [EOL] count = int ( psql_output . output . strip ( ) ) [EOL] assert count > [number] [EOL] [EOL] def test_admin_page ( self , ncreg_container , postgresql_container ) : [EOL] [docstring] [EOL] client = ncreg_container . http_client ( ) [EOL] response = client . get ( [string] ) [EOL] [EOL] assert response . status_code == [number] [EOL] assert mime_type ( response . headers [ [string] ] ) == [string] [EOL] assert [string] in response . text [EOL] [EOL] def test_healthcheck ( self , ncreg_container , postgresql_container ) : [EOL] [docstring] [EOL] client = ncreg_container . http_client ( ) [EOL] response = client . get ( [string] , params = { [string] : [string] } ) [EOL] [EOL] assert response . status_code == [number] [EOL] assert mime_type ( response . headers [ [string] ] ) == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import os [EOL] [EOL] import sentry_sdk [EOL] from celery import Celery [EOL] from django . conf import settings [EOL] from sentry_sdk . integrations . celery import CeleryIntegration [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] app = Celery ( [string] ) [EOL] app . config_from_object ( [string] , namespace = [string] ) [EOL] app . autodiscover_tasks ( ) [EOL] [EOL] sentry_sdk . init ( dsn = settings . SENTRY_DSN , integrations = [ CeleryIntegration ( ) ] ) [EOL] [EOL] [EOL] @ app . task ( bind = True ) def debug_task ( self ) : [EOL] print ( [string] . format ( self . request ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple [EOL] import typing [EOL] from . celery import app as celery_app [EOL] [EOL] __all__ = ( [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import functools [EOL] [EOL] from django . core . exceptions import PermissionDenied [EOL] [EOL] [EOL] def internal_only ( view_func ) : [EOL] [docstring] [EOL] [EOL] @ functools . wraps ( view_func ) def wrapper ( request , * args , ** kwargs ) : [EOL] forwards = request . META . get ( [string] , [string] ) . split ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if len ( forwards ) > [number] : [EOL] raise PermissionDenied ( ) [EOL] return view_func ( request , * args , ** kwargs ) [EOL] [EOL] return wrapper [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] [docstring] [EOL] from django . contrib import admin [EOL] from django . urls import include , path [EOL] from django_prometheus . exports import ExportToDjangoView as metrics [EOL] from rest_framework . documentation import include_docs_urls [EOL] [EOL] from nurseconnect_registration . decorators import internal_only [EOL] [EOL] urlpatterns = [ path ( [string] , admin . site . urls ) , path ( [string] , internal_only ( metrics ) , name = [string] ) , path ( [string] , include ( ( [string] , [string] ) ) ) , path ( [string] , include ( [string] ) ) , path ( [string] , include_docs_urls ( title = [string] ) ) , path ( [string] , include ( ( [string] , [string] ) ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Any , Union , Tuple , Dict , List [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] import environ [EOL] import sentry_sdk [EOL] from sentry_sdk . integrations . django import DjangoIntegration [EOL] [EOL] env = environ . Env ( ) [EOL] [EOL] [comment] [EOL] BASE_DIR = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) [EOL] [EOL] STATIC_ROOT = os . path . join ( BASE_DIR , [string] ) [EOL] STATICFILES_DIRS = [ os . path . join ( BASE_DIR , [string] ) ] [EOL] STATICFILES_STORAGE = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] SECRET_KEY = env ( [string] , str , [string] ) [EOL] [EOL] [comment] [EOL] DEBUG = env ( [string] , bool , False ) [EOL] [EOL] ALLOWED_HOSTS = [ [string] ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] INSTALLED_APPS = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] MIDDLEWARE = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] ROOT_URLCONF = [string] [EOL] [EOL] TEMPLATES = [ { [string] : [string] , [string] : [ os . path . join ( BASE_DIR , [string] ) ] , [string] : True , [string] : { [string] : [ [string] , [string] , [string] , [string] , ] } , } ] [EOL] [EOL] WSGI_APPLICATION = [string] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] DATABASES = { [string] : env . db ( default = [string] , engine = [string] , ) } [EOL] [EOL] PROMETHEUS_EXPORT_MIGRATIONS = False [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] AUTH_PASSWORD_VALIDATORS = [ { [string] : [string] [string] } , { [string] : [string] } , { [string] : [string] } , { [string] : [string] } , ] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] LANGUAGE_CODE = [string] [EOL] [EOL] TIME_ZONE = [string] [EOL] [EOL] USE_I18N = True [EOL] [EOL] USE_L10N = True [EOL] [EOL] USE_TZ = True [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] STATIC_URL = [string] [EOL] [EOL] WATCHMAN_TOKENS = env ( [string] , str , [string] ) [EOL] WATCHMAN_TOKEN_NAME = [string] [EOL] WATCHMAN_CHECKS = ( [string] , ) [EOL] [EOL] REST_FRAMEWORK = { [string] : ( [string] , ) , [string] : ( [string] , [string] , ) , } [EOL] [EOL] SENTRY_DSN = env ( [string] , str , None ) [EOL] sentry_sdk . init ( dsn = SENTRY_DSN , integrations = [ DjangoIntegration ( ) ] ) [EOL] [EOL] RAPIDPRO_URL = env ( [string] , str , [string] ) [EOL] RAPIDPRO_TOKEN = env ( [string] , str , [string] ) [EOL] [EOL] WHATSAPP_URL = env ( [string] , str , [string] ) [EOL] WHATSAPP_TOKEN = env ( [string] , str , [string] ) [EOL] [EOL] OPENHIM_URL = env ( [string] , str , [string] ) [EOL] OPENHIM_USERNAME = env ( [string] , str , [string] ) [EOL] OPENHIM_PASSWORD = env ( [string] , str , [string] ) [EOL] OPENHIM_AUTH = ( OPENHIM_USERNAME , OPENHIM_PASSWORD ) [EOL] [EOL] CELERY_BROKER_URL = env ( [string] , str , [string] ) [EOL] [EOL] CLINIC_CODE_BLACKLIST = env ( [string] , list , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.List[builtins.str]],typing.List[builtins.str],builtins.bool,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Tuple[builtins.str],typing.Tuple[builtins.str,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0
from typing import Any , Dict , Tuple , Literal [EOL] import typing_extensions [EOL] import typing [EOL] from nurseconnect_registration . settings import * [comment] [EOL] [EOL] SECRET_KEY = [string] [EOL] [EOL] DATABASES = { [string] : env . db ( default = [string] ) } [comment] [EOL] [EOL] RAPIDPRO_URL = [string] [EOL] RAPIDPRO_TOKEN = [string] [EOL] [EOL] CELERY_TASK_ALWAYS_EAGER = True [EOL] [EOL] OPENHIM_URL = [string] [EOL] OPENHIM_USERNAME = [string] [EOL] OPENHIM_PASSWORD = [string] [EOL] OPENHIM_AUTH = ( OPENHIM_USERNAME , OPENHIM_PASSWORD ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . test import TestCase [EOL] from django . urls import reverse [EOL] [EOL] [EOL] class InternalOnlyTests ( TestCase ) : [EOL] def test_internal_access ( self ) : [EOL] [docstring] [EOL] url = reverse ( [string] ) [EOL] response = self . client . get ( url , HTTP_X_FORWARDED_FOR = [string] ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] [EOL] def test_external_access ( self ) : [EOL] [docstring] [EOL] url = reverse ( [string] ) [EOL] response = self . client . get ( url , HTTP_X_FORWARDED_FOR = [string] ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
from typing import Any , Optional , Union , Dict , List [EOL] import typing [EOL] import registrations [EOL] import json [EOL] import uuid [EOL] from datetime import datetime [EOL] from unittest import mock [EOL] from urllib . parse import urlencode [EOL] [EOL] import responses [EOL] from django . contrib . messages import get_messages [EOL] from django . test import TestCase [EOL] from django . urls import reverse [EOL] [EOL] from registrations . forms import RegistrationDetailsForm [EOL] from registrations . models import ReferralLink [EOL] from registrations . tasks import ( send_registration_to_openhim , send_registration_to_rapidpro , ) [EOL] [EOL] [EOL] class RegistrationDetailsTest ( TestCase ) : [EOL] def test_get_referral_link ( self ) : [EOL] [docstring] [EOL] referral = ReferralLink . objects . create ( msisdn = [string] ) [EOL] url = reverse ( [string] , args = [ referral . code ] ) [EOL] r = self . client . get ( url ) [EOL] self . assertTemplateUsed ( r , [string] ) [EOL] self . assertEqual ( self . client . session [ [string] ] , referral . msisdn ) [EOL] [EOL] def test_bad_referral_link ( self ) : [EOL] [docstring] [EOL] url = reverse ( [string] , args = [ [string] ] ) [EOL] r = self . client . get ( url ) [EOL] self . assertTemplateUsed ( r , [string] ) [EOL] self . assertNotIn ( [string] , self . client . session ) [EOL] [EOL] def test_get_form ( self ) : [EOL] [docstring] [EOL] url = reverse ( [string] ) [EOL] r = self . client . get ( url ) [EOL] self . assertTemplateUsed ( r , [string] ) [EOL] self . assertContains ( r , [string] ) [EOL] [EOL] @ responses . activate def test_msisdn_validation ( self ) : [EOL] [docstring] [EOL] responses . add ( responses . GET , [string] , json = { [string] : None , [string] : None , [string] : [ ] } , status = [number] , headers = { [string] : [string] } , ) [EOL] r = self . client . get ( reverse ( [string] ) ) [EOL] [EOL] form = RegistrationDetailsForm ( { [string] : [string] } , request = r . wsgi_request ) [EOL] form . is_valid ( ) [EOL] self . assertNotIn ( [string] , form . errors ) [EOL] self . assertEqual ( form . clean_msisdn ( ) , [string] ) [EOL] [EOL] [comment] [EOL] form = RegistrationDetailsForm ( { [string] : [string] } ) [EOL] form . is_valid ( ) [EOL] self . assertIn ( [string] , form . errors ) [EOL] [EOL] [comment] [EOL] form = RegistrationDetailsForm ( { [string] : [string] } ) [EOL] form . is_valid ( ) [EOL] self . assertIn ( [string] , form . errors ) [EOL] [EOL] [comment] [EOL] form = RegistrationDetailsForm ( { [string] : [string] } ) [EOL] form . is_valid ( ) [EOL] self . assertIn ( [string] , form . errors ) [EOL] [EOL] @ responses . activate def test_contact_exists ( self ) : [EOL] [docstring] [EOL] responses . add ( responses . GET , [string] + urlencode ( { [string] : [string] } ) , json = { [string] : None , [string] : None , [string] : [ ] } , status = [number] , headers = { [string] : [string] } , ) [EOL] r = self . client . get ( reverse ( [string] ) ) [EOL] [EOL] form = RegistrationDetailsForm ( { [string] : [string] } , request = r . wsgi_request ) [EOL] form . is_valid ( ) [EOL] self . assertNotIn ( [string] , form . errors ) [EOL] self . assertIn ( [string] , r . wsgi_request . session ) [EOL] self . assertEqual ( r . wsgi_request . session [ [string] ] , { } ) [EOL] [EOL] contact_data = { [string] : None , [string] : None , [string] : [ { [string] : [string] , [string] : [string] , [string] : None , [string] : [ [string] ] , [string] : [ { [string] : [string] , [string] : [string] , } ] , [string] : { } , [string] : None , [string] : None , [string] : [string] , [string] : [string] , } ] , } [EOL] [EOL] responses . add ( responses . GET , [string] + urlencode ( { [string] : [string] } ) , json = contact_data , status = [number] , headers = { [string] : [string] } , ) [EOL] [EOL] form = RegistrationDetailsForm ( { [string] : [string] } , request = r . wsgi_request ) [EOL] form . is_valid ( ) [EOL] self . assertIn ( [string] , form . errors ) [EOL] self . assertIn ( [string] , r . wsgi_request . session ) [EOL] self . assertIsNotNone ( r . wsgi_request . session [ [string] ] ) [EOL] [EOL] @ responses . activate def test_get_rp_contact_error ( self ) : [EOL] [docstring] [EOL] responses . add ( responses . GET , [string] + urlencode ( { [string] : [string] } ) , status = [number] , ) [EOL] [EOL] form = RegistrationDetailsForm ( { [string] : [string] } ) [EOL] with self . assertLogs ( level = [string] ) as logs : [EOL] form . is_valid ( ) [EOL] [ error_log ] = logs . output [EOL] self . assertIn ( [string] , error_log ) [EOL] self . assertIn ( [string] , form . errors ) [EOL] self . assertIn ( [string] , form . errors [ [string] ] , ) [EOL] [EOL] @ responses . activate def test_opted_out_contact_redirected_to_confirmation ( self ) : [EOL] [docstring] [EOL] contact_data = { [string] : None , [string] : None , [string] : [ { [string] : [string] , [string] : [string] , [string] : None , [string] : [ [string] ] , [string] : [ { [string] : [string] , [string] : [string] , } ] , [string] : { } , [string] : None , [string] : None , [string] : [string] , [string] : [string] , } ] , } [EOL] responses . add ( responses . GET , [string] + urlencode ( { [string] : [string] } ) , json = contact_data , status = [number] , headers = { [string] : [string] } , ) [EOL] [EOL] clinic_data = { [string] : [string] , [string] : [ ] , [string] : [ [ [string] , [string] , [string] ] ] , [string] : [number] , [string] : [number] , } [EOL] responses . add ( responses . GET , [string] + urlencode ( { [string] : [string] } ) , json = clinic_data , status = [number] , ) [EOL] [EOL] referral = ReferralLink . objects . create ( msisdn = [string] ) [EOL] url = reverse ( [string] , args = [ referral . code ] ) [EOL] r = self . client . post ( url , { [string] : [ [string] ] , [string] : [ [string] ] , [string] : [ [string] ] } , ) [EOL] self . assertRedirects ( r , reverse ( [string] ) ) [EOL] self . assertEqual ( self . client . session [ [string] ] , [string] ) [EOL] self . assertEqual ( self . client . session [ [string] ] , [string] ) [EOL] [EOL] @ responses . activate def test_clinic_code_validation ( self ) : [EOL] [docstring] [EOL] clinic_data = { [string] : [string] , [string] : [ ] , [string] : [ [ [string] , [string] , [string] ] ] , [string] : [number] , [string] : [number] , } [EOL] responses . add ( responses . GET , [string] + urlencode ( { [string] : [string] } ) , json = clinic_data , status = [number] , ) [EOL] r = self . client . get ( reverse ( [string] ) ) [EOL] [EOL] form = RegistrationDetailsForm ( { [string] : [string] } , request = r . wsgi_request ) [EOL] form . is_valid ( ) [EOL] self . assertNotIn ( [string] , form . errors ) [EOL] self . assertEqual ( form . clean_clinic_code ( ) , [string] ) [EOL] [EOL] [comment] [EOL] form = RegistrationDetailsForm ( { [string] : [string] } ) [EOL] form . is_valid ( ) [EOL] self . assertIn ( [string] , form . errors ) [EOL] [EOL] [comment] [EOL] clinic_data = { [string] : [string] , [string] : [ ] , [string] : [ ] , [string] : [number] , [string] : [number] } [EOL] responses . add ( responses . GET , [string] + urlencode ( { [string] : [string] } ) , json = clinic_data , status = [number] , ) [EOL] [EOL] form = RegistrationDetailsForm ( { [string] : [string] } , request = r . wsgi_request ) [EOL] form . is_valid ( ) [EOL] self . assertIn ( [string] , form . errors ) [EOL] [EOL] [comment] [EOL] form = RegistrationDetailsForm ( { [string] : [string] } , request = r . wsgi_request ) [EOL] form . is_valid ( ) [EOL] self . assertIn ( [string] , form . errors ) [EOL] [EOL] @ responses . activate def test_check_clinic_code_error ( self ) : [EOL] [docstring] [EOL] responses . add ( responses . GET , [string] , status = [number] ) [EOL] r = self . client . get ( reverse ( [string] ) ) [EOL] form = RegistrationDetailsForm ( { [string] : [string] } , request = r . wsgi_request ) [EOL] form . is_valid ( ) [EOL] self . assertIn ( [string] , form . errors ) [EOL] self . assertIn ( [string] , r . wsgi_request . session ) [EOL] self . assertEqual ( r . wsgi_request . session [ [string] ] , [number] ) [EOL] [EOL] @ responses . activate def test_check_clinic_code_multiple_errors ( self ) : [EOL] [docstring] [EOL] responses . add ( responses . GET , [string] , status = [number] ) [EOL] with self . assertLogs ( level = [string] ) as logs : [EOL] self . client . post ( reverse ( [string] ) , { [string] : [string] } ) [EOL] self . client . post ( reverse ( [string] ) , { [string] : [string] } ) [EOL] self . client . post ( reverse ( [string] ) , { [string] : [string] } ) [EOL] [ error_log ] = logs . output [EOL] self . assertIn ( [string] , error_log ) [EOL] [EOL] @ responses . activate def test_form_success ( self ) : [EOL] [docstring] [EOL] responses . add ( responses . GET , [string] , json = { [string] : None , [string] : None , [string] : [ ] } , status = [number] , headers = { [string] : [string] } , ) [EOL] [EOL] clinic_data = { [string] : [string] , [string] : [ ] , [string] : [ [ [string] , [string] , [string] ] ] , [string] : [number] , [string] : [number] , } [EOL] responses . add ( responses . GET , [string] + urlencode ( { [string] : [string] } ) , json = clinic_data , status = [number] , ) [EOL] [EOL] r = self . client . post ( reverse ( [string] ) , { [string] : [string] , [string] : [string] , [string] : [ [string] ] } , ) [EOL] self . assertRedirects ( r , reverse ( [string] ) ) [EOL] self . assertEqual ( self . client . session [ [string] ] , { [string] : [string] , [string] : [string] , [string] : [ [string] ] } , ) [EOL] self . assertEqual ( self . client . session [ [string] ] , [string] ) [EOL] self . assertEqual ( self . client . session [ [string] ] , [string] ) [EOL] [EOL] [EOL] class OptinConfirmTests ( TestCase ) : [EOL] def test_redirect_on_invalid_session ( self ) : [EOL] [docstring] [EOL] r = self . client . get ( reverse ( [string] ) ) [EOL] self . assertRedirects ( r , reverse ( [string] ) ) [EOL] [EOL] def test_goes_to_clinic_confirm_on_yes ( self ) : [EOL] [docstring] [EOL] session = self . client . session [EOL] session [ [string] ] = { [string] : [string] } [EOL] session [ [string] ] = [string] [EOL] session . save ( ) [EOL] r = self . client . post ( reverse ( [string] ) , { [string] : [ [string] ] } ) [EOL] self . assertRedirects ( r , reverse ( [string] ) ) [EOL] [EOL] def test_goes_to_farewell_page_on_no ( self ) : [EOL] [docstring] [EOL] session = self . client . session [EOL] session [ [string] ] = { [string] : [string] } [EOL] session . save ( ) [EOL] r = self . client . post ( reverse ( [string] ) , { [string] : [ [string] ] } ) [EOL] self . assertRedirects ( r , reverse ( [string] ) ) [EOL] [EOL] [EOL] class ClinicConfirmTests ( TestCase ) : [EOL] def test_redirect_on_invalid_session ( self ) : [EOL] [docstring] [EOL] r = self . client . get ( reverse ( [string] ) ) [EOL] self . assertRedirects ( r , reverse ( [string] ) ) [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_goes_to_end_on_yes ( self , get_channel , _ , _2 ) : [EOL] [docstring] [EOL] get_channel . return_value = [string] [EOL] session = self . client . session [EOL] session [ [string] ] = [string] [EOL] session [ [string] ] = { [string] : [string] , [string] : [string] , } [EOL] session [ [string] ] = { } [EOL] session . save ( ) [EOL] r = self . client . post ( reverse ( [string] ) , { [string] : [ [string] ] } ) [EOL] self . assertEqual ( self . client . session [ [string] ] , [string] ) [EOL] self . assertRedirects ( r , reverse ( [string] ) ) [EOL] [EOL] def test_goes_to_homepage_no ( self ) : [EOL] [docstring] [EOL] session = self . client . session [EOL] session [ [string] ] = [string] [EOL] session [ [string] ] = { [string] : [string] , [string] : [string] , } [EOL] session . save ( ) [EOL] r = self . client . post ( reverse ( [string] ) , { [string] : [ [string] ] } ) [EOL] self . assertEqual ( self . client . session [ [string] ] , [string] , ) [EOL] self . assertNotIn ( [string] , self . client . session [ [string] ] ) [EOL] self . assertRedirects ( r , reverse ( [string] ) ) [EOL] [EOL] @ responses . activate @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_get_channel_whatsapp ( self , _ , _2 ) : [EOL] [docstring] [EOL] responses . add ( responses . POST , [string] , json = { [string] : [ { [string] : [string] , [string] : [string] , [string] : [string] } ] } , ) [EOL] session = self . client . session [EOL] session [ [string] ] = [string] [EOL] session [ [string] ] = { [string] : [string] , [string] : [string] , } [EOL] session [ [string] ] = { } [EOL] session . save ( ) [EOL] r = self . client . post ( reverse ( [string] ) , { [string] : [ [string] ] } ) [EOL] self . assertEqual ( self . client . session [ [string] ] , [string] ) [EOL] self . assertRedirects ( r , reverse ( [string] ) ) [EOL] [EOL] @ responses . activate @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_get_channel_sms ( self , _ , _2 ) : [EOL] [docstring] [EOL] responses . add ( responses . POST , [string] , json = { [string] : [ { [string] : [string] , [string] : [string] } ] } , ) [EOL] session = self . client . session [EOL] session [ [string] ] = [string] [EOL] session [ [string] ] = { [string] : [string] , [string] : [string] , } [EOL] session [ [string] ] = { } [EOL] session . save ( ) [EOL] r = self . client . post ( reverse ( [string] ) , { [string] : [ [string] ] } ) [EOL] self . assertEqual ( self . client . session [ [string] ] , [string] ) [EOL] self . assertRedirects ( r , reverse ( [string] ) ) [EOL] [EOL] @ responses . activate def test_get_channel_error ( self ) : [EOL] [docstring] [EOL] responses . add ( responses . POST , [string] , status = [number] ) [EOL] session = self . client . session [EOL] session [ [string] ] = [string] [EOL] session [ [string] ] = { [string] : [string] } [EOL] session . save ( ) [EOL] r = self . client . post ( reverse ( [string] ) , { [string] : [ [string] ] } ) [EOL] [ message ] = get_messages ( r . wsgi_request ) [EOL] self . assertEqual ( str ( message ) , [string] , ) [EOL] [EOL] @ responses . activate def test_get_channel_multiple_errors ( self ) : [EOL] [docstring] [EOL] responses . add ( responses . POST , [string] , status = [number] ) [EOL] session = self . client . session [EOL] session [ [string] ] = [string] [EOL] session [ [string] ] = { [string] : [string] } [EOL] session . save ( ) [EOL] with self . assertLogs ( level = [string] ) as logs : [EOL] self . client . post ( reverse ( [string] ) , { [string] : [ [string] ] } ) [EOL] self . client . post ( reverse ( [string] ) , { [string] : [ [string] ] } ) [EOL] self . client . post ( reverse ( [string] ) , { [string] : [ [string] ] } ) [EOL] [ error_log ] = logs . output [EOL] self . assertIn ( [string] , error_log ) [EOL] [EOL] @ responses . activate def test_correct_info_sent_to_openhim ( self ) : [EOL] [docstring] [EOL] response_data = self . get_rp_responses_data ( ) [EOL] contact_list = { [string] : None , [string] : None , [string] : [ response_data [ [string] ] ] , } [EOL] responses . add ( responses . GET , [string] + urlencode ( { [string] : [string] } ) , json = contact_list , ) [EOL] [EOL] responses . add ( responses . POST , [string] ) [EOL] timestamp = datetime ( [number] , [number] , [number] ) . timestamp ( ) [EOL] channel = [string] [EOL] msisdn = [string] [EOL] clinic_code = [string] [EOL] contact_persal = [string] [EOL] contact_sanc = [string] [EOL] registered_by = [string] [EOL] [EOL] eid = str ( uuid . uuid4 ( ) ) [EOL] send_registration_to_openhim ( ( msisdn , [string] ) , registered_by , channel , clinic_code , contact_persal , contact_sanc , timestamp , eid , ) [EOL] [ call ] = responses . calls [EOL] self . assertEqual ( json . loads ( call . request . body ) , { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : None , [string] : [string] , [string] : [string] , [string] : None , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : eid , } , ) [EOL] self . assertEqual ( call . request . headers [ [string] ] , [string] ) [EOL] [EOL] def get_rp_responses_data ( self ) : [EOL] [docstring] [EOL] contact_data = { [string] : [string] , [string] : [string] , [string] : None , [string] : [ [string] , [string] ] , [string] : [ ] , [string] : { [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , } , [string] : None , [string] : None , [string] : [string] , [string] : [string] , } [EOL] flows_data = { [string] : None , [string] : None , [string] : [ { [string] : [string] , [string] : [string] , [string] : [string] , [string] : False , [string] : [ ] , [string] : [number] , [string] : { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , } , [string] : [string] , [string] : [string] , } ] , } [EOL] flow_start_data = { [string] : [string] , [string] : { [string] : [string] , [string] : [string] , } , [string] : [ ] , [string] : [ { [string] : [string] , [string] : [string] } ] , [string] : False , [string] : [string] , [string] : { } , [string] : [string] , [string] : [string] , } [EOL] return { [string] : contact_data , [string] : flows_data , [string] : flow_start_data , } [EOL] [EOL] @ responses . activate def test_registration_created_for_existing_contact ( self ) : [EOL] [docstring] [EOL] contact_list_data = { [string] : None , [string] : None , [string] : [ { [string] : [string] , [string] : [string] , [string] : None , [string] : [ [string] , [string] ] , [string] : [ ] , [string] : { [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , } , [string] : None , [string] : None , [string] : [string] , [string] : [string] , } ] , } [EOL] responses . add ( responses . GET , [string] + urlencode ( { [string] : [string] } ) , json = contact_list_data , ) [EOL] [EOL] response_data = self . get_rp_responses_data ( ) [EOL] responses . add ( responses . POST , [string] + urlencode ( { [string] : [string] } ) , json = response_data [ [string] ] , ) [EOL] [EOL] responses . add ( responses . GET , [string] , json = response_data [ [string] ] , ) [EOL] [EOL] responses . add ( responses . POST , [string] , json = response_data [ [string] ] , ) [EOL] [EOL] timestamp = datetime ( [number] , [number] , [number] ) . timestamp ( ) [EOL] channel = [string] [EOL] msisdn = [string] [EOL] clinic_code = [string] [EOL] registered_by = [string] [EOL] contact = { [string] : [string] , [string] : { [string] : [string] , [string] : [string] } , } [EOL] [EOL] contact_info = send_registration_to_rapidpro ( contact , msisdn , registered_by , channel , clinic_code , timestamp ) [EOL] [ rp_call_1 , rp_contact_call , rp_call_3 , rp_flow_start_call ] = responses . calls [EOL] [EOL] self . assertEqual ( json . loads ( rp_contact_call . request . body ) , { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } } , ) [EOL] self . assertEqual ( json . loads ( rp_flow_start_call . request . body ) , { [string] : [string] , [string] : [ [string] ] , } , ) [EOL] self . assertEqual ( contact_info , ( msisdn , [string] ) ) [EOL] [EOL] @ responses . activate def test_registration_created_for_new_contact ( self ) : [EOL] [docstring] [EOL] responses . add ( responses . GET , [string] + urlencode ( { [string] : [string] } ) , json = { [string] : None , [string] : None , [string] : [ ] } , ) [EOL] [EOL] response_data = self . get_rp_responses_data ( ) [EOL] responses . add ( responses . POST , [string] , json = response_data [ [string] ] , ) [EOL] [EOL] responses . add ( responses . GET , [string] , json = response_data [ [string] ] , ) [EOL] [EOL] responses . add ( responses . POST , [string] , json = response_data [ [string] ] , ) [EOL] responses . add ( responses . POST , [string] ) [EOL] [EOL] timestamp = datetime ( [number] , [number] , [number] ) . timestamp ( ) [EOL] channel = [string] [EOL] msisdn = [string] [EOL] clinic_code = [string] [EOL] registered_by = [string] [EOL] contact = { } [EOL] [EOL] contact_info = send_registration_to_rapidpro ( contact , msisdn , registered_by , channel , clinic_code , timestamp ) [EOL] [ rp_call_1 , rp_contact_call , rp_call_3 , rp_flow_start_call ] = responses . calls [EOL] [EOL] self . assertEqual ( json . loads ( rp_contact_call . request . body ) , { [string] : [ [string] , [string] ] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , } , ) [EOL] self . assertEqual ( json . loads ( rp_flow_start_call . request . body ) , { [string] : [string] , [string] : [ [string] ] , } , ) [EOL] self . assertEqual ( contact_info , ( msisdn , [string] ) ) [EOL] [EOL] [EOL] class RegistrationSuccessTests ( TestCase ) : [EOL] def test_redirect_to_clinic_confirm ( self ) : [EOL] [docstring] [EOL] r = self . client . get ( reverse ( [string] ) ) [EOL] [comment] [EOL] self . assertRedirects ( r , reverse ( [string] ) , target_status_code = [number] ) [EOL] [EOL] def test_clears_session ( self ) : [EOL] [docstring] [EOL] session = self . client . session [EOL] session [ [string] ] = [string] [EOL] session [ [string] ] = [string] [EOL] session [ [string] ] = { [string] : [string] } [EOL] session . save ( ) [EOL] [EOL] r = self . client . get ( reverse ( [string] ) ) [EOL] self . assertContains ( r , [string] ) [EOL] self . assertEqual ( r . context [ [string] ] , [string] ) [EOL] self . assertEqual ( sorted ( self . client . session . keys ( ) ) , [ ] ) [EOL] [EOL] def test_referral_link ( self ) : [EOL] [docstring] [EOL] session = self . client . session [EOL] session [ [string] ] = [string] [EOL] session [ [string] ] = [string] [EOL] session [ [string] ] = { [string] : [string] } [EOL] session . save ( ) [EOL] [EOL] r = self . client . get ( reverse ( [string] ) ) [EOL] referral = ReferralLink . objects . get ( msisdn = [string] ) [EOL] self . assertContains ( r , referral . path ) [EOL] self . assertEqual ( r . context [ [string] ] , [string] ) [EOL] self . assertEqual ( sorted ( self . client . session . keys ( ) ) , [ ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $registrations.forms.RegistrationDetailsForm$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $registrations.forms.RegistrationDetailsForm$ 0 0 0 0 0 0 0 0 0 0 0 $registrations.forms.RegistrationDetailsForm$ 0 0 0 0 0 0 0 0 $registrations.forms.RegistrationDetailsForm$ 0 0 0 0 0 0 0 0 0 0 0 $registrations.forms.RegistrationDetailsForm$ 0 0 0 0 0 0 0 0 0 0 $registrations.forms.RegistrationDetailsForm$ 0 0 0 0 0 0 0 0 0 0 0 $registrations.forms.RegistrationDetailsForm$ 0 0 0 0 0 0 0 $registrations.forms.RegistrationDetailsForm$ 0 0 0 0 0 0 0 0 0 0 $registrations.forms.RegistrationDetailsForm$ 0 0 0 0 0 0 0 0 0 0 0 $registrations.forms.RegistrationDetailsForm$ 0 0 0 0 0 0 0 $registrations.forms.RegistrationDetailsForm$ 0 0 0 0 0 0 0 0 0 0 $registrations.forms.RegistrationDetailsForm$ 0 0 0 0 0 0 0 0 0 0 0 $registrations.forms.RegistrationDetailsForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $registrations.forms.RegistrationDetailsForm$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $registrations.forms.RegistrationDetailsForm$ 0 0 0 0 0 0 0 0 0 0 0 $registrations.forms.RegistrationDetailsForm$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Optional[typing.List[typing.Dict[builtins.str,typing.Union[None,typing.Dict[typing.Any,typing.Any],typing.List[typing.Dict[builtins.str,builtins.str]],typing.List[builtins.str],builtins.str]]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Optional[typing.List[typing.Dict[builtins.str,typing.Union[None,typing.Dict[typing.Any,typing.Any],typing.List[typing.Dict[builtins.str,builtins.str]],typing.List[builtins.str],builtins.str]]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $registrations.forms.RegistrationDetailsForm$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $registrations.forms.RegistrationDetailsForm$ 0 0 0 0 0 0 0 0 0 0 0 $registrations.forms.RegistrationDetailsForm$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $registrations.forms.RegistrationDetailsForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $registrations.forms.RegistrationDetailsForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $registrations.forms.RegistrationDetailsForm$ 0 0 0 0 0 0 0 0 0 0 $registrations.forms.RegistrationDetailsForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Optional[typing.List[typing.Dict[builtins.str,typing.Union[None,typing.Dict[typing.Any,typing.Any],typing.List[typing.Dict[builtins.str,builtins.str]],typing.List[builtins.str],builtins.str]]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Optional[typing.List[typing.Dict[builtins.str,typing.Union[None,typing.Dict[typing.Any,typing.Any],typing.List[typing.Dict[builtins.str,builtins.str]],typing.List[builtins.str],builtins.str]]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Any],typing.List[typing.List[builtins.str]],builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Any],typing.List[typing.List[builtins.str]],builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Any],builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Any],builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $registrations.forms.RegistrationDetailsForm$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $registrations.forms.RegistrationDetailsForm$ 0 0 0 0 0 0 0 0 0 0 0 $registrations.forms.RegistrationDetailsForm$ 0 0 0 0 0 0 0 0 $registrations.forms.RegistrationDetailsForm$ 0 0 0 0 0 0 0 0 0 0 0 $registrations.forms.RegistrationDetailsForm$ 0 0 0 0 0 0 0 0 0 0 $registrations.forms.RegistrationDetailsForm$ 0 0 0 0 0 0 0 0 0 0 0 $registrations.forms.RegistrationDetailsForm$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Any],builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Any],builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 $registrations.forms.RegistrationDetailsForm$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $registrations.forms.RegistrationDetailsForm$ 0 0 0 0 0 0 0 0 0 0 0 $registrations.forms.RegistrationDetailsForm$ 0 0 0 0 0 0 0 $registrations.forms.RegistrationDetailsForm$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $registrations.forms.RegistrationDetailsForm$ 0 0 0 0 0 0 0 0 0 0 0 $registrations.forms.RegistrationDetailsForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $registrations.forms.RegistrationDetailsForm$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $registrations.forms.RegistrationDetailsForm$ 0 0 0 0 0 0 0 0 0 0 0 $registrations.forms.RegistrationDetailsForm$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Any],typing.List[typing.List[builtins.str]],builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Any],typing.List[typing.List[builtins.str]],builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Optional[typing.List[typing.Any]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Optional[typing.List[typing.Any]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.float$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[None,typing.Dict[builtins.str,typing.Optional[builtins.str]],typing.List[typing.Any],typing.List[builtins.str],builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Optional[typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,builtins.int],typing.List[typing.Any],builtins.bool,builtins.int,builtins.str]]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[typing.Any,typing.Any],typing.Dict[builtins.str,builtins.str],typing.List[typing.Any],typing.List[typing.Dict[builtins.str,builtins.str]],builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[None,typing.Dict[builtins.str,typing.Optional[builtins.str]],typing.List[typing.Any],typing.List[builtins.str],builtins.str]]$ 0 0 0 $typing.Dict[builtins.str,typing.Optional[typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,builtins.int],typing.List[typing.Any],builtins.bool,builtins.int,builtins.str]]]]]$ 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[typing.Any,typing.Any],typing.Dict[builtins.str,builtins.str],typing.List[typing.Any],typing.List[typing.Dict[builtins.str,builtins.str]],builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Optional[typing.List[typing.Dict[builtins.str,typing.Union[None,typing.Dict[builtins.str,typing.Optional[builtins.str]],typing.List[typing.Any],typing.List[builtins.str],builtins.str]]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Optional[typing.List[typing.Dict[builtins.str,typing.Union[None,typing.Dict[builtins.str,typing.Optional[builtins.str]],typing.List[typing.Any],typing.List[builtins.str],builtins.str]]]]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,builtins.str],builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,builtins.str],builtins.str]]$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] from registrations . models import ReferralLink [EOL] [EOL] admin . site . register ( ReferralLink ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import logging [EOL] [EOL] import phonenumbers [EOL] from django . conf import settings [EOL] from temba_client . exceptions import TembaException [EOL] from temba_client . v2 import TembaClient [EOL] from wabclient import Client as WABClient [EOL] [EOL] [EOL] def normalise_msisdn ( msisdn ) : [EOL] msisdn = phonenumbers . parse ( msisdn , [string] ) [EOL] return phonenumbers . format_number ( msisdn , phonenumbers . PhoneNumberFormat . E164 ) [EOL] [EOL] [EOL] def get_rapidpro_contact ( msisdn ) : [EOL] try : [EOL] contact = tembaclient . get_contacts ( urn = [string] % msisdn ) . first ( ) [EOL] except TembaException as e : [EOL] logging . exception ( [string] % msisdn ) [EOL] raise e [EOL] if contact : [EOL] return contact . serialize ( ) [EOL] return { } [EOL] [EOL] [EOL] def contact_in_rapidpro_groups ( contact , groups ) : [EOL] if contact : [EOL] for group in contact . get ( [string] , [ ] ) : [EOL] if group [ [string] ] in groups : [EOL] return True [EOL] return False [EOL] [EOL] [EOL] def get_rapidpro_flow_by_name ( name ) : [EOL] flows = tembaclient . get_flows ( ) . iterfetches ( ) [EOL] for flow_batch in flows : [EOL] for flow in flow_batch : [EOL] if flow . name . lower ( ) == name : [EOL] return flow [EOL] return None [EOL] [EOL] [EOL] tembaclient = TembaClient ( settings . RAPIDPRO_URL , settings . RAPIDPRO_TOKEN ) [EOL] [EOL] [comment] [EOL] wabclient = WABClient ( url = settings . WHATSAPP_URL , timeout = [number] ) [EOL] wabclient . connection . set_token ( settings . WHATSAPP_TOKEN ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0
from typing import Type , Pattern [EOL] import typing [EOL] import registrations [EOL] import re [EOL] [EOL] from rest_framework import serializers [EOL] [EOL] URN_REGEX = re . compile ( [string] ) [EOL] [EOL] [EOL] class RapidProFlowWebHookSerializer ( serializers . Serializer ) : [EOL] class Contact ( serializers . Serializer ) : [EOL] urn = serializers . RegexField ( URN_REGEX , help_text = [string] ) [EOL] [EOL] contact = Contact ( help_text = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[registrations.serializers.RapidProFlowWebHookSerializer.Contact]$ 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 $registrations.serializers.RapidProFlowWebHookSerializer.Contact$ 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class RegistrationsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Any , Type [EOL] import typing [EOL] import registrations [EOL] import logging [EOL] import uuid [EOL] from datetime import datetime [EOL] [EOL] from celery import chain [EOL] from django . contrib import messages [EOL] from django . shortcuts import redirect [EOL] from django . urls import reverse_lazy [EOL] from django . views . generic import TemplateView [EOL] from django . views . generic . edit import FormView [EOL] from prometheus_client import Counter [EOL] from requests . exceptions import RequestException [EOL] from wabclient . exceptions import AddressException [EOL] [EOL] from registrations . forms import RegistrationDetailsForm [EOL] from registrations . models import ReferralLink [EOL] from registrations . tasks import ( send_registration_to_openhim , send_registration_to_rapidpro , ) [EOL] from registrations . utils import contact_in_rapidpro_groups , wabclient [EOL] [EOL] WHATSAPP_API_FAILURES = Counter ( [string] , [string] ) [EOL] [EOL] [EOL] class RegistrationDetailsView ( FormView ) : [EOL] form_class = RegistrationDetailsForm [EOL] template_name = [string] [EOL] success_url = reverse_lazy ( [string] ) [EOL] [EOL] def dispatch ( self , request , * args , ** kwargs ) : [EOL] try : [EOL] code = kwargs [ [string] ] [EOL] referral = ReferralLink . objects . get_from_referral_code ( code ) [EOL] request . session [ [string] ] = referral . msisdn [EOL] except ( ReferralLink . DoesNotExist , KeyError ) : [EOL] [comment] [EOL] pass [EOL] return super ( ) . dispatch ( request , * args , ** kwargs ) [EOL] [EOL] def get_context_data ( self , ** kwargs ) : [EOL] context = super ( ) . get_context_data ( ** kwargs ) [EOL] if [string] in self . request . session : [EOL] context [ [string] ] = self . request . session . pop ( [string] ) [EOL] return context [EOL] [EOL] def get_form_kwargs ( self ) : [EOL] kwargs = super ( RegistrationDetailsView , self ) . get_form_kwargs ( ) [EOL] kwargs [ [string] ] = self . request [EOL] return kwargs [EOL] [EOL] def form_valid ( self , form ) : [EOL] self . request . session [ [string] ] = form . cleaned_data [EOL] [EOL] contact = self . request . session [ [string] ] [EOL] if contact_in_rapidpro_groups ( contact , [ [string] ] ) : [EOL] return redirect ( reverse_lazy ( [string] ) ) [EOL] return super ( ) . form_valid ( form ) [EOL] [EOL] def get_initial ( self ) : [EOL] if [string] in self . request . session : [EOL] return self . request . session [ [string] ] [EOL] return super ( ) . get_initial ( ) [EOL] [EOL] [EOL] class RegistrationConfirmOptIn ( TemplateView ) : [EOL] template_name = [string] [EOL] [EOL] def dispatch ( self , request , * args , ** kwargs ) : [EOL] if ( [string] not in request . session or [string] not in request . session . get ( [string] , { } ) ) : [EOL] return redirect ( reverse_lazy ( [string] ) ) [EOL] return super ( ) . dispatch ( request , * args , ** kwargs ) [EOL] [EOL] def get_context_data ( self , ** kwargs ) : [EOL] context = super ( ) . get_context_data ( ** kwargs ) [EOL] context [ [string] ] = [string] in self . request . session [EOL] return context [EOL] [EOL] def post ( self , request , * args , ** kwargs ) : [EOL] if [string] in request . POST : [EOL] return redirect ( reverse_lazy ( [string] ) ) [EOL] return redirect ( reverse_lazy ( [string] ) ) [EOL] [EOL] [EOL] class RegistrationConfirmClinic ( TemplateView ) : [EOL] template_name = [string] [EOL] [EOL] def dispatch ( self , request , * args , ** kwargs ) : [EOL] if [string] not in request . session : [EOL] return redirect ( reverse_lazy ( [string] ) ) [EOL] return super ( ) . dispatch ( request , * args , ** kwargs ) [EOL] [EOL] def get_context_data ( self , ** kwargs ) : [EOL] context = super ( ) . get_context_data ( ** kwargs ) [EOL] context [ [string] ] = self . request . session [ [string] ] [EOL] return context [EOL] [EOL] def get_channel ( self , msisdn ) : [EOL] [docstring] [EOL] try : [EOL] wabclient . get_address ( msisdn ) [EOL] return [string] [EOL] except AddressException : [EOL] return [string] [EOL] [EOL] def post ( self , request , * args , ** kwargs ) : [EOL] session = request . session [EOL] [EOL] if [string] not in request . POST : [EOL] session [ [string] ] . pop ( [string] ) [EOL] session [ [string] ] = [string] [EOL] return redirect ( reverse_lazy ( [string] ) ) [EOL] [EOL] try : [EOL] session [ [string] ] = self . get_channel ( request . session [ [string] ] [ [string] ] ) [EOL] except RequestException : [EOL] WHATSAPP_API_FAILURES . inc ( ) [EOL] [EOL] [comment] [EOL] try : [EOL] session [ [string] ] += [number] [EOL] except KeyError : [EOL] session [ [string] ] = [number] [EOL] if session . get ( [string] , [number] ) >= [number] : [EOL] logging . exception ( [string] ) [EOL] [EOL] messages . error ( request , [string] , ) [EOL] return redirect ( reverse_lazy ( [string] ) ) [EOL] [EOL] chain ( send_registration_to_rapidpro . s ( contact = session [ [string] ] , msisdn = session [ [string] ] [ [string] ] , referral_msisdn = session . get ( [string] ) , channel = session [ [string] ] , clinic_code = session [ [string] ] [ [string] ] , timestamp = datetime . utcnow ( ) . timestamp ( ) , ) , send_registration_to_openhim . s ( referral_msisdn = session . get ( [string] ) , channel = session [ [string] ] , clinic_code = session [ [string] ] [ [string] ] , persal = session . get ( [string] , { } ) . get ( [string] , { } ) . get ( [string] , None ) , sanc = session . get ( [string] , { } ) . get ( [string] , { } ) . get ( [string] , None ) , timestamp = datetime . utcnow ( ) . timestamp ( ) , eid = uuid . uuid4 ( ) , ) , ) . apply_async ( ) [EOL] [EOL] return redirect ( reverse_lazy ( [string] ) ) [EOL] [EOL] [EOL] class RegistrationSuccess ( TemplateView ) : [EOL] template_name = [string] [EOL] [EOL] def dispatch ( self , request , * args , ** kwargs ) : [EOL] if [string] not in self . request . session : [EOL] return redirect ( reverse_lazy ( [string] ) ) [EOL] return super ( ) . dispatch ( request , * args , ** kwargs ) [EOL] [EOL] def get_context_data ( self , ** kwargs ) : [EOL] context = super ( ) . get_context_data ( ** kwargs ) [EOL] context [ [string] ] = self . request . session . pop ( [string] ) [EOL] [EOL] msisdn = self . request . session [ [string] ] [ [string] ] [EOL] referral , _ = ReferralLink . objects . get_or_create ( msisdn = msisdn ) [EOL] context [ [string] ] = referral . build_uri ( self . request ) [EOL] [EOL] [comment] [EOL] self . request . session . clear ( ) [EOL] return context [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[registrations.forms.RegistrationDetailsForm]$ 0 0 0 $builtins.str$ 0 0 0 $typing.Type[registrations.views.RegistrationDetailsView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0
import builtins [EOL] from typing import Any , Union , Tuple , Callable , Dict , List [EOL] import typing [EOL] import requests [EOL] from datetime import datetime [EOL] from urllib . parse import urljoin [EOL] [EOL] import requests [EOL] from celery . exceptions import SoftTimeLimitExceeded [EOL] from django . conf import settings [EOL] from requests . exceptions import RequestException [EOL] from temba_client . exceptions import TembaException [EOL] from temba_client . utils import format_iso8601 [EOL] [EOL] from nurseconnect_registration . celery import app [EOL] from registrations . utils import ( get_rapidpro_contact , get_rapidpro_flow_by_name , tembaclient , ) [EOL] [EOL] openhim_session = requests . Session ( ) [EOL] openhim_session . auth = settings . OPENHIM_AUTH [EOL] openhim_session . headers . update ( { [string] : [string] } ) [EOL] [EOL] [EOL] @ app . task ( autoretry_for = ( RequestException , SoftTimeLimitExceeded ) , retry_backoff = True , max_retries = [number] , acks_late = True , soft_time_limit = [number] , time_limit = [number] , ) def send_registration_to_openhim ( contact , referral_msisdn , channel , clinic_code , persal , sanc , timestamp , eid ) : [EOL] msisdn = contact [ [number] ] [EOL] uuid = contact [ [number] ] [EOL] response = openhim_session . post ( url = urljoin ( settings . OPENHIM_URL , [string] ) , json = { [string] : [number] , [string] : [number] if channel == [string] else [number] , [string] : [number] , [string] : referral_msisdn or msisdn , [string] : msisdn , [string] : None , [string] : clinic_code , [string] : [string] . format ( msisdn . lstrip ( [string] ) ) , [string] : None , [string] : persal , [string] : sanc , [string] : datetime . utcfromtimestamp ( timestamp ) . strftime ( [string] ) , [string] : uuid , [string] : eid , } , ) [EOL] response . raise_for_status ( ) [EOL] return ( response . status_code , response . headers , response . content ) [EOL] [EOL] [EOL] @ app . task ( autoretry_for = ( RequestException , SoftTimeLimitExceeded , TembaException ) , retry_backoff = True , max_retries = [number] , acks_late = True , soft_time_limit = [number] , time_limit = [number] , ) def send_registration_to_rapidpro ( contact , msisdn , referral_msisdn , channel , clinic_code , timestamp ) : [EOL] [comment] [EOL] contact_data = { [string] : channel . lower ( ) , [string] : referral_msisdn or msisdn , [string] : clinic_code , [string] : format_iso8601 ( datetime . fromtimestamp ( timestamp ) ) , [string] : [string] , } [EOL] contact = get_rapidpro_contact ( msisdn ) [comment] [EOL] if contact : [EOL] uuid = contact . get ( [string] ) [EOL] contact = tembaclient . update_contact ( uuid , fields = contact_data ) [EOL] else : [EOL] urns = [ [string] % msisdn ] [EOL] if channel == [string] : [EOL] urns . append ( [string] % msisdn . replace ( [string] , [string] ) ) [EOL] contact = tembaclient . create_contact ( urns = urns , fields = contact_data ) [EOL] [EOL] [comment] [EOL] flow = get_rapidpro_flow_by_name ( [string] ) [EOL] tembaclient . create_flow_start ( flow . uuid , contacts = [ contact . uuid ] ) [EOL] [EOL] return ( msisdn , contact . uuid ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] from django . urls import include , path [EOL] from django . views . generic import TemplateView [EOL] from rest_framework import routers [EOL] [EOL] from registrations . api_views import ReferralLinkViewSet [EOL] from registrations . views import ( RegistrationConfirmClinic , RegistrationConfirmOptIn , RegistrationDetailsView , RegistrationSuccess , ) [EOL] [EOL] api_router = routers . DefaultRouter ( ) [EOL] api_router . register ( [string] , ReferralLinkViewSet ) [EOL] [EOL] urlpatterns = [ path ( [string] , RegistrationDetailsView . as_view ( ) , name = [string] ) , path ( [string] , RegistrationConfirmOptIn . as_view ( ) , name = [string] ) , path ( [string] , TemplateView . as_view ( template_name = [string] ) , name = [string] , ) , path ( [string] , RegistrationConfirmClinic . as_view ( ) , name = [string] ) , path ( [string] , RegistrationSuccess . as_view ( ) , name = [string] ) , path ( [string] , include ( api_router . urls ) ) , path ( [string] , RegistrationDetailsView . as_view ( ) , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type [EOL] import typing [EOL] import registrations [EOL] import requests [EOL] import logging [EOL] from json import JSONDecodeError [EOL] from urllib . parse import urljoin [EOL] [EOL] import phonenumbers [EOL] import requests [EOL] from django import forms [EOL] from django . conf import settings [EOL] from temba_client . exceptions import TembaException [EOL] [EOL] from registrations . utils import contact_in_rapidpro_groups , get_rapidpro_contact [EOL] from registrations . validators import clinic_code_blacklist_validator , msisdn_validator [EOL] [EOL] [EOL] class RegistrationDetailsForm ( forms . Form ) : [EOL] PHONE_NUMBER_ERROR_MESSAGE = ( [string] [string] ) [EOL] EXISTING_NUMBER_ERROR_MESSAGE = ( [string] [string] ) [EOL] CLINIC_CODE_ERROR_MESSAGE = ( [string] [string] ) [EOL] CHECKBOX_ERROR_MESSAGE = ( [string] ) [EOL] [EOL] msisdn = forms . CharField ( label = [string] , error_messages = { [string] : PHONE_NUMBER_ERROR_MESSAGE } , validators = [ msisdn_validator ] , ) [EOL] clinic_code = forms . CharField ( label = [string] , min_length = [number] , max_length = [number] , error_messages = { [string] : CLINIC_CODE_ERROR_MESSAGE , [string] : CLINIC_CODE_ERROR_MESSAGE , [string] : CLINIC_CODE_ERROR_MESSAGE , } , validators = [ clinic_code_blacklist_validator ] , ) [EOL] consent = forms . MultipleChoiceField ( label = ( [string] [string] ) , error_messages = { [string] : CHECKBOX_ERROR_MESSAGE } , choices = ( ( True , [string] ) , ) , widget = forms . CheckboxSelectMultiple , ) [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] self . request = kwargs . pop ( [string] , None ) [EOL] super ( RegistrationDetailsForm , self ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] def clean_msisdn ( self ) : [EOL] msisdn = phonenumbers . parse ( self . cleaned_data [ [string] ] , [string] ) [EOL] formatted_msisdn = phonenumbers . format_number ( msisdn , phonenumbers . PhoneNumberFormat . E164 ) [EOL] [EOL] [comment] [EOL] try : [EOL] contact = get_rapidpro_contact ( formatted_msisdn ) [EOL] except TembaException : [EOL] raise forms . ValidationError ( [string] ) [EOL] self . request . session [ [string] ] = contact [EOL] if contact_in_rapidpro_groups ( contact , [ [string] , [string] ] ) : [EOL] raise forms . ValidationError ( self . EXISTING_NUMBER_ERROR_MESSAGE ) [EOL] return formatted_msisdn [EOL] [EOL] def clean_clinic_code ( self ) : [EOL] code = self . cleaned_data [ [string] ] [EOL] if not code . isdigit ( ) : [EOL] raise forms . ValidationError ( self . CLINIC_CODE_ERROR_MESSAGE ) [EOL] [EOL] [comment] [EOL] try : [EOL] response = requests . get ( urljoin ( settings . OPENHIM_URL , [string] ) , params = { [string] : [string] % code } , auth = settings . OPENHIM_AUTH , timeout = [number] , ) [EOL] response . raise_for_status ( ) [EOL] data = response . json ( ) [EOL] except ( requests . exceptions . HTTPError , JSONDecodeError ) : [EOL] errors = self . request . session . get ( [string] , [number] ) [EOL] self . request . session [ [string] ] = errors + [number] [EOL] if errors + [number] >= [number] : [EOL] logging . exception ( [string] ) [EOL] raise forms . ValidationError ( [string] ) [EOL] [EOL] if data [ [string] ] != [number] : [EOL] raise forms . ValidationError ( self . CLINIC_CODE_ERROR_MESSAGE ) [EOL] self . request . session [ [string] ] = data [ [string] ] [ [number] ] [ [number] ] [EOL] self . request . session [ [string] ] = code [EOL] [EOL] return code [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Type[registrations.forms.RegistrationDetailsForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[registrations.forms.RegistrationDetailsForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[registrations.forms.RegistrationDetailsForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 $typing.Any$ 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0
from typing import Any [EOL] import typing [EOL] from django . contrib . auth . models import Permission , User [EOL] from django . urls import reverse [EOL] from rest_framework import status [EOL] from rest_framework . test import APITestCase [EOL] [EOL] from registrations . models import ReferralLink [EOL] [EOL] [EOL] class ReferralLinkApiTests ( APITestCase ) : [EOL] def test_authentication_required ( self ) : [EOL] [docstring] [EOL] r = self . client . post ( reverse ( [string] ) ) [EOL] self . assertEqual ( r . status_code , status . HTTP_401_UNAUTHORIZED ) [EOL] [EOL] def test_permission_required ( self ) : [EOL] [docstring] [EOL] user = User . objects . create_user ( [string] ) [EOL] self . client . force_login ( user ) [EOL] r = self . client . post ( reverse ( [string] ) ) [EOL] self . assertEqual ( r . status_code , status . HTTP_403_FORBIDDEN ) [EOL] [EOL] def test_create_new_referral_link ( self ) : [EOL] [docstring] [EOL] self . assertEqual ( ReferralLink . objects . count ( ) , [number] ) [EOL] user = User . objects . create_user ( [string] ) [EOL] permission = Permission . objects . get ( name = [string] ) [EOL] user . user_permissions . add ( permission ) [EOL] user . save ( ) [EOL] self . client . force_login ( user ) [EOL] [EOL] r = self . client . post ( reverse ( [string] ) , { [string] : { [string] : [string] } } , format = [string] , ) [EOL] self . assertEqual ( r . status_code , status . HTTP_200_OK ) [EOL] [ referral ] = ReferralLink . objects . all ( ) [EOL] self . assertIn ( referral . path , r . data [ [string] ] ) [EOL] [EOL] def test_existing_referral_link ( self ) : [EOL] [docstring] [EOL] ReferralLink . objects . create ( msisdn = [string] ) [EOL] user = User . objects . create_user ( [string] ) [EOL] permission = Permission . objects . get ( name = [string] ) [EOL] user . user_permissions . add ( permission ) [EOL] user . save ( ) [EOL] self . client . force_login ( user ) [EOL] [EOL] self . assertEqual ( ReferralLink . objects . count ( ) , [number] ) [EOL] r = self . client . post ( reverse ( [string] ) , { [string] : { [string] : [string] } } , format = [string] , ) [EOL] self . assertEqual ( r . status_code , status . HTTP_200_OK ) [EOL] [ referral ] = ReferralLink . objects . all ( ) [EOL] self . assertIn ( referral . path , r . data [ [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import phonenumbers [EOL] from django . conf import settings [EOL] from django . core . exceptions import ValidationError [EOL] [EOL] PHONE_NUMBER_ERROR_MESSAGE = ( [string] [string] ) [EOL] CLINIC_CODE_BLOCKED_ERROR_MESSAGE = ( [string] [string] ) [EOL] [EOL] [EOL] def msisdn_validator ( value ) : [EOL] [docstring] [EOL] try : [EOL] msisdn = phonenumbers . parse ( value , [string] ) [EOL] except phonenumbers . phonenumberutil . NumberParseException : [EOL] raise ValidationError ( PHONE_NUMBER_ERROR_MESSAGE ) [EOL] if not phonenumbers . is_possible_number ( msisdn ) : [EOL] raise ValidationError ( PHONE_NUMBER_ERROR_MESSAGE ) [EOL] if not phonenumbers . is_valid_number ( msisdn ) : [EOL] raise ValidationError ( PHONE_NUMBER_ERROR_MESSAGE ) [EOL] [EOL] [EOL] def clinic_code_blacklist_validator ( value ) : [EOL] [docstring] [EOL] if value in settings . CLINIC_CODE_BLACKLIST : [EOL] raise ValidationError ( CLINIC_CODE_BLOCKED_ERROR_MESSAGE ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
from typing import Any , Type [EOL] import typing [EOL] import registrations [EOL] from django . conf import settings [EOL] from django . db import models [EOL] from django . urls import reverse [EOL] from hashids import Hashids [EOL] [EOL] from registrations . validators import msisdn_validator [EOL] [EOL] hashids = Hashids ( salt = settings . SECRET_KEY , min_length = [number] ) [EOL] [EOL] [EOL] class ReferralLinkManager ( models . Manager ) : [EOL] def get_from_referral_code ( self , code ) : [EOL] [docstring] [EOL] try : [EOL] [ id ] = hashids . decode ( code ) [EOL] except ValueError : [EOL] id = None [EOL] return self . get ( id = id ) [EOL] [EOL] [EOL] class ReferralLink ( models . Model ) : [EOL] objects = ReferralLinkManager ( ) [EOL] msisdn = models . CharField ( max_length = [number] , unique = True , verbose_name = [string] , validators = [ msisdn_validator ] , help_text = [string] , ) [EOL] [EOL] @ property def code ( self ) : [EOL] [docstring] [EOL] return hashids . encode ( self . id ) [EOL] [EOL] @ property def path ( self ) : [EOL] [docstring] [EOL] return reverse ( [string] , args = [ self . code ] ) [EOL] [EOL] def build_uri ( self , request ) : [EOL] [docstring] [EOL] return request . build_absolute_uri ( self . path ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . msisdn , self . code ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 $None$ 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $registrations.models.ReferralLinkManager$ 0 0 0 0 0 $typing.Type[registrations.models.ReferralLink]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type [EOL] import typing [EOL] import registrations [EOL] from rest_framework import permissions , viewsets [EOL] from rest_framework . response import Response [EOL] [EOL] from registrations . models import ReferralLink [EOL] from registrations . serializers import URN_REGEX , RapidProFlowWebHookSerializer [EOL] from registrations . utils import normalise_msisdn [EOL] [EOL] [EOL] class ReferralLinkViewSet ( viewsets . GenericViewSet ) : [EOL] [docstring] [EOL] [EOL] serializer_class = RapidProFlowWebHookSerializer [EOL] queryset = ReferralLink . objects . all ( ) [EOL] permission_classes = ( permissions . DjangoModelPermissions , ) [EOL] [EOL] def create ( self , request ) : [EOL] [docstring] [EOL] serializer = self . get_serializer_class ( ) ( data = request . data ) [EOL] serializer . is_valid ( raise_exception = True ) [EOL] urn = serializer . validated_data [ [string] ] [ [string] ] [EOL] msisdn = URN_REGEX . match ( urn ) . group ( [string] ) [EOL] msisdn = normalise_msisdn ( msisdn ) [EOL] referral , _ = ReferralLink . objects . get_or_create ( msisdn = msisdn ) [EOL] return Response ( { [string] : referral . build_uri ( request ) } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] import builtins [EOL] from django . db import migrations , models [EOL] [EOL] import registrations . validators [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] initial = True [EOL] [EOL] dependencies = [ ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] , ) , ) , ( [string] , models . CharField ( help_text = ( [string] [string] ) , max_length = [number] , unique = True , validators = [ registrations . validators . msisdn_validator ] , verbose_name = [string] , ) , ) , ] , ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0