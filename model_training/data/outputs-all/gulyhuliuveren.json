token = [string] [EOL]	$builtins.str$ 0 0 0
[comment] [EOL] from typing import Any [EOL] import flask [EOL] import configparser [EOL] import telebot [EOL] import typing [EOL] import telebot [EOL] import os [EOL] import time [EOL] from datetime import datetime [EOL] from db_layer import db_acces [EOL] from db_layer import states [EOL] from telebot import types , apihelper [EOL] from flask import Flask , request [EOL] from apscheduler . schedulers . background import BackgroundScheduler [EOL] from apscheduler . triggers . interval import IntervalTrigger [EOL] import configparser [EOL] import atexit [EOL] [EOL] [comment] [EOL] if [string] in list ( os . environ . keys ( ) ) : [EOL] TOKEN = str ( os . environ . get ( [string] ) ) [EOL] [comment] [EOL] else : [EOL] import token_key [EOL] TOKEN = token_key . token [EOL] [EOL] bot = telebot . TeleBot ( TOKEN ) [EOL] server = Flask ( __name__ ) [EOL] config = configparser . ConfigParser ( ) [EOL] config . read ( [string] ) [EOL] ADMIN_ID = [number] [EOL] MY_ID = [number] [EOL] bot_access_text = [string] [string] [string] [string] [string] [EOL] [EOL] [EOL] def save_data ( ) : [EOL] with open ( [string] , [string] ) as conf : [EOL] config . write ( conf ) [EOL] [EOL] [EOL] def update_users ( ) : [EOL] if datetime . now ( ) . hour == [number] : [EOL] config . set ( [string] , [string] , [string] ) [EOL] save_data ( ) [EOL] [EOL] [EOL] scheduler = BackgroundScheduler ( ) [EOL] scheduler . start ( ) [EOL] scheduler . add_job ( func = update_users , trigger = IntervalTrigger ( hours = [number] ) , id = [string] , name = [string] , replace_existing = True ) [EOL] atexit . register ( lambda : scheduler . shutdown ( ) ) [EOL] [EOL] [EOL] def get_main_menu_markup ( ) : [EOL] markup = types . ReplyKeyboardMarkup ( ) [EOL] markup . row ( [string] , [string] ) [EOL] markup . row ( [string] ) [EOL] markup . row ( [string] , [string] ) [EOL] markup . row ( [string] , [string] ) [EOL] markup . resize_keyboard = True [EOL] return markup [EOL] [EOL] [EOL] def get_cancel_markup ( ) : [EOL] markup = types . ReplyKeyboardMarkup ( ) [EOL] markup . row ( [string] ) [EOL] markup . resize_keyboard = True [EOL] return markup [EOL] [EOL] [EOL] @ bot . message_handler ( commands = [ [string] ] ) @ bot . message_handler ( func = lambda mes : mes . text == [string] ) def greeting ( mes ) : [EOL] markup = get_main_menu_markup ( ) [EOL] user = db_acces . get_user ( mes . from_user . id ) [EOL] if user is None : [EOL] db_acces . create_user ( mes . from_user . first_name , mes . from_user . id ) [EOL] user = db_acces . get_user ( mes . from_user . id ) [EOL] current_users = int ( config [ [string] ] [ [string] ] ) + [number] [EOL] config . set ( [string] , [string] , str ( current_users ) ) [EOL] save_data ( ) [EOL] bot . send_message ( mes . from_user . id , [string] . format ( name = user . name ) , reply_markup = markup ) [EOL] [EOL] [EOL] @ bot . message_handler ( content_types = [ [string] ] , func = lambda mes : db_acces . get_user ( mes . from_user . id ) is None ) def other_message ( mes ) : [EOL] bot . send_message ( mes . from_user . id , [string] , reply_markup = types . ReplyKeyboardRemove ( ) ) [EOL] [EOL] [EOL] @ bot . message_handler ( func = lambda mes : mes . text == [string] and db_acces . get_user ( mes . from_user . id ) is not None ) def for_customers ( mes ) : [EOL] text = [string] [string] [string] [EOL] markup = types . ReplyKeyboardMarkup ( ) [EOL] markup . row ( [string] , [string] ) [EOL] markup . row ( [string] ) [EOL] markup . row ( [string] ) [EOL] markup . row_width = True [EOL] markup . resize_keyboard = True [EOL] bot . send_message ( mes . from_user . id , text , parse_mode = [string] , reply_markup = markup ) [EOL] [EOL] [EOL] @ bot . message_handler ( func = lambda mes : mes . text == [string] and db_acces . get_user_state ( mes . from_user . id ) is states . CHOOSE_OPTION ) def order_channel ( mes ) : [EOL] db_acces . set_user_state ( mes . from_user . id , states . FORWARD_POST_FOR_SUB ) [EOL] bot . send_message ( mes . from_user . id , bot_access_text , parse_mode = [string] , reply_markup = get_cancel_markup ( ) ) [EOL] [EOL] [EOL] @ bot . message_handler ( func = lambda mes : mes . text == [string] and db_acces . get_user_state ( mes . from_user . id ) is states . CHOOSE_OPTION ) def order_post ( mes ) : [EOL] db_acces . set_user_state ( mes . from_user . id , states . FORWARD_POST_FOR_WATCH ) [EOL] bot . send_message ( mes . from_user . id , [string] , parse_mode = [string] , reply_markup = get_cancel_markup ( ) ) [EOL] [EOL] [EOL] @ bot . message_handler ( func = lambda mes : db_acces . get_user_state ( mes . from_user . id ) is states . FORWARD_POST_FOR_WATCH or db_acces . get_user_state ( mes . from_user . id ) is states . FORWARD_POST_FOR_SUB ) def forward_message ( mes ) : [EOL] if not mes . text == [string] : [EOL] if db_acces . get_user_state ( mes . from_user . id ) == states . FORWARD_POST_FOR_WATCH and mes . forward_from_chat is not None : [EOL] username = mes . from_user . id [EOL] post_id = mes . message_id [EOL] user = db_acces . get_user_state ( mes . from_user . id ) [EOL] db_acces . create_order_post ( post_id , username , [number] , [number] , user ) [EOL] bot . send_message ( mes . from_user . id , [string] [string] ) [EOL] db_acces . set_user_state ( mes . from_user . id , states . SET_PRICE_FOR_WATCH ) [EOL] elif db_acces . get_user_state ( mes . from_user . id ) == states . FORWARD_POST_FOR_SUB and mes . forward_from_chat is not None : [EOL] [EOL] username = mes . forward_from_chat . username [EOL] try : [EOL] bot . get_chat_members_count ( [string] + username ) [EOL] except apihelper . ApiException : [EOL] bot . send_message ( mes . from_user . id , [string] ) [EOL] else : [EOL] user = db_acces . get_user_state ( mes . from_user . id ) [EOL] db_acces . create_channel ( username , [number] , [number] , user ) [EOL] bot . send_message ( mes . from_user . id , [string] [string] ) [EOL] db_acces . set_user_state ( mes . from_user . id , states . SET_PRICE_FOR_SUB ) [EOL] [EOL] else : [EOL] bot . send_message ( mes . from_user . id , [string] , reply_markup = get_cancel_markup ( ) ) [EOL] else : [EOL] db_acces . set_user_state ( mes . from_user . id , states . CHOOSE_OPTION ) [EOL] bot . send_message ( mes . from_user . id , [string] , reply_markup = get_main_menu_markup ( ) ) [EOL] [EOL] [EOL] @ bot . message_handler ( func = lambda mes : db_acces . get_user_state ( mes . from_user . id ) == states . SET_PRICE_FOR_WATCH ) def set_price_for_watch ( mes ) : [EOL] if not mes . text == [string] : [EOL] try : [EOL] price = float ( mes . text ) [EOL] except ValueError : [EOL] bot . send_message ( mes . from_user . id , [string] ) [EOL] else : [EOL] if price >= [number] : [EOL] bot . send_message ( mes . from_user . id , [string] , reply_markup = types . ReplyKeyboardRemove ( ) ) [EOL] db_acces . set_price_for_new_post ( mes . from_user . id , price ) [EOL] db_acces . set_user_state ( mes . from_user . id , states . SET_COUNT_OF_WATCH ) [EOL] else : [EOL] bot . send_message ( mes . from_user . id , [string] ) [EOL] else : [EOL] db_acces . set_user_state ( mes . from_user . id , states . CHOOSE_OPTION ) [EOL] db_acces . delete_post_order ( mes . from_user . id ) [EOL] bot . send_message ( mes . from_user . id , [string] , reply_markup = get_main_menu_markup ( ) ) [EOL] [EOL] [EOL] @ bot . message_handler ( func = lambda mes : db_acces . get_user_state ( mes . from_user . id ) == states . SET_COUNT_OF_WATCH ) def set_count_of_watch ( mes ) : [EOL] try : [EOL] count = int ( mes . text ) [EOL] except ValueError : [EOL] bot . send_message ( mes . from_user . id , [string] ) [EOL] else : [EOL] if count >= [number] : [EOL] price = db_acces . get_price_for_new_post ( mes . from_user . id ) [EOL] db_acces . set_watchs_for_new_post ( mes . from_user . id , count ) [EOL] res = count * price [EOL] bot . send_message ( mes . from_user . id , [string] [string] . format ( count = count , price = price , res = res ) ) [EOL] markup = types . ReplyKeyboardMarkup ( ) [EOL] markup . row ( [string] ) [EOL] markup . row ( [string] ) [EOL] markup . resize_keyboard = True [EOL] bot . send_message ( mes . from_user . id , [string] , reply_markup = markup ) [EOL] db_acces . set_user_state ( mes . from_user . id , states . CONFIRM_WATCHS ) [EOL] else : [EOL] bot . send_message ( mes . from_user . id , [string] ) [EOL] [EOL] [EOL] @ bot . message_handler ( func = lambda mes : db_acces . get_user_state ( mes . from_user . id ) == states . CONFIRM_WATCHS ) def confirm_watches ( mes ) : [EOL] if mes . text == [string] : [EOL] price = db_acces . get_price_for_new_post ( mes . from_user . id ) [EOL] count = db_acces . get_watchs_for_new_post ( mes . from_user . id ) [EOL] end_price = count * price [EOL] balance = db_acces . get_user_balance ( mes . from_user . id ) [EOL] if ( balance - end_price ) >= [number] : [EOL] db_acces . set_user_balance ( mes . from_user . id , balance - end_price ) [EOL] db_acces . publish_post_order ( mes . from_user . id ) [EOL] bot . send_message ( mes . from_user . id , [string] , reply_markup = get_main_menu_markup ( ) ) [EOL] db_acces . set_user_state ( mes . from_user . id , states . CHOOSE_OPTION ) [EOL] else : [EOL] bot . send_message ( mes . from_user . id , [string] , reply_markup = get_main_menu_markup ( ) ) [EOL] db_acces . delete_post_order ( mes . from_user . id ) [EOL] db_acces . set_user_state ( mes . from_user . id , states . CHOOSE_OPTION ) [EOL] elif mes . text == [string] : [EOL] bot . send_message ( mes . from_user . id , [string] , reply_markup = get_main_menu_markup ( ) ) [EOL] db_acces . delete_post_order ( mes . from_user . id ) [EOL] db_acces . set_user_state ( mes . from_user . id , states . CHOOSE_OPTION ) [EOL] else : [EOL] bot . send_message ( mes . from_user . id , [string] ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ bot . message_handler ( func = lambda mes : db_acces . get_user_state ( mes . from_user . id ) == states . SET_PRICE_FOR_SUB ) def set_price_for_sub ( mes ) : [EOL] if not mes . text == [string] : [EOL] try : [EOL] price = float ( mes . text ) [EOL] except ValueError : [EOL] bot . send_message ( mes . from_user . id , [string] ) [EOL] else : [EOL] if price >= [number] : [EOL] bot . send_message ( mes . from_user . id , [string] , reply_markup = types . ReplyKeyboardRemove ( ) ) [EOL] db_acces . set_price_for_new_channel ( mes . from_user . id , price ) [EOL] db_acces . set_user_state ( mes . from_user . id , states . SET_COUNT_OF_SUB ) [EOL] else : [EOL] bot . send_message ( mes . from_user . id , [string] ) [EOL] else : [EOL] db_acces . set_user_state ( mes . from_user . id , states . CHOOSE_OPTION ) [EOL] db_acces . delete_channel_order ( mes . from_user . id ) [EOL] bot . send_message ( mes . from_user . id , [string] , reply_markup = get_main_menu_markup ( ) ) [EOL] [EOL] [EOL] @ bot . message_handler ( func = lambda mes : db_acces . get_user_state ( mes . from_user . id ) == states . SET_COUNT_OF_SUB ) def set_count_of_sub ( mes ) : [EOL] try : [EOL] count = int ( mes . text ) [EOL] except ValueError : [EOL] bot . send_message ( mes . from_user . id , [string] ) [EOL] else : [EOL] if count >= [number] : [EOL] price = db_acces . get_price_for_new_channel ( mes . from_user . id ) [EOL] db_acces . set_sub_for_new_channel ( mes . from_user . id , count ) [EOL] res = count * price [EOL] bot . send_message ( mes . from_user . id , [string] [string] . format ( count = count , price = price , res = res ) ) [EOL] markup = types . ReplyKeyboardMarkup ( ) [EOL] markup . row ( [string] ) [EOL] markup . row ( [string] ) [EOL] markup . resize_keyboard = True [EOL] bot . send_message ( mes . from_user . id , [string] , reply_markup = markup ) [EOL] db_acces . set_user_state ( mes . from_user . id , states . CONFIRM_SUB ) [EOL] else : [EOL] bot . send_message ( mes . from_user . id , [string] ) [EOL] [EOL] [EOL] @ bot . message_handler ( func = lambda mes : db_acces . get_user_state ( mes . from_user . id ) == states . CONFIRM_SUB ) def confirm_sub ( mes ) : [EOL] if mes . text == [string] : [EOL] price = db_acces . get_price_for_new_channel ( mes . from_user . id ) [EOL] count = db_acces . get_sub_for_new_channel ( mes . from_user . id ) [EOL] end_price = price * count [EOL] balance = db_acces . get_user_balance ( mes . from_user . id ) [EOL] if ( balance - end_price ) >= [number] : [EOL] db_acces . set_user_balance ( mes . from_user . id , balance - end_price ) [EOL] db_acces . publish_channel_order ( mes . from_user . id ) [EOL] bot . send_message ( mes . from_user . id , [string] , reply_markup = get_main_menu_markup ( ) ) [EOL] db_acces . set_user_state ( mes . from_user . id , states . CHOOSE_OPTION ) [EOL] else : [EOL] bot . send_message ( mes . from_user . id , [string] , reply_markup = get_main_menu_markup ( ) ) [EOL] db_acces . delete_post_order ( mes . from_user . id ) [EOL] db_acces . set_user_state ( mes . from_user . id , states . CHOOSE_OPTION ) [EOL] elif mes . text == [string] : [EOL] bot . send_message ( mes . from_user . id , [string] , reply_markup = get_main_menu_markup ( ) ) [EOL] db_acces . delete_post_order ( mes . from_user . id ) [EOL] db_acces . set_user_state ( mes . from_user . id , states . CHOOSE_OPTION ) [EOL] else : [EOL] bot . send_message ( mes . from_user . id , [string] ) [EOL] [EOL] [EOL] @ bot . message_handler ( func = lambda mes : mes . text == [string] ) def my_orders ( mes ) : [EOL] text = [string] [EOL] posts = db_acces . get_user_order_posts ( mes . from_user . id ) [EOL] channels = db_acces . get_user_order_channels ( mes . from_user . id ) [EOL] if channels . count ( ) > [number] : [EOL] for c in channels : [EOL] username = c . username [EOL] count = c . how_many_sub [EOL] price = c . price_for_sub [EOL] end_price = c . price_for_order [EOL] text += [string] [string] [string] . format ( username = username , end_price = end_price , price = price , count = count ) [EOL] if posts . count ( ) > [number] : [EOL] i = [number] [EOL] for p in posts : [EOL] i += [number] [EOL] username = p . from_chat_username [EOL] count = p . how_many_watch [EOL] price = p . price_for_watch [EOL] end_price = p . price_for_order [EOL] id_p = p . from_message_id [EOL] text += [string] [string] [string] . format ( username = username , i = i , end_price = end_price , price = price , count = count , id = id_p ) [EOL] else : [EOL] text = [string] [EOL] bot . send_message ( mes . from_user . id , text , parse_mode = [string] ) [EOL] [EOL] [EOL] @ bot . message_handler ( func = lambda mes : mes . text == [string] and db_acces . get_user ( mes . from_user . id ) is not None ) def profile ( mes ) : [EOL] user = db_acces . get_user ( mes . from_user . id ) [EOL] uname = [string] [EOL] if mes . from_user . username is not None : [EOL] uname = mes . from_user . username [EOL] text = [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] . format ( name = user . name , id = str ( user . telegram_id ) , uname = [string] + uname , sub = user . made_sub , post = user . watched_posts , isub = user . income_sub , iwatch = user . income_watched , balance = user . balance , ded = user . deduced , earned = user . earned ) [EOL] bot . send_message ( mes . from_user . id , text , parse_mode = [string] ) [EOL] [EOL] [EOL] @ bot . message_handler ( func = lambda mes : mes . text == [string] and db_acces . get_user ( mes . from_user . id ) is not None ) def get_balance ( mes ) : [EOL] balance = db_acces . get_user_balance ( mes . from_user . id ) [EOL] markup = types . ReplyKeyboardMarkup ( ) [EOL] markup . row ( [string] , [string] ) [EOL] markup . row ( [string] ) [EOL] markup . resize_keyboard = True [EOL] bot . send_message ( mes . from_user . id , [string] . format ( b = str ( balance ) ) , reply_markup = markup ) [EOL] [EOL] [EOL] @ bot . message_handler ( func = lambda mes : mes . text == [string] and db_acces . get_user ( mes . from_user . id ) is not None ) def put_money ( mes ) : [EOL] markup = types . ReplyKeyboardMarkup ( ) [EOL] markup . row ( [string] , [string] , [string] ) [EOL] markup . row ( [string] ) [EOL] bot . send_message ( mes . from_user . id , [string] , reply_markup = markup ) [EOL] [EOL] [EOL] @ bot . message_handler ( func = lambda mes : mes . text == [string] and db_acces . get_user ( mes . from_user . id ) is not None ) def put_money_qiwi ( mes ) : [EOL] user_id = str ( mes . from_user . id ) [EOL] text = [string] [string] [string] . format ( id = user_id ) [EOL] markup = types . ReplyKeyboardMarkup ( ) [EOL] markup . row ( [string] ) [EOL] bot . send_message ( mes . from_user . id , text , reply_markup = markup , parse_mode = [string] ) [EOL] [EOL] [EOL] @ bot . message_handler ( func = lambda mes : mes . text == [string] and db_acces . get_user ( mes . from_user . id ) is not None ) def put_money_yandex ( mes ) : [EOL] user_id = str ( mes . from_user . id ) [EOL] text = [string] [string] [string] . format ( id = user_id ) [EOL] markup = types . ReplyKeyboardMarkup ( ) [EOL] markup . row ( [string] ) [EOL] bot . send_message ( mes . from_user . id , text , reply_markup = markup , parse_mode = [string] ) [EOL] [EOL] [EOL] @ bot . message_handler ( func = lambda mes : mes . text == [string] and db_acces . get_user ( mes . from_user . id ) is not None ) def put_money_other ( mes ) : [EOL] user_id = str ( mes . from_user . id ) [EOL] text = [string] [string] [string] . format ( id = user_id ) [EOL] markup = types . ReplyKeyboardMarkup ( ) [EOL] markup . row ( [string] ) [EOL] bot . send_message ( mes . from_user . id , text , reply_markup = markup , parse_mode = [string] ) [EOL] [EOL] [EOL] @ bot . message_handler ( func = lambda mes : mes . text == [string] and db_acces . get_user ( mes . from_user . id ) is not None ) def take_money ( mes ) : [EOL] user_id = str ( mes . from_user . id ) [EOL] text = [string] . format ( id = user_id ) [EOL] markup = types . ReplyKeyboardMarkup ( ) [EOL] markup . row ( [string] ) [EOL] bot . send_message ( mes . from_user . id , text , reply_markup = markup , parse_mode = [string] ) [EOL] [EOL] [EOL] @ bot . message_handler ( func = lambda mes : mes . text == [string] ) def rules ( mes ) : [EOL] text = [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [EOL] bot . send_message ( mes . from_user . id , text , parse_mode = [string] ) [EOL] [EOL] [EOL] @ bot . message_handler ( func = lambda mes : mes . text == [string] ) def stat ( mes ) : [EOL] users = str ( db_acces . get_users ( ) . count ( ) ) [EOL] channels = str ( db_acces . get_channels ( ) . count ( ) ) [EOL] posts = str ( db_acces . get_posts ( ) . count ( ) ) [EOL] new_users = config [ [string] ] [ [string] ] [EOL] end_channels = config [ [string] ] [ [string] ] [EOL] end_posts = config [ [string] ] [ [string] ] [EOL] got_money = config [ [string] ] [ [string] ] [EOL] gave_money = config [ [string] ] [ [string] ] [EOL] [EOL] text = [string] [string] [string] [string] [string] [string] [string] [string] [string] . format ( u = users , nu = new_users , c = channels , p = posts , nc = end_posts , np = end_posts , gm = got_money , gam = gave_money ) [EOL] bot . send_message ( mes . from_user . id , text , parse_mode = [string] ) [EOL] [EOL] [EOL] @ bot . message_handler ( func = lambda mes : mes . text == [string] ) def watch_post ( mes ) : [EOL] queue = db_acces . get_user_pos_post ( mes . from_user . id ) [EOL] post = db_acces . get_post ( queue ) [EOL] if post is not None : [EOL] money = post . price_for_watch / [number] [EOL] username = post . from_chat_username [EOL] bot . forward_message ( mes . from_user . id , username , post . from_message_id ) [EOL] msg = bot . send_message ( mes . from_user . id , [string] ) [EOL] db_acces . decrement_watchs ( queue ) [EOL] db_acces . increment_watched_posts ( mes . from_user . id ) [EOL] db_acces . add_sum_to_balance ( mes . from_user . id , money ) [EOL] db_acces . add_sum_to_earned ( mes . from_user . id , money ) [EOL] db_acces . add_income_watched ( mes . from_user . id , money ) [EOL] time . sleep ( [number] ) [EOL] bot . edit_message_text ( [string] . format ( m = str ( money ) ) , mes . from_user . id , msg . message_id ) [EOL] db_acces . set_user_pos_post ( mes . from_user . id , queue + [number] ) [EOL] [EOL] bot . send_message ( mes . from_user . id , [string] , reply_markup = get_main_menu_markup ( ) ) [EOL] [EOL] if db_acces . get_post_count_of_watch ( queue ) == [number] : [EOL] new_post = int ( config [ [string] ] [ [string] ] ) + [number] [EOL] config . set ( [string] , [string] , str ( new_post ) ) [EOL] save_data ( ) [EOL] db_acces . delete_channel ( queue ) [EOL] [EOL] db_acces . delete_post ( queue ) [EOL] db_acces . decrement_user_pos_post ( queue ) [EOL] else : [EOL] bot . send_message ( mes . from_user . id , [string] ) [EOL] [EOL] [EOL] @ bot . message_handler ( func = lambda mes : mes . text == [string] ) def subscribe_to_channel ( mes ) : [EOL] queue = db_acces . get_user_pos_channel ( mes . from_user . id ) [EOL] channel = db_acces . get_channel ( queue ) [EOL] if channel is not None : [EOL] money = channel . price_for_sub [EOL] link = db_acces . get_channel_link ( queue ) [EOL] keyboard = types . InlineKeyboardMarkup ( ) [EOL] button_sub = types . InlineKeyboardButton ( text = [string] , url = link ) [EOL] button_check = types . InlineKeyboardButton ( [string] , callback_data = channel . username ) [EOL] keyboard . add ( button_sub , button_check ) [EOL] bot . send_message ( mes . from_user . id , [string] , reply_markup = keyboard ) [EOL] else : [EOL] bot . send_message ( mes . from_user . id , [string] , reply_markup = get_main_menu_markup ( ) ) [EOL] [EOL] [EOL] @ bot . callback_query_handler ( func = lambda call : True ) def check_subscription ( call ) : [EOL] [comment] [EOL] username = call . data [EOL] try : [EOL] if bot . get_chat_member ( [string] + username , call . from_user . id ) is not None : [EOL] queue = db_acces . get_user_pos_channel ( call . from_user . id ) [EOL] channel = db_acces . get_channel ( queue ) [EOL] [EOL] if channel is None : [EOL] bot . delete_message ( call . from_user . id , call . message . message_id ) [EOL] return [EOL] [EOL] money = channel . price_for_sub / [number] [EOL] [EOL] db_acces . decrement_sub ( queue ) [EOL] db_acces . increment_made_sub ( call . from_user . id ) [EOL] db_acces . add_sum_to_balance ( call . from_user . id , money ) [EOL] db_acces . add_sum_to_earned ( call . from_user . id , money ) [EOL] db_acces . add_income_sub ( call . from_user . id , money ) [EOL] [EOL] bot . edit_message_text ( [string] . format ( m = str ( money ) ) , call . from_user . id , call . message . message_id , reply_markup = get_main_menu_markup ( ) ) [EOL] [EOL] db_acces . set_user_pos_channel ( call . from_user . id , queue + [number] ) [EOL] if db_acces . get_channel_count_of_sub ( queue ) == [number] : [EOL] new_channel = int ( config [ [string] ] [ [string] ] ) + [number] [EOL] config . set ( [string] , [string] , str ( new_channel ) ) [EOL] save_data ( ) [EOL] db_acces . delete_channel ( queue ) [EOL] db_acces . decrement_user_pos_channel ( queue ) [EOL] else : [EOL] bot . send_message ( call . from_user . id , [string] ) [EOL] except apihelper . ApiException : [EOL] queue = db_acces . get_user_pos_channel ( call . from_user . id ) [EOL] channel = db_acces . get_channel ( queue ) [EOL] [EOL] if channel is None : [EOL] bot . delete_message ( call . from_user . id , call . message . message_id ) [EOL] return [EOL] [EOL] money = channel . price_for_sub / [number] [EOL] [EOL] db_acces . decrement_sub ( queue ) [EOL] db_acces . increment_made_sub ( call . from_user . id ) [EOL] db_acces . add_sum_to_balance ( call . from_user . id , money ) [EOL] db_acces . add_sum_to_earned ( call . from_user . id , money ) [EOL] db_acces . add_income_sub ( call . from_user . id , money ) [EOL] [EOL] bot . edit_message_text ( [string] . format ( m = str ( money ) ) , call . from_user . id , call . message . message_id ) [EOL] bot . send_message ( call . from_user . id , [string] , reply_markup = get_main_menu_markup ( ) ) [EOL] [EOL] db_acces . set_user_pos_channel ( call . from_user . id , queue + [number] ) [EOL] if db_acces . get_channel_count_of_sub ( queue ) == [number] : [EOL] new_channel = int ( config [ [string] ] [ [string] ] ) + [number] [EOL] config . set ( [string] , [string] , str ( new_channel ) ) [EOL] save_data ( ) [EOL] db_acces . delete_channel ( queue ) [EOL] db_acces . delete_channel ( queue ) [EOL] db_acces . decrement_user_pos_channel ( queue ) [EOL] [EOL] [EOL] def get_admin_markup ( ) : [EOL] markup = types . ReplyKeyboardMarkup ( ) [EOL] markup . row ( [string] ) [EOL] markup . row ( [string] ) [EOL] markup . row ( [string] ) [EOL] markup . row ( [string] ) [EOL] markup . resize_keyboard = True [EOL] return markup [EOL] [EOL] [EOL] @ bot . message_handler ( commands = [ [string] ] , func = lambda mes : ( mes . from_user . id == ADMIN_ID or mes . from_user . id == MY_ID ) and db_acces . get_user_state ( mes . from_user . id ) == states . CHOOSE_OPTION ) @ bot . message_handler ( func = lambda mes : ( mes . from_user . id == ADMIN_ID or mes . from_user . id == MY_ID ) and db_acces . get_user_state ( mes . from_user . id ) == states . CHOOSE_OPTION and ( mes . text == [string] ) ) def admin_panel ( mes ) : [EOL] text = [string] . format ( u = mes . from_user . first_name ) [EOL] bot . send_message ( mes . from_user . id , text , reply_markup = get_admin_markup ( ) ) [EOL] [EOL] [EOL] @ bot . message_handler ( func = lambda mes : mes . text == [string] and ( mes . from_user . id == ADMIN_ID or mes . from_user . id == MY_ID ) and db_acces . get_user_state ( mes . from_user . id ) == states . CHOOSE_OPTION ) def add_sum_to_balance_id ( mes ) : [EOL] text = [string] [string] [EOL] markup = types . ReplyKeyboardMarkup ( ) [EOL] markup . row ( [string] ) [EOL] markup . resize_keyboard = True [EOL] db_acces . set_user_state ( mes . from_user . id , states . ADD_MONEY ) [EOL] bot . send_message ( mes . from_user . id , text , reply_markup = markup ) [EOL] [EOL] [EOL] @ bot . message_handler ( func = lambda mes : ( mes . from_user . id == ADMIN_ID or mes . from_user . id == MY_ID ) and db_acces . get_user_state ( mes . from_user . id ) == states . ADD_MONEY ) def add_sum_to_balance ( mes ) : [EOL] if mes . text == [string] : [EOL] db_acces . set_user_state ( mes . from_user . id , states . CHOOSE_OPTION ) [EOL] bot . send_message ( mes . from_user . id , [string] , reply_markup = get_admin_markup ( ) ) [EOL] return [EOL] try : [EOL] user_id , money = map ( int , str ( mes . text ) . split ( [string] ) ) [EOL] except ValueError : [EOL] bot . send_message ( mes . from_user . id , [string] ) [EOL] else : [EOL] result = db_acces . add_sum_to_balance ( user_id , money ) [EOL] db_acces . set_user_state ( mes . from_user . id , states . CHOOSE_OPTION ) [EOL] if result : [EOL] got_money = int ( config [ [string] ] [ [string] ] ) + money [EOL] config . set ( [string] , [string] , str ( got_money ) ) [EOL] save_data ( ) [EOL] bot . send_message ( user_id , [string] . format ( str ( money ) ) ) [EOL] bot . send_message ( mes . from_user . id , [string] , reply_markup = get_admin_markup ( ) ) [EOL] else : [EOL] bot . send_message ( mes . from_user . id , [string] , reply_markup = get_admin_markup ( ) ) [EOL] [EOL] [EOL] @ bot . message_handler ( func = lambda mes : mes . text == [string] and ( mes . from_user . id == ADMIN_ID or mes . from_user . id == MY_ID ) and db_acces . get_user_state ( mes . from_user . id ) == states . CHOOSE_OPTION ) def remove_sum_from_balance_id ( mes ) : [EOL] text = [string] [string] [EOL] markup = types . ReplyKeyboardMarkup ( ) [EOL] markup . row ( [string] ) [EOL] markup . resize_keyboard = True [EOL] db_acces . set_user_state ( mes . from_user . id , states . REMOVE_MONEY ) [EOL] bot . send_message ( mes . from_user . id , text , reply_markup = markup ) [EOL] [EOL] [EOL] @ bot . message_handler ( func = lambda mes : ( mes . from_user . id == ADMIN_ID or mes . from_user . id == MY_ID ) and db_acces . get_user_state ( mes . from_user . id ) == states . REMOVE_MONEY ) def remove_sum_from_balance ( mes ) : [EOL] if mes . text == [string] : [EOL] db_acces . set_user_state ( mes . from_user . id , states . CHOOSE_OPTION ) [EOL] bot . send_message ( mes . from_user . id , [string] , reply_markup = get_admin_markup ( ) ) [EOL] return [EOL] try : [EOL] user_id , money = map ( int , str ( mes . text ) . split ( [string] ) ) [EOL] except ValueError : [EOL] bot . send_message ( mes . from_user . id , [string] ) [EOL] else : [EOL] balance = db_acces . get_user_balance ( user_id ) [EOL] if balance is None : [EOL] bot . send_message ( mes . from_user . id , [string] , reply_markup = get_admin_markup ( ) ) [EOL] db_acces . set_user_state ( mes . from_user . id , states . CHOOSE_OPTION ) [EOL] return [EOL] if ( balance - money ) <= [number] : [EOL] result = db_acces . set_user_balance ( user_id , [number] ) [EOL] else : [EOL] result = db_acces . set_user_balance ( user_id , balance - money ) [EOL] db_acces . set_user_state ( mes . from_user . id , states . CHOOSE_OPTION ) [EOL] if result : [EOL] gave_money = int ( config [ [string] ] [ [string] ] ) + money [EOL] config . set ( [string] , [string] , str ( gave_money ) ) [EOL] save_data ( ) [EOL] bot . send_message ( user_id , [string] . format ( str ( money ) ) ) [EOL] bot . send_message ( mes . from_user . id , [string] , reply_markup = get_admin_markup ( ) ) [EOL] else : [EOL] bot . send_message ( mes . from_user . id , [string] , reply_markup = get_admin_markup ( ) ) [EOL] [EOL] [EOL] @ bot . message_handler ( func = lambda mes : mes . text == [string] and ( mes . from_user . id == ADMIN_ID or mes . from_user . id == MY_ID ) and db_acces . get_user_state ( mes . from_user . id ) == states . CHOOSE_OPTION ) def insert_text ( mes ) : [EOL] text = [string] [string] [string] [string] [EOL] db_acces . set_user_state ( mes . from_user . id , states . SHARE_INFO ) [EOL] bot . send_message ( mes . from_user . id , text , reply_markup = types . ReplyKeyboardRemove ( ) ) [EOL] [EOL] [EOL] @ bot . message_handler ( func = lambda mes : ( mes . from_user . id == ADMIN_ID or mes . from_user . id == MY_ID ) and db_acces . get_user_state ( mes . from_user . id ) == states . SHARE_INFO ) def share_info ( mes ) : [EOL] text = mes . text [EOL] users = db_acces . get_users ( ) [EOL] for u in users : [EOL] try : [EOL] bot . send_message ( u . telegram_id , text , parse_mode = [string] ) [EOL] except : [EOL] pass [EOL] db_acces . set_user_state ( mes . from_user . id , states . CHOOSE_OPTION ) [EOL] bot . send_message ( mes . from_user . id , [string] , reply_markup = get_admin_markup ( ) ) [EOL] [EOL] [EOL] @ bot . message_handler ( content_types = [ [string] ] ) def other_message ( mes ) : [EOL] bot . send_message ( mes . from_user . id , [string] , reply_markup = types . ReplyKeyboardRemove ( ) ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] if [string] in list ( os . environ . keys ( ) ) : [EOL] @ server . route ( [string] + TOKEN , methods = [ [string] ] ) def get_message ( ) : [EOL] bot . process_new_updates ( [ telebot . types . Update . de_json ( request . stream . read ( ) . decode ( [string] ) ) ] ) [EOL] return [string] , [number] [EOL] [EOL] @ server . route ( [string] ) def webhook ( ) : [EOL] bot . remove_webhook ( ) [EOL] bot . set_webhook ( url = [string] + TOKEN ) [EOL] return [string] , [number] [EOL] if __name__ == [string] : [EOL] db_acces . init_db ( ) [EOL] server . run ( host = [string] , port = int ( os . environ . get ( [string] , [number] ) ) ) [EOL] else : [EOL] bot . remove_webhook ( ) [EOL] bot . polling ( True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 $flask.app.Flask$ 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
from typing import Any [EOL] import builtins [EOL] import typing [EOL] from db_layer . models import * [EOL] import my_logger [EOL] import logging [EOL] [EOL] [EOL] logger = my_logger . get_logger ( ) [EOL] logger . setLevel ( logging . INFO ) [EOL] [EOL] [EOL] def init_db ( ) : [EOL] db . close ( ) [EOL] db . connect ( ) [EOL] db . create_tables ( [ User , OrderPost , OrderChannel ] , safe = True ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def create_user ( name , telegram_id ) : [EOL] try : [EOL] logger . info ( [string] . format ( id = telegram_id ) ) [EOL] User . create ( name = name , telegram_id = telegram_id ) [EOL] except Exception : [EOL] logger . error ( [string] ) [EOL] return False [EOL] else : [EOL] logger . info ( [string] . format ( id = telegram_id ) ) [EOL] return True [EOL] [EOL] [EOL] def get_user ( telegram_id ) : [EOL] try : [EOL] logger . info ( [string] . format ( id = telegram_id ) ) [EOL] user = User . get ( User . telegram_id == telegram_id ) [EOL] except DoesNotExist : [EOL] logger . error ( [string] ) [EOL] return None [EOL] else : [EOL] logger . info ( [string] . format ( id = telegram_id ) ) [EOL] return user [EOL] [EOL] [EOL] def get_users ( ) : [EOL] try : [EOL] logger . info ( [string] ) [EOL] users = User . select ( ) [EOL] except DoesNotExist : [EOL] logger . error ( [string] ) [EOL] return None [EOL] else : [EOL] logger . info ( [string] ) [EOL] return users [EOL] [EOL] [EOL] def set_user_state ( telegram_id , state ) : [EOL] user = get_user ( telegram_id ) [EOL] if user is not None : [EOL] logger . info ( [string] ) [EOL] user . state = state [EOL] user . save ( ) [EOL] return True [EOL] else : [EOL] logger . error ( [string] ) [EOL] return False [EOL] [EOL] [EOL] def get_user_state ( telegram_id ) : [EOL] user = get_user ( telegram_id ) [EOL] if user is not None : [EOL] logger . info ( [string] ) [EOL] return user . state [EOL] else : [EOL] logger . error ( [string] ) [EOL] return None [EOL] [EOL] [EOL] def get_user_order_channels ( telegram_id ) : [EOL] user = get_user ( telegram_id ) [EOL] if user is not None : [EOL] orders = OrderChannel . select ( ) . where ( OrderChannel . customer == user and OrderChannel . editing == False ) [EOL] return orders [EOL] else : [EOL] return None [EOL] [EOL] [EOL] def get_user_order_posts ( telegram_id ) : [EOL] user = get_user ( telegram_id ) [EOL] if user is not None : [EOL] orders = OrderPost . select ( ) . where ( OrderPost . customer == user and OrderPost . editing == False ) [EOL] return orders [EOL] else : [EOL] return None [EOL] [EOL] [EOL] def set_user_pos_post ( telegram_id , position ) : [EOL] user = get_user ( telegram_id ) [EOL] if user is not None : [EOL] user . pos_post = position [EOL] user . save ( ) [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] [EOL] def decrement_user_pos_post ( queue ) : [EOL] users = User . select ( ) . where ( User . pos_post >= queue ) [EOL] for u in users : [EOL] u . pos_post -= [number] [EOL] u . save ( ) [EOL] return True [EOL] [EOL] [EOL] def decrement_user_pos_channel ( queue ) : [EOL] users = User . select ( ) . where ( User . pos_channel >= queue ) [EOL] for u in users : [EOL] u . pos_channel -= [number] [EOL] u . save ( ) [EOL] return True [EOL] [EOL] [EOL] def get_user_pos_post ( telegram_id ) : [EOL] user = get_user ( telegram_id ) [EOL] if user is not None : [EOL] return user . pos_post [EOL] else : [EOL] return None [EOL] [EOL] [EOL] def set_user_pos_channel ( telegram_id , position ) : [EOL] user = get_user ( telegram_id ) [EOL] if user is not None : [EOL] user . pos_channel = position [EOL] user . save ( ) [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] [EOL] def get_user_pos_channel ( telegram_id ) : [EOL] user = get_user ( telegram_id ) [EOL] if user is not None : [EOL] return user . pos_channel [EOL] else : [EOL] return None [EOL] [EOL] [EOL] def increment_watched_posts ( telegram_id ) : [EOL] user = get_user ( telegram_id ) [EOL] if user is not None : [EOL] user . watched_posts += [number] [EOL] user . save ( ) [EOL] return False [EOL] else : [EOL] return None [EOL] [EOL] [EOL] def increment_made_sub ( telegram_id ) : [EOL] user = get_user ( telegram_id ) [EOL] if user is not None : [EOL] user . made_sub += [number] [EOL] user . save ( ) [EOL] return False [EOL] else : [EOL] return None [EOL] [EOL] [EOL] def get_income_sub ( telegram_id ) : [EOL] user = get_user ( telegram_id ) [EOL] if user is not None : [EOL] return user . income_sub [EOL] else : [EOL] return None [EOL] [EOL] [EOL] def add_income_sub ( telegram_id , count ) : [EOL] user = get_user ( telegram_id ) [EOL] if user is not None : [EOL] user . income_sub += count [EOL] user . save ( ) [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] [EOL] def get_income_watched ( telegram_id ) : [EOL] user = get_user ( telegram_id ) [EOL] if user is not None : [EOL] return user . income_watched [EOL] else : [EOL] return None [EOL] [EOL] [EOL] def add_income_watched ( telegram_id , count ) : [EOL] user = get_user ( telegram_id ) [EOL] if user is not None : [EOL] user . income_watched += count [EOL] user . save ( ) [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] [EOL] def get_user_balance ( telegram_id ) : [EOL] user = get_user ( telegram_id ) [EOL] if user is not None : [EOL] return user . balance [EOL] else : [EOL] return None [EOL] [EOL] [EOL] def set_user_balance ( telegram_id , sum_set ) : [EOL] user = get_user ( telegram_id ) [EOL] if user is not None : [EOL] user . balance = sum_set [EOL] user . save ( ) [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] [EOL] def add_sum_to_balance ( telegram_id , sum_add ) : [EOL] user = get_user ( telegram_id ) [EOL] if user is not None : [EOL] user . balance += sum_add [EOL] user . save ( ) [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] [EOL] def add_sum_to_deduced ( telegram_id , sum_add ) : [EOL] user = get_user ( telegram_id ) [EOL] if user is not None : [EOL] user . deduced += sum_add [EOL] user . save ( ) [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] [EOL] def add_sum_to_earned ( telegram_id , sum_add ) : [EOL] user = get_user ( telegram_id ) [EOL] if user is not None : [EOL] user . earned += sum_add [EOL] user . save ( ) [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] [EOL] def get_deduced ( telegram_id ) : [EOL] user = get_user ( telegram_id ) [EOL] if user is not None : [EOL] return user . deduced [EOL] else : [EOL] return None [EOL] [EOL] [EOL] def get_earned ( telegram_id ) : [EOL] user = get_user ( telegram_id ) [EOL] if user is not None : [EOL] return user . earned [EOL] else : [EOL] return None [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def create_order_post ( from_id , from_chat , price , how_many , customer ) : [EOL] try : [EOL] queue = OrderPost . select ( ) . count ( ) + [number] [EOL] OrderPost . create ( queue = queue , from_message_id = from_id , from_chat_username = from_chat , price_for_watch = price , how_many_watch = how_many , customer = customer ) [EOL] return True [EOL] except Exception : [EOL] return False [EOL] [EOL] [EOL] def get_post ( queue ) : [EOL] try : [EOL] post = OrderPost . get ( OrderPost . queue == queue ) [EOL] except DoesNotExist : [EOL] return None [EOL] else : [EOL] return post [EOL] [EOL] [EOL] def get_posts ( ) : [EOL] try : [EOL] logger . info ( [string] ) [EOL] posts = OrderPost . select ( ) [EOL] except DoesNotExist : [EOL] logger . error ( [string] ) [EOL] return None [EOL] else : [EOL] logger . info ( [string] ) [EOL] return posts [EOL] [EOL] [EOL] def get_post_count_of_watch ( queue ) : [EOL] post = get_post ( queue ) [EOL] if post is not None : [EOL] return post . how_many_watch [EOL] else : [EOL] return None [EOL] [EOL] [EOL] def get_editing_post ( telegram_id ) : [EOL] user = get_user ( telegram_id ) [EOL] if user is not None : [EOL] try : [EOL] post = OrderPost . get ( OrderPost . customer == user and OrderPost . editing ) [EOL] except DoesNotExist : [EOL] return None [EOL] else : [EOL] return post [EOL] else : [EOL] return None [EOL] [EOL] [EOL] def delete_post ( queue ) : [EOL] post = get_post ( queue ) [EOL] if post is not None : [EOL] posts = OrderPost . select ( ) . where ( OrderPost . queue > post . queue ) [EOL] for p in posts : [EOL] p . queue -= [number] [EOL] p . save ( ) [EOL] post . delete_instance ( ) [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] [EOL] def set_price_for_new_post ( telegram_id , value ) : [EOL] post = get_editing_post ( telegram_id ) [EOL] if post is not None : [EOL] post . price_for_watch = value [EOL] post . save ( ) [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] [EOL] def get_price_for_new_post ( telegram_id ) : [EOL] post = get_editing_post ( telegram_id ) [EOL] if post is not None : [EOL] return post . price_for_watch [EOL] else : [EOL] return None [EOL] [EOL] [EOL] def set_watchs_for_new_post ( telegram_id , value ) : [EOL] post = get_editing_post ( telegram_id ) [EOL] if post is not None : [EOL] post . how_many_watch = value [EOL] post . save ( ) [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] [EOL] def get_watchs_for_new_post ( telegram_id ) : [EOL] post = get_editing_post ( telegram_id ) [EOL] if post is not None : [EOL] return post . how_many_watch [EOL] else : [EOL] return None [EOL] [EOL] [EOL] def publish_post_order ( telegram_id ) : [EOL] post = get_editing_post ( telegram_id ) [EOL] if post is not None : [EOL] post . editing = False [EOL] post . price_for_order = post . how_many_watch * post . price_for_watch [EOL] post . save ( ) [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] [EOL] def delete_post_order ( telegram_id ) : [EOL] post = get_editing_post ( telegram_id ) [EOL] if post is not None : [EOL] post . delete_instance ( ) [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] [EOL] def get_price_for_watch ( queue ) : [EOL] post = get_post ( queue ) [EOL] if post is not None : [EOL] return post . price_for_watch [EOL] else : [EOL] return None [EOL] [EOL] [EOL] def get_price_for_post_order ( queue ) : [EOL] post = get_post ( queue ) [EOL] if post is not None : [EOL] return post . price_for_order [EOL] else : [EOL] return None [EOL] [EOL] [EOL] def decrement_watchs ( queue ) : [EOL] post = get_post ( queue ) [EOL] if post is not None : [EOL] post . how_many_watch -= [number] [EOL] post . save ( ) [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def create_channel ( username , price , how_many , customer ) : [EOL] try : [EOL] queue = OrderChannel . select ( ) . count ( ) + [number] [EOL] OrderChannel . create ( queue = queue , username = username , price_for_sub = price , how_many_sub = how_many , customer = customer ) [EOL] return True [EOL] except Exception : [EOL] return False [EOL] [EOL] [EOL] def get_channels ( ) : [EOL] try : [EOL] logger . info ( [string] ) [EOL] channels = OrderChannel . select ( ) [EOL] except DoesNotExist : [EOL] logger . error ( [string] ) [EOL] return None [EOL] else : [EOL] logger . info ( [string] ) [EOL] return channels [EOL] [EOL] [EOL] def get_channel ( queue ) : [EOL] try : [EOL] chanel = OrderChannel . get ( OrderChannel . queue == queue ) [EOL] except DoesNotExist : [EOL] return None [EOL] else : [EOL] return chanel [EOL] [EOL] [EOL] def get_editing_channel ( telegram_id ) : [EOL] user = get_user ( telegram_id ) [EOL] if user is not None : [EOL] try : [EOL] channel = OrderChannel . get ( OrderChannel . customer == user and OrderChannel . editing ) [EOL] except DoesNotExist : [EOL] return None [EOL] else : [EOL] return channel [EOL] else : [EOL] return None [EOL] [EOL] [EOL] def delete_channel ( queue ) : [EOL] channel = get_channel ( queue ) [EOL] if channel is not None : [EOL] channels = OrderChannel . select ( ) . where ( OrderChannel . queue > channel . queue ) [EOL] for c in channels : [EOL] c . queue -= [number] [EOL] c . save ( ) [EOL] channel . delete_instance ( ) [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] [EOL] def get_price_for_sub ( queue ) : [EOL] channel = get_channel ( queue ) [EOL] if channel is not None : [EOL] return channel . price_for_sub [EOL] else : [EOL] return None [EOL] [EOL] [EOL] def get_price_for_sub_order ( queue ) : [EOL] channel = get_channel ( queue ) [EOL] if channel is not None : [EOL] return channel . price_for_order [EOL] else : [EOL] return None [EOL] [EOL] [EOL] def set_price_for_new_channel ( telegram_id , value ) : [EOL] channel = get_editing_channel ( telegram_id ) [EOL] if channel is not None : [EOL] channel . price_for_sub = value [EOL] channel . save ( ) [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] [EOL] def get_price_for_new_channel ( telegram_id ) : [EOL] channel = get_editing_channel ( telegram_id ) [EOL] if channel is not None : [EOL] return channel . price_for_sub [EOL] else : [EOL] return None [EOL] [EOL] [EOL] def set_sub_for_new_channel ( telegram_id , value ) : [EOL] channel = get_editing_channel ( telegram_id ) [EOL] if channel is not None : [EOL] channel . how_many_sub = value [EOL] channel . save ( ) [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] [EOL] def get_sub_for_new_channel ( telegram_id ) : [EOL] channel = get_editing_channel ( telegram_id ) [EOL] if channel is not None : [EOL] return channel . how_many_sub [EOL] else : [EOL] return None [EOL] [EOL] [EOL] def publish_channel_order ( telegram_id ) : [EOL] channel = get_editing_channel ( telegram_id ) [EOL] if channel is not None : [EOL] channel . editing = False [EOL] channel . price_for_order = channel . how_many_sub * channel . price_for_sub [EOL] channel . save ( ) [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] [EOL] def delete_channel_order ( telegram_id ) : [EOL] channel = get_editing_channel ( telegram_id ) [EOL] if channel is not None : [EOL] channel . delete_instance ( ) [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] [EOL] def get_channel_link ( queue ) : [EOL] channel = get_channel ( queue ) [EOL] if channel is not None : [EOL] return [string] + channel . username [EOL] else : [EOL] return None [EOL] [EOL] [EOL] def decrement_sub ( queue ) : [EOL] channel = get_channel ( queue ) [EOL] if channel is not None : [EOL] channel . how_many_sub -= [number] [EOL] channel . save ( ) [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] [EOL] def get_channel_count_of_sub ( queue ) : [EOL] channel = get_channel ( queue ) [EOL] if channel is not None : [EOL] return channel . how_many_sub [EOL] else : [EOL] return None [EOL] [EOL] [EOL] def statistics ( ) : [EOL] users = User . select ( ) . count ( ) [EOL] channels = OrderChannel . select ( ) . count ( ) [EOL] posts = OrderPost . select ( ) . count ( ) [EOL] deduced = [number] [EOL] for u in User . select ( ) : [EOL] deduced += u . deduced [EOL] return [string] [string] [string] [string] . format ( u = str ( users ) , c = str ( channels ) , p = str ( posts ) , d = deduced ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
CHOOSE_OPTION = [number] [EOL] FORWARD_POST_FOR_WATCH = [number] [EOL] FORWARD_POST_FOR_SUB = [number] [EOL] SET_PRICE_FOR_WATCH = [number] [EOL] SET_PRICE_FOR_SUB = [number] [EOL] SET_COUNT_OF_WATCH = [number] [EOL] SET_COUNT_OF_SUB = [number] [EOL] CONFIRM_WATCHS = [number] [EOL] CONFIRM_SUB = [number] [EOL] [EOL] ADD_MONEY = [number] [EOL] REMOVE_MONEY = [number] [EOL] SHARE_INFO = [number] [EOL]	$builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0