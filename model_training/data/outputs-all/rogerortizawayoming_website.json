from typing import Type [EOL] import inventario [EOL] import typing [EOL] [docstring] [EOL] from rest_framework import viewsets [EOL] from django_restql import DynamicFieldsMixin [EOL] from . models import Productos [EOL] from . serializers import ProductosSerializer [EOL] [EOL] [EOL] class ProductosViewset ( DynamicFieldsMixin , viewsets . ModelViewSet ) : [comment] [EOL] [docstring] [EOL] queryset = Productos . objects . all ( ) [EOL] serializer_class = ProductosSerializer [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[inventario.viewsets.ProductosViewset]$ 0 0 0 0 0 0 0 0 0 $typing.Type[inventario.serializers.ProductosSerializer]$ 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] from django . test import TestCase [EOL] from catalogos . models import CategoriasProductos [EOL] from inventario . models import Productos [EOL] [EOL] [EOL] class TestInventario ( TestCase ) : [EOL] [docstring] [EOL] [EOL] def setUp ( self ) : [EOL] [docstring] [EOL] categoria = CategoriasProductos . objects . create ( ) [EOL] Productos . objects . create ( no_control = [string] , categoria = categoria , nombre = [string] , descripcion = [string] , almacen = [string] , costo = [number] , precio = [number] ) [EOL] self . producto = Productos . objects . get ( nombre = [string] ) [EOL] [EOL] def test_producto ( self ) : [EOL] [docstring] [EOL] self . assertEqual ( True , isinstance ( self . producto , Productos ) ) [EOL] [EOL] def test_producto_update ( self ) : [EOL] [docstring] [EOL] self . producto . costo = [number] [EOL] self . producto . save ( ) [EOL] self . assertEqual ( [number] , self . producto . costo ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import inventario [EOL] import typing [EOL] [docstring] [EOL] from django . views . generic import DetailView , ListView [EOL] from . models import Productos [EOL] [EOL] [EOL] class ProductosList ( ListView ) : [comment] [EOL] [docstring] [EOL] model = Productos [EOL] template_name = [string] [EOL] context_object_name = [string] [EOL] [EOL] class ProductoDetalle ( DetailView ) : [comment] [EOL] [docstring] [EOL] model = Productos [EOL] template_name = [string] [EOL] queryset = Productos . objects . all ( ) [EOL] context_object_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[inventario.models.Productos]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[inventario.models.Productos]$ 0 0 0 $builtins.str$ 0 0 0 $typing.Type[inventario.views.ProductoDetalle]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Type , Any , List , Tuple [EOL] import inventario [EOL] import builtins [EOL] import catalogos [EOL] import typing [EOL] [docstring] [EOL] from rest_framework import serializers [EOL] from catalogos . models import CategoriasProductos [EOL] from . models import Productos [EOL] [EOL] [EOL] class CategoriaSerializer ( serializers . ModelSerializer ) : [EOL] [docstring] [EOL] class Meta : [EOL] [docstring] [EOL] model = CategoriasProductos [EOL] fields = ( [string] , [string] , [string] ) [EOL] [EOL] [EOL] class ProductosSerializer ( serializers . ModelSerializer ) : [EOL] [docstring] [EOL] categoria = CategoriaSerializer ( ) [EOL] foto = serializers . CharField ( source = [string] ) [EOL] colores = serializers . SerializerMethodField ( ) [EOL] numeros = serializers . SerializerMethodField ( ) [EOL] [EOL] class Meta : [EOL] [docstring] [EOL] model = Productos [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] @ staticmethod def get_colores ( obj ) : [EOL] [docstring] [EOL] colores = list ( obj . detalleproducto_set . all ( ) . values_list ( [string] , flat = True ) . distinct ( ) ) [EOL] return colores [EOL] [EOL] @ staticmethod def get_numeros ( obj ) : [EOL] [docstring] [EOL] numeros = list ( obj . detalleproducto_set . all ( ) . values_list ( [string] , flat = True ) . distinct ( ) ) [EOL] return numeros [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[inventario.models.Productos]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $inventario.serializers.CategoriaSerializer$ 0 0 0 0 0 $typing.Type[inventario.serializers.ProductosSerializer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[inventario.serializers.ProductosSerializer]$ 0 0 0 0 0 0 0 $typing.Type[inventario.serializers.ProductosSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[inventario.models.Productos]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.list$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $builtins.list$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0
from typing import Tuple , Type , Any [EOL] import inventario [EOL] import typing [EOL] [docstring] [EOL] [comment] [EOL] from django . urls import reverse [EOL] [comment] [EOL] from django . db import models [EOL] [comment] [EOL] from catalogos . models import CategoriasProductos [EOL] [EOL] [EOL] class RegistroFecha ( models . Model ) : [EOL] [docstring] [EOL] [EOL] class Meta : [EOL] [docstring] [EOL] abstract = True [EOL] [EOL] fecha_registro = models . DateTimeField ( blank = True , auto_now_add = True ) [EOL] fecha_actulizado = models . DateTimeField ( blank = True , auto_now = True ) [EOL] [EOL] [EOL] class Productos ( RegistroFecha ) : [EOL] [docstring] [EOL] [EOL] class Meta : [EOL] [docstring] [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL] [EOL] GENERO = ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ) [EOL] [EOL] id = models . AutoField ( primary_key = True ) [EOL] no_control = models . CharField ( max_length = [number] ) [EOL] categoria = models . ForeignKey ( CategoriasProductos , on_delete = models . CASCADE ) [EOL] nombre = models . CharField ( max_length = [number] ) [EOL] descripcion = models . CharField ( blank = True , null = True , max_length = [number] ) [EOL] estilo = models . CharField ( blank = True , null = True , max_length = [number] ) [EOL] costo = models . DecimalField ( max_digits = [number] , decimal_places = [number] ) [EOL] precio = models . DecimalField ( max_digits = [number] , decimal_places = [number] ) [EOL] almacen = models . CharField ( blank = True , null = True , max_length = [number] , default = [string] ) [EOL] foto = models . ImageField ( upload_to = [string] ) [EOL] publico = models . CharField ( blank = True , max_length = [number] , choices = GENERO ) [EOL] [EOL] def cantidad ( self ) : [EOL] [docstring] [EOL] return sum ( self . detalleproducto_set . all ( ) . values_list ( [string] , flat = True ) ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . nombre [EOL] [EOL] def get_absolute_url ( self ) : [EOL] [docstring] [EOL] return reverse ( [string] , args = [ str ( self . id ) ] ) [EOL] [EOL] def save ( self , * args , ** kwargs ) : [comment] [EOL] if not self . no_control : [EOL] try : [EOL] last = Productos . objects . latest ( [string] ) [EOL] except Productos . DoesNotExist : [EOL] self . no_control = [string] [EOL] else : [EOL] last_no_control = int ( last . no_control [ [number] : ] ) + [number] [EOL] self . no_control = [string] + str ( last_no_control ) [EOL] [EOL] super ( Productos , self ) . save ( * args , ** kwargs ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.Type[inventario.models.RegistroFecha]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[inventario.models.RegistroFecha]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[inventario.models.Productos]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[inventario.models.Productos]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[inventario.models.Productos]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[inventario.models.Productos]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[inventario.models.Productos]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[inventario.models.Productos]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[inventario.models.Productos]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[inventario.models.Productos]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[inventario.models.Productos]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[inventario.models.Productos]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[inventario.models.Productos]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] from django . apps import AppConfig [EOL] [EOL] class InventarioConfig ( AppConfig ) : [EOL] [docstring] [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterModelOptions ( name = [string] , options = { [string] : [string] } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterModelOptions ( name = [string] , options = { [string] : [string] } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterModelOptions ( name = [string] , options = { [string] : [string] , [string] : [string] } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RenameModel ( old_name = [string] , new_name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] from . routers import router [EOL] from django . contrib import admin [EOL] from django . urls import path , include [EOL] from dashboard . views import home [EOL] from contactos . views import ClientesList [EOL] from inventario . views import ProductosList , ProductoDetalle [EOL] from django . views . generic import TemplateView [EOL] [EOL] [comment] [EOL] admin . site . site_header = [string] [EOL] admin . site . site_title = [string] [EOL] admin . site . index_title = [string] [EOL] [EOL] [EOL] urlpatterns = [ path ( [string] , home , name = [string] ) , path ( [string] , TemplateView . as_view ( template_name = [string] ) ) , path ( [string] , ClientesList . as_view ( ) ) , path ( [string] , TemplateView . as_view ( template_name = [string] ) , name = [string] ) , path ( [string] , ProductoDetalle . as_view ( ) , name = [string] ) , path ( [string] , admin . site . urls ) , path ( [string] , include ( [string] ) ) , path ( [string] , include ( router . urls ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from rest_framework import routers [EOL] from inventario . viewsets import ProductosViewset [EOL] [EOL] router = routers . DefaultRouter ( ) [EOL] router . register ( [string] , ProductosViewset ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
	0
from django . shortcuts import render [EOL] from django . views . generic import DetailView [EOL] from . models import DetalleProducto [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Type , Tuple [EOL] import typing [EOL] import productos [EOL] [docstring] [EOL] from django . db import models [EOL] from inventario . models import Productos [EOL] [EOL] [EOL] class BaseProductos ( models . Model ) : [EOL] [docstring] [EOL] class Meta : [EOL] [docstring] [EOL] abstract = True [EOL] [EOL] COLORES = ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ) [EOL] [EOL] color = models . CharField ( blank = True , max_length = [number] , choices = COLORES ) [EOL] size = models . CharField ( blank = True , max_length = [number] ) [EOL] cantidad = models . IntegerField ( blank = True , null = True ) [EOL] [EOL] [EOL] class DetalleProducto ( BaseProductos ) : [EOL] [docstring] [EOL] id = models . AutoField ( primary_key = True ) [EOL] producto = models . ForeignKey ( Productos , on_delete = models . CASCADE ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . producto . nombre [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[productos.models.BaseProductos]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0 $typing.Type[productos.models.BaseProductos]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[productos.models.BaseProductos]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[productos.models.DetalleProducto]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[productos.models.DetalleProducto]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ProductosConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
[docstring] [EOL] from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RenameModel ( old_name = [string] , new_name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ContactosConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Type [EOL] import contactos [EOL] import typing [EOL] from django . shortcuts import render [EOL] from django . views . generic import ListView [EOL] from . models import Clientes [EOL] [EOL] [EOL] class ClientesList ( ListView ) : [EOL] model = Clientes [EOL] template_name = [string] [EOL] context_object_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[contactos.views.ClientesList]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterModelOptions ( name = [string] , options = { [string] : [string] , [string] : [string] } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterModelOptions ( name = [string] , options = { [string] : [string] , [string] : [string] } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . shortcuts import render [EOL] [EOL] [comment] [EOL] def home ( request ) : [EOL] return render ( request , [string] , { } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class DashboardConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from django . shortcuts import render [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from typing import Type [EOL] import catalogos [EOL] import typing [EOL] from django . contrib import admin [EOL] from . models import CategoriasProductos [EOL] [EOL] @ admin . register ( CategoriasProductos ) class CategoriasProductos ( admin . ModelAdmin ) : [EOL] list_display = ( [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import catalogos [EOL] import typing [EOL] from django . db import models [EOL] [EOL] [EOL] class CategoriasProductos ( models . Model ) : [EOL] id = models . AutoField ( primary_key = True ) [EOL] nombre = models . CharField ( max_length = [number] ) [EOL] portada = models . ImageField ( upload_to = [string] ) [EOL] fecha = models . DateTimeField ( auto_now_add = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . nombre [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[catalogos.models.CategoriasProductos]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[catalogos.models.CategoriasProductos]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[catalogos.models.CategoriasProductos]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[catalogos.models.CategoriasProductos]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class CatalogosConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class CustomersConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] from . models import Customer [EOL] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . shortcuts import render [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Type , Tuple [EOL] import typing [EOL] import customers [EOL] from __future__ import unicode_literals [EOL] from django . db import models [EOL] [EOL] [comment] [EOL] class Customer ( models . Model ) : [EOL] CUSTOMERS_TYPE = ( ( [string] , [string] ) , ( [string] , [string] ) ) [EOL] [EOL] [EOL] id = models . IntegerField ( primary_key = True ) [EOL] first_name = models . CharField ( max_length = [number] , null = False , blank = True ) [EOL] last_name = models . CharField ( max_length = [number] , null = False , blank = True ) [EOL] other_names = models . CharField ( max_length = [number] , default = [string] ) [EOL] email = models . EmailField ( max_length = [number] , null = True , blank = True ) [EOL] phone = models . CharField ( max_length = [number] , null = False , blank = True ) [EOL] balance = models . IntegerField ( default = [string] ) [EOL] customer_status = models . CharField ( max_length = [number] , choices = CUSTOMERS_TYPE , default = [string] ) [EOL] address = models . CharField ( max_length = [number] , null = False , blank = False ) [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] return super ( Customer , self ) . save ( * args , ** kwargs ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . first_name , self . last_name ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[customers.models.Customer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[customers.models.Customer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[customers.models.Customer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[customers.models.Customer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[customers.models.Customer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[customers.models.Customer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[customers.models.Customer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[customers.models.Customer]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 $typing.Type[customers.models.Customer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type [EOL] import typing [EOL] import customers [EOL] from . models import Customer [EOL] from haystack import indexes [EOL] [EOL] class CustomerIndex ( indexes . SearchIndex , indexes . Indexable ) : [EOL] text = indexes . EdgeNgramField ( document = True , use_template = True ) [EOL] first_name = indexes . CharField ( model_attr = [string] ) [EOL] last_name = indexes . CharField ( model_attr = [string] ) [EOL] other_names = indexes . CharField ( model_attr = [string] ) [EOL] email = indexes . CharField ( model_attr = [string] , default = [string] ) [EOL] phone = indexes . CharField ( model_attr = [string] , default = [string] ) [EOL] balance = indexes . IntegerField ( model_attr = [string] , default = [string] ) [EOL] customer_status = indexes . CharField ( model_attr = [string] ) [EOL] address = indexes . CharField ( model_attr = [string] , default = [string] ) [EOL] [EOL] def get_model ( self ) : [EOL] return Customer [EOL] [EOL] def index_queryset ( self , using = None ) : [EOL] return self . get_model ( ) . objects . all ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[customers.search_indexes.CustomerIndex]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[customers.search_indexes.CustomerIndex]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[customers.search_indexes.CustomerIndex]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[customers.search_indexes.CustomerIndex]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[customers.search_indexes.CustomerIndex]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[customers.search_indexes.CustomerIndex]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[customers.search_indexes.CustomerIndex]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[customers.search_indexes.CustomerIndex]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[customers.search_indexes.CustomerIndex]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0