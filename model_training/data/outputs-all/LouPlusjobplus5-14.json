from typing import Any [EOL] import typing [EOL] import os [EOL] from jobplus . create_app import create_app [EOL] from flask import render_template , g [EOL] from flask_login import current_user [EOL] [EOL] app = create_app ( os . getenv ( [string] ) or [string] ) [EOL] [EOL] [EOL] @ app . errorhandler ( [number] ) def page_not_found ( ) : [EOL] return render_template ( [string] ) , [number] [EOL] [EOL] [EOL] @ app . before_request def before_request ( ) : [EOL] g . user = current_user [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] app . run ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from flask_script import Manager , Shell [EOL] from flask_migrate import Migrate , MigrateCommand [EOL] from jobplus . create_app import db , create_app [EOL] from jobplus . handlers . models import * [EOL] [EOL] app = create_app ( ) [EOL] [EOL] [EOL] Migrate ( app , db ) [EOL] manager = Manager ( app ) [EOL] manager . add_command ( [string] , MigrateCommand ) [EOL] [EOL] [EOL] def make_shell_context ( ) : [EOL] return dict ( app = app , db = db , User = User ) [EOL] manager . add_command ( [string] , Shell ( make_shell_context ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] manager . run ( ) [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
from typing import Any [EOL] import flask [EOL] import typing [EOL] from flask import Flask [EOL] from flask_sqlalchemy import SQLAlchemy [EOL] from config import config [EOL] from flask_bootstrap import Bootstrap [EOL] from flask_login import LoginManager [EOL] from flask_wtf . csrf import CSRFProtect [EOL] [EOL] db = SQLAlchemy ( ) [EOL] bootstrap = Bootstrap ( ) [EOL] csrf = CSRFProtect ( ) [EOL] login_manager = LoginManager ( ) [EOL] login_manager . session_protection = [string] [EOL] login_manager . login_view = [string] [EOL] login_manager . login_message = [string] [EOL] login_manager . login_message_category = [string] [EOL] login_manager . refresh_view = [string] [EOL] login_manager . needs_refresh_message = [string] [EOL] login_manager . needs_refresh_message_category = [string] [EOL] [EOL] [EOL] def register_extensions ( app ) : [EOL] db . init_app ( app ) [EOL] bootstrap . init_app ( app ) [EOL] csrf . init_app ( app ) [EOL] login_manager . init_app ( app ) [EOL] [EOL] [EOL] def register_filters ( app ) : [EOL] pass [EOL] [EOL] [EOL] def register_blueprints ( app ) : [EOL] from . handlers . admin import bp as admin_blueprint [EOL] app . register_blueprint ( admin_blueprint ) [EOL] [EOL] from . handlers . jobseeker import bp as jobseeker_blueprint [EOL] app . register_blueprint ( jobseeker_blueprint ) [EOL] [EOL] from . handlers . company import bp as company_blueprint [EOL] app . register_blueprint ( company_blueprint ) [EOL] [EOL] from . handlers . front import bp as front_blueprint [EOL] app . register_blueprint ( front_blueprint ) [EOL] [EOL] [EOL] def create_app ( config_name = [string] ) : [EOL] app = Flask ( __name__ ) [EOL] app . config . from_object ( config . get ( config_name ) ) [EOL] [EOL] register_extensions ( app ) [EOL] register_filters ( app ) [EOL] register_blueprints ( app ) [EOL] [EOL] return app [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from functools import wraps [EOL] from flask import abort [EOL] from flask_login import current_user [EOL] from . models import User [EOL] [EOL] [EOL] def Role_required ( role ) : [EOL] def decorator ( func ) : [EOL] @ wraps ( func ) def decorated_function ( * args , ** kwargs ) : [EOL] if not current_user . is_authenticated or current_user . role < role : [EOL] abort ( [number] ) [comment] [EOL] return func ( * args , ** kwargs ) [EOL] return decorated_function [EOL] return decorator [EOL] [EOL] [EOL] def admin_required ( func ) : [EOL] return Role_required ( User . ROLE_ADMIN ) ( func ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import jobplus [EOL] from flask import render_template , url_for , request , abort , g , redirect , flash [EOL] from . forms import RegisterForm , LoginForm [EOL] from . import bp [EOL] from . . models import User , db [EOL] from flask_login import login_user , logout_user [EOL] [comment] [EOL] [EOL] [EOL] @ bp . route ( [string] ) def index ( ) : [EOL] return render_template ( [string] , active = [string] ) [EOL] [EOL] [EOL] @ bp . route ( [string] , methods = [ [string] , [string] ] ) def login ( active ) : [EOL] if g . user is not None and g . user . is_authenticated : [EOL] return redirect ( url_for ( [string] ) ) [EOL] form = LoginForm ( ) [EOL] role = User . ROLE_JOBSEEKER [EOL] if active == [string] : [EOL] form . email . label = [string] [EOL] role = User . ROLE_COMPANY [EOL] elif active == [string] : [EOL] pass [EOL] else : [EOL] abort ( [number] ) [EOL] if form . validate_on_submit ( ) : [EOL] user = User . query . filter_by ( email = form . email . data , role = role ) . first ( ) [EOL] if user is not None and user . check_password ( form . passwd . data ) : [EOL] login_user ( user , remember = form . rememberme . data ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] elif user is None : [EOL] flash ( [string] ) [EOL] form . email . data = [string] [EOL] else : [EOL] flash ( [string] ) [EOL] return render_template ( [string] , active = active , form = form ) [EOL] [EOL] [EOL] @ bp . route ( [string] ) def logout ( ) : [EOL] logout_user ( ) [EOL] flash ( [string] ) [EOL] return render_template ( [string] ) [EOL] [EOL] [EOL] @ bp . route ( [string] , methods = [ [string] , [string] ] ) def register ( active ) : [EOL] form = RegisterForm ( ) [EOL] if active == [string] : [EOL] form . name . label = [string] [EOL] form . email . label = [string] [EOL] elif active == [string] : [EOL] pass [EOL] else : [EOL] abort ( [number] ) [EOL] if form . validate_on_submit ( ) : [EOL] role = User . ROLE_JOBSEEKER [EOL] if active == [string] : [EOL] role = User . ROLE_COMPANY [EOL] user = User ( email = form . email . data , name = form . name . data , password = form . passwd . data , role = role ) [EOL] db . session . add ( user ) [EOL] db . session . commit ( ) [EOL] flash ( [string] ) [EOL] return redirect ( url_for ( [string] , active = active ) ) [EOL] return render_template ( [string] , active = active , form = form ) [EOL] [EOL] [EOL] @ bp . route ( [string] ) def companylist ( ) : [EOL] return render_template ( [string] , active = [string] ) [EOL] [EOL] [EOL] @ bp . route ( [string] ) def joblist ( ) : [EOL] return render_template ( [string] , active = [string] ) [EOL] [EOL] [EOL] @ bp . route ( [string] ) def jobseekerlist ( ) : [EOL] return render_template ( [string] , active = [string] ) [EOL] [EOL] [EOL] @ bp . route ( [string] ) def aboutus ( ) : [EOL] return render_template ( [string] , active = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import jobplus [EOL] from flask_wtf import FlaskForm [EOL] from wtforms import StringField , PasswordField , SubmitField , BooleanField , ValidationError , IntegerField [EOL] from wtforms . validators import Length , Email , EqualTo , DataRequired [EOL] from . . models import db , User , CompanyDetail , Job [EOL] [EOL] [EOL] class RegisterForm ( FlaskForm ) : [EOL] name = StringField ( [string] , validators = [ Length ( [number] , [number] , message = [string] ) , DataRequired ( message = [string] ) ] ) [EOL] email = StringField ( [string] , validators = [ Email ( message = [string] ) , DataRequired ( message = [string] ) ] ) [EOL] passwd = PasswordField ( [string] , validators = [ Length ( [number] , [number] , message = [string] ) , DataRequired ( message = [string] ) ] ) [EOL] repasswd = PasswordField ( [string] , validators = [ EqualTo ( [string] , message = [string] ) ] ) [EOL] submit = SubmitField ( [string] ) [EOL] [EOL] def validate_email ( self , field ) : [EOL] if User . query . filter_by ( email = field . data ) . first ( ) : [EOL] raise ValidationError ( [string] ) [EOL] [EOL] def validate_name ( self , field ) : [EOL] if User . query . filter_by ( name = field . data ) . first ( ) : [EOL] raise ValidationError ( [string] ) [EOL] [EOL] [EOL] class LoginForm ( FlaskForm ) : [EOL] email = StringField ( [string] , validators = [ Email ( message = [string] ) , DataRequired ( message = [string] ) ] ) [EOL] passwd = PasswordField ( [string] , validators = [ Length ( [number] , [number] , message = [string] ) , DataRequired ( message = [string] ) ] ) [EOL] [EOL] rememberme = BooleanField ( [string] ) [EOL] [EOL] submit = SubmitField ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[jobplus.handlers.front.forms.RegisterForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[jobplus.handlers.front.forms.RegisterForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[jobplus.handlers.front.forms.RegisterForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[jobplus.handlers.front.forms.RegisterForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[jobplus.handlers.front.forms.RegisterForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[jobplus.handlers.front.forms.LoginForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[jobplus.handlers.front.forms.LoginForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[jobplus.handlers.front.forms.LoginForm]$ 0 0 0 0 0 0 0 $typing.Type[jobplus.handlers.front.forms.LoginForm]$ 0 0 0 0 0 0
import flask [EOL] from flask import Blueprint [EOL] bp = Blueprint ( [string] , __name__ ) [EOL] [EOL] from . import views [EOL]	0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from flask import render_template , url_for [EOL] from . import bp [EOL] [EOL] [EOL] @ bp . route ( [string] ) def index ( ) : [EOL] return render_template ( [string] ) [EOL] [EOL] [EOL] @ bp . route ( [string] ) def edit ( ) : [EOL] return render_template ( [string] ) [EOL] [EOL] [EOL] @ bp . route ( [string] ) def company_detail ( ) : [EOL] return render_template ( [string] ) [EOL] [EOL] [EOL] @ bp . route ( [string] ) def joblist ( ) : [EOL] return render_template ( [string] ) [EOL] [EOL] [EOL] @ bp . route ( [string] ) def jobdetail ( ) : [EOL] return render_template ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import flask [EOL] from flask import Blueprint [EOL] bp = Blueprint ( [string] , __name__ , url_prefix = [string] ) [EOL] [EOL] [EOL] from . import views	0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import flask [EOL] from flask import Blueprint [EOL] [EOL] bp = Blueprint ( [string] , __name__ , url_prefix = [string] ) [EOL] [EOL] [EOL] [EOL] from . import views	0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from flask import render_template , url_for [EOL] from . import bp [EOL] [EOL] [EOL] @ bp . route ( [string] ) def index ( ) : [EOL] return render_template ( [string] ) [EOL] [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0