[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] from typing import List , Any [EOL] import typing [EOL] import bottle [EOL] import builtins [EOL] from gpiozero import Energenie as eg [EOL] import bottle as bt [EOL] from bottle import route , request , response , template , static_file [EOL] [EOL] sockets = [ ] [EOL] sockets . append ( eg ( [number] ) ) [EOL] sockets . append ( eg ( [number] ) ) [EOL] sockets . append ( eg ( [number] ) ) [EOL] sockets . append ( eg ( [number] ) ) [EOL] [EOL] [comment] [EOL] HOST = [string] [EOL] [comment] [EOL] [comment] [EOL] PORT = [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] DOCUMENT_ROOT = [string] [EOL] [EOL] [comment] [EOL] app = bt . Bottle ( ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] @ app . route ( [string] ) def server_public ( filename ) : [EOL] return static_file ( filename , root = DOCUMENT_ROOT + [string] ) [EOL] [EOL] [EOL] [comment] [EOL] @ app . route ( [string] ) def switchon ( ) : [EOL] socket = int ( request . query . socket ) [EOL] [comment] [EOL] if ( socket > [number] and socket <= [number] ) : [EOL] [comment] [EOL] sockets [ socket ] . on ( ) [EOL] return [string] . format ( socket ) [EOL] [comment] [EOL] elif ( socket == [number] ) : [EOL] for i in range ( [number] , [number] ) : [EOL] sockets [ i ] . on ( ) [EOL] return [string] [EOL] else : [EOL] return [string] [EOL] [EOL] [EOL] @ app . route ( [string] ) def switchoff ( ) : [EOL] socket = int ( request . query . socket ) [EOL] [comment] [EOL] if ( socket > [number] and socket <= [number] ) : [EOL] [comment] [EOL] sockets [ socket ] . off ( ) [EOL] return [string] . format ( socket ) [EOL] [comment] [EOL] elif ( socket == [number] ) : [EOL] for i in range ( [number] , [number] ) : [EOL] sockets [ i ] . off ( ) [EOL] return [string] [EOL] else : [EOL] return [string] [EOL] [EOL] [EOL] [comment] [EOL] @ app . route ( [string] ) def server_home ( ) : [EOL] return static_file ( [string] , root = DOCUMENT_ROOT ) [EOL] [EOL] [EOL] app . run ( host = HOST , port = PORT ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $bottle.response$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $bottle.response$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import time [EOL] from energenie import Messages , OpenThings , radio , encoder , Devices [EOL] [EOL] [comment] [EOL] [EOL] OpenThings . init ( Devices . CRYPT_PID ) [EOL] [EOL] PURPLE_ID = [number] [comment] [EOL] m = OpenThings . alterMessage ( Messages . SWITCH , header_sensorid = PURPLE_ID , recs_0_value = [number] ) [EOL] purple_on = OpenThings . encode ( m ) [EOL] [EOL] m = OpenThings . alterMessage ( Messages . SWITCH , header_sensorid = PURPLE_ID , recs_0_value = [number] ) [EOL] purple_off = OpenThings . encode ( m ) [EOL] [EOL] [comment] [EOL] [EOL] GREEN_ON = encoder . build_switch_msg ( True , device_address = [number] ) [EOL] GREEN_OFF = encoder . build_switch_msg ( False , device_address = [number] ) [EOL] [EOL] [EOL] def switch_loop ( ) : [EOL] print ( [string] ) [EOL] radio . modulation ( ook = True ) [EOL] radio . transmit ( GREEN_ON ) [EOL] time . sleep ( [number] ) [EOL] [EOL] print ( [string] ) [EOL] radio . modulation ( fsk = True ) [EOL] radio . transmit ( purple_on , inner_times = [number] ) [EOL] time . sleep ( [number] ) [EOL] [EOL] print ( [string] ) [EOL] radio . modulation ( ook = True ) [EOL] radio . transmit ( GREEN_OFF ) [EOL] time . sleep ( [number] ) [EOL] [EOL] print ( [string] ) [EOL] radio . modulation ( fsk = True ) [EOL] radio . transmit ( purple_off , inner_times = [number] ) [EOL] time . sleep ( [number] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] radio . init ( ) [EOL] [EOL] try : [EOL] while True : [EOL] switch_loop ( ) [EOL] [EOL] finally : [EOL] radio . finished ( ) [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import time [EOL] [EOL] [EOL] [comment] [EOL] [EOL] class Timer ( ) : [EOL] def __init__ ( self , ratesec = [number] , offsetsec = [number] ) : [EOL] self . rate = ratesec [EOL] self . nexttick = time . time ( ) + offsetsec [EOL] [EOL] [EOL] def check ( self ) : [EOL] [docstring] [EOL] now = time . time ( ) [EOL] [EOL] if now >= self . nexttick : [EOL] [comment] [EOL] self . nexttick = now + self . rate [EOL] return True [EOL] [EOL] return False [EOL] [EOL] [comment]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import time [EOL] from energenie import Devices , Messages , Registry , OpenThings , radio [EOL] from Timer import Timer [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] TX_RATE = [number] [comment] [EOL] [EOL] [EOL] def warning ( msg ) : [EOL] print ( [string] % str ( msg ) ) [EOL] [EOL] [EOL] def trace ( msg ) : [EOL] print ( [string] % str ( msg ) ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] def switch_sniff_loop ( ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] if radio . is_receive_waiting ( ) : [EOL] [comment] [EOL] payload = radio . receive ( ) [EOL] try : [EOL] decoded = OpenThings . decode ( payload ) [EOL] now = time . time ( ) [EOL] except OpenThings . OpenThingsException as e : [EOL] warning ( [string] + str ( e ) ) [EOL] return [EOL] [EOL] OpenThings . showMessage ( decoded , timestamp = now ) [EOL] [comment] [EOL] Registry . update ( decoded ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] if len ( decoded [ [string] ] ) == [number] : [EOL] [comment] [EOL] print ( [string] % decoded ) [EOL] else : [EOL] [comment] [EOL] if decoded [ [string] ] [ [number] ] [ [string] ] == OpenThings . PARAM_JOIN : [EOL] mfrid = OpenThings . getFromMessage ( decoded , [string] ) [EOL] productid = OpenThings . getFromMessage ( decoded , [string] ) [EOL] sensorid = OpenThings . getFromMessage ( decoded , [string] ) [EOL] Messages . send_join_ack ( radio , mfrid , productid , sensorid ) [EOL] [EOL] [EOL] def switch_toggle_loop ( ) : [EOL] [docstring] [EOL] [EOL] global switch_state [EOL] [EOL] if Registry . size ( ) > [number] and sendSwitchTimer . check ( ) : [EOL] print ( [string] ) [EOL] radio . transmitter ( ) [EOL] [EOL] for sensorid in Registry . get_sensorids ( ) : [EOL] [comment] [EOL] header = Registry . get_info ( sensorid ) [ [string] ] [EOL] mfrid = header [ [string] ] [EOL] productid = header [ [string] ] [EOL] [EOL] if Devices . hasSwitch ( mfrid , productid ) : [EOL] request = OpenThings . alterMessage ( Messages . SWITCH , header_sensorid = sensorid , recs_0_value = switch_state ) [EOL] p = OpenThings . encode ( request ) [EOL] print ( [string] % ( hex ( productid ) , hex ( sensorid ) ) ) [EOL] [comment] [EOL] radio . transmit ( p , inner_times = [number] ) [EOL] [EOL] radio . receiver ( ) [EOL] switch_state = ( switch_state + [number] ) % [number] [comment] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] [EOL] trace ( [string] ) [EOL] radio . init ( ) [EOL] OpenThings . init ( Devices . CRYPT_PID ) [EOL] [EOL] [comment] [EOL] SENSOR_ID = [number] [comment] [EOL] device_header = OpenThings . alterMessage ( Messages . REGISTERED_SENSOR , header_mfrid = Devices . MFRID , header_productid = Devices . PRODUCTID_MIHO005 , header_sensorid = SENSOR_ID ) [EOL] Registry . update ( device_header ) [EOL] [EOL] [EOL] sendSwitchTimer = Timer ( TX_RATE , [number] ) [comment] [EOL] switch_state = [number] [comment] [EOL] radio . receiver ( ) [EOL] [EOL] try : [EOL] while True : [EOL] switch_sniff_loop ( ) [EOL] switch_toggle_loop ( ) [EOL] [EOL] finally : [EOL] radio . finished ( ) [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import RPi . GPIO as GPIO [EOL] GPIO . setmode ( GPIO . BCM ) [EOL] [EOL] GPIO . setup ( [number] , GPIO . IN ) [comment] [EOL] GPIO . setup ( [number] , GPIO . IN ) [comment] [EOL] GPIO . setup ( [number] , GPIO . IN ) [comment] [EOL] GPIO . setup ( [number] , GPIO . IN ) [comment] [EOL] GPIO . setup ( [number] , GPIO . IN ) [comment] [EOL] GPIO . setup ( [number] , GPIO . IN ) [comment] [EOL] GPIO . setup ( [number] , GPIO . IN ) [comment] [EOL] GPIO . setup ( [number] , GPIO . IN ) [comment] [EOL] [EOL] GPIO . cleanup ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] from energenie import Registry , Devices , Messages , OpenThings , radio [EOL] import time [EOL] import Logger [EOL] [EOL] def warning ( msg ) : [EOL] print ( [string] % str ( msg ) ) [EOL] [EOL] [EOL] def trace ( msg ) : [EOL] print ( [string] % str ( msg ) ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] def monitor_loop ( ) : [EOL] [docstring] [EOL] [EOL] radio . receiver ( ) [EOL] [EOL] while True : [EOL] [comment] [EOL] if radio . is_receive_waiting ( ) : [EOL] trace ( [string] ) [EOL] payload = radio . receive ( ) [EOL] try : [EOL] decoded = OpenThings . decode ( payload ) [EOL] now = time . time ( ) [EOL] except OpenThings . OpenThingsException as e : [EOL] warning ( [string] + str ( e ) ) [EOL] continue [EOL] [EOL] OpenThings . showMessage ( decoded , timestamp = now ) [EOL] [comment] [EOL] Registry . update ( decoded ) [EOL] [comment] [EOL] Logger . logMessage ( decoded ) [EOL] [EOL] [comment] [EOL] if len ( decoded [ [string] ] ) == [number] : [EOL] [comment] [EOL] print ( [string] % decoded ) [EOL] else : [EOL] [comment] [EOL] if decoded [ [string] ] [ [number] ] [ [string] ] == OpenThings . PARAM_JOIN : [EOL] mfrid = OpenThings . getFromMessage ( decoded , [string] ) [EOL] productid = OpenThings . getFromMessage ( decoded , [string] ) [EOL] sensorid = OpenThings . getFromMessage ( decoded , [string] ) [EOL] Messages . send_join_ack ( radio , mfrid , productid , sensorid ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] [EOL] trace ( [string] ) [EOL] radio . init ( ) [EOL] OpenThings . init ( Devices . CRYPT_PID ) [EOL] [EOL] try : [EOL] monitor_loop ( ) [EOL] [EOL] finally : [EOL] radio . finished ( ) [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import io [EOL] from energenie import OpenThings [EOL] import os , time [EOL] [EOL] LOG_FILENAME = [string] [EOL] HEADINGS = [string] [EOL] [EOL] [EOL] log_file = None [EOL] [EOL] def trace ( msg ) : [EOL] print ( str ( msg ) ) [EOL] [EOL] [EOL] def logMessage ( msg ) : [EOL] global log_file [EOL] [EOL] if log_file == None : [EOL] if not os . path . isfile ( LOG_FILENAME ) : [EOL] log_file = open ( LOG_FILENAME , [string] ) [EOL] log_file . write ( HEADINGS + [string] ) [EOL] else : [EOL] log_file = open ( LOG_FILENAME , [string] ) [comment] [EOL] [EOL] [comment] [EOL] header = msg [ [string] ] [EOL] timestamp = time . time ( ) [EOL] mfrid = header [ [string] ] [EOL] productid = header [ [string] ] [EOL] sensorid = header [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] flags = [ [number] for i in range ( [number] ) ] [EOL] switch = None [EOL] voltage = None [EOL] freq = None [EOL] reactive = None [EOL] real = None [EOL] apparent = None [EOL] current = None [EOL] temperature = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] for rec in msg [ [string] ] : [EOL] paramid = rec [ [string] ] [EOL] try : [EOL] value = rec [ [string] ] [EOL] except : [EOL] value = None [EOL] [EOL] if paramid == OpenThings . PARAM_SWITCH_STATE : [EOL] switch = value [EOL] flags [ [number] ] = [number] [EOL] elif paramid == OpenThings . PARAM_VOLTAGE : [EOL] flags [ [number] ] = [number] [EOL] voltage = value [EOL] elif paramid == OpenThings . PARAM_FREQUENCY : [EOL] flags [ [number] ] = [number] [EOL] freq = value [EOL] elif paramid == OpenThings . PARAM_REACTIVE_POWER : [EOL] flags [ [number] ] = [number] [EOL] reactive = value [EOL] elif paramid == OpenThings . PARAM_REAL_POWER : [EOL] flags [ [number] ] = [number] [EOL] real = value [EOL] elif paramid == OpenThings . PARAM_APPARENT_POWER : [EOL] flags [ [number] ] = [number] [EOL] apparent = value [EOL] elif paramid == OpenThings . PARAM_CURRENT : [EOL] flags [ [number] ] = [number] [EOL] current = value [EOL] elif paramid == OpenThings . PARAM_TEMPERATURE : [EOL] flags [ [number] ] = [number] [EOL] temperature = value [EOL] [EOL] [comment] [EOL] flags = [string] . join ( [ str ( a ) for a in flags ] ) [EOL] csv = [string] % ( timestamp , mfrid , productid , sensorid , flags , switch , voltage , freq , reactive , real , apparent , current , temperature ) [EOL] log_file . write ( csv + [string] ) [EOL] log_file . flush ( ) [EOL] [comment] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any [EOL] import typing [EOL] ALL_SOCKETS = [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] PREAMBLE = [ [number] , [number] , [number] , [number] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] DEFAULT_ADDR = [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] DEFAULT_ADDR_ENC = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] SW1_ON_ENC = [ [number] , [number] ] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] SW1_OFF_ENC = [ [number] , [number] ] [comment] [EOL] [EOL] [EOL] def ashex ( payload ) : [EOL] line = [string] [EOL] for b in payload : [EOL] line += str ( hex ( b ) ) + [string] [EOL] return line [EOL] [EOL] [EOL] def build_relay_msg ( relayState = False ) : [EOL] [docstring] [EOL] [EOL] payload = PREAMBLE [EOL] [EOL] if relayState : [comment] [EOL] payload += SW1_ON_ENC [EOL] [EOL] else : [comment] [EOL] payload += SW1_OFF_ENC [EOL] [EOL] return payload [EOL] [EOL] [EOL] def build_test_message ( pattern ) : [EOL] [docstring] [EOL] payload = PREAMBLE + DEFAULT_ADDR_ENC [EOL] pattern &= [number] [EOL] control = encode_bits ( pattern , [number] ) [EOL] payload += control [EOL] return payload [EOL] [EOL] [EOL] def build_switch_msg ( state , device_address = ALL_SOCKETS , house_address = None ) : [EOL] [docstring] [EOL] [comment] [EOL] [EOL] if house_address == None : [EOL] house_address = DEFAULT_ADDR [EOL] [EOL] payload = [ ] + PREAMBLE [EOL] payload += encode_bits ( ( house_address & [number] ) >> [number] , [number] ) [EOL] payload += encode_bits ( ( house_address & [number] ) >> [number] , [number] ) [EOL] payload += encode_bits ( ( house_address & [number] ) , [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] if not state : [comment] [EOL] bits = [number] [EOL] else : [comment] [EOL] bits = [number] [EOL] [EOL] if device_address == ALL_SOCKETS : [EOL] bits |= [number] [comment] [EOL] elif device_address == [number] : [EOL] bits |= [number] [EOL] elif device_address == [number] : [EOL] bits |= [number] [EOL] elif device_address == [number] : [EOL] bits |= [number] [EOL] elif device_address == [number] : [EOL] bits |= [number] [EOL] [EOL] payload += encode_bits ( bits , [number] ) [EOL] [comment] [EOL] return payload [EOL] [EOL] [EOL] def encode_bytes ( data ) : [EOL] [docstring] [EOL] [comment] [EOL] payload = [ ] [EOL] for b in data : [EOL] payload += encode_bits ( b , [number] ) [EOL] [comment] [EOL] return payload [EOL] [EOL] [EOL] ENCODER = [ [number] , [number] , [number] , [number] ] [EOL] [EOL] def encode_bits ( data , number ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] shift = number - [number] [EOL] encoded = [ ] [EOL] for i in range ( int ( number / [number] ) ) : [EOL] bits = ( data >> shift ) & [number] [EOL] [comment] [EOL] encoded . append ( ENCODER [ bits ] ) [EOL] shift -= [number] [EOL] [comment] [EOL] return encoded [EOL] [EOL] [EOL] [comment] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict , Any [EOL] import typing [EOL] import time [EOL] try : [EOL] import Devices [comment] [EOL] except ImportError : [EOL] from . import Devices [comment] [EOL] [EOL] directory = { } [EOL] [EOL] def allkeys ( d ) : [EOL] result = [string] [EOL] for k in d : [EOL] if len ( result ) != [number] : [EOL] result += [string] [EOL] result += str ( k ) [EOL] return result [EOL] [EOL] [EOL] def update ( message ) : [EOL] [docstring] [EOL] now = time . time ( ) [EOL] header = message [ [string] ] [EOL] sensorId = header [ [string] ] [EOL] [EOL] if not ( sensorId in directory ) : [EOL] [comment] [EOL] desc = Devices . getDescription ( header [ [string] ] , header [ [string] ] ) [EOL] print ( [string] % ( hex ( sensorId ) , desc ) ) [EOL] directory [ sensorId ] = { [string] : message [ [string] ] } [EOL] [comment] [EOL] [EOL] directory [ sensorId ] [ [string] ] = now [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def size ( ) : [EOL] return len ( directory ) [EOL] [EOL] [EOL] def get_sensorids ( ) : [EOL] return directory . keys ( ) [EOL] [EOL] [EOL] def get_info ( sensor_id ) : [EOL] return directory [ sensor_id ] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] MFRID = [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] PRODUCTID_MIHO004 = [number] [comment] [EOL] PRODUCTID_MIHO005 = [number] [comment] [EOL] PRODUCTID_MIHO006 = [number] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] PRODUCTID_MIHO013 = [number] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] CRYPT_PID = [number] [EOL] CRYPT_PIP = [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] BROADCAST_ID = [number] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def getDescription ( mfrid , productid ) : [EOL] if mfrid == MFRID : [EOL] mfr = [string] [EOL] if productid == PRODUCTID_MIHO004 : [EOL] product = [string] [EOL] elif productid == PRODUCTID_MIHO005 : [EOL] product = [string] [EOL] elif productid == PRODUCTID_MIHO006 : [EOL] product = [string] [EOL] elif productid == PRODUCTID_MIHO013 : [EOL] product = [string] [EOL] else : [EOL] product = [string] % str ( hex ( productid ) ) [EOL] else : [EOL] mfr = [string] % str ( hex ( mfrid ) ) [EOL] product = [string] % str ( hex ( productid ) ) [EOL] [EOL] return [string] % ( mfr , product ) [EOL] [EOL] [EOL] def hasSwitch ( mfrid , productid ) : [EOL] if mfrid != MFRID : return False [EOL] if productid == PRODUCTID_MIHO005 : return True [EOL] return False [EOL] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any [EOL] import typing [EOL] import encoder [EOL] [EOL] def ashex ( data ) : [EOL] if type ( data ) == list : [EOL] line = [string] [EOL] for b in data : [EOL] line += str ( hex ( b ) ) + [string] [EOL] return line [EOL] else : [EOL] return str ( hex ( data ) ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] print ( [string] * [number] ) [EOL] [EOL] ALL_ON = encoder . build_switch_msg ( True ) [EOL] ALL_OFF = encoder . build_switch_msg ( False ) [EOL] ONE_ON = encoder . build_switch_msg ( True , device_address = [number] ) [EOL] ONE_OFF = encoder . build_switch_msg ( False , device_address = [number] ) [EOL] TWO_ON = encoder . build_switch_msg ( True , device_address = [number] ) [EOL] TWO_OFF = encoder . build_switch_msg ( False , device_address = [number] ) [EOL] THREE_ON = encoder . build_switch_msg ( True , device_address = [number] ) [EOL] THREE_OFF = encoder . build_switch_msg ( False , device_address = [number] ) [EOL] FOUR_ON = encoder . build_switch_msg ( True , device_address = [number] ) [EOL] FOUR_OFF = encoder . build_switch_msg ( False , device_address = [number] ) [EOL] MYHOUSE_ALL_ON = encoder . build_switch_msg ( True , house_address = [number] ) [EOL] [EOL] tests = [ ALL_ON , ALL_OFF , ONE_ON , ONE_OFF , TWO_ON , TWO_OFF , THREE_ON , THREE_OFF , FOUR_ON , FOUR_OFF , MYHOUSE_ALL_ON ] [EOL] [EOL] for t in tests : [EOL] print ( [string] ) [EOL] print ( ashex ( t ) ) [EOL] [EOL] [comment] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any [EOL] import typing [EOL] import ctypes [EOL] LIBNAME = [string] [EOL] [comment] [EOL] [EOL] import time [EOL] import ctypes [EOL] from os import path [EOL] mydir = path . dirname ( path . abspath ( __file__ ) ) [EOL] [EOL] libradio = ctypes . cdll . LoadLibrary ( mydir + [string] + LIBNAME ) [EOL] radio_init_fn = libradio [ [string] ] [EOL] radio_reset_fn = libradio [ [string] ] [EOL] radio_get_ver_fn = libradio [ [string] ] [EOL] radio_modulation_fn = libradio [ [string] ] [EOL] radio_transmitter_fn = libradio [ [string] ] [EOL] radio_transmit_fn = libradio [ [string] ] [EOL] radio_send_payload_fn = libradio [ [string] ] [EOL] radio_receiver_fn = libradio [ [string] ] [EOL] radio_is_receive_waiting_fn = libradio [ [string] ] [EOL] radio_get_payload_len_fn = libradio [ [string] ] [EOL] radio_get_payload_cbp_fn = libradio [ [string] ] [EOL] radio_standby_fn = libradio [ [string] ] [EOL] radio_finished_fn = libradio [ [string] ] [EOL] [EOL] RADIO_MODULATION_OOK = [number] [EOL] RADIO_MODULATION_FSK = [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] MAX_RX_SIZE = [number] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] def trace ( msg ) : [EOL] print ( str ( msg ) ) [EOL] [EOL] [EOL] def tohex ( l ) : [EOL] line = [string] [EOL] for item in l : [EOL] line += hex ( item ) + [string] [EOL] return line [EOL] [EOL] [EOL] def unimplemented ( m ) : [EOL] print ( [string] % m ) [EOL] return m [EOL] [EOL] [EOL] def deprecated ( m ) : [EOL] [docstring] [EOL] print ( [string] % m ) [EOL] return m [EOL] [EOL] [EOL] def untested ( m ) : [EOL] [docstring] [EOL] print ( [string] % m ) [EOL] return m [EOL] [EOL] [EOL] def disabled ( m ) : [EOL] [docstring] [EOL] print ( [string] % m ) [EOL] def nothing ( * args , ** kwargs ) :pass [EOL] return nothing [EOL] [EOL] [EOL] def init ( ) : [EOL] [docstring] [EOL] [comment] [EOL] radio_init_fn ( ) [EOL] [EOL] [EOL] def reset ( ) : [EOL] [docstring] [EOL] [comment] [EOL] radio_reset_fn ( ) [EOL] [EOL] [EOL] def get_ver ( ) : [EOL] [docstring] [EOL] return radio_get_ver_fn ( ) [EOL] [EOL] [EOL] def modulation ( fsk = None , ook = None ) : [EOL] [docstring] [EOL] [comment] [EOL] if ook : [EOL] m = ctypes . c_int ( RADIO_MODULATION_OOK ) [EOL] elif fsk : [EOL] m = ctypes . c_int ( RADIO_MODULATION_FSK ) [EOL] else : [EOL] raise RuntimeError ( [string] ) [EOL] radio_modulation_fn ( m ) [EOL] [EOL] [EOL] def transmitter ( fsk = None , ook = None ) : [EOL] [docstring] [EOL] [comment] [EOL] if ook : [EOL] m = ctypes . c_int ( RADIO_MODULATION_OOK ) [EOL] elif fsk : [EOL] m = ctypes . c_int ( RADIO_MODULATION_FSK ) [EOL] else : [comment] [EOL] m = ctypes . c_int ( RADIO_MODULATION_FSK ) [EOL] radio_transmitter_fn ( m ) [EOL] [EOL] [EOL] def transmit ( payload , outer_times = [number] , inner_times = [number] , outer_delay = [number] ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [EOL] framelen = len ( payload ) [EOL] if framelen < [number] or framelen > [number] : [EOL] raise ValueError ( [string] ) [EOL] if outer_times < [number] : [EOL] raise ValueError ( [string] ) [EOL] if inner_times < [number] or inner_times > [number] : [EOL] raise ValueError ( [string] ) [EOL] [EOL] framelen = len ( payload ) [EOL] Frame = ctypes . c_ubyte * framelen [EOL] txframe = Frame ( * payload ) [EOL] inner_times = ctypes . c_ubyte ( inner_times ) [EOL] [EOL] for i in range ( outer_times ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] radio_transmit_fn ( txframe , framelen , inner_times ) [EOL] if outer_delay != [number] : [EOL] time . sleep ( outer_delay ) [EOL] [EOL] [EOL] def send_payload ( payload , outer_times = [number] , inner_times = [number] , outer_delay = [number] ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] framelen = len ( payload ) [EOL] if framelen < [number] or framelen > [number] : [EOL] raise ValueError ( [string] ) [EOL] if outer_times < [number] : [EOL] raise ValueError ( [string] ) [EOL] if inner_times < [number] or inner_times > [number] : [EOL] raise ValueError ( [string] ) [EOL] Frame = ctypes . c_ubyte * framelen [EOL] txframe = Frame ( * payload ) [EOL] inner_times = ctypes . c_ubyte ( inner_times ) [EOL] [EOL] for i in range ( outer_times ) : [EOL] radio_send_payload_fn ( txframe , framelen , inner_times ) [EOL] if outer_delay != [number] : [EOL] time . sleep ( outer_delay ) [EOL] [EOL] [EOL] def receiver ( fsk = None , ook = None ) : [EOL] [docstring] [EOL] [comment] [EOL] if ook : [EOL] m = ctypes . c_int ( RADIO_MODULATION_OOK ) [EOL] elif fsk : [EOL] m = ctypes . c_int ( RADIO_MODULATION_FSK ) [EOL] else : [comment] [EOL] m = ctypes . c_int ( RADIO_MODULATION_FSK ) [EOL] [EOL] radio_receiver_fn ( m ) [EOL] [EOL] [EOL] def is_receive_waiting ( ) : [EOL] [docstring] [EOL] [comment] [EOL] res = radio_is_receive_waiting_fn ( ) [EOL] [comment] [EOL] [comment] [EOL] return ( res != [number] ) [EOL] [EOL] [EOL] def receive ( size = None ) : [EOL] [docstring] [EOL] [EOL] if size == None : [EOL] return receive_cbp ( ) [EOL] else : [EOL] return receive_len ( size ) [EOL] [EOL] [EOL] def receive_cbp ( ) : [EOL] [docstring] [EOL] [comment] [EOL] [EOL] [comment] [EOL] bufsize = [number] [comment] [EOL] Buffer = ctypes . c_ubyte * bufsize [EOL] rxbuf = Buffer ( ) [EOL] buflen = ctypes . c_ubyte ( bufsize ) [EOL] [comment] [EOL] [EOL] result = radio_get_payload_cbp_fn ( rxbuf , buflen ) [EOL] [EOL] if result != [number] : [comment] [EOL] raise RuntimeError ( [string] % hex ( result ) ) [EOL] [EOL] size = [number] + rxbuf [ [number] ] [comment] [EOL] [EOL] [comment] [EOL] rxlist = [ ] [EOL] for i in range ( size ) : [EOL] rxlist . append ( rxbuf [ i ] ) [EOL] [EOL] [comment] [EOL] return rxlist [comment] [EOL] [EOL] [EOL] @ untested def receive_len ( size ) : [EOL] [docstring] [EOL] [EOL] bufsize = size [EOL] [EOL] Buffer = ctypes . c_ubyte * bufsize [EOL] rxbuf = Buffer ( ) [EOL] buflen = ctypes . c_ubyte ( bufsize ) [EOL] [comment] [EOL] [EOL] result = radio_get_payload_len_fn ( rxbuf , buflen ) [EOL] [EOL] if result != [number] : [comment] [EOL] raise RuntimeError ( [string] % hex ( result ) ) [EOL] [EOL] [comment] [EOL] rxlist = [ ] [EOL] for i in range ( size ) : [EOL] rxlist . append ( rxbuf [ i ] ) [EOL] [EOL] return rxlist [comment] [EOL] [EOL] [EOL] def standby ( ) : [EOL] [docstring] [EOL] [comment] [EOL] radio_standby_fn ( ) [EOL] [EOL] [EOL] def finished ( ) : [EOL] [docstring] [EOL] [comment] [EOL] radio_finished_fn ( ) [EOL] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ctypes.CDLL$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 $ctypes._NamedFuncPointer$ 0 $ctypes.CDLL$ 0 0 0 0 $ctypes._NamedFuncPointer$ 0 $ctypes.CDLL$ 0 0 0 0 $ctypes._NamedFuncPointer$ 0 $ctypes.CDLL$ 0 0 0 0 $ctypes._NamedFuncPointer$ 0 $ctypes.CDLL$ 0 0 0 0 $ctypes._NamedFuncPointer$ 0 $ctypes.CDLL$ 0 0 0 0 $ctypes._NamedFuncPointer$ 0 $ctypes.CDLL$ 0 0 0 0 $ctypes._NamedFuncPointer$ 0 $ctypes.CDLL$ 0 0 0 0 $ctypes._NamedFuncPointer$ 0 $ctypes.CDLL$ 0 0 0 0 $ctypes._NamedFuncPointer$ 0 $ctypes.CDLL$ 0 0 0 0 $ctypes._NamedFuncPointer$ 0 $ctypes.CDLL$ 0 0 0 0 $ctypes._NamedFuncPointer$ 0 $ctypes.CDLL$ 0 0 0 0 $ctypes._NamedFuncPointer$ 0 $ctypes.CDLL$ 0 0 0 0 $ctypes._NamedFuncPointer$ 0 $ctypes.CDLL$ 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ctypes._NamedFuncPointer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ctypes._NamedFuncPointer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ctypes._NamedFuncPointer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $ctypes._NamedFuncPointer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $ctypes._NamedFuncPointer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ctypes._NamedFuncPointer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ctypes._NamedFuncPointer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $ctypes._NamedFuncPointer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ctypes._NamedFuncPointer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ctypes._NamedFuncPointer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ctypes._NamedFuncPointer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ctypes._NamedFuncPointer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ctypes._NamedFuncPointer$ 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List [EOL] import typing [EOL] import radio [EOL] import time [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] TIMES = [number] [EOL] DELAY = [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] PREAMBLE = [ [number] , [number] , [number] , [number] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] ADDR = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] [EOL] [comment] [EOL] SW1_ON = [ [number] , [number] ] [EOL] [EOL] [comment] [EOL] SW1_OFF = [ [number] , [number] ] [EOL] [EOL] [comment] [EOL] enc_1on = PREAMBLE + ADDR + SW1_ON [EOL] enc_1off = PREAMBLE + ADDR + SW1_OFF [EOL] [EOL] [EOL] def radio_test_ook ( ) : [EOL] [docstring] [EOL] [EOL] radio . init ( ) [EOL] [comment] [EOL] try : [EOL] radio . modulation ( ook = True ) [EOL] while True : [EOL] print ( [string] ) [EOL] radio . transmit ( enc_1on , TIMES ) [EOL] [comment] [EOL] if DELAY != [number] : time . sleep ( DELAY ) [EOL] [EOL] print ( [string] ) [EOL] radio . transmit ( enc_1off , TIMES ) [EOL] [comment] [EOL] if DELAY != [number] : time . sleep ( DELAY ) [EOL] [EOL] finally : [EOL] radio . finished ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] radio_test_ook ( ) [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 $typing.List[builtins.int]$ 0 $typing.List[builtins.int]$ 0 $typing.List[builtins.int]$ 0 $typing.List[builtins.int]$ 0 $typing.List[builtins.int]$ 0 $typing.List[builtins.int]$ 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 $builtins.int$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 $builtins.int$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List , Dict , Any [EOL] import typing [EOL] import time [EOL] try : [EOL] import crypto [comment] [EOL] except ImportError : [EOL] from . import crypto [comment] [EOL] [EOL] class OpenThingsException ( Exception ) : [EOL] def __init__ ( self , value ) : [EOL] self . value = value [EOL] [EOL] def __str__ ( self ) : [EOL] return repr ( self . value ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] PARAM_ALARM = [number] [EOL] PARAM_DEBUG_OUTPUT = [number] [EOL] PARAM_IDENTIFY = [number] [EOL] PARAM_SOURCE_SELECTOR = [number] [comment] [EOL] PARAM_WATER_DETECTOR = [number] [EOL] PARAM_GLASS_BREAKAGE = [number] [EOL] PARAM_CLOSURES = [number] [EOL] PARAM_DOOR_BELL = [number] [EOL] PARAM_ENERGY = [number] [EOL] PARAM_FALL_SENSOR = [number] [EOL] PARAM_GAS_VOLUME = [number] [EOL] PARAM_AIR_PRESSURE = [number] [EOL] PARAM_ILLUMINANCE = [number] [EOL] PARAM_LEVEL = [number] [EOL] PARAM_RAINFALL = [number] [EOL] PARAM_APPARENT_POWER = [number] [EOL] PARAM_POWER_FACTOR = [number] [EOL] PARAM_REPORT_PERIOD = [number] [EOL] PARAM_SMOKE_DETECTOR = [number] [EOL] PARAM_TIME_AND_DATE = [number] [EOL] PARAM_VIBRATION = [number] [EOL] PARAM_WATER_VOLUME = [number] [EOL] PARAM_WIND_SPEED = [number] [EOL] PARAM_GAS_PRESSURE = [number] [EOL] PARAM_BATTERY_LEVEL = [number] [EOL] PARAM_CO_DETECTOR = [number] [EOL] PARAM_DOOR_SENSOR = [number] [EOL] PARAM_EMERGENCY = [number] [EOL] PARAM_FREQUENCY = [number] [EOL] PARAM_GAS_FLOW_RATE = [number] [EOL] PARAM_RELATIVE_HUMIDITY = [number] [EOL] PARAM_CURRENT = [number] [EOL] PARAM_JOIN = [number] [EOL] PARAM_LIGHT_LEVEL = [number] [EOL] PARAM_MOTION_DETECTOR = [number] [EOL] PARAM_OCCUPANCY = [number] [EOL] PARAM_REAL_POWER = [number] [EOL] PARAM_REACTIVE_POWER = [number] [EOL] PARAM_ROTATION_SPEED = [number] [EOL] PARAM_SWITCH_STATE = [number] [EOL] PARAM_TEMPERATURE = [number] [EOL] PARAM_VOLTAGE = [number] [EOL] PARAM_WATER_FLOW_RATE = [number] [EOL] PARAM_WATER_PRESSURE = [number] [EOL] [EOL] PARAM_TEST = [number] [EOL] [EOL] param_info = { PARAM_ALARM : { [string] : [string] , [string] : [string] } , PARAM_DEBUG_OUTPUT : { [string] : [string] , [string] : [string] } , PARAM_IDENTIFY : { [string] : [string] , [string] : [string] } , PARAM_SOURCE_SELECTOR : { [string] : [string] , [string] : [string] } , PARAM_WATER_DETECTOR : { [string] : [string] , [string] : [string] } , PARAM_GLASS_BREAKAGE : { [string] : [string] , [string] : [string] } , PARAM_CLOSURES : { [string] : [string] , [string] : [string] } , PARAM_DOOR_BELL : { [string] : [string] , [string] : [string] } , PARAM_ENERGY : { [string] : [string] , [string] : [string] } , PARAM_FALL_SENSOR : { [string] : [string] , [string] : [string] } , PARAM_GAS_VOLUME : { [string] : [string] , [string] : [string] } , PARAM_AIR_PRESSURE : { [string] : [string] , [string] : [string] } , PARAM_ILLUMINANCE : { [string] : [string] , [string] : [string] } , PARAM_LEVEL : { [string] : [string] , [string] : [string] } , PARAM_RAINFALL : { [string] : [string] , [string] : [string] } , PARAM_APPARENT_POWER : { [string] : [string] , [string] : [string] } , PARAM_POWER_FACTOR : { [string] : [string] , [string] : [string] } , PARAM_REPORT_PERIOD : { [string] : [string] , [string] : [string] } , PARAM_SMOKE_DETECTOR : { [string] : [string] , [string] : [string] } , PARAM_TIME_AND_DATE : { [string] : [string] , [string] : [string] } , PARAM_VIBRATION : { [string] : [string] , [string] : [string] } , PARAM_WATER_VOLUME : { [string] : [string] , [string] : [string] } , PARAM_WIND_SPEED : { [string] : [string] , [string] : [string] } , PARAM_GAS_PRESSURE : { [string] : [string] , [string] : [string] } , PARAM_BATTERY_LEVEL : { [string] : [string] , [string] : [string] } , PARAM_CO_DETECTOR : { [string] : [string] , [string] : [string] } , PARAM_DOOR_SENSOR : { [string] : [string] , [string] : [string] } , PARAM_EMERGENCY : { [string] : [string] , [string] : [string] } , PARAM_FREQUENCY : { [string] : [string] , [string] : [string] } , PARAM_GAS_FLOW_RATE : { [string] : [string] , [string] : [string] } , PARAM_RELATIVE_HUMIDITY : { [string] : [string] , [string] : [string] } , PARAM_CURRENT : { [string] : [string] , [string] : [string] } , PARAM_JOIN : { [string] : [string] , [string] : [string] } , PARAM_LIGHT_LEVEL : { [string] : [string] , [string] : [string] } , PARAM_MOTION_DETECTOR : { [string] : [string] , [string] : [string] } , PARAM_OCCUPANCY : { [string] : [string] , [string] : [string] } , PARAM_REAL_POWER : { [string] : [string] , [string] : [string] } , PARAM_REACTIVE_POWER : { [string] : [string] , [string] : [string] } , PARAM_ROTATION_SPEED : { [string] : [string] , [string] : [string] } , PARAM_SWITCH_STATE : { [string] : [string] , [string] : [string] } , PARAM_TEMPERATURE : { [string] : [string] , [string] : [string] } , PARAM_VOLTAGE : { [string] : [string] , [string] : [string] } , PARAM_WATER_FLOW_RATE : { [string] : [string] , [string] : [string] } , PARAM_WATER_PRESSURE : { [string] : [string] , [string] : [string] } , } [EOL] [EOL] [EOL] crypt_pid = None [EOL] [EOL] def init ( pid ) : [EOL] global crypt_pid [EOL] crypt_pid = pid [EOL] [EOL] [EOL] def warning ( msg ) : [EOL] print ( [string] + str ( msg ) ) [EOL] [EOL] [EOL] def trace ( msg ) : [EOL] print ( [string] % str ( msg ) ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def decode ( payload , decrypt = True ) : [EOL] [docstring] [EOL] [comment] [EOL] length = payload [ [number] ] [EOL] [EOL] [comment] [EOL] if length + [number] != len ( payload ) or length < [number] : [EOL] raise OpenThingsException ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] mfrId = payload [ [number] ] [EOL] productId = payload [ [number] ] [EOL] encryptPIP = ( payload [ [number] ] << [number] ) + payload [ [number] ] [EOL] header = { [string] : mfrId , [string] : productId , [string] : encryptPIP } [EOL] [EOL] [EOL] if decrypt : [EOL] [comment] [EOL] [comment] [EOL] crypto . init ( crypt_pid , encryptPIP ) [EOL] crypto . cryptPayload ( payload , [number] , len ( payload ) - [number] ) [comment] [EOL] [comment] [EOL] [comment] [EOL] sensorId = ( payload [ [number] ] << [number] ) + ( payload [ [number] ] << [number] ) + payload [ [number] ] [EOL] header [ [string] ] = sensorId [EOL] [EOL] [EOL] [comment] [EOL] crc_actual = ( payload [ - [number] ] << [number] ) + payload [ - [number] ] [EOL] crc_expected = calcCRC ( payload , [number] , len ( payload ) - ( [number] + [number] ) ) [EOL] [comment] [EOL] [EOL] if crc_actual != crc_expected : [EOL] raise OpenThingsException ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] i = [number] [EOL] recs = [ ] [EOL] while i < length and payload [ i ] != [number] : [EOL] [comment] [EOL] param = payload [ i ] [EOL] wr = ( ( param & [number] ) == [number] ) [EOL] paramid = param & [number] [EOL] if paramid in param_info : [EOL] paramname = ( param_info [ paramid ] ) [ [string] ] [comment] [EOL] paramunit = ( param_info [ paramid ] ) [ [string] ] [comment] [EOL] else : [EOL] paramname = [string] + hex ( paramid ) [EOL] paramunit = [string] [EOL] i += [number] [EOL] [EOL] [comment] [EOL] typeid = payload [ i ] & [number] [EOL] plen = payload [ i ] & [number] [EOL] i += [number] [EOL] [EOL] rec = { [string] : wr , [string] : paramid , [string] : paramname , [string] : paramunit , [string] : typeid , [string] : plen } [EOL] [EOL] if plen != [number] : [EOL] [comment] [EOL] valuebytes = [ ] [EOL] for x in range ( plen ) : [EOL] valuebytes . append ( payload [ i ] ) [EOL] i += [number] [EOL] value = Value . decode ( valuebytes , typeid , plen ) [EOL] rec [ [string] ] = valuebytes [EOL] rec [ [string] ] = value [EOL] [EOL] [comment] [EOL] recs . append ( rec ) [EOL] [EOL] return { [string] : [string] , [string] : header , [string] : recs } [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def encode ( spec , encrypt = True ) : [EOL] [docstring] [EOL] [comment] [EOL] [EOL] payload = [ ] [EOL] [EOL] [comment] [EOL] payload . append ( [number] ) [comment] [EOL] header = spec [ [string] ] [EOL] [EOL] payload . append ( header [ [string] ] ) [EOL] payload . append ( header [ [string] ] ) [EOL] [EOL] if not ( [string] in header ) : [EOL] if encrypt : [EOL] warning ( [string] ) [EOL] encryptPIP = [number] [EOL] else : [EOL] encryptPIP = header [ [string] ] [EOL] payload . append ( ( encryptPIP & [number] ) >> [number] ) [comment] [EOL] payload . append ( ( encryptPIP & [number] ) ) [comment] [EOL] [EOL] sensorId = header [ [string] ] [EOL] payload . append ( ( sensorId >> [number] ) & [number] ) [comment] [EOL] payload . append ( ( sensorId >> [number] ) & [number] ) [comment] [EOL] payload . append ( (sensorId) & [number] ) [comment] [EOL] [EOL] [comment] [EOL] for rec in spec [ [string] ] : [EOL] wr = rec [ [string] ] [EOL] paramid = rec [ [string] ] [EOL] typeid = rec [ [string] ] [EOL] if [string] in rec : [EOL] length = rec [ [string] ] [EOL] else : [EOL] length = None [comment] [EOL] [EOL] [comment] [EOL] if wr : [EOL] payload . append ( [number] + paramid ) [comment] [EOL] else : [EOL] payload . append ( paramid ) [comment] [EOL] [EOL] [comment] [EOL] payload . append ( (typeid) ) [comment] [EOL] lenpos = len ( payload ) - [number] [comment] [EOL] [EOL] [comment] [EOL] valueenc = [ ] [comment] [EOL] if [string] in rec : [EOL] value = rec [ [string] ] [EOL] valueenc = Value . encode ( value , typeid , length ) [EOL] if len ( valueenc ) > [number] : [EOL] raise ValueError ( [string] ) [EOL] for b in valueenc : [EOL] payload . append ( b ) [EOL] payload [ lenpos ] = (typeid) | len ( valueenc ) [EOL] [EOL] [comment] [EOL] payload . append ( [number] ) [comment] [EOL] crc = calcCRC ( payload , [number] , len ( payload ) - [number] ) [EOL] payload . append ( ( crc >> [number] ) & [number] ) [comment] [EOL] payload . append ( crc & [number] ) [comment] [EOL] [EOL] [comment] [EOL] payload [ [number] ] = len ( payload ) - [number] [EOL] [EOL] if encrypt : [EOL] [comment] [EOL] [comment] [EOL] crypto . init ( crypt_pid , encryptPIP ) [EOL] crypto . cryptPayload ( payload , [number] , len ( payload ) - [number] ) [comment] [EOL] [EOL] return payload [EOL] [EOL] [EOL] [comment] [EOL] [EOL] class Value ( ) : [EOL] UINT = [number] [EOL] UINT_BP4 = [number] [EOL] UINT_BP8 = [number] [EOL] UINT_BP12 = [number] [EOL] UINT_BP16 = [number] [EOL] UINT_BP20 = [number] [EOL] UINT_BP24 = [number] [EOL] CHAR = [number] [EOL] SINT = [number] [EOL] SINT_BP8 = [number] [EOL] SINT_BP16 = [number] [EOL] SINT_BP24 = [number] [EOL] [comment] [EOL] FLOAT = [number] [EOL] [EOL] @ staticmethod def typebits ( typeid ) : [EOL] [docstring] [EOL] if typeid == Value . UINT_BP4 : return [number] [EOL] if typeid == Value . UINT_BP8 : return [number] [EOL] if typeid == Value . UINT_BP12 : return [number] [EOL] if typeid == Value . UINT_BP16 : return [number] [EOL] if typeid == Value . UINT_BP20 : return [number] [EOL] if typeid == Value . UINT_BP24 : return [number] [EOL] if typeid == Value . SINT_BP8 : return [number] [EOL] if typeid == Value . SINT_BP16 : return [number] [EOL] if typeid == Value . SINT_BP24 : return [number] [EOL] raise ValueError ( [string] + str ( typeid ) ) [EOL] [EOL] [EOL] @ staticmethod def highestClearBit ( value , maxbits = [number] * [number] ) : [EOL] [docstring] [EOL] mask = [number] << ( maxbits - [number] ) [EOL] bitno = maxbits - [number] [EOL] while mask != [number] : [EOL] [comment] [EOL] if ( value & mask ) == [number] : [EOL] [comment] [EOL] return bitno [EOL] mask >>= [number] [EOL] bitno -= [number] [EOL] [comment] [EOL] return None [comment] [EOL] [EOL] [EOL] @ staticmethod def valuebits ( value ) : [EOL] [docstring] [EOL] if value >= [number] or type ( value ) != int : [EOL] raise RuntimeError ( [string] ) [EOL] [EOL] if value == - [number] : [comment] [EOL] return [number] [comment] [EOL] [comment] [EOL] [comment] [EOL] MAXBYTES = [number] [EOL] MAXBITS = [number] << ( MAXBYTES * [number] ) [EOL] [comment] [EOL] value = value & MAXBITS - [number] [EOL] [comment] [EOL] highz = Value . highestClearBit ( value , MAXBYTES * [number] ) [EOL] [comment] [EOL] [comment] [EOL] neededbits = highz + [number] [EOL] [EOL] [comment] [EOL] return neededbits [EOL] [EOL] [EOL] @ staticmethod def encode ( value , typeid , length = None ) : [EOL] [comment] [EOL] if typeid == Value . CHAR : [EOL] if type ( value ) != str : [EOL] value = str ( value ) [EOL] if length != None and len ( str ) > length : [EOL] raise ValueError ( [string] ) [EOL] result = [ ] [EOL] for ch in value : [EOL] result . append ( ord ( ch ) ) [EOL] if len != None and len ( result ) < length : [EOL] for a in range ( length - len ( result ) ) : [EOL] result . append ( [number] ) [comment] [EOL] return result [EOL] [EOL] if typeid == Value . FLOAT : [EOL] raise ValueError ( [string] ) [EOL] [EOL] if typeid <= Value . UINT_BP24 : [EOL] [comment] [EOL] if value < [number] : [EOL] raise ValueError ( [string] ) [EOL] [EOL] if typeid != Value . UINT : [EOL] [comment] [EOL] if type ( value ) == float : [EOL] value *= ( [number] ** Value . typebits ( typeid ) ) [comment] [EOL] value = round ( value , [number] ) [comment] [EOL] value = int ( value ) [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] v = value [EOL] result = [ ] [EOL] while v != [number] : [EOL] result . insert ( [number] , v & [number] ) [comment] [EOL] v >>= [number] [EOL] [EOL] [comment] [EOL] if length != None : [EOL] if len ( result ) < length : [EOL] result = [ [number] for x in range ( length - len ( result ) ) ] + result [EOL] elif len ( result ) > length : [EOL] raise ValueError ( [string] ) [EOL] return result [EOL] [EOL] [EOL] if typeid >= Value . SINT and typeid <= Value . SINT_BP24 : [EOL] [comment] [EOL] if typeid != Value . SINT : [EOL] [comment] [EOL] if type ( value ) == float : [EOL] value *= ( [number] ** Value . typebits ( typeid ) ) [comment] [EOL] value = round ( value , [number] ) [comment] [EOL] value = int ( value ) [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] if value < [number] : [comment] [EOL] if typeid == Value . SINT : [EOL] bits = Value . valuebits ( value ) [EOL] else : [EOL] bits = Value . typebits ( typeid ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] bits = ( ( ( bits - [number] ) / [number] ) + [number] ) * [number] [comment] [EOL] [comment] [EOL] [EOL] value &= ( ( [number] ** bits ) - [number] ) [EOL] neg = True [EOL] else : [EOL] neg = False [EOL] [EOL] [comment] [EOL] v = value [EOL] result = [ ] [EOL] while v != [number] : [EOL] result . insert ( [number] , v & [number] ) [comment] [EOL] v >>= [number] [EOL] [EOL] [comment] [EOL] if length != None : [comment] [EOL] if len ( result ) < length : [comment] [EOL] if not neg : [EOL] result = [ [number] for x in range ( length - len ( result ) ) ] + result [EOL] else : [comment] [EOL] result = [ [number] for x in range ( length - len ( result ) ) ] + result [EOL] elif len ( result ) > length : [comment] [EOL] raise ValueError ( [string] ) [EOL] [EOL] return result [EOL] [EOL] raise ValueError ( [string] % typeid ) [EOL] [EOL] [EOL] @ staticmethod def decode ( valuebytes , typeid , length ) : [EOL] if typeid <= Value . UINT_BP24 : [EOL] result = [number] [EOL] [comment] [EOL] for i in range ( length ) : [EOL] result <<= [number] [EOL] result += valuebytes [ i ] [EOL] [comment] [EOL] if typeid == Value . UINT : [EOL] return result [comment] [EOL] return ( float ( result ) ) / ( [number] ** Value . typebits ( typeid ) ) [EOL] [EOL] elif typeid == Value . CHAR : [EOL] result = [string] [EOL] for b in range ( length ) : [EOL] result += chr ( b ) [EOL] return result [EOL] [EOL] elif typeid >= Value . SINT and typeid <= Value . SINT_BP24 : [EOL] [comment] [EOL] result = [number] [EOL] for i in range ( length ) : [EOL] result <<= [number] [EOL] result += valuebytes [ i ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] neg = ( ( valuebytes [ [number] ] & [number] ) == [number] ) [EOL] if neg : [EOL] onescomp = ( ~ result ) & ( ( [number] ** ( length * [number] ) ) - [number] ) [EOL] result = - ( onescomp + [number] ) [EOL] [EOL] [comment] [EOL] if typeid == Value . SINT : [EOL] return result [comment] [EOL] else : [EOL] [comment] [EOL] return ( float ( result ) ) / ( [number] ** Value . typebits ( typeid ) ) [EOL] [EOL] elif typeid == Value . FLOAT : [EOL] return [string] [comment] [EOL] [EOL] raise ValueError ( [string] + hex ( typeid ) ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def calcCRC ( payload , start , length ) : [EOL] rem = [number] [EOL] for b in payload [ start : start + length ] : [EOL] rem ^= ( b << [number] ) [EOL] for bit in range ( [number] ) : [EOL] if rem & ( [number] << [number] ) != [number] : [EOL] [comment] [EOL] rem = ( ( rem << [number] ) ^ [number] ) & [number] [comment] [EOL] else : [EOL] [comment] [EOL] rem = ( rem << [number] ) & [number] [comment] [EOL] return rem [EOL] [EOL] [EOL] def showMessage ( msg , timestamp = None ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] header = msg [ [string] ] [EOL] mfrid = header [ [string] ] [EOL] productid = header [ [string] ] [EOL] sensorid = header [ [string] ] [EOL] if timestamp != None : [EOL] print ( [string] % time . strftime ( [string] , time . localtime ( timestamp ) ) ) [EOL] print ( [string] % ( hex ( mfrid ) , hex ( productid ) , hex ( sensorid ) ) ) [EOL] [EOL] [comment] [EOL] for rec in msg [ [string] ] : [EOL] wr = rec [ [string] ] [EOL] if wr == True : [EOL] write = [string] [EOL] else : [EOL] write = [string] [EOL] [EOL] paramid = rec [ [string] ] [EOL] paramname = rec [ [string] ] [EOL] paramunit = rec [ [string] ] [EOL] if [string] in rec : [EOL] value = rec [ [string] ] [EOL] else : [EOL] value = None [EOL] print ( [string] % ( write , paramname , paramunit , str ( value ) ) ) [EOL] [EOL] [EOL] def alterMessage ( message , ** kwargs ) : [EOL] [docstring] [EOL] [comment] [EOL] for arg in kwargs : [EOL] [EOL] path = arg . split ( [string] ) [EOL] value = kwargs [ arg ] [EOL] [EOL] m = message [EOL] for p in path [ : - [number] ] : [EOL] try : [EOL] p = int ( p ) [EOL] except : [EOL] pass [EOL] m = m [ p ] [EOL] [comment] [EOL] m [ path [ - [number] ] ] = value [EOL] [EOL] [comment] [EOL] [EOL] return message [EOL] [EOL] [EOL] def getFromMessage ( message , keypath ) : [EOL] [docstring] [EOL] path = keypath . split ( [string] ) [EOL] [EOL] for p in path [ : - [number] ] : [EOL] try : [EOL] p = int ( p ) [EOL] except : [EOL] pass [EOL] message = message [ p ] [EOL] return message [ path [ - [number] ] ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] def printhex ( payload ) : [EOL] line = [string] [EOL] for b in payload : [EOL] line += hex ( b ) + [string] [EOL] [EOL] print ( line ) [EOL] [EOL] [EOL] TEST_PAYLOAD = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] [EOL] import pprint [EOL] [EOL] [EOL] def test_payload_unencrypted ( ) : [EOL] init ( [number] ) [EOL] [EOL] printhex ( TEST_PAYLOAD ) [EOL] spec = decode ( TEST_PAYLOAD , decrypt = False ) [EOL] pprint . pprint ( spec ) [EOL] [EOL] payload = encode ( spec , encrypt = False ) [EOL] printhex ( payload ) [EOL] [EOL] spec2 = decode ( payload , decrypt = False ) [EOL] pprint . pprint ( spec2 ) [EOL] [EOL] payload2 = encode ( spec2 , encrypt = False ) [EOL] [EOL] printhex ( TEST_PAYLOAD ) [EOL] printhex ( payload2 ) [EOL] [EOL] if TEST_PAYLOAD != payload : [EOL] print ( [string] ) [EOL] else : [EOL] print ( [string] ) [EOL] [EOL] [EOL] def test_payload_encrypted ( ) : [EOL] init ( [number] ) [EOL] [EOL] printhex ( TEST_PAYLOAD ) [EOL] spec = decode ( TEST_PAYLOAD , decrypt = False ) [EOL] pprint . pprint ( spec ) [EOL] [EOL] payload = encode ( spec , encrypt = True ) [EOL] printhex ( payload ) [EOL] [EOL] spec2 = decode ( payload , decrypt = True ) [EOL] pprint . pprint ( spec2 ) [EOL] [EOL] payload2 = encode ( spec2 , encrypt = False ) [EOL] [EOL] printhex ( TEST_PAYLOAD ) [EOL] printhex ( payload2 ) [EOL] [EOL] if TEST_PAYLOAD != payload : [EOL] print ( [string] ) [EOL] else : [EOL] print ( [string] ) [EOL] [EOL] [EOL] def test_value_encoder ( ) : [EOL] pass [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] vin = [ [number] , [number] , [number] , [number] , [number] , [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ] [EOL] for v in vin : [EOL] vout = Value . encode ( v , Value . SINT ) [EOL] print ( [string] + str ( v ) + [string] + str ( vout ) ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def test_value_decoder ( ) : [EOL] pass [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] vin = [ [number] , [number] ] [EOL] print ( [string] + str ( vin ) ) [EOL] vout = Value . decode ( vin , Value . SINT , [number] ) [EOL] print ( [string] + str ( vout ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] [comment] [EOL] [comment] [EOL] test_payload_unencrypted ( ) [EOL] [comment] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Dict[builtins.int,typing.Dict[builtins.str,builtins.str]]$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 $typing.Dict[builtins.int,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $typing.List[builtins.int]$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $typing.List[builtins.int]$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List , Union , Dict , Any [EOL] import typing [EOL] try : [comment] [EOL] import Devices [EOL] import OpenThings [EOL] except ImportError : [EOL] from . import Devices [EOL] from . import OpenThings [EOL] [EOL] SWITCH = { [string] : { [string] : Devices . MFRID , [string] : Devices . PRODUCTID_MIHO005 , [string] : Devices . CRYPT_PIP , [string] : [number] } , [string] : [ { [string] : True , [string] : OpenThings . PARAM_SWITCH_STATE , [string] : OpenThings . Value . UINT , [string] : [number] , [string] : [number] } ] } [EOL] [EOL] [EOL] JOIN_ACK = { [string] : { [string] : [number] , [string] : [number] , [string] : Devices . CRYPT_PIP , [string] : [number] } , [string] : [ { [string] : False , [string] : OpenThings . PARAM_JOIN , [string] : OpenThings . Value . UINT , [string] : [number] } ] } [EOL] [EOL] [EOL] REGISTERED_SENSOR = { [string] : { [string] : [number] , [string] : [number] , [string] : Devices . CRYPT_PIP , [string] : [number] } } [EOL] [EOL] [EOL] def send_join_ack ( radio , mfrid , productid , sensorid ) : [EOL] [comment] [EOL] response = OpenThings . alterMessage ( JOIN_ACK , header_mfrid = mfrid , header_productid = productid , header_sensorid = sensorid ) [EOL] p = OpenThings . encode ( response ) [EOL] radio . transmitter ( ) [EOL] radio . transmit ( p , inner_times = [number] ) [EOL] radio . receiver ( ) [EOL] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,builtins.int],typing.List[typing.Dict[builtins.str,builtins.int]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,builtins.int],typing.List[typing.Dict[builtins.str,builtins.int]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,builtins.int],typing.List[typing.Dict[builtins.str,builtins.int]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] ran = None [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def init ( pid , pip ) : [EOL] [docstring] [EOL] global ran [EOL] ran = ( ( ( pid & [number] ) << [number] ) ^ pip ) & [number] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def cryptByte ( data ) : [EOL] [docstring] [EOL] global ran [EOL] for i in range ( [number] ) : [EOL] if ( ran & [number] ) != [number] : [comment] [EOL] [comment] [EOL] ran = ( ( ran >> [number] ) ^ [number] ) & [number] [comment] [EOL] else : [EOL] [comment] [EOL] ran = ran >> [number] [EOL] [EOL] return ( ran ^ data ^ [number] ) & [number] [EOL] [EOL] [EOL] def cryptPayload ( payload , start , length ) : [EOL] [docstring] [EOL] for i in range ( start , start + length ) : [EOL] payload [ i ] = cryptByte ( payload [ i ] ) [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 $None$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import flask [EOL] from flask import Flask , render_template [EOL] from energenie import switch_on , switch_off [EOL] from gpiozero import Energenie as eg [EOL] from typing import Any[comment] [EOL] [EOL] [EOL] app = Flask ( __name__ ) [EOL] [EOL] [EOL] @ app . route ( [string] ) def index ( ) : [EOL] return render_template ( [string] ) [EOL] [EOL] @ app . route ( [string] ) def on ( ) : [EOL] eg . switch_on ( ) [EOL] return render_template ( [string] ) [EOL] [EOL] @ app . route ( [string] ) def off ( ) : [EOL] eg . switch_off ( ) [EOL] [comment] [EOL] return render_template ( [string] ) [EOL] [EOL] if __name__ == [string] : [EOL] app . run ( debug = True , host = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] [EOL] def set_prefs ( prefs ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] prefs [ [string] ] = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] prefs [ [string] ] = True [EOL] prefs [ [string] ] = False [EOL] [EOL] [comment] [EOL] prefs [ [string] ] = True [EOL] [comment] [EOL] prefs [ [string] ] = [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] prefs [ [string] ] = True [EOL] [EOL] [comment] [EOL] prefs [ [string] ] = True [EOL] [EOL] [comment] [EOL] prefs [ [string] ] = [number] [EOL] [EOL] [comment] [EOL] prefs [ [string] ] = True [EOL] prefs [ [string] ] = False [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] prefs [ [string] ] = [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] prefs [ [string] ] = [ ] [EOL] [EOL] [comment] [EOL] prefs [ [string] ] = True [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] prefs [ [string] ] = False [EOL] [EOL] [comment] [EOL] [comment] [EOL] prefs [ [string] ] = False [EOL] [EOL] [comment] [EOL] [comment] [EOL] prefs [ [string] ] = False [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] prefs [ [string] ] = False [EOL] [EOL] [comment] [EOL] [comment] [EOL] prefs [ [string] ] = True [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] prefs [ [string] ] = False [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] prefs [ [string] ] = [string] [EOL] [EOL] [EOL] def project_opened ( project ) : [EOL] [docstring] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Optional , BinaryIO , Any [EOL] import typing [EOL] import bs4 [EOL] import requests [EOL] import urllib [EOL] import builtins [EOL] [docstring] [EOL] import os [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from urllib . parse import urlsplit [comment] [EOL] [EOL] import mechanicalsoup as ms [EOL] import requests [EOL] from typing import List , BinaryIO , Optional [EOL] [EOL] [comment] [EOL] from bs4 import BeautifulSoup as bs [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] DEBUG = True [EOL] [EOL] if DEBUG : [EOL] start_url = [string] [EOL] else : [EOL] start_url = [string] + input ( [string] ) [EOL] print ( start_url ) [EOL] [EOL] filetype = [ [string] , [string] , [string] ] [EOL] imagetype = [ [string] , [string] , [string] ] [EOL] [EOL] [EOL] def get_base_url ( url ) : [EOL] browser = ms . StatefulBrowser ( soup_config = { [string] : [string] } ) [comment] [EOL] response = browser . open ( url ) [comment] [EOL] browser_url = response . url [comment] [EOL] split_url = urlsplit ( browser_url ) [comment] [EOL] base_url = split_url . scheme + [string] + split_url . netloc [comment] [EOL] return base_url [EOL] [EOL] [EOL] def get_soup ( url ) : [EOL] browser = ms . StatefulBrowser ( soup_config = { [string] : [string] } ) [comment] [EOL] [comment] [EOL] [comment] [EOL] soup = browser . get_current_page ( ) [comment] [EOL] browser . close ( ) [EOL] return soup [EOL] [EOL] [EOL] def download_images ( soup ) : [EOL] link_list = [ ] [EOL] for i , link in enumerate ( soup . select ( [string] ) ) : [comment] [EOL] href_raw = str ( link . get ( [string] ) ) [EOL] if any ( x in href_raw for x in filetype ) : [comment] [EOL] link_response = requests . get ( base_url + href_raw , stream = True ) [EOL] if link_response . status_code == [number] : [EOL] link_name = href_raw . lstrip ( [string] ) [EOL] f = ... [EOL] with open ( save_dir + [string] + link_name , [string] ) as f : [EOL] f . write ( link_response . content ) [EOL] elif [string] in href_raw : [EOL] link_list . append ( link ) [EOL] return link_list [EOL] [EOL] [EOL] base_url = get_base_url ( start_url ) [EOL] soup = get_soup ( start_url ) [EOL] [EOL] save_dir = os . getcwd ( ) [comment] [EOL] link_list = [ ] [EOL] [EOL] [EOL] for i , link in enumerate ( soup . select ( [string] ) ) : [EOL] [comment] [EOL] [comment] [EOL] href_raw = str ( link . get ( [string] ) ) [EOL] if any ( x in href_raw for x in filetype ) : [comment] [EOL] [comment] [EOL] link_response = requests . get ( base_url + href_raw , stream = True ) [EOL] if link_response . status_code == [number] : [EOL] link_name = href_raw . lstrip ( [string] ) [EOL] f = ... [EOL] with open ( save_dir + [string] + link_name , [string] ) as f : [EOL] f . write ( link_response . content ) [EOL] elif [string] in href_raw : [EOL] link_list . append ( link ) [EOL] [EOL] [EOL] for image in soup . select ( [string] ) : [comment] [EOL] image_raw = str ( image ) [EOL] src_raw = str ( image . get ( [string] ) ) [EOL] if any ( x in src_raw for x in imagetype ) : [comment] [EOL] [comment] [EOL] image_response = requests . get ( base_url + src_raw , stream = True ) [EOL] if image_response . status_code == [number] : [EOL] image_name = src_raw . lstrip ( [string] ) [EOL] fp = open ( save_dir + [string] + image_name , [string] ) [EOL] fp . write ( image_response . content ) [EOL] fp . close ( ) [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $bs4.BeautifulSoup$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.List[builtins.str]]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.BinaryIO$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.BinaryIO$ 0 0 $typing.BinaryIO$ 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.BinaryIO$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.BinaryIO$ 0 0 $typing.BinaryIO$ 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.BinaryIO$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.BinaryIO$ 0 0 0 $requests.models.Response$ 0 0 0 0 $typing.BinaryIO$ 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , Tuple , Any [EOL] import cv2 [EOL] import typing [EOL] import numpy [EOL] import builtins [EOL] [docstring] [EOL] import numpy as np [EOL] import cv2 [EOL] [EOL] from typing import Tuple , Union [comment] [EOL] [EOL] [EOL] def set_res ( cap , resolution ) : [EOL] [docstring] [EOL] if resolution in [ [number] , [string] , [string] ] : [EOL] cap . set ( [number] , [number] ) [EOL] cap . set ( [number] , [number] ) [EOL] elif resolution in [ [number] , [string] , [string] ] : [EOL] cap . set ( [number] , [number] ) [EOL] cap . set ( [number] , [number] ) [EOL] elif resolution in [ [number] , [string] , [string] ] : [EOL] cap . set ( [number] , [number] ) [EOL] cap . set ( [number] , [number] ) [EOL] else : [EOL] resolution = [number] [EOL] set_res ( cap , resolution ) [EOL] return str ( resolution ) [EOL] [EOL] cap = cv2 . VideoCapture ( [number] ) [EOL] [EOL] set_res ( cap , [number] ) [EOL] [EOL] while ( cap . isOpened ( ) ) : [EOL] frame_out = cap . read ( ) [EOL] [comment] [EOL] ret = frame_out [ [number] ] [EOL] frame = frame_out [ [number] ] [EOL] [EOL] if ret is True : [EOL] [comment] [EOL] gray = cv2 . cvtColor ( frame , cv2 . COLOR_BGR2GRAY ) [EOL] vflipped = cv2 . flip ( frame , [number] ) [comment] [EOL] hflipped = cv2 . flip ( frame , [number] ) [comment] [EOL] [EOL] [EOL] cv2 . imshow ( [string] , frame ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if cv2 . waitKey ( [number] ) & [number] == ord ( [string] ) : [EOL] break [EOL] else : [EOL] break [EOL] [EOL] [comment] [EOL] cap . release ( ) [EOL] cv2 . destroyAllWindows ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.bool,numpy.ndarray]$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Tuple[builtins.bool,numpy.ndarray]$ 0 0 0 0 $typing.Any$ 0 $typing.Tuple[builtins.bool,numpy.ndarray]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $numpy.ndarray$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $numpy.ndarray$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $numpy.ndarray$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , BinaryIO , Set [EOL] import typing [EOL] import bs4 [EOL] import requests [EOL] import urllib [EOL] import concurrent [EOL] import builtins [EOL] [docstring] [EOL] import os [EOL] import re [EOL] import time [EOL] [comment] [EOL] [EOL] from urllib . parse import urlsplit [comment] [EOL] [EOL] import mechanicalsoup as ms [EOL] from bs4 import BeautifulSoup as bs [EOL] import requests [EOL] from typing import List , BinaryIO , Set [comment] [EOL] [EOL] from concurrent . futures import ThreadPoolExecutor , as_completed , Future [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] DEBUG = True [EOL] [EOL] if DEBUG : [EOL] start_url = [string] [EOL] save_dir = os . path . abspath ( os . path . dirname ( __file__ ) ) [comment] [EOL] else : [EOL] start_url = [string] + input ( [string] ) [EOL] save_dir = os . getcwd ( ) [comment] [EOL] print ( start_url + [string] + save_dir ) [EOL] [EOL] if not os . path . exists ( save_dir + [string] ) : [EOL] os . makedirs ( save_dir + [string] ) [EOL] save_image_dir = save_dir + [string] [EOL] [EOL] if not os . path . exists ( save_dir + [string] ) : [EOL] os . makedirs ( save_dir + [string] ) [EOL] save_file_dir = save_dir + [string] [EOL] [EOL] if not os . path . exists ( save_dir + [string] ) : [EOL] os . makedirs ( save_dir + [string] ) [EOL] save_results_dir = save_dir + [string] [EOL] [EOL] filetype = [ [string] , [string] , [string] ] [EOL] imagetype = [ [string] , [string] , [string] ] [EOL] [EOL] [EOL] def get_base_url ( url ) : [EOL] [docstring] [EOL] browser = ms . StatefulBrowser ( soup_config = { [string] : [string] } ) [comment] [EOL] response = browser . open ( url ) [comment] [EOL] browser_url = response . url [comment] [EOL] split_url = urlsplit ( browser_url ) [comment] [EOL] base_url = split_url . scheme + [string] + split_url . netloc [comment] [EOL] return base_url [EOL] [EOL] [EOL] def get_soup ( url ) : [EOL] [docstring] [EOL] browser = ms . StatefulBrowser ( soup_config = { [string] : [string] } ) [comment] [EOL] browser . open ( url ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] try : [EOL] soup = browser . get_current_page ( ) [comment] [EOL] except UnicodeEncodeError : [comment] [EOL] raise UnicodeEncodeError [EOL] else : [EOL] return soup [EOL] finally : [EOL] browser . close ( ) [EOL] [EOL] [EOL] def get_none_soup ( url ) : [EOL] [docstring] [EOL] browser = ms . StatefulBrowser ( soup_config = { [string] : [string] } ) [comment] [EOL] response = browser . open ( url ) [comment] [EOL] return response . content [EOL] [EOL] [EOL] def download_unknowns ( url ) : [EOL] [docstring] [EOL] page_content = get_none_soup ( url ) [EOL] [comment] [EOL] [EOL] [docstring] [EOL] page_string = page_content [ [number] : [number] ] [EOL] [docstring] [EOL] try : [EOL] page_unicode = page_string . decode ( [string] ) . replace ( [string] , [string] ) [EOL] page_parsed = [ char for char in page_unicode if char . isalnum ( ) or char == [string] ] [EOL] unknown_file_name = [string] . join ( page_parsed ) [ [number] : [number] ] [EOL] except UnicodeDecodeError : [EOL] try : [EOL] page_unicode = page_string . decode ( [string] ) . replace ( [string] , [string] ) [EOL] page_parsed = [ char for char in page_unicode if char . isalnum ( ) or char == [string] ] [EOL] unknown_file_name = [string] . join ( page_parsed ) [ [number] : [number] ] [EOL] except UnicodeDecodeError : [EOL] unknown_file_name = [string] [EOL] try : [EOL] page_unicode = page_content . decode ( [string] ) [EOL] except Exception as e : [EOL] print ( e ) [EOL] for byte in page_content [ [number] : [number] ] : [EOL] [comment] [EOL] char = chr ( byte ) [EOL] if char != [string] : [EOL] unknown_file_name += str ( char ) [EOL] print ( unknown_file_name ) [EOL] [docstring] [EOL] if [string] in page_string : [comment] [EOL] extension = [string] [EOL] else : [EOL] extension = [string] [EOL] [EOL] with open ( save_file_dir + [string] + unknown_file_name + extension , [string] ) as file : [EOL] file . write ( page_content ) [comment] [EOL] [EOL] [EOL] def make_dir_from_href ( href ) : [EOL] [docstring] [EOL] href_raw = str ( href ) [EOL] href_slash_ind = [ i for i , ind in enumerate ( href_raw ) if ind == [string] ] [comment] [EOL] if len ( href_slash_ind ) == [number] : [EOL] directory_name = href_raw [ ( href_slash_ind [ [number] ] + [number] ) : href_slash_ind [ [number] ] ] [comment] [EOL] elif len ( href_slash_ind ) == [number] : [EOL] directory_name = href_raw [ ( href_slash_ind [ [number] ] + [number] ) : - [number] ] [comment] [EOL] if not os . path . exists ( save_file_dir + [string] + directory_name ) : [EOL] os . makedirs ( save_file_dir + [string] + directory_name ) [EOL] return directory_name [EOL] [EOL] [EOL] def download_links ( start_url , filetypes ) : [EOL] [docstring] [EOL] link_list = [ ] [EOL] base_url = get_base_url ( start_url ) [EOL] soup = get_soup ( start_url ) [comment] [EOL] try : [EOL] for index , link in enumerate ( soup . select ( [string] ) ) : [comment] [EOL] href = link . get ( [string] ) [comment] [EOL] href_raw = str ( href ) [EOL] if any ( x in href_raw for x in filetypes ) : [comment] [EOL] make_dir_from_href ( href ) [EOL] link_response = requests . get ( base_url + href_raw , stream = True ) [EOL] if link_response . status_code == [number] : [EOL] link_name = href_raw . lstrip ( [string] ) + [string] + str ( index ) [EOL] f = ... [EOL] with open ( save_file_dir + [string] + link_name , [string] ) as f : [EOL] f . write ( link_response . content ) [EOL] elif [string] in href_raw : [EOL] link_list . append ( href_raw ) [EOL] else : [EOL] link_list . append ( href_raw ) [EOL] [comment] [EOL] except AttributeError : [EOL] [comment] [EOL] download_unknowns ( start_url ) [EOL] except Exception as e : [EOL] print ( e ) [EOL] finally : [EOL] return link_list [EOL] [EOL] [EOL] def download_images ( start_url , filetypes ) : [EOL] [docstring] [EOL] base_url = get_base_url ( start_url ) [EOL] [comment] [EOL] soup = get_soup ( start_url ) [comment] [EOL] if soup is not None : [EOL] for index , image in enumerate ( soup . select ( [string] ) ) : [comment] [EOL] [comment] [EOL] src_raw = str ( image . get ( [string] ) ) [comment] [EOL] if src_raw . startswith ( [string] ) : [EOL] image_url = src_raw [EOL] elif src_raw . startswith ( [string] ) : [EOL] image_url = base_url + src_raw [EOL] else : [EOL] image_url = src_raw [EOL] [comment] [EOL] for image_type in filter ( lambda x : x in src_raw , filetypes ) : [comment] [EOL] image_response = requests . get ( image_url , stream = True ) [EOL] if image_response . status_code == [number] : [EOL] image_name = re . sub ( [string] , [string] , src_raw ) . replace ( [string] , [string] ) [EOL] [comment] [EOL] fp = open ( save_image_dir + [string] + image_name + str ( index ) + image_type , [string] ) [EOL] fp . write ( image_response . content ) [EOL] fp . close ( ) [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] download_images ( start_url , imagetype ) [EOL] [EOL] link_list = download_links ( start_url , filetype ) [comment] [EOL] url_list = [ ] [EOL] url_list += link_list [EOL] base_url = get_base_url ( start_url ) [EOL] [EOL] intern_links = [ ] [EOL] extern_links = [ ] [EOL] for leftover in link_list : [comment] [EOL] time . sleep ( [number] ) [EOL] if leftover . startswith ( [string] ) : [EOL] the_url = base_url + leftover [EOL] if the_url not in intern_links : [EOL] intern_links . append ( the_url ) [EOL] elif leftover . startswith ( [string] ) : [EOL] the_url = leftover [EOL] if the_url not in extern_links : [EOL] extern_links . append ( the_url ) [EOL] else : [EOL] the_url = [string] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] with ThreadPoolExecutor ( max_workers = [number] ) as pool : [EOL] futures = [ ] [EOL] link_set = set ( ) [EOL] for the_url in intern_links : [EOL] pool . submit ( print , the_url ) [EOL] pool . submit ( download_images , the_url , imagetype ) [EOL] future = pool . submit ( download_links , the_url , filetype ) [EOL] futures . append ( future ) [EOL] [EOL] for future in as_completed ( futures ) : [EOL] link_set = link_set | set ( future . result ( ) ) [EOL] link_setlist = sorted ( link_set ) [EOL] [comment] [EOL] [EOL] with open ( save_results_dir + [string] + [string] , [string] ) as res_file : [EOL] for link in link_setlist : [EOL] res_file . write ( link + [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $bs4.BeautifulSoup$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import mechanicalsoup [EOL] [EOL] import time [EOL] from bs4 import BeautifulSoup [EOL] import re [EOL] import urllib [EOL] import string [EOL] import os [EOL] [EOL] def downloadProcess ( html , base , filetype , linkList ) : [EOL] [docstring] [EOL] soup = BeautifulSoup ( html , [string] ) [EOL] print ( soup ) [EOL] for link in soup . find_all ( [string] ) : [EOL] linkText = str ( link . get ( [string] ) ) [EOL] [EOL] if filetype in linkText : [EOL] slashList = [ i for i , ind in enumerate ( linkText ) if ind == [string] ] [EOL] directoryName = linkText [ ( slashList [ [number] ] + [number] ) : slashList [ [number] ] ] [EOL] if not os . path . exists ( directoryName ) : [EOL] os . makedirs ( directoryName ) [EOL] linkGet = base + linkText [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] elif [string] in linkText : [comment] [EOL] linkList . append ( link ) [EOL] [EOL] start = [string] + input ( [string] ) [EOL] filetype = input ( [string] ) [EOL] [EOL] numSlash = start . count ( [string] ) [comment] [EOL] slashList = [ i for i , ind in enumerate ( start ) if ind == [string] ] [comment] [EOL] [EOL] if ( len ( slashList ) >= [number] ) : [comment] [EOL] third = slashList [ [number] ] [EOL] base = start [ : third ] [comment] [EOL] else : [EOL] base = start [EOL] [EOL] br = mechanicalsoup . StatefulBrowser ( soup_config = { [string] : [string] } ) [EOL] r = br . open ( start ) [EOL] html = r . text [EOL] linkList = [ ] [comment] [EOL] [EOL] print ( [string] + start ) [EOL] downloadProcess ( html , base , filetype , linkList ) [EOL] [EOL] for leftover in linkList : [EOL] time . sleep ( [number] ) [comment] [EOL] linkText = str ( leftover . get ( [string] ) ) [EOL] print ( [string] + base + linkText ) [EOL] br = mechanicalsoup . StatefulBrowser ( soup_config = { [string] : [string] } ) [EOL] r = br . open ( base + linkText ) [EOL] html = r . text [EOL] linkList = [ ] [EOL] downloadProcess ( html , base , filetype , linkList )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.List[builtins.int]$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $typing.List[typing.Any]$ 0
from typing import List , BinaryIO , Any [EOL] import typing [EOL] import bs4 [EOL] import requests [EOL] import urllib [EOL] import builtins [EOL] [docstring] [EOL] import os [EOL] import time [EOL] import random [EOL] [EOL] from urllib . parse import urlsplit [comment] [EOL] [EOL] import mechanicalsoup as ms [EOL] from bs4 import BeautifulSoup as bs [EOL] import requests [EOL] from typing import List , BinaryIO , Optional , AnyStr , Union [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] DEBUG = True [EOL] [EOL] if DEBUG : [EOL] start_url = [string] [EOL] save_dir = os . path . abspath ( os . path . dirname ( __file__ ) ) [comment] [EOL] else : [EOL] start_url = [string] + input ( [string] ) [EOL] save_dir = os . getcwd ( ) [comment] [EOL] print ( start_url + [string] + save_dir ) [EOL] [EOL] if not os . path . exists ( save_dir + [string] ) : [EOL] os . makedirs ( save_dir + [string] ) [EOL] save_image_dir = save_dir + [string] [EOL] [EOL] if not os . path . exists ( save_dir + [string] ) : [EOL] os . makedirs ( save_dir + [string] ) [EOL] save_file_dir = save_dir + [string] [EOL] [EOL] if not os . path . exists ( save_dir + [string] ) : [EOL] os . makedirs ( save_dir + [string] ) [EOL] save_results_dir = save_dir + [string] [EOL] [EOL] filetype = [ [string] , [string] , [string] ] [EOL] imagetype = [ [string] , [string] , [string] ] [EOL] [EOL] [EOL] def get_base_url ( url ) : [EOL] browser = ms . StatefulBrowser ( soup_config = { [string] : [string] } ) [comment] [EOL] response = browser . open ( url ) [comment] [EOL] browser_url = response . url [comment] [EOL] split_url = urlsplit ( browser_url ) [comment] [EOL] base_url = split_url . scheme + [string] + split_url . netloc [comment] [EOL] return base_url [EOL] [EOL] [EOL] def get_soup ( url ) : [EOL] browser = ms . StatefulBrowser ( soup_config = { [string] : [string] } ) [comment] [EOL] response = browser . open ( url ) [comment] [EOL] [comment] [EOL] [comment] [EOL] try : [EOL] soup = browser . get_current_page ( ) [comment] [EOL] except UnicodeEncodeError : [EOL] raise UnicodeEncodeError [EOL] else : [EOL] return soup [EOL] finally : [EOL] browser . close ( ) [EOL] [EOL] [EOL] def get_none_soup ( url ) : [EOL] [docstring] [EOL] browser = ms . StatefulBrowser ( soup_config = { [string] : [string] } ) [comment] [EOL] response = browser . open ( url ) [comment] [EOL] return response . content [EOL] [EOL] [EOL] def download_links ( start_url , filetypes ) : [EOL] link_list = [ ] [EOL] base_url = get_base_url ( start_url ) [EOL] [comment] [EOL] soup = get_soup ( start_url ) [comment] [EOL] try : [EOL] for index , link in enumerate ( soup . select ( [string] ) ) : [comment] [EOL] number_links = index [EOL] href_raw = str ( link . get ( [string] ) ) [EOL] [comment] [EOL] if any ( x in href_raw for x in filetype ) : [comment] [EOL] href_slash_ind = [ i for i , ind in enumerate ( href_raw ) if ind == [string] ] [comment] [EOL] if len ( href_slash_ind ) > [number] : [EOL] directoryName = href_raw [ ( href_slash_ind [ [number] ] + [number] ) : href_slash_ind [ [number] ] ] [comment] [EOL] elif len ( href_slash_ind ) == [number] : [EOL] directoryName = href_raw [ ( href_slash_ind [ [number] ] + [number] ) : - [number] ] [comment] [EOL] if not os . path . exists ( save_file_dir + [string] + directoryName ) : [EOL] os . makedirs ( save_file_dir + [string] + directoryName ) [EOL] [EOL] link_response = requests . get ( base_url + href_raw , stream = True ) [EOL] if link_response . status_code == [number] : [EOL] link_name = href_raw . lstrip ( [string] ) [EOL] f = ... [EOL] with open ( save_file_dir + [string] + link_name , [string] ) as f : [EOL] f . write ( link_response . content ) [EOL] elif [string] in href_raw : [EOL] link_list . append ( href_raw ) [EOL] else : [EOL] link_list . append ( href_raw ) [EOL] [comment] [EOL] except AttributeError : [EOL] [comment] [EOL] page_content = get_none_soup ( start_url ) [comment] [EOL] embeddedfilenum = random . randint ( [number] , [number] ) [comment] [EOL] [comment] [EOL] with open ( save_dir + [string] + str ( embeddedfilenum ) + [string] , [string] ) as f : [EOL] f . write ( page_content ) [EOL] print ( start_url ) [EOL] except Exception as e : [EOL] print ( e ) [EOL] finally : [EOL] return link_list [EOL] [EOL] [EOL] def download_images ( start_url , filetypes ) : [EOL] base_url = get_base_url ( start_url ) [EOL] [comment] [EOL] soup = get_soup ( start_url ) [comment] [EOL] try : [EOL] for index , image in enumerate ( soup . select ( [string] ) ) : [comment] [EOL] [comment] [EOL] src_raw = str ( image . get ( [string] ) ) [EOL] for image_type in filetypes : [comment] [EOL] if image_type in src_raw : [EOL] [comment] [EOL] if src_raw . startswith ( [string] ) : [EOL] image_url = src_raw [EOL] elif src_raw . startswith ( [string] ) : [EOL] image_url = base_url + src_raw [EOL] [comment] [EOL] image_response = requests . get ( image_url , stream = True ) [EOL] if image_response . status_code == [number] : [EOL] image_name = src_raw . lstrip ( [string] ) [EOL] fp = open ( save_image_dir + [string] + [string] + str ( index ) + image_type , [string] ) [EOL] fp . write ( image_response . content ) [EOL] fp . close ( ) [EOL] [comment] [EOL] [comment] [EOL] except Exception as e : [EOL] pass [comment] [EOL] [EOL] download_images ( start_url , imagetype ) [EOL] [EOL] link_list = download_links ( start_url , filetype ) [comment] [EOL] url_list = [ ] [EOL] url_list += link_list [EOL] base_url = get_base_url ( start_url ) [EOL] [EOL] intern_links = [ ] [EOL] extern_links = [ ] [EOL] for leftover in link_list : [comment] [EOL] time . sleep ( [number] ) [EOL] if leftover . startswith ( [string] ) : [EOL] the_url = base_url + leftover [EOL] if the_url not in intern_links : [EOL] intern_links . append ( the_url ) [EOL] elif leftover . startswith ( [string] ) : [EOL] the_url = leftover [EOL] if the_url not in extern_links : [EOL] extern_links . append ( the_url ) [EOL] else : [EOL] the_url = [string] [EOL] [EOL] [comment] [EOL] print ( intern_links ) [EOL] print ( extern_links ) [EOL] [EOL] [EOL] for the_url in intern_links : [EOL] download_images ( the_url , imagetype ) [EOL] download_links ( the_url , filetype ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $bs4.BeautifulSoup$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $None$ 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 $builtins.str$ 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 $typing.List[builtins.str]$ 0 0 $typing.List[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 $typing.List[builtins.str]$ 0 0 $typing.List[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 $typing.List[builtins.str]$ 0 0 0 0 $builtins.str$ 0 $typing.List[builtins.str]$ 0 0 0 0 $builtins.str$ 0 $typing.List[builtins.str]$ 0 0 0