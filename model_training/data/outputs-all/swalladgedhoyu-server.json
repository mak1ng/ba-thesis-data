[EOL] from typing import Any [EOL] import typing [EOL] import models [EOL] from . models import User , Card , Game [EOL] [EOL] def get_card ( user , game ) : [EOL] [docstring] [EOL] card = Card . query . filter_by ( game = game ) . filter_by ( user = user ) . one_or_none ( ) [EOL] if card is None : [EOL] return Card ( user , game ) [EOL] return card [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $models.Card$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] import sqlite3 [EOL] import flask [EOL] import sqlite3 [EOL] import os [EOL] from flask import ( Blueprint , abort , Response , jsonify ) [EOL] from werkzeug . exceptions import HTTPException [EOL] [EOL] from . import app [EOL] [EOL] bp = Blueprint ( [string] , __name__ , url_prefix = [string] ) [EOL] [EOL] @ bp . app_errorhandler ( HTTPException ) def error_handler ( exception ) : [EOL] return jsonify ( { [string] : exception . description , } ) , exception . code [EOL] [EOL] [EOL] [comment] [EOL] @ bp . route ( [string] , methods = ( [string] , ) ) def get_db_dump ( ) : [EOL] [docstring] [EOL] [EOL] db_path = os . path . join ( app . instance_path , [string] ) [EOL] conn = sqlite3 . connect ( db_path ) [EOL] dump = [string] . join ( line for line in conn . iterdump ( ) ) [EOL] [EOL] res = Response ( response = dump , status = [number] , mimetype = [string] ) [EOL] return res [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import Optional , Any , Pattern , Dict [EOL] import typing [EOL] from functools import wraps [EOL] import re [EOL] [EOL] from flask import g , request , abort [EOL] import jwt [EOL] [EOL] from . import db , app [EOL] from . models import User [EOL] [EOL] TOKEN_RE = re . compile ( [string] ) [EOL] [EOL] def token_required ( f ) : [EOL] [docstring] [EOL] @ wraps ( f ) def decorated ( * args , ** kwargs ) : [EOL] authheader = request . headers . get ( [string] , None ) [EOL] token = None [EOL] if authheader : [EOL] m = TOKEN_RE . match ( authheader ) [EOL] if m : [EOL] token = m . group ( [number] ) [EOL] [EOL] if not token : [EOL] [comment] [EOL] abort ( [number] , [string] ) [EOL] [EOL] try : [EOL] decoded = jwt . decode ( token , app . config [ [string] ] , algorithms = [string] ) [EOL] except Exception as e : [EOL] return abort ( [number] , [string] . format ( str ( e ) ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] username = decoded . get ( [string] , None ) [EOL] if not username : [EOL] [comment] [EOL] abort ( [number] , [string] ) [EOL] [EOL] user = User . query . filter_by ( username = username ) . first ( ) [EOL] [EOL] if user : [EOL] g . user = user [EOL] else : [EOL] [comment] [EOL] abort ( [number] , [string] ) [EOL] [EOL] [comment] [EOL] return f ( * args , ** kwargs ) [EOL] return decorated [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Dict , List [EOL] import typing [EOL] import dhoyu [EOL] import sys [EOL] import math [EOL] from collections import defaultdict [EOL] [EOL] class PMI ( object ) : [EOL] def __init__ ( self ) : [EOL] self . total = [number] [EOL] self . letter_freqs = { } [EOL] self . pairs = { } [EOL] self . total_pairs = [number] [EOL] [EOL] def add_word ( self , word ) : [EOL] [EOL] word = word . lower ( ) . strip ( ) [EOL] [EOL] [comment] [EOL] for letter in word : [EOL] self . total += [number] [EOL] if letter in self . letter_freqs : [EOL] self . letter_freqs [ letter ] += [number] [EOL] else : [EOL] self . letter_freqs [ letter ] = [number] [EOL] [EOL] [comment] [EOL] if len ( word ) < [number] : [EOL] return [EOL] [EOL] [comment] [EOL] for i in range ( [number] , len ( word ) - [number] ) : [EOL] pair = word [ i : i + [number] ] [EOL] self . total_pairs += [number] [EOL] if pair in self . pairs : [EOL] self . pairs [ pair ] += [number] [EOL] else : [EOL] self . pairs [ pair ] = [number] [EOL] [EOL] def pmi ( self , x , y ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] x = x . lower ( ) [EOL] y = y . lower ( ) [EOL] [EOL] p_x = self . letter_freqs . get ( x , [number] ) / self . total [EOL] p_y = self . letter_freqs . get ( y , [number] ) / self . total [EOL] [EOL] p_xy = self . pairs . get ( x + y , [number] ) / self . total_pairs [EOL] [EOL] if p_x * p_y == [number] or p_xy == [number] : [EOL] return - [number] [EOL] [EOL] pmi = math . log ( p_xy / ( p_x * p_y ) ) [EOL] [EOL] return pmi [EOL] [EOL] def get_all_pmis ( self ) : [EOL] pmis = { } [EOL] [EOL] for pair in self . pairs : [EOL] pmi = self . pmi ( pair [ [number] ] , pair [ [number] ] ) [EOL] pmis [ pair ] = [string] . format ( pmi ) [EOL] [EOL] return pmis [EOL] [EOL] [EOL] PMIs = { } [EOL] [EOL] def init_pmi ( language , word_file_obj ) : [EOL] pmi_machine = PMI ( ) [EOL] [EOL] for word in word_file_obj : [EOL] pmi_machine . add_word ( word ) [EOL] [EOL] PMIs [ language ] = pmi_machine [EOL] [EOL] [EOL] def segment ( word , language = [string] , threshold = [number] ) : [EOL] pmi_machine = PMIs [ language ] [EOL] [EOL] probs = [ ] [EOL] for i in range ( [number] , len ( word ) - [number] ) : [EOL] p = pmi_machine . pmi ( word [ i ] , word [ i + [number] ] ) [EOL] probs . append ( p ) [EOL] [EOL] pieces = [ ] [EOL] last = [number] [EOL] for i , p in enumerate ( probs ) : [EOL] if p < threshold : [EOL] pieces . append ( word [ last : i + [number] ] ) [EOL] last = i + [number] [EOL] pieces . append ( word [ last : ] ) [EOL] [EOL] return pieces [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.float$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import dhoyu [EOL] import typing [EOL] import logging [EOL] import flask [EOL] import os [EOL] import sys [EOL] import logging [EOL] [EOL] import click [EOL] from flask import Flask [EOL] from flask_sqlalchemy import SQLAlchemy [EOL] [EOL] from . import pmi [EOL] [EOL] [EOL] [comment] [EOL] with open ( [string] ) as f : [EOL] pmi . init_pmi ( [string] , f ) [EOL] [EOL] [comment] [EOL] app = Flask ( __name__ , instance_relative_config = True ) [EOL] [EOL] app . config . from_mapping ( SECRET_KEY = [string] , SQLALCHEMY_DATABASE_URI = [string] + os . path . join ( app . instance_path , [string] ) , SQLALCHEMY_TRACK_MODIFICATIONS = False , ) [EOL] [EOL] app . config . from_pyfile ( [string] , silent = True ) [EOL] [EOL] if [string] in os . environ . get ( [string] , [string] ) : [EOL] gunicorn_logger = logging . getLogger ( [string] ) [EOL] app . logger . handlers = gunicorn_logger . handlers [EOL] app . logger . setLevel ( gunicorn_logger . level ) [EOL] [EOL] [comment] [EOL] try : [EOL] os . makedirs ( app . instance_path , exist_ok = True ) [EOL] except OSError as e : [EOL] app . logger . error ( e ) [EOL] sys . exit ( [number] ) [EOL] [EOL] [EOL] [comment] [EOL] db = SQLAlchemy ( app ) [EOL] [EOL] from . models import User , Game , Card , Audio , Image , Category , Language , Flag , Like [EOL] [EOL] from . import api [EOL] app . register_blueprint ( api . bp ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if [string] in os . environ : [EOL] from . import demo_views [EOL] app . register_blueprint ( demo_views . bp ) [EOL] [EOL] @ click . command ( [string] ) def init_db_command ( ) : [EOL] db . create_all ( ) [EOL] click . echo ( [string] ) [EOL] [EOL] @ click . command ( [string] ) def wipe_db_command ( ) : [EOL] db . drop_all ( ) [EOL] click . echo ( [string] ) [EOL] [EOL] def reset_db ( ) : [EOL] db . drop_all ( ) [EOL] db . create_all ( ) [EOL] [EOL] @ click . command ( [string] ) def demo_db_command ( ) : [EOL] click . echo ( [string] ) [EOL] [EOL] reset_db ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] admin1 = User ( [string] , [string] , admin = True ) [EOL] user1 = User ( [string] , [string] ) [EOL] [EOL] kriol = Language ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] cat1 = Category ( [string] , user1 , kriol ) [EOL] cat2 = Category ( [string] , user1 , kriol ) [EOL] [EOL] [EOL] [comment] [EOL] game1 = Game ( [string] , user1 , kriol , public = True ) [EOL] [comment] [EOL] game1 . images . append ( Image ( [string] ) ) [EOL] [comment] [EOL] [comment] [EOL] [EOL] game2 = Game ( [string] , admin1 , kriol , public = True ) [EOL] [comment] [EOL] game2 . images . append ( Image ( [string] ) ) [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] cat1 . games . append ( game1 ) [EOL] cat1 . games . append ( game2 ) [EOL] [EOL] cat2 . games . append ( game2 ) [EOL] [EOL] [comment] [EOL] db . session . add ( admin1 ) [EOL] db . session . add ( cat1 ) [EOL] db . session . commit ( ) [EOL] [EOL] [EOL] [EOL] app . cli . add_command ( init_db_command ) [EOL] app . cli . add_command ( wipe_db_command ) [EOL] app . cli . add_command ( demo_db_command ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 $logging.Logger$ 0 0 0 $flask.app.Flask$ 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0
from typing import Any , Set , Dict , List [EOL] import builtins [EOL] import datetime [EOL] import dhoyu [EOL] import typing [EOL] import flask [EOL] import functools [EOL] import json [EOL] import os [EOL] import uuid [EOL] from datetime import datetime , timedelta [EOL] from pprint import pprint as pp [EOL] [EOL] from flask import ( Blueprint , abort , g , jsonify , redirect , request , send_from_directory , url_for ) [EOL] from werkzeug . utils import secure_filename [EOL] from werkzeug . exceptions import HTTPException [EOL] [EOL] import jwt [EOL] [EOL] from . import app , db [EOL] from . decorators import token_required [EOL] from . models import Game , Image , Language , User [EOL] from . tools import get_card [EOL] [EOL] [EOL] bp = Blueprint ( [string] , __name__ , url_prefix = [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] @ bp . app_errorhandler ( HTTPException ) def error_handler ( exception ) : [EOL] return jsonify ( { [string] : exception . description , } ) , exception . code [EOL] [EOL] [EOL] [comment] [EOL] @ bp . route ( [string] , methods = ( [string] , ) ) def get_token ( ) : [EOL] data = request . json [EOL] [EOL] if data is None : [EOL] abort ( [number] , [string] ) [EOL] [EOL] username = request . json . get ( [string] , None ) [EOL] password = request . json . get ( [string] , None ) [EOL] [EOL] if not isinstance ( username , str ) or not username . strip ( ) or not isinstance ( password , str ) : [EOL] abort ( [number] , [string] ) [EOL] [EOL] [comment] [EOL] username = username . lower ( ) . strip ( ) [EOL] [EOL] user = User . query . filter_by ( username = username ) . first ( ) [EOL] [EOL] [comment] [EOL] if not user : [EOL] abort ( [number] , [string] ) [EOL] [EOL] [comment] [EOL] if not user . check_password ( password ) : [EOL] [comment] [EOL] abort ( [number] , [string] ) [EOL] [EOL] expires = datetime . utcnow ( ) + timedelta ( weeks = [number] ) [EOL] [EOL] token = jwt . encode ( { [string] : username , [string] : expires , } , app . config [ [string] ] , algorithm = [string] , ) [EOL] [EOL] return jsonify ( { [string] : token . decode ( [string] ) , } ) [EOL] [EOL] [EOL] @ bp . route ( [string] , methods = ( [string] , ) ) def register ( ) : [EOL] [EOL] data = request . json [EOL] [EOL] if data is None : [EOL] abort ( [number] , [string] ) [EOL] [EOL] username = request . json . get ( [string] , None ) [EOL] password = request . json . get ( [string] , None ) [EOL] [EOL] if not isinstance ( username , str ) or not username . strip ( ) or not isinstance ( password , str ) : [EOL] abort ( [number] , [string] ) [EOL] [EOL] [comment] [EOL] username = username . lower ( ) . strip ( ) [EOL] [EOL] if len ( username ) > [number] : [EOL] abort ( [number] , [string] ) [EOL] [EOL] [comment] [EOL] [EOL] if User . query . filter_by ( username = username ) . first ( ) : [EOL] [comment] [EOL] abort ( [number] , [string] ) [EOL] [EOL] user = User ( username , password ) [EOL] db . session . add ( user ) [EOL] db . session . commit ( ) [EOL] [EOL] return jsonify ( { [string] : [string] } ) [EOL] [EOL] [EOL] @ bp . route ( [string] , methods = ( [string] , ) ) @ token_required def user_info ( ) : [EOL] return jsonify ( g . user . get_info_dict ( ) ) [EOL] [EOL] [EOL] @ bp . route ( [string] , methods = ( [string] , ) ) @ token_required def other_user_info ( username ) : [EOL] [EOL] user = User . query . filter_by ( username = username ) . first_or_404 ( ) [EOL] [EOL] return jsonify ( user . get_info_dict ( ) ) [EOL] [EOL] [EOL] ALLOWED_EXTENSIONS = set ( [ [string] , [string] , [string] , [string] , [string] , [string] ] ) [EOL] [EOL] [EOL] def allowed_image_file ( f ) : [EOL] filename = f . filename [EOL] ok = True [EOL] if [string] in filename and filename . rsplit ( [string] , [number] ) [ [number] ] . lower ( ) in ALLOWED_EXTENSIONS : [EOL] pass [EOL] else : [EOL] ok = False [EOL] [EOL] return ok [EOL] [EOL] [EOL] @ bp . route ( [string] , methods = ( [string] , ) ) @ token_required def create_game ( ) : [EOL] [EOL] data = request . json [EOL] if data is None : [EOL] abort ( [number] , [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] images = data . get ( [string] , [ ] ) [EOL] if not isinstance ( images , list ) : [EOL] abort ( [number] , [string] ) [EOL] [EOL] if len ( images ) > [number] : [EOL] abort ( [number] , [string] ) [EOL] [EOL] if len ( images ) <= [number] : [EOL] abort ( [number] , [string] ) [EOL] [EOL] [comment] [EOL] [EOL] word = data . get ( [string] , None ) [EOL] if not isinstance ( word , str ) or not word : [EOL] abort ( [number] , [string] ) [EOL] [EOL] public = bool ( data . get ( [string] , False ) ) [EOL] [EOL] audio = data . get ( [string] , None ) [EOL] [comment] [EOL] [EOL] language = data . get ( [string] , None ) [EOL] if not isinstance ( language , str ) or not language : [EOL] abort ( [number] , [string] ) [EOL] [EOL] [comment] [EOL] SUPPORTED_LANGS = [ [string] ] [EOL] if language not in SUPPORTED_LANGS : [EOL] abort ( [number] , [string] ) [EOL] [EOL] language = Language . query . filter_by ( code = language ) . first ( ) [EOL] game = Game ( word , g . user , language , public ) [EOL] [EOL] [comment] [EOL] for image in images : [EOL] if not isinstance ( image , dict ) : [EOL] abort ( [number] , [string] ) [EOL] image_data = image . get ( [string] , None ) [EOL] if not isinstance ( image_data , str ) or not image_data : [EOL] abort ( [number] , [string] ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] for image in images : [EOL] game . images . append ( Image ( image [ [string] ] ) ) [EOL] [EOL] game . language_id = language . id [EOL] [EOL] db . session . add ( game ) [EOL] db . session . commit ( ) [EOL] [EOL] [comment] [EOL] return jsonify ( { [string] : [string] } ) [EOL] [EOL] [EOL] [comment] [EOL] @ bp . route ( [string] , methods = ( [string] , ) ) @ token_required def list_games ( ) : [EOL] [EOL] games = Game . query . filter ( db . or_ ( Game . public == True , Game . author == g . user ) ) [EOL] [EOL] return jsonify ( { [string] : [ { [string] : game . id , [string] : game . word , [string] : game . public , [string] : game . language . name , [string] : g . user . is_admin or game . author == g . user , [string] : game . author . username , } for game in games ] , } ) [EOL] [EOL] [EOL] @ bp . route ( [string] , methods = ( [string] , ) ) @ token_required def get_game ( id_ ) : [EOL] [EOL] game = Game . query . filter_by ( id = id_ ) . filter ( db . or_ ( Game . public == True , Game . author == g . user ) ) . first_or_404 ( ) [EOL] [EOL] data = { [string] : game . id , [string] : game . author . username , [string] : game . public , [string] : game . word , [string] : game . language . name , [string] : [ { [string] : image . id , [string] : image . get_data_uri ( ) , } for image in game . images ] , [string] : False , [string] : game . get_segments ( ) , } [EOL] [EOL] if g . user . is_admin : [EOL] data [ [string] ] = True [EOL] data [ [string] ] = [ { [string] : flag . text , [string] : flag . user . username , [string] : flag . date , } for flag in game . flags ] [EOL] [EOL] if g . user == game . author : [EOL] data [ [string] ] = True [EOL] [EOL] return jsonify ( data ) [EOL] [EOL] [EOL] @ bp . route ( [string] , methods = ( [string] , ) ) @ token_required def log_play ( ) : [EOL] [EOL] data = request . json [EOL] if data is None : [EOL] abort ( [number] , [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] game_id = data . get ( [string] , None ) [EOL] if not isinstance ( game_id , str ) or not game_id : [EOL] abort ( [number] , [string] ) [EOL] [EOL] [comment] [EOL] game = Game . query . filter_by ( id = game_id ) . filter ( db . or_ ( Game . public == True , Game . author == g . user ) ) . one_or_none ( ) [EOL] [EOL] if game is None : [EOL] abort ( [number] , [string] ) [EOL] [EOL] card = get_card ( g . user , game ) [EOL] [EOL] [EOL] card . add_play ( ) [EOL] db . session . add ( card ) [EOL] db . session . commit ( ) [EOL] [EOL] return jsonify ( { [string] : [string] } ) [EOL] [EOL] [EOL] [EOL] @ bp . route ( [string] , methods = ( [string] , ) ) @ token_required def delete_game ( id_ ) : [EOL] [EOL] [comment] [EOL] game = Game . query . filter_by ( id = id_ ) . filter ( db . or_ ( Game . public == True , Game . author == g . user ) ) . first_or_404 ( ) [EOL] [EOL] if g . user . is_admin or game . author == g . user : [EOL] db . session . delete ( game ) [EOL] db . session . commit ( ) [EOL] return jsonify ( { [string] : [string] } ) [EOL] else : [EOL] abort ( [number] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type [EOL] import typing [EOL] import builtins [EOL] import dhoyu [EOL] import datetime [EOL] from random import shuffle [EOL] [EOL] from passlib . hash import pbkdf2_sha256 [EOL] [EOL] from . import db , pmi [EOL] [EOL] [comment] [EOL] category_game_links = db . Table ( [string] , db . Column ( [string] , db . Integer , db . ForeignKey ( [string] ) , primary_key = True ) , db . Column ( [string] , db . Integer , db . ForeignKey ( [string] ) , primary_key = True ) ) [EOL] [EOL] [comment] [EOL] category_user_links = db . Table ( [string] , db . Column ( [string] , db . Integer , db . ForeignKey ( [string] ) , primary_key = True ) , db . Column ( [string] , db . Integer , db . ForeignKey ( [string] ) , primary_key = True ) ) [EOL] [EOL] [comment] [EOL] game_user_links = db . Table ( [string] , db . Column ( [string] , db . Integer , db . ForeignKey ( [string] ) , primary_key = True ) , db . Column ( [string] , db . Integer , db . ForeignKey ( [string] ) , primary_key = True ) ) [EOL] [EOL] [EOL] [EOL] class User ( db . Model ) : [EOL] __tablename__ = [string] [EOL] [EOL] id = db . Column ( db . Integer , primary_key = True ) [EOL] username = db . Column ( db . String ( [number] ) , unique = True , nullable = False ) [EOL] password = db . Column ( db . String ( [number] ) , nullable = False ) [EOL] is_admin = db . Column ( db . Boolean , default = False , nullable = False ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] learner_score = db . Column ( db . Integer , default = [number] , nullable = False ) [EOL] creator_score = db . Column ( db . Integer , default = [number] , nullable = False ) [EOL] games_played = db . Column ( db . Integer , default = [number] , nullable = False ) [EOL] [comment] [EOL] [EOL] saved_games = db . relationship ( [string] , secondary = game_user_links , lazy = [string] , backref = db . backref ( [string] , lazy = True ) ) [EOL] [EOL] saved_categories = db . relationship ( [string] , secondary = category_user_links , lazy = [string] , backref = db . backref ( [string] , lazy = True ) ) [EOL] [EOL] created_games = db . relationship ( [string] , backref = [string] , lazy = [string] ) [EOL] created_categories = db . relationship ( [string] , backref = [string] , lazy = [string] ) [EOL] [EOL] cards = db . relationship ( [string] , backref = [string] , lazy = True ) [EOL] [EOL] def __init__ ( self , username , password , admin = False ) : [EOL] self . username = username [EOL] self . password = User . hash_password ( password ) [EOL] self . is_admin = admin [EOL] [EOL] @ staticmethod def hash_password ( password ) : [EOL] return pbkdf2_sha256 . hash ( password ) [EOL] [EOL] def set_password ( self , password ) : [EOL] self . password = User . hash_password ( password ) [EOL] [EOL] def check_password ( self , password ) : [EOL] [docstring] [EOL] return pbkdf2_sha256 . verify ( password , self . password ) [EOL] [EOL] def __repr__ ( self ) : [EOL] return [string] . format ( self . username ) [EOL] [EOL] def get_info_dict ( self ) : [EOL] [comment] [EOL] [comment] [EOL] plays = sum ( map ( lambda card : card . n_plays , self . cards ) ) [EOL] created = self . created_games . count ( ) [EOL] [EOL] [comment] [EOL] learner_score = ( plays // [number] ) [EOL] [EOL] [comment] [EOL] n_cards = Card . query . join ( Game ) . filter ( Game . author_id == self . id ) . count ( ) [EOL] creator_score = [number] * created + n_cards [EOL] [EOL] return { [string] : self . username , [string] : self . is_admin , [string] : plays , [string] : created , [string] : learner_score , [string] : creator_score , } [EOL] [EOL] [EOL] class Language ( db . Model ) : [EOL] __tablename__ = [string] [EOL] [EOL] id = db . Column ( db . Integer , primary_key = True ) [EOL] name = db . Column ( db . String ( [number] ) , unique = True , nullable = False ) [EOL] code = db . Column ( db . String ( [number] ) , unique = True , nullable = False ) [EOL] [EOL] games = db . relationship ( [string] , backref = [string] , lazy = [string] ) [EOL] categories = db . relationship ( [string] , backref = [string] , lazy = [string] ) [EOL] [EOL] def __init__ ( self , code , name ) : [EOL] self . code = code [EOL] self . name = name [EOL] [EOL] def __repr__ ( self ) : [EOL] return [string] . format ( self . name ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] class Image ( db . Model ) : [EOL] __tablename__ = [string] [EOL] [EOL] id = db . Column ( db . Integer , primary_key = True ) [EOL] data = db . Column ( db . Text , nullable = False ) [EOL] [EOL] [comment] [EOL] [EOL] game_id = db . Column ( db . Integer , db . ForeignKey ( [string] ) , nullable = False ) [EOL] [EOL] def __init__ ( self , data ) : [EOL] self . data = data [EOL] [EOL] def __repr__ ( self ) : [EOL] return [string] . format ( self . url ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def get_data_uri ( self ) : [EOL] return [string] . format ( self . data ) [EOL] [EOL] [EOL] class Audio ( db . Model ) : [EOL] __tablename__ = [string] [EOL] [EOL] id = db . Column ( db . Integer , primary_key = True ) [EOL] url = db . Column ( db . String ( [number] ) , nullable = False ) [EOL] [EOL] game_id = db . Column ( db . Integer , db . ForeignKey ( [string] ) , nullable = False ) [EOL] [EOL] def __init__ ( self , url ) : [EOL] self . url = url [EOL] [EOL] def __repr__ ( self ) : [EOL] return [string] . format ( self . url ) [EOL] [EOL] [EOL] class Game ( db . Model ) : [EOL] __tablename__ = [string] [EOL] [EOL] id = db . Column ( db . Integer , primary_key = True ) [EOL] word = db . Column ( db . String ( [number] ) , nullable = False ) [EOL] [EOL] author_id = db . Column ( db . Integer , db . ForeignKey ( [string] ) , nullable = False ) [EOL] [EOL] public = db . Column ( db . Boolean , default = False , nullable = False ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] images = db . relationship ( [string] , cascade = [string] , order_by = Image . id , backref = [string] , lazy = True ) [EOL] [comment] [EOL] audios = db . relationship ( [string] , cascade = [string] , order_by = Audio . id , backref = [string] , lazy = True ) [EOL] flags = db . relationship ( [string] , cascade = [string] , backref = [string] , lazy = True ) [EOL] [EOL] language_id = db . Column ( db . Integer , db . ForeignKey ( [string] ) , nullable = False ) [EOL] [EOL] def __init__ ( self , word , author , language , public = False ) : [EOL] self . word = word [EOL] self . author = author [EOL] self . language = language [EOL] self . public = public [EOL] [EOL] def __repr__ ( self ) : [EOL] return [string] . format ( self . word ) [EOL] [EOL] def get_segments ( self , threshold = [number] ) : [EOL] [comment] [EOL] [comment] [EOL] pieces = pmi . segment ( self . word , [string] , threshold ) [EOL] shuffle ( pieces ) [EOL] return pieces [EOL] [EOL] [EOL] class Category ( db . Model ) : [EOL] __tablename__ = [string] [EOL] [EOL] id = db . Column ( db . Integer , primary_key = True ) [EOL] name = db . Column ( db . String ( [number] ) , nullable = False ) [EOL] [EOL] author_id = db . Column ( db . Integer , db . ForeignKey ( [string] ) , nullable = False ) [EOL] [EOL] games = db . relationship ( [string] , secondary = category_game_links , lazy = [string] , backref = db . backref ( [string] , lazy = True ) ) [EOL] [EOL] language_id = db . Column ( db . Integer , db . ForeignKey ( [string] ) , nullable = False ) [EOL] [EOL] def __init__ ( self , name , author , language ) : [EOL] self . name = name [EOL] self . author = author [EOL] self . language = language [EOL] [EOL] def __repr__ ( self ) : [EOL] return [string] . format ( self . name ) [EOL] [EOL] def add_game ( self , game ) : [EOL] game . course = self [EOL] [EOL] [EOL] class Card ( db . Model ) : [EOL] [docstring] [EOL] __tablename__ = [string] [EOL] [EOL] user_id = db . Column ( db . Integer , db . ForeignKey ( [string] ) , primary_key = True ) [EOL] game_id = db . Column ( db . Integer , db . ForeignKey ( [string] ) , primary_key = True ) [EOL] [EOL] game = db . relationship ( [string] , lazy = True ) [EOL] n_plays = db . Column ( db . Integer , nullable = False , default = [number] ) [EOL] [EOL] [comment] [EOL] [EOL] def __init__ ( self , user , game ) : [EOL] self . game = game [EOL] self . user = user [EOL] self . n_plays = [number] [EOL] [EOL] def add_play ( self ) : [EOL] self . n_plays += [number] [EOL] [EOL] [EOL] class Flag ( db . Model ) : [EOL] [docstring] [EOL] __tablename__ = [string] [EOL] [EOL] id = db . Column ( db . Integer , primary_key = True ) [EOL] [EOL] game_id = db . Column ( db . Integer , db . ForeignKey ( [string] ) , nullable = False ) [EOL] user_id = db . Column ( db . Integer , db . ForeignKey ( [string] ) , nullable = False ) [EOL] [EOL] [comment] [EOL] text = db . Column ( db . String ( [number] ) , default = [string] , nullable = False ) [EOL] [EOL] [comment] [EOL] date = db . Column ( db . DateTime , default = datetime . datetime . utcnow , nullable = False ) [EOL] [EOL] def __init__ ( self , user , game ) : [EOL] self . game = game [EOL] self . user = user [EOL] [EOL] [EOL] class Like ( db . Model ) : [EOL] [docstring] [EOL] __tablename__ = [string] [EOL] [EOL] id = db . Column ( db . Integer , primary_key = True ) [EOL] [EOL] game_id = db . Column ( db . Integer , db . ForeignKey ( [string] ) , nullable = False ) [EOL] user_id = db . Column ( db . Integer , db . ForeignKey ( [string] ) , nullable = False ) [EOL] [EOL] [comment] [EOL] date = db . Column ( db . DateTime , default = datetime . datetime . utcnow , nullable = False ) [EOL] [EOL] def __init__ ( self , user , game ) : [EOL] self . game = game [EOL] self . user = user [EOL]	one$ 0 0 0 $dhoyu.models.User$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $dhoyu.models.User$ 0 $dhoyu.models.User$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[dhoyu.models.Flag]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dhoyu.models.Flag]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dhoyu.models.Flag]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dhoyu.models.Flag]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dhoyu.models.Flag]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $dhoyu.models.User$ 0 $dhoyu.models.Game$ 0 0 0 0 0 $dhoyu.models.Game$ 0 $dhoyu.models.Game$ 0 0 0 $dhoyu.models.User$ 0 $dhoyu.models.User$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[dhoyu.models.Like]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dhoyu.models.Like]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dhoyu.models.Like]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dhoyu.models.Like]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $dhoyu.models.User$ 0 $dhoyu.models.Game$ 0 0 0 0 0 $dhoyu.models.Game$ 0 $dhoyu.models.Game$ 0 0 0 $dhoyu.models.User$ 0 $dhoyu.models.User$ 0