from typing import Dict , List [EOL] import typing [EOL] import card [EOL] import builtins [EOL] from card import Field , Card [EOL] import uuid [EOL] from typing import Dict , List , Optional [EOL] [EOL] [EOL] class Player : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , name ) : [EOL] self . name = name [EOL] self . hand = [ ] [EOL] self . fields = [ ] [EOL] self . coins = [number] [EOL] self . is_host = False [EOL] self . token = str ( uuid . uuid4 ( ) ) [EOL] self . pending_cards = [ ] [EOL] self . socket_sid = [string] [EOL] self . last_update = { } [EOL] [EOL] [comment] [EOL] self . fields . append ( Field ( True ) ) [EOL] self . fields . append ( Field ( True ) ) [EOL] self . fields . append ( Field ( False ) ) [EOL] [EOL] def get_first_card ( self ) : [EOL] [docstring] [EOL] first_card = self . hand [ [number] ] [EOL] self . hand = self . hand [ [number] : ] [EOL] return first_card [EOL] [EOL] def to_dict_public ( self ) : [EOL] [docstring] [EOL] return { [string] : self . name , [string] : len ( self . hand ) , [string] : [ field . to_dict ( ) for field in self . fields ] , [string] : self . coins , [string] : self . is_host } [EOL] [EOL] def to_dict_private ( self ) : [EOL] [docstring] [EOL] knowledge = self . to_dict_public ( ) [EOL] knowledge [ [string] ] = [ card . to_dict ( ) for card in self . hand ] [EOL] knowledge [ [string] ] = [ card . to_dict ( ) for card in self . pending_cards ] [EOL] return knowledge [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.List[card.Card]$ 0 0 0 0 0 0 $typing.List[card.Field]$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[card.Card]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 $typing.List[card.Field]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[card.Field]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[card.Field]$ 0 0 0 0 0 0 0 0 0 0 0 $card.Card$ 0 0 0 0 0 0 0 $card.Card$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $card.Card$ 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0
from typing import Tuple [EOL] import typing [EOL] import builtins [EOL] from typing import List , Dict , Tuple [EOL] [EOL] STAGES = ( [string] , [string] , [string] , [string] ) [EOL] MAX_PLAYERS = [number] [EOL] MAX_CARDS = [number] [EOL] MIN_CARDS = [number] [EOL] CARD_TYPES = ( ( [string] , [number] , ( MAX_CARDS , [number] , [number] , [number] ) , [string] ) , ( [string] , [number] , ( MAX_CARDS , [number] , [number] , MAX_CARDS ) , [string] ) , ( [string] , [number] , ( [number] , [number] , [number] , [number] ) , [string] ) , ( [string] , [number] , ( [number] , [number] , [number] , [number] ) , [string] ) , ( [string] , [number] , ( [number] , [number] , [number] , [number] ) , [string] ) , ( [string] , [number] , ( [number] , [number] , [number] , [number] ) , [string] ) , ( [string] , [number] , ( [number] , [number] , [number] , [number] ) , [string] ) , ( [string] , [number] , ( [number] , [number] , [number] , [number] ) , [string] ) , ( [string] , [number] , ( [number] , [number] , [number] , [number] ) , [string] ) , ( [string] , [number] , ( [number] , [number] , [number] , [number] ) , [string] ) , ( [string] , [number] , ( [number] , [number] , [number] , [number] ) , [string] ) )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,...]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.int,typing.Tuple[builtins.int,builtins.int,builtins.int,builtins.int],builtins.str],...]$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , List [EOL] import typing [EOL] import builtins [EOL] from typing import List , Dict [EOL] [EOL] import signal [EOL] import sys [EOL] [EOL] def shrink ( lst ) : [EOL] if lst : [EOL] return lst [ [number] ] [EOL] return [ ] [EOL] [EOL] [EOL] def get_player ( game , token ) : [EOL] return shrink ( [ player for player in game . players if player . token == token ] ) [EOL] [EOL] [EOL] def get_game ( game_id , games ) : [EOL] if game_id not in games : [EOL] return None [EOL] return games [ game_id ] [EOL] [EOL] [EOL] def error ( message ) : [EOL] return { [string] : message } [EOL] [EOL] [EOL] def success ( message ) : [EOL] return { [string] : message } [EOL] [EOL] [EOL] def interrupt_handler ( signum , frame ) : [EOL] [docstring] [EOL] print ( [string] . format ( signum ) ) [EOL] sys . exit ( [number] ) [EOL] [EOL] [EOL] def register_signal_handler ( ) : [EOL] [docstring] [EOL] signal . signal ( signal . SIGINT , interrupt_handler ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict , List [EOL] import app [EOL] import builtins [EOL] import typing [EOL] import player [EOL] import card [EOL] from typing import List , Dict [EOL] import uuid [EOL] import util [EOL] from player import Player [EOL] from card import Card [EOL] [EOL] class TradingCard : [EOL] def __init__ ( self , card , location , location_desc ) : [EOL] self . card = card [EOL] self . location = location [EOL] self . location_desc = location_desc [EOL] [EOL] def remove_from_location ( self ) : [EOL] safe_cards = [ card for card in self . location if card . id != self . card . id ] [EOL] self . location . clear ( ) [EOL] for card in safe_cards : [EOL] self . location . append ( card ) [EOL] [EOL] def to_dict ( self ) : [EOL] return { [string] : self . card . to_dict ( ) , [string] : self . location_desc } [EOL] [EOL] class Trade : [EOL] [docstring] [EOL] def __init__ ( self , p1 , p2 , p1_trades , wants ) : [EOL] self . id = str ( uuid . uuid4 ( ) ) [ : [number] ] [EOL] self . p1 = p1 [EOL] self . p2 = p2 [EOL] self . p1_trades = p1_trades [EOL] self . p2_trades = [ ] [EOL] self . wants = wants [EOL] [EOL] def accept ( self , p2_trades ) : [EOL] self . p2_trades = p2_trades [EOL] if sorted ( self . wants ) != sorted ( [ tc . card . name for tc in p2_trades ] ) : [EOL] return util . error ( [string] ) [EOL] [comment] [EOL] p1_pending = [ tc . card for tc in self . p2_trades ] [EOL] p2_pending = [ tc . card for tc in self . p1_trades ] [EOL] [comment] [EOL] [ tc . remove_from_location ( ) for tc in self . p1_trades + self . p2_trades ] [EOL] [comment] [EOL] self . p1 . pending_cards += p1_pending [EOL] self . p2 . pending_cards += p2_pending [EOL] return util . success ( [string] ) [EOL] [EOL] def to_public_dict ( self ) : [EOL] return { [string] : self . id , [string] : self . p1 . name , [string] : self . p2 . name , [string] : self . wants , [string] : [ str ( tc . card . name ) for tc in self . p1_trades ] , [string] : [ tc . to_dict ( ) for tc in self . p1_trades ] , [string] : [ tc . to_dict ( ) for tc in self . p2_trades ] } [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $player.Player$ 0 $player.Player$ 0 $typing.List[TradingCard]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $player.Player$ 0 $player.Player$ 0 0 0 $player.Player$ 0 $player.Player$ 0 0 0 $typing.List[TradingCard]$ 0 $typing.List[TradingCard]$ 0 0 0 $typing.List[TradingCard]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 $typing.Dict$ 0 0 0 $typing.List[app.trade.TradingCard]$ 0 0 0 0 0 $typing.List[app.trade.TradingCard]$ 0 $typing.List[app.trade.TradingCard]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[app.trade.TradingCard]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[card.Card]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[app.trade.TradingCard]$ 0 0 $typing.List[card.Card]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[app.trade.TradingCard]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[card.Card]$ 0 0 0 0 0 0 0 $typing.List[card.Card]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , List , Dict , Any , Literal [EOL] import builtins [EOL] import typing [EOL] import game [EOL] import flask [EOL] import typing_extensions [EOL] import player [EOL] from functools import wraps [EOL] import json [EOL] from json . decoder import JSONDecodeError [EOL] from typing import Dict , List [EOL] import os [EOL] from time import sleep [EOL] from flask import Flask , request , abort , jsonify , make_response [EOL] import jsonpatch [EOL] from flask_socketio import SocketIO , join_room [EOL] [EOL] from player import Player [EOL] from game import Game [EOL] import util [EOL] [EOL] app = Flask ( __name__ ) [EOL] app . config [ [string] ] = [string] [EOL] socketio = SocketIO ( app ) [EOL] [EOL] [comment] [EOL] util . register_signal_handler ( ) [EOL] [EOL] games = { } [EOL] clients = { } [EOL] [EOL] if [string] in os . environ : [EOL] CLIENT_ORIGIN = os . environ [ [string] ] [EOL] [EOL] [comment] [EOL] HOST = os . getenv ( [string] , [string] ) [EOL] PORT = os . getenv ( [string] , [number] ) [EOL] [EOL] @ socketio . on ( [string] ) def on_login ( login_info ) : [EOL] try : [EOL] game = games [ login_info [ [string] ] ] [EOL] player = [ player for player in game . players if player . token == login_info [ [string] ] ] [ [number] ] [EOL] except KeyError : [EOL] socketio . emit ( [string] , [string] ) [EOL] return [EOL] except IndexError : [EOL] socketio . emit ( [string] , [string] ) [EOL] return [EOL] player . socket_sid = request . sid [EOL] socketio . emit ( [string] , json . dumps ( game . retrieve_game ( player ) ) , room = player . socket_sid ) [EOL] [EOL] def check_valid_request ( f ) : [EOL] [docstring] [EOL] @ wraps ( f ) def wrapper ( * args , ** kwargs ) : [EOL] try : [EOL] game = games [ kwargs [ [string] ] ] [EOL] except KeyError : [EOL] abort ( [number] , util . error ( [string] ) ) [EOL] [EOL] try : [EOL] player = [ player for player in game . players if player . token == request . cookies . get ( [string] ) ] [ [number] ] [EOL] except IndexError : [EOL] abort ( [number] , util . error ( [string] ) ) [EOL] [EOL] return f ( game , player ) [EOL] return wrapper [EOL] [EOL] def update_client ( game ) : [EOL] for player in game . players : [EOL] update = game . retrieve_game ( player ) [EOL] patch = jsonpatch . make_patch ( player . last_update , update ) [EOL] socketio . emit ( [string] , patch . to_string ( ) , room = player . socket_sid ) [EOL] player . last_update = update [EOL] [EOL] def error_check ( result ) : [EOL] [docstring] [EOL] if result . get ( [string] ) : [EOL] abort ( [number] , result ) [EOL] return result [EOL] [EOL] [EOL] @ app . errorhandler ( [number] ) def error400 ( err ) : [EOL] return jsonify ( err . description ) , [number] [EOL] [EOL] [EOL] @ app . after_request def enable_cors ( response ) : [EOL] [docstring] [EOL] [EOL] if CLIENT_ORIGIN : [EOL] response . headers [ [string] ] = CLIENT_ORIGIN [EOL] response . headers [ [string] ] = [string] [EOL] response . headers [ [string] ] = [string] [EOL] response . headers [ [string] ] = [string] [EOL] return response [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def access ( ) : [EOL] [docstring] [EOL] cookie = request . cookies . get ( [string] ) [EOL] try : [EOL] game_id = clients [ cookie ] [EOL] except KeyError : [EOL] abort ( [number] , util . error ( [string] ) ) [EOL] if games [ game_id ] . status == [string] : [EOL] abort ( [number] , util . error ( [string] ) ) [EOL] player = util . shrink ( [ player for player in games [ game_id ] . players if player . token == request . cookies . get ( [string] ) ] ) [EOL] return jsonify ( { [string] : game_id , [string] : player . name } ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def login ( ) : [EOL] [docstring] [EOL] post_data = request . get_json ( ) [EOL] try : [EOL] name = post_data [ [string] ] [EOL] game_id = post_data [ [string] ] [EOL] except KeyError : [EOL] abort ( [number] , util . error ( [string] ) ) [EOL] [EOL] [comment] [EOL] game = util . shrink ( [ games [ game_id ] for game_id in games if games [ game_id ] . game_type == [string] ] ) [EOL] [EOL] [comment] [EOL] if game_id in games : [EOL] game = games [ game_id ] [EOL] [EOL] if name in [ player . name for player in game . players ] : [EOL] abort ( [number] , util . error ( [string] ) ) [EOL] if game . status != [string] : [EOL] abort ( [number] , util . error ( [string] ) ) [EOL] if game . is_full ( ) : [EOL] abort ( [number] , util . error ( [string] ) ) [EOL] [EOL] player = Player ( name ) [EOL] game . add_player ( player ) [EOL] clients [ player . token ] = game_id [EOL] response = make_response ( jsonify ( util . success ( [string] ) ) ) [EOL] response . set_cookie ( [string] , player . token , max_age = [number] ) [EOL] update_client ( game ) [EOL] return response [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def create_new_game ( ) : [EOL] [docstring] [EOL] post_data = request . get_json ( ) [EOL] try : [EOL] player = Player ( post_data [ [string] ] ) [EOL] except KeyError : [EOL] abort ( [number] , util . error ( [string] ) ) [EOL] [EOL] try : [EOL] game_type = post_data [ [string] ] [EOL] except KeyError : [EOL] abort ( [number] , util . error ( [string] ) ) [EOL] if game_type not in ( [string] , [string] ) : [EOL] abort ( [number] , util . error ( [string] ) ) [EOL] [EOL] game = Game ( game_type ) [EOL] game . add_player ( player ) [EOL] games [ game . id ] = game [EOL] clients [ player . token ] = game . id [EOL] response = make_response ( jsonify ( { [string] : game . id } ) ) [EOL] response . set_cookie ( [string] , player . token , max_age = [number] ) [EOL] return response [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) @ check_valid_request def leave_game ( game , player ) : [EOL] [docstring] [EOL] result = game . leave_game ( player ) [EOL] error_check ( result ) [EOL] response = make_response ( jsonify ( result ) ) [EOL] response . set_cookie ( [string] , [string] , max_age = [number] ) [EOL] return response [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) @ check_valid_request def game_status ( game , player ) : [EOL] [docstring] [EOL] result = game . retrieve_game ( player ) [EOL] error_check ( result ) [EOL] return jsonify ( result ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) @ check_valid_request def start_game ( game , player ) : [EOL] [docstring] [EOL] result = game . start_game ( player ) [EOL] error_check ( result ) [EOL] update_client ( game ) [EOL] return jsonify ( result ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) @ check_valid_request def play_card_from_hand ( game , player ) : [EOL] [docstring] [EOL] post_data = request . get_json ( ) [EOL] try : [EOL] field_index = post_data [ [string] ] [EOL] except KeyError : [EOL] abort ( [number] , util . error ( [string] ) ) [EOL] result = game . hand_to_field ( player , field_index ) [EOL] error_check ( result ) [EOL] update_client ( game ) [EOL] return jsonify ( result ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) @ check_valid_request def play_card_from_market ( game , player ) : [EOL] [docstring] [EOL] post_data = request . get_json ( ) [EOL] try : [EOL] field_index = post_data [ [string] ] [EOL] card_id = post_data [ [string] ] [EOL] except KeyError : [EOL] abort ( [number] , util . error ( [string] ) ) [EOL] result = game . market_to_field ( player , field_index , card_id ) [EOL] error_check ( result ) [EOL] update_client ( game ) [EOL] return jsonify ( result ) [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) @ check_valid_request def play_card_from_pending ( game , player ) : [EOL] [docstring] [EOL] post_data = request . get_json ( ) [EOL] try : [EOL] card_id = post_data [ [string] ] [EOL] field_index = post_data [ [string] ] [EOL] except KeyError : [EOL] abort ( [number] , util . error ( [string] ) ) [EOL] result = game . pending_to_field ( player , field_index , card_id ) [EOL] error_check ( result ) [EOL] update_client ( game ) [EOL] return jsonify ( result ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) @ check_valid_request def draw_for_market ( game , player ) : [EOL] [docstring] [EOL] result = game . deck_to_market ( player ) [EOL] error_check ( result ) [EOL] update_client ( game ) [EOL] return jsonify ( result ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) @ check_valid_request def draw_for_hand ( game , player ) : [EOL] [docstring] [EOL] result = game . deck_to_hand ( player ) [EOL] error_check ( result ) [EOL] update_client ( game ) [EOL] return jsonify ( result ) [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) @ check_valid_request def create_trade ( game , player ) : [EOL] [docstring] [EOL] post_data = request . get_json ( ) [EOL] try : [EOL] card_ids = post_data [ [string] ] [EOL] other_player_name = post_data [ [string] ] [EOL] wants = post_data [ [string] ] [comment] [EOL] except KeyError : [EOL] abort ( [number] , util . error ( [string] ) ) [EOL] [EOL] result = game . create_trade ( player , other_player_name , card_ids , wants ) [EOL] error_check ( result ) [EOL] update_client ( game ) [EOL] return jsonify ( result ) [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) @ check_valid_request def accept_trade ( game , player ) : [EOL] [docstring] [EOL] post_data = request . get_json ( ) [EOL] try : [EOL] trade_id = post_data [ [string] ] [EOL] card_ids = post_data [ [string] ] [EOL] except KeyError : [EOL] abort ( [number] , util . error ( [string] ) ) [EOL] result = game . accept_trade ( player , trade_id , card_ids ) [EOL] error_check ( result ) [EOL] update_client ( game ) [EOL] return jsonify ( result ) [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) @ check_valid_request def reject_trade ( game , player ) : [EOL] [docstring] [EOL] post_data = request . get_json ( ) [EOL] try : [EOL] trade_id = post_data [ [string] ] [EOL] except KeyError : [EOL] abort ( [number] , util . error ( [string] ) ) [EOL] result = game . reject_trade ( player , trade_id ) [EOL] error_check ( result ) [EOL] update_client ( game ) [EOL] return jsonify ( result ) [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) @ check_valid_request def buy_field ( game , player ) : [EOL] [docstring] [EOL] result = game . buy_field ( player ) [EOL] error_check ( result ) [EOL] update_client ( game ) [EOL] return jsonify ( result ) [EOL] [EOL] print ( [string] . format ( HOST , PORT ) ) [EOL] socketio . run ( app , HOST , PORT ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0