from typing import List , Tuple [EOL] import typing [EOL] import riskmatrix [EOL] import matrix [EOL] import builtins [EOL] from __future__ import annotations [EOL] from dataclasses import dataclass [EOL] from functools import total_ordering [EOL] from typing import List , Optional , Tuple , Union [EOL] [EOL] [comment] [EOL] if False : [EOL] from . matrix import RiskMatrix [EOL] [EOL] [EOL] @ dataclass class Point : [EOL] [docstring] [EOL] [EOL] code = [string] [EOL] name = [string] [EOL] description = [string] [EOL] [EOL] [EOL] @ total_ordering class AxisPoint : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , code , name , description , value , axis ) : [EOL] self . code = code [EOL] self . name = name [EOL] self . description = description [EOL] self . value = value [EOL] self . axis = axis [EOL] [EOL] def __repr__ ( self ) : [EOL] return f" [string] { self . code , self . name , self . description } [string] " [EOL] [EOL] def __str__ ( self ) : [EOL] return f" [string] { self . code } [string] { self . name }" [EOL] [EOL] def __eq__ ( self , other ) : [EOL] [docstring] [EOL] if not isinstance ( other , ( AxisPoint , str ) ) : [EOL] return NotImplemented [EOL] [EOL] if isinstance ( other , str ) : [EOL] return self . code == other [EOL] [EOL] return self . value == other . value [EOL] [EOL] def __lt__ ( self , other ) : [EOL] if not isinstance ( other , AxisPoint ) : [EOL] return NotImplemented [EOL] [EOL] return self . value < other . value [EOL] [EOL] def __hash__ ( self ) : [EOL] return hash ( f"{ self . code } [string] { self . name }" ) [EOL] [EOL] [EOL] class Axis : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , name , matrix ) : [EOL] self . name = name [EOL] self . _points = [ ] [EOL] self . matrix = matrix [EOL] [EOL] def __repr__ ( self ) : [EOL] return f" [string] { self . name } [string] " [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] def __getitem__ ( self , key ) : [EOL] return self . points [ key ] [EOL] [EOL] def __len__ ( self ) : [EOL] return len ( self . points ) [EOL] [EOL] @ property def points ( self ) : [EOL] [docstring] [EOL] return tuple ( self . _points ) [EOL] [EOL] def add_point ( self , point ) : [EOL] [docstring] [EOL] code , name , description = point . code , point . name , point . description [EOL] value = len ( self . _points ) + [number] [EOL] axis = self [EOL] [EOL] axis_point = AxisPoint ( code , name , description , value , axis ) [EOL] self . _points . append ( axis_point ) [EOL] self . _points = sorted ( self . points ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.int$ 0 $riskmatrix.axis.Axis$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $riskmatrix.axis.Axis$ 0 $riskmatrix.axis.Axis$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $riskmatrix.matrix.RiskMatrix$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.List[AxisPoint]$ 0 0 0 0 0 0 $riskmatrix.matrix.RiskMatrix$ 0 $riskmatrix.matrix.RiskMatrix$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $AxisPoint$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[AxisPoint,...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $Point$ 0 0 0 0 0 0 0 0 0 0 0 $Point$ 0 0 0 $Point$ 0 0 0 $Point$ 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.List[riskmatrix.axis.AxisPoint]$ 0 0 0 0 $riskmatrix.axis.Axis$ 0 0 0 0 $riskmatrix.axis.AxisPoint$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $riskmatrix.axis.Axis$ 0 0 0 0 $typing.List[riskmatrix.axis.AxisPoint]$ 0 0 0 $riskmatrix.axis.AxisPoint$ 0 0 0 0 $typing.List[riskmatrix.axis.AxisPoint]$ 0 0 0 0 0 0 0 0
import builtins [EOL] from __future__ import annotations [EOL] from typing import Optional [EOL] from functools import total_ordering [EOL] [EOL] [EOL] @ total_ordering class Category : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , code , name , color , text_color , description = [string] ) : [EOL] self . code = code [EOL] self . name = name [EOL] self . desc = description [EOL] self . color = color [EOL] self . text_color = text_color [EOL] self . value = [number] [EOL] [EOL] def __repr__ ( self ) : [EOL] return f" [string] { self . code , self . name , self . desc }" [EOL] [EOL] def __str__ ( self ) : [EOL] return f" [string] { self . code } [string] { self . name }" [EOL] [EOL] def __eq__ ( self , other ) : [EOL] if not isinstance ( other , Category ) : [EOL] return NotImplemented [EOL] return self . value == other . value [EOL] [EOL] def __lt__ ( self , other ) : [EOL] if not isinstance ( other , Category ) : [EOL] return NotImplemented [EOL] return self . value < other . value [EOL] [EOL] def __hash__ ( self ) : [EOL] return hash ( f"{ self . value } [string] { self . code }" ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Generator , Tuple , Iterable , Set [EOL] import matrix [EOL] import builtins [EOL] import axis [EOL] import typing [EOL] import riskmatrix [EOL] from __future__ import annotations [EOL] from itertools import combinations [EOL] from typing import Iterable , Union , Tuple [EOL] from . axis import AxisPoint [EOL] [EOL] [comment] [EOL] if False : [EOL] from . matrix import RiskMatrix [EOL] [EOL] [EOL] class Coordinate : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , points ) : [EOL] self . __check_requirements ( points ) [EOL] self . matrix = set ( p . axis . matrix for p in points ) . pop ( ) [EOL] [comment] [EOL] _points = [ ] [EOL] for axis in self . matrix . axes : [EOL] for point in points : [EOL] if axis == point . axis : [EOL] _points . append ( point ) [EOL] self . points = tuple ( _points ) [EOL] [EOL] def __repr__ ( self ) : [EOL] return f" [string] { [ p . code for p in self . points ] } [string] " [EOL] [EOL] def __str__ ( self ) : [EOL] [docstring] [EOL] return f'{ [string] . join ( str ( p . code ) for p in self . points ) }' [EOL] [EOL] def __getitem__ ( self , key ) : [EOL] return self . points [ key ] [EOL] [EOL] def __hash__ ( self ) : [EOL] return hash ( self . points ) [EOL] [EOL] def __eq__ ( self , other ) : [EOL] [docstring] [EOL] if not isinstance ( other , ( Coordinate , str ) ) : [EOL] return NotImplemented [EOL] [EOL] if isinstance ( other , str ) : [EOL] other = self . matrix . get_coordinate ( other ) [EOL] [EOL] if self . matrix . strict_coordinate_comparison : [EOL] return str ( self ) == str ( other ) [EOL] [EOL] return self . value == other . value [EOL] [EOL] def __lt__ ( self , other ) : [EOL] if not isinstance ( other , Coordinate ) : [EOL] return NotImplemented [EOL] [EOL] value_self = sum ( p . value for p in self . points ) [EOL] value_other = sum ( p . value for p in other . points ) [EOL] [EOL] [comment] [EOL] if self . category != other . category : [EOL] return self . category . value < other . category . value [EOL] [EOL] [comment] [EOL] [comment] [EOL] if self . matrix . strict_coordinate_comparison and value_self == value_other : [EOL] return str ( self ) < str ( other ) [EOL] [EOL] return value_self < value_other [EOL] [EOL] @ property def value ( self ) : [EOL] return sum ( p . value for p in self . points ) [EOL] [EOL] @ property def category ( self ) : [EOL] return self . matrix . get_category ( self ) [EOL] [EOL] def __check_requirements ( self , points ) : [EOL] if any ( p . axis is None for p in points ) : [EOL] raise ValueError ( [string] ) [EOL] [EOL] if any ( p . axis . matrix is None for p in points ) : [EOL] raise ValueError ( [string] ) [EOL] [EOL] point_pairs = ( pair for pair in combinations ( points , [number] ) ) [EOL] pair_sets = ( set ( ( pair [ [number] ] . axis , pair [ [number] ] . axis ) ) for pair in point_pairs ) [EOL] if any ( ( len ( s ) == [number] for s in pair_sets ) ) : [EOL] raise ValueError ( [string] ) [EOL] [EOL] if len ( set ( p . axis . matrix for p in points ) ) != [number] : [EOL] raise ValueError ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $riskmatrix.coordinate.Coordinate$ 0 0 0 0 0 0 0 0 0 $riskmatrix.coordinate.Coordinate$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $riskmatrix.coordinate.Coordinate$ 0 0 0 0 0 $riskmatrix.coordinate.Coordinate$ 0 0 0 0 0 0 0 $riskmatrix.coordinate.Coordinate$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $riskmatrix.coordinate.Coordinate$ 0 0 0 0 0 0 0 0 $riskmatrix.coordinate.Coordinate$ 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[axis.AxisPoint]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[axis.AxisPoint]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[axis.AxisPoint]$ 0 0 0 0 0 0 0 0 0 0 $typing.Generator[typing.Tuple[riskmatrix.axis.AxisPoint,riskmatrix.axis.AxisPoint],None,None]$ 0 0 0 0 0 0 0 0 $typing.Iterable[axis.AxisPoint]$ 0 0 0 0 0 $typing.Generator[typing.Set[riskmatrix.axis.Axis],None,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Generator[typing.Tuple[riskmatrix.axis.AxisPoint,riskmatrix.axis.AxisPoint],None,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Generator[typing.Set[riskmatrix.axis.Axis],None,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[axis.AxisPoint]$ 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] __version__ = [string] [EOL] [EOL] from . axis import Axis , AxisPoint , Point [EOL] from . category import Category [EOL] from . coordinate import Coordinate [EOL] from . matrix import RiskMatrix [EOL]	0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Generator , List , Any [EOL] import typing [EOL] import riskmatrix [EOL] import pytest [EOL] from riskmatrix import RiskMatrix , Axis , AxisPoint , Category , Coordinate , Point [EOL] [EOL] [EOL] @ pytest . fixture def rm ( ) : [EOL] return RiskMatrix ( [string] ) [EOL] [EOL] [EOL] @ pytest . fixture def rm_points ( ) : [EOL] return ( Point ( [string] , [string] ) , Point ( [string] , [string] ) , Point ( [string] , [string] ) , Point ( [number] , [string] ) , Point ( [number] , [string] ) , Point ( [number] , [string] ) , ) [EOL] [EOL] [EOL] @ pytest . fixture def rm_categories ( ) : [EOL] return ( ( [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] ) , ) [EOL] [EOL] [EOL] @ pytest . fixture def rm_with_axis ( rm , rm_points ) : [EOL] a , b , c , one , two , three = rm_points [EOL] [EOL] rm . add_axis ( [string] , points = [ a , b , c ] ) [EOL] rm . add_axis ( [string] , points = [ one , two , three ] ) [EOL] [EOL] return rm [EOL] [EOL] [EOL] @ pytest . fixture def rm_with_categories ( rm_with_axis , rm_categories ) : [EOL] rm = rm_with_axis [EOL] low , med , hig = rm_categories [EOL] [EOL] rm . add_category ( * low ) [EOL] rm . add_category ( * med ) [EOL] rm . add_category ( * hig ) [EOL] [EOL] return rm [EOL] [EOL] [EOL] @ pytest . fixture def rm_coordinates ( rm_with_categories ) : [EOL] rm = rm_with_categories [EOL] a , b , c = rm . axes [ [string] ] . points [EOL] one , two , three = rm . axes [ [string] ] . points [EOL] [EOL] return ( Coordinate ( ( a , one ) ) , Coordinate ( ( a , two ) ) , Coordinate ( ( a , three ) ) , Coordinate ( ( b , one ) ) , Coordinate ( ( b , two ) ) , Coordinate ( ( b , three ) ) , Coordinate ( ( c , one ) ) , Coordinate ( ( c , two ) ) , Coordinate ( ( c , three ) ) , ) [EOL] [EOL] [EOL] @ pytest . fixture def rm_full ( rm_with_categories , rm_coordinates ) : [EOL] rm = rm_with_categories [EOL] low , med , hig = rm . categories [EOL] [EOL] a1 , a2 , a3 , b1 , b2 , b3 , c1 , c2 , c3 = rm_coordinates [EOL] [EOL] rm . map_coordinates ( low , [ a1 , a2 , a3 , b1 ] ) [EOL] rm . map_coordinates ( med , [ b2 , c1 ] ) [EOL] rm . map_coordinates ( hig , [ b3 , c2 , c3 ] ) [EOL] [EOL] return rm [EOL] [EOL] [EOL] class TestRiskMatrix : [EOL] def test_riskmatrix_name ( self ) : [EOL] name = [string] [EOL] rm = RiskMatrix ( name ) [EOL] [EOL] assert rm . name == name [EOL] [EOL] name2 = [string] [EOL] [EOL] assert rm . name != name2 [EOL] [EOL] rm . name = name2 [EOL] [EOL] assert rm . name == name2 [EOL] assert rm . name != name [EOL] [EOL] def test_sorted_coordinates ( self , rm_full ) : [EOL] rm = rm_full [EOL] raw_data = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] coordinates = ( rm . get_coordinate ( c ) for c in raw_data ) [EOL] r = sorted ( coordinates , reverse = True ) [ : [number] ] [EOL] [EOL] assert r == [ rm . get_coordinate ( [string] ) , rm . get_coordinate ( [string] ) ] [EOL] [EOL] def test_coordinates_have_right_category ( self , rm_full ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] rm = rm_full [EOL] [EOL] a1 , a2 , a3 , b1 , b2 , b3 , c1 , c2 , c3 = rm . coordinates [EOL] low , med , hig = rm . categories [EOL] [EOL] assert a1 . category == low [EOL] assert a2 . category == low [EOL] assert a3 . category == low [EOL] assert b1 . category == low [EOL] assert b2 . category == med [EOL] assert c1 . category == med [EOL] assert b3 . category == hig [EOL] assert c2 . category == hig [EOL] assert c3 . category == hig [EOL] [EOL] def test_coordinates_order_alphabetical ( self , rm_full , rm_coordinates ) : [EOL] rm = rm_full [EOL] a1 , a2 , a3 , b1 , b2 , b3 , c1 , c2 , c3 = rm_coordinates [EOL] a1a , a2a , a3a , b1a , b2a , b3a , c1a , c2a , c3a = rm . coordinates [EOL] [EOL] assert a1 == a1a [EOL] assert a2 == a2a [EOL] assert a3 == a3a [EOL] assert b1 == b1a [EOL] assert b2 == b2a [EOL] assert b3 == b3a [EOL] assert c1 == c1a [EOL] assert c2 == c2a [EOL] assert c3 == c3a [EOL] [EOL] def test_coordinate_median ( self , rm_full ) : [EOL] rm = rm_full [EOL] raw_data = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] coordinates = ( rm . get_coordinate ( c ) for c in raw_data ) [EOL] [EOL] [comment] [EOL] import statistics [EOL] [EOL] median = statistics . median ( coordinates ) [EOL] [EOL] assert median == rm_full . get_coordinate ( [string] ) [EOL] [EOL] def test_convert_number_to_letter ( self ) : [EOL] rm = RiskMatrix ( [string] ) [EOL] [EOL] assert rm . _convert_number_to_letter ( [number] ) == [string] [EOL] assert rm . _convert_number_to_letter ( [number] ) == [string] [EOL] assert rm . _convert_number_to_letter ( [number] ) == [string] [EOL] assert rm . _convert_number_to_letter ( [number] ) == [string] [EOL] [EOL] [EOL] class TestAxis : [EOL] def test_add_axis_with_points ( self , rm , rm_points ) : [EOL] a , b , c , * _ = rm_points [EOL] [EOL] rm . add_axis ( [string] , points = [ a , b , c ] ) [EOL] aa , bb , cc = rm . axes [ [string] ] . points [EOL] [EOL] assert a . code == aa . code [EOL] assert a . name == aa . name [EOL] assert a . description == aa . description [EOL] assert a . code != bb . code [EOL] assert b . code == bb . code [EOL] assert rm . axes [ [string] ] [ [number] ] is aa [EOL] assert rm . axes [ [string] ] [ [number] ] is bb [EOL] assert rm . axes [ [string] ] [ [number] ] is cc [EOL] [EOL] def test_add_axis_conflicting_named_arguments ( self , rm , rm_points ) : [EOL] a , b , c , * _ = rm_points [EOL] [EOL] try : [EOL] rm . add_axis ( [string] , points = [ a , b , c ] , size = [number] ) [EOL] except ValueError as e : [EOL] assert ( str ( e ) == [string] ) [EOL] [EOL] def test_add_axis_requires_named_arguments ( self , rm , rm_points ) : [EOL] a , b , c , * _ = rm_points [EOL] [EOL] try : [EOL] rm . add_axis ( [string] , [ a , b , c ] ) [EOL] except TypeError as e : [EOL] assert str ( e ) . startswith ( [string] ) [EOL] [EOL] def test_add_axis_with_size ( self , rm ) : [EOL] rm . add_axis ( [string] , size = [number] ) [EOL] [EOL] assert rm . axes [ [string] ] [ [number] ] . code == [string] [EOL] assert rm . axes [ [string] ] [ [number] ] . code == [string] [EOL] assert rm . axes [ [string] ] [ [number] ] . code == [string] [EOL] assert rm . axes [ [string] ] [ [number] ] . code == [string] [EOL] assert len ( rm . axes [ [string] ] ) == [number] [EOL] [EOL] def test_convert_number_to_letter ( self , rm ) : [EOL] assert rm . _convert_number_to_letter ( [number] ) == [string] [EOL] assert rm . _convert_number_to_letter ( [number] ) == [string] [EOL] [EOL] try : [EOL] number = [number] [EOL] rm . _convert_number_to_letter ( number ) [EOL] except ValueError as e : [EOL] assert str ( e ) == f" [string] { number } [string] " [EOL] [EOL] try : [EOL] number = [number] [EOL] rm . _convert_number_to_letter ( number ) [EOL] except ValueError as e : [EOL] assert str ( e ) == f" [string] { number } [string] " [EOL] [EOL] [EOL] class TestCategory : [EOL] def test_add_category ( self , rm , rm_categories ) : [EOL] low , med , hig = rm_categories [EOL] [EOL] rm . add_category ( * low ) [EOL] rm . add_category ( * med ) [EOL] rm . add_category ( * hig ) [EOL] [EOL] assert len ( rm . categories ) == [number] [EOL] [EOL] assert rm . categories [ [number] ] . value == [number] [EOL] assert rm . categories [ [number] ] . value == [number] [EOL] assert rm . categories [ [number] ] . value == [number] [EOL] [EOL] def test_get_categories ( self , rm_with_categories , rm_categories ) : [EOL] low_origin , med_origin , hig_origin = rm_categories [EOL] low , med , hig = rm_with_categories . categories [EOL] [EOL] assert ( low . code , low . name , low . color , low . text_color ) == (low_origin) [EOL] assert ( med . code , med . name , med . color , med . text_color ) == (med_origin) [EOL] assert ( hig . code , hig . name , hig . color , hig . text_color ) == (hig_origin) [EOL] [EOL] def test_category_value ( self , rm_with_categories ) : [EOL] low , med , hig = rm_with_categories . categories [EOL] [EOL] assert low . value == [number] [EOL] assert med . value == [number] [EOL] assert hig . value == [number] [EOL] [EOL] def test_max_category ( self , rm_full ) : [EOL] assert max ( rm_full . categories ) . value == [number] [EOL] [EOL] [EOL] class TestCoordinate : [EOL] def test_add_coordinate ( self , rm_with_categories , rm_coordinates ) : [EOL] rm = rm_with_categories [EOL] [EOL] low , med , hig = rm . categories [EOL] a1 , a2 , a3 , b1 , b2 , b3 , c1 , c2 , c3 = rm_coordinates [EOL] [EOL] rm . map_coordinates ( low , [ a1 , a2 , a3 , b1 ] ) [EOL] rm . map_coordinates ( med , ( b2 , b3 , c1 , c2 ) ) [EOL] rm . map_coordinate ( hig , c3 ) [EOL] [EOL] assert rm . get_category ( a3 ) == low [EOL] [comment] [EOL] assert rm . get_category ( c3 ) == hig [EOL] [EOL] def test_add_multiple_points_on_one_axis ( self , rm_with_axis ) : [EOL] rm = rm_with_axis [EOL] [EOL] a , b , _ = rm . axes [ [string] ] . points [EOL] [EOL] try : [EOL] Coordinate ( ( a , b ) ) [EOL] except ValueError as e : [EOL] assert ( str ( e ) == [string] ) [EOL] else : [EOL] assert False [EOL] [EOL] def test_get_coordinate ( self , rm_with_categories ) : [EOL] rm = rm_with_categories [EOL] low , med , hig = rm . categories [EOL] a , b , c = rm . axes [ [string] ] . points [EOL] one , two , three = rm . axes [ [string] ] . points [EOL] [EOL] rm . map_coordinates ( low , [ ( a , one ) , ( a , two ) , ( a , three ) , ( b , one ) ] ) [EOL] [EOL] rm . map_coordinates ( med , [ ( b , two ) , ( b , three ) , ( c , one ) , ( c , two ) ] ) [EOL] [EOL] c3 = rm . map_coordinate ( hig , ( c , three ) ) [EOL] [EOL] get_c3 = rm . get_coordinate ( [string] ) [EOL] assert get_c3 == c3 [EOL] assert rm . get_category ( get_c3 ) == hig [EOL] [EOL] def test_equivalent_coordinate_value ( self , rm_full ) : [EOL] [docstring] [EOL] rm = rm_full [EOL] [EOL] c2 = rm . get_coordinate ( [string] ) [EOL] b3 = rm . get_coordinate ( [string] ) [EOL] [EOL] rm . strict_coordinate_comparison = True [EOL] assert max ( b3 , c2 ) == c2 [EOL] [EOL] rm . strict_coordinate_comparison = False [EOL] assert max ( b3 , c2 ) == b3 [EOL] [EOL] def test_equivalent_coordinate_value_order ( self , rm_full ) : [EOL] rm = rm_full [EOL] [EOL] rm . strict_coordinate_comparison = True [EOL] a3 = rm . get_coordinate ( [string] ) [EOL] b2 = rm . get_coordinate ( [string] ) [EOL] c1 = rm . get_coordinate ( [string] ) [EOL] [EOL] assert a3 < b2 < c1 [EOL] [EOL] rm . strict_coordinate_comparison = False [EOL] [EOL] assert a3 == b2 == c1 [EOL] [EOL] def test_equivalent_category_value ( self , rm_with_categories ) : [EOL] rm = rm_with_categories [EOL] low , med , hig = rm . categories [EOL] a , b , c = rm . axes [ [string] ] . points [EOL] one , two , three = rm . axes [ [string] ] . points [EOL] [EOL] [comment] [EOL] c3 = rm . map_coordinate ( low , ( c , three ) ) [EOL] b2 = rm . map_coordinate ( med , ( b , two ) ) [EOL] a1 = rm . map_coordinate ( hig , ( a , one ) ) [EOL] [EOL] [comment] [EOL] assert c3 < b2 < a1 [EOL] [EOL] def test_coordinate_code ( self , rm_with_categories ) : [EOL] [EOL] rm = rm_with_categories [EOL] a , * _ = rm . axes [ [string] ] . points [EOL] one , * _ = rm . axes [ [string] ] . points [EOL] [EOL] a1 = Coordinate ( ( a , one ) ) [EOL] a1_reverse = Coordinate ( ( one , a ) ) [EOL] [EOL] assert str ( a1 ) == [string] [EOL] assert str ( a1 ) != [string] [EOL] assert str ( a1_reverse ) == [string] [EOL] assert str ( a1_reverse ) != [string] [EOL] [EOL] def test_max_coordinate ( self , rm_full ) : [EOL] rm = rm_full [EOL] max_coordinate = rm . coordinates [ - [number] ] [EOL] [EOL] assert max ( rm . coordinates ) == max_coordinate [EOL] [comment] [EOL] [comment] [EOL] [EOL] def test_add_wrong_coordinate ( self , rm_with_categories ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $riskmatrix.matrix.RiskMatrix$ 0 0 0 $builtins.str$ 0 0 0 0 $riskmatrix.matrix.RiskMatrix$ 0 $builtins.str$ 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 $riskmatrix.matrix.RiskMatrix$ 0 $builtins.str$ 0 $builtins.str$ 0 0 $riskmatrix.matrix.RiskMatrix$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $riskmatrix.matrix.RiskMatrix$ 0 $builtins.str$ 0 $builtins.str$ 0 0 $riskmatrix.matrix.RiskMatrix$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Generator[typing.Any,None,None]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Generator[typing.Any,None,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Generator[typing.Any,None,None]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Generator[typing.Any,None,None]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $riskmatrix.matrix.RiskMatrix$ 0 0 0 0 0 0 0 0 $riskmatrix.matrix.RiskMatrix$ 0 0 0 0 0 0 0 0 0 $riskmatrix.matrix.RiskMatrix$ 0 0 0 0 0 0 0 0 0 $riskmatrix.matrix.RiskMatrix$ 0 0 0 0 0 0 0 0 0 $riskmatrix.matrix.RiskMatrix$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $riskmatrix.coordinate.Coordinate$ 0 0 0 0 0 0 0 0 0 0 $riskmatrix.coordinate.Coordinate$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $riskmatrix.coordinate.Coordinate$ 0 0 0 0 0 0 0 $riskmatrix.coordinate.Coordinate$ 0 0 0 0 0 0 0 $riskmatrix.coordinate.Coordinate$ 0 0 0 0 0 0 0 $riskmatrix.coordinate.Coordinate$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0