	0
[comment] [EOL] [EOL] [comment] [EOL] from typing import List , Any , Union , Optional , Dict [EOL] import argparse [EOL] import builtins [EOL] import typing [EOL] import asyncio [EOL] import hubster [EOL] import aiohttp [EOL] import string [EOL] import django [EOL] import os [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] django . setup ( ) [EOL] [comment] [EOL] [EOL] import argparse [EOL] import asyncio [EOL] import io [EOL] import json [EOL] from pathlib import Path [EOL] from string import Template [EOL] [EOL] import aiohttp [EOL] from furl import furl [EOL] from typing import Any , Dict , List , Optional [EOL] [EOL] [EOL] from hubster . models import GithubUser , GithubRepo , License [EOL] from hubster . serializers import ( GithubRepoSerializerWithId , GithubUserSerializer , LicenseSerializer , ) [EOL] [EOL] USER_URL_BASE = [string] [EOL] USER_REPO_TEMPLATE = Template ( [string] ) [EOL] [EOL] [EOL] def build_license_dict ( ) : [EOL] licenses = License . objects . all ( ) [EOL] if len ( licenses ) != [number] : [EOL] licenses . delete ( ) [EOL] with Path ( [string] ) . open ( ) as infile : [EOL] license_list = json . loads ( infile . read ( ) ) [EOL] for license in license_list : [EOL] serializer = LicenseSerializer ( data = license ) [EOL] serializer . is_valid ( ) [EOL] serializer . save ( ) [EOL] [EOL] licenses = License . objects . values ( [string] , [string] ) [EOL] return { license [ [string] ] : license [ [string] ] for license in licenses } [EOL] [EOL] [EOL] def flatten ( t ) : [EOL] return [ item for sublist in t for item in sublist ] [EOL] [EOL] [EOL] async def save_repo ( license_dict , user_id , repo_json = { } ) : [EOL] license = repo_json . get ( [string] ) [EOL] license_key = license . get ( [string] , [string] ) if license else [string] [EOL] license_id = license_dict . get ( license_key , [number] ) [comment] [EOL] repo_json [ [string] ] = user_id [EOL] repo_json [ [string] ] = license_id [EOL] github_repo = GithubRepoSerializerWithId ( data = repo_json , partial = True ) [EOL] if github_repo . is_valid ( ) : [EOL] repo = github_repo . save ( ) [EOL] else : [EOL] error_dict = { key : repo_json [ key ] for key in github_repo . errors } [EOL] print ( [string] ) [EOL] print ( f" [string] { github_repo . errors }" ) [EOL] print ( f" [string] { error_dict }" ) [EOL] print ( [string] ) [EOL] [EOL] [EOL] async def scrapeUserRepos ( session , license_dict , user_json ) : [EOL] github_user = GithubUserSerializer ( data = user_json ) [EOL] tasks = [ ] [EOL] if github_user . is_valid ( ) : [EOL] user = github_user . save ( ) [EOL] repos_url = USER_REPO_TEMPLATE . substitute ( { [string] : user . login } ) [EOL] while True : [EOL] async with session . get ( repos_url ) as resp : [EOL] if not resp . links . get ( [string] ) or not resp . links . get ( [string] ) . get ( [string] ) : [EOL] break [EOL] repos = json . loads ( await resp . text ( ) ) [EOL] tasks . extend ( [ asyncio . create_task ( save_repo ( license_dict , user . id , repo ) ) for repo in repos ] ) [EOL] repos_url = resp . links . get ( [string] ) . get ( [string] ) [EOL] else : [EOL] print ( [string] ) [EOL] print ( f" [string] { github_user . errors }" ) [EOL] print ( f" [string] { github_user . validated_data }" ) [EOL] print ( [string] ) [EOL] [EOL] return tasks [EOL] [EOL] [EOL] async def scrapeUsers ( session , license_dict , quantity , start_id = None , ) : [EOL] if not start_id : [EOL] max_id = GithubUser . objects . values ( [string] ) . order_by ( [string] ) . first ( ) [EOL] start_id = max_id . get ( [string] ) if max_id else None [EOL] [EOL] query_args = { [string] : start_id } if start_id else { } [EOL] [EOL] users_url = furl ( USER_URL_BASE ) . add ( query_args ) . url [EOL] async with session . get ( users_url ) as resp : [EOL] users = json . loads ( await resp . text ( ) ) [EOL] return flatten ( [ await scrapeUserRepos ( session , license_dict , user ) for user in users [ : quantity ] ] ) [EOL] [EOL] [EOL] async def scrape ( session , quantity , start_id = None ) : [EOL] license_dict = build_license_dict ( ) [EOL] await asyncio . gather ( scrapeUsers ( session , license_dict , quantity , start_id ) ) [EOL] [EOL] [EOL] async def main ( loop ) : [EOL] parser = argparse . ArgumentParser ( description = [string] ) [EOL] [EOL] parser . add_argument ( [string] , [string] , action = [string] , dest = [string] , default = [number] , type = int , help = [string] , ) [EOL] parser . add_argument ( [string] , [string] , action = [string] , dest = [string] , default = [number] , type = int , help = [string] , ) [EOL] parser . add_argument ( [string] , [string] , action = [string] , dest = [string] , type = int , help = [string] , ) [EOL] [EOL] parsed = parser . parse_args ( ) [EOL] [EOL] conn = aiohttp . TCPConnector ( limit = parsed . concurrency ) [EOL] auth = aiohttp . BasicAuth ( login = os . environ . get ( [string] ) , password = os . environ . get ( [string] ) ) [EOL] async with aiohttp . ClientSession ( connector = conn , loop = loop , auth = auth ) as session : [EOL] await scrape ( session = session , quantity = parsed . quantity , start_id = parsed . start_id ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] loop = asyncio . get_event_loop ( ) [EOL] loop . run_until_complete ( main ( loop ) ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $string.Template$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $string.Template$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 $asyncio.events.AbstractEventLoop$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 $asyncio.events.AbstractEventLoop$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 0 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 0 0 0
from typing import List , Any , Type , Dict , Set [EOL] import typing [EOL] import hubster [EOL] from rest_framework import viewsets [EOL] [EOL] from hubster . models import GithubRepo , GithubUser [EOL] from hubster . serializers import GithubRepoSerializer , GithubUserSerializer [EOL] [EOL] [EOL] class QuerysetFilterMixin : [EOL] [docstring] [EOL] [EOL] def get_queryset ( self ) : [EOL] queryset = super ( ) . get_queryset ( ) [EOL] Model = self . model [EOL] fields = set ( [ f . name for f in Model . _meta . get_fields ( ) ] ) [EOL] [EOL] filters = { key : value for key , value in self . request . query_params . items ( ) if any ( key . startswith ( field ) for field in fields ) } [EOL] [EOL] for key , value in filters . items ( ) : [EOL] if value is not None : [EOL] queryset = queryset . filter ( ** { key : value } ) [EOL] return queryset [EOL] [EOL] [EOL] class QuerysetOrderByMixin : [EOL] [docstring] [EOL] [EOL] def get_queryset ( self ) : [EOL] queryset = super ( ) . get_queryset ( ) [EOL] Model = self . model [EOL] fields = set ( [ f . name for f in Model . _meta . get_fields ( ) ] ) [EOL] [EOL] order_by_fields = self . request . query_params . get ( [string] , [ ] ) [EOL] if type ( order_by_fields ) != list : [EOL] order_by_fields = [ order_by_fields ] [EOL] [EOL] queryset = self . queryset [EOL] if order_by_fields : [EOL] queryset = queryset . order_by ( * order_by_fields ) [EOL] return queryset [EOL] [EOL] [EOL] class GithubUserViewSet ( QuerysetFilterMixin , QuerysetOrderByMixin , viewsets . ModelViewSet ) : [EOL] [docstring] [EOL] [EOL] model = GithubUser [EOL] serializer_class = GithubUserSerializer [EOL] queryset = GithubUser . objects . all ( ) [EOL] [EOL] [EOL] class GithubRepoViewSet ( QuerysetFilterMixin , QuerysetOrderByMixin , viewsets . ModelViewSet ) : [EOL] [docstring] [EOL] [EOL] model = GithubRepo [EOL] queryset = GithubRepo . objects . all ( ) [EOL] serializer_class = GithubRepoSerializer [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[hubster.serializers.GithubRepoSerializer]$ 0 0 0 0
from typing import Any [EOL] import typing [EOL] import hubster [EOL] import json [EOL] [EOL] from django . test import TestCase [EOL] from rest_framework . parsers import JSONParser [EOL] from rest_framework . test import APIRequestFactory [EOL] [EOL] from hubster . models import GithubRepo , GithubUser , License [EOL] from hubster . serializers import GithubUserSerializer , GithubRepoSerializerWithId [EOL] from scraper import build_license_dict [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] repo_json = [string] [EOL] [EOL] [EOL] class GithubRepoDeserializerWithIdTestCase ( TestCase ) : [EOL] def setUp ( self ) : [EOL] build_license_dict ( ) [EOL] GithubUser . objects . create ( id = [number] ) [EOL] [EOL] def test_deserializer ( self ) : [EOL] repo_dict = json . loads ( repo_json ) [EOL] serializer = GithubRepoSerializerWithId ( data = repo_dict ) [EOL] repo = None [EOL] if serializer . is_valid ( ) : [EOL] repo = serializer . save ( ) [EOL] else : [EOL] print ( serializer . errors ) [EOL] self . assertIsNotNone ( repo ) [EOL] self . assertEqual ( repo . id , [number] ) [EOL] [EOL] def tearDown ( self ) : [EOL] License . objects . all ( ) . delete ( ) [EOL] GithubRepo . objects . get ( id = [number] ) . delete ( ) [EOL] GithubUser . objects . get ( id = [number] ) . delete ( ) [EOL] [EOL] [EOL] class GithubRepoSerializerWithIdTestCase ( TestCase ) : [EOL] def setUp ( self ) : [EOL] build_license_dict ( ) [EOL] GithubUser . objects . create ( id = [number] ) [EOL] repo_dict = json . loads ( repo_json ) [EOL] serializer = GithubRepoSerializerWithId ( data = repo_dict ) [EOL] repo = None [EOL] if serializer . is_valid ( ) : [EOL] repo = serializer . save ( ) [EOL] [EOL] def test_serializer ( self ) : [EOL] repo_dict = json . loads ( repo_json ) [EOL] repo = GithubRepo . objects . get ( id = [number] ) [EOL] serializer = GithubRepoSerializerWithId ( repo ) [EOL] self . assertEqual ( serializer . data , repo_dict ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 $hubster.serializers.GithubRepoSerializerWithId$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 $hubster.serializers.GithubRepoSerializerWithId$ 0 0 0 0 0 0 $typing.Any$ 0 $hubster.serializers.GithubRepoSerializerWithId$ 0 0 0 0 0 0 0 0 0 0 $hubster.serializers.GithubRepoSerializerWithId$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 $hubster.serializers.GithubRepoSerializerWithId$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 $hubster.serializers.GithubRepoSerializerWithId$ 0 0 0 0 0 0 $typing.Any$ 0 $hubster.serializers.GithubRepoSerializerWithId$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $hubster.serializers.GithubRepoSerializerWithId$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $hubster.serializers.GithubRepoSerializerWithId$ 0 0 0 $typing.Any$ 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class HubsterConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Type [EOL] import typing [EOL] import hubster [EOL] from rest_framework import serializers [EOL] [EOL] from hubster . models import GithubUser , GithubRepo , License [EOL] [EOL] [EOL] class GithubUserSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = GithubUser [EOL] fields = [string] [EOL] [EOL] [EOL] class LicenseSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = License [EOL] fields = [string] [EOL] [EOL] [EOL] class GithubRepoSerializer ( serializers . ModelSerializer ) : [EOL] [docstring] [EOL] [EOL] license = LicenseSerializer ( ) [EOL] owner = GithubUserSerializer ( ) [EOL] [EOL] class Meta : [EOL] model = GithubRepo [EOL] fields = [string] [EOL] depth = [number] [EOL] [EOL] [EOL] class GithubRepoSerializerWithId ( GithubRepoSerializer ) : [EOL] [docstring] [EOL] [EOL] license = serializers . PrimaryKeyRelatedField ( queryset = License . objects . all ( ) ) [EOL] owner = serializers . PrimaryKeyRelatedField ( queryset = GithubUser . objects . all ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RenameModel ( old_name = [string] , new_name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] initial = True [EOL] [EOL] dependencies = [ ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . IntegerField ( primary_key = True , serialize = False ) ) , ( [string] , models . URLField ( ) ) , ( [string] , models . TextField ( ) ) , ( [string] , models . URLField ( ) ) , ( [string] , models . CharField ( max_length = [number] ) ) , ( [string] , models . DateField ( ) ) , ( [string] , models . EmailField ( max_length = [number] ) ) , ( [string] , models . URLField ( ) ) , ( [string] , models . IntegerField ( ) ) , ( [string] , models . URLField ( ) ) , ( [string] , models . IntegerField ( ) ) , ( [string] , models . URLField ( ) ) , ( [string] , models . URLField ( ) ) , ( [string] , models . CharField ( max_length = [number] ) ) , ( [string] , models . BooleanField ( default = False ) ) , ( [string] , models . URLField ( ) ) , ( [string] , models . CharField ( max_length = [number] ) ) , ( [string] , models . CharField ( max_length = [number] ) ) , ( [string] , models . CharField ( max_length = [number] ) ) , ( [string] , models . SlugField ( ) ) , ( [string] , models . URLField ( ) ) , ( [string] , models . IntegerField ( ) ) , ( [string] , models . IntegerField ( ) ) , ( [string] , models . URLField ( ) ) , ( [string] , models . URLField ( ) ) , ( [string] , models . BooleanField ( default = False ) ) , ( [string] , models . URLField ( ) ) , ( [string] , models . URLField ( ) ) , ( [string] , models . CharField ( max_length = [number] ) ) , ( [string] , models . DateField ( ) ) , ( [string] , models . URLField ( ) ) , ] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0