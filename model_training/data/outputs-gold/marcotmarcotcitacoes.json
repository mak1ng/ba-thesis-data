from typing import List , Any , Dict , Counter , Tuple [EOL] import typing [EOL] import builtins [EOL] import spacy [EOL] import collections [EOL] from collections import Counter [EOL] from operator import itemgetter [EOL] import math [EOL] import os [EOL] import pickle [EOL] import re [EOL] import sys [EOL] from typing import Any , Dict , Optional , List , Tuple [EOL] import typing [EOL] [EOL] import spacy [comment] [EOL] from spacy import attrs , symbols [EOL] from spacy . tokens import Doc , Span , Token [comment] [EOL] [EOL] Span . set_extension ( [string] , default = [ ] ) [EOL] Span . set_extension ( [string] , default = [ ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] EXPAND_DEPS = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [comment] [EOL] ALLOWED_ROOT_POS = [ [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] ALLOWED_ANSWER_POS = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] ALLOWED_ANSWER_DEPS = [ [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] def main ( text , wordfreq , source ) : [EOL] [comment] [EOL] with open ( text ) as fp : [EOL] txt = fp . read ( ) [EOL] [EOL] nlp = spacy . load ( [string] ) [EOL] doc = nlp ( txt , disable = [ [string] ] ) [EOL] [EOL] wf = { } [EOL] with open ( wordfreq ) as fp : [EOL] for t in fp : [EOL] if t : [EOL] word , freq = t . split ( ) [EOL] wf [ word ] = int ( freq ) [EOL] for norm , freq in doc . count_by ( attrs . NORM ) . items ( ) : [EOL] wf [ doc . vocab [ norm ] . norm_ ] = int ( freq ) [EOL] [EOL] def good_sentence ( sent ) : [EOL] tokens = [ t for t in sent if t . text . strip ( ) ] [EOL] return ( tokens [ [number] ] . is_title [EOL] and sent . root . pos_ in ALLOWED_ROOT_POS [EOL] and not tokens [ [number] ] . is_punct [EOL] and tokens [ - [number] ] . text in [string] [EOL] and len ( sent . text ) > [number] ) [EOL] [EOL] [comment] [EOL] sents = [ sent for sent in doc . sents if good_sentence ( sent ) ] [EOL] [EOL] annotate_answers ( sents , wf ) [EOL] [EOL] for sent in sents : [EOL] answer , score = max ( sent . _ . scored_answers , key = itemgetter ( [number] ) , default = ( [string] , - [number] ) ) [EOL] [EOL] if score >= [number] : [EOL] sentence , answer = post_process ( sent , answer ) [EOL] print ( [string] . format ( sentence , source , answer ) ) [EOL] [EOL] [EOL] def annotate_answers ( sents , wf ) : [EOL] for sent in sents : [EOL] [comment] [EOL] answers = [ token for token in sent if token . dep_ in ALLOWED_ANSWER_DEPS and token . pos_ in ALLOWED_ANSWER_POS ] [EOL] sent . _ . answers = [ expand_answers ( answer ) for answer in answers ] [EOL] sent . _ . scored_answers = score_answers ( sent , wf ) [EOL] [EOL] [EOL] def expand_answers ( token ) : [EOL] expanded = [ token ] [EOL] [EOL] for left in reversed ( list ( token . lefts ) ) : [EOL] if left . i == ( expanded [ [number] ] . i - [number] ) and left . dep_ in EXPAND_DEPS : [EOL] expanded . insert ( [number] , left ) [EOL] else : [EOL] break [EOL] for right in token . rights : [EOL] if right . i == ( expanded [ - [number] ] . i + [number] ) and right . dep_ in EXPAND_DEPS : [EOL] expanded . append ( right ) [EOL] else : [EOL] break [EOL] [EOL] def fix_o_senhor_seu_deus ( expanded ) : [EOL] pre = [ [string] ] [EOL] pos = [ [string] , [string] , [string] ] [EOL] answer = [string] . join ( t . text for t in expanded ) . lower ( ) [EOL] if answer in pos : [EOL] nbors = [ expanded [ [number] ] . nbor ( - [number] ) , expanded [ [number] ] . nbor ( - [number] ) ] [EOL] if [string] . join ( [ w . text . lower ( ) for w in nbors ] ) in pre : [EOL] expanded = nbors + expanded [EOL] if answer in pre : [EOL] nbors = [ expanded [ - [number] ] . nbor ( ) , expanded [ - [number] ] . nbor ( [number] ) ] [EOL] if [string] . join ( [ w . text . lower ( ) for w in nbors ] ) in pos : [EOL] expanded = expanded + nbors [EOL] return expanded [EOL] [EOL] def fix_hifens ( expanded ) : [EOL] try : [EOL] while expanded [ [number] ] . nbor ( - [number] ) . text == [string] : [EOL] nbors = [ expanded [ [number] ] . nbor ( - [number] ) , expanded [ [number] ] . nbor ( - [number] ) ] [EOL] if ( expanded [ [number] ] . sent == nbors [ [number] ] . sent [EOL] and expanded [ [number] ] . sent == nbors [ [number] ] . sent ) : [EOL] expanded = nbors + expanded [EOL] else : [EOL] break [EOL] except IndexError : [EOL] pass [EOL] [EOL] try : [EOL] while expanded [ - [number] ] . nbor ( ) . text == [string] : [EOL] nbors = [ expanded [ - [number] ] . nbor ( ) , expanded [ - [number] ] . nbor ( [number] ) ] [EOL] if ( expanded [ - [number] ] . sent == nbors [ [number] ] . sent [EOL] and expanded [ - [number] ] . sent == nbors [ [number] ] . sent ) : [EOL] expanded = expanded + nbors [EOL] else : [EOL] break [EOL] except IndexError : [EOL] pass [EOL] [EOL] return expanded [EOL] [EOL] def fix_contractions ( expanded ) : [EOL] try : [EOL] prev = expanded [ [number] ] . nbor ( - [number] ) [EOL] except IndexError : [EOL] return expanded [EOL] [EOL] if expanded [ [number] ] . sent == prev . sent and not prev . whitespace_ and prev . text in [string] : [EOL] expanded = [ prev ] + expanded [EOL] [EOL] return expanded [EOL] [EOL] expanded = fix_o_senhor_seu_deus ( expanded ) [EOL] expanded = fix_hifens ( expanded ) [EOL] expanded = fix_contractions ( expanded ) [EOL] [EOL] return expanded [EOL] [EOL] [EOL] def score_answers ( sent , wf ) : [EOL] tf = Counter ( t . norm for t in sent ) [EOL] [EOL] def good_answer ( answer ) : [EOL] text = [string] . join ( a . text for a in answer ) [EOL] return bool ( answer and not answer [ [number] ] . is_sent_start and len ( text ) > [number] ) [EOL] [EOL] def score ( tokens ) : [EOL] if not good_answer ( tokens ) : [EOL] return - [number] [EOL] [comment] [EOL] tokens = [ t for t in tokens if len ( t . norm_ ) > [number] ] [EOL] return sum ( math . log ( wf . get ( t . norm_ , [number] ) + [number] ) / tf . get ( t . norm , [number] ) for t in tokens ) [EOL] [EOL] return [ ( answer , score ( answer ) ) for answer in sent . _ . answers ] [EOL] [EOL] [EOL] def post_process ( sent , answer ) : [EOL] marker = [string] * [number] [EOL] [EOL] start = answer [ [number] ] . idx - sent . start_char [EOL] end = ( answer [ - [number] ] . idx - sent . start_char ) + len ( answer [ - [number] ] . text ) [EOL] new_sent = sent . text [ : start ] + marker + sent . text [ end : ] [EOL] [EOL] new_answer = sent . text [ start : end ] [EOL] [EOL] [comment] [EOL] new_sent = re . sub ( [string] , [string] , new_sent ) . strip ( ) [EOL] [EOL] return new_sent , new_answer [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( sys . argv [ [number] ] , sys . argv [ [number] ] , sys . argv [ [number] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[spacy.tokens.Token,builtins.float]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0