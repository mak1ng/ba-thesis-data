	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from . is_object_owner import IsObjectOwner [EOL]	0 0 0 0 0 0
from rest_framework import permissions [EOL] [EOL] [EOL] class IsObjectOwner ( permissions . BasePermission ) : [EOL] [docstring] [EOL] [EOL] def has_object_permission ( self , request , view , obj ) : [EOL] if request . method in permissions . SAFE_METHODS : [EOL] return True [EOL] if request . user == obj . user : [EOL] return True [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class QaConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from django . contrib import admin [EOL] [EOL] from . models import Course [EOL] [EOL] [comment] [EOL] admin . site . register ( Course ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] from django . urls import path , include [EOL] [EOL] from rest_framework import routers [EOL] [EOL] from qa import views [EOL] [EOL] router = routers . DefaultRouter ( ) [EOL] router . register ( [string] , views . QuestionViewSet , basename = [string] ) [EOL] router . register ( [string] , views . AnswerViewSet , basename = [string] ) [EOL] [EOL] urlpatterns = [ path ( [string] , include ( router . urls ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
	0
	0
	0
from django . test import TestCase [EOL] [EOL] from qa . factories import CourseFactory [EOL] [EOL] [EOL] class CourseTestSuite ( TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . course = CourseFactory ( ) [EOL] [EOL] def test_str_representation ( self ) : [EOL] self . assertEqual ( self . course . code , str ( self . course ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . test import TestCase [EOL] [EOL] from qa . factories import QuestionFactory [EOL] [EOL] [EOL] class QuestionTestSuite ( TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . question = QuestionFactory ( ) [EOL] [EOL] def test_str_representation ( self ) : [EOL] self . assertEqual ( self . question . title , str ( self . question ) ) [EOL] [EOL] def test_votes_representation ( self ) : [EOL] votes = self . question . up_votes - self . question . down_votes [EOL] self . assertEqual ( votes , self . question . votes ) [EOL] [EOL] def test_up_vote_on_question ( self ) : [EOL] old_votes = self . question . up_votes [EOL] self . question . up_vote ( ) [EOL] [EOL] self . assertEqual ( old_votes + [number] , self . question . up_votes ) [EOL] [EOL] def test_down_vote_on_question ( self ) : [EOL] old_votes = self . question . down_votes [EOL] self . question . down_vote ( ) [EOL] [EOL] self . assertEqual ( old_votes + [number] , self . question . down_votes ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] from rest_framework . test import APITestCase , APIClient [EOL] from rest_framework . reverse import reverse [EOL] [EOL] from qa . factories import AnswerFactory [EOL] from qa . models import Answer [EOL] [EOL] [EOL] class BaseAnswerTestSuite ( APITestCase ) : [EOL] [docstring] [EOL] [EOL] def setUp ( self ) : [EOL] self . answers = AnswerFactory . create_batch ( [number] ) [EOL] [EOL] self . list_path = reverse ( [string] ) [EOL] self . detail_path = reverse ( [string] , kwargs = { [string] : self . answers [ [number] ] . pk } ) [EOL] [EOL] self . client . force_login ( self . answers [ [number] ] . answerer . user ) [EOL] [EOL] [EOL] class AnswerCreateViewTestSuite ( BaseAnswerTestSuite ) : [EOL] [EOL] def setUp ( self ) : [EOL] super ( ) . setUp ( ) [EOL] self . create_data = { [string] : [string] , [string] : [number] , } [EOL] [EOL] def test_post_answer_missing_text ( self ) : [EOL] del self . create_data [ [string] ] [EOL] response = self . client . post ( path = self . list_path , data = self . create_data ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] [EOL] def test_post_answer_missing_question ( self ) : [EOL] del self . create_data [ [string] ] [EOL] response = self . client . post ( path = self . list_path , data = self . create_data ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] [EOL] def test_post_answer_to_non_existing_question ( self ) : [EOL] self . create_data [ [string] ] = [number] [EOL] response = self . client . post ( path = self . list_path , data = self . create_data ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] [EOL] def test_post_answer_successfully ( self ) : [EOL] answerer = self . answers [ [number] ] . answerer [EOL] response = self . client . post ( path = self . list_path , data = self . create_data ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] self . assertEqual ( len ( self . answers ) + [number] , Answer . objects . count ( ) ) [EOL] self . assertEqual ( answerer . pk , response . data [ [string] ] ) [EOL] [EOL] [EOL] class AnswerUpdateViewTestSuite ( BaseAnswerTestSuite ) : [EOL] [EOL] def setUp ( self ) : [EOL] super ( ) . setUp ( ) [EOL] self . update_data = { [string] : [string] , [string] : [number] } [EOL] [EOL] def test_update_answerer ( self ) : [EOL] update_data = { [string] : [number] } [EOL] response = self . client . patch ( path = self . detail_path , data = update_data ) [EOL] self . answers [ [number] ] . refresh_from_db ( ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] self . assertNotEqual ( update_data [ [string] ] , self . answers [ [number] ] . answerer . pk ) [EOL] [EOL] def test_update_not_owner ( self ) : [EOL] client = APIClient ( ) [EOL] client . force_login ( self . answers [ [number] ] . answerer . user ) [EOL] [EOL] response = client . patch ( path = self . detail_path , data = self . update_data ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] [EOL] def test_update_while_owner ( self ) : [EOL] response = self . client . patch ( path = self . detail_path , data = self . update_data ) [EOL] self . answers [ [number] ] . refresh_from_db ( ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] self . assertEqual ( self . update_data [ [string] ] , self . answers [ [number] ] . text ) [EOL] self . assertEqual ( self . update_data [ [string] ] , self . answers [ [number] ] . question . pk ) [EOL] [EOL] [EOL] class AnswerVotingViewsTestSuite ( BaseAnswerTestSuite ) : [EOL] [EOL] def setUp ( self ) : [EOL] super ( ) . setUp ( ) [EOL] self . up_vote_path = reverse ( [string] , kwargs = { [string] : self . answers [ [number] ] . pk } ) [EOL] self . down_vote_path = reverse ( [string] , kwargs = { [string] : self . answers [ [number] ] . pk } ) [EOL] [EOL] self . client . logout ( ) [EOL] self . client . force_login ( self . answers [ [number] ] . answerer . user ) [EOL] [EOL] def test_up_vote_non_existing_answer ( self ) : [EOL] non_existing_path = reverse ( [string] , kwargs = { [string] : [number] } ) [EOL] response = self . client . get ( non_existing_path ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] [EOL] def test_up_vote_answer ( self ) : [EOL] old_up_votes_count = self . answers [ [number] ] . up_votes [EOL] response = self . client . get ( self . up_vote_path ) [EOL] self . answers [ [number] ] . refresh_from_db ( ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] self . assertEqual ( old_up_votes_count + [number] , self . answers [ [number] ] . up_votes ) [EOL] [EOL] def test_down_vote_non_existing_answer ( self ) : [EOL] non_existing_path = reverse ( [string] , kwargs = { [string] : [number] } ) [EOL] response = self . client . get ( non_existing_path ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] [EOL] def test_down_vote_answer ( self ) : [EOL] old_down_votes_count = self . answers [ [number] ] . down_votes [EOL] response = self . client . get ( self . down_vote_path ) [EOL] self . answers [ [number] ] . refresh_from_db ( ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] self . assertEqual ( old_down_votes_count + [number] , self . answers [ [number] ] . down_votes ) [EOL] [EOL] def test_increase_answer_answerer_reputation_on_a_up_vote ( self ) : [EOL] reputation_before_vote = self . answers [ [number] ] . answerer . reputation [EOL] response = self . client . get ( self . up_vote_path ) [EOL] self . answers [ [number] ] . answerer . refresh_from_db ( ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] self . assertEqual ( reputation_before_vote + [number] , self . answers [ [number] ] . answerer . reputation ) [EOL] [EOL] def test_decrease_answer_answerer_reputation_on_a_down_vote ( self ) : [EOL] reputation_before_vote = self . answers [ [number] ] . answerer . reputation [EOL] response = self . client . get ( self . down_vote_path ) [EOL] self . answers [ [number] ] . answerer . refresh_from_db ( ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] self . assertEqual ( reputation_before_vote - [number] , self . answers [ [number] ] . answerer . reputation ) [EOL] [EOL] def test_down_voter_loses_reputation ( self ) : [EOL] reputation_before_voting = self . answers [ [number] ] . answerer . reputation [EOL] response = self . client . get ( self . down_vote_path ) [EOL] self . answers [ [number] ] . answerer . refresh_from_db ( ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] self . assertEqual ( reputation_before_voting - [number] , self . answers [ [number] ] . answerer . reputation ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from rest_framework import permissions [EOL] [EOL] [EOL] class IsAnswerAnswerer ( permissions . BasePermission ) : [EOL] [docstring] [EOL] [EOL] def has_object_permission ( self , request , view , answer ) : [EOL] if request . method in permissions . SAFE_METHODS : [EOL] return True [EOL] if request . user == answer . answerer . user : [EOL] return True [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from rest_framework import permissions [EOL] [EOL] [EOL] class IsQuestionAsker ( permissions . BasePermission ) : [EOL] [docstring] [EOL] [EOL] def has_object_permission ( self , request , view , question ) : [EOL] if request . method in permissions . SAFE_METHODS : [EOL] return True [EOL] if request . user == question . asker . user : [EOL] return True [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . is_question_asker import IsQuestionAsker [EOL] from . is_answer_answerer import IsAnswerAnswerer [EOL]	0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Tuple , Type [EOL] import qa [EOL] import typing [EOL] from rest_framework import serializers [EOL] [EOL] from . . models import Answer [EOL] [EOL] [EOL] class AnswerSerializer ( serializers . ModelSerializer ) : [EOL] [docstring] [EOL] [EOL] class Meta : [EOL] model = Answer [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] read_only_fields = ( [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[qa.models.answer.Answer]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0
from . question_serializer import QuestionSerializer [EOL] from . question_serializer import ListQuestionSerializer [EOL] from . answer_serializer import AnswerSerializer [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import qa [EOL] import typing [EOL] import factory [EOL] [EOL] from . . models import Course [EOL] [EOL] [EOL] class CourseFactory ( factory . DjangoModelFactory ) : [EOL] [docstring] [EOL] class Meta : [EOL] model = Course [EOL] [EOL] name = factory . Faker ( [string] ) [EOL] code = factory . Faker ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[qa.models.course.Course]$ 0 0 0 0 $typing.Type[qa.factories.course_factory.CourseFactory]$ 0 0 0 0 0 0 0 0 $typing.Type[qa.factories.course_factory.CourseFactory]$ 0 0 0 0 0 0 0 0
from . course_factory import CourseFactory [EOL] from . question_factory import QuestionFactory [EOL] from . answer_factory import AnswerFactory [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any , Type [EOL] import qa [EOL] import typing [EOL] from rest_framework import viewsets [EOL] from rest_framework import mixins [EOL] from rest_framework . decorators import action [EOL] from rest_framework . response import Response [EOL] [EOL] from django . shortcuts import get_object_or_404 [EOL] [EOL] from users . models import Gucian [EOL] [EOL] from . . serializers import AnswerSerializer [EOL] from . . models import Answer [EOL] from . . permissions import IsAnswerAnswerer [EOL] [EOL] [EOL] class AnswerViewSet ( viewsets . GenericViewSet , mixins . CreateModelMixin , mixins . UpdateModelMixin ) : [EOL] [docstring] [EOL] queryset = Answer . objects . all ( ) [EOL] serializer_class = AnswerSerializer [EOL] permission_classes = ( IsAnswerAnswerer , ) [EOL] [EOL] def perform_create ( self , serializer ) : [EOL] answerer = Gucian . objects . get ( user = self . request . user ) [EOL] serializer . save ( answerer = answerer ) [EOL] [EOL] @ action ( methods = [ [string] ] , detail = True , url_path = [string] ) def up_vote ( self , request , pk = None ) : [EOL] [docstring] [EOL] answer = get_object_or_404 ( klass = Answer , pk = pk ) [EOL] answer . up_vote ( ) [EOL] answer . answerer . increase_reputation ( amount = [number] ) [EOL] [EOL] return Response ( [string] ) [EOL] [EOL] @ action ( methods = [ [string] ] , detail = True , url_path = [string] ) def down_vote ( self , request , pk = None ) : [EOL] [docstring] [EOL] answer = get_object_or_404 ( klass = Answer , pk = pk ) [EOL] answer . answerer . decrease_reputation ( amount = [number] ) [EOL] answer . down_vote ( ) [EOL] [EOL] down_voter = Gucian . objects . get ( user = request . user ) [EOL] down_voter . decrease_reputation ( amount = [number] ) [EOL] [EOL] return Response ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[qa.views.answer_viewset.AnswerViewSet]$ 0 0 0 0 0 0 0 0 0 $typing.Type[qa.serializers.answer_serializer.AnswerSerializer]$ 0 0 0 $typing.Tuple[typing.Type[qa.permissions.is_answer_answerer.IsAnswerAnswerer]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . question_viewset import QuestionViewSet [EOL] from . answer_viewset import AnswerViewSet [EOL]	0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import qa [EOL] import typing [EOL] from django . db import models [EOL] [EOL] from . . models import Question [EOL] from users . models import Gucian [EOL] [EOL] [EOL] class Answer ( models . Model ) : [EOL] [docstring] [EOL] question = models . ForeignKey ( Question , related_name = [string] , on_delete = models . CASCADE ) [EOL] answerer = models . ForeignKey ( Gucian , related_name = [string] , null = True , on_delete = models . SET_NULL ) [EOL] [EOL] created_at = models . DateTimeField ( auto_now_add = True ) [EOL] text = models . CharField ( max_length = [number] ) [EOL] up_votes = models . IntegerField ( default = [number] ) [EOL] down_votes = models . IntegerField ( default = [number] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . text [EOL] [EOL] @ property def votes ( self ) : [EOL] return self . up_votes - self . down_votes [EOL] [EOL] def up_vote ( self ) : [EOL] self . up_votes += [number] [EOL] self . save ( ) [EOL] [EOL] def down_vote ( self ) : [EOL] self . down_votes += [number] [EOL] self . save ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[qa.models.answer.Answer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[qa.models.answer.Answer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[qa.models.answer.Answer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[qa.models.answer.Answer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[qa.models.answer.Answer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[qa.models.answer.Answer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . course import Course [EOL] from . question import Question [EOL] from . answer import Answer [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import qa [EOL] import typing [EOL] from django . db import models [EOL] [EOL] [EOL] class Course ( models . Model ) : [EOL] [docstring] [EOL] name = models . CharField ( max_length = [number] ) [EOL] code = models . CharField ( max_length = [number] , unique = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . code [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[qa.models.course.Course]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[qa.models.course.Course]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] from . models import Gucian [EOL] [EOL] [comment] [EOL] admin . site . register ( Gucian ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] from django . urls import path , include [EOL] [EOL] from rest_framework . routers import DefaultRouter [EOL] [EOL] from users import views [EOL] [EOL] [EOL] router = DefaultRouter ( ) [EOL] router . register ( [string] , views . GucianViewSet ) [EOL] [EOL] urlpatterns = [ path ( [string] , include ( router . urls ) ) , path ( [string] , views . SignUpView . as_view ( ) , name = [string] ) , path ( [string] , views . ChangePasswordView . as_view ( ) , name = [string] ) , path ( [string] , views . ForgetPasswordView . as_view ( ) , name = [string] ) , path ( [string] , views . ResetPasswordView . as_view ( ) , name = [string] ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class UsersConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from guc_overflow . permissions import IsObjectOwner [EOL] [EOL] [EOL] class IsProfileOwner ( IsObjectOwner ) : [EOL] [docstring] [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . is_profile_owner import IsProfileOwner [EOL]	0 0 0 0 0 0
	0
	0
import datetime [EOL] [EOL] from django . test import TestCase [EOL] [EOL] from users . factories import GucianFactory [EOL] [EOL] [EOL] class GucianTestSuite ( TestCase ) : [EOL] [docstring] [EOL] [EOL] def setUp ( self ) : [EOL] self . gucian = GucianFactory . create ( ) [EOL] [EOL] def test_age_representation ( self ) : [EOL] self . assertEqual ( datetime . datetime . now ( ) . year - self . gucian . birthdate . year , self . gucian . age ) [EOL] [EOL] def test_name_representation ( self ) : [EOL] self . assertEqual ( f'{ self . gucian . user . first_name } [string] { self . gucian . user . last_name }' , self . gucian . name ) [EOL] [EOL] def test_string_representation ( self ) : [EOL] self . assertEqual ( self . gucian . name , str ( self . gucian ) ) [EOL] [EOL] def test_increase_reputation ( self ) : [EOL] [docstring] [EOL] reputation_before_increasing = self . gucian . reputation [EOL] self . gucian . increase_reputation ( amount = [number] ) [EOL] self . gucian . refresh_from_db ( ) [EOL] [EOL] self . assertEqual ( reputation_before_increasing + [number] , self . gucian . reputation ) [EOL] [EOL] def test_decrease_reputation ( self ) : [EOL] [docstring] [EOL] reputation_before_increasing = self . gucian . reputation [EOL] self . gucian . decrease_reputation ( amount = [number] ) [EOL] self . gucian . refresh_from_db ( ) [EOL] [EOL] self . assertEqual ( reputation_before_increasing - [number] , self . gucian . reputation ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import datetime [EOL] import datetime [EOL] [EOL] from rest_framework . test import APITestCase [EOL] from rest_framework . reverse import reverse [EOL] [EOL] from django . contrib . auth import get_user_model [EOL] [EOL] from users . models import Gucian [EOL] [EOL] User = get_user_model ( ) [EOL] [EOL] [EOL] class SignUpViewTestSuite ( APITestCase ) : [EOL] [docstring] [EOL] [EOL] def setUp ( self ) : [EOL] self . signup_path = reverse ( [string] ) [EOL] self . signup_data = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : str ( datetime . date ( [number] , [number] , [number] ) ) , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] def test_first_name_missing ( self ) : [EOL] del self . signup_data [ [string] ] [EOL] [EOL] response = self . client . post ( path = self . signup_path , data = self . signup_data ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] [EOL] def test_last_name_missing ( self ) : [EOL] del self . signup_data [ [string] ] [EOL] [EOL] response = self . client . post ( path = self . signup_path , data = self . signup_data ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] [EOL] def test_guc_email_missing ( self ) : [EOL] del self . signup_data [ [string] ] [EOL] [EOL] response = self . client . post ( path = self . signup_path , data = self . signup_data ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] [EOL] def test_backup_email_missing ( self ) : [EOL] del self . signup_data [ [string] ] [EOL] [EOL] response = self . client . post ( path = self . signup_path , data = self . signup_data ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] [EOL] def test_major_missing ( self ) : [EOL] del self . signup_data [ [string] ] [EOL] [EOL] response = self . client . post ( path = self . signup_path , data = self . signup_data ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] [EOL] def test_dash_number_missing ( self ) : [EOL] del self . signup_data [ [string] ] [EOL] [EOL] response = self . client . post ( path = self . signup_path , data = self . signup_data ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] [EOL] def test_birthdate_missing ( self ) : [EOL] del self . signup_data [ [string] ] [EOL] [EOL] response = self . client . post ( path = self . signup_path , data = self . signup_data ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] [EOL] def test_password_missing ( self ) : [EOL] del self . signup_data [ [string] ] [EOL] [EOL] response = self . client . post ( path = self . signup_path , data = self . signup_data ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] [EOL] def test_confirm_password_missing ( self ) : [EOL] del self . signup_data [ [string] ] [EOL] [EOL] response = self . client . post ( path = self . signup_path , data = self . signup_data ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] [EOL] def test_bio_missing_is_allowed ( self ) : [EOL] del self . signup_data [ [string] ] [EOL] [EOL] response = self . client . post ( path = self . signup_path , data = self . signup_data ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] [EOL] def test_guc_email_does_not_include_guc_domain ( self ) : [EOL] self . signup_data [ [string] ] = [string] [EOL] [EOL] response = self . client . post ( path = self . signup_path , data = self . signup_data ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] [EOL] def test_birthdate_can_not_be_before_1930 ( self ) : [EOL] self . signup_data [ [string] ] = datetime . date ( [number] , [number] , [number] ) [EOL] [EOL] response = self . client . post ( path = self . signup_path , data = self . signup_data ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] [EOL] def test_age_can_not_be_less_than_16 ( self ) : [EOL] now = datetime . datetime . now ( ) [EOL] birthdate_year = now . year - [number] [EOL] self . signup_data [ [string] ] = datetime . date ( birthdate_year , [number] , [number] ) [EOL] [EOL] response = self . client . post ( path = self . signup_path , data = self . signup_data ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] [EOL] def test_backup_email_not_equal_guc_email ( self ) : [EOL] self . signup_data [ [string] ] = self . signup_data [ [string] ] [EOL] [EOL] response = self . client . post ( path = self . signup_path , data = self . signup_data ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] [EOL] def test_gucian_created_on_sign_up ( self ) : [EOL] self . client . post ( path = self . signup_path , data = self . signup_data ) [EOL] [EOL] self . assertEqual ( [number] , Gucian . objects . count ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 $datetime.datetime$ 0 0 0 $builtins.int$ 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from rest_framework . test import APITestCase [EOL] from rest_framework . reverse import reverse [EOL] [EOL] from users . factories import GucianFactory [EOL] [EOL] [EOL] class GucianViewSetTestSuite ( APITestCase ) : [EOL] [docstring] [EOL] [EOL] def setUp ( self ) : [EOL] self . gucians = GucianFactory . create_batch ( [number] ) [EOL] [EOL] self . path = reverse ( [string] , kwargs = { [string] : [number] } ) [EOL] self . update_data = { [string] : [string] } [EOL] [EOL] self . client . force_login ( self . gucians [ [number] ] . user ) [EOL] [EOL] def test_retrieve_non_existing_gucian ( self ) : [EOL] path_to_non_existing = reverse ( [string] , kwargs = { [string] : [number] } ) [EOL] response = self . client . get ( path = path_to_non_existing ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] [EOL] def test_retrieve_existing_gucian ( self ) : [EOL] response = self . client . get ( path = self . path ) [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] [EOL] def test_update_not_profile_owner ( self ) : [EOL] self . client . logout ( ) [EOL] self . client . force_login ( self . gucians [ [number] ] . user ) [EOL] [EOL] response = self . client . patch ( path = self . path , data = self . update_data ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] [EOL] def test_update_successfully ( self ) : [EOL] response = self . client . patch ( path = self . path , data = self . update_data ) [EOL] self . gucians [ [number] ] . refresh_from_db ( ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] self . assertEqual ( self . update_data [ [string] ] , self . gucians [ [number] ] . bio ) [EOL] [EOL] def test_edit_first_name_successfully ( self ) : [EOL] del self . update_data [ [string] ] [EOL] self . update_data [ [string] ] = [string] [EOL] [EOL] response = self . client . patch ( path = self . path , data = self . update_data ) [EOL] self . gucians [ [number] ] . user . refresh_from_db ( ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] self . assertEqual ( self . update_data [ [string] ] , self . gucians [ [number] ] . user . first_name ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from rest_framework . test import APITestCase [EOL] from rest_framework . reverse import reverse [EOL] [EOL] from users . factories import GucianFactory [EOL] [EOL] [EOL] class ResetPasswordViewTestSuite ( APITestCase ) : [EOL] [docstring] [EOL] [EOL] def setUp ( self ) : [EOL] self . gucian = GucianFactory . create ( ) [EOL] [EOL] self . reset_password_path = reverse ( [string] , kwargs = { [string] : self . gucian . pk } ) [EOL] self . reset_password_data = { [string] : [string] , [string] : [string] } [EOL] [EOL] def test_new_password_missing ( self ) : [EOL] del self . reset_password_data [ [string] ] [EOL] response = self . client . put ( path = self . reset_password_path , data = self . reset_password_data ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] [EOL] def test_confirm_password_missing ( self ) : [EOL] del self . reset_password_data [ [string] ] [EOL] response = self . client . put ( path = self . reset_password_path , data = self . reset_password_data ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] [EOL] def test_provided_passwords_not_equal ( self ) : [EOL] self . reset_password_data [ [string] ] = [string] [EOL] response = self . client . put ( path = self . reset_password_path , data = self . reset_password_data ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] [EOL] def test_reset_password_successful ( self ) : [EOL] response = self . client . put ( path = self . reset_password_path , data = self . reset_password_data ) [EOL] self . gucian . user . refresh_from_db ( ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] self . assertTrue ( self . gucian . user . check_password ( self . reset_password_data [ [string] ] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from rest_framework . test import APITestCase [EOL] from rest_framework . reverse import reverse [EOL] [EOL] from django . core import mail [EOL] [EOL] from users . factories import GucianFactory [EOL] [EOL] [EOL] class ForgetPasswordViewTestSuite ( APITestCase ) : [EOL] [docstring] [EOL] [EOL] def setUp ( self ) : [EOL] self . gucian = GucianFactory . create ( ) [EOL] [EOL] self . forget_password_path = reverse ( [string] ) [EOL] self . forget_password_data = { [string] : self . gucian . guc_email } [EOL] [EOL] def test_given_email_does_not_exist ( self ) : [EOL] self . forget_password_data [ [string] ] = [string] [EOL] response = self . client . post ( path = self . forget_password_path , data = self . forget_password_data ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] self . assertEqual ( [number] , len ( mail . outbox ) ) [EOL] [EOL] def test_missing_email_field ( self ) : [EOL] del self . forget_password_data [ [string] ] [EOL] response = self . client . post ( path = self . forget_password_path , data = self . forget_password_data ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] [EOL] def test_forget_password_successfully ( self ) : [EOL] response = self . client . post ( path = self . forget_password_path , data = self . forget_password_data ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] self . assertEqual ( [number] , len ( mail . outbox ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from rest_framework . test import APITestCase , APIClient [EOL] from rest_framework . reverse import reverse [EOL] [EOL] from users . factories import UserFactory [EOL] [EOL] [EOL] class ChangePasswordViewTestSuite ( APITestCase ) : [EOL] [docstring] [EOL] [EOL] def setUp ( self ) : [EOL] self . logged_in_user = UserFactory . create ( ) [EOL] self . logged_in_user . set_password ( [string] ) [EOL] self . logged_in_user . save ( ) [EOL] self . client . force_login ( self . logged_in_user ) [EOL] [EOL] self . change_password_path = reverse ( [string] ) [EOL] self . change_password_data = { [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] def test_request_should_be_authenticated ( self ) : [EOL] client = APIClient ( ) [EOL] response = client . post ( path = self . change_password_path , data = self . change_password_data ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] [EOL] def test_old_password_missing ( self ) : [EOL] del self . change_password_data [ [string] ] [EOL] response = self . client . post ( path = self . change_password_path , data = self . change_password_data ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] [EOL] def test_new_password_missing ( self ) : [EOL] del self . change_password_data [ [string] ] [EOL] response = self . client . post ( path = self . change_password_path , data = self . change_password_data ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] [EOL] def test_confirm_password_missing ( self ) : [EOL] del self . change_password_data [ [string] ] [EOL] response = self . client . post ( path = self . change_password_path , data = self . change_password_data ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] [EOL] def test_wrong_old_password ( self ) : [EOL] self . change_password_data [ [string] ] = [string] [EOL] response = self . client . post ( path = self . change_password_path , data = self . change_password_data ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] self . assertFalse ( self . logged_in_user . check_password ( self . change_password_data [ [string] ] ) ) [EOL] [EOL] def test_new_password_and_confirm_password_not_matching ( self ) : [EOL] self . change_password_data [ [string] ] = [string] [EOL] response = self . client . post ( path = self . change_password_path , data = self . change_password_data ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] self . assertFalse ( self . logged_in_user . check_password ( self . change_password_data [ [string] ] ) ) [EOL] [EOL] def test_change_password_successfully ( self ) : [EOL] response = self . client . post ( path = self . change_password_path , data = self . change_password_data ) [EOL] self . logged_in_user . refresh_from_db ( ) [EOL] [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] self . assertTrue ( self . logged_in_user . check_password ( self . change_password_data [ [string] ] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , Type [EOL] import typing [EOL] import datetime [EOL] import users [EOL] import datetime [EOL] [EOL] from django . db import models [EOL] from django . contrib . auth import get_user_model [EOL] from django . core . mail import send_mail [EOL] from django . conf import settings [EOL] [EOL] User = get_user_model ( ) [EOL] [EOL] [EOL] class Gucian ( models . Model ) : [EOL] [docstring] [EOL] [EOL] user = models . OneToOneField ( User , on_delete = models . CASCADE ) [EOL] [EOL] guc_email = models . EmailField ( ) [EOL] backup_email = models . EmailField ( ) [EOL] major = models . CharField ( max_length = [number] ) [EOL] dash_number = models . IntegerField ( default = [number] ) [EOL] birthdate = models . DateField ( ) [EOL] bio = models . CharField ( max_length = [number] , default = [string] ) [EOL] reputation = models . IntegerField ( default = [number] ) [EOL] joined_at = models . DateField ( auto_now_add = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] @ property def name ( self ) : [EOL] return f'{ self . user . first_name } [string] { self . user . last_name }' [EOL] [EOL] @ property def age ( self ) : [EOL] today = datetime . datetime . now ( ) [EOL] return today . year - self . birthdate . year [EOL] [EOL] def send_forget_password_mail ( self , domain ) : [EOL] [docstring] [EOL] message = f'{ domain } [string] { self . pk }' [EOL] subject = [string] [EOL] receivers = [ self . user . email ] [EOL] [EOL] send_mail ( subject = subject , message = message , recipient_list = receivers , from_email = settings . EMAIL_HOST_USER ) [EOL] [EOL] def increase_reputation ( self , amount ) : [EOL] self . reputation += amount [EOL] self . save ( ) [EOL] [EOL] def decrease_reputation ( self , amount ) : [EOL] self . reputation -= amount [EOL] self . save ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.models.gucian.Gucian]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Type[users.models.gucian.Gucian]$ 0 0 0 0 0 0 0 $typing.Type[users.models.gucian.Gucian]$ 0 0 0 0 0 0 0 $typing.Type[users.models.gucian.Gucian]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.models.gucian.Gucian]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.models.gucian.Gucian]$ 0 0 0 0 0 0 0 $typing.Type[users.models.gucian.Gucian]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.models.gucian.Gucian]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.models.gucian.Gucian]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . gucian import Gucian [EOL]	0 0 0 0 0 0
	0
from typing import Any , Type [EOL] import typing [EOL] import users [EOL] import factory [EOL] [EOL] from django . contrib . auth import get_user_model [EOL] [EOL] User = get_user_model ( ) [EOL] [EOL] [EOL] class UserFactory ( factory . DjangoModelFactory ) : [EOL] [docstring] [EOL] [EOL] class Meta : [EOL] model = User [EOL] [EOL] username = factory . Faker ( [string] ) [EOL] email = factory . Faker ( [string] ) [EOL] first_name = factory . Faker ( [string] ) [EOL] last_name = factory . Faker ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.factories.user_factory.UserFactory.Meta]$ 0 $typing.Any$ 0 0 $typing.Type[users.factories.user_factory.UserFactory]$ 0 0 0 0 0 0 0 0 $typing.Type[users.factories.user_factory.UserFactory]$ 0 0 0 0 0 0 0 0 $typing.Type[users.factories.user_factory.UserFactory]$ 0 0 0 0 0 0 0 0 $typing.Type[users.factories.user_factory.UserFactory]$ 0 0 0 0 0 0 0 0
from . user_factory import UserFactory [EOL] from . gucian_factory import GucianFactory [EOL]	0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import users [EOL] import factory [EOL] import factory . fuzzy [EOL] import random [EOL] import datetime [EOL] [EOL] from . . models import Gucian [EOL] from . . factories import UserFactory [EOL] [EOL] [EOL] class GucianFactory ( factory . DjangoModelFactory ) : [EOL] [docstring] [EOL] [EOL] class Meta : [EOL] model = Gucian [EOL] [EOL] user = factory . SubFactory ( UserFactory ) [EOL] [EOL] guc_email = factory . Faker ( [string] ) [EOL] backup_email = factory . Faker ( [string] ) [EOL] dash_number = random . randint ( [number] , [number] ) [EOL] major = factory . Faker ( [string] ) [EOL] bio = factory . Faker ( [string] ) [EOL] reputation = random . randint ( [number] , [number] ) [EOL] birthdate = factory . fuzzy . FuzzyDate ( start_date = datetime . date ( [number] , [number] , [number] ) , end_date = datetime . date . today ( ) - datetime . timedelta ( days = [number] * [number] ) , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.factories.gucian_factory.GucianFactory]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type [EOL] import typing [EOL] import users [EOL] from rest_framework . generics import CreateAPIView [EOL] from rest_framework . response import Response [EOL] [EOL] from . . serializers import SignUpSerializer [EOL] [EOL] [EOL] class SignUpView ( CreateAPIView ) : [EOL] [docstring] [EOL] serializer_class = SignUpSerializer [EOL] [EOL] def post ( self , request , * args , ** kwargs ) : [EOL] serializer = self . get_serializer ( data = request . data ) [EOL] serializer . is_valid ( raise_exception = True ) [EOL] serializer . save ( ) [EOL] [EOL] return Response ( data = { [string] : [string] } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.serializers.signup_serializer.SignUpSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type [EOL] import typing [EOL] import users [EOL] from rest_framework . generics import UpdateAPIView [EOL] from rest_framework . response import Response [EOL] [EOL] from . . serializers import ResetPasswordSerializer [EOL] from . . models import Gucian [EOL] [EOL] [EOL] class ResetPasswordView ( UpdateAPIView ) : [EOL] [docstring] [EOL] serializer_class = ResetPasswordSerializer [EOL] queryset = Gucian . objects . all ( ) [EOL] [EOL] def put ( self , request , * args , ** kwargs ) : [EOL] user = Gucian . objects . get ( pk = kwargs . get ( [string] ) ) . user [EOL] serializer = self . get_serializer ( data = request . data , instance = user ) [EOL] [EOL] [comment] [EOL] serializer . is_valid ( raise_exception = True ) [EOL] serializer . save ( ) [EOL] [EOL] return Response ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.serializers.reset_password_serializer.ResetPasswordSerializer]$ 0 0 0 $typing.Type[users.views.reset_password_view.ResetPasswordView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Type [EOL] import typing [EOL] import users [EOL] from rest_framework . viewsets import GenericViewSet [EOL] from rest_framework import mixins [EOL] [EOL] from . . serializers import GucianRetrieveSerializer , GucianUpdateSerializer [EOL] from . . models import Gucian [EOL] from . . permissions import IsProfileOwner [EOL] [EOL] [EOL] class GucianViewSet ( GenericViewSet , mixins . RetrieveModelMixin , mixins . UpdateModelMixin , mixins . ListModelMixin ) : [EOL] [docstring] [EOL] queryset = Gucian . objects . all ( ) [EOL] permission_classes = ( IsProfileOwner , ) [EOL] [EOL] def get_serializer_class ( self ) : [EOL] if self . action == [string] : [EOL] return GucianRetrieveSerializer [EOL] elif self . action == [string] or self . action == [string] : [EOL] return GucianUpdateSerializer [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.views.gucian_viewset.GucianViewSet]$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Type[users.permissions.is_profile_owner.IsProfileOwner]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . signup_view import SignUpView [EOL] from . change_password_view import ChangePasswordView [EOL] from . forget_password_view import ForgetPasswordView [EOL] from . reset_password_view import ResetPasswordView [EOL] from . gucian_viewset import GucianViewSet [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type [EOL] import typing [EOL] import users [EOL] from rest_framework . generics import CreateAPIView [EOL] from rest_framework . response import Response [EOL] from rest_framework . permissions import IsAuthenticated [EOL] [EOL] from . . serializers import ChangePasswordSerializer [EOL] [EOL] [EOL] class ChangePasswordView ( CreateAPIView ) : [EOL] [docstring] [EOL] [EOL] serializer_class = ChangePasswordSerializer [EOL] permission_classes = ( IsAuthenticated , ) [EOL] [EOL] def post ( self , request , * args , ** kwargs ) : [EOL] serializer = self . get_serializer ( data = request . data , instance = request . user ) [EOL] serializer . is_valid ( raise_exception = True ) [EOL] serializer . save ( ) [EOL] [EOL] return Response ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type [EOL] import typing [EOL] import users [EOL] from rest_framework . generics import CreateAPIView [EOL] from rest_framework . response import Response [EOL] from rest_framework . request import Request [EOL] [EOL] from . . serializers import ForgetPasswordSerializer [EOL] from . . models import Gucian [EOL] [EOL] [EOL] class ForgetPasswordView ( CreateAPIView ) : [EOL] [docstring] [EOL] serializer_class = ForgetPasswordSerializer [EOL] [EOL] def post ( self , request , * args , ** kwargs ) : [EOL] serializer = self . get_serializer ( data = request . data ) [EOL] serializer . is_valid ( raise_exception = True ) [EOL] [EOL] try : [EOL] gucian = Gucian . objects . get ( guc_email = request . data . get ( [string] ) ) [EOL] domain = self . request . META . get ( [string] , [string] ) [EOL] gucian . send_forget_password_mail ( domain = domain ) [EOL] except Gucian . DoesNotExist : [EOL] pass [EOL] [EOL] return Response ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.serializers.forget_password_serializer.ForgetPasswordSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import users [EOL] from rest_framework import serializers [EOL] [EOL] [EOL] class ForgetPasswordSerializer ( serializers . Serializer ) : [EOL] [docstring] [EOL] email = serializers . EmailField ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.serializers.forget_password_serializer.ForgetPasswordSerializer]$ 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import users [EOL] from rest_framework import serializers [EOL] [EOL] from . . serializers import PasswordBasedSerializer [EOL] [EOL] [EOL] class ChangePasswordSerializer ( PasswordBasedSerializer ) : [EOL] [docstring] [EOL] old_password = serializers . CharField ( style = { [string] : [string] } ) [EOL] [EOL] def update ( self , instance , validated_data ) : [EOL] [docstring] [EOL] instance . set_password ( validated_data [ [string] ] ) [EOL] instance . save ( ) [EOL] return instance [EOL] [EOL] def validate_old_password ( self , value ) : [EOL] [docstring] [EOL] if not self . instance . check_password ( value ) : [EOL] raise serializers . ValidationError ( [string] ) [EOL] return value [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.serializers.change_password_serializer.ChangePasswordSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . password_based_serializer import PasswordBasedSerializer [EOL] from . signup_serializer import SignUpSerializer [EOL] from . change_password_serializer import ChangePasswordSerializer [EOL] from . forget_password_serializer import ForgetPasswordSerializer [EOL] from . reset_password_serializer import ResetPasswordSerializer [EOL] from . gucian_serializer import GucianRetrieveSerializer [EOL] from . gucian_serializer import GucianUpdateSerializer [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Type , List [EOL] import typing [EOL] import users [EOL] from rest_framework import serializers [EOL] [EOL] from . . models import Gucian [EOL] [EOL] [EOL] class GucianRetrieveSerializer ( serializers . ModelSerializer ) : [EOL] [docstring] [EOL] class Meta : [EOL] model = Gucian [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] class GucianUpdateSerializer ( serializers . ModelSerializer ) : [EOL] [docstring] [EOL] first_name = serializers . SerializerMethodField ( ) [EOL] last_name = serializers . SerializerMethodField ( ) [EOL] [EOL] class Meta : [EOL] model = Gucian [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] [EOL] def update ( self , instance , validated_data ) : [EOL] [docstring] [EOL] user_related_keys = [ [string] , [string] ] [EOL] [EOL] for key in user_related_keys : [EOL] if key in self . initial_data . keys ( ) : [EOL] setattr ( instance . user , key , self . initial_data [ key ] ) [EOL] instance . user . save ( ) [EOL] [EOL] return super ( ) . update ( instance , validated_data ) [EOL] [EOL] def get_first_name ( self , gucian ) : [EOL] return self . _get_field_new_value ( key = [string] , default = gucian . user . first_name ) [EOL] [EOL] def get_last_name ( self , gucian ) : [EOL] return self . _get_field_new_value ( key = [string] , default = gucian . user . last_name ) [EOL] [EOL] def _get_field_new_value ( self , key , default ) : [EOL] [docstring] [EOL] if key in self . initial_data . keys ( ) : [EOL] return self . initial_data [ key ] [EOL] return default [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.models.gucian.Gucian]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.serializers.gucian_serializer.GucianUpdateSerializer]$ 0 0 0 0 0 0 0 $typing.Type[users.serializers.gucian_serializer.GucianUpdateSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.models.gucian.Gucian]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any , Type [EOL] import typing [EOL] import users [EOL] import datetime [EOL] [EOL] from django . contrib . auth import get_user_model [EOL] from rest_framework import serializers [EOL] [EOL] from . . models import Gucian [EOL] [EOL] User = get_user_model ( ) [EOL] [EOL] [EOL] class SignUpSerializer ( serializers . Serializer ) : [EOL] [docstring] [EOL] first_name = serializers . CharField ( ) [EOL] last_name = serializers . CharField ( ) [EOL] guc_email = serializers . EmailField ( ) [EOL] backup_email = serializers . EmailField ( ) [EOL] major = serializers . CharField ( ) [EOL] dash_number = serializers . IntegerField ( ) [EOL] birthdate = serializers . DateField ( ) [EOL] bio = serializers . CharField ( required = False ) [EOL] password = serializers . CharField ( style = { [string] : [string] } ) [EOL] confirm_password = serializers . CharField ( style = { [string] : [string] } ) [EOL] [EOL] def validate_guc_email ( self , value ) : [EOL] [docstring] [EOL] if not value . endswith ( [string] ) : [EOL] raise serializers . ValidationError ( [string] ) [EOL] return value [EOL] [EOL] def validate_birthdate ( self , value ) : [EOL] [docstring] [EOL] max_valid_year = datetime . datetime . now ( ) . year - [number] [EOL] [EOL] if value . year < [number] : [EOL] raise serializers . ValidationError ( [string] ) [EOL] [EOL] if value . year > max_valid_year : [EOL] raise serializers . ValidationError ( [string] ) [EOL] [EOL] return value [EOL] [EOL] def validate_backup_email ( self , value ) : [EOL] [docstring] [EOL] if value . endswith ( [string] ) : [EOL] raise serializers . ValidationError ( [string] ) [EOL] return value [EOL] [EOL] def create ( self , validated_data ) : [EOL] [docstring] [EOL] user = self . create_user ( validated_data ) [EOL] return self . create_gucian ( validated_data , user ) [EOL] [EOL] def create_user ( self , validated_data ) : [EOL] user_creation_data = { [string] : validated_data [ [string] ] , [string] : validated_data [ [string] ] , [string] : validated_data [ [string] ] , [string] : validated_data [ [string] ] , } [EOL] [EOL] user = User . objects . create ( ** user_creation_data ) [EOL] user . set_password ( validated_data [ [string] ] ) [EOL] user . save ( ) [EOL] return user [EOL] [EOL] def create_gucian ( self , validated_data , user ) : [EOL] gucian_creation_data = { [string] : user , ** validated_data } [EOL] del gucian_creation_data [ [string] ] [EOL] del gucian_creation_data [ [string] ] [EOL] del gucian_creation_data [ [string] ] [EOL] del gucian_creation_data [ [string] ] [EOL] [EOL] return Gucian . objects . create ( ** gucian_creation_data ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.serializers.signup_serializer.SignUpSerializer]$ 0 0 0 0 0 0 0 $typing.Type[users.serializers.signup_serializer.SignUpSerializer]$ 0 0 0 0 0 0 0 $typing.Type[users.serializers.signup_serializer.SignUpSerializer]$ 0 0 0 0 0 0 0 $typing.Type[users.serializers.signup_serializer.SignUpSerializer]$ 0 0 0 0 0 0 0 $typing.Type[users.serializers.signup_serializer.SignUpSerializer]$ 0 0 0 0 0 0 0 $typing.Type[users.serializers.signup_serializer.SignUpSerializer]$ 0 0 0 0 0 0 0 $typing.Type[users.serializers.signup_serializer.SignUpSerializer]$ 0 0 0 0 0 0 0 $typing.Type[users.serializers.signup_serializer.SignUpSerializer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.serializers.signup_serializer.SignUpSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.serializers.signup_serializer.SignUpSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type [EOL] import typing [EOL] import users [EOL] from rest_framework import serializers [EOL] [EOL] [EOL] class PasswordBasedSerializer ( serializers . Serializer ) : [EOL] [docstring] [EOL] new_password = serializers . CharField ( style = { [string] : [string] } ) [EOL] confirm_password = serializers . CharField ( style = { [string] : [string] } ) [EOL] [EOL] def validate ( self , attrs ) : [EOL] if not self . _are_passwords_matching ( attrs ) : [EOL] raise serializers . ValidationError ( [string] ) [EOL] return attrs [EOL] [EOL] def _are_passwords_matching ( self , attrs ) : [EOL] [docstring] [EOL] new_password = attrs . get ( [string] ) [EOL] confirm_password = attrs . get ( [string] ) [EOL] [EOL] if new_password != confirm_password : [EOL] return False [EOL] return True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.serializers.password_based_serializer.PasswordBasedSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.serializers.password_based_serializer.PasswordBasedSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0
from . . serializers import PasswordBasedSerializer [EOL] [EOL] [EOL] class ResetPasswordSerializer ( PasswordBasedSerializer ) : [EOL] [docstring] [EOL] [EOL] def update ( self , instance , validated_data ) : [EOL] [docstring] [EOL] instance . set_password ( validated_data [ [string] ] ) [EOL] instance . save ( ) [EOL] return instance [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Type [EOL] import typing [EOL] import polls [EOL] from rest_framework import serializers [EOL] from . models import Poll , Choice [EOL] [EOL] [EOL] class ChoiceSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = Choice [EOL] fields = ( [string] , [string] ) [EOL] read_only_fields = ( [string] , ) [EOL] [EOL] [EOL] class PollSerializer ( serializers . ModelSerializer ) : [EOL] choices = ChoiceSerializer ( many = True , read_only = True ) [EOL] [EOL] class Meta : [EOL] model = Poll [EOL] fields = ( [string] , [string] , [string] , [string] ) [EOL] read_only_fields = ( [string] , [string] ) [EOL] [EOL] [EOL] class VoteUpSerializer ( serializers . Serializer ) : [EOL] choice_pk = serializers . IntegerField ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[polls.models.Poll]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $polls.serializers.ChoiceSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[polls.models.Poll]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[polls.serializers.VoteUpSerializer]$ 0 0 0 0 0 0 0
	0
from typing import Any , Type [EOL] import typing [EOL] import polls [EOL] from rest_framework import viewsets [EOL] from rest_framework import mixins [EOL] from rest_framework import permissions [EOL] from rest_framework . decorators import action [EOL] from rest_framework . response import Response [EOL] [EOL] from django . shortcuts import get_object_or_404 [EOL] [EOL] from . serializers import PollSerializer , VoteUpSerializer , ChoiceSerializer [EOL] from . models import Poll , Choice [EOL] from users . models import Gucian [EOL] [EOL] [EOL] class PollsView ( viewsets . GenericViewSet , mixins . CreateModelMixin , mixins . RetrieveModelMixin , mixins . ListModelMixin ) : [EOL] queryset = Poll . objects . all ( ) [EOL] serializer_class = PollSerializer [EOL] permission_classes = [ permissions . IsAuthenticatedOrReadOnly ] [EOL] [EOL] def perform_create ( self , serializer ) : [EOL] gucian = Gucian . objects . get ( user = self . request . user ) [EOL] serializer . save ( gucian = gucian ) [EOL] [EOL] @ action ( methods = [ [string] ] , detail = True , url_path = [string] , serializer_class = VoteUpSerializer ) def up_vote ( self , request , pk = None ) : [EOL] [docstring] [EOL] choice_pk = request . data [ [string] ] [EOL] choice = get_object_or_404 ( klass = Choice , pk = choice_pk , poll__pk = pk ) [EOL] choice . votes += [number] [EOL] choice . save ( ) [EOL] [EOL] return Response ( [string] ) [EOL] [EOL] @ action ( methods = [ [string] ] , detail = True , url_path = [string] , serializer_class = ChoiceSerializer ) def add_choice ( self , request , pk = None ) : [EOL] poll = get_object_or_404 ( klass = Poll , pk = pk ) [EOL] choice_text = request . data [ [string] ] [EOL] new_choice = Choice ( choice = choice_text , poll = poll ) [EOL] new_choice . save ( ) [EOL] [EOL] return Response ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $polls.models.Choice$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $polls.models.Choice$ 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import polls [EOL] import datetime [EOL] from django . db import models [EOL] [EOL] from users . models import Gucian [EOL] [EOL] [EOL] class Poll ( models . Model ) : [EOL] question = models . CharField ( max_length = [number] ) [EOL] pub_date = models . DateTimeField ( [string] , auto_now_add = True ) [EOL] gucian = models . ForeignKey ( Gucian , null = True , on_delete = models . SET_NULL , related_name = [string] ) [EOL] [EOL] def __unicode__ ( self ) : [EOL] return self . question [EOL] [EOL] def was_published_today ( self ) : [EOL] return self . pub_date . date ( ) == datetime . date . today ( ) [EOL] [EOL] [EOL] class Choice ( models . Model ) : [EOL] poll = models . ForeignKey ( Poll , on_delete = models . CASCADE , verbose_name = [string] , related_name = [string] ) [EOL] choice = models . CharField ( max_length = [number] ) [EOL] votes = models . IntegerField ( default = [number] ) [EOL] [EOL] def __unicode__ ( self ) : [EOL] return self . question [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[polls.models.Poll]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[polls.models.Poll]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[polls.models.Poll]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[polls.models.Choice]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[polls.models.Choice]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[polls.models.Choice]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class PollsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RenameField ( model_name = [string] , old_name = [string] , new_name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0