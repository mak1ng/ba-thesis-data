[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Optional , List [EOL] import typing [EOL] import builtins [EOL] import requests [EOL] [docstring] [EOL] [EOL] from functools import lru_cache [EOL] import sys [EOL] from typing import List , Optional [EOL] [EOL] from docopt import docopt [EOL] import requests [EOL] [EOL] [EOL] class GithubHTTPError ( RuntimeError ) : [EOL] def __init__ ( self , message , status_code ) : [EOL] super ( ) . __init__ ( message ) [EOL] self . _status_code = status_code [EOL] [EOL] @ property def status_code ( self ) : [EOL] return self . _status_code [EOL] [EOL] [EOL] class AuthenticatedGithubUser : [EOL] def __init__ ( self , username , password ) : [EOL] self . _api_session = requests . Session ( ) [EOL] [EOL] self . _api_session . auth = ( username , password ) [EOL] [EOL] def _handle_http_errors ( self , response ) : [EOL] try : [EOL] response . raise_for_status ( ) [EOL] except requests . exceptions . HTTPError as http_error : [EOL] raise GithubHTTPError ( f" [string] { response . status_code }" , response . status_code ) from http_error [EOL] [EOL] @ lru_cache ( maxsize = None ) def _get_follower_data ( self , query ) : [EOL] [docstring] [EOL] [EOL] if query not in [ [string] , [string] ] : [EOL] raise ValueError ( [string] [string] ) [EOL] [EOL] result = [ ] [EOL] [EOL] current_url = f" [string] { query } [string] " [EOL] [EOL] while True : [EOL] current_response = self . _api_session . get ( current_url , timeout = [number] ) [EOL] self . _handle_http_errors ( current_response ) [EOL] [EOL] result += [ follower [ [string] ] for follower in current_response . json ( ) ] [EOL] [EOL] [comment] [EOL] try : [EOL] current_url = current_response . links [ [string] ] [ [string] ] [EOL] except KeyError : [EOL] break [EOL] [EOL] return result [EOL] [EOL] @ property def followers ( self ) : [EOL] [docstring] [EOL] [EOL] return self . _get_follower_data ( [string] ) [EOL] [EOL] @ property def following ( self ) : [EOL] [docstring] [EOL] [EOL] return self . _get_follower_data ( [string] ) [EOL] [EOL] [comment] [EOL] def follow ( self , username ) : [EOL] [docstring] [EOL] [EOL] def unfollow ( self , username ) : [EOL] [docstring] [EOL] [EOL] response = self . _api_session . delete ( f" [string] { username }" , timeout = [number] ) [EOL] self . _handle_http_errors ( response ) [EOL] [EOL] def __enter__ ( self ) : [EOL] return self [EOL] [EOL] def __exit__ ( self , exception_type , exception_value , traceback ) : [EOL] self . _api_session . close ( ) [EOL] [EOL] [EOL] def main ( passed_argv ) : [EOL] argv = passed_argv [ [number] : ] [EOL] if len ( argv ) == [number] : [comment] [EOL] argv . append ( [string] ) [EOL] [EOL] cmd_arguments = docopt ( __doc__ , argv = argv , version = [string] ) [EOL] [EOL] unfollowed_users = [ ] [EOL] [EOL] with AuthenticatedGithubUser ( cmd_arguments [ [string] ] , cmd_arguments [ [string] ] ) as github_user : [EOL] try : [EOL] for user in github_user . following : [EOL] if user not in github_user . followers : [EOL] github_user . unfollow ( user ) [EOL] unfollowed_users . append ( user ) [EOL] [EOL] except GithubHTTPError as github_http_error : [EOL] if github_http_error . status_code == [number] : [EOL] print ( [string] [string] ) [EOL] else : [EOL] print ( github_http_error ) [EOL] [EOL] return [number] [EOL] [EOL] print ( f" [string] { unfollowed_users }" ) [EOL] return [number] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] sys . exit ( main ( sys . argv ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $requests.sessions.Session$ 0 0 0 0 0 0 0 0 0 0 $requests.sessions.Session$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 $None$ 0 0 0 $requests.Response$ 0 0 0 0 0 0 $requests.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.Response$ 0 0 0 0 $requests.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0