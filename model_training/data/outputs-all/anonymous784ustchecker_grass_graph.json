import flask [EOL] from flask import Flask , request [EOL] from main import grass_image_view [EOL] [EOL] app = Flask ( __name__ ) [EOL] [EOL] [EOL] @ app . route ( [string] ) def _entrypoint ( ) : [EOL] [comment] [EOL] return grass_image_view ( request ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] app . run ( debug = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0
	0
from typing import Any , Literal , Dict , Tuple , Optional , Match , List [EOL] import requests [EOL] import typing [EOL] import typing_extensions [EOL] import io [EOL] import datetime [EOL] import re [EOL] import json [EOL] import base64 [EOL] from io import BytesIO [EOL] from pathlib import Path [EOL] from uuid import uuid4 [EOL] from datetime import datetime , date , timedelta , timezone [EOL] import requests [EOL] from PIL import Image , ImageDraw , ImageFont [EOL] from bs4 import BeautifulSoup [EOL] from flask import request , send_file , jsonify [EOL] [EOL] [EOL] JST = timezone ( timedelta ( hours = [number] ) ) [EOL] [EOL] [EOL] def _generate_grass_image ( id = None , username = None , bc_data = None , dummy = False ) : [EOL] IMG_SIZE = ( [number] , [number] ) [EOL] BG_COLOR = ( [number] , [number] , [number] ) [EOL] [EOL] TEXT_COLOR = ( [number] , [number] , [number] ) [EOL] [EOL] BOX_OFFSET = ( [number] , [number] ) [comment] [EOL] BOX_DIFF = ( [number] , [number] ) [comment] [EOL] BOX_SIZE = [number] [comment] [EOL] BOX_COLOR1 = ( [number] , [number] , [number] ) [comment] [EOL] BOX_COLOR2 = ( [number] , [number] , [number] ) [comment] [EOL] BOX_COLOR3 = ( [number] , [number] , [number] ) [comment] [EOL] BOX_COLOR4 = ( [number] , [number] , [number] ) [comment] [EOL] BOX_COLOR5 = ( [number] , [number] , [number] ) [comment] [EOL] [EOL] def set_font ( size = [number] ) : [EOL] font = ImageFont . truetype ( str ( Path ( __file__ ) . parent . joinpath ( [string] ) . resolve ( ) ) , size = size ) [EOL] return font [EOL] [EOL] fn = f' [string] { uuid4 ( ) . hex } [string] ' [EOL] [EOL] im = Image . new ( [string] , IMG_SIZE , color = BG_COLOR ) [EOL] draw = ImageDraw . Draw ( im ) [EOL] [EOL] if dummy is True : [EOL] [EOL] x , y = BOX_OFFSET [EOL] draw . text ( ( x , y ) , f" [string] { id }" , fill = TEXT_COLOR , font = set_font ( [number] ) ) [EOL] im . save ( fn , quality = [number] ) [EOL] return fn [EOL] [EOL] [comment] [EOL] end_date = date . today ( ) [EOL] start_date = date ( end_date . year - [number] , end_date . month , end_date . day ) [EOL] start_date = start_date - timedelta ( days = start_date . isoweekday ( ) ) [EOL] [EOL] x , y = BOX_OFFSET [EOL] dt = start_date [EOL] while dt <= end_date : [EOL] if dt in bc_data : [EOL] if bc_data [ dt ] < [number] * [number] : [EOL] box_color = BOX_COLOR2 [EOL] elif [number] * [number] <= bc_data [ dt ] < [number] * [number] : [EOL] box_color = BOX_COLOR3 [EOL] elif [number] * [number] <= bc_data [ dt ] < [number] * [number] : [EOL] box_color = BOX_COLOR4 [EOL] else : [EOL] box_color = BOX_COLOR5 [EOL] else : [EOL] box_color = BOX_COLOR1 [EOL] draw . rectangle ( ( x , y , x + BOX_SIZE , y + BOX_SIZE ) , fill = box_color ) [EOL] [EOL] dt += timedelta ( days = [number] ) [EOL] if dt . isoweekday ( ) == [number] : [EOL] x += BOX_DIFF [ [number] ] [EOL] y = BOX_OFFSET [ [number] ] [EOL] else : [EOL] y += BOX_DIFF [ [number] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] x , y = BOX_OFFSET [EOL] x -= BOX_DIFF [ [number] ] * [number] [EOL] y += BOX_DIFF [ [number] ] [EOL] _weekday = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] for i in range ( [number] , [number] , [number] ) : [EOL] draw . text ( ( x , y ) , _weekday [ i ] , fill = TEXT_COLOR , font = set_font ( [number] ) ) [EOL] y += BOX_DIFF [ [number] ] * [number] [EOL] [EOL] [comment] [EOL] x , y = BOX_OFFSET [EOL] y -= BOX_DIFF [ [number] ] * [number] [EOL] dt = start_date [EOL] while dt <= end_date : [EOL] if dt . day <= [number] : [EOL] draw . text ( ( x , y ) , f"{ dt : [string] }" , fill = TEXT_COLOR , font = set_font ( [number] ) ) [EOL] dt += timedelta ( days = [number] ) [EOL] x += BOX_DIFF [ [number] ] [EOL] [EOL] [comment] [EOL] x , y = BOX_OFFSET [EOL] y -= BOX_DIFF [ [number] ] * [number] [EOL] draw . text ( ( x , y ) , f'{ username } [string] ' , fill = TEXT_COLOR , font = set_font ( [number] ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] x , y = BOX_OFFSET [EOL] x += [number] [EOL] y -= BOX_DIFF [ [number] ] * [number] [EOL] for c in ( BOX_COLOR1 , BOX_COLOR2 , BOX_COLOR3 , BOX_COLOR4 , BOX_COLOR5 ) : [EOL] draw . rectangle ( ( x , y , x + BOX_SIZE , y + BOX_SIZE ) , fill = c ) [EOL] x += BOX_DIFF [ [number] ] * [number] [EOL] [EOL] [comment] [EOL] x , y = BOX_OFFSET [EOL] x += [number] [EOL] y -= BOX_DIFF [ [number] ] * [number] [EOL] for t in ( [string] , [string] , [string] , [string] , [string] ) : [EOL] draw . text ( ( x , y ) , t , fill = TEXT_COLOR , font = set_font ( [number] ) ) [EOL] x += BOX_DIFF [ [number] ] * [number] [EOL] [EOL] x , y = BOX_OFFSET [EOL] x += [number] [EOL] y += BOX_DIFF [ [number] ] * [number] [EOL] draw . text ( ( x , y ) , [string] , fill = TEXT_COLOR , font = set_font ( [number] ) ) [EOL] [EOL] im . save ( fn ) [EOL] return fn [EOL] [EOL] [EOL] def _scrape_ustchecker ( id = None ) : [EOL] def parse_to_datetime ( dt_text ) : [EOL] mo = re . search ( [string] , dt_text ) [EOL] if mo : [EOL] year = int ( [string] + mo [ [number] ] ) [EOL] month = int ( mo [ [number] ] ) [EOL] day = int ( mo [ [number] ] ) [EOL] hour = int ( mo [ [number] ] ) [EOL] minute = int ( mo [ [number] ] ) [EOL] return datetime ( year , month , day , hour , minute ) [EOL] else : [EOL] return None [EOL] [EOL] username = None [EOL] bc_data = { } [EOL] [EOL] url = f' [string] { id }' [EOL] r = requests . get ( url ) [EOL] soup = BeautifulSoup ( r . text , [string] ) [EOL] try : [EOL] username = re . search ( [string] , soup . title . text ) [ [number] ] [EOL] rows = soup . find_all ( [string] , id = [string] ) [ [number] ] . find_all ( [string] ) [EOL] except Exception as e : [EOL] print ( e ) [EOL] return username , bc_data [EOL] [EOL] for row in rows : [EOL] d = row . find_all ( [string] ) [EOL] if d : [EOL] begin_dt = parse_to_datetime ( d [ [number] ] . text ) [EOL] end_dt = parse_to_datetime ( d [ [number] ] . text ) [EOL] if begin_dt is not None and end_dt is None : [EOL] end_dt = datetime . now ( JST ) . replace ( tzinfo = None ) [EOL] if begin_dt . day != end_dt . day : [EOL] td = ( datetime ( begin_dt . year , begin_dt . month , begin_dt . day , [number] , [number] , [number] ) - begin_dt ) . seconds / [number] [EOL] if bc_data . get ( begin_dt . date ( ) ) : [EOL] bc_data [ begin_dt . date ( ) ] += td [EOL] else : [EOL] bc_data [ begin_dt . date ( ) ] = td [EOL] [EOL] td = ( end_dt - datetime ( end_dt . year , end_dt . month , end_dt . day , [number] , [number] , [number] ) ) . seconds / [number] [EOL] if bc_data . get ( end_dt . date ( ) ) : [EOL] bc_data [ end_dt . date ( ) ] += td [EOL] else : [EOL] bc_data [ end_dt . date ( ) ] = td [EOL] days = end_dt . day - begin_dt . day [EOL] [EOL] if days > [number] : [EOL] for i in range ( [number] , days ) : [EOL] dt = begin_dt . date ( ) + timedelta ( days = [number] ) [EOL] bc_data [ dt ] = [number] * [number] [EOL] else : [EOL] bc_data [ begin_dt . date ( ) ] = ( end_dt - begin_dt ) . seconds / [number] [EOL] [EOL] return username , bc_data [EOL] [EOL] [EOL] def grass_image_view ( request ) : [EOL] WHITELIST = [ [string] ] [EOL] [EOL] headers = { } [EOL] print ( request ) [EOL] origins = [ val for key , val in request . headers if key == [string] ] [EOL] if len ( origins ) > [number] : [EOL] origin = origins [ [number] ] [EOL] for allowed_url in WHITELIST : [EOL] if origin == allowed_url : [EOL] headers [ [string] ] = allowed_url [EOL] break [EOL] headers [ [string] ] = [string] [EOL] headers [ [string] ] = [string] [EOL] headers [ [string] ] = [string] [EOL] [EOL] [comment] [EOL] request_json = request . get_json ( ) [EOL] if request_json and [string] in request_json : [EOL] id = request_json [ [string] ] [EOL] format = [string] [EOL] elif request . args and [string] in request . args : [EOL] id = request . args . get ( [string] ) [EOL] format = [string] [EOL] else : [EOL] return ( [string] , headers ) [EOL] [EOL] [comment] [EOL] username , bc_data = _scrape_ustchecker ( id = id ) [EOL] if bc_data : [EOL] img_fn = _generate_grass_image ( id , username , bc_data ) [EOL] else : [EOL] img_fn = _generate_grass_image ( id , dummy = True ) [EOL] [EOL] [comment] [EOL] if format == [string] : [EOL] buf = BytesIO ( ) [EOL] img = Image . open ( img_fn ) [EOL] img . save ( buf , format = [string] , quality = [number] ) [EOL] base64_image = base64 . b64encode ( buf . getvalue ( ) ) [EOL] return ( json . dumps ( { [string] : base64_image . decode ( [string] ) } ) , headers ) [EOL] else : [EOL] return send_file ( img_fn , mimetype = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.timezonedatetime.datetime.timezone$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0