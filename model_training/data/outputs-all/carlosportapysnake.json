from distutils . core import setup [EOL] [EOL] setup ( name = [string] , version = [string] , author = [string] , author_email = [string] , description = open ( [string] ) . read ( ) , long_description = open ( [string] ) . read ( ) , py_modules = [ [string] , [string] ] , license = [string] , extras_require = { [string] : [string] } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Set , Iterator , Any , Tuple , Type , List , Callable [EOL] import typing [EOL] import builtins [EOL] import pysnake [EOL] from copy import deepcopy [EOL] from dataclasses import dataclass [EOL] from functools import wraps [EOL] from itertools import product [EOL] from random import choice [EOL] from typing import Tuple , NamedTuple , Callable , Any [EOL] [EOL] [comment] [EOL] IJ = Tuple [ int , int ] [EOL] Food = IJ [EOL] [EOL] [EOL] @ dataclass class Snake : [EOL] body = ... [EOL] direction = ... [EOL] [EOL] [EOL] @ dataclass class State : [EOL] rows = ... [EOL] cols = ... [EOL] points = ... [EOL] snake = ... [EOL] food = ... [EOL] [EOL] [EOL] [comment] [EOL] class _direction ( NamedTuple ) : [EOL] NORTH = ( - [number] , [number] ) [EOL] SOUTH = ( [number] , [number] ) [EOL] WEST = ( [number] , - [number] ) [EOL] EAST = ( [number] , [number] ) [EOL] [EOL] [EOL] Directions = _direction ( ) [EOL] [EOL] [EOL] def random_direction ( ) : [EOL] return choice ( Directions ) [EOL] [EOL] [EOL] [comment] [EOL] def deepcopy_params ( f ) : [EOL] @ wraps ( f ) def wrapper ( * args , ** kwargs ) : [EOL] return f ( * ( deepcopy ( x ) for x in args ) , ** { k : deepcopy ( v ) for k , v in kwargs . items ( ) } ) [EOL] return wrapper [EOL] [EOL] [EOL] [comment] [EOL] def initial_state ( rows , cols ) : [EOL] snake = Snake ( ( ( [number] , [number] ) , ) , Directions . EAST ) [EOL] return State ( rows , cols , [number] , snake , ( [number] , [number] ) ) [EOL] [EOL] [EOL] def random_state ( rows , cols ) : [EOL] state = initial_state ( rows , cols ) [EOL] state . snake = Snake ( ( random_empty_IJ ( state ) , ) , random_direction ( ) ) [EOL] state . food = random_empty_IJ ( state ) [EOL] return state [EOL] [EOL] [EOL] [comment] [EOL] def free_positions ( state ) : [EOL] positions = product ( range ( state . rows ) , range ( state . cols ) ) [EOL] free_options = set ( positions ) - set ( state . snake . body ) - set ( [ state . food ] ) [EOL] return free_options [EOL] [EOL] [EOL] def random_empty_IJ ( state ) : [EOL] positions = list ( free_positions ( state ) ) [EOL] if len ( positions ) > [number] : [EOL] return choice ( positions ) [EOL] return None [EOL] [EOL] [EOL] def calculate_new_IJ ( origen , direction ) : [EOL] return tuple ( sum ( i ) for i in zip ( origen , direction ) ) [EOL] [EOL] [EOL] def is_out_of_bounds ( ij , state ) : [EOL] i , j = ij [EOL] return not ( - [number] < i < state . rows and - [number] < j < state . cols ) [EOL] [EOL] [EOL] [comment] [EOL] def snake_head ( state ) : [EOL] return state . snake . body [ [number] ] [EOL] [EOL] [EOL] def snake_tail ( state ) : [EOL] return state . snake . body [ [number] : ] [EOL] [EOL] [EOL] def snake_direction ( state ) : [EOL] return state . snake . direction [EOL] [EOL] [EOL] def self_collision ( state , position ) : [EOL] if len ( state . snake . body ) > [number] : [EOL] return position in snake_tail ( state ) [ : - [number] ] [EOL] else : [EOL] return position in snake_tail ( state ) [EOL] [EOL] [EOL] @ deepcopy_params def change_snake_direction ( direction , state ) : [EOL] state . snake . direction = direction [EOL] return state [EOL] [EOL] [EOL] def next_snake_head ( state ) : [EOL] return calculate_new_IJ ( snake_head ( state ) , snake_direction ( state ) ) [EOL] [EOL] [EOL] def next_snake_tail ( state ) : [EOL] return state . snake . body [ : - [number] ] [EOL] [EOL] [EOL] def next_snake ( state ) : [EOL] body = ( next_snake_head ( state ) , ) + next_snake_tail ( state ) [EOL] direction = state . snake . direction [EOL] return Snake ( body , direction ) [EOL] [EOL] [EOL] @ deepcopy_params def move_snake ( state ) : [EOL] state . snake = next_snake ( state ) [EOL] return state [EOL] [EOL] [EOL] @ deepcopy_params def eat ( state ) : [EOL] state . snake . body = ( state . food , ) + state . snake . body [EOL] state . points += [number] [EOL] state . food = random_empty_IJ ( state ) [EOL] return state [EOL] [EOL] [EOL] @ deepcopy_params def next_state ( state ) : [EOL] head = next_snake_head ( state ) [EOL] if state . food == head : [EOL] return eat ( state ) [EOL] elif is_out_of_bounds ( head , state ) or self_collision ( state , head ) : [EOL] return None [EOL] else : [EOL] return move_snake ( state ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[IJ,...]$ 0 0 0 $IJ$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $Snake$ 0 0 0 $Food$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $IJ$ 0 0 0 0 0 0 0 0 $IJ$ 0 0 0 0 0 0 0 $IJ$ 0 0 0 0 0 0 0 0 $IJ$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import game [EOL] import typing [EOL] from os import system , name [EOL] [EOL] from readchar import readchar [EOL] [EOL] from game import ( change_snake_direction , snake_head , snake_tail , Directions , next_state , random_state , State ) [EOL] [EOL] [EOL] def _clear ( ) : [EOL] def win_cls ( ) : [EOL] system ( [string] ) [EOL] [EOL] def posix_clear ( ) : [EOL] system ( [string] ) [EOL] [EOL] if name is [string] : [EOL] return win_cls [EOL] else : [EOL] return posix_clear [EOL] [EOL] [EOL] clear = _clear ( ) [EOL] [EOL] [EOL] def draw ( state ) : [EOL] clear ( ) [EOL] print ( f' [string] { state . points } [string] { ( state . rows * state . cols ) - [number] } [string] ' ) [EOL] border = [string] . join ( [string] for i in range ( state . cols ) ) [EOL] print ( border ) [EOL] for i in range ( state . rows ) : [EOL] for j in range ( state . cols ) : [EOL] if ( i , j ) == snake_head ( state ) : [EOL] print ( [string] , end = [string] ) [EOL] elif ( len ( snake_tail ( state ) ) > [number] and ( i , j ) == snake_tail ( state ) [ - [number] ] ) : [EOL] print ( [string] , end = [string] ) [EOL] elif ( i , j ) in state . snake . body : [EOL] print ( [string] , end = [string] ) [EOL] elif ( i , j ) == state . food : [EOL] print ( [string] , end = [string] ) [EOL] else : [EOL] print ( [string] , end = [string] ) [EOL] print ( [string] ) [EOL] print ( border ) [EOL] [EOL] [EOL] def main ( ) : [EOL] rows = [number] [EOL] cols = [number] [EOL] state = random_state ( rows , cols ) [EOL] draw ( state ) [EOL] key = [string] [EOL] while state and key != [string] and state . points < ( rows * cols ) - [number] : [EOL] key = readchar ( ) [EOL] if key == [string] : [EOL] state = change_snake_direction ( Directions . NORTH , state ) [EOL] elif key == [string] : [EOL] state = change_snake_direction ( Directions . SOUTH , state ) [EOL] elif key == [string] : [EOL] state = change_snake_direction ( Directions . EAST , state ) [EOL] elif key == [string] : [EOL] state = change_snake_direction ( Directions . WEST , state ) [EOL] [EOL] state = next_state ( state ) [EOL] if state : [EOL] draw ( state ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Iterator , Literal , Any , Tuple , List [EOL] import typing [EOL] import pysnake [EOL] import typing_extensions [EOL] from itertools import product [EOL] [EOL] from pysnake import game [EOL] [EOL] [EOL] def test_free_positions ( ) : [EOL] state = game . initial_state ( [number] , [number] ) [EOL] state . snake . body = ( ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ) [EOL] state . food = ( [number] , [number] ) [EOL] [EOL] positions = sorted ( game . free_positions ( state ) ) [EOL] assert positions == sorted ( ( ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ) ) [EOL] [EOL] [EOL] def test_calculate_new_IJ ( ) : [EOL] origen = ( [number] , [number] ) [EOL] direction = ( [number] , [number] ) [EOL] assert game . calculate_new_IJ ( origen , direction ) == ( [number] , [number] ) [EOL] [EOL] origen = ( [number] , [number] ) [EOL] direction = ( [number] , [number] ) [EOL] assert game . calculate_new_IJ ( origen , direction ) == ( [number] , [number] ) [EOL] [EOL] [EOL] def test_is_out_of_bounds ( ) : [EOL] state = game . initial_state ( [number] , [number] ) [EOL] positions = product ( range ( state . rows ) , range ( state . cols ) ) [EOL] [EOL] for p in positions : [EOL] state . snake . body = ( p , ) [EOL] assert not game . is_out_of_bounds ( p , state ) [EOL] [EOL] assert game . is_out_of_bounds ( ( [number] , [number] ) , state ) [EOL] assert game . is_out_of_bounds ( ( - [number] , - [number] ) , state ) [EOL] assert game . is_out_of_bounds ( ( [number] , - [number] ) , state ) [EOL] assert game . is_out_of_bounds ( ( [number] , [number] ) , state ) [EOL] [EOL] [EOL] def test_snake_head ( ) : [EOL] state = game . initial_state ( [number] , [number] ) [EOL] state . snake . body = ( ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ) [EOL] assert game . snake_head ( state ) == ( [number] , [number] ) [EOL] [EOL] [EOL] def test_next_snake_head ( ) : [EOL] state = game . initial_state ( [number] , [number] ) [EOL] state . snake . body = ( ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ) [EOL] state . snake . direction = game . Directions . SOUTH [EOL] assert game . next_snake_head ( state ) == ( [number] , [number] ) [EOL] [EOL] state . snake . body = ( ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ) [EOL] state . snake . direction = game . Directions . NORTH [EOL] assert game . next_snake_head ( state ) == ( [number] , [number] ) [EOL] [EOL] [EOL] def test_next_snake_tail ( ) : [EOL] state = game . initial_state ( [number] , [number] ) [EOL] state . snake . body = ( ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ) [EOL] state . snake . direction = game . Directions . WEST [EOL] assert game . next_snake_tail ( state ) == ( ( [number] , [number] ) , ( [number] , [number] ) ) [EOL] [EOL] state . snake . body = ( ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ) [EOL] state . snake . direction = game . Directions . EAST [EOL] assert game . next_snake_tail ( state ) == ( ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ) [EOL] [EOL] [EOL] def test_next_snake ( ) : [EOL] state = game . initial_state ( [number] , [number] ) [EOL] state . snake . body = ( ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ) [EOL] state . snake . direction = game . Directions . EAST [EOL] assert game . next_snake ( state ) . body == ( ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ) [EOL] [EOL] state . snake . body = ( ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ) [EOL] state . snake . direction = game . Directions . SOUTH [EOL] assert game . next_snake ( state ) . body == ( ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ) [EOL] [EOL] [EOL] def test_move_WEST ( ) : [EOL] state = game . initial_state ( [number] , [number] ) [EOL] state . snake . body = ( ( [number] , [number] ) , ) [EOL] state . snake . direction = game . Directions . WEST [EOL] state = game . move_snake ( state ) [EOL] assert state . snake . body == ( ( [number] , [number] ) , ) [EOL] [EOL] state . snake . body = ( ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ) [EOL] state = game . move_snake ( state ) [EOL] assert state . snake . body == ( ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ) [EOL] [EOL] [EOL] def test_move_EAST ( ) : [EOL] state = game . initial_state ( [number] , [number] ) [EOL] state . snake . body = ( ( [number] , [number] ) , ) [EOL] state . snake . direction = game . Directions . EAST [EOL] state = game . move_snake ( state ) [EOL] assert state . snake . body == ( ( [number] , [number] ) , ) [EOL] [EOL] state . snake . body = ( ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ) [EOL] state = game . move_snake ( state ) [EOL] assert state . snake . body == ( ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ) [EOL] [EOL] [EOL] def test_move_NORTH ( ) : [EOL] state = game . initial_state ( [number] , [number] ) [EOL] state . snake . body = ( ( [number] , [number] ) , ) [EOL] state . snake . direction = game . Directions . NORTH [EOL] state = game . move_snake ( state ) [EOL] assert state . snake . body == ( ( [number] , [number] ) , ) [EOL] [EOL] state . snake . body = ( ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ) [EOL] state = game . move_snake ( state ) [EOL] assert state . snake . body == ( ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ) [EOL] [EOL] [EOL] def test_move_SOUTH ( ) : [EOL] state = game . initial_state ( [number] , [number] ) [EOL] state . snake . body = ( ( [number] , [number] ) , ) [EOL] state . snake . direction = game . Directions . SOUTH [EOL] state = game . move_snake ( state ) [EOL] assert state . snake . body == ( ( [number] , [number] ) , ) [EOL] [EOL] state . snake . body = ( ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ) [EOL] state = game . move_snake ( state ) [EOL] assert state . snake . body == ( ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ) [EOL] [EOL] [EOL] def test_eat ( ) : [EOL] state = game . initial_state ( [number] , [number] ) [EOL] state . snake . body = ( ( [number] , [number] ) , ) [EOL] state . food = ( [number] , [number] ) [EOL] state = game . eat ( state ) [EOL] assert state . snake . body == ( ( [number] , [number] ) , ( [number] , [number] ) ) [EOL] [EOL] [EOL] def test_next_state ( ) : [EOL] [comment] [EOL] state = game . initial_state ( [number] , [number] ) [EOL] state . snake . body = ( ( [number] , [number] ) , ) [EOL] state . food = ( [number] , [number] ) [EOL] state = game . next_state ( state ) [EOL] assert state . snake . body == ( ( [number] , [number] ) , ( [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] state = game . initial_state ( [number] , [number] ) [EOL] state . snake . body = ( ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ) [EOL] state . food = ( [number] , [number] ) [EOL] state = game . next_state ( state ) [EOL] assert state . snake . body == ( ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] state = game . initial_state ( [number] , [number] ) [EOL] state . snake . body = ( ( [number] , [number] ) , ) [EOL] [EOL] state . snake . direction = game . Directions . EAST [EOL] assert game . next_state ( state ) is None [EOL] [EOL] state . snake . direction = game . Directions . NORTH [EOL] assert game . next_state ( state ) is None [EOL] [EOL] state . snake . direction = game . Directions . SOUTH [EOL] assert game . next_state ( state ) is None [EOL] [EOL] state . snake . direction = game . Directions . WEST [EOL] assert game . next_state ( state ) is None [EOL] [EOL] [EOL] def test_next_move_is_the_snake_tail ( ) : [EOL] state = game . initial_state ( [number] , [number] ) [EOL] state . food = ( [number] , [number] ) [EOL] state . snake . direction = game . Directions . SOUTH [EOL] state . snake . body = ( ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ) [EOL] [EOL] state = game . next_state ( state ) [EOL] assert state . snake . body == ( ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ) [EOL] [EOL] state . snake . body = ( ( [number] , [number] ) , ( [number] , [number] ) ) [EOL] state = game . next_state ( state ) [EOL] assert state is None [EOL]	
	0
from typing import Any [EOL] import game [EOL] import typing [EOL] from os import system [EOL] [EOL] from readchar import readchar [EOL] [EOL] from game import ( change_snake_direction , Directions , next_state , random_state , State ) [EOL] [EOL] [EOL] def draw ( state ) : [EOL] system ( [string] ) [EOL] for i in range ( state . rows ) : [EOL] for j in range ( state . cols ) : [EOL] if ( i , j ) in state . snake . body : [EOL] print ( [string] , end = [string] ) [EOL] elif ( i , j ) == state . food : [EOL] print ( [string] , end = [string] ) [EOL] else : [EOL] print ( [string] , end = [string] ) [EOL] print ( ) [EOL] [EOL] [EOL] def main ( ) : [EOL] state = random_state ( [number] , [number] ) [EOL] key = [string] [EOL] while state and key != [string] : [EOL] draw ( state ) [EOL] key = readchar ( ) [EOL] if key == [string] : [EOL] state = change_snake_direction ( Directions . NORTH , state ) [EOL] elif key == [string] : [EOL] state = change_snake_direction ( Directions . SOUTH , state ) [EOL] elif key == [string] : [EOL] state = change_snake_direction ( Directions . EAST , state ) [EOL] elif key == [string] : [EOL] state = change_snake_direction ( Directions . WEST , state ) [EOL] [EOL] state = next_state ( state ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0