	0
from typing import Any [EOL] import typing [EOL] from rest_framework import routers [EOL] from apps . users . views import UserViewSet [EOL] from apps . wikipages . views import WikiPageViewSet [EOL] from rest_framework . schemas import get_schema_view [EOL] from rest_framework_swagger . renderers import SwaggerUIRenderer , OpenAPIRenderer [EOL] [EOL] [EOL] [comment] [EOL] api = routers . DefaultRouter ( ) [EOL] api . trailing_slash = [string] [EOL] [EOL] [comment] [EOL] api . register ( [string] , UserViewSet ) [EOL] [EOL] [comment] [EOL] api . register ( [string] , WikiPageViewSet ) [EOL] [EOL] [comment] [EOL] schema_view = get_schema_view ( title = [string] , renderer_classes = [ OpenAPIRenderer , SwaggerUIRenderer ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] from django . contrib import admin [EOL] from django . contrib . auth import logout [EOL] from django . conf . urls import include [EOL] [EOL] from graphene_django . views import GraphQLView [EOL] from rest_framework . documentation import include_docs_urls [EOL] [EOL] [EOL] from config . api import api , schema_view [EOL] from apps . wikipages import views [EOL] from . schema import schema as graph_schema [EOL] [EOL] urlpatterns = [ path ( [string] , admin . site . urls , name = [string] ) , path ( [string] , logout , { [string] : [string] } , name = [string] ) , path ( [string] , include ( api . urls ) ) , path ( [string] , include ( [string] , namespace = [string] ) ) , path ( [string] , schema_view , name = [string] ) , path ( [string] , include_docs_urls ( title = [string] , public = True , permission_classes = [ ] ) ) , path ( [string] , views . HelloWorldView . as_view ( ) , name = [string] ) , path ( [string] , GraphQLView . as_view ( graphiql = True , schema = graph_schema ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Type , Any , List [EOL] import backend [EOL] import typing [EOL] from django import forms [EOL] from django . contrib . auth . forms import ReadOnlyPasswordHashField [EOL] [EOL] from apps . users . models import User [EOL] [EOL] [EOL] class UserCreationForm ( forms . ModelForm ) : [EOL] [docstring] [EOL] password1 = forms . CharField ( label = [string] , widget = forms . PasswordInput ) [EOL] password2 = forms . CharField ( label = [string] , widget = forms . PasswordInput ) [EOL] [EOL] class Meta : [EOL] model = User [EOL] fields = [ [string] ] [EOL] [EOL] def clean_password2 ( self ) : [EOL] [comment] [EOL] password1 = self . cleaned_data . get ( [string] ) [EOL] password2 = self . cleaned_data . get ( [string] ) [EOL] if password1 and password2 and password1 != password2 : [EOL] raise forms . ValidationError ( [string] ) [EOL] return password2 [EOL] [EOL] def save ( self , commit = True ) : [EOL] [comment] [EOL] user = super ( ) . save ( commit = False ) [EOL] user . set_password ( self . cleaned_data [ [string] ] ) [EOL] if commit : [EOL] user . save ( ) [EOL] return user [EOL] [EOL] [EOL] class UserChangeForm ( forms . ModelForm ) : [EOL] [docstring] [EOL] help_text = [string] [EOL] password = ReadOnlyPasswordHashField ( label = [string] , help_text = help_text ) [EOL] [EOL] class Meta : [EOL] model = User [EOL] fields = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] def clean_password ( self ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] return self . initial [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.users.forms.UserCreationForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.users.forms.UserCreationForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.users.forms.UserChangeForm.Meta]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[backend.apps.users.forms.UserChangeForm]$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Type[backend.apps.users.forms.UserChangeForm.Meta]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Type , Any , Dict [EOL] import backend [EOL] import typing [EOL] import requests [EOL] from uuid import uuid4 [EOL] [EOL] from django . contrib . auth import authenticate , login [EOL] from django . conf import settings [EOL] from django . core . mail import send_mail [EOL] from django . template . loader import render_to_string [EOL] [EOL] from rest_framework import viewsets , status [EOL] from rest_framework . decorators import list_route [EOL] from rest_framework . response import Response [EOL] [EOL] from apps . users . models import User [EOL] from apps . users . serializers import UserSerializer , UserWriteSerializer [EOL] [EOL] [EOL] class UserViewSet ( viewsets . ModelViewSet ) : [EOL] queryset = User . objects . all ( ) [EOL] serializer_class = UserSerializer [EOL] permission_classes = [ ] [EOL] [EOL] def get_serializer_class ( self ) : [EOL] if self . action in [ [string] , [string] ] : [EOL] return UserSerializer [EOL] return UserWriteSerializer [EOL] [EOL] def perform_create ( self , serializer ) : [EOL] user = serializer . save ( ) [EOL] user . set_password ( self . request . data . get ( [string] ) ) [EOL] user . save ( ) [EOL] [EOL] def perform_update ( self , serializer ) : [EOL] user = serializer . save ( ) [EOL] if [string] in self . request . data : [EOL] user . set_password ( self . request . data . get ( [string] ) ) [EOL] user . save ( ) [EOL] [EOL] def perform_destroy ( self , instance ) : [EOL] instance . is_active = False [EOL] instance . save ( ) [EOL] [EOL] @ list_route ( methods = [ [string] ] ) def profile ( self , request ) : [EOL] if request . user . is_authenticated : [EOL] serializer = self . serializer_class ( request . user ) [EOL] return Response ( status = status . HTTP_200_OK , data = serializer . data ) [EOL] return Response ( status = status . HTTP_401_UNAUTHORIZED ) [EOL] [EOL] @ list_route ( methods = [ [string] ] ) def login ( self , request , format = None ) : [EOL] email = request . data . get ( [string] , None ) [EOL] password = request . data . get ( [string] , None ) [EOL] user = authenticate ( username = email , password = password ) [EOL] [EOL] if user : [EOL] login ( request , user ) [EOL] return Response ( status = status . HTTP_200_OK ) [EOL] return Response ( status = status . HTTP_404_NOT_FOUND ) [EOL] [EOL] @ list_route ( methods = [ [string] ] ) def register ( self , request ) : [EOL] last_name = request . data . get ( [string] , None ) [EOL] first_name = request . data . get ( [string] , None ) [EOL] email = request . data . get ( [string] , None ) [EOL] password = request . data . get ( [string] , None ) [EOL] [EOL] if User . objects . filter ( email__iexact = email ) . exists ( ) : [EOL] return Response ( { [string] : [number] } ) [EOL] [EOL] [comment] [EOL] user = User . objects . create ( email = email , password = password , last_name = last_name , first_name = first_name , is_admin = False , ) [EOL] return Response ( UserSerializer ( user ) . data , status = status . HTTP_201_CREATED ) [EOL] [EOL] @ list_route ( methods = [ [string] ] ) def password_reset ( self , request , format = None ) : [EOL] if User . objects . filter ( email = request . data [ [string] ] ) . exists ( ) : [EOL] user = User . objects . get ( email = request . data [ [string] ] ) [EOL] params = { [string] : user , [string] : settings . DOMAIN } [EOL] send_mail ( subject = [string] , message = render_to_string ( [string] , params ) , from_email = settings . DEFAULT_FROM_EMAIL , recipient_list = [ request . data [ [string] ] ] , ) [EOL] return Response ( status = status . HTTP_200_OK ) [EOL] else : [EOL] return Response ( status = status . HTTP_404_NOT_FOUND ) [EOL] [EOL] @ list_route ( methods = [ [string] ] ) def password_change ( self , request , format = None ) : [EOL] if User . objects . filter ( token = request . data [ [string] ] ) . exists ( ) : [EOL] user = User . objects . get ( token = request . data [ [string] ] ) [EOL] user . set_password ( request . data [ [string] ] ) [EOL] user . token = uuid4 ( ) [EOL] user . save ( ) [EOL] return Response ( status = status . HTTP_200_OK ) [EOL] else : [EOL] return Response ( status = status . HTTP_404_NOT_FOUND ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class UsersConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
	0
	0
from typing import Type , List [EOL] import backend [EOL] import typing [EOL] from django . db import models [EOL] [EOL] from apps . users . models import User [EOL] [EOL] [EOL] class WikiPage ( models . Model ) : [EOL] title = models . CharField ( max_length = [number] ) [EOL] text = models . TextField ( ) [EOL] author = models . ForeignKey ( User , related_name = [string] , on_delete = models . CASCADE ) [EOL] created_at = models . DateTimeField ( auto_now_add = True ) [EOL] updated_at = models . DateTimeField ( auto_now = True ) [EOL] [EOL] @ property def is_updated ( self ) : [EOL] return self . created_at . replace ( microsecond = [number] ) != self . updated_at . replace ( microsecond = [number] ) [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL] ordering = [ [string] ] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . title [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.wikipages.models.WikiPage]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.wikipages.models.WikiPage]$ 0 0 0 0 0 0 0 $typing.Type[backend.apps.wikipages.models.WikiPage]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.wikipages.models.WikiPage]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.wikipages.models.WikiPage]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type , List [EOL] import backend [EOL] import typing [EOL] from rest_framework import serializers [EOL] [EOL] from apps . wikipages . models import WikiPage [EOL] [EOL] [EOL] class WikiPageSerializer ( serializers . ModelSerializer ) : [EOL] created_at = serializers . DateTimeField ( format = [string] , read_only = True ) [EOL] updated_at = serializers . DateTimeField ( format = [string] , read_only = True ) [EOL] [EOL] class Meta : [EOL] model = WikiPage [EOL] fields = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] class HelloNameSerializer ( serializers . Serializer ) : [EOL] name = serializers . CharField ( max_length = [number] ) [EOL] [comment] [EOL] [EOL] def validate_name ( self , name ) : [EOL] [docstring] [EOL] if name not in self . context . get ( [string] , [ ] ) : [EOL] raise serializers . ValidationError ( [string] . format ( self . context . get ( [string] , [ ] ) ) ) [EOL] return name [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.wikipages.serializers.WikiPageSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.wikipages.serializers.WikiPageSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.wikipages.serializers.WikiPageSerializer.Meta]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.wikipages.serializers.HelloNameSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class WikiPagesConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] from datetime import timedelta [EOL] [EOL] from django . test import TestCase [EOL] from django . utils import timezone [EOL] from django . urls import reverse [EOL] [EOL] from rest_framework import status [EOL] from rest_framework . test import APITestCase [EOL] [EOL] from apps . wikipages . models import WikiPage [EOL] [EOL] [EOL] class WikiPageModelTestCase ( TestCase ) : [EOL] def setUp ( self ) : [EOL] WikiPage . objects . create ( title = [string] , text = [string] ) [EOL] WikiPage . objects . create ( title = [string] , text = [string] ) [EOL] [EOL] def test_wikipage_is_updated ( self ) : [EOL] wp1 = WikiPage . objects . get ( title = [string] ) [EOL] wp2 = WikiPage . objects . get ( title = [string] ) [EOL] [comment] [EOL] now = timezone . now ( ) - timedelta ( seconds = [number] ) [EOL] wp2 . created_at = now [EOL] wp2 . text = [string] [EOL] wp2 . save ( ) [EOL] self . assertEqual ( wp1 . is_updated , False ) [EOL] self . assertEqual ( wp2 . is_updated , True ) [EOL] [EOL] def test_wikipage_name_is_title ( self ) : [EOL] wp1 = WikiPage . objects . get ( title = [string] ) [EOL] wp2 = WikiPage . objects . get ( title = [string] ) [EOL] expected_object_name1 = wp1 . title [EOL] expected_object_name2 = wp2 . title [EOL] self . assertEqual ( expected_object_name1 , str ( wp1 ) ) [EOL] self . assertEqual ( expected_object_name2 , str ( wp2 ) ) [EOL] [EOL] [EOL] class WikiPageAPITestCase ( APITestCase ) : [EOL] [EOL] def test_can_create_wikipage ( self ) : [EOL] wiki_data = { [string] : [string] , [string] : [string] } [EOL] response = self . client . post ( reverse ( [string] ) , wiki_data ) [EOL] wp = WikiPage . objects . get ( title = [string] ) [EOL] self . assertEqual ( response . status_code , status . HTTP_201_CREATED ) [EOL] self . assertEqual ( wp . title , [string] ) [EOL] [EOL] def test_can_read_wikipage_list ( self ) : [EOL] WikiPage . objects . create ( title = [string] , text = [string] ) [EOL] response = self . client . get ( reverse ( [string] ) ) [EOL] self . assertEqual ( response . status_code , status . HTTP_200_OK ) [EOL] self . assertEqual ( len ( response . data ) , [number] ) [EOL] [EOL] def test_can_read_wikipage_detail ( self ) : [EOL] WikiPage . objects . create ( title = [string] , text = [string] ) [EOL] wp = WikiPage . objects . get ( title = [string] ) [EOL] response = self . client . get ( reverse ( [string] , args = [ wp . id ] ) ) [EOL] self . assertEqual ( response . status_code , status . HTTP_200_OK ) [EOL] self . assertEqual ( response . data [ [string] ] , [string] ) [EOL] self . assertEqual ( response . data [ [string] ] , [string] ) [EOL] self . assertEqual ( response . data [ [string] ] , False ) [EOL] [EOL] def test_can_update_wikipage_detail ( self ) : [EOL] WikiPage . objects . create ( title = [string] , text = [string] ) [EOL] wp = WikiPage . objects . get ( title = [string] ) [EOL] new_wiki_data = { [string] : [string] , [string] : [string] } [EOL] response = self . client . put ( reverse ( [string] , args = [ wp . id ] ) , new_wiki_data ) [EOL] updated_wp = WikiPage . objects . get ( id = wp . id ) [EOL] self . assertEqual ( response . status_code , status . HTTP_200_OK ) [EOL] self . assertEqual ( updated_wp . title , [string] ) [EOL] self . assertEqual ( updated_wp . text , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
from typing import Tuple , Type , Dict , Any , List [EOL] import backend [EOL] import typing [EOL] from rest_framework import viewsets [EOL] from rest_framework . generics import GenericAPIView [EOL] from rest_framework . response import Response [EOL] [comment] [EOL] [EOL] from apps . wikipages . models import WikiPage [EOL] from apps . wikipages . serializers import WikiPageSerializer , HelloNameSerializer [EOL] [EOL] [EOL] [EOL] [EOL] class WikiPageViewSet ( viewsets . ModelViewSet ) : [EOL] queryset = WikiPage . objects . all ( ) [EOL] serializer_class = WikiPageSerializer [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] filterset_fields = ( [string] , ) [EOL] [EOL] [EOL] class HelloWorldView ( GenericAPIView ) : [EOL] serializer_class = HelloNameSerializer [EOL] [EOL] def get ( self , request ) : [EOL] return Response ( { [string] : [string] } ) [EOL] [EOL] def post ( self , request ) : [EOL] name = request . data . get ( [string] ) [EOL] if not name : [EOL] return Response ( { [string] : [string] } ) [EOL] context = { [string] : [ [string] , [string] ] } [EOL] serializer = HelloNameSerializer ( data = request . data , context = context ) [EOL] serializer . is_valid ( raise_exception = True ) [EOL] return Response ( { [string] : [string] . format ( name ) } ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.wikipages.views.WikiPageViewSet]$ 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.wikipages.views.WikiPageViewSet]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.apps.wikipages.views.HelloWorldView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterModelOptions ( name = [string] , options = { [string] : [ [string] ] , [string] : [string] , [string] : [string] } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0