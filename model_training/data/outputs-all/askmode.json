import mode [EOL] [EOL] [EOL] class MyService ( mode . Service ) : [EOL] [EOL] async def on_started ( self ) : [EOL] self . log . info ( [string] ) [EOL] [EOL] @ mode . Service . task async def _background_task ( self ) : [EOL] print ( [string] ) [EOL] while not self . should_stop : [EOL] await self . sleep ( [number] ) [EOL] print ( [string] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] mode . Worker ( MyService ( ) , loglevel = [string] , logfile = None , daemon = True , ) . execute_from_commandline ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import MutableMapping , List , Any [EOL] import io [EOL] import builtins [EOL] import typing [EOL] import mode [EOL] import examples [EOL] from typing import Any , List , MutableMapping [EOL] [EOL] from aiohttp . web import Application [EOL] from mode import Service [EOL] from mode . threads import ServiceThread [EOL] from mode . utils . objects import cached_property [EOL] [EOL] [EOL] class User : [EOL] ... [comment] [EOL] [EOL] [EOL] def remove_expired_users ( d ) : [EOL] print ( [string] ) [EOL] ... [comment] [EOL] [EOL] [EOL] async def run_websocket_server ( ) : [EOL] print ( [string] ) [EOL] ... [comment] [EOL] [EOL] [EOL] class Websockets ( Service ) : [EOL] [EOL] def __init__ ( self , port = [number] , ** kwargs ) : [EOL] self . port = [number] [EOL] self . _server = None [EOL] super ( ) . __init__ ( ** kwargs ) [EOL] [EOL] async def on_start ( self ) : [EOL] self . _server = await run_websocket_server ( ) [EOL] [EOL] async def on_stop ( self ) : [EOL] if self . _server is not None : [EOL] self . _server . close ( ) [EOL] [EOL] [EOL] class Webserver ( ServiceThread ) : [EOL] [EOL] def __init__ ( self , port = [number] , bind = None , ** kwargs ) : [EOL] self . _app = Application ( ) [EOL] self . port = port [EOL] self . bind = bind [EOL] self . _handler = None [EOL] self . _srv = None [EOL] super ( ) . __init__ ( ** kwargs ) [EOL] [EOL] async def on_start ( self ) : [EOL] handler = self . _handler = self . _app . make_handler ( ) [EOL] [comment] [EOL] [comment] [EOL] self . _srv = await self . loop . create_server ( handler , self . bind , self . port ) [EOL] self . log . info ( [string] , self . port ) [EOL] [EOL] async def on_thread_stop ( self ) : [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] if self . _srv is not None : [EOL] self . log . info ( [string] ) [EOL] self . _srv . close ( ) [EOL] self . log . info ( [string] ) [EOL] await self . _srv . wait_closed ( ) [EOL] if self . _app is not None : [EOL] self . log . info ( [string] ) [EOL] await self . _app . shutdown ( ) [EOL] if self . _handler is not None : [EOL] self . log . info ( [string] ) [EOL] await self . _handler . shutdown ( [number] ) [EOL] if self . _app is not None : [EOL] self . log . info ( [string] ) [EOL] await self . _app . cleanup ( ) [EOL] [EOL] [EOL] class UserCache ( Service ) : [EOL] _cache = ... [EOL] [EOL] def __post_init__ ( self ) : [EOL] self . _cache = { } [EOL] [EOL] async def lookup ( self , user_id ) : [EOL] try : [EOL] return self . _cache [ user_id ] [EOL] except KeyError : [EOL] user = self . _cache [ user_id ] = await User . objects . get ( user_id ) [EOL] return user [EOL] [EOL] @ Service . timer ( [number] ) async def _remove_expired ( self ) : [EOL] remove_expired_users ( self . _cache ) [EOL] [EOL] [EOL] class App ( Service ) : [EOL] [EOL] def __init__ ( self , web_port = [number] , web_bind = None , websocket_port = [number] , ** kwargs ) : [EOL] self . web_port = web_port [EOL] self . web_bind = web_bind [EOL] self . websocket_port = websocket_port [EOL] super ( ) . __init__ ( ** kwargs ) [EOL] [EOL] def on_init_dependencies ( self ) : [EOL] return [ self . websockets , self . webserver , self . user_cache , ] [EOL] [EOL] async def on_start ( self ) : [EOL] import pydot [EOL] import io [EOL] o = io . StringIO ( ) [EOL] beacon = self . beacon . root or self . beacon [EOL] beacon . as_graph ( ) . to_dot ( o ) [EOL] graph , = pydot . graph_from_dot_data ( o . getvalue ( ) ) [EOL] print ( [string] ) [EOL] with open ( [string] , [string] ) as fh : [EOL] fh . write ( graph . create_png ( ) ) [EOL] [EOL] @ cached_property def websockets ( self ) : [EOL] return Websockets ( port = self . websocket_port , loop = self . loop , beacon = self . beacon , ) [EOL] [EOL] @ cached_property def webserver ( self ) : [EOL] return Webserver ( port = self . web_port , bind = self . web_bind , loop = self . loop , beacon = self . beacon , ) [EOL] [EOL] @ cached_property def user_cache ( self ) : [EOL] return UserCache ( loop = self . loop , beacon = self . beacon ) [EOL] [EOL] [EOL] app = App ( ) [EOL] [EOL] if __name__ == [string] : [EOL] from mode . worker import Worker [EOL] Worker ( app , loglevel = [string] , daemon = True ) . execute_from_commandline ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.MutableMapping[builtins.str,User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $io.StringIO$ 0 0 0 0 0 0 0 $mode.utils.types.trees.NodeT[typing.Any]$ 0 0 0 $mode.utils.types.trees.NodeT[typing.Any]$ 0 0 0 0 0 $mode.utils.types.trees.NodeT[typing.Any]$ 0 $mode.utils.types.trees.NodeT[typing.Any]$ 0 0 0 0 0 0 0 $io.StringIO$ 0 0 0 0 0 0 0 0 0 $io.StringIO$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Websockets$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Webserver$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $UserCache$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import pytest [EOL] [EOL] [EOL] @ pytest . fixture ( ) def loop ( event_loop ) : [EOL] return event_loop [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
	0