from setuptools import setup , find_packages [EOL] [EOL] [EOL] with open ( [string] ) as file : [EOL] description = file . read ( ) [EOL] [EOL] [EOL] setup ( name = [string] , version = [string] , author = [string] , description = [string] , long_description = description , long_description_content_type = [string] , url = [string] , packages = find_packages ( ) , classifiers = [ [string] , [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import json [EOL] import utils . config as config [EOL] [EOL] [EOL] single_user_config = [string] [EOL] with open ( single_user_config ) as file : [EOL] config . config = config . Config . from_dict ( [string] , json . load ( file ) ) [EOL] [EOL] [EOL] from server . server import server [EOL] from utils . log import get_logger [EOL] [EOL] [EOL] log = get_logger ( [string] ) [EOL] log . info ( [string] ) [EOL] server . debug = True [EOL] server . run ( ) [EOL] log . info ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import argparse [EOL] import json [EOL] from argparse import ArgumentParser [EOL] import utils . config as config [EOL] [EOL] [EOL] parser = ArgumentParser ( ) [EOL] parser . add_argument ( [string] ) [EOL] args = parser . parse_args ( ) [EOL] [EOL] if args . config : [EOL] with open ( args . config ) as file : [EOL] config . config = config . Config . from_dict ( [string] , json . load ( file ) ) [EOL] [EOL] [EOL] from server . server import server [EOL] from utils . log import get_logger [EOL] [EOL] [EOL] log = get_logger ( [string] ) [EOL] log . info ( [string] ) [EOL] server . debug = config . config [ [string] ] [EOL] server . run ( ) [EOL] log . info ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 $argparse.Namespace$ 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
	0
from typing import Any , Dict , Union , Sequence [EOL] import aggregator [EOL] import builtins [EOL] import pathlib [EOL] import typing [EOL] import jinja2 [EOL] from typing import Any , Union , Sequence , TypeVar [EOL] from pathlib import Path [EOL] from enum import IntEnum [EOL] from jinja2 import Template , FileSystemLoader , Environment [EOL] from utils . log import get_logger [EOL] [EOL] [EOL] log = get_logger ( [string] ) [EOL] [EOL] [EOL] class PluginSize ( IntEnum ) : [EOL] SMALL = [number] , [EOL] WIDE = [number] , [EOL] TALL = [number] , [EOL] BIG = [number] , [EOL] FULL = [number] [EOL] [EOL] [EOL] class Param : [EOL] [docstring] [EOL] [EOL] __paramtype__ = [string] [EOL] [EOL] def __init__ ( self , name , description , default = None ) : [EOL] [docstring] [EOL] self . name = name [EOL] self . description = description [EOL] self . default = default [EOL] [EOL] def validate ( self , value ) : [EOL] [docstring] [EOL] return value [EOL] [EOL] [EOL] class BoolParam ( Param ) : [EOL] [EOL] __paramtype__ = [string] [EOL] [EOL] def __init__ ( self , name , description , default = False ) : [EOL] super ( ) . __init__ ( name , description , default ) [EOL] [EOL] def validate ( self , value ) : [EOL] if value == [string] : [EOL] return True [EOL] elif value == [string] : [EOL] return False [EOL] return bool ( value ) [EOL] [EOL] [EOL] class StringParam ( Param ) : [EOL] [EOL] __paramtype__ = [string] [EOL] [EOL] def __init__ ( self , name , description , default = [string] ) : [EOL] super ( ) . __init__ ( name , description , default ) [EOL] [EOL] def validate ( self , value ) : [EOL] return str ( value ) [EOL] [EOL] [EOL] class NumberParam ( Param ) : [EOL] [EOL] __paramtype__ = [string] [EOL] [EOL] def __init__ ( self , name , description , default = None , min = None , max = None , step = [number] ) : [EOL] super ( ) . __init__ ( name , description , default ) [EOL] self . min = min [EOL] self . max = max [EOL] self . step = step [EOL] [EOL] def validate ( self , value ) : [EOL] if isinstance ( self . step , int ) : [EOL] return int ( value ) [EOL] else : [EOL] return float ( value ) [EOL] [EOL] [EOL] class ComplexParam ( Param ) : [EOL] [EOL] __paramtype__ = [string] [EOL] [EOL] def __init__ ( self , name , description , type , default = None ) : [EOL] super ( ) . __init__ ( name , description , default ) [EOL] self . type = type [EOL] [EOL] def validate ( self , value ) : [EOL] return [ t . validate ( v ) for t , v in zip ( self . type , value ) ] [EOL] [EOL] [EOL] class ListParam ( Param ) : [EOL] [EOL] __paramtype__ = [string] [EOL] [EOL] def __init__ ( self , name , description , type , default = None ) : [EOL] super ( ) . __init__ ( name , description , default ) [EOL] [EOL] def validate ( self , value ) : [EOL] return [ self . type . validate ( v ) for v in value ] [EOL] [EOL] [EOL] class Plugin : [EOL] [EOL] __pluginname__ = [string] [EOL] __paramschema__ = [ ] [EOL] __location__ = [string] [EOL] __sizes__ = [ ] [EOL] [EOL] def __init__ ( self , id , size , params = { } , user_data = { } ) : [EOL] self . id = id [EOL] self . params = params [EOL] self . size = size [EOL] for param in self . __paramschema__ : [EOL] if param . name not in self . params : [EOL] self . params [ param . name ] = param . default [EOL] self . user_data = user_data [EOL] [EOL] def get_payload ( self ) : [EOL] return None [EOL] [EOL] def get_template ( self , template ) : [EOL] path = Path ( self . __location__ ) . parent . joinpath ( [string] ) [EOL] loader = FileSystemLoader ( searchpath = str ( path ) ) [EOL] env = Environment ( loader = loader ) [EOL] return env . get_template ( template ) [EOL] [EOL] def render ( self ) : [EOL] if self . size is PluginSize . SMALL : [EOL] return self . render_small ( ) [EOL] elif self . size is PluginSize . WIDE : [EOL] return self . render_wide ( ) [EOL] elif self . size is PluginSize . TALL : [EOL] return self . render_tall ( ) [EOL] elif self . size is PluginSize . BIG : [EOL] return self . render_big ( ) [EOL] elif self . size is PluginSize . FULL : [EOL] return self . render_full ( ) [EOL] [EOL] def render_small ( self ) : [EOL] template = self . get_template ( [string] ) [EOL] return template . render ( params = self . params , user_data = self . user_data , payload = self . get_payload ( ) ) [EOL] [EOL] def render_wide ( self ) : [EOL] template = self . get_template ( [string] ) [EOL] return template . render ( params = self . params , user_data = self . user_data , payload = self . get_payload ( ) ) [EOL] [EOL] def render_tall ( self ) : [EOL] template = self . get_template ( [string] ) [EOL] return template . render ( params = self . params , user_data = self . user_data , payload = self . get_payload ( ) ) [EOL] [EOL] def render_big ( self ) : [EOL] template = self . get_template ( [string] ) [EOL] return template . render ( params = self . params , user_data = self . user_data , payload = self . get_payload ( ) ) [EOL] [EOL] def render_full ( self ) : [EOL] template = self . get_template ( [string] ) [EOL] return template . render ( params = self . params , user_data = self . user_data , payload = self . get_payload ( ) )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Sequence[Param]$ 0 0 0 0 $builtins.str$ 0 0 0 $typing.Sequence[PluginSize]$ 0 0 0 0 0 0 0 0 0 0 0 0 $aggregator.aggregator.plugin.PluginSize$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $aggregator.aggregator.plugin.PluginSize$ 0 $aggregator.aggregator.plugin.PluginSize$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $jinja2.Template$ 0 0 0 $builtins.str$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jinja2.loaders.FileSystemLoader$ 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 $jinja2.environment.Environment$ 0 0 0 $jinja2.loaders.FileSystemLoader$ 0 $jinja2.loaders.FileSystemLoader$ 0 0 0 $jinja2.environment.Environment$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $jinja2.environment.Template$ 0 0 0 0 0 0 0 0 0 $jinja2.environment.Template$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $jinja2.environment.Template$ 0 0 0 0 0 0 0 0 0 $jinja2.environment.Template$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $jinja2.environment.Template$ 0 0 0 0 0 0 0 0 0 $jinja2.environment.Template$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $jinja2.environment.Template$ 0 0 0 0 0 0 0 0 0 $jinja2.environment.Template$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $jinja2.environment.Template$ 0 0 0 0 0 0 0 0 0 $jinja2.environment.Template$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import flask [EOL] from flask import Flask [EOL] from utils . config import config [EOL] from server . single . server import single_user_server [EOL] from server . single . admin import admin_panel [EOL] from server . multi . server import multi_user_server [EOL] from utils . log import get_logger [EOL] [EOL] [EOL] log = get_logger ( [string] ) [EOL] server = Flask ( __name__ ) [EOL] if config [ [string] ] == [string] : [EOL] server . register_blueprint ( single_user_server ) [EOL] if config [ [string] ] [ [string] ] : [EOL] server . register_blueprint ( admin_panel ) [EOL] log . info ( [string] ) [EOL] elif config [ [string] ] == [string] : [EOL] server . register_blueprint ( multi_user_server ) [EOL] log . info ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 $flask.app.Flask$ 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
	0
	0
import flask [EOL] from flask import Blueprint [EOL] [EOL] [EOL] multi_user_server = Blueprint ( [string] , __name__ )	0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import peewee as sql [EOL] from playhouse . postgres_ext import PostgresqlExtDatabase , JSONField [EOL] from utils . config import config [EOL] [EOL] [EOL] db = PostgresqlExtDatabase ( config [ [string] ] [ [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , Type [EOL] import typing [EOL] import aggregator [EOL] import playhouse [EOL] import peewee as sql [EOL] from playhouse . sqlite_ext import SqliteExtDatabase , JSONField [EOL] from utils . config import config [EOL] from utils . log import get_logger [EOL] [EOL] [EOL] def connect ( ) : [EOL] log = get_logger ( [string] ) [EOL] log . debug ( f' [string] { config [ [string] ] [ [string] ] } [string] ' ) [EOL] return SqliteExtDatabase ( config [ [string] ] [ [string] ] ) [EOL] [EOL] [EOL] db = connect ( ) [EOL] [EOL] [EOL] class UserModel ( sql . Model ) : [EOL] [EOL] id = sql . PrimaryKeyField ( ) [EOL] username = sql . CharField ( null = False , unique = True ) [EOL] password = sql . CharField ( null = True , default = None ) [EOL] settings = JSONField ( null = True , default = None ) [EOL] [EOL] class Meta : [EOL] database = db [EOL] [EOL] [EOL] class PluginModel ( sql . Model ) : [EOL] [EOL] id = sql . PrimaryKeyField ( ) [EOL] user = sql . ForeignKeyField ( UserModel , [string] , [string] ) [EOL] plugin = sql . TextField ( null = False ) [EOL] size = sql . IntegerField ( null = False ) [EOL] params = JSONField ( null = False , default = { } ) [EOL] data = JSONField ( null = False , default = { } ) [EOL] [EOL] class Meta : [EOL] database = db [EOL] [EOL] [EOL] db . create_tables ( [ UserModel , PluginModel ] ) [EOL] db . close ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $playhouse.sqlite_ext.SqliteExtDatabase$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[aggregator.server.single._sqlite.UserModel]$ 0 0 0 0 0 0 0 $typing.Type[aggregator.server.single._sqlite.UserModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[aggregator.server.single._sqlite.UserModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[aggregator.server.single._sqlite.UserModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[aggregator.server.single._sqlite.PluginModel.Meta]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[aggregator.server.single._sqlite.PluginModel]$ 0 0 0 0 0 0 0 $typing.Type[aggregator.server.single._sqlite.PluginModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[aggregator.server.single._sqlite.PluginModel]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[aggregator.server.single._sqlite.PluginModel]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[aggregator.server.single._sqlite.PluginModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[aggregator.server.single._sqlite.PluginModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[aggregator.server.single._sqlite.PluginModel.Meta]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import flask [EOL] from flask import Blueprint , render_template , request [EOL] from server . single . database import PluginModel [EOL] [EOL] [EOL] admin_panel = Blueprint ( [string] , __name__ , url_prefix = [string] ) [EOL] [EOL] [EOL] @ admin_panel . route ( [string] , methods = [ [string] , [string] , [string] , [string] ] ) def admin ( ) : [EOL] if request . method == [string] : [EOL] plugins = list ( PluginModel . select ( ) ) [EOL] return render_template ( [string] , plugins = plugins ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from utils . config import config [EOL] from utils . log import get_logger [EOL] [EOL] [EOL] log = get_logger ( [string] ) [EOL] if config [ [string] ] [ [string] ] == [string] : [EOL] import server . single . _sqlite [EOL] database = server . single . _sqlite . db [EOL] PluginModel = server . single . _sqlite . PluginModel [EOL] UserModel = server . single . _sqlite . UserModel [EOL] elif config [ [string] ] [ [string] ] == [string] : [EOL] import server . single . _postgres [EOL] database = server . single . _postgres . db [EOL] PluginModel = server . single . _postgres . PluginModel [EOL] else : [EOL] log . error ( f' [string] { config [ [string] ] [ [string] ] }' ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Union , Dict , List [EOL] import typing [EOL] import flask [EOL] from flask import Blueprint , render_template [EOL] from server . single . database import database [EOL] from aggregator . register import register [EOL] from server . single . database import PluginModel , UserModel [EOL] from server . single . admin import admin_panel [EOL] from utils . log import get_logger [EOL] [EOL] [EOL] log = get_logger ( [string] ) [EOL] single_user_server = Blueprint ( [string] , __name__ ) [EOL] plugins = [ ] [EOL] for plugin in PluginModel . select ( ) : [EOL] plugins . append ( register [ plugin . plugin ] ) [EOL] [EOL] [EOL] @ single_user_server . route ( [string] , methods = [ [string] ] ) def index ( ) : [EOL] plugins = register . list_plugins ( ) [EOL] models = list ( PluginModel . select ( ) ) [EOL] views = [ [ register [ m . plugin ] ( m . id , m . size , m . params , m . data ) for m in models ] ] [EOL] layout = { [string] : len ( views ) , [string] : len ( views [ [number] ] ) , [string] : views } [EOL] return render_template ( [string] , layout = layout , plugins = plugins ) [EOL] [EOL] [EOL] @ single_user_server . route ( [string] , methods = [ [string] ] ) def add_plugin ( plugin ) : [EOL] if plugin in register : [EOL] user , _ = UserModel . get_or_create ( username = [string] ) [EOL] size = register [ plugin ] . __sizes__ [ [number] ] [EOL] view = PluginModel ( plugin = plugin , user = user , size = size ) [EOL] view . save ( ) [EOL] return [string] , [number] [EOL] return [string] , [number] [EOL] [EOL] [EOL] @ single_user_server . route ( [string] , methods = [ [string] ] ) def remove_plugin ( id ) : [EOL] plugin = PluginModel . get_or_none ( id = id ) [EOL] if plugin : [EOL] plugin . delete_instance ( ) [EOL] return [string] , [number] [EOL] return [string] , [number] [EOL] [EOL] [EOL] @ single_user_server . route ( [string] , methods = [ [string] ] ) def save_param ( plugin_id , param_name , value ) : [EOL] log . debug ( f' [string] { value }' ) [EOL] plugin = PluginModel . get_or_none ( id = plugin_id ) [EOL] if plugin and plugin . plugin in register : [EOL] schema = register [ plugin . plugin ] . __paramschema__ [EOL] for param in schema : [EOL] if param_name == param . name : [EOL] params = plugin . params [EOL] if not params : [EOL] params = { } [EOL] params [ param_name ] = param . validate ( value ) [EOL] plugin . params = params [EOL] plugin . save ( ) [EOL] return [string] , [number] [EOL] return [string] , [number] [EOL] [EOL] [EOL] @ single_user_server . route ( [string] , methods = [ [string] ] ) def save_size ( plugin_id , size ) : [EOL] plugin = PluginModel . get_or_none ( id = plugin_id ) [EOL] if plugin and plugin . plugin in register : [EOL] sizes = register [ plugin . plugin ] . __sizes__ [EOL] if size in sizes : [EOL] plugin . size = size [EOL] plugin . save ( ) [EOL] return [string] , [number] [EOL] return [string] , [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Optional [EOL] import builtins [EOL] import typing [EOL] import logging [EOL] import logging [EOL] from typing import Optional [EOL] from sys import stdout , stderr [EOL] from utils . config import config [EOL] [EOL] [EOL] _logger = None [EOL] [EOL] [EOL] def get_logger ( name ) : [EOL] [docstring] [EOL] global _logger [EOL] if not _logger : [EOL] _logger = logging . getLogger ( ) [EOL] _logger . setLevel ( [number] ) [EOL] _logger . addHandler ( logging . NullHandler ( [number] ) ) [EOL] formatter = logging . Formatter ( [string] ) [EOL] for info in config [ [string] ] [ [string] ] : [EOL] if info [ [string] ] : [EOL] if info [ [string] ] == [string] : [EOL] handler = logging . FileHandler ( info [ [string] ] ) [EOL] handler . setLevel ( info [ [string] ] ) [EOL] handler . setFormatter ( formatter ) [EOL] _logger . addHandler ( handler ) [EOL] elif info [ [string] ] == [string] : [EOL] if info [ [string] ] == [string] : [EOL] handler = logging . StreamHandler ( stdout ) [EOL] handler . setLevel ( info [ [string] ] ) [EOL] handler . setFormatter ( formatter ) [EOL] _logger . addHandler ( handler ) [EOL] elif info [ [string] ] == [string] : [EOL] handler = logging . StreamHandler ( stderr ) [EOL] handler . setLevel ( info [ [string] ] ) [EOL] handler . setFormatter ( formatter ) [EOL] _logger . addHandler ( handler ) [EOL] return logging . getLogger ( name ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import aggregator [EOL] import pytest [EOL] from aggregator . utils . config import Config , ConfigItem [EOL] [EOL] [EOL] def test_write_read_non_locked_item ( ) : [EOL] item = ConfigItem ( [string] , [number] ) [EOL] assert item . get ( ) == [number] [EOL] item . set ( [number] ) [EOL] assert item . get ( ) == [number] [EOL] [EOL] [EOL] def test_lock_unlock_item ( ) : [EOL] item = ConfigItem ( [string] , [number] , True ) [EOL] assert item . get ( ) == [number] [EOL] item . set ( [number] ) [EOL] assert item . get ( ) == [number] [EOL] item . unlock ( ) [EOL] item . set ( [number] ) [EOL] assert item . get ( ) == [number] [EOL] item . lock ( ) [EOL] item . set ( [number] ) [EOL] assert item . get ( ) == [number] [EOL] [EOL] [EOL] def test_static_item ( ) : [EOL] item = ConfigItem ( [string] , [number] , True , True ) [EOL] assert item . get ( ) == [number] [EOL] item . set ( [number] ) [EOL] assert item . get ( ) == [number] [EOL] item . unlock ( ) [EOL] item . set ( [number] ) [EOL] assert item . get ( ) == [number] [EOL] [EOL] [EOL] def test_config_register ( ) : [EOL] config = Config ( [string] ) [EOL] config . register ( ConfigItem ( [string] , [number] ) ) [EOL] assert config [ [string] ] == [number] [EOL] subconfig = Config ( [string] ) [EOL] subconfig . register ( ConfigItem ( [string] , [number] ) ) [EOL] config . register ( subconfig ) [EOL] assert config [ [string] ] [ [string] ] == [number] [EOL] [EOL] [EOL] def test_config_inexistent ( ) : [EOL] config = Config ( [string] ) [EOL] config [ [string] ] = [number] [EOL] with pytest . raises ( KeyError ) : [EOL] config [ [string] ] [EOL] [EOL] [EOL] def test_config_mutate ( ) : [EOL] config = Config ( [string] ) [EOL] config . register ( ConfigItem ( [string] , [number] ) ) [EOL] assert config [ [string] ] == [number] [EOL] config [ [string] ] = [number] [EOL] assert config [ [string] ] == [number] [EOL] [EOL] [EOL] def test_config_locked ( ) : [EOL] config = Config ( [string] , True ) [EOL] config . register ( ConfigItem ( [string] , [number] ) ) [EOL] with pytest . raises ( KeyError ) : [EOL] config [ [string] ] [EOL] config . unlock ( ) [EOL] config . register ( ConfigItem ( [string] , [number] ) ) [EOL] assert config [ [string] ] == [number] [EOL] config . lock ( ) [EOL] config [ [string] ] = [number] [EOL] assert config [ [string] ] == [number] [EOL] [EOL] [EOL] def test_config_static ( ) : [EOL] config = Config ( [string] , True , True ) [EOL] config . register ( ConfigItem ( [string] , [number] ) ) [EOL] config . unlock ( ) [EOL] config . register ( ConfigItem ( [string] , [number] ) ) [EOL] config [ [string] ] = [number] [EOL] with pytest . raises ( KeyError ) : [EOL] config [ [string] ] [EOL] with pytest . raises ( KeyError ) : [EOL] config [ [string] ] [EOL] [EOL] [EOL] def test_config_to_dict ( ) : [EOL] config = Config ( [string] ) [EOL] config . register ( ConfigItem ( [string] , [number] ) ) [EOL] subconfig = Config ( [string] ) [EOL] subconfig . register ( ConfigItem ( [string] , [number] ) ) [EOL] config . register ( subconfig ) [EOL] assert config . to_dict ( ) == { [string] : [number] , [string] : { [string] : [number] } } [EOL] [EOL] [EOL] def test_config_from_dict ( ) : [EOL] config = Config ( [string] ) [EOL] config . register ( ConfigItem ( [string] , [number] ) ) [EOL] subconfig = Config ( [string] ) [EOL] subconfig . register ( ConfigItem ( [string] , [number] ) ) [EOL] config . register ( subconfig ) [EOL] assert config == Config . from_dict ( [string] , { [string] : [number] , [string] : { [string] : [number] } } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import ext [EOL] from aggregator . plugin import Plugin , StringParam , BoolParam , NumberParam , PluginSize [EOL] [EOL] [EOL] class DummyPlugin ( Plugin ) : [EOL] [EOL] __pluginname__ = [string] [EOL] __location__ = __file__ [EOL] __paramschema__ = ( StringParam ( [string] , [string] ) , BoolParam ( [string] , [string] ) , NumberParam ( [string] , [string] , step = [number] , min = [number] , max = [number] ) , NumberParam ( [string] , [string] , step = [number] ) ) [EOL] __sizes__ = ( PluginSize . SMALL , PluginSize . WIDE , PluginSize . TALL , PluginSize . BIG , PluginSize . FULL ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0