from setuptools import setup [EOL] [EOL] setup ( name = [string] , version = [string] , description = [string] , keywords = [ [string] , [string] , [string] ] , url = [string] , author = [string] , author_email = [string] , license = [string] , packages = [ [string] , [string] ] , install_requires = [ [string] , [string] , [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Any , Generator , Optional [EOL] import pypeerassets [EOL] import typing [EOL] import time [EOL] [EOL] import pypeerassets as pa [EOL] from pypeerassets . protocol import IssueMode [EOL] from pypeerassets . provider import RpcNode [EOL] from pypeerassets . transactions import sign_transaction [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] RPC_USERNAME = [string] [EOL] RPC_PASSWORD = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] FRIENDLY_CO = [string] [EOL] ALICE = [string] [EOL] BOB = [string] [EOL] CHARLES = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def wait_for_confirmation ( provider , transaction_id ) : [EOL] [docstring] [EOL] while (True) : [EOL] transaction = provider . gettransaction ( transaction_id ) [EOL] if transaction [ [string] ] > [number] : [EOL] break [EOL] time . sleep ( [number] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] [EOL] [comment] [EOL] [EOL] print ( [string] ) [EOL] [EOL] rpc_node = RpcNode ( testnet = True , username = RPC_USERNAME , password = RPC_PASSWORD ) [EOL] [EOL] friendly_co_key = pa . Kutil ( network = [string] , from_wif = rpc_node . dumpprivkey ( FRIENDLY_CO ) , ) [EOL] [EOL] deck = pa . Deck ( name = [string] , number_of_decimals = [number] , issue_mode = IssueMode . ONCE . value , network = [string] , production = False , version = [number] , issuer = FRIENDLY_CO , ) [EOL] [EOL] deck_spawn_tx = pa . deck_spawn ( provider = rpc_node , deck = deck , inputs = rpc_node . select_inputs ( FRIENDLY_CO , [number] ) , change_address = FRIENDLY_CO , ) [EOL] deck_spawn_tx = sign_transaction ( rpc_node , deck_spawn_tx , friendly_co_key ) [EOL] rpc_node . sendrawtransaction ( deck_spawn_tx . hexlify ( ) ) [EOL] [EOL] print ( [string] ) [EOL] print ( [string] + deck_spawn_tx . txid ) [EOL] print ( [string] ) [EOL] wait_for_confirmation ( rpc_node , deck_spawn_tx . txid ) [EOL] print ( [string] ) [EOL] deck . id = deck_spawn_tx . txid [EOL] print ( [string] + deck . id ) [EOL] print ( [string] + deck . p2th_address ) [EOL] [EOL] print ( [string] ) [EOL] found_deck = pa . find_deck ( provider = rpc_node , key = deck . id , version = [number] , prod = False , ) [EOL] assert found_deck is not None , [string] [EOL] print ( [string] ) [EOL] [EOL] [comment] [EOL] [EOL] print ( [string] ) [EOL] [EOL] card_transfer = pa . CardTransfer ( deck = deck , receiver = [ ALICE ] , amount = [ [number] ] , sender = FRIENDLY_CO , ) [EOL] [EOL] card_transfer_tx = pa . card_transfer ( provider = rpc_node , card = card_transfer , inputs = rpc_node . select_inputs ( FRIENDLY_CO , [number] ) , change_address = FRIENDLY_CO , ) [EOL] card_transfer_tx = sign_transaction ( rpc_node , card_transfer_tx , friendly_co_key ) [EOL] rpc_node . sendrawtransaction ( card_transfer_tx . hexlify ( ) ) [EOL] [EOL] print ( [string] ) [EOL] print ( [string] + card_transfer_tx . txid ) [EOL] print ( [string] ) [EOL] wait_for_confirmation ( rpc_node , card_transfer_tx . txid ) [EOL] print ( [string] ) [EOL] [EOL] print ( [string] ) [EOL] cards = pa . find_all_valid_cards ( rpc_node , deck ) [EOL] deck_state = pa . DeckState ( cards ) [EOL] assert len ( deck_state . balances ) == [number] , [string] [EOL] assert deck_state . balances [ ALICE ] == [number] , [string] [EOL] print ( [string] ) [EOL] [EOL] [comment] [EOL] [EOL] print ( [string] ) [EOL] [EOL] alice_key = pa . Kutil ( network = [string] , from_wif = rpc_node . dumpprivkey ( ALICE ) , ) [EOL] [EOL] card_transfer = pa . CardTransfer ( deck = deck , receiver = [ BOB , CHARLES ] , amount = [ [number] , [number] ] , sender = ALICE , ) [EOL] [EOL] card_transfer_tx = pa . card_transfer ( provider = rpc_node , card = card_transfer , inputs = rpc_node . select_inputs ( ALICE , [number] ) , change_address = ALICE , ) [EOL] card_transfer_tx = sign_transaction ( rpc_node , card_transfer_tx , alice_key ) [EOL] rpc_node . sendrawtransaction ( card_transfer_tx . hexlify ( ) ) [EOL] [EOL] print ( [string] ) [EOL] print ( [string] + card_transfer_tx . txid ) [EOL] print ( [string] ) [EOL] wait_for_confirmation ( rpc_node , card_transfer_tx . txid ) [EOL] print ( [string] ) [EOL] [EOL] print ( [string] ) [EOL] cards = pa . find_all_valid_cards ( rpc_node , deck ) [EOL] deck_state = pa . DeckState ( cards ) [EOL] assert len ( deck_state . balances ) == [number] , [string] [EOL] assert deck_state . balances [ ALICE ] == [number] , [string] [EOL] assert deck_state . balances [ BOB ] == [number] , [string] [EOL] assert deck_state . balances [ CHARLES ] == [number] , [string] [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[pypeerassets.protocol.Deck]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[pypeerassets.protocol.Deck]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pypeerassets.protocol.CardTransfer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pypeerassets.transactions.Transaction$ 0 0 0 $pypeerassets.protocol.CardTransfer$ 0 0 0 0 0 0 0 $pypeerassets.protocol.CardTransfer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pypeerassets.transactions.Transaction$ 0 0 0 0 0 $pypeerassets.transactions.Transaction$ 0 0 0 0 0 0 0 0 $pypeerassets.transactions.Transaction$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pypeerassets.transactions.Transaction$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $pypeerassets.transactions.Transaction$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Generator[typing.Any,typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $pypeerassets.protocol.DeckState$ 0 0 0 0 0 $typing.Generator[typing.Any,typing.Any,typing.Any]$ 0 0 0 0 0 $pypeerassets.protocol.DeckState$ 0 0 0 0 0 0 0 0 0 $pypeerassets.protocol.DeckState$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pypeerassets.kutil.Kutil$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pypeerassets.protocol.CardTransfer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pypeerassets.transactions.Transaction$ 0 0 0 $pypeerassets.protocol.CardTransfer$ 0 0 0 0 0 0 0 $pypeerassets.protocol.CardTransfer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pypeerassets.transactions.Transaction$ 0 0 0 0 0 $pypeerassets.transactions.Transaction$ 0 $pypeerassets.kutil.Kutil$ 0 0 0 0 0 0 $pypeerassets.transactions.Transaction$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pypeerassets.transactions.Transaction$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $pypeerassets.transactions.Transaction$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Generator[typing.Any,typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $pypeerassets.protocol.DeckState$ 0 0 0 0 0 $typing.Generator[typing.Any,typing.Any,typing.Any]$ 0 0 0 0 0 $pypeerassets.protocol.DeckState$ 0 0 0 0 0 0 0 0 0 $pypeerassets.protocol.DeckState$ 0 0 0 0 0 0 0 0 0 0 0 $pypeerassets.protocol.DeckState$ 0 0 0 0 0 0 0 0 0 0 0 $pypeerassets.protocol.DeckState$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL]	0