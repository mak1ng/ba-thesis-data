[comment] [EOL] from typing import Any , Dict , Type , List [EOL] import oauth2client [EOL] import addict [EOL] import playlist_updates [EOL] import builtins [EOL] import pathlib [EOL] import typing [EOL] import argparse [EOL] import argparse [EOL] import operator [EOL] import os [EOL] import sys [EOL] from collections import namedtuple [EOL] from functools import lru_cache [EOL] from functools import reduce [EOL] from pathlib import Path [EOL] from typing import Any [EOL] from typing import Dict [EOL] from typing import List [EOL] [EOL] import addict [EOL] import arrow [EOL] import googleapiclient . errors [EOL] import httplib2 [EOL] import oauth2client . client [EOL] import oauth2client . file [EOL] import oauth2client . tools [EOL] import yaml [EOL] from apiclient . discovery import build [comment] [EOL] from isodate import parse_duration [EOL] from isodate import strftime [EOL] from tqdm import tqdm [EOL] from xdg import XDG_CACHE_HOME [EOL] [EOL] [EOL] print = tqdm . write [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] CLIENT_SECRETS_FILE = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] MISSING_CLIENT_SECRETS_MESSAGE = [string] % os . path . abspath ( os . path . join ( os . path . dirname ( __file__ ) , CLIENT_SECRETS_FILE ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] YOUTUBE_READ_WRITE_SCOPE = [string] [EOL] YOUTUBE_API_SERVICE_NAME = [string] [EOL] YOUTUBE_API_VERSION = [string] [EOL] [EOL] VideoInfo = namedtuple ( [string] , [ [string] , [string] , [string] ] ) [EOL] JsonType = Dict [ str , Any ] [EOL] [EOL] [EOL] class YoutubeManager : [EOL] def __init__ ( self , dry_run , args ) : [EOL] self . youtube = self . get_youtube ( args ) [EOL] self . dry_run = dry_run [EOL] [EOL] @ staticmethod def get_creds ( args ) : [EOL] [docstring] [EOL] flow = oauth2client . client . flow_from_clientsecrets ( CLIENT_SECRETS_FILE , message = MISSING_CLIENT_SECRETS_MESSAGE , scope = YOUTUBE_READ_WRITE_SCOPE ) [EOL] [EOL] storage = oauth2client . file . Storage ( [string] . format ( sys . argv [ [number] ] ) ) [EOL] credentials = storage . get ( ) [EOL] [EOL] if credentials is None or credentials . invalid : [EOL] flags = oauth2client . tools . argparser . parse_args ( args ) [EOL] credentials = oauth2client . tools . run_flow ( flow , storage , flags ) [EOL] [EOL] return credentials [EOL] [EOL] def get_youtube ( self , args ) : [EOL] [docstring] [EOL] creds = self . get_creds ( args ) [EOL] return build ( YOUTUBE_API_SERVICE_NAME , YOUTUBE_API_VERSION , http = creds . authorize ( httplib2 . Http ( ) ) ) [EOL] [EOL] def get_watchlater_playlist ( self ) : [EOL] [docstring] [EOL] playlists = self . youtube . playlists ( ) . list ( part = [string] , mine = True ) . execute ( ) [EOL] playlist_id = next ( i [ [string] ] for i in playlists [ [string] ] if i [ [string] ] [ [string] ] == [string] ) [EOL] return playlist_id [EOL] [EOL] def get_playlist_videos ( self , watchlater_id ) : [EOL] [docstring] [EOL] result = [ ] [EOL] [EOL] request = self . youtube . playlistItems ( ) . list ( part = [string] , playlistId = watchlater_id , maxResults = [number] ) [EOL] [EOL] [comment] [EOL] while request : [EOL] response = request . execute ( ) [EOL] [EOL] result . extend ( response [ [string] ] ) [EOL] [EOL] [comment] [EOL] request = self . youtube . playlistItems ( ) . list_next ( request , response ) [EOL] return result [EOL] [EOL] def get_video_info ( self , playlist_videos ) : [EOL] [docstring] [EOL] result = { } [EOL] videos = [ i [ [string] ] [ [string] ] [ [string] ] for i in playlist_videos ] [EOL] [EOL] [comment] [EOL] while videos : [EOL] to_query = videos [ : [number] ] [EOL] remaining = videos [ [number] : ] [EOL] [EOL] response = ( self . youtube . videos ( ) . list ( part = [string] , id = [string] . join ( list ( to_query ) ) , maxResults = [number] ) . execute ( ) ) [EOL] [EOL] for i in response [ [string] ] : [EOL] video_id = i [ [string] ] [EOL] channel_id = i [ [string] ] [ [string] ] [EOL] published_date = i [ [string] ] [ [string] ] [EOL] duration = parse_duration ( i [ [string] ] [ [string] ] ) [EOL] result [ video_id ] = VideoInfo ( channel_id , published_date , duration ) [EOL] [EOL] videos = remaining [EOL] [EOL] return result [EOL] [EOL] def sort_playlist ( self , playlist_videos , video_infos ) : [EOL] [docstring] [EOL] [EOL] def sort_key ( playlist_item ) : [EOL] [docstring] [EOL] video_id = playlist_item [ [string] ] [ [string] ] [ [string] ] [EOL] channel_name , published_date , _ = video_infos [ video_id ] [EOL] return [string] . format ( channel_name , published_date ) [EOL] [EOL] sorted_playlist = sorted ( playlist_videos , key = sort_key ) [EOL] for index , i in enumerate ( tqdm ( sorted_playlist , unit = [string] ) ) : [EOL] print ( [string] . format ( i [ [string] ] [ [string] ] , index ) ) [EOL] [EOL] if not self . dry_run : [EOL] i [ [string] ] [ [string] ] = index [EOL] self . youtube . playlistItems ( ) . update ( part = [string] , body = i ) . execute ( ) [EOL] [EOL] def get_subscribed_channels ( self ) : [EOL] channels = [ ] [EOL] next_page_token = None [EOL] request = self . youtube . subscriptions ( ) . list ( part = [string] , mine = True , maxResults = [number] , pageToken = next_page_token ) [EOL] [EOL] while request : [EOL] response = request . execute ( ) [EOL] response = addict . Dict ( response ) [EOL] channels . extend ( { [string] : i . snippet . title , [string] : i . snippet . resourceId . channelId } for i in response [ [string] ] ) [EOL] request = self . youtube . subscriptions ( ) . list_next ( request , response ) [EOL] [EOL] return channels [EOL] [EOL] def get_channel_details ( self , channel_id ) : [EOL] request = self . youtube . channels ( ) . list ( part = [string] , id = channel_id ) [EOL] [EOL] [comment] [EOL] channel_details = addict . Dict ( request . execute ( ) [ [string] ] [ [number] ] ) [EOL] return channel_details [EOL] [EOL] def add_channel_videos_watch_later ( self , channel , uploaded_after ) : [EOL] video_ids = [ ] [EOL] [EOL] channel_details = self . get_channel_details ( channel ) [EOL] uploaded_playlist = channel_details . contentDetails . relatedPlaylists . uploads [EOL] [EOL] request = self . youtube . playlistItems ( ) . list ( part = [string] , playlistId = uploaded_playlist , maxResults = [number] ) [EOL] [EOL] while request : [EOL] response = addict . Dict ( request . execute ( ) ) [EOL] recent_videos = [ { [string] : i . snippet . resourceId . videoId , [string] : i . snippet . title } for i in response [ [string] ] if i . snippet . resourceId . kind == [string] and arrow . get ( i . snippet . publishedAt ) >= uploaded_after ] [EOL] [EOL] if not recent_videos : [EOL] break [EOL] [EOL] video_ids . extend ( recent_videos ) [EOL] request = self . youtube . playlistItems ( ) . list_next ( request , response ) [EOL] [EOL] for video_id in video_ids : [EOL] self . add_video_to_watch_later ( video_id ) [EOL] [EOL] def add_video_to_watch_later ( self , video_id ) : [EOL] print ( [string] . format ( video_id [ [string] ] ) ) [EOL] if not self . dry_run : [EOL] try : [EOL] self . youtube . playlistItems ( ) . insert ( part = [string] , body = { [string] : { [string] : [string] , [string] : { [string] : [string] , [string] : video_id [ [string] ] } , } } , ) . execute ( ) [EOL] except googleapiclient . errors . HttpError as error : [EOL] if error . resp . status == [number] : [EOL] print ( [string] ) [EOL] else : [EOL] raise [EOL] [EOL] def update ( self , uploaded_after , only_allowed = False ) : [EOL] channels = self . get_subscribed_channels ( ) [EOL] config = read_config ( ) [EOL] auto_add = config . setdefault ( [string] , [ ] ) [EOL] [EOL] if uploaded_after is None : [EOL] if [string] in config : [EOL] uploaded_after = arrow . get ( config [ [string] ] ) [EOL] else : [EOL] uploaded_after = arrow . now ( ) . shift ( weeks = - [number] ) [EOL] [EOL] if not only_allowed and not self . dry_run : [EOL] unknown_channels = [ i for i in channels if i [ [string] ] not in auto_add ] [EOL] for channel in unknown_channels : [EOL] response = input ( [string] . format ( channel [ [string] ] ) ) [EOL] if response == [string] : [EOL] auto_add . append ( channel [ [string] ] ) [EOL] write_config ( config ) [EOL] [EOL] allowed_channels = [ i for i in channels if i [ [string] ] in auto_add ] [EOL] for channel in tqdm ( allowed_channels , unit = [string] ) : [EOL] self . add_channel_videos_watch_later ( channel [ [string] ] , uploaded_after ) [EOL] [EOL] if not self . dry_run : [EOL] config [ [string] ] = arrow . now ( ) . format ( ) [EOL] write_config ( config ) [EOL] [EOL] def sort ( self ) : [EOL] [docstring] [EOL] watchlater_id = self . get_watchlater_playlist ( ) [EOL] if not watchlater_id : [EOL] sys . exit ( [string] ) [EOL] [EOL] playlist_videos = self . get_playlist_videos ( watchlater_id ) [EOL] [EOL] if playlist_videos : [EOL] video_infos = self . get_video_info ( playlist_videos ) [EOL] self . sort_playlist ( playlist_videos , video_infos ) [EOL] self . print_duration ( video_infos ) [EOL] else : [EOL] sys . exit ( [string] [string] [string] ) [EOL] [EOL] @ staticmethod def print_duration ( video_infos ) : [EOL] total_duration = reduce ( operator . add , [ video . duration for video in video_infos . values ( ) ] ) [EOL] print ( [string] * [number] ) [EOL] print ( [string] . format ( strftime ( total_duration , [string] ) ) ) [EOL] [EOL] [EOL] @ lru_cache ( [number] ) def read_config ( ) : [EOL] config_dir = Path ( XDG_CACHE_HOME ) / [string] [EOL] config_dir . mkdir ( parents = True , exist_ok = True ) [EOL] [EOL] config_file = config_dir / [string] [EOL] config_file . touch ( ) [EOL] [EOL] with config_file . open ( [string] ) as config : [EOL] return yaml . safe_load ( config ) or { } [EOL] [EOL] [EOL] def write_config ( config ) : [EOL] with open ( os . path . join ( XDG_CACHE_HOME , [string] , [string] ) , [string] ) as file : [EOL] yaml . safe_dump ( config , stream = file , explicit_start = True , default_flow_style = False ) [EOL] [EOL] [EOL] def parse_args ( ) : [EOL] parser = argparse . ArgumentParser ( description = [string] ) [EOL] parser . add_argument ( [string] , nargs = argparse . REMAINDER ) [EOL] [EOL] common_parser = argparse . ArgumentParser ( add_help = False ) [EOL] common_parser . add_argument ( [string] , action = [string] ) [EOL] [EOL] subparser = parser . add_subparsers ( title = [string] , dest = [string] ) [EOL] subparser . add_parser ( [string] , help = [string] , description = [string] , parents = [ common_parser ] , ) [EOL] [EOL] update_parser = subparser . add_parser ( [string] , help = [string] , description = [string] , parents = [ common_parser ] , ) [EOL] update_parser . add_argument ( [string] , help = [string] , type = arrow . get ) [EOL] update_parser . add_argument ( [string] , [string] , help = [string] , action = [string] ) [EOL] [EOL] return parser . parse_args ( ) [EOL] [EOL] [EOL] def main ( ) : [EOL] args = parse_args ( ) [EOL] [EOL] youtube_manager = YoutubeManager ( args . dry_run , args . args ) [EOL] if args . subcommand == [string] : [EOL] youtube_manager . sort ( ) [EOL] elif args . subcommand == [string] : [EOL] youtube_manager . update ( args . since , args . only_allowed ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $JsonType$ 0 0 0 0 0 0 0 0 0 $JsonType$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $JsonType$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Any$ 0 $builtins.bool$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 $typing.Dict[builtins.str,playlist_updates.VideoInfo]$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 $typing.Dict[builtins.str,playlist_updates.VideoInfo]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,playlist_updates.VideoInfo]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 $JsonType$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $JsonType$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0