[comment] [EOL] from setuptools import setup , find_packages [EOL] [EOL] setup ( name = [string] , version = [string] , packages = find_packages ( exclude = [ [string] ] ) , include_package_data = True , install_requires = [ [string] , [string] , [string] , [string] , ] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import logging [EOL] import typing [EOL] import builtins [EOL] import logging [EOL] [EOL] [EOL] _logger = None [EOL] [EOL] [EOL] def info ( message ) : [EOL] log ( [string] , message ) [EOL] [EOL] [EOL] def warning ( message ) : [EOL] log ( [string] , message ) [EOL] [EOL] [EOL] def log ( type , message , * args , ** kwargs ) : [EOL] [docstring] [EOL] global _logger [EOL] if _logger is None : [EOL] import logging [EOL] [EOL] _logger = logging . getLogger ( [string] ) [EOL] if _logger . level == logging . NOTSET : [EOL] _logger . setLevel ( logging . INFO ) [EOL] if not logging . root . handlers : [EOL] handler = logging . StreamHandler ( ) [EOL] _logger . addHandler ( handler ) [EOL] getattr ( _logger , type ) ( message . rstrip ( ) , * args , ** kwargs ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] from typing import Dict , Any , Union [EOL] import typing [EOL] import builtins [EOL] from dataclasses import dataclass [EOL] from datetime import datetime , timedelta [EOL] [EOL] [comment] [EOL] import jwt [EOL] [EOL] [comment] [EOL] from crazerace . http . error import BadRequestError , UnauthorizedError [EOL] [EOL] [EOL] DEFAULT_EXPIRY = [number] * [number] [EOL] DEFAULT_ALGORITHM = [string] [EOL] [EOL] [EOL] @ dataclass class TokenBody : [EOL] subject = ... [EOL] role = ... [EOL] [EOL] [EOL] def create_token ( sub , role , secret , expiry = DEFAULT_EXPIRY , algorithm = DEFAULT_ALGORITHM , ) : [EOL] issued_at = datetime . utcnow ( ) . timestamp ( ) [EOL] not_before = ( datetime . utcnow ( ) - timedelta ( seconds = [number] ) ) . timestamp ( ) [EOL] expires_at = ( datetime . utcnow ( ) + timedelta ( seconds = expiry ) ) . timestamp ( ) [EOL] payload = { [string] : sub , [string] : role , [string] : int ( issued_at ) , [string] : int ( not_before ) , [string] : int ( expires_at ) , } [EOL] return jwt . encode ( payload , secret , algorithm = algorithm ) . decode ( ) [EOL] [EOL] [EOL] def decode ( token , secret , algorithm = DEFAULT_ALGORITHM ) : [EOL] try : [EOL] decoded_token = jwt . decode ( token , secret , algorithms = [ algorithm ] ) [EOL] return TokenBody ( subject = decoded_token [ [string] ] , role = decoded_token [ [string] ] ) [EOL] except KeyError : [EOL] raise BadRequestError ( ) [EOL] except jwt . PyJWTError as e : [EOL] raise UnauthorizedError ( ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $TokenBody$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Dict , Any [EOL] import typing [EOL] import builtins [EOL] import json [EOL] from uuid import uuid4 [EOL] from typing import Dict , Any [EOL] [EOL] [comment] [EOL] from flask import request [EOL] [EOL] [comment] [EOL] from crazerace . http import status [EOL] [EOL] [EOL] class RequestError ( Exception ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , message ) : [EOL] self . id = str ( uuid4 ( ) ) . lower ( ) [EOL] self . message = message [EOL] [EOL] def __str__ ( self ) : [EOL] return ( f" [string] { self . id } [string] { self . status ( ) } [string] " f" [string] { self . message } [string] { request . path } [string] { request . id } [string] " ) [EOL] [EOL] def asdict ( self ) : [EOL] return { [string] : self . id , [string] : self . status ( ) , [string] : self . message , [string] : request . path , [string] : request . id , } [EOL] [EOL] def status ( self ) : [EOL] return status . HTTP_500_INTERNAL_SERVER_ERROR [EOL] [EOL] [EOL] class BadRequestError ( RequestError ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , message = [string] ) : [EOL] super ( ) . __init__ ( message ) [EOL] [EOL] def status ( self ) : [EOL] return status . HTTP_400_BAD_REQUEST [EOL] [EOL] [EOL] class UnauthorizedError ( RequestError ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , message = [string] ) : [EOL] super ( ) . __init__ ( message ) [EOL] [EOL] def status ( self ) : [EOL] return status . HTTP_401_UNAUTHORIZED [EOL] [EOL] [EOL] class ForbiddenError ( RequestError ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , message = [string] ) : [EOL] super ( ) . __init__ ( message ) [EOL] [EOL] def status ( self ) : [EOL] return status . HTTP_403_FORBIDDEN [EOL] [EOL] [EOL] class NotFoundError ( RequestError ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , message = [string] ) : [EOL] super ( ) . __init__ ( message ) [EOL] [EOL] def status ( self ) : [EOL] return status . HTTP_404_NOT_FOUND [EOL] [EOL] [EOL] class MethodNotAllowedError ( RequestError ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , message = [string] ) : [EOL] super ( ) . __init__ ( message ) [EOL] [EOL] def status ( self ) : [EOL] return status . HTTP_405_METHOD_NOT_ALLOWED [EOL] [EOL] [EOL] class ConflictError ( RequestError ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , message = [string] ) : [EOL] super ( ) . __init__ ( message ) [EOL] [EOL] def status ( self ) : [EOL] return status . HTTP_409_CONFLICT [EOL] [EOL] [EOL] class PreconditionRequiredError ( RequestError ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , message = [string] ) : [EOL] super ( ) . __init__ ( message ) [EOL] [EOL] def status ( self ) : [EOL] return status . HTTP_428_PRECONDITION_REQUIRED [EOL] [EOL] [EOL] class InternalServerError ( RequestError ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , message = [string] ) : [EOL] super ( ) . __init__ ( message ) [EOL] [EOL] [EOL] class BadGatewayError ( RequestError ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , message = [string] ) : [EOL] super ( ) . __init__ ( message ) [EOL] [EOL] def status ( self ) : [EOL] return status . HTTP_502_BAD_GATEWAY [EOL] [EOL] [EOL] class ServiceUnavilableError ( RequestError ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , message = [string] ) : [EOL] super ( ) . __init__ ( message ) [EOL] [EOL] def status ( self ) : [EOL] return status . HTTP_503_SERVICE_UNAVAILIBLE [EOL] [EOL] [EOL] class NotImplementedError ( RequestError ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] [EOL] def status ( self ) : [EOL] return status . HTTP_501_NOT_IMPLEMENTED [EOL] [EOL] [EOL] class DatabaseError ( RequestError ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , cause_message ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] self . _cause_message = cause_message [EOL] [EOL] def full_message ( self ) : [EOL] return f" [string] { self . id } [string] { self . _cause_message } [string] " [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import List , Optional , Callable [EOL] import crazerace [EOL] import typing [EOL] import builtins [EOL] from typing import Callable , List , Optional [EOL] from functools import wraps [EOL] [EOL] [comment] [EOL] from flask import request [EOL] [EOL] [comment] [EOL] from crazerace import jwt [EOL] from crazerace . http import get_header [EOL] from crazerace . http . error import UnauthorizedError , ForbiddenError [EOL] [EOL] [EOL] def secured ( secret , roles = [ ] ) : [EOL] def secured_with_roles ( f ) : [EOL] @ wraps ( f ) def decorated ( * args , ** kwargs ) : [EOL] token = _authorize ( secret , roles ) [EOL] request . user_id = token . subject [EOL] request . role = token . role [EOL] return f ( * args , ** kwargs ) [EOL] [EOL] return decorated [EOL] [EOL] return secured_with_roles [EOL] [EOL] [EOL] def _authorize ( secret , roles ) : [EOL] encoded_token = _get_token_header ( ) [EOL] token = jwt . decode ( encoded_token , secret ) [EOL] if token . role not in roles and roles : [EOL] raise ForbiddenError ( ) [EOL] return token [EOL] [EOL] [EOL] def _get_token_header ( ) : [EOL] auth_header = request . headers . get ( [string] ) [EOL] if not auth_header : [EOL] raise UnauthorizedError ( ) [EOL] return auth_header . replace ( [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $crazerace.jwt.TokenBody$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Dict , Optional , Any [EOL] import flask [EOL] import typing [EOL] import builtins [EOL] from uuid import uuid4 [EOL] from typing import Any , Dict , Optional [EOL] [EOL] [comment] [EOL] import flask [EOL] from flask import jsonify , make_response , request [EOL] [EOL] [comment] [EOL] from crazerace . http . status import HTTP_200_OK [EOL] from crazerace . http . error import BadRequestError [EOL] [EOL] [EOL] def get_request_body ( * required_fields ) : [EOL] [docstring] [EOL] body = request . get_json ( silent = True ) [EOL] for field in required_fields : [EOL] if field not in body : [EOL] raise BadRequestError ( message = f" [string] { field }" ) [EOL] return body [EOL] [EOL] [EOL] def get_param ( name , default = None ) : [EOL] [docstring] [EOL] value = request . args . get ( name , default ) [EOL] if not value : [EOL] raise BadRequestError ( message = f" [string] { name } [string] " ) [EOL] return value [EOL] [EOL] [EOL] def get_header ( name , default = None ) : [EOL] [docstring] [EOL] header_value = request . headers . get ( name , default ) [EOL] if not header_value : [EOL] raise BadRequestError ( message = f" [string] { name } [string] " ) [EOL] return header_value [EOL] [EOL] [EOL] def create_response ( result , status = HTTP_200_OK ) : [EOL] [docstring] [EOL] return make_response ( jsonify ( result ) , status ) [EOL] [EOL] [EOL] def create_ok_response ( ) : [EOL] [docstring] [EOL] ok_body = { [string] : [string] } [EOL] return make_response ( jsonify ( ok_body ) , HTTP_200_OK ) [EOL] [EOL] [EOL] def new_id ( ) : [EOL] return str ( uuid4 ( ) ) . lower ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0