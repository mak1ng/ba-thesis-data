	0
import bot [comment] [EOL] [EOL] from tests . unittest . mock_class import AsyncIterator [EOL] from . base_cache_store import TestCacheStore [EOL] [EOL] [EOL] class TestCacheBotMangers ( TestCacheStore ) : [EOL] async def setUp ( self ) : [EOL] await super ( ) . setUp ( ) [EOL] [EOL] self . dbmain . getBotManagers . return_value = AsyncIterator ( [ [string] ] ) [EOL] [EOL] async def test_load ( self ) : [EOL] self . assertEqual ( await self . data . loadBotManagers ( ) , [ [string] ] ) [EOL] self . assertTrue ( self . dbmain . getBotManagers . called ) [EOL] self . assertIsNotNone ( await self . redis . get ( [string] ) ) [EOL] [EOL] async def test ( self ) : [EOL] self . assertTrue ( await self . data . isBotManager ( [string] ) ) [EOL] self . assertTrue ( self . dbmain . getBotManagers . called ) [EOL] self . dbmain . getBotManagers . reset_mock ( ) [EOL] self . assertFalse ( await self . data . isBotManager ( [string] ) ) [EOL] self . assertFalse ( self . dbmain . getBotManagers . called ) [EOL] self . assertIsNotNone ( await self . redis . get ( [string] ) ) [EOL] [EOL] async def test_reset ( self ) : [EOL] await self . data . loadBotManagers ( ) [EOL] self . assertIsNotNone ( await self . redis . get ( [string] ) ) [EOL] await self . data . resetBotManagers ( ) [EOL] self . assertIsNone ( await self . redis . get ( [string] ) ) [EOL] [EOL] async def test_add ( self ) : [EOL] self . dbmain . addBotManager . return_value = True [EOL] await self . data . loadBotManagers ( ) [EOL] self . assertIsNotNone ( await self . redis . get ( [string] ) ) [EOL] self . assertIs ( await self . data . addBotManager ( [string] ) , True ) [EOL] self . assertIsNone ( await self . redis . get ( [string] ) ) [EOL] self . assertTrue ( self . dbmain . addBotManager . called ) [EOL] [EOL] async def test_add_false ( self ) : [EOL] self . dbmain . addBotManager . return_value = False [EOL] await self . data . loadBotManagers ( ) [EOL] self . assertIsNotNone ( await self . redis . get ( [string] ) ) [EOL] self . assertIs ( await self . data . addBotManager ( [string] ) , False ) [EOL] self . assertIsNotNone ( await self . redis . get ( [string] ) ) [EOL] self . assertTrue ( self . dbmain . addBotManager . called ) [EOL] [EOL] async def test_remove ( self ) : [EOL] self . dbmain . removeBotManager . return_value = True [EOL] await self . data . loadBotManagers ( ) [EOL] self . assertIsNotNone ( await self . redis . get ( [string] ) ) [EOL] self . assertIs ( await self . data . removeBotManager ( [string] ) , True ) [EOL] self . assertIsNone ( await self . redis . get ( [string] ) ) [EOL] self . assertTrue ( self . dbmain . removeBotManager . called ) [EOL] [EOL] async def test_remove_false ( self ) : [EOL] self . dbmain . removeBotManager . return_value = False [EOL] await self . data . loadBotManagers ( ) [EOL] self . assertIsNotNone ( await self . redis . get ( [string] ) ) [EOL] self . assertIs ( await self . data . removeBotManager ( [string] ) , False ) [EOL] self . assertIsNotNone ( await self . redis . get ( [string] ) ) [EOL] self . assertTrue ( self . dbmain . removeBotManager . called ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from datetime import datetime [EOL] [EOL] from asynctest import patch [EOL] [EOL] import bot [comment] [EOL] [EOL] from . base_cache_store import TestCacheStore [EOL] from lib . cache import CacheStore [EOL] from lib . api . twitch import TwitchCommunity [EOL] [EOL] [EOL] class TestCacheTwitchApiCreatedDate ( TestCacheStore ) : [EOL] async def setUp ( self ) : [EOL] await super ( ) . setUp ( ) [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_created = patcher . start ( ) [EOL] [EOL] async def test ( self , ) : [EOL] user = [string] [EOL] key = f' [string] { user } [string] ' [EOL] dt = datetime ( [number] , [number] , [number] ) [EOL] self . mock_created . return_value = dt [EOL] self . assertEqual ( await self . data . twitch_created_date ( [string] ) , dt ) [EOL] self . assertTrue ( self . mock_created . called ) [EOL] self . mock_created . reset_mock ( ) [EOL] self . assertEqual ( await self . data . twitch_created_date ( [string] ) , dt ) [EOL] self . assertFalse ( self . mock_created . called ) [EOL] self . assertIsNotNone ( await self . redis . get ( key ) ) [EOL] [EOL] [EOL] class TestCacheTwitchApiNumFollowers ( TestCacheStore ) : [EOL] async def setUp ( self ) : [EOL] await super ( ) . setUp ( ) [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_followers = patcher . start ( ) [EOL] [EOL] async def test ( self , ) : [EOL] user = [string] [EOL] key = f' [string] { user } [string] ' [EOL] self . mock_followers . return_value = [number] [EOL] self . assertEqual ( await self . data . twitch_num_followers ( [string] ) , [number] ) [EOL] self . assertTrue ( self . mock_followers . called ) [EOL] self . mock_followers . reset_mock ( ) [EOL] self . assertEqual ( await self . data . twitch_num_followers ( [string] ) , [number] ) [EOL] self . assertFalse ( self . mock_followers . called ) [EOL] self . assertIsNotNone ( await self . redis . get ( key ) ) [EOL] [EOL] [EOL] class TestCacheTwitchApiId ( TestCacheStore ) : [EOL] async def setUp ( self ) : [EOL] await super ( ) . setUp ( ) [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_ids = patcher . start ( ) [EOL] [EOL] async def test_load_id ( self ) : [EOL] self . mock_ids . return_value = { [string] : [string] } [EOL] self . assertIs ( await self . data . twitch_load_id ( [string] ) , True ) [EOL] self . assertTrue ( self . mock_ids . called ) [EOL] self . mock_ids . reset_mock ( ) [EOL] self . assertIs ( await self . data . twitch_load_id ( [string] ) , True ) [EOL] self . assertFalse ( self . mock_ids . called ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . data . _twitchIdUserKey ( [string] ) ) ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . data . _twitchIdIdKey ( [string] ) ) ) [EOL] [EOL] async def test_load_id_no_load ( self ) : [EOL] self . mock_ids . return_value = None [EOL] self . assertIs ( await self . data . twitch_load_id ( [string] ) , False ) [EOL] self . assertTrue ( self . mock_ids . called ) [EOL] self . mock_ids . reset_mock ( ) [EOL] self . assertIs ( await self . data . twitch_load_id ( [string] ) , False ) [EOL] self . assertTrue ( self . mock_ids . called ) [EOL] self . assertIsNone ( await self . redis . get ( self . data . _twitchIdUserKey ( [string] ) ) ) [EOL] [EOL] async def test_load_id_no_id ( self ) : [EOL] self . mock_ids . return_value = { } [EOL] self . assertIs ( await self . data . twitch_load_id ( [string] ) , True ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . data . _twitchIdUserKey ( [string] ) ) ) [EOL] [EOL] async def test_load_ids ( self ) : [EOL] self . mock_ids . return_value = { [string] : [string] } [EOL] self . assertIs ( await self . data . twitch_load_ids ( [ [string] ] ) , True ) [EOL] self . assertTrue ( self . mock_ids . called ) [EOL] self . mock_ids . reset_mock ( ) [EOL] self . assertIs ( await self . data . twitch_load_ids ( [ [string] ] ) , True ) [EOL] self . assertFalse ( self . mock_ids . called ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . data . _twitchIdUserKey ( [string] ) ) ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . data . _twitchIdIdKey ( [string] ) ) ) [EOL] [EOL] async def test_load_ids_no_load ( self ) : [EOL] self . mock_ids . return_value = None [EOL] self . assertIs ( await self . data . twitch_load_ids ( [ [string] ] ) , False ) [EOL] self . assertTrue ( self . mock_ids . called ) [EOL] self . mock_ids . reset_mock ( ) [EOL] self . assertIs ( await self . data . twitch_load_ids ( [ [string] ] ) , False ) [EOL] self . assertTrue ( self . mock_ids . called ) [EOL] self . assertIsNone ( await self . redis . get ( self . data . _twitchIdUserKey ( [string] ) ) ) [EOL] [EOL] async def test_load_ids_no_id ( self ) : [EOL] self . mock_ids . return_value = { } [EOL] self . assertIs ( await self . data . twitch_load_ids ( [ [string] ] ) , True ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . data . _twitchIdUserKey ( [string] ) ) ) [EOL] [EOL] async def test_load_ids_multiple ( self ) : [EOL] self . mock_ids . return_value = { [string] : [string] } [EOL] self . assertIs ( await self . data . twitch_load_ids ( [ [string] , [string] ] ) , True ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . data . _twitchIdUserKey ( [string] ) ) ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . data . _twitchIdUserKey ( [string] ) ) ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . data . _twitchIdIdKey ( [string] ) ) ) [EOL] [EOL] async def test_save_id ( self ) : [EOL] self . assertIs ( await self . data . twitch_save_id ( [string] , [string] ) , True ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . data . _twitchIdUserKey ( [string] ) ) ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . data . _twitchIdIdKey ( [string] ) ) ) [EOL] [EOL] async def test_save_id_no_id ( self ) : [EOL] self . assertIs ( await self . data . twitch_save_id ( None , [string] ) , True ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . data . _twitchIdUserKey ( [string] ) ) ) [EOL] [EOL] async def test_is_valid_user ( self ) : [EOL] self . mock_ids . return_value = { [string] : [string] } [EOL] self . assertIs ( await self . data . twitch_is_valid_user ( [string] ) , True ) [EOL] self . assertTrue ( self . mock_ids . called ) [EOL] self . mock_ids . reset_mock ( ) [EOL] self . assertIs ( await self . data . twitch_is_valid_user ( [string] ) , True ) [EOL] self . assertFalse ( self . mock_ids . called ) [EOL] [EOL] async def test_is_valid_user_false ( self ) : [EOL] self . mock_ids . return_value = { } [EOL] self . assertIs ( await self . data . twitch_is_valid_user ( [string] ) , False ) [EOL] self . assertTrue ( self . mock_ids . called ) [EOL] self . mock_ids . reset_mock ( ) [EOL] self . assertIs ( await self . data . twitch_is_valid_user ( [string] ) , False ) [EOL] self . assertFalse ( self . mock_ids . called ) [EOL] [EOL] async def test_is_valid_user_no_load ( self ) : [EOL] self . mock_ids . return_value = None [EOL] self . assertIsNone ( await self . data . twitch_is_valid_user ( [string] ) ) [EOL] self . assertTrue ( self . mock_ids . called ) [EOL] self . mock_ids . reset_mock ( ) [EOL] self . assertIsNone ( await self . data . twitch_is_valid_user ( [string] ) ) [EOL] self . assertTrue ( self . mock_ids . called ) [EOL] [EOL] async def test_get_id ( self ) : [EOL] await self . data . twitch_save_id ( [string] , [string] ) [EOL] self . assertEqual ( await self . data . twitch_get_id ( [string] ) , [string] ) [EOL] [EOL] async def test_get_id_none ( self ) : [EOL] await self . data . twitch_save_id ( None , [string] ) [EOL] self . assertIsNone ( await self . data . twitch_get_id ( [string] ) ) [EOL] [EOL] async def test_get_id_empty ( self ) : [EOL] self . assertIsNone ( await self . data . twitch_get_id ( [string] ) ) [EOL] [EOL] async def test_get_ids ( self ) : [EOL] await self . data . twitch_save_id ( [string] , [string] ) [EOL] self . assertEqual ( await self . data . twitch_get_ids ( { [string] } ) , { [string] : [string] } ) [EOL] [EOL] async def test_get_ids_none ( self ) : [EOL] await self . data . twitch_save_id ( None , [string] ) [EOL] self . assertEqual ( await self . data . twitch_get_ids ( { [string] } ) , { [string] : None } ) [EOL] [EOL] async def test_get_ids_empty ( self ) : [EOL] self . assertEqual ( await self . data . twitch_get_ids ( { [string] } ) , { [string] : None } ) [EOL] [EOL] async def test_get_user ( self ) : [EOL] await self . data . twitch_save_id ( [string] , [string] ) [EOL] self . assertEqual ( await self . data . twitch_get_user ( [string] ) , [string] ) [EOL] [EOL] async def test_get_user_empty ( self ) : [EOL] self . assertIsNone ( await self . data . twitch_get_user ( [string] ) ) [EOL] [EOL] [EOL] class TestCacheTwitchApiCommunity ( TestCacheStore ) : [EOL] async def setUp ( self ) : [EOL] await super ( ) . setUp ( ) [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_community_id = patcher . start ( ) [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_community_name = patcher . start ( ) [EOL] [EOL] async def test_load_id ( self ) : [EOL] self . mock_community_id . return_value = TwitchCommunity ( [string] , [string] ) [EOL] self . assertIs ( await self . data . twitch_load_community_id ( [string] ) , True ) [EOL] self . assertTrue ( self . mock_community_id . called ) [EOL] self . mock_community_id . reset_mock ( ) [EOL] self . assertIs ( await self . data . twitch_load_community_id ( [string] ) , True ) [EOL] self . assertFalse ( self . mock_community_id . called ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . data . _twitchCommunityNameKey ( [string] ) ) ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . data . _twitchCommunityIdKey ( [string] ) ) ) [EOL] [EOL] async def test_load_id_no_load ( self ) : [EOL] self . mock_community_id . return_value = None [EOL] self . assertIs ( await self . data . twitch_load_community_id ( [string] ) , False ) [EOL] self . assertTrue ( self . mock_community_id . called ) [EOL] self . mock_community_id . reset_mock ( ) [EOL] self . assertIs ( await self . data . twitch_load_community_id ( [string] ) , False ) [EOL] self . assertTrue ( self . mock_community_id . called ) [EOL] self . assertIsNone ( await self . redis . get ( self . data . _twitchCommunityNameKey ( [string] ) ) ) [EOL] self . assertIsNone ( await self . redis . get ( self . data . _twitchCommunityIdKey ( [string] ) ) ) [EOL] [EOL] async def test_load_ids ( self ) : [EOL] self . mock_community_id . return_value = TwitchCommunity ( [string] , [string] ) [EOL] self . assertIs ( await self . data . twitch_load_community_ids ( { [string] } ) , True ) [EOL] self . assertTrue ( self . mock_community_id . called ) [EOL] self . mock_community_id . reset_mock ( ) [EOL] self . assertIs ( await self . data . twitch_load_community_ids ( { [string] } ) , True ) [EOL] self . assertFalse ( self . mock_community_id . called ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . data . _twitchCommunityNameKey ( [string] ) ) ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . data . _twitchCommunityIdKey ( [string] ) ) ) [EOL] [EOL] async def test_load_ids_no_load ( self ) : [EOL] self . assertIs ( await self . data . twitch_load_community_ids ( set ( ) ) , True ) [EOL] self . mock_community_id . return_value = None [EOL] self . assertIs ( await self . data . twitch_load_community_ids ( { [string] } ) , True ) [EOL] self . assertTrue ( self . mock_community_id . called ) [EOL] self . mock_community_id . reset_mock ( ) [EOL] self . assertIs ( await self . data . twitch_load_community_ids ( { [string] } ) , True ) [EOL] self . assertTrue ( self . mock_community_id . called ) [EOL] self . assertIsNone ( await self . redis . get ( self . data . _twitchCommunityNameKey ( [string] ) ) ) [EOL] self . assertIsNone ( await self . redis . get ( self . data . _twitchCommunityIdKey ( [string] ) ) ) [EOL] [EOL] async def test_load_name ( self ) : [EOL] self . mock_community_name . return_value = TwitchCommunity ( [string] , [string] ) [EOL] self . assertIs ( await self . data . twitch_load_community_name ( [string] ) , True ) [EOL] self . assertTrue ( self . mock_community_name . called ) [EOL] self . mock_community_name . reset_mock ( ) [EOL] self . assertIs ( await self . data . twitch_load_community_name ( [string] ) , True ) [EOL] self . assertFalse ( self . mock_community_name . called ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . data . _twitchCommunityNameKey ( [string] ) ) ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . data . _twitchCommunityIdKey ( [string] ) ) ) [EOL] [EOL] async def test_load_name_no_load ( self ) : [EOL] self . mock_community_name . return_value = None [EOL] self . assertIs ( await self . data . twitch_load_community_name ( [string] ) , False ) [EOL] self . assertTrue ( self . mock_community_name . called ) [EOL] self . mock_community_name . reset_mock ( ) [EOL] self . assertIs ( await self . data . twitch_load_community_name ( [string] ) , False ) [EOL] self . assertTrue ( self . mock_community_name . called ) [EOL] self . assertIsNone ( await self . redis . get ( self . data . _twitchCommunityNameKey ( [string] ) ) ) [EOL] self . assertIsNone ( await self . redis . get ( self . data . _twitchCommunityIdKey ( [string] ) ) ) [EOL] [EOL] async def test_save ( self ) : [EOL] self . assertIs ( await self . data . twitch_save_community ( [string] , [string] ) , True ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . data . _twitchCommunityNameKey ( [string] ) ) ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . data . _twitchCommunityIdKey ( [string] ) ) ) [EOL] [EOL] async def test_save_no_id ( self ) : [EOL] self . assertIs ( await self . data . twitch_save_community ( None , [string] ) , True ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . data . _twitchCommunityNameKey ( [string] ) ) ) [EOL] [EOL] async def test_save_no_name ( self ) : [EOL] self . assertIs ( await self . data . twitch_save_community ( [string] , None ) , True ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . data . _twitchCommunityIdKey ( [string] ) ) ) [EOL] [EOL] async def test_get_id ( self ) : [EOL] await self . data . twitch_save_community ( [string] , [string] ) [EOL] self . assertEqual ( await self . data . twitch_get_community_id ( [string] ) , [string] ) [EOL] [EOL] async def test_get_id_none ( self ) : [EOL] await self . data . twitch_save_community ( None , [string] ) [EOL] self . assertIsNone ( await self . data . twitch_get_community_id ( [string] ) ) [EOL] [EOL] async def test_get_id_empty ( self ) : [EOL] self . assertIsNone ( await self . data . twitch_get_community_id ( [string] ) ) [EOL] [EOL] async def test_get_user ( self ) : [EOL] await self . data . twitch_save_community ( [string] , [string] ) [EOL] self . assertEqual ( await self . data . twitch_get_community_name ( [string] ) , [string] ) [EOL] [EOL] async def test_get_name_none ( self ) : [EOL] await self . data . twitch_save_community ( [string] , None ) [EOL] self . assertIsNone ( await self . data . twitch_get_community_name ( [string] ) ) [EOL] [EOL] async def test_get_user_empty ( self ) : [EOL] self . assertIsNone ( await self . data . twitch_get_community_name ( [string] ) ) [EOL] [EOL] [EOL] class TestCacheTwitchApiEmotes ( TestCacheStore ) : [EOL] async def setUp ( self ) : [EOL] await super ( ) . setUp ( ) [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_emotes = patcher . start ( ) [EOL] self . mock_emotes . return_value = { [number] : ( [string] , [number] ) } [EOL] [EOL] CacheStore . _lastEmoteSet = None [EOL] [EOL] async def test_load ( self ) : [EOL] self . assertIs ( await self . data . twitch_load_emotes ( { [number] } ) , True ) [EOL] self . assertTrue ( self . mock_emotes . called ) [EOL] self . mock_emotes . reset_mock ( ) [EOL] self . assertIs ( await self . data . twitch_load_emotes ( { [number] } ) , True ) [EOL] self . assertFalse ( self . mock_emotes . called ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . data . _twitchEmoteKey ( ) ) ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . data . _twitchEmoteSetKey ( ) ) ) [EOL] [EOL] async def test_load_background ( self ) : [EOL] self . assertIs ( await self . data . twitch_load_emotes ( { [number] } , background = True ) , True ) [EOL] self . assertTrue ( self . mock_emotes . called ) [EOL] self . data . redis . expire ( self . data . _twitchEmoteKey ( ) , [number] ) [EOL] self . mock_emotes . reset_mock ( ) [EOL] self . assertIs ( await self . data . twitch_load_emotes ( { [number] } , background = True ) , True ) [EOL] self . assertTrue ( self . mock_emotes . called ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . data . _twitchEmoteKey ( ) ) ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . data . _twitchEmoteSetKey ( ) ) ) [EOL] [EOL] async def test_load_none ( self ) : [EOL] self . assertIs ( await self . data . twitch_load_emotes ( set ( ) ) , False ) [EOL] self . assertFalse ( self . mock_emotes . called ) [EOL] self . assertIsNone ( await self . redis . get ( self . data . _twitchEmoteKey ( ) ) ) [EOL] self . assertIsNone ( await self . redis . get ( self . data . _twitchEmoteSetKey ( ) ) ) [EOL] self . mock_emotes . return_value = None [EOL] self . assertIs ( await self . data . twitch_load_emotes ( { [number] } ) , False ) [EOL] self . assertTrue ( self . mock_emotes . called ) [EOL] self . mock_emotes . reset_mock ( ) [EOL] self . assertIs ( await self . data . twitch_load_emotes ( { [number] } ) , False ) [EOL] self . assertTrue ( self . mock_emotes . called ) [EOL] self . assertIsNone ( await self . redis . get ( self . data . _twitchEmoteKey ( ) ) ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . data . _twitchEmoteSetKey ( ) ) ) [EOL] [EOL] async def test_save_set ( self ) : [EOL] self . assertIs ( await self . data . twitch_save_emote_set ( { [number] } ) , True ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . data . _twitchEmoteSetKey ( ) ) ) [EOL] [EOL] async def test_save_emotes ( self ) : [EOL] self . assertIs ( await self . data . twitch_save_emotes ( { [number] : ( [string] , [number] ) } ) , True ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . data . _twitchEmoteKey ( ) ) ) [EOL] [EOL] async def test_get_set ( self ) : [EOL] await self . data . twitch_save_emote_set ( { [number] } ) [EOL] self . assertEqual ( await self . data . twitch_get_bot_emote_set ( ) , { [number] } ) [EOL] [EOL] async def test_get_set_none ( self ) : [EOL] self . assertIsNone ( await self . data . twitch_get_bot_emote_set ( ) ) [EOL] [EOL] async def test_get_set_expired ( self ) : [EOL] await self . data . twitch_save_emote_set ( { [number] } ) [EOL] self . assertEqual ( await self . data . twitch_get_bot_emote_set ( ) , { [number] } ) [EOL] self . redis . flushdb ( ) [EOL] self . assertEqual ( await self . data . twitch_get_bot_emote_set ( ) , { [number] } ) [EOL] [EOL] async def test_get_emotes ( self ) : [EOL] await self . data . twitch_save_emotes ( { [number] : ( [string] , [number] ) } ) [EOL] self . assertEqual ( await self . data . twitch_get_emotes ( ) , { [number] : [string] } ) [EOL] [EOL] async def test_get_emotes_empty ( self ) : [EOL] self . assertEqual ( await self . data . twitch_get_emotes ( ) , None ) [EOL] [EOL] async def test_get_emotes_sets ( self ) : [EOL] await self . data . twitch_save_emotes ( { [number] : ( [string] , [number] ) } ) [EOL] self . assertEqual ( await self . data . twitch_get_emote_sets ( ) , { [number] : [number] } ) [EOL] [EOL] async def test_get_emotes_sets_empty ( self ) : [EOL] self . assertEqual ( await self . data . twitch_get_emote_sets ( ) , None ) [EOL]	
	0
import bot [comment] [EOL] [EOL] from tests . unittest . mock_class import AsyncIterator [EOL] from . base_cache_store import TestCacheStore [EOL] [EOL] [EOL] class TestCacheFeatures ( TestCacheStore ) : [EOL] async def setUp ( self ) : [EOL] await super ( ) . setUp ( ) [EOL] [EOL] self . dbmain . getFeatures . return_value = AsyncIterator ( [ [string] ] ) [EOL] [EOL] self . channel = [string] [EOL] self . key = f' [string] { self . channel } [string] ' [EOL] [EOL] async def test_load ( self ) : [EOL] self . assertEqual ( await self . data . loadFeatures ( self . channel ) , { [string] } ) [EOL] self . assertTrue ( self . dbmain . getFeatures . called ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] [EOL] async def test ( self ) : [EOL] self . assertTrue ( await self . data . hasFeature ( self . channel , [string] ) ) [EOL] self . assertTrue ( self . dbmain . getFeatures . called ) [EOL] self . dbmain . getFeatures . reset_mock ( ) [EOL] self . assertFalse ( await self . data . hasFeature ( self . channel , [string] ) ) [EOL] self . assertFalse ( self . dbmain . getFeatures . called ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] [EOL] async def test_reset ( self ) : [EOL] await self . data . loadFeatures ( self . channel ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] await self . data . resetFeatures ( self . channel ) [EOL] self . assertIsNone ( await self . redis . get ( self . key ) ) [EOL] [EOL] async def test_add ( self ) : [EOL] self . dbmain . addFeature . return_value = True [EOL] await self . data . loadFeatures ( self . channel ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] self . assertIs ( await self . data . addFeature ( self . channel , [string] ) , True ) [EOL] self . assertIsNone ( await self . redis . get ( self . key ) ) [EOL] self . assertTrue ( self . dbmain . addFeature . called ) [EOL] [EOL] async def test_add_false ( self ) : [EOL] self . dbmain . addFeature . return_value = False [EOL] await self . data . loadFeatures ( self . channel ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] self . assertIs ( await self . data . addFeature ( self . channel , [string] ) , False ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] self . assertTrue ( self . dbmain . addFeature . called ) [EOL] [EOL] async def test_remove ( self ) : [EOL] self . dbmain . removeFeature . return_value = True [EOL] await self . data . loadFeatures ( self . channel ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] self . assertIs ( await self . data . removeFeature ( self . channel , [string] ) , True ) [EOL] self . assertIsNone ( await self . redis . get ( self . key ) ) [EOL] self . assertTrue ( self . dbmain . removeFeature . called ) [EOL] [EOL] async def test_remove_false ( self ) : [EOL] self . dbmain . removeFeature . return_value = False [EOL] await self . data . loadFeatures ( self . channel ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] self . assertIs ( await self . data . removeFeature ( self . channel , [string] ) , False ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] self . assertTrue ( self . dbmain . removeFeature . called ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import bot [comment] [EOL] [EOL] from tests . unittest . mock_class import AsyncIterator [EOL] from . base_cache_store import TestCacheStore [EOL] [EOL] [EOL] class TestCacheChatProperties ( TestCacheStore ) : [EOL] async def setUp ( self ) : [EOL] await super ( ) . setUp ( ) [EOL] [EOL] self . dbmain . getAllChatProperties . return_value = AsyncIterator ( [ ( [string] , [string] ) , ( [string] , [string] ) , ] ) [EOL] [EOL] self . channel = [string] [EOL] self . key = f' [string] { self . channel } [string] ' [EOL] [EOL] async def test_load ( self ) : [EOL] self . assertEqual ( await self . data . loadChatProperties ( self . channel ) , { [string] : [string] , [string] : [string] } ) [EOL] self . assertTrue ( self . dbmain . getAllChatProperties . called ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] [EOL] async def test ( self ) : [EOL] self . assertEqual ( await self . data . getChatProperty ( self . channel , [string] ) , [string] ) [EOL] self . assertTrue ( self . dbmain . getAllChatProperties . called ) [EOL] self . dbmain . getAllChatProperties . reset_mock ( ) [EOL] self . assertIsNone ( await self . data . getChatProperty ( self . channel , [string] ) ) [EOL] self . assertFalse ( self . dbmain . getAllChatProperties . called ) [EOL] self . assertEqual ( await self . data . getChatProperties ( self . channel , [ [string] ] ) , { [string] : [string] } ) [EOL] self . assertFalse ( self . dbmain . getAllChatProperties . called ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] [EOL] async def test_get_property ( self ) : [EOL] self . assertIsNone ( await self . data . getChatProperty ( [string] , [string] ) ) [EOL] [EOL] async def test_get_property_default ( self ) : [EOL] self . assertEqual ( await self . data . getChatProperty ( [string] , [string] , default = [string] ) , [string] ) [EOL] [EOL] async def test_get_property_default_parse ( self ) : [EOL] self . assertEqual ( await self . data . getChatProperty ( [string] , [string] , default = [string] , parse = int ) , [string] ) [EOL] [EOL] async def test_get_property_existing ( self ) : [EOL] self . assertEqual ( await self . data . getChatProperty ( [string] , [string] ) , [string] ) [EOL] [EOL] async def test_get_property_existing_parse ( self ) : [EOL] self . assertEqual ( await self . data . getChatProperty ( [string] , [string] , parse = int ) , [number] ) [EOL] [EOL] async def test_get_property_existing_default_parse ( self ) : [EOL] self . assertEqual ( await self . data . getChatProperty ( [string] , [string] , default = [string] , parse = int ) , [number] ) [EOL] [EOL] async def test_get_properties ( self ) : [EOL] self . assertEqual ( await self . data . getChatProperties ( [string] , [ [string] , [string] ] ) , { [string] : None , [string] : None } ) [EOL] [EOL] async def test_get_properties_one ( self ) : [EOL] self . assertEqual ( await self . data . getChatProperties ( [string] , [ [string] , [string] ] ) , { [string] : [string] , [string] : None } ) [EOL] [EOL] async def test_get_properties_two ( self ) : [EOL] self . assertEqual ( await self . data . getChatProperties ( [string] , [ [string] , [string] ] ) , { [string] : [string] , [string] : [string] } ) [EOL] [EOL] async def test_get_properties_default ( self ) : [EOL] self . assertEqual ( await self . data . getChatProperties ( [string] , [ [string] , [string] ] , default = [number] ) , { [string] : [number] , [string] : [number] } ) [EOL] [EOL] async def test_get_properties_default_dict ( self ) : [EOL] self . assertEqual ( await self . data . getChatProperties ( [string] , [ [string] , [string] ] , default = { [string] : [string] , [string] : [string] } ) , { [string] : [string] , [string] : [string] } ) [EOL] [EOL] async def test_get_properties_default_partial ( self ) : [EOL] self . assertEqual ( await self . data . getChatProperties ( [string] , [ [string] , [string] ] , default = { [string] : None } ) , { [string] : None } ) [EOL] [EOL] async def test_get_properties_parse ( self ) : [EOL] self . assertEqual ( await self . data . getChatProperties ( [string] , [ [string] , [string] ] , parse = int ) , { [string] : None , [string] : None } ) [EOL] [EOL] async def test_get_properties_parse_default ( self ) : [EOL] self . assertEqual ( await self . data . getChatProperties ( [string] , [ [string] , [string] ] , parse = int , default = [string] ) , { [string] : [string] , [string] : [string] } ) [EOL] [EOL] async def test_get_properties_parse_values ( self ) : [EOL] self . assertEqual ( await self . data . getChatProperties ( [string] , [ [string] , [string] ] , parse = int ) , { [string] : [number] , [string] : [number] } ) [EOL] [EOL] async def test_get_properties_parse_dict ( self ) : [EOL] self . assertEqual ( await self . data . getChatProperties ( [string] , [ [string] , [string] ] , parse = { [string] : int , [string] : lambda v : int ( v ) + [number] } ) , { [string] : [number] , [string] : [number] } ) [EOL] [EOL] async def test_get_properties_parse_partial ( self ) : [EOL] self . assertEqual ( await self . data . getChatProperties ( [string] , [ [string] , [string] ] , parse = { [string] : int } ) , { [string] : [number] , [string] : [string] } ) [EOL] [EOL] async def test_reset ( self ) : [EOL] await self . data . loadChatProperties ( self . channel ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] await self . data . resetChatProperties ( self . channel ) [EOL] self . assertIsNone ( await self . redis . get ( self . key ) ) [EOL] [EOL] async def test_set ( self ) : [EOL] self . dbmain . setChatProperty . return_value = True [EOL] await self . data . loadChatProperties ( self . channel ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] self . assertIs ( await self . data . setChatProperty ( self . channel , [string] , [string] ) , True ) [EOL] self . assertIsNone ( await self . redis . get ( self . key ) ) [EOL] self . assertTrue ( self . dbmain . setChatProperty . called ) [EOL] [EOL] async def test_set_false ( self ) : [EOL] self . dbmain . setChatProperty . return_value = False [EOL] await self . data . loadChatProperties ( self . channel ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] self . assertIs ( await self . data . setChatProperty ( self . channel , [string] , [string] ) , False ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] self . assertTrue ( self . dbmain . setChatProperty . called ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from asynctest import patch [EOL] [EOL] import bot [comment] [EOL] [EOL] from . base_cache_store import TestCacheStore [EOL] [EOL] [EOL] class TestCacheBttvApiGlobalEmotes ( TestCacheStore ) : [EOL] async def setUp ( self ) : [EOL] await super ( ) . setUp ( ) [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_emotes = patcher . start ( ) [EOL] self . mock_emotes . return_value = { [string] : [string] } [EOL] [EOL] async def test_load ( self ) : [EOL] self . assertIs ( await self . data . bttv_load_global_emotes ( ) , True ) [EOL] self . assertTrue ( self . mock_emotes . called ) [EOL] self . mock_emotes . reset_mock ( ) [EOL] self . assertIs ( await self . data . bttv_load_global_emotes ( ) , True ) [EOL] self . assertFalse ( self . mock_emotes . called ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . data . _bttvGlobalEmoteKey ( ) ) ) [EOL] [EOL] async def test_load_background ( self ) : [EOL] self . assertIs ( await self . data . bttv_load_global_emotes ( background = True ) , True ) [EOL] self . assertTrue ( self . mock_emotes . called ) [EOL] self . data . redis . expire ( self . data . _bttvGlobalEmoteKey ( ) , [number] ) [EOL] self . mock_emotes . reset_mock ( ) [EOL] self . assertIs ( await self . data . bttv_load_global_emotes ( background = True ) , True ) [EOL] self . assertTrue ( self . mock_emotes . called ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . data . _bttvGlobalEmoteKey ( ) ) ) [EOL] [EOL] async def test_load_none ( self ) : [EOL] self . mock_emotes . return_value = None [EOL] self . assertIs ( await self . data . bttv_load_global_emotes ( ) , False ) [EOL] self . assertTrue ( self . mock_emotes . called ) [EOL] self . mock_emotes . reset_mock ( ) [EOL] self . assertIs ( await self . data . bttv_load_global_emotes ( ) , False ) [EOL] self . assertTrue ( self . mock_emotes . called ) [EOL] self . assertIsNone ( await self . redis . get ( self . data . _bttvGlobalEmoteKey ( ) ) ) [EOL] [EOL] async def test_save ( self ) : [EOL] self . assertIs ( await self . data . bttv_save_global_emotes ( { [string] : [string] } ) , True ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . data . _bttvGlobalEmoteKey ( ) ) ) [EOL] [EOL] async def test_get ( self ) : [EOL] await self . data . bttv_save_global_emotes ( { [string] : [string] } ) [EOL] self . assertEqual ( await self . data . bttv_get_global_emotes ( ) , { [string] : [string] } ) [EOL] [EOL] async def test_get_empty ( self ) : [EOL] self . assertIsNone ( await self . data . bttv_get_global_emotes ( ) ) [EOL] [EOL] [EOL] class TestCacheBttvApiBroadcasterEmotes ( TestCacheStore ) : [EOL] async def setUp ( self ) : [EOL] await super ( ) . setUp ( ) [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_emotes = patcher . start ( ) [EOL] self . mock_emotes . return_value = { [string] : [string] } [EOL] [EOL] async def test_load ( self ) : [EOL] self . assertIs ( await self . data . bttv_load_broadcaster_emotes ( [string] ) , True ) [EOL] self . assertTrue ( self . mock_emotes . called ) [EOL] self . mock_emotes . reset_mock ( ) [EOL] self . assertIs ( await self . data . bttv_load_broadcaster_emotes ( [string] ) , True ) [EOL] self . assertFalse ( self . mock_emotes . called ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . data . _bttvBroadcasterEmoteKey ( [string] ) ) ) [EOL] [EOL] async def test_load_background ( self ) : [EOL] self . assertIs ( await self . data . bttv_load_broadcaster_emotes ( [string] , background = True ) , True ) [EOL] self . assertTrue ( self . mock_emotes . called ) [EOL] self . data . redis . expire ( self . data . _bttvBroadcasterEmoteKey ( [string] ) , [number] ) [EOL] self . mock_emotes . reset_mock ( ) [EOL] self . assertIs ( await self . data . bttv_load_broadcaster_emotes ( [string] , background = True ) , True ) [EOL] self . assertTrue ( self . mock_emotes . called ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . data . _bttvBroadcasterEmoteKey ( [string] ) ) ) [EOL] [EOL] async def test_load_none ( self ) : [EOL] self . mock_emotes . return_value = None [EOL] self . assertIs ( await self . data . bttv_load_broadcaster_emotes ( [string] ) , False ) [EOL] self . assertTrue ( self . mock_emotes . called ) [EOL] self . mock_emotes . reset_mock ( ) [EOL] self . assertIs ( await self . data . bttv_load_broadcaster_emotes ( [string] ) , False ) [EOL] self . assertTrue ( self . mock_emotes . called ) [EOL] self . assertIsNone ( await self . redis . get ( self . data . _bttvBroadcasterEmoteKey ( [string] ) ) ) [EOL] [EOL] async def test_save ( self ) : [EOL] self . assertIs ( await self . data . bttv_save_broadcaster_emotes ( [string] , { [string] : [string] } ) , True ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . data . _bttvBroadcasterEmoteKey ( [string] ) ) ) [EOL] [EOL] async def test_get ( self ) : [EOL] await self . data . bttv_save_broadcaster_emotes ( [string] , { [string] : [string] } ) [EOL] self . assertEqual ( await self . data . bttv_get_broadcaster_emotes ( [string] ) , { [string] : [string] } ) [EOL] [EOL] async def test_get_empty ( self ) : [EOL] self . assertIsNone ( await self . data . bttv_get_broadcaster_emotes ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from datetime import datetime , timedelta [EOL] [EOL] import bot [comment] [EOL] [EOL] from lib . data import AutoRepeatMessage , AutoRepeatList , RepeatData [EOL] from tests . unittest . mock_class import AsyncIterator [EOL] from . base_cache_store import TestCacheStore [EOL] [EOL] [EOL] class TestCacheAutoRepeat ( TestCacheStore ) : [EOL] async def setUp ( self ) : [EOL] await super ( ) . setUp ( ) [EOL] [EOL] self . now = datetime . utcnow ( ) [EOL] [EOL] self . dbmain . getAutoRepeats . return_value = AsyncIterator ( [ RepeatData ( [string] , [string] , [string] , None , [number] , self . now ) , RepeatData ( [string] , [string] , [string] , None , [number] , self . now - timedelta ( minutes = [number] ) ) , ] ) [EOL] [EOL] async def test_load ( self ) : [EOL] self . assertEqual ( await self . data . loadAutoRepeats ( ) , [ RepeatData ( [string] , [string] , [string] , None , [number] , self . now ) , RepeatData ( [string] , [string] , [string] , None , [number] , self . now - timedelta ( minutes = [number] ) ) , ] ) [EOL] self . assertTrue ( self . dbmain . getAutoRepeats . called ) [EOL] self . assertIsNotNone ( await self . redis . get ( [string] ) ) [EOL] [EOL] async def test ( self ) : [EOL] self . assertEqual ( [ r async for r in self . data . getAutoRepeatToSend ( self . now ) ] , [ AutoRepeatMessage ( [string] , [string] , [string] ) ] ) [EOL] self . assertTrue ( self . dbmain . getAutoRepeats . called ) [EOL] self . dbmain . getAutoRepeats . reset_mock ( ) [EOL] self . assertEqual ( [ r async for r in self . data . getAutoRepeatToSend ( self . now ) ] , [ AutoRepeatMessage ( [string] , [string] , [string] ) ] ) [EOL] self . assertFalse ( self . dbmain . getAutoRepeats . called ) [EOL] self . assertEqual ( [ r async for r in self . data . listAutoRepeat ( [string] ) ] , [ AutoRepeatList ( [string] , [string] , None , [number] , self . now ) ] ) [EOL] self . assertFalse ( self . dbmain . getAutoRepeats . called ) [EOL] self . assertIsNotNone ( await self . redis . get ( [string] ) ) [EOL] [EOL] async def test_empty ( self ) : [EOL] self . dbmain . getAutoRepeats . return_value = AsyncIterator ( [ ] ) [EOL] self . assertEqual ( [ r async for r in self . data . getAutoRepeatToSend ( self . now ) ] , [ ] ) [EOL] [EOL] async def test_nothing_to_send ( self ) : [EOL] self . dbmain . getAutoRepeats . return_value = AsyncIterator ( [ RepeatData ( [string] , [string] , [string] , None , [number] , self . now ) , ] ) [EOL] self . assertEqual ( [ r async for r in self . data . getAutoRepeatToSend ( self . now ) ] , [ ] ) [EOL] [EOL] async def test_something_to_send ( self ) : [EOL] self . assertEqual ( [ r async for r in self . data . getAutoRepeatToSend ( self . now ) ] , [ AutoRepeatMessage ( [string] , [string] , [string] ) ] ) [EOL] [EOL] async def test_something_to_send_decimal ( self ) : [EOL] self . dbmain . getAutoRepeats . return_value = AsyncIterator ( [ RepeatData ( [string] , [string] , [string] , None , [number] , self . now - timedelta ( seconds = [number] ) ) , RepeatData ( [string] , [string] , [string] , None , [number] , self . now - timedelta ( seconds = [number] ) ) , ] ) [EOL] self . assertEqual ( [ r async for r in self . data . getAutoRepeatToSend ( ) ] , [ AutoRepeatMessage ( [string] , [string] , [string] ) ] ) [EOL] [EOL] async def test_something_to_send_count ( self ) : [EOL] self . dbmain . getAutoRepeats . return_value = AsyncIterator ( [ RepeatData ( [string] , [string] , [string] , [number] , [number] , self . now ) , RepeatData ( [string] , [string] , [string] , [number] , [number] , self . now - timedelta ( minutes = [number] ) ) , ] ) [EOL] self . assertEqual ( [ r async for r in self . data . getAutoRepeatToSend ( ) ] , [ AutoRepeatMessage ( [string] , [string] , [string] ) ] ) [EOL] [EOL] async def test_something_to_send_multiple ( self ) : [EOL] self . dbmain . getAutoRepeats . return_value = AsyncIterator ( [ RepeatData ( [string] , [string] , [string] , [number] , [number] , self . now - timedelta ( minutes = [number] ) ) , RepeatData ( [string] , [string] , [string] , [number] , [number] , self . now - timedelta ( minutes = [number] ) ) , ] ) [EOL] self . assertEqual ( [ r async for r in self . data . getAutoRepeatToSend ( ) ] , [ AutoRepeatMessage ( [string] , [string] , [string] ) , AutoRepeatMessage ( [string] , [string] , [string] ) ] ) [EOL] [EOL] async def test_list_empty ( self ) : [EOL] self . dbmain . getAutoRepeats . return_value = AsyncIterator ( [ ] ) [EOL] self . assertEqual ( [ r async for r in self . data . listAutoRepeat ( [string] ) ] , [ ] ) [EOL] [EOL] async def test_list ( self ) : [EOL] self . assertEqual ( [ r async for r in self . data . listAutoRepeat ( [string] ) ] , [ AutoRepeatList ( [string] , [string] , None , [number] , self . now ) ] ) [EOL] [EOL] async def test_reset ( self ) : [EOL] await self . data . loadBotManagers ( ) [EOL] self . assertIsNotNone ( await self . redis . get ( [string] ) ) [EOL] await self . data . resetBotManagers ( ) [EOL] self . assertIsNone ( await self . redis . get ( [string] ) ) [EOL] [EOL] async def test_add ( self ) : [EOL] self . dbmain . addBotManager . return_value = True [EOL] await self . data . loadBotManagers ( ) [EOL] self . assertIsNotNone ( await self . redis . get ( [string] ) ) [EOL] self . assertIs ( await self . data . addBotManager ( [string] ) , True ) [EOL] self . assertIsNone ( await self . redis . get ( [string] ) ) [EOL] self . assertTrue ( self . dbmain . addBotManager . called ) [EOL] [EOL] async def test_add_false ( self ) : [EOL] self . dbmain . addBotManager . return_value = False [EOL] await self . data . loadBotManagers ( ) [EOL] self . assertIsNotNone ( await self . redis . get ( [string] ) ) [EOL] self . assertIs ( await self . data . addBotManager ( [string] ) , False ) [EOL] self . assertIsNotNone ( await self . redis . get ( [string] ) ) [EOL] self . assertTrue ( self . dbmain . addBotManager . called ) [EOL] [EOL] async def test_remove ( self ) : [EOL] self . dbmain . removeBotManager . return_value = True [EOL] await self . data . loadBotManagers ( ) [EOL] self . assertIsNotNone ( await self . redis . get ( [string] ) ) [EOL] self . assertIs ( await self . data . removeBotManager ( [string] ) , True ) [EOL] self . assertIsNone ( await self . redis . get ( [string] ) ) [EOL] self . assertTrue ( self . dbmain . removeBotManager . called ) [EOL] [EOL] async def test_remove_false ( self ) : [EOL] self . dbmain . removeBotManager . return_value = False [EOL] await self . data . loadBotManagers ( ) [EOL] self . assertIsNotNone ( await self . redis . get ( [string] ) ) [EOL] self . assertIs ( await self . data . removeBotManager ( [string] ) , False ) [EOL] self . assertIsNotNone ( await self . redis . get ( [string] ) ) [EOL] self . assertTrue ( self . dbmain . removeBotManager . called ) [EOL]	
import bot [comment] [EOL] [EOL] from tests . unittest . mock_class import AsyncIterator [EOL] from . base_cache_store import TestCacheStore [EOL] [EOL] [EOL] class TestCacheBotMangers ( TestCacheStore ) : [EOL] async def setUp ( self ) : [EOL] await super ( ) . setUp ( ) [EOL] [EOL] self . dbmain . getGameAbbreviations . return_value = AsyncIterator ( [ ( [string] , [string] ) , ] ) [EOL] [EOL] async def test_load ( self ) : [EOL] self . assertEqual ( await self . data . loadGameAbbreviations ( ) , { [string] : [string] } ) [EOL] self . assertTrue ( self . dbmain . getGameAbbreviations . called ) [EOL] self . assertIsNotNone ( await self . redis . get ( [string] ) ) [EOL] [EOL] async def test ( self ) : [EOL] self . assertEqual ( await self . data . getFullGameTitle ( [string] ) , [string] ) [EOL] self . assertTrue ( self . dbmain . getGameAbbreviations . called ) [EOL] self . dbmain . getGameAbbreviations . reset_mock ( ) [EOL] self . assertIsNone ( await self . data . getFullGameTitle ( [string] ) ) [EOL] self . assertFalse ( self . dbmain . getGameAbbreviations . called ) [EOL] self . assertIsNotNone ( await self . redis . get ( [string] ) ) [EOL] [EOL] async def test_not_existing ( self ) : [EOL] self . assertIsNone ( await self . data . getFullGameTitle ( [string] ) ) [EOL] [EOL] async def test_abbreviation ( self ) : [EOL] self . assertEqual ( await self . data . getFullGameTitle ( [string] ) , [string] ) [EOL] [EOL] async def test_casing ( self ) : [EOL] self . assertEqual ( await self . data . getFullGameTitle ( [string] ) , [string] ) [EOL] [EOL] async def test_twitch_game ( self ) : [EOL] self . assertEqual ( await self . data . getFullGameTitle ( [string] ) , [string] ) [EOL] [EOL] async def test_twitch_game_casing ( self ) : [EOL] self . assertEqual ( await self . data . getFullGameTitle ( [string] ) , [string] ) [EOL] [EOL] async def test_reset ( self ) : [EOL] await self . data . loadGameAbbreviations ( ) [EOL] self . assertIsNotNone ( await self . redis . get ( [string] ) ) [EOL] await self . data . resetGameAbbreviations ( ) [EOL] self . assertIsNone ( await self . redis . get ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import bot [comment] [EOL] [EOL] from tests . unittest . mock_class import AsyncIterator [EOL] from . base_cache_store import TestCacheStore [EOL] [EOL] [EOL] class TestCachePermittedUsers ( TestCacheStore ) : [EOL] async def setUp ( self ) : [EOL] await super ( ) . setUp ( ) [EOL] [EOL] self . dbmain . getPermittedUsers . return_value = AsyncIterator ( [ [string] ] ) [EOL] [EOL] self . channel = [string] [EOL] self . key = f' [string] { self . channel } [string] ' [EOL] [EOL] async def test_load ( self ) : [EOL] self . assertEqual ( await self . data . loadPermittedUsers ( self . channel ) , [ [string] ] ) [EOL] self . assertTrue ( self . dbmain . getPermittedUsers . called ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] [EOL] async def test ( self ) : [EOL] self . assertTrue ( await self . data . isPermittedUser ( self . channel , [string] ) ) [EOL] self . assertTrue ( self . dbmain . getPermittedUsers . called ) [EOL] self . dbmain . getPermittedUsers . reset_mock ( ) [EOL] self . assertFalse ( await self . data . isPermittedUser ( self . channel , [string] ) ) [EOL] self . assertFalse ( self . dbmain . getPermittedUsers . called ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] [EOL] async def test_reset ( self ) : [EOL] await self . data . loadPermittedUsers ( self . channel ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] await self . data . resetPermittedUsers ( self . channel ) [EOL] self . assertIsNone ( await self . redis . get ( self . key ) ) [EOL] [EOL] async def test_add ( self ) : [EOL] self . dbmain . addPermittedUser . return_value = True [EOL] await self . data . loadPermittedUsers ( self . channel ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] self . assertIs ( await self . data . addPermittedUser ( self . channel , [string] , [string] ) , True ) [EOL] self . assertIsNone ( await self . redis . get ( self . key ) ) [EOL] self . assertTrue ( self . dbmain . addPermittedUser . called ) [EOL] [EOL] async def test_add_false ( self ) : [EOL] self . dbmain . addPermittedUser . return_value = False [EOL] await self . data . loadPermittedUsers ( self . channel ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] self . assertIs ( await self . data . addPermittedUser ( self . channel , [string] , [string] ) , False ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] self . assertTrue ( self . dbmain . addPermittedUser . called ) [EOL] [EOL] async def test_remove ( self ) : [EOL] self . dbmain . removePermittedUser . return_value = True [EOL] await self . data . loadPermittedUsers ( self . channel ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] self . assertIs ( await self . data . removePermittedUser ( self . channel , [string] , [string] ) , True ) [EOL] self . assertIsNone ( await self . redis . get ( self . key ) ) [EOL] self . assertTrue ( self . dbmain . removePermittedUser . called ) [EOL] [EOL] async def test_remove_false ( self ) : [EOL] self . dbmain . removePermittedUser . return_value = False [EOL] await self . data . loadPermittedUsers ( self . channel ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] self . assertIs ( await self . data . removePermittedUser ( self . channel , [string] , [string] ) , False ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] self . assertTrue ( self . dbmain . removePermittedUser . called ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import bot [comment] [EOL] [EOL] from tests . unittest . mock_class import AsyncIterator [EOL] from . base_cache_store import TestCacheStore [EOL] [EOL] [EOL] class TestCacheCustomCommands ( TestCacheStore ) : [EOL] async def setUp ( self ) : [EOL] await super ( ) . setUp ( ) [EOL] [EOL] self . dbmain . getCustomCommands . side_effect = lambda * _ : AsyncIterator ( [ ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) , ] ) [EOL] getCustomCommandProperties = self . dbmain . getCustomCommandProperties [EOL] getCustomCommandProperties . side_effect = lambda * _ : AsyncIterator ( [ ( [string] , [string] , [string] , [string] ) , ] ) [EOL] [EOL] self . channel = [string] [EOL] self . key = f' [string] { self . channel } [string] ' [EOL] [EOL] async def test_load ( self ) : [EOL] self . assertEqual ( await self . data . loadCustomCommands ( self . channel ) , { [string] : { [string] : ( [string] , { [string] : [string] } ) , [string] : ( [string] , { } ) , } } ) [EOL] self . assertTrue ( self . dbmain . getCustomCommands . called ) [EOL] self . assertTrue ( self . dbmain . getCustomCommandProperties . called ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] [EOL] async def test_get_chat_commands ( self ) : [EOL] self . assertEqual ( await self . data . getChatCommands ( self . channel , [string] ) , { self . channel : { [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] , [string] : [string] , } , } ) [EOL] self . assertTrue ( self . dbmain . getCustomCommands . called ) [EOL] self . assertTrue ( self . dbmain . getCustomCommandProperties . called ) [EOL] self . dbmain . getCustomCommands . reset_mock ( ) [EOL] self . dbmain . getCustomCommandProperties . reset_mock ( ) [EOL] self . assertEqual ( await self . data . getChatCommands ( self . channel , [string] ) , { self . channel : { } , [string] : { } , } ) [EOL] self . assertFalse ( self . dbmain . getCustomCommands . called ) [EOL] self . assertFalse ( self . dbmain . getCustomCommandProperties . called ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] [EOL] async def test_get_custom_command ( self ) : [EOL] self . assertEqual ( await self . data . getCustomCommand ( self . channel , [string] , [string] ) , [string] ) [EOL] self . assertTrue ( self . dbmain . getCustomCommands . called ) [EOL] self . assertTrue ( self . dbmain . getCustomCommandProperties . called ) [EOL] self . dbmain . getCustomCommands . reset_mock ( ) [EOL] self . dbmain . getCustomCommandProperties . reset_mock ( ) [EOL] self . assertIsNone ( await self . data . getCustomCommand ( self . channel , [string] , [string] ) ) [EOL] self . assertIsNone ( await self . data . getCustomCommand ( self . channel , [string] , [string] ) ) [EOL] self . assertFalse ( self . dbmain . getCustomCommands . called ) [EOL] self . assertFalse ( self . dbmain . getCustomCommandProperties . called ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] [EOL] async def test_get_custom_command_property ( self ) : [EOL] self . assertEqual ( await self . data . getCustomCommandProperty ( self . channel , [string] , [string] , [string] ) , [string] ) [EOL] self . assertTrue ( self . dbmain . getCustomCommands . called ) [EOL] self . assertTrue ( self . dbmain . getCustomCommandProperties . called ) [EOL] self . dbmain . getCustomCommands . reset_mock ( ) [EOL] self . dbmain . getCustomCommandProperties . reset_mock ( ) [EOL] self . assertIsNone ( await self . data . getCustomCommandProperty ( self . channel , [string] , [string] , [string] ) ) [EOL] self . assertIsNone ( await self . data . getCustomCommandProperty ( self . channel , [string] , [string] , [string] ) ) [EOL] self . assertIsNone ( await self . data . getCustomCommandProperty ( self . channel , [string] , [string] , [string] ) ) [EOL] self . assertFalse ( self . dbmain . getCustomCommands . called ) [EOL] self . assertFalse ( self . dbmain . getCustomCommandProperties . called ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] [EOL] async def test_reset ( self ) : [EOL] await self . data . loadCustomCommands ( self . channel ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] await self . data . resetCustomCommands ( self . channel ) [EOL] self . assertIsNone ( await self . redis . get ( self . key ) ) [EOL] [EOL] async def test_insert ( self ) : [EOL] self . dbmain . insertCustomCommand . return_value = True [EOL] await self . data . loadCustomCommands ( self . channel ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] self . assertIs ( await self . data . insertCustomCommand ( self . channel , [string] , [string] , [string] , [string] ) , True ) [EOL] self . assertIsNone ( await self . redis . get ( self . key ) ) [EOL] self . assertTrue ( self . dbmain . insertCustomCommand . called ) [EOL] [EOL] async def test_insert_false ( self ) : [EOL] self . dbmain . insertCustomCommand . return_value = False [EOL] await self . data . loadCustomCommands ( self . channel ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] self . assertIs ( await self . data . insertCustomCommand ( self . channel , [string] , [string] , [string] , [string] ) , False ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] self . assertTrue ( self . dbmain . insertCustomCommand . called ) [EOL] [EOL] async def test_update ( self ) : [EOL] self . dbmain . updateCustomCommand . return_value = True [EOL] await self . data . loadCustomCommands ( self . channel ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] self . assertIs ( await self . data . updateCustomCommand ( self . channel , [string] , [string] , [string] , [string] ) , True ) [EOL] self . assertIsNone ( await self . redis . get ( self . key ) ) [EOL] self . assertTrue ( self . dbmain . updateCustomCommand . called ) [EOL] [EOL] async def test_update_false ( self ) : [EOL] self . dbmain . updateCustomCommand . return_value = False [EOL] await self . data . loadCustomCommands ( self . channel ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] self . assertIs ( await self . data . updateCustomCommand ( self . channel , [string] , [string] , [string] , [string] ) , False ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] self . assertTrue ( self . dbmain . updateCustomCommand . called ) [EOL] [EOL] async def test_append ( self ) : [EOL] self . dbmain . appendCustomCommand . return_value = True [EOL] await self . data . loadCustomCommands ( self . channel ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] self . assertIs ( await self . data . appendCustomCommand ( self . channel , [string] , [string] , [string] , [string] ) , True ) [EOL] self . assertIsNone ( await self . redis . get ( self . key ) ) [EOL] self . assertTrue ( self . dbmain . appendCustomCommand . called ) [EOL] [EOL] async def test_append_false ( self ) : [EOL] self . dbmain . appendCustomCommand . return_value = False [EOL] await self . data . loadCustomCommands ( self . channel ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] self . assertIs ( await self . data . appendCustomCommand ( self . channel , [string] , [string] , [string] , [string] ) , False ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] self . assertTrue ( self . dbmain . appendCustomCommand . called ) [EOL] [EOL] async def test_replace ( self ) : [EOL] self . dbmain . replaceCustomCommand . return_value = True [EOL] await self . data . loadCustomCommands ( self . channel ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] self . assertIs ( await self . data . replaceCustomCommand ( self . channel , [string] , [string] , [string] , [string] ) , True ) [EOL] self . assertIsNone ( await self . redis . get ( self . key ) ) [EOL] self . assertTrue ( self . dbmain . replaceCustomCommand . called ) [EOL] [EOL] async def test_replace_false ( self ) : [EOL] self . dbmain . replaceCustomCommand . return_value = False [EOL] await self . data . loadCustomCommands ( self . channel ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] self . assertIs ( await self . data . replaceCustomCommand ( self . channel , [string] , [string] , [string] , [string] ) , False ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] self . assertTrue ( self . dbmain . replaceCustomCommand . called ) [EOL] [EOL] async def test_delete ( self ) : [EOL] self . dbmain . deleteCustomCommand . return_value = True [EOL] await self . data . loadCustomCommands ( self . channel ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] self . assertIs ( await self . data . deleteCustomCommand ( self . channel , [string] , [string] , [string] ) , True ) [EOL] self . assertIsNone ( await self . redis . get ( self . key ) ) [EOL] self . assertTrue ( self . dbmain . deleteCustomCommand . called ) [EOL] [EOL] async def test_delete_false ( self ) : [EOL] self . dbmain . deleteCustomCommand . return_value = False [EOL] await self . data . loadCustomCommands ( self . channel ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] self . assertIs ( await self . data . deleteCustomCommand ( self . channel , [string] , [string] , [string] ) , False ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] self . assertTrue ( self . dbmain . deleteCustomCommand . called ) [EOL] [EOL] async def test_level ( self ) : [EOL] self . dbmain . levelCustomCommand . return_value = True [EOL] await self . data . loadCustomCommands ( self . channel ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] self . assertIs ( await self . data . levelCustomCommand ( self . channel , [string] , [string] , [string] , [string] ) , True ) [EOL] self . assertIsNone ( await self . redis . get ( self . key ) ) [EOL] self . assertTrue ( self . dbmain . levelCustomCommand . called ) [EOL] [EOL] async def test_level_false ( self ) : [EOL] self . dbmain . levelCustomCommand . return_value = False [EOL] await self . data . loadCustomCommands ( self . channel ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] self . assertIs ( await self . data . levelCustomCommand ( self . channel , [string] , [string] , [string] , [string] ) , False ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] self . assertTrue ( self . dbmain . levelCustomCommand . called ) [EOL] [EOL] async def test_rename ( self ) : [EOL] self . dbmain . renameCustomCommand . return_value = True [EOL] await self . data . loadCustomCommands ( self . channel ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] self . assertIs ( await self . data . renameCustomCommand ( self . channel , [string] , [string] , [string] , [string] ) , True ) [EOL] self . assertIsNone ( await self . redis . get ( self . key ) ) [EOL] self . assertTrue ( self . dbmain . renameCustomCommand . called ) [EOL] [EOL] async def test_rename_false ( self ) : [EOL] self . dbmain . renameCustomCommand . return_value = False [EOL] await self . data . loadCustomCommands ( self . channel ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] self . assertIs ( await self . data . renameCustomCommand ( self . channel , [string] , [string] , [string] , [string] ) , False ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] self . assertTrue ( self . dbmain . renameCustomCommand . called ) [EOL] [EOL] async def test_property ( self ) : [EOL] self . dbmain . processCustomCommandProperty . return_value = True [EOL] await self . data . loadCustomCommands ( self . channel ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] self . assertIs ( await self . data . processCustomCommandProperty ( self . channel , [string] , [string] , [string] ) , True ) [EOL] self . assertIsNone ( await self . redis . get ( self . key ) ) [EOL] self . assertTrue ( self . dbmain . processCustomCommandProperty . called ) [EOL] [EOL] async def test_property_false ( self ) : [EOL] self . dbmain . processCustomCommandProperty . return_value = False [EOL] await self . data . loadCustomCommands ( self . channel ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] self . assertIs ( await self . data . processCustomCommandProperty ( self . channel , [string] , [string] , [string] ) , False ) [EOL] self . assertIsNotNone ( await self . redis . get ( self . key ) ) [EOL] self . assertTrue ( self . dbmain . processCustomCommandProperty . called ) [EOL]	
import aioredis [EOL] import asynctest [EOL] from asynctest import MagicMock , patch [EOL] [EOL] import bot [comment] [EOL] import tests . unittest . asynctest_fix [comment] [EOL] [EOL] from lib . cache import CacheStore [EOL] from lib . database import DatabaseMain [EOL] [EOL] [EOL] class TestCacheStore ( asynctest . TestCase ) : [EOL] async def setUp ( self ) : [EOL] self . dbmain = MagicMock ( spec = DatabaseMain ) [EOL] self . dbmain . __aenter__ . return_value = self . dbmain [EOL] self . dbmain . __aexit__ . return_value = False [EOL] [EOL] patcher = patch . object ( DatabaseMain , [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_dbmain = patcher . start ( ) [EOL] self . mock_dbmain . return_value = self . dbmain [EOL] [EOL] self . pool = await aioredis . create_pool ( ( [string] , [number] ) , encoding = [string] , minsize = [number] , maxsize = [number] ) [EOL] self . data = CacheStore ( self . pool ) [EOL] await self . data . open ( ) [EOL] [EOL] self . redis = self . data . redis [EOL] await self . redis . flushdb ( ) [EOL] [EOL] async def tearDown ( self ) : [EOL] await self . data . close ( ) [EOL] self . pool . close ( ) [EOL] await self . pool . wait_closed ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import os [EOL] [EOL] from tests . database . postgres . test_database import TestPostgres [EOL] from lib import database [EOL] from tests . database . tests . auto_repeat import TestAutoRepeat [EOL] [EOL] [EOL] class TestPostgresAutoRepeat ( TestAutoRepeat , TestPostgres ) : [EOL] async def setUp ( self ) : [EOL] await super ( ) . setUp ( ) [EOL] sqlFile = os . path . join ( os . path . dirname ( database . __file__ ) , [string] , [string] ) [EOL] with open ( sqlFile ) as f : [EOL] await self . execute ( f . read ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import os [EOL] [EOL] from tests . database . postgres . test_database import TestPostgres [EOL] from lib import database [EOL] from tests . database . tests . chat_properties import TestChatProperties [EOL] [EOL] [EOL] class TestPostgresChatProperties ( TestChatProperties , TestPostgres ) : [EOL] async def setUp ( self ) : [EOL] await super ( ) . setUp ( ) [EOL] sqlFile = os . path . join ( os . path . dirname ( database . __file__ ) , [string] , [string] ) [EOL] with open ( sqlFile ) as f : [EOL] await self . execute ( f . read ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import os [EOL] [EOL] from tests . database . postgres . test_database import TestPostgres [EOL] from lib import database [EOL] from tests . database . tests . oauth import TestOAuth [EOL] [EOL] [EOL] class TestPostgresOAuth ( TestOAuth , TestPostgres ) : [EOL] async def setUp ( self ) : [EOL] await super ( ) . setUp ( ) [EOL] sqlFile = os . path . join ( os . path . dirname ( database . __file__ ) , [string] , [string] ) [EOL] with open ( sqlFile ) as f : [EOL] await self . execute ( f . read ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import platform [EOL] [EOL] import aioodbc [EOL] import asynctest [EOL] [EOL] import bot [comment] [EOL] [EOL] from collections . abc import Sequence [EOL] [EOL] import tests . unittest . asynctest_fix [comment] [EOL] from lib . database import DatabaseMain [EOL] [EOL] [EOL] class TestPostgres ( asynctest . TestCase ) : [EOL] POOL_SIZE = [number] [EOL] [EOL] async def setUp ( self ) : [EOL] if platform . system ( ) == [string] : [EOL] self . driver = [string] [EOL] else : [EOL] self . driver = [string] [EOL] self . connectionString = f''' [string] { self . driver } [string] ''' [EOL] self . pool = await aioodbc . create_pool ( minsize = self . POOL_SIZE , maxsize = self . POOL_SIZE , dsn = self . connectionString ) [EOL] databaseClass = getattr ( self , [string] , DatabaseMain ) [EOL] self . database = databaseClass ( self . pool ) [EOL] await self . database . connect ( ) [EOL] self . cursor = await self . database . cursor ( ) [EOL] [EOL] patcher = asynctest . patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] mock_globals = patcher . start ( ) [EOL] mock_globals . connectionPools = { [string] : self . pool , [string] : self . pool , [string] : self . pool , [string] : self . pool , } [EOL] [EOL] async def tearDown ( self ) : [EOL] await self . cursor . close ( ) [EOL] await self . database . close ( ) [EOL] self . pool . close ( ) [EOL] await self . pool . wait_closed ( ) [EOL] [EOL] async def execute ( self , query , params = ( ) , * , commit = True ) : [EOL] if isinstance ( query , str ) : [EOL] await self . cursor . execute ( query , params ) [EOL] elif isinstance ( query , Sequence ) : [EOL] for q , p in zip ( query , params if params else ( ( ) , ) * len ( query ) ) : [EOL] await self . cursor . execute ( q , p ) [EOL] else : [EOL] raise TypeError ( ) [EOL] if commit : [EOL] await self . database . connection . commit ( ) [EOL] [EOL] async def executemany ( self , query , params = ( ) , * , commit = True ) : [EOL] await self . cursor . executemany ( query , params ) [EOL] if commit : [EOL] await self . database . connection . commit ( ) [EOL] [EOL] async def value ( self , query , params = ( ) ) : [EOL] await self . cursor . execute ( query , params ) [EOL] return ( await self . cursor . fetchone ( ) or [ None ] ) [ [number] ] [EOL] [EOL] async def row ( self , query , params = ( ) ) : [EOL] await self . cursor . execute ( query , params ) [EOL] row = await self . cursor . fetchone ( ) [EOL] return row and tuple ( row ) [EOL] [EOL] async def rows ( self , query , params = ( ) ) : [EOL] await self . cursor . execute ( query , params ) [EOL] return [ tuple ( r ) for r in await self . cursor . fetchall ( ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import os [EOL] [EOL] from tests . database . postgres . test_database import TestPostgres [EOL] from lib import database [EOL] from tests . database . tests . custom_commands import TestCustomCommands [EOL] [EOL] [EOL] class TestPostgresCustomCommands ( TestCustomCommands , TestPostgres ) : [EOL] async def setUp ( self ) : [EOL] await super ( ) . setUp ( ) [EOL] sqlFile = os . path . join ( os . path . dirname ( database . __file__ ) , [string] , [string] ) [EOL] with open ( sqlFile ) as f : [EOL] await self . execute ( f . read ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import os [EOL] [EOL] from tests . database . sqlite . test_database import TestSqlite [EOL] from lib import database [EOL] from tests . database . tests . features import TestFeatures [EOL] [EOL] [EOL] class TestSqliteFeatures ( TestFeatures , TestSqlite ) : [EOL] async def setUp ( self ) : [EOL] await super ( ) . setUp ( ) [EOL] sqlFile = os . path . join ( os . path . dirname ( database . __file__ ) , [string] , [string] ) [EOL] with open ( sqlFile ) as f : [EOL] await self . execute ( f . read ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import os [EOL] [EOL] from tests . database . sqlite . test_database import TestSqlite [EOL] from lib import database [EOL] from tests . database . tests . game_abbreviations import TestGameAbbreviation [EOL] [EOL] [EOL] class TestSqliteGameAbbreviation ( TestGameAbbreviation , TestSqlite ) : [EOL] async def setUp ( self ) : [EOL] await super ( ) . setUp ( ) [EOL] sqlFile = os . path . join ( os . path . dirname ( database . __file__ ) , [string] , [string] ) [EOL] with open ( sqlFile ) as f : [EOL] await self . execute ( f . read ( ) ) [EOL] await self . setUpInsert ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import os [EOL] [EOL] from tests . database . sqlite . test_database import TestSqlite [EOL] from lib import database [EOL] from tests . database . tests . timeout import TestTimeout [EOL] [EOL] [EOL] class TestSqliteTimeout ( TestTimeout , TestSqlite ) : [EOL] async def setUp ( self ) : [EOL] await super ( ) . setUp ( ) [EOL] sqlFile = os . path . join ( os . path . dirname ( database . __file__ ) , [string] , [string] ) [EOL] with open ( sqlFile ) as f : [EOL] await self . execute ( f . read ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import os [EOL] [EOL] from tests . database . sqlite . test_database import TestSqlite [EOL] from lib import database [EOL] from tests . database . tests . bot_managers import TestBotManagers [EOL] [EOL] [EOL] class TestSqliteBotManagers ( TestBotManagers , TestSqlite ) : [EOL] async def setUp ( self ) : [EOL] await super ( ) . setUp ( ) [EOL] sqlFile = os . path . join ( os . path . dirname ( database . __file__ ) , [string] , [string] ) [EOL] with open ( sqlFile ) as f : [EOL] await self . execute ( f . read ( ) ) [EOL] await self . setUpInsert ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from lib . database import DatabaseOAuth [EOL] [EOL] [EOL] class TestOAuth : [EOL] DatabaseClass = DatabaseOAuth [EOL] [EOL] async def tearDown ( self ) : [EOL] await self . execute ( [string] ) [EOL] await super ( ) . tearDown ( ) [EOL] [EOL] async def test_get_empty ( self ) : [EOL] self . assertIsNone ( await self . database . getOAuthToken ( [string] ) ) [EOL] [EOL] async def test_get_existing ( self ) : [EOL] await self . execute ( [string] , ( [string] , [string] ) ) [EOL] self . assertEqual ( await self . database . getOAuthToken ( [string] ) , [string] ) [EOL] [EOL] async def test_save ( self ) : [EOL] await self . database . saveBroadcasterToken ( [string] , [string] ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [string] , [string] ) ) [EOL] [EOL] async def test_save_existing ( self ) : [EOL] await self . execute ( [string] , ( [string] , [string] ) ) [EOL] await self . database . saveBroadcasterToken ( [string] , [string] ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [string] , [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . _drop_tables import TestDropTables [EOL] [EOL] [EOL] class TestFeatures ( TestDropTables ) : [EOL] async def test_get_features ( self ) : [EOL] await self . execute ( [string] , ( [string] , [string] ) ) [EOL] self . assertEqual ( [ feature async for feature in self . database . getFeatures ( [string] ) ] , [ [string] ] ) [EOL] [EOL] async def test_has ( self ) : [EOL] self . assertIs ( await self . database . hasFeature ( [string] , [string] ) , False ) [EOL] [EOL] async def test_has_existing ( self ) : [EOL] await self . execute ( [string] , ( [string] , [string] ) ) [EOL] self . assertIs ( await self . database . hasFeature ( [string] , [string] ) , True ) [EOL] [EOL] async def test_add ( self ) : [EOL] self . assertIs ( await self . database . addFeature ( [string] , [string] ) , True ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [string] , [string] ) ) [EOL] [EOL] async def test_add_existing ( self ) : [EOL] await self . execute ( [string] , ( [string] , [string] ) ) [EOL] self . assertIs ( await self . database . addFeature ( [string] , [string] ) , False ) [EOL] [EOL] async def test_remove ( self ) : [EOL] self . assertIs ( await self . database . removeFeature ( [string] , [string] ) , False ) [EOL] [EOL] async def test_remove_existing ( self ) : [EOL] await self . execute ( [string] , ( [string] , [string] ) ) [EOL] self . assertIs ( await self . database . removeFeature ( [string] , [string] ) , True ) [EOL] self . assertIsNone ( await self . row ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from datetime import datetime [EOL] from tests . unittest . mock_class import TypeMatch [EOL] from . _drop_tables import TestDropTables [EOL] [EOL] [EOL] class TestBotManagers ( TestDropTables ) : [EOL] async def setUpInsert ( self ) : [EOL] await self . execute ( [string] ) [EOL] [EOL] async def test_get_bot_managers ( self ) : [EOL] self . assertEqual ( [ m async for m in self . database . getBotManagers ( ) ] , [ [string] ] ) [EOL] [EOL] async def test_is_bot_manager_true ( self ) : [EOL] self . assertIs ( await self . database . isBotManager ( [string] ) , True ) [EOL] [EOL] async def test_is_bot_manager_false ( self ) : [EOL] self . assertIs ( await self . database . isBotManager ( [string] ) , False ) [EOL] [EOL] async def test_add ( self ) : [EOL] self . assertIs ( await self . database . addBotManager ( [string] ) , True ) [EOL] self . assertEqual ( await self . rows ( [string] ) , [ ( [string] , ) , ( [string] , ) ] ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [number] , [string] , TypeMatch ( datetime ) , [string] ) ) [EOL] [EOL] async def test_add_existing ( self ) : [EOL] self . assertIs ( await self . database . addBotManager ( [string] ) , False ) [EOL] self . assertIsNone ( await self . row ( [string] ) ) [EOL] [EOL] async def test_remove ( self ) : [EOL] self . assertIs ( await self . database . removeBotManager ( [string] ) , False ) [EOL] [EOL] async def test_remove_existing ( self ) : [EOL] self . assertIs ( await self . database . removeBotManager ( [string] ) , True ) [EOL] self . assertIsNone ( await self . row ( [string] ) ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [number] , [string] , TypeMatch ( datetime ) , [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . _drop_tables import TestDropTables [EOL] [EOL] [EOL] class TestChatProperties ( TestDropTables ) : [EOL] async def test_get_all_properties ( self ) : [EOL] await self . execute ( [string] , ( [string] , [string] , [string] ) ) [EOL] self . assertEqual ( [ ( property , value ) async for ( property , value ) in self . database . getAllChatProperties ( [string] ) ] , [ ( [string] , [string] ) ] ) [EOL] [EOL] async def test_get_property ( self ) : [EOL] self . assertIsNone ( await self . database . getChatProperty ( [string] , [string] ) ) [EOL] [EOL] async def test_get_property_default ( self ) : [EOL] self . assertEqual ( await self . database . getChatProperty ( [string] , [string] , default = [string] ) , [string] ) [EOL] [EOL] async def test_get_property_default_parse ( self ) : [EOL] self . assertEqual ( await self . database . getChatProperty ( [string] , [string] , default = [string] , parse = int ) , [string] ) [EOL] [EOL] async def test_get_property_existing ( self ) : [EOL] await self . execute ( [string] , ( [string] , [string] , [string] ) ) [EOL] self . assertEqual ( await self . database . getChatProperty ( [string] , [string] ) , [string] ) [EOL] [EOL] async def test_get_property_existing_parse ( self ) : [EOL] await self . execute ( [string] , ( [string] , [string] , [string] ) ) [EOL] self . assertEqual ( await self . database . getChatProperty ( [string] , [string] , parse = int ) , [number] ) [EOL] [EOL] async def test_get_property_existing_default_parse ( self ) : [EOL] await self . execute ( [string] , ( [string] , [string] , [string] ) ) [EOL] self . assertEqual ( await self . database . getChatProperty ( [string] , [string] , default = [string] , parse = int ) , [number] ) [EOL] [EOL] async def test_get_properties ( self ) : [EOL] self . assertEqual ( await self . database . getChatProperties ( [string] , [ [string] , [string] ] ) , { [string] : None , [string] : None } ) [EOL] [EOL] async def test_get_properties_one ( self ) : [EOL] await self . execute ( [string] , ( [string] , [string] , [string] ) ) [EOL] self . assertEqual ( await self . database . getChatProperties ( [string] , [ [string] , [string] ] ) , { [string] : [string] , [string] : None } ) [EOL] [EOL] async def test_get_properties_two ( self ) : [EOL] await self . executemany ( [string] , [ ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) ] ) [EOL] self . assertEqual ( await self . database . getChatProperties ( [string] , [ [string] , [string] ] ) , { [string] : [string] , [string] : [string] } ) [EOL] [EOL] async def test_get_properties_default ( self ) : [EOL] self . assertEqual ( await self . database . getChatProperties ( [string] , [ [string] , [string] ] , default = [number] ) , { [string] : [number] , [string] : [number] } ) [EOL] [EOL] async def test_get_properties_default_dict ( self ) : [EOL] self . assertEqual ( await self . database . getChatProperties ( [string] , [ [string] , [string] ] , default = { [string] : [string] , [string] : [string] } ) , { [string] : [string] , [string] : [string] } ) [EOL] [EOL] async def test_get_properties_default_partial ( self ) : [EOL] self . assertEqual ( await self . database . getChatProperties ( [string] , [ [string] , [string] ] , default = { [string] : None } ) , { [string] : None } ) [EOL] [EOL] async def test_get_properties_parse ( self ) : [EOL] self . assertEqual ( await self . database . getChatProperties ( [string] , [ [string] , [string] ] , parse = int ) , { [string] : None , [string] : None } ) [EOL] [EOL] async def test_get_properties_parse_default ( self ) : [EOL] self . assertEqual ( await self . database . getChatProperties ( [string] , [ [string] , [string] ] , parse = int , default = [string] ) , { [string] : [string] , [string] : [string] } ) [EOL] [EOL] async def test_get_properties_parse_values ( self ) : [EOL] await self . executemany ( [string] , [ ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) ] ) [EOL] self . assertEqual ( await self . database . getChatProperties ( [string] , [ [string] , [string] ] , parse = int ) , { [string] : [number] , [string] : [number] } ) [EOL] [EOL] async def test_get_properties_parse_dict ( self ) : [EOL] await self . executemany ( [string] , [ ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) ] ) [EOL] self . assertEqual ( await self . database . getChatProperties ( [string] , [ [string] , [string] ] , parse = { [string] : int , [string] : float } ) , { [string] : [number] , [string] : [number] } ) [EOL] [EOL] async def test_get_properties_parse_partial ( self ) : [EOL] await self . executemany ( [string] , [ ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) ] ) [EOL] self . assertEqual ( await self . database . getChatProperties ( [string] , [ [string] , [string] ] , parse = { [string] : int } ) , { [string] : [number] , [string] : [string] } ) [EOL] [EOL] async def test_set_property ( self ) : [EOL] self . assertIs ( await self . database . setChatProperty ( [string] , [string] ) , False ) [EOL] self . assertIsNone ( await self . row ( [string] ) ) [EOL] [EOL] async def test_set_property_existing ( self ) : [EOL] await self . execute ( [string] , ( [string] , [string] , [string] ) ) [EOL] self . assertIs ( await self . database . setChatProperty ( [string] , [string] ) , True ) [EOL] self . assertIsNone ( await self . row ( [string] ) ) [EOL] [EOL] async def test_set_property_value ( self ) : [EOL] self . assertIs ( await self . database . setChatProperty ( [string] , [string] , [string] ) , True ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [string] , [string] , [string] ) ) [EOL] [EOL] async def test_set_property_value_existing ( self ) : [EOL] await self . execute ( [string] , ( [string] , [string] , [string] ) ) [EOL] self . assertIs ( await self . database . setChatProperty ( [string] , [string] , [string] ) , True ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [string] , [string] , [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from datetime import datetime [EOL] from tests . unittest . mock_class import TypeMatch [EOL] from . _drop_tables import TestDropTables [EOL] [EOL] [EOL] class TestBannedChannels ( TestDropTables ) : [EOL] async def test_list ( self ) : [EOL] self . assertEqual ( [ b async for b in self . database . listBannedChannels ( ) ] , [ ] ) [EOL] [EOL] async def test_list_one ( self ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] await self . execute ( [string] , ( [string] , now , [string] , [string] ) ) [EOL] self . assertEqual ( [ b async for b in self . database . listBannedChannels ( ) ] , [ [string] ] ) [EOL] [EOL] async def test_list_multiple ( self ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] await self . executemany ( [string] , [ ( [string] , now , [string] , [string] ) , ( [string] , now , [string] , [string] ) , ] ) [EOL] self . assertEqual ( [ b async for b in self . database . listBannedChannels ( ) ] , [ [string] , [string] ] ) [EOL] [EOL] async def test_add ( self ) : [EOL] self . assertIs ( await self . database . addBannedChannel ( [string] , [string] , [string] ) , True ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [string] , TypeMatch ( datetime ) , [string] , [string] ) ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [number] , [string] , TypeMatch ( datetime ) , [string] , [string] , [string] ) ) [EOL] [EOL] async def test_add_existing ( self ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] await self . execute ( [string] , ( [string] , now , [string] , [string] ) ) [EOL] self . assertIs ( await self . database . addBannedChannel ( [string] , [string] , [string] ) , False ) [EOL] self . assertIsNone ( await self . row ( [string] ) ) [EOL] [EOL] async def test_remove ( self ) : [EOL] self . assertIs ( await self . database . removeBannedChannel ( [string] , [string] , [string] ) , False ) [EOL] [EOL] async def test_remove_existing ( self ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] await self . execute ( [string] , ( [string] , now , [string] , [string] ) ) [EOL] self . assertIs ( await self . database . removeBannedChannel ( [string] , [string] , [string] ) , True ) [EOL] self . assertIsNone ( await self . row ( [string] ) ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [number] , [string] , TypeMatch ( datetime ) , [string] , [string] , [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . _drop_tables import TestDropTables [EOL] [EOL] [EOL] class TestGameAbbreviation ( TestDropTables ) : [EOL] async def setUpInsert ( self ) : [EOL] await self . execute ( [string] , ( [string] , [string] ) ) [EOL] [EOL] async def test_get_all ( self ) : [EOL] self . assertEqual ( [ r async for r in self . database . getGameAbbreviations ( ) ] , [ ( [string] , [string] ) ] ) [EOL] [EOL] async def test_not_existing ( self ) : [EOL] self . assertIsNone ( await self . database . getFullGameTitle ( [string] ) ) [EOL] [EOL] async def test_abbreviation ( self ) : [EOL] self . assertEqual ( await self . database . getFullGameTitle ( [string] ) , [string] ) [EOL] [EOL] async def test_casing ( self ) : [EOL] self . assertEqual ( await self . database . getFullGameTitle ( [string] ) , [string] ) [EOL] [EOL] async def test_twitch_game ( self ) : [EOL] self . assertEqual ( await self . database . getFullGameTitle ( [string] ) , [string] ) [EOL] [EOL] async def test_twitch_game_casing ( self ) : [EOL] self . assertEqual ( await self . database . getFullGameTitle ( [string] ) , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from datetime import datetime , timedelta [EOL] from lib . data import AutoRepeatList , AutoRepeatMessage , RepeatData [EOL] from tests . unittest . mock_class import DateTimeNear [EOL] from . _drop_tables import TestDropTables [EOL] [EOL] [EOL] class TestAutoRepeat ( TestDropTables ) : [EOL] async def test_get_all ( self ) : [EOL] dt = datetime . utcnow ( ) [EOL] dt -= timedelta ( microseconds = dt . microsecond ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , None , [number] , dt , dt ) ) [EOL] self . assertEqual ( [ r async for r in self . database . getAutoRepeats ( ) ] , [ RepeatData ( [string] , [string] , [string] , None , [number] , dt ) ] ) [EOL] [EOL] async def test_empty ( self ) : [EOL] self . assertEqual ( [ r async for r in self . database . getAutoRepeatToSend ( ) ] , [ ] ) [EOL] [EOL] async def test_nothing_to_send ( self ) : [EOL] dt = datetime . utcnow ( ) [EOL] dt -= timedelta ( microseconds = dt . microsecond ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , None , [number] , dt , dt ) ) [EOL] self . assertEqual ( [ r async for r in self . database . getAutoRepeatToSend ( ) ] , [ ] ) [EOL] [EOL] async def test_something_to_send ( self ) : [EOL] await self . executemany ( [string] , [ ( [string] , [string] , [string] , None , [number] , datetime . utcnow ( ) - timedelta ( minutes = [number] ) , datetime . utcnow ( ) ) , ( [string] , [string] , [string] , None , [number] , datetime . utcnow ( ) , datetime . utcnow ( ) ) ] ) [EOL] self . assertEqual ( [ r async for r in self . database . getAutoRepeatToSend ( ) ] , [ AutoRepeatMessage ( [string] , [string] , [string] ) ] ) [EOL] [EOL] async def test_something_to_send_decimal ( self ) : [EOL] dt = datetime . utcnow ( ) [EOL] dt -= timedelta ( microseconds = dt . microsecond ) [EOL] await self . executemany ( [string] , [ ( [string] , [string] , [string] , None , [number] , dt - timedelta ( seconds = [number] ) , dt ) , ( [string] , [string] , [string] , None , [number] , dt - timedelta ( seconds = [number] ) , dt ) ] ) [EOL] self . assertEqual ( [ r async for r in self . database . getAutoRepeatToSend ( ) ] , [ AutoRepeatMessage ( [string] , [string] , [string] ) ] ) [EOL] [EOL] async def test_something_to_send_count ( self ) : [EOL] dt = datetime . utcnow ( ) [EOL] dt -= timedelta ( microseconds = dt . microsecond ) [EOL] await self . executemany ( [string] , [ ( [string] , [string] , [string] , [number] , [number] , dt - timedelta ( minutes = [number] ) , dt ) , ( [string] , [string] , [string] , [number] , [number] , dt , dt ) ] ) [EOL] self . assertEqual ( [ r async for r in self . database . getAutoRepeatToSend ( ) ] , [ AutoRepeatMessage ( [string] , [string] , [string] ) ] ) [EOL] [EOL] async def test_something_to_send_multiple ( self ) : [EOL] dt = datetime . utcnow ( ) [EOL] dt -= timedelta ( microseconds = dt . microsecond ) [EOL] await self . executemany ( [string] , [ ( [string] , [string] , [string] , [number] , [number] , dt - timedelta ( minutes = [number] ) , dt ) , ( [string] , [string] , [string] , None , [number] , dt - timedelta ( minutes = [number] ) , dt ) ] ) [EOL] self . assertEqual ( [ r async for r in self . database . getAutoRepeatToSend ( ) ] , [ AutoRepeatMessage ( [string] , [string] , [string] ) , AutoRepeatMessage ( [string] , [string] , [string] ) ] ) [EOL] [EOL] async def test_list_empty ( self ) : [EOL] self . assertEqual ( [ r async for r in self . database . listAutoRepeat ( [string] ) ] , [ ] ) [EOL] [EOL] async def test_list ( self ) : [EOL] dt = datetime . utcnow ( ) [EOL] dt -= timedelta ( microseconds = dt . microsecond ) [EOL] await self . executemany ( [string] , [ ( [string] , [string] , [string] , None , [number] , dt , dt ) , ( [string] , [string] , [string] , [number] , [number] , dt , dt ) ] ) [EOL] self . assertEqual ( [ r async for r in self . database . listAutoRepeat ( [string] ) ] , [ AutoRepeatList ( [string] , [string] , None , [number] , dt ) , AutoRepeatList ( [string] , [string] , [number] , [number] , dt ) ] ) [EOL] [EOL] async def test_clear_empty ( self ) : [EOL] self . assertFalse ( await self . database . clearAutoRepeat ( [string] ) ) [EOL] self . assertEqual ( await self . rows ( [string] ) , [ ] ) [EOL] dt = datetime . utcnow ( ) [EOL] dt -= timedelta ( microseconds = dt . microsecond ) [EOL] await self . executemany ( [string] , [ ( [string] , [string] , [string] , None , [number] , dt , dt ) , ( [string] , [string] , [string] , [number] , [number] , dt , dt ) ] ) [EOL] self . assertFalse ( await self . database . clearAutoRepeat ( [string] ) ) [EOL] self . assertEqual ( await self . rows ( [string] ) , [ ( [string] , [string] , [string] , None , [number] , dt , dt ) , ( [string] , [string] , [string] , [number] , [number] , dt , dt ) , ] ) [EOL] [EOL] async def test_clear ( self ) : [EOL] dt = datetime . utcnow ( ) [EOL] dt -= timedelta ( microseconds = dt . microsecond ) [EOL] await self . executemany ( [string] , [ ( [string] , [string] , [string] , None , [number] , dt , dt ) , ( [string] , [string] , [string] , [number] , [number] , dt , dt ) ] ) [EOL] self . assertTrue ( await self . database . clearAutoRepeat ( [string] ) ) [EOL] self . assertEqual ( await self . rows ( [string] ) , [ ] ) [EOL] [EOL] async def test_message_sent ( self ) : [EOL] dt = datetime . utcnow ( ) [EOL] dt -= timedelta ( microseconds = dt . microsecond ) [EOL] await self . executemany ( [string] , [ ( [string] , [string] , [string] , None , [number] , dt - timedelta ( seconds = [number] ) , dt ) , ( [string] , [string] , [string] , [number] , [number] , dt - timedelta ( minutes = [number] ) , dt ) , ( [string] , [string] , [string] , [number] , [number] , dt - timedelta ( minutes = [number] ) , dt ) , ( [string] , [string] , [string] , [number] , [number] , dt - timedelta ( minutes = [number] ) , dt ) , ( [string] , [string] , [string] , [number] , [number] , dt , dt ) , ( [string] , [string] , [string] , None , [number] , dt , dt ) , ] ) [EOL] self . assertTrue ( await self . database . sentAutoRepeat ( [string] , [string] ) ) [EOL] self . assertTrue ( await self . database . sentAutoRepeat ( [string] , [string] ) ) [EOL] self . assertTrue ( await self . database . sentAutoRepeat ( [string] , [string] ) ) [EOL] self . assertTrue ( await self . database . sentAutoRepeat ( [string] , [string] ) ) [EOL] self . maxDiff = None [EOL] [EOL] self . assertEqual ( await self . rows ( [string] ) , [ ( [string] , [string] , [string] , None , [number] , DateTimeNear ( dt ) , DateTimeNear ( dt ) ) , ( [string] , [string] , [string] , [number] , [number] , DateTimeNear ( dt ) , DateTimeNear ( dt ) ) , ( [string] , [string] , [string] , None , [number] , DateTimeNear ( dt ) , DateTimeNear ( dt ) ) , ( [string] , [string] , [string] , [number] , [number] , DateTimeNear ( dt ) , DateTimeNear ( dt ) ) , ] ) [EOL] [EOL] async def test_set_auto_repeat ( self ) : [EOL] dt = datetime . utcnow ( ) [EOL] dt -= timedelta ( microseconds = dt . microsecond ) [EOL] self . assertTrue ( await self . database . setAutoRepeat ( [string] , [string] , [string] , None , [number] ) ) [EOL] self . assertEqual ( await self . rows ( [string] ) , [ ( [string] , [string] , [string] , None , [number] , DateTimeNear ( dt - timedelta ( minutes = [number] ) ) , DateTimeNear ( dt ) ) , ] ) [EOL] [EOL] async def test_set_auto_repeat_multiple ( self ) : [EOL] dt = datetime . utcnow ( ) [EOL] dt -= timedelta ( microseconds = dt . microsecond ) [EOL] self . assertTrue ( await self . database . setAutoRepeat ( [string] , [string] , [string] , None , [number] ) ) [EOL] self . assertTrue ( await self . database . setAutoRepeat ( [string] , [string] , [string] , None , [number] ) ) [EOL] self . assertEqual ( await self . rows ( [string] ) , [ ( [string] , [string] , [string] , None , [number] , DateTimeNear ( dt - timedelta ( minutes = [number] ) ) , DateTimeNear ( dt ) ) , ] ) [EOL] [EOL] async def test_set_auto_repeat_multiple_names ( self ) : [EOL] dt = datetime . utcnow ( ) [EOL] dt -= timedelta ( microseconds = dt . microsecond ) [EOL] self . assertTrue ( await self . database . setAutoRepeat ( [string] , [string] , [string] , None , [number] ) ) [EOL] self . assertTrue ( await self . database . setAutoRepeat ( [string] , [string] , [string] , None , [number] ) ) [EOL] self . assertEqual ( await self . rows ( [string] ) , [ ( [string] , [string] , [string] , None , [number] , DateTimeNear ( dt - timedelta ( minutes = [number] ) ) , DateTimeNear ( dt ) ) , ( [string] , [string] , [string] , None , [number] , DateTimeNear ( dt - timedelta ( minutes = [number] ) ) , DateTimeNear ( dt ) ) , ] ) [EOL] [EOL] async def test_delete ( self ) : [EOL] dt = datetime . utcnow ( ) [EOL] dt -= timedelta ( microseconds = dt . microsecond ) [EOL] await self . executemany ( [string] , [ ( [string] , [string] , [string] , None , [number] , dt , dt ) , ( [string] , [string] , [string] , None , [number] , dt , dt ) ] ) [EOL] self . assertTrue ( await self . database . removeAutoRepeat ( [string] , [string] ) ) [EOL] self . assertEqual ( await self . rows ( [string] ) , [ ( [string] , [string] , [string] , None , [number] , dt , dt ) , ] ) [EOL] [EOL] async def test_delete_not_existing ( self ) : [EOL] dt = datetime . utcnow ( ) [EOL] dt -= timedelta ( microseconds = dt . microsecond ) [EOL] self . assertFalse ( await self . database . removeAutoRepeat ( [string] , [string] ) ) [EOL] self . assertEqual ( await self . rows ( [string] ) , [ ] ) [EOL]	
from datetime import datetime [EOL] from lib . database import DatabaseTimeout [EOL] from tests . unittest . mock_class import TypeMatch [EOL] [EOL] [EOL] class TestTimeout : [EOL] DatabaseClass = DatabaseTimeout [EOL] [EOL] async def tearDown ( self ) : [EOL] await self . execute ( [string] ) [EOL] await super ( ) . tearDown ( ) [EOL] [EOL] async def test_record ( self ) : [EOL] await self . database . recordTimeout ( [string] , [string] , None , [string] , None , None , None , None ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [number] , TypeMatch ( datetime ) , [string] , [string] , None , [string] , None , None , None , None ) ) [EOL] [EOL] async def test_record2 ( self ) : [EOL] await self . database . recordTimeout ( [string] , [string] , [string] , [string] , [number] , [number] , [string] , [string] ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [number] , TypeMatch ( datetime ) , [string] , [string] , [string] , [string] , [number] , [number] , [string] , [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import math [EOL] from lib . data import AutoJoinChannel [EOL] from . _drop_tables import TestDropTables [EOL] [EOL] [EOL] class TestAutoJoin ( TestDropTables ) : [EOL] async def test_chats_empty ( self ) : [EOL] self . assertEqual ( [ c async for c in self . database . getAutoJoinsChats ( ) ] , [ ] ) [EOL] [EOL] async def test_chat ( self ) : [EOL] await self . execute ( [string] , ( [string] , [number] ) ) [EOL] self . assertEqual ( [ c async for c in self . database . getAutoJoinsChats ( ) ] , [ AutoJoinChannel ( [string] , [number] ) ] ) [EOL] [EOL] async def test_chats ( self ) : [EOL] await self . executemany ( [string] , [ ( [string] , [number] ) , ( [string] , - [number] ) , ( [string] , [number] ) ] ) [EOL] self . assertEqual ( [ c async for c in self . database . getAutoJoinsChats ( ) ] , [ AutoJoinChannel ( [string] , - [number] ) , AutoJoinChannel ( [string] , [number] ) , AutoJoinChannel ( [string] , [number] ) ] ) [EOL] [EOL] async def test_priority_not_existing ( self ) : [EOL] self . assertEqual ( await self . database . getAutoJoinsPriority ( [string] ) , math . inf ) [EOL] [EOL] async def test_priority ( self ) : [EOL] await self . execute ( [string] , ( [string] , [number] ) ) [EOL] self . assertEqual ( await self . database . getAutoJoinsPriority ( [string] ) , [number] ) [EOL] [EOL] async def test_save ( self ) : [EOL] self . assertIs ( await self . database . saveAutoJoin ( [string] , [number] ) , True ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [string] , [number] ) ) [EOL] [EOL] async def test_save_existing ( self ) : [EOL] await self . execute ( [string] , ( [string] , - [number] ) ) [EOL] self . assertIs ( await self . database . saveAutoJoin ( [string] , [number] ) , False ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [string] , - [number] ) ) [EOL] [EOL] async def test_discard ( self ) : [EOL] await self . execute ( [string] , ( [string] , [number] ) ) [EOL] self . assertIs ( await self . database . discardAutoJoin ( [string] ) , True ) [EOL] self . assertIsNone ( await self . row ( [string] ) ) [EOL] [EOL] async def test_discard_not_existing ( self ) : [EOL] self . assertIs ( await self . database . discardAutoJoin ( [string] ) , False ) [EOL] self . assertIsNone ( await self . row ( [string] ) ) [EOL] [EOL] async def test_save_priority ( self ) : [EOL] await self . execute ( [string] , ( [string] , [number] ) ) [EOL] self . assertIs ( await self . database . setAutoJoinPriority ( [string] , - [number] ) , True ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [string] , - [number] ) ) [EOL] [EOL] async def test_save_priority_not_existing ( self ) : [EOL] self . assertIs ( await self . database . setAutoJoinPriority ( [string] , [number] ) , False ) [EOL] self . assertIsNone ( await self . row ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
class TestDropTables : [EOL] async def tearDown ( self ) : [EOL] await self . execute ( [string] ) [EOL] await self . execute ( [string] ) [EOL] await self . execute ( [string] ) [EOL] await self . execute ( [string] ) [EOL] await self . execute ( [string] ) [EOL] await self . execute ( [string] ) [EOL] await self . execute ( [string] ) [EOL] await self . execute ( [string] ) [EOL] await self . execute ( [string] ) [EOL] await self . execute ( [string] ) [EOL] await self . execute ( [string] ) [EOL] await self . execute ( [string] ) [EOL] await self . execute ( [string] ) [EOL] await self . execute ( [string] ) [EOL] await super ( ) . tearDown ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from datetime import datetime [EOL] from tests . unittest . mock_class import TypeMatch [EOL] from . _drop_tables import TestDropTables [EOL] [EOL] [EOL] class TestCustomCommands ( TestDropTables ) : [EOL] async def test_get_commands ( self ) : [EOL] self . assertEqual ( await self . database . getChatCommands ( [string] , [string] ) , { [string] : { } , [string] : { } } ) [EOL] [EOL] async def test_get_custom_commands ( self ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) ) [EOL] self . assertEqual ( [ row async for row in self . database . getCustomCommands ( [string] ) ] , [ ( [string] , [string] , [string] ) ] ) [EOL] [EOL] async def test_get_broadacaster ( self ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) ) [EOL] self . assertEqual ( await self . database . getChatCommands ( [string] , [string] ) , { [string] : { } , [string] : { [string] : [string] } } ) [EOL] [EOL] async def test_get_global ( self ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) ) [EOL] self . assertEqual ( await self . database . getChatCommands ( [string] , [string] ) , { [string] : { [string] : [string] } , [string] : { } } ) [EOL] [EOL] async def test_get_global_broadacaster ( self ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] await self . executemany ( [string] , [ ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) , ] ) [EOL] self . assertEqual ( await self . database . getChatCommands ( [string] , [string] ) , { [string] : { [string] : [string] } , [string] : { [string] : [string] } } ) [EOL] [EOL] async def test_get_broadacaster_multi ( self ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] await self . executemany ( [string] , [ ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) , ] ) [EOL] self . assertEqual ( await self . database . getChatCommands ( [string] , [string] ) , { [string] : { } , [string] : { [string] : [string] , [string] : [string] , [string] : [string] } } ) [EOL] [EOL] async def test_get_global_multi ( self ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] await self . executemany ( [string] , [ ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) , ] ) [EOL] self . assertEqual ( await self . database . getChatCommands ( [string] , [string] ) , { [string] : { [string] : [string] , [string] : [string] , [string] : [string] } , [string] : { } } ) [EOL] [EOL] async def test_get_broadacaster_global_multi ( self ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] await self . executemany ( [string] , [ ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) , ] ) [EOL] self . assertEqual ( await self . database . getChatCommands ( [string] , [string] ) , { [string] : { [string] : [string] , [string] : [string] , [string] : [string] } , [string] : { [string] : [string] , [string] : [string] , [string] : [string] } } ) [EOL] [EOL] async def test_get_None ( self ) : [EOL] self . assertIsNone ( await self . database . getCustomCommand ( [string] , [string] , [string] ) ) [EOL] [EOL] async def test_get ( self ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) ) [EOL] self . assertEqual ( await self . database . getCustomCommand ( [string] , [string] , [string] ) , [string] ) [EOL] [EOL] async def test_insert ( self ) : [EOL] self . assertIs ( await self . database . insertCustomCommand ( [string] , [string] , [string] , [string] , [string] ) , True ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [string] , [string] , [string] , None , [string] , [string] , TypeMatch ( datetime ) , [string] , TypeMatch ( datetime ) ) ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [number] , [string] , [string] , [string] , None , [string] , [string] , [string] , TypeMatch ( datetime ) ) ) [EOL] [EOL] async def test_insert_commanddisplay ( self ) : [EOL] self . assertIs ( await self . database . insertCustomCommand ( [string] , [string] , [string] , [string] , [string] ) , True ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [string] , [string] , [string] , [string] , [string] , [string] , TypeMatch ( datetime ) , [string] , TypeMatch ( datetime ) ) ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [number] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , TypeMatch ( datetime ) ) ) [EOL] [EOL] async def test_insert_existing ( self ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) ) [EOL] self . assertIs ( await self . database . insertCustomCommand ( [string] , [string] , [string] , [string] , [string] ) , False ) [EOL] self . assertIsNone ( await self . row ( [string] ) ) [EOL] [EOL] async def test_update ( self ) : [EOL] self . assertIs ( await self . database . updateCustomCommand ( [string] , [string] , [string] , [string] , [string] ) , False ) [EOL] self . assertIsNone ( await self . row ( [string] ) ) [EOL] self . assertIsNone ( await self . row ( [string] ) ) [EOL] [EOL] async def test_update_existing ( self ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) ) [EOL] self . assertIs ( await self . database . updateCustomCommand ( [string] , [string] , [string] , [string] , [string] ) , True ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , TypeMatch ( datetime ) ) ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [number] , [string] , [string] , [string] , None , [string] , [string] , [string] , TypeMatch ( datetime ) ) ) [EOL] [EOL] async def test_update_commanddisplay ( self ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) ) [EOL] self . assertIs ( await self . database . updateCustomCommand ( [string] , [string] , [string] , [string] , [string] ) , True ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [string] , [string] , [string] , [string] , [string] , [string] , now , [string] , TypeMatch ( datetime ) ) ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [number] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , TypeMatch ( datetime ) ) ) [EOL] [EOL] async def test_replace ( self ) : [EOL] self . assertIs ( await self . database . replaceCustomCommand ( [string] , [string] , [string] , [string] , [string] ) , True ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [string] , [string] , [string] , None , [string] , [string] , TypeMatch ( datetime ) , [string] , TypeMatch ( datetime ) ) ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [number] , [string] , [string] , [string] , None , [string] , [string] , [string] , TypeMatch ( datetime ) ) ) [EOL] [EOL] async def test_replace_existing ( self ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) ) [EOL] self . assertIs ( await self . database . replaceCustomCommand ( [string] , [string] , [string] , [string] , [string] ) , True ) [EOL] self . assertEqual ( await self . rows ( [string] ) , [ ( [number] , [string] , [string] , [string] , None , [string] , [string] , [string] , TypeMatch ( datetime ) ) ] ) [EOL] [EOL] async def test_replace_commanddisplay ( self ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) ) [EOL] self . assertIs ( await self . database . replaceCustomCommand ( [string] , [string] , [string] , [string] , [string] ) , True ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [string] , [string] , [string] , [string] , [string] , [string] , TypeMatch ( datetime ) , [string] , TypeMatch ( datetime ) ) ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [number] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , TypeMatch ( datetime ) ) ) [EOL] [EOL] async def test_append ( self ) : [EOL] self . assertIs ( await self . database . appendCustomCommand ( [string] , [string] , [string] , [string] , [string] ) , False ) [EOL] self . assertIsNone ( await self . row ( [string] ) ) [EOL] self . assertIsNone ( await self . row ( [string] ) ) [EOL] [EOL] async def test_append_existing ( self ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) ) [EOL] self . assertIs ( await self . database . appendCustomCommand ( [string] , [string] , [string] , [string] , [string] ) , True ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , TypeMatch ( datetime ) ) ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [number] , [string] , [string] , [string] , None , [string] , [string] , [string] , TypeMatch ( datetime ) ) ) [EOL] [EOL] async def test_append_commanddisplay ( self ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) ) [EOL] self . assertIs ( await self . database . appendCustomCommand ( [string] , [string] , [string] , [string] , [string] ) , True ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , TypeMatch ( datetime ) ) ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [number] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , TypeMatch ( datetime ) ) ) [EOL] [EOL] async def test_delete ( self ) : [EOL] self . assertIs ( await self . database . deleteCustomCommand ( [string] , [string] , [string] , [string] ) , False ) [EOL] self . assertIsNone ( await self . row ( [string] ) ) [EOL] self . assertIsNone ( await self . row ( [string] ) ) [EOL] [EOL] async def test_delete_existing ( self ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , [string] , [string] ) ) [EOL] self . assertIs ( await self . database . deleteCustomCommand ( [string] , [string] , [string] , [string] ) , True ) [EOL] self . assertIsNone ( await self . row ( [string] ) ) [EOL] self . assertIsNone ( await self . row ( [string] ) ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [number] , [string] , [string] , [string] , None , [string] , None , [string] , TypeMatch ( datetime ) ) ) [EOL] [EOL] async def test_delete_commanddisplay ( self ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) ) [EOL] self . assertIs ( await self . database . deleteCustomCommand ( [string] , [string] , [string] , [string] ) , True ) [EOL] self . assertIsNone ( await self . row ( [string] ) ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [number] , [string] , [string] , [string] , [string] , [string] , None , [string] , TypeMatch ( datetime ) ) ) [EOL] [EOL] async def test_level ( self ) : [EOL] self . assertIs ( await self . database . levelCustomCommand ( [string] , [string] , [string] , [string] , [string] ) , False ) [EOL] self . assertIsNone ( await self . row ( [string] ) ) [EOL] self . assertIsNone ( await self . row ( [string] ) ) [EOL] [EOL] async def test_level_existing ( self ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , [string] , [string] ) ) [EOL] self . assertIs ( await self . database . levelCustomCommand ( [string] , [string] , [string] , [string] , [string] ) , True ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , TypeMatch ( datetime ) ) ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [string] , [string] , [string] , [string] , [string] ) ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [number] , [string] , [string] , [string] , None , [string] , [string] , [string] , TypeMatch ( datetime ) ) ) [EOL] [EOL] async def test_level_overlap ( self ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] await self . executemany ( [string] , [ ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) ] ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , [string] , [string] ) ) [EOL] self . assertIs ( await self . database . levelCustomCommand ( [string] , [string] , [string] , [string] , [string] ) , False ) [EOL] self . assertEqual ( await self . rows ( [string] ) , [ ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) ] ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [string] , [string] , [string] , [string] , [string] ) ) [EOL] [EOL] async def test_level_commanddisplay ( self ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) ) [EOL] self . assertIs ( await self . database . levelCustomCommand ( [string] , [string] , [string] , [string] , [string] ) , True ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , TypeMatch ( datetime ) ) ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [number] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , TypeMatch ( datetime ) ) ) [EOL] [EOL] async def test_rename ( self ) : [EOL] self . assertIs ( await self . database . renameCustomCommand ( [string] , [string] , [string] , [string] , [string] ) , False ) [EOL] self . assertIsNone ( await self . row ( [string] ) ) [EOL] self . assertIsNone ( await self . row ( [string] ) ) [EOL] [EOL] async def test_rename_existing ( self ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , [string] , [string] ) ) [EOL] self . assertIs ( await self . database . renameCustomCommand ( [string] , [string] , [string] , [string] , [string] ) , True ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , TypeMatch ( datetime ) ) ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [string] , [string] , [string] , [string] , [string] ) ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [number] , [string] , [string] , [string] , None , [string] , [string] , [string] , TypeMatch ( datetime ) ) ) [EOL] [EOL] async def test_rename_overlap ( self ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] await self . executemany ( [string] , [ ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) ] ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , [string] , [string] ) ) [EOL] self . assertIs ( await self . database . renameCustomCommand ( [string] , [string] , [string] , [string] , [string] ) , False ) [EOL] self . assertEqual ( await self . rows ( [string] ) , [ ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) ] ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [string] , [string] , [string] , [string] , [string] ) ) [EOL] [EOL] async def test_rename_commanddisplay ( self ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) ) [EOL] self . assertIs ( await self . database . renameCustomCommand ( [string] , [string] , [string] , [string] , [string] ) , True ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [string] , [string] , [string] , [string] , [string] , [string] , now , [string] , TypeMatch ( datetime ) ) ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [number] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , TypeMatch ( datetime ) ) ) [EOL] [EOL] async def test_get_command_properties ( self ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , [string] , [string] ) ) [EOL] self . assertEqual ( [ row async for row in self . database . getCustomCommandProperties ( [string] ) ] , [ ( [string] , [string] , [string] , [string] ) ] ) [EOL] [EOL] async def test_get_property_no_command ( self ) : [EOL] self . assertIsNone ( await self . database . getCustomCommandProperty ( [string] , [string] , [string] , [string] ) ) [EOL] [EOL] async def test_get_property_nothing ( self ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) ) [EOL] self . assertIsNone ( await self . database . getCustomCommandProperty ( [string] , [string] , [string] , [string] ) ) [EOL] [EOL] async def test_get_property_str ( self ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , [string] , [string] ) ) [EOL] self . assertEqual ( await self . database . getCustomCommandProperty ( [string] , [string] , [string] , [string] ) , [string] ) [EOL] [EOL] async def test_get_property_list ( self ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , [string] , [string] ) ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , [string] , [string] ) ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , [string] , [string] ) ) [EOL] self . assertEqual ( await self . database . getCustomCommandProperty ( [string] , [string] , [string] , [ [string] , [string] ] ) , { [string] : [string] , [string] : [string] } ) [EOL] [EOL] async def test_get_property_all ( self ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , [string] , [string] ) ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , [string] , [string] ) ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , [string] , [string] ) ) [EOL] self . assertEqual ( await self . database . getCustomCommandProperty ( [string] , [string] , [string] ) , { [string] : [string] , [string] : [string] , [string] : [string] } ) [EOL] [EOL] async def test_process_property_no_command ( self ) : [EOL] self . assertIs ( await self . database . processCustomCommandProperty ( [string] , [string] , [string] , [string] , [string] ) , False ) [EOL] self . assertIsNone ( await self . row ( [string] ) ) [EOL] [EOL] async def test_process_property ( self ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) ) [EOL] self . assertIs ( await self . database . processCustomCommandProperty ( [string] , [string] , [string] , [string] , [string] ) , True ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [string] , [string] , [string] , [string] , [string] ) ) [EOL] [EOL] async def test_process_property_change ( self ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , [string] , [string] ) ) [EOL] self . assertIs ( await self . database . processCustomCommandProperty ( [string] , [string] , [string] , [string] , [string] ) , True ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [string] , [string] , [string] , [string] , [string] ) ) [EOL] [EOL] async def test_process_property_delete ( self ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , None , [string] , [string] , now , [string] , now ) ) [EOL] await self . execute ( [string] , ( [string] , [string] , [string] , [string] , [string] ) ) [EOL] self . assertIs ( await self . database . processCustomCommandProperty ( [string] , [string] , [string] , [string] ) , True ) [EOL] self . assertIsNone ( await self . row ( [string] ) ) [EOL]	
from datetime import datetime [EOL] from tests . unittest . mock_class import TypeMatch [EOL] from . _drop_tables import TestDropTables [EOL] [EOL] [EOL] class TestPermittedUsers ( TestDropTables ) : [EOL] async def setUpInsert ( self ) : [EOL] await self . execute ( [ [string] ] ) [EOL] [EOL] async def test_permitted_users ( self ) : [EOL] self . assertEqual ( [ m async for m in self . database . getPermittedUsers ( [string] ) ] , [ [string] ] ) [EOL] [EOL] async def test_is_permitted_true ( self ) : [EOL] self . assertIs ( await self . database . isPermittedUser ( [string] , [string] ) , True ) [EOL] [EOL] async def test_is_permitted_false ( self ) : [EOL] self . assertIs ( await self . database . isPermittedUser ( [string] , [string] ) , False ) [EOL] [EOL] async def test_add ( self ) : [EOL] self . assertIs ( await self . database . addPermittedUser ( [string] , [string] , [string] ) , True ) [EOL] self . assertEqual ( await self . rows ( [string] ) , [ ( [string] , [string] ) , ( [string] , [string] ) ] ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [number] , [string] , [string] , [string] , TypeMatch ( datetime ) , [string] ) ) [EOL] [EOL] async def test_add_existing ( self ) : [EOL] self . assertIs ( await self . database . addPermittedUser ( [string] , [string] , [string] ) , False ) [EOL] self . assertIsNone ( await self . row ( [string] ) ) [EOL] [EOL] async def test_remove ( self ) : [EOL] self . assertIs ( await self . database . removePermittedUser ( [string] , [string] , [string] ) , False ) [EOL] [EOL] async def test_remove_existing ( self ) : [EOL] self . assertIs ( await self . database . removePermittedUser ( [string] , [string] , [string] ) , True ) [EOL] self . assertIsNone ( await self . row ( [string] ) ) [EOL] self . assertEqual ( await self . row ( [string] ) , ( [number] , [string] , [string] , [string] , TypeMatch ( datetime ) , [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from lib . database import DatabaseTimeZone [EOL] [EOL] [EOL] class TestTimezone : [EOL] DatabaseClass = DatabaseTimeZone [EOL] [EOL] async def setUpInsert ( self ) : [EOL] await self . execute ( [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] ) [EOL] [EOL] async def tearDown ( self ) : [EOL] await self . execute ( [ [string] , [string] , [string] , [string] , ] ) [EOL] await super ( ) . tearDown ( ) [EOL] [EOL] async def test_timezone_names ( self ) : [EOL] self . assertCountEqual ( [ row async for row in self . database . timezone_names ( ) ] , [ ( [string] , - [number] ) , ( [string] , - [number] ) ] ) [EOL] [EOL] async def test_zones ( self ) : [EOL] self . assertCountEqual ( [ row async for row in self . database . zones ( ) ] , [ ( [number] , [string] ) ] ) [EOL] [EOL] async def test_transitions ( self ) : [EOL] self . assertCountEqual ( await self . database . zone_transitions ( ) , [ ( [number] , [string] , [number] , - [number] ) , ( [number] , [string] , [number] , - [number] ) , ( [number] , [string] , [number] , - [number] ) , ( [number] , [string] , [number] , - [number] ) , ( [number] , [string] , [number] , - [number] ) , ( [number] , [string] , [number] , - [number] ) ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import asynctest [EOL] [EOL] import bot . coroutine . logging [EOL] [EOL] from collections import deque [EOL] [EOL] from asynctest . mock import CoroutineMock , MagicMock , patch [EOL] [EOL] [EOL] class TestLogging ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] patcher . start ( ) [EOL] bot . coroutine . logging . _queue = deque ( ) [EOL] [EOL] @ asynctest . fail_on ( unused_loop = False ) def test_log ( self ) : [EOL] bot . coroutine . logging . log ( [string] , [string] ) [EOL] self . assertEqual ( bot . coroutine . logging . _queue [ [number] ] , ( [string] , [string] ) ) [EOL] [EOL] @ patch ( [string] ) async def test_process_log ( self , mockopen ) : [EOL] file_mock = MagicMock ( ) [EOL] file_mock . __aenter__ = CoroutineMock ( ) [EOL] file_mock . __aenter__ . return_value = file_mock [EOL] file_mock . __aexit__ = CoroutineMock ( ) [EOL] file_mock . __aexit__ . return_value = True [EOL] mockopen . return_value = file_mock [EOL] bot . coroutine . logging . _queue = deque ( [ ( [string] , [string] ) ] ) [EOL] await bot . coroutine . logging . _process_log ( ) [EOL] self . assertTrue ( mockopen . called ) [EOL] self . assertTrue ( file_mock . write . called ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import unittest [EOL] [EOL] import asynctest [EOL] [EOL] import bot . coroutine . background [EOL] [EOL] from datetime import datetime , timedelta [EOL] [EOL] from asynctest . mock import CoroutineMock , patch [EOL] [EOL] from bot . coroutine . background import Task [EOL] [EOL] [EOL] async def some_task_to_run ( now ) : [EOL] pass [EOL] [EOL] [EOL] class TestTask ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . taskMethod = CoroutineMock ( spec = some_task_to_run ) [EOL] self . task = Task ( self . taskMethod , timedelta ( minutes = [number] ) ) [EOL] [EOL] def test_task_none ( self ) : [EOL] self . assertRaises ( TypeError , Task , None , timedelta ) [EOL] [EOL] def test_task_interval_none ( self ) : [EOL] self . assertRaises ( TypeError , Task , self . taskMethod , None ) [EOL] [EOL] def test_task_property ( self ) : [EOL] self . assertIs ( self . task . task , self . taskMethod ) [EOL] [EOL] def test_interval ( self ) : [EOL] self . assertEqual ( self . task . interval , timedelta ( minutes = [number] ) ) [EOL] [EOL] def test_timestamp ( self ) : [EOL] self . assertEqual ( self . task . timestamp , datetime . min ) [EOL] [EOL] def test_timestamp_set ( self ) : [EOL] self . task . timestamp = datetime ( [number] , [number] , [number] ) [EOL] self . assertEqual ( self . task . timestamp , datetime ( [number] , [number] , [number] ) ) [EOL] [EOL] def test_timestamp_set_none ( self ) : [EOL] with self . assertRaises ( TypeError ) : [EOL] self . task . timestamp = None [EOL] [EOL] [EOL] class TestBackgroundTasker ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . taskMethod = CoroutineMock ( spec = some_task_to_run ) [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] patcher . start ( ) [EOL] bot . coroutine . background . _tasks = [ ] [EOL] [EOL] def test_add_task ( self ) : [EOL] bot . coroutine . background . add_task ( self . taskMethod , timedelta ( seconds = [number] ) ) [EOL] self . assertEqual ( len ( bot . coroutine . background . _tasks ) , [number] ) [EOL] self . assertIs ( bot . coroutine . background . _tasks [ [number] ] . task , self . taskMethod ) [EOL] self . assertEqual ( bot . coroutine . background . _tasks [ [number] ] . interval , timedelta ( seconds = [number] ) ) [EOL] self . assertEqual ( bot . coroutine . background . _tasks [ [number] ] . timestamp , datetime . min ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] ) def test_runTasks ( self , mock_run , mock_now ) : [EOL] now = datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] bot . coroutine . background . add_task ( self . taskMethod , timedelta ( seconds = [number] ) ) [EOL] mock_now . return_value = now [EOL] bot . coroutine . background . run_tasks ( ) [EOL] mock_run . assert_called_once_with ( self . taskMethod , now ) [EOL] mock_run . reset_mock ( ) [EOL] mock_now . return_value = now + timedelta ( seconds = [number] ) [EOL] bot . coroutine . background . run_tasks ( ) [EOL] self . assertFalse ( mock_run . called ) [EOL] mock_now . return_value = now + timedelta ( seconds = [number] ) [EOL] bot . coroutine . background . run_tasks ( ) [EOL] mock_run . assert_called_once_with ( self . taskMethod , now + timedelta ( seconds = [number] ) ) [EOL] [EOL] [EOL] class TestBackgroundRunTask ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . taskMethod = CoroutineMock ( spec = some_task_to_run ) [EOL] self . now = datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_logException = patcher . start ( ) [EOL] [EOL] async def test ( self ) : [EOL] await bot . coroutine . background . _run_task ( self . taskMethod , self . now ) [EOL] self . taskMethod . assert_called_once_with ( self . now ) [EOL] self . assertFalse ( self . mock_logException . called ) [EOL] [EOL] async def test_exception ( self ) : [EOL] self . taskMethod . side_effect = Exception [EOL] await bot . coroutine . background . _run_task ( self . taskMethod , self . now ) [EOL] self . taskMethod . assert_called_once_with ( self . now ) [EOL] self . mock_logException . assert_called_once_with ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import asynctest [EOL] [EOL] from datetime import datetime [EOL] [EOL] from asynctest . mock import MagicMock , Mock , patch [EOL] [EOL] import tests . unittest . asynctest_fix [comment] [EOL] from bot . data import Channel [EOL] from lib . cache import CacheStore [EOL] from lib . data import WhisperCommandArgs [EOL] from lib . data . message import Message [EOL] from lib . data . permissions import WhisperPermissionSet [EOL] from lib . database import DatabaseMain [EOL] [EOL] [EOL] class TestWhisper ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . now = datetime ( [number] , [number] , [number] ) [EOL] self . channel = Mock ( spec = Channel ) [EOL] self . channel . channel = [string] [EOL] self . channel . sessionData = { } [EOL] self . data = Mock ( spec = CacheStore ) [EOL] self . database = MagicMock ( spec = DatabaseMain ) [EOL] self . database . __aenter__ . return_value = self . database [EOL] self . database . __aexit__ . return_value = False [EOL] self . permissionSet = { [string] : False , [string] : False , [string] : False , [string] : False , [string] : False , } [EOL] self . permissions = MagicMock ( spec = WhisperPermissionSet ) [EOL] self . permissions . __getitem__ . side_effect = lambda k : self . permissionSet [ k ] [EOL] self . args = WhisperCommandArgs ( self . data , [string] , Message ( [string] ) , self . permissions , self . now ) [EOL] [EOL] patcher = patch . object ( DatabaseMain , [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_database = patcher . start ( ) [EOL] self . mock_database . return_value = self . database [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import math [EOL] import unittest [EOL] [EOL] import bot . coroutine . join [EOL] [EOL] from collections import deque [EOL] from datetime import datetime , timedelta [EOL] [EOL] from unittest . mock import PropertyMock , patch [EOL] [EOL] from bot . data import Channel [EOL] from bot . coroutine . connection import ConnectionHandler [EOL] [EOL] [EOL] class TestJoinManager ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . connection = ConnectionHandler ( [string] , [string] , [number] ) [EOL] self . channel = Channel ( [string] , self . connection ) [EOL] self . connection . _channels [ self . channel . channel ] = self . channel [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_globals = patcher . start ( ) [EOL] self . mock_globals . cluster = self . connection [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] patcher . start ( ) [EOL] bot . coroutine . join . _joinTimes = deque ( ) [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] patcher . start ( ) [EOL] bot . coroutine . join . _channelJoined = set ( ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) def test_can_process ( self , mock_now , mock_config ) : [EOL] mock_config . joinLimit = [number] [EOL] mock_now . return_value = datetime ( [number] , [number] , [number] ) [EOL] self . assertIs ( bot . coroutine . join . _can_process ( ) , True ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) def test_can_process_partial ( self , mock_now , mock_config ) : [EOL] mock_config . joinLimit = [number] [EOL] mock_now . return_value = datetime ( [number] , [number] , [number] ) [EOL] bot . coroutine . join . _joinTimes = deque ( [ datetime ( [number] , [number] , [number] ) - timedelta ( seconds = [number] ) ] + [ datetime ( [number] , [number] , [number] ) ] * [number] ) [EOL] self . assertIs ( bot . coroutine . join . _can_process ( ) , True ) [EOL] self . assertEqual ( list ( bot . coroutine . join . _joinTimes ) , [ datetime ( [number] , [number] , [number] ) ] * [number] ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) def test_can_process_full ( self , mock_now , mock_config ) : [EOL] mock_config . joinLimit = [number] [EOL] mock_now . return_value = datetime ( [number] , [number] , [number] ) [EOL] bot . coroutine . join . _joinTimes = deque ( [ datetime ( [number] , [number] , [number] ) ] * [number] ) [EOL] self . assertIs ( bot . coroutine . join . _can_process ( ) , False ) [EOL] self . assertEqual ( list ( bot . coroutine . join . _joinTimes ) , [ datetime ( [number] , [number] , [number] ) ] * [number] ) [EOL] [EOL] @ patch . object ( ConnectionHandler , [string] , new_callable = PropertyMock ) def test_connected_channels ( self , mock_isConnected ) : [EOL] mock_isConnected . return_value = True [EOL] self . assertEqual ( bot . coroutine . join . _connected_channels ( ) , { [string] : self . channel } ) [EOL] [EOL] @ patch . object ( ConnectionHandler , [string] , new_callable = PropertyMock ) def test_connected_channels_not_connected ( self , mock_isConnected ) : [EOL] mock_isConnected . return_value = False [EOL] self . assertFalse ( bot . coroutine . join . _connected_channels ( ) ) [EOL] [EOL] @ patch ( [string] , autospec = True ) def test_connected ( self , mock_now ) : [EOL] mock_now . return_value = datetime ( [number] , [number] , [number] ) [EOL] bot . coroutine . join . connected ( self . connection ) [EOL] self . assertIn ( datetime ( [number] , [number] , [number] ) , bot . coroutine . join . _joinTimes ) [EOL] [EOL] def test_disconnected ( self ) : [EOL] bot . coroutine . join . _channelJoined . add ( self . channel . channel ) [EOL] bot . coroutine . join . _channelJoined . add ( [string] ) [EOL] bot . coroutine . join . disconnected ( self . connection ) [EOL] self . assertTrue ( bot . coroutine . join . _channelJoined ) [EOL] self . assertNotIn ( self . channel . channel , bot . coroutine . join . _channelJoined ) [EOL] [EOL] def test_on_part ( self ) : [EOL] bot . coroutine . join . _channelJoined . add ( self . channel . channel ) [EOL] bot . coroutine . join . _channelJoined . add ( [string] ) [EOL] bot . coroutine . join . on_part ( self . channel . channel ) [EOL] self . assertTrue ( bot . coroutine . join . _channelJoined ) [EOL] self . assertNotIn ( self . channel . channel , bot . coroutine . join . _channelJoined ) [EOL] [EOL] @ patch ( [string] , autospec = True ) def test_record_join ( self , mock_now ) : [EOL] mock_now . return_value = datetime ( [number] , [number] , [number] ) [EOL] bot . coroutine . join . record_join ( ) [EOL] self . assertIn ( datetime ( [number] , [number] , [number] ) , bot . coroutine . join . _joinTimes ) [EOL] [EOL] def test_getLowestPriority ( self ) : [EOL] channels = { [string] : Channel ( [string] , self . connection , - math . inf ) , [string] : Channel ( [string] , self . connection , [number] ) , [string] : Channel ( [string] , self . connection , math . inf ) } [EOL] notJoined = set ( channels . keys ( ) ) [EOL] channel = bot . coroutine . join . _get_join_with_lowest_priority ( channels , notJoined ) [EOL] self . assertEqual ( channel , [string] ) [EOL] notJoined . discard ( channel ) [EOL] channel = bot . coroutine . join . _get_join_with_lowest_priority ( channels , notJoined ) [EOL] self . assertEqual ( channel , [string] ) [EOL] notJoined . discard ( channel ) [EOL] channel = bot . coroutine . join . _get_join_with_lowest_priority ( channels , notJoined ) [EOL] self . assertEqual ( channel , [string] ) [EOL] notJoined . discard ( channel ) [EOL] self . assertIsNone ( bot . coroutine . join . _get_join_with_lowest_priority ( channels , notJoined ) ) [EOL] [EOL] @ patch . object ( ConnectionHandler , [string] ) @ patch ( [string] ) @ patch ( [string] ) @ patch ( [string] ) def test_join_full ( self , mock_channels , mock_canProcess , mock_lowPriority , mock_queue_write ) : [EOL] mock_canProcess . return_value = False [EOL] bot . coroutine . join . join_a_channel ( ) [EOL] self . assertFalse ( mock_channels . called ) [EOL] self . assertFalse ( mock_lowPriority . called ) [EOL] self . assertFalse ( mock_queue_write . called ) [EOL] self . assertFalse ( mock_queue_write . called ) [EOL] [EOL] @ patch . object ( ConnectionHandler , [string] ) @ patch ( [string] ) @ patch ( [string] ) @ patch ( [string] ) def test_join_no_channels ( self , mock_channels , mock_canProcess , mock_lowPriority , mock_queue_write ) : [EOL] mock_canProcess . return_value = True [EOL] mock_channels . return_value = { } [EOL] bot . coroutine . join . join_a_channel ( ) [EOL] self . assertFalse ( mock_lowPriority . called ) [EOL] self . assertFalse ( mock_queue_write . called ) [EOL] [EOL] @ patch . object ( ConnectionHandler , [string] ) @ patch ( [string] ) @ patch ( [string] ) @ patch ( [string] ) def test_join_no_to_join ( self , mock_channels , mock_canProcess , mock_lowPriority , mock_queue_write ) : [EOL] mock_canProcess . return_value = True [EOL] mock_channels . return_value = { [string] : self . channel } [EOL] bot . coroutine . join . _channelJoined . add ( [string] ) [EOL] bot . coroutine . join . join_a_channel ( ) [EOL] self . assertFalse ( mock_lowPriority . called ) [EOL] self . assertFalse ( mock_queue_write . called ) [EOL] [EOL] @ patch . object ( ConnectionHandler , [string] ) @ patch ( [string] ) @ patch ( [string] ) @ patch ( [string] ) def test_join ( self , mock_channels , mock_canProcess , mock_lowPriority , mock_queue_write ) : [EOL] mock_canProcess . return_value = True [EOL] mock_channels . return_value = { [string] : self . channel } [EOL] mock_lowPriority . return_value = [string] [EOL] bot . coroutine . join . join_a_channel ( ) [EOL] self . assertTrue ( mock_queue_write . called ) [EOL] self . assertEqual ( bot . coroutine . join . _channelJoined , { [string] } ) [EOL]	
import asynctest [EOL] [EOL] from asynctest . mock import CoroutineMock , MagicMock , patch [EOL] [EOL] import bot . _config [EOL] [EOL] config_data = [string] [comment] [EOL] [EOL] [EOL] class TestConfigReader ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_isfile = patcher . start ( ) [EOL] self . mock_isfile . return_value = True [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_isdir = patcher . start ( ) [EOL] self . mock_isdir . return_value = False [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_mkdir = patcher . start ( ) [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_open = patcher . start ( ) [EOL] [EOL] self . file_mock = MagicMock ( ) [EOL] self . file_mock . __aenter__ = CoroutineMock ( ) [EOL] self . file_mock . __aenter__ . return_value = self . file_mock [EOL] self . file_mock . __aexit__ = CoroutineMock ( ) [EOL] self . file_mock . __aexit__ . return_value = False [EOL] self . file_mock . read = CoroutineMock ( ) [EOL] self . file_mock . read . return_value = config_data [EOL] self . mock_open . return_value = self . file_mock [EOL] [EOL] async def test_now ( self ) : [EOL] config = bot . _config . BotConfig ( ) [EOL] await config . read_config ( ) [EOL] self . assertEqual ( self . file_mock . read . call_count , [number] ) [EOL] self . assertIsInstance ( config . botnick , str ) [EOL] self . assertIsInstance ( config . password , str ) [EOL] self . assertIsInstance ( config . owner , str ) [EOL] self . assertIsInstance ( config . awsServer , str ) [EOL] self . assertIsInstance ( config . awsPort , int ) [EOL] self . assertIsInstance ( config . development , bool ) [EOL] self . assertIsInstance ( config . messageLimit , int ) [EOL] self . assertIsInstance ( config . modLimit , int ) [EOL] self . assertIsInstance ( config . modSpamLimit , int ) [EOL] self . assertIsInstance ( config . publicLimit , int ) [EOL] self . assertIsInstance ( config . publicDelay , float ) [EOL] self . assertIsInstance ( config . messageSpan , float ) [EOL] self . assertIsInstance ( config . whiperLimit , float ) [EOL] self . assertIsInstance ( config . whiperSpan , float ) [EOL] self . assertIsInstance ( config . customMessageCooldown , float ) [EOL] self . assertIsInstance ( config . customMessageUserCooldown , float ) [EOL] self . assertIsInstance ( config . customMessageUrlTimeout , float ) [EOL] self . assertIsInstance ( config . spamModeratorCooldown , float ) [EOL] self . assertIsInstance ( config . warningDuration , float ) [EOL] self . assertIsInstance ( config . moderatorDefaultTimeout , list ) [EOL] self . assertIsInstance ( config . moderatorDefaultTimeout [ [number] ] , int ) [EOL] self . assertIsInstance ( config . moderatorDefaultTimeout [ [number] ] , int ) [EOL] self . assertIsInstance ( config . moderatorDefaultTimeout [ [number] ] , int ) [EOL] self . assertIsInstance ( config . joinLimit , int ) [EOL] self . assertIsInstance ( config . joinPerSecond , float ) [EOL] self . assertIsInstance ( config . httpTimeout , float ) [EOL] self . assertIsInstance ( config . ircLogFolder , str ) [EOL] self . assertIsInstance ( config . exceptionLog , str ) [EOL] self . assertIsInstance ( config . database , dict ) [EOL] self . assertIsInstance ( config . database [ [string] ] , str ) [EOL] self . assertIsInstance ( config . database [ [string] ] , str ) [EOL] self . assertIsInstance ( config . database [ [string] ] , str ) [EOL] self . assertIsInstance ( config . database [ [string] ] , str ) [EOL] self . mock_mkdir . assert_called_once_with ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import itertools [EOL] import math [EOL] import unittest [EOL] from bot . coroutine . connection import ConnectionHandler [EOL] from bot . data import Channel , MessagingQueue [EOL] from bot . data . _messaging_queue import ChatMessage , WhisperMessage [EOL] from datetime import datetime , timedelta [EOL] from unittest . mock import call , patch [EOL] [EOL] [EOL] class BaseTestMessagingQueue ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . queue = MessagingQueue ( ) [EOL] connection = ConnectionHandler ( [string] , [string] , [number] ) [EOL] self . bgt_channel = Channel ( [string] , connection , - math . inf ) [EOL] self . bgt_channel . isMod = False [EOL] self . mgt_channel = Channel ( [string] , connection , - math . inf ) [EOL] self . mgt_channel . isMod = True [EOL] self . mbt_channel = Channel ( [string] , connection , - math . inf ) [EOL] self . mbt_channel . isMod = False [EOL] [EOL] [EOL] class TestMessagingQueue ( BaseTestMessagingQueue ) : [EOL] @ patch ( [string] , autospec = True ) def test_ismod_own_channel ( self , mock_config ) : [EOL] mock_config . botnick = [string] [EOL] self . assertIs ( MessagingQueue . _isMod ( self . bgt_channel ) , True ) [EOL] [EOL] @ patch ( [string] , autospec = True ) def test_ismod_mod_in_channel ( self , mock_config ) : [EOL] mock_config . botnick = [string] [EOL] self . assertIs ( MessagingQueue . _isMod ( self . mgt_channel ) , True ) [EOL] [EOL] @ patch ( [string] , autospec = True ) def test_ismod_mod_in_channel_and_owner ( self , mock_config ) : [EOL] mock_config . botnick = [string] [EOL] self . assertIs ( MessagingQueue . _isMod ( self . mgt_channel ) , True ) [EOL] [EOL] @ patch ( [string] , autospec = True ) def test_ismod_not_own_ ( self , mock_config ) : [EOL] mock_config . botnick = [string] [EOL] self . assertIs ( MessagingQueue . _isMod ( self . mbt_channel ) , False ) [EOL] [EOL] def test_sendChat_channel_none ( self ) : [EOL] self . assertRaises ( TypeError , self . queue . sendChat , None , [string] ) [EOL] [EOL] def test_sendChat_channel_int ( self ) : [EOL] self . assertRaises ( TypeError , self . queue . sendChat , [number] , [string] ) [EOL] [EOL] def test_sendChat_none ( self ) : [EOL] self . assertRaises ( TypeError , self . queue . sendChat , self . bgt_channel , None ) [EOL] [EOL] def test_sendChat_int ( self ) : [EOL] self . assertRaises ( TypeError , self . queue . sendChat , self . bgt_channel , [number] ) [EOL] [EOL] def test_sendChat_str ( self ) : [EOL] self . queue . sendChat ( self . bgt_channel , [string] ) [EOL] self . assertFalse ( self . queue . _chatQueues [ [number] ] ) [EOL] self . assertFalse ( self . queue . _chatQueues [ [number] ] ) [EOL] self . assertEqual ( len ( self . queue . _chatQueues [ [number] ] ) , [number] ) [EOL] self . assertIsInstance ( self . queue . _chatQueues [ [number] ] [ [number] ] , ChatMessage ) [EOL] self . assertIs ( self . queue . _chatQueues [ [number] ] [ [number] ] . channel , self . bgt_channel ) [EOL] self . assertIs ( self . queue . _chatQueues [ [number] ] [ [number] ] . message , [string] ) [EOL] [EOL] def test_sendChat_list_str ( self ) : [EOL] self . queue . sendChat ( self . bgt_channel , [ [string] , [string] , [string] ] ) [EOL] self . assertFalse ( self . queue . _chatQueues [ [number] ] ) [EOL] self . assertFalse ( self . queue . _chatQueues [ [number] ] ) [EOL] self . assertEqual ( len ( self . queue . _chatQueues [ [number] ] ) , [number] ) [EOL] self . assertIs ( self . queue . _chatQueues [ [number] ] [ [number] ] . message , [string] ) [EOL] self . assertIs ( self . queue . _chatQueues [ [number] ] [ [number] ] . message , [string] ) [EOL] self . assertIs ( self . queue . _chatQueues [ [number] ] [ [number] ] . message , [string] ) [EOL] [EOL] def test_sendChat_tuple_str ( self ) : [EOL] self . queue . sendChat ( self . bgt_channel , ( [string] , [string] , [string] , [string] ) ) [EOL] self . assertFalse ( self . queue . _chatQueues [ [number] ] ) [EOL] self . assertFalse ( self . queue . _chatQueues [ [number] ] ) [EOL] self . assertEqual ( len ( self . queue . _chatQueues [ [number] ] ) , [number] ) [EOL] self . assertIs ( self . queue . _chatQueues [ [number] ] [ [number] ] . message , [string] ) [EOL] self . assertIs ( self . queue . _chatQueues [ [number] ] [ [number] ] . message , [string] ) [EOL] self . assertIs ( self . queue . _chatQueues [ [number] ] [ [number] ] . message , [string] ) [EOL] self . assertIs ( self . queue . _chatQueues [ [number] ] [ [number] ] . message , [string] ) [EOL] [EOL] def test_sendChat_generator_str ( self ) : [EOL] self . queue . sendChat ( self . bgt_channel , ( str ( i ) for i in range ( [number] ) ) ) [EOL] self . assertFalse ( self . queue . _chatQueues [ [number] ] ) [EOL] self . assertFalse ( self . queue . _chatQueues [ [number] ] ) [EOL] self . assertEqual ( len ( self . queue . _chatQueues [ [number] ] ) , [number] ) [EOL] self . assertEqual ( self . queue . _chatQueues [ [number] ] [ [number] ] . message , [string] ) [EOL] self . assertEqual ( self . queue . _chatQueues [ [number] ] [ [number] ] . message , [string] ) [EOL] self . assertEqual ( self . queue . _chatQueues [ [number] ] [ [number] ] . message , [string] ) [EOL] self . assertEqual ( self . queue . _chatQueues [ [number] ] [ [number] ] . message , [string] ) [EOL] self . assertEqual ( self . queue . _chatQueues [ [number] ] [ [number] ] . message , [string] ) [EOL] self . assertEqual ( self . queue . _chatQueues [ [number] ] [ [number] ] . message , [string] ) [EOL] self . assertEqual ( self . queue . _chatQueues [ [number] ] [ [number] ] . message , [string] ) [EOL] self . assertEqual ( self . queue . _chatQueues [ [number] ] [ [number] ] . message , [string] ) [EOL] self . assertEqual ( self . queue . _chatQueues [ [number] ] [ [number] ] . message , [string] ) [EOL] self . assertEqual ( self . queue . _chatQueues [ [number] ] [ [number] ] . message , [string] ) [EOL] [EOL] def test_sendChat_generator_int ( self ) : [EOL] self . assertRaises ( TypeError , self . queue . sendChat , self . bgt_channel , range ( [number] ) ) [EOL] self . assertFalse ( self . queue . _chatQueues [ [number] ] ) [EOL] self . assertFalse ( self . queue . _chatQueues [ [number] ] ) [EOL] self . assertFalse ( self . queue . _chatQueues [ [number] ] ) [EOL] [EOL] def test_sendChat_generator_str_int ( self ) : [EOL] self . assertRaises ( TypeError , self . queue . sendChat , self . bgt_channel , itertools . chain ( ( str ( i ) for i in range ( [number] ) ) , range ( [number] ) ) ) [EOL] self . assertFalse ( self . queue . _chatQueues [ [number] ] ) [EOL] self . assertFalse ( self . queue . _chatQueues [ [number] ] ) [EOL] self . assertFalse ( self . queue . _chatQueues [ [number] ] ) [EOL] [EOL] def test_sendChat_multiple_calls ( self ) : [EOL] self . queue . sendChat ( self . bgt_channel , [string] ) [EOL] self . queue . sendChat ( self . mgt_channel , [string] ) [EOL] self . queue . sendChat ( self . bgt_channel , [string] ) [EOL] self . assertFalse ( self . queue . _chatQueues [ [number] ] ) [EOL] self . assertFalse ( self . queue . _chatQueues [ [number] ] ) [EOL] self . assertEqual ( len ( self . queue . _chatQueues [ [number] ] ) , [number] ) [EOL] self . assertIs ( self . queue . _chatQueues [ [number] ] [ [number] ] . channel , self . bgt_channel ) [EOL] self . assertIs ( self . queue . _chatQueues [ [number] ] [ [number] ] . message , [string] ) [EOL] self . assertIs ( self . queue . _chatQueues [ [number] ] [ [number] ] . channel , self . mgt_channel ) [EOL] self . assertIs ( self . queue . _chatQueues [ [number] ] [ [number] ] . message , [string] ) [EOL] self . assertIs ( self . queue . _chatQueues [ [number] ] [ [number] ] . channel , self . bgt_channel ) [EOL] self . assertIs ( self . queue . _chatQueues [ [number] ] [ [number] ] . message , [string] ) [EOL] [EOL] def test_sendChat_highest_priority ( self ) : [EOL] self . queue . sendChat ( self . bgt_channel , [string] , [number] ) [EOL] self . assertFalse ( self . queue . _chatQueues [ [number] ] ) [EOL] self . assertFalse ( self . queue . _chatQueues [ [number] ] ) [EOL] self . assertEqual ( len ( self . queue . _chatQueues [ [number] ] ) , [number] ) [EOL] self . assertIsInstance ( self . queue . _chatQueues [ [number] ] [ [number] ] , ChatMessage ) [EOL] self . assertIs ( self . queue . _chatQueues [ [number] ] [ [number] ] . channel , self . bgt_channel ) [EOL] self . assertIs ( self . queue . _chatQueues [ [number] ] [ [number] ] . message , [string] ) [EOL] [EOL] def test_sendChat_lowest_priority ( self ) : [EOL] self . queue . sendChat ( self . bgt_channel , [string] , - [number] ) [EOL] self . assertFalse ( self . queue . _chatQueues [ [number] ] ) [EOL] self . assertFalse ( self . queue . _chatQueues [ [number] ] ) [EOL] self . assertEqual ( len ( self . queue . _chatQueues [ [number] ] ) , [number] ) [EOL] self . assertIsInstance ( self . queue . _chatQueues [ [number] ] [ [number] ] , ChatMessage ) [EOL] self . assertIs ( self . queue . _chatQueues [ [number] ] [ [number] ] . channel , self . bgt_channel ) [EOL] self . assertIs ( self . queue . _chatQueues [ [number] ] [ [number] ] . message , [string] ) [EOL] [EOL] def test_sendChat_priority_out_of_range_positive ( self ) : [EOL] self . assertRaises ( ValueError , self . queue . sendChat , self . bgt_channel , [string] , len ( self . queue . _chatQueues ) ) [EOL] self . assertFalse ( any ( self . queue . _chatQueues ) ) [EOL] [EOL] def test_sendChat_priority_out_of_range_negative ( self ) : [EOL] self . assertRaises ( ValueError , self . queue . sendChat , self . bgt_channel , [string] , - len ( self . queue . _chatQueues ) - [number] ) [EOL] self . assertFalse ( any ( self . queue . _chatQueues ) ) [EOL] [EOL] def test_sendChat_priority_multiple_calls ( self ) : [EOL] self . queue . sendChat ( self . bgt_channel , [string] , [number] ) [EOL] self . queue . sendChat ( self . mgt_channel , [string] , [number] ) [EOL] self . queue . sendChat ( self . bgt_channel , [string] , [number] ) [EOL] self . queue . sendChat ( self . mgt_channel , [string] , [number] ) [EOL] self . assertEqual ( len ( self . queue . _chatQueues [ [number] ] ) , [number] ) [EOL] self . assertEqual ( len ( self . queue . _chatQueues [ [number] ] ) , [number] ) [EOL] self . assertEqual ( len ( self . queue . _chatQueues [ [number] ] ) , [number] ) [EOL] self . assertIs ( self . queue . _chatQueues [ [number] ] [ [number] ] . channel , self . bgt_channel ) [EOL] self . assertIs ( self . queue . _chatQueues [ [number] ] [ [number] ] . message , [string] ) [EOL] self . assertIs ( self . queue . _chatQueues [ [number] ] [ [number] ] . channel , self . bgt_channel ) [EOL] self . assertIs ( self . queue . _chatQueues [ [number] ] [ [number] ] . message , [string] ) [EOL] self . assertIs ( self . queue . _chatQueues [ [number] ] [ [number] ] . channel , self . mgt_channel ) [EOL] self . assertIs ( self . queue . _chatQueues [ [number] ] [ [number] ] . message , [string] ) [EOL] self . assertIs ( self . queue . _chatQueues [ [number] ] [ [number] ] . channel , self . mgt_channel ) [EOL] self . assertIs ( self . queue . _chatQueues [ [number] ] [ [number] ] . message , [string] ) [EOL] [EOL] def test_sendChat_disallowed_commands ( self ) : [EOL] self . queue . sendChat ( self . bgt_channel , [string] ) [EOL] self . queue . sendChat ( self . bgt_channel , [string] ) [EOL] self . queue . sendChat ( self . bgt_channel , [string] ) [EOL] self . queue . sendChat ( self . bgt_channel , [string] ) [EOL] self . assertFalse ( any ( self . queue . _chatQueues ) ) [EOL] [EOL] def test_sendChat_allow_disallowed_commands ( self ) : [EOL] self . queue . sendChat ( self . bgt_channel , [string] , bypass = True ) [EOL] self . queue . sendChat ( self . bgt_channel , [string] , bypass = True ) [EOL] self . queue . sendChat ( self . bgt_channel , [string] , bypass = True ) [EOL] self . queue . sendChat ( self . bgt_channel , [string] , bypass = True ) [EOL] self . assertFalse ( self . queue . _chatQueues [ [number] ] ) [EOL] self . assertFalse ( self . queue . _chatQueues [ [number] ] ) [EOL] self . assertEqual ( len ( self . queue . _chatQueues [ [number] ] ) , [number] ) [EOL] [EOL] @ patch . object ( MessagingQueue , [string] , autospec = True ) def test_sendChat_whisper ( self , mock_sendWhisper ) : [EOL] self . queue . sendChat ( self . bgt_channel , [string] ) [EOL] self . assertFalse ( any ( self . queue . _chatQueues ) ) [EOL] mock_sendWhisper . assert_called_once_with ( self . queue , [string] , [ [string] ] ) [EOL] [EOL] @ patch . object ( MessagingQueue , [string] , autospec = True ) def test_sendChat_whispers ( self , mock_sendWhisper ) : [EOL] self . queue . sendChat ( self . bgt_channel , [ [string] , [string] , [string] ] ) [EOL] self . assertFalse ( any ( self . queue . _chatQueues ) ) [EOL] mock_sendWhisper . assert_has_calls ( [ call ( self . queue , [string] , [ [string] ] ) , call ( self . queue , [string] , [ [string] ] ) , call ( self . queue , [string] , [ [string] ] ) ] ) [EOL] [EOL] @ patch . object ( MessagingQueue , [string] , autospec = True ) def test_sendChat_whispers_multi ( self , mock_sendWhisper ) : [EOL] self . queue . sendChat ( self . bgt_channel , [ [string] , [string] , [string] , [string] , [string] , [string] ] , [number] ) [EOL] self . assertFalse ( any ( self . queue . _chatQueues ) ) [EOL] mock_sendWhisper . assert_has_calls ( [ call ( self . queue , [string] , [ [string] , [string] ] ) , call ( self . queue , [string] , [ [string] , [string] ] ) , call ( self . queue , [string] , [ [string] , [string] ] ) ] ) [EOL] [EOL] def test_sendWhisper_None ( self ) : [EOL] self . assertRaises ( TypeError , self . queue . sendWhisper , None , [string] ) [EOL] [EOL] def test_sendWhisper_str_None ( self ) : [EOL] self . assertRaises ( TypeError , self . queue . sendWhisper , [string] , None ) [EOL] [EOL] def test_sendWhisper_str ( self ) : [EOL] self . queue . sendWhisper ( [string] , [string] ) [EOL] self . assertEqual ( len ( self . queue . _whisperQueue ) , [number] ) [EOL] self . assertEqual ( self . queue . _whisperQueue [ [number] ] . nick , [string] ) [EOL] self . assertEqual ( self . queue . _whisperQueue [ [number] ] . message , [string] ) [EOL] [EOL] def test_sendWhisper_list ( self ) : [EOL] self . queue . sendWhisper ( [string] , [ [string] , [string] ] ) [EOL] self . assertEqual ( len ( self . queue . _whisperQueue ) , [number] ) [EOL] self . assertEqual ( self . queue . _whisperQueue [ [number] ] . nick , [string] ) [EOL] self . assertEqual ( self . queue . _whisperQueue [ [number] ] . message , [string] ) [EOL] self . assertEqual ( self . queue . _whisperQueue [ [number] ] . nick , [string] ) [EOL] self . assertEqual ( self . queue . _whisperQueue [ [number] ] . message , [string] ) [EOL] [EOL] def test_sendWhisper_tuple ( self ) : [EOL] self . queue . sendWhisper ( [string] , ( [string] , [string] ) ) [EOL] self . assertEqual ( len ( self . queue . _whisperQueue ) , [number] ) [EOL] self . assertEqual ( self . queue . _whisperQueue [ [number] ] . message , [string] ) [EOL] self . assertEqual ( self . queue . _whisperQueue [ [number] ] . message , [string] ) [EOL] [EOL] def test_sendWhisper_generator ( self ) : [EOL] self . queue . sendWhisper ( [string] , ( str ( i ) for i in range ( [number] ) ) ) [EOL] self . assertEqual ( len ( self . queue . _whisperQueue ) , [number] ) [EOL] self . assertEqual ( self . queue . _whisperQueue [ [number] ] . message , [string] ) [EOL] self . assertEqual ( self . queue . _whisperQueue [ [number] ] . message , [string] ) [EOL] self . assertEqual ( self . queue . _whisperQueue [ [number] ] . message , [string] ) [EOL] [EOL] def test_sendWhisper_multiple_calls ( self ) : [EOL] self . queue . sendWhisper ( [string] , [string] ) [EOL] self . queue . sendWhisper ( [string] , [string] ) [EOL] self . assertEqual ( len ( self . queue . _whisperQueue ) , [number] ) [EOL] self . assertEqual ( self . queue . _whisperQueue [ [number] ] . nick , [string] ) [EOL] self . assertEqual ( self . queue . _whisperQueue [ [number] ] . message , [string] ) [EOL] self . assertEqual ( self . queue . _whisperQueue [ [number] ] . nick , [string] ) [EOL] self . assertEqual ( self . queue . _whisperQueue [ [number] ] . message , [string] ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) def test_cleanOldTimestamps ( self , mock_config , mock_now ) : [EOL] [comment] [EOL] now = datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] mock_config . messageSpan = [number] [EOL] mock_config . whiperSpan = [number] [EOL] mock_now . return_value = now [EOL] self . queue . _chatSent . extend ( now + i * timedelta ( seconds = [number] ) for i in range ( - [number] , [number] ) ) [EOL] self . queue . _whisperSent . extend ( now + i * timedelta ( seconds = [number] ) for i in range ( - [number] , [number] ) ) [EOL] [comment] [EOL] self . queue . cleanOldTimestamps ( ) [EOL] [comment] [EOL] self . assertCountEqual ( self . queue . _chatSent , [ now + i * timedelta ( seconds = [number] ) for i in range ( - [number] , [number] ) ] ) [EOL] self . assertCountEqual ( self . queue . _whisperSent , [ now + i * timedelta ( seconds = [number] ) for i in range ( - [number] , [number] ) ] ) [EOL] [EOL] def test_clearChat_empty ( self ) : [EOL] self . assertFalse ( any ( self . queue . _chatQueues ) ) [EOL] self . queue . clearChat ( self . bgt_channel ) [EOL] self . assertFalse ( any ( self . queue . _chatQueues ) ) [EOL] [EOL] def test_clearChat_single ( self ) : [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . bgt_channel , [string] ) ) [EOL] self . queue . clearChat ( self . bgt_channel ) [EOL] self . assertFalse ( any ( self . queue . _chatQueues ) ) [EOL] [EOL] def test_clearChat_multiple ( self ) : [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . bgt_channel , [string] ) ) [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . bgt_channel , [string] ) ) [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . bgt_channel , [string] ) ) [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . bgt_channel , [string] ) ) [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . bgt_channel , [string] ) ) [EOL] self . queue . clearChat ( self . bgt_channel ) [EOL] self . assertFalse ( any ( self . queue . _chatQueues ) ) [EOL] [EOL] def test_clearChat_mixing ( self ) : [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . bgt_channel , [string] ) ) [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . mgt_channel , [string] ) ) [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . mbt_channel , [string] ) ) [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . bgt_channel , [string] ) ) [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . bgt_channel , [string] ) ) [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . mgt_channel , [string] ) ) [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . mbt_channel , [string] ) ) [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . bgt_channel , [string] ) ) [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . bgt_channel , [string] ) ) [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . mbt_channel , [string] ) ) [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . bgt_channel , [string] ) ) [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . bgt_channel , [string] ) ) [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . bgt_channel , [string] ) ) [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . bgt_channel , [string] ) ) [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . bgt_channel , [string] ) ) [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . bgt_channel , [string] ) ) [EOL] self . queue . clearChat ( self . bgt_channel ) [EOL] self . assertEqual ( len ( self . queue . _chatQueues [ [number] ] ) , [number] ) [EOL] self . assertEqual ( len ( self . queue . _chatQueues [ [number] ] ) , [number] ) [EOL] self . assertFalse ( self . queue . _chatQueues [ [number] ] ) [EOL] self . assertIs ( self . queue . _chatQueues [ [number] ] [ [number] ] . channel , self . mgt_channel ) [EOL] self . assertIs ( self . queue . _chatQueues [ [number] ] [ [number] ] . channel , self . mbt_channel ) [EOL] self . assertIs ( self . queue . _chatQueues [ [number] ] [ [number] ] . channel , self . mgt_channel ) [EOL] self . assertIs ( self . queue . _chatQueues [ [number] ] [ [number] ] . channel , self . mbt_channel ) [EOL] self . assertIs ( self . queue . _chatQueues [ [number] ] [ [number] ] . channel , self . mbt_channel ) [EOL] [EOL] def test_clearAllChat ( self ) : [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . bgt_channel , [string] ) ) [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . mgt_channel , [string] ) ) [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . mbt_channel , [string] ) ) [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . bgt_channel , [string] ) ) [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . bgt_channel , [string] ) ) [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . mgt_channel , [string] ) ) [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . mbt_channel , [string] ) ) [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . bgt_channel , [string] ) ) [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . bgt_channel , [string] ) ) [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . mbt_channel , [string] ) ) [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . bgt_channel , [string] ) ) [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . bgt_channel , [string] ) ) [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . bgt_channel , [string] ) ) [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . bgt_channel , [string] ) ) [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . bgt_channel , [string] ) ) [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . bgt_channel , [string] ) ) [EOL] self . queue . clearAllChat ( ) [EOL] self . assertFalse ( any ( self . queue . _chatQueues ) ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch . object ( MessagingQueue , [string] , autospec = True ) def test_popChat_None ( self , mock_getChatMessage , mock_now ) : [EOL] mock_getChatMessage . return_value = None [EOL] now = datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] mock_now . return_value = now [EOL] self . assertIsNone ( self . queue . popChat ( ) ) [EOL] self . assertFalse ( self . queue . _chatSent ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch . object ( MessagingQueue , [string] , autospec = True ) def test_popChat ( self , mock_getChatMessage , mock_now ) : [EOL] msg = ChatMessage ( self . bgt_channel , [string] ) [EOL] mock_getChatMessage . return_value = msg [EOL] now = datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] mock_now . return_value = now [EOL] self . assertIs ( self . queue . popChat ( ) , msg ) [EOL] self . assertEqual ( self . queue . _chatSent , [ now ] ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch . object ( MessagingQueue , [string] , autospec = True ) def test_popWhisper_None ( self , mock_getChatMessage , mock_now ) : [EOL] mock_getChatMessage . return_value = None [EOL] now = datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] mock_now . return_value = now [EOL] self . assertIsNone ( self . queue . popWhisper ( ) ) [EOL] self . assertFalse ( self . queue . _whisperSent ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) def test_popWhisper ( self , mock_now , mock_config ) : [EOL] mock_config . whiperLimit = [number] [EOL] msg = WhisperMessage ( [string] , [string] ) [EOL] self . queue . _whisperQueue . append ( msg ) [EOL] now = datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] mock_now . return_value = now [EOL] self . assertIs ( self . queue . popWhisper ( ) , msg ) [EOL] self . assertEqual ( self . queue . _whisperSent , [ now ] ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) def test_popWhisper_full ( self , mock_now , mock_config ) : [EOL] mock_config . whiperLimit = [number] [EOL] msg = WhisperMessage ( [string] , [string] ) [EOL] self . queue . _whisperQueue . append ( msg ) [EOL] now = datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] mock_now . return_value = now [EOL] self . queue . _whisperSent . extend ( now for _ in range ( [number] ) ) [EOL] self . assertIsNone ( self . queue . popWhisper ( ) ) [EOL] self . assertEqual ( self . queue . _whisperSent , [ now for _ in range ( [number] ) ] ) [EOL] [EOL] [EOL] class TestMessagingQueueGetChatMessage ( BaseTestMessagingQueue ) : [EOL] def setUp ( self ) : [EOL] super ( ) . setUp ( ) [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_config = patcher . start ( ) [EOL] self . mock_config . botnick = [string] [EOL] self . mock_config . modLimit = [number] [EOL] self . mock_config . modSpamLimit = [number] [EOL] self . mock_config . publicLimit = [number] [EOL] self . mock_config . publicDelay = [number] [EOL] self . mock_config . messageSpan = [number] [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_now = patcher . start ( ) [EOL] self . now = datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] self . mock_now . return_value = self . now [EOL] [EOL] def test_empty ( self ) : [EOL] self . assertIsNone ( self . queue . _getChatMessage ( self . now ) ) [EOL] self . assertFalse ( self . queue . _lowQueueRecent ) [EOL] self . assertFalse ( self . queue . _publicTime ) [EOL] [EOL] def test_full ( self ) : [EOL] self . queue . _chatSent . extend ( self . now for i in range ( [number] ) ) [EOL] self . queue . _whisperSent . extend ( self . now for i in range ( [number] ) ) [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . bgt_channel , [string] ) ) [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . mgt_channel , [string] ) ) [EOL] self . queue . _chatQueues [ [number] ] . append ( ChatMessage ( self . mbt_channel , [string] ) ) [EOL] self . assertIsNone ( self . queue . _getChatMessage ( self . now ) ) [EOL] self . assertFalse ( self . queue . _lowQueueRecent ) [EOL] self . assertFalse ( self . queue . _publicTime ) [EOL] [EOL] def test_single_mod ( self ) : [EOL] msg = ChatMessage ( self . mgt_channel , [string] ) [EOL] self . queue . _chatQueues [ [number] ] . append ( msg ) [EOL] self . assertIs ( self . queue . _getChatMessage ( self . now ) , msg ) [EOL] self . assertFalse ( self . queue . _lowQueueRecent ) [EOL] self . assertEqual ( self . queue . _publicTime [ msg . channel . channel ] , self . queue . _publicTime . default_factory ( ) ) [EOL] self . assertIsNone ( self . queue . _getChatMessage ( self . now ) ) [EOL] [EOL] def test_single_notmod ( self ) : [EOL] msg = ChatMessage ( self . mbt_channel , [string] ) [EOL] self . queue . _chatQueues [ [number] ] . append ( msg ) [EOL] self . assertIs ( self . queue . _getChatMessage ( self . now ) , msg ) [EOL] self . assertFalse ( self . queue . _lowQueueRecent ) [EOL] self . assertEqual ( self . queue . _publicTime [ msg . channel . channel ] , self . now ) [EOL] [EOL] def test_double ( self ) : [EOL] msg1 = ChatMessage ( self . bgt_channel , [string] ) [EOL] msg2 = ChatMessage ( self . mgt_channel , [string] ) [EOL] self . queue . _chatQueues [ [number] ] . append ( msg1 ) [EOL] self . queue . _chatQueues [ [number] ] . append ( msg2 ) [EOL] self . assertIs ( self . queue . _getChatMessage ( self . now ) , msg1 ) [EOL] self . assertIs ( self . queue . _getChatMessage ( self . now ) , msg2 ) [EOL] [EOL] def test_lowest_priority ( self ) : [EOL] msg = ChatMessage ( self . bgt_channel , [string] ) [EOL] self . queue . _chatQueues [ - [number] ] . append ( msg ) [EOL] self . assertIs ( self . queue . _getChatMessage ( self . now ) , msg ) [EOL] self . assertEqual ( self . queue . _publicTime [ msg . channel . channel ] , self . queue . _publicTime . default_factory ( ) ) [EOL] self . assertIn ( msg . channel . channel , self . queue . _lowQueueRecent ) [EOL] [EOL] def test_lowest_priority_nonmod ( self ) : [EOL] msg = ChatMessage ( self . mbt_channel , [string] ) [EOL] self . queue . _chatQueues [ - [number] ] . append ( msg ) [EOL] self . assertIs ( self . queue . _getChatMessage ( self . now ) , msg ) [EOL] self . assertFalse ( self . queue . _lowQueueRecent ) [EOL] self . assertEqual ( self . queue . _publicTime [ msg . channel . channel ] , self . now ) [EOL] [EOL] def test_lowest_priority_multiple ( self ) : [EOL] msgs1 = [ ChatMessage ( self . bgt_channel , [string] ) for _ in range ( [number] ) ] [EOL] msgs2 = [ ChatMessage ( self . mgt_channel , [string] ) for _ in range ( [number] ) ] [EOL] self . queue . _chatQueues [ - [number] ] . append ( msgs1 [ [number] ] ) [EOL] self . queue . _chatQueues [ - [number] ] . extend ( msgs2 ) [EOL] self . queue . _chatQueues [ - [number] ] . append ( msgs1 [ [number] ] ) [EOL] self . assertIs ( self . queue . _getChatMessage ( self . now ) , msgs1 [ [number] ] ) [EOL] self . assertEqual ( list ( self . queue . _lowQueueRecent ) , [ self . bgt_channel . channel ] ) [EOL] self . assertIs ( self . queue . _getChatMessage ( self . now ) , msgs2 [ [number] ] ) [EOL] self . assertEqual ( list ( self . queue . _lowQueueRecent ) , [ self . bgt_channel . channel , self . mgt_channel . channel ] ) [EOL] self . assertIs ( self . queue . _getChatMessage ( self . now ) , msgs1 [ [number] ] ) [EOL] self . assertEqual ( list ( self . queue . _lowQueueRecent ) , [ self . mgt_channel . channel , self . bgt_channel . channel ] ) [EOL] self . assertIs ( self . queue . _getChatMessage ( self . now ) , msgs2 [ [number] ] ) [EOL] self . assertEqual ( list ( self . queue . _lowQueueRecent ) , [ self . bgt_channel . channel , self . mgt_channel . channel ] ) [EOL] [EOL] def test_prioirity_top_two_1 ( self ) : [EOL] msg1 = ChatMessage ( self . bgt_channel , [string] ) [EOL] msg2 = ChatMessage ( self . bgt_channel , [string] ) [EOL] self . queue . _chatQueues [ [number] ] . append ( msg1 ) [EOL] self . queue . _chatQueues [ [number] ] . append ( msg2 ) [EOL] self . assertIs ( self . queue . _getChatMessage ( self . now ) , msg1 ) [EOL] self . assertIs ( self . queue . _getChatMessage ( self . now ) , msg2 ) [EOL] [EOL] def test_prioirity_top_two_2 ( self ) : [EOL] msg1 = ChatMessage ( self . bgt_channel , [string] ) [EOL] msg2 = ChatMessage ( self . bgt_channel , [string] ) [EOL] self . queue . _chatQueues [ [number] ] . append ( msg1 ) [EOL] self . queue . _chatQueues [ [number] ] . append ( msg2 ) [EOL] self . assertIs ( self . queue . _getChatMessage ( self . now ) , msg1 ) [EOL] self . assertIs ( self . queue . _getChatMessage ( self . now ) , msg2 ) [EOL] [EOL] def test_prioirity_top_two_3 ( self ) : [EOL] msg1 = ChatMessage ( self . bgt_channel , [string] ) [EOL] msg2 = ChatMessage ( self . bgt_channel , [string] ) [EOL] self . queue . _chatQueues [ [number] ] . append ( msg1 ) [EOL] self . queue . _chatQueues [ [number] ] . append ( msg2 ) [EOL] self . assertIs ( self . queue . _getChatMessage ( self . now ) , msg1 ) [EOL] self . assertIs ( self . queue . _getChatMessage ( self . now ) , msg2 ) [EOL] [EOL] def test_nonmod_mod ( self ) : [EOL] msg1 = ChatMessage ( self . bgt_channel , [string] ) [EOL] msg2 = ChatMessage ( self . mbt_channel , [string] ) [EOL] self . queue . _chatQueues [ [number] ] . append ( msg1 ) [EOL] self . queue . _chatQueues [ [number] ] . append ( msg2 ) [EOL] self . assertIs ( self . queue . _getChatMessage ( self . now ) , msg2 ) [EOL] self . assertIs ( self . queue . _getChatMessage ( self . now ) , msg1 ) [EOL] [EOL] def test_prioirity_nonmod_mod ( self ) : [EOL] msg1 = ChatMessage ( self . bgt_channel , [string] ) [EOL] msg2 = ChatMessage ( self . mbt_channel , [string] ) [EOL] self . queue . _chatQueues [ [number] ] . append ( msg1 ) [EOL] self . queue . _chatQueues [ [number] ] . append ( msg2 ) [EOL] self . assertIs ( self . queue . _getChatMessage ( self . now ) , msg2 ) [EOL] self . assertIs ( self . queue . _getChatMessage ( self . now ) , msg1 ) [EOL] [EOL] def test_nonmod_semifull ( self ) : [EOL] self . queue . _chatSent . extend ( self . now for i in range ( [number] ) ) [EOL] msg1 = ChatMessage ( self . bgt_channel , [string] ) [EOL] msg2 = ChatMessage ( self . mbt_channel , [string] ) [EOL] self . queue . _chatQueues [ [number] ] . append ( msg1 ) [EOL] self . queue . _chatQueues [ [number] ] . append ( msg2 ) [EOL] self . assertIs ( self . queue . _getChatMessage ( self . now ) , msg2 ) [EOL] self . assertIs ( self . queue . _getChatMessage ( self . now ) , msg1 ) [EOL] [EOL] def test_nonmod_full ( self ) : [EOL] self . queue . _chatSent . extend ( self . now for i in range ( [number] ) ) [EOL] msg1 = ChatMessage ( self . bgt_channel , [string] ) [EOL] msg2 = ChatMessage ( self . mbt_channel , [string] ) [EOL] self . queue . _chatQueues [ [number] ] . append ( msg1 ) [EOL] self . queue . _chatQueues [ [number] ] . append ( msg2 ) [EOL] self . assertIs ( self . queue . _getChatMessage ( self . now ) , msg1 ) [EOL] self . assertIsNone ( self . queue . _getChatMessage ( self . now ) ) [EOL] self . assertIs ( self . queue . _chatQueues [ [number] ] [ [number] ] , msg2 ) [EOL]	
import asyncio [EOL] import unittest [EOL] [EOL] import asynctest [EOL] [EOL] from datetime import datetime , timedelta [EOL] from io import StringIO [EOL] [EOL] from asynctest . mock import Mock , patch [EOL] [EOL] from bot . coroutine import connection [EOL] from bot . data import Channel , MessagingQueue [EOL] from bot . data . _messaging_queue import ChatMessage , WhisperMessage [EOL] from bot . data . _error import ConnectionReset , LoginUnsuccessful [EOL] from bot . twitchmessage import IrcMessage [EOL] [EOL] [EOL] class TestConnectionHandler ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . connection = connection . ConnectionHandler ( [string] , [string] , [number] ) [EOL] self . channel = Channel ( [string] , self . connection ) [EOL] self . whisper = WhisperMessage ( [string] , [string] ) [EOL] [EOL] def test_name ( self ) : [EOL] self . assertEqual ( self . connection . name , [string] ) [EOL] [EOL] def test_server ( self ) : [EOL] self . assertEqual ( self . connection . server , [string] ) [EOL] [EOL] def test_port ( self ) : [EOL] self . assertEqual ( self . connection . port , [number] ) [EOL] [EOL] def test_address ( self ) : [EOL] self . assertEqual ( self . connection . address , ( [string] , [number] ) ) [EOL] [EOL] def test_isConnected ( self ) : [EOL] self . assertIs ( self . connection . isConnected , False ) [EOL] [EOL] def test_channels ( self ) : [EOL] self . assertEqual ( self . connection . channels , { } ) [EOL] [EOL] def test_messaging ( self ) : [EOL] self . assertIsInstance ( self . connection . messaging , MessagingQueue ) [EOL] [EOL] def test_writeQueue ( self ) : [EOL] self . assertFalse ( self . connection . writeQueue , MessagingQueue ) [EOL] [EOL] @ patch ( [string] , new_callable = StringIO ) @ patch ( [string] , autospec = True ) @ patch . object ( Channel , [string] , autospec = True ) def test_on_write_join ( self , mock_onJoin , mock_record_join , mock_stdout ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] message = IrcMessage ( None , None , [string] ) [EOL] self . connection . _on_write ( message , now , channel = self . channel ) [EOL] mock_onJoin . assert_called_once_with ( self . channel ) [EOL] mock_record_join . assert_called_once_with ( ) [EOL] self . assertNotEqual ( mock_stdout . getvalue ( ) , [string] ) [EOL] [EOL] def test_on_write_ping ( self ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] message = IrcMessage ( None , None , [string] ) [EOL] self . connection . _on_write ( message , now , channel = self . channel ) [EOL] self . assertEqual ( self . connection . lastSentPing , now ) [EOL] [EOL] @ patch . object ( connection . ConnectionHandler , [string] , autospec = True ) @ patch ( [string] , autospec = True ) def test_ping ( self , mock_now , mock_queue_write ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] mock_now . return_value = now [EOL] self . connection . ping ( ) [EOL] self . assertIs ( mock_queue_write . called , True ) [EOL] self . assertTrue ( any ( m for m in mock_queue_write . call_args_list if m [ [number] ] [ [number] ] . command == [string] ) ) [EOL] self . assertEqual ( self . connection . lastPing , now ) [EOL] [EOL] @ patch . object ( connection . ConnectionHandler , [string] , autospec = True ) @ patch . object ( connection . ConnectionHandler , [string] , autospec = True ) @ patch ( [string] , autospec = True ) def test_send_ping_tooSoon ( self , mock_now , mock_queue_write , mock_disconnect ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] mock_now . return_value = now [EOL] self . connection . lastSentPing = now [EOL] self . connection . lastPing = now [EOL] self . connection . send_ping ( ) [EOL] self . assertFalse ( mock_disconnect . called ) [EOL] self . assertFalse ( mock_queue_write . called ) [EOL] [EOL] @ patch . object ( connection . ConnectionHandler , [string] , autospec = True ) @ patch . object ( connection . ConnectionHandler , [string] , autospec = True ) @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) def test_send_ping ( self , mock_now , mock_config , queue_write , mock_disconnect ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] mock_now . return_value = now [EOL] mock_config . botnick = [string] [EOL] self . connection . lastSentPing = now - timedelta ( minutes = [number] , seconds = [number] ) [EOL] self . connection . lastPing = now [EOL] self . connection . send_ping ( ) [EOL] self . assertFalse ( mock_disconnect . called ) [EOL] self . assertIs ( queue_write . called , True ) [EOL] self . assertTrue ( any ( m for m in queue_write . call_args_list if m [ [number] ] [ [number] ] . command == [string] ) ) [EOL] [EOL] @ patch . object ( connection . ConnectionHandler , [string] , autospec = True ) @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) def test_send_ping_noresponse ( self , mock_now , mock_config , queue_write ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] mock_now . return_value = now [EOL] mock_config . botnick = [string] [EOL] self . connection . lastSentPing = now [EOL] self . connection . lastPing = now - timedelta ( minutes = [number] ) [EOL] self . assertRaises ( ConnectionError , self . connection . send_ping ) [EOL] self . assertFalse ( queue_write . called ) [EOL] [EOL] @ patch . object ( connection . ConnectionHandler , [string] , autospec = True ) @ patch . object ( connection . ConnectionHandler , [string] , autospec = True ) @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) def test_send_ping_noresponse_late ( self , mock_now , mock_config , queue_write , mock_disconnect ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] mock_now . return_value = now [EOL] mock_config . botnick = [string] [EOL] self . connection . lastSentPing = now - timedelta ( minutes = [number] , seconds = [number] ) [EOL] self . connection . lastPing = now - timedelta ( minutes = [number] ) [EOL] self . connection . send_ping ( ) [EOL] self . assertFalse ( mock_disconnect . called ) [EOL] self . assertIs ( queue_write . called , True ) [EOL] self . assertTrue ( any ( m for m in queue_write . call_args_list if m [ [number] ] [ [number] ] . command == [string] ) ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) def test_log_read ( self , mock_logIrcMessage , mock_config ) : [EOL] mock_config . botnick = [string] [EOL] self . connection . _log_read ( [string] ) [EOL] self . assertTrue ( mock_logIrcMessage . called ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) def test_log_write ( self , mock_logIrcMessage , mock_config ) : [EOL] mock_config . botnick = [string] [EOL] self . connection . _log_write ( IrcMessage ( None , None , [number] ) ) [EOL] self . assertTrue ( mock_logIrcMessage . called ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) def test_log_write_channel ( self , mock_logIrcMessage , mock_config ) : [EOL] mock_config . botnick = [string] [EOL] message = IrcMessage ( None , None , [number] ) [EOL] self . connection . _log_write ( message , channel = self . channel ) [EOL] self . assertEqual ( mock_logIrcMessage . call_count , [number] ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) def test_log_write_whisper ( self , mock_logIrcMessage , mock_config ) : [EOL] mock_config . botnick = [string] [EOL] message = IrcMessage ( None , None , [number] ) [EOL] self . connection . _log_write ( message , whisper = self . whisper ) [EOL] self . assertEqual ( mock_logIrcMessage . call_count , [number] ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) def test_log_write_channel_whisper ( self , mock_logIrcMessage , mock_config ) : [EOL] mock_config . botnick = [string] [EOL] self . assertRaises ( ValueError , self . connection . _log_write , IrcMessage ( None , None , [number] ) , channel = self . channel , whisper = self . whisper ) [EOL] self . assertEqual ( mock_logIrcMessage . call_count , [number] ) [EOL] [EOL] def test_queueWrite_none ( self ) : [EOL] self . assertRaises ( TypeError , self . connection . queue_write , None ) [EOL] [EOL] def test_queueWrite_channel_int ( self ) : [EOL] self . assertRaises ( TypeError , self . connection . queue_write , IrcMessage ( None , None , [number] ) , channel = [number] ) [EOL] [EOL] def test_queueWrite_whisper_int ( self ) : [EOL] self . assertRaises ( TypeError , self . connection . queue_write , IrcMessage ( None , None , [number] ) , whisper = [number] ) [EOL] [EOL] def test_queueWrite_channel_whisper ( self ) : [EOL] self . assertRaises ( ValueError , self . connection . queue_write , IrcMessage ( None , None , [number] ) , channel = self . channel , whisper = self . whisper ) [EOL] [EOL] def test_queueWrite ( self ) : [EOL] message = IrcMessage ( None , None , [number] ) [EOL] self . connection . queue_write ( message ) [EOL] self . assertEqual ( len ( self . connection . writeQueue ) , [number] ) [EOL] self . assertEqual ( self . connection . writeQueue [ [number] ] [ [number] ] , ( message , ) ) [EOL] self . assertEqual ( self . connection . writeQueue [ [number] ] [ [number] ] , { } ) [EOL] [EOL] def test_queueWrite_channel ( self ) : [EOL] message = IrcMessage ( None , None , [number] ) [EOL] self . connection . queue_write ( message , channel = self . channel ) [EOL] self . assertEqual ( len ( self . connection . writeQueue ) , [number] ) [EOL] self . assertEqual ( self . connection . writeQueue [ [number] ] [ [number] ] , ( message , ) ) [EOL] self . assertEqual ( self . connection . writeQueue [ [number] ] [ [number] ] , { [string] : self . channel } ) [EOL] [EOL] def test_queueWrite_whisper ( self ) : [EOL] message = IrcMessage ( None , None , [number] ) [EOL] self . connection . queue_write ( message , whisper = self . whisper ) [EOL] self . assertEqual ( len ( self . connection . writeQueue ) , [number] ) [EOL] self . assertEqual ( self . connection . writeQueue [ [number] ] [ [number] ] , ( message , ) ) [EOL] self . assertEqual ( self . connection . writeQueue [ [number] ] [ [number] ] , { [string] : self . whisper } ) [EOL] [EOL] def test_queueWrite_multi ( self ) : [EOL] message1 = IrcMessage ( None , None , [number] ) [EOL] message2 = IrcMessage ( None , None , [number] ) [EOL] self . connection . queue_write ( message1 ) [EOL] self . connection . queue_write ( message2 ) [EOL] self . assertEqual ( len ( self . connection . writeQueue ) , [number] ) [EOL] self . assertEqual ( self . connection . writeQueue [ [number] ] [ [number] ] , ( message1 , ) ) [EOL] self . assertEqual ( self . connection . writeQueue [ [number] ] [ [number] ] , ( message2 , ) ) [EOL] [EOL] def test_queueWrite_multi_prepend ( self ) : [EOL] message1 = IrcMessage ( None , None , [number] ) [EOL] message2 = IrcMessage ( None , None , [number] ) [EOL] self . connection . queue_write ( message1 ) [EOL] self . connection . queue_write ( message2 , prepend = True ) [EOL] self . assertEqual ( len ( self . connection . writeQueue ) , [number] ) [EOL] self . assertEqual ( self . connection . writeQueue [ [number] ] [ [number] ] , ( message2 , ) ) [EOL] self . assertEqual ( self . connection . writeQueue [ [number] ] [ [number] ] , ( message1 , ) ) [EOL] [EOL] def test_join_channel ( self ) : [EOL] self . connection . join_channel ( self . channel ) [EOL] self . assertIn ( self . channel . channel , self . connection . _channels ) [EOL] self . assertIs ( self . connection . _channels [ self . channel . channel ] , self . channel ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch . object ( connection . ConnectionHandler , [string] , autospec = True ) def test_part_channel ( self , mock_queue_write , mock_globals ) : [EOL] self . connection . part_channel ( self . channel ) [EOL] self . assertNotIn ( self . channel . channel , self . connection . _channels ) [EOL] self . assertFalse ( mock_queue_write . called ) [EOL] [EOL] @ patch ( [string] , new_callable = StringIO ) @ patch ( [string] , autospec = True ) @ patch . object ( connection . ConnectionHandler , [string] , autospec = True ) def test_part_channel_contains ( self , mock_queue_write , mock_on_part , mock_stdout ) : [EOL] self . connection . _channels [ self . channel . channel ] = self . channel [EOL] self . connection . part_channel ( self . channel ) [EOL] self . assertNotIn ( self . channel . channel , self . connection . _channels ) [EOL] self . assertTrue ( mock_queue_write . called ) [EOL] self . assertTrue ( mock_on_part . called ) [EOL] self . assertTrue ( any ( m for m in mock_queue_write . call_args_list if m [ [number] ] [ [number] ] . command == [string] ) ) [EOL] self . assertNotEqual ( mock_stdout . getvalue ( ) , [string] ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch . object ( MessagingQueue , [string] , autospec = True ) @ patch . object ( MessagingQueue , [string] , autospec = True ) @ patch . object ( connection . ConnectionHandler , [string] , autospec = True ) def test_flush_writes ( self , mock_queue_write , mock_popWhisper , mock_popChat , mock_globals ) : [EOL] mock_globals . groupChannel = self . channel [EOL] mock_popWhisper . side_effect = [ WhisperMessage ( [string] , [string] ) , WhisperMessage ( [string] , [string] ) , None ] [EOL] mock_popChat . side_effect = [ ChatMessage ( self . channel , [string] ) , ChatMessage ( self . channel , [string] ) , None ] [EOL] self . connection . flush_writes ( ) [EOL] self . assertEqual ( mock_queue_write . call_count , [number] ) [EOL] self . assertTrue ( len ( [ m for m in mock_queue_write . call_args_list if m [ [number] ] [ [number] ] . command == [string] ] ) , [number] ) [EOL] self . assertTrue ( len ( [ m for m in mock_queue_write . call_args_list if [string] in m [ [number] ] [EOL] and m [ [number] ] [ [string] ] is self . channel ] ) , [number] ) [EOL] self . assertTrue ( len ( [ m for m in mock_queue_write . call_args_list if [string] in m [ [number] ] [EOL] and m [ [number] ] [ [string] ] . nick in [ [string] , [string] ] ] ) , [number] ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) @ patch . object ( MessagingQueue , [string] , autospec = True ) @ patch . object ( MessagingQueue , [string] , autospec = True ) @ patch . object ( connection . ConnectionHandler , [string] , autospec = True ) def test_flush_writes_exception ( self , mock_queue_write , mock_popWhisper , mock_popChat , mock_log , mock_globals ) : [EOL] mock_globals . groupChannel = self . channel [EOL] mock_popWhisper . side_effect = [ WhisperMessage ( [string] , [string] ) , WhisperMessage ( [string] , [string] ) , None ] [EOL] mock_popChat . side_effect = [ ChatMessage ( self . channel , [string] ) , ChatMessage ( self . channel , [string] ) , None ] [EOL] self . connection . flush_writes ( ) [EOL] self . assertFalse ( mock_queue_write . called ) [EOL] self . assertTrue ( mock_log . call_count , [number] ) [EOL] [EOL] [EOL] class TestConnectionHandlerAsync ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . connection = connection . ConnectionHandler ( [string] , [string] , [number] ) [EOL] self . channel = Channel ( [string] , self . connection ) [EOL] self . whisper = WhisperMessage ( [string] , [string] ) [EOL] [EOL] self . mock_transport = Mock ( spec = asyncio . Transport ) [EOL] self . mock_reader = Mock ( asyncio . StreamReader ) [EOL] self . mock_writer = Mock ( asyncio . StreamWriter ) [EOL] self . mock_writer . transort = self . mock_transport [EOL] [EOL] @ patch ( [string] , new_callable = StringIO ) @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) @ patch ( [string] ) @ patch . object ( connection . ConnectionHandler , [string] ) async def test_connect ( self , mock_login , mock_connect , mock_connected , mock_now , mock_stdout ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] mock_now . return_value = now [EOL] mock_connect . return_value = self . mock_reader , self . mock_writer [EOL] await self . connection . connect ( ) [EOL] mock_connect . assert_any_call ( [string] , [number] ) [EOL] mock_connected . assert_called_with ( self . connection ) [EOL] self . assertNotEqual ( mock_stdout . getvalue ( ) , [string] ) [EOL] mock_login . assert_called_once_with ( self . mock_writer ) [EOL] self . assertEqual ( self . connection . lastSentPing , now ) [EOL] self . assertEqual ( self . connection . lastPing , now ) [EOL] self . assertEqual ( self . connection . lastConnectAttempt , now ) [EOL] [EOL] @ patch ( [string] , new_callable = StringIO ) @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) @ patch ( [string] ) @ patch . object ( connection . ConnectionHandler , [string] ) async def test_connect_throttle ( self , mock_login , mock_connect , mock_connected , mock_now , mock_stdout ) : [EOL] now = datetime ( [number] , [number] , [number] ) [EOL] mock_now . return_value = now [EOL] self . connection . lastConnectAttempt = now [EOL] await self . connection . connect ( ) [EOL] mock_connect . assert_not_called ( ) [EOL] mock_connected . assert_not_called ( ) [EOL] self . assertEqual ( mock_stdout . getvalue ( ) , [string] ) [EOL] self . assertFalse ( mock_login . called ) [EOL] self . assertEqual ( self . connection . lastSentPing , datetime . max ) [EOL] self . assertEqual ( self . connection . lastPing , datetime . max ) [EOL] self . assertEqual ( self . connection . lastConnectAttempt , now ) [EOL] [EOL] async def test_login_none ( self ) : [EOL] with self . assertRaises ( TypeError ) : [EOL] await self . connection . login ( None ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch . object ( connection . ConnectionHandler , [string] ) async def test_login ( self , mock_log_write , mock_config ) : [EOL] writer = Mock ( spec = asyncio . StreamWriter ) [EOL] mock_config . botnick = [string] [EOL] mock_config . password = [string] [EOL] await self . connection . login ( writer ) [EOL] self . assertGreaterEqual ( writer . write . call_count , [number] ) [EOL] self . assertEqual ( writer . write . call_count , mock_log_write . call_count ) [EOL] self . assertTrue ( writer . drain . called ) [EOL] [EOL] @ asynctest . fail_on ( unused_loop = False ) def test_disconnect ( self ) : [EOL] with self . assertRaises ( ConnectionError ) : [EOL] self . connection . disconnect ( ) [EOL] [EOL] async def test_write_none ( self ) : [EOL] with self . assertRaises ( TypeError ) : [EOL] await self . connection . write ( None ) [EOL] [EOL] async def test_write ( self ) : [EOL] with self . assertRaises ( ConnectionError ) : [EOL] await self . connection . write ( IrcMessage ( None , None , [string] ) ) [EOL] [EOL] @ patch . object ( connection . ConnectionHandler , [string] , autospec = True ) async def test_drain ( self , mock_write ) : [EOL] with self . assertRaises ( ConnectionError ) : [EOL] await self . connection . drain ( ) [EOL] self . assertFalse ( mock_write . called ) [EOL] [EOL] async def test_read ( self ) : [EOL] with self . assertRaises ( ConnectionError ) : [EOL] await self . connection . read ( ) [EOL] [EOL] [EOL] class TestConnectionConnected ( asynctest . TestCase ) : [EOL] async def setUp ( self ) : [EOL] self . connection = connection . ConnectionHandler ( [string] , [string] , [number] ) [EOL] self . channel = Channel ( [string] , self . connection ) [EOL] self . whisper = WhisperMessage ( [string] , [string] ) [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_config = patcher . start ( ) [EOL] self . mock_config . botnick = [string] [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_now = patcher . start ( ) [EOL] self . now = datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] self . mock_now . return_value = self . now [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_disconnected = patcher . start ( ) [EOL] [EOL] with patch ( [string] ) as mock_connection , patch ( [string] , new_callable = StringIO ) , patch . object ( connection . ConnectionHandler , [string] ) : [EOL] self . mock_transport = Mock ( spec = asyncio . Transport ) [EOL] self . mock_reader = Mock ( asyncio . StreamReader ) [EOL] self . mock_writer = Mock ( asyncio . StreamWriter ) [EOL] self . mock_writer . transport = self . mock_transport [EOL] mock_connection . return_value = self . mock_reader , self . mock_writer [EOL] await self . connection . connect ( ) [EOL] [EOL] async def test_connect ( self ) : [EOL] with self . assertRaises ( ConnectionError ) : [EOL] await self . connection . connect ( ) [EOL] [EOL] @ asynctest . fail_on ( unused_loop = False ) @ patch ( [string] , new_callable = StringIO ) def test_disconnect ( self , mock_close ) : [EOL] self . connection . disconnect ( ) [EOL] self . assertIsNone ( self . connection . _transport ) [EOL] self . assertIsNone ( self . connection . _reader ) [EOL] self . assertIsNone ( self . connection . _writer ) [EOL] self . assertTrue ( self . mock_transport . close . called ) [EOL] self . assertTrue ( self . mock_disconnected . called ) [EOL] self . assertEqual ( self . connection . lastConnectAttempt , self . now ) [EOL] self . assertEqual ( self . connection . lastPing , datetime . max ) [EOL] self . assertEqual ( self . connection . lastSentPing , datetime . max ) [EOL] [EOL] @ patch . object ( connection . ConnectionHandler , [string] ) async def test_drain_empty ( self , mock_write ) : [EOL] self . assertFalse ( self . connection . writeQueue ) [EOL] await self . connection . drain ( ) [EOL] self . assertIs ( mock_write . called , False ) [EOL] self . assertFalse ( self . connection . writeQueue ) [EOL] [EOL] @ patch . object ( connection . ConnectionHandler , [string] ) async def test_drain ( self , mock_write ) : [EOL] message = IrcMessage ( None , None , [number] ) [EOL] self . connection . queue_write ( message ) [EOL] await self . connection . drain ( ) [EOL] mock_write . assert_called_once_with ( message ) [EOL] self . assertFalse ( self . connection . writeQueue ) [EOL] [EOL] @ patch . object ( connection . ConnectionHandler , [string] ) async def test_drain_channel ( self , mock_write ) : [EOL] message = IrcMessage ( None , None , [number] ) [EOL] self . connection . queue_write ( message , channel = self . channel ) [EOL] await self . connection . drain ( ) [EOL] mock_write . assert_called_once_with ( message , channel = self . channel ) [EOL] self . assertIs ( mock_write . called , True ) [EOL] self . assertFalse ( self . connection . writeQueue ) [EOL] [EOL] @ patch . object ( connection . ConnectionHandler , [string] ) async def test_drain_whisper ( self , mock_write ) : [EOL] message = IrcMessage ( None , None , [number] ) [EOL] self . connection . queue_write ( message , whisper = self . whisper ) [EOL] await self . connection . drain ( ) [EOL] mock_write . assert_called_once_with ( message , whisper = self . whisper ) [EOL] self . assertIs ( mock_write . called , True ) [EOL] self . assertFalse ( self . connection . writeQueue ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch . object ( connection . ConnectionHandler , [string] , autospec = True ) @ patch . object ( connection . ConnectionHandler , [string] , autospec = True ) async def test_write ( self , mock_log_write , mock_on_write , mock_logException ) : [EOL] message = IrcMessage ( None , None , [number] ) [EOL] await self . connection . write ( message ) [EOL] mock_log_write . assert_called_once_with ( self . connection , message , channel = None , whisper = None , timestamp = self . now ) [EOL] self . mock_writer . write . assert_any_call ( [string] ) [EOL] self . mock_writer . write . assert_any_call ( [string] ) [EOL] self . mock_writer . drain . assert_called_with ( ) [EOL] mock_on_write . assert_called_once_with ( self . connection , message , self . now , channel = None ) [EOL] self . assertFalse ( mock_logException . called ) [EOL] self . assertFalse ( mock_logException . called ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch . object ( connection . ConnectionHandler , [string] , autospec = True ) async def test_write_channel_whisper ( self , mock_log_write , mock_logException ) : [EOL] message = IrcMessage ( None , None , [number] ) [EOL] await self . connection . write ( message , channel = self . channel , whisper = self . whisper ) [EOL] mock_log_write . assert_called_once_with ( self . connection , message , channel = self . channel , whisper = self . whisper , timestamp = self . now ) [EOL] self . mock_writer . write . assert_any_call ( [string] ) [EOL] self . mock_writer . write . assert_any_call ( [string] ) [EOL] self . mock_writer . drain . assert_called_once_with ( ) [EOL] self . assertFalse ( mock_logException . called ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch . object ( connection . ConnectionHandler , [string] , autospec = True ) async def test_write_ConnectionError ( self , mock_log_write , mock_logException ) : [EOL] self . mock_writer . drain . side_effect = ConnectionError [EOL] message = IrcMessage ( None , None , [number] ) [EOL] with self . assertRaises ( ConnectionError ) : [EOL] await self . connection . write ( message ) [EOL] self . assertFalse ( mock_log_write . called ) [EOL] self . mock_writer . write . assert_any_call ( [string] ) [EOL] self . mock_writer . write . assert_any_call ( [string] ) [EOL] self . mock_writer . drain . assert_called_once_with ( ) [EOL] mock_logException . assert_called_once_with ( ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) @ patch . object ( connection . ConnectionHandler , [string] , autospec = True ) @ patch ( [string] , autospec = True ) async def test_read ( self , mock_parseMessage , mock_log_read , mock_logException , mock_globals ) : [EOL] mock_globals . running = True [EOL] self . mock_reader . readuntil . return_value = [string] [EOL] await self . connection . read ( ) [EOL] self . mock_reader . readuntil . assert_called_once_with ( [string] ) [EOL] mock_parseMessage . assert_called_once_with ( self . connection , [string] , self . now ) [EOL] self . assertTrue ( mock_log_read . called ) [EOL] self . assertFalse ( mock_logException . called ) [EOL] self . assertTrue ( mock_globals . running ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) @ patch . object ( connection . ConnectionHandler , [string] , autospec = True ) @ patch ( [string] , autospec = True ) async def test_read_ConnectionError ( self , mock_parseMessage , mock_log_read , mock_logException , mock_globals ) : [EOL] mock_globals . running = True [EOL] self . mock_reader . readuntil . side_effect = ConnectionError [EOL] await self . connection . read ( ) [EOL] self . assertFalse ( mock_log_read . called ) [EOL] self . assertFalse ( mock_parseMessage . called ) [EOL] mock_logException . assert_called_once_with ( ) [EOL] self . assertTrue ( mock_globals . running ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) @ patch . object ( connection . ConnectionHandler , [string] , autospec = True ) @ patch ( [string] , autospec = True ) async def test_read_ConnectionReset ( self , mock_parseMessage , mock_log_read , mock_logException , mock_globals ) : [EOL] mock_globals . running = True [EOL] self . mock_reader . readuntil . return_value = [string] [EOL] mock_parseMessage . side_effect = ConnectionReset [EOL] with self . assertRaises ( ConnectionReset ) : [EOL] await self . connection . read ( ) [EOL] self . assertTrue ( mock_log_read . called ) [EOL] self . assertTrue ( mock_parseMessage . called ) [EOL] self . assertFalse ( mock_logException . called ) [EOL] self . assertTrue ( mock_globals . running ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) @ patch . object ( connection . ConnectionHandler , [string] , autospec = True ) @ patch ( [string] , autospec = True ) async def test_read_LoginUnsuccessful ( self , mock_parseMessage , mock_log_read , mock_logException , mock_globals ) : [EOL] mock_globals . running = True [EOL] self . mock_reader . readuntil . return_value = [string] [EOL] mock_parseMessage . side_effect = LoginUnsuccessful [EOL] with self . assertRaises ( LoginUnsuccessful ) : [EOL] await self . connection . read ( ) [EOL] self . assertTrue ( mock_log_read . called ) [EOL] self . assertTrue ( mock_parseMessage . called ) [EOL] self . assertFalse ( mock_logException . called ) [EOL] self . assertFalse ( mock_globals . running ) [EOL]	
import unittest [EOL] [EOL] from datetime import datetime [EOL] from io import StringIO [EOL] from asynctest . mock import Mock , patch [EOL] [EOL] from bot import utils [EOL] from bot . coroutine import connection [EOL] from bot . data import Channel , MessagingQueue [EOL] from tests . unittest . mock_class import StrContains [EOL] [EOL] [EOL] class TestUtils ( unittest . TestCase ) : [EOL] def test_now ( self ) : [EOL] self . assertIsInstance ( utils . now ( ) , datetime ) [EOL] [EOL] @ patch ( [string] , autospec = True ) def test_joinChannel_none ( self , mock_globals ) : [EOL] mock_globals . channels = { } [EOL] mock_globals . cluster = Mock ( spec = connection . ConnectionHandler ) [EOL] self . assertRaises ( TypeError , utils . joinChannel , None ) [EOL] [EOL] @ patch ( [string] , autospec = True ) def test_joinChannel_existing_channel ( self , mock_globals ) : [EOL] mock_globals . cluster = Mock ( spec = connection . ConnectionHandler ) [EOL] mock_globals . channels = { [string] : Channel ( [string] , mock_globals . cluster , [number] ) } [EOL] self . assertIs ( utils . joinChannel ( [string] , [number] ) , False ) [EOL] self . assertIn ( [string] , mock_globals . channels ) [EOL] self . assertEqual ( mock_globals . channels [ [string] ] . joinPriority , [number] ) [EOL] [EOL] @ patch ( [string] , autospec = True ) def test_joinChannel ( self , mock_globals ) : [EOL] mock_globals . channels = { } [EOL] mock_globals . cluster = Mock ( spec = connection . ConnectionHandler ) [EOL] self . assertIs ( utils . joinChannel ( [string] , [number] ) , True ) [EOL] self . assertIn ( [string] , mock_globals . channels ) [EOL] self . assertEqual ( mock_globals . channels [ [string] ] . joinPriority , [number] ) [EOL] mock_globals . cluster . join_channel . assert_called_once_with ( mock_globals . channels [ [string] ] ) [EOL] [EOL] @ patch ( [string] , autospec = True ) def test_partChannel_none ( self , mock_globals ) : [EOL] mock_globals . channels = { } [EOL] self . assertRaises ( TypeError , utils . partChannel , None ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch . object ( Channel , [string] , autospec = True ) def test_partChannel_not_existing ( self , mock_part , mock_globals ) : [EOL] mock_globals . channels = { } [EOL] utils . partChannel ( [string] ) [EOL] self . assertFalse ( mock_part . called ) [EOL] [EOL] @ patch ( [string] , autospec = True ) def test_partChannel ( self , mock_globals ) : [EOL] channel = Mock ( spec = Channel ) [EOL] mock_globals . channels = { [string] : channel } [EOL] utils . partChannel ( [string] ) [EOL] channel . part . assert_called_once_with ( ) [EOL] [EOL] @ patch ( [string] , autospec = True ) def test_whisper ( self , mock_globals ) : [EOL] connection_ = Mock ( spec = connection . ConnectionHandler ) [EOL] connection_ . messaging = Mock ( spec = MessagingQueue ) [EOL] mock_globals . cluster = connection_ [EOL] utils . whisper ( [string] , [string] ) [EOL] connection_ . messaging . sendWhisper . assert_called_once_with ( [string] , [string] ) [EOL] [EOL] @ patch ( [string] , autospec = True ) def test_clearAllChat ( self , mock_globals ) : [EOL] connection_ = Mock ( spec = connection . ConnectionHandler ) [EOL] connection_ . messaging = Mock ( spec = MessagingQueue ) [EOL] mock_globals . cluster = connection_ [EOL] utils . clearAllChat ( ) [EOL] connection_ . messaging . clearAllChat . assert_called_once_with ( ) [EOL] [EOL] @ patch ( [string] , new_callable = StringIO ) @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) def test_print ( self , mock_now , mock_config , mock_stdout ) : [EOL] mock_now . return_value = datetime ( [number] , [number] , [number] ) [EOL] mock_config . development = False [EOL] utils . print ( [string] ) [EOL] self . assertEqual ( mock_stdout . getvalue ( ) , [string] ) [EOL] [EOL] @ patch ( [string] , new_callable = StringIO ) @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) def test_print_development ( self , mock_now , mock_config , mock_stdout ) : [EOL] mock_now . return_value = datetime ( [number] , [number] , [number] ) [EOL] mock_config . development = True [EOL] utils . print ( [string] ) [EOL] self . assertEqual ( mock_stdout . getvalue ( ) , [string] ) [EOL] [EOL] @ patch ( [string] , new_callable = StringIO ) @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) def test_print_override ( self , mock_now , mock_config , mock_stdout ) : [EOL] mock_now . return_value = datetime ( [number] , [number] , [number] ) [EOL] mock_config . development = False [EOL] utils . print ( [string] , override = True ) [EOL] self . assertEqual ( mock_stdout . getvalue ( ) , [string] ) [EOL] [EOL] @ patch ( [string] , new_callable = StringIO ) @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) def test_print_override_dev ( self , mock_now , mock_config , mock_stdout ) : [EOL] mock_now . return_value = datetime ( [number] , [number] , [number] ) [EOL] mock_config . development = True [EOL] utils . print ( [string] , override = False ) [EOL] self . assertEqual ( mock_stdout . getvalue ( ) , [string] ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] , new_callable = StringIO ) @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) def test_print_file ( self , mock_now , mock_config , mock_stdout , mock_logging ) : [EOL] mock_now . return_value = datetime ( [number] , [number] , [number] ) [EOL] mock_config . development = False [EOL] utils . print ( [string] , file = True ) [EOL] self . assertEqual ( mock_stdout . getvalue ( ) , [string] ) [EOL] mock_logging . log . assert_called_once_with ( [string] , [string] ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] , new_callable = StringIO ) @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) def test_print_file_multiple ( self , mock_now , mock_config , mock_stdout , mock_logging ) : [EOL] mock_now . return_value = datetime ( [number] , [number] , [number] ) [EOL] mock_config . development = False [EOL] utils . print ( [string] , [string] , file = True ) [EOL] self . assertEqual ( mock_stdout . getvalue ( ) , [string] ) [EOL] mock_logging . log . assert_called_once_with ( [string] , [string] ) [EOL] [EOL] def test_property_bool_None ( self ) : [EOL] self . assertIsNone ( utils . property_bool ( None ) ) [EOL] [EOL] def test_property_bool_True ( self ) : [EOL] pValue = utils . property_bool ( True ) [EOL] self . assertIsNotNone ( pValue ) [EOL] self . assertTrue ( pValue ) [EOL] [EOL] def test_property_bool_False ( self ) : [EOL] pValue = utils . property_bool ( False ) [EOL] self . assertIsNotNone ( pValue ) [EOL] self . assertFalse ( pValue ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) def test_logIrcMessage_config ( self , mock_now , mock_config , mock_logging ) : [EOL] mock_now . return_value = datetime ( [number] , [number] , [number] ) [EOL] mock_config . ircLogFolder = [string] [EOL] utils . logIrcMessage ( [string] , [string] ) [EOL] mock_logging . log . assert_called_once_with ( StrContains ( [string] ) , StrContains ( [string] ) ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) def test_logIrcMessage_config_None ( self , mock_now , mock_config , mock_logging ) : [EOL] mock_now . return_value = datetime ( [number] , [number] , [number] ) [EOL] mock_config . ircLogFolder = None [EOL] utils . logIrcMessage ( [string] , [string] ) [EOL] self . assertFalse ( mock_logging . log . called ) [EOL] [EOL] @ patch ( [string] , new_callable = StringIO ) @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) def test_logException ( self , mock_now , mock_config , mock_logging , mock_stderr ) : [EOL] mock_now . return_value = datetime ( [number] , [number] , [number] ) [EOL] mock_config . development = True [EOL] mock_config . exceptionLog = [string] [EOL] try : [EOL] raise Exception ( ) [EOL] except Exception : [EOL] utils . logException ( ) [EOL] mock_logging . log . assert_called_once_with ( StrContains ( [string] ) , StrContains ( [string] , [string] , [string] , __file__ , [string] , [string] ) ) [EOL] self . assertEqual ( mock_stderr . getvalue ( ) , StrContains ( [string] , [string] , [string] , __file__ , [string] , [string] ) ) [EOL] [EOL] @ patch ( [string] , new_callable = StringIO ) @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) def test_logException_no_development ( self , mock_now , mock_config , mock_logging , mock_stderr ) : [EOL] mock_now . return_value = datetime ( [number] , [number] , [number] ) [EOL] mock_config . development = False [EOL] mock_config . exceptionLog = [string] [EOL] try : [EOL] raise Exception ( ) [EOL] except Exception : [EOL] utils . logException ( ) [EOL] mock_logging . log . assert_called_once_with ( StrContains ( [string] ) , StrContains ( [string] , [string] , [string] , __file__ , [string] , [string] ) ) [EOL] self . assertEqual ( mock_stderr . getvalue ( ) , [string] ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) def test_logException_config_None ( self , mock_now , mock_config , mock_logging ) : [EOL] mock_now . return_value = datetime ( [number] , [number] , [number] ) [EOL] mock_config . exceptionLog = None [EOL] try : [EOL] raise Exception ( ) [EOL] except Exception : [EOL] utils . logException ( ) [EOL] self . assertFalse ( mock_logging . log . called ) [EOL]	
import asynctest [EOL] [EOL] import bot [comment] [EOL] [EOL] from datetime import datetime [EOL] [EOL] from asynctest . mock import MagicMock , Mock , patch [EOL] [EOL] import tests . unittest . asynctest_fix [comment] [EOL] from bot . data import Channel [EOL] from bot . twitchmessage import IrcMessageTags [EOL] from lib . cache import CacheStore [EOL] from lib . data import ChatCommandArgs [EOL] from lib . data . message import Message [EOL] from lib . data . permissions import ChatPermissionSet [EOL] from lib . database import DatabaseMain [EOL] [EOL] [EOL] class TestChannel ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . now = datetime ( [number] , [number] , [number] ) [EOL] self . tags = IrcMessageTags ( ) [EOL] self . channel = Mock ( spec = Channel ) [EOL] self . channel . channel = [string] [EOL] self . channel . sessionData = { } [EOL] self . data = Mock ( spec = CacheStore ) [EOL] self . data . hasFeature . side_effect = lambda c , f : f in self . features [EOL] self . database = MagicMock ( spec = DatabaseMain ) [EOL] self . database . __aenter__ . return_value = self . database [EOL] self . database . __aexit__ . return_value = False [EOL] self . features = [ ] [EOL] self . database . hasFeature . side_effect = lambda c , f : f in self . features [EOL] self . permissionSet = { [string] : False , [string] : False , [string] : False , [string] : False , [string] : False , [string] : False , [string] : False , [string] : False , [string] : False , [string] : False , [string] : False , [string] : True , } [EOL] self . permissions = MagicMock ( spec = ChatPermissionSet ) [EOL] self . permissions . inOwnerChannel = False [EOL] self . permissions . __getitem__ . side_effect = lambda k : self . permissionSet [ k ] [EOL] self . args = ChatCommandArgs ( self . data , self . channel , self . tags , [string] , Message ( [string] ) , self . permissions , self . now ) [EOL] [EOL] patcher = patch . object ( DatabaseMain , [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_database = patcher . start ( ) [EOL] self . mock_database . return_value = self . database [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from datetime import datetime [EOL] [EOL] import asynctest [EOL] from asynctest . mock import MagicMock , Mock , patch [EOL] [EOL] import tests . unittest . asynctest_fix [comment] [EOL] from lib . cache import CacheStore [EOL] from lib . data import ManageBotArgs [EOL] from lib . data . message import Message [EOL] from lib . data . permissions import ChatPermissionSet [EOL] from lib . database import DatabaseMain [EOL] [EOL] [EOL] def send ( messages ) : [EOL] pass [EOL] [EOL] [EOL] class TestManageBot ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . now = datetime ( [number] , [number] , [number] ) [EOL] self . send = Mock ( spec = send ) [EOL] self . data = Mock ( spec = CacheStore ) [EOL] self . database = MagicMock ( spec = DatabaseMain ) [EOL] self . database . __aenter__ . return_value = self . database [EOL] self . database . __aexit__ . return_value = False [EOL] self . permissionSet = { [string] : False , [string] : False , [string] : False , [string] : False , [string] : False , [string] : False , [string] : False , [string] : False , [string] : False , [string] : False , [string] : False , [string] : True , } [EOL] self . permissions = MagicMock ( spec = ChatPermissionSet ) [EOL] self . permissions . __getitem__ . side_effect = lambda k : self . permissionSet [ k ] [EOL] self . args = ManageBotArgs ( self . data , self . permissions , self . send , [string] , Message ( [string] ) ) [EOL] [EOL] patcher = patch . object ( DatabaseMain , [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_database = patcher . start ( ) [EOL] self . mock_database . return_value = self . database [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import math [EOL] import unittest [EOL] from bot . data import Channel , MessagingQueue [EOL] from bot . coroutine . connection import ConnectionHandler [EOL] from collections . abc import MutableMapping , MutableSet [EOL] from datetime import datetime [EOL] from unittest . mock import Mock [EOL] [EOL] [EOL] class TestChannel ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . connection = Mock ( spec = ConnectionHandler ) [EOL] self . connection . messaging = Mock ( spec = MessagingQueue ) [EOL] self . channel = Channel ( [string] , self . connection ) [EOL] [EOL] def test_constructor_name_none ( self ) : [EOL] self . assertRaises ( TypeError , Channel , None , self . connection ) [EOL] [EOL] def test_constructor_name_bytes ( self ) : [EOL] self . assertRaises ( TypeError , Channel , [string] , self . connection ) [EOL] [EOL] def test_constructor_socket_none ( self ) : [EOL] self . assertRaises ( TypeError , Channel , [string] , None ) [EOL] [EOL] def test_constructor_name_empty ( self ) : [EOL] self . assertRaises ( ValueError , Channel , [string] , self . connection ) [EOL] [EOL] def test_channel ( self ) : [EOL] self . assertEqual ( self . channel . channel , [string] ) [EOL] [EOL] def test_ircChannel ( self ) : [EOL] self . assertEqual ( self . channel . ircChannel , [string] ) [EOL] [EOL] def test_socket ( self ) : [EOL] self . assertIs ( self . channel . connection , self . connection ) [EOL] [EOL] def test_isMod ( self ) : [EOL] self . assertIs ( self . channel . isMod , False ) [EOL] [EOL] def test_isMod_true ( self ) : [EOL] self . channel . isMod = True [EOL] self . assertIs ( self . channel . isMod , True ) [EOL] [EOL] def test_isMod_int ( self ) : [EOL] self . channel . isMod = [number] [EOL] self . assertIs ( self . channel . isMod , True ) [EOL] [EOL] def test_isSubscriber ( self ) : [EOL] self . assertIs ( self . channel . isSubscriber , False ) [EOL] [EOL] def test_isSubscriber_true ( self ) : [EOL] self . channel . isSubscriber = True [EOL] self . assertIs ( self . channel . isSubscriber , True ) [EOL] [EOL] def test_isSubscriber_int ( self ) : [EOL] self . channel . isSubscriber = [number] [EOL] self . assertIs ( self . channel . isSubscriber , True ) [EOL] [EOL] def test_ircUsers ( self ) : [EOL] self . assertIsInstance ( self . channel . ircUsers , MutableSet ) [EOL] self . assertFalse ( self . channel . ircUsers ) [EOL] self . channel . ircUsers . add ( [string] ) [EOL] self . assertIn ( [string] , self . channel . ircUsers ) [EOL] [EOL] def test_ircUsers_set ( self ) : [EOL] with self . assertRaises ( AttributeError ) : [EOL] self . channel . ircUsers = set ( ) [EOL] [EOL] def test_ircOps ( self ) : [EOL] self . assertIsInstance ( self . channel . ircOps , MutableSet ) [EOL] self . assertFalse ( self . channel . ircOps ) [EOL] self . channel . ircOps . add ( [string] ) [EOL] self . assertIn ( [string] , self . channel . ircOps ) [EOL] [EOL] def test_ircOps_set ( self ) : [EOL] with self . assertRaises ( AttributeError ) : [EOL] self . channel . ircOps = set ( ) [EOL] [EOL] def test_joinPriority ( self ) : [EOL] self . assertEqual ( self . channel . joinPriority , math . inf ) [EOL] [EOL] def test_joinPriority_set ( self ) : [EOL] self . channel . joinPriority = [number] [EOL] self . assertEqual ( self . channel . joinPriority , [number] ) [EOL] [EOL] def test_joinPriority_set_str ( self ) : [EOL] self . channel . joinPriority = [string] [EOL] self . assertEqual ( self . channel . joinPriority , - [number] ) [EOL] [EOL] def test_joinPriority_set_list ( self ) : [EOL] with self . assertRaises ( TypeError ) : [EOL] self . channel . joinPriority = [ ] [EOL] [EOL] def test_sessionData ( self ) : [EOL] self . assertIsInstance ( self . channel . sessionData , MutableMapping ) [EOL] self . assertFalse ( self . channel . sessionData ) [EOL] self . channel . sessionData [ [string] ] = [string] [EOL] self . assertIn ( [string] , self . channel . sessionData ) [EOL] self . assertEqual ( self . channel . sessionData [ [string] ] , [string] ) [EOL] [EOL] def test_sessionData_set ( self ) : [EOL] with self . assertRaises ( AttributeError ) : [EOL] self . channel . sessionData = { } [EOL] [EOL] def test_streamingSince ( self ) : [EOL] self . assertIsNone ( self . channel . streamingSince ) [EOL] [EOL] def test_streamingSince_set_none ( self ) : [EOL] self . channel . streamingSince = None [EOL] self . assertIsNone ( self . channel . streamingSince ) [EOL] [EOL] def test_streamingSince_set_datetime ( self ) : [EOL] timestamp = datetime ( [number] , [number] , [number] ) [EOL] self . channel . streamingSince = timestamp [EOL] self . assertEqual ( self . channel . streamingSince , timestamp ) [EOL] [EOL] def test_streamingSince_set_list ( self ) : [EOL] with self . assertRaises ( TypeError ) : [EOL] self . channel . streamingSince = [ ] [EOL] [EOL] def test_isStreaming ( self ) : [EOL] self . assertIs ( self . channel . isStreaming , False ) [EOL] [EOL] def test_isStreaming_true ( self ) : [EOL] timestamp = datetime ( [number] , [number] , [number] ) [EOL] self . channel . streamingSince = timestamp [EOL] self . assertIs ( self . channel . isStreaming , True ) [EOL] [EOL] def test_twitchCache ( self ) : [EOL] self . assertEqual ( self . channel . twitchCache , datetime . min ) [EOL] [EOL] def test_twitchCache_set_none ( self ) : [EOL] with self . assertRaises ( TypeError ) : [EOL] self . channel . twitchCache = None [EOL] [EOL] def test_twitchCache_set ( self ) : [EOL] timestamp = datetime ( [number] , [number] , [number] ) [EOL] self . channel . twitchCache = timestamp [EOL] self . assertEqual ( self . channel . twitchCache , timestamp ) [EOL] [EOL] def test_twitchStatus ( self ) : [EOL] self . assertEqual ( self . channel . twitchStatus , [string] ) [EOL] [EOL] def test_twitchStatus_set_none ( self ) : [EOL] self . channel . twitchStatus = None [EOL] self . assertIsNone ( self . channel . twitchStatus ) [EOL] [EOL] def test_twitchStatus_set_bytes ( self ) : [EOL] with self . assertRaises ( TypeError ) : [EOL] self . channel . twitchStatus = [string] [EOL] [EOL] def test_twitchStatus_set ( self ) : [EOL] self . channel . twitchStatus = [string] [EOL] self . assertEqual ( self . channel . twitchStatus , [string] ) [EOL] [EOL] def test_twitchGame ( self ) : [EOL] self . assertEqual ( self . channel . twitchGame , [string] ) [EOL] [EOL] def test_twitchGame_set_none ( self ) : [EOL] self . channel . twitchGame = None [EOL] self . assertIsNone ( self . channel . twitchGame ) [EOL] [EOL] def test_twitchGame_set_bytes ( self ) : [EOL] with self . assertRaises ( TypeError ) : [EOL] self . channel . twitchGame = [string] [EOL] [EOL] def test_twitchGame_set ( self ) : [EOL] self . channel . twitchGame = [string] [EOL] self . assertEqual ( self . channel . twitchGame , [string] ) [EOL] [EOL] def test_serverCheck ( self ) : [EOL] self . assertEqual ( self . channel . serverCheck , datetime . min ) [EOL] [EOL] def test_serverCheck_set_none ( self ) : [EOL] with self . assertRaises ( TypeError ) : [EOL] self . channel . serverCheck = None [EOL] [EOL] def test_serverCheck_set ( self ) : [EOL] timestamp = datetime ( [number] , [number] , [number] ) [EOL] self . channel . serverCheck = timestamp [EOL] self . assertEqual ( self . channel . serverCheck , timestamp ) [EOL] [EOL] def test_onJoin ( self ) : [EOL] self . channel . ircUsers . add ( [string] ) [EOL] self . channel . ircOps . add ( [string] ) [EOL] self . channel . onJoin ( ) [EOL] self . assertFalse ( self . channel . ircUsers ) [EOL] self . assertFalse ( self . channel . ircOps ) [EOL] [EOL] def test_part ( self ) : [EOL] self . channel . part ( ) [EOL] self . connection . part_channel . assert_called_once_with ( self . channel ) [EOL] self . connection . messaging . clearChat . assert_called_once_with ( self . channel ) [EOL] [EOL] def test_clear ( self ) : [EOL] self . channel . clear ( ) [EOL] self . connection . messaging . clearChat . assert_called_once_with ( self . channel ) [EOL] [EOL] def test_send ( self ) : [EOL] self . channel . send ( [string] ) [EOL] self . connection . messaging . sendChat . assert_called_once_with ( self . channel , [string] , [number] ) [EOL] [EOL] def test_send_iterable_priority ( self ) : [EOL] messages = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] self . channel . send ( messages , [number] ) [EOL] self . connection . messaging . sendChat . assert_called_once_with ( self . channel , messages , [number] ) [EOL]	
import asynctest [EOL] [EOL] import bot [comment] [EOL] [EOL] from asynctest . mock import MagicMock , Mock , patch [EOL] [EOL] import tests . unittest . asynctest_fix [comment] [EOL] from bot . data import Channel [EOL] from bot . twitchmessage import IrcMessageTags [EOL] from datetime import datetime [EOL] from lib . cache import CacheStore [EOL] from lib . data import CustomFieldArgs , CustomProcessArgs [EOL] from lib . data . message import Message [EOL] from lib . data . permissions import ChatPermissionSet [EOL] from lib . database import DatabaseMain [EOL] [EOL] [EOL] class TestCustomField ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . now = datetime ( [number] , [number] , [number] ) [EOL] self . permissions = MagicMock ( spec = ChatPermissionSet ) [EOL] self . args = CustomFieldArgs ( [string] , None , None , None , None , Message ( [string] ) , [string] , [string] , self . permissions , self . now ) [EOL] [EOL] [EOL] class TestCustomProcess ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . now = datetime ( [number] , [number] , [number] ) [EOL] self . tags = IrcMessageTags ( ) [EOL] self . channel = Mock ( spec = Channel ) [EOL] self . channel . channel = [string] [EOL] self . data = Mock ( spec = CacheStore ) [EOL] self . database = MagicMock ( spec = DatabaseMain ) [EOL] self . database . __aenter__ . return_value = self . database [EOL] self . database . __aexit__ . return_value = False [EOL] self . permissionSet = { [string] : False , [string] : False , [string] : False , [string] : False , [string] : False , [string] : False , [string] : False , [string] : False , [string] : False , } [EOL] self . permissions = MagicMock ( spec = ChatPermissionSet ) [EOL] self . permissions . inOwnerChannel = False [EOL] self . permissions . __getitem__ . side_effect = lambda k : self . permissionSet [ k ] [EOL] self . messages = [ [string] ] [EOL] self . args = CustomProcessArgs ( self . data , self . channel , self . tags , [string] , self . permissions , [string] , [string] , [string] , self . messages ) [EOL] [EOL] patcher = patch . object ( DatabaseMain , [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_database = patcher . start ( ) [EOL] self . mock_database . return_value = self . database [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import _bootlocale [comment] [EOL] import encodings [EOL] import idna [comment] [EOL] [EOL] [comment] [EOL] encodings . search_function ( [string] ) [EOL] encodings . search_function ( [string] ) [EOL] encodings . search_function ( [string] ) [EOL] encodings . search_function ( [string] ) [EOL] [EOL] [string] . encode ( [string] ) . decode ( [string] ) [EOL] idna . encode ( [string] , uts46 = True ) . decode ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import itertools [EOL] [EOL] from datetime import datetime , timedelta [EOL] [EOL] [EOL] sentinal = object ( ) [EOL] defaultEpsilon = timedelta ( seconds = [number] ) [EOL] [EOL] [EOL] class TypeMatch : [EOL] def __init__ ( self , type ) : [EOL] self . type = type [EOL] [EOL] def __eq__ ( self , other ) : [EOL] return isinstance ( other , self . type ) [EOL] [EOL] def __ne__ ( self , other ) : [EOL] return not self == other [EOL] [EOL] def __repr__ ( self ) : [EOL] return [string] + repr ( self . type ) + [string] [EOL] [EOL] [EOL] class Contains ( TypeMatch ) : [EOL] def __init__ ( self , type , * matches ) : [EOL] super ( ) . __init__ ( type ) [EOL] self . matches = matches [EOL] [EOL] def __eq__ ( self , other ) : [EOL] if not super ( ) . __eq__ ( other ) : [EOL] return False [EOL] for m in self . matches : [EOL] if m not in other : [EOL] return False [EOL] return True [EOL] [EOL] def __ne__ ( self , other ) : [EOL] return not self == other [EOL] [EOL] def __repr__ ( self ) : [EOL] return ( [string] + repr ( self . type ) + [string] + [string] . join ( repr ( m ) for m in self . matches ) + [string] ) [EOL] [EOL] [EOL] class StrContains ( Contains ) : [EOL] def __init__ ( self , * matches ) : [EOL] super ( ) . __init__ ( str , * matches ) [EOL] [EOL] def __repr__ ( self ) : [EOL] return [string] + [string] . join ( repr ( m ) for m in self . matches ) + [string] [EOL] [EOL] [EOL] class IterableMatch : [EOL] def __init__ ( self , * matches ) : [EOL] self . matches = matches [EOL] [EOL] def __eq__ ( self , other ) : [EOL] for m , o in itertools . zip_longest ( self . matches , other ) : [EOL] if m != o : [EOL] return False [EOL] return True [EOL] [EOL] def __ne__ ( self , other ) : [EOL] return not self == other [EOL] [EOL] def __repr__ ( self ) : [EOL] return ( [string] + [string] . join ( repr ( m ) for m in self . matches ) + [string] ) [EOL] [EOL] [EOL] class PartialMatch : [EOL] def __init__ ( self , func , * args , ** keywords ) : [EOL] self . func = func [EOL] self . args = args [EOL] self . keywords = keywords [EOL] [EOL] def __eq__ ( self , other ) : [EOL] if hasattr ( other , [string] ) : [EOL] return ( self . func is other . func and self . args == other . args [EOL] and self . keywords == other . keywords ) [EOL] return False [EOL] [EOL] def __ne__ ( self , other ) : [EOL] return not self == other [EOL] [EOL] def __repr__ ( self ) : [EOL] return ( [string] + repr ( self . func ) + [string] + [string] . join ( repr ( m ) for m in self . args ) + ( [string] if self . keywords else [string] ) + [string] . join ( k + [string] + repr ( self . keywords [ k ] ) for k in self . keywords ) + [string] ) [EOL] [EOL] [EOL] class AsyncIterator : [EOL] def __init__ ( self , seq ) : [EOL] self . iter = iter ( seq ) [EOL] [EOL] def __aiter__ ( self ) : [EOL] return self [EOL] [EOL] async def __anext__ ( self ) : [EOL] try : [EOL] return next ( self . iter ) [EOL] except StopIteration : [EOL] raise StopAsyncIteration [EOL] [EOL] [EOL] class DateTimeNear : [EOL] def __init__ ( self , dt , epsilon = defaultEpsilon ) : [EOL] self . dt = dt [EOL] self . epsilon = epsilon [EOL] [EOL] def __eq__ ( self , other ) : [EOL] if not isinstance ( other , datetime ) : [EOL] return False [EOL] return - self . epsilon <= self . dt - other <= self . epsilon [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import unittest [EOL] from bot . twitchmessage import IrcMessagePrefix [EOL] from bot . twitchmessage . _ircprefix import ParsedPrefix [EOL] [EOL] [EOL] class TestsIrcPrefix ( unittest . TestCase ) : [EOL] def test_servername_int ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessagePrefix , servername = [number] ) [EOL] self . assertRaises ( TypeError , IrcMessagePrefix , [number] ) [EOL] [EOL] def test_nick_int ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessagePrefix , nick = [number] ) [EOL] self . assertRaises ( TypeError , IrcMessagePrefix , None , [number] ) [EOL] [EOL] def test_user_int ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessagePrefix , user = [number] ) [EOL] self . assertRaises ( TypeError , IrcMessagePrefix , None , None , [number] ) [EOL] [EOL] def test_host_int ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessagePrefix , host = [number] ) [EOL] self . assertRaises ( TypeError , IrcMessagePrefix , None , None , None , [number] ) [EOL] [EOL] def test_empty_servername ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix , servername = [string] ) [EOL] [EOL] def test_empty_servername_empty_nick ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix , servername = [string] , nick = [string] ) [EOL] [EOL] def test_servername_nick ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix , servername = [string] , nick = [string] ) [EOL] [EOL] def test_nick_empty_user ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix , nick = [string] , user = [string] ) [EOL] [EOL] def test_nick_user_empty_host ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix , nick = [string] , user = [string] , host = [string] ) [EOL] [EOL] def test_servername_space ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix , servername = [string] ) [EOL] [EOL] def test_servername_null_char ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix , servername = [string] ) [EOL] [EOL] def test_servername_nl ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix , servername = [string] ) [EOL] [EOL] def test_servername_cr ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix , servername = [string] ) [EOL] [EOL] def test_nick_space ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix , nick = [string] ) [EOL] [EOL] def test_nick_null_byte ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix , nick = [string] ) [EOL] [EOL] def test_nick_nl ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix , nick = [string] ) [EOL] [EOL] def test_nick_cr ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix , nick = [string] ) [EOL] [EOL] def test_nick_user_space ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix , nick = [string] , user = [string] ) [EOL] [EOL] def test_nick_user_null_byte ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix , nick = [string] , user = [string] ) [EOL] [EOL] def test_nick_user_nl ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix , nick = [string] , user = [string] ) [EOL] [EOL] def test_nick_user_cr ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix , nick = [string] , user = [string] ) [EOL] [EOL] def test_nick_user_host_space ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix , nick = [string] , user = [string] , host = [string] ) [EOL] [EOL] def test_nick_user_host_null_char ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix , nick = [string] , user = [string] , host = [string] ) [EOL] [EOL] def test_nick_user_host_nl ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix , nick = [string] , user = [string] , host = [string] ) [EOL] [EOL] def test_nick_user_host_cr ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix , nick = [string] , user = [string] , host = [string] ) [EOL] self . assertRaises ( ValueError , IrcMessagePrefix , user = [string] , host = [string] ) [EOL] self . assertRaises ( ValueError , IrcMessagePrefix , user = [string] ) [EOL] self . assertRaises ( ValueError , IrcMessagePrefix , host = [string] ) [EOL] [EOL] def test_servername ( self ) : [EOL] prefix = IrcMessagePrefix ( servername = [string] ) [EOL] self . assertEqual ( prefix . servername , [string] ) [EOL] self . assertIs ( prefix . nick , None ) [EOL] self . assertIs ( prefix . user , None ) [EOL] self . assertIs ( prefix . host , None ) [EOL] self . assertEqual ( prefix , IrcMessagePrefix ( [string] ) ) [EOL] [EOL] def test_set_servername ( self ) : [EOL] prefix = IrcMessagePrefix ( servername = [string] ) [EOL] with self . assertRaises ( AttributeError ) : [EOL] prefix . servername = [string] [EOL] [EOL] def test_servername_ip_address ( self ) : [EOL] prefix = IrcMessagePrefix ( servername = [string] ) [EOL] self . assertEqual ( prefix . servername , [string] ) [EOL] self . assertIs ( prefix . nick , None ) [EOL] self . assertIs ( prefix . user , None ) [EOL] self . assertIs ( prefix . host , None ) [EOL] self . assertEqual ( prefix , IrcMessagePrefix ( [string] ) ) [EOL] [EOL] def test_nick ( self ) : [EOL] prefix = IrcMessagePrefix ( nick = [string] ) [EOL] self . assertIs ( prefix . servername , None ) [EOL] self . assertEqual ( prefix . nick , [string] ) [EOL] self . assertIs ( prefix . user , None ) [EOL] self . assertIs ( prefix . host , None ) [EOL] self . assertEqual ( prefix , IrcMessagePrefix ( None , [string] ) ) [EOL] [EOL] def test_set_nick ( self ) : [EOL] prefix = IrcMessagePrefix ( nick = [string] ) [EOL] with self . assertRaises ( AttributeError ) : [EOL] prefix . nick = None [EOL] [EOL] def test_set_user ( self ) : [EOL] prefix = IrcMessagePrefix ( nick = [string] ) [EOL] with self . assertRaises ( AttributeError ) : [EOL] prefix . user = [string] [EOL] [EOL] def test_set_host ( self ) : [EOL] prefix = IrcMessagePrefix ( nick = [string] ) [EOL] with self . assertRaises ( AttributeError ) : [EOL] prefix . host = [string] [EOL] [EOL] def test_nick_user ( self ) : [EOL] prefix = IrcMessagePrefix ( nick = [string] , user = [string] ) [EOL] self . assertIs ( prefix . servername , None ) [EOL] self . assertEqual ( prefix . nick , [string] ) [EOL] self . assertEqual ( prefix . user , [string] ) [EOL] self . assertIs ( prefix . host , None ) [EOL] self . assertEqual ( prefix , IrcMessagePrefix ( None , [string] , [string] ) ) [EOL] [EOL] def test_nick_host ( self ) : [EOL] prefix = IrcMessagePrefix ( nick = [string] , host = [string] ) [EOL] self . assertIs ( prefix . servername , None ) [EOL] self . assertEqual ( prefix . nick , [string] ) [EOL] self . assertIsNone ( prefix . user ) [EOL] self . assertEqual ( prefix . host , [string] ) [EOL] self . assertEqual ( prefix , IrcMessagePrefix ( None , [string] , None , [string] ) ) [EOL] [EOL] def test_nick_user_host ( self ) : [EOL] prefix = IrcMessagePrefix ( nick = [string] , user = [string] , host = [string] ) [EOL] self . assertIs ( prefix . servername , None ) [EOL] self . assertEqual ( prefix . nick , [string] ) [EOL] self . assertEqual ( prefix . user , [string] ) [EOL] self . assertIs ( prefix . host , [string] ) [EOL] self . assertEqual ( prefix , IrcMessagePrefix ( None , [string] , [string] , [string] ) ) [EOL] [EOL] def test_str_magic_servername ( self ) : [EOL] prefix = IrcMessagePrefix ( servername = [string] ) [EOL] self . assertEqual ( str ( prefix ) , [string] ) [EOL] [EOL] def test_str_magic_servername_ip_address ( self ) : [EOL] prefix = IrcMessagePrefix ( servername = [string] ) [EOL] self . assertEqual ( str ( prefix ) , [string] ) [EOL] [EOL] def test_str_magic_nick ( self ) : [EOL] prefix = IrcMessagePrefix ( nick = [string] ) [EOL] self . assertEqual ( str ( prefix ) , [string] ) [EOL] [EOL] def test_str_magic_nick_user ( self ) : [EOL] prefix = IrcMessagePrefix ( nick = [string] , user = [string] ) [EOL] self . assertEqual ( str ( prefix ) , [string] ) [EOL] [EOL] def test_str_magic_nick_host ( self ) : [EOL] prefix = IrcMessagePrefix ( nick = [string] , host = [string] ) [EOL] self . assertEqual ( str ( prefix ) , [string] ) [EOL] [EOL] def test_str_magic_nick_user_host ( self ) : [EOL] prefix = IrcMessagePrefix ( nick = [string] , user = [string] , host = [string] ) [EOL] self . assertEqual ( str ( prefix ) , [string] ) [EOL] [EOL] def test_from_servername ( self ) : [EOL] self . assertEqual ( IrcMessagePrefix . fromPrefix ( [string] ) , IrcMessagePrefix ( servername = [string] ) ) [EOL] [EOL] def test_from_nick ( self ) : [EOL] self . assertEqual ( IrcMessagePrefix . fromPrefix ( [string] ) , IrcMessagePrefix ( nick = [string] ) ) [EOL] [EOL] def test_from_nick_user ( self ) : [EOL] self . assertEqual ( IrcMessagePrefix . fromPrefix ( [string] ) , IrcMessagePrefix ( nick = [string] , user = [string] ) ) [EOL] [EOL] def test_from_nick_user_host ( self ) : [EOL] self . assertEqual ( IrcMessagePrefix . fromPrefix ( [string] ) , IrcMessagePrefix ( nick = [string] , host = [string] ) ) [EOL] [EOL] def test_from_nick_host ( self ) : [EOL] self . assertEqual ( IrcMessagePrefix . fromPrefix ( [string] ) , IrcMessagePrefix ( nick = [string] , user = [string] , host = [string] ) ) [EOL] [EOL] def test_parse_none ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessagePrefix . parse , None ) [EOL] [EOL] def test_parse_int ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessagePrefix . parse , [number] ) [EOL] [EOL] def test_parse_bytes ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessagePrefix . parse , [string] ) [EOL] [EOL] def test_parse_empty ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix . parse , [string] ) [EOL] [EOL] def test_parse_space ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix . parse , [string] ) [EOL] [EOL] def test_parse_trailing_space ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix . parse , [string] ) [EOL] [EOL] def test_parse_leading_space ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix . parse , [string] ) [EOL] [EOL] def test_parse_covering_space ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix . parse , [string] ) [EOL] [EOL] def test_parse_period ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix . parse , [string] ) [EOL] [EOL] def test_parse_trailing_period ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix . parse , [string] ) [EOL] [EOL] def test_parse_leading_perios ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix . parse , [string] ) [EOL] [EOL] def test_parse_period_nick ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix . parse , [string] ) [EOL] [EOL] def test_parse_nl ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix . parse , [string] ) [EOL] [EOL] def test_parse_cr ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix . parse , [string] ) [EOL] [EOL] def test_parse_null_char ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix . parse , [string] ) [EOL] [EOL] def test_parse_empty_nick_user ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix . parse , [string] ) [EOL] [EOL] def test_parse_empty_nick_some_user ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix . parse , [string] ) [EOL] [EOL] def test_parse_some_nick_empty_user ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix . parse , [string] ) [EOL] [EOL] def test_parse_empty_nick_host ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix . parse , [string] ) [EOL] [EOL] def test_parse_empty_nick_some_host ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix . parse , [string] ) [EOL] [EOL] def test_parse_some_nick_empty_host ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix . parse , [string] ) [EOL] [EOL] def test_parse_empty_nick_user_host ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix . parse , [string] ) [EOL] [EOL] def test_parse_some_nick_empty_user_host ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix . parse , [string] ) [EOL] [EOL] def test_parse_some_user_empty_nick_host ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix . parse , [string] ) [EOL] [EOL] def test_parse_some_host_empty_nick_user ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix . parse , [string] ) [EOL] [EOL] def test_parse_some_nick_user_empty_host ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix . parse , [string] ) [EOL] [EOL] def test_parse_some_nick_host_empty_user ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix . parse , [string] ) [EOL] [EOL] def test_parse_some_user_host_empty_nick ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix . parse , [string] ) [EOL] [EOL] def test_parse_opeing_parenthesis ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix . parse , [string] ) [EOL] [EOL] def test_parse_closing_parenthesis ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix . parse , [string] ) [EOL] [EOL] def test_parse_opening_bracket ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix . parse , [string] ) [EOL] [EOL] def test_parse_closing_bracket ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessagePrefix . parse , [string] ) [EOL] [EOL] def test_parse_servername ( self ) : [EOL] self . assertEqual ( IrcMessagePrefix . parse ( [string] ) , ParsedPrefix ( [string] , None , None , None ) ) [EOL] [EOL] def test_parse_servername_ip_addr ( self ) : [EOL] self . assertEqual ( IrcMessagePrefix . parse ( [string] ) , ParsedPrefix ( [string] , None , None , None ) ) [EOL] [EOL] def test_parse_nick ( self ) : [EOL] self . assertEqual ( IrcMessagePrefix . parse ( [string] ) , ParsedPrefix ( None , [string] , None , None ) ) [EOL] [EOL] def test_parse_nick_number ( self ) : [EOL] self . assertEqual ( IrcMessagePrefix . parse ( [string] ) , ParsedPrefix ( None , [string] , None , None ) ) [EOL] [EOL] def test_parse_nick_number_alpha ( self ) : [EOL] self . assertEqual ( IrcMessagePrefix . parse ( [string] ) , ParsedPrefix ( None , [string] , None , None ) ) [EOL] [EOL] def test_parse_nick_user ( self ) : [EOL] self . assertEqual ( IrcMessagePrefix . parse ( [string] ) , ParsedPrefix ( None , [string] , [string] , None ) ) [EOL] [EOL] def test_parse_nick_host ( self ) : [EOL] self . assertEqual ( IrcMessagePrefix . parse ( [string] ) , ParsedPrefix ( None , [string] , None , [string] ) ) [EOL] [EOL] def test_parse_nick_user_host ( self ) : [EOL] self . assertEqual ( IrcMessagePrefix . parse ( [string] ) , ParsedPrefix ( None , [string] , [string] , [string] ) ) [EOL] [EOL] def test_parse_nick_user_host_2 ( self ) : [EOL] self . assertEqual ( IrcMessagePrefix . parse ( [string] ) , ParsedPrefix ( None , [string] , [string] , [string] ) ) [EOL] [EOL] def test_parse_from_twitch ( self ) : [EOL] self . assertEqual ( IrcMessagePrefix . parse ( [string] ) , ParsedPrefix ( None , [string] , [string] , [string] ) ) [EOL]	
import unittest [EOL] from typing import Dict [EOL] from bot . twitchmessage import IrcMessageTags , IrcMessageTagsKey [EOL] from bot . twitchmessage import IrcMessageTagsReadOnly [EOL] [EOL] [EOL] class TestsIrcTagsReadOnly ( unittest . TestCase ) : [EOL] def test_fromkey_none ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessageTagsReadOnly . fromKey , None ) [EOL] [EOL] def test_fromkey_int ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessageTagsReadOnly . fromKey , [number] ) [EOL] [EOL] def test_fromkey_bytes ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessageTagsReadOnly . fromKey , [string] ) [EOL] [EOL] def test_fromkey_str_empty ( self ) : [EOL] key = IrcMessageTagsReadOnly . fromKey ( [string] ) [EOL] self . assertIsInstance ( key , IrcMessageTagsKey ) [EOL] self . assertEqual ( key , IrcMessageTagsKey ( ) ) [EOL] self . assertEqual ( key , [string] ) [EOL] [EOL] def test_fromkey_str_key ( self ) : [EOL] key = IrcMessageTagsReadOnly . fromKey ( [string] ) [EOL] self . assertEqual ( key , IrcMessageTagsKey ( [string] ) ) [EOL] self . assertEqual ( key , [string] ) [EOL] [EOL] def test_fromkey_str_vendor ( self ) : [EOL] key = IrcMessageTagsReadOnly . fromKey ( [string] ) [EOL] self . assertEqual ( key , IrcMessageTagsKey ( [string] , [string] ) ) [EOL] self . assertEqual ( key , [string] ) [EOL] [EOL] def test_fromkey_key ( self ) : [EOL] key = IrcMessageTagsKey ( ) [EOL] self . assertIs ( IrcMessageTagsReadOnly . fromKey ( key ) , key ) [EOL] [EOL] def test_constructor_int ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessageTagsReadOnly , [number] ) [EOL] [EOL] def test_constructor_tagkey ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessageTagsReadOnly , IrcMessageTagsKey ( ) ) [EOL] [EOL] def test_constructor_readonly ( self ) : [EOL] tags = IrcMessageTagsReadOnly ( ) [EOL] self . assertIs ( tags , IrcMessageTagsReadOnly ( tags ) ) [EOL] [EOL] def test_empty_instance ( self ) : [EOL] tags = IrcMessageTagsReadOnly ( ) [EOL] self . assertEqual ( len ( tags ) , [number] ) [EOL] self . assertFalse ( tags ) [EOL] self . assertNotIn ( [string] , tags ) [EOL] self . assertNotIn ( IrcMessageTagsKey ( [string] ) , tags ) [EOL] self . assertEqual ( str ( tags ) , [string] ) [EOL] self . assertEqual ( tags , IrcMessageTagsReadOnly ( None ) ) [EOL] self . assertEqual ( tags , { } ) [EOL] [EOL] def test_empty_instance_mapping_methods ( self ) : [EOL] tags = IrcMessageTagsReadOnly ( ) [EOL] self . assertEqual ( tags , tags ) [EOL] self . assertEqual ( tags , IrcMessageTagsReadOnly ( ) ) [EOL] self . assertEqual ( tags , { } ) [EOL] self . assertFalse ( tags . keys ( ) ) [EOL] self . assertFalse ( tags . values ( ) ) [EOL] self . assertFalse ( tags . items ( ) ) [EOL] self . assertIsNone ( tags . get ( [string] ) ) [EOL] keyIter = iter ( tags ) [EOL] self . assertRaises ( StopIteration , next , keyIter ) [EOL] [EOL] def test_index_bytes ( self ) : [EOL] tags = IrcMessageTagsReadOnly ( ) [EOL] with self . assertRaises ( TypeError ) : [EOL] [string] in tags [EOL] with self . assertRaises ( TypeError ) : [EOL] tags [ [string] ] [EOL] [EOL] def test_index_int ( self ) : [EOL] tags = IrcMessageTagsReadOnly ( ) [EOL] with self . assertRaises ( TypeError ) : [EOL] [number] in tags [EOL] with self . assertRaises ( TypeError ) : [EOL] tags [ [number] ] [EOL] [EOL] def test_index_missing_str ( self ) : [EOL] tags = IrcMessageTagsReadOnly ( ) [EOL] with self . assertRaises ( KeyError ) : [EOL] tags [ [string] ] [EOL] [EOL] def test_index_missing_tagskey ( self ) : [EOL] tags = IrcMessageTagsReadOnly ( ) [EOL] with self . assertRaises ( KeyError ) : [EOL] tags [ IrcMessageTagsKey ( [string] ) ] [EOL] [EOL] def test_readonly ( self ) : [EOL] tags = IrcMessageTagsReadOnly ( ) [EOL] with self . assertRaises ( TypeError ) : [EOL] tags [ [string] ] = [string] [EOL] [EOL] def test_instance_one_item_key_str_value ( self ) : [EOL] tags = IrcMessageTagsReadOnly ( { [string] : [string] } ) [EOL] self . assertEqual ( len ( tags ) , [number] ) [EOL] self . assertTrue ( tags ) [EOL] self . assertIn ( [string] , tags ) [EOL] self . assertIn ( IrcMessageTagsKey ( [string] ) , tags ) [EOL] self . assertEqual ( tags [ [string] ] , [string] ) [EOL] self . assertEqual ( tags [ IrcMessageTagsKey ( [string] ) ] , [string] ) [EOL] self . assertEqual ( tags , IrcMessageTagsReadOnly ( [ [ IrcMessageTagsKey ( [string] ) , [string] ] ] ) ) [EOL] self . assertEqual ( tags , { [string] : [string] } ) [EOL] [EOL] def test_instance_one_item_vendor_key_true_value ( self ) : [EOL] tags = IrcMessageTagsReadOnly ( [ [string] ] ) [EOL] self . assertEqual ( len ( tags ) , [number] ) [EOL] self . assertEqual ( tags [ [string] ] , True ) [EOL] self . assertEqual ( tags , { [string] : True } ) [EOL] self . assertEqual ( tags , { IrcMessageTagsKey ( [string] , [string] ) : True } ) [EOL] self . assertEqual ( tags , IrcMessageTagsReadOnly ( [ IrcMessageTagsKey ( [string] , [string] ) ] ) ) [EOL] [EOL] def test_instance_special_values ( self ) : [EOL] tags = IrcMessageTagsReadOnly ( { [string] : [string] } ) [EOL] self . assertEqual ( str ( tags ) , [string] ) [EOL] [EOL] def test_instaance_one_item_mapping_methods ( self ) : [EOL] tags = IrcMessageTagsReadOnly ( [ [string] ] ) [EOL] self . assertEqual ( tags , tags ) [EOL] self . assertEqual ( tags , IrcMessageTagsReadOnly ( { [string] : True } ) ) [EOL] self . assertEqual ( tags , { [string] : True } ) [EOL] self . assertEqual ( len ( tags . keys ( ) ) , [number] ) [EOL] self . assertEqual ( len ( tags . values ( ) ) , [number] ) [EOL] self . assertEqual ( len ( tags . items ( ) ) , [number] ) [EOL] self . assertIn ( [string] , tags . keys ( ) ) [EOL] self . assertIn ( IrcMessageTagsKey ( [string] ) , tags . keys ( ) ) [EOL] self . assertIn ( True , tags . values ( ) ) [EOL] self . assertIn ( ( [string] , True ) , tags . items ( ) ) [EOL] self . assertIn ( ( IrcMessageTagsKey ( [string] ) , True ) , tags . items ( ) ) [EOL] keyIter = iter ( tags ) [EOL] self . assertEqual ( next ( keyIter ) , [string] ) [EOL] self . assertRaises ( StopIteration , next , keyIter ) [EOL] [EOL] def test_instance_two_items ( self ) : [EOL] tags = IrcMessageTagsReadOnly ( [ [string] , [ IrcMessageTagsKey ( [string] ) , [string] ] ] ) [EOL] self . assertEqual ( len ( tags ) , [number] ) [EOL] self . assertTrue ( tags ) [EOL] self . assertIn ( [string] , tags ) [EOL] self . assertIn ( IrcMessageTagsKey ( [string] ) , tags ) [EOL] self . assertEqual ( tags [ IrcMessageTagsKey ( [string] ) ] , True ) [EOL] self . assertEqual ( tags [ [string] ] , [string] ) [EOL] strTags = str ( tags ) [EOL] self . assertIn ( strTags , [ [string] , [string] ] ) [EOL] self . assertEqual ( tags , IrcMessageTagsReadOnly ( { IrcMessageTagsKey ( [string] ) : True , [string] : [string] } ) ) [EOL] [EOL] def test_instance_multi_items ( self ) : [EOL] tags = IrcMessageTagsReadOnly ( [ [string] , IrcMessageTagsKey ( [string] ) , [ [string] , [string] ] , [ IrcMessageTagsKey ( [string] ) , [string] ] ] ) [EOL] self . assertEqual ( len ( tags ) , [number] ) [EOL] self . assertEqual ( tags [ [string] ] , True ) [EOL] self . assertEqual ( tags [ [string] ] , True ) [EOL] self . assertEqual ( tags [ IrcMessageTagsKey ( [string] ) ] , [string] ) [EOL] self . assertEqual ( tags [ IrcMessageTagsKey ( [string] ) ] , [string] ) [EOL] [EOL] def test_format_values ( self ) : [EOL] self . assertEqual ( IrcMessageTagsReadOnly . formatValue ( [string] ) , [string] ) [EOL] self . assertEqual ( IrcMessageTagsReadOnly . formatValue ( [string] ) , [string] ) [EOL] self . assertEqual ( IrcMessageTagsReadOnly . formatValue ( [string] ) , [string] ) [EOL] self . assertEqual ( IrcMessageTagsReadOnly . formatValue ( [string] ) , [string] ) [EOL] self . assertEqual ( IrcMessageTagsReadOnly . formatValue ( [string] ) , [string] ) [EOL] [EOL] def test_str_magic_empty_instance ( self ) : [EOL] self . assertEqual ( str ( IrcMessageTagsReadOnly ( ) ) , [string] ) [EOL] [EOL] def test_str_magic_one_item_with_value_str ( self ) : [EOL] self . assertEqual ( str ( IrcMessageTagsReadOnly ( { [string] : [string] } ) ) , [string] ) [EOL] [EOL] def test_str_magic_one_item_with_value ( self ) : [EOL] self . assertEqual ( str ( IrcMessageTagsReadOnly ( [ IrcMessageTagsKey ( vendor = [string] , key = [string] ) ] ) ) , [string] ) [EOL] [EOL] def test_str_magic_two_items_mixed ( self ) : [EOL] self . assertIn ( str ( IrcMessageTagsReadOnly ( { [string] : True , [string] : [string] } ) ) , [ [string] , [string] ] ) [EOL] [EOL] def test_str_magic_three_items ( self ) : [EOL] self . assertIn ( str ( IrcMessageTagsReadOnly ( { [string] : [string] , [string] : True , [string] : True } ) ) , [ [string] , [string] , [string] , [string] , [string] , [string] ] ) [EOL] [EOL] def test_parse_none ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessageTagsReadOnly . parseTags , None ) [EOL] [EOL] def test_parse_int ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessageTagsReadOnly . parseTags , [number] ) [EOL] [EOL] def test_parse_list ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessageTagsReadOnly . parseTags , [ ] ) [EOL] [EOL] def test_parse_tuple ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessageTagsReadOnly . parseTags , ( ) ) [EOL] [EOL] def test_parse_bytes ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessageTagsReadOnly . parseTags , [string] ) [EOL] [EOL] def test_parse_key_space ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsReadOnly . parseTags , [string] ) [EOL] [EOL] def test_parse_key_null_char ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsReadOnly . parseTags , [string] ) [EOL] [EOL] def test_parse_key_cr ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsReadOnly . parseTags , [string] ) [EOL] [EOL] def test_parse_key_nl ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsReadOnly . parseTags , [string] ) [EOL] [EOL] def test_parse_key_leading_space ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsReadOnly . parseTags , [string] ) [EOL] [EOL] def test_parse_key_trailing_space ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsReadOnly . parseTags , [string] ) [EOL] [EOL] def test_parse_key_covering_space ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsReadOnly . parseTags , [string] ) [EOL] [EOL] def test_parse_key_opening_parenthesis ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsReadOnly . parseTags , [string] ) [EOL] [EOL] def test_parse_key_closing_parenthesis ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsReadOnly . parseTags , [string] ) [EOL] [EOL] def test_parse_key_opening_bracket ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsReadOnly . parseTags , [string] ) [EOL] [EOL] def test_parse_key_closing_bracket ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsReadOnly . parseTags , [string] ) [EOL] [EOL] def test_parse_value_space ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsReadOnly . parseTags , [string] ) [EOL] [EOL] def test_parse_value_cr ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsReadOnly . parseTags , [string] ) [EOL] [EOL] def test_parse_value_nl ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsReadOnly . parseTags , [string] ) [EOL] [EOL] def test_parse_value_backslash ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsReadOnly . parseTags , [string] ) [EOL] [EOL] def test_parse_value_null_char ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsReadOnly . parseTags , [string] ) [EOL] [EOL] def test_parse_empty_elements ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsReadOnly . parseTags , [string] ) [EOL] [EOL] def test_parse_trailing_empty_element ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsReadOnly . parseTags , [string] ) [EOL] [EOL] def test_parse_leading_empty_element ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsReadOnly . parseTags , [string] ) [EOL] [EOL] def test_parse_empty ( self ) : [EOL] items = IrcMessageTagsReadOnly . parseTags ( [string] ) [EOL] self . assertIsInstance ( items , Dict ) [EOL] self . assertEqual ( items , IrcMessageTagsReadOnly ( ) ) [EOL] [EOL] def test_parse_key ( self ) : [EOL] items = IrcMessageTagsReadOnly . parseTags ( [string] ) [EOL] self . assertEqual ( items , { [string] : True } ) [EOL] [EOL] def test_parse_key_vendor ( self ) : [EOL] self . assertEqual ( IrcMessageTagsReadOnly . parseTags ( [string] ) , { [string] : True } ) [EOL] [EOL] def test_parse_key_value ( self ) : [EOL] self . assertEqual ( IrcMessageTagsReadOnly . parseTags ( [string] ) , { [string] : [string] } ) [EOL] [EOL] def test_parse_three_items ( self ) : [EOL] self . assertEqual ( IrcMessageTagsReadOnly . parseTags ( [string] ) , { [string] : [string] , [string] : True , [string] : [string] } ) [EOL] [EOL] def test_parse_twitch_tags ( self ) : [EOL] items = IrcMessageTagsReadOnly . parseTags ( [string] ) [EOL] self . assertEqual ( items [ [string] ] , [string] ) [EOL] self . assertEqual ( items [ [string] ] , [string] ) [EOL] self . assertEqual ( items [ [string] ] , [string] ) [EOL] self . assertEqual ( items [ [string] ] , [string] ) [EOL] self . assertEqual ( items [ [string] ] , [string] ) [EOL] self . assertEqual ( items [ [string] ] , [string] ) [EOL] self . assertEqual ( items [ [string] ] , [string] ) [EOL] self . assertEqual ( items [ [string] ] , [string] ) [EOL] [EOL] def test_parse_twitch_bits ( self ) : [EOL] IrcMessageTagsReadOnly . parseTags ( [string] ) [EOL] [EOL] [EOL] class TestsIrcTags ( unittest . TestCase ) : [EOL] def test_set_item_none ( self ) : [EOL] tags = IrcMessageTags ( ) [EOL] with self . assertRaises ( TypeError ) : [EOL] tags [ [string] ] = None [EOL] [EOL] def test_set_item_false ( self ) : [EOL] tags = IrcMessageTags ( ) [EOL] with self . assertRaises ( ValueError ) : [EOL] tags [ [string] ] = False [EOL] [EOL] def test_set_item_int ( self ) : [EOL] tags = IrcMessageTags ( ) [EOL] with self . assertRaises ( TypeError ) : [EOL] tags [ [string] ] = [number] [EOL] [EOL] def test_set_item_list ( self ) : [EOL] tags = IrcMessageTags ( ) [EOL] with self . assertRaises ( TypeError ) : [EOL] tags [ [string] ] = [ ] [EOL] [EOL] def test_set_item ( self ) : [EOL] tags = IrcMessageTags ( ) [EOL] self . assertEqual ( len ( tags ) , [number] ) [EOL] tags [ [string] ] = True [EOL] self . assertEqual ( len ( tags ) , [number] ) [EOL] self . assertIn ( [string] , tags ) [EOL] self . assertIs ( tags [ [string] ] , True ) [EOL] [EOL] def test_set_item_str ( self ) : [EOL] tags = IrcMessageTags ( ) [EOL] tags [ [string] ] = [string] [EOL] self . assertEqual ( tags [ [string] ] , [string] ) [EOL] [EOL] def test_delete_item ( self ) : [EOL] tags = IrcMessageTags ( { [string] : True } ) [EOL] self . assertEqual ( len ( tags ) , [number] ) [EOL] del tags [ [string] ] [EOL] self . assertEqual ( len ( tags ) , [number] ) [EOL] self . assertNotIn ( [string] , tags ) [EOL] [EOL] def test_mutable_mapping ( self ) : [EOL] tags = IrcMessageTags ( { [string] : [string] } ) [EOL] self . assertEqual ( tags . pop ( [string] ) , [string] ) [EOL] self . assertEqual ( len ( tags ) , [number] ) [EOL] self . assertRaises ( KeyError , tags . pop , [string] ) [EOL] self . assertEqual ( tags . setdefault ( [string] , [string] ) , [string] ) [EOL] self . assertEqual ( tags . setdefault ( [string] , [string] ) , [string] ) [EOL] self . assertEqual ( tags . popitem ( ) , ( [string] , [string] ) ) [EOL] self . assertRaises ( KeyError , tags . popitem ) [EOL] tags . update ( BibleThump = True ) [EOL] self . assertEqual ( len ( tags ) , [number] ) [EOL] self . assertIn ( [string] , tags ) [EOL]	
	0
import unittest [EOL] from bot . twitchmessage import IrcMessage , IrcMessageParams , IrcMessagePrefix [EOL] from bot . twitchmessage import IrcMessageTagsReadOnly [EOL] from bot . twitchmessage . _ircmessage import ParsedMessage [EOL] [EOL] [EOL] class TestsIrcMessage ( unittest . TestCase ) : [EOL] def test_constructor_tags_int ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessage , tags = [number] ) [EOL] [EOL] def test_constructor_tags_str ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessage , tags = [string] ) [EOL] [EOL] def test_constructor_tags_bytes ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessage , tags = [string] ) [EOL] [EOL] def test_constructor_tags_list ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessage , tags = [ ] ) [EOL] [EOL] def test_constructor_tags_dict ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessage , tags = { } ) [EOL] [EOL] def test_constructor_prefix ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessage , prefix = [number] ) [EOL] [EOL] def test_constructor_prefix_str ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessage , prefix = [string] ) [EOL] [EOL] def test_constructor_prefix_bytes ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessage , prefix = [string] ) [EOL] [EOL] def test_constructor_prefix_list ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessage , prefix = [ ] ) [EOL] [EOL] def test_constructor_prefix_dict ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessage , prefix = { } ) [EOL] [EOL] def test_constructor_command_none ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessage , command = None ) [EOL] [EOL] def test_constructor_command_empty_str ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage , command = [string] ) [EOL] [EOL] def test_constructor_command_bytes ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessage , command = [string] ) [EOL] [EOL] def test_constructor_command_list ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessage , command = [ ] ) [EOL] [EOL] def test_constructor_command_dict ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessage , command = { } ) [EOL] [EOL] def test_constructor_params_none ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessage , params = None ) [EOL] [EOL] def test_constructor_params ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessage , params = [number] ) [EOL] [EOL] def test_constructor_params_str ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessage , params = [string] ) [EOL] [EOL] def test_constructor_params_bytes ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessage , params = [string] ) [EOL] [EOL] def test_constructor_params_list ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessage , params = [ ] ) [EOL] [EOL] def test_constructor_params_dict ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessage , params = { } ) [EOL] [EOL] def test_command_set_tags ( self ) : [EOL] message = IrcMessage ( command = [number] ) [EOL] with self . assertRaises ( AttributeError ) : [EOL] message . tags = IrcMessageTagsReadOnly ( ) [EOL] [EOL] def test_command_set_prefix ( self ) : [EOL] message = IrcMessage ( command = [number] ) [EOL] with self . assertRaises ( AttributeError ) : [EOL] message . prefix = IrcMessageTagsReadOnly ( ) [EOL] [EOL] def test_command_set_command ( self ) : [EOL] message = IrcMessage ( command = [number] ) [EOL] with self . assertRaises ( AttributeError ) : [EOL] message . command = IrcMessageTagsReadOnly ( ) [EOL] [EOL] def test_command_set_params ( self ) : [EOL] message = IrcMessage ( command = [number] ) [EOL] with self . assertRaises ( AttributeError ) : [EOL] message . params = IrcMessageParams ( ) [EOL] [EOL] def test_command ( self ) : [EOL] message = IrcMessage ( command = [string] ) [EOL] self . assertIsNone ( message . tags ) [EOL] self . assertIsNone ( message . prefix ) [EOL] self . assertEqual ( message . command , [string] ) [EOL] self . assertIsNotNone ( message . params ) [EOL] self . assertIs ( message . params . isEmpty , True ) [EOL] self . assertEqual ( message , IrcMessage ( command = [string] ) ) [EOL] [EOL] def test_command_params_middle ( self ) : [EOL] message = IrcMessage ( command = [string] , params = IrcMessageParams ( middle = [string] ) ) [EOL] self . assertIsNone ( message . tags ) [EOL] self . assertIsNone ( message . prefix ) [EOL] self . assertEqual ( message . command , [string] ) [EOL] self . assertIs ( message . params . middle , [string] ) [EOL] self . assertIs ( message . params . trailing , None ) [EOL] self . assertEqual ( message , IrcMessage ( command = [string] , params = IrcMessageParams ( [string] ) ) ) [EOL] [EOL] def test_command_params_middle_trailing ( self ) : [EOL] message = IrcMessage ( command = [string] , params = IrcMessageParams ( middle = [string] , trailing = [string] ) ) [EOL] self . assertIsNone ( message . tags ) [EOL] self . assertIsNone ( message . prefix ) [EOL] self . assertEqual ( message . command , [string] ) [EOL] self . assertIs ( message . params . middle , [string] ) [EOL] self . assertIs ( message . params . trailing , [string] ) [EOL] self . assertEqual ( message , IrcMessage ( command = [string] , params = IrcMessageParams ( [string] , [string] ) ) ) [EOL] [EOL] def test_prefix_command_params ( self ) : [EOL] message = IrcMessage ( prefix = IrcMessagePrefix ( nick = [string] , user = [string] , host = [string] ) , command = [string] , params = IrcMessageParams ( [string] ) ) [EOL] self . assertIsNone ( message . prefix . servername ) [EOL] self . assertEqual ( message . prefix . nick , [string] ) [EOL] self . assertEqual ( message . prefix . user , [string] ) [EOL] self . assertEqual ( message . prefix . host , [string] ) [EOL] self . assertEqual ( message . command , [string] ) [EOL] self . assertIs ( message . params . middle , [string] ) [EOL] self . assertIs ( message . params . trailing , None ) [EOL] self . assertEqual ( message , IrcMessage ( prefix = IrcMessagePrefix ( nick = [string] , user = [string] , host = [string] ) , command = [string] , params = IrcMessageParams ( [string] ) ) ) [EOL] [EOL] def test_tags_prefix_command_params ( self ) : [EOL] message = IrcMessage ( tags = IrcMessageTagsReadOnly ( { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } ) , prefix = IrcMessagePrefix ( servername = [string] ) , command = [string] , params = IrcMessageParams ( [string] ) ) [EOL] self . assertEqual ( len ( message . tags ) , [number] ) [EOL] self . assertEqual ( message . tags [ [string] ] , [string] ) [EOL] self . assertEqual ( message . tags [ [string] ] , [string] ) [EOL] self . assertEqual ( message . tags [ [string] ] , [string] ) [EOL] self . assertEqual ( message . tags [ [string] ] , [string] ) [EOL] self . assertEqual ( message . tags [ [string] ] , [string] ) [EOL] self . assertEqual ( message . prefix . servername , [string] ) [EOL] self . assertIsNone ( message . prefix . nick ) [EOL] self . assertIsNone ( message . prefix . user ) [EOL] self . assertIsNone ( message . prefix . host ) [EOL] self . assertEqual ( message . command , [string] ) [EOL] self . assertIs ( message . params . middle , [string] ) [EOL] self . assertIs ( message . params . trailing , None ) [EOL] self . assertEqual ( message , IrcMessage ( tags = IrcMessageTagsReadOnly ( { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } ) , prefix = IrcMessagePrefix ( servername = [string] ) , command = [string] , params = IrcMessageParams ( [string] ) ) ) [EOL] [EOL] def test_str_magic_command ( self ) : [EOL] self . assertEqual ( str ( IrcMessage ( command = [string] ) ) , [string] ) [EOL] [EOL] def test_str_magic_command_params_middle ( self ) : [EOL] self . assertEqual ( str ( IrcMessage ( command = [string] , params = IrcMessageParams ( middle = [string] ) ) ) , [string] ) [EOL] [EOL] def test_str_magic_command_params_middle_trailing ( self ) : [EOL] self . assertEqual ( str ( IrcMessage ( command = [string] , params = IrcMessageParams ( middle = [string] , trailing = [string] ) ) ) , [string] ) [EOL] [EOL] def test_str_magic_prefix_command_params ( self ) : [EOL] self . assertEqual ( str ( IrcMessage ( prefix = IrcMessagePrefix ( nick = [string] , user = [string] , host = [string] ) , command = [string] , params = IrcMessageParams ( [string] ) ) ) , [string] ) [EOL] [EOL] def test_str_tags_magic_prefix_command_params ( self ) : [EOL] message = IrcMessage ( tags = IrcMessageTagsReadOnly ( { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } ) , prefix = IrcMessagePrefix ( servername = [string] ) , command = [string] , params = IrcMessageParams ( [string] ) ) [EOL] self . assertEqual ( str ( message ) , [string] + str ( message . tags ) + [string] ) [EOL] [EOL] def test_parse_none ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessage . parse , None ) [EOL] [EOL] def test_parse_int ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessage . parse , [number] ) [EOL] [EOL] def test_parse_list ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessage . parse , [ ] ) [EOL] [EOL] def test_parse_dict ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessage . parse , { } ) [EOL] [EOL] def test_parse_bytes ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_empty ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_space ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_leading_space ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_tab ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_nl ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_cr ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_null_char ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_number_len_1 ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_number_len_2 ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_number_len_4 ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_number_letter ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_number_2_letter ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_number_3_letter ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_letter_number ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_command_underscore ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_only_tags ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_only_tags_trailing_space ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_only_prefix_servername ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_only_prefix_nick_user_host ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_only_prefix_servername_trailing_space ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_leading_exclamation ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_leading_number_sign ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_leading_dollar_sign ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_tags_empty ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_tags_null_char ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_tags_cr ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_tags_nl ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_tags_opening_parenthesis ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_tags_closing_parenthesis ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_tags_opening_bracket ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_tags_closing_bracket ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_tags_key_exclamation ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_tags_key_ampersand ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_tags_key_exclamation_empty ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_tags_value_nl ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_tags_value_cr ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_tags_value_backslash ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_tags_value_null_char ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_tags_double_empty_tags ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_tags_trailing_empty_tag ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_tags_leading_empty_tag ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_prefix_empty ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_prefix_empty_nick_user ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_prefix_user_empty_nick ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_prefix_nick_empty_user ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_prefix_empty_nick_host ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_prefix_nick_empty_host ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_prefix_host_empty_nick ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_prefix_empty_nick_user_host ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_prefix_nick_empty_user_host ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_prefix_user_empty_nick_host ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_prefix_host_empty_nick_user ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_prefix_nick_user_empty_host ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_prefix_nick_host_empty_user ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_prefix_user_host_empty_nick ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_prefix_nick_period ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_prefix_user_period ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_prefix_host_trailing_period ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_prefix_host_leading_period ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_prefix_trailing_period ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_prefix_leading_period ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_prefix_opening_parenthesis ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_prefix_leading_parenthesis ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_prefix_opening_bracket ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_prefix_closing_bracket ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_params_middle_null_char ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_params_middle_cr ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_params_middle_nl ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_params_trailing_null_char ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_params_trailing_cr ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_params_trailing_nl ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessage . parse , [string] ) [EOL] [EOL] def test_parse_command ( self ) : [EOL] self . assertEqual ( IrcMessage . parse ( [string] ) , ParsedMessage ( None , None , [string] , IrcMessageParams ( ) ) ) [EOL] [EOL] def test_parse_command_int ( self ) : [EOL] self . assertEqual ( IrcMessage . parse ( [string] ) , ParsedMessage ( None , None , [number] , IrcMessageParams ( ) ) ) [EOL] [EOL] def test_parse_command_params_middle ( self ) : [EOL] self . assertEqual ( IrcMessage . parse ( [string] ) , ParsedMessage ( None , None , [string] , IrcMessageParams ( [string] ) ) ) [EOL] [EOL] def test_parse_prefix_command_params_middle ( self ) : [EOL] self . assertEqual ( IrcMessage . parse ( [string] ) , ParsedMessage ( None , IrcMessagePrefix ( nick = [string] , user = [string] , host = [string] ) , [string] , IrcMessageParams ( [string] ) ) ) [EOL] [EOL] def test_parse_prefix_servername_command_params_middle_trailing ( self ) : [EOL] self . assertEqual ( IrcMessage . parse ( [string] ) , ParsedMessage ( None , IrcMessagePrefix ( servername = [string] ) , [string] , IrcMessageParams ( [string] , [string] ) ) ) [EOL] [EOL] def test_parse_empty_trailing ( self ) : [EOL] self . assertEqual ( IrcMessage . parse ( [string] ) , ParsedMessage ( None , None , [string] , IrcMessageParams ( [string] , [string] ) ) ) [EOL] [EOL] def test_parse_empty_middle ( self ) : [EOL] self . assertEqual ( IrcMessage . parse ( [string] ) , ParsedMessage ( None , None , [string] , IrcMessageParams ( None , [string] ) ) ) [EOL] [EOL] def test_parse_multiple_spaces ( self ) : [EOL] self . assertEqual ( IrcMessage . parse ( [string] ) , ParsedMessage ( IrcMessageTagsReadOnly ( { [string] : [string] } ) , IrcMessagePrefix ( nick = [string] , user = [string] , host = [string] ) , [string] , IrcMessageParams ( [string] , [string] ) ) ) [EOL] [EOL] def test_from_command ( self ) : [EOL] self . assertEqual ( IrcMessage . fromMessage ( [string] ) , IrcMessage ( command = [string] ) ) [EOL] [EOL] def test_from_command_param_middle ( self ) : [EOL] self . assertEqual ( IrcMessage . fromMessage ( [string] ) , IrcMessage ( command = [string] , params = IrcMessageParams ( middle = [string] ) ) ) [EOL] [EOL] def test_from_prefix_command_param_middle ( self ) : [EOL] self . assertEqual ( IrcMessage . fromMessage ( [string] ) , IrcMessage ( prefix = IrcMessagePrefix ( nick = [string] , user = [string] , host = [string] ) , command = [string] , params = IrcMessageParams ( middle = [string] ) ) ) [EOL] [EOL] def test_from_twitch_privmsg ( self ) : [EOL] self . assertEqual ( IrcMessage . fromMessage ( [string] [string] [string] [string] [string] ) , IrcMessage ( tags = IrcMessageTagsReadOnly ( { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } ) , prefix = IrcMessagePrefix ( nick = [string] , user = [string] , host = [string] ) , command = [string] , params = IrcMessageParams ( middle = [string] , trailing = [string] ) ) ) [EOL] [EOL] def test_from_twitch_001 ( self ) : [EOL] self . assertEqual ( IrcMessage . fromMessage ( [string] ) , IrcMessage ( prefix = IrcMessagePrefix ( servername = [string] ) , command = [number] , params = IrcMessageParams ( middle = [string] , trailing = [string] ) ) ) [EOL] [EOL] def test_from_twitch_privmsg_bits ( self ) : [EOL] IrcMessage . fromMessage ( [string] ) [EOL]	
import unittest [EOL] from bot . twitchmessage import IrcMessageParams [EOL] from bot . twitchmessage . _ircparams import ParsedParams [EOL] [EOL] [EOL] class TestsIrcParams ( unittest . TestCase ) : [EOL] def test_constructor_middle_int ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessageParams , middle = [number] ) [EOL] [EOL] def test_constructor_trailing_int ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessageParams , trailing = [number] ) [EOL] [EOL] def test_constructor_middle_bytes ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessageParams , middle = [string] ) [EOL] [EOL] def test_constructor_trailing_bytes ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessageParams , trailing = [string] ) [EOL] [EOL] def test_constructor_middle_list ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessageParams , middle = [ ] ) [EOL] [EOL] def test_constructor_trailing_list ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessageParams , trailing = [ ] ) [EOL] [EOL] def test_constructor_middle_starting_colon ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageParams , middle = [string] ) [EOL] [EOL] def test_constructor_middle_second_starting_colon ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageParams , middle = [string] ) [EOL] [EOL] def test_constructor_middle_null_char ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageParams , middle = [string] ) [EOL] [EOL] def test_constructor_middle_cr ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageParams , middle = [string] ) [EOL] [EOL] def test_constructor_middle_nl ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageParams , middle = [string] ) [EOL] [EOL] def test_constructor_trailing_null_char ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageParams , trailing = [string] ) [EOL] [EOL] def test_constructor_trailing_cr ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageParams , trailing = [string] ) [EOL] [EOL] def test_constructor_trailing_nl ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageParams , trailing = [string] ) [EOL] [EOL] def test_constructor_middle_empty ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageParams , middle = [string] ) [EOL] [EOL] def test_constructor_middle_space ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageParams , middle = [string] ) [EOL] [EOL] def test_constructor_middle_spaces ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageParams , middle = [string] ) [EOL] [EOL] def test_empty ( self ) : [EOL] params = IrcMessageParams ( ) [EOL] self . assertIsNone ( params . middle ) [EOL] self . assertIsNone ( params . trailing ) [EOL] self . assertEqual ( params , IrcMessageParams ( ) ) [EOL] self . assertIs ( params . isEmpty , True ) [EOL] [EOL] def test_set_middle ( self ) : [EOL] params = IrcMessageParams ( ) [EOL] with self . assertRaises ( AttributeError ) : [EOL] params . middle = [string] [EOL] [EOL] def test_set_trailing ( self ) : [EOL] params = IrcMessageParams ( ) [EOL] with self . assertRaises ( AttributeError ) : [EOL] params . trailing = [string] [EOL] [EOL] def test_middle_one_param ( self ) : [EOL] params = IrcMessageParams ( middle = [string] ) [EOL] self . assertEqual ( params . middle , [string] ) [EOL] self . assertIsNone ( params . trailing ) [EOL] self . assertEqual ( params , IrcMessageParams ( [string] ) ) [EOL] self . assertIs ( params . isEmpty , False ) [EOL] [EOL] def test_middle_two_params ( self ) : [EOL] params = IrcMessageParams ( middle = [string] ) [EOL] self . assertEqual ( params . middle , [string] ) [EOL] self . assertEqual ( params , IrcMessageParams ( [string] ) ) [EOL] [EOL] def test_trailing_empty ( self ) : [EOL] params = IrcMessageParams ( trailing = [string] ) [EOL] self . assertIsNone ( params . middle ) [EOL] self . assertEqual ( params . trailing , [string] ) [EOL] self . assertEqual ( params , IrcMessageParams ( None , [string] ) ) [EOL] self . assertIs ( params . isEmpty , False ) [EOL] [EOL] def test_trailing ( self ) : [EOL] params = IrcMessageParams ( trailing = [string] ) [EOL] self . assertEqual ( params . trailing , [string] ) [EOL] self . assertEqual ( params , IrcMessageParams ( None , [string] ) ) [EOL] [EOL] def test_trailing_starting_colon ( self ) : [EOL] params = IrcMessageParams ( trailing = [string] ) [EOL] self . assertEqual ( params . trailing , [string] ) [EOL] [EOL] def test_trailing_starting_space ( self ) : [EOL] params = IrcMessageParams ( trailing = [string] ) [EOL] self . assertEqual ( params . trailing , [string] ) [EOL] [EOL] def test_trailing_complex ( self ) : [EOL] params = IrcMessageParams ( trailing = [string] ) [EOL] self . assertEqual ( params . trailing , [string] ) [EOL] [EOL] def test_middle_trailing ( self ) : [EOL] params = IrcMessageParams ( middle = [string] , trailing = [string] ) [EOL] self . assertEqual ( params . middle , [string] ) [EOL] self . assertEqual ( params . trailing , [string] ) [EOL] self . assertEqual ( params , IrcMessageParams ( [string] , [string] ) ) [EOL] self . assertIs ( params . isEmpty , False ) [EOL] [EOL] def test_middle_trailing_2 ( self ) : [EOL] params = IrcMessageParams ( middle = [string] , trailing = [string] ) [EOL] self . assertEqual ( params . middle , [string] ) [EOL] self . assertEqual ( params . trailing , [string] ) [EOL] [EOL] def test_str_magic_empty ( self ) : [EOL] self . assertEqual ( str ( IrcMessageParams ( ) ) , [string] ) [EOL] [EOL] def test_str_magic_middle_one_param ( self ) : [EOL] self . assertEqual ( str ( IrcMessageParams ( middle = [string] ) ) , [string] ) [EOL] [EOL] def test_str_magic_middle_two_params ( self ) : [EOL] self . assertEqual ( str ( IrcMessageParams ( middle = [string] ) ) , [string] ) [EOL] [EOL] def test_str_magic_trailing_empty ( self ) : [EOL] self . assertEqual ( str ( IrcMessageParams ( trailing = [string] ) ) , [string] ) [EOL] [EOL] def test_str_magic_trailing ( self ) : [EOL] self . assertEqual ( str ( IrcMessageParams ( trailing = [string] ) ) , [string] ) [EOL] [EOL] def test_str_magic_trailing_starting_colon ( self ) : [EOL] self . assertEqual ( str ( IrcMessageParams ( trailing = [string] ) ) , [string] ) [EOL] [EOL] def test_str_magic_trailing_starting_space ( self ) : [EOL] self . assertEqual ( str ( IrcMessageParams ( trailing = [string] ) ) , [string] ) [EOL] [EOL] def test_str_magic_trailing_complex ( self ) : [EOL] self . assertEqual ( str ( IrcMessageParams ( trailing = [string] ) ) , [string] ) [EOL] [EOL] def test_str_magic_middle_trailing ( self ) : [EOL] self . assertEqual ( str ( IrcMessageParams ( middle = [string] , trailing = [string] ) ) , [string] ) [EOL] [EOL] def test_from_empty ( self ) : [EOL] self . assertEqual ( IrcMessageParams . fromParams ( [string] ) , IrcMessageParams ( ) ) [EOL] [EOL] def test_from_middle ( self ) : [EOL] self . assertEqual ( IrcMessageParams . fromParams ( [string] ) , IrcMessageParams ( middle = [string] ) ) [EOL] [EOL] def test_from_trailing ( self ) : [EOL] self . assertEqual ( IrcMessageParams . fromParams ( [string] ) , IrcMessageParams ( trailing = [string] ) ) [EOL] [EOL] def test_from_middle_trailing ( self ) : [EOL] self . assertEqual ( IrcMessageParams . fromParams ( [string] ) , IrcMessageParams ( middle = [string] , trailing = [string] ) ) [EOL] [EOL] def test_from_channel ( self ) : [EOL] self . assertEqual ( IrcMessageParams . fromParams ( [string] ) , IrcMessageParams ( middle = [string] ) ) [EOL] [EOL] def test_from_list_who ( self ) : [EOL] self . assertEqual ( IrcMessageParams . fromParams ( [string] ) , IrcMessageParams ( middle = [string] , trailing = [string] ) ) [EOL] [EOL] def test_parse_none ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessageParams . parse , None ) [EOL] [EOL] def test_parse_int ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessageParams . parse , [number] ) [EOL] [EOL] def test_parse_bytes ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessageParams . parse , [string] ) [EOL] [EOL] def test_parse_list ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessageParams . parse , [ ] ) [EOL] [EOL] def test_parse_empty ( self ) : [EOL] self . assertEqual ( IrcMessageParams . parse ( [string] ) , ParsedParams ( None , None ) ) [EOL] [EOL] def test_parse_middle_single ( self ) : [EOL] self . assertEqual ( IrcMessageParams . parse ( [string] ) , ParsedParams ( [string] , None ) ) [EOL] [EOL] def test_parse_trailing_empty ( self ) : [EOL] self . assertEqual ( IrcMessageParams . parse ( [string] ) , ParsedParams ( None , [string] ) ) [EOL] [EOL] def test_parse_middle_space_trailing_empty ( self ) : [EOL] self . assertEqual ( IrcMessageParams . parse ( [string] ) , ParsedParams ( None , [string] ) ) [EOL] [EOL] def test_parse_trailing ( self ) : [EOL] self . assertEqual ( IrcMessageParams . parse ( [string] ) , ParsedParams ( None , [string] ) ) [EOL] [EOL] def test_parse_trailing_leading_colon ( self ) : [EOL] self . assertEqual ( IrcMessageParams . parse ( [string] ) , ParsedParams ( None , [string] ) ) [EOL] [EOL] def test_parse_trailing_leading_space ( self ) : [EOL] self . assertEqual ( IrcMessageParams . parse ( [string] ) , ParsedParams ( None , [string] ) ) [EOL] [EOL] def test_parse_middle_trailing_empty ( self ) : [EOL] self . assertEqual ( IrcMessageParams . parse ( [string] ) , ParsedParams ( [string] , [string] ) ) [EOL] [EOL] def test_parse_middle_trailing ( self ) : [EOL] self . assertEqual ( IrcMessageParams . parse ( [string] ) , ParsedParams ( [string] , [string] ) ) [EOL] [EOL] def test_parse_channel ( self ) : [EOL] self . assertEqual ( IrcMessageParams . parse ( [string] ) , ParsedParams ( [string] , None ) ) [EOL] [EOL] def test_parse_list_who ( self ) : [EOL] self . assertEqual ( IrcMessageParams . parse ( [string] ) , ParsedParams ( [string] , [string] ) ) [EOL]	
import unittest [EOL] from collections . abc import Hashable as HashableAbc [EOL] from typing import Hashable [EOL] from bot . twitchmessage import IrcMessageTagsKey [EOL] from bot . twitchmessage . _irctags import ParsedKeyVendor [EOL] [EOL] [EOL] class TestsIrcTagsKey ( unittest . TestCase ) : [EOL] def test_empty_constructor ( self ) : [EOL] key = IrcMessageTagsKey ( ) [EOL] self . assertEqual ( key . vendor , None ) [EOL] self . assertEqual ( key . key , [string] ) [EOL] [EOL] def test_constructor_key ( self ) : [EOL] key = IrcMessageTagsKey ( key = [string] ) [EOL] self . assertEqual ( key . vendor , None ) [EOL] self . assertEqual ( key . key , [string] ) [EOL] [EOL] def test_constructor_key_None ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessageTagsKey , key = None ) [EOL] [EOL] def test_constructor_key_bytes ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessageTagsKey , key = [string] ) [EOL] [EOL] def test_constructor_key_int ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessageTagsKey , key = [number] ) [EOL] [EOL] def test_constructor_key_bytes_vendor_None ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessageTagsKey , vendor = None , key = [string] ) [EOL] [EOL] def test_constructor_key_bytes_vendor ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessageTagsKey , vendor = [string] , key = [string] ) [EOL] [EOL] def test_constructor_key_vendor_bytes ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessageTagsKey , vendor = [string] , key = [string] ) [EOL] [EOL] def test_constructor_key_vendor_None ( self ) : [EOL] key = IrcMessageTagsKey ( [string] , None ) [EOL] self . assertEqual ( key . vendor , None ) [EOL] self . assertEqual ( key . key , [string] ) [EOL] [EOL] def test_constructor_key_vendor ( self ) : [EOL] key = IrcMessageTagsKey ( [string] , [string] ) [EOL] self . assertEqual ( key . vendor , [string] ) [EOL] self . assertEqual ( key . key , [string] ) [EOL] [EOL] def test_constructor_vendor ( self ) : [EOL] key = IrcMessageTagsKey ( vendor = [string] ) [EOL] self . assertEqual ( key . vendor , [string] ) [EOL] self . assertEqual ( key . key , [string] ) [EOL] [EOL] def test_constructor_keywords ( self ) : [EOL] key = IrcMessageTagsKey ( vendor = [string] , key = [string] ) [EOL] self . assertEqual ( key . vendor , [string] ) [EOL] self . assertEqual ( key . key , [string] ) [EOL] [EOL] def test_magic_str_empty ( self ) : [EOL] key = IrcMessageTagsKey ( ) [EOL] self . assertEqual ( str ( key ) , [string] ) [EOL] [EOL] def test_magic_str_key ( self ) : [EOL] key = IrcMessageTagsKey ( key = [string] ) [EOL] self . assertEqual ( str ( key ) , [string] ) [EOL] [EOL] def test_magic_str_key_vendor ( self ) : [EOL] key = IrcMessageTagsKey ( vendor = [string] , key = [string] ) [EOL] self . assertEqual ( str ( key ) , [string] ) [EOL] [EOL] def test_magic_str_vendor ( self ) : [EOL] key = IrcMessageTagsKey ( vendor = [string] ) [EOL] self . assertEqual ( str ( key ) , [string] ) [EOL] [EOL] def test_from_str_bytes ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessageTagsKey . fromKeyVendor , [string] ) [EOL] [EOL] def test_from_str_integer ( self ) : [EOL] self . assertRaises ( TypeError , IrcMessageTagsKey . fromKeyVendor , [number] ) [EOL] [EOL] def test_from_str_empty ( self ) : [EOL] key = IrcMessageTagsKey . fromKeyVendor ( [string] ) [EOL] self . assertEqual ( key . vendor , None ) [EOL] self . assertEqual ( key . key , [string] ) [EOL] [EOL] def test_from_str_key ( self ) : [EOL] key = IrcMessageTagsKey . fromKeyVendor ( [string] ) [EOL] self . assertEqual ( key . vendor , None ) [EOL] self . assertEqual ( key . key , [string] ) [EOL] [EOL] def test_from_str_key_numbers ( self ) : [EOL] key = IrcMessageTagsKey . fromKeyVendor ( [string] ) [EOL] self . assertEqual ( key . vendor , None ) [EOL] self . assertEqual ( key . key , [string] ) [EOL] [EOL] def test_equals_key ( self ) : [EOL] self . assertEqual ( IrcMessageTagsKey . fromKeyVendor ( [string] ) , IrcMessageTagsKey ( key = [string] ) ) [EOL] [EOL] def test_equals_key_vendor ( self ) : [EOL] self . assertEqual ( IrcMessageTagsKey . fromKeyVendor ( [string] ) , IrcMessageTagsKey ( vendor = [string] , key = [string] ) ) [EOL] [EOL] def test_not_equals_key ( self ) : [EOL] self . assertNotEqual ( IrcMessageTagsKey . fromKeyVendor ( [string] ) , IrcMessageTagsKey ( key = [string] ) ) [EOL] [EOL] def test_not_equals_key_vendor_by_key ( self ) : [EOL] self . assertNotEqual ( IrcMessageTagsKey . fromKeyVendor ( [string] ) , IrcMessageTagsKey ( vendor = [string] , key = [string] ) ) [EOL] [EOL] def test_not_equals_key_vendor_by_vendor ( self ) : [EOL] self . assertNotEqual ( IrcMessageTagsKey . fromKeyVendor ( [string] ) , IrcMessageTagsKey ( vendor = [string] , key = [string] ) ) [EOL] [EOL] def test_not_equals_key_vendor ( self ) : [EOL] self . assertNotEqual ( IrcMessageTagsKey . fromKeyVendor ( [string] ) , IrcMessageTagsKey ( vendor = [string] , key = [string] ) ) [EOL] [EOL] def test_hash ( self ) : [EOL] key = IrcMessageTagsKey ( ) [EOL] self . assertIsInstance ( hash ( key ) , int ) [EOL] self . assertIsInstance ( key , HashableAbc ) [EOL] self . assertIsInstance ( key , Hashable ) [EOL] [EOL] def test_parse_symbol_exclamation ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsKey . parse , [string] ) [EOL] [EOL] def test_parse_symbol_at ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsKey . parse , [string] ) [EOL] [EOL] def test_parse_symbol_number_sign ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsKey . parse , [string] ) [EOL] [EOL] def test_parse_forward_slash ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsKey . parse , [string] ) [EOL] [EOL] def test_parse_number_vendor ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsKey . parse , [string] ) [EOL] [EOL] def test_parse_empty_vendor ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsKey . parse , [string] ) [EOL] [EOL] def test_parse_space ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsKey . parse , [string] ) [EOL] [EOL] def test_parse_trailing_space ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsKey . parse , [string] ) [EOL] [EOL] def test_parse_leading_space ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsKey . parse , [string] ) [EOL] [EOL] def test_parse_covering_space ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsKey . parse , [string] ) [EOL] [EOL] def test_parse_middle_space ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsKey . parse , [string] ) [EOL] [EOL] def test_parse_period ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsKey . parse , [string] ) [EOL] [EOL] def test_parse_key_leading_period ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsKey . parse , [string] ) [EOL] [EOL] def test_parse_key_trailing_period ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsKey . parse , [string] ) [EOL] [EOL] def test_parse_key_covering_period ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsKey . parse , [string] ) [EOL] [EOL] def test_parse_key_containing_period ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsKey . parse , [string] ) [EOL] [EOL] def test_parse_vendor_period ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsKey . parse , [string] ) [EOL] [EOL] def test_parse_vendor_leading_period ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsKey . parse , [string] ) [EOL] [EOL] def test_parse_vendor_trailing_period ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsKey . parse , [string] ) [EOL] [EOL] def test_parse_vendor_surrounding_period ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsKey . parse , [string] ) [EOL] [EOL] def test_parse_vendor_multiple_leading_period ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsKey . parse , [string] ) [EOL] [EOL] def test_parse_vendor_multiple_trailing_period ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsKey . parse , [string] ) [EOL] [EOL] def test_parse_vendor_multiple_convering_period ( self ) : [EOL] self . assertRaises ( ValueError , IrcMessageTagsKey . parse , [string] ) [EOL] [EOL] def test_parse ( self ) : [EOL] self . assertEqual ( IrcMessageTagsKey . parse ( [string] ) , ParsedKeyVendor ( [string] , None ) ) [EOL] [EOL] def test_parse_key ( self ) : [EOL] self . assertEqual ( IrcMessageTagsKey . parse ( [string] ) , ParsedKeyVendor ( [string] , None ) ) [EOL] [EOL] def test_parse_key_vendor ( self ) : [EOL] self . assertEqual ( IrcMessageTagsKey . parse ( [string] ) , ParsedKeyVendor ( [string] , [string] ) ) [EOL] [EOL] def test_parse_key_venor_domain ( self ) : [EOL] self . assertEqual ( IrcMessageTagsKey . parse ( [string] ) , ParsedKeyVendor ( [string] , [string] ) ) [EOL] [EOL] def test_from_str_vendor ( self ) : [EOL] key = IrcMessageTagsKey . fromKeyVendor ( [string] ) [EOL] self . assertEqual ( key . vendor , [string] ) [EOL] self . assertEqual ( key . key , [string] ) [EOL] [EOL] def test_from_str_key_vendor ( self ) : [EOL] key = IrcMessageTagsKey . fromKeyVendor ( [string] ) [EOL] self . assertEqual ( key . vendor , [string] ) [EOL] self . assertEqual ( key . key , [string] ) [EOL] [EOL] def test_from_str_key_vendor_domain ( self ) : [EOL] key = IrcMessageTagsKey . fromKeyVendor ( [string] ) [EOL] self . assertEqual ( key . vendor , [string] ) [EOL] self . assertEqual ( key . key , [string] ) [EOL]	
import asyncio [EOL] import unittest [EOL] from datetime import datetime [EOL] [EOL] import asynctest [EOL] from asynctest . mock import MagicMock , Mock , patch [EOL] [EOL] from bot . data import Channel [EOL] from bot . data . _error import LoginUnsuccessful [EOL] from bot . twitchmessage import IrcMessageTags [EOL] from lib . cache import CacheStore [EOL] from lib . ircmessage import clearchat , notice , userstate [EOL] [EOL] [EOL] class TestUserState ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_globals = patcher . start ( ) [EOL] self . cache = datetime ( [number] , [number] , [number] ) [EOL] self . mock_globals . emoteset = [ [number] ] [EOL] self . mock_globals . globalEmotesCache = self . cache [EOL] self . tags = IrcMessageTags ( IrcMessageTags . parseTags ( [string] [string] ) ) [EOL] self . channel = Mock ( spec = Channel ) [EOL] self . channel . isMod = False [EOL] self . channel . isSubscriber = False [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_handle_emote = patcher . start ( ) [EOL] [EOL] def test_parse ( self ) : [EOL] userstate . parse ( self . channel , self . tags ) [EOL] self . assertEqual ( self . mock_globals . displayName , [string] ) [EOL] self . assertIs ( self . mock_globals . isTwitchStaff , False ) [EOL] self . assertIs ( self . mock_globals . isTwitchAdmin , False ) [EOL] self . assertIs ( self . mock_globals . isGlobalMod , False ) [EOL] self . assertIs ( self . channel . isMod , False ) [EOL] self . assertIs ( self . channel . isSubscriber , False ) [EOL] [EOL] def test_parse_twitch_staff ( self ) : [EOL] self . tags [ [string] ] = [string] [EOL] userstate . parse ( self . channel , self . tags ) [EOL] self . assertIs ( self . mock_globals . isTwitchStaff , True ) [EOL] self . assertIs ( self . mock_globals . isTwitchAdmin , True ) [EOL] self . assertIs ( self . mock_globals . isGlobalMod , True ) [EOL] self . assertIs ( self . channel . isMod , True ) [EOL] self . assertIs ( self . channel . isSubscriber , False ) [EOL] [EOL] def test_parse_twitch_admin ( self ) : [EOL] self . tags [ [string] ] = [string] [EOL] userstate . parse ( self . channel , self . tags ) [EOL] self . assertIs ( self . mock_globals . isTwitchStaff , False ) [EOL] self . assertIs ( self . mock_globals . isTwitchAdmin , True ) [EOL] self . assertIs ( self . mock_globals . isGlobalMod , True ) [EOL] self . assertIs ( self . channel . isMod , True ) [EOL] self . assertIs ( self . channel . isSubscriber , False ) [EOL] [EOL] def test_parse_global_mod ( self ) : [EOL] self . tags [ [string] ] = [string] [EOL] userstate . parse ( self . channel , self . tags ) [EOL] self . assertIs ( self . mock_globals . isTwitchStaff , False ) [EOL] self . assertIs ( self . mock_globals . isTwitchAdmin , False ) [EOL] self . assertIs ( self . mock_globals . isGlobalMod , True ) [EOL] self . assertIs ( self . channel . isMod , True ) [EOL] self . assertIs ( self . channel . isSubscriber , False ) [EOL] [EOL] def test_parse_moderator ( self ) : [EOL] self . tags [ [string] ] = [string] [EOL] self . tags [ [string] ] = [string] [EOL] userstate . parse ( self . channel , self . tags ) [EOL] self . assertIs ( self . mock_globals . isTwitchStaff , False ) [EOL] self . assertIs ( self . mock_globals . isTwitchAdmin , False ) [EOL] self . assertIs ( self . mock_globals . isGlobalMod , False ) [EOL] self . assertIs ( self . channel . isMod , True ) [EOL] self . assertIs ( self . channel . isSubscriber , False ) [EOL] [EOL] def test_parse_subscriber ( self ) : [EOL] self . tags [ [string] ] = [string] [EOL] userstate . parse ( self . channel , self . tags ) [EOL] self . assertIs ( self . channel . isSubscriber , True ) [EOL] [EOL] def test_parse_emote_sets ( self ) : [EOL] self . tags [ [string] ] = [string] [EOL] userstate . parse ( self . channel , self . tags ) [EOL] self . mock_handle_emote . assert_called_once_with ( { [number] } ) [EOL] [EOL] def test_parse_emote_sets_changed ( self ) : [EOL] self . tags [ [string] ] = [string] [EOL] userstate . parse ( self . channel , self . tags ) [EOL] self . mock_handle_emote . assert_called_once_with ( { [number] , [number] } ) [EOL] [EOL] def test_parse_emote_sets_turbo_special ( self ) : [EOL] self . tags [ [string] ] = [string] [EOL] userstate . parse ( self . channel , self . tags ) [EOL] self . mock_handle_emote . assert_called_once_with ( { [number] } ) [EOL] [EOL] def test_parse_emote_sets_empty ( self ) : [EOL] del self . tags [ [string] ] [EOL] userstate . parse ( self . channel , self . tags ) [EOL] self . assertFalse ( self . mock_handle_emote . called ) [EOL] [EOL] def test_parse_channel_none ( self ) : [EOL] self . tags [ [string] ] = [string] [EOL] userstate . parse ( None , self . tags ) [EOL] self . assertEqual ( self . mock_globals . displayName , [string] ) [EOL] self . assertIs ( self . mock_globals . isTwitchStaff , True ) [EOL] self . assertIs ( self . mock_globals . isTwitchAdmin , True ) [EOL] self . assertIs ( self . mock_globals . isGlobalMod , True ) [EOL] self . assertIs ( self . channel . isMod , False ) [EOL] self . assertIs ( self . channel . isSubscriber , False ) [EOL] [EOL] def test_parse_tags_none ( self ) : [EOL] userstate . parse ( self . channel , None ) [EOL] [EOL] [EOL] class TestUserStateHandleEmote ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . data = MagicMock ( spec = CacheStore ) [EOL] self . data . __aenter__ . return_value = self . data [EOL] self . data . __aexit__ . return_value = False [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_data = patcher . start ( ) [EOL] self . mock_data . return_value = self . data [EOL] [EOL] async def test ( self ) : [EOL] await userstate . handle_emote_set ( { [number] } ) [EOL] self . assertTrue ( self . data . twitch_load_emotes . called ) [EOL] [EOL] async def test_multiple ( self ) : [EOL] async def wait ( * args , ** kwargs ) : [EOL] await asyncio . sleep ( [number] ) [EOL] return { [number] } [EOL] [EOL] async def call_0 ( ) : [EOL] await userstate . handle_emote_set ( { [number] } ) [EOL] [EOL] async def call_1 ( ) : [EOL] await asyncio . sleep ( [number] ) [EOL] await userstate . handle_emote_set ( { [number] } ) [EOL] [EOL] self . data . twitch_load_emotes . side_effect = wait [EOL] await asyncio . gather ( call_0 ( ) , call_1 ( ) ) [EOL] self . assertEqual ( self . data . twitch_load_emotes . call_count , [number] ) [EOL] [EOL] [EOL] class TestClearChat ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_config = patcher . start ( ) [EOL] self . mock_config . botnick = [string] [EOL] self . channel = Mock ( spec = Channel ) [EOL] self . channel . isMod = True [EOL] [EOL] def test ( self ) : [EOL] clearchat . parse ( self . channel , [string] ) [EOL] self . assertIs ( self . channel . isMod , False ) [EOL] self . channel . clear . assert_called_once_with ( ) [EOL] [EOL] def test_channel_None ( self ) : [EOL] clearchat . parse ( None , [string] ) [EOL] self . assertIs ( self . channel . isMod , True ) [EOL] self . assertFalse ( self . channel . clear . called ) [EOL] [EOL] def test_nick_None ( self ) : [EOL] clearchat . parse ( self . channel , None ) [EOL] self . assertIs ( self . channel . isMod , True ) [EOL] self . assertFalse ( self . channel . clear . called ) [EOL] [EOL] def test_nick_not_bot ( self ) : [EOL] clearchat . parse ( self . channel , [string] ) [EOL] self . assertIs ( self . channel . isMod , True ) [EOL] self . assertFalse ( self . channel . clear . called ) [EOL] [EOL] [EOL] class TestNotice ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . channel = Mock ( spec = Channel ) [EOL] self . channel . isMod = True [EOL] [EOL] def test_invalid_login ( self ) : [EOL] self . assertRaises ( LoginUnsuccessful , notice . parse , None , None , None , [string] ) [EOL] [EOL] def test_sending_messages_quickly ( self ) : [EOL] tags = IrcMessageTags ( IrcMessageTags . parseTags ( [string] ) ) [EOL] notice . parse ( tags , self . channel , None , [string] [string] ) [EOL] self . assertIs ( self . channel . isMod , False ) [EOL] self . assertFalse ( self . channel . clear . called ) [EOL] [EOL] def test_None ( self ) : [EOL] notice . parse ( None , None , None , None ) [EOL]	
import unittest [EOL] from lib . api import oauth [EOL] from lib . database import DatabaseOAuth [EOL] from unittest . mock import MagicMock , Mock , patch [EOL] [EOL] [EOL] class TestApiOAuth ( unittest . TestCase ) : [EOL] @ patch . object ( DatabaseOAuth , [string] ) def fail_test_token ( self , mock_getDatabase ) : [EOL] mock_getDatabase . return_value = MagicMock ( ) [EOL] mock_database = Mock ( spec = DatabaseOAuth ) [EOL] mock_database . getOAuthToken . return_value = [string] [EOL] mock_getDatabase . return_value . __aenter__ . return_value = mock_database [EOL] self . assertEqual ( oauth . token ( [string] ) , [string] ) [EOL] mock_database . getOAuthToken . assert_called_once_with ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import unittest [EOL] from datetime import timedelta [EOL] from lib . data import timedelta as mtimedelta [EOL] [EOL] [EOL] class TestDataTimeDelta ( unittest . TestCase ) : [EOL] def test_format_none ( self ) : [EOL] self . assertRaises ( TypeError , mtimedelta . format , None ) [EOL] [EOL] def test_format_one_second ( self ) : [EOL] self . assertEqual ( mtimedelta . format ( timedelta ( seconds = [number] ) ) , [string] ) [EOL] [EOL] def test_format_two_seconds ( self ) : [EOL] self . assertEqual ( mtimedelta . format ( timedelta ( seconds = [number] ) ) , [string] ) [EOL] [EOL] def test_format_sixty_seconds ( self ) : [EOL] self . assertEqual ( mtimedelta . format ( timedelta ( seconds = [number] ) ) , [string] ) [EOL] [EOL] def test_format_one_minute ( self ) : [EOL] self . assertEqual ( mtimedelta . format ( timedelta ( minutes = [number] ) ) , [string] ) [EOL] [EOL] def test_format_two_minutes ( self ) : [EOL] self . assertEqual ( mtimedelta . format ( timedelta ( minutes = [number] ) ) , [string] ) [EOL] [EOL] def test_format_sixty_minutes ( self ) : [EOL] self . assertEqual ( mtimedelta . format ( timedelta ( minutes = [number] ) ) , [string] ) [EOL] [EOL] def test_format_one_hour ( self ) : [EOL] self . assertEqual ( mtimedelta . format ( timedelta ( hours = [number] ) ) , [string] ) [EOL] [EOL] def test_format_two_hours ( self ) : [EOL] self . assertEqual ( mtimedelta . format ( timedelta ( hours = [number] ) ) , [string] ) [EOL] [EOL] def test_format_twenty_four_hours ( self ) : [EOL] self . assertEqual ( mtimedelta . format ( timedelta ( hours = [number] ) ) , [string] ) [EOL] [EOL] def test_format_one_day ( self ) : [EOL] self . assertEqual ( mtimedelta . format ( timedelta ( days = [number] ) ) , [string] ) [EOL] [EOL] def test_format_two_days ( self ) : [EOL] self . assertEqual ( mtimedelta . format ( timedelta ( days = [number] ) ) , [string] ) [EOL] [EOL] def test_format_seven_days ( self ) : [EOL] self . assertEqual ( mtimedelta . format ( timedelta ( days = [number] ) ) , [string] ) [EOL] [EOL] def test_format_second_minute_hour_day ( self ) : [EOL] self . assertEqual ( mtimedelta . format ( timedelta ( seconds = [number] , minutes = [number] , hours = [number] , days = [number] ) ) , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import unittest [EOL] from unittest . mock import patch [EOL] [EOL] from lib . helper import textformat [EOL] [EOL] [EOL] def translate ( text ) : [EOL] return text [EOL] [EOL] [EOL] class TestLibraryTextToFormat ( unittest . TestCase ) : [EOL] def test ( self ) : [EOL] to = ( [string] [string] [string] [string] [string] [string] [string] ) [EOL] trans = textformat . _createAsciiTo ( [string] , to ) [EOL] self . assertEqual ( trans ( [string] ) , [string] ) [EOL] self . assertEqual ( trans ( [string] ) , [string] ) [EOL] self . assertEqual ( trans ( [string] ) , [string] ) [EOL] [EOL] def test_upper ( self ) : [EOL] self . assertEqual ( textformat . to_upper ( [string] ) , [string] ) [EOL] self . assertEqual ( textformat . to_upper ( [string] ) , [string] ) [EOL] [EOL] def test_lower ( self ) : [EOL] self . assertEqual ( textformat . to_lower ( [string] ) , [string] ) [EOL] self . assertEqual ( textformat . to_lower ( [string] ) , [string] ) [EOL] [EOL] def test_full ( self ) : [EOL] self . assertEqual ( textformat . to_full_width ( [string] ) , [string] ) [EOL] self . assertEqual ( textformat . to_full_width ( [string] ) , [string] ) [EOL] [EOL] def test_parenthesized ( self ) : [EOL] self . assertEqual ( textformat . to_parenthesized ( [string] ) , [string] ) [EOL] self . assertEqual ( textformat . to_parenthesized ( [string] ) , [string] ) [EOL] [EOL] def test_circled ( self ) : [EOL] self . assertEqual ( textformat . to_circled ( [string] ) , [string] ) [EOL] self . assertEqual ( textformat . to_circled ( [string] ) , [string] ) [EOL] [EOL] def test_small_caps ( self ) : [EOL] self . assertEqual ( textformat . to_small_caps ( [string] ) , [string] ) [EOL] self . assertEqual ( textformat . to_small_caps ( [string] ) , [string] ) [EOL] [EOL] def test_upside_down ( self ) : [EOL] self . assertEqual ( textformat . to_upside_down ( [string] ) , [string] ) [EOL] self . assertEqual ( textformat . to_upside_down ( [string] ) , [string] ) [EOL] [EOL] def test_serif_bold ( self ) : [EOL] self . assertEqual ( textformat . to_serif_bold ( [string] ) , [string] ) [EOL] self . assertEqual ( textformat . to_serif_bold ( [string] ) , [string] ) [EOL] [EOL] def test_serif_italic ( self ) : [EOL] self . assertEqual ( textformat . to_serif_italic ( [string] ) , [string] ) [EOL] self . assertEqual ( textformat . to_serif_italic ( [string] ) , [string] ) [EOL] [EOL] def test_serif_bold_italic ( self ) : [EOL] self . assertEqual ( textformat . to_serif_bold_italic ( [string] ) , [string] ) [EOL] self . assertEqual ( textformat . to_serif_bold_italic ( [string] ) , [string] ) [EOL] [EOL] def test_sanserif ( self ) : [EOL] self . assertEqual ( textformat . to_sanserif ( [string] ) , [string] ) [EOL] self . assertEqual ( textformat . to_sanserif ( [string] ) , [string] ) [EOL] [EOL] def test_sanserif_bold ( self ) : [EOL] self . assertEqual ( textformat . to_sanserif_bold ( [string] ) , [string] ) [EOL] self . assertEqual ( textformat . to_sanserif_bold ( [string] ) , [string] ) [EOL] [EOL] def test_sanserif_italic ( self ) : [EOL] self . assertEqual ( textformat . to_sanserif_italic ( [string] ) , [string] ) [EOL] self . assertEqual ( textformat . to_sanserif_italic ( [string] ) , [string] ) [EOL] [EOL] def test_sanserif_bold_italic ( self ) : [EOL] self . assertEqual ( textformat . to_sanserif_bold_italic ( [string] ) , [string] ) [EOL] self . assertEqual ( textformat . to_sanserif_bold_italic ( [string] ) , [string] ) [EOL] [EOL] def test_script ( self ) : [EOL] self . assertEqual ( textformat . to_script ( [string] ) , [string] ) [EOL] self . assertEqual ( textformat . to_script ( [string] ) , [string] ) [EOL] [EOL] def test_script_bold ( self ) : [EOL] self . assertEqual ( textformat . to_script_bold ( [string] ) , [string] ) [EOL] self . assertEqual ( textformat . to_script_bold ( [string] ) , [string] ) [EOL] [EOL] def test_fraktur ( self ) : [EOL] self . assertEqual ( textformat . to_fraktur ( [string] ) , [string] ) [EOL] self . assertEqual ( textformat . to_fraktur ( [string] ) , [string] ) [EOL] [EOL] def test_fraktur_bold ( self ) : [EOL] self . assertEqual ( textformat . to_fraktur_bold ( [string] ) , [string] ) [EOL] self . assertEqual ( textformat . to_fraktur_bold ( [string] ) , [string] ) [EOL] [EOL] def test_monospace ( self ) : [EOL] self . assertEqual ( textformat . to_monospace ( [string] ) , [string] ) [EOL] self . assertEqual ( textformat . to_monospace ( [string] ) , [string] ) [EOL] [EOL] def test_double_struck ( self ) : [EOL] self . assertEqual ( textformat . to_double_struck ( [string] ) , [string] ) [EOL] self . assertEqual ( textformat . to_double_struck ( [string] ) , [string] ) [EOL] [EOL] def test_ascii ( self ) : [EOL] self . assertEqual ( textformat . to_ascii ( [string] ) , [string] * [number] + [string] ) [EOL] self . assertEqual ( textformat . to_ascii ( [string] ) , [string] * [number] ) [EOL] self . assertEqual ( textformat . to_ascii ( [string] ) , [string] ) [EOL] self . assertEqual ( textformat . to_ascii ( [string] ) , [string] ) [EOL] [EOL] [EOL] class TestLibraryTextFormat ( unittest . TestCase ) : [EOL] def test_blank ( self ) : [EOL] self . assertEqual ( textformat . format ( [string] , [string] ) , [string] ) [EOL] self . assertEqual ( textformat . format ( [string] , [string] ) , [string] ) [EOL] [EOL] @ patch ( [string] , autospec = True , side_effect = translate ) def test_ascii ( self , mock_to ) : [EOL] self . assertEqual ( textformat . format ( [string] , [string] ) , [string] ) [EOL] mock_to . assert_called_once_with ( [string] ) [EOL] mock_to . reset_mock ( ) [EOL] self . assertEqual ( textformat . format ( [string] , [string] ) , [string] ) [EOL] mock_to . assert_called_once_with ( [string] ) [EOL] mock_to . reset_mock ( ) [EOL] self . assertEqual ( textformat . format ( [string] , [string] ) , [string] ) [EOL] mock_to . assert_called_once_with ( [string] ) [EOL] [EOL] @ patch ( [string] , autospec = True , side_effect = translate ) def test_upper ( self , mock_to ) : [EOL] self . assertEqual ( textformat . format ( [string] , [string] ) , [string] ) [EOL] mock_to . assert_called_once_with ( [string] ) [EOL] [EOL] @ patch ( [string] , autospec = True , side_effect = translate ) def test_lower ( self , mock_to ) : [EOL] self . assertEqual ( textformat . format ( [string] , [string] ) , [string] ) [EOL] mock_to . assert_called_once_with ( [string] ) [EOL] [EOL] @ patch ( [string] , autospec = True , side_effect = translate ) def test_full ( self , mock_to ) : [EOL] self . assertEqual ( textformat . format ( [string] , [string] ) , [string] ) [EOL] mock_to . assert_called_once_with ( [string] ) [EOL] [EOL] @ patch ( [string] , autospec = True , side_effect = translate ) def test_parenthesized ( self , mock_to ) : [EOL] self . assertEqual ( textformat . format ( [string] , [string] ) , [string] ) [EOL] mock_to . assert_called_once_with ( [string] ) [EOL] [EOL] @ patch ( [string] , autospec = True , side_effect = translate ) def test_circled ( self , mock_to ) : [EOL] self . assertEqual ( textformat . format ( [string] , [string] ) , [string] ) [EOL] mock_to . assert_called_once_with ( [string] ) [EOL] [EOL] @ patch ( [string] , autospec = True , side_effect = translate ) def test_smallcaps ( self , mock_to ) : [EOL] self . assertEqual ( textformat . format ( [string] , [string] ) , [string] ) [EOL] mock_to . assert_called_once_with ( [string] ) [EOL] [EOL] @ patch ( [string] , autospec = True , side_effect = translate ) def test_upsidedown ( self , mock_to ) : [EOL] self . assertEqual ( textformat . format ( [string] , [string] ) , [string] ) [EOL] mock_to . assert_called_once_with ( [string] ) [EOL] [EOL] @ patch ( [string] , autospec = True , side_effect = translate ) def test_serif_bold ( self , mock_to ) : [EOL] self . assertEqual ( textformat . format ( [string] , [string] ) , [string] ) [EOL] mock_to . assert_called_once_with ( [string] ) [EOL] mock_to . reset_mock ( ) [EOL] self . assertEqual ( textformat . format ( [string] , [string] ) , [string] ) [EOL] mock_to . assert_called_once_with ( [string] ) [EOL] [EOL] @ patch ( [string] , autospec = True , side_effect = translate ) def test_serif_italic ( self , mock_to ) : [EOL] self . assertEqual ( textformat . format ( [string] , [string] ) , [string] ) [EOL] mock_to . assert_called_once_with ( [string] ) [EOL] mock_to . reset_mock ( ) [EOL] self . assertEqual ( textformat . format ( [string] , [string] ) , [string] ) [EOL] mock_to . assert_called_once_with ( [string] ) [EOL] [EOL] @ patch ( [string] , autospec = True , side_effect = translate ) def test_serif_bold_italic ( self , mock_to ) : [EOL] formats = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] for format_ in formats : [EOL] self . assertEqual ( textformat . format ( [string] , format_ ) , [string] , format_ ) [EOL] mock_to . assert_called_once_with ( [string] ) [EOL] mock_to . reset_mock ( ) [EOL] [EOL] @ patch ( [string] , autospec = True , side_effect = translate ) def test_sanserif ( self , mock_to ) : [EOL] self . assertEqual ( textformat . format ( [string] , [string] ) , [string] ) [EOL] mock_to . assert_called_once_with ( [string] ) [EOL] [EOL] @ patch ( [string] , autospec = True , side_effect = translate ) def test_sanserif_bold ( self , mock_to ) : [EOL] self . assertEqual ( textformat . format ( [string] , [string] ) , [string] ) [EOL] mock_to . assert_called_once_with ( [string] ) [EOL] mock_to . reset_mock ( ) [EOL] self . assertEqual ( textformat . format ( [string] , [string] ) , [string] ) [EOL] mock_to . assert_called_once_with ( [string] ) [EOL] [EOL] @ patch ( [string] , autospec = True , side_effect = translate ) def test_sanserif_italic ( self , mock_to ) : [EOL] self . assertEqual ( textformat . format ( [string] , [string] ) , [string] ) [EOL] mock_to . assert_called_once_with ( [string] ) [EOL] mock_to . reset_mock ( ) [EOL] self . assertEqual ( textformat . format ( [string] , [string] ) , [string] ) [EOL] mock_to . assert_called_once_with ( [string] ) [EOL] [EOL] @ patch ( [string] , autospec = True , side_effect = translate ) def test_sanserif_bold_italic ( self , mock_to ) : [EOL] formats = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] for format_ in formats : [EOL] self . assertEqual ( textformat . format ( [string] , format_ ) , [string] , format_ ) [EOL] mock_to . assert_called_once_with ( [string] ) [EOL] mock_to . reset_mock ( ) [EOL] [EOL] @ patch ( [string] , autospec = True , side_effect = translate ) def test_script ( self , mock_to ) : [EOL] self . assertEqual ( textformat . format ( [string] , [string] ) , [string] ) [EOL] mock_to . assert_called_once_with ( [string] ) [EOL] mock_to . reset_mock ( ) [EOL] self . assertEqual ( textformat . format ( [string] , [string] ) , [string] ) [EOL] mock_to . assert_called_once_with ( [string] ) [EOL] mock_to . reset_mock ( ) [EOL] [EOL] @ patch ( [string] , autospec = True , side_effect = translate ) def test_script_bold ( self , mock_to ) : [EOL] self . assertEqual ( textformat . format ( [string] , [string] ) , [string] ) [EOL] mock_to . assert_called_once_with ( [string] ) [EOL] mock_to . reset_mock ( ) [EOL] self . assertEqual ( textformat . format ( [string] , [string] ) , [string] ) [EOL] mock_to . assert_called_once_with ( [string] ) [EOL] mock_to . reset_mock ( ) [EOL] self . assertEqual ( textformat . format ( [string] , [string] ) , [string] ) [EOL] mock_to . assert_called_once_with ( [string] ) [EOL] mock_to . reset_mock ( ) [EOL] self . assertEqual ( textformat . format ( [string] , [string] ) , [string] ) [EOL] mock_to . assert_called_once_with ( [string] ) [EOL] [EOL] @ patch ( [string] , autospec = True , side_effect = translate ) def test_fraktur ( self , mock_to ) : [EOL] self . assertEqual ( textformat . format ( [string] , [string] ) , [string] ) [EOL] mock_to . assert_called_once_with ( [string] ) [EOL] [EOL] @ patch ( [string] , autospec = True , side_effect = translate ) def test_fraktur_bold ( self , mock_to ) : [EOL] self . assertEqual ( textformat . format ( [string] , [string] ) , [string] ) [EOL] mock_to . assert_called_once_with ( [string] ) [EOL] mock_to . reset_mock ( ) [EOL] self . assertEqual ( textformat . format ( [string] , [string] ) , [string] ) [EOL] mock_to . assert_called_once_with ( [string] ) [EOL] [EOL] @ patch ( [string] , autospec = True , side_effect = translate ) def test_monospace ( self , mock_to ) : [EOL] self . assertEqual ( textformat . format ( [string] , [string] ) , [string] ) [EOL] mock_to . assert_called_once_with ( [string] ) [EOL] [EOL] @ patch ( [string] , autospec = True , side_effect = translate ) def test_doublestruck ( self , mock_to ) : [EOL] self . assertEqual ( textformat . format ( [string] , [string] ) , [string] ) [EOL] mock_to . assert_called_once_with ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import unittest [EOL] [EOL] import asynctest [EOL] [EOL] from datetime import datetime [EOL] [EOL] from asynctest . mock import CoroutineMock , MagicMock , Mock , PropertyMock , patch [EOL] [EOL] from bot . twitchmessage import IrcMessageTags [EOL] from lib import whisper [EOL] from lib . cache import CacheStore [EOL] from lib . data . message import Message [EOL] [EOL] [EOL] class TestWhisper ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . tags = IrcMessageTags ( IrcMessageTags . parseTags ( [string] [string] ) ) [EOL] self . now = datetime ( [number] , [number] , [number] ) [EOL] [EOL] @ patch ( [string] ) async def test_parse ( self , mock_whisperCommand ) : [EOL] whisper . parse ( self . tags , [string] , [string] , self . now ) [EOL] self . assertTrue ( mock_whisperCommand . called ) [EOL] [EOL] @ asynctest . fail_on ( unused_loop = False ) @ patch ( [string] ) def test_parse_empty ( self , mock_whisperCommand ) : [EOL] whisper . parse ( self . tags , [string] , [string] , self . now ) [EOL] self . assertFalse ( mock_whisperCommand . called ) [EOL] [EOL] @ asynctest . fail_on ( unused_loop = False ) @ patch ( [string] ) def test_parse_spaces ( self , mock_whisperCommand ) : [EOL] whisper . parse ( self . tags , [string] , [string] , self . now ) [EOL] self . assertFalse ( mock_whisperCommand . called ) [EOL] [EOL] @ patch ( [string] ) @ patch ( [string] , autospec = True ) async def test_whisperCommand ( self , mock_commands , mock_data ) : [EOL] command1 = CoroutineMock ( spec = lambda args : False , return_value = False ) [EOL] command2 = CoroutineMock ( spec = lambda args : False , return_value = True ) [EOL] command3 = CoroutineMock ( spec = lambda args : False , return_value = False ) [EOL] mock_commands . return_value = [ command1 , command2 , command3 ] [EOL] data = MagicMock ( spec = CacheStore ) [EOL] data . __aenter__ . return_value = data [EOL] data . __aexit__ . return_value = True [EOL] mock_data . return_value = data [EOL] message = Mock ( spec = Message ) [EOL] type ( message ) . command = PropertyMock ( return_value = [string] ) [EOL] await whisper . whisperCommand ( self . tags , [string] , message , self . now ) [EOL] self . assertEqual ( data . isBotManager . call_count , [number] ) [EOL] self . assertEqual ( mock_commands . call_count , [number] ) [EOL] self . assertEqual ( command1 . call_count , [number] ) [EOL] self . assertEqual ( command2 . call_count , [number] ) [EOL] self . assertEqual ( command3 . call_count , [number] ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] ) @ patch ( [string] , autospec = True ) async def test_whisperCommand_except ( self , mock_commands , mock_data , mock_log ) : [EOL] command = CoroutineMock ( spec = lambda args : False , side_effect = Exception ) [EOL] mock_commands . return_value = [ command , command ] [EOL] data = MagicMock ( spec = CacheStore ) [EOL] data . __aenter__ . return_value = data [EOL] data . __aexit__ . return_value = False [EOL] mock_data . return_value = data [EOL] message = Mock ( spec = Message ) [EOL] type ( message ) . command = PropertyMock ( return_value = [string] ) [EOL] await whisper . whisperCommand ( self . tags , [string] , message , self . now ) [EOL] self . assertEqual ( data . isBotManager . call_count , [number] ) [EOL] self . assertEqual ( mock_commands . call_count , [number] ) [EOL] self . assertEqual ( command . call_count , [number] ) [EOL] self . assertTrue ( mock_log . called ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] ) @ patch ( [string] , autospec = True ) async def test_whisperCommand_data_except ( self , mock_commands , mock_data , mock_log ) : [EOL] mock_data . side_effect = Exception [EOL] message = Mock ( spec = Message ) [EOL] type ( message ) . command = PropertyMock ( return_value = [string] ) [EOL] await whisper . whisperCommand ( self . tags , [string] , message , self . now ) [EOL] self . assertFalse ( mock_commands . called ) [EOL] self . assertTrue ( mock_log . called ) [EOL] [EOL] [EOL] class TestWhisperCommandToProcess ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_list = patcher . start ( ) [EOL] self . mock_list . commands . return_value = { } [EOL] self . mock_list . commandsStartWith . return_value = { } [EOL] [EOL] self . command1 = lambda args : False [EOL] self . command2 = lambda args : False [EOL] self . command3 = lambda args : False [EOL] [EOL] def test_commandsToProcess_empty ( self ) : [EOL] self . assertEqual ( list ( whisper . commandsToProcess ( [string] ) ) , [ ] ) [EOL] [EOL] def test_commandsToProcess_specific ( self ) : [EOL] self . mock_list . commands . return_value [ [string] ] = self . command1 [EOL] self . assertEqual ( list ( whisper . commandsToProcess ( [string] ) ) , [ self . command1 ] ) [EOL] [EOL] def test_commandsToProcess_specific_no_match ( self ) : [EOL] self . mock_list . commands . return_value [ [string] ] = self . command1 [EOL] self . assertEqual ( list ( whisper . commandsToProcess ( [string] ) ) , [ ] ) [EOL] [EOL] def test_commandsToProcess_specific_none ( self ) : [EOL] self . mock_list . commands . return_value [ [string] ] = None [EOL] self . assertEqual ( list ( whisper . commandsToProcess ( [string] ) ) , [ ] ) [EOL] [EOL] def test_commandsToProcess_startswith ( self ) : [EOL] self . mock_list . commandsStartWith . return_value [ [string] ] = self . command1 [EOL] self . assertEqual ( list ( whisper . commandsToProcess ( [string] ) ) , [ self . command1 ] ) [EOL] [EOL] def test_commandsToProcess_startswith_exact ( self ) : [EOL] self . mock_list . commandsStartWith . return_value [ [string] ] = self . command1 [EOL] self . assertEqual ( list ( whisper . commandsToProcess ( [string] ) ) , [ self . command1 ] ) [EOL] [EOL] def test_commandsToProcess_startswith_none ( self ) : [EOL] self . mock_list . commandsStartWith . return_value [ [string] ] = None [EOL] self . assertEqual ( list ( whisper . commandsToProcess ( [string] ) ) , [ ] ) [EOL] [EOL] def test_commandsToProcess_startswith_no_match ( self ) : [EOL] commands = self . mock_list . commandsStartWith . return_value [EOL] commands [ [string] ] = self . command1 [EOL] self . assertEqual ( list ( whisper . commandsToProcess ( [string] ) ) , [ ] ) [EOL] [EOL] def test_commandsToProcess_startswith_multiple ( self ) : [EOL] self . mock_list . commandsStartWith . return_value [ [string] ] = self . command1 [EOL] self . mock_list . commandsStartWith . return_value [ [string] ] = self . command2 [EOL] self . assertCountEqual ( list ( whisper . commandsToProcess ( [string] ) ) , [ self . command1 , self . command2 ] ) [EOL] [EOL] def test_commandsToProcess_specific_startswith ( self ) : [EOL] self . mock_list . commands . return_value [ [string] ] = self . command1 [EOL] self . mock_list . commandsStartWith . return_value [ [string] ] = self . command2 [EOL] self . mock_list . commandsStartWith . return_value [ [string] ] = self . command3 [EOL] self . assertCountEqual ( list ( whisper . commandsToProcess ( [string] ) ) , [ self . command1 , self . command2 , self . command3 ] ) [EOL]	
import unittest [EOL] from unittest . mock import patch [EOL] [EOL] from lib . helper import message [EOL] [EOL] [EOL] class TestLibraryMessage ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_config = patcher . start ( ) [EOL] self . mock_config . messageLimit = [number] [EOL] [EOL] def test ( self ) : [EOL] self . assertEqual ( list ( message . messagesFromItems ( [ ] ) ) , [ ] ) [EOL] [EOL] def test_one_item ( self ) : [EOL] self . assertEqual ( list ( message . messagesFromItems ( [ [string] ] ) ) , [ [string] ] ) [EOL] [EOL] def test_two_items ( self ) : [EOL] self . assertEqual ( list ( message . messagesFromItems ( [ [string] , [string] ] ) ) , [ [string] ] ) [EOL] [EOL] def test_too_many_items ( self ) : [EOL] self . assertEqual ( list ( message . messagesFromItems ( [ [string] ] * [number] ) ) , [ [string] * [number] + [string] , [string] ] ) [EOL] [EOL] def test_too_many_many_items ( self ) : [EOL] self . assertEqual ( list ( message . messagesFromItems ( [ [string] ] * [number] ) ) , [ [string] * [number] + [string] ] * [number] + [ [string] ] ) [EOL] [EOL] def test_prepend ( self ) : [EOL] self . assertEqual ( list ( message . messagesFromItems ( [ ] , [string] ) ) , [ ] ) [EOL] [EOL] def test_prepend_one_item ( self ) : [EOL] self . assertEqual ( list ( message . messagesFromItems ( [ [string] ] , [string] ) ) , [ [string] ] ) [EOL] [EOL] def test_prepend_too_many_items ( self ) : [EOL] self . assertEqual ( list ( message . messagesFromItems ( [ [string] ] * [number] , [string] ) ) , [ [string] + [string] * [number] + [string] , [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import unittest [EOL] from bot . data import Channel [EOL] from bot . twitchmessage import IrcMessageTags [EOL] from lib . data import permissions [EOL] from unittest . mock import Mock , patch [EOL] [EOL] [EOL] class TestDataChatPermissions ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . tags = IrcMessageTags ( ) [EOL] self . tags [ [string] ] = [string] [EOL] self . tags [ [string] ] = [string] [EOL] self . tags [ [string] ] = [string] [EOL] self . tags [ [string] ] = [string] [EOL] self . tags [ [string] ] = [string] [EOL] self . tags [ [string] ] = [string] [EOL] self . tags [ [string] ] = [string] [EOL] self . tags [ [string] ] = [string] [EOL] self . user = [string] [EOL] self . channel = Mock ( spec = Channel ) [EOL] self . channel . channel = [string] [EOL] self . channel . isMod = False [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_config = patcher . start ( ) [EOL] self . mock_config . botnick = [string] [EOL] self . mock_config . owner = [string] [EOL] [EOL] def test_readonly ( self ) : [EOL] perm = permissions . ChatPermissionSet ( self . tags , self . user , self . channel , False , False ) [EOL] with self . assertRaises ( AttributeError ) : [EOL] perm . owner = True [EOL] with self . assertRaises ( AttributeError ) : [EOL] perm . manager = True [EOL] with self . assertRaises ( AttributeError ) : [EOL] perm . twitchStaff = True [EOL] with self . assertRaises ( AttributeError ) : [EOL] perm . twitchAdmin = True [EOL] with self . assertRaises ( AttributeError ) : [EOL] perm . globalModerator = True [EOL] with self . assertRaises ( AttributeError ) : [EOL] perm . broadcaster = True [EOL] with self . assertRaises ( AttributeError ) : [EOL] perm . moderator = True [EOL] with self . assertRaises ( AttributeError ) : [EOL] perm . subscriber = True [EOL] with self . assertRaises ( AttributeError ) : [EOL] perm . bannable = True [EOL] with self . assertRaises ( AttributeError ) : [EOL] perm . permitted = True [EOL] with self . assertRaises ( AttributeError ) : [EOL] perm . inOwnerChannel = True [EOL] with self . assertRaises ( AttributeError ) : [EOL] perm . chatModerator = True [EOL] [EOL] def test_owner ( self ) : [EOL] self . user = [string] [EOL] perm = permissions . ChatPermissionSet ( self . tags , self . user , self . channel , False , False ) [EOL] self . assertIs ( perm . owner , True ) [EOL] self . assertIs ( perm . manager , True ) [EOL] self . assertIs ( perm . twitchStaff , True ) [EOL] self . assertIs ( perm . twitchAdmin , True ) [EOL] self . assertIs ( perm . globalModerator , True ) [EOL] self . assertIs ( perm . broadcaster , True ) [EOL] self . assertIs ( perm . moderator , True ) [EOL] self . assertIs ( perm . subscriber , True ) [EOL] self . assertIs ( perm . permitted , False ) [EOL] self . assertIs ( perm . bannable , True ) [EOL] [EOL] def test_manager ( self ) : [EOL] perm = permissions . ChatPermissionSet ( self . tags , self . user , self . channel , False , True ) [EOL] self . assertIs ( perm . owner , False ) [EOL] self . assertIs ( perm . manager , True ) [EOL] self . assertIs ( perm . twitchStaff , True ) [EOL] self . assertIs ( perm . twitchAdmin , True ) [EOL] self . assertIs ( perm . globalModerator , True ) [EOL] self . assertIs ( perm . broadcaster , True ) [EOL] self . assertIs ( perm . moderator , True ) [EOL] self . assertIs ( perm . subscriber , True ) [EOL] self . assertIs ( perm . permitted , False ) [EOL] self . assertIs ( perm . bannable , True ) [EOL] [EOL] def test_staff ( self ) : [EOL] self . tags [ [string] ] = [string] [EOL] perm = permissions . ChatPermissionSet ( self . tags , self . user , self . channel , False , False ) [EOL] self . assertIs ( perm . owner , False ) [EOL] self . assertIs ( perm . manager , False ) [EOL] self . assertIs ( perm . twitchStaff , True ) [EOL] self . assertIs ( perm . twitchAdmin , True ) [EOL] self . assertIs ( perm . globalModerator , True ) [EOL] self . assertIs ( perm . broadcaster , True ) [EOL] self . assertIs ( perm . moderator , True ) [EOL] self . assertIs ( perm . subscriber , True ) [EOL] self . assertIs ( perm . permitted , True ) [EOL] self . assertIs ( perm . bannable , False ) [EOL] [EOL] def test_admin ( self ) : [EOL] self . tags [ [string] ] = [string] [EOL] perm = permissions . ChatPermissionSet ( self . tags , self . user , self . channel , False , False ) [EOL] self . assertIs ( perm . owner , False ) [EOL] self . assertIs ( perm . manager , False ) [EOL] self . assertIs ( perm . twitchStaff , False ) [EOL] self . assertIs ( perm . twitchAdmin , True ) [EOL] self . assertIs ( perm . globalModerator , True ) [EOL] self . assertIs ( perm . broadcaster , True ) [EOL] self . assertIs ( perm . moderator , True ) [EOL] self . assertIs ( perm . subscriber , True ) [EOL] self . assertIs ( perm . permitted , True ) [EOL] self . assertIs ( perm . bannable , False ) [EOL] [EOL] def test_global_mod ( self ) : [EOL] self . tags [ [string] ] = [string] [EOL] perm = permissions . ChatPermissionSet ( self . tags , self . user , self . channel , False , False ) [EOL] self . assertIs ( perm . owner , False ) [EOL] self . assertIs ( perm . manager , False ) [EOL] self . assertIs ( perm . twitchStaff , False ) [EOL] self . assertIs ( perm . twitchAdmin , False ) [EOL] self . assertIs ( perm . globalModerator , True ) [EOL] self . assertIs ( perm . broadcaster , True ) [EOL] self . assertIs ( perm . moderator , True ) [EOL] self . assertIs ( perm . subscriber , True ) [EOL] self . assertIs ( perm . permitted , True ) [EOL] self . assertIs ( perm . bannable , False ) [EOL] [EOL] def test_broadcaster ( self ) : [EOL] self . user = [string] [EOL] perm = permissions . ChatPermissionSet ( self . tags , self . user , self . channel , False , False ) [EOL] self . assertIs ( perm . owner , False ) [EOL] self . assertIs ( perm . manager , False ) [EOL] self . assertIs ( perm . twitchStaff , False ) [EOL] self . assertIs ( perm . twitchAdmin , False ) [EOL] self . assertIs ( perm . globalModerator , False ) [EOL] self . assertIs ( perm . broadcaster , True ) [EOL] self . assertIs ( perm . moderator , True ) [EOL] self . assertIs ( perm . subscriber , True ) [EOL] self . assertIs ( perm . permitted , True ) [EOL] self . assertIs ( perm . bannable , False ) [EOL] [EOL] def test_moderator ( self ) : [EOL] self . tags [ [string] ] = [string] [EOL] self . tags [ [string] ] = [string] [EOL] perm = permissions . ChatPermissionSet ( self . tags , self . user , self . channel , False , False ) [EOL] self . assertIs ( perm . owner , False ) [EOL] self . assertIs ( perm . manager , False ) [EOL] self . assertIs ( perm . twitchStaff , False ) [EOL] self . assertIs ( perm . twitchAdmin , False ) [EOL] self . assertIs ( perm . globalModerator , False ) [EOL] self . assertIs ( perm . broadcaster , False ) [EOL] self . assertIs ( perm . moderator , True ) [EOL] self . assertIs ( perm . subscriber , False ) [EOL] self . assertIs ( perm . permitted , True ) [EOL] self . assertIs ( perm . bannable , False ) [EOL] [EOL] def test_subscriber ( self ) : [EOL] self . tags [ [string] ] = [string] [EOL] perm = permissions . ChatPermissionSet ( self . tags , self . user , self . channel , False , False ) [EOL] self . assertIs ( perm . owner , False ) [EOL] self . assertIs ( perm . manager , False ) [EOL] self . assertIs ( perm . twitchStaff , False ) [EOL] self . assertIs ( perm . twitchAdmin , False ) [EOL] self . assertIs ( perm . globalModerator , False ) [EOL] self . assertIs ( perm . broadcaster , False ) [EOL] self . assertIs ( perm . moderator , False ) [EOL] self . assertIs ( perm . subscriber , True ) [EOL] self . assertIs ( perm . permitted , False ) [EOL] self . assertIs ( perm . bannable , True ) [EOL] [EOL] def test_permittable ( self ) : [EOL] perm = permissions . ChatPermissionSet ( self . tags , self . user , self . channel , True , False ) [EOL] self . assertIs ( perm . owner , False ) [EOL] self . assertIs ( perm . manager , False ) [EOL] self . assertIs ( perm . twitchStaff , False ) [EOL] self . assertIs ( perm . twitchAdmin , False ) [EOL] self . assertIs ( perm . globalModerator , False ) [EOL] self . assertIs ( perm . broadcaster , False ) [EOL] self . assertIs ( perm . moderator , False ) [EOL] self . assertIs ( perm . subscriber , False ) [EOL] self . assertIs ( perm . permitted , True ) [EOL] self . assertIs ( perm . bannable , True ) [EOL] [EOL] def test_bannable_true ( self ) : [EOL] perm = permissions . ChatPermissionSet ( self . tags , self . user , self . channel , False , False ) [EOL] self . assertIs ( perm . owner , False ) [EOL] self . assertIs ( perm . manager , False ) [EOL] self . assertIs ( perm . twitchStaff , False ) [EOL] self . assertIs ( perm . twitchAdmin , False ) [EOL] self . assertIs ( perm . globalModerator , False ) [EOL] self . assertIs ( perm . broadcaster , False ) [EOL] self . assertIs ( perm . moderator , False ) [EOL] self . assertIs ( perm . subscriber , False ) [EOL] self . assertIs ( perm . permitted , False ) [EOL] self . assertIs ( perm . bannable , True ) [EOL] [EOL] def test_bannable_true_owner ( self ) : [EOL] self . user = [string] [EOL] perm = permissions . ChatPermissionSet ( self . tags , self . user , self . channel , False , False ) [EOL] self . assertIs ( perm . owner , True ) [EOL] self . assertIs ( perm . manager , True ) [EOL] self . assertIs ( perm . twitchStaff , True ) [EOL] self . assertIs ( perm . twitchAdmin , True ) [EOL] self . assertIs ( perm . globalModerator , True ) [EOL] self . assertIs ( perm . broadcaster , True ) [EOL] self . assertIs ( perm . moderator , True ) [EOL] self . assertIs ( perm . subscriber , True ) [EOL] self . assertIs ( perm . permitted , False ) [EOL] self . assertIs ( perm . bannable , True ) [EOL] [EOL] def test_bannable_true_manager ( self ) : [EOL] perm = permissions . ChatPermissionSet ( self . tags , self . user , self . channel , False , True ) [EOL] self . assertIs ( perm . owner , False ) [EOL] self . assertIs ( perm . manager , True ) [EOL] self . assertIs ( perm . twitchStaff , True ) [EOL] self . assertIs ( perm . twitchAdmin , True ) [EOL] self . assertIs ( perm . globalModerator , True ) [EOL] self . assertIs ( perm . broadcaster , True ) [EOL] self . assertIs ( perm . moderator , True ) [EOL] self . assertIs ( perm . subscriber , True ) [EOL] self . assertIs ( perm . permitted , False ) [EOL] self . assertIs ( perm . bannable , True ) [EOL] [EOL] def test_bannable_false_broadcaster ( self ) : [EOL] self . user = [string] [EOL] perm = permissions . ChatPermissionSet ( self . tags , self . user , self . channel , False , False ) [EOL] self . assertIs ( perm . owner , False ) [EOL] self . assertIs ( perm . manager , False ) [EOL] self . assertIs ( perm . twitchStaff , False ) [EOL] self . assertIs ( perm . twitchAdmin , False ) [EOL] self . assertIs ( perm . globalModerator , False ) [EOL] self . assertIs ( perm . broadcaster , True ) [EOL] self . assertIs ( perm . moderator , True ) [EOL] self . assertIs ( perm . subscriber , True ) [EOL] self . assertIs ( perm . permitted , True ) [EOL] self . assertIs ( perm . bannable , False ) [EOL] [EOL] def test_bannable_false_owner_broadcaster ( self ) : [EOL] self . user = [string] [EOL] self . channel . channel = [string] [EOL] perm = permissions . ChatPermissionSet ( self . tags , self . user , self . channel , False , False ) [EOL] self . assertIs ( perm . owner , True ) [EOL] self . assertIs ( perm . manager , True ) [EOL] self . assertIs ( perm . twitchStaff , True ) [EOL] self . assertIs ( perm . twitchAdmin , True ) [EOL] self . assertIs ( perm . globalModerator , True ) [EOL] self . assertIs ( perm . broadcaster , True ) [EOL] self . assertIs ( perm . moderator , True ) [EOL] self . assertIs ( perm . subscriber , True ) [EOL] self . assertIs ( perm . permitted , True ) [EOL] self . assertIs ( perm . bannable , False ) [EOL] [EOL] def test_bannable_false_manager_broadcaster ( self ) : [EOL] self . user = [string] [EOL] self . channel . channel = [string] [EOL] perm = permissions . ChatPermissionSet ( self . tags , self . user , self . channel , False , True ) [EOL] self . assertIs ( perm . owner , False ) [EOL] self . assertIs ( perm . manager , True ) [EOL] self . assertIs ( perm . twitchStaff , True ) [EOL] self . assertIs ( perm . twitchAdmin , True ) [EOL] self . assertIs ( perm . globalModerator , True ) [EOL] self . assertIs ( perm . broadcaster , True ) [EOL] self . assertIs ( perm . moderator , True ) [EOL] self . assertIs ( perm . subscriber , True ) [EOL] self . assertIs ( perm . permitted , True ) [EOL] self . assertIs ( perm . bannable , False ) [EOL] [EOL] def test_bannable_false_moderator ( self ) : [EOL] self . tags [ [string] ] = [string] [EOL] self . tags [ [string] ] = [string] [EOL] perm = permissions . ChatPermissionSet ( self . tags , self . user , self . channel , False , False ) [EOL] self . assertIs ( perm . owner , False ) [EOL] self . assertIs ( perm . manager , False ) [EOL] self . assertIs ( perm . twitchStaff , False ) [EOL] self . assertIs ( perm . twitchAdmin , False ) [EOL] self . assertIs ( perm . globalModerator , False ) [EOL] self . assertIs ( perm . broadcaster , False ) [EOL] self . assertIs ( perm . moderator , True ) [EOL] self . assertIs ( perm . subscriber , False ) [EOL] self . assertIs ( perm . permitted , True ) [EOL] self . assertIs ( perm . bannable , False ) [EOL] [EOL] def test_no_permission ( self ) : [EOL] perm = permissions . ChatPermissionSet ( self . tags , self . user , self . channel , False , False ) [EOL] self . assertIs ( perm . owner , False ) [EOL] self . assertIs ( perm . manager , False ) [EOL] self . assertIs ( perm . twitchStaff , False ) [EOL] self . assertIs ( perm . twitchAdmin , False ) [EOL] self . assertIs ( perm . globalModerator , False ) [EOL] self . assertIs ( perm . broadcaster , False ) [EOL] self . assertIs ( perm . moderator , False ) [EOL] self . assertIs ( perm . subscriber , False ) [EOL] self . assertIs ( perm . bannable , True ) [EOL] [EOL] def test_not_in_owner_channel ( self ) : [EOL] perm = permissions . ChatPermissionSet ( self . tags , self . user , self . channel , False , False ) [EOL] self . assertIs ( perm . inOwnerChannel , False ) [EOL] [EOL] def test_in_owner_channel_owner ( self ) : [EOL] self . channel . channel = [string] [EOL] perm = permissions . ChatPermissionSet ( self . tags , self . user , self . channel , False , False ) [EOL] self . assertIs ( perm . inOwnerChannel , True ) [EOL] [EOL] def test_in_owner_channel_bot ( self ) : [EOL] self . channel . channel = [string] [EOL] perm = permissions . ChatPermissionSet ( self . tags , self . user , self . channel , False , False ) [EOL] self . assertIs ( perm . inOwnerChannel , True ) [EOL] [EOL] def test_chatModerator ( self ) : [EOL] perm = permissions . ChatPermissionSet ( self . tags , self . user , self . channel , False , False ) [EOL] self . assertIs ( perm . chatModerator , False ) [EOL] [EOL] def test_not_chatModerator ( self ) : [EOL] self . channel . isMod = True [EOL] perm = permissions . ChatPermissionSet ( self . tags , self . user , self . channel , False , False ) [EOL] self . assertIs ( perm . chatModerator , True ) [EOL] [EOL] def test_getitem_except ( self ) : [EOL] perm = permissions . ChatPermissionSet ( self . tags , self . user , self . channel , False , False ) [EOL] with self . assertRaises ( KeyError ) : [EOL] perm [ [string] ] [EOL] with self . assertRaises ( TypeError ) : [EOL] perm [ [string] ] = True [EOL] [EOL] def test_getitem_true ( self ) : [EOL] self . user = [string] [EOL] self . channel . channel = [string] [EOL] self . channel . isMod = True [EOL] perm = permissions . ChatPermissionSet ( self . tags , self . user , self . channel , True , True ) [EOL] self . assertIs ( perm [ [string] ] , True ) [EOL] self . assertIs ( perm [ [string] ] , True ) [EOL] self . assertIs ( perm [ [string] ] , True ) [EOL] self . assertIs ( perm [ [string] ] , True ) [EOL] self . assertIs ( perm [ [string] ] , True ) [EOL] self . assertIs ( perm [ [string] ] , True ) [EOL] self . assertIs ( perm [ [string] ] , True ) [EOL] self . assertIs ( perm [ [string] ] , True ) [EOL] self . assertIs ( perm [ [string] ] , True ) [EOL] self . assertIs ( perm [ [string] ] , True ) [EOL] self . assertIs ( perm [ [string] ] , True ) [EOL] self . assertIs ( perm [ [string] ] , True ) [EOL] self . assertIs ( perm [ [string] ] , True ) [EOL] self . assertIs ( perm [ [string] ] , True ) [EOL] self . assertIs ( perm [ [string] ] , True ) [EOL] self . assertIs ( perm [ [string] ] , True ) [EOL] self . assertIs ( perm [ [string] ] , False ) [EOL] [EOL] def test_getitem_false ( self ) : [EOL] perm = permissions . ChatPermissionSet ( self . tags , self . user , self . channel , False , False ) [EOL] self . assertIs ( perm [ [string] ] , False ) [EOL] self . assertIs ( perm [ [string] ] , False ) [EOL] self . assertIs ( perm [ [string] ] , False ) [EOL] self . assertIs ( perm [ [string] ] , False ) [EOL] self . assertIs ( perm [ [string] ] , False ) [EOL] self . assertIs ( perm [ [string] ] , False ) [EOL] self . assertIs ( perm [ [string] ] , False ) [EOL] self . assertIs ( perm [ [string] ] , False ) [EOL] self . assertIs ( perm [ [string] ] , False ) [EOL] self . assertIs ( perm [ [string] ] , False ) [EOL] self . assertIs ( perm [ [string] ] , False ) [EOL] self . assertIs ( perm [ [string] ] , False ) [EOL] self . assertIs ( perm [ [string] ] , False ) [EOL] self . assertIs ( perm [ [string] ] , False ) [EOL] self . assertIs ( perm [ [string] ] , False ) [EOL] self . assertIs ( perm [ [string] ] , False ) [EOL] self . assertIs ( perm [ [string] ] , True ) [EOL] [EOL] def test_tags_None ( self ) : [EOL] perm = permissions . ChatPermissionSet ( None , self . user , self . channel , False , False ) [EOL] self . assertIs ( perm . owner , False ) [EOL] self . assertIs ( perm . manager , False ) [EOL] self . assertIs ( perm . twitchStaff , False ) [EOL] self . assertIs ( perm . twitchAdmin , False ) [EOL] self . assertIs ( perm . globalModerator , False ) [EOL] self . assertIs ( perm . broadcaster , False ) [EOL] self . assertIs ( perm . moderator , False ) [EOL] self . assertIs ( perm . subscriber , False ) [EOL] self . assertIs ( perm . permitted , False ) [EOL] self . assertIs ( perm . bannable , True ) [EOL] [EOL] [EOL] class TestDataWhisperPermissions ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . tags = IrcMessageTags ( ) [EOL] self . tags [ [string] ] = [string] [EOL] self . tags [ [string] ] = [string] [EOL] self . tags [ [string] ] = [string] [EOL] self . tags [ [string] ] = [string] [EOL] self . tags [ [string] ] = [string] [EOL] self . tags [ [string] ] = [string] [EOL] self . tags [ [string] ] = [string] [EOL] self . user = [string] [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_config = patcher . start ( ) [EOL] self . mock_config . owner = [string] [EOL] [EOL] def test_readonly ( self ) : [EOL] perm = permissions . WhisperPermissionSet ( self . tags , self . user , False ) [EOL] with self . assertRaises ( AttributeError ) : [EOL] perm . owner = True [EOL] with self . assertRaises ( AttributeError ) : [EOL] perm . manager = True [EOL] with self . assertRaises ( AttributeError ) : [EOL] perm . twitchStaff = True [EOL] with self . assertRaises ( AttributeError ) : [EOL] perm . twitchAdmin = True [EOL] with self . assertRaises ( AttributeError ) : [EOL] perm . globalModerator = True [EOL] [EOL] def test_owner ( self ) : [EOL] self . user = [string] [EOL] perm = permissions . WhisperPermissionSet ( self . tags , self . user , False ) [EOL] self . assertIs ( perm . owner , True ) [EOL] self . assertIs ( perm . manager , True ) [EOL] self . assertIs ( perm . twitchStaff , True ) [EOL] self . assertIs ( perm . twitchAdmin , True ) [EOL] self . assertIs ( perm . globalModerator , True ) [EOL] [EOL] def test_manager ( self ) : [EOL] perm = permissions . WhisperPermissionSet ( self . tags , self . user , True ) [EOL] self . assertIs ( perm . owner , False ) [EOL] self . assertIs ( perm . manager , True ) [EOL] self . assertIs ( perm . twitchStaff , True ) [EOL] self . assertIs ( perm . twitchAdmin , True ) [EOL] self . assertIs ( perm . globalModerator , True ) [EOL] [EOL] def test_staff ( self ) : [EOL] self . tags [ [string] ] = [string] [EOL] perm = permissions . WhisperPermissionSet ( self . tags , self . user , False ) [EOL] self . assertIs ( perm . owner , False ) [EOL] self . assertIs ( perm . manager , False ) [EOL] self . assertIs ( perm . twitchStaff , True ) [EOL] self . assertIs ( perm . twitchAdmin , True ) [EOL] self . assertIs ( perm . globalModerator , True ) [EOL] [EOL] def test_admin ( self ) : [EOL] self . tags [ [string] ] = [string] [EOL] perm = permissions . WhisperPermissionSet ( self . tags , self . user , False ) [EOL] self . assertIs ( perm . owner , False ) [EOL] self . assertIs ( perm . manager , False ) [EOL] self . assertIs ( perm . twitchStaff , False ) [EOL] self . assertIs ( perm . twitchAdmin , True ) [EOL] self . assertIs ( perm . globalModerator , True ) [EOL] [EOL] def test_global_mod ( self ) : [EOL] self . tags [ [string] ] = [string] [EOL] perm = permissions . WhisperPermissionSet ( self . tags , self . user , False ) [EOL] self . assertIs ( perm . owner , False ) [EOL] self . assertIs ( perm . manager , False ) [EOL] self . assertIs ( perm . twitchStaff , False ) [EOL] self . assertIs ( perm . twitchAdmin , False ) [EOL] self . assertIs ( perm . globalModerator , True ) [EOL] [EOL] def test_no_permission ( self ) : [EOL] perm = permissions . WhisperPermissionSet ( self . tags , self . user , False ) [EOL] self . assertIs ( perm . owner , False ) [EOL] self . assertIs ( perm . manager , False ) [EOL] self . assertIs ( perm . twitchStaff , False ) [EOL] self . assertIs ( perm . twitchAdmin , False ) [EOL] self . assertIs ( perm . globalModerator , False ) [EOL] [EOL] def test_getitem_except ( self ) : [EOL] perm = permissions . WhisperPermissionSet ( self . tags , self . user , False ) [EOL] with self . assertRaises ( KeyError ) : [EOL] perm [ [string] ] [EOL] with self . assertRaises ( TypeError ) : [EOL] perm [ [string] ] = True [EOL] [EOL] def test_getitem_true ( self ) : [EOL] self . user = [string] [EOL] perm = permissions . WhisperPermissionSet ( self . tags , self . user , True ) [EOL] self . assertIs ( perm [ [string] ] , True ) [EOL] self . assertIs ( perm [ [string] ] , True ) [EOL] self . assertIs ( perm [ [string] ] , True ) [EOL] self . assertIs ( perm [ [string] ] , True ) [EOL] self . assertIs ( perm [ [string] ] , True ) [EOL] self . assertIs ( perm [ [string] ] , True ) [EOL] self . assertIs ( perm [ [string] ] , True ) [EOL] self . assertIs ( perm [ [string] ] , True ) [EOL] [EOL] def test_getitem_false ( self ) : [EOL] perm = permissions . WhisperPermissionSet ( self . tags , self . user , False ) [EOL] self . assertIs ( perm [ [string] ] , False ) [EOL] self . assertIs ( perm [ [string] ] , False ) [EOL] self . assertIs ( perm [ [string] ] , False ) [EOL] self . assertIs ( perm [ [string] ] , False ) [EOL] self . assertIs ( perm [ [string] ] , False ) [EOL] self . assertIs ( perm [ [string] ] , False ) [EOL] self . assertIs ( perm [ [string] ] , False ) [EOL] self . assertIs ( perm [ [string] ] , False ) [EOL]	
import asyncio [EOL] import bot [comment] [EOL] import json [EOL] [EOL] import aiohttp [EOL] import asynctest [EOL] [EOL] from datetime import datetime [EOL] from http . client import HTTPResponse [EOL] from lib . api import twitch [EOL] from lib . cache import CacheStore [EOL] from tests . unittest . mock_class import StrContains , TypeMatch [EOL] from asynctest . mock import MagicMock , Mock , patch [EOL] [EOL] chatServers = [string] [EOL] [EOL] twitchEmotes = [string] [EOL] [EOL] twitchEmotesSpecial = [string] [EOL] [EOL] userData = [string] [comment] [EOL] [EOL] numFollowers = [string] [comment] [EOL] [EOL] noStreams = [string] [comment] [EOL] [EOL] multiStreams = [string] [comment] [EOL] [EOL] streams = [string] [comment] [EOL] [EOL] channelProperties = [string] [comment] [EOL] [EOL] [EOL] twitchIdReponse = [string] [comment] [EOL] [EOL] [EOL] speedrunCommunityResponse = [string] . encode ( ) [comment] [EOL] communitiesResponse = [string] . encode ( ) [comment] [EOL] [EOL] [EOL] class TestApiTwitchApiHeaders ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_config = patcher . start ( ) [EOL] self . mock_config . twitchClientId = [string] [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_token = patcher . start ( ) [EOL] self . mock_token . return_value = [string] [EOL] [EOL] async def test_get_headers ( self ) : [EOL] headers = await twitch . get_headers ( { } , [string] ) [EOL] self . mock_token . assert_called_once_with ( [string] ) [EOL] self . assertEqual ( headers , { [string] : [string] , [string] : [string] , [string] : [string] } ) [EOL] [EOL] async def test_get_headers_no_channel ( self ) : [EOL] headers = await twitch . get_headers ( { } , None ) [EOL] self . assertFalse ( self . mock_token . called ) [EOL] self . assertEqual ( headers , { [string] : [string] , [string] : [string] } ) [EOL] [EOL] [EOL] class TestApiTwitchApiCalls ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_headers = patcher . start ( ) [EOL] self . mock_headers . return_value = { } [EOL] [EOL] self . mock_session = MagicMock ( spec = aiohttp . ClientSession ) [EOL] self . mock_session . __aenter__ . return_value = self . mock_session [EOL] self . mock_session . __aexit__ . return_value = False [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_clientsession = patcher . start ( ) [EOL] self . mock_clientsession . return_value = self . mock_session [EOL] [EOL] self . mock_response = MagicMock ( spec = aiohttp . ClientResponse ) [EOL] self . mock_response . __aenter__ . return_value = self . mock_response [EOL] self . mock_response . __aexit__ . return_value = False [EOL] self . mock_response . status = [number] [EOL] self . mock_response . json . return_value = { } [EOL] [EOL] async def test_get_call ( self ) : [EOL] self . mock_session . get . return_value = self . mock_response [EOL] self . assertEqual ( await twitch . get_call ( [string] , [string] ) , ( self . mock_response , { } ) ) [EOL] self . assertTrue ( self . mock_clientsession . called ) [EOL] self . assertTrue ( self . mock_session . get . called ) [EOL] self . assertTrue ( self . mock_response . json . called ) [EOL] self . mock_headers . assert_called_once_with ( { } , [string] ) [EOL] [EOL] async def test_get_call_channel_none ( self ) : [EOL] self . mock_session . get . return_value = self . mock_response [EOL] self . assertEqual ( await twitch . get_call ( None , [string] ) , ( self . mock_response , { } ) ) [EOL] self . assertTrue ( self . mock_clientsession . called ) [EOL] self . assertTrue ( self . mock_session . get . called ) [EOL] self . assertTrue ( self . mock_response . json . called ) [EOL] self . mock_headers . assert_called_once_with ( { } , None ) [EOL] [EOL] async def test_get_call_header ( self ) : [EOL] headers = { [string] : [string] } [EOL] self . mock_session . get . return_value = self . mock_response [EOL] self . assertEqual ( await twitch . get_call ( [string] , [string] , headers = headers ) , ( self . mock_response , { } ) ) [EOL] self . assertTrue ( self . mock_clientsession . called ) [EOL] self . assertTrue ( self . mock_session . get . called ) [EOL] self . assertTrue ( self . mock_response . json . called ) [EOL] self . mock_headers . assert_called_once_with ( { [string] : [string] } , [string] ) [EOL] [EOL] async def test_get_call_204 ( self ) : [EOL] self . mock_session . get . return_value = self . mock_response [EOL] self . mock_response . json . side_effect = ValueError [EOL] self . mock_response . status = [number] [EOL] self . assertEqual ( await twitch . get_call ( [string] , [string] ) , ( self . mock_response , None ) ) [EOL] self . assertTrue ( self . mock_clientsession . called ) [EOL] self . assertTrue ( self . mock_session . get . called ) [EOL] self . assertFalse ( self . mock_response . json . called ) [EOL] self . mock_headers . assert_called_once_with ( { } , [string] ) [EOL] [EOL] async def test_get_call_except ( self ) : [EOL] self . mock_session . get . return_value = self . mock_response [EOL] excp = aiohttp . ClientResponseError ( None , None ) [EOL] self . mock_response . json . side_effect = excp [EOL] self . assertEqual ( await twitch . get_call ( [string] , [string] ) , ( self . mock_response , None ) ) [EOL] self . assertTrue ( self . mock_clientsession . called ) [EOL] self . assertTrue ( self . mock_session . get . called ) [EOL] self . assertTrue ( self . mock_response . json . called ) [EOL] self . mock_headers . assert_called_once_with ( { } , [string] ) [EOL] [EOL] async def test_post_call ( self ) : [EOL] self . mock_session . post . return_value = self . mock_response [EOL] self . assertEqual ( await twitch . post_call ( [string] , [string] ) , ( self . mock_response , { } ) ) [EOL] self . assertTrue ( self . mock_clientsession . called ) [EOL] self . assertTrue ( self . mock_session . post . called ) [EOL] self . assertTrue ( self . mock_response . json . called ) [EOL] self . mock_headers . assert_called_once_with ( { } , [string] ) [EOL] [EOL] async def test_post_call_channel_none ( self ) : [EOL] self . mock_session . post . return_value = self . mock_response [EOL] await twitch . post_call ( None , [string] ) [EOL] self . assertTrue ( self . mock_clientsession . called ) [EOL] self . assertTrue ( self . mock_session . post . called ) [EOL] self . assertTrue ( self . mock_response . json . called ) [EOL] self . mock_headers . assert_called_once_with ( { } , None ) [EOL] [EOL] async def test_post_call_header ( self ) : [EOL] self . mock_session . post . return_value = self . mock_response [EOL] headers = { [string] : [string] } [EOL] await twitch . post_call ( [string] , [string] , data = headers ) [EOL] self . assertTrue ( self . mock_clientsession . called ) [EOL] self . assertTrue ( self . mock_session . post . called ) [EOL] self . assertTrue ( self . mock_response . json . called ) [EOL] self . mock_headers . assert_called_once_with ( { } , [string] ) [EOL] [EOL] async def test_post_call_data ( self ) : [EOL] self . mock_session . post . return_value = self . mock_response [EOL] data = { [string] : [string] } [EOL] await twitch . post_call ( [string] , [string] , data = data ) [EOL] self . assertTrue ( self . mock_clientsession . called ) [EOL] self . assertTrue ( self . mock_session . post . called ) [EOL] self . assertTrue ( self . mock_response . json . called ) [EOL] self . mock_headers . assert_called_once_with ( { } , [string] ) [EOL] [EOL] async def test_post_call_204 ( self ) : [EOL] self . mock_session . post . return_value = self . mock_response [EOL] self . mock_response . json . side_effect = ValueError [EOL] self . mock_response . status = [number] [EOL] self . assertEqual ( await twitch . post_call ( [string] , [string] ) , ( self . mock_response , None ) ) [EOL] self . assertTrue ( self . mock_clientsession . called ) [EOL] self . assertTrue ( self . mock_session . post . called ) [EOL] self . assertFalse ( self . mock_response . json . called ) [EOL] self . mock_headers . assert_called_once_with ( { } , [string] ) [EOL] [EOL] async def test_post_call_except ( self ) : [EOL] self . mock_session . post . return_value = self . mock_response [EOL] excp = aiohttp . ClientResponseError ( None , None ) [EOL] self . mock_response . json . side_effect = excp [EOL] self . assertEqual ( await twitch . post_call ( [string] , [string] ) , ( self . mock_response , None ) ) [EOL] self . assertTrue ( self . mock_clientsession . called ) [EOL] self . assertTrue ( self . mock_session . post . called ) [EOL] self . assertTrue ( self . mock_response . json . called ) [EOL] self . mock_headers . assert_called_once_with ( { } , [string] ) [EOL] [EOL] async def test_put_call ( self ) : [EOL] self . mock_session . put . return_value = self . mock_response [EOL] self . assertEqual ( await twitch . put_call ( [string] , [string] ) , ( self . mock_response , { } ) ) [EOL] self . assertTrue ( self . mock_clientsession . called ) [EOL] self . assertTrue ( self . mock_session . put . called ) [EOL] self . assertTrue ( self . mock_response . json . called ) [EOL] self . mock_headers . assert_called_once_with ( { } , [string] ) [EOL] [EOL] async def test_put_call_channel_none ( self ) : [EOL] self . mock_session . put . return_value = self . mock_response [EOL] await twitch . put_call ( None , [string] ) [EOL] self . assertTrue ( self . mock_clientsession . called ) [EOL] self . assertTrue ( self . mock_session . put . called ) [EOL] self . assertTrue ( self . mock_response . json . called ) [EOL] self . mock_headers . assert_called_once_with ( { } , None ) [EOL] [EOL] async def test_put_call_header ( self ) : [EOL] self . mock_session . put . return_value = self . mock_response [EOL] headers = { [string] : [string] } [EOL] await twitch . put_call ( [string] , [string] , data = headers ) [EOL] self . assertTrue ( self . mock_clientsession . called ) [EOL] self . assertTrue ( self . mock_session . put . called ) [EOL] self . assertTrue ( self . mock_response . json . called ) [EOL] self . mock_headers . assert_called_once_with ( { } , [string] ) [EOL] [EOL] async def test_put_call_data ( self ) : [EOL] self . mock_session . put . return_value = self . mock_response [EOL] data = { [string] : [string] } [EOL] await twitch . put_call ( [string] , [string] , data = data ) [EOL] self . assertTrue ( self . mock_clientsession . called ) [EOL] self . assertTrue ( self . mock_session . put . called ) [EOL] self . assertTrue ( self . mock_response . json . called ) [EOL] self . mock_headers . assert_called_once_with ( { } , [string] ) [EOL] [EOL] async def test_put_call_204 ( self ) : [EOL] self . mock_session . put . return_value = self . mock_response [EOL] self . mock_response . json . side_effect = ValueError [EOL] self . mock_response . status = [number] [EOL] self . assertEqual ( await twitch . put_call ( [string] , [string] ) , ( self . mock_response , None ) ) [EOL] self . assertTrue ( self . mock_clientsession . called ) [EOL] self . assertTrue ( self . mock_session . put . called ) [EOL] self . assertFalse ( self . mock_response . json . called ) [EOL] self . mock_headers . assert_called_once_with ( { } , [string] ) [EOL] [EOL] async def test_put_call_except ( self ) : [EOL] self . mock_session . put . return_value = self . mock_response [EOL] excp = aiohttp . ClientResponseError ( None , None ) [EOL] self . mock_response . json . side_effect = excp [EOL] self . assertEqual ( await twitch . put_call ( [string] , [string] ) , ( self . mock_response , None ) ) [EOL] self . assertTrue ( self . mock_clientsession . called ) [EOL] self . assertTrue ( self . mock_session . put . called ) [EOL] self . assertTrue ( self . mock_response . json . called ) [EOL] self . mock_headers . assert_called_once_with ( { } , [string] ) [EOL] [EOL] async def test_delete_call ( self ) : [EOL] self . mock_session . delete . return_value = self . mock_response [EOL] self . assertEqual ( await twitch . delete_call ( [string] , [string] ) , ( self . mock_response , { } ) ) [EOL] self . assertTrue ( self . mock_clientsession . called ) [EOL] self . assertTrue ( self . mock_session . delete . called ) [EOL] self . assertTrue ( self . mock_response . json . called ) [EOL] self . mock_headers . assert_called_once_with ( { } , [string] ) [EOL] [EOL] async def test_delete_call_channel_none ( self ) : [EOL] self . mock_session . delete . return_value = self . mock_response [EOL] await twitch . delete_call ( None , [string] ) [EOL] self . assertTrue ( self . mock_clientsession . called ) [EOL] self . assertTrue ( self . mock_session . delete . called ) [EOL] self . assertTrue ( self . mock_response . json . called ) [EOL] self . mock_headers . assert_called_once_with ( { } , None ) [EOL] [EOL] async def test_delete_call_header ( self ) : [EOL] self . mock_session . delete . return_value = self . mock_response [EOL] headers = { [string] : [string] } [EOL] await twitch . delete_call ( [string] , [string] , data = headers ) [EOL] self . assertTrue ( self . mock_clientsession . called ) [EOL] self . assertTrue ( self . mock_session . delete . called ) [EOL] self . assertTrue ( self . mock_response . json . called ) [EOL] self . mock_headers . assert_called_once_with ( { } , [string] ) [EOL] [EOL] async def test_delete_call_data ( self ) : [EOL] self . mock_session . delete . return_value = self . mock_response [EOL] data = { [string] : [string] } [EOL] await twitch . delete_call ( [string] , [string] , data = data ) [EOL] self . assertTrue ( self . mock_clientsession . called ) [EOL] self . assertTrue ( self . mock_session . delete . called ) [EOL] self . assertTrue ( self . mock_response . json . called ) [EOL] self . mock_headers . assert_called_once_with ( { } , [string] ) [EOL] [EOL] async def test_delete_call_204 ( self ) : [EOL] self . mock_session . delete . return_value = self . mock_response [EOL] self . mock_response . json . side_effect = ValueError [EOL] self . mock_response . status = [number] [EOL] self . assertEqual ( await twitch . delete_call ( [string] , [string] ) , ( self . mock_response , None ) ) [EOL] self . assertTrue ( self . mock_clientsession . called ) [EOL] self . assertTrue ( self . mock_session . delete . called ) [EOL] self . assertFalse ( self . mock_response . json . called ) [EOL] self . mock_headers . assert_called_once_with ( { } , [string] ) [EOL] [EOL] async def test_delete_call_except ( self ) : [EOL] self . mock_session . delete . return_value = self . mock_response [EOL] excp = aiohttp . ClientResponseError ( None , None ) [EOL] self . mock_response . json . side_effect = excp [EOL] self . assertEqual ( await twitch . delete_call ( [string] , [string] ) , ( self . mock_response , None ) ) [EOL] self . assertTrue ( self . mock_clientsession . called ) [EOL] self . assertTrue ( self . mock_session . delete . called ) [EOL] self . assertTrue ( self . mock_response . json . called ) [EOL] self . mock_headers . assert_called_once_with ( { } , [string] ) [EOL] [EOL] [EOL] class TestApiTwitch ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . mock_async_response = Mock ( spec = aiohttp . ClientResponse ) [EOL] self . mock_response = Mock ( spec = HTTPResponse ) [EOL] [EOL] self . data = MagicMock ( spec = CacheStore ) [EOL] self . data . __aenter__ . return_value = self . data [EOL] self . data . __aexit__ . return_value = True [EOL] self . data . twitch_load_id . return_value = True [EOL] self . data . twitch_load_ids . return_value = True [EOL] self . data . twitch_get_ids . return_value = { [string] : [string] , [string] : None , } [EOL] self . data . twitch_get_id . side_effect = lambda u : self . data . twitch_get_ids . return_value [ u ] [EOL] self . data . twitch_load_community_name . return_value = True [EOL] self . data . twitch_get_community_id . side_effect = lambda c : { [string] : [string] , [string] : None } [ c . lower ( ) ] [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_cache = patcher . start ( ) [EOL] self . mock_cache . return_value = self . data [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_get_call = patcher . start ( ) [EOL] self . mock_get_call . return_value = [ self . mock_async_response , None ] [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_post_call = patcher . start ( ) [EOL] self . mock_post_call . return_value = [ self . mock_async_response , None ] [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_put_call = patcher . start ( ) [EOL] self . mock_put_call . return_value = [ self . mock_async_response , None ] [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_delete_call = patcher . start ( ) [EOL] self . mock_delete_call . return_value = [ self . mock_async_response , None ] [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_globals = patcher . start ( ) [EOL] self . mock_globals . twitchCommunity = { [string] : [string] , [string] : None , } [EOL] [EOL] async def test_server_time ( self ) : [EOL] timestamp = [string] [EOL] self . mock_async_response . status = [number] [EOL] self . mock_async_response . headers = { } [EOL] self . mock_async_response . headers [ [string] ] = timestamp [EOL] self . mock_get_call . return_value [ [number] ] = { } [EOL] self . assertEqual ( await twitch . server_time ( ) , datetime ( [number] , [number] , [number] ) ) [EOL] [EOL] async def test_server_time_except ( self ) : [EOL] exception = aiohttp . ClientResponseError ( None , None ) [EOL] self . mock_get_call . side_effect = exception [EOL] self . assertIsNone ( await twitch . server_time ( ) ) [EOL] [EOL] async def test_twitch_emotes ( self ) : [EOL] self . mock_async_response . status = [number] [EOL] self . mock_get_call . return_value [ [number] ] = json . loads ( twitchEmotes ) [EOL] self . assertEqual ( await twitch . twitch_emotes ( { [number] } ) , { [number] : ( [string] , [number] ) } ) [EOL] self . mock_get_call . assert_called_once_with ( None , StrContains ( [string] ) ) [EOL] [EOL] async def test_twitch_emotes_special ( self ) : [EOL] self . mock_async_response . status = [number] [EOL] self . mock_get_call . return_value [ [number] ] = json . loads ( twitchEmotesSpecial ) [EOL] self . assertEqual ( await twitch . twitch_emotes ( { [number] } ) , { [number] : ( [string] , [number] ) , [number] : ( [string] , [number] ) , [number] : ( [string] , [number] ) , [number] : ( [string] , [number] ) , [number] : ( [string] , [number] ) , [number] : ( [string] , [number] ) , [number] : ( [string] , [number] ) , [number] : ( [string] , [number] ) , [number] : ( [string] , [number] ) , [number] : ( [string] , [number] ) , [number] : ( [string] , [number] ) , [number] : ( [string] , [number] ) } ) [EOL] self . mock_get_call . assert_called_once_with ( None , StrContains ( [string] ) ) [EOL] [EOL] async def test_twitch_emotes_except ( self ) : [EOL] self . mock_get_call . side_effect = asyncio . TimeoutError [EOL] self . assertIsNone ( await twitch . twitch_emotes ( { [number] } ) ) [EOL] self . mock_get_call . assert_called_once_with ( None , StrContains ( [string] ) ) [EOL] [EOL] async def test_created_date ( self ) : [EOL] data = json . loads ( userData . decode ( ) ) [EOL] self . mock_get_call . return_value [ [number] ] = data [EOL] self . assertEqual ( await twitch . created_date ( [string] ) , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) [EOL] self . data . twitch_load_id . assert_called_once_with ( [string] ) [EOL] self . data . twitch_get_id . assert_called_once_with ( [string] ) [EOL] self . assertTrue ( self . mock_get_call . called ) [EOL] [EOL] async def test_created_date_no_load ( self ) : [EOL] self . data . twitch_load_id . return_value = False [EOL] self . assertIsNone ( await twitch . created_date ( [string] ) ) [EOL] self . data . twitch_load_id . assert_called_once_with ( [string] ) [EOL] self . assertFalse ( self . data . twitch_get_id . called ) [EOL] self . assertFalse ( self . mock_get_call . called ) [EOL] [EOL] async def test_created_date_no_user ( self ) : [EOL] self . assertIsNone ( await twitch . created_date ( [string] ) ) [EOL] self . data . twitch_load_id . assert_called_once_with ( [string] ) [EOL] self . data . twitch_get_id . assert_called_once_with ( [string] ) [EOL] self . assertFalse ( self . mock_get_call . called ) [EOL] [EOL] async def test_created_date_except ( self ) : [EOL] self . mock_get_call . side_effect = asyncio . TimeoutError [EOL] self . assertIsNone ( await twitch . created_date ( [string] ) ) [EOL] self . data . twitch_load_id . assert_called_once_with ( [string] ) [EOL] self . data . twitch_get_id . assert_called_once_with ( [string] ) [EOL] self . assertTrue ( self . mock_get_call . called ) [EOL] [EOL] async def test_num_followers ( self ) : [EOL] data = json . loads ( numFollowers . decode ( ) ) [EOL] self . mock_get_call . return_value [ [number] ] = data [EOL] self . assertEqual ( await twitch . num_followers ( [string] ) , [number] ) [EOL] self . data . twitch_load_id . assert_called_once_with ( [string] ) [EOL] self . data . twitch_get_id . assert_called_once_with ( [string] ) [EOL] self . assertTrue ( self . mock_get_call . called ) [EOL] [EOL] async def test_num_followers_no_load ( self ) : [EOL] self . data . twitch_load_id . return_value = False [EOL] self . assertIsNone ( await twitch . num_followers ( [string] ) ) [EOL] self . data . twitch_load_id . assert_called_once_with ( [string] ) [EOL] self . assertFalse ( self . data . twitch_get_id . called ) [EOL] self . assertFalse ( self . mock_get_call . called ) [EOL] [EOL] async def test_num_followers_no_user ( self ) : [EOL] self . assertEqual ( await twitch . num_followers ( [string] ) , [number] ) [EOL] self . data . twitch_load_id . assert_called_once_with ( [string] ) [EOL] self . data . twitch_get_id . assert_called_once_with ( [string] ) [EOL] self . assertFalse ( self . mock_get_call . called ) [EOL] [EOL] async def test_num_followers_except ( self ) : [EOL] self . mock_get_call . side_effect = asyncio . TimeoutError [EOL] self . assertIsNone ( await twitch . num_followers ( [string] ) ) [EOL] self . data . twitch_load_id . assert_called_once_with ( [string] ) [EOL] self . data . twitch_get_id . assert_called_once_with ( [string] ) [EOL] self . assertTrue ( self . mock_get_call . called ) [EOL] [EOL] async def test_update ( self ) : [EOL] self . assertIsNone ( await twitch . update ( [string] ) ) [EOL] self . data . twitch_load_id . assert_called_once_with ( [string] ) [EOL] self . data . twitch_get_id . assert_called_once_with ( [string] ) [EOL] self . assertFalse ( self . mock_put_call . called ) [EOL] [EOL] async def test_update_no_load ( self ) : [EOL] self . data . twitch_load_id . return_value = False [EOL] self . assertIsNone ( await twitch . update ( [string] ) ) [EOL] self . data . twitch_load_id . assert_called_once_with ( [string] ) [EOL] self . assertFalse ( self . data . twitch_get_id . called ) [EOL] self . assertFalse ( self . mock_put_call . called ) [EOL] [EOL] async def test_update_no_user ( self ) : [EOL] self . assertIsNone ( await twitch . update ( [string] ) ) [EOL] self . data . twitch_load_id . assert_called_once_with ( [string] ) [EOL] self . data . twitch_load_id . assert_called_once_with ( [string] ) [EOL] self . data . twitch_get_id . assert_called_once_with ( [string] ) [EOL] self . assertFalse ( self . mock_put_call . called ) [EOL] [EOL] async def test_update_status ( self ) : [EOL] self . mock_async_response . status = [number] [EOL] self . assertIs ( await twitch . update ( [string] , status = [string] ) , True ) [EOL] self . data . twitch_load_id . assert_called_once_with ( [string] ) [EOL] self . data . twitch_get_id . assert_called_once_with ( [string] ) [EOL] self . mock_put_call . assert_called_once_with ( [string] , StrContains ( ) , headers = TypeMatch ( dict ) , data = { [string] : [string] } ) [EOL] [EOL] async def test_update_game ( self ) : [EOL] self . mock_async_response . status = [number] [EOL] self . assertIs ( await twitch . update ( [string] , game = [string] ) , True ) [EOL] self . data . twitch_load_id . assert_called_once_with ( [string] ) [EOL] self . data . twitch_get_id . assert_called_once_with ( [string] ) [EOL] self . mock_put_call . assert_called_once_with ( [string] , StrContains ( ) , headers = TypeMatch ( dict ) , data = { [string] : [string] } ) [EOL] [EOL] async def test_update_except ( self ) : [EOL] exception = aiohttp . ClientResponseError ( None , None ) [EOL] self . mock_put_call . side_effect = exception [EOL] self . assertIsNone ( await twitch . update ( [string] ) ) [EOL] self . assertFalse ( self . mock_put_call . called ) [EOL] self . data . twitch_load_id . assert_called_once_with ( [string] ) [EOL] self . data . twitch_get_id . assert_called_once_with ( [string] ) [EOL] [EOL] @ patch ( [string] ) async def test_active_streams_no_load ( self , mock_handle ) : [EOL] self . data . twitch_load_ids . return_value = False [EOL] self . assertIsNone ( await twitch . active_streams ( [ [string] ] ) ) [EOL] self . assertEqual ( self . data . twitch_load_ids . call_count , [number] ) [EOL] self . assertFalse ( self . data . twitch_get_ids . called ) [EOL] self . assertFalse ( self . mock_get_call . called ) [EOL] self . assertEqual ( mock_handle . call_count , [number] ) [EOL] [EOL] @ patch ( [string] ) async def test_active_streams_no_user ( self , mock_handle ) : [EOL] self . data . twitch_get_ids . return_value = { [string] : None , } [EOL] self . assertEqual ( await twitch . active_streams ( [ [string] ] ) , { } ) [EOL] self . assertEqual ( self . data . twitch_load_ids . call_count , [number] ) [EOL] self . assertEqual ( self . data . twitch_get_ids . call_count , [number] ) [EOL] self . assertFalse ( self . mock_get_call . called ) [EOL] self . assertEqual ( mock_handle . call_count , [number] ) [EOL] [EOL] @ patch ( [string] ) async def test_active_streams_404 ( self , mock_handle ) : [EOL] self . mock_async_response . status = [number] [EOL] self . assertIsNone ( await twitch . active_streams ( [ [string] ] ) ) [EOL] self . assertEqual ( self . data . twitch_load_ids . call_count , [number] ) [EOL] self . assertEqual ( self . data . twitch_get_ids . call_count , [number] ) [EOL] self . assertEqual ( mock_handle . call_count , [number] ) [EOL] [EOL] @ patch ( [string] ) async def test_active_streams_one ( self , mock_handle ) : [EOL] self . mock_async_response . status = [number] [EOL] self . mock_get_call . return_value [ [number] ] = json . loads ( noStreams . decode ( ) ) [EOL] self . assertEqual ( await twitch . active_streams ( [ [string] ] ) , { } ) [EOL] self . assertEqual ( self . data . twitch_load_ids . call_count , [number] ) [EOL] self . assertEqual ( self . data . twitch_get_ids . call_count , [number] ) [EOL] self . assertEqual ( mock_handle . call_count , [number] ) [EOL] [EOL] @ patch ( [string] ) async def test_active_streams_too_many ( self , mock_handle ) : [EOL] self . mock_async_response . status = [number] [EOL] self . mock_get_call . side_effect = [ [ self . mock_async_response , json . loads ( multiStreams . decode ( ) ) ] , [ self . mock_async_response , json . loads ( noStreams . decode ( ) ) ] ] [EOL] self . assertEqual ( await twitch . active_streams ( [ [string] ] ) , { } ) [EOL] self . assertEqual ( self . data . twitch_load_ids . call_count , [number] ) [EOL] self . assertEqual ( self . data . twitch_get_ids . call_count , [number] ) [EOL] self . assertEqual ( mock_handle . call_count , [number] ) [EOL] [EOL] @ asynctest . fail_on ( unused_loop = False ) def test_handle_streams ( self ) : [EOL] online = { } [EOL] twitch . _handle_streams ( json . loads ( streams ) , online ) [EOL] self . assertEqual ( online , { [string] : twitch . TwitchStatus ( datetime ( [number] , [number] , [number] ) , None , None , [ ] ) } ) [EOL] [EOL] @ asynctest . fail_on ( unused_loop = False ) def test_handle_streams_community ( self ) : [EOL] online = { } [EOL] data = json . loads ( streams ) [EOL] data [ [number] ] [ [string] ] = [ [string] ] [EOL] twitch . _handle_streams ( data , online ) [EOL] self . assertEqual ( online , { [string] : twitch . TwitchStatus ( datetime ( [number] , [number] , [number] ) , None , None , [ [string] ] ) } ) [EOL] [EOL] async def test_properties_no_load ( self ) : [EOL] self . data . twitch_load_id . return_value = False [EOL] self . assertIsNone ( await twitch . channel_properties ( [string] ) ) [EOL] self . data . twitch_load_id . assert_called_once_with ( [string] ) [EOL] self . assertFalse ( self . data . twitch_get_id . called ) [EOL] self . assertFalse ( self . mock_get_call . called ) [EOL] [EOL] async def test_properties_404 ( self ) : [EOL] self . mock_async_response . status = [number] [EOL] self . assertIsNone ( await twitch . channel_properties ( [string] ) ) [EOL] self . data . twitch_load_id . assert_called_once_with ( [string] ) [EOL] self . data . twitch_get_id . assert_called_once_with ( [string] ) [EOL] self . assertTrue ( self . mock_get_call . called ) [EOL] [EOL] async def test_properties_exception ( self ) : [EOL] self . mock_get_call . side_effect = asyncio . TimeoutError [EOL] self . assertIsNone ( await twitch . channel_properties ( [string] ) ) [EOL] self . data . twitch_load_id . assert_called_once_with ( [string] ) [EOL] self . data . twitch_get_id . assert_called_once_with ( [string] ) [EOL] self . assertTrue ( self . mock_get_call . called ) [EOL] [EOL] async def test_properties_something ( self ) : [EOL] self . mock_async_response . status = [number] [EOL] data = json . loads ( channelProperties . decode ( ) ) [EOL] self . mock_get_call . return_value [ [number] ] = data [EOL] self . assertEqual ( await twitch . channel_properties ( [string] ) , twitch . TwitchStatus ( None , None , None , [ ] ) ) [EOL] self . data . twitch_load_id . assert_called_once_with ( [string] ) [EOL] self . data . twitch_get_id . assert_called_once_with ( [string] ) [EOL] self . assertTrue ( self . mock_get_call . called ) [EOL] [EOL] async def test_twitch_ids ( self ) : [EOL] self . mock_async_response . status = [number] [EOL] data = twitchIdReponse . decode ( ) [EOL] self . mock_get_call . return_value [ [number] ] = json . loads ( data ) [EOL] self . assertEqual ( await twitch . getTwitchIds ( [ [string] , [string] ] ) , { [string] : [string] } ) [EOL] [EOL] async def test_twitch_ids_404 ( self ) : [EOL] self . mock_async_response . status = [number] [EOL] self . assertIsNone ( await twitch . getTwitchIds ( [ [string] , [string] ] ) ) [EOL] [EOL] async def test_twitch_ids_exception ( self ) : [EOL] self . mock_get_call . side_effect = asyncio . TimeoutError [EOL] self . assertIsNone ( await twitch . getTwitchIds ( [ [string] , [string] ] ) ) [EOL] [EOL] async def test_channel_community_no_load ( self ) : [EOL] self . data . twitch_load_id . return_value = False [EOL] self . assertIsNone ( await twitch . channel_community ( [string] ) ) [EOL] self . data . twitch_load_id . assert_called_once_with ( [string] ) [EOL] self . assertFalse ( self . data . twitch_get_id . called ) [EOL] [EOL] async def test_channel_community_no_user ( self ) : [EOL] self . assertIsNone ( await twitch . channel_community ( [string] ) ) [EOL] self . data . twitch_load_id . assert_called_once_with ( [string] ) [EOL] self . data . twitch_get_id . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_channel_community_404 ( self ) : [EOL] self . mock_async_response . status = [number] [EOL] self . assertIsNone ( await twitch . channel_community ( [string] ) ) [EOL] self . data . twitch_load_id . assert_called_once_with ( [string] ) [EOL] self . data . twitch_get_id . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_channel_community_exception ( self ) : [EOL] exception = aiohttp . ClientResponseError ( None , None ) [EOL] self . mock_get_call . side_effect = exception [EOL] self . assertIsNone ( await twitch . channel_community ( [string] ) ) [EOL] self . data . twitch_load_id . assert_called_once_with ( [string] ) [EOL] self . data . twitch_get_id . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_channel_community ( self ) : [EOL] self . mock_async_response . status = [number] [EOL] data = json . loads ( communitiesResponse . decode ( ) ) [EOL] self . mock_get_call . return_value [ [number] ] = data [EOL] id = [string] [EOL] self . assertEqual ( await twitch . channel_community ( [string] ) , [ twitch . TwitchCommunity ( id , [string] ) ] ) [EOL] self . data . twitch_load_id . assert_called_once_with ( [string] ) [EOL] self . data . twitch_get_id . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_channel_community_None ( self ) : [EOL] self . mock_async_response . status = [number] [EOL] self . assertEqual ( await twitch . channel_community ( [string] ) , [ ] ) [EOL] self . data . twitch_load_id . assert_called_once_with ( [string] ) [EOL] self . data . twitch_get_id . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_get_community_404 ( self ) : [EOL] self . mock_async_response . status = [number] [EOL] self . assertEqual ( await twitch . get_community ( [string] ) , twitch . TwitchCommunity ( None , [string] ) ) [EOL] [EOL] async def test_get_community_exception ( self ) : [EOL] exception = aiohttp . ClientResponseError ( None , None ) [EOL] self . mock_get_call . side_effect = exception [EOL] self . assertIsNone ( await twitch . get_community ( [string] ) ) [EOL] [EOL] async def test_get_community ( self ) : [EOL] self . mock_async_response . status = [number] [EOL] data = json . loads ( speedrunCommunityResponse . decode ( ) ) [EOL] self . mock_get_call . return_value [ [number] ] = data [EOL] id = [string] [EOL] self . assertEqual ( await twitch . get_community ( [string] ) , twitch . TwitchCommunity ( id , [string] ) ) [EOL] [EOL] async def test_get_community_urlencode ( self ) : [EOL] self . mock_async_response . status = [number] [EOL] self . assertEqual ( await twitch . get_community ( [string] ) , twitch . TwitchCommunity ( None , [string] ) ) [EOL] self . mock_get_call . assert_called_once_with ( None , [string] ) [EOL] [EOL] async def test_get_community_id_404 ( self ) : [EOL] self . mock_async_response . status = [number] [EOL] id = [string] [EOL] self . assertEqual ( await twitch . get_community_by_id ( id ) , twitch . TwitchCommunity ( id , None ) ) [EOL] [EOL] async def test_get_community_id_exception ( self ) : [EOL] exception = aiohttp . ClientResponseError ( None , None ) [EOL] self . mock_get_call . side_effect = exception [EOL] id = [string] [EOL] self . assertIsNone ( await twitch . get_community_by_id ( id ) ) [EOL] [EOL] async def test_get_community_id ( self ) : [EOL] self . mock_async_response . status = [number] [EOL] data = json . loads ( speedrunCommunityResponse . decode ( ) ) [EOL] self . mock_get_call . return_value [ [number] ] = data [EOL] id = [string] [EOL] self . assertEqual ( await twitch . get_community_by_id ( id ) , twitch . TwitchCommunity ( id , [string] ) ) [EOL] [EOL] async def test_set_channel_community_no_load ( self ) : [EOL] self . data . twitch_load_id . return_value = False [EOL] self . data . twitch_load_community_name . return_value = True [EOL] self . assertIsNone ( await twitch . set_channel_community ( [string] , [ [string] ] ) ) [EOL] self . data . twitch_load_id . assert_called_once_with ( [string] ) [EOL] self . assertFalse ( self . data . twitch_get_id . called ) [EOL] self . assertFalse ( self . data . twitch_load_community_name . called ) [EOL] [EOL] async def test_set_channel_community_no_user ( self ) : [EOL] self . data . twitch_load_community_name . return_value = True [EOL] self . assertIsNone ( await twitch . set_channel_community ( [string] , [ [string] ] ) ) [EOL] self . data . twitch_load_id . assert_called_once_with ( [string] ) [EOL] self . data . twitch_get_id . assert_called_once_with ( [string] ) [EOL] self . assertFalse ( self . data . twitch_load_community_name . called ) [EOL] [EOL] async def test_set_channel_community_no_load_community ( self ) : [EOL] self . data . twitch_load_community_name . return_value = False [EOL] self . assertIsNone ( await twitch . set_channel_community ( [string] , [ [string] ] ) ) [EOL] self . data . twitch_load_id . assert_called_once_with ( [string] ) [EOL] self . data . twitch_get_id . assert_called_once_with ( [string] ) [EOL] self . data . twitch_load_community_name . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_set_channel_community_no_community ( self ) : [EOL] self . data . twitch_load_community_name . return_value = True [EOL] self . assertEqual ( await twitch . set_channel_community ( [string] , [ [string] ] ) , [ ] ) [EOL] self . data . twitch_load_id . assert_called_once_with ( [string] ) [EOL] self . data . twitch_get_id . assert_called_once_with ( [string] ) [EOL] self . data . twitch_load_community_name . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_set_channel_community_404 ( self ) : [EOL] self . data . twitch_load_community_name . return_value = True [EOL] self . mock_async_response . status = [number] [EOL] self . assertIsNone ( await twitch . set_channel_community ( [string] , [ [string] ] ) ) [EOL] self . data . twitch_load_id . assert_called_once_with ( [string] ) [EOL] self . data . twitch_get_id . assert_called_once_with ( [string] ) [EOL] self . data . twitch_load_community_name . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_set_channel_community_none_404 ( self ) : [EOL] self . data . twitch_load_community_name . return_value = True [EOL] self . mock_async_response . status = [number] [EOL] self . assertIsNone ( await twitch . set_channel_community ( [string] , [ ] ) ) [EOL] self . data . twitch_load_id . assert_called_once_with ( [string] ) [EOL] self . data . twitch_get_id . assert_called_once_with ( [string] ) [EOL] self . assertFalse ( self . data . twitch_load_community_name . called ) [EOL] [EOL] async def test_set_channel_community_exception ( self ) : [EOL] self . data . twitch_load_community_name . return_value = True [EOL] exception = aiohttp . ClientResponseError ( None , None ) [EOL] self . mock_put_call . side_effect = exception [EOL] self . assertIsNone ( await twitch . set_channel_community ( [string] , [ [string] ] ) ) [EOL] self . data . twitch_load_id . assert_called_once_with ( [string] ) [EOL] self . data . twitch_get_id . assert_called_once_with ( [string] ) [EOL] self . data . twitch_load_community_name . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_set_channel_community_exception_2 ( self ) : [EOL] self . data . twitch_load_community_name . return_value = True [EOL] exception = aiohttp . ClientResponseError ( None , None ) [EOL] self . mock_delete_call . side_effect = exception [EOL] self . assertIsNone ( await twitch . set_channel_community ( [string] , [ ] ) ) [EOL] self . data . twitch_load_id . assert_called_once_with ( [string] ) [EOL] self . data . twitch_get_id . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_set_channel_community ( self ) : [EOL] self . data . twitch_load_community_name . return_value = True [EOL] self . mock_async_response . status = [number] [EOL] self . assertEqual ( await twitch . set_channel_community ( [string] , [ [string] ] ) , [ [string] ] ) [EOL] self . data . twitch_load_id . assert_called_once_with ( [string] ) [EOL] self . data . twitch_get_id . assert_called_once_with ( [string] ) [EOL] self . data . twitch_load_community_name . assert_called_once_with ( [string] ) [EOL] self . assertTrue ( self . mock_put_call . called ) [EOL] [EOL] async def test_set_channel_community_empty ( self ) : [EOL] self . data . twitch_load_community_name . return_value = True [EOL] self . mock_async_response . status = [number] [EOL] self . assertEqual ( await twitch . set_channel_community ( [string] , [ ] ) , [ ] ) [EOL] self . data . twitch_load_id . assert_called_once_with ( [string] ) [EOL] self . data . twitch_get_id . assert_called_once_with ( [string] ) [EOL] self . assertFalse ( self . data . twitch_load_community_name . called ) [EOL] self . mock_delete_call . assert_called_once_with ( [string] , StrContains ( ) ) [EOL]	
import unittest [EOL] [EOL] import bot [comment] [EOL] [EOL] from lib . data import message [EOL] [EOL] [EOL] class TestDataTokenized ( unittest . TestCase ) : [EOL] def test_none ( self ) : [EOL] self . assertRaises ( TypeError , message . Tokenized , None ) [EOL] [EOL] def test_eq ( self ) : [EOL] self . assertEqual ( message . Tokenized ( [string] ) , message . Tokenized ( [string] ) ) [EOL] self . assertNotEqual ( message . Tokenized ( [string] ) , message . Tokenized ( [string] ) ) [EOL] self . assertEqual ( message . Tokenized ( [string] ) , [string] ) [EOL] [EOL] def test_hash ( self ) : [EOL] self . assertIsInstance ( hash ( message . Tokenized ( [string] ) ) , int ) [EOL] self . assertEqual ( hash ( message . Tokenized ( [string] ) ) , hash ( message . Tokenized ( [string] ) ) ) [EOL] [EOL] def test_str ( self ) : [EOL] self . assertEqual ( str ( message . Tokenized ( [string] ) ) , [string] ) [EOL] [EOL] def test_len ( self ) : [EOL] self . assertEqual ( len ( message . Tokenized ( [string] ) ) , [number] ) [EOL] [EOL] def test_getitem_none ( self ) : [EOL] tokenized = message . Tokenized ( [string] ) [EOL] with self . assertRaises ( TypeError ) : [EOL] tokenized [ None ] [EOL] [EOL] def test_getitem_int ( self ) : [EOL] tokenized = message . Tokenized ( [string] ) [EOL] self . assertEqual ( tokenized [ [number] ] , [string] ) [EOL] self . assertEqual ( tokenized [ [number] ] , [string] ) [EOL] self . assertEqual ( tokenized [ [number] ] , [string] ) [EOL] self . assertEqual ( tokenized [ - [number] ] , [string] ) [EOL] self . assertEqual ( tokenized [ - [number] ] , [string] ) [EOL] self . assertEqual ( tokenized [ - [number] ] , [string] ) [EOL] with self . assertRaises ( IndexError ) : [EOL] tokenized [ [number] ] [EOL] with self . assertRaises ( IndexError ) : [EOL] tokenized [ - [number] ] [EOL] [EOL] def test_getitem_slice ( self ) : [EOL] tokenized = message . Tokenized ( [string] ) [EOL] self . assertEqual ( tokenized [ [number] : [number] ] , [string] ) [EOL] self . assertEqual ( tokenized [ [number] : ] , [string] ) [EOL] self . assertEqual ( tokenized [ [number] : ] , [string] ) [EOL] self . assertEqual ( tokenized [ : - [number] ] , [string] ) [EOL] self . assertEqual ( tokenized [ : - [number] ] , [string] ) [EOL] self . assertEqual ( tokenized [ [number] : [number] ] , [string] ) [EOL] [EOL] [EOL] class TestDataMessage ( unittest . TestCase ) : [EOL] def test_command ( self ) : [EOL] self . assertEqual ( message . Message ( [string] ) . command , [string] ) [EOL] [EOL] def test_query ( self ) : [EOL] self . assertEqual ( message . Message ( [string] ) . query , [string] ) [EOL] [EOL] def test_lower ( self ) : [EOL] self . assertEqual ( str ( message . Message ( [string] ) . lower ) , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from datetime import datetime , timedelta [EOL] [EOL] import asynctest [EOL] from asynctest . mock import MagicMock , Mock , PropertyMock , patch [EOL] [EOL] from bot . data import Channel [EOL] from bot . twitchmessage import IrcMessageTags [EOL] from lib . cache import CacheStore [EOL] from lib . data import ChatCommandArgs [EOL] from lib . data . message import Message [EOL] from lib . data . permissions import ChatPermissionSet [EOL] from lib . database import DatabaseMain [EOL] from lib . helper import chat [EOL] [EOL] [EOL] class TestLibraryChat ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . now = datetime ( [number] , [number] , [number] ) [EOL] self . tags = IrcMessageTags ( ) [EOL] self . channel = Mock ( spec = Channel ) [EOL] self . channel . channel = [string] [EOL] self . data = Mock ( spec = CacheStore ) [EOL] self . database = Mock ( spec = DatabaseMain ) [EOL] self . permissions = MagicMock ( spec = ChatPermissionSet ) [EOL] self . args = ChatCommandArgs ( self . data , self . channel , self . tags , [string] , Message ( [string] ) , self . permissions , self . now ) [EOL] [EOL] @ asynctest . fail_on ( unused_loop = False ) def test_send ( self ) : [EOL] self . assertIs ( chat . send ( self . channel ) , self . channel . send ) [EOL] chat . send ( self . channel ) ( [string] ) [EOL] self . channel . send . assert_called_once_with ( [string] ) [EOL] [EOL] @ asynctest . fail_on ( unused_loop = False ) def test_send_priority ( self ) : [EOL] chat . sendPriority ( self . channel , [number] ) ( [string] ) [EOL] self . channel . send . assert_called_once_with ( [string] , priority = [number] ) [EOL] [EOL] async def test_permission ( self ) : [EOL] self . permissions . __getitem__ . return_value = True [EOL] [EOL] @ chat . permission ( [string] ) async def t ( args ) : [EOL] return True [EOL] self . assertIs ( await t ( self . args ) , True ) [EOL] self . permissions . __getitem__ . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_permission_not ( self ) : [EOL] self . permissions . __getitem__ . return_value = False [EOL] [EOL] @ chat . permission ( [string] ) async def t ( args ) : [EOL] return True [EOL] self . assertIs ( await t ( self . args ) , False ) [EOL] self . permissions . __getitem__ . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_not_permission ( self ) : [EOL] self . permissions . __getitem__ . return_value = False [EOL] [EOL] @ chat . not_permission ( [string] ) async def t ( args ) : [EOL] return True [EOL] self . assertIs ( await t ( self . args ) , True ) [EOL] self . permissions . __getitem__ . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_not_permission_not ( self ) : [EOL] self . permissions . __getitem__ . return_value = True [EOL] [EOL] @ chat . not_permission ( [string] ) async def t ( args ) : [EOL] return True [EOL] self . assertIs ( await t ( self . args ) , False ) [EOL] self . permissions . __getitem__ . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_owner_channel ( self ) : [EOL] ownerProperty = PropertyMock ( return_value = False ) [EOL] type ( self . permissions ) . inOwnerChannel = ownerProperty [EOL] [EOL] @ chat . ownerChannel async def t ( args ) : [EOL] return True [EOL] self . assertIs ( await t ( self . args ) , False ) [EOL] ownerProperty . assert_called_once_with ( ) [EOL] [EOL] async def test_owner_channel_not ( self ) : [EOL] ownerProperty = PropertyMock ( return_value = False ) [EOL] type ( self . permissions ) . inOwnerChannel = ownerProperty [EOL] [EOL] @ chat . ownerChannel async def t ( args ) : [EOL] return True [EOL] self . assertIs ( await t ( self . args ) , False ) [EOL] ownerProperty . assert_called_once_with ( ) [EOL] [EOL] async def test_feature ( self ) : [EOL] self . data . hasFeature . return_value = True [EOL] [EOL] @ chat . feature ( [string] ) async def t ( args ) : [EOL] return True [EOL] self . assertIs ( await t ( self . args ) , True ) [EOL] self . data . hasFeature . assert_called_once_with ( [string] , [string] ) [EOL] [EOL] async def test_feature_not ( self ) : [EOL] self . data . hasFeature . return_value = False [EOL] [EOL] @ chat . feature ( [string] ) async def t ( args ) : [EOL] return True [EOL] self . assertIs ( await t ( self . args ) , False ) [EOL] self . data . hasFeature . assert_called_once_with ( [string] , [string] ) [EOL] [EOL] async def test_not_feature ( self ) : [EOL] self . data . hasFeature . return_value = False [EOL] [EOL] @ chat . not_feature ( [string] ) async def t ( args ) : [EOL] return True [EOL] self . assertIs ( await t ( self . args ) , True ) [EOL] self . data . hasFeature . assert_called_once_with ( [string] , [string] ) [EOL] [EOL] async def test_not_feature_not ( self ) : [EOL] self . data . hasFeature . return_value = True [EOL] [EOL] @ chat . not_feature ( [string] ) async def t ( args ) : [EOL] return True [EOL] self . assertIs ( await t ( self . args ) , False ) [EOL] self . data . hasFeature . assert_called_once_with ( [string] , [string] ) [EOL] [EOL] async def test_permission_feature ( self ) : [EOL] self . data . hasFeature . return_value = True [EOL] self . permissions . __getitem__ . return_value = True [EOL] [EOL] @ chat . permission_feature ( ( [string] , [string] ) ) async def t ( args ) : [EOL] return True [EOL] self . assertIs ( await t ( self . args ) , True ) [EOL] self . data . hasFeature . assert_called_once_with ( [string] , [string] ) [EOL] self . permissions . __getitem__ . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_permission_feature_not_permission ( self ) : [EOL] self . data . hasFeature . return_value = True [EOL] self . permissions . __getitem__ . return_value = False [EOL] [EOL] @ chat . permission_feature ( ( [string] , [string] ) ) async def t ( args ) : [EOL] return True [EOL] self . assertIs ( await t ( self . args ) , False ) [EOL] [EOL] async def test_permission_feature_not_feature ( self ) : [EOL] self . data . hasFeature . return_value = False [EOL] self . permissions . __getitem__ . return_value = True [EOL] [EOL] @ chat . permission_feature ( ( [string] , [string] ) ) async def t ( args ) : [EOL] return True [EOL] self . assertIs ( await t ( self . args ) , False ) [EOL] [EOL] async def test_permission_feature_not ( self ) : [EOL] self . data . hasFeature . return_value = False [EOL] self . permissions . __getitem__ . return_value = False [EOL] [EOL] @ chat . permission_feature ( ( [string] , [string] ) ) async def t ( args ) : [EOL] return True [EOL] self . assertIs ( await t ( self . args ) , False ) [EOL] [EOL] async def test_permission_feature_none_permission ( self ) : [EOL] self . data . hasFeature . return_value = True [EOL] [EOL] @ chat . permission_feature ( ( None , [string] ) ) async def t ( args ) : [EOL] return True [EOL] self . assertIs ( await t ( self . args ) , True ) [EOL] self . data . hasFeature . assert_called_once_with ( [string] , [string] ) [EOL] self . permissions . __getitem__ . assert_not_called ( ) [EOL] [EOL] async def test_permission_feature_none_feature ( self ) : [EOL] self . permissions . __getitem__ . return_value = True [EOL] [EOL] @ chat . permission_feature ( ( [string] , None ) ) async def t ( args ) : [EOL] return True [EOL] self . assertIs ( await t ( self . args ) , True ) [EOL] self . data . hasFeature . assert_not_called ( ) [EOL] self . permissions . __getitem__ . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_permission_feature_none_permission_not ( self ) : [EOL] self . data . hasFeature . return_value = False [EOL] [EOL] @ chat . permission_feature ( ( None , [string] ) ) async def t ( args ) : [EOL] return True [EOL] self . assertIs ( await t ( self . args ) , False ) [EOL] self . data . hasFeature . assert_called_once_with ( [string] , [string] ) [EOL] self . permissions . __getitem__ . assert_not_called ( ) [EOL] [EOL] async def test_permission_feature_none_feature_not ( self ) : [EOL] self . permissions . __getitem__ . return_value = False [EOL] [EOL] @ chat . permission_feature ( ( [string] , None ) ) async def t ( args ) : [EOL] return True [EOL] self . assertIs ( await t ( self . args ) , False ) [EOL] self . data . hasFeature . assert_not_called ( ) [EOL] self . permissions . __getitem__ . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_permission_feature_none_permission_feature ( self ) : [EOL] @ chat . permission_feature ( ( None , None ) ) async def t ( args ) : [EOL] return True [EOL] self . assertIs ( await t ( self . args ) , True ) [EOL] self . data . hasFeature . assert_not_called ( ) [EOL] self . permissions . __getitem__ . assert_not_called ( ) [EOL] [EOL] async def test_permission_feature_multiple ( self ) : [EOL] self . data . hasFeature . side_effect = [ False , True ] [EOL] self . permissions . __getitem__ . side_effect = [ False , True ] [EOL] [EOL] @ chat . permission_feature ( ( [string] , [string] ) , ( [string] , [string] ) ) async def t ( args ) : [EOL] return True [EOL] self . assertIs ( await t ( self . args ) , True ) [EOL] [EOL] async def test_permission_feature_multiple_not ( self ) : [EOL] self . data . hasFeature . side_effect = [ False , True ] [EOL] self . permissions . __getitem__ . side_effect = [ True , False ] [EOL] [EOL] @ chat . permission_feature ( ( [string] , [string] ) , ( [string] , [string] ) ) async def t ( args ) : [EOL] return True [EOL] self . assertIs ( await t ( self . args ) , False ) [EOL] [EOL] async def test_permission_not_feature ( self ) : [EOL] self . data . hasFeature . return_value = False [EOL] self . permissions . __getitem__ . return_value = True [EOL] [EOL] @ chat . permission_not_feature ( ( [string] , [string] ) ) async def t ( args ) : [EOL] return True [EOL] self . assertIs ( await t ( self . args ) , True ) [EOL] self . data . hasFeature . assert_called_once_with ( [string] , [string] ) [EOL] self . permissions . __getitem__ . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_permission_not_feature_not_permission ( self ) : [EOL] self . data . hasFeature . return_value = False [EOL] self . permissions . __getitem__ . return_value = False [EOL] [EOL] @ chat . permission_not_feature ( ( [string] , [string] ) ) async def t ( args ) : [EOL] return True [EOL] self . assertIs ( await t ( self . args ) , False ) [EOL] [EOL] async def test_permission_not_feature_not_feature ( self ) : [EOL] self . data . hasFeature . return_value = True [EOL] self . permissions . __getitem__ . return_value = True [EOL] [EOL] @ chat . permission_not_feature ( ( [string] , [string] ) ) async def t ( args ) : [EOL] return True [EOL] self . assertIs ( await t ( self . args ) , False ) [EOL] [EOL] async def test_permission_not_feature_not ( self ) : [EOL] self . data . hasFeature . return_value = True [EOL] self . permissions . __getitem__ . return_value = False [EOL] [EOL] @ chat . permission_not_feature ( ( [string] , [string] ) ) async def t ( args ) : [EOL] return True [EOL] self . assertIs ( await t ( self . args ) , False ) [EOL] [EOL] async def test_permission_not_feature_none_permission ( self ) : [EOL] self . data . hasFeature . return_value = False [EOL] [EOL] @ chat . permission_not_feature ( ( None , [string] ) ) async def t ( args ) : [EOL] return True [EOL] self . assertIs ( await t ( self . args ) , True ) [EOL] self . data . hasFeature . assert_called_once_with ( [string] , [string] ) [EOL] self . permissions . __getitem__ . assert_not_called ( ) [EOL] [EOL] async def test_permission_not_feature_none_feature ( self ) : [EOL] self . permissions . __getitem__ . return_value = True [EOL] [EOL] @ chat . permission_not_feature ( ( [string] , None ) ) async def t ( args ) : [EOL] return True [EOL] self . assertIs ( await t ( self . args ) , True ) [EOL] self . data . hasFeature . assert_not_called ( ) [EOL] self . permissions . __getitem__ . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_permission_not_feature_none_permission_not ( self ) : [EOL] self . data . hasFeature . return_value = True [EOL] [EOL] @ chat . permission_not_feature ( ( None , [string] ) ) async def t ( args ) : [EOL] return True [EOL] self . assertIs ( await t ( self . args ) , False ) [EOL] self . data . hasFeature . assert_called_once_with ( [string] , [string] ) [EOL] self . permissions . __getitem__ . assert_not_called ( ) [EOL] [EOL] async def test_permission_not_feature_none_feature_not ( self ) : [EOL] self . permissions . __getitem__ . return_value = False [EOL] [EOL] @ chat . permission_not_feature ( ( [string] , None ) ) async def t ( args ) : [EOL] return True [EOL] self . assertIs ( await t ( self . args ) , False ) [EOL] self . data . hasFeature . assert_not_called ( ) [EOL] self . permissions . __getitem__ . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_permission_not_feature_none_permission_feature ( self ) : [EOL] @ chat . permission_not_feature ( ( None , None ) ) async def t ( args ) : [EOL] return True [EOL] self . assertIs ( await t ( self . args ) , True ) [EOL] self . data . hasFeature . assert_not_called ( ) [EOL] self . permissions . __getitem__ . assert_not_called ( ) [EOL] [EOL] async def test_permission_not_feature_multiple ( self ) : [EOL] self . data . hasFeature . side_effect = [ True , False ] [EOL] self . permissions . __getitem__ . side_effect = [ False , True ] [EOL] [EOL] @ chat . permission_not_feature ( ( [string] , [string] ) , ( [string] , [string] ) ) async def t ( args ) : [EOL] return True [EOL] self . assertIs ( await t ( self . args ) , True ) [EOL] [EOL] async def test_permission_not_feature_multiple_not ( self ) : [EOL] self . data . hasFeature . side_effect = [ True , False ] [EOL] self . permissions . __getitem__ . side_effect = [ True , False ] [EOL] [EOL] @ chat . permission_not_feature ( ( [string] , [string] ) , ( [string] , [string] ) ) async def t ( args ) : [EOL] return True [EOL] self . assertIs ( await t ( self . args ) , False ) [EOL] [EOL] @ patch ( [string] ) async def test_cooldown ( self , mock_inCooldown ) : [EOL] mock_inCooldown . return_value = False [EOL] [EOL] @ chat . cooldown ( timedelta ( minutes = [number] ) , [string] ) async def t ( args ) : [EOL] return True [EOL] self . assertIs ( await t ( self . args ) , True ) [EOL] self . assertTrue ( mock_inCooldown . called ) [EOL] [EOL] @ patch ( [string] ) async def test_cooldown_not ( self , mock_inCooldown ) : [EOL] mock_inCooldown . return_value = True [EOL] [EOL] @ chat . cooldown ( timedelta ( minutes = [number] ) , [string] ) async def t ( args ) : [EOL] return True [EOL] self . assertIs ( await t ( self . args ) , False ) [EOL] self . assertTrue ( mock_inCooldown . called ) [EOL] [EOL] @ asynctest . fail_on ( unused_loop = False ) def test_in_cooldown ( self ) : [EOL] sessionData = { } [EOL] self . channel . sessionData = sessionData [EOL] self . assertIs ( chat . inCooldown ( self . args , timedelta ( hours = [number] ) , [string] ) , False ) [EOL] self . assertIn ( [string] , sessionData ) [EOL] self . assertEqual ( sessionData [ [string] ] , self . now ) [EOL] [EOL] @ asynctest . fail_on ( unused_loop = False ) def test_in_cooldown_existing ( self ) : [EOL] sessionData = { [string] : self . now - timedelta ( hours = [number] ) } [EOL] self . channel . sessionData = sessionData [EOL] self . assertIs ( chat . inCooldown ( self . args , timedelta ( hours = [number] ) , [string] ) , False ) [EOL] self . assertIn ( [string] , sessionData ) [EOL] self . assertEqual ( sessionData [ [string] ] , self . now ) [EOL] [EOL] @ asynctest . fail_on ( unused_loop = False ) def test_in_cooldown_recent ( self ) : [EOL] sessionData = { [string] : self . now - timedelta ( seconds = [number] ) } [EOL] self . channel . sessionData = sessionData [EOL] self . assertIs ( chat . inCooldown ( self . args , timedelta ( hours = [number] ) , [string] ) , True ) [EOL] self . assertIn ( [string] , sessionData ) [EOL] self . assertEqual ( sessionData [ [string] ] , self . now - timedelta ( seconds = [number] ) ) [EOL] [EOL] @ asynctest . fail_on ( unused_loop = False ) def test_in_cooldown_level_override ( self ) : [EOL] sessionData = { [string] : self . now - timedelta ( seconds = [number] ) } [EOL] self . channel . sessionData = sessionData [EOL] self . permissions . __getitem__ . return_value = True [EOL] self . assertIs ( chat . inCooldown ( self . args , timedelta ( hours = [number] ) , [string] , [string] ) , False ) [EOL] self . assertIn ( [string] , sessionData ) [EOL] self . assertEqual ( sessionData [ [string] ] , self . now ) [EOL] [EOL] @ asynctest . fail_on ( unused_loop = False ) def test_in_user_cooldown ( self ) : [EOL] sessionData = { } [EOL] self . channel . sessionData = sessionData [EOL] self . assertIs ( chat . in_user_cooldown ( self . args , timedelta ( hours = [number] ) , [string] ) , False ) [EOL] self . assertIn ( [string] , sessionData ) [EOL] self . assertIn ( [string] , sessionData [ [string] ] ) [EOL] self . assertEqual ( sessionData [ [string] ] [ [string] ] , self . now ) [EOL] [EOL] @ asynctest . fail_on ( unused_loop = False ) def test_in_user_cooldown_existing ( self ) : [EOL] sessionData = { [string] : { [string] : self . now - timedelta ( hours = [number] ) } } [EOL] self . channel . sessionData = sessionData [EOL] self . assertIs ( chat . in_user_cooldown ( self . args , timedelta ( hours = [number] ) , [string] ) , False ) [EOL] self . assertIn ( [string] , sessionData ) [EOL] self . assertIn ( [string] , sessionData [ [string] ] ) [EOL] self . assertEqual ( sessionData [ [string] ] [ [string] ] , self . now ) [EOL] [EOL] @ asynctest . fail_on ( unused_loop = False ) def test_in_user_cooldown_recent ( self ) : [EOL] sessionData = { [string] : { [string] : self . now - timedelta ( seconds = [number] ) } } [EOL] self . channel . sessionData = sessionData [EOL] self . assertIs ( chat . in_user_cooldown ( self . args , timedelta ( hours = [number] ) , [string] ) , True ) [EOL] self . assertIn ( [string] , sessionData ) [EOL] self . assertIn ( [string] , sessionData [ [string] ] ) [EOL] self . assertEqual ( sessionData [ [string] ] [ [string] ] , self . now - timedelta ( seconds = [number] ) ) [EOL] [EOL] @ asynctest . fail_on ( unused_loop = False ) def test_in_user_cooldown_level_override ( self ) : [EOL] sessionData = { [string] : { [string] : self . now - timedelta ( seconds = [number] ) } } [EOL] self . channel . sessionData = sessionData [EOL] self . permissions . __getitem__ . return_value = True [EOL] self . assertIs ( chat . in_user_cooldown ( self . args , timedelta ( hours = [number] ) , [string] , [string] ) , False ) [EOL] self . assertIn ( [string] , sessionData ) [EOL] self . assertIn ( [string] , sessionData [ [string] ] ) [EOL] self . assertEqual ( sessionData [ [string] ] [ [string] ] , self . now ) [EOL] [EOL] async def test_min_args ( self ) : [EOL] @ chat . min_args ( [number] ) async def t ( args ) : [EOL] return True [EOL] self . assertIs ( await t ( self . args ) , True ) [EOL] [EOL] async def test_min_args_not_enough ( self ) : [EOL] @ chat . min_args ( [number] ) async def t ( args ) : [EOL] return True [EOL] self . assertIs ( await t ( self . args ) , False ) [EOL] [EOL] async def test_min_args_not_return ( self ) : [EOL] @ chat . min_args ( [number] , _return = True ) async def t ( args ) : [EOL] return False [EOL] self . assertIs ( await t ( self . args ) , True ) [EOL] [EOL] async def test_min_args_not_reason ( self ) : [EOL] @ chat . min_args ( [number] , reason = [string] ) async def t ( args ) : [EOL] return False [EOL] await t ( self . args ) [EOL] self . channel . send . assert_called_once_with ( [string] ) [EOL]	
	0
import unittest [EOL] [EOL] from lib . helper import parser [EOL] [EOL] [EOL] class TestLibraryParserParseArguments ( unittest . TestCase ) : [EOL] def test ( self ) : [EOL] self . assertEqual ( parser . parseArguments ( [string] ) , [ [string] , [string] , [string] ] ) [EOL] [EOL] def test_complex ( self ) : [EOL] self . assertEqual ( parser . parseArguments ( [string] ) , [ [string] , [string] , [string] ] ) [EOL] [EOL] def test_mixed ( self ) : [EOL] self . assertEqual ( parser . parseArguments ( [string] ) , [ [string] , [string] , [string] ] ) [EOL] self . assertEqual ( parser . parseArguments ( [string] ) , [ [string] , [string] , [string] ] ) [EOL] self . assertEqual ( parser . parseArguments ( [string] ) , [ [string] , [string] ] ) [EOL] [EOL] def test_single_quote ( self ) : [EOL] self . assertEqual ( parser . parseArguments ( [string] ) , [ [string] , [string] ] ) [EOL] [EOL] def test_escape ( self ) : [EOL] self . assertEqual ( parser . parseArguments ( [string] ) , [ [string] , [string] , [string] ] ) [EOL] self . assertEqual ( parser . parseArguments ( [string] ) , [ [string] , [string] , [string] ] ) [EOL] self . assertEqual ( parser . parseArguments ( [string] ) , [ [string] , [string] , [string] ] ) [EOL] self . assertEqual ( parser . parseArguments ( [string] ) , [ [string] , [string] , [string] ] ) [EOL] [EOL] [EOL] class TestLibraryParserGetResponse ( unittest . TestCase ) : [EOL] def test ( self ) : [EOL] self . assertEqual ( parser . get_response ( [string] ) , parser . Response . Unknown ) [EOL] [EOL] def test_default ( self ) : [EOL] self . assertEqual ( parser . get_response ( [string] , default = parser . Response . Yes ) , parser . Response . Yes ) [EOL] self . assertEqual ( parser . get_response ( [string] , default = parser . Response . No ) , parser . Response . No ) [EOL] [EOL] def test_unknown ( self ) : [EOL] self . assertEqual ( parser . get_response ( [string] ) , parser . Response . Unknown ) [EOL] [EOL] def test_yes ( self ) : [EOL] self . assertEqual ( parser . get_response ( [string] ) , parser . Response . Yes ) [EOL] self . assertEqual ( parser . get_response ( [string] ) , parser . Response . Yes ) [EOL] self . assertEqual ( parser . get_response ( [string] ) , parser . Response . Yes ) [EOL] self . assertEqual ( parser . get_response ( [string] ) , parser . Response . Yes ) [EOL] self . assertEqual ( parser . get_response ( [string] ) , parser . Response . Yes ) [EOL] self . assertEqual ( parser . get_response ( [string] ) , parser . Response . Yes ) [EOL] self . assertEqual ( parser . get_response ( [string] ) , parser . Response . Yes ) [EOL] self . assertEqual ( parser . get_response ( [string] ) , parser . Response . Yes ) [EOL] self . assertEqual ( parser . get_response ( [string] ) , parser . Response . Yes ) [EOL] [EOL] def test_no ( self ) : [EOL] self . assertEqual ( parser . get_response ( [string] ) , parser . Response . No ) [EOL] self . assertEqual ( parser . get_response ( [string] ) , parser . Response . No ) [EOL] self . assertEqual ( parser . get_response ( [string] ) , parser . Response . No ) [EOL] self . assertEqual ( parser . get_response ( [string] ) , parser . Response . No ) [EOL] self . assertEqual ( parser . get_response ( [string] ) , parser . Response . No ) [EOL] self . assertEqual ( parser . get_response ( [string] ) , parser . Response . No ) [EOL] self . assertEqual ( parser . get_response ( [string] ) , parser . Response . No ) [EOL] self . assertEqual ( parser . get_response ( [string] ) , parser . Response . No ) [EOL] self . assertEqual ( parser . get_response ( [string] ) , parser . Response . No ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import aioredis [EOL] import asynctest [EOL] from datetime import datetime [EOL] from asynctest import CoroutineMock , Mock [EOL] [EOL] import bot [comment] [EOL] [EOL] from lib import cache [EOL] [EOL] [EOL] class TestCacheStore ( asynctest . TestCase ) : [EOL] async def setUp ( self ) : [EOL] self . pool = Mock ( spec = aioredis . RedisPool ) [EOL] self . pool . acquire = CoroutineMock ( ) [EOL] self . connection = Mock ( spec = aioredis . RedisConnection ) [EOL] self . connection . execute = CoroutineMock ( ) [EOL] self . pool . acquire . return_value = self . connection [EOL] self . data = cache . CacheStore ( self . pool ) [EOL] await self . data . open ( ) [EOL] [EOL] async def test ( self ) : [EOL] await self . data . close ( ) [EOL] [EOL] async def test_datetime_str ( self ) : [EOL] dt = datetime ( [number] , [number] , [number] ) [EOL] self . assertEqual ( dt , self . data . strToDatetime ( self . data . datetimeToStr ( dt ) ) ) [EOL] [EOL] async def test_datetime_str_microsecond ( self ) : [EOL] dt = datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] self . assertEqual ( dt , self . data . strToDatetime ( self . data . datetimeToStr ( dt ) ) ) [EOL] [EOL] async def test_datetime_str_none ( self ) : [EOL] self . assertIsNone ( self . data . strToDatetime ( None ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import asynctest [EOL] import json [EOL] [EOL] import aiohttp [EOL] [EOL] from lib . api import bttv [EOL] from asynctest . mock import MagicMock , patch [EOL] [EOL] globalEmotes = [string] [EOL] [EOL] broadcasterEmotes = [string] [EOL] [EOL] [EOL] class TestApiBttv ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . mock_response = MagicMock ( spec = aiohttp . ClientResponse ) [EOL] self . mock_response . __aenter__ . return_value = self . mock_response [EOL] self . mock_response . __aexit__ . return_value = False [EOL] self . mock_response . status = [number] [EOL] self . mock_response . json . return_value = { } [EOL] [EOL] self . mock_session = MagicMock ( spec = aiohttp . ClientSession ) [EOL] self . mock_session . __aenter__ . return_value = self . mock_session [EOL] self . mock_session . __aexit__ . return_value = False [EOL] self . mock_session . get . return_value = self . mock_response [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_clientsession = patcher . start ( ) [EOL] self . mock_clientsession . return_value = self . mock_session [EOL] [EOL] async def fail_test_globalEmotes ( self ) : [EOL] data = json . loads ( globalEmotes . decode ( ) ) [EOL] self . mock_response . json . return_value = data [EOL] self . assertEqual ( await bttv . getGlobalEmotes ( ) , { [string] : [string] } ) [EOL] [EOL] async def fail_test_globalEmotes_404 ( self ) : [EOL] exception = aiohttp . ClientResponseError ( None , None , code = [number] ) [EOL] self . mock_session . get . side_effect = exception [EOL] self . assertEqual ( await bttv . getGlobalEmotes ( ) , { } ) [EOL] [EOL] async def fail_test_globalEmotes_error ( self ) : [EOL] exception = aiohttp . ClientResponseError ( None , None ) [EOL] self . mock_session . get . side_effect = exception [EOL] self . assertIsNone ( await bttv . getGlobalEmotes ( ) ) [EOL] [EOL] async def fail_test_broadcasterEmotes ( self ) : [EOL] data = json . loads ( broadcasterEmotes . decode ( ) ) [EOL] self . mock_response . json . return_value = data [EOL] self . assertEqual ( await bttv . getBroadcasterEmotes ( [string] ) , { [string] : [string] } ) [EOL] [EOL] async def fail_test_broadcasterEmotes_404 ( self ) : [EOL] exception = aiohttp . ClientResponseError ( None , None , code = [number] ) [EOL] self . mock_session . get . side_effect = exception [EOL] self . assertEqual ( await bttv . getBroadcasterEmotes ( [string] ) , { } ) [EOL] [EOL] async def fail_test_broadcasterEmotes_error ( self ) : [EOL] exception = aiohttp . ClientResponseError ( None , None ) [EOL] self . mock_session . get . side_effect = exception [EOL] self . assertIsNone ( await bttv . getBroadcasterEmotes ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import unittest [EOL] from bot . coroutine . connection import ConnectionHandler [EOL] from bot . data import Channel , ConnectionReset [EOL] from bot . twitchmessage import IrcMessage , IrcMessageParams [EOL] from datetime import datetime [EOL] from lib import ircmessage [EOL] from unittest . mock import Mock , patch [EOL] [EOL] [EOL] class PublicTestIrcMessage ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . connection = Mock ( spec = ConnectionHandler ) [EOL] self . channel = Mock ( spec = Channel ) [EOL] self . channel . channel = [string] [EOL] self . channel . ircOps = set ( ) [EOL] self . channel . ircUsers = set ( ) [EOL] self . connection . channels = { [string] : self . channel } [EOL] self . now = datetime ( [number] , [number] , [number] ) [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_log = patcher . start ( ) [EOL] [EOL] @ patch . dict ( [string] ) @ patch ( [string] ) @ patch ( [string] ) @ patch ( [string] ) def test_parseMessage ( self , mock_log , mock_import_module , mock_globals ) : [EOL] mock_globals . pkgs = [ [string] ] [EOL] mock_parse = Mock ( ) [EOL] mock_import_module . return_value = Mock ( ) [EOL] mock_import_module . return_value . parseMessage = mock_parse [EOL] ircmessage . ircHandlers [ [string] ] = Mock ( ) [EOL] ircmessage . ircHandlers [ [string] ] = Mock ( ) [EOL] ircmessage . parseMessage ( self . connection , [string] , self . now ) [EOL] self . assertTrue ( ircmessage . ircHandlers [ [string] ] . called ) [EOL] self . assertFalse ( ircmessage . ircHandlers [ [string] ] . called ) [EOL] self . assertTrue ( mock_log . called ) [EOL] self . assertTrue ( mock_parse . called ) [EOL] [EOL] @ patch . dict ( [string] ) def test_registerIrc ( self ) : [EOL] @ ircmessage . registerIrc ( [string] ) def irc_kappa ( socket , message , timestamp ) : [EOL] pass [EOL] self . assertIn ( [string] , ircmessage . ircHandlers ) [EOL] self . assertIs ( ircmessage . ircHandlers [ [string] ] , irc_kappa ) [EOL] [EOL] def test_log_channel_message ( self ) : [EOL] message = IrcMessage ( command = [string] , params = IrcMessageParams ( middle = [string] , trailing = [string] ) ) [EOL] ircmessage . log_channel_message ( message , self . now ) [EOL] self . assertTrue ( self . mock_log . called ) [EOL] [EOL] def test_log_channel_message_not ( self ) : [EOL] ircmessage . log_channel_message ( IrcMessage ( command = [number] ) , self . now ) [EOL] self . assertFalse ( self . mock_log . called ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) def test_log_irc_privmsg ( self , mock_parse , mock_config ) : [EOL] mock_config . botnick = [string] [EOL] message = IrcMessage . fromMessage ( [string] [string] ) [EOL] ircmessage . irc_privmsg ( self . connection , message , self . now ) [EOL] self . assertTrue ( mock_parse . called ) [EOL] self . assertTrue ( self . mock_log . called ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) def test_log_irc_privmsg_no_channel ( self , mock_parse , mock_config ) : [EOL] mock_config . botnick = [string] [EOL] message = IrcMessage . fromMessage ( [string] [string] ) [EOL] ircmessage . irc_privmsg ( self . connection , message , self . now ) [EOL] self . assertFalse ( mock_parse . called ) [EOL] self . assertTrue ( self . mock_log . called ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) def test_log_irc_privmsg_mention ( self , mock_parse , mock_config ) : [EOL] mock_config . botnick = [string] [EOL] message = IrcMessage . fromMessage ( [string] [string] ) [EOL] ircmessage . irc_privmsg ( self . connection , message , self . now ) [EOL] self . assertTrue ( mock_parse . called ) [EOL] self . assertGreaterEqual ( self . mock_log . call_count , [number] ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) def test_log_irc_whisper ( self , mock_parse , mock_config ) : [EOL] mock_config . botnick = [string] [EOL] message = IrcMessage . fromMessage ( [string] [string] ) [EOL] ircmessage . irc_whisper ( self . connection , message , self . now ) [EOL] self . assertTrue ( mock_parse . called ) [EOL] self . assertGreaterEqual ( self . mock_log . call_count , [number] ) [EOL] [EOL] @ patch ( [string] , autospec = True ) def test_log_irc_notice ( self , mock_parse ) : [EOL] message = IrcMessage . fromMessage ( [string] [string] ) [EOL] ircmessage . irc_notice ( self . connection , message , self . now ) [EOL] self . assertTrue ( mock_parse . called ) [EOL] self . assertTrue ( self . mock_log . called ) [EOL] [EOL] @ patch ( [string] , autospec = True ) def test_log_irc_clearchat ( self , mock_parse ) : [EOL] message = IrcMessage . fromMessage ( [string] ) [EOL] ircmessage . irc_clearchat ( self . connection , message , self . now ) [EOL] self . assertTrue ( mock_parse . called ) [EOL] self . assertTrue ( self . mock_log . called ) [EOL] [EOL] def test_log_irc_roomstate ( self ) : [EOL] message = IrcMessage . fromMessage ( [string] ) [EOL] ircmessage . irc_clearchat ( self . connection , message , self . now ) [EOL] self . assertTrue ( self . mock_log . called ) [EOL] [EOL] def test_log_irc_hosttarget ( self ) : [EOL] message = IrcMessage . fromMessage ( [string] ) [EOL] ircmessage . irc_clearchat ( self . connection , message , self . now ) [EOL] self . assertTrue ( self . mock_log . called ) [EOL] [EOL] def test_log_irc_mode_plus_o ( self ) : [EOL] message = IrcMessage . fromMessage ( [string] ) [EOL] ircmessage . irc_mode ( self . connection , message , self . now ) [EOL] self . assertEqual ( self . channel . ircOps , { [string] } ) [EOL] [EOL] def test_log_irc_mode_plus_o_duplicating ( self ) : [EOL] self . channel . ircOps = { [string] } [EOL] message = IrcMessage . fromMessage ( [string] ) [EOL] ircmessage . irc_mode ( self . connection , message , self . now ) [EOL] self . assertEqual ( self . channel . ircOps , { [string] } ) [EOL] [EOL] def test_log_irc_mode_minus_o_empty ( self ) : [EOL] message = IrcMessage . fromMessage ( [string] ) [EOL] ircmessage . irc_mode ( self . connection , message , self . now ) [EOL] self . assertEqual ( self . channel . ircOps , set ( ) ) [EOL] [EOL] def test_log_irc_join ( self ) : [EOL] message = IrcMessage . fromMessage ( [string] [string] ) [EOL] ircmessage . irc_join ( self . connection , message , self . now ) [EOL] self . assertEqual ( self . channel . ircUsers , { [string] } ) [EOL] [EOL] def test_log_irc_353 ( self ) : [EOL] message = IrcMessage . fromMessage ( [string] [string] ) [EOL] ircmessage . irc_353 ( self . connection , message , self . now ) [EOL] self . assertEqual ( self . channel . ircUsers , { [string] } ) [EOL] self . assertTrue ( self . mock_log . called ) [EOL] [EOL] def test_log_irc_366 ( self ) : [EOL] message = IrcMessage . fromMessage ( [string] [string] ) [EOL] ircmessage . irc_353 ( self . connection , message , self . now ) [EOL] self . assertTrue ( self . mock_log . called ) [EOL] [EOL] def test_log_irc_part ( self ) : [EOL] self . channel . ircUsers . add ( [string] ) [EOL] message = IrcMessage . fromMessage ( [string] [string] ) [EOL] ircmessage . irc_part ( self . connection , message , self . now ) [EOL] self . assertEqual ( self . channel . ircUsers , set ( ) ) [EOL] [EOL] def test_log_irc_part_empty ( self ) : [EOL] message = IrcMessage . fromMessage ( [string] [string] ) [EOL] ircmessage . irc_part ( self . connection , message , self . now ) [EOL] self . assertEqual ( self . channel . ircUsers , set ( ) ) [EOL] [EOL] def test_log_irc_ping ( self ) : [EOL] message = IrcMessage . fromMessage ( [string] ) [EOL] ircmessage . irc_ping ( self . connection , message , self . now ) [EOL] self . assertTrue ( self . connection . ping . called ) [EOL] [EOL] @ patch ( [string] , autospec = True ) def test_log_irc_pong ( self , mock_config ) : [EOL] mock_config . botnick = [string] [EOL] message = IrcMessage . fromMessage ( [string] ) [EOL] ircmessage . irc_pong ( self . connection , message , self . now ) [EOL] self . assertEqual ( self . connection . lastPing , self . now ) [EOL] [EOL] @ patch ( [string] , autospec = True ) def test_log_irc_userstate ( self , mock_parse ) : [EOL] message = IrcMessage . fromMessage ( [string] ) [EOL] ircmessage . irc_userstate ( self . connection , message , self . now ) [EOL] self . assertTrue ( mock_parse . called ) [EOL] self . assertTrue ( self . mock_log . called ) [EOL] [EOL] def test_log_irc_reconnect ( self ) : [EOL] message = IrcMessage . fromMessage ( [string] ) [EOL] with self . assertRaises ( ConnectionReset ) : [EOL] ircmessage . irc_reconnect ( self . connection , message , self . now ) [EOL]	
import unittest [EOL] from datetime import datetime , timedelta [EOL] from lib . data import timezones [EOL] [EOL] [EOL] class TestDataBasicTimeZone ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . timezone = timezones . BasicTimeZone ( [number] , [string] ) [EOL] [EOL] def test_zone_none ( self ) : [EOL] self . assertRaises ( TypeError , timezones . BasicTimeZone , None ) [EOL] [EOL] def test_zone_int_none ( self ) : [EOL] self . assertRaises ( TypeError , timezones . BasicTimeZone , [number] , None ) [EOL] [EOL] def test_tzname ( self ) : [EOL] self . assertEqual ( self . timezone . tzname ( None ) , [string] ) [EOL] [EOL] def test_utcoffset ( self ) : [EOL] self . assertEqual ( self . timezone . utcoffset ( None ) , timedelta ( minutes = [number] ) ) [EOL] [EOL] def test_dst ( self ) : [EOL] self . assertEqual ( self . timezone . dst ( None ) , timedelta ( ) ) [EOL] [EOL] [EOL] class TestDataBasicTimeZoneNegative ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . timezone = timezones . BasicTimeZone ( - [number] , [string] ) [EOL] [EOL] def test_tzname ( self ) : [EOL] self . assertEqual ( self . timezone . tzname ( None ) , [string] ) [EOL] [EOL] def test_utcoffset ( self ) : [EOL] self . assertEqual ( self . timezone . utcoffset ( None ) , timedelta ( minutes = - [number] ) ) [EOL] [EOL] def test_dst ( self ) : [EOL] self . assertEqual ( self . timezone . dst ( None ) , timedelta ( ) ) [EOL] [EOL] [EOL] class TestDataTimeZone ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] transitions = [ timezones . Transition ( - [number] , [string] , [number] ) , timezones . Transition ( [number] * [number] , [string] , [number] ) , timezones . Transition ( [number] * [number] , [string] , [number] ) , timezones . Transition ( [number] * [number] , [string] , [number] ) , timezones . Transition ( [number] * [number] , [string] , [number] ) , timezones . Transition ( [number] , [string] , [number] ) , ] [EOL] self . timezone = timezones . TimeZone ( [string] , transitions ) [EOL] [EOL] def test_none ( self ) : [EOL] transitions = [ timezones . Transition ( [number] , [string] , [number] ) ] [EOL] self . assertRaises ( TypeError , timezones . TimeZone , None , transitions ) [EOL] [EOL] def test_str_none ( self ) : [EOL] self . assertRaises ( TypeError , timezones . TimeZone , [string] , None ) [EOL] [EOL] def test_no_transitions ( self ) : [EOL] self . assertRaises ( ValueError , timezones . TimeZone , [string] , [ ] ) [EOL] [EOL] def test_zone ( self ) : [EOL] self . assertEqual ( self . timezone . zone ( ) , [string] ) [EOL] [EOL] def test_tzname_none_int ( self ) : [EOL] self . assertRaises ( TypeError , self . timezone . tzname , [number] ) [EOL] [EOL] def test_utcoffset_none_int ( self ) : [EOL] self . assertRaises ( TypeError , self . timezone . utcoffset , [number] ) [EOL] [EOL] def test_dst_none_int ( self ) : [EOL] self . assertRaises ( TypeError , self . timezone . dst , [number] ) [EOL] [EOL] def test_tzname_none ( self ) : [EOL] self . assertEqual ( self . timezone . tzname ( None ) , [string] ) [EOL] [EOL] def test_utcoffset_none ( self ) : [EOL] self . assertEqual ( self . timezone . utcoffset ( None ) , timedelta ( minutes = [number] ) ) [EOL] [EOL] def test_dst_none ( self ) : [EOL] self . assertEqual ( self . timezone . dst ( None ) , timedelta ( ) ) [EOL] [EOL] def test_tzname_datetime ( self ) : [EOL] self . assertEqual ( self . timezone . tzname ( datetime ( [number] , [number] , [number] ) ) , [string] ) [EOL] self . assertEqual ( self . timezone . tzname ( datetime ( [number] , [number] , [number] ) ) , [string] ) [EOL] self . assertEqual ( self . timezone . tzname ( datetime ( [number] , [number] , [number] ) ) , [string] ) [EOL] self . assertEqual ( self . timezone . tzname ( datetime ( [number] , [number] , [number] ) ) , [string] ) [EOL] self . assertEqual ( self . timezone . tzname ( datetime ( [number] , [number] , [number] ) ) , [string] ) [EOL] self . assertEqual ( self . timezone . tzname ( datetime ( [number] , [number] , [number] ) ) , [string] ) [EOL] [EOL] def test_utcoffset_datetime ( self ) : [EOL] self . assertEqual ( self . timezone . utcoffset ( datetime ( [number] , [number] , [number] ) ) , timedelta ( minutes = [number] ) ) [EOL] self . assertEqual ( self . timezone . utcoffset ( datetime ( [number] , [number] , [number] ) ) , timedelta ( minutes = [number] ) ) [EOL] self . assertEqual ( self . timezone . utcoffset ( datetime ( [number] , [number] , [number] ) ) , timedelta ( minutes = [number] ) ) [EOL] self . assertEqual ( self . timezone . utcoffset ( datetime ( [number] , [number] , [number] ) ) , timedelta ( minutes = [number] ) ) [EOL] self . assertEqual ( self . timezone . utcoffset ( datetime ( [number] , [number] , [number] ) ) , timedelta ( minutes = [number] ) ) [EOL] self . assertEqual ( self . timezone . utcoffset ( datetime ( [number] , [number] , [number] ) ) , timedelta ( minutes = [number] ) ) [EOL] [EOL] def test_dst_datetime ( self ) : [EOL] self . assertEqual ( self . timezone . dst ( datetime ( [number] , [number] , [number] ) ) , timedelta ( ) ) [EOL] self . assertEqual ( self . timezone . dst ( datetime ( [number] , [number] , [number] ) ) , timedelta ( minutes = [number] ) ) [EOL] self . assertEqual ( self . timezone . dst ( datetime ( [number] , [number] , [number] ) ) , timedelta ( ) ) [EOL] self . assertEqual ( self . timezone . dst ( datetime ( [number] , [number] , [number] ) ) , timedelta ( minutes = [number] ) ) [EOL] self . assertEqual ( self . timezone . dst ( datetime ( [number] , [number] , [number] ) ) , timedelta ( ) ) [EOL] self . assertEqual ( self . timezone . dst ( datetime ( [number] , [number] , [number] ) ) , timedelta ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import unittest [EOL] [EOL] import asynctest [EOL] [EOL] from datetime import datetime [EOL] [EOL] from asynctest . mock import CoroutineMock , MagicMock , Mock , PropertyMock [EOL] from asynctest . mock import call , patch [EOL] [EOL] from bot . data import Channel [EOL] from bot . twitchmessage import IrcMessageTags [EOL] from lib import channel [EOL] from lib . cache import CacheStore [EOL] from lib . data . message import Message [EOL] [EOL] [EOL] class TestChannel ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . tags = IrcMessageTags ( IrcMessageTags . parseTags ( [string] [string] [string] ) ) [EOL] self . channel = Mock ( spec = Channel ) [EOL] self . channel . channel = [string] [EOL] self . now = datetime ( [number] , [number] , [number] ) [EOL] [EOL] @ patch ( [string] ) async def test_parse ( self , mock_chatCommand ) : [EOL] channel . parse ( self . channel , self . tags , [string] , [string] , self . now ) [EOL] self . assertTrue ( mock_chatCommand . called ) [EOL] [EOL] @ asynctest . fail_on ( unused_loop = False ) @ patch ( [string] ) def test_parse_empty ( self , mock_chatCommand ) : [EOL] channel . parse ( self . channel , self . tags , [string] , [string] , self . now ) [EOL] self . assertFalse ( mock_chatCommand . called ) [EOL] [EOL] @ asynctest . fail_on ( unused_loop = False ) @ patch ( [string] ) def test_parse_spaces ( self , mock_chatCommand ) : [EOL] channel . parse ( self . channel , self . tags , [string] , [string] , self . now ) [EOL] self . assertFalse ( mock_chatCommand . called ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] ) @ patch ( [string] , autospec = True ) async def test_chatCommand ( self , mock_commands , mock_data , mock_log ) : [EOL] command1 = CoroutineMock ( spec = lambda args : False , return_value = False ) [EOL] command2 = CoroutineMock ( spec = lambda args : False , return_value = True ) [EOL] command3 = CoroutineMock ( spec = lambda args : False , return_value = False ) [EOL] mock_commands . return_value = [ command1 , command2 , command3 ] [EOL] data = MagicMock ( spec = CacheStore ) [EOL] data . __aenter__ . return_value = data [EOL] data . __aexit__ . return_value = True [EOL] data . isPermittedUser . return_value = False [EOL] data . isBotManager . return_value = False [EOL] mock_data . return_value = data [EOL] message = Mock ( spec = Message ) [EOL] type ( message ) . command = PropertyMock ( return_value = [string] ) [EOL] await channel . chatCommand ( self . channel , self . tags , [string] , message , self . now ) [EOL] data . twitch_save_id . assert_has_calls ( [ call ( [string] , [string] ) , call ( [string] , [string] ) ] ) [EOL] self . assertEqual ( data . isPermittedUser . call_count , [number] ) [EOL] self . assertEqual ( data . isBotManager . call_count , [number] ) [EOL] self . assertEqual ( mock_commands . call_count , [number] ) [EOL] self . assertEqual ( command1 . call_count , [number] ) [EOL] self . assertEqual ( command2 . call_count , [number] ) [EOL] self . assertEqual ( command3 . call_count , [number] ) [EOL] self . assertEqual ( mock_log . call_count , [number] ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] ) @ patch ( [string] , autospec = True ) async def test_chatCommand_except ( self , mock_commands , mock_data , mock_log ) : [EOL] command = CoroutineMock ( spec = lambda args : False , side_effect = Exception ) [EOL] mock_commands . return_value = [ command , command ] [EOL] data = MagicMock ( spec = CacheStore ) [EOL] data . __aenter__ . return_value = data [EOL] data . __aexit__ . return_value = False [EOL] data . isPermittedUser . return_value = False [EOL] data . isBotManager . return_value = False [EOL] mock_data . return_value = data [EOL] message = Mock ( spec = Message ) [EOL] type ( message ) . command = PropertyMock ( return_value = [string] ) [EOL] await channel . chatCommand ( self . channel , self . tags , [string] , message , self . now ) [EOL] self . assertTrue ( data . twitch_save_id . called ) [EOL] self . assertEqual ( data . isPermittedUser . call_count , [number] ) [EOL] self . assertEqual ( data . isBotManager . call_count , [number] ) [EOL] self . assertEqual ( mock_commands . call_count , [number] ) [EOL] self . assertEqual ( command . call_count , [number] ) [EOL] self . assertTrue ( mock_log . called ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] ) @ patch ( [string] , autospec = True ) async def test_chatCommand_data_except ( self , mock_commands , mock_data , mock_log ) : [EOL] mock_data . side_effect = Exception [EOL] message = Mock ( spec = Message ) [EOL] type ( message ) . command = PropertyMock ( return_value = [string] ) [EOL] await channel . chatCommand ( self . channel , self . tags , [string] , message , self . now ) [EOL] self . assertFalse ( mock_commands . called ) [EOL] self . assertTrue ( mock_log . called ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] ) @ patch ( [string] , autospec = True ) async def test_chatCommand_no_tags ( self , mock_commands , mock_data , mock_log ) : [EOL] command1 = CoroutineMock ( spec = lambda args : False , return_value = False ) [EOL] command2 = CoroutineMock ( spec = lambda args : False , return_value = True ) [EOL] command3 = CoroutineMock ( spec = lambda args : False , return_value = False ) [EOL] mock_commands . return_value = [ command1 , command2 , command3 ] [EOL] data = MagicMock ( spec = CacheStore ) [EOL] data . __aenter__ . return_value = data [EOL] data . __aexit__ . return_value = True [EOL] data . isPermittedUser . return_value = False [EOL] data . isBotManager . return_value = False [EOL] mock_data . return_value = data [EOL] message = Mock ( spec = Message ) [EOL] type ( message ) . command = PropertyMock ( return_value = [string] ) [EOL] await channel . chatCommand ( self . channel , None , [string] , message , self . now ) [EOL] self . assertFalse ( data . twitch_save_id . called ) [EOL] self . assertEqual ( data . isPermittedUser . call_count , [number] ) [EOL] self . assertEqual ( data . isBotManager . call_count , [number] ) [EOL] self . assertEqual ( mock_commands . call_count , [number] ) [EOL] self . assertEqual ( command1 . call_count , [number] ) [EOL] self . assertEqual ( command2 . call_count , [number] ) [EOL] self . assertEqual ( command3 . call_count , [number] ) [EOL] self . assertEqual ( mock_log . call_count , [number] ) [EOL] [EOL] [EOL] class TestChannelCommandToProcess ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_list = patcher . start ( ) [EOL] self . mock_list . filterMessage . return_value = [ ] [EOL] self . mock_list . commands . return_value = { } [EOL] self . mock_list . commandsStartWith . return_value = { } [EOL] self . mock_list . processNoCommand . return_value = [ ] [EOL] [EOL] self . command1 = lambda args : False [EOL] self . command2 = lambda args : False [EOL] self . command3 = lambda args : False [EOL] self . command4 = lambda args : False [EOL] [EOL] def test_commandsToProcess_empty ( self ) : [EOL] self . assertEqual ( list ( channel . commandsToProcess ( [string] ) ) , [ ] ) [EOL] [EOL] def test_commandsToProcess_specific ( self ) : [EOL] self . mock_list . commands . return_value [ [string] ] = self . command1 [EOL] self . assertEqual ( list ( channel . commandsToProcess ( [string] ) ) , [ self . command1 ] ) [EOL] [EOL] def test_commandsToProcess_specific_no_match ( self ) : [EOL] self . mock_list . commands . return_value [ [string] ] = self . command1 [EOL] self . assertEqual ( list ( channel . commandsToProcess ( [string] ) ) , [ ] ) [EOL] [EOL] def test_commandsToProcess_specific_none ( self ) : [EOL] self . mock_list . commands . return_value [ [string] ] = None [EOL] self . assertEqual ( list ( channel . commandsToProcess ( [string] ) ) , [ ] ) [EOL] [EOL] def test_commandsToProcess_startswith ( self ) : [EOL] self . mock_list . commandsStartWith . return_value [ [string] ] = self . command1 [EOL] self . assertEqual ( list ( channel . commandsToProcess ( [string] ) ) , [ self . command1 ] ) [EOL] [EOL] def test_commandsToProcess_startswith_exact ( self ) : [EOL] self . mock_list . commandsStartWith . return_value [ [string] ] = self . command1 [EOL] self . assertEqual ( list ( channel . commandsToProcess ( [string] ) ) , [ self . command1 ] ) [EOL] [EOL] def test_commandsToProcess_startswith_none ( self ) : [EOL] self . mock_list . commandsStartWith . return_value [ [string] ] = None [EOL] self . assertEqual ( list ( channel . commandsToProcess ( [string] ) ) , [ ] ) [EOL] [EOL] def test_commandsToProcess_startswith_no_match ( self ) : [EOL] commands = self . mock_list . commandsStartWith . return_value [EOL] commands [ [string] ] = self . command1 [EOL] self . assertEqual ( list ( channel . commandsToProcess ( [string] ) ) , [ ] ) [EOL] [EOL] def test_commandsToProcess_startswith_multiple ( self ) : [EOL] self . mock_list . commandsStartWith . return_value [ [string] ] = self . command1 [EOL] self . mock_list . commandsStartWith . return_value [ [string] ] = self . command2 [EOL] self . assertCountEqual ( list ( channel . commandsToProcess ( [string] ) ) , [ self . command1 , self . command2 ] ) [EOL] [EOL] def test_commandsToProcess_specific_startswith ( self ) : [EOL] self . mock_list . commands . return_value [ [string] ] = self . command1 [EOL] self . mock_list . commandsStartWith . return_value [ [string] ] = self . command2 [EOL] self . mock_list . commandsStartWith . return_value [ [string] ] = self . command3 [EOL] self . assertCountEqual ( list ( channel . commandsToProcess ( [string] ) ) , [ self . command1 , self . command2 , self . command3 ] ) [EOL] [EOL] def test_commandsToProcess_filter ( self ) : [EOL] self . mock_list . filterMessage . return_value . append ( self . command1 ) [EOL] self . assertCountEqual ( list ( channel . commandsToProcess ( [string] ) ) , [ self . command1 ] ) [EOL] [EOL] def test_commandsToProcess_nocommand ( self ) : [EOL] self . mock_list . processNoCommand . return_value . append ( self . command1 ) [EOL] self . assertCountEqual ( list ( channel . commandsToProcess ( [string] ) ) , [ self . command1 ] ) [EOL] [EOL] def test_commandsToProcess_ordering ( self ) : [EOL] self . mock_list . filterMessage . return_value . append ( self . command1 ) [EOL] self . mock_list . commands . return_value [ [string] ] = self . command2 [EOL] self . mock_list . commandsStartWith . return_value [ [string] ] = self . command3 [EOL] self . mock_list . processNoCommand . return_value . append ( self . command4 ) [EOL] self . assertCountEqual ( list ( channel . commandsToProcess ( [string] ) ) , [ self . command1 , self . command2 , self . command3 , self . command4 ] ) [EOL]	
from datetime import datetime , timedelta [EOL] [EOL] import asynctest [EOL] from asynctest . mock import MagicMock , Mock , call , patch [EOL] [EOL] from bot . data import Channel [EOL] from lib . cache import CacheStore [EOL] from lib . database import DatabaseTimeout [EOL] from lib . helper import timeout [EOL] from tests . unittest . mock_class import TypeMatch [EOL] [EOL] [EOL] class TestLibraryTimeoutUser ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . now = datetime ( [number] , [number] , [number] ) [EOL] self . dbtimeout = MagicMock ( spec = DatabaseTimeout ) [EOL] self . dbtimeout . __aenter__ . return_value = self . dbtimeout [EOL] self . data = MagicMock ( spec = CacheStore ) [EOL] self . data . getChatProperties . return_value = { [string] : [number] , [string] : [number] , [string] : [number] , } [EOL] self . channel = Mock ( spec = Channel ) [EOL] self . channel . channel = [string] [EOL] self . channel . sessionData = { } [EOL] [EOL] patcher = patch . object ( DatabaseTimeout , [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_database = patcher . start ( ) [EOL] self . mock_database . return_value = self . dbtimeout [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_config = patcher . start ( ) [EOL] self . mock_config . moderatorDefaultTimeout = [ [number] , [number] , [number] ] [EOL] self . mock_config . warningDuration = [number] [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_whisper = patcher . start ( ) [EOL] [EOL] patcher = patch ( [string] , autospec = True , return_value = self . now ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_now = patcher . start ( ) [EOL] [EOL] async def test ( self ) : [EOL] await timeout . timeout_user ( self . data , self . channel , [string] , [string] ) [EOL] self . data . getChatProperties . assert_called_once_with ( [string] , [ [string] , [string] , [string] ] , TypeMatch ( dict ) , int ) [EOL] self . assertIn ( [string] , self . channel . sessionData ) [EOL] self . assertIn ( [string] , self . channel . sessionData [ [string] ] ) [EOL] self . assertIn ( [string] , self . channel . sessionData [ [string] ] [ [string] ] ) [EOL] self . assertEqual ( self . channel . sessionData [ [string] ] [ [string] ] [ [string] ] , ( self . now , [number] ) ) [EOL] self . channel . send . assert_called_once_with ( [string] , [number] ) [EOL] self . mock_database . assert_called_once_with ( ) [EOL] self . dbtimeout . recordTimeout . assert_called_once_with ( [string] , [string] , None , [string] , [number] , [number] , None , None ) [EOL] self . assertFalse ( self . mock_whisper . called ) [EOL] [EOL] async def test_reason ( self ) : [EOL] await timeout . timeout_user ( self . data , self . channel , [string] , [string] , reason = [string] ) [EOL] self . data . getChatProperties . assert_called_once_with ( [string] , [ [string] , [string] , [string] ] , TypeMatch ( dict ) , int ) [EOL] self . assertIn ( [string] , self . channel . sessionData ) [EOL] self . assertIn ( [string] , self . channel . sessionData [ [string] ] ) [EOL] self . assertIn ( [string] , self . channel . sessionData [ [string] ] [ [string] ] ) [EOL] self . assertEqual ( self . channel . sessionData [ [string] ] [ [string] ] [ [string] ] , ( self . now , [number] ) ) [EOL] self . channel . send . assert_called_once_with ( [string] , [number] ) [EOL] self . mock_database . assert_called_once_with ( ) [EOL] self . dbtimeout . recordTimeout . assert_called_once_with ( [string] , [string] , None , [string] , [number] , [number] , None , [string] ) [EOL] [EOL] async def test_message ( self ) : [EOL] await timeout . timeout_user ( self . data , self . channel , [string] , [string] , message = [string] ) [EOL] self . data . getChatProperties . assert_called_once_with ( [string] , [ [string] , [string] , [string] ] , TypeMatch ( dict ) , int ) [EOL] self . assertIn ( [string] , self . channel . sessionData ) [EOL] self . assertIn ( [string] , self . channel . sessionData [ [string] ] ) [EOL] self . assertIn ( [string] , self . channel . sessionData [ [string] ] [ [string] ] ) [EOL] self . assertEqual ( self . channel . sessionData [ [string] ] [ [string] ] [ [string] ] , ( self . now , [number] ) ) [EOL] self . channel . send . assert_called_once_with ( [string] , [number] ) [EOL] self . mock_database . assert_called_once_with ( ) [EOL] self . dbtimeout . recordTimeout . assert_called_once_with ( [string] , [string] , None , [string] , [number] , [number] , [string] , None ) [EOL] self . assertFalse ( self . mock_whisper . called ) [EOL] [EOL] async def test_base_level_1 ( self ) : [EOL] await timeout . timeout_user ( self . data , self . channel , [string] , [string] , base_level = [number] ) [EOL] self . data . getChatProperties . assert_called_once_with ( [string] , [ [string] , [string] , [string] ] , TypeMatch ( dict ) , int ) [EOL] self . assertIn ( [string] , self . channel . sessionData ) [EOL] self . assertIn ( [string] , self . channel . sessionData [ [string] ] ) [EOL] self . assertIn ( [string] , self . channel . sessionData [ [string] ] [ [string] ] ) [EOL] self . assertEqual ( self . channel . sessionData [ [string] ] [ [string] ] [ [string] ] , ( self . now , [number] ) ) [EOL] self . channel . send . assert_called_once_with ( [string] , [number] ) [EOL] self . mock_database . assert_called_once_with ( ) [EOL] self . dbtimeout . recordTimeout . assert_called_once_with ( [string] , [string] , None , [string] , [number] , [number] , None , None ) [EOL] self . assertFalse ( self . mock_whisper . called ) [EOL] [EOL] async def test_base_level_2 ( self ) : [EOL] await timeout . timeout_user ( self . data , self . channel , [string] , [string] , base_level = [number] ) [EOL] self . data . getChatProperties . assert_called_once_with ( [string] , [ [string] , [string] , [string] ] , TypeMatch ( dict ) , int ) [EOL] self . assertIn ( [string] , self . channel . sessionData ) [EOL] self . assertIn ( [string] , self . channel . sessionData [ [string] ] ) [EOL] self . assertIn ( [string] , self . channel . sessionData [ [string] ] [ [string] ] ) [EOL] self . assertEqual ( self . channel . sessionData [ [string] ] [ [string] ] [ [string] ] , ( self . now , [number] ) ) [EOL] self . channel . send . assert_called_once_with ( [string] , [number] ) [EOL] self . mock_database . assert_called_once_with ( ) [EOL] self . dbtimeout . recordTimeout . assert_called_once_with ( [string] , [string] , None , [string] , [number] , [number] , None , None ) [EOL] self . assertFalse ( self . mock_whisper . called ) [EOL] [EOL] async def test_base_level_3 ( self ) : [EOL] await timeout . timeout_user ( self . data , self . channel , [string] , [string] , base_level = [number] ) [EOL] self . data . getChatProperties . assert_called_once_with ( [string] , [ [string] , [string] , [string] ] , TypeMatch ( dict ) , int ) [EOL] self . assertIn ( [string] , self . channel . sessionData ) [EOL] self . assertIn ( [string] , self . channel . sessionData [ [string] ] ) [EOL] self . assertIn ( [string] , self . channel . sessionData [ [string] ] [ [string] ] ) [EOL] self . assertEqual ( self . channel . sessionData [ [string] ] [ [string] ] [ [string] ] , ( self . now , [number] ) ) [EOL] self . channel . send . assert_called_once_with ( [string] , [number] ) [EOL] self . mock_database . assert_called_once_with ( ) [EOL] self . dbtimeout . recordTimeout . assert_called_once_with ( [string] , [string] , None , [string] , [number] , [number] , None , None ) [EOL] self . assertFalse ( self . mock_whisper . called ) [EOL] [EOL] async def test_base_level_negative ( self ) : [EOL] await timeout . timeout_user ( self . data , self . channel , [string] , [string] , base_level = - [number] ) [EOL] self . data . getChatProperties . assert_called_once_with ( [string] , [ [string] , [string] , [string] ] , TypeMatch ( dict ) , int ) [EOL] self . assertIn ( [string] , self . channel . sessionData ) [EOL] self . assertIn ( [string] , self . channel . sessionData [ [string] ] ) [EOL] self . assertIn ( [string] , self . channel . sessionData [ [string] ] [ [string] ] ) [EOL] self . assertEqual ( self . channel . sessionData [ [string] ] [ [string] ] [ [string] ] , ( self . now , [number] ) ) [EOL] self . channel . send . assert_called_once_with ( [string] , [number] ) [EOL] self . mock_database . assert_called_once_with ( ) [EOL] self . dbtimeout . recordTimeout . assert_called_once_with ( [string] , [string] , None , [string] , [number] , [number] , None , None ) [EOL] self . assertFalse ( self . mock_whisper . called ) [EOL] [EOL] async def test_override ( self ) : [EOL] self . data . getChatProperties . return_value = { [string] : [number] , [string] : [number] , [string] : [number] , } [EOL] await timeout . timeout_user ( self . data , self . channel , [string] , [string] ) [EOL] self . data . getChatProperties . assert_called_once_with ( [string] , [ [string] , [string] , [string] ] , TypeMatch ( dict ) , int ) [EOL] self . assertIn ( [string] , self . channel . sessionData ) [EOL] self . assertIn ( [string] , self . channel . sessionData [ [string] ] ) [EOL] self . assertIn ( [string] , self . channel . sessionData [ [string] ] [ [string] ] ) [EOL] self . assertEqual ( self . channel . sessionData [ [string] ] [ [string] ] [ [string] ] , ( self . now , [number] ) ) [EOL] self . channel . send . assert_called_once_with ( [string] , [number] ) [EOL] self . mock_database . assert_called_once_with ( ) [EOL] self . dbtimeout . recordTimeout . assert_called_once_with ( [string] , [string] , None , [string] , [number] , [number] , None , None ) [EOL] self . assertFalse ( self . mock_whisper . called ) [EOL] [EOL] async def test_ban ( self ) : [EOL] self . data . getChatProperties . return_value = { [string] : [number] , [string] : [number] , [string] : [number] , } [EOL] await timeout . timeout_user ( self . data , self . channel , [string] , [string] ) [EOL] self . data . getChatProperties . assert_called_once_with ( [string] , [ [string] , [string] , [string] ] , TypeMatch ( dict ) , int ) [EOL] self . assertIn ( [string] , self . channel . sessionData ) [EOL] self . assertIn ( [string] , self . channel . sessionData [ [string] ] ) [EOL] self . assertIn ( [string] , self . channel . sessionData [ [string] ] [ [string] ] ) [EOL] self . assertEqual ( self . channel . sessionData [ [string] ] [ [string] ] [ [string] ] , ( self . now , [number] ) ) [EOL] self . channel . send . assert_called_once_with ( [string] , [number] ) [EOL] self . mock_database . assert_called_once_with ( ) [EOL] self . dbtimeout . recordTimeout . assert_called_once_with ( [string] , [string] , None , [string] , [number] , [number] , None , None ) [EOL] self . assertFalse ( self . mock_whisper . called ) [EOL] [EOL] async def test_repeat_0 ( self ) : [EOL] self . channel . sessionData [ [string] ] = { [string] : { [string] : ( self . now - timedelta ( seconds = [number] ) , [number] ) } } [EOL] await timeout . timeout_user ( self . data , self . channel , [string] , [string] ) [EOL] self . data . getChatProperties . assert_called_once_with ( [string] , [ [string] , [string] , [string] ] , TypeMatch ( dict ) , int ) [EOL] self . assertIn ( [string] , self . channel . sessionData ) [EOL] self . assertIn ( [string] , self . channel . sessionData [ [string] ] ) [EOL] self . assertIn ( [string] , self . channel . sessionData [ [string] ] [ [string] ] ) [EOL] self . assertEqual ( self . channel . sessionData [ [string] ] [ [string] ] [ [string] ] , ( self . now , [number] ) ) [EOL] self . channel . send . assert_called_once_with ( [string] , [number] ) [EOL] self . mock_database . assert_called_once_with ( ) [EOL] self . dbtimeout . recordTimeout . assert_called_once_with ( [string] , [string] , None , [string] , [number] , [number] , None , None ) [EOL] self . assertFalse ( self . mock_whisper . called ) [EOL] [EOL] async def test_repeat_1 ( self ) : [EOL] self . channel . sessionData [ [string] ] = { [string] : { [string] : ( self . now - timedelta ( seconds = [number] ) , [number] ) } } [EOL] await timeout . timeout_user ( self . data , self . channel , [string] , [string] ) [EOL] self . data . getChatProperties . assert_called_once_with ( [string] , [ [string] , [string] , [string] ] , TypeMatch ( dict ) , int ) [EOL] self . assertIn ( [string] , self . channel . sessionData ) [EOL] self . assertIn ( [string] , self . channel . sessionData [ [string] ] ) [EOL] self . assertIn ( [string] , self . channel . sessionData [ [string] ] [ [string] ] ) [EOL] self . assertEqual ( self . channel . sessionData [ [string] ] [ [string] ] [ [string] ] , ( self . now , [number] ) ) [EOL] self . channel . send . assert_called_once_with ( [string] , [number] ) [EOL] self . mock_database . assert_called_once_with ( ) [EOL] self . dbtimeout . recordTimeout . assert_called_once_with ( [string] , [string] , None , [string] , [number] , [number] , None , None ) [EOL] self . assertFalse ( self . mock_whisper . called ) [EOL] [EOL] async def test_repeat_2 ( self ) : [EOL] self . channel . sessionData [ [string] ] = { [string] : { [string] : ( self . now - timedelta ( seconds = [number] ) , [number] ) } } [EOL] await timeout . timeout_user ( self . data , self . channel , [string] , [string] ) [EOL] self . data . getChatProperties . assert_called_once_with ( [string] , [ [string] , [string] , [string] ] , TypeMatch ( dict ) , int ) [EOL] self . assertIn ( [string] , self . channel . sessionData ) [EOL] self . assertIn ( [string] , self . channel . sessionData [ [string] ] ) [EOL] self . assertIn ( [string] , self . channel . sessionData [ [string] ] [ [string] ] ) [EOL] self . assertEqual ( self . channel . sessionData [ [string] ] [ [string] ] [ [string] ] , ( self . now , [number] ) ) [EOL] self . channel . send . assert_called_once_with ( [string] , [number] ) [EOL] self . mock_database . assert_called_once_with ( ) [EOL] self . dbtimeout . recordTimeout . assert_called_once_with ( [string] , [string] , None , [string] , [number] , [number] , None , None ) [EOL] self . assertFalse ( self . mock_whisper . called ) [EOL] [EOL] [EOL] class TestLibraryTimeoutRecord ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . database = MagicMock ( spec = DatabaseTimeout ) [EOL] self . database . __aenter__ . return_value = self . database [EOL] self . channel = Mock ( spec = Channel ) [EOL] self . channel . channel = [string] [EOL] [EOL] patcher = patch . object ( DatabaseTimeout , [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_database = patcher . start ( ) [EOL] self . mock_database . return_value = self . database [EOL] [EOL] async def test ( self ) : [EOL] await timeout . record_timeout ( self . channel , None , [string] , [string] , [string] ) [EOL] self . assertFalse ( self . database . recordTimeout . called ) [EOL] [EOL] async def test_timeout ( self ) : [EOL] await timeout . record_timeout ( self . channel , None , [string] , [string] , [string] ) [EOL] self . database . recordTimeout . assert_called_once_with ( [string] , [string] , None , [string] , None , None , [string] , None ) [EOL] [EOL] async def test_timeout_length ( self ) : [EOL] await timeout . record_timeout ( self . channel , None , [string] , [string] , [string] ) [EOL] self . database . recordTimeout . assert_called_once_with ( [string] , [string] , None , [string] , None , [number] , [string] , None ) [EOL] [EOL] async def test_timeout_length_reason ( self ) : [EOL] await timeout . record_timeout ( self . channel , None , [string] , [string] , [string] ) [EOL] self . database . recordTimeout . assert_called_once_with ( [string] , [string] , None , [string] , None , [number] , [string] , [string] ) [EOL] [EOL] async def test_slash_timeout ( self ) : [EOL] await timeout . record_timeout ( self . channel , None , [string] , [string] , [string] ) [EOL] self . database . recordTimeout . assert_called_once_with ( [string] , [string] , None , [string] , None , None , [string] , None ) [EOL] [EOL] async def test_slash_timeout_length ( self ) : [EOL] await timeout . record_timeout ( self . channel , None , [string] , [string] , [string] ) [EOL] self . database . recordTimeout . assert_called_once_with ( [string] , [string] , None , [string] , None , [number] , [string] , None ) [EOL] [EOL] async def test_slash_timeout_length_reason ( self ) : [EOL] await timeout . record_timeout ( self . channel , None , [string] , [string] , [string] ) [EOL] self . database . recordTimeout . assert_called_once_with ( [string] , [string] , None , [string] , None , [number] , [string] , [string] ) [EOL] [EOL] async def test_ban ( self ) : [EOL] await timeout . record_timeout ( self . channel , None , [string] , [string] , [string] ) [EOL] self . database . recordTimeout . assert_called_once_with ( [string] , [string] , None , [string] , None , [number] , [string] , None ) [EOL] [EOL] async def test_ban_reason ( self ) : [EOL] await timeout . record_timeout ( self . channel , None , [string] , [string] , [string] ) [EOL] self . database . recordTimeout . assert_called_once_with ( [string] , [string] , None , [string] , None , [number] , [string] , [string] ) [EOL] [EOL] async def test_slash_ban ( self ) : [EOL] await timeout . record_timeout ( self . channel , None , [string] , [string] , [string] ) [EOL] self . database . recordTimeout . assert_called_once_with ( [string] , [string] , None , [string] , None , [number] , [string] , None ) [EOL] [EOL] async def test_slash_ban_reason ( self ) : [EOL] await timeout . record_timeout ( self . channel , None , [string] , [string] , [string] ) [EOL] self . database . recordTimeout . assert_called_once_with ( [string] , [string] , None , [string] , None , [number] , [string] , [string] ) [EOL] [EOL] async def test_bad ( self ) : [EOL] await timeout . record_timeout ( self . channel , None , [string] , [string] , [string] ) [EOL] await timeout . record_timeout ( self . channel , None , [string] , [string] , [string] ) [EOL] await timeout . record_timeout ( self . channel , None , [string] , [string] , [string] ) [EOL] self . assertFalse ( self . database . recordTimeout . called ) [EOL] [EOL] async def test_who ( self ) : [EOL] await timeout . record_timeout ( self . channel , [string] , [string] , [string] , [string] ) [EOL] self . database . recordTimeout . assert_called_once_with ( [string] , [string] , [string] , [string] , None , None , [string] , None ) [EOL] [EOL] async def test_multiple ( self ) : [EOL] await timeout . record_timeout ( self . channel , None , [ [string] , [string] ] , [string] , [string] ) [EOL] self . assertEqual ( self . database . recordTimeout . mock_calls , [ call ( [string] , [string] , None , [string] , None , [number] , [string] , None ) , call ( [string] , [string] , None , [string] , None , [number] , [string] , None ) , ] ) [EOL]	
import asynctest [EOL] from datetime import datetime , timedelta [EOL] from lib . api import cache [EOL] from asynctest . mock import patch [EOL] [EOL] [EOL] class TestApi ( asynctest . TestCase ) : [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) async def test_cache ( self , mock_globals , mock_now ) : [EOL] basenow = datetime ( [number] , [number] , [number] ) [EOL] data = { } [EOL] mock_now . return_value = basenow [EOL] mock_globals . globalSessionData = data [EOL] i = [number] [EOL] [EOL] @ cache . cache ( [string] , timedelta ( seconds = [number] ) ) async def d ( ) : [EOL] nonlocal i [EOL] i += [number] [EOL] return i [EOL] [EOL] self . assertEqual ( await d ( ) , [number] ) [EOL] self . assertIn ( [string] , mock_globals . globalSessionData ) [EOL] self . assertIn ( ( ( ) , ( ) ) , mock_globals . globalSessionData [ [string] ] ) [EOL] self . assertEqual ( basenow , mock_globals . globalSessionData [ [string] ] [ ( ) , ( ) ] [ [number] ] ) [EOL] self . assertEqual ( mock_globals . globalSessionData [ [string] ] [ ( ) , ( ) ] [ [number] ] , [number] ) [EOL] mock_now . return_value = basenow + timedelta ( seconds = [number] ) [EOL] self . assertEqual ( await d ( ) , [number] ) [EOL] self . assertEqual ( basenow , mock_globals . globalSessionData [ [string] ] [ ( ) , ( ) ] [ [number] ] ) [EOL] self . assertEqual ( mock_globals . globalSessionData [ [string] ] [ ( ) , ( ) ] [ [number] ] , [number] ) [EOL] mock_now . return_value = basenow + timedelta ( seconds = [number] ) [EOL] self . assertEqual ( await d ( ) , [number] ) [EOL] self . assertEqual ( basenow + timedelta ( seconds = [number] ) , mock_globals . globalSessionData [ [string] ] [ ( ) , ( ) ] [ [number] ] ) [EOL] self . assertEqual ( mock_globals . globalSessionData [ [string] ] [ ( ) , ( ) ] [ [number] ] , [number] ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) async def test_cache_except ( self , mock_globals , mock_now ) : [EOL] mock_now . return_value = datetime ( [number] , [number] , [number] ) [EOL] mock_globals . globalSessionData = { } [EOL] [EOL] @ cache . cache ( [string] , timedelta ( seconds = [number] ) ) async def d ( ) : [EOL] raise ConnectionError ( ) [EOL] [EOL] self . assertEqual ( await d ( ) , None ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Optional , Type , Callable , Union , Awaitable , Iterable [EOL] import typing [EOL] import lib [EOL] from bot import data as botData [comment] [EOL] from . message import Message [EOL] from . permissions import ChatPermissionSet , WhisperPermissionSet [EOL] from . . import cache [comment] [EOL] from . . import database as databaseM [comment] [EOL] from bot . twitchmessage import IrcMessageTagsReadOnly [EOL] from datetime import datetime [EOL] from typing import Awaitable , Callable , Iterable , List , NamedTuple [EOL] from typing import Optional , Union [EOL] [EOL] [EOL] Send = Callable [ [ Union [ str , Iterable [ str ] ] ] , None ] [EOL] [EOL] [EOL] class ChatCommandArgs ( NamedTuple ) : [EOL] data = ... [EOL] chat = ... [EOL] tags = ... [EOL] nick = ... [EOL] message = ... [EOL] permissions = ... [EOL] timestamp = ... [EOL] [EOL] [EOL] class WhisperCommandArgs ( NamedTuple ) : [EOL] data = ... [EOL] nick = ... [EOL] message = ... [EOL] permissions = ... [EOL] timestamp = ... [EOL] [EOL] [EOL] class CustomFieldArgs ( NamedTuple ) : [EOL] field = ... [EOL] param = ... [EOL] prefix = ... [EOL] suffix = ... [EOL] default = ... [EOL] message = ... [EOL] channel = ... [EOL] nick = ... [EOL] permissions = ... [EOL] timestamp = ... [EOL] [EOL] [EOL] class CustomProcessArgs ( NamedTuple ) : [EOL] data = ... [EOL] chat = ... [EOL] tags = ... [EOL] nick = ... [EOL] permissions = ... [EOL] broadcaster = ... [EOL] level = ... [EOL] command = ... [EOL] messages = ... [EOL] [EOL] [EOL] class ManageBotArgs ( NamedTuple ) : [EOL] data = ... [EOL] permissions = ... [EOL] send = ... [EOL] nick = ... [EOL] message = ... [EOL] [EOL] [EOL] ChatCommand = Callable [ [ ChatCommandArgs ] , Awaitable [ bool ] ] [EOL] [EOL] WhisperCommand = Callable [ [ WhisperCommandArgs ] , Awaitable [ bool ] ] [EOL] [EOL] CustomCommandField = Callable [ [ CustomFieldArgs ] , Awaitable [ Optional [ str ] ] ] [EOL] [EOL] CustomCommandProcess = Callable [ [ CustomProcessArgs ] , Awaitable [ None ] ] [EOL] [EOL] ManageBotCommand = Callable [ [ ManageBotArgs ] , Awaitable [ bool ] ] [EOL] [EOL] [EOL] class CustomCommand ( NamedTuple ) : [EOL] message = ... [EOL] broadcaster = ... [EOL] level = ... [EOL] [EOL] [EOL] class CommandActionTokens ( NamedTuple ) : [EOL] action = ... [EOL] broadcaster = ... [EOL] level = ... [EOL] command = ... [EOL] text = ... [EOL] [EOL] [EOL] class CustomFieldParts ( NamedTuple ) : [EOL] plainText = ... [EOL] field = ... [EOL] format = ... [comment] [EOL] prefix = ... [EOL] suffix = ... [EOL] param = ... [EOL] default = ... [EOL] original = ... [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'cache.CacheStore'$ 0 0 0 $'botData.Channel'$ 0 0 0 $bot.twitchmessage.IrcMessageTagsReadOnly$ 0 0 0 $builtins.str$ 0 0 0 $message.Message$ 0 0 0 $permissions.ChatPermissionSet$ 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 $'cache.CacheStore'$ 0 0 0 $builtins.str$ 0 0 0 $message.Message$ 0 0 0 $permissions.WhisperPermissionSet$ 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $message.Message$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $permissions.ChatPermissionSet$ 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 $'cache.CacheStore'$ 0 0 0 $'botData.Channel'$ 0 0 0 $bot.twitchmessage.IrcMessageTagsReadOnly$ 0 0 0 $builtins.str$ 0 0 0 $permissions.ChatPermissionSet$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $'cache.CacheStore'$ 0 0 0 $typing.Union[permissions.ChatPermissionSet,permissions.WhisperPermissionSet]$ 0 0 0 $Send$ 0 0 0 $builtins.str$ 0 0 0 $message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0
from datetime import datetime [EOL] from typing import NamedTuple , Optional , Union [EOL] [EOL] [EOL] class AutoJoinChannel ( NamedTuple ) : [EOL] broadcaster = ... [EOL] priority = ... [EOL] [EOL] [EOL] class AutoRepeatMessage ( NamedTuple ) : [EOL] broadcaster = ... [EOL] name = ... [EOL] message = ... [EOL] [EOL] [EOL] class AutoRepeatList ( NamedTuple ) : [EOL] name = ... [EOL] message = ... [EOL] remaining = ... [EOL] duration = ... [EOL] last = ... [EOL] [EOL] [EOL] class RepeatData ( NamedTuple ) : [EOL] broadcaster = ... [EOL] name = ... [EOL] message = ... [EOL] remaining = ... [EOL] duration = ... [EOL] last = ... [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Union[builtins.int,builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $builtins.float$ 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $builtins.float$ 0 0 0 $datetime.datetime$ 0 0 0
from typing import Optional , Set [EOL] import typing [EOL] import builtins [EOL] import bot [EOL] import bot [EOL] from bot import data [comment] [EOL] from bot . twitchmessage import IrcMessageTagsReadOnly [EOL] from typing import Optional , Set [EOL] [EOL] [EOL] typeTwitchStaff = { [string] } [EOL] typeTwitchAdmin = { [string] , [string] } [EOL] typeGlobalModerator = { [string] , [string] , [string] } [EOL] typeModerator = { [string] , [string] , [string] , [string] } [EOL] [EOL] [EOL] class ChatPermissionSet : [EOL] def __init__ ( self , tags , user , channel , permitted , manager ) : [EOL] userType = ... [EOL] if tags is not None and [string] in tags : [EOL] userType = str ( tags [ [string] ] ) [EOL] else : [EOL] userType = [string] [EOL] self . _tags = tags [EOL] self . _userType = userType [EOL] self . _user = user [EOL] self . _channel = channel [EOL] self . _isOwner = ... [EOL] self . _isManager = manager [EOL] self . _inOwnerChannel = ... [EOL] self . _isTwitchStaff = ... [EOL] self . _isTwitchAdmin = ... [EOL] self . _isGlobalMod = ... [EOL] self . _isBroadcaster = ... [EOL] self . _isModerator = ... [EOL] self . _isSubscriber = ... [EOL] self . _permitted = permitted [EOL] self . _bannable = ... [EOL] [EOL] @ property def owner ( self ) : [EOL] if not hasattr ( self , [string] ) : [EOL] self . _isOwner = self . _user == bot . config . owner [EOL] return self . _isOwner [EOL] [EOL] @ property def inOwnerChannel ( self ) : [EOL] if not hasattr ( self , [string] ) : [EOL] inOwner = self . _channel . channel == bot . config . owner [EOL] inBot = self . _channel . channel == bot . config . botnick [EOL] self . _inOwnerChannel = inOwner or inBot [EOL] return self . _inOwnerChannel [EOL] [EOL] @ property def manager ( self ) : [EOL] return self . _isManager or self . owner [EOL] [EOL] @ property def twitchStaff ( self ) : [EOL] if not hasattr ( self , [string] ) : [EOL] self . _isTwitchStaff = self . _userType in typeTwitchStaff [EOL] self . _isTwitchStaff = self . manager or self . _isTwitchStaff [EOL] return self . _isTwitchStaff [EOL] [EOL] @ property def twitchAdmin ( self ) : [EOL] if not hasattr ( self , [string] ) : [EOL] self . _isTwitchAdmin = self . _userType in typeTwitchAdmin [EOL] self . _isTwitchAdmin = self . twitchStaff or self . _isTwitchAdmin [EOL] return self . _isTwitchAdmin [EOL] [EOL] @ property def globalModerator ( self ) : [EOL] if not hasattr ( self , [string] ) : [EOL] self . _isGlobalMod = self . _userType in typeGlobalModerator [EOL] self . _isGlobalMod = self . twitchAdmin or self . _isGlobalMod [EOL] return self . _isGlobalMod [EOL] [EOL] @ property def broadcaster ( self ) : [EOL] if not hasattr ( self , [string] ) : [EOL] self . _isBroadcaster = self . _channel . channel == self . _user [EOL] self . _isBroadcaster = self . globalModerator or self . _isBroadcaster [EOL] return self . _isBroadcaster [EOL] [EOL] @ property def moderator ( self ) : [EOL] if not hasattr ( self , [string] ) : [EOL] self . _isModerator = self . _userType in typeModerator [EOL] self . _isModerator = self . broadcaster or self . _isModerator [EOL] return self . _isModerator [EOL] [EOL] @ property def subscriber ( self ) : [EOL] if not hasattr ( self , [string] ) : [EOL] subscriber = ... [EOL] if self . _tags is not None and [string] in self . _tags : [EOL] assert isinstance ( self . _tags [ [string] ] , str ) [EOL] subscriber = int ( self . _tags [ [string] ] ) [EOL] else : [EOL] subscriber = [number] [EOL] self . _isSubscriber = self . broadcaster or bool ( subscriber ) [EOL] return self . _isSubscriber [EOL] [EOL] @ property def permitted ( self ) : [EOL] return not self . bannable or self . _permitted [EOL] [EOL] @ property def bannable ( self ) : [EOL] if not hasattr ( self , [string] ) : [EOL] self . _bannable = ( self . _userType not in typeModerator [EOL] and self . _channel . channel != self . _user ) [EOL] return self . _bannable [EOL] [EOL] @ property def chatModerator ( self ) : [EOL] return self . _channel . isMod [EOL] [EOL] def __getitem__ ( self , key ) : [EOL] if isinstance ( key , str ) : [EOL] if key == [string] : [EOL] return self . owner [EOL] if key == [string] : [EOL] return self . manager [EOL] if key in [ [string] , [string] ] : [EOL] return self . inOwnerChannel [EOL] if key in [ [string] , [string] ] : [EOL] return self . twitchStaff [EOL] if key in [ [string] , [string] ] : [EOL] return self . twitchAdmin [EOL] if key in [ [string] , [string] ] : [EOL] return self . globalModerator [EOL] if key == [string] : [EOL] return self . broadcaster [EOL] if key == [string] : [EOL] return self . moderator [EOL] if key == [string] : [EOL] return self . subscriber [EOL] if key == [string] : [EOL] return self . permitted [EOL] if key == [string] : [EOL] return self . bannable [EOL] if key in [ [string] , [string] ] : [EOL] return self . chatModerator [EOL] raise KeyError ( [string] ) [EOL] raise TypeError ( [string] ) [EOL] [EOL] [EOL] class WhisperPermissionSet : [EOL] def __init__ ( self , tags , user , manager ) : [EOL] userType = ... [EOL] if [string] in tags : [EOL] userType = str ( tags [ [string] ] ) [EOL] else : [EOL] userType = [string] [EOL] self . _tags = tags [EOL] self . _userType = userType [EOL] self . _user = user [EOL] self . _isOwner = ... [EOL] self . _isManager = manager [EOL] self . _isTwitchStaff = ... [EOL] self . _isTwitchAdmin = ... [EOL] self . _isGlobalMod = ... [EOL] self . _isTurbo = ... [EOL] [EOL] @ property def owner ( self ) : [EOL] if not hasattr ( self , [string] ) : [EOL] self . _isOwner = self . _user == bot . config . owner [EOL] return self . _isOwner [EOL] [EOL] @ property def manager ( self ) : [EOL] return self . _isManager or self . owner [EOL] [EOL] @ property def twitchStaff ( self ) : [EOL] if not hasattr ( self , [string] ) : [EOL] self . _isTwitchStaff = self . _userType in typeTwitchStaff [EOL] self . _isTwitchStaff = self . manager or self . _isTwitchStaff [EOL] return self . _isTwitchStaff [EOL] [EOL] @ property def twitchAdmin ( self ) : [EOL] if not hasattr ( self , [string] ) : [EOL] self . _isTwitchAdmin = self . _userType in typeTwitchAdmin [EOL] self . _isTwitchAdmin = self . twitchStaff or self . _isTwitchAdmin [EOL] return self . _isTwitchAdmin [EOL] [EOL] @ property def globalModerator ( self ) : [EOL] if not hasattr ( self , [string] ) : [EOL] self . _isGlobalMod = self . _userType in typeGlobalModerator [EOL] self . _isGlobalMod = self . twitchAdmin or self . _isGlobalMod [EOL] return self . _isGlobalMod [EOL] [EOL] def __getitem__ ( self , key ) : [EOL] if isinstance ( key , str ) : [EOL] if key == [string] : [EOL] return self . owner [EOL] if key == [string] : [EOL] return self . manager [EOL] if key in [ [string] , [string] ] : [EOL] return self . twitchStaff [EOL] if key in [ [string] , [string] ] : [EOL] return self . twitchAdmin [EOL] if key in [ [string] , [string] ] : [EOL] return self . globalModerator [EOL] raise KeyError ( [string] ) [EOL] raise TypeError ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Optional[bot.twitchmessage.IrcMessageTagsReadOnly]$ 0 $builtins.str$ 0 $'data.Channel'$ 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Optional[bot.twitchmessage.IrcMessageTagsReadOnly]$ 0 0 0 0 0 0 $typing.Optional[bot.twitchmessage.IrcMessageTagsReadOnly]$ 0 0 $builtins.str$ 0 0 0 $typing.Optional[bot.twitchmessage.IrcMessageTagsReadOnly]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Optional[bot.twitchmessage.IrcMessageTagsReadOnly]$ 0 $typing.Optional[bot.twitchmessage.IrcMessageTagsReadOnly]$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $bot.data.Channel$ 0 $'data.Channel'$ 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $bot.twitchmessage.IrcMessageTagsReadOnly$ 0 $builtins.str$ 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $bot.twitchmessage.IrcMessageTagsReadOnly$ 0 0 $builtins.str$ 0 0 0 $bot.twitchmessage.IrcMessageTagsReadOnly$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $bot.twitchmessage.IrcMessageTagsReadOnly$ 0 $bot.twitchmessage.IrcMessageTagsReadOnly$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . _types import Send [comment] [EOL] from . _types import ChatCommandArgs , WhisperCommandArgs , ManageBotArgs [comment] [EOL] from . _types import CustomFieldArgs , CustomProcessArgs [comment] [EOL] from . _types import ChatCommand , WhisperCommand , ManageBotCommand [comment] [EOL] from . _types import CustomCommandField , CustomCommandProcess [comment] [EOL] from . _types import CustomCommand , CommandActionTokens , CustomFieldParts [comment] [EOL] [EOL] from . _data_types import AutoJoinChannel [comment] [EOL] from . _data_types import AutoRepeatMessage , AutoRepeatList , RepeatData [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , AsyncIterator , List [EOL] import typing [EOL] import datetime [EOL] import data [EOL] import builtins [EOL] import lib [EOL] import json [EOL] from datetime import datetime , timedelta [EOL] from typing import AsyncIterator , List , Optional [comment] [EOL] [EOL] from bot import utils [EOL] from . _abc import AbcCacheStore [EOL] from . . database import DatabaseMain [EOL] from . . import data [EOL] [EOL] [EOL] class AutoRepeatMixin ( AbcCacheStore ) : [EOL] async def loadAutoRepeats ( self ) : [EOL] repeats = ... [EOL] db = ... [EOL] async with DatabaseMain . acquire ( ) as db : [EOL] repeats = [ r async for r in db . getAutoRepeats ( ) ] [EOL] await self . redis . setex ( [string] , [number] , json . dumps ( [ repeat [ : - [number] ] + ( self . datetimeToStr ( repeat . last ) , ) for repeat in repeats ] ) ) [EOL] return repeats [EOL] [EOL] async def _getAutoRepeats ( self ) : [EOL] value = await self . redis . get ( [string] ) [EOL] if value is None : [EOL] return await self . loadAutoRepeats ( ) [EOL] else : [EOL] return [ data . RepeatData ( repeat [ [number] ] , repeat [ [number] ] , repeat [ [number] ] , repeat [ [number] ] , repeat [ [number] ] , self . strToDatetime ( repeat [ [number] ] ) ) for repeat in json . loads ( value ) ] [EOL] [EOL] async def getAutoRepeatToSend ( self , timestamp = None ) : [EOL] now = timestamp or utils . now ( ) [EOL] repeats = await self . _getAutoRepeats ( ) [EOL] repeat = ... [EOL] for repeat in repeats : [EOL] if repeat . last + timedelta ( minutes = repeat . duration ) > now : [EOL] continue [EOL] yield data . AutoRepeatMessage ( repeat . broadcaster , repeat . name , repeat . message ) [EOL] [EOL] async def listAutoRepeat ( self , broadcaster ) : [EOL] repeats = await self . _getAutoRepeats ( ) [EOL] repeat = ... [EOL] for repeat in repeats : [EOL] if repeat . broadcaster != broadcaster : [EOL] continue [EOL] yield data . AutoRepeatList ( repeat . name , repeat . message , repeat . remaining , repeat . duration , repeat . last ) [EOL] [EOL] async def resetAutoRepeats ( self ) : [EOL] await self . redis . delete ( [string] ) [EOL] [EOL] async def clearAutoRepeat ( self , broadcaster ) : [EOL] val = ... [EOL] db = ... [EOL] async with DatabaseMain . acquire ( ) as db : [EOL] val = await db . clearAutoRepeat ( broadcaster ) [EOL] if val : [EOL] await self . resetAutoRepeats ( ) [EOL] return val [EOL] [EOL] async def sentAutoRepeat ( self , broadcaster , name ) : [EOL] val = ... [EOL] db = ... [EOL] async with DatabaseMain . acquire ( ) as db : [EOL] val = await db . sentAutoRepeat ( broadcaster , name ) [EOL] if val : [EOL] await self . resetAutoRepeats ( ) [EOL] return val [EOL] [EOL] async def setAutoRepeat ( self , broadcaster , name , message , count , minutes ) : [EOL] val = ... [EOL] db = ... [EOL] async with DatabaseMain . acquire ( ) as db : [EOL] val = await db . setAutoRepeat ( broadcaster , name , message , count , minutes ) [EOL] if val : [EOL] await self . resetAutoRepeats ( ) [EOL] return val [EOL] [EOL] async def removeAutoRepeat ( self , broadcaster , name ) : [EOL] val = ... [EOL] db = ... [EOL] async with DatabaseMain . acquire ( ) as db : [EOL] val = await db . removeAutoRepeat ( broadcaster , name ) [EOL] if val : [EOL] await self . resetAutoRepeats ( ) [EOL] return val [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'List[data.RepeatData]'$ 0 0 0 0 0 $typing.List[lib.data._data_types.RepeatData]$ 0 0 0 $database.DatabaseMain$ 0 0 0 0 0 0 0 0 0 0 0 $database.DatabaseMain$ 0 0 $typing.List[lib.data._data_types.RepeatData]$ 0 0 0 0 0 0 0 $database.DatabaseMain$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[lib.data._data_types.RepeatData]$ 0 0 0 0 0 $typing.List[lib.data._data_types.RepeatData]$ 0 0 0 0 $'List[data.RepeatData]'$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $'AsyncIterator[data.AutoRepeatMessage]'$ 0 0 0 $typing.Optional[datetime.datetime]$ 0 0 0 0 0 $datetime.datetime$ 0 $typing.Optional[datetime.datetime]$ 0 0 0 $datetime.datetime$ 0 0 0 $data.RepeatData$ 0 0 0 0 0 0 0 0 $data.RepeatData$ 0 0 0 0 $data.RepeatData$ 0 $data.RepeatData$ 0 0 0 $data.RepeatData$ 0 0 0 0 0 0 0 $data.RepeatData$ 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 $data.RepeatData$ 0 0 0 $data.RepeatData$ 0 0 0 $data.RepeatData$ 0 0 0 0 0 0 0 $'AsyncIterator[data.AutoRepeatList]'$ 0 0 0 $builtins.str$ 0 0 0 $data.RepeatData$ 0 0 0 0 0 0 0 0 $data.RepeatData$ 0 0 0 0 $data.RepeatData$ 0 $data.RepeatData$ 0 0 0 $data.RepeatData$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $data.RepeatData$ 0 0 0 $data.RepeatData$ 0 0 0 $data.RepeatData$ 0 0 0 $data.RepeatData$ 0 0 0 $data.RepeatData$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $database.DatabaseMain$ 0 0 0 0 0 0 0 0 0 0 0 $database.DatabaseMain$ 0 0 $builtins.bool$ 0 0 $database.DatabaseMain$ 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $database.DatabaseMain$ 0 0 0 0 0 0 0 0 0 0 0 $database.DatabaseMain$ 0 0 $builtins.bool$ 0 0 $database.DatabaseMain$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Optional[builtins.int]$ 0 $builtins.float$ 0 0 0 $builtins.bool$ 0 0 0 $database.DatabaseMain$ 0 0 0 0 0 0 0 0 0 0 0 $database.DatabaseMain$ 0 0 $builtins.bool$ 0 0 $database.DatabaseMain$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Optional[builtins.int]$ 0 $builtins.float$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $database.DatabaseMain$ 0 0 0 0 0 0 0 0 0 0 0 $database.DatabaseMain$ 0 0 $builtins.bool$ 0 0 $database.DatabaseMain$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0
from typing import Optional , List [EOL] import typing [EOL] import builtins [EOL] import json [EOL] from typing import List , Optional [comment] [EOL] [EOL] from . _abc import AbcCacheStore [EOL] from . . database import DatabaseMain [EOL] [EOL] [EOL] class PermittedUsersMixin ( AbcCacheStore ) : [EOL] def _permittedKey ( self , broadcaster ) : [EOL] return f' [string] { broadcaster } [string] ' [EOL] [EOL] async def loadPermittedUsers ( self , broadcaster ) : [EOL] key = self . _permittedKey ( broadcaster ) [EOL] permittedUsers = ... [EOL] db = ... [EOL] async with DatabaseMain . acquire ( ) as db : [EOL] permittedUsers = [ user async for user in db . getPermittedUsers ( broadcaster ) ] [EOL] await self . redis . setex ( key , [number] , json . dumps ( permittedUsers ) ) [EOL] return permittedUsers [EOL] [EOL] async def isPermittedUser ( self , broadcaster , user ) : [EOL] key = self . _permittedKey ( broadcaster ) [EOL] permittedUsers = ... [EOL] value = await self . redis . get ( key ) [EOL] if value is None : [EOL] permittedUsers = await self . loadPermittedUsers ( broadcaster ) [EOL] else : [EOL] permittedUsers = json . loads ( value ) [EOL] return user in permittedUsers [EOL] [EOL] async def resetPermittedUsers ( self , broadcaster ) : [EOL] key = self . _permittedKey ( broadcaster ) [EOL] await self . redis . delete ( key ) [EOL] [EOL] async def addPermittedUser ( self , broadcaster , user , moderator ) : [EOL] val = ... [EOL] db = ... [EOL] async with DatabaseMain . acquire ( ) as db : [EOL] val = await db . addPermittedUser ( broadcaster , user , moderator ) [EOL] if val : [EOL] await self . resetPermittedUsers ( broadcaster ) [EOL] return val [EOL] [EOL] async def removePermittedUser ( self , broadcaster , user , moderator ) : [EOL] val = ... [EOL] db = ... [EOL] async with DatabaseMain . acquire ( ) as db : [EOL] val = await db . removePermittedUser ( broadcaster , user , moderator ) [EOL] if val : [EOL] await self . resetPermittedUsers ( broadcaster ) [EOL] return val [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.List[builtins.str]$ 0 0 0 $database.DatabaseMain$ 0 0 0 0 0 0 0 0 0 0 0 $database.DatabaseMain$ 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $database.DatabaseMain$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.str$ 0 $typing.List[builtins.str]$ 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $database.DatabaseMain$ 0 0 0 0 0 0 0 0 0 0 0 $database.DatabaseMain$ 0 0 $builtins.bool$ 0 0 $database.DatabaseMain$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $database.DatabaseMain$ 0 0 0 0 0 0 0 0 0 0 0 $database.DatabaseMain$ 0 0 $builtins.bool$ 0 0 $database.DatabaseMain$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0
from typing import Dict , Optional [EOL] import typing [EOL] import builtins [EOL] import json [EOL] from typing import Dict , Optional [EOL] [EOL] from . _abc import AbcCacheStore [EOL] from . . database import DatabaseMain [EOL] [EOL] [EOL] class GameAbbreviationsMixin ( AbcCacheStore ) : [EOL] async def loadGameAbbreviations ( self ) : [EOL] gameAbbreviations = ... [EOL] db = ... [EOL] async with DatabaseMain . acquire ( ) as db : [EOL] gameAbbreviations = { abbr : game async for ( abbr , game ) in db . getGameAbbreviations ( ) } [EOL] await self . redis . setex ( [string] , [number] , json . dumps ( gameAbbreviations ) ) [EOL] return gameAbbreviations [EOL] [EOL] async def _getGameAbbreviations ( self ) : [EOL] value = await self . redis . get ( [string] ) [EOL] if value is None : [EOL] return await self . loadGameAbbreviations ( ) [EOL] else : [EOL] return json . loads ( value ) [EOL] [EOL] async def getFullGameTitle ( self , abbreviation ) : [EOL] gameAbbreviations = await self . _getGameAbbreviations ( ) [EOL] lowerGames = ... [EOL] lowerGames = { a . lower ( ) : g for a , g in gameAbbreviations . items ( ) } [EOL] lowerAbrrev = abbreviation . lower ( ) [EOL] if lowerAbrrev in lowerGames : [EOL] return lowerGames [ lowerAbrrev ] [EOL] game = ... [EOL] for game in gameAbbreviations . values ( ) : [EOL] if game . lower ( ) == lowerAbrrev : [EOL] return game [EOL] return None [EOL] [EOL] async def resetGameAbbreviations ( self ) : [EOL] await self . redis . delete ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $database.DatabaseMain$ 0 0 0 0 0 0 0 0 0 0 0 $database.DatabaseMain$ 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $database.DatabaseMain$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , List [EOL] import typing [EOL] import builtins [EOL] import json [EOL] from typing import List , Optional [comment] [EOL] [EOL] from . _abc import AbcCacheStore [EOL] from . . database import DatabaseMain [EOL] [EOL] [EOL] class BotManagersMixin ( AbcCacheStore ) : [EOL] async def loadBotManagers ( self ) : [EOL] managers = ... [EOL] db = ... [EOL] async with DatabaseMain . acquire ( ) as db : [EOL] managers = [ m async for m in db . getBotManagers ( ) ] [EOL] await self . redis . setex ( [string] , [number] , json . dumps ( managers ) ) [EOL] return managers [EOL] [EOL] async def isBotManager ( self , user ) : [EOL] managers = ... [EOL] value = await self . redis . get ( [string] ) [EOL] if value is None : [EOL] managers = await self . loadBotManagers ( ) [EOL] else : [EOL] managers = json . loads ( value ) [EOL] return user in managers [EOL] [EOL] async def resetBotManagers ( self ) : [EOL] await self . redis . delete ( [string] ) [EOL] [EOL] async def addBotManager ( self , user ) : [EOL] val = ... [EOL] db = ... [EOL] async with DatabaseMain . acquire ( ) as db : [EOL] val = await db . addBotManager ( user ) [EOL] if val : [EOL] await self . resetBotManagers ( ) [EOL] return val [EOL] [EOL] async def removeBotManager ( self , user ) : [EOL] val = ... [EOL] db = ... [EOL] async with DatabaseMain . acquire ( ) as db : [EOL] val = await db . removeBotManager ( user ) [EOL] if val : [EOL] await self . resetBotManagers ( ) [EOL] return val [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $database.DatabaseMain$ 0 0 0 0 0 0 0 0 0 0 0 $database.DatabaseMain$ 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $database.DatabaseMain$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.str$ 0 $typing.List[builtins.str]$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $database.DatabaseMain$ 0 0 0 0 0 0 0 0 0 0 0 $database.DatabaseMain$ 0 0 $builtins.bool$ 0 0 $database.DatabaseMain$ 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $database.DatabaseMain$ 0 0 0 0 0 0 0 0 0 0 0 $database.DatabaseMain$ 0 0 $builtins.bool$ 0 0 $database.DatabaseMain$ 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0
import builtins [EOL] import aioredis [EOL] import datetime [EOL] from datetime import datetime [EOL] [EOL] import aioredis [EOL] [EOL] [EOL] class AbcCacheStore : [EOL] @ property def redis ( self ) : ... [EOL] [EOL] async def open ( self ) : ... [EOL] [EOL] async def close ( self ) : ... [EOL] [EOL] @ staticmethod def datetimeToStr ( dt ) : ... [EOL] [EOL] @ staticmethod def strToDatetime ( dt ) : ... [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aioredis.Redis$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 $builtins.str$ 0 0 0 0
from typing import Dict , Optional , Set [EOL] import typing [EOL] import builtins [EOL] import json [EOL] from typing import Dict , Optional , Set [comment] [EOL] [EOL] from . _abc import AbcCacheStore [EOL] from . . database import DatabaseMain [EOL] [EOL] [EOL] class FeaturesMixin ( AbcCacheStore ) : [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( ) [EOL] self . _features = { } [EOL] [EOL] def _featuresKey ( self , broadcaster ) : [EOL] return f' [string] { broadcaster } [string] ' [EOL] [EOL] async def loadFeatures ( self , broadcaster ) : [EOL] key = self . _featuresKey ( broadcaster ) [EOL] features = ... [EOL] db = ... [EOL] async with DatabaseMain . acquire ( ) as db : [EOL] features = { feature async for feature in db . getFeatures ( broadcaster ) } [EOL] await self . redis . setex ( key , [number] , json . dumps ( list ( features ) ) ) [EOL] return features [EOL] [EOL] async def hasFeature ( self , broadcaster , feature ) : [EOL] key = self . _featuresKey ( broadcaster ) [EOL] if broadcaster not in self . _features : [EOL] value = await self . redis . get ( key ) [EOL] features = ... [EOL] if value is None : [EOL] features = await self . loadFeatures ( broadcaster ) [EOL] else : [EOL] features = set ( json . loads ( value ) ) [EOL] self . _features [ broadcaster ] = features [EOL] return feature in self . _features [ broadcaster ] [EOL] [EOL] async def resetFeatures ( self , broadcaster ) : [EOL] key = self . _featuresKey ( broadcaster ) [EOL] await self . redis . delete ( key ) [EOL] if broadcaster in self . _features : [EOL] del self . _features [ broadcaster ] [EOL] [EOL] async def addFeature ( self , broadcaster , feature ) : [EOL] val = ... [EOL] db = ... [EOL] async with DatabaseMain . acquire ( ) as db : [EOL] val = await db . addFeature ( broadcaster , feature ) [EOL] if val : [EOL] await self . resetFeatures ( broadcaster ) [EOL] return val [EOL] [EOL] async def removeFeature ( self , broadcaster , feature ) : [EOL] val = ... [EOL] db = ... [EOL] async with DatabaseMain . acquire ( ) as db : [EOL] val = await db . removeFeature ( broadcaster , feature ) [EOL] if val : [EOL] await self . resetFeatures ( broadcaster ) [EOL] return val [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Set[builtins.str]]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.Set[builtins.str]$ 0 0 0 $database.DatabaseMain$ 0 0 0 0 0 0 0 0 0 0 0 $database.DatabaseMain$ 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 $database.DatabaseMain$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Set[builtins.str]$ 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Set[builtins.str]$ 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $database.DatabaseMain$ 0 0 0 0 0 0 0 0 0 0 0 $database.DatabaseMain$ 0 0 $builtins.bool$ 0 0 $database.DatabaseMain$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $database.DatabaseMain$ 0 0 0 0 0 0 0 0 0 0 0 $database.DatabaseMain$ 0 0 $builtins.bool$ 0 0 $database.DatabaseMain$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0
from typing import Dict , Optional , Tuple , List [EOL] import typing [EOL] import builtins [EOL] import asyncio [EOL] import json [EOL] from typing import Awaitable , Dict , List , Optional , Tuple [comment] [EOL] [EOL] from . _abc import AbcCacheStore [EOL] from . . api import bttv [EOL] [EOL] [EOL] class BetterTwitchTvApisMixin ( AbcCacheStore ) : [EOL] def _bttvGlobalEmoteKey ( self ) : [EOL] return [string] [EOL] [EOL] async def bttv_load_global_emotes ( self , * , background = False ) : [EOL] key = self . _bttvGlobalEmoteKey ( ) [EOL] ttl = await self . redis . ttl ( key ) [EOL] if ttl >= [number] and background : [EOL] return True [EOL] if ttl >= [number] and not background : [EOL] return True [EOL] emotes = ... [EOL] emotes = await bttv . getGlobalEmotes ( ) [EOL] if emotes is None : [EOL] return False [EOL] await self . bttv_save_global_emotes ( emotes ) [EOL] return True [EOL] [EOL] async def bttv_save_global_emotes ( self , emotes ) : [EOL] await self . redis . setex ( self . _bttvGlobalEmoteKey ( ) , [number] , json . dumps ( emotes ) ) [EOL] return True [EOL] [EOL] async def bttv_get_global_emotes ( self ) : [EOL] key = self . _bttvGlobalEmoteKey ( ) [EOL] value = await self . redis . get ( key ) [EOL] if value is None : [EOL] return None [EOL] return json . loads ( value ) [EOL] [EOL] def _bttvBroadcasterEmoteKey ( self , broadcaster ) : [EOL] return f' [string] { broadcaster }' [EOL] [EOL] async def bttv_load_broadcaster_emotes ( self , broadcaster , * , background = False ) : [EOL] key = self . _bttvBroadcasterEmoteKey ( broadcaster ) [EOL] ttl = await self . redis . ttl ( key ) [EOL] if ttl >= [number] and background : [EOL] return True [EOL] if ttl >= [number] and not background : [EOL] return True [EOL] emotes = { } [EOL] emotes = await bttv . getBroadcasterEmotes ( broadcaster ) [EOL] if emotes is None : [EOL] return False [EOL] await self . bttv_save_broadcaster_emotes ( broadcaster , emotes ) [EOL] return True [EOL] [EOL] async def bttv_save_broadcaster_emotes ( self , broadcaster , emotes ) : [EOL] await self . redis . setex ( self . _bttvBroadcasterEmoteKey ( broadcaster ) , [number] , json . dumps ( emotes ) ) [EOL] return True [EOL] [EOL] async def bttv_get_broadcaster_emotes ( self , broadcaster ) : [EOL] key = self . _bttvBroadcasterEmoteKey ( broadcaster ) [EOL] value = await self . redis . get ( key ) [EOL] if value is None : [EOL] return None [EOL] return json . loads ( value ) [EOL] [EOL] async def bttv_get_cached_broadcasters ( self ) : [EOL] keys = [ ] [EOL] cur = [string] [EOL] ckeys = ... [EOL] while cur : [EOL] cur , ckeys = await self . redis . scan ( cur , match = [string] ) [EOL] keys . extend ( ckeys ) [EOL] ttlValues = await asyncio . gather ( * [ self . redis . ttl ( key ) for key in keys ] ) [EOL] return { key [ [number] : ] : ttl for key , ttl in zip ( keys , ttlValues ) } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Optional[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.Tuple[builtins.int,...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.Tuple[builtins.int,...]$ 0 0 0
from typing import ClassVar , Optional , Any , List , Dict , Awaitable , Set , Iterable , Tuple [EOL] import typing [EOL] import datetime [EOL] import store [EOL] import builtins [EOL] import lib [EOL] from datetime import datetime [EOL] [EOL] import asyncio [EOL] import json [EOL] from typing import Any , Awaitable , ClassVar , Dict , Iterable , List , Optional [comment] [EOL] from typing import Set , Tuple , cast [EOL] [EOL] from . _abc import AbcCacheStore [EOL] from . import store [EOL] from . . api import twitch [EOL] [EOL] [EOL] class TwitchApisMixin ( AbcCacheStore ) : [EOL] _lastEmoteSet = None [EOL] [EOL] async def twitch_created_date ( self , user ) : [EOL] key = f' [string] { user } [string] ' [EOL] createdDate = ... [EOL] value = await self . redis . get ( key ) [EOL] if value is None : [EOL] data = cast ( store . CacheStore , self ) [EOL] createdDate = await twitch . created_date ( user , data = data ) [EOL] expire = [number] [EOL] await self . redis . setex ( key , expire , self . datetimeToStr ( createdDate ) ) [EOL] else : [EOL] createdDate = self . strToDatetime ( value ) [EOL] return createdDate [EOL] [EOL] async def twitch_num_followers ( self , user ) : [EOL] key = f' [string] { user } [string] ' [EOL] numFollowers = ... [EOL] value = await self . redis . get ( key ) [EOL] if value is None : [EOL] data = cast ( store . CacheStore , self ) [EOL] numFollowers = await twitch . num_followers ( user , data = data ) [EOL] expire = [number] if numFollowers else [number] [EOL] await self . redis . setex ( key , expire , json . dumps ( numFollowers ) ) [EOL] else : [EOL] numFollowers = json . loads ( value ) [EOL] return numFollowers [EOL] [EOL] def _twitchIdIdKey ( self , id ) : [EOL] return f' [string] { id }' [EOL] [EOL] def _twitchIdUserKey ( self , user ) : [EOL] return f' [string] { user }' [EOL] [EOL] async def twitch_load_id ( self , user ) : [EOL] key = self . _twitchIdUserKey ( user ) [EOL] if await self . redis . exists ( key ) : [EOL] return True [EOL] ids = await twitch . getTwitchIds ( [ user ] ) [EOL] if ids is None : [EOL] return False [EOL] if user in ids : [EOL] await self . twitch_save_id ( ids [ user ] , user ) [EOL] else : [EOL] await self . twitch_save_id ( None , user ) [EOL] return True [EOL] [EOL] async def twitch_load_ids ( self , users ) : [EOL] users = list ( users ) [EOL] existed = await self . redis . mget ( * ( self . _twitchIdUserKey ( user ) for user in users ) ) [EOL] users = [ user for user , exists in zip ( users , existed ) if not exists ] [EOL] if not users : [EOL] return True [EOL] ids = await twitch . getTwitchIds ( users ) [EOL] if ids is None : [EOL] return False [EOL] [EOL] [comment] [EOL] await asyncio . gather ( * [ self . twitch_save_id ( id , user ) for user , id in ids . items ( ) ] , * [ self . twitch_save_id ( None , user ) for user in users if user not in ids ] ) [EOL] return True [EOL] [EOL] async def twitch_save_id ( self , id , user ) : [EOL] [comment] [EOL] expire = [number] if id is not None else [number] [EOL] tasks = [ self . redis . setex ( self . _twitchIdUserKey ( user ) , expire , json . dumps ( id ) ) , ] [EOL] if id is not None : [EOL] tasks . append ( self . redis . setex ( self . _twitchIdIdKey ( id ) , expire , json . dumps ( user ) ) ) [EOL] await asyncio . gather ( * tasks ) [EOL] return True [EOL] [EOL] async def twitch_has_id ( self , user ) : [EOL] key = self . _twitchIdUserKey ( user ) [EOL] return await self . redis . exists ( key ) [EOL] [EOL] async def twitch_is_valid_user ( self , user ) : [EOL] if not await self . twitch_load_id ( user ) : [EOL] return None [EOL] return await self . twitch_get_id ( user ) is not None [EOL] [EOL] async def twitch_get_id ( self , user ) : [EOL] key = self . _twitchIdUserKey ( user ) [EOL] value = await self . redis . get ( key ) [EOL] if value is None : [EOL] return None [EOL] return json . loads ( value ) [EOL] [EOL] async def twitch_get_ids ( self , users ) : [EOL] values = await self . redis . mget ( * ( self . _twitchIdUserKey ( user ) for user in users ) ) [EOL] return dict ( zip ( users , ( json . loads ( v ) if v is not None else None for v in values ) ) ) [EOL] [EOL] async def twitch_get_user ( self , id ) : [EOL] key = self . _twitchIdIdKey ( id ) [EOL] value = await self . redis . get ( key ) [EOL] if value is None : [EOL] return None [EOL] return json . loads ( value ) [EOL] [EOL] def _twitchCommunityIdKey ( self , id ) : [EOL] return f' [string] { id }' [EOL] [EOL] def _twitchCommunityNameKey ( self , name ) : [EOL] return f' [string] { name . lower ( ) }' [EOL] [EOL] async def twitch_load_community_id ( self , id ) : [EOL] key = self . _twitchCommunityIdKey ( id ) [EOL] if await self . redis . exists ( key ) : [EOL] return True [EOL] community = ... [EOL] community = await twitch . get_community_by_id ( id ) [EOL] if community is None : [EOL] return False [EOL] await self . twitch_save_community ( community . id , community . name ) [EOL] return True [EOL] [EOL] async def twitch_load_community_ids ( self , ids ) : [EOL] if not ids : [EOL] return True [EOL] values = await self . redis . mget ( * ( self . _twitchCommunityIdKey ( id ) for id in ids ) ) [EOL] loadIds = ... [EOL] loadIds = [ id for id , value in zip ( ids , values ) if not value ] [EOL] if not loadIds : [EOL] return True [EOL] [EOL] async def load ( id ) : [EOL] community = ... [EOL] community = await twitch . get_community_by_id ( id ) [EOL] if community is None : [EOL] return [EOL] await self . twitch_save_community ( community . id , community . name ) [EOL] [EOL] await asyncio . gather ( * ( load ( id ) for id in loadIds ) ) [EOL] return True [EOL] [EOL] async def twitch_load_community_name ( self , name ) : [EOL] key = self . _twitchCommunityNameKey ( name ) [EOL] if await self . redis . exists ( key ) : [EOL] return True [EOL] community = ... [EOL] community = await twitch . get_community ( name ) [EOL] if community is None : [EOL] return False [EOL] await self . twitch_save_community ( community . id , community . name ) [EOL] return True [EOL] [EOL] async def twitch_save_community ( self , id , name ) : [EOL] [comment] [EOL] expire = ... [EOL] tasks = [ ] [EOL] if id is not None : [EOL] expire = [number] if name is not None else [number] [EOL] tasks . append ( self . redis . setex ( self . _twitchCommunityIdKey ( id ) , expire , json . dumps ( name ) ) ) [EOL] if name is not None : [EOL] expire = [number] if id is not None else [number] [EOL] tasks . append ( self . redis . setex ( self . _twitchCommunityNameKey ( name ) , expire , json . dumps ( id ) ) ) [EOL] if tasks : [EOL] await asyncio . gather ( * tasks ) [EOL] return True [EOL] [EOL] async def twitch_get_community_id ( self , name ) : [EOL] key = self . _twitchCommunityNameKey ( name ) [EOL] value = await self . redis . get ( key ) [EOL] if value is None : [EOL] return None [EOL] return json . loads ( value ) [EOL] [EOL] async def twitch_get_community_name ( self , id ) : [EOL] key = self . _twitchCommunityIdKey ( id ) [EOL] value = await self . redis . get ( key ) [EOL] if value is None : [EOL] return None [EOL] return json . loads ( value ) [EOL] [EOL] def _twitchEmoteSetKey ( self ) : [EOL] return f' [string] ' [EOL] [EOL] def _twitchEmoteKey ( self ) : [EOL] return f' [string] ' [EOL] [EOL] async def twitch_load_emotes ( self , emote_sets , * , background = False ) : [EOL] if not emote_sets : [EOL] return False [EOL] key = self . _twitchEmoteKey ( ) [EOL] sameSet = await self . twitch_get_bot_emote_set ( ) == emote_sets [EOL] await self . twitch_save_emote_set ( emote_sets ) [EOL] if sameSet : [EOL] ttl = await self . redis . ttl ( key ) [EOL] if ttl >= [number] and background : [EOL] return True [EOL] if ttl >= [number] and not background : [EOL] return True [EOL] emotes = ... [EOL] emotes = await twitch . twitch_emotes ( emote_sets ) [EOL] if emotes is None : [EOL] return False [EOL] await self . twitch_save_emotes ( emotes ) [EOL] return True [EOL] [EOL] async def twitch_save_emote_set ( self , emote_sets ) : [EOL] type ( self ) . _lastEmoteSet = set ( emote_sets ) [EOL] await self . redis . setex ( self . _twitchEmoteSetKey ( ) , [number] , json . dumps ( [ s for s in emote_sets ] ) ) [EOL] return True [EOL] [EOL] async def twitch_save_emotes ( self , emotes ) : [EOL] await self . redis . setex ( self . _twitchEmoteKey ( ) , [number] , json . dumps ( emotes ) ) [EOL] return True [EOL] [EOL] async def twitch_get_bot_emote_set ( self ) : [EOL] key = self . _twitchEmoteSetKey ( ) [EOL] value = await self . redis . get ( key ) [EOL] if value is None : [EOL] return type ( self ) . _lastEmoteSet [EOL] return { i for i in json . loads ( value ) } [EOL] [EOL] async def twitch_get_emotes ( self ) : [EOL] key = self . _twitchEmoteKey ( ) [EOL] value = await self . redis . get ( key ) [EOL] if value is None : [EOL] return None [EOL] return { int ( i ) : e [ [number] ] for i , e in json . loads ( value ) . items ( ) } [EOL] [EOL] async def twitch_get_emote_sets ( self ) : [EOL] key = self . _twitchEmoteKey ( ) [EOL] value = await self . redis . get ( key ) [EOL] if value is None : [EOL] return None [EOL] return { int ( i ) : e [ [number] ] for i , e in json . loads ( value ) . items ( ) } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 $store.CacheStore$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 $builtins.str$ 0 $store.CacheStore$ 0 $store.CacheStore$ 0 0 $builtins.int$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Optional[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.str]]$ 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Iterable[builtins.str]$ 0 0 0 $typing.Iterable[builtins.str]$ 0 0 0 $typing.Iterable[builtins.str]$ 0 0 $typing.Tuple[typing.Optional[builtins.str],...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[builtins.str]$ 0 0 0 $typing.Iterable[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[builtins.str]$ 0 $typing.Tuple[typing.Optional[builtins.str],...]$ 0 0 0 0 0 0 0 0 $typing.Iterable[builtins.str]$ 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 $typing.Iterable[builtins.str]$ 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[builtins.str]$ 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Optional[builtins.str]$ 0 $builtins.str$ 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.List[typing.Awaitable[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.int$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $typing.List[typing.Awaitable[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 $builtins.int$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Awaitable[typing.Any]]$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Optional[builtins.str]]$ 0 0 0 $typing.Set[builtins.str]$ 0 0 0 $typing.Tuple[typing.Optional[builtins.str],...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Optional[builtins.str],...]$ 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Optional[lib.api.twitch.TwitchCommunity]$ 0 0 0 $typing.Optional[lib.api.twitch.TwitchCommunity]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[lib.api.twitch.TwitchCommunity]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[lib.api.twitch.TwitchCommunity]$ 0 $builtins.str$ 0 $typing.Optional[lib.api.twitch.TwitchCommunity]$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 $typing.Tuple[typing.Optional[builtins.str],...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 $typing.Tuple[typing.Optional[builtins.str],...]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $None$ 0 $builtins.str$ 0 0 0 $typing.Optional[lib.api.twitch.TwitchCommunity]$ 0 0 0 $typing.Optional[lib.api.twitch.TwitchCommunity]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[lib.api.twitch.TwitchCommunity]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[lib.api.twitch.TwitchCommunity]$ 0 $builtins.str$ 0 $typing.Optional[lib.api.twitch.TwitchCommunity]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Optional[lib.api.twitch.TwitchCommunity]$ 0 0 0 $typing.Optional[lib.api.twitch.TwitchCommunity]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[lib.api.twitch.TwitchCommunity]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[lib.api.twitch.TwitchCommunity]$ 0 0 0 $typing.Optional[lib.api.twitch.TwitchCommunity]$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Awaitable[typing.Any]]$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.List[typing.Awaitable[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 $builtins.int$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.List[typing.Awaitable[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 $builtins.int$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $typing.List[typing.Awaitable[typing.Any]]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Awaitable[typing.Any]]$ 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Set[builtins.int]$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $typing.Set[builtins.int]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 $typing.Set[builtins.int]$ 0 0 0 0 0 0 $typing.Set[builtins.int]$ 0 0 0 $builtins.bool$ 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.int,typing.Tuple[builtins.str,builtins.int]]]$ 0 0 0 $typing.Optional[typing.Dict[builtins.int,typing.Tuple[builtins.str,builtins.int]]]$ 0 0 0 0 0 0 $typing.Set[builtins.int]$ 0 0 0 $typing.Optional[typing.Dict[builtins.int,typing.Tuple[builtins.str,builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.int,typing.Tuple[builtins.str,builtins.int]]]$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Set[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Dict[builtins.int,typing.Tuple[builtins.str,builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,typing.Tuple[builtins.str,builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Set[builtins.int]]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.int,builtins.str]]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.int,builtins.int]]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0
import bot [EOL] from . store import CacheStore [EOL] [EOL] [EOL] def get_cache ( ) : [EOL] return CacheStore ( bot . globals . redisPool ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $'CacheStore'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional [EOL] import typing [EOL] import builtins [EOL] from typing import Optional , cast [EOL] [EOL] import aioodbc . cursor [comment] [EOL] import pyodbc [EOL] [EOL] import bot [EOL] from . _base import Database [EOL] [EOL] [EOL] class DatabaseTimeout ( Database ) : [EOL] async def __aenter__ ( self ) : [EOL] return cast ( DatabaseTimeout , await super ( ) . __aenter__ ( ) ) [EOL] [EOL] @ staticmethod def acquire ( ) : [EOL] return DatabaseTimeout ( bot . globals . connectionPools [ [string] ] ) [EOL] [EOL] async def recordTimeout ( self , broadcaster , user , fromUser , module , level , length , message , reason ) : [EOL] query = [string] [EOL] cursor = ... [EOL] async with await self . cursor ( ) as cursor : [EOL] try : [EOL] await cursor . execute ( query , ( broadcaster , user , fromUser , module , level , length , message , reason ) ) [EOL] await self . commit ( ) [EOL] return True [EOL] except pyodbc . Error : [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'DatabaseTimeout'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'DatabaseTimeout'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Optional[builtins.str]$ 0 $builtins.str$ 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Optional[builtins.str]$ 0 $builtins.str$ 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , AsyncIterator , Set [EOL] import typing [EOL] import builtins [EOL] import aioodbc [EOL] from typing import AsyncIterator , Optional , Set [comment] [EOL] [EOL] import aioodbc . cursor [comment] [EOL] import pyodbc [EOL] [EOL] from . _base import Database [EOL] [EOL] [EOL] class FeaturesMixin ( Database ) : [EOL] def __init__ ( self , pool ) : [EOL] super ( ) . __init__ ( pool ) [EOL] self . _features = None [EOL] [EOL] async def getFeatures ( self , broadcaster ) : [EOL] query = [string] [EOL] cursor = ... [EOL] async with await self . cursor ( ) as cursor : [EOL] async for feature , in await cursor . execute ( query , ( broadcaster , ) ) : [EOL] yield feature [EOL] [EOL] async def hasFeature ( self , broadcaster , feature ) : [EOL] if self . _features is None : [EOL] self . _features = { f async for f in self . getFeatures ( broadcaster ) } [EOL] return feature in self . _features [EOL] [EOL] async def addFeature ( self , broadcaster , feature ) : [EOL] query = [string] [EOL] cursor = ... [EOL] async with await self . cursor ( ) as cursor : [EOL] try : [EOL] await cursor . execute ( query , ( broadcaster , feature ) ) [EOL] await self . commit ( ) [EOL] self . features = None [EOL] return True [EOL] except pyodbc . Error : [EOL] return False [EOL] [EOL] async def removeFeature ( self , broadcaster , feature ) : [EOL] query = [string] [EOL] cursor = ... [EOL] async with await self . cursor ( ) as cursor : [EOL] await cursor . execute ( query , ( broadcaster , feature ) ) [EOL] self . features = None [EOL] await self . commit ( ) [EOL] return cursor . rowcount != [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $aioodbc.Pool$ 0 0 0 0 0 0 0 0 0 $aioodbc.Pool$ 0 0 0 0 $typing.Optional[typing.Set[builtins.str]]$ 0 0 0 0 0 0 $typing.AsyncIterator[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $typing.Optional[typing.Set[builtins.str]]$ 0 0 0 0 0 0 $typing.Optional[typing.Set[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[typing.Set[builtins.str]]$ 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0
from typing import Optional , AsyncIterator , Tuple [EOL] import typing [EOL] import builtins [EOL] from typing import AsyncIterator , Optional , Tuple [comment] [EOL] [EOL] import aioodbc . cursor [comment] [EOL] import pyodbc [EOL] [EOL] from . _base import Database [EOL] [EOL] [EOL] class BannedChannelsMixin ( Database ) : [EOL] async def listBannedChannels ( self ) : [EOL] query = [string] [EOL] cursor = ... [EOL] async with await self . cursor ( ) as cursor : [EOL] broadcaster = ... [EOL] async for broadcaster , in await cursor . execute ( query ) : [EOL] yield broadcaster [EOL] [EOL] async def isChannelBannedReason ( self , broadcaster ) : [EOL] query = [string] [EOL] cursor = ... [EOL] async with await self . cursor ( ) as cursor : [EOL] await cursor . execute ( query , ( broadcaster , ) ) [EOL] row = await cursor . fetchone ( ) [EOL] return row and row [ [number] ] [EOL] [EOL] async def addBannedChannel ( self , broadcaster , reason , nick ) : [EOL] query = [string] [EOL] history = [string] [EOL] cursor = ... [EOL] async with await self . cursor ( ) as cursor : [EOL] try : [EOL] await cursor . execute ( query , ( broadcaster , reason , nick ) ) [EOL] except pyodbc . Error : [EOL] return False [EOL] [EOL] await cursor . execute ( history , ( broadcaster , reason , nick , [string] ) ) [EOL] await self . commit ( ) [EOL] return True [EOL] [EOL] async def removeBannedChannel ( self , broadcaster , reason , nick ) : [EOL] query = [string] [EOL] history = [string] [EOL] cursor = ... [EOL] async with await self . cursor ( ) as cursor : [EOL] await cursor . execute ( query , ( broadcaster , ) ) [EOL] if cursor . rowcount == [number] : [EOL] return False [EOL] [EOL] await cursor . execute ( history , ( broadcaster , reason , nick , [string] ) ) [EOL] await self . commit ( ) [EOL] return True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.AsyncIterator[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 $typing.Optional[typing.Tuple[builtins.str]]$ 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 $typing.Optional[typing.Tuple[builtins.str]]$ 0 $typing.Optional[typing.Tuple[builtins.str]]$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Type [EOL] import typing [EOL] import builtins [EOL] import aioodbc [EOL] import types [EOL] from typing import Optional , Type [EOL] from types import TracebackType [comment] [EOL] [EOL] import aioodbc [EOL] import aioodbc . cursor [EOL] import pyodbc [EOL] [EOL] import bot [EOL] [EOL] [EOL] class Database : [EOL] def __init__ ( self , pool ) : [EOL] self . _pool = pool [EOL] self . _connection = None [EOL] self . _driver = None [EOL] [EOL] @ property def connection ( self ) : [EOL] if self . _connection is None : [EOL] raise ConnectionError ( [string] ) [EOL] return self . _connection [EOL] [EOL] async def connect ( self ) : [EOL] try : [EOL] self . _connection = await self . _pool . acquire ( ) [EOL] driver = ... [EOL] driver = await self . _connection . getinfo ( pyodbc . SQL_DRIVER_NAME ) [EOL] self . _driver = driver . lower ( ) [EOL] if self . isPostgres : [EOL] cursor = ... [EOL] await self . connection . rollback ( ) [EOL] async with await self . cursor ( ) as cursor : [EOL] await cursor . execute ( [string] ) [EOL] except pyodbc . Error : [EOL] bot . globals . running = False [EOL] raise [EOL] [EOL] async def close ( self ) : [EOL] if self . connection is not None : [EOL] await self . connection . rollback ( ) [EOL] await self . _pool . release ( self . connection ) [EOL] [EOL] async def __aenter__ ( self ) : [EOL] await self . connect ( ) [EOL] return self [EOL] [EOL] async def __aexit__ ( self , type , value , traceback ) : [EOL] await self . close ( ) [EOL] [EOL] @ property def isSqlite ( self ) : [EOL] return [string] in self . _driver [EOL] [EOL] @ property def isPostgres ( self ) : [EOL] return [string] in self . _driver [EOL] [EOL] async def cursor ( self ) : [EOL] return await self . connection . cursor ( ) [EOL] [EOL] async def commit ( self ) : [EOL] await self . connection . commit ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aioodbc.Connection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'Database'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Optional[typing.Type[builtins.BaseException]]$ 0 $typing.Optional[builtins.BaseException]$ 0 $typing.Optional[types.TracebackType]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , AsyncIterator , Union , Tuple [EOL] import typing [EOL] import builtins [EOL] from typing import Any , AsyncIterator , Optional , Tuple , Union [comment] [EOL] [EOL] import aioodbc . cursor [comment] [EOL] import pyodbc [EOL] [EOL] from . _base import Database [EOL] from . . import data [EOL] [EOL] [EOL] class AutoJoinMixin ( Database ) : [EOL] async def getAutoJoinsChats ( self ) : [EOL] query = [string] [EOL] cursor = ... [EOL] async with await self . cursor ( ) as cursor : [EOL] r = ... [EOL] async for r in await cursor . execute ( query ) : [EOL] yield data . AutoJoinChannel ( * r ) [EOL] [EOL] async def getAutoJoinsPriority ( self , broadcaster ) : [EOL] query = [string] [EOL] cursor = ... [EOL] async with await self . cursor ( ) as cursor : [EOL] await cursor . execute ( query , ( broadcaster , ) ) [EOL] autoJoinRow = await cursor . fetchone ( ) [EOL] if autoJoinRow is not None : [EOL] return int ( autoJoinRow [ [number] ] ) [EOL] else : [EOL] return float ( [string] ) [EOL] [EOL] async def saveAutoJoin ( self , broadcaster , priority = [number] ) : [EOL] query = [string] [EOL] cursor = ... [EOL] async with await self . cursor ( ) as cursor : [EOL] try : [EOL] await cursor . execute ( query , ( broadcaster , priority ) ) [EOL] await self . commit ( ) [EOL] return True [EOL] except pyodbc . Error : [EOL] return False [EOL] [EOL] async def discardAutoJoin ( self , broadcaster ) : [EOL] query = [string] [EOL] cursor = ... [EOL] async with await self . cursor ( ) as cursor : [EOL] await cursor . execute ( query , ( broadcaster , ) ) [EOL] await self . commit ( ) [EOL] return cursor . rowcount != [number] [EOL] [EOL] async def setAutoJoinPriority ( self , broadcaster , priority ) : [EOL] query = [string] [EOL] cursor = ... [EOL] async with await self . cursor ( ) as cursor : [EOL] await cursor . execute ( query , ( priority , broadcaster ) ) [EOL] await self . commit ( ) [EOL] return cursor . rowcount != [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'AsyncIterator[data.AutoJoinChannel]'$ 0 0 0 0 0 $builtins.str$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 $typing.Tuple[typing.Any,...]$ 0 0 0 0 0 $typing.Tuple[typing.Any,...]$ 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,...]$ 0 0 0 0 0 $typing.Union[builtins.int,builtins.float]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 $typing.Optional[typing.Tuple[builtins.int]]$ 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 $typing.Optional[typing.Tuple[builtins.int]]$ 0 0 0 0 0 0 0 0 $typing.Optional[typing.Tuple[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 $typing.Union[builtins.int,builtins.float]$ 0 0 0 0 0 $builtins.str$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 $typing.Union[builtins.int,builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 $typing.Union[builtins.int,builtins.float]$ 0 0 0 $builtins.str$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $builtins.str$ 0 0 $typing.Union[builtins.int,builtins.float]$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0
from typing import Optional , AsyncIterator , Tuple [EOL] import typing [EOL] import builtins [EOL] from typing import Any , AsyncIterator , Optional , Tuple [comment] [EOL] [EOL] import aioodbc . cursor [comment] [EOL] [EOL] from . _base import Database [EOL] [EOL] [EOL] class GameAbbreviationsMixin ( Database ) : [EOL] async def getGameAbbreviations ( self ) : [EOL] query = [string] [EOL] cursor = ... [EOL] async with await self . cursor ( ) as cursor : [EOL] async for abbr , game in await cursor . execute ( query ) : [EOL] yield abbr , game [EOL] [EOL] async def getFullGameTitle ( self , abbreviation ) : [EOL] query = [string] [EOL] cursor = ... [EOL] async with await self . cursor ( ) as cursor : [EOL] await cursor . execute ( query , ( abbreviation . lower ( ) , ) * [number] ) [EOL] game = await cursor . fetchone ( ) [EOL] return game and game [ [number] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.AsyncIterator[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 $builtins.str$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Tuple[builtins.str]]$ 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 $typing.Optional[typing.Tuple[builtins.str]]$ 0 $typing.Optional[typing.Tuple[builtins.str]]$ 0 0 0 0
from typing import AsyncIterator , Tuple , List [EOL] import typing [EOL] import builtins [EOL] from typing import AsyncIterator , List , Tuple , cast [EOL] [EOL] import aioodbc . cursor [comment] [EOL] [EOL] import bot [EOL] from . _base import Database [EOL] [EOL] [EOL] class DatabaseTimeZone ( Database ) : [EOL] async def __aenter__ ( self ) : [EOL] return cast ( DatabaseTimeZone , await super ( ) . __aenter__ ( ) ) [EOL] [EOL] @ staticmethod def acquire ( ) : [EOL] return DatabaseTimeZone ( bot . globals . connectionPools [ [string] ] ) [EOL] [EOL] async def timezone_names ( self ) : [EOL] [docstring] [EOL] query = [string] [EOL] cursor = ... [EOL] async with await self . cursor ( ) as cursor : [EOL] async for row in await cursor . execute ( query ) : [EOL] yield row [ [number] ] , row [ [number] ] [EOL] [EOL] async def zones ( self ) : [EOL] query = [string] [EOL] cursor = ... [EOL] async with await self . cursor ( ) as cursor : [EOL] async for row in await cursor . execute ( query ) : [EOL] yield row [ [number] ] , row [ [number] ] [EOL] [EOL] async def zone_transitions ( self ) : [EOL] query = [string] [EOL] cursor = ... [EOL] async with await self . cursor ( ) as cursor : [EOL] await cursor . execute ( query ) [EOL] return [ cast ( Tuple [ int , str , int , int ] , tuple ( row ) ) for row in await cursor . fetchall ( ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'DatabaseTimeZone'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'DatabaseTimeZone'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.AsyncIterator[typing.Tuple[builtins.str,builtins.int]]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.AsyncIterator[typing.Tuple[builtins.int,builtins.str]]$ 0 0 0 0 0 $builtins.str$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,builtins.str,builtins.int,builtins.int]]$ 0 0 0 0 0 $builtins.str$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0
from typing import Optional , AsyncIterator , Any , Tuple [EOL] import typing [EOL] import builtins [EOL] from datetime import datetime [comment] [EOL] from typing import Any , AsyncIterator , Optional , Tuple [comment] [EOL] [EOL] import aioodbc . cursor [comment] [EOL] [EOL] from . _base import Database [EOL] from . . import data [EOL] [EOL] [EOL] class AutoRepeatMixin ( Database ) : [EOL] async def getAutoRepeats ( self ) : [EOL] query = [string] [EOL] cursor = ... [EOL] async with await self . cursor ( ) as cursor : [EOL] row = ... [EOL] broadcaster = ... [EOL] name = ... [EOL] message = ... [EOL] count = ... [EOL] duration = ... [EOL] last = ... [EOL] async for ( broadcaster , name , message , count , duration , last ) in await cursor . execute ( query ) : [EOL] yield data . RepeatData ( broadcaster , name , message , count , duration , last ) [EOL] [EOL] async def getAutoRepeatToSend ( self ) : [EOL] query = ... [EOL] if self . isSqlite : [EOL] query = [string] [EOL] else : [EOL] query = [string] [EOL] cursor = ... [EOL] async with await self . cursor ( ) as cursor : [EOL] row = ... [EOL] async for row in await cursor . execute ( query ) : [EOL] broadcaster , name , message = row [EOL] yield data . AutoRepeatMessage ( broadcaster , name , message ) [EOL] [EOL] async def listAutoRepeat ( self , broadcaster ) : [EOL] query = [string] [EOL] cursor = ... [EOL] async with await self . cursor ( ) as cursor : [EOL] row = ... [EOL] async for row in await cursor . execute ( query , ( broadcaster , ) ) : [EOL] name = ... [EOL] message = ... [EOL] count = ... [EOL] duration = ... [EOL] last = ... [EOL] name , message , count , duration , last = row [EOL] yield data . AutoRepeatList ( name , message , count , duration , last ) [EOL] [EOL] async def clearAutoRepeat ( self , broadcaster ) : [EOL] query = [string] [EOL] cursor = ... [EOL] async with await self . cursor ( ) as cursor : [EOL] await cursor . execute ( query , ( broadcaster , ) ) [EOL] await self . commit ( ) [EOL] return cursor . rowcount != [number] [EOL] [EOL] async def sentAutoRepeat ( self , broadcaster , name ) : [EOL] query = [string] [EOL] delete = [string] [EOL] cursor = ... [EOL] async with await self . cursor ( ) as cursor : [EOL] await cursor . execute ( query , ( broadcaster , name ) ) [EOL] ret = cursor . rowcount != [number] [EOL] await cursor . execute ( delete , ( broadcaster , name ) ) [EOL] await self . commit ( ) [EOL] return ret [EOL] [EOL] async def setAutoRepeat ( self , broadcaster , name , message , count , minutes ) : [EOL] cursor = ... [EOL] query = ... [EOL] params = ... [EOL] async with await self . cursor ( ) as cursor : [EOL] if self . isSqlite : [EOL] query = [string] [EOL] params = broadcaster , name , message , count , minutes , minutes [EOL] else : [EOL] query = [string] [EOL] params = ( broadcaster , name , message , count , minutes , minutes , message , count , minutes , minutes ) [EOL] await cursor . execute ( query , params ) [EOL] await self . commit ( ) [EOL] return cursor . rowcount != [number] [EOL] [EOL] async def removeAutoRepeat ( self , broadcaster , name ) : [EOL] query = [string] [EOL] cursor = ... [EOL] async with await self . cursor ( ) as cursor : [EOL] await cursor . execute ( query , ( broadcaster , name ) ) [EOL] await self . commit ( ) [EOL] return cursor . rowcount != [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'AsyncIterator[data.RepeatData]'$ 0 0 0 0 0 $builtins.str$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,typing.Optional[builtins.int],builtins.float,datetime.datetime]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $builtins.float$ 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Optional[builtins.int]$ 0 $builtins.float$ 0 $datetime.datetime$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Optional[builtins.int]$ 0 $builtins.float$ 0 $datetime.datetime$ 0 0 0 0 0 $'AsyncIterator[data.AutoRepeatMessage]'$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 $typing.Tuple[typing.Any,...]$ 0 0 0 0 0 $typing.Tuple[typing.Any,...]$ 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'AsyncIterator[data.AutoRepeatList]'$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 $typing.Tuple[typing.Any,...]$ 0 0 0 0 0 $typing.Tuple[typing.Any,...]$ 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Optional[builtins.int]$ 0 $builtins.float$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[typing.Any,...]$ 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[typing.Any,...]$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Optional[builtins.int]$ 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[typing.Any,...]$ 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Optional[builtins.int]$ 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.str$ 0 $typing.Optional[builtins.int]$ 0 $builtins.float$ 0 $builtins.float$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $builtins.str$ 0 $typing.Tuple[typing.Any,...]$ 0 0 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0
from . _base import Database [comment] [EOL] from . main import DatabaseMain [comment] [EOL] from . oauth import DatabaseOAuth [comment] [EOL] from . timeout import DatabaseTimeout [comment] [EOL] from . timezone import DatabaseTimeZone [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Any , Tuple [EOL] import typing [EOL] import builtins [EOL] from typing import Any , Optional , Tuple , cast [comment] [EOL] [EOL] import aioodbc . cursor [comment] [EOL] [EOL] import bot [EOL] from . _base import Database [EOL] [EOL] [EOL] class DatabaseOAuth ( Database ) : [EOL] async def __aenter__ ( self ) : [EOL] return cast ( DatabaseOAuth , await super ( ) . __aenter__ ( ) ) [EOL] [EOL] @ staticmethod def acquire ( ) : [EOL] return DatabaseOAuth ( bot . globals . connectionPools [ [string] ] ) [EOL] [EOL] async def getOAuthToken ( self , broadcaster ) : [EOL] query = [string] [EOL] cursor = ... [EOL] async with await self . cursor ( ) as cursor : [EOL] await cursor . execute ( query , ( broadcaster , ) ) [EOL] token = await cursor . fetchone ( ) [EOL] return token and token [ [number] ] [EOL] [EOL] async def saveBroadcasterToken ( self , broadcaster , token ) : [EOL] query = ... [EOL] params = ... [EOL] cursor = ... [EOL] async with await self . cursor ( ) as cursor : [EOL] if self . isSqlite : [EOL] query = [string] [EOL] params = broadcaster , token [EOL] else : [EOL] query = [string] [EOL] params = broadcaster , token , token [EOL] await cursor . execute ( query , params ) [EOL] await self . commit ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'DatabaseOAuth'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'DatabaseOAuth'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 $typing.Optional[typing.Tuple[builtins.str]]$ 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 $typing.Optional[typing.Tuple[builtins.str]]$ 0 $typing.Optional[typing.Tuple[builtins.str]]$ 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[typing.Any,...]$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[typing.Any,...]$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[typing.Any,...]$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $builtins.str$ 0 $typing.Tuple[typing.Any,...]$ 0 0 0 0 0 0 0 0 0
from typing import AsyncIterator [EOL] import typing [EOL] import builtins [EOL] from typing import AsyncIterator [EOL] [EOL] import aioodbc . cursor [comment] [EOL] import pyodbc [EOL] [EOL] from . _base import Database [EOL] [EOL] [EOL] class PermittedUsersMixin ( Database ) : [EOL] async def getPermittedUsers ( self , broadcaster ) : [EOL] query = [string] [EOL] cursor = ... [EOL] async with await self . cursor ( ) as cursor : [EOL] async for user , in await cursor . execute ( query , ( broadcaster , ) ) : [EOL] yield user [EOL] [EOL] async def isPermittedUser ( self , broadcaster , user ) : [EOL] query = [string] [EOL] cursor = ... [EOL] async with await self . cursor ( ) as cursor : [EOL] await cursor . execute ( query , ( broadcaster , user , ) ) [EOL] return bool ( await cursor . fetchone ( ) ) [EOL] [EOL] async def addPermittedUser ( self , broadcaster , user , moderator ) : [EOL] query = [string] [EOL] history = [string] [EOL] cursor = ... [EOL] async with await self . cursor ( ) as cursor : [EOL] try : [EOL] await cursor . execute ( query , ( broadcaster , user ) ) [EOL] except pyodbc . Error : [EOL] return False [EOL] [EOL] await cursor . execute ( history , ( broadcaster , user , moderator , [string] ) ) [EOL] await self . commit ( ) [EOL] return True [EOL] [EOL] async def removePermittedUser ( self , broadcaster , user , moderator ) : [EOL] query = [string] [EOL] history = [string] [EOL] cursor = ... [EOL] async with await self . cursor ( ) as cursor : [EOL] await cursor . execute ( query , ( broadcaster , user ) ) [EOL] if cursor . rowcount == [number] : [EOL] return False [EOL] [EOL] await cursor . execute ( history , ( broadcaster , user , moderator , [string] ) ) [EOL] await self . commit ( ) [EOL] return True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.AsyncIterator[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 0 0 0 0 0 0 0 0 $aioodbc.cursor.Cursor$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import cast [EOL] [EOL] import bot [EOL] from . _auto_join import AutoJoinMixin [EOL] from . _auto_repeat import AutoRepeatMixin [EOL] from . _banned_channels import BannedChannelsMixin [EOL] from . _bot_managers import BotManagersMixin [EOL] from . _base import Database [EOL] from . _chat_properties import ChatPropertiesMixin [EOL] from . _custom_commands import CustomCommandsMixin [EOL] from . _features import FeaturesMixin [EOL] from . _game_abbreviations import GameAbbreviationsMixin [EOL] from . _permitted_users import PermittedUsersMixin [EOL] [EOL] [EOL] class DatabaseMain ( AutoJoinMixin , GameAbbreviationsMixin , CustomCommandsMixin , FeaturesMixin , BannedChannelsMixin , ChatPropertiesMixin , PermittedUsersMixin , BotManagersMixin , AutoRepeatMixin , Database ) : [EOL] async def __aenter__ ( self ) : [EOL] return cast ( DatabaseMain , await super ( ) . __aenter__ ( ) ) [EOL] [EOL] @ staticmethod def acquire ( ) : [EOL] return DatabaseMain ( bot . globals . connectionPools [ [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'DatabaseMain'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'DatabaseMain'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Optional , Iterable , Deque , Generator [EOL] import typing [EOL] import builtins [EOL] import bot [EOL] from collections import deque [EOL] from typing import Deque , Generator , Iterable , Optional [comment] [EOL] [EOL] [EOL] def messagesFromItems ( items , prepend = None ) : [EOL] prepend = prepend or [string] [EOL] limit = bot . config . messageLimit - len ( prepend ) [EOL] queue = deque ( items ) [EOL] itemsMsg = deque ( ) [EOL] length = [number] [EOL] while queue : [EOL] item = queue . popleft ( ) [EOL] itemsMsg . append ( item ) [EOL] if length : [EOL] length += [number] [EOL] length += len ( item ) [EOL] if length >= limit : [EOL] if len ( itemsMsg ) > [number] : [EOL] itemsMsg . pop ( ) [EOL] yield prepend + [string] . join ( itemsMsg ) [EOL] itemsMsg . clear ( ) [EOL] itemsMsg . append ( item ) [EOL] length = len ( item ) [EOL] else : [EOL] yield prepend + [string] . join ( itemsMsg ) [EOL] itemsMsg . clear ( ) [EOL] length = [number] [EOL] if itemsMsg : [EOL] yield prepend + [string] . join ( itemsMsg ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Generator[builtins.str,None,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Type , Any , Callable , Awaitable , Tuple [EOL] import typing [EOL] import builtins [EOL] import lib [EOL] import datetime [EOL] import bot . data [comment] [EOL] [EOL] from collections import defaultdict [EOL] from datetime import datetime , timedelta [EOL] from functools import partial , wraps [EOL] from typing import Any , Awaitable , Callable , Optional , Tuple , Union , cast [EOL] [EOL] from lib import data [EOL] [EOL] _AnyArgs = Union [ data . ChatCommandArgs , data . WhisperCommandArgs , data . ManageBotArgs ] [EOL] _AnyCallable = Callable [ ... , Awaitable [ bool ] ] [EOL] _AnyDecorator = Callable [ ... , _AnyCallable ] [EOL] [EOL] [EOL] def send ( chat ) : [EOL] return chat . send [EOL] [EOL] [EOL] def sendPriority ( chat , priority ) : [EOL] return cast ( data . Send , partial ( chat . send , priority = priority ) ) [EOL] [EOL] [EOL] def permission ( level ) : [EOL] def decorator ( func ) : [EOL] @ wraps ( func ) async def command ( args , * pargs , ** kwargs ) : [EOL] if not args . permissions [ level ] : [EOL] return False [EOL] return await func ( args , * pargs , ** kwargs ) [EOL] return command [EOL] return decorator [EOL] [EOL] [EOL] def not_permission ( level ) : [EOL] def decorator ( func ) : [EOL] @ wraps ( func ) async def command ( args , * pargs , ** kwargs ) : [EOL] if args . permissions [ level ] : [EOL] return False [EOL] return await func ( args , * pargs , ** kwargs ) [EOL] return command [EOL] return decorator [EOL] [EOL] [EOL] def ownerChannel ( func ) : [EOL] @ wraps ( func ) async def chatCommand ( args , * pargs , ** kwargs ) : [EOL] if not args . permissions . inOwnerChannel : [EOL] return False [EOL] return await func ( args , * pargs , ** kwargs ) [EOL] return chatCommand [EOL] [EOL] [EOL] def feature ( featureKey ) : [EOL] def decorator ( func ) : [EOL] @ wraps ( func ) async def chatCommand ( args , * pargs , ** kwargs ) : [EOL] hasFeature = await args . data . hasFeature ( args . chat . channel , featureKey ) [EOL] if not hasFeature : [EOL] return False [EOL] return await func ( args , * pargs , ** kwargs ) [EOL] return chatCommand [EOL] return decorator [EOL] [EOL] [EOL] def not_feature ( featureKey ) : [EOL] def decorator ( func ) : [EOL] @ wraps ( func ) async def chatCommand ( args , * pargs , ** kwargs ) : [EOL] hasFeature = await args . data . hasFeature ( args . chat . channel , featureKey ) [EOL] if hasFeature : [EOL] return False [EOL] return await func ( args , * pargs , ** kwargs ) [EOL] return chatCommand [EOL] return decorator [EOL] [EOL] [EOL] def permission_feature ( * levelFeatures ) : [EOL] def decorator ( func ) : [EOL] @ wraps ( func ) async def chatCommand ( args , * pargs , ** kwargs ) : [EOL] level = ... [EOL] featureKey = ... [EOL] for level , featureKey in levelFeatures : [EOL] hasPermission = level is None or args . permissions [ level ] [EOL] hasFeature = ( featureKey is None or await args . data . hasFeature ( args . chat . channel , featureKey ) ) [EOL] if hasPermission and hasFeature : [EOL] break [EOL] else : [EOL] return False [EOL] return await func ( args , * pargs , ** kwargs ) [EOL] return chatCommand [EOL] return decorator [EOL] [EOL] [EOL] def permission_not_feature ( * levelFeatures ) : [EOL] def decorator ( func ) : [EOL] @ wraps ( func ) async def chatCommand ( args , * pargs , ** kwargs ) : [EOL] level = ... [EOL] featureKey = ... [EOL] for level , featureKey in levelFeatures : [EOL] hasPermission = level is None or args . permissions [ level ] [EOL] hasFeature = ( featureKey is None or not await args . data . hasFeature ( args . chat . channel , featureKey ) ) [EOL] if hasPermission and hasFeature : [EOL] break [EOL] else : [EOL] return False [EOL] return await func ( args , * pargs , ** kwargs ) [EOL] return chatCommand [EOL] return decorator [EOL] [EOL] [EOL] def cooldown ( duration , key , level = None ) : [EOL] def decorator ( func ) : [EOL] @ wraps ( func ) async def chatCommand ( args , * pargs , ** kwargs ) : [EOL] if inCooldown ( args , duration , key , level ) : [EOL] return False [EOL] return await func ( args , * pargs , ** kwargs ) [EOL] return chatCommand [EOL] return decorator [EOL] [EOL] [EOL] def inCooldown ( args , duration , key , level = None ) : [EOL] if ( ( level is None or not args . permissions [ level ] ) [EOL] and key in args . chat . sessionData [EOL] and args . timestamp - args . chat . sessionData [ key ] < duration ) : [EOL] return True [EOL] args . chat . sessionData [ key ] = args . timestamp [EOL] return False [EOL] [EOL] [EOL] def in_user_cooldown ( args , cooldown , key , level = None ) : [EOL] if key not in args . chat . sessionData : [EOL] args . chat . sessionData [ key ] = defaultdict ( lambda : datetime . min ) [EOL] if level is None or not args . permissions [ level ] : [EOL] since = ... [EOL] since = args . timestamp - args . chat . sessionData [ key ] [ args . nick ] [EOL] if since < cooldown : [EOL] return True [EOL] args . chat . sessionData [ key ] [ args . nick ] = args . timestamp [EOL] return False [EOL] [EOL] [EOL] def min_args ( amount , _return = False , reason = None ) : [EOL] def decorator ( func ) : [EOL] @ wraps ( func ) async def command ( args , * pargs , ** kwargs ) : [EOL] if len ( args . message ) < amount : [EOL] if reason : [EOL] args . chat . send ( reason ) [EOL] return _return [EOL] return await func ( args , * pargs , ** kwargs ) [EOL] return command [EOL] return decorator [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_AnyCallable$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_AnyCallable$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_AnyCallable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_AnyCallable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_AnyCallable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_AnyCallable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_AnyCallable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_AnyDecorator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_AnyCallable$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Set , List [EOL] import typing [EOL] import builtins [EOL] from enum import Enum [EOL] from typing import List , Set [comment] [EOL] [EOL] twitchUrlRegex = ( [string] [string] ) [EOL] [EOL] [EOL] class Response ( Enum ) : [EOL] No = False [EOL] Yes = True [EOL] Unknown = None [EOL] [EOL] [EOL] Yes = Response . Yes [EOL] No = Response . No [EOL] Unknown = Response . Unknown [EOL] [EOL] [EOL] def parseArguments ( arguments ) : [EOL] argumentList = [ ] [EOL] subWord = [ ] [EOL] inQuote = False [EOL] i = [number] [EOL] length = len ( arguments ) [EOL] while i < length : [EOL] c = arguments [ i ] [EOL] i += [number] [EOL] if c == [string] : [EOL] if i < length and arguments [ i ] in [string] : [EOL] subWord . append ( arguments [ i ] ) [EOL] i += [number] [EOL] continue [EOL] if c == [string] and not inQuote : [EOL] argumentList . append ( [string] . join ( subWord ) ) [EOL] subWord . clear ( ) [EOL] continue [EOL] if c == [string] : [EOL] inQuote = not inQuote [EOL] continue [EOL] subWord . append ( c ) [EOL] if subWord : [EOL] argumentList . append ( [string] . join ( subWord ) ) [EOL] return argumentList [EOL] [EOL] [EOL] def get_response ( argument , default = Unknown ) : [EOL] yes = { [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , } [EOL] no = { [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , } [EOL] [EOL] if not argument : [EOL] return default [EOL] lower = argument . lower ( ) [EOL] if lower in yes : [EOL] return Yes [EOL] if lower in no : [EOL] return No [EOL] return Unknown [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Optional , List , Dict , Union , Mapping , Iterable [EOL] import typing [EOL] import builtins [EOL] import lib [EOL] import datetime [EOL] import bot [EOL] from bot import data , utils [comment] [EOL] from collections import defaultdict [EOL] from contextlib import suppress [EOL] from datetime import datetime , timedelta [EOL] from typing import Dict , Iterable , Mapping , List , Optional , Union [comment] [EOL] from lib . cache import CacheStore [EOL] from lib . database import DatabaseTimeout [EOL] [EOL] [EOL] async def timeout_user ( dataCache , chat , user , module , base_level = [number] , message = None , reason = None ) : [EOL] properties = ... [EOL] defaults = ... [EOL] chatProp = ... [EOL] timeouts = ... [EOL] properties = [ [string] , [string] , [string] ] [EOL] defaults = { [string] : bot . config . moderatorDefaultTimeout [ [number] ] , [string] : bot . config . moderatorDefaultTimeout [ [number] ] , [string] : bot . config . moderatorDefaultTimeout [ [number] ] , } [EOL] chatProp = await dataCache . getChatProperties ( chat . channel , properties , defaults , int ) [EOL] timeouts = [ chatProp [ [string] ] , chatProp [ [string] ] , chatProp [ [string] ] , ] [EOL] [EOL] if [string] not in chat . sessionData : [EOL] chat . sessionData [ [string] ] = defaultdict ( lambda : defaultdict ( lambda : ( datetime . min , [number] ) ) ) [EOL] [EOL] timestamp = utils . now ( ) [EOL] duration = timedelta ( seconds = bot . config . warningDuration ) [EOL] level = ... [EOL] if timestamp - chat . sessionData [ [string] ] [ module ] [ user ] [ [number] ] >= duration : [EOL] level = min ( max ( base_level , [number] ) , [number] ) [EOL] else : [EOL] prevLevel = chat . sessionData [ [string] ] [ module ] [ user ] [ [number] ] [EOL] level = min ( max ( base_level + [number] , prevLevel + [number] , [number] ) , [number] ) [EOL] chat . sessionData [ [string] ] [ module ] [ user ] = timestamp , level [EOL] length = timeouts [ level ] [EOL] theReason = reason or [string] [EOL] if length : [EOL] chat . send ( f' [string] { user } [string] { length } [string] { theReason }' , [number] ) [EOL] else : [EOL] chat . send ( f' [string] { user } [string] { theReason }' , [number] ) [EOL] [EOL] db = ... [EOL] async with DatabaseTimeout . acquire ( ) as db : [EOL] await db . recordTimeout ( chat . channel , user , None , module , level , length , message , reason ) [EOL] [EOL] [EOL] async def record_timeout ( chat , user , messages , source_message , module ) : [EOL] if isinstance ( messages , str ) : [EOL] messages = messages , [EOL] message = ... [EOL] for message in messages : [EOL] who = ... [EOL] length = ... [EOL] reason = ... [EOL] parts = ... [EOL] who , length = None , None [EOL] reason = None [EOL] if message . startswith ( ( [string] , [string] ) ) : [EOL] parts = message . split ( None , [number] ) [EOL] if len ( parts ) >= [number] : [EOL] who , length = parts [ [number] ] , [number] [EOL] if len ( parts ) >= [number] : [EOL] reason = parts [ [number] ] [EOL] if message . startswith ( ( [string] , [string] ) ) : [EOL] parts = message . split ( None , [number] ) [EOL] if len ( parts ) >= [number] : [EOL] if len ( parts ) < [number] : [EOL] who = parts [ [number] ] [EOL] else : [EOL] with suppress ( ValueError ) : [EOL] who , length = parts [ [number] ] , int ( parts [ [number] ] ) [EOL] if len ( parts ) >= [number] : [EOL] reason = parts [ [number] ] [EOL] if who is not None : [EOL] db = ... [EOL] async with DatabaseTimeout . acquire ( ) as db : [EOL] await db . recordTimeout ( chat . channel , who , user , module , None , length , source_message , reason ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type , Any , Callable , Awaitable , Tuple , Sequence [EOL] from collections import defaultdict [EOL] import typing [EOL] import builtins [EOL] import datetime [EOL] import collections [EOL] import bot [EOL] from bot import utils [EOL] from contextlib import suppress [EOL] from collections import defaultdict [EOL] from datetime import datetime , timedelta [EOL] from functools import wraps [EOL] from aiohttp import ClientResponseError [EOL] from typing import Awaitable , Any , Callable , Sequence , Tuple , Type [EOL] [EOL] _AnyCallable = Callable [ ... , Awaitable [ Any ] ] [EOL] _AnyDecorator = Callable [ ... , _AnyCallable ] [EOL] _ArgsKey = Tuple [ Tuple [ Any , ... ] , Tuple [ Tuple [ str , Any ] , ... ] ] [EOL] [EOL] [EOL] _defaultDuration = timedelta ( seconds = [number] ) [EOL] [EOL] [EOL] def cache ( key , duration = _defaultDuration , * , excepts = ( ConnectionError , ClientResponseError ) , default = None ) : [EOL] def decorator ( func ) : [EOL] @ wraps ( func ) async def data ( * args , ** kwargs ) : [EOL] if key not in bot . globals . globalSessionData : [EOL] d = defaultdict ( lambda : ( datetime . min , default ) ) [EOL] bot . globals . globalSessionData [ key ] = d [EOL] [EOL] lastTime = ... [EOL] value = ... [EOL] kargs = ... [EOL] kargs = args , tuple ( kwargs . items ( ) ) [EOL] lastTime , value = bot . globals . globalSessionData [ key ] [ kargs ] [EOL] if utils . now ( ) - lastTime >= duration : [EOL] with suppress ( * excepts ) : [EOL] value = await func ( * args , ** kwargs ) [EOL] data = bot . globals . globalSessionData [ key ] [EOL] data [ kargs ] = utils . now ( ) , value [EOL] return value [EOL] return data [EOL] return decorator [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_AnyDecorator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_AnyCallable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
from asynctest . mock import patch [EOL] [EOL] from tests . unittest . base_channel import TestChannel [EOL] from tests . unittest . mock_class import StrContains [EOL] [EOL] [comment] [EOL] from . . import channel [EOL] [EOL] [EOL] class TestChannelBroadcaster ( TestChannel ) : [EOL] async def test_hello ( self ) : [EOL] self . assertIs ( await channel . commandHello ( self . args ) , False ) [EOL] self . permissionSet [ [string] ] = True [EOL] self . assertIs ( await channel . commandHello ( self . args ) , True ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] [EOL] @ patch ( [string] ) async def test_come ( self , mock_come ) : [EOL] self . assertIs ( await channel . commandCome ( self . args ) , False ) [EOL] self . assertFalse ( mock_come . called ) [EOL] mock_come . return_value = True [EOL] self . permissions . inOwnerChannel = True [EOL] self . assertIs ( await channel . commandCome ( self . args ) , True ) [EOL] mock_come . assert_called_once_with ( [string] , self . channel . send ) [EOL] [EOL] @ patch ( [string] ) async def test_leave ( self , mock_leave ) : [EOL] self . assertIs ( await channel . commandLeave ( self . args ) , False ) [EOL] self . assertFalse ( mock_leave . called ) [EOL] mock_leave . return_value = True [EOL] self . permissionSet [ [string] ] = True [EOL] self . assertIs ( await channel . commandLeave ( self . args ) , True ) [EOL] mock_leave . assert_called_once_with ( [string] , self . channel . send ) [EOL] [EOL] @ patch ( [string] ) async def test_auto_join ( self , mock_autojoin ) : [EOL] self . assertIs ( await channel . commandAutoJoin ( self . args ) , False ) [EOL] self . assertFalse ( mock_autojoin . called ) [EOL] mock_autojoin . return_value = True [EOL] self . permissions . inOwnerChannel = True [EOL] self . assertIs ( await channel . commandAutoJoin ( self . args ) , True ) [EOL] mock_autojoin . assert_called_once_with ( [string] , self . channel . send , self . args . message ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import asynctest [EOL] [EOL] from asynctest . mock import MagicMock , Mock , patch [EOL] [EOL] from bot . coroutine . connection import ConnectionHandler [EOL] from bot . twitchmessage import IrcMessageTags [EOL] from lib . data . message import Message [EOL] from lib . database import DatabaseMain [EOL] from tests . unittest . mock_class import StrContains , TypeMatch [EOL] [EOL] from . . import library [EOL] [EOL] [EOL] def send ( messages ) : [EOL] pass [EOL] [EOL] [EOL] class TestLibraryBroadcasterCome ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . tags = IrcMessageTags ( ) [EOL] self . database = MagicMock ( spec = DatabaseMain ) [EOL] self . database . __aenter__ . return_value = self . database [EOL] self . database . __aexit__ . return_value = False [EOL] self . send = Mock ( spec = send ) [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_join = patcher . start ( ) [EOL] [EOL] patcher = patch . object ( DatabaseMain , [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_database = patcher . start ( ) [EOL] self . mock_database . return_value = self . database [EOL] [EOL] async def test ( self ) : [EOL] self . database . isChannelBannedReason . return_value = None [EOL] self . database . getAutoJoinsPriority . return_value = [number] [EOL] self . mock_join . return_value = True [EOL] self . assertIs ( await library . come ( [string] , self . send ) , True ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] self . database . isChannelBannedReason . assert_called_once_with ( [string] ) [EOL] self . database . getAutoJoinsPriority . assert_called_once_with ( [string] ) [EOL] self . mock_join . assert_called_once_with ( [string] , [number] ) [EOL] [EOL] async def test_existing ( self ) : [EOL] self . database . isChannelBannedReason . return_value = None [EOL] self . database . getAutoJoinsPriority . return_value = [number] [EOL] self . mock_join . return_value = False [EOL] self . assertIs ( await library . come ( [string] , self . send ) , True ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] self . database . isChannelBannedReason . assert_called_once_with ( [string] ) [EOL] self . database . getAutoJoinsPriority . assert_called_once_with ( [string] ) [EOL] self . mock_join . assert_called_once_with ( [string] , [number] ) [EOL] [EOL] async def test_banned ( self ) : [EOL] self . database . isChannelBannedReason . return_value = [string] [EOL] self . assertIs ( await library . come ( [string] , self . send ) , True ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] self . database . isChannelBannedReason . assert_called_once_with ( [string] ) [EOL] self . assertFalse ( self . database . getAutoJoinsPriority . called ) [EOL] self . assertFalse ( self . mock_join . called ) [EOL] [EOL] [EOL] class TestLibraryBroadcasterLeave ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_config = patcher . start ( ) [EOL] self . mock_config . botnick = [string] [EOL] [EOL] self . send = Mock ( spec = send ) [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_sleep = patcher . start ( ) [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_part = patcher . start ( ) [EOL] [EOL] async def test ( self ) : [EOL] self . assertIs ( await library . leave ( [string] , self . send ) , True ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] self . mock_sleep . assert_called_once_with ( TypeMatch ( float ) ) [EOL] self . mock_part . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_bot ( self ) : [EOL] self . assertIs ( await library . leave ( [string] , self . send ) , False ) [EOL] self . send . assert_not_called ( ) [EOL] self . assertFalse ( self . mock_sleep . called ) [EOL] self . assertFalse ( self . mock_part . called ) [EOL] [EOL] [EOL] class TestLibraryBroadcasterAutoJoin ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . database = MagicMock ( spec = DatabaseMain ) [EOL] self . database . __aenter__ . return_value = self . database [EOL] self . database . __aexit__ . return_value = False [EOL] self . database . isChannelBannedReason . return_value = None [EOL] self . send = Mock ( spec = send ) [EOL] [EOL] patcher = patch . object ( DatabaseMain , [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_database = patcher . start ( ) [EOL] self . mock_database . return_value = self . database [EOL] [EOL] patcher = patch ( library . __name__ + [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_add = patcher . start ( ) [EOL] self . mock_add . return_value = True [EOL] [EOL] patcher = patch ( library . __name__ + [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_delete = patcher . start ( ) [EOL] self . mock_delete . return_value = True [EOL] [EOL] async def test ( self ) : [EOL] self . assertIs ( await library . auto_join ( [string] , self . send , Message ( [string] ) ) , True ) [EOL] self . database . isChannelBannedReason . assert_called_once_with ( [string] ) [EOL] self . mock_add . assert_called_once_with ( self . database , [string] , self . send ) [EOL] self . assertFalse ( self . mock_delete . called ) [EOL] self . send . assert_not_called ( ) [EOL] [EOL] async def test_add ( self ) : [EOL] self . assertIs ( await library . auto_join ( [string] , self . send , Message ( [string] ) ) , True ) [EOL] self . database . isChannelBannedReason . assert_called_once_with ( [string] ) [EOL] self . mock_add . assert_called_once_with ( self . database , [string] , self . send ) [EOL] self . assertFalse ( self . mock_delete . called ) [EOL] self . send . assert_not_called ( ) [EOL] [EOL] async def test_delete ( self ) : [EOL] self . assertIs ( await library . auto_join ( [string] , self . send , Message ( [string] ) ) , True ) [EOL] self . database . isChannelBannedReason . assert_called_once_with ( [string] ) [EOL] self . mock_delete . assert_called_once_with ( self . database , [string] , self . send ) [EOL] self . assertFalse ( self . mock_add . called ) [EOL] self . send . assert_not_called ( ) [EOL] [EOL] async def test_banned ( self ) : [EOL] self . database . isChannelBannedReason . return_value = [string] [EOL] self . assertIs ( await library . auto_join ( [string] , self . send , Message ( [string] ) ) , True ) [EOL] self . database . isChannelBannedReason . assert_called_once_with ( [string] ) [EOL] self . assertFalse ( self . mock_add . called ) [EOL] self . assertFalse ( self . mock_delete . called ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] [EOL] async def test_banned_delete ( self ) : [EOL] self . database . isChannelBannedReason . return_value = [string] [EOL] self . assertIs ( await library . auto_join ( [string] , self . send , Message ( [string] ) ) , True ) [EOL] self . database . isChannelBannedReason . assert_called_once_with ( [string] ) [EOL] self . assertFalse ( self . mock_add . called ) [EOL] self . assertFalse ( self . mock_delete . called ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] [EOL] [EOL] class TestLibraryBroadcasterAutoJoinAdd ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . database = Mock ( spec = DatabaseMain ) [EOL] self . send = Mock ( spec = send ) [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_globals = patcher . start ( ) [EOL] self . mock_globals . cluster = Mock ( spec = ConnectionHandler ) [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_join = patcher . start ( ) [EOL] [EOL] async def test ( self ) : [EOL] self . mock_join . return_value = True [EOL] self . database . saveAutoJoin . return_value = True [EOL] self . database . getAutoJoinsPriority . return_value = [number] [EOL] self . assertIs ( await library . auto_join_add ( self . database , [string] , self . send ) , True ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] , [string] ) ) [EOL] self . database . discardAutoJoin . assert_not_called ( ) [EOL] self . database . saveAutoJoin . assert_called_once_with ( [string] , [number] ) [EOL] self . database . getAutoJoinsPriority . assert_called_once_with ( [string] ) [EOL] self . mock_join . assert_called_once_with ( [string] , [number] ) [EOL] [EOL] async def test_existing ( self ) : [EOL] self . mock_join . return_value = True [EOL] self . database . saveAutoJoin . return_value = False [EOL] self . database . getAutoJoinsPriority . return_value = [number] [EOL] self . assertIs ( await library . auto_join_add ( self . database , [string] , self . send ) , True ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] self . database . discardAutoJoin . assert_not_called ( ) [EOL] self . database . saveAutoJoin . assert_called_once_with ( [string] , [number] ) [EOL] self . database . getAutoJoinsPriority . assert_called_once_with ( [string] ) [EOL] self . mock_join . assert_called_once_with ( [string] , [number] ) [EOL] [EOL] async def test_joined ( self ) : [EOL] self . mock_join . return_value = False [EOL] self . database . saveAutoJoin . return_value = True [EOL] self . database . getAutoJoinsPriority . return_value = [number] [EOL] self . assertIs ( await library . auto_join_add ( self . database , [string] , self . send ) , True ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] self . database . discardAutoJoin . assert_not_called ( ) [EOL] self . database . saveAutoJoin . assert_called_once_with ( [string] , [number] ) [EOL] self . database . getAutoJoinsPriority . assert_called_once_with ( [string] ) [EOL] self . mock_join . assert_called_once_with ( [string] , [number] ) [EOL] [EOL] async def test_joined_existing ( self ) : [EOL] self . mock_join . return_value = False [EOL] self . database . saveAutoJoin . return_value = False [EOL] self . database . getAutoJoinsPriority . return_value = [number] [EOL] self . assertIs ( await library . auto_join_add ( self . database , [string] , self . send ) , True ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] , [string] , [string] ) ) [EOL] self . database . discardAutoJoin . assert_not_called ( ) [EOL] self . database . saveAutoJoin . assert_called_once_with ( [string] , [number] ) [EOL] self . database . getAutoJoinsPriority . assert_called_once_with ( [string] ) [EOL] self . mock_join . assert_called_once_with ( [string] , [number] ) [EOL] [EOL] async def test_not_possible_1 ( self ) : [EOL] self . mock_join . return_value = False [EOL] self . database . saveAutoJoin . return_value = True [EOL] self . database . getAutoJoinsPriority . return_value = [number] [EOL] self . assertIs ( await library . auto_join_add ( self . database , [string] , self . send ) , True ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] self . database . discardAutoJoin . assert_not_called ( ) [EOL] self . database . saveAutoJoin . assert_called_once_with ( [string] , [number] ) [EOL] self . database . getAutoJoinsPriority . assert_called_once_with ( [string] ) [EOL] self . mock_join . assert_called_once_with ( [string] , [number] ) [EOL] [EOL] async def test_not_possible_1_existing ( self ) : [EOL] self . mock_join . return_value = False [EOL] self . database . saveAutoJoin . return_value = False [EOL] self . database . getAutoJoinsPriority . return_value = [number] [EOL] self . assertIs ( await library . auto_join_add ( self . database , [string] , self . send ) , True ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] , [string] , [string] ) ) [EOL] self . database . discardAutoJoin . assert_not_called ( ) [EOL] self . database . saveAutoJoin . assert_called_once_with ( [string] , [number] ) [EOL] self . database . getAutoJoinsPriority . assert_called_once_with ( [string] ) [EOL] self . mock_join . assert_called_once_with ( [string] , [number] ) [EOL] [EOL] [EOL] class TestLibraryBroadcasterAutoJoinDelete ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . database = Mock ( spec = DatabaseMain ) [EOL] self . send = Mock ( spec = send ) [EOL] [EOL] async def test ( self ) : [EOL] self . database . discardAutoJoin . return_value = True [EOL] self . assertIs ( await library . auto_join_delete ( self . database , [string] , self . send ) , True ) [EOL] self . database . discardAutoJoin . assert_called_once_with ( [string] ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] [EOL] async def test_not_existing ( self ) : [EOL] self . database . discardAutoJoin . return_value = False [EOL] self . assertIs ( await library . auto_join_delete ( self . database , [string] , self . send ) , True ) [EOL] self . database . discardAutoJoin . assert_called_once_with ( [string] ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
from datetime import timedelta [EOL] [EOL] from asynctest . mock import patch [EOL] [EOL] from tests . unittest . base_channel import TestChannel [EOL] from lib . data . message import Message [EOL] from tests . unittest . mock_class import IterableMatch , StrContains [EOL] [EOL] [comment] [EOL] from . . channel import pyramid [EOL] [EOL] [EOL] class TestSpamChannelPyramid ( TestChannel ) : [EOL] def setUp ( self ) : [EOL] super ( ) . setUp ( ) [EOL] self . permissions . broadcaster = False [EOL] self . permissions . globalModerator = False [EOL] self . permissions . chatModerator = False [EOL] [EOL] patcher = patch ( pyramid . __name__ + [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_process = patcher . start ( ) [EOL] [EOL] async def test_pyramid_false ( self ) : [EOL] self . assertIs ( await pyramid . commandPyramid ( self . args ) , False ) [EOL] self . permissionSet [ [string] ] = True [EOL] self . assertIs ( await pyramid . commandPyramid ( self . args ) , False ) [EOL] self . assertFalse ( self . mock_process . called ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] async def test_pyramid ( self ) : [EOL] self . permissions . broadcaster = True [EOL] self . permissionSet [ [string] ] = True [EOL] self . mock_process . return_value = True [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await pyramid . commandPyramid ( args ) , True ) [EOL] self . mock_process . assert_called_once_with ( args , [string] , [number] ) [EOL] [EOL] async def test_pyramid_count ( self ) : [EOL] self . permissions . broadcaster = True [EOL] self . permissionSet [ [string] ] = True [EOL] self . mock_process . return_value = True [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await pyramid . commandPyramid ( args ) , True ) [EOL] self . mock_process . assert_called_once_with ( args , [string] , [number] ) [EOL] [EOL] async def test_pyramid_moderator ( self ) : [EOL] self . permissionSet [ [string] ] = True [EOL] self . features . append ( [string] ) [EOL] self . mock_process . return_value = True [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await pyramid . commandPyramid ( args ) , True ) [EOL] self . mock_process . assert_called_once_with ( args , [string] , [number] ) [EOL] [EOL] async def test_long_pyramid_false ( self ) : [EOL] self . assertIs ( await pyramid . commandPyramidLong ( self . args ) , False ) [EOL] self . permissionSet [ [string] ] = True [EOL] self . assertIs ( await pyramid . commandPyramidLong ( self . args ) , False ) [EOL] self . assertFalse ( self . mock_process . called ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] async def test_long_pyramid ( self ) : [EOL] self . permissions . broadcaster = True [EOL] self . permissionSet [ [string] ] = True [EOL] self . mock_process . return_value = True [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await pyramid . commandPyramidLong ( args ) , True ) [EOL] self . mock_process . assert_called_once_with ( args , [string] , [number] ) [EOL] [EOL] async def test_long_pyramid_count ( self ) : [EOL] self . permissions . broadcaster = True [EOL] self . permissionSet [ [string] ] = True [EOL] self . mock_process . return_value = True [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await pyramid . commandPyramidLong ( args ) , True ) [EOL] self . mock_process . assert_called_once_with ( args , [string] , [number] ) [EOL] [EOL] async def test_long_pyramid_moderator ( self ) : [EOL] self . permissionSet [ [string] ] = True [EOL] self . features . append ( [string] ) [EOL] self . mock_process . return_value = True [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await pyramid . commandPyramidLong ( args ) , True ) [EOL] self . mock_process . assert_called_once_with ( args , [string] , [number] ) [EOL] [EOL] [EOL] class TestChannelProcessPyramid ( TestChannel ) : [EOL] def setUp ( self ) : [EOL] super ( ) . setUp ( ) [EOL] self . permissions . broadcaster = False [EOL] self . permissions . globalModerator = False [EOL] self . permissions . chatModerator = False [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_config = patcher . start ( ) [EOL] self . mock_config . messageLimit = [number] [EOL] self . mock_config . spamModeratorCooldown = [number] [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_cooldown = patcher . start ( ) [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_timeout = patcher . start ( ) [EOL] [EOL] async def test ( self ) : [EOL] self . permissions . broadcaster = True [EOL] self . permissions . globalModerator = True [EOL] self . assertIs ( await pyramid . process_pyramid ( self . args , [string] , [number] ) , True ) [EOL] self . channel . send . assert_called_once_with ( IterableMatch ( ) , - [number] ) [EOL] self . assertFalse ( self . mock_cooldown . called ) [EOL] self . assertFalse ( self . mock_timeout . called ) [EOL] [EOL] async def test_1 ( self ) : [EOL] self . permissions . broadcaster = True [EOL] self . permissions . globalModerator = True [EOL] self . assertIs ( await pyramid . process_pyramid ( self . args , [string] , [number] ) , True ) [EOL] self . channel . send . assert_called_once_with ( IterableMatch ( [string] ) , - [number] ) [EOL] self . assertFalse ( self . mock_cooldown . called ) [EOL] self . assertFalse ( self . mock_timeout . called ) [EOL] [EOL] async def test_2 ( self ) : [EOL] self . permissions . broadcaster = True [EOL] self . permissions . globalModerator = True [EOL] self . assertIs ( await pyramid . process_pyramid ( self . args , [string] , [number] ) , True ) [EOL] self . channel . send . assert_called_once_with ( IterableMatch ( [string] , [string] , [string] ) , - [number] ) [EOL] self . assertFalse ( self . mock_cooldown . called ) [EOL] self . assertFalse ( self . mock_timeout . called ) [EOL] [EOL] async def test_5 ( self ) : [EOL] self . mock_config . messageLimit = [number] [EOL] self . permissions . broadcaster = True [EOL] self . permissions . globalModerator = True [EOL] self . assertIs ( await pyramid . process_pyramid ( self . args , [string] , [number] ) , True ) [EOL] self . channel . send . assert_called_once_with ( IterableMatch ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) , - [number] ) [EOL] self . assertFalse ( self . mock_cooldown . called ) [EOL] self . assertFalse ( self . mock_timeout . called ) [EOL] [EOL] async def test_channel_mod ( self ) : [EOL] self . mock_config . messageLimit = [number] [EOL] self . permissions . broadcaster = True [EOL] self . permissions . globalModerator = True [EOL] self . permissions . chatModerator = True [EOL] self . assertIs ( await pyramid . process_pyramid ( self . args , [string] , [number] ) , True ) [EOL] self . channel . send . assert_called_once_with ( IterableMatch ( [string] , [string] , [string] ) , - [number] ) [EOL] self . assertFalse ( self . mock_cooldown . called ) [EOL] self . mock_timeout . assert_called_once_with ( self . channel , [string] , [string] , str ( self . args . message ) , [string] ) [EOL] [EOL] async def test_broadcaster_limit ( self ) : [EOL] self . mock_config . messageLimit = [number] [EOL] self . permissions . broadcaster = True [EOL] self . assertIs ( await pyramid . process_pyramid ( self . args , [string] , [number] ) , True ) [EOL] self . channel . send . assert_called_once_with ( IterableMatch ( * ( [ StrContains ( ) ] * ( [number] + [number] - [number] ) ) ) , - [number] ) [EOL] self . assertFalse ( self . mock_cooldown . called ) [EOL] self . assertFalse ( self . mock_timeout . called ) [EOL] [EOL] async def test_moderator_limit ( self ) : [EOL] self . mock_config . messageLimit = [number] [EOL] self . mock_cooldown . return_value = False [EOL] self . assertIs ( await pyramid . process_pyramid ( self . args , [string] , [number] ) , True ) [EOL] self . channel . send . assert_called_once_with ( IterableMatch ( [string] , [string] , [string] ) , - [number] ) [EOL] self . assertFalse ( self . mock_timeout . called ) [EOL] self . mock_cooldown . assert_called_once_with ( self . args , timedelta ( seconds = [number] ) , [string] ) [EOL] [EOL] async def test_moderator_cooldown ( self ) : [EOL] self . mock_config . messageLimit = [number] [EOL] self . mock_cooldown . return_value = True [EOL] self . assertIs ( await pyramid . process_pyramid ( self . args , [string] , [number] ) , False ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] self . assertFalse ( self . mock_timeout . called ) [EOL] self . mock_cooldown . assert_called_once_with ( self . args , timedelta ( seconds = [number] ) , [string] ) [EOL] [EOL] async def test_limit ( self ) : [EOL] self . mock_config . messageLimit = [number] [EOL] self . permissions . broadcaster = True [EOL] self . permissions . globalModerator = True [EOL] self . assertIs ( await pyramid . process_pyramid ( self . args , [string] , [number] ) , True ) [EOL] self . channel . send . assert_called_once_with ( IterableMatch ( [string] ) , - [number] ) [EOL] self . assertFalse ( self . mock_cooldown . called ) [EOL] self . assertFalse ( self . mock_timeout . called ) [EOL] [EOL] async def test_limit_exact ( self ) : [EOL] self . mock_config . messageLimit = [number] [EOL] self . permissions . broadcaster = True [EOL] self . permissions . globalModerator = True [EOL] self . assertIs ( await pyramid . process_pyramid ( self . args , [string] , [number] ) , True ) [EOL] self . channel . send . assert_called_once_with ( IterableMatch ( [string] , [string] , [string] ) , - [number] ) [EOL] self . assertFalse ( self . mock_cooldown . called ) [EOL] self . assertFalse ( self . mock_timeout . called ) [EOL] [EOL] [EOL] class TestChannelRandomPyramid ( TestChannel ) : [EOL] def setUp ( self ) : [EOL] super ( ) . setUp ( ) [EOL] self . permissions . broadcaster = False [EOL] self . permissions . globalModerator = False [EOL] self . permissions . chatModerator = False [EOL] [EOL] self . data . twitch_get_bot_emote_set . return_value = { [number] } [EOL] self . data . twitch_load_emotes . return_value = True [EOL] self . data . twitch_get_emotes . return_value = { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_config = patcher . start ( ) [EOL] self . mock_config . messageLimit = [number] [EOL] self . mock_config . spamModeratorCooldown = [number] [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_cooldown = patcher . start ( ) [EOL] self . mock_cooldown . return_value = False [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_choice = patcher . start ( ) [EOL] self . mock_choice . side_effect = [ [number] , [number] , [number] , [number] , [number] ] [EOL] [EOL] async def test_false ( self ) : [EOL] self . assertIs ( await pyramid . commandRandomPyramid ( self . args ) , False ) [EOL] self . permissionSet [ [string] ] = True [EOL] self . assertIs ( await pyramid . commandRandomPyramid ( self . args ) , False ) [EOL] self . permissionSet [ [string] ] = True [EOL] self . data . twitch_get_bot_emote_set . return_value = None [EOL] self . assertIs ( await pyramid . commandRandomPyramid ( self . args ) , False ) [EOL] self . data . twitch_get_bot_emote_set . return_value = { [number] } [EOL] self . data . twitch_load_emotes . return_value = False [EOL] self . assertIs ( await pyramid . commandRandomPyramid ( self . args ) , False ) [EOL] self . data . twitch_load_emotes . return_value = True [EOL] self . data . twitch_get_emotes . return_value = None [EOL] self . assertIs ( await pyramid . commandRandomPyramid ( self . args ) , False ) [EOL] self . assertFalse ( self . mock_cooldown . called ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] async def test ( self ) : [EOL] self . permissionSet [ [string] ] = True [EOL] self . permissions . broadcaster = True [EOL] self . permissions . globalModerator = True [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await pyramid . commandRandomPyramid ( args ) , True ) [EOL] self . channel . send . assert_called_once_with ( IterableMatch ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) , - [number] ) [EOL] self . assertFalse ( self . mock_cooldown . called ) [EOL] [EOL] async def test_0 ( self ) : [EOL] self . permissionSet [ [string] ] = True [EOL] self . permissions . broadcaster = True [EOL] self . permissions . globalModerator = True [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await pyramid . commandRandomPyramid ( args ) , True ) [EOL] self . channel . send . assert_called_once_with ( IterableMatch ( ) , - [number] ) [EOL] self . assertFalse ( self . mock_cooldown . called ) [EOL] [EOL] async def test_1 ( self ) : [EOL] self . permissionSet [ [string] ] = True [EOL] self . permissions . broadcaster = True [EOL] self . permissions . globalModerator = True [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await pyramid . commandRandomPyramid ( args ) , True ) [EOL] self . channel . send . assert_called_once_with ( IterableMatch ( [string] ) , - [number] ) [EOL] self . assertFalse ( self . mock_cooldown . called ) [EOL] [EOL] async def test_2 ( self ) : [EOL] self . permissionSet [ [string] ] = True [EOL] self . permissions . broadcaster = True [EOL] self . permissions . globalModerator = True [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await pyramid . commandRandomPyramid ( args ) , True ) [EOL] self . channel . send . assert_called_once_with ( IterableMatch ( [string] , [string] , [string] ) , - [number] ) [EOL] self . assertFalse ( self . mock_cooldown . called ) [EOL] [EOL] async def test_broadcaster_limit ( self ) : [EOL] self . mock_choice . side_effect = [ [number] , [number] , [number] , [number] , [number] ] * [number] [EOL] self . mock_config . messageLimit = [number] [EOL] self . permissionSet [ [string] ] = True [EOL] self . permissions . broadcaster = True [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await pyramid . commandRandomPyramid ( args ) , True ) [EOL] self . channel . send . assert_called_once_with ( IterableMatch ( * ( [ StrContains ( ) ] * ( [number] + [number] - [number] ) ) ) , - [number] ) [EOL] self . assertFalse ( self . mock_cooldown . called ) [EOL] [EOL] async def test_moderator ( self ) : [EOL] self . permissionSet [ [string] ] = True [EOL] self . features . append ( [string] ) [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await pyramid . commandRandomPyramid ( args ) , True ) [EOL] self . channel . send . assert_called_once_with ( IterableMatch ( [string] , [string] , [string] , [string] , [string] ) , - [number] ) [EOL] self . mock_cooldown . assert_called_once_with ( args , timedelta ( seconds = [number] ) , [string] ) [EOL] [EOL] async def test_moderator_limit ( self ) : [EOL] self . permissionSet [ [string] ] = True [EOL] self . features . append ( [string] ) [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await pyramid . commandRandomPyramid ( args ) , True ) [EOL] self . channel . send . assert_called_once_with ( IterableMatch ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) , - [number] ) [EOL] self . mock_cooldown . assert_called_once_with ( args , timedelta ( seconds = [number] ) , [string] ) [EOL] [EOL] async def test_moderator_cooldown ( self ) : [EOL] self . mock_cooldown . return_value = True [EOL] self . permissionSet [ [string] ] = True [EOL] self . features . append ( [string] ) [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await pyramid . commandRandomPyramid ( args ) , False ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] self . mock_cooldown . assert_called_once_with ( args , timedelta ( seconds = [number] ) , [string] ) [EOL] [EOL] async def test_limit ( self ) : [EOL] self . mock_config . messageLimit = [number] [EOL] self . permissionSet [ [string] ] = True [EOL] self . permissions . broadcaster = True [EOL] self . permissions . globalModerator = True [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await pyramid . commandRandomPyramid ( args ) , True ) [EOL] self . channel . send . assert_called_once_with ( IterableMatch ( [string] , [string] , [string] , [string] , [string] , [string] , [string] ) , - [number] ) [EOL] self . assertFalse ( self . mock_cooldown . called ) [EOL] [EOL] async def test_limit_exact ( self ) : [EOL] self . mock_config . messageLimit = [number] [EOL] self . permissionSet [ [string] ] = True [EOL] self . permissions . broadcaster = True [EOL] self . permissions . globalModerator = True [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await pyramid . commandRandomPyramid ( args ) , True ) [EOL] self . channel . send . assert_called_once_with ( IterableMatch ( [string] , [string] , [string] , [string] , [string] ) , - [number] ) [EOL] self . assertFalse ( self . mock_cooldown . called ) [EOL]	
	0
	0
	0
	0
	0
	0
	0
	0
import asyncio [EOL] import sys [EOL] import unittest [EOL] [EOL] import asynctest [EOL] [EOL] from asynctest . mock import CoroutineMock , Mock , patch [EOL] [EOL] from pkg . botgotsthis . library import reload [EOL] from tests . cache . base_cache_store import TestCacheStore [EOL] [EOL] [EOL] def send ( messages ) : [EOL] pass [EOL] [EOL] [EOL] class TestLibraryReloadReloadable ( unittest . TestCase ) : [EOL] def test_source ( self ) : [EOL] self . assertIs ( reload . reloadable ( [string] ) , True ) [EOL] [EOL] def test_items ( self ) : [EOL] self . assertIs ( reload . reloadable ( [string] ) , True ) [EOL] [EOL] def test_bot ( self ) : [EOL] self . assertIs ( reload . reloadable ( [string] ) , False ) [EOL] self . assertIs ( reload . reloadable ( [string] ) , False ) [EOL] [EOL] def test_reload ( self ) : [EOL] reloadable = reload . reloadable [EOL] self . assertIs ( reloadable ( [string] ) , False ) [EOL] [EOL] @ patch ( [string] , autospec = True ) def test_autoload ( self , mock_globals ) : [EOL] mock_globals . pkgs = [ [string] ] [EOL] reloadable = reload . reloadable [EOL] self . assertIs ( reloadable ( [string] ) , False ) [EOL] self . assertIs ( reloadable ( [string] ) , False ) [EOL] self . assertIs ( reloadable ( [string] ) , True ) [EOL] self . assertIs ( reloadable ( [string] ) , True ) [EOL] self . assertIs ( reloadable ( [string] ) , True ) [EOL] self . assertIs ( reloadable ( [string] ) , True ) [EOL] [EOL] [EOL] class TestLibraryReloadIsSubmodule ( unittest . TestCase ) : [EOL] def test ( self ) : [EOL] self . assertIs ( reload . is_submodule ( [string] , [string] ) , True ) [EOL] self . assertIs ( reload . is_submodule ( [string] , [string] ) , True ) [EOL] self . assertIs ( reload . is_submodule ( [string] , [string] ) , False ) [EOL] self . assertIs ( reload . is_submodule ( [string] , [string] ) , False ) [EOL] [EOL] [EOL] class TestLibraryReloadKey ( unittest . TestCase ) : [EOL] @ patch ( [string] , autospec = True ) def test ( self , mock_globals ) : [EOL] mock_globals . pkgs = [ [string] , [string] ] [EOL] order = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] for first , second in zip ( order , order [ [number] : ] ) : [EOL] self . assertLess ( reload . key ( first ) , reload . key ( second ) , ( first , second ) ) [EOL] [EOL] [EOL] class TestLibraryReload ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . send = Mock ( spec = send ) [EOL] [EOL] @ patch ( reload . __name__ + [string] ) @ patch ( reload . __name__ + [string] ) async def test_full_reload ( self , mock_reload_command , mock_reload_config ) : [EOL] self . assertIs ( await reload . full_reload ( self . send ) , True ) [EOL] self . assertEqual ( self . send . call_count , [number] ) [EOL] mock_reload_config . assert_called_once_with ( self . send ) [EOL] mock_reload_command . assert_called_once_with ( self . send ) [EOL] [EOL] @ patch ( reload . __name__ + [string] ) @ patch ( reload . __name__ + [string] ) async def test_full_reload_multiple ( self , mock_reload_command , mock_reload_config ) : [EOL] async def wait ( * args ) : [EOL] await asyncio . sleep ( [number] ) [EOL] [EOL] async def call_0 ( ) : [EOL] return await reload . full_reload ( self . send ) [EOL] [EOL] async def call_1 ( ) : [EOL] await asyncio . sleep ( [number] ) [EOL] return await reload . full_reload ( self . send ) [EOL] [EOL] mock_reload_command . side_effect = wait [EOL] self . assertEqual ( await asyncio . gather ( call_0 ( ) , call_1 ( ) ) , [ True , True ] ) [EOL] self . assertEqual ( self . send . call_count , [number] ) [EOL] mock_reload_config . assert_called_once_with ( self . send ) [EOL] mock_reload_command . assert_called_once_with ( self . send ) [EOL] [EOL] @ patch . dict ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) @ patch ( [string] ) async def test_reload_commands ( self , mock_load_timezones , mock_reload ) : [EOL] module = Mock ( ) [EOL] sys . modules = { [string] : module } [EOL] self . assertIs ( await reload . reload_commands ( self . send ) , True ) [EOL] self . assertEqual ( self . send . call_count , [number] ) [EOL] mock_reload . assert_called_once_with ( module ) [EOL] mock_load_timezones . assert_called_once_with ( ) [EOL] [EOL] @ patch . dict ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) @ patch ( [string] ) async def test_reload_commands_multiple ( self , mock_load_timezones , mock_reload ) : [EOL] async def wait ( * args ) : [EOL] await asyncio . sleep ( [number] ) [EOL] [EOL] async def call_0 ( ) : [EOL] return await reload . reload_commands ( self . send ) [EOL] [EOL] async def call_1 ( ) : [EOL] await asyncio . sleep ( [number] ) [EOL] return await reload . reload_commands ( self . send ) [EOL] [EOL] module = Mock ( ) [EOL] sys . modules = { [string] : module } [EOL] mock_load_timezones . side_effect = wait [EOL] self . assertEqual ( await asyncio . gather ( call_0 ( ) , call_1 ( ) ) , [ True , True ] ) [EOL] self . assertEqual ( self . send . call_count , [number] ) [EOL] mock_reload . assert_called_once_with ( module ) [EOL] mock_load_timezones . assert_called_once_with ( ) [EOL] [EOL] @ patch . dict ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) @ patch ( reload . __name__ + [string] ) async def test_reload_config ( self , mock_bot , mock_reload ) : [EOL] module = Mock ( ) [EOL] originalConfig = mock_bot . config [EOL] mock_read = CoroutineMock ( ) [EOL] mock_bot . _config . BotConfig . return_value . read_config = mock_read [EOL] sys . modules = { [string] : module } [EOL] self . assertIs ( await reload . reload_config ( self . send ) , True ) [EOL] self . assertEqual ( self . send . call_count , [number] ) [EOL] self . assertEqual ( mock_reload . call_count , [number] ) [EOL] mock_bot . _config . BotConfig . assert_called_once_with ( ) [EOL] mock_read . assert_called_once_with ( ) [EOL] self . assertNotEqual ( mock_bot . config , originalConfig ) [EOL] [EOL] @ patch . dict ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) @ patch ( reload . __name__ + [string] ) async def test_reload_config_multiple ( self , mock_bot , mock_reload ) : [EOL] async def wait ( * args ) : [EOL] await asyncio . sleep ( [number] ) [EOL] [EOL] async def call_0 ( ) : [EOL] return await reload . reload_config ( self . send ) [EOL] [EOL] async def call_1 ( ) : [EOL] await asyncio . sleep ( [number] ) [EOL] return await reload . reload_config ( self . send ) [EOL] [EOL] module = Mock ( ) [EOL] originalConfig = mock_bot . config [EOL] mock_read = CoroutineMock ( ) [EOL] mock_bot . _config . BotConfig . return_value . read_config = mock_read [EOL] sys . modules = { [string] : module } [EOL] mock_read . side_effect = wait [EOL] self . assertEqual ( await asyncio . gather ( call_0 ( ) , call_1 ( ) ) , [ True , True ] ) [EOL] self . assertEqual ( self . send . call_count , [number] ) [EOL] self . assertEqual ( mock_reload . call_count , [number] ) [EOL] mock_bot . _config . BotConfig . assert_called_once_with ( ) [EOL] mock_read . assert_called_once_with ( ) [EOL] self . assertNotEqual ( mock_bot . config , originalConfig ) [EOL] [EOL] [EOL] class TestRefreshingCache ( TestCacheStore ) : [EOL] async def setUp ( self ) : [EOL] await super ( ) . setUp ( ) [EOL] self . send = Mock ( spec = send ) [EOL] [EOL] self . redis . set ( [string] , [string] ) [EOL] self . redis . set ( [string] , [string] ) [EOL] [EOL] async def test ( self ) : [EOL] await reload . refresh_cache ( self . send , self . data , None ) [EOL] self . assertIsNone ( await self . redis . get ( [string] ) ) [EOL] self . assertIsNone ( await self . redis . get ( [string] ) ) [EOL] [EOL] async def test_keys ( self ) : [EOL] await reload . refresh_cache ( self . send , self . data , [string] ) [EOL] self . assertIsNotNone ( await self . redis . get ( [string] ) ) [EOL] self . assertIsNone ( await self . redis . get ( [string] ) ) [EOL] [EOL] async def test_keys_2 ( self ) : [EOL] await reload . refresh_cache ( self . send , self . data , [string] ) [EOL] self . assertIsNone ( await self . redis . get ( [string] ) ) [EOL] self . assertIsNone ( await self . redis . get ( [string] ) ) [EOL] [EOL] async def test_keys_3 ( self ) : [EOL] await reload . refresh_cache ( self . send , self . data , [string] ) [EOL] self . assertIsNone ( await self . redis . get ( [string] ) ) [EOL] self . assertIsNone ( await self . redis . get ( [string] ) ) [EOL] [EOL] async def test_keys_4 ( self ) : [EOL] await reload . refresh_cache ( self . send , self . data , [string] ) [EOL] self . assertIsNotNone ( await self . redis . get ( [string] ) ) [EOL] self . assertIsNotNone ( await self . redis . get ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import asynctest [EOL] [EOL] from asynctest . mock import MagicMock , Mock , patch [EOL] [EOL] from lib . database import DatabaseMain [EOL] from lib . data . message import Message [EOL] from tests . unittest . base_managebot import TestManageBot , send [EOL] from tests . unittest . mock_class import StrContains [EOL] [EOL] [comment] [EOL] from . . . channel import library [EOL] from . . manage import autojoin [EOL] [EOL] [EOL] class TestManageBotAutoJoin ( TestManageBot ) : [EOL] def setUp ( self ) : [EOL] super ( ) . setUp ( ) [EOL] self . database . isChannelBannedReason . return_value = None [EOL] [EOL] async def test_false ( self ) : [EOL] self . assertIs ( await autojoin . manageAutoJoin ( self . args ) , False ) [EOL] args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await autojoin . manageAutoJoin ( args ) , False ) [EOL] args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await autojoin . manageAutoJoin ( args ) , False ) [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await autojoin . manageAutoJoin ( args ) , False ) [EOL] self . assertFalse ( self . database . isChannelBannedReason . called ) [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await autojoin . manageAutoJoin ( args ) , False ) [EOL] self . assertFalse ( self . send . called ) [EOL] self . database . isChannelBannedReason . assert_called_with ( [string] ) [EOL] [EOL] async def test_banned_channel ( self ) : [EOL] self . database . isChannelBannedReason . return_value = [string] [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await autojoin . manageAutoJoin ( args ) , True ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] [EOL] async def test_banned_channel_blank ( self ) : [EOL] self . database . isChannelBannedReason . return_value = [string] [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await autojoin . manageAutoJoin ( args ) , True ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] [EOL] @ patch ( library . __name__ + [string] ) async def test_add ( self , mock_add ) : [EOL] mock_add . return_value = True [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await autojoin . manageAutoJoin ( args ) , True ) [EOL] mock_add . assert_called_once_with ( self . database , [string] , self . send ) [EOL] [EOL] @ patch ( library . __name__ + [string] ) async def test_insert ( self , mock_add ) : [EOL] mock_add . return_value = True [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await autojoin . manageAutoJoin ( args ) , True ) [EOL] mock_add . assert_called_once_with ( self . database , [string] , self . send ) [EOL] [EOL] @ patch ( library . __name__ + [string] ) async def test_join ( self , mock_add ) : [EOL] mock_add . return_value = True [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await autojoin . manageAutoJoin ( args ) , True ) [EOL] mock_add . assert_called_once_with ( self . database , [string] , self . send ) [EOL] [EOL] @ patch ( library . __name__ + [string] ) async def test_delete ( self , mock_delete ) : [EOL] mock_delete . return_value = True [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await autojoin . manageAutoJoin ( args ) , True ) [EOL] mock_delete . assert_called_once_with ( self . database , [string] , self . send ) [EOL] [EOL] @ patch ( library . __name__ + [string] ) async def test_del ( self , mock_delete ) : [EOL] mock_delete . return_value = True [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await autojoin . manageAutoJoin ( args ) , True ) [EOL] mock_delete . assert_called_once_with ( self . database , [string] , self . send ) [EOL] [EOL] @ patch ( library . __name__ + [string] ) async def test_remove ( self , mock_delete ) : [EOL] mock_delete . return_value = True [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await autojoin . manageAutoJoin ( args ) , True ) [EOL] mock_delete . assert_called_once_with ( self . database , [string] , self . send ) [EOL] [EOL] @ patch ( library . __name__ + [string] ) async def test_rem ( self , mock_delete ) : [EOL] mock_delete . return_value = True [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await autojoin . manageAutoJoin ( args ) , True ) [EOL] mock_delete . assert_called_once_with ( self . database , [string] , self . send ) [EOL] [EOL] @ patch ( library . __name__ + [string] ) async def test_part ( self , mock_delete ) : [EOL] mock_delete . return_value = True [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await autojoin . manageAutoJoin ( args ) , True ) [EOL] mock_delete . assert_called_once_with ( self . database , [string] , self . send ) [EOL] [EOL] @ patch ( autojoin . __name__ + [string] ) async def test_priority ( self , mock_priority ) : [EOL] mock_priority . return_value = True [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await autojoin . manageAutoJoin ( args ) , True ) [EOL] mock_priority . assert_called_once_with ( [string] , [number] , self . send ) [EOL] [EOL] @ patch ( autojoin . __name__ + [string] ) async def test_pri ( self , mock_priority ) : [EOL] mock_priority . return_value = True [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await autojoin . manageAutoJoin ( args ) , True ) [EOL] mock_priority . assert_called_once_with ( [string] , [number] , self . send ) [EOL] [EOL] @ patch ( autojoin . __name__ + [string] ) async def test_priority_gibberish ( self , mock_priority ) : [EOL] mock_priority . return_value = True [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await autojoin . manageAutoJoin ( args ) , True ) [EOL] mock_priority . assert_called_once_with ( [string] , [number] , self . send ) [EOL] [EOL] @ patch ( autojoin . __name__ + [string] ) async def test_priority_integer ( self , mock_priority ) : [EOL] mock_priority . return_value = True [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await autojoin . manageAutoJoin ( args ) , True ) [EOL] mock_priority . assert_called_once_with ( [string] , [number] , self . send ) [EOL] [EOL] [EOL] class TestManageBotAutoJoinAutoJoinPriority ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . database = MagicMock ( spec = DatabaseMain ) [EOL] self . database . __aenter__ . return_value = self . database [EOL] self . database . __aexit__ . return_value = False [EOL] self . send = Mock ( spec = send ) [EOL] [EOL] patcher = patch . object ( DatabaseMain , [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_database = patcher . start ( ) [EOL] self . mock_database . return_value = self . database [EOL] [EOL] async def test ( self ) : [EOL] self . database . setAutoJoinPriority . return_value = True [EOL] self . assertIs ( await autojoin . auto_join_priority ( [string] , [number] , self . send ) , True ) [EOL] self . database . setAutoJoinPriority . assert_called_once_with ( [string] , [number] ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] , [string] ) ) [EOL] [EOL] async def test_not_existing ( self ) : [EOL] self . database . setAutoJoinPriority . return_value = False [EOL] self . assertIs ( await autojoin . auto_join_priority ( [string] , [number] , self . send ) , True ) [EOL] self . database . setAutoJoinPriority . assert_called_once_with ( [string] , [number] ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL]	
import asynctest [EOL] from bot . data import Channel [EOL] from tests . unittest . mock_class import StrContains , TypeMatch [EOL] from asynctest . mock import Mock , patch [EOL] from . . library import exit [EOL] [EOL] [EOL] def send ( messages ) : [EOL] pass [EOL] [EOL] [EOL] class TestLibraryExitExit ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . channel = Mock ( spec = Channel ) [EOL] self . send = Mock ( spec = send ) [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_globals = patcher . start ( ) [EOL] self . mock_globals . channels = { [string] : self . channel } [EOL] self . mock_globals . running = True [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_part = patcher . start ( ) [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_sleep = patcher . start ( ) [EOL] [EOL] async def test ( self ) : [EOL] self . assertIs ( await exit . exit ( self . send ) , True ) [EOL] self . assertIs ( self . mock_globals . running , False ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] ) ) [EOL] self . mock_part . assert_called_once_with ( [string] ) [EOL] self . mock_sleep . assert_called_once_with ( TypeMatch ( float ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import asynctest [EOL] [EOL] from asynctest . mock import MagicMock , Mock , patch [EOL] [EOL] from lib . database import DatabaseMain [EOL] from lib . data . message import Message [EOL] from tests . unittest . base_managebot import TestManageBot , send [EOL] from tests . unittest . mock_class import StrContains , AsyncIterator [EOL] [EOL] [comment] [EOL] from . . manage import banned [EOL] [EOL] [EOL] class TestManageBotBanned ( TestManageBot ) : [EOL] def setUp ( self ) : [EOL] super ( ) . setUp ( ) [EOL] self . database . isChannelBannedReason . return_value = None [EOL] [EOL] async def test_false ( self ) : [EOL] self . assertIs ( await banned . manageBanned ( self . args ) , False ) [EOL] args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await banned . manageBanned ( args ) , False ) [EOL] args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await banned . manageBanned ( args ) , False ) [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await banned . manageBanned ( args ) , False ) [EOL] self . assertFalse ( self . database . isChannelBannedReason . called ) [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await banned . manageBanned ( args ) , False ) [EOL] self . assertFalse ( self . send . called ) [EOL] [EOL] async def test_need_reason ( self ) : [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await banned . manageBanned ( args ) , True ) [EOL] self . send . assert_called_once_with ( StrContains ( self . args . nick , [string] , [string] ) ) [EOL] [EOL] @ patch ( banned . __name__ + [string] ) async def test_list ( self , mock_list ) : [EOL] mock_list . return_value = True [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await banned . manageBanned ( args ) , True ) [EOL] mock_list . assert_called_once_with ( self . send ) [EOL] [EOL] @ patch ( banned . __name__ + [string] ) async def test_add ( self , mock_add ) : [EOL] mock_add . return_value = True [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await banned . manageBanned ( args ) , True ) [EOL] mock_add . assert_called_once_with ( [string] , [string] , [string] , self . send ) [EOL] [EOL] @ patch ( banned . __name__ + [string] ) async def test_insert ( self , mock_add ) : [EOL] mock_add . return_value = True [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await banned . manageBanned ( args ) , True ) [EOL] mock_add . assert_called_once_with ( [string] , [string] , [string] , self . send ) [EOL] [EOL] @ patch ( banned . __name__ + [string] ) async def test_delete ( self , mock_delete ) : [EOL] mock_delete . return_value = True [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await banned . manageBanned ( args ) , True ) [EOL] mock_delete . assert_called_once_with ( [string] , [string] , [string] , self . send ) [EOL] [EOL] @ patch ( banned . __name__ + [string] ) async def test_del ( self , mock_delete ) : [EOL] mock_delete . return_value = True [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await banned . manageBanned ( args ) , True ) [EOL] mock_delete . assert_called_once_with ( [string] , [string] , [string] , self . send ) [EOL] [EOL] @ patch ( banned . __name__ + [string] ) async def test_remove ( self , mock_delete ) : [EOL] mock_delete . return_value = True [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await banned . manageBanned ( args ) , True ) [EOL] mock_delete . assert_called_once_with ( [string] , [string] , [string] , self . send ) [EOL] [EOL] @ patch ( banned . __name__ + [string] ) async def test_rem ( self , mock_delete ) : [EOL] mock_delete . return_value = True [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await banned . manageBanned ( args ) , True ) [EOL] mock_delete . assert_called_once_with ( [string] , [string] , [string] , self . send ) [EOL] [EOL] [EOL] class TestManageBotBannedListBannedChannels ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . database = MagicMock ( spec = DatabaseMain ) [EOL] self . database . __aenter__ . return_value = self . database [EOL] self . database . __aexit__ . return_value = False [EOL] self . send = Mock ( spec = send ) [EOL] [EOL] patcher = patch . object ( DatabaseMain , [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_database = patcher . start ( ) [EOL] self . mock_database . return_value = self . database [EOL] [EOL] async def test ( self ) : [EOL] self . database . listBannedChannels . return_value = AsyncIterator ( [ ] ) [EOL] self . assertIs ( await banned . list_banned_channels ( self . send ) , True ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] ) ) [EOL] [EOL] @ patch ( [string] , autospec = True ) async def test_one ( self , mock_messages ) : [EOL] self . database . listBannedChannels . return_value = AsyncIterator ( [ [string] ] ) [EOL] mock_messages . return_value = [string] [EOL] self . assertIs ( await banned . list_banned_channels ( self . send ) , True ) [EOL] mock_messages . assert_called_once_with ( [ [string] ] , StrContains ( [string] ) ) [EOL] self . send . assert_called_once_with ( [string] ) [EOL] [EOL] @ patch ( [string] , autospec = True ) async def test_many ( self , mock_messages ) : [EOL] self . database . listBannedChannels . return_value = AsyncIterator ( [ [string] , [string] ] ) [EOL] mock_messages . return_value = [string] [EOL] self . assertIs ( await banned . list_banned_channels ( self . send ) , True ) [EOL] mock_messages . assert_called_once_with ( [ [string] , [string] ] , StrContains ( [string] ) ) [EOL] self . send . assert_called_once_with ( [string] ) [EOL] [EOL] [EOL] class TestManageBotBannedInsertBannedChannel ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . database = MagicMock ( spec = DatabaseMain ) [EOL] self . database . __aenter__ . return_value = self . database [EOL] self . database . __aexit__ . return_value = False [EOL] self . send = Mock ( spec = send ) [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_part = patcher . start ( ) [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_config = patcher . start ( ) [EOL] self . mock_config . botnick = [string] [EOL] [EOL] patcher = patch . object ( DatabaseMain , [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_database = patcher . start ( ) [EOL] self . mock_database . return_value = self . database [EOL] [EOL] async def test ( self ) : [EOL] self . database . isChannelBannedReason . return_value = None [EOL] self . database . addBannedChannel . return_value = True [EOL] self . assertIs ( await banned . insert_banned_channel ( [string] , [string] , [string] , self . send ) , True ) [EOL] self . database . isChannelBannedReason . assert_called_once_with ( [string] ) [EOL] self . database . addBannedChannel . assert_called_once_with ( [string] , [string] , [string] ) [EOL] self . database . discardAutoJoin . assert_called_once_with ( [string] ) [EOL] self . mock_part . assert_called_once_with ( [string] ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] [EOL] async def test_banned ( self ) : [EOL] self . database . isChannelBannedReason . return_value = [string] [EOL] self . assertIs ( await banned . insert_banned_channel ( [string] , [string] , [string] , self . send ) , True ) [EOL] self . database . isChannelBannedReason . assert_called_once_with ( [string] ) [EOL] self . assertFalse ( self . database . addBannedChannel . called ) [EOL] self . assertFalse ( self . database . discardAutoJoin . called ) [EOL] self . assertFalse ( self . mock_part . called ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] , [string] ) ) [EOL] [EOL] async def test_banned_blank ( self ) : [EOL] self . database . isChannelBannedReason . return_value = [string] [EOL] self . assertIs ( await banned . insert_banned_channel ( [string] , [string] , [string] , self . send ) , True ) [EOL] self . database . isChannelBannedReason . assert_called_once_with ( [string] ) [EOL] self . assertFalse ( self . database . addBannedChannel . called ) [EOL] self . assertFalse ( self . database . discardAutoJoin . called ) [EOL] self . assertFalse ( self . mock_part . called ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] [EOL] async def test_database_error ( self ) : [EOL] self . database . isChannelBannedReason . return_value = None [EOL] self . database . addBannedChannel . return_value = False [EOL] self . assertIs ( await banned . insert_banned_channel ( [string] , [string] , [string] , self . send ) , True ) [EOL] self . database . isChannelBannedReason . assert_called_once_with ( [string] ) [EOL] self . database . addBannedChannel . assert_called_once_with ( [string] , [string] , [string] ) [EOL] self . assertFalse ( self . database . discardAutoJoin . called ) [EOL] self . assertFalse ( self . mock_part . called ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] , [string] ) ) [EOL] [EOL] async def test_bot ( self ) : [EOL] self . database . isChannelBannedReason . return_value = [string] [EOL] self . assertIs ( await banned . insert_banned_channel ( [string] , [string] , [string] , self . send ) , True ) [EOL] self . assertFalse ( self . database . isChannelBannedReason . called ) [EOL] self . assertFalse ( self . database . addBannedChannel . called ) [EOL] self . assertFalse ( self . database . discardAutoJoin . called ) [EOL] self . assertFalse ( self . mock_part . called ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] , [string] ) ) [EOL] [EOL] [EOL] class TestManageBotBannedDeleteBannedChannel ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . database = MagicMock ( spec = DatabaseMain ) [EOL] self . database . __aenter__ . return_value = self . database [EOL] self . database . __aexit__ . return_value = False [EOL] self . send = Mock ( spec = send ) [EOL] [EOL] patcher = patch . object ( DatabaseMain , [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_database = patcher . start ( ) [EOL] self . mock_database . return_value = self . database [EOL] [EOL] async def test ( self ) : [EOL] self . database . isChannelBannedReason . return_value = [string] [EOL] self . database . removeBannedChannel . return_value = True [EOL] self . assertIs ( await banned . delete_banned_channel ( [string] , [string] , [string] , self . send ) , True ) [EOL] self . database . isChannelBannedReason . assert_called_once_with ( [string] ) [EOL] self . database . removeBannedChannel . assert_called_once_with ( [string] , [string] , [string] ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] [EOL] async def test_blank ( self ) : [EOL] self . database . isChannelBannedReason . return_value = [string] [EOL] self . database . removeBannedChannel . return_value = True [EOL] self . assertIs ( await banned . delete_banned_channel ( [string] , [string] , [string] , self . send ) , True ) [EOL] self . database . isChannelBannedReason . assert_called_once_with ( [string] ) [EOL] self . database . removeBannedChannel . assert_called_once_with ( [string] , [string] , [string] ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] [EOL] async def test_not_banned ( self ) : [EOL] self . database . isChannelBannedReason . return_value = None [EOL] self . assertIs ( await banned . delete_banned_channel ( [string] , [string] , [string] , self . send ) , True ) [EOL] self . database . isChannelBannedReason . assert_called_once_with ( [string] ) [EOL] self . assertFalse ( self . database . removeBannedChannel . called ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] , [string] ) ) [EOL] [EOL] async def test_database_error ( self ) : [EOL] self . database . isChannelBannedReason . return_value = [string] [EOL] self . database . removeBannedChannel . return_value = False [EOL] self . assertIs ( await banned . delete_banned_channel ( [string] , [string] , [string] , self . send ) , True ) [EOL] self . database . isChannelBannedReason . assert_called_once_with ( [string] ) [EOL] self . database . removeBannedChannel . assert_called_once_with ( [string] , [string] , [string] ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] , [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import asynctest [EOL] [EOL] from asynctest . mock import Mock , patch [EOL] [EOL] from lib . database import DatabaseMain [EOL] from lib . data . message import Message [EOL] from tests . unittest . base_managebot import TestManageBot , send [EOL] from tests . unittest . mock_class import StrContains [EOL] [EOL] [comment] [EOL] from . . manage import manager [EOL] [EOL] [EOL] class TestManageBotManager ( TestManageBot ) : [EOL] def setUp ( self ) : [EOL] super ( ) . setUp ( ) [EOL] self . permissionSet [ [string] ] = True [EOL] self . database . isChannelBannedReason . return_value = None [EOL] [EOL] async def test_false ( self ) : [EOL] self . assertIs ( await manager . manageManager ( self . args ) , False ) [EOL] self . permissionSet [ [string] ] = False [EOL] args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await manager . manageManager ( args ) , False ) [EOL] args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await manager . manageManager ( args ) , False ) [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await manager . manageManager ( args ) , False ) [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await manager . manageManager ( args ) , False ) [EOL] self . permissionSet [ [string] ] = True [EOL] args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await manager . manageManager ( args ) , False ) [EOL] args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await manager . manageManager ( args ) , False ) [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await manager . manageManager ( args ) , False ) [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await manager . manageManager ( args ) , False ) [EOL] self . assertFalse ( self . send . called ) [EOL] [EOL] @ patch ( manager . __name__ + [string] ) async def test_add ( self , mock_add ) : [EOL] mock_add . return_value = True [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await manager . manageManager ( args ) , True ) [EOL] mock_add . assert_called_once_with ( [string] , self . data , self . send ) [EOL] [EOL] @ patch ( manager . __name__ + [string] ) async def test_insert ( self , mock_add ) : [EOL] mock_add . return_value = True [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await manager . manageManager ( args ) , True ) [EOL] mock_add . assert_called_once_with ( [string] , self . data , self . send ) [EOL] [EOL] @ patch ( manager . __name__ + [string] ) async def test_delete ( self , mock_delete ) : [EOL] mock_delete . return_value = True [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await manager . manageManager ( args ) , True ) [EOL] mock_delete . assert_called_once_with ( [string] , self . data , self . send ) [EOL] [EOL] @ patch ( manager . __name__ + [string] ) async def test_del ( self , mock_delete ) : [EOL] mock_delete . return_value = True [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await manager . manageManager ( args ) , True ) [EOL] mock_delete . assert_called_once_with ( [string] , self . data , self . send ) [EOL] [EOL] @ patch ( manager . __name__ + [string] ) async def test_remove ( self , mock_delete ) : [EOL] mock_delete . return_value = True [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await manager . manageManager ( args ) , True ) [EOL] mock_delete . assert_called_once_with ( [string] , self . data , self . send ) [EOL] [EOL] @ patch ( manager . __name__ + [string] ) async def test_rem ( self , mock_delete ) : [EOL] mock_delete . return_value = True [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await manager . manageManager ( args ) , True ) [EOL] mock_delete . assert_called_once_with ( [string] , self . data , self . send ) [EOL] [EOL] [EOL] class TestManageBotManagerInsertManager ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . database = Mock ( spec = DatabaseMain ) [EOL] self . send = Mock ( spec = send ) [EOL] [EOL] async def test ( self ) : [EOL] self . database . isBotManager . return_value = False [EOL] self . database . addBotManager . return_value = True [EOL] self . assertIs ( await manager . insert_manager ( [string] , self . database , self . send ) , True ) [EOL] self . database . isBotManager . assert_called_once_with ( [string] ) [EOL] self . database . addBotManager . assert_called_once_with ( [string] ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] [EOL] async def test_manager ( self ) : [EOL] self . database . isBotManager . return_value = True [EOL] self . assertIs ( await manager . insert_manager ( [string] , self . database , self . send ) , True ) [EOL] self . database . isBotManager . assert_called_once_with ( [string] ) [EOL] self . assertFalse ( self . database . addBotManager . called ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] , [string] ) ) [EOL] [EOL] async def test_database_error ( self ) : [EOL] self . database . isBotManager . return_value = False [EOL] self . database . addBotManager . return_value = False [EOL] self . assertIs ( await manager . insert_manager ( [string] , self . database , self . send ) , True ) [EOL] self . database . isBotManager . assert_called_once_with ( [string] ) [EOL] self . database . addBotManager . assert_called_once_with ( [string] ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] , [string] , [string] , [string] ) ) [EOL] [EOL] [EOL] class TestManageBotManagerDeleteManager ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . database = Mock ( spec = DatabaseMain ) [EOL] self . send = Mock ( spec = send ) [EOL] [EOL] async def test ( self ) : [EOL] self . database . isBotManager . return_value = True [EOL] self . database . removeBotManager . return_value = True [EOL] self . assertIs ( await manager . delete_manager ( [string] , self . database , self . send ) , True ) [EOL] self . database . isBotManager . assert_called_once_with ( [string] ) [EOL] self . database . removeBotManager . assert_called_once_with ( [string] ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] , [string] ) ) [EOL] [EOL] async def test_not_manager ( self ) : [EOL] self . database . isBotManager . return_value = False [EOL] self . assertIs ( await manager . delete_manager ( [string] , self . database , self . send ) , True ) [EOL] self . database . isBotManager . assert_called_once_with ( [string] ) [EOL] self . assertFalse ( self . database . removeBotManager . called ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] , [string] ) ) [EOL] [EOL] async def test_database_error ( self ) : [EOL] self . database . isBotManager . return_value = True [EOL] self . database . removeBotManager . return_value = False [EOL] self . assertIs ( await manager . delete_manager ( [string] , self . database , self . send ) , True ) [EOL] self . database . isBotManager . assert_called_once_with ( [string] ) [EOL] self . database . removeBotManager . assert_called_once_with ( [string] ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] , [string] , [string] ) ) [EOL]	
from asynctest . mock import patch [EOL] [EOL] from tests . unittest . base_managebot import TestManageBot [EOL] from tests . unittest . mock_class import StrContains [EOL] [EOL] [comment] [EOL] from . . manage import listchats [EOL] [EOL] [EOL] class TestManageBotListChats ( TestManageBot ) : [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) async def test_no_channels ( self , mock_globals , mock_messages ) : [EOL] mock_globals . channels = [string] [EOL] self . assertIs ( await listchats . manageListChats ( self . args ) , True ) [EOL] self . assertFalse ( mock_messages . called ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) async def test_one_channel ( self , mock_globals , mock_messages ) : [EOL] mock_globals . channels = { [string] : None } [EOL] mock_messages . return_value = [string] [EOL] self . assertIs ( await listchats . manageListChats ( self . args ) , True ) [EOL] mock_messages . assert_called_once_with ( [ [string] ] , StrContains ( [string] ) ) [EOL] self . send . assert_called_once_with ( [string] ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] , autospec = True ) async def test_many_channel ( self , mock_globals , mock_messages ) : [EOL] mock_globals . channels = { [string] : None , [string] : None , [string] : None } [EOL] mock_messages . return_value = [string] [EOL] self . assertIs ( await listchats . manageListChats ( self . args ) , True ) [EOL] mock_messages . assert_called_once_with ( [ [string] , [string] , [string] ] , StrContains ( [string] ) ) [EOL] self . send . assert_called_once_with ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import unittest [EOL] [EOL] import asynctest [EOL] [EOL] from asynctest . mock import Mock , patch [EOL] [EOL] from bot . data import Channel [EOL] from lib . cache import CacheStore [EOL] from lib . data . message import Message [EOL] from tests . unittest . mock_class import StrContains [EOL] from . . library import chat [EOL] [EOL] [EOL] def send ( messages ) : [EOL] pass [EOL] [EOL] [EOL] class TestLibraryBroadcasterEmpty ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . channel = Mock ( spec = Channel ) [EOL] self . channel . channel = [string] [EOL] self . send = Mock ( spec = send ) [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_globals = patcher . start ( ) [EOL] self . mock_globals . channels = { [string] : self . channel } [EOL] [EOL] def test ( self ) : [EOL] self . assertIs ( chat . empty ( [string] , self . send ) , True ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] , [string] ) ) [EOL] self . channel . clear . assert_called_once_with ( ) [EOL] [EOL] def test_not_existing ( self ) : [EOL] self . assertIs ( chat . empty ( [string] , self . send ) , True ) [EOL] self . send . assert_not_called ( ) [EOL] self . channel . clear . assert_not_called ( ) [EOL] [EOL] [EOL] class TestLibraryBroadcasterSetTimeOutLevel ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . data = Mock ( spec = CacheStore ) [EOL] self . send = Mock ( spec = send ) [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_config = patcher . start ( ) [EOL] self . mock_config . moderatorDefaultTimeout = [ [number] , [number] , [number] ] [EOL] [EOL] async def test_1 ( self ) : [EOL] self . assertIs ( await chat . set_timeout_level ( self . data , [string] , self . send , Message ( [string] ) ) , True ) [EOL] self . data . setChatProperty . assert_called_once_with ( [string] , [string] , [string] ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] , [string] ) ) [EOL] [EOL] async def test_1_default ( self ) : [EOL] self . assertIs ( await chat . set_timeout_level ( self . data , [string] , self . send , Message ( [string] ) ) , True ) [EOL] self . data . setChatProperty . assert_called_once_with ( [string] , [string] , None ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] , [string] ) ) [EOL] [EOL] async def test_2 ( self ) : [EOL] self . assertIs ( await chat . set_timeout_level ( self . data , [string] , self . send , Message ( [string] ) ) , True ) [EOL] self . data . setChatProperty . assert_called_once_with ( [string] , [string] , [string] ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] , [string] ) ) [EOL] [EOL] async def test_2_default ( self ) : [EOL] self . assertIs ( await chat . set_timeout_level ( self . data , [string] , self . send , Message ( [string] ) ) , True ) [EOL] self . data . setChatProperty . assert_called_once_with ( [string] , [string] , None ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] , [string] ) ) [EOL] [EOL] async def test_3 ( self ) : [EOL] self . assertIs ( await chat . set_timeout_level ( self . data , [string] , self . send , Message ( [string] ) ) , True ) [EOL] self . data . setChatProperty . assert_called_once_with ( [string] , [string] , [string] ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] , [string] ) ) [EOL] [EOL] async def test_3_default ( self ) : [EOL] self . assertIs ( await chat . set_timeout_level ( self . data , [string] , self . send , Message ( [string] ) ) , True ) [EOL] self . data . setChatProperty . assert_called_once_with ( [string] , [string] , None ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] , [string] ) ) [EOL] [EOL] async def test_0 ( self ) : [EOL] self . assertIs ( await chat . set_timeout_level ( self . data , [string] , self . send , Message ( [string] ) ) , False ) [EOL] self . data . setChatProperty . assert_not_called ( ) [EOL] self . send . assert_not_called ( ) [EOL] [EOL] async def test_4 ( self ) : [EOL] self . assertIs ( await chat . set_timeout_level ( self . data , [string] , self . send , Message ( [string] ) ) , False ) [EOL] self . data . setChatProperty . assert_not_called ( ) [EOL] self . send . assert_not_called ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from asynctest . mock import patch [EOL] [EOL] from tests . unittest . base_channel import TestChannel [EOL] from tests . unittest . mock_class import PartialMatch [EOL] from lib . data . message import Message [EOL] [EOL] [comment] [EOL] from . . library import reload as reload_library [EOL] from . . channel import reload [EOL] [EOL] [EOL] class TestChannelReload ( TestChannel ) : [EOL] @ patch ( reload_library . __name__ + [string] ) async def test_reload ( self , mock_reload ) : [EOL] self . assertIs ( await reload . commandReload ( self . args ) , False ) [EOL] self . assertFalse ( mock_reload . called ) [EOL] mock_reload . return_value = True [EOL] self . permissions . inOwnerChannel = True [EOL] self . permissionSet [ [string] ] = True [EOL] self . assertIs ( await reload . commandReload ( self . args ) , True ) [EOL] mock_reload . assert_called_once_with ( PartialMatch ( self . channel . send , priority = [number] ) ) [EOL] [EOL] @ patch ( reload_library . __name__ + [string] ) async def test_reload_commands ( self , mock_reload ) : [EOL] self . assertIs ( await reload . commandReloadCommands ( self . args ) , False ) [EOL] self . assertFalse ( mock_reload . called ) [EOL] mock_reload . return_value = True [EOL] self . permissions . inOwnerChannel = True [EOL] self . permissionSet [ [string] ] = True [EOL] self . assertIs ( await reload . commandReloadCommands ( self . args ) , True ) [EOL] mock_reload . assert_called_once_with ( PartialMatch ( self . channel . send , priority = [number] ) ) [EOL] [EOL] @ patch ( reload_library . __name__ + [string] ) async def test_reload_config ( self , mock_reload ) : [EOL] self . assertIs ( await reload . commandReloadConfig ( self . args ) , False ) [EOL] self . assertFalse ( mock_reload . called ) [EOL] mock_reload . return_value = True [EOL] self . permissions . inOwnerChannel = True [EOL] self . permissionSet [ [string] ] = True [EOL] self . assertIs ( await reload . commandReloadConfig ( self . args ) , True ) [EOL] mock_reload . assert_called_once_with ( PartialMatch ( self . channel . send , priority = [number] ) ) [EOL] [EOL] @ patch ( reload_library . __name__ + [string] ) async def test_refresh_cache ( self , mock_refresh ) : [EOL] self . assertIs ( await reload . commandRefreshCache ( self . args ) , False ) [EOL] self . assertFalse ( mock_refresh . called ) [EOL] mock_refresh . return_value = True [EOL] self . permissions . inOwnerChannel = True [EOL] self . permissionSet [ [string] ] = True [EOL] self . assertIs ( await reload . commandRefreshCache ( self . args ) , True ) [EOL] mock_refresh . assert_called_once_with ( PartialMatch ( self . channel . send , priority = [number] ) , self . data , None ) [EOL] [EOL] @ patch ( reload_library . __name__ + [string] ) async def test_refresh_cache_keys ( self , mock_refresh ) : [EOL] mock_refresh . return_value = True [EOL] self . permissions . inOwnerChannel = True [EOL] self . permissionSet [ [string] ] = True [EOL] message = Message ( [string] ) [EOL] self . args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await reload . commandRefreshCache ( self . args ) , True ) [EOL] mock_refresh . assert_called_once_with ( PartialMatch ( self . channel . send , priority = [number] ) , self . data , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import asyncio [EOL] from datetime import datetime [EOL] [EOL] import asynctest [EOL] from asynctest . mock import MagicMock , Mock , patch [EOL] [EOL] from bot . data import Channel [EOL] from lib . cache import CacheStore [EOL] from . . tasks import emotes [EOL] [EOL] [EOL] class TestTasksEmotes ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_globals = patcher . start ( ) [EOL] [EOL] self . now = datetime ( [number] , [number] , [number] ) [EOL] [EOL] self . data = MagicMock ( spec = CacheStore ) [EOL] self . data . __aenter__ . return_value = self . data [EOL] self . data . __aexit__ . return_value = False [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_cache = patcher . start ( ) [EOL] self . mock_cache . return_value = self . data [EOL] [EOL] async def test_twitch ( self ) : [EOL] self . data . twitch_get_bot_emote_set . return_value = { [number] } [EOL] await emotes . refreshTwitchGlobalEmotes ( self . now ) [EOL] self . assertTrue ( self . data . twitch_get_bot_emote_set . called ) [EOL] self . assertTrue ( self . data . twitch_load_emotes . called ) [EOL] [EOL] async def test_twitch_no_set ( self ) : [EOL] self . data . twitch_get_bot_emote_set . return_value = None [EOL] await emotes . refreshTwitchGlobalEmotes ( self . now ) [EOL] self . assertTrue ( self . data . twitch_get_bot_emote_set . called ) [EOL] self . assertFalse ( self . data . twitch_load_emotes . called ) [EOL] [EOL] async def test_twitch_multiple ( self ) : [EOL] async def wait ( * args ) : [EOL] await asyncio . sleep ( [number] ) [EOL] return { [number] } [EOL] [EOL] async def call_0 ( ) : [EOL] return await emotes . refreshTwitchGlobalEmotes ( self . now ) [EOL] [EOL] async def call_1 ( ) : [EOL] await asyncio . sleep ( [number] ) [EOL] return await emotes . refreshTwitchGlobalEmotes ( self . now ) [EOL] [EOL] self . data . twitch_get_bot_emote_set . side_effect = wait [EOL] await asyncio . gather ( call_0 ( ) , call_1 ( ) ) [EOL] self . assertEqual ( self . data . twitch_get_bot_emote_set . call_count , [number] ) [EOL] self . assertEqual ( self . data . twitch_load_emotes . call_count , [number] ) [EOL] [EOL] @ patch ( emotes . __name__ + [string] ) @ patch ( emotes . __name__ + [string] ) async def test_ffz ( self , mock_broadcaster , mock_global ) : [EOL] await emotes . refreshFrankerFaceZEmotes ( self . now ) [EOL] mock_broadcaster . assert_called_once_with ( self . now ) [EOL] mock_global . assert_called_once_with ( self . now ) [EOL] [EOL] async def test_ffz_global ( self ) : [EOL] await emotes . refreshFfzGlobalEmotes ( self . now ) [EOL] self . assertTrue ( self . data . ffz_load_global_emotes . called ) [EOL] [EOL] async def test_ffz_global_multiple ( self ) : [EOL] async def wait ( * args , ** kwargs ) : [EOL] await asyncio . sleep ( [number] ) [EOL] [EOL] async def call_0 ( ) : [EOL] return await emotes . refreshFfzGlobalEmotes ( self . now ) [EOL] [EOL] async def call_1 ( ) : [EOL] await asyncio . sleep ( [number] ) [EOL] return await emotes . refreshFfzGlobalEmotes ( self . now ) [EOL] [EOL] self . data . ffz_load_global_emotes . side_effect = wait [EOL] await asyncio . gather ( call_0 ( ) , call_1 ( ) ) [EOL] self . assertEqual ( self . data . ffz_load_global_emotes . call_count , [number] ) [EOL] [EOL] async def test_ffz_broadcaster ( self ) : [EOL] self . data . ffz_get_cached_broadcasters . return_value = { } [EOL] channel = Mock ( spec = Channel ) [EOL] channel . channel = [string] [EOL] channel . isStreaming = False [EOL] channel . sessionData = { } [EOL] self . mock_globals . channels = { [string] : channel } [EOL] await emotes . refreshFfzRandomBroadcasterEmotes ( self . now ) [EOL] self . data . ffz_load_broadcaster_emotes . assert_called_once_with ( [string] , background = True ) [EOL] [EOL] async def test_ffz_broadcaster_recent ( self ) : [EOL] self . data . ffz_get_cached_broadcasters . return_value = { [string] : [number] , } [EOL] channel = Mock ( spec = Channel ) [EOL] channel . channel = [string] [EOL] channel . isStreaming = False [EOL] channel . sessionData = { } [EOL] self . mock_globals . channels = { [string] : channel } [EOL] await emotes . refreshFfzRandomBroadcasterEmotes ( self . now ) [EOL] self . assertFalse ( self . data . ffz_load_broadcaster_emotes . called ) [EOL] [EOL] async def test_ffz_broadcaster_priority ( self ) : [EOL] self . data . ffz_get_cached_broadcasters . return_value = { } [EOL] bgtchannel = Mock ( spec = Channel ) [EOL] bgtchannel . channel = [string] [EOL] bgtchannel . isStreaming = False [EOL] bgtchannel . sessionData = { } [EOL] mgtchannel = Mock ( spec = Channel ) [EOL] mgtchannel . channel = [string] [EOL] mgtchannel . isStreaming = True [EOL] mgtchannel . sessionData = { } [EOL] self . mock_globals . channels = { [string] : bgtchannel , [string] : mgtchannel } [EOL] await emotes . refreshFfzRandomBroadcasterEmotes ( self . now ) [EOL] self . data . ffz_load_broadcaster_emotes . assert_called_once_with ( [string] , background = True ) [EOL] [EOL] @ patch ( [string] , autospec = True ) async def test_ffz_broadcaster_onlyone ( self , mock_choice ) : [EOL] self . data . ffz_get_cached_broadcasters . return_value = { } [EOL] bgtchannel = Mock ( spec = Channel ) [EOL] bgtchannel . channel = [string] [EOL] bgtchannel . isStreaming = False [EOL] bgtchannel . sessionData = { } [EOL] mgtchannel = Mock ( spec = Channel ) [EOL] mgtchannel . channel = [string] [EOL] mgtchannel . isStreaming = False [EOL] mgtchannel . sessionData = { } [EOL] self . mock_globals . channels = { [string] : bgtchannel , [string] : mgtchannel } [EOL] mock_choice . return_value = bgtchannel [EOL] await emotes . refreshFfzRandomBroadcasterEmotes ( self . now ) [EOL] self . data . ffz_load_broadcaster_emotes . assert_called_once_with ( [string] , background = True ) [EOL] [EOL] @ patch ( [string] , autospec = True ) async def test_ffz_broadcaster_empty ( self , mock_choice ) : [EOL] self . data . ffz_get_cached_broadcasters . return_value = { } [EOL] self . mock_globals . channels = { } [EOL] await emotes . refreshFfzRandomBroadcasterEmotes ( self . now ) [EOL] self . assertFalse ( mock_choice . called ) [EOL] self . assertFalse ( self . data . ffz_load_broadcaster_emotes . called ) [EOL] [EOL] @ patch ( emotes . __name__ + [string] ) @ patch ( emotes . __name__ + [string] ) async def test_bttv ( self , mock_broadcaster , mock_global ) : [EOL] await emotes . refreshBetterTwitchTvEmotes ( self . now ) [EOL] mock_broadcaster . assert_called_once_with ( self . now ) [EOL] mock_global . assert_called_once_with ( self . now ) [EOL] [EOL] async def test_bttv_global ( self ) : [EOL] await emotes . refreshBttvGlobalEmotes ( self . now ) [EOL] self . assertTrue ( self . data . bttv_load_global_emotes . called ) [EOL] [EOL] async def test_bttv_global_multiple ( self ) : [EOL] async def wait ( * args , ** kwargs ) : [EOL] await asyncio . sleep ( [number] ) [EOL] [EOL] async def call_0 ( ) : [EOL] return await emotes . refreshBttvGlobalEmotes ( self . now ) [EOL] [EOL] async def call_1 ( ) : [EOL] await asyncio . sleep ( [number] ) [EOL] return await emotes . refreshBttvGlobalEmotes ( self . now ) [EOL] [EOL] self . data . bttv_load_global_emotes . side_effect = wait [EOL] await asyncio . gather ( call_0 ( ) , call_1 ( ) ) [EOL] self . assertEqual ( self . data . bttv_load_global_emotes . call_count , [number] ) [EOL] [EOL] async def test_bttv_broadcaster ( self ) : [EOL] self . data . bttv_get_cached_broadcasters . return_value = { } [EOL] channel = Mock ( spec = Channel ) [EOL] channel . channel = [string] [EOL] channel . isStreaming = False [EOL] channel . sessionData = { } [EOL] self . mock_globals . channels = { [string] : channel } [EOL] await emotes . refreshBttvRandomBroadcasterEmotes ( self . now ) [EOL] self . data . bttv_load_broadcaster_emotes . assert_called_once_with ( [string] , background = True ) [EOL] [EOL] async def test_bttv_broadcaster_recent ( self ) : [EOL] self . data . bttv_get_cached_broadcasters . return_value = { [string] : [number] , } [EOL] channel = Mock ( spec = Channel ) [EOL] channel . channel = [string] [EOL] channel . isStreaming = False [EOL] channel . sessionData = { } [EOL] self . mock_globals . channels = { [string] : channel } [EOL] await emotes . refreshBttvRandomBroadcasterEmotes ( self . now ) [EOL] self . assertFalse ( self . data . bttv_load_broadcaster_emotes . called ) [EOL] [EOL] async def test_bttv_broadcaster_priority ( self ) : [EOL] self . data . bttv_get_cached_broadcasters . return_value = { } [EOL] bgtchannel = Mock ( spec = Channel ) [EOL] bgtchannel . channel = [string] [EOL] bgtchannel . isStreaming = False [EOL] bgtchannel . sessionData = { } [EOL] mgtchannel = Mock ( spec = Channel ) [EOL] mgtchannel . channel = [string] [EOL] mgtchannel . isStreaming = True [EOL] mgtchannel . sessionData = { } [EOL] self . mock_globals . channels = { [string] : bgtchannel , [string] : mgtchannel } [EOL] await emotes . refreshBttvRandomBroadcasterEmotes ( self . now ) [EOL] self . data . bttv_load_broadcaster_emotes . assert_called_once_with ( [string] , background = True ) [EOL] [EOL] @ patch ( [string] , autospec = True ) async def test_bttv_broadcaster_onlyone ( self , mock_choice ) : [EOL] self . data . bttv_get_cached_broadcasters . return_value = { } [EOL] bgtchannel = Mock ( spec = Channel ) [EOL] bgtchannel . channel = [string] [EOL] bgtchannel . isStreaming = False [EOL] bgtchannel . sessionData = { } [EOL] mgtchannel = Mock ( spec = Channel ) [EOL] mgtchannel . channel = [string] [EOL] mgtchannel . isStreaming = False [EOL] mgtchannel . sessionData = { } [EOL] self . mock_globals . channels = { [string] : bgtchannel , [string] : mgtchannel } [EOL] mock_choice . return_value = bgtchannel [EOL] await emotes . refreshBttvRandomBroadcasterEmotes ( self . now ) [EOL] self . data . bttv_load_broadcaster_emotes . assert_called_once_with ( [string] , background = True ) [EOL] [EOL] @ patch ( [string] , autospec = True ) async def test_bttv_broadcaster_empty ( self , mock_choice ) : [EOL] self . data . bttv_get_cached_broadcasters . return_value = { } [EOL] self . mock_globals . channels = { } [EOL] await emotes . refreshBttvRandomBroadcasterEmotes ( self . now ) [EOL] self . assertFalse ( mock_choice . called ) [EOL] self . assertFalse ( self . data . bttv_load_broadcaster_emotes . called ) [EOL]	
import asyncio [EOL] from datetime import datetime , timedelta [EOL] [EOL] import asynctest [EOL] from asynctest . mock import MagicMock , Mock , PropertyMock , call , patch [EOL] [EOL] from bot . data import Channel [EOL] from lib . cache import CacheStore [EOL] from lib . api . twitch import TwitchCommunity , TwitchStatus [EOL] from . . tasks import twitch [EOL] [EOL] [EOL] class TestTasksTwitchBase ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . now = datetime ( [number] , [number] , [number] ) [EOL] [EOL] self . data = MagicMock ( spec = CacheStore ) [EOL] self . data . __aenter__ . return_value = self . data [EOL] self . data . __aexit__ . return_value = True [EOL] [EOL] self . channel = Mock ( spec = Channel ) [EOL] self . channel . channel = [string] [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_globals = patcher . start ( ) [EOL] self . mock_globals . channels = { [string] : self . channel } [EOL] self . mock_globals . globalSessionData = { } [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_cache = patcher . start ( ) [EOL] self . mock_cache . return_value = self . data [EOL] [EOL] [EOL] class TestTasksTwitchIds ( TestTasksTwitchBase ) : [EOL] async def test ( self ) : [EOL] await twitch . checkTwitchIds ( self . now ) [EOL] self . data . twitch_load_ids . assert_called_once_with ( [ [string] ] ) [EOL] [EOL] [EOL] class TestTasksTwitchStreams ( TestTasksTwitchBase ) : [EOL] def setUp ( self ) : [EOL] super ( ) . setUp ( ) [EOL] [EOL] self . cache_property = PropertyMock ( return_value = self . now ) [EOL] type ( self . channel ) . twitchCache = self . cache_property [EOL] [EOL] self . streaming_property = PropertyMock ( return_value = None ) [EOL] type ( self . channel ) . streamingSince = self . streaming_property [EOL] [EOL] self . status_property = PropertyMock ( return_value = None ) [EOL] type ( self . channel ) . twitchStatus = self . status_property [EOL] [EOL] self . game_property = PropertyMock ( return_value = None ) [EOL] type ( self . channel ) . twitchGame = self . game_property [EOL] [EOL] self . channel . sessionData = { } [EOL] [EOL] @ patch ( [string] ) async def test_streams_empty ( self , mock_active ) : [EOL] self . mock_globals . channels = { } [EOL] await twitch . checkStreamsAndChannel ( self . now ) [EOL] self . assertFalse ( mock_active . called ) [EOL] [EOL] @ patch ( [string] ) async def test_streams_none ( self , mock_active ) : [EOL] mock_active . return_value = None [EOL] await twitch . checkStreamsAndChannel ( self . now ) [EOL] self . assertTrue ( mock_active . called ) [EOL] self . assertFalse ( self . cache_property . called ) [EOL] self . assertFalse ( self . streaming_property . called ) [EOL] self . assertFalse ( self . status_property . called ) [EOL] self . assertFalse ( self . game_property . called ) [EOL] [EOL] @ patch ( [string] ) async def test_streams ( self , mock_active ) : [EOL] streamed = datetime ( [number] , [number] , [number] ) [EOL] mock_active . return_value = { [string] : TwitchStatus ( streamed , [string] , [string] , [ ] ) } [EOL] await twitch . checkStreamsAndChannel ( self . now ) [EOL] self . assertTrue ( mock_active . called ) [EOL] self . cache_property . assert_called_once_with ( self . now ) [EOL] self . streaming_property . assert_called_once_with ( streamed ) [EOL] self . status_property . assert_called_once_with ( [string] ) [EOL] self . game_property . assert_called_once_with ( [string] ) [EOL] [EOL] @ patch ( [string] ) async def test_streams_offline ( self , mock_active ) : [EOL] mock_active . return_value = { } [EOL] await twitch . checkStreamsAndChannel ( self . now ) [EOL] self . assertTrue ( mock_active . called ) [EOL] self . assertFalse ( self . cache_property . called ) [EOL] self . streaming_property . assert_called_once_with ( None ) [EOL] self . assertFalse ( self . status_property . called ) [EOL] self . assertFalse ( self . game_property . called ) [EOL] [EOL] @ patch ( [string] ) @ patch ( [string] ) async def test_offline_empty ( self , mock_channel , mock_community ) : [EOL] self . mock_globals . channels = { } [EOL] await twitch . checkOfflineChannels ( self . now ) [EOL] self . assertFalse ( mock_channel . called ) [EOL] self . assertFalse ( self . cache_property . called ) [EOL] self . assertFalse ( self . streaming_property . called ) [EOL] self . assertFalse ( self . status_property . called ) [EOL] self . assertFalse ( self . game_property . called ) [EOL] self . assertFalse ( mock_community . called ) [EOL] self . assertFalse ( self . data . twitch_save_community . called ) [EOL] [EOL] @ patch ( [string] ) @ patch ( [string] ) async def test_offline_streaming ( self , mock_channel , mock_community ) : [EOL] self . channel . isStreaming = True [EOL] self . cache_property . return_value = self . now - timedelta ( hours = [number] ) [EOL] await twitch . checkOfflineChannels ( self . now ) [EOL] self . assertFalse ( mock_channel . called ) [EOL] self . assertFalse ( self . cache_property . called ) [EOL] self . assertFalse ( self . streaming_property . called ) [EOL] self . assertFalse ( self . status_property . called ) [EOL] self . assertFalse ( self . game_property . called ) [EOL] self . assertFalse ( mock_community . called ) [EOL] self . assertFalse ( self . data . twitch_save_community . called ) [EOL] [EOL] @ patch ( [string] ) @ patch ( [string] ) async def test_offline_recent ( self , mock_channel , mock_community ) : [EOL] mock_community . return_value = None [EOL] self . channel . isStreaming = False [EOL] self . cache_property . return_value = self . now [EOL] await twitch . checkOfflineChannels ( self . now ) [EOL] self . assertFalse ( mock_channel . called ) [EOL] self . cache_property . assert_called_once_with ( ) [EOL] self . assertFalse ( self . streaming_property . called ) [EOL] self . assertFalse ( self . status_property . called ) [EOL] self . assertFalse ( self . game_property . called ) [EOL] self . assertFalse ( mock_community . called ) [EOL] self . assertFalse ( self . data . twitch_save_community . called ) [EOL] [EOL] @ patch ( [string] ) @ patch ( [string] ) async def test_offline_none ( self , mock_channel , mock_community ) : [EOL] mock_community . return_value = None [EOL] mock_channel . return_value = None [EOL] self . channel . isStreaming = False [EOL] self . cache_property . return_value = self . now - timedelta ( hours = [number] ) [EOL] await twitch . checkOfflineChannels ( self . now ) [EOL] mock_channel . assert_called_once_with ( [string] ) [EOL] self . cache_property . assert_has_calls ( [ call ( ) , call ( self . now ) , call ( self . now - timedelta ( seconds = [number] ) ) ] ) [EOL] self . assertFalse ( self . streaming_property . called ) [EOL] self . assertFalse ( self . status_property . called ) [EOL] self . assertFalse ( self . game_property . called ) [EOL] self . assertFalse ( mock_community . called ) [EOL] self . assertFalse ( self . data . twitch_save_community . called ) [EOL] [EOL] @ patch ( [string] ) @ patch ( [string] ) async def test_offline ( self , mock_channel , mock_community ) : [EOL] mock_community . return_value = None [EOL] mock_channel . return_value = TwitchStatus ( None , [string] , [string] , None ) [EOL] self . channel . isStreaming = False [EOL] self . cache_property . return_value = self . now - timedelta ( hours = [number] ) [EOL] await twitch . checkOfflineChannels ( self . now ) [EOL] mock_channel . assert_called_once_with ( [string] ) [EOL] self . cache_property . assert_has_calls ( [ call ( ) , call ( self . now ) ] ) [EOL] self . streaming_property . assert_called_once_with ( None ) [EOL] self . status_property . assert_called_once_with ( [string] ) [EOL] self . game_property . assert_called_once_with ( [string] ) [EOL] mock_community . assert_called_once_with ( [string] ) [EOL] self . assertFalse ( self . data . twitch_save_community . called ) [EOL] [EOL] @ patch ( [string] ) @ patch ( [string] ) async def test_offline_multiple ( self , mock_channel , mock_community ) : [EOL] async def wait ( * args ) : [EOL] await asyncio . sleep ( [number] ) [EOL] return TwitchStatus ( None , [string] , [string] , None ) [EOL] [EOL] async def call_0 ( ) : [EOL] await twitch . checkOfflineChannels ( self . now ) [EOL] [EOL] async def call_1 ( ) : [EOL] await asyncio . sleep ( [number] ) [EOL] await twitch . checkOfflineChannels ( self . now ) [EOL] [EOL] mock_community . return_value = None [EOL] mock_channel . side_effect = wait [EOL] self . channel . isStreaming = False [EOL] self . cache_property . return_value = self . now - timedelta ( hours = [number] ) [EOL] await asyncio . gather ( call_0 ( ) , call_1 ( ) ) [EOL] mock_channel . assert_called_once_with ( [string] ) [EOL] self . cache_property . assert_has_calls ( [ call ( ) , call ( self . now ) ] ) [EOL] self . streaming_property . assert_called_once_with ( None ) [EOL] self . status_property . assert_called_once_with ( [string] ) [EOL] self . game_property . assert_called_once_with ( [string] ) [EOL] mock_community . assert_called_once_with ( [string] ) [EOL] self . assertFalse ( self . data . twitch_save_community . called ) [EOL] [EOL] @ patch ( [string] ) @ patch ( [string] ) async def test_offline_community_empty ( self , mock_channel , mock_community ) : [EOL] mock_community . return_value = [ ] [EOL] mock_channel . return_value = TwitchStatus ( None , [string] , [string] , None ) [EOL] self . channel . isStreaming = False [EOL] self . cache_property . return_value = self . now - timedelta ( hours = [number] ) [EOL] await twitch . checkOfflineChannels ( self . now ) [EOL] mock_channel . assert_called_once_with ( [string] ) [EOL] self . cache_property . assert_has_calls ( [ call ( ) , call ( self . now ) ] ) [EOL] self . streaming_property . assert_called_once_with ( None ) [EOL] self . status_property . assert_called_once_with ( [string] ) [EOL] self . game_property . assert_called_once_with ( [string] ) [EOL] mock_community . assert_called_once_with ( [string] ) [EOL] self . assertFalse ( self . data . twitch_save_community . called ) [EOL] [EOL] @ patch ( [string] ) @ patch ( [string] ) async def test_offline_community ( self , mock_channel , mock_community ) : [EOL] mock_community . return_value = [ TwitchCommunity ( [string] , [string] ) ] [EOL] mock_channel . return_value = TwitchStatus ( None , [string] , [string] , None ) [EOL] self . channel . isStreaming = False [EOL] self . cache_property . return_value = self . now - timedelta ( hours = [number] ) [EOL] await twitch . checkOfflineChannels ( self . now ) [EOL] mock_channel . assert_called_once_with ( [string] ) [EOL] self . cache_property . assert_has_calls ( [ call ( ) , call ( self . now ) ] ) [EOL] self . streaming_property . assert_called_once_with ( None ) [EOL] self . status_property . assert_called_once_with ( [string] ) [EOL] self . game_property . assert_called_once_with ( [string] ) [EOL] mock_community . assert_called_once_with ( [string] ) [EOL] self . data . twitch_save_community . assert_called_once_with ( [string] , [string] ) [EOL]	
import math [EOL] import unittest [EOL] [EOL] import asynctest [EOL] [EOL] from asynctest . mock import MagicMock , Mock , patch [EOL] [EOL] from bot . data import Channel [EOL] from lib . database import DatabaseMain [EOL] from tests . unittest . mock_class import StrContains [EOL] from . . library import channel [EOL] [EOL] [EOL] def send ( messages ) : [EOL] pass [EOL] [EOL] [EOL] class TestLibraryChannelJoin ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . database = MagicMock ( spec = DatabaseMain ) [EOL] self . database . __aenter__ . return_value = self . database [EOL] self . database . __aexit__ . return_value = False [EOL] self . send = Mock ( spec = send ) [EOL] [EOL] patcher = patch . object ( DatabaseMain , [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_database = patcher . start ( ) [EOL] self . mock_database . return_value = self . database [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_join = patcher . start ( ) [EOL] [EOL] async def test ( self ) : [EOL] self . database . isChannelBannedReason . return_value = None [EOL] self . database . getAutoJoinsPriority . return_value = math . inf [EOL] self . mock_join . return_value = True [EOL] self . assertIs ( await channel . join ( [string] , self . send ) , True ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] self . database . isChannelBannedReason . assert_called_once_with ( [string] ) [EOL] self . database . getAutoJoinsPriority . assert_called_once_with ( [string] ) [EOL] self . mock_join . assert_called_with ( [string] , math . inf ) [EOL] [EOL] async def test_auto_join ( self ) : [EOL] self . database . isChannelBannedReason . return_value = None [EOL] self . database . getAutoJoinsPriority . return_value = [number] [EOL] self . mock_join . return_value = True [EOL] self . assertIs ( await channel . join ( [string] , self . send ) , True ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] self . database . isChannelBannedReason . assert_called_once_with ( [string] ) [EOL] self . database . getAutoJoinsPriority . assert_called_once_with ( [string] ) [EOL] self . mock_join . assert_called_with ( [string] , [number] ) [EOL] [EOL] async def test_already_joined ( self ) : [EOL] self . database . isChannelBannedReason . return_value = None [EOL] self . database . getAutoJoinsPriority . return_value = math . inf [EOL] self . mock_join . return_value = False [EOL] self . assertIs ( await channel . join ( [string] , self . send ) , True ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] , [string] ) ) [EOL] self . database . isChannelBannedReason . assert_called_once_with ( [string] ) [EOL] self . database . getAutoJoinsPriority . assert_called_once_with ( [string] ) [EOL] self . mock_join . assert_called_with ( [string] , math . inf ) [EOL] [EOL] [EOL] class TestLibraryChannelPart ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . send = Mock ( spec = send ) [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_config = patcher . start ( ) [EOL] self . mock_config . botnick = [string] [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_part = patcher . start ( ) [EOL] [EOL] def test ( self ) : [EOL] self . assertIs ( channel . part ( [string] , self . send ) , True ) [EOL] self . send . assert_called_with ( StrContains ( [string] , [string] ) ) [EOL] self . mock_part . assert_called_with ( [string] ) [EOL] [EOL] def test_bot_channel ( self ) : [EOL] self . assertIs ( channel . part ( [string] , self . send ) , False ) [EOL] self . send . assert_not_called ( ) [EOL] self . assertFalse ( self . mock_part . called ) [EOL] [EOL] [EOL] class TestLibraryChannelSay ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . channel = Mock ( spec = Channel ) [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_globals = patcher . start ( ) [EOL] self . mock_globals . channels = { [string] : self . channel } [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_record = patcher . start ( ) [EOL] [EOL] async def test ( self ) : [EOL] self . assertIs ( await channel . say ( [string] , [string] , [string] ) , True ) [EOL] self . mock_record . assert_called_once_with ( self . channel , [string] , [string] , None , [string] ) [EOL] self . channel . send . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_not_existing ( self ) : [EOL] self . assertIs ( await channel . say ( [string] , [string] , [string] ) , False ) [EOL] self . assertFalse ( self . mock_record . called ) [EOL] self . channel . send . assert_not_called ( ) [EOL] [EOL] [EOL] class TestLibraryChannelEmptyAll ( unittest . TestCase ) : [EOL] @ patch ( [string] , autospec = True ) def test ( self , mock_clear ) : [EOL] mock_send = Mock ( spec = send ) [EOL] self . assertIs ( channel . empty_all ( mock_send ) , True ) [EOL] mock_clear . assert_called_once_with ( ) [EOL] mock_send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] [EOL] [EOL] class TestLibraryChannelEmpty ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . send = Mock ( spec = send ) [EOL] self . channel = Mock ( spec = Channel ) [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_globals = patcher . start ( ) [EOL] self . mock_globals . channels = { [string] : self . channel } [EOL] [EOL] def test ( self ) : [EOL] self . assertIs ( channel . empty ( [string] , self . send ) , True ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] , [string] ) ) [EOL] self . channel . clear . assert_called_once_with ( ) [EOL] [EOL] def test_non_existing ( self ) : [EOL] self . assertIs ( channel . empty ( [string] , self . send ) , False ) [EOL] self . assertFalse ( self . send . called ) [EOL] self . channel . clear . assert_not_called ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import asynctest [EOL] [EOL] from asynctest . mock import CoroutineMock , Mock , patch [EOL] [EOL] from lib . cache import CacheStore [EOL] from lib . data import ManageBotArgs [EOL] from lib . data . message import Message [EOL] from lib . data . permissions import ChatPermissionSet [EOL] from lib . database import DatabaseMain [EOL] from tests . unittest . mock_class import TypeMatch [EOL] from . . library import managebot [EOL] [EOL] [EOL] def send ( messages ) : [EOL] pass [EOL] [EOL] [EOL] def method ( args ) : [EOL] return True [EOL] [EOL] [EOL] class TestLibraryManageBot ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . data = Mock ( spec = CacheStore ) [EOL] self . database = Mock ( spec = DatabaseMain ) [EOL] self . permissions = Mock ( spec = ChatPermissionSet ) [EOL] self . send = Mock ( spec = send ) [EOL] self . method = CoroutineMock ( spec = method , return_value = True ) [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_manage = patcher . start ( ) [EOL] self . mock_manage . methods . return_value = { [string] : self . method , [string] : None , } [EOL] [EOL] async def test ( self ) : [EOL] message = Message ( [string] ) [EOL] self . assertIs ( await managebot . manage_bot ( self . data , self . permissions , self . send , [string] , message ) , True ) [EOL] self . assertFalse ( self . send . called ) [EOL] self . method . assert_called_once_with ( TypeMatch ( ManageBotArgs ) ) [EOL] [EOL] async def test_not_existing ( self ) : [EOL] message = Message ( [string] ) [EOL] self . assertIs ( await managebot . manage_bot ( self . data , self . permissions , self . send , [string] , message ) , False ) [EOL] self . assertFalse ( self . send . called ) [EOL] self . assertFalse ( self . method . called ) [EOL] [EOL] async def test_none ( self ) : [EOL] message = Message ( [string] ) [EOL] self . assertIs ( await managebot . manage_bot ( self . data , self . permissions , self . send , [string] , message ) , False ) [EOL] self . assertFalse ( self . send . called ) [EOL] self . assertFalse ( self . method . called ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from asynctest . mock import patch [EOL] [EOL] from tests . unittest . base_channel import TestChannel [EOL] from tests . unittest . mock_class import StrContains [EOL] from lib . data . message import Message [EOL] [EOL] [comment] [EOL] from . . library import chat as library_chat [EOL] from . . channel import chat [EOL] [EOL] [EOL] class TestChannelBroadcaster ( TestChannel ) : [EOL] async def test_permit ( self ) : [EOL] self . channel . channel = [string] [EOL] self . data . isPermittedUser . return_value = False [EOL] self . assertIs ( await chat . commandPermit ( self . args ) , False ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] self . assertFalse ( self . data . isPermittedUser . called ) [EOL] self . assertFalse ( self . data . addPermittedUser . called ) [EOL] self . assertFalse ( self . data . removePermittedUser . called ) [EOL] [EOL] async def test_permit_add ( self ) : [EOL] self . channel . channel = [string] [EOL] self . data . isPermittedUser . return_value = False [EOL] self . data . addPermittedUser . return_value = True [EOL] self . permissionSet [ [string] ] = True [EOL] args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await chat . commandPermit ( args ) , True ) [EOL] self . assertTrue ( self . data . isPermittedUser . called ) [EOL] self . assertTrue ( self . data . addPermittedUser . called ) [EOL] self . assertFalse ( self . data . removePermittedUser . called ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( [string] , [string] , [string] , [string] ) ) [EOL] [EOL] async def test_permit_remove ( self ) : [EOL] self . channel . channel = [string] [EOL] self . data . isPermittedUser . return_value = True [EOL] self . data . removePermittedUser . return_value = True [EOL] self . permissionSet [ [string] ] = True [EOL] args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await chat . commandPermit ( args ) , True ) [EOL] self . assertTrue ( self . data . isPermittedUser . called ) [EOL] self . assertTrue ( self . data . removePermittedUser . called ) [EOL] self . assertFalse ( self . data . addPermittedUser . called ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( [string] , [string] , [string] , [string] ) ) [EOL] [EOL] @ patch ( library_chat . __name__ + [string] ) async def test_empty ( self , mock_empty ) : [EOL] self . assertIs ( await chat . commandEmpty ( self . args ) , False ) [EOL] self . assertFalse ( mock_empty . called ) [EOL] mock_empty . return_value = True [EOL] self . permissionSet [ [string] ] = True [EOL] self . assertIs ( await chat . commandEmpty ( self . args ) , True ) [EOL] mock_empty . assert_called_once_with ( [string] , self . channel . send ) [EOL] [EOL] @ patch ( library_chat . __name__ + [string] ) async def test_set_timeout_level ( self , mock_set_timeout ) : [EOL] self . assertIs ( await chat . commandSetTimeoutLevel ( self . args ) , False ) [EOL] self . assertFalse ( mock_set_timeout . called ) [EOL] mock_set_timeout . return_value = True [EOL] self . permissionSet [ [string] ] = True [EOL] self . assertIs ( await chat . commandSetTimeoutLevel ( self . args ) , True ) [EOL] mock_set_timeout . assert_called_once_with ( self . data , [string] , self . channel . send , self . args . message ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
	0
from typing import Any [EOL] import typing [EOL] import lib [EOL] from datetime import timedelta [EOL] [EOL] from asynctest . mock import patch [EOL] [EOL] from tests . unittest . base_channel import TestChannel [EOL] from lib . data . message import Message [EOL] from tests . unittest . mock_class import StrContains [EOL] [EOL] [comment] [EOL] from . . import channel [EOL] [EOL] [EOL] class TestTwitchChannel ( TestChannel ) : [EOL] @ patch ( [string] ) async def test_uptime ( self , mock_server_time ) : [EOL] self . channel . isStreaming = False [EOL] self . assertIs ( await channel . commandUptime ( self . args ) , True ) [EOL] self . assertFalse ( mock_server_time . called ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( [string] , [string] , [string] ) ) [EOL] [EOL] @ patch ( [string] ) async def test_uptime_isstreaming ( self , mock_server_time ) : [EOL] self . channel . isStreaming = True [EOL] self . channel . streamingSince = self . now [EOL] mock_server_time . return_value = self . now [EOL] self . assertIs ( await channel . commandUptime ( self . args ) , True ) [EOL] mock_server_time . assert_called_once_with ( ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( [string] , str ( timedelta ( ) ) ) ) [EOL] [EOL] @ patch ( [string] ) async def test_uptime_server_error ( self , mock_server_time ) : [EOL] self . channel . isStreaming = True [EOL] mock_server_time . return_value = None [EOL] self . assertIs ( await channel . commandUptime ( self . args ) , True ) [EOL] mock_server_time . assert_called_once_with ( ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] [EOL] @ patch ( [string] ) @ patch ( [string] ) async def test_status_false ( self , mock_update , mock_token ) : [EOL] self . assertIs ( await channel . commandStatus ( self . args ) , False ) [EOL] self . permissionSet [ [string] ] = True [EOL] self . features . append ( [string] ) [EOL] self . assertIs ( await channel . commandStatus ( self . args ) , False ) [EOL] self . assertFalse ( mock_token . called ) [EOL] self . assertFalse ( mock_update . called ) [EOL] self . permissionSet [ [string] ] = True [EOL] mock_token . return_value = None [EOL] self . features . clear ( ) [EOL] self . assertIs ( await channel . commandStatus ( self . args ) , False ) [EOL] mock_token . assert_called_once_with ( [string] ) [EOL] self . assertFalse ( mock_update . called ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] @ patch ( [string] ) @ patch ( [string] ) async def test_status ( self , mock_update , mock_token ) : [EOL] self . permissionSet [ [string] ] = True [EOL] mock_token . return_value = [string] [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await channel . commandStatus ( args ) , True ) [EOL] mock_token . assert_called_once_with ( [string] ) [EOL] mock_update . assert_called_once_with ( [string] , status = [string] ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] [EOL] @ patch ( [string] ) @ patch ( [string] ) async def test_status_unset ( self , mock_update , mock_token ) : [EOL] mock_update . return_value = True [EOL] self . permissionSet [ [string] ] = True [EOL] mock_token . return_value = [string] [EOL] args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await channel . commandStatus ( args ) , True ) [EOL] mock_token . assert_called_once_with ( [string] ) [EOL] mock_update . assert_called_once_with ( [string] , status = [string] ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] [EOL] @ patch ( [string] ) @ patch ( [string] ) async def test_status_fail ( self , mock_update , mock_token ) : [EOL] mock_update . return_value = False [EOL] self . permissionSet [ [string] ] = True [EOL] mock_token . return_value = [string] [EOL] args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await channel . commandStatus ( args ) , True ) [EOL] mock_token . assert_called_once_with ( [string] ) [EOL] mock_update . assert_called_once_with ( [string] , status = [string] ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] [EOL] @ patch ( [string] ) @ patch ( [string] ) async def test_game_false ( self , mock_update , mock_token ) : [EOL] self . assertIs ( await channel . commandGame ( self . args ) , False ) [EOL] self . permissionSet [ [string] ] = True [EOL] self . features . append ( [string] ) [EOL] self . assertIs ( await channel . commandGame ( self . args ) , False ) [EOL] self . assertFalse ( mock_token . called ) [EOL] self . assertFalse ( mock_update . called ) [EOL] self . permissionSet [ [string] ] = True [EOL] mock_token . return_value = None [EOL] self . features . clear ( ) [EOL] self . assertIs ( await channel . commandGame ( self . args ) , False ) [EOL] mock_token . assert_called_once_with ( [string] ) [EOL] self . assertFalse ( mock_update . called ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] @ patch ( [string] ) @ patch ( [string] ) async def test_game ( self , mock_update , mock_token ) : [EOL] mock_update . return_value = True [EOL] self . permissionSet [ [string] ] = True [EOL] self . data . getFullGameTitle . return_value = None [EOL] mock_token . return_value = [string] [EOL] args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await channel . commandGame ( args ) , True ) [EOL] mock_token . assert_called_once_with ( [string] ) [EOL] mock_update . assert_called_once_with ( [string] , game = [string] ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] [EOL] @ patch ( [string] ) @ patch ( [string] ) async def test_game_abbreviation ( self , mock_update , mock_token ) : [EOL] mock_update . return_value = True [EOL] self . permissionSet [ [string] ] = True [EOL] self . data . getFullGameTitle . return_value = [string] [EOL] mock_token . return_value = [string] [EOL] args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await channel . commandGame ( args ) , True ) [EOL] mock_token . assert_called_once_with ( [string] ) [EOL] mock_update . assert_called_once_with ( [string] , game = [string] ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] [EOL] @ patch ( [string] ) @ patch ( [string] ) async def test_game_pokemon ( self , mock_update , mock_token ) : [EOL] mock_update . return_value = True [EOL] self . features . append ( [string] ) [EOL] self . permissionSet [ [string] ] = True [EOL] self . data . getFullGameTitle . return_value = None [EOL] mock_token . return_value = [string] [EOL] args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await channel . commandGame ( args ) , True ) [EOL] mock_token . assert_called_once_with ( [string] ) [EOL] mock_update . assert_called_once_with ( [string] , game = [string] ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] [EOL] @ patch ( [string] ) @ patch ( [string] ) async def test_game_fail ( self , mock_update , mock_token ) : [EOL] mock_update . return_value = False [EOL] self . features . append ( [string] ) [EOL] self . permissionSet [ [string] ] = True [EOL] self . data . getFullGameTitle . return_value = None [EOL] mock_token . return_value = [string] [EOL] args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await channel . commandGame ( args ) , True ) [EOL] mock_token . assert_called_once_with ( [string] ) [EOL] mock_update . assert_called_once_with ( [string] , game = [string] ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] [EOL] @ patch ( [string] ) @ patch ( [string] ) async def test_raw_game_false ( self , mock_update , mock_token ) : [EOL] self . assertIs ( await channel . commandRawGame ( self . args ) , False ) [EOL] self . permissionSet [ [string] ] = True [EOL] self . features . append ( [string] ) [EOL] self . assertIs ( await channel . commandRawGame ( self . args ) , False ) [EOL] self . assertFalse ( mock_token . called ) [EOL] self . assertFalse ( mock_update . called ) [EOL] self . permissionSet [ [string] ] = True [EOL] mock_token . return_value = None [EOL] self . features . clear ( ) [EOL] self . assertIs ( await channel . commandRawGame ( self . args ) , False ) [EOL] mock_token . assert_called_once_with ( [string] ) [EOL] self . assertFalse ( mock_update . called ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] @ patch ( [string] ) @ patch ( [string] ) async def test_raw_game ( self , mock_update , mock_token ) : [EOL] mock_update . return_value = True [EOL] self . permissionSet [ [string] ] = True [EOL] mock_token . return_value = [string] [EOL] args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await channel . commandRawGame ( args ) , True ) [EOL] mock_token . assert_called_once_with ( [string] ) [EOL] mock_update . assert_called_once_with ( [string] , game = [string] ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] [EOL] @ patch ( [string] ) @ patch ( [string] ) async def test_raw_game_fail ( self , mock_update , mock_token ) : [EOL] mock_update . return_value = False [EOL] self . permissionSet [ [string] ] = True [EOL] mock_token . return_value = [string] [EOL] args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await channel . commandRawGame ( args ) , True ) [EOL] mock_token . assert_called_once_with ( [string] ) [EOL] mock_update . assert_called_once_with ( [string] , game = [string] ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] [EOL] @ patch ( [string] , autospec = True ) @ patch ( [string] ) @ patch ( [string] ) async def test_community_false ( self , mock_update , mock_token , mock_globals ) : [EOL] mock_globals . twitchCommunity = { [string] : [string] } [EOL] mock_globals . twitchCommunityId = { [string] : [string] } [EOL] self . assertIs ( await channel . commandCommunity ( self . args ) , False ) [EOL] self . permissionSet [ [string] ] = True [EOL] self . features . append ( [string] ) [EOL] self . assertIs ( await channel . commandCommunity ( self . args ) , False ) [EOL] self . assertFalse ( mock_token . called ) [EOL] self . assertFalse ( mock_update . called ) [EOL] self . permissionSet [ [string] ] = True [EOL] mock_token . return_value = None [EOL] self . features . clear ( ) [EOL] self . assertIs ( await channel . commandCommunity ( self . args ) , False ) [EOL] mock_token . assert_called_once_with ( [string] ) [EOL] self . assertFalse ( mock_update . called ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] @ patch ( [string] ) @ patch ( [string] ) async def test_community ( self , mock_update , mock_token ) : [EOL] self . data . twitch_get_community_name . return_value = [string] [EOL] mock_update . return_value = [ [string] ] [EOL] self . permissionSet [ [string] ] = True [EOL] mock_token . return_value = [string] [EOL] args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await channel . commandCommunity ( args ) , True ) [EOL] mock_token . assert_called_once_with ( [string] ) [EOL] mock_update . assert_called_once_with ( [string] , [ [string] ] ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] [EOL] @ patch ( [string] ) @ patch ( [string] ) async def test_community_3 ( self , mock_update , mock_token ) : [EOL] self . data . twitch_get_community_name . return_value = [string] [EOL] mock_update . return_value = [ [string] ] [EOL] self . permissionSet [ [string] ] = True [EOL] mock_token . return_value = [string] [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await channel . commandCommunity ( args ) , True ) [EOL] mock_token . assert_called_once_with ( [string] ) [EOL] mock_update . assert_called_once_with ( [string] , [ [string] , [string] ] ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] [EOL] @ patch ( [string] ) @ patch ( [string] ) async def test_community_unset ( self , mock_update , mock_token ) : [EOL] self . data . twitch_get_community_name . return_value = [string] [EOL] mock_update . return_value = True [EOL] self . permissionSet [ [string] ] = True [EOL] mock_token . return_value = [string] [EOL] args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await channel . commandCommunity ( args ) , True ) [EOL] mock_token . assert_called_once_with ( [string] ) [EOL] mock_update . assert_called_once_with ( [string] , [ ] ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] [EOL] @ patch ( [string] ) @ patch ( [string] ) async def test_community_not_exist ( self , mock_update , mock_token ) : [EOL] self . data . twitch_get_community_name . return_value = [string] [EOL] mock_update . return_value = [ ] [EOL] self . permissionSet [ [string] ] = True [EOL] mock_token . return_value = [string] [EOL] args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await channel . commandCommunity ( args ) , True ) [EOL] mock_token . assert_called_once_with ( [string] ) [EOL] mock_update . assert_called_once_with ( [string] , [ [string] ] ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( [string] , [string] , [string] ) ) [EOL] [EOL] @ patch ( [string] ) @ patch ( [string] ) async def test_community_fail ( self , mock_update , mock_token ) : [EOL] self . data . twitch_get_community_name . return_value = [string] [EOL] mock_update . return_value = None [EOL] self . permissionSet [ [string] ] = True [EOL] mock_token . return_value = [string] [EOL] args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await channel . commandCommunity ( args ) , True ) [EOL] mock_token . assert_called_once_with ( [string] ) [EOL] mock_update . assert_called_once_with ( [string] , [ ] ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lib.data.message.Message$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $lib.data.message.Message$ 0 $lib.data.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lib.data.message.Message$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $lib.data.message.Message$ 0 $lib.data.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from . autoload import twitch [comment] [EOL] from . autoload import emotes [comment] [EOL] [EOL] from . items import channel [comment] [EOL] from . items import whisper [comment] [EOL] from . items import custom [comment] [EOL] from . items import manage [comment] [EOL] from . items import feature [comment] [EOL] [EOL] from . import ircmessage [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
from typing import Any [EOL] import typing [EOL] import lib [EOL] import datetime [EOL] import tests . unittest . asynctest_fix [comment] [EOL] [EOL] import unittest [EOL] from datetime import datetime [EOL] [EOL] import aiohttp [EOL] import asynctest [EOL] from asynctest . mock import MagicMock , Mock , call , patch [EOL] [EOL] from lib . cache import CacheStore [EOL] from bot . data import Channel [EOL] from lib . data . message import Message [EOL] from tests . unittest . base_channel import TestChannel [EOL] from tests . unittest . mock_class import StrContains , TypeMatch [EOL] [EOL] [comment] [EOL] import yarl [EOL] [EOL] from . . channel import block_url [EOL] [EOL] [EOL] @ patch ( block_url . __name__ + [string] ) class TestModerationChannelBlockUrlFilterNoUrl ( TestChannel ) : [EOL] async def test_nomod ( self , mock_check ) : [EOL] self . features . append ( [string] ) [EOL] self . assertIs ( await block_url . filterNoUrlForBots ( self . args ) , False ) [EOL] self . assertFalse ( mock_check . called ) [EOL] [EOL] async def test_no_match ( self , mock_check ) : [EOL] self . permissionSet [ [string] ] = True [EOL] self . features . append ( [string] ) [EOL] self . assertIs ( await block_url . filterNoUrlForBots ( self . args ) , False ) [EOL] self . assertFalse ( mock_check . called ) [EOL] [EOL] async def test_check ( self , mock_check ) : [EOL] message = Message ( [string] ) [EOL] self . args = self . args . _replace ( message = message ) [EOL] self . permissionSet [ [string] ] = True [EOL] self . features . append ( [string] ) [EOL] self . assertIs ( await block_url . filterNoUrlForBots ( self . args ) , False ) [EOL] mock_check . assert_called_once_with ( self . channel , [string] , message , self . now ) [EOL] [EOL] async def test_not_bannable ( self , mock_check ) : [EOL] message = Message ( [string] ) [EOL] self . args = self . args . _replace ( message = message ) [EOL] self . permissionSet [ [string] ] = True [EOL] self . permissionSet [ [string] ] = False [EOL] self . features . append ( [string] ) [EOL] self . assertIs ( await block_url . filterNoUrlForBots ( self . args ) , False ) [EOL] self . assertFalse ( mock_check . called ) [EOL] [EOL] [EOL] class TestModerationChannelBlockUrlCheckDomainRedirect ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . channel = Mock ( spec = Channel ) [EOL] self . channel . channel = [string] [EOL] self . channel . ircChannel = [string] [EOL] self . now = datetime ( [number] , [number] , [number] ) [EOL] [EOL] self . data = MagicMock ( spec = CacheStore ) [EOL] self . data . __aenter__ . return_value = self . data [EOL] self . data . __aexit__ . return_value = False [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_cache = patcher . start ( ) [EOL] self . mock_cache . return_value = self . data [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_log = patcher . start ( ) [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_except = patcher . start ( ) [EOL] [EOL] patcher = patch ( block_url . __name__ + [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_compare = patcher . start ( ) [EOL] self . mock_compare . return_value = False [EOL] [EOL] patcher = patch ( block_url . __name__ + [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_handle = patcher . start ( ) [EOL] [EOL] self . mock_response = MagicMock ( spec = aiohttp . ClientResponse ) [EOL] self . mock_response . __aenter__ . return_value = self . mock_response [EOL] self . mock_response . __aexit__ . return_value = False [EOL] self . mock_response . status = [number] [EOL] [EOL] self . mock_session = MagicMock ( spec = aiohttp . ClientSession ) [EOL] self . mock_session . __aenter__ . return_value = self . mock_session [EOL] self . mock_session . __aexit__ . return_value = False [EOL] self . mock_session . get . return_value = self . mock_response [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_clientsession = patcher . start ( ) [EOL] self . mock_clientsession . return_value = self . mock_session [EOL] [EOL] async def test_followers ( self ) : [EOL] self . data . twitch_num_followers . return_value = [number] [EOL] message = Message ( [string] ) [EOL] await block_url . check_domain_redirect ( self . channel , [string] , message , self . now ) [EOL] self . data . twitch_num_followers . assert_called_once_with ( [string] ) [EOL] self . assertFalse ( self . mock_log . called ) [EOL] self . assertFalse ( self . mock_except . called ) [EOL] self . assertFalse ( self . mock_clientsession . called ) [EOL] self . assertFalse ( self . mock_session . get . called ) [EOL] self . assertFalse ( self . mock_compare . called ) [EOL] self . assertFalse ( self . mock_handle . called ) [EOL] [EOL] async def test ( self ) : [EOL] self . data . twitch_num_followers . return_value = [number] [EOL] self . mock_compare . return_value = True [EOL] message = Message ( [string] ) [EOL] self . mock_response . url = yarl . URL ( [string] ) [EOL] await block_url . check_domain_redirect ( self . channel , [string] , message , self . now ) [EOL] self . data . twitch_num_followers . assert_called_once_with ( [string] ) [EOL] self . mock_log . assert_called_once_with ( StrContains ( [string] , [string] ) , StrContains ( [string] , str ( message ) ) , self . now ) [EOL] self . assertTrue ( self . mock_clientsession . called ) [EOL] self . mock_session . get . assert_called_once_with ( [string] , headers = TypeMatch ( dict ) ) [EOL] self . mock_compare . assert_called_once_with ( [string] , [string] , chat = self . channel , nick = [string] , timestamp = self . now ) [EOL] self . mock_handle . assert_called_once_with ( self . channel , [string] , message ) [EOL] self . assertFalse ( self . mock_except . called ) [EOL] [EOL] async def test_same_domain ( self ) : [EOL] self . data . twitch_num_followers . return_value = [number] [EOL] message = Message ( [string] ) [EOL] self . mock_response . url = yarl . URL ( [string] ) [EOL] await block_url . check_domain_redirect ( self . channel , [string] , message , self . now ) [EOL] self . data . twitch_num_followers . assert_called_once_with ( [string] ) [EOL] self . mock_log . assert_called_once_with ( StrContains ( [string] , [string] ) , StrContains ( [string] , str ( message ) ) , self . now ) [EOL] self . assertTrue ( self . mock_clientsession . called ) [EOL] self . mock_session . get . assert_called_once_with ( [string] , headers = TypeMatch ( dict ) ) [EOL] self . mock_compare . assert_called_once_with ( [string] , [string] , chat = self . channel , nick = [string] , timestamp = self . now ) [EOL] self . assertFalse ( self . mock_handle . called ) [EOL] self . assertFalse ( self . mock_except . called ) [EOL] [EOL] async def test_no_dns ( self ) : [EOL] self . data . twitch_num_followers . return_value = [number] [EOL] message = Message ( [string] ) [EOL] self . mock_session . get . side_effect = aiohttp . ClientConnectorError [EOL] await block_url . check_domain_redirect ( self . channel , [string] , message , self . now ) [EOL] self . data . twitch_num_followers . assert_called_once_with ( [string] ) [EOL] self . mock_log . assert_called_once_with ( StrContains ( [string] , [string] ) , StrContains ( [string] , str ( message ) ) , self . now ) [EOL] self . assertTrue ( self . mock_clientsession . called ) [EOL] self . mock_session . get . assert_called_once_with ( [string] , headers = TypeMatch ( dict ) ) [EOL] self . assertFalse ( self . mock_handle . called ) [EOL] self . assertFalse ( self . mock_compare . called ) [EOL] self . assertFalse ( self . mock_except . called ) [EOL] [EOL] async def test_exception ( self ) : [EOL] self . data . twitch_num_followers . return_value = [number] [EOL] message = Message ( [string] ) [EOL] self . mock_session . get . side_effect = Exception [EOL] await block_url . check_domain_redirect ( self . channel , [string] , message , self . now ) [EOL] self . data . twitch_num_followers . assert_called_once_with ( [string] ) [EOL] self . mock_log . assert_called_once_with ( StrContains ( [string] , [string] ) , StrContains ( [string] , str ( message ) ) , self . now ) [EOL] self . assertTrue ( self . mock_clientsession . called ) [EOL] self . mock_session . get . assert_called_once_with ( [string] , headers = TypeMatch ( dict ) ) [EOL] self . assertFalse ( self . mock_handle . called ) [EOL] self . assertFalse ( self . mock_compare . called ) [EOL] self . mock_except . assert_called_once_with ( StrContains ( str ( message ) ) , TypeMatch ( datetime ) ) [EOL] [EOL] async def test_multiple ( self ) : [EOL] self . data . twitch_num_followers . return_value = [number] [EOL] message = Message ( [string] ) [EOL] self . mock_response . url = yarl . URL ( [string] ) [EOL] await block_url . check_domain_redirect ( self . channel , [string] , message , self . now ) [EOL] self . data . twitch_num_followers . assert_called_once_with ( [string] ) [EOL] self . mock_log . assert_called_once_with ( StrContains ( [string] , [string] ) , StrContains ( [string] , str ( message ) ) , self . now ) [EOL] self . assertEqual ( self . mock_clientsession . call_count , [number] ) [EOL] self . assertEqual ( self . mock_session . get . call_count , [number] ) [EOL] self . mock_compare . assert_has_calls ( [ call ( [string] , [string] , chat = self . channel , nick = [string] , timestamp = self . now ) , call ( [string] , [string] , chat = self . channel , nick = [string] , timestamp = self . now ) , ] ) [EOL] self . assertFalse ( self . mock_handle . called ) [EOL] self . assertFalse ( self . mock_except . called ) [EOL] [EOL] async def test_multiple_first_match ( self ) : [EOL] self . data . twitch_num_followers . return_value = [number] [EOL] self . mock_compare . side_effect = [ True , False ] [EOL] message = Message ( [string] ) [EOL] self . mock_response . url = yarl . URL ( [string] ) [EOL] await block_url . check_domain_redirect ( self . channel , [string] , message , self . now ) [EOL] self . data . twitch_num_followers . assert_called_once_with ( [string] ) [EOL] self . mock_log . assert_called_once_with ( StrContains ( [string] , [string] ) , StrContains ( [string] , str ( message ) ) , self . now ) [EOL] self . assertEqual ( self . mock_clientsession . call_count , [number] ) [EOL] self . assertEqual ( self . mock_session . get . call_count , [number] ) [EOL] self . mock_compare . assert_called_once_with ( [string] , [string] , chat = self . channel , nick = [string] , timestamp = self . now ) [EOL] self . mock_handle . assert_called_once_with ( self . channel , [string] , message ) [EOL] self . assertFalse ( self . mock_except . called ) [EOL] [EOL] async def test_multiple_exception ( self ) : [EOL] self . data . twitch_num_followers . return_value = [number] [EOL] message = Message ( [string] ) [EOL] self . mock_response . url = yarl . URL ( [string] ) [EOL] self . mock_session . get . side_effect = [ Exception , self . mock_response , Exception ] [EOL] await block_url . check_domain_redirect ( self . channel , [string] , message , self . now ) [EOL] self . data . twitch_num_followers . assert_called_once_with ( [string] ) [EOL] self . mock_log . assert_called_once_with ( StrContains ( [string] , [string] ) , StrContains ( [string] , str ( message ) ) , self . now ) [EOL] self . assertEqual ( self . mock_session . get . call_count , [number] ) [EOL] self . mock_compare . assert_called_once_with ( [string] , [string] , chat = self . channel , nick = [string] , timestamp = self . now ) [EOL] self . mock_except . assert_has_calls ( [ call ( StrContains ( str ( message ) ) , TypeMatch ( datetime ) ) , call ( StrContains ( str ( message ) ) , TypeMatch ( datetime ) ) ] ) [EOL] [EOL] [EOL] class TestModerationChannelBlockUrlCompareDomain ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . channel = Mock ( spec = Channel ) [EOL] self . channel . channel = [string] [EOL] self . channel . ircChannel = [string] [EOL] self . message = Message ( [string] ) [EOL] self . now = datetime ( [number] , [number] , [number] ) [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_log = patcher . start ( ) [EOL] [EOL] def test ( self ) : [EOL] self . assertIs ( block_url . compare_domains ( [string] , [string] , chat = self . channel , nick = [string] , timestamp = self . now ) , False ) [EOL] self . assertFalse ( self . mock_log . called ) [EOL] [EOL] def test_different_domain ( self ) : [EOL] self . assertIs ( block_url . compare_domains ( [string] , [string] , chat = self . channel , nick = [string] , timestamp = self . now ) , True ) [EOL] self . mock_log . assert_called_once_with ( StrContains ( [string] , [string] , [string] ) , StrContains ( [string] , [string] , [string] ) , TypeMatch ( datetime ) ) [EOL] [EOL] def test_different_page ( self ) : [EOL] self . assertIs ( block_url . compare_domains ( [string] , [string] , chat = self . channel , nick = [string] , timestamp = self . now ) , False ) [EOL] self . assertFalse ( self . mock_log . called ) [EOL] [EOL] def test_different_query ( self ) : [EOL] self . assertIs ( block_url . compare_domains ( [string] , [string] , chat = self . channel , nick = [string] , timestamp = self . now ) , False ) [EOL] self . assertFalse ( self . mock_log . called ) [EOL] [EOL] def test_different_protocol ( self ) : [EOL] self . assertIs ( block_url . compare_domains ( [string] , [string] , chat = self . channel , nick = [string] , timestamp = self . now ) , False ) [EOL] self . assertFalse ( self . mock_log . called ) [EOL] [EOL] def test_different_subdomain ( self ) : [EOL] self . assertIs ( block_url . compare_domains ( [string] , [string] , chat = self . channel , nick = [string] , timestamp = self . now ) , True ) [EOL] self . mock_log . assert_called_once_with ( StrContains ( [string] , [string] , [string] ) , StrContains ( [string] , [string] , [string] ) , TypeMatch ( datetime ) ) [EOL] [EOL] def test_different_subdomain_www ( self ) : [EOL] self . assertIs ( block_url . compare_domains ( [string] , [string] , chat = self . channel , nick = [string] , timestamp = self . now ) , False ) [EOL] self . assertFalse ( self . mock_log . called ) [EOL] [EOL] [EOL] class TestModerationChannelBlockUrlHandleDifferentDomain ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . channel = Mock ( spec = Channel ) [EOL] self . channel . channel = [string] [EOL] self . channel . ircChannel = [string] [EOL] self . message = Message ( [string] ) [EOL] self . now = datetime ( [number] , [number] , [number] ) [EOL] [EOL] self . data = MagicMock ( spec = CacheStore ) [EOL] self . data . __aenter__ . return_value = self . data [EOL] self . data . __aexit__ . return_value = False [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_cache = patcher . start ( ) [EOL] self . mock_cache . return_value = self . data [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_timeout = patcher . start ( ) [EOL] [EOL] async def test ( self ) : [EOL] await block_url . handle_different_domains ( self . channel , [string] , self . message ) [EOL] self . mock_cache . assert_called_once_with ( ) [EOL] self . mock_timeout . assert_called_once_with ( self . data , self . channel , [string] , [string] , [number] , [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lib.data.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lib.data.message.Message$ 0 $lib.data.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lib.data.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lib.data.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lib.data.message.Message$ 0 $lib.data.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lib.data.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lib.data.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lib.data.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lib.data.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lib.data.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lib.data.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lib.data.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lib.data.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lib.data.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lib.data.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lib.data.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lib.data.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lib.data.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lib.data.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lib.data.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lib.data.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lib.data.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lib.data.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lib.data.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lib.data.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lib.data.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lib.data.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lib.data.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lib.data.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lib.data.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lib.data.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lib.data.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lib.data.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lib.data.message.Message$ 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from asynctest . mock import MagicMock , patch [EOL] [EOL] from tests . unittest . base_channel import TestChannel [EOL] from lib . data . message import Message [EOL] from lib . database import DatabaseTimeout [EOL] [EOL] [comment] [EOL] from . . channel import purge [EOL] [EOL] [EOL] class TestModerationChannelPurge ( TestChannel ) : [EOL] @ patch . object ( DatabaseTimeout , [string] ) async def test_purge ( self , mock_database ) : [EOL] database = MagicMock ( spec = DatabaseTimeout ) [EOL] mock_database . return_value = database [EOL] database . __aenter__ . return_value = database [EOL] self . assertIs ( await purge . commandPurge ( self . args ) , False ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] self . assertFalse ( database . recordTimeout . called ) [EOL] self . permissionSet [ [string] ] = True [EOL] self . permissionSet [ [string] ] = True [EOL] args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await purge . commandPurge ( args ) , True ) [EOL] self . channel . send . assert_called_once_with ( [string] ) [EOL] database . recordTimeout . assert_called_once_with ( [string] , [string] , [string] , [string] , None , [number] , [string] , None ) [EOL] [EOL] @ patch . object ( DatabaseTimeout , [string] ) async def test_purge_reason ( self , mock_database ) : [EOL] database = MagicMock ( spec = DatabaseTimeout ) [EOL] mock_database . return_value = database [EOL] database . __aenter__ . return_value = database [EOL] self . permissionSet [ [string] ] = True [EOL] self . permissionSet [ [string] ] = True [EOL] args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await purge . commandPurge ( args ) , True ) [EOL] self . channel . send . assert_called_once_with ( [string] ) [EOL] database . recordTimeout . assert_called_once_with ( [string] , [string] , [string] , [string] , None , [number] , [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Dict , Optional , Iterable , List [EOL] import builtins [EOL] import lib [EOL] import typing [EOL] from typing import Dict , Iterable , List , Optional [EOL] [EOL] import lib . items . custom [EOL] from lib . cache import CacheStore [EOL] from lib . data import ChatCommandArgs , CustomFieldArgs , CustomCommand [EOL] from lib . data import CommandActionTokens , CustomCommandField [comment] [EOL] from lib . data import CustomCommandProcess , CustomFieldParts [comment] [EOL] from lib . data import CustomProcessArgs [EOL] from lib . data . message import Message [EOL] from lib . data . permissions import ChatPermissionSet [EOL] from lib . helper import textformat [EOL] [EOL] permissions = { None : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] permissionsOrder = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] async def get_command ( data , command , channel , permissions ) : [EOL] commands = ... [EOL] commands = await data . getChatCommands ( channel , command ) [EOL] permission = ... [EOL] broadcaster = ... [EOL] message = ... [EOL] for permission in reversed ( permissionsOrder ) : [EOL] if not permission or permissions [ permission ] : [EOL] for broadcaster in [ channel , [string] ] : [EOL] if permission in commands [ broadcaster ] : [EOL] message = commands [ broadcaster ] [ permission ] [EOL] return CustomCommand ( message , broadcaster , permission ) [EOL] return None [EOL] [EOL] [EOL] async def create_messages ( command , args ) : [EOL] textFormat = ... [EOL] textFormat = await args . data . hasFeature ( args . chat . channel , [string] ) [EOL] messageParts = [ ] [EOL] try : [EOL] parts = ... [EOL] for parts in split_message ( command . message ) : [EOL] messageParts . append ( parts . plainText ) [EOL] try : [EOL] if parts . field is not None : [EOL] fieldArgument = CustomFieldArgs ( parts . field , parts . param , parts . prefix , parts . suffix , parts . default , args . message , args . chat . channel , args . nick , args . permissions , args . timestamp ) [EOL] string = await convert_field ( fieldArgument ) [EOL] if string is not None : [EOL] string = format ( string , parts . format , textFormat ) [EOL] else : [EOL] string = parts . original [EOL] messageParts . append ( string ) [EOL] except Exception : [EOL] messageParts . append ( parts . original ) [EOL] except ValueError : [EOL] return [ str ( command . message ) ] [EOL] messages = [ [string] . join ( messageParts ) ] [EOL] processArgument = CustomProcessArgs ( args . data , args . chat , args . tags , args . nick , args . permissions , command . broadcaster , command . level , args . message . command , messages ) [EOL] process = ... [EOL] for process in lib . items . custom . postProcess ( ) : [EOL] await process ( processArgument ) [EOL] return messages [EOL] [EOL] [EOL] def parse_action_message ( message , broadcaster ) : [EOL] try : [EOL] action = message . lower [ [number] ] [EOL] i = [number] [EOL] level = None [EOL] if message [ [number] ] . startswith ( [string] ) : [EOL] i = [number] [EOL] level = message . lower [ [number] ] [ len ( [string] ) : ] [EOL] if level in permissions : [EOL] level = permissions [ level ] [EOL] else : [EOL] level = None [EOL] command = message [ i ] [EOL] text = message [ i + [number] : ] [EOL] [EOL] return CommandActionTokens ( action , broadcaster , level , command , text ) [EOL] except Exception : [EOL] return None [EOL] [EOL] [EOL] def split_message ( message ) : [EOL] [comment] [EOL] parsed = [ ] [EOL] i = [number] [EOL] length = len ( message ) [EOL] [EOL] while True : [EOL] noFormat = [ ] [EOL] while i < length : [EOL] char = message [ i ] [EOL] i += [number] [EOL] [EOL] if char == [string] : [EOL] if i < length and message [ i ] == [string] : [EOL] i += [number] [EOL] else : [EOL] raise ValueError ( ) [EOL] elif char == [string] : [EOL] if i < length and message [ i ] == [string] : [EOL] i += [number] [EOL] else : [EOL] i -= [number] [EOL] break [EOL] [EOL] noFormat . append ( char ) [EOL] [EOL] if i == length : [EOL] if noFormat : [EOL] parsed . append ( CustomFieldParts ( [string] . join ( noFormat ) , None , None , None , None , None , None , None ) ) [EOL] break [EOL] [EOL] s = i [EOL] i += [number] [EOL] if i == length : [EOL] raise ValueError ( ) [EOL] [EOL] field = [ ] [EOL] while True : [EOL] if i == length : [EOL] raise ValueError ( ) [EOL] [EOL] char = message [ i ] [EOL] i += [number] [EOL] [EOL] if char == [string] : [EOL] if i < length and message [ i ] == [string] : [EOL] i += [number] [EOL] else : [EOL] break [EOL] if char == [string] : [EOL] if i < length and message [ i ] == [string] : [EOL] i += [number] [EOL] else : [EOL] break [EOL] if char == [string] : [EOL] if i < length and message [ i ] == [string] : [EOL] i += [number] [EOL] else : [EOL] break [EOL] if char == [string] : [EOL] if i < length and message [ i ] == [string] : [EOL] i += [number] [EOL] else : [EOL] break [EOL] if char == [string] : [EOL] if i < length and message [ i ] == [string] : [EOL] i += [number] [EOL] else : [EOL] break [EOL] if char == [string] : [EOL] if i < length and message [ i ] == [string] : [EOL] i += [number] [EOL] else : [EOL] raise ValueError ( ) [EOL] if char == [string] : [EOL] if i < length and message [ i ] == [string] : [EOL] i += [number] [EOL] else : [EOL] i -= [number] [EOL] break [EOL] field . append ( char ) [EOL] [EOL] format = None [comment] [EOL] if char == [string] : [EOL] format = [ ] [EOL] while True : [EOL] if i == length : [EOL] raise ValueError ( ) [EOL] [EOL] char = message [ i ] [EOL] i += [number] [EOL] [EOL] if char == [string] : [EOL] if i < length and message [ i ] == [string] : [EOL] i += [number] [EOL] else : [EOL] break [EOL] if char == [string] : [EOL] if i < length and message [ i ] == [string] : [EOL] i += [number] [EOL] else : [EOL] break [EOL] if char == [string] : [EOL] if i < length and message [ i ] == [string] : [EOL] i += [number] [EOL] else : [EOL] break [EOL] if char == [string] : [EOL] if i < length and message [ i ] == [string] : [EOL] i += [number] [EOL] else : [EOL] break [EOL] if char == [string] : [EOL] if i < length and message [ i ] == [string] : [EOL] i += [number] [EOL] else : [EOL] raise ValueError ( ) [EOL] if char == [string] : [EOL] if i < length and message [ i ] == [string] : [EOL] i += [number] [EOL] else : [EOL] i -= [number] [EOL] break [EOL] format . append ( char ) [EOL] [EOL] prefix = None [EOL] if char == [string] : [EOL] prefix = [ ] [EOL] while True : [EOL] if i == length : [EOL] raise ValueError ( ) [EOL] [EOL] char = message [ i ] [EOL] i += [number] [EOL] [EOL] if char == [string] : [EOL] if i < length and message [ i ] == [string] : [EOL] i += [number] [EOL] else : [EOL] break [EOL] if char == [string] : [EOL] if i < length and message [ i ] == [string] : [EOL] i += [number] [EOL] else : [EOL] break [EOL] if char == [string] : [EOL] if i < length and message [ i ] == [string] : [EOL] i += [number] [EOL] else : [EOL] break [EOL] if char == [string] : [EOL] if i < length and message [ i ] == [string] : [EOL] i += [number] [EOL] else : [EOL] raise ValueError ( ) [EOL] if char == [string] : [EOL] if i < length and message [ i ] == [string] : [EOL] i += [number] [EOL] else : [EOL] i -= [number] [EOL] break [EOL] prefix . append ( char ) [EOL] [EOL] suffix = None [EOL] if char == [string] : [EOL] suffix = [ ] [EOL] while True : [EOL] if i == length : [EOL] raise ValueError ( ) [EOL] [EOL] char = message [ i ] [EOL] i += [number] [EOL] [EOL] if char == [string] : [EOL] if i < length and message [ i ] == [string] : [EOL] i += [number] [EOL] else : [EOL] break [EOL] if char == [string] : [EOL] if i < length and message [ i ] == [string] : [EOL] i += [number] [EOL] else : [EOL] break [EOL] if char == [string] : [EOL] if i < length and message [ i ] == [string] : [EOL] i += [number] [EOL] else : [EOL] raise ValueError ( ) [EOL] if char == [string] : [EOL] if i < length and message [ i ] == [string] : [EOL] i += [number] [EOL] else : [EOL] i -= [number] [EOL] break [EOL] suffix . append ( char ) [EOL] [EOL] param = None [EOL] if char == [string] : [EOL] param = [ ] [EOL] while True : [EOL] if i == length : [EOL] raise ValueError ( ) [EOL] [EOL] char = message [ i ] [EOL] i += [number] [EOL] [EOL] if char == [string] : [EOL] if i < length and message [ i ] == [string] : [EOL] i += [number] [EOL] else : [EOL] break [EOL] if char == [string] : [EOL] if i < length and message [ i ] == [string] : [EOL] i += [number] [EOL] else : [EOL] raise ValueError ( ) [EOL] if char == [string] : [EOL] if i < length and message [ i ] == [string] : [EOL] i += [number] [EOL] else : [EOL] i -= [number] [EOL] break [EOL] param . append ( char ) [EOL] [EOL] default = None [EOL] if char == [string] : [EOL] default = [ ] [EOL] while True : [EOL] if i == length : [EOL] raise ValueError ( ) [EOL] [EOL] char = message [ i ] [EOL] i += [number] [EOL] [EOL] if char == [string] : [EOL] if i < length and message [ i ] == [string] : [EOL] i += [number] [EOL] else : [EOL] raise ValueError ( ) [EOL] if char == [string] : [EOL] if i < length and message [ i ] == [string] : [EOL] i += [number] [EOL] else : [EOL] i -= [number] [EOL] break [EOL] default . append ( char ) [EOL] [EOL] if char != [string] : [EOL] raise ValueError ( ) [EOL] i += [number] [EOL] original = message [ s : i ] [EOL] [EOL] parsed . append ( CustomFieldParts ( [string] . join ( noFormat ) , [string] . join ( field ) , [string] . join ( format ) if format is not None else None , [string] . join ( prefix ) if prefix is not None else None , [string] . join ( suffix ) if suffix is not None else None , [string] . join ( param ) if param is not None else None , [string] . join ( default ) if default is not None else None , original ) ) [EOL] [EOL] return parsed [EOL] [EOL] [EOL] async def convert_field ( args ) : [EOL] convert = ... [EOL] for convert in lib . items . custom . fields ( ) : [EOL] result = await convert ( args ) [EOL] if result is not None : [EOL] return result [EOL] return None [EOL] [EOL] [EOL] def format ( string , format , hasTextConvert ) : [EOL] if hasTextConvert and format is not None : [EOL] return textformat . format ( string = string , format_ = format ) [EOL] return string [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[lib.data.CustomFieldPartstyping.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import builtins [EOL] import lib [EOL] from typing import Dict , List , Optional , Union [comment] [EOL] from lib . data import CustomProcessArgs [EOL] [EOL] [EOL] async def propertyMultipleLines ( args ) : [EOL] if not await args . data . getCustomCommandProperty ( args . broadcaster , args . level , args . command , [string] ) : [EOL] return [EOL] [EOL] value = ... [EOL] value = await args . data . getCustomCommandProperty ( args . broadcaster , args . level , args . command , [string] ) [EOL] delimiter = ( value if isinstance ( value , str ) else [string] ) or [string] [EOL] [EOL] msgs = args . messages [ : ] [EOL] args . messages . clear ( ) [EOL] msg = ... [EOL] for msg in msgs : [EOL] args . messages . extend ( msg . split ( delimiter ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from tests . unittest . base_custom import TestCustomField [EOL] [EOL] [comment] [EOL] from . . custom import broadcaster [EOL] [EOL] [EOL] class TestCustomCommandCustomBroadcaster ( TestCustomField ) : [EOL] def setUp ( self ) : [EOL] super ( ) . setUp ( ) [EOL] self . args = self . args . _replace ( field = [string] ) [EOL] [EOL] async def test ( self ) : [EOL] self . args = self . args . _replace ( field = [string] ) [EOL] self . assertIsNone ( await broadcaster . fieldBroadcaster ( self . args ) ) [EOL] [EOL] async def test_broadcaster ( self ) : [EOL] self . assertEqual ( await broadcaster . fieldBroadcaster ( self . args ) , [string] ) [EOL] [EOL] async def test_streamer ( self ) : [EOL] self . args = self . args . _replace ( field = [string] ) [EOL] self . assertEqual ( await broadcaster . fieldBroadcaster ( self . args ) , [string] ) [EOL] [EOL] async def test_broadcaster_caps ( self ) : [EOL] self . args = self . args . _replace ( field = [string] ) [EOL] self . assertEqual ( await broadcaster . fieldBroadcaster ( self . args ) , [string] ) [EOL] [EOL] async def test_streamer_caps ( self ) : [EOL] self . args = self . args . _replace ( field = [string] ) [EOL] self . assertEqual ( await broadcaster . fieldBroadcaster ( self . args ) , [string] ) [EOL] [EOL] async def test_default ( self ) : [EOL] self . args = self . args . _replace ( channel = [string] , prefix = [string] , suffix = [string] ) [EOL] self . assertEqual ( await broadcaster . fieldBroadcaster ( self . args ) , [string] ) [EOL] [EOL] async def test_prefix ( self ) : [EOL] self . args = self . args . _replace ( prefix = [string] ) [EOL] self . assertEqual ( await broadcaster . fieldBroadcaster ( self . args ) , [string] ) [EOL] [EOL] async def test_prefix_blank ( self ) : [EOL] self . args = self . args . _replace ( prefix = [string] ) [EOL] self . assertEqual ( await broadcaster . fieldBroadcaster ( self . args ) , [string] ) [EOL] [EOL] async def test_suffix ( self ) : [EOL] self . args = self . args . _replace ( suffix = [string] ) [EOL] self . assertEqual ( await broadcaster . fieldBroadcaster ( self . args ) , [string] ) [EOL] [EOL] async def test_suffix_blank ( self ) : [EOL] self . args = self . args . _replace ( suffix = [string] ) [EOL] self . assertEqual ( await broadcaster . fieldBroadcaster ( self . args ) , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from lib . data . message import Message [EOL] from tests . unittest . base_custom import TestCustomField [EOL] [EOL] [comment] [EOL] from . . custom import query [EOL] [EOL] [EOL] class TestCustomCommandCustomQuery ( TestCustomField ) : [EOL] def setUp ( self ) : [EOL] super ( ) . setUp ( ) [EOL] self . args = self . args . _replace ( field = [string] , message = Message ( [string] ) ) [EOL] [EOL] async def test ( self ) : [EOL] self . args = self . args . _replace ( field = [string] ) [EOL] self . assertIsNone ( await query . fieldQuery ( self . args ) ) [EOL] [EOL] async def test_query ( self ) : [EOL] self . assertEqual ( await query . fieldQuery ( self . args ) , [string] ) [EOL] [EOL] async def test_caps ( self ) : [EOL] self . args = self . args . _replace ( field = [string] ) [EOL] self . assertEqual ( await query . fieldQuery ( self . args ) , [string] ) [EOL] [EOL] async def test_default ( self ) : [EOL] self . args = self . args . _replace ( message = Message ( [string] ) , prefix = [string] , suffix = [string] ) [EOL] self . assertEqual ( await query . fieldQuery ( self . args ) , [string] ) [EOL] [EOL] async def test_prefix ( self ) : [EOL] self . args = self . args . _replace ( prefix = [string] ) [EOL] self . assertEqual ( await query . fieldQuery ( self . args ) , [string] ) [EOL] [EOL] async def test_prefix_blank ( self ) : [EOL] self . args = self . args . _replace ( prefix = [string] ) [EOL] self . assertEqual ( await query . fieldQuery ( self . args ) , [string] ) [EOL] [EOL] async def test_suffix ( self ) : [EOL] self . args = self . args . _replace ( suffix = [string] ) [EOL] self . assertEqual ( await query . fieldQuery ( self . args ) , [string] ) [EOL] [EOL] async def test_suffix_blank ( self ) : [EOL] self . args = self . args . _replace ( suffix = [string] ) [EOL] self . assertEqual ( await query . fieldQuery ( self . args ) , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import asyncio [EOL] import re [EOL] [EOL] import aiohttp [EOL] [EOL] from asynctest . mock import CoroutineMock , MagicMock , patch [EOL] [EOL] from lib . data . message import Message [EOL] from tests . unittest . base_custom import TestCustomField [EOL] [EOL] [comment] [EOL] from . . custom import url [EOL] [EOL] [EOL] class TestCustomCommandCustomUrl ( TestCustomField ) : [EOL] def setUp ( self ) : [EOL] super ( ) . setUp ( ) [EOL] self . args = self . args . _replace ( field = [string] , nick = [string] , message = Message ( [string] ) , param = [string] ) [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_config = patcher . start ( ) [EOL] self . mock_config . customMessageUrlTimeout = [number] [EOL] [EOL] self . mock_response = MagicMock ( spec = aiohttp . ClientResponse ) [EOL] self . mock_response . __aenter__ . return_value = self . mock_response [EOL] self . mock_response . __aexit__ . return_value = False [EOL] self . mock_response . status = [number] [EOL] self . mock_response . text . return_value = [string] [EOL] [EOL] self . mock_session = MagicMock ( spec = aiohttp . ClientSession ) [EOL] self . mock_session . __aenter__ . return_value = self . mock_session [EOL] self . mock_session . __aexit__ . return_value = False [EOL] self . mock_session . get . return_value = self . mock_response [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_clientsession = patcher . start ( ) [EOL] self . mock_clientsession . return_value = self . mock_session [EOL] [EOL] async def test ( self ) : [EOL] self . args = self . args . _replace ( field = [string] ) [EOL] self . assertIsNone ( await url . fieldUrl ( self . args ) ) [EOL] self . assertFalse ( self . mock_clientsession . called ) [EOL] self . assertFalse ( self . mock_session . get . called ) [EOL] self . assertFalse ( self . mock_session . get . called ) [EOL] [EOL] async def test_url ( self ) : [EOL] self . assertEqual ( await url . fieldUrl ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_clientsession . called ) [EOL] self . mock_session . get . assert_called_once_with ( [string] , timeout = [number] ) [EOL] self . assertTrue ( self . mock_session . get . called ) [EOL] [EOL] async def test_caps ( self ) : [EOL] self . args = self . args . _replace ( field = [string] ) [EOL] self . assertEqual ( await url . fieldUrl ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_clientsession . called ) [EOL] self . mock_session . get . assert_called_once_with ( [string] , timeout = [number] ) [EOL] self . assertTrue ( self . mock_session . get . called ) [EOL] [EOL] async def test_default ( self ) : [EOL] self . args = self . args . _replace ( prefix = [string] , suffix = [string] ) [EOL] self . mock_response . status = [number] [EOL] self . assertEqual ( await url . fieldUrl ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_clientsession . called ) [EOL] self . mock_session . get . assert_called_once_with ( [string] , timeout = [number] ) [EOL] self . assertTrue ( self . mock_session . get . called ) [EOL] [EOL] async def test_exception ( self ) : [EOL] self . mock_session . get . side_effect = aiohttp . ClientError [EOL] self . assertEqual ( await url . fieldUrl ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_clientsession . called ) [EOL] self . mock_session . get . assert_called_once_with ( [string] , timeout = [number] ) [EOL] self . assertTrue ( self . mock_session . get . called ) [EOL] [EOL] async def test_exception_timeout ( self ) : [EOL] self . mock_session . get . side_effect = asyncio . TimeoutError [EOL] self . assertEqual ( await url . fieldUrl ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_clientsession . called ) [EOL] self . mock_session . get . assert_called_once_with ( [string] , timeout = [number] ) [EOL] self . assertTrue ( self . mock_session . get . called ) [EOL] [EOL] async def test_prefix ( self ) : [EOL] self . args = self . args . _replace ( prefix = [string] ) [EOL] self . assertEqual ( await url . fieldUrl ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_clientsession . called ) [EOL] self . mock_session . get . assert_called_once_with ( [string] , timeout = [number] ) [EOL] self . assertTrue ( self . mock_session . get . called ) [EOL] [EOL] async def test_prefix_blank ( self ) : [EOL] self . args = self . args . _replace ( prefix = [string] ) [EOL] self . assertEqual ( await url . fieldUrl ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_clientsession . called ) [EOL] self . mock_session . get . assert_called_once_with ( [string] , timeout = [number] ) [EOL] self . assertTrue ( self . mock_session . get . called ) [EOL] [EOL] async def test_suffix ( self ) : [EOL] self . args = self . args . _replace ( suffix = [string] ) [EOL] self . assertEqual ( await url . fieldUrl ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_clientsession . called ) [EOL] self . mock_session . get . assert_called_once_with ( [string] , timeout = [number] ) [EOL] self . assertTrue ( self . mock_session . get . called ) [EOL] [EOL] async def test_suffix_blank ( self ) : [EOL] self . args = self . args . _replace ( suffix = [string] ) [EOL] self . assertEqual ( await url . fieldUrl ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_clientsession . called ) [EOL] self . mock_session . get . assert_called_once_with ( [string] , timeout = [number] ) [EOL] self . assertTrue ( self . mock_session . get . called ) [EOL] [EOL] @ patch ( url . __name__ + [string] ) async def test_field ( self , mock_replace ) : [EOL] mock_replace . side_effect = [ [string] , [string] ] [EOL] self . args = self . args . _replace ( param = [string] ) [EOL] self . assertEqual ( await url . fieldUrl ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_clientsession . called ) [EOL] self . mock_session . get . assert_called_once_with ( [string] , timeout = [number] ) [EOL] self . assertTrue ( self . mock_session . get . called ) [EOL] [EOL] [EOL] class TestCustomCommandFieldReplace ( TestCustomField ) : [EOL] def setUp ( self ) : [EOL] super ( ) . setUp ( ) [EOL] [EOL] patcher = patch ( url . __name__ + [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_fieldUrl = patcher . start ( ) [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_list = patcher . start ( ) [EOL] self . mock_list . fields . return_value = [ self . mock_fieldUrl ] [EOL] [EOL] self . match = re . match ( [string] , [string] ) [EOL] [EOL] async def test ( self ) : [EOL] self . assertEqual ( await url . field_replace ( self . args , self . match ) , [string] ) [EOL] self . assertFalse ( self . mock_fieldUrl . called ) [EOL] [EOL] async def test_something ( self ) : [EOL] self . mock_list . fields . return_value . append ( CoroutineMock ( return_value = [string] ) ) [EOL] self . assertEqual ( await url . field_replace ( self . args , self . match ) , [string] ) [EOL] self . assertFalse ( self . mock_fieldUrl . called ) [EOL] [EOL] async def test_none ( self ) : [EOL] self . mock_list . fields . return_value . append ( CoroutineMock ( return_value = None ) ) [EOL] self . assertEqual ( await url . field_replace ( self . args , self . match ) , [string] ) [EOL] self . assertFalse ( self . mock_fieldUrl . called ) [EOL]	
from tests . unittest . base_custom import TestCustomField [EOL] [EOL] [comment] [EOL] from . . custom import user [EOL] [EOL] [EOL] class TestCustomCommandCustomUser ( TestCustomField ) : [EOL] def setUp ( self ) : [EOL] super ( ) . setUp ( ) [EOL] self . args = self . args . _replace ( field = [string] , nick = [string] ) [EOL] [EOL] async def test ( self ) : [EOL] self . args = self . args . _replace ( field = [string] ) [EOL] self . assertIsNone ( await user . fieldUser ( self . args ) ) [EOL] [EOL] async def test_user ( self ) : [EOL] self . assertEqual ( await user . fieldUser ( self . args ) , [string] ) [EOL] [EOL] async def test_nick ( self ) : [EOL] self . args = self . args . _replace ( field = [string] ) [EOL] self . assertEqual ( await user . fieldUser ( self . args ) , [string] ) [EOL] [EOL] async def test_user_caps ( self ) : [EOL] self . args = self . args . _replace ( field = [string] ) [EOL] self . assertEqual ( await user . fieldUser ( self . args ) , [string] ) [EOL] [EOL] async def test_nick_caps ( self ) : [EOL] self . args = self . args . _replace ( field = [string] ) [EOL] self . assertEqual ( await user . fieldUser ( self . args ) , [string] ) [EOL] [EOL] async def test_default ( self ) : [EOL] self . args = self . args . _replace ( nick = [string] , prefix = [string] , suffix = [string] ) [EOL] self . assertEqual ( await user . fieldUser ( self . args ) , [string] ) [EOL] [EOL] async def test_prefix ( self ) : [EOL] self . args = self . args . _replace ( prefix = [string] ) [EOL] self . assertEqual ( await user . fieldUser ( self . args ) , [string] ) [EOL] [EOL] async def test_prefix_blank ( self ) : [EOL] self . args = self . args . _replace ( prefix = [string] ) [EOL] self . assertEqual ( await user . fieldUser ( self . args ) , [string] ) [EOL] [EOL] async def test_suffix ( self ) : [EOL] self . args = self . args . _replace ( suffix = [string] ) [EOL] self . assertEqual ( await user . fieldUser ( self . args ) , [string] ) [EOL] [EOL] async def test_suffix_blank ( self ) : [EOL] self . args = self . args . _replace ( suffix = [string] ) [EOL] self . assertEqual ( await user . fieldUser ( self . args ) , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from tests . unittest . base_custom import TestCustomProcess [EOL] [EOL] [comment] [EOL] from . . custom import multiple [EOL] [EOL] [EOL] class TestCustomCommandCustomMultiple ( TestCustomProcess ) : [EOL] def setUp ( self ) : [EOL] super ( ) . setUp ( ) [EOL] property_return = [ True , None ] [EOL] self . property_return = property_return [EOL] self . data . getCustomCommandProperty . side_effect = property_return [EOL] [EOL] async def test ( self ) : [EOL] self . property_return [ [number] ] = False [EOL] self . messages [ [number] ] = [string] [EOL] await multiple . propertyMultipleLines ( self . args ) [EOL] self . assertEqual ( self . messages , [ [string] ] ) [EOL] [EOL] async def test_split ( self ) : [EOL] self . messages [ [number] ] = [string] [EOL] await multiple . propertyMultipleLines ( self . args ) [EOL] self . assertEqual ( self . messages , [ [string] , [string] ] ) [EOL] [EOL] async def test_split_multiple ( self ) : [EOL] self . messages . append ( [string] ) [EOL] await multiple . propertyMultipleLines ( self . args ) [EOL] self . assertEqual ( self . messages , [ [string] , [string] , [string] ] ) [EOL] [EOL] async def test_split_delimiter ( self ) : [EOL] self . property_return [ [number] ] = [string] [EOL] self . messages [ [number] ] = [string] [EOL] await multiple . propertyMultipleLines ( self . args ) [EOL] self . assertEqual ( self . messages , [ [string] , [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from lib . data . message import Message [EOL] from tests . unittest . base_custom import TestCustomField [EOL] [EOL] [comment] [EOL] from . . custom import params [EOL] [EOL] [EOL] class TestCustomCommandCustomParams ( TestCustomField ) : [EOL] def setUp ( self ) : [EOL] super ( ) . setUp ( ) [EOL] self . args = self . args . _replace ( message = Message ( [string] ) ) [EOL] [EOL] async def test ( self ) : [EOL] self . args = self . args . _replace ( field = [string] ) [EOL] self . assertIsNone ( await params . fieldParams ( self . args ) ) [EOL] [EOL] async def test_zero ( self ) : [EOL] self . args = self . args . _replace ( field = [string] ) [EOL] self . assertEqual ( await params . fieldParams ( self . args ) , [string] ) [EOL] [EOL] async def test_one ( self ) : [EOL] self . args = self . args . _replace ( field = [string] ) [EOL] self . assertEqual ( await params . fieldParams ( self . args ) , [string] ) [EOL] [EOL] async def test_default ( self ) : [EOL] self . args = self . args . _replace ( field = [string] , prefix = [string] , suffix = [string] ) [EOL] self . assertEqual ( await params . fieldParams ( self . args ) , [string] ) [EOL] [EOL] async def test_prefix ( self ) : [EOL] self . args = self . args . _replace ( field = [string] , prefix = [string] ) [EOL] self . assertEqual ( await params . fieldParams ( self . args ) , [string] ) [EOL] [EOL] async def test_prefix_blank ( self ) : [EOL] self . args = self . args . _replace ( field = [string] , prefix = [string] ) [EOL] self . assertEqual ( await params . fieldParams ( self . args ) , [string] ) [EOL] [EOL] async def test_suffix ( self ) : [EOL] self . args = self . args . _replace ( field = [string] , suffix = [string] ) [EOL] self . assertEqual ( await params . fieldParams ( self . args ) , [string] ) [EOL] [EOL] async def test_suffix_blank ( self ) : [EOL] self . args = self . args . _replace ( field = [string] , suffix = [string] ) [EOL] self . assertEqual ( await params . fieldParams ( self . args ) , [string] ) [EOL] [EOL] async def test_range ( self ) : [EOL] self . args = self . args . _replace ( field = [string] ) [EOL] self . assertEqual ( await params . fieldParams ( self . args ) , [string] ) [EOL] self . args = self . args . _replace ( field = [string] ) [EOL] self . assertEqual ( await params . fieldParams ( self . args ) , [string] ) [EOL] [EOL] async def test_starting ( self ) : [EOL] self . args = self . args . _replace ( field = [string] ) [EOL] self . assertEqual ( await params . fieldParams ( self . args ) , [string] ) [EOL] self . args = self . args . _replace ( field = [string] ) [EOL] self . assertEqual ( await params . fieldParams ( self . args ) , [string] ) [EOL] [EOL] async def test_ending ( self ) : [EOL] self . args = self . args . _replace ( field = [string] ) [EOL] self . assertEqual ( await params . fieldParams ( self . args ) , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import unittest [EOL] [EOL] import asynctest [EOL] [EOL] from collections import defaultdict [EOL] from datetime import datetime [EOL] [EOL] from asynctest . mock import CoroutineMock , MagicMock , Mock , call , patch [EOL] [EOL] from bot . data import Channel [EOL] from bot . twitchmessage import IrcMessageTags [EOL] from lib . cache import CacheStore [EOL] from lib . data import ChatCommandArgs , CommandActionTokens [EOL] from lib . data import CustomCommand , CustomFieldArgs , CustomFieldParts [EOL] from lib . data import CustomProcessArgs [EOL] from lib . data . message import Message [EOL] from lib . data . permissions import ChatPermissionSet [EOL] from lib . database import DatabaseMain [EOL] from tests . unittest . mock_class import TypeMatch [EOL] from . . import library [EOL] [EOL] [EOL] class TestCustomCommandLibraryCustomGetCommand ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . data = Mock ( spec = CacheStore ) [EOL] self . database = Mock ( spec = DatabaseMain ) [EOL] self . permissions = defaultdict ( lambda : False , { [string] : True } ) [EOL] [EOL] async def test_no_commands ( self ) : [EOL] self . data . getChatCommands . return_value = { [string] : { } , [string] : { } } [EOL] self . assertIsNone ( await library . get_command ( self . data , [string] , [string] , self . permissions ) ) [EOL] self . data . getChatCommands . assert_called_once_with ( [string] , [string] ) [EOL] [EOL] async def test_public_command ( self ) : [EOL] self . data . getChatCommands . return_value = { [string] : { [string] : [string] } , [string] : { } } [EOL] self . assertEqual ( await library . get_command ( self . data , [string] , [string] , self . permissions ) , CustomCommand ( [string] , [string] , [string] ) ) [EOL] self . data . getChatCommands . assert_called_once_with ( [string] , [string] ) [EOL] [EOL] async def test_subscriber ( self ) : [EOL] self . permissions [ [string] ] = True [EOL] self . data . getChatCommands . return_value = { [string] : { [string] : [string] } , [string] : { } } [EOL] self . assertEqual ( await library . get_command ( self . data , [string] , [string] , self . permissions ) , CustomCommand ( [string] , [string] , [string] ) ) [EOL] self . data . getChatCommands . assert_called_once_with ( [string] , [string] ) [EOL] [EOL] async def test_moderator ( self ) : [EOL] self . permissions [ [string] ] = True [EOL] self . data . getChatCommands . return_value = { [string] : { [string] : [string] } , [string] : { } } [EOL] self . assertEqual ( await library . get_command ( self . data , [string] , [string] , self . permissions ) , CustomCommand ( [string] , [string] , [string] ) ) [EOL] self . data . getChatCommands . assert_called_once_with ( [string] , [string] ) [EOL] [EOL] async def test_broadcaster ( self ) : [EOL] self . permissions [ [string] ] = True [EOL] self . data . getChatCommands . return_value = { [string] : { [string] : [string] } , [string] : { } } [EOL] self . assertEqual ( await library . get_command ( self . data , [string] , [string] , self . permissions ) , CustomCommand ( [string] , [string] , [string] ) ) [EOL] self . data . getChatCommands . assert_called_once_with ( [string] , [string] ) [EOL] [EOL] async def test_globalMod ( self ) : [EOL] self . permissions [ [string] ] = True [EOL] self . data . getChatCommands . return_value = { [string] : { [string] : [string] } , [string] : { } } [EOL] self . assertEqual ( await library . get_command ( self . data , [string] , [string] , self . permissions ) , CustomCommand ( [string] , [string] , [string] ) ) [EOL] self . data . getChatCommands . assert_called_once_with ( [string] , [string] ) [EOL] [EOL] async def test_admin ( self ) : [EOL] self . permissions [ [string] ] = True [EOL] self . data . getChatCommands . return_value = { [string] : { [string] : [string] } , [string] : { } } [EOL] self . assertEqual ( await library . get_command ( self . data , [string] , [string] , self . permissions ) , CustomCommand ( [string] , [string] , [string] ) ) [EOL] self . data . getChatCommands . assert_called_once_with ( [string] , [string] ) [EOL] [EOL] async def test_staff ( self ) : [EOL] self . permissions [ [string] ] = True [EOL] self . data . getChatCommands . return_value = { [string] : { [string] : [string] } , [string] : { } } [EOL] self . assertEqual ( await library . get_command ( self . data , [string] , [string] , self . permissions ) , CustomCommand ( [string] , [string] , [string] ) ) [EOL] self . data . getChatCommands . assert_called_once_with ( [string] , [string] ) [EOL] [EOL] async def test_owner ( self ) : [EOL] self . permissions [ [string] ] = True [EOL] self . data . getChatCommands . return_value = { [string] : { [string] : [string] } , [string] : { } } [EOL] self . assertEqual ( await library . get_command ( self . data , [string] , [string] , self . permissions ) , CustomCommand ( [string] , [string] , [string] ) ) [EOL] self . data . getChatCommands . assert_called_once_with ( [string] , [string] ) [EOL] [EOL] async def test_global_command ( self ) : [EOL] self . data . getChatCommands . return_value = { [string] : { } , [string] : { [string] : [string] } } [EOL] self . assertEqual ( await library . get_command ( self . data , [string] , [string] , self . permissions ) , CustomCommand ( [string] , [string] , [string] ) ) [EOL] self . data . getChatCommands . assert_called_once_with ( [string] , [string] ) [EOL] [EOL] async def test_public_global_command ( self ) : [EOL] self . data . getChatCommands . return_value = { [string] : { [string] : [string] } , [string] : { [string] : [string] } } [EOL] self . assertEqual ( await library . get_command ( self . data , [string] , [string] , self . permissions ) , CustomCommand ( [string] , [string] , [string] ) ) [EOL] self . data . getChatCommands . assert_called_once_with ( [string] , [string] ) [EOL] [EOL] async def test_no_access ( self ) : [EOL] self . data . getChatCommands . return_value = { [string] : { [string] : [string] } , [string] : { } } [EOL] self . assertIsNone ( await library . get_command ( self . data , [string] , [string] , self . permissions ) ) [EOL] self . data . getChatCommands . assert_called_once_with ( [string] , [string] ) [EOL] [EOL] async def test_multiple_permissions ( self ) : [EOL] self . permissions [ [string] ] = True [EOL] self . permissions [ [string] ] = True [EOL] self . permissions [ [string] ] = True [EOL] self . permissions [ [string] ] = True [EOL] self . data . getChatCommands . return_value = { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { } } [EOL] self . assertEqual ( await library . get_command ( self . data , [string] , [string] , self . permissions ) , CustomCommand ( [string] , [string] , [string] ) ) [EOL] self . data . getChatCommands . assert_called_once_with ( [string] , [string] ) [EOL] [EOL] async def test_multiple_permissions_with_global ( self ) : [EOL] self . permissions [ [string] ] = True [EOL] self . permissions [ [string] ] = True [EOL] self . permissions [ [string] ] = True [EOL] self . permissions [ [string] ] = True [EOL] self . data . getChatCommands . return_value = { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } } [EOL] self . assertEqual ( await library . get_command ( self . data , [string] , [string] , self . permissions ) , CustomCommand ( [string] , [string] , [string] ) ) [EOL] self . data . getChatCommands . assert_called_once_with ( [string] , [string] ) [EOL] [EOL] async def test_multiple_permissions_with_channel ( self ) : [EOL] self . permissions [ [string] ] = True [EOL] self . permissions [ [string] ] = True [EOL] self . permissions [ [string] ] = True [EOL] self . permissions [ [string] ] = True [EOL] self . data . getChatCommands . return_value = { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } } [EOL] self . assertEqual ( await library . get_command ( self . data , [string] , [string] , self . permissions ) , CustomCommand ( [string] , [string] , [string] ) ) [EOL] self . data . getChatCommands . assert_called_once_with ( [string] , [string] ) [EOL] [EOL] [EOL] class TestCustomCommandLibraryCustomCreateMessages ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . now = datetime ( [number] , [number] , [number] ) [EOL] self . tags = IrcMessageTags ( ) [EOL] self . channel = Mock ( spec = Channel ) [EOL] self . channel . channel = [string] [EOL] self . data = Mock ( spec = CacheStore ) [EOL] self . data . hasFeature . return_value = False [EOL] self . database = Mock ( spec = DatabaseMain ) [EOL] self . database . hasFeature . return_value = False [EOL] self . permissions = MagicMock ( spec = ChatPermissionSet ) [EOL] self . command = CustomCommand ( [string] , [string] , [string] ) [EOL] self . args = ChatCommandArgs ( self . data , self . channel , self . tags , [string] , Message ( [string] ) , self . permissions , self . now ) [EOL] [EOL] patcher = patch ( library . __name__ + [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_split = patcher . start ( ) [EOL] [EOL] patcher = patch ( library . __name__ + [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_convert = patcher . start ( ) [EOL] self . mock_convert . side_effect = lambda args : args . default [EOL] [EOL] patcher = patch ( library . __name__ + [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_format = patcher . start ( ) [EOL] self . mock_format . side_effect = lambda string , format , has : string [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_list = patcher . start ( ) [EOL] self . mock_list . postProcess . return_value = [ ] [EOL] [EOL] async def test_blank ( self ) : [EOL] self . mock_split . return_value = [ ] [EOL] self . assertEqual ( await library . create_messages ( self . command , self . args ) , [ [string] ] ) [EOL] self . data . hasFeature . assert_called_once_with ( [string] , [string] ) [EOL] self . mock_split . assert_called_once_with ( [string] ) [EOL] self . assertFalse ( self . mock_convert . called ) [EOL] self . assertFalse ( self . mock_format . called ) [EOL] [EOL] async def test_plain ( self ) : [EOL] self . mock_split . return_value = [ CustomFieldParts ( [string] , None , None , None , None , None , None , None ) ] [EOL] self . assertEqual ( await library . create_messages ( self . command , self . args ) , [ [string] ] ) [EOL] self . data . hasFeature . assert_called_once_with ( [string] , [string] ) [EOL] self . mock_split . assert_called_once_with ( [string] ) [EOL] self . assertFalse ( self . mock_convert . called ) [EOL] self . assertFalse ( self . mock_format . called ) [EOL] [EOL] async def test_field ( self ) : [EOL] self . mock_split . return_value = [ CustomFieldParts ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) ] [EOL] self . assertEqual ( await library . create_messages ( self . command , self . args ) , [ [string] ] ) [EOL] self . data . hasFeature . assert_called_once_with ( [string] , [string] ) [EOL] self . mock_split . assert_called_once_with ( [string] ) [EOL] self . mock_convert . assert_called_once_with ( TypeMatch ( CustomFieldArgs ) ) [EOL] self . mock_format . assert_called_once_with ( [string] , [string] , False ) [EOL] [EOL] async def test_plain_plain ( self ) : [EOL] [docstring] [EOL] self . mock_split . return_value = [ CustomFieldParts ( [string] , None , None , None , None , None , None , None ) , CustomFieldParts ( [string] , None , None , None , None , None , None , None ) , ] [EOL] self . assertEqual ( await library . create_messages ( self . command , self . args ) , [ [string] ] ) [EOL] self . data . hasFeature . assert_called_once_with ( [string] , [string] ) [EOL] self . mock_split . assert_called_once_with ( [string] ) [EOL] self . assertFalse ( self . mock_convert . called ) [EOL] self . assertFalse ( self . mock_format . called ) [EOL] [EOL] async def test_plain_field ( self ) : [EOL] self . mock_split . return_value = [ CustomFieldParts ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) ] [EOL] self . assertEqual ( await library . create_messages ( self . command , self . args ) , [ [string] ] ) [EOL] self . data . hasFeature . assert_called_once_with ( [string] , [string] ) [EOL] self . mock_split . assert_called_once_with ( [string] ) [EOL] self . mock_convert . assert_called_once_with ( TypeMatch ( CustomFieldArgs ) ) [EOL] self . mock_format . assert_called_once_with ( [string] , [string] , False ) [EOL] [EOL] async def test_field_field ( self ) : [EOL] self . mock_split . return_value = [ CustomFieldParts ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) , CustomFieldParts ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) , ] [EOL] self . assertEqual ( await library . create_messages ( self . command , self . args ) , [ [string] ] ) [EOL] self . data . hasFeature . assert_called_once_with ( [string] , [string] ) [EOL] self . mock_split . assert_called_once_with ( [string] ) [EOL] self . mock_convert . assert_has_calls ( [ call ( TypeMatch ( CustomFieldArgs ) ) ] * [number] ) [EOL] self . assertEqual ( self . mock_format . call_args_list , [ call ( [string] , [string] , False ) , call ( [string] , [string] , False ) ] ) [EOL] [EOL] async def test_field_plain ( self ) : [EOL] self . mock_split . return_value = [ CustomFieldParts ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) , CustomFieldParts ( [string] , None , None , None , None , None , None , None ) ] [EOL] self . assertEqual ( await library . create_messages ( self . command , self . args ) , [ [string] ] ) [EOL] self . data . hasFeature . assert_called_once_with ( [string] , [string] ) [EOL] self . mock_split . assert_called_once_with ( [string] ) [EOL] self . mock_convert . assert_called_once_with ( TypeMatch ( CustomFieldArgs ) ) [EOL] self . mock_format . assert_called_once_with ( [string] , [string] , False ) [EOL] [EOL] async def test_plain_field_plain ( self ) : [EOL] self . mock_split . return_value = [ CustomFieldParts ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) , CustomFieldParts ( [string] , None , None , None , None , None , None , None ) ] [EOL] self . assertEqual ( await library . create_messages ( self . command , self . args ) , [ [string] ] ) [EOL] self . data . hasFeature . assert_called_once_with ( [string] , [string] ) [EOL] self . mock_split . assert_called_once_with ( [string] ) [EOL] self . mock_convert . assert_called_once_with ( TypeMatch ( CustomFieldArgs ) ) [EOL] self . mock_format . assert_called_once_with ( [string] , [string] , False ) [EOL] [EOL] async def test_plain_field_field ( self ) : [EOL] self . mock_split . return_value = [ CustomFieldParts ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) , CustomFieldParts ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) , ] [EOL] self . assertEqual ( await library . create_messages ( self . command , self . args ) , [ [string] ] ) [EOL] self . data . hasFeature . assert_called_once_with ( [string] , [string] ) [EOL] self . mock_split . assert_called_once_with ( [string] ) [EOL] self . mock_convert . assert_has_calls ( [ call ( TypeMatch ( CustomFieldArgs ) ) ] * [number] ) [EOL] self . assertEqual ( self . mock_format . call_args_list , [ call ( [string] , [string] , False ) , call ( [string] , [string] , False ) ] ) [EOL] [EOL] async def test_field_plain_field ( self ) : [EOL] self . mock_split . return_value = [ CustomFieldParts ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) , CustomFieldParts ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) , ] [EOL] self . assertEqual ( await library . create_messages ( self . command , self . args ) , [ [string] ] ) [EOL] self . data . hasFeature . assert_called_once_with ( [string] , [string] ) [EOL] self . mock_split . assert_called_once_with ( [string] ) [EOL] self . mock_convert . assert_has_calls ( [ call ( TypeMatch ( CustomFieldArgs ) ) ] * [number] ) [EOL] self . assertEqual ( self . mock_format . call_args_list , [ call ( [string] , [string] , False ) , call ( [string] , [string] , False ) ] ) [EOL] [EOL] async def test_field_field_plain ( self ) : [EOL] self . mock_split . return_value = [ CustomFieldParts ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) , CustomFieldParts ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) , CustomFieldParts ( [string] , None , None , None , None , None , None , None ) ] [EOL] self . assertEqual ( await library . create_messages ( self . command , self . args ) , [ [string] ] ) [EOL] self . data . hasFeature . assert_called_once_with ( [string] , [string] ) [EOL] self . mock_split . assert_called_once_with ( [string] ) [EOL] self . mock_convert . assert_has_calls ( [ call ( TypeMatch ( CustomFieldArgs ) ) ] * [number] ) [EOL] self . assertEqual ( self . mock_format . call_args_list , [ call ( [string] , [string] , False ) , call ( [string] , [string] , False ) ] ) [EOL] [EOL] async def test_split_except ( self ) : [EOL] self . mock_split . side_effect = ValueError [EOL] self . assertEqual ( await library . create_messages ( self . command , self . args ) , [ [string] ] ) [EOL] self . mock_split . assert_called_once_with ( [string] ) [EOL] self . assertFalse ( self . mock_convert . called ) [EOL] self . assertFalse ( self . mock_format . called ) [EOL] [EOL] async def test_convert_except ( self ) : [EOL] self . mock_convert . side_effect = Exception [EOL] self . mock_split . return_value = [ CustomFieldParts ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) ] [EOL] self . assertEqual ( await library . create_messages ( self . command , self . args ) , [ [string] ] ) [EOL] self . mock_split . assert_called_once_with ( [string] ) [EOL] self . mock_convert . assert_called_once_with ( TypeMatch ( CustomFieldArgs ) ) [EOL] self . assertFalse ( self . mock_format . called ) [EOL] [EOL] async def test_format_except ( self ) : [EOL] self . mock_format . side_effect = Exception [EOL] self . mock_split . return_value = [ CustomFieldParts ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) ] [EOL] self . assertEqual ( await library . create_messages ( self . command , self . args ) , [ [string] ] ) [EOL] self . mock_split . assert_called_once_with ( [string] ) [EOL] self . mock_convert . assert_called_once_with ( TypeMatch ( CustomFieldArgs ) ) [EOL] self . mock_format . assert_called_once_with ( [string] , [string] , False ) [EOL] [EOL] async def test_post_process ( self ) : [EOL] async def process ( args ) : [EOL] args . messages [ [number] ] = [string] [EOL] mock_process = CoroutineMock ( spec = process , side_effect = process ) [EOL] self . mock_list . postProcess . return_value = [ mock_process ] [EOL] self . mock_split . return_value = [ ] [EOL] self . assertEqual ( await library . create_messages ( self . command , self . args ) , [ [string] ] ) [EOL] mock_process . assert_called_once_with ( TypeMatch ( CustomProcessArgs ) ) [EOL] [EOL] async def test_split_except_post_process ( self ) : [EOL] async def process ( args ) : [EOL] args . messages [ [number] ] = [string] [EOL] mock_process = CoroutineMock ( spec = process , side_effect = process ) [EOL] self . mock_list . postProcess = [ mock_process ] [EOL] self . mock_split . side_effect = ValueError [EOL] self . assertEqual ( await library . create_messages ( self . command , self . args ) , [ [string] ] ) [EOL] self . mock_split . assert_called_once_with ( [string] ) [EOL] self . assertFalse ( self . mock_convert . called ) [EOL] self . assertFalse ( self . mock_format . called ) [EOL] self . assertFalse ( mock_process . called ) [EOL] [EOL] [EOL] class TestCustomCommandLibraryCustomGetActionCommand ( unittest . TestCase ) : [EOL] def test ( self ) : [EOL] message = Message ( [string] ) [EOL] self . assertIsNone ( library . parse_action_message ( message , [string] ) ) [EOL] [EOL] def test_1_arg ( self ) : [EOL] message = Message ( [string] ) [EOL] self . assertIsNone ( library . parse_action_message ( message , [string] ) ) [EOL] [EOL] def test_2_args ( self ) : [EOL] message = Message ( [string] ) [EOL] self . assertIsNone ( library . parse_action_message ( message , [string] ) ) [EOL] [EOL] def test_3_args ( self ) : [EOL] message = Message ( [string] ) [EOL] self . assertEqual ( library . parse_action_message ( message , [string] ) , CommandActionTokens ( [string] , [string] , [string] , [string] , [string] ) ) [EOL] [EOL] def test_4_args ( self ) : [EOL] message = Message ( [string] ) [EOL] self . assertEqual ( library . parse_action_message ( message , [string] ) , CommandActionTokens ( [string] , [string] , [string] , [string] , [string] ) ) [EOL] [EOL] def test_5_args ( self ) : [EOL] message = Message ( [string] ) [EOL] self . assertEqual ( library . parse_action_message ( message , [string] ) , CommandActionTokens ( [string] , [string] , [string] , [string] , [string] ) ) [EOL] [EOL] def test_wrong_level ( self ) : [EOL] message = Message ( [string] ) [EOL] self . assertIsNone ( library . parse_action_message ( message , [string] ) ) [EOL] [EOL] def test_wrong_level_2_args ( self ) : [EOL] message = Message ( [string] ) [EOL] self . assertEqual ( library . parse_action_message ( message , [string] ) , CommandActionTokens ( [string] , [string] , [string] , [string] , [string] ) ) [EOL] [EOL] def test_level_2_args ( self ) : [EOL] message = Message ( [string] ) [EOL] self . assertIsNone ( library . parse_action_message ( message , [string] ) ) [EOL] [EOL] def test_level_3_args ( self ) : [EOL] message = Message ( [string] ) [EOL] self . assertEqual ( library . parse_action_message ( message , [string] ) , CommandActionTokens ( [string] , [string] , [string] , [string] , [string] ) ) [EOL] [EOL] def test_level_4_args ( self ) : [EOL] message = Message ( [string] ) [EOL] self . assertEqual ( library . parse_action_message ( message , [string] ) , CommandActionTokens ( [string] , [string] , [string] , [string] , [string] ) ) [EOL] [EOL] def test_level_5_args ( self ) : [EOL] message = Message ( [string] ) [EOL] self . assertEqual ( library . parse_action_message ( message , [string] ) , CommandActionTokens ( [string] , [string] , [string] , [string] , [string] ) ) [EOL] [EOL] def test_level_unknown ( self ) : [EOL] message = Message ( [string] ) [EOL] self . assertEqual ( library . parse_action_message ( message , [string] ) , CommandActionTokens ( [string] , [string] , None , [string] , [string] ) ) [EOL] [EOL] def test_level_blank ( self ) : [EOL] for level in [ [string] , [string] , [string] , [string] , [string] ] : [EOL] message = Message ( [string] % level ) [EOL] self . assertEqual ( library . parse_action_message ( message , [string] ) , CommandActionTokens ( [string] , [string] , [string] , [string] , [string] ) , level ) [EOL] [EOL] def test_level_subcriber ( self ) : [EOL] for level in [ [string] , [string] ] : [EOL] message = Message ( [string] % level ) [EOL] self . assertEqual ( library . parse_action_message ( message , [string] ) , CommandActionTokens ( [string] , [string] , [string] , [string] , [string] ) , level ) [EOL] [EOL] def test_level_moderator ( self ) : [EOL] for level in [ [string] , [string] ] : [EOL] message = Message ( [string] % level ) [EOL] self . assertEqual ( library . parse_action_message ( message , [string] ) , CommandActionTokens ( [string] , [string] , [string] , [string] , [string] ) , level ) [EOL] [EOL] def test_level_broadcaster ( self ) : [EOL] for level in [ [string] , [string] , [string] ] : [EOL] message = Message ( [string] % level ) [EOL] self . assertEqual ( library . parse_action_message ( message , [string] ) , CommandActionTokens ( [string] , [string] , [string] , [string] , [string] ) , level ) [EOL] [EOL] def test_level_global_moderator ( self ) : [EOL] for level in [ [string] , [string] , [string] , [string] ] : [EOL] message = Message ( [string] % level ) [EOL] self . assertEqual ( library . parse_action_message ( message , [string] ) , CommandActionTokens ( [string] , [string] , [string] , [string] , [string] ) , level ) [EOL] [EOL] def test_level_admin ( self ) : [EOL] for level in [ [string] , [string] ] : [EOL] message = Message ( [string] % level ) [EOL] self . assertEqual ( library . parse_action_message ( message , [string] ) , CommandActionTokens ( [string] , [string] , [string] , [string] , [string] ) , level ) [EOL] [EOL] def test_level_staff ( self ) : [EOL] for level in [ [string] , [string] ] : [EOL] message = Message ( [string] % level ) [EOL] self . assertEqual ( library . parse_action_message ( message , [string] ) , CommandActionTokens ( [string] , [string] , [string] , [string] , [string] ) , level ) [EOL] [EOL] def test_level_owner ( self ) : [EOL] for level in [ [string] , [string] , [string] ] : [EOL] message = Message ( [string] % level ) [EOL] self . assertEqual ( library . parse_action_message ( message , [string] ) , CommandActionTokens ( [string] , [string] , [string] , [string] , [string] ) , level ) [EOL] [EOL] [EOL] class TestCustomCommandLibraryCustomSplitMessage ( unittest . TestCase ) : [EOL] def test ( self ) : [EOL] self . assertEqual ( library . split_message ( [string] ) , [ ] ) [EOL] [EOL] def test_plain ( self ) : [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , None , None , None , None , None , None , None ) ] ) [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , None , None , None , None , None , None , None ) ] ) [EOL] [EOL] def test_field ( self ) : [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , None , None , None , None , [string] ) ] ) [EOL] [EOL] def test_field_format ( self ) : [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , [string] , None , None , None , None , [string] ) ] ) [EOL] [EOL] def test_field_prefix ( self ) : [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , [string] , None , None , None , [string] ) ] ) [EOL] [EOL] def test_field_suffix ( self ) : [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , None , [string] , None , None , [string] ) ] ) [EOL] [EOL] def test_field_param ( self ) : [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , None , None , [string] , None , [string] ) ] ) [EOL] [EOL] def test_field_default ( self ) : [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , None , None , None , [string] , [string] ) ] ) [EOL] [EOL] def test_field_prefix_suffix ( self ) : [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , [string] , [string] , None , None , [string] ) ] ) [EOL] [EOL] def test_field_format_default ( self ) : [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , [string] , None , None , None , [string] , [string] ) ] ) [EOL] [EOL] def test_field_format_prefix_suffix_param_default ( self ) : [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) ] ) [EOL] [EOL] def test_field_blank ( self ) : [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , None , None , None , None , [string] ) ] ) [EOL] [EOL] def test_field_format_prefix_suffix_param_default_all_blank ( self ) : [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) ] ) [EOL] [EOL] def test_plain_field ( self ) : [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , None , None , None , None , [string] ) ] ) [EOL] [EOL] def test_field_plain ( self ) : [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , None , None , None , None , [string] ) , CustomFieldParts ( [string] , None , None , None , None , None , None , None ) , ] ) [EOL] [EOL] def test_field_field ( self ) : [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , None , None , None , None , [string] ) , CustomFieldParts ( [string] , [string] , None , None , None , None , None , [string] ) , ] ) [EOL] [EOL] def test_plain_field_plain_field_plain ( self ) : [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , None , None , None , None , [string] ) , CustomFieldParts ( [string] , [string] , None , None , None , None , None , [string] ) , CustomFieldParts ( [string] , None , None , None , None , None , None , None ) , ] ) [EOL] [EOL] def test_plain_escape ( self ) : [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , None , None , None , None , None , None , None ) ] ) [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , None , None , None , None , None , None , None ) ] ) [EOL] [EOL] def test_field_escape ( self ) : [EOL] [docstring] [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , None , None , None , None , [string] ) ] ) [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , None , None , None , None , [string] ) ] ) [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , None , None , None , None , [string] ) ] ) [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , None , None , None , None , [string] ) ] ) [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , None , None , None , None , [string] ) ] ) [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , None , None , None , None , [string] ) ] ) [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , None , None , None , None , [string] ) ] ) [EOL] [EOL] def test_format_escape ( self ) : [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , [string] , None , None , None , None , [string] ) ] ) [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , [string] , None , None , None , None , [string] ) ] ) [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , [string] , None , None , None , None , [string] ) ] ) [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , [string] , None , None , None , None , [string] ) ] ) [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , [string] , None , None , None , None , [string] ) ] ) [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , [string] , None , None , None , None , [string] ) ] ) [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , [string] , None , None , None , None , [string] ) ] ) [EOL] [EOL] def test_prefix_escape ( self ) : [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , [string] , None , None , None , [string] ) ] ) [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , [string] , None , None , None , [string] ) ] ) [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , [string] , None , None , None , [string] ) ] ) [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , [string] , None , None , None , [string] ) ] ) [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , [string] , None , None , None , [string] ) ] ) [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , [string] , None , None , None , [string] ) ] ) [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , [string] , None , None , None , [string] ) ] ) [EOL] [EOL] def test_suffix_escape ( self ) : [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , None , [string] , None , None , [string] ) ] ) [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , None , [string] , None , None , [string] ) ] ) [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , None , [string] , None , None , [string] ) ] ) [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , None , [string] , None , None , [string] ) ] ) [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , None , [string] , None , None , [string] ) ] ) [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , None , [string] , None , None , [string] ) ] ) [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , None , [string] , None , None , [string] ) ] ) [EOL] [EOL] def test_param_escape ( self ) : [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , None , None , [string] , None , [string] ) ] ) [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , None , None , [string] , None , [string] ) ] ) [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , None , None , [string] , None , [string] ) ] ) [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , None , None , [string] , None , [string] ) ] ) [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , None , None , [string] , None , [string] ) ] ) [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , None , None , [string] , None , [string] ) ] ) [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , None , None , [string] , None , [string] ) ] ) [EOL] [EOL] def test_default_escape ( self ) : [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , None , None , None , [string] , [string] ) ] ) [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , None , None , None , [string] , [string] ) ] ) [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , None , None , None , [string] , [string] ) ] ) [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , None , None , None , [string] , [string] ) ] ) [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , None , None , None , [string] , [string] ) ] ) [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , None , None , None , [string] , [string] ) ] ) [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , None , None , None , None , [string] , [string] ) ] ) [EOL] [EOL] def test_multiple_escape ( self ) : [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) ] ) [EOL] self . assertEqual ( library . split_message ( [string] ) , [ CustomFieldParts ( [string] , None , None , None , None , None , None , None ) ] ) [EOL] [EOL] def test_unpaired_brace ( self ) : [EOL] self . assertRaises ( ValueError , library . split_message , [string] ) [EOL] self . assertRaises ( ValueError , library . split_message , [string] ) [EOL] self . assertRaises ( ValueError , library . split_message , [string] ) [EOL] self . assertRaises ( ValueError , library . split_message , [string] ) [EOL] self . assertRaises ( ValueError , library . split_message , [string] ) [EOL] self . assertRaises ( ValueError , library . split_message , [string] ) [EOL] self . assertRaises ( ValueError , library . split_message , [string] ) [EOL] self . assertRaises ( ValueError , library . split_message , [string] ) [EOL] self . assertRaises ( ValueError , library . split_message , [string] ) [EOL] self . assertRaises ( ValueError , library . split_message , [string] ) [EOL] self . assertRaises ( ValueError , library . split_message , [string] ) [EOL] self . assertRaises ( ValueError , library . split_message , [string] ) [EOL] self . assertRaises ( ValueError , library . split_message , [string] ) [EOL] self . assertRaises ( ValueError , library . split_message , [string] ) [EOL] [EOL] [EOL] class TestCustomCommandLibraryCustomConvertField ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . args = CustomFieldArgs ( [string] , None , None , None , None , Message ( [string] ) , Mock ( spec = Channel ) , [string] , Mock ( spec = ChatPermissionSet ) , datetime ( [number] , [number] , [number] ) ) [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_list = patcher . start ( ) [EOL] self . mock_list . fields . return_value = [ ] [EOL] [EOL] async def test_no_fields ( self ) : [EOL] self . assertIsNone ( await library . convert_field ( self . args ) ) [EOL] [EOL] async def test_none ( self ) : [EOL] async def convert ( args ) : [EOL] pass [EOL] mock_convert = CoroutineMock ( spec = convert , return_value = None ) [EOL] self . mock_list . fields . return_value = [ mock_convert ] [EOL] self . assertIsNone ( await library . convert_field ( self . args ) ) [EOL] self . assertEqual ( mock_convert . call_count , [number] ) [EOL] [EOL] async def test ( self ) : [EOL] async def convert ( args ) : [EOL] pass [EOL] mock_convert = CoroutineMock ( spec = convert , return_value = [string] ) [EOL] self . mock_list . fields . return_value = [ mock_convert ] [EOL] self . assertEqual ( await library . convert_field ( self . args ) , [string] ) [EOL] self . assertEqual ( mock_convert . call_count , [number] ) [EOL] [EOL] [EOL] class TestCustomCommandLibraryCustomFormat ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_format = patcher . start ( ) [EOL] [EOL] def test_no_format ( self ) : [EOL] self . assertEqual ( library . format ( [string] , [string] , False ) , [string] ) [EOL] self . assertFalse ( self . mock_format . called ) [EOL] [EOL] def test_none_format ( self ) : [EOL] self . assertEqual ( library . format ( [string] , None , False ) , [string] ) [EOL] self . assertFalse ( self . mock_format . called ) [EOL] [EOL] def test_with_format ( self ) : [EOL] self . mock_format . return_value = [string] [EOL] self . assertEqual ( library . format ( [string] , [string] , True ) , [string] ) [EOL] self . mock_format . assert_called_once_with ( [string] , [string] ) [EOL]	
from datetime import timedelta [EOL] [EOL] from asynctest . mock import patch [EOL] [EOL] from tests . unittest . base_channel import TestChannel [EOL] from tests . unittest . mock_class import IterableMatch , StrContains [EOL] [EOL] [comment] [EOL] from lib . data import CustomCommand , CommandActionTokens [EOL] from lib . data . message import Message [EOL] from . . import library [EOL] from . . import channel [EOL] [EOL] [EOL] class TestCustomCommandChannelCustomCommands ( TestChannel ) : [EOL] def setUp ( self ) : [EOL] super ( ) . setUp ( ) [EOL] self . args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . permissions . moderator = True [EOL] self . permissions . chatModerator = False [EOL] self . command = CustomCommand ( [string] , [string] , [string] ) [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_config = patcher . start ( ) [EOL] self . mock_config . customMessageCooldown = [number] [EOL] self . mock_config . customMessageUserCooldown = [number] [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_channel_cooldown = patcher . start ( ) [EOL] self . mock_channel_cooldown . return_value = False [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_user_cooldown = patcher . start ( ) [EOL] self . mock_user_cooldown . return_value = False [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_timeout = patcher . start ( ) [EOL] [EOL] patcher = patch ( library . __name__ + [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_command = patcher . start ( ) [EOL] self . mock_command . return_value = self . command [EOL] [EOL] patcher = patch ( library . __name__ + [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_messages = patcher . start ( ) [EOL] self . mock_messages . return_value = [ ] [EOL] [EOL] async def test_nocustom ( self ) : [EOL] self . features . append ( [string] ) [EOL] self . assertIs ( await channel . customCommands ( self . args ) , False ) [EOL] self . assertFalse ( self . mock_command . called ) [EOL] self . assertFalse ( self . mock_channel_cooldown . called ) [EOL] self . assertFalse ( self . mock_user_cooldown . called ) [EOL] self . assertFalse ( self . mock_messages . called ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] self . assertFalse ( self . mock_timeout . called ) [EOL] [EOL] async def test_no_command ( self ) : [EOL] self . mock_command . return_value = None [EOL] self . assertIs ( await channel . customCommands ( self . args ) , False ) [EOL] self . mock_command . assert_called_once_with ( self . data , [string] , [string] , self . permissions ) [EOL] self . assertFalse ( self . mock_messages . called ) [EOL] self . assertFalse ( self . mock_channel_cooldown . called ) [EOL] self . assertFalse ( self . mock_user_cooldown . called ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] self . assertFalse ( self . mock_timeout . called ) [EOL] [EOL] async def test ( self ) : [EOL] self . assertIs ( await channel . customCommands ( self . args ) , True ) [EOL] self . mock_command . assert_called_once_with ( self . data , [string] , [string] , self . permissions ) [EOL] self . mock_channel_cooldown . assert_called_once_with ( self . args , timedelta ( seconds = [number] ) , [string] , [string] ) [EOL] self . mock_user_cooldown . assert_called_once_with ( self . args , timedelta ( seconds = [number] ) , [string] , [string] ) [EOL] self . mock_messages . assert_called_once_with ( self . command , self . args ) [EOL] self . channel . send . assert_called_once_with ( [ ] ) [EOL] self . assertFalse ( self . mock_timeout . called ) [EOL] [EOL] async def test_channel_cooldown ( self ) : [EOL] self . mock_channel_cooldown . return_value = True [EOL] self . assertIs ( await channel . customCommands ( self . args ) , False ) [EOL] self . mock_command . assert_called_once_with ( self . data , [string] , [string] , self . permissions ) [EOL] self . mock_channel_cooldown . assert_called_once_with ( self . args , timedelta ( seconds = [number] ) , [string] , [string] ) [EOL] self . assertFalse ( self . mock_user_cooldown . called ) [EOL] self . assertFalse ( self . mock_messages . called ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] self . assertFalse ( self . mock_timeout . called ) [EOL] [EOL] async def test_user_cooldown ( self ) : [EOL] self . mock_user_cooldown . return_value = True [EOL] self . assertIs ( await channel . customCommands ( self . args ) , False ) [EOL] self . mock_command . assert_called_once_with ( self . data , [string] , [string] , self . permissions ) [EOL] self . mock_channel_cooldown . assert_called_once_with ( self . args , timedelta ( seconds = [number] ) , [string] , [string] ) [EOL] self . mock_user_cooldown . assert_called_once_with ( self . args , timedelta ( seconds = [number] ) , [string] , [string] ) [EOL] self . assertFalse ( self . mock_messages . called ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] self . assertFalse ( self . mock_timeout . called ) [EOL] [EOL] async def test_channel_moderator ( self ) : [EOL] self . permissions . chatModerator = True [EOL] self . assertIs ( await channel . customCommands ( self . args ) , True ) [EOL] self . mock_command . assert_called_once_with ( self . data , [string] , [string] , self . permissions ) [EOL] self . mock_channel_cooldown . assert_called_once_with ( self . args , timedelta ( seconds = [number] ) , [string] , [string] ) [EOL] self . mock_user_cooldown . assert_called_once_with ( self . args , timedelta ( seconds = [number] ) , [string] , [string] ) [EOL] self . mock_messages . assert_called_once_with ( self . command , self . args ) [EOL] self . channel . send . assert_called_once_with ( [ ] ) [EOL] self . mock_timeout . assert_called_once_with ( self . channel , [string] , [ ] , [string] , [string] ) [EOL] [EOL] [EOL] class TestCustomCommandChannelCustomCommand ( TestChannel ) : [EOL] def setUp ( self ) : [EOL] super ( ) . setUp ( ) [EOL] [EOL] patcher = patch ( channel . __name__ + [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_process = patcher . start ( ) [EOL] [EOL] async def test_command ( self ) : [EOL] self . assertIs ( await channel . commandCommand ( self . args ) , False ) [EOL] self . features . append ( [string] ) [EOL] self . permissionSet [ [string] ] = True [EOL] self . assertIs ( await channel . commandCommand ( self . args ) , False ) [EOL] self . assertFalse ( self . mock_process . called ) [EOL] self . features . clear ( ) [EOL] self . mock_process . return_value = True [EOL] self . assertIs ( await channel . commandCommand ( self . args ) , True ) [EOL] self . mock_process . assert_called_once_with ( self . args , [string] ) [EOL] [EOL] async def test_global ( self ) : [EOL] self . assertIs ( await channel . commandGlobal ( self . args ) , False ) [EOL] self . assertFalse ( self . mock_process . called ) [EOL] self . permissions . inOwnerChannel = True [EOL] self . permissionSet [ [string] ] = True [EOL] self . mock_process . return_value = True [EOL] self . assertIs ( await channel . commandGlobal ( self . args ) , True ) [EOL] self . mock_process . assert_called_once_with ( self . args , [string] ) [EOL] [EOL] [EOL] class TestCustomCommandChannelCustomProcessCommand ( TestChannel ) : [EOL] def setUp ( self ) : [EOL] super ( ) . setUp ( ) [EOL] self . message = Message ( [string] ) [EOL] self . args = self . args . _replace ( message = self . message ) [EOL] self . broadcaster = [string] [EOL] [EOL] patcher = patch ( library . __name__ + [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_input = patcher . start ( ) [EOL] self . mock_input . return_value = None [EOL] [EOL] async def test_false ( self ) : [EOL] message = Message ( [string] ) [EOL] self . assertIs ( await channel . process_command ( self . args . _replace ( message = message ) , self . broadcaster ) , False ) [EOL] self . assertFalse ( self . mock_input . called ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] async def test ( self ) : [EOL] self . assertIs ( await channel . process_command ( self . args , self . broadcaster ) , False ) [EOL] self . mock_input . assert_called_once_with ( self . message , self . broadcaster ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] async def test_level_access ( self ) : [EOL] self . mock_input . return_value = CommandActionTokens ( [string] , self . broadcaster , None , [string] , [string] ) [EOL] self . assertIs ( await channel . process_command ( self . args , self . broadcaster ) , True ) [EOL] self . mock_input . assert_called_once_with ( self . message , self . broadcaster ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( self . args . nick , [string] ) ) [EOL] [EOL] async def test_level_permission ( self ) : [EOL] self . mock_input . return_value = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . assertIs ( await channel . process_command ( self . args , self . broadcaster ) , True ) [EOL] self . mock_input . assert_called_once_with ( self . message , self . broadcaster ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( self . args . nick , [string] , [string] ) ) [EOL] [EOL] async def test_level_permission_wrong ( self ) : [EOL] self . mock_input . return_value = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . assertIs ( await channel . process_command ( self . args , self . broadcaster ) , True ) [EOL] self . mock_input . assert_called_once_with ( self . message , self . broadcaster ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( self . args . nick , [string] ) ) [EOL] [EOL] async def test_no_action ( self ) : [EOL] self . mock_input . return_value = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . assertIs ( await channel . process_command ( self . args , self . broadcaster ) , False ) [EOL] self . mock_input . assert_called_once_with ( self . message , self . broadcaster ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] @ patch ( channel . __name__ + [string] ) async def test_add ( self , mock_insert ) : [EOL] mock_insert . return_value = True [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . mock_input . return_value = input [EOL] self . assertIs ( await channel . process_command ( self . args , self . broadcaster ) , True ) [EOL] self . mock_input . assert_called_once_with ( self . message , self . broadcaster ) [EOL] mock_insert . assert_called_once_with ( self . args , input ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] @ patch ( channel . __name__ + [string] ) async def test_insert ( self , mock_insert ) : [EOL] mock_insert . return_value = True [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . mock_input . return_value = input [EOL] self . assertIs ( await channel . process_command ( self . args , self . broadcaster ) , True ) [EOL] self . mock_input . assert_called_once_with ( self . message , self . broadcaster ) [EOL] mock_insert . assert_called_once_with ( self . args , input ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] @ patch ( channel . __name__ + [string] ) async def test_new ( self , mock_insert ) : [EOL] mock_insert . return_value = True [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . mock_input . return_value = input [EOL] self . assertIs ( await channel . process_command ( self . args , self . broadcaster ) , True ) [EOL] self . mock_input . assert_called_once_with ( self . message , self . broadcaster ) [EOL] mock_insert . assert_called_once_with ( self . args , input ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] @ patch ( channel . __name__ + [string] ) async def test_update ( self , mock_update ) : [EOL] mock_update . return_value = True [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . mock_input . return_value = input [EOL] self . assertIs ( await channel . process_command ( self . args , self . broadcaster ) , True ) [EOL] self . mock_input . assert_called_once_with ( self . message , self . broadcaster ) [EOL] mock_update . assert_called_once_with ( self . args , input ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] @ patch ( channel . __name__ + [string] ) async def test_edit ( self , mock_update ) : [EOL] mock_update . return_value = True [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . mock_input . return_value = input [EOL] self . assertIs ( await channel . process_command ( self . args , self . broadcaster ) , True ) [EOL] self . mock_input . assert_called_once_with ( self . message , self . broadcaster ) [EOL] mock_update . assert_called_once_with ( self . args , input ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] @ patch ( channel . __name__ + [string] ) async def test_replace ( self , mock_replace ) : [EOL] mock_replace . return_value = True [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . mock_input . return_value = input [EOL] self . assertIs ( await channel . process_command ( self . args , self . broadcaster ) , True ) [EOL] self . mock_input . assert_called_once_with ( self . message , self . broadcaster ) [EOL] mock_replace . assert_called_once_with ( self . args , input ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] @ patch ( channel . __name__ + [string] ) async def test_override ( self , mock_replace ) : [EOL] mock_replace . return_value = True [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . mock_input . return_value = input [EOL] self . assertIs ( await channel . process_command ( self . args , self . broadcaster ) , True ) [EOL] self . mock_input . assert_called_once_with ( self . message , self . broadcaster ) [EOL] mock_replace . assert_called_once_with ( self . args , input ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] @ patch ( channel . __name__ + [string] ) async def test_append ( self , mock_append ) : [EOL] mock_append . return_value = True [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . mock_input . return_value = input [EOL] self . assertIs ( await channel . process_command ( self . args , self . broadcaster ) , True ) [EOL] self . mock_input . assert_called_once_with ( self . message , self . broadcaster ) [EOL] mock_append . assert_called_once_with ( self . args , input ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] @ patch ( channel . __name__ + [string] ) async def test_del ( self , mock_delete ) : [EOL] mock_delete . return_value = True [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . mock_input . return_value = input [EOL] self . assertIs ( await channel . process_command ( self . args , self . broadcaster ) , True ) [EOL] self . mock_input . assert_called_once_with ( self . message , self . broadcaster ) [EOL] mock_delete . assert_called_once_with ( self . args , input ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] @ patch ( channel . __name__ + [string] ) async def test_delete ( self , mock_delete ) : [EOL] mock_delete . return_value = True [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . mock_input . return_value = input [EOL] self . assertIs ( await channel . process_command ( self . args , self . broadcaster ) , True ) [EOL] self . mock_input . assert_called_once_with ( self . message , self . broadcaster ) [EOL] mock_delete . assert_called_once_with ( self . args , input ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] @ patch ( channel . __name__ + [string] ) async def test_rem ( self , mock_delete ) : [EOL] mock_delete . return_value = True [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . mock_input . return_value = input [EOL] self . assertIs ( await channel . process_command ( self . args , self . broadcaster ) , True ) [EOL] self . mock_input . assert_called_once_with ( self . message , self . broadcaster ) [EOL] mock_delete . assert_called_once_with ( self . args , input ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] @ patch ( channel . __name__ + [string] ) async def test_remove ( self , mock_delete ) : [EOL] mock_delete . return_value = True [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . mock_input . return_value = input [EOL] self . assertIs ( await channel . process_command ( self . args , self . broadcaster ) , True ) [EOL] self . mock_input . assert_called_once_with ( self . message , self . broadcaster ) [EOL] mock_delete . assert_called_once_with ( self . args , input ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] @ patch ( channel . __name__ + [string] ) async def test_property ( self , mock_property ) : [EOL] mock_property . return_value = True [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . mock_input . return_value = input [EOL] self . assertIs ( await channel . process_command ( self . args , self . broadcaster ) , True ) [EOL] self . mock_input . assert_called_once_with ( self . message , self . broadcaster ) [EOL] mock_property . assert_called_once_with ( self . args , input ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] @ patch ( channel . __name__ + [string] ) async def test_raw ( self , mock_raw ) : [EOL] mock_raw . return_value = True [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . mock_input . return_value = input [EOL] self . assertIs ( await channel . process_command ( self . args , self . broadcaster ) , True ) [EOL] self . mock_input . assert_called_once_with ( self . message , self . broadcaster ) [EOL] mock_raw . assert_called_once_with ( self . args , input ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] @ patch ( channel . __name__ + [string] ) async def test_original ( self , mock_raw ) : [EOL] mock_raw . return_value = True [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . mock_input . return_value = input [EOL] self . assertIs ( await channel . process_command ( self . args , self . broadcaster ) , True ) [EOL] self . mock_input . assert_called_once_with ( self . message , self . broadcaster ) [EOL] mock_raw . assert_called_once_with ( self . args , input ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] @ patch ( channel . __name__ + [string] ) async def test_level ( self , mock_level ) : [EOL] mock_level . return_value = True [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . mock_input . return_value = input [EOL] self . assertIs ( await channel . process_command ( self . args , self . broadcaster ) , True ) [EOL] self . mock_input . assert_called_once_with ( self . message , self . broadcaster ) [EOL] mock_level . assert_called_once_with ( self . args , input ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] @ patch ( channel . __name__ + [string] ) async def test_rename ( self , mock_rename ) : [EOL] mock_rename . return_value = True [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . mock_input . return_value = input [EOL] self . assertIs ( await channel . process_command ( self . args , self . broadcaster ) , True ) [EOL] self . mock_input . assert_called_once_with ( self . message , self . broadcaster ) [EOL] mock_rename . assert_called_once_with ( self . args , input ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] async def test_insert_command ( self ) : [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . data . insertCustomCommand . return_value = True [EOL] self . assertIs ( await channel . insert_command ( self . args , input ) , True ) [EOL] self . data . insertCustomCommand . assert_called_once_with ( self . broadcaster , [string] , [string] , [string] , [string] ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( self . args . nick , [string] , [string] , [string] ) ) [EOL] [EOL] async def test_insert_command_dberror ( self ) : [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . data . insertCustomCommand . return_value = False [EOL] self . assertIs ( await channel . insert_command ( self . args , input ) , True ) [EOL] self . data . insertCustomCommand . assert_called_once_with ( self . broadcaster , [string] , [string] , [string] , [string] ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( self . args . nick , [string] , [string] , [string] , [string] ) ) [EOL] [EOL] async def test_update_command ( self ) : [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . data . updateCustomCommand . return_value = True [EOL] self . assertIs ( await channel . update_command ( self . args , input ) , True ) [EOL] self . data . updateCustomCommand . assert_called_once_with ( self . broadcaster , [string] , [string] , [string] , [string] ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( self . args . nick , [string] , [string] , [string] ) ) [EOL] [EOL] async def test_update_command_dberror ( self ) : [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . data . updateCustomCommand . return_value = False [EOL] self . assertIs ( await channel . update_command ( self . args , input ) , True ) [EOL] self . data . updateCustomCommand . assert_called_once_with ( self . broadcaster , [string] , [string] , [string] , [string] ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( self . args . nick , [string] , [string] , [string] , [string] ) ) [EOL] [EOL] async def test_append_command ( self ) : [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . data . appendCustomCommand . return_value = True [EOL] self . assertIs ( await channel . append_command ( self . args , input ) , True ) [EOL] self . data . appendCustomCommand . assert_called_once_with ( self . broadcaster , [string] , [string] , [string] , [string] ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( self . args . nick , [string] , [string] , [string] ) ) [EOL] [EOL] async def test_append_command_dberror ( self ) : [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . data . appendCustomCommand . return_value = False [EOL] self . assertIs ( await channel . append_command ( self . args , input ) , True ) [EOL] self . data . appendCustomCommand . assert_called_once_with ( self . broadcaster , [string] , [string] , [string] , [string] ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( self . args . nick , [string] , [string] , [string] , [string] ) ) [EOL] [EOL] async def test_replace_command ( self ) : [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . data . replaceCustomCommand . return_value = True [EOL] self . assertIs ( await channel . replace_command ( self . args , input ) , True ) [EOL] self . data . replaceCustomCommand . assert_called_once_with ( self . broadcaster , [string] , [string] , [string] , [string] ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( self . args . nick , [string] , [string] , [string] ) ) [EOL] [EOL] async def test_replace_command_dberror ( self ) : [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . data . replaceCustomCommand . return_value = False [EOL] self . assertIs ( await channel . replace_command ( self . args , input ) , True ) [EOL] self . data . replaceCustomCommand . assert_called_once_with ( self . broadcaster , [string] , [string] , [string] , [string] ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( self . args . nick , [string] , [string] , [string] , [string] ) ) [EOL] [EOL] async def test_delete_command ( self ) : [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . data . deleteCustomCommand . return_value = True [EOL] self . assertIs ( await channel . delete_command ( self . args , input ) , True ) [EOL] self . data . deleteCustomCommand . assert_called_once_with ( self . broadcaster , [string] , [string] , [string] ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( self . args . nick , [string] , [string] , [string] ) ) [EOL] [EOL] async def test_delete_command_dberror ( self ) : [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . data . deleteCustomCommand . return_value = False [EOL] self . assertIs ( await channel . delete_command ( self . args , input ) , True ) [EOL] self . data . deleteCustomCommand . assert_called_once_with ( self . broadcaster , [string] , [string] , [string] ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( self . args . nick , [string] , [string] , [string] , [string] ) ) [EOL] [EOL] async def test_command_property_false ( self ) : [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . assertIs ( await channel . command_property ( self . args , input ) , False ) [EOL] self . permissionSet [ [string] ] = True [EOL] self . assertIs ( await channel . command_property ( self . args , input ) , False ) [EOL] self . assertFalse ( self . data . processCustomCommandProperty . called ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] @ patch ( [string] , autospec = True ) async def test_command_property_empty ( self , mock_list ) : [EOL] mock_list . properties . return_value = [ ] [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . permissionSet [ [string] ] = True [EOL] self . assertIs ( await channel . command_property ( self . args , input ) , True ) [EOL] self . assertFalse ( self . data . processCustomCommandProperty . called ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( self . args . nick , [string] , [string] , [string] , [string] ) ) [EOL] [EOL] @ patch ( [string] , autospec = True ) async def test_command_property ( self , mock_list ) : [EOL] mock_list . properties . return_value = [ [string] ] [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . data . processCustomCommandProperty . return_value = True [EOL] self . permissionSet [ [string] ] = True [EOL] self . assertIs ( await channel . command_property ( self . args , input ) , True ) [EOL] self . data . processCustomCommandProperty . assert_called_once_with ( self . broadcaster , [string] , [string] , [string] , [string] ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( self . args . nick , [string] , [string] , [string] , [string] ) ) [EOL] [EOL] @ patch ( [string] , autospec = True ) async def test_command_property_no_value ( self , mock_list ) : [EOL] mock_list . properties . return_value = [ [string] ] [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . data . processCustomCommandProperty . return_value = True [EOL] self . permissionSet [ [string] ] = True [EOL] self . assertIs ( await channel . command_property ( self . args , input ) , True ) [EOL] self . data . processCustomCommandProperty . assert_called_once_with ( self . broadcaster , [string] , [string] , [string] , None ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( self . args . nick , [string] , [string] , [string] ) ) [EOL] [EOL] @ patch ( [string] , autospec = True ) async def test_command_property_dberror ( self , mock_list ) : [EOL] mock_list . properties . return_value = [ [string] ] [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . data . processCustomCommandProperty . return_value = False [EOL] self . permissionSet [ [string] ] = True [EOL] self . assertIs ( await channel . command_property ( self . args , input ) , True ) [EOL] self . data . processCustomCommandProperty . assert_called_once_with ( self . broadcaster , [string] , [string] , [string] , [string] ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( self . args . nick , [string] , [string] , [string] ) ) [EOL] [EOL] @ patch ( [string] ) @ patch ( [string] ) async def test_raw_command ( self , mock_whisper , mock_config ) : [EOL] mock_config . messageLimit = [number] [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . data . getCustomCommand . return_value = [string] [EOL] self . assertIs ( await channel . raw_command ( self . args , input ) , True ) [EOL] self . data . getCustomCommand . assert_called_once_with ( self . broadcaster , [string] , [string] ) [EOL] mock_whisper . assert_called_once_with ( [string] , IterableMatch ( [string] ) ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] @ patch ( [string] ) @ patch ( [string] ) async def test_raw_command_long ( self , mock_whisper , mock_config ) : [EOL] mock_config . messageLimit = [number] [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . data . getCustomCommand . return_value = ( [string] ) [EOL] self . assertIs ( await channel . raw_command ( self . args , input ) , True ) [EOL] self . data . getCustomCommand . assert_called_once_with ( self . broadcaster , [string] , [string] ) [EOL] mock_whisper . assert_called_once_with ( [string] , IterableMatch ( [string] , [string] ) ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] @ patch ( [string] ) @ patch ( [string] ) async def test_raw_command_not_exist ( self , mock_whisper , mock_config ) : [EOL] mock_config . messageLimit = [number] [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . data . getCustomCommand . return_value = None [EOL] self . assertIs ( await channel . raw_command ( self . args , input ) , True ) [EOL] self . data . getCustomCommand . assert_called_once_with ( self . broadcaster , [string] , [string] ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( self . args . nick , [string] , [string] , [string] ) ) [EOL] self . assertFalse ( mock_whisper . called ) [EOL] [EOL] async def test_level_command ( self ) : [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . data . levelCustomCommand . return_value = True [EOL] self . assertIs ( await channel . level_command ( self . args , input ) , True ) [EOL] self . data . levelCustomCommand . assert_called_once_with ( self . broadcaster , [string] , [string] , [string] , [string] ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( self . args . nick , [string] , [string] , [string] ) ) [EOL] [EOL] async def test_level_command_capitals ( self ) : [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . data . levelCustomCommand . return_value = True [EOL] self . assertIs ( await channel . level_command ( self . args , input ) , True ) [EOL] self . data . levelCustomCommand . assert_called_once_with ( self . broadcaster , [string] , [string] , [string] , [string] ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( self . args . nick , [string] , [string] , [string] ) ) [EOL] [EOL] async def test_level_command_unknown_level ( self ) : [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . data . levelCustomCommand . return_value = True [EOL] self . assertIs ( await channel . level_command ( self . args , input ) , True ) [EOL] self . assertFalse ( self . data . levelCustomCommand . called ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( self . args . nick , [string] , [string] , [string] ) ) [EOL] [EOL] async def test_level_command_dberror ( self ) : [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . data . levelCustomCommand . return_value = False [EOL] self . assertIs ( await channel . level_command ( self . args , input ) , True ) [EOL] self . data . levelCustomCommand . assert_called_once_with ( self . broadcaster , [string] , [string] , [string] , [string] ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( self . args . nick , [string] , [string] , [string] , [string] ) ) [EOL] [EOL] async def test_rename_command ( self ) : [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . data . renameCustomCommand . return_value = True [EOL] self . assertIs ( await channel . rename_command ( self . args , input ) , True ) [EOL] self . data . renameCustomCommand . assert_called_once_with ( self . broadcaster , [string] , [string] , [string] , [string] ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( self . args . nick , [string] , [string] , [string] , [string] ) ) [EOL] [EOL] async def test_rename_command_multiple ( self ) : [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . data . renameCustomCommand . return_value = True [EOL] self . assertIs ( await channel . rename_command ( self . args , input ) , True ) [EOL] self . data . renameCustomCommand . assert_called_once_with ( self . broadcaster , [string] , [string] , [string] , [string] ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( self . args . nick , [string] , [string] , [string] , [string] ) ) [EOL] [EOL] async def test_rename_command_blank ( self ) : [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . assertIs ( await channel . rename_command ( self . args , input ) , True ) [EOL] self . assertFalse ( self . data . renameCustomCommand . called ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( self . args . nick , [string] , [string] , [string] ) ) [EOL] [EOL] async def test_rename_command_dberror ( self ) : [EOL] input = CommandActionTokens ( [string] , self . broadcaster , [string] , [string] , [string] ) [EOL] self . data . renameCustomCommand . return_value = False [EOL] self . assertIs ( await channel . rename_command ( self . args , input ) , True ) [EOL] self . data . renameCustomCommand . assert_called_once_with ( self . broadcaster , [string] , [string] , [string] , [string] ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( self . args . nick , [string] , [string] , [string] , [string] , [string] ) ) [EOL]	
import math [EOL] import unittest [EOL] [EOL] from datetime import datetime , time , timedelta , tzinfo [EOL] [EOL] from asynctest . mock import patch [EOL] [EOL] from tests . unittest . base_custom import TestCustomField [EOL] [EOL] [comment] [EOL] from lib . data import timezones [EOL] from lib . data . timedelta import format [EOL] from . . custom import countdown [EOL] [EOL] [EOL] class TimeZone ( tzinfo ) : [EOL] def __init__ ( self , offset ) : [EOL] self . offset = offset [EOL] [EOL] def utcoffset ( self , dt ) : [EOL] return timedelta ( seconds = self . offset ) [EOL] [EOL] def dst ( self , dt ) : [EOL] return timedelta ( ) [EOL] [EOL] [EOL] class TestCustomCommandCustomCountdownParse ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] [EOL] patcher = patch ( countdown . __name__ + [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_timezones = patcher . start ( ) [EOL] self . mock_timezones . abbreviations = { [string] : TimeZone ( [number] ) , [string] : TimeZone ( [number] ) , [string] : TimeZone ( [number] ) , [string] : TimeZone ( [number] ) , [string] : TimeZone ( [number] ) , [string] : TimeZone ( - [number] * [number] ) , [string] : TimeZone ( [number] * [number] ) } [EOL] self . mock_timezones . utc = TimeZone ( [number] ) [EOL] [EOL] def test ( self ) : [EOL] self . assertIsNone ( countdown . parse_date_string ( [string] ) ) [EOL] [EOL] def test_time_of_day ( self ) : [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , None , True ) ) [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , None , True ) ) [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , None , True ) ) [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , None , True ) ) [EOL] self . assertIsNone ( countdown . parse_date_string ( [string] ) ) [EOL] self . assertIsNone ( countdown . parse_date_string ( [string] ) ) [EOL] self . assertIsNone ( countdown . parse_date_string ( [string] ) ) [EOL] self . assertIsNone ( countdown . parse_date_string ( [string] ) ) [EOL] [EOL] def test_time_of_day_seconds ( self ) : [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , None , True ) ) [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , None , True ) ) [EOL] self . assertIsNone ( countdown . parse_date_string ( [string] ) ) [EOL] [EOL] def test_time_of_day_seconds_microseconds ( self ) : [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , None , True ) ) [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , None , True ) ) [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , None , True ) ) [EOL] self . assertIsNone ( countdown . parse_date_string ( [string] ) ) [EOL] self . assertIsNone ( countdown . parse_date_string ( [string] ) ) [EOL] [EOL] def test_time_of_day_meridiem ( self ) : [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , None , False ) ) [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , None , False ) ) [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , None , False ) ) [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , None , False ) ) [EOL] self . assertIsNone ( countdown . parse_date_string ( [string] ) ) [EOL] self . assertIsNone ( countdown . parse_date_string ( [string] ) ) [EOL] self . assertIsNone ( countdown . parse_date_string ( [string] ) ) [EOL] self . assertIsNone ( countdown . parse_date_string ( [string] ) ) [EOL] self . assertIsNone ( countdown . parse_date_string ( [string] ) ) [EOL] self . assertIsNone ( countdown . parse_date_string ( [string] ) ) [EOL] [EOL] def test_time_of_day_seconds_meridiem ( self ) : [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , None , False ) ) [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , None , False ) ) [EOL] self . assertIsNone ( countdown . parse_date_string ( [string] ) ) [EOL] [EOL] def test_time_of_day_seconds_microseconds_meridiem ( self ) : [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , None , False ) ) [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , None , False ) ) [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , None , False ) ) [EOL] self . assertIsNone ( countdown . parse_date_string ( [string] ) ) [EOL] self . assertIsNone ( countdown . parse_date_string ( [string] ) ) [EOL] [EOL] def test_time_of_day_timezone ( self ) : [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , None , True ) ) [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , None , True ) ) [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , None , True ) ) [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , self . mock_timezones . abbreviations [ [string] ] ) , None , None , False ) ) [EOL] self . assertIsNone ( countdown . parse_date_string ( [string] ) ) [EOL] [EOL] def test_day_of_week_time_of_day ( self ) : [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , countdown . SUNDAY , None , True ) ) [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , countdown . MONDAY , None , True ) ) [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , countdown . TUESDAY , None , True ) ) [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , countdown . WEDNESDAY , None , True ) ) [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , countdown . THURSDAY , None , True ) ) [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , countdown . FRIDAY , None , True ) ) [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , countdown . SATURDAY , None , True ) ) [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , countdown . SUNDAY , None , True ) ) [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , countdown . SUNDAY , None , True ) ) [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , countdown . SUNDAY , None , True ) ) [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , countdown . MONDAY , None , True ) ) [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , countdown . TUESDAY , None , True ) ) [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , countdown . WEDNESDAY , None , True ) ) [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , countdown . THURSDAY , None , True ) ) [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , countdown . FRIDAY , None , True ) ) [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , countdown . SATURDAY , None , True ) ) [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , countdown . SUNDAY , None , True ) ) [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , countdown . SUNDAY , None , True ) ) [EOL] self . assertIsNone ( countdown . parse_date_string ( [string] ) ) [EOL] [EOL] def test_negative_timezone_time_of_day ( self ) : [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , self . mock_timezones . abbreviations [ [string] ] ) , None , None , False ) ) [EOL] [EOL] def test_month_day_time_of_day ( self ) : [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , countdown . Date ( None , [number] , [number] ) , True ) ) [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , countdown . Date ( None , [number] , [number] ) , True ) ) [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , countdown . Date ( None , [number] , [number] ) , True ) ) [EOL] self . assertIsNone ( countdown . parse_date_string ( [string] ) ) [EOL] self . assertIsNone ( countdown . parse_date_string ( [string] ) ) [EOL] self . assertIsNone ( countdown . parse_date_string ( [string] ) ) [EOL] [EOL] def test_month_day_year_time_of_day ( self ) : [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , countdown . Date ( [number] , [number] , [number] ) , True ) ) [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , countdown . Date ( [number] , [number] , [number] ) , True ) ) [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , countdown . Date ( [number] , [number] , [number] ) , True ) ) [EOL] self . assertIsNone ( countdown . parse_date_string ( [string] ) ) [EOL] self . assertIsNone ( countdown . parse_date_string ( [string] ) ) [EOL] self . assertIsNone ( countdown . parse_date_string ( [string] ) ) [EOL] self . assertIsNone ( countdown . parse_date_string ( [string] ) ) [EOL] [EOL] def test_many ( self ) : [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , countdown . Date ( [number] , [number] , [number] ) , False ) ) [EOL] self . assertEqual ( countdown . parse_date_string ( [string] ) , countdown . DateTimeInstance ( time ( [number] , [number] , [number] , [number] , timezones . utc ) , countdown . WEDNESDAY , None , True ) ) [EOL] self . assertIsNone ( countdown . parse_date_string ( [string] ) ) [EOL] self . assertIsNone ( countdown . parse_date_string ( [string] ) ) [EOL] [EOL] [EOL] class TestCustomCommandCustomCountdownNextDatetime ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . now = datetime ( [number] , [number] , [number] , tzinfo = timezones . utc ) [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_timezones = patcher . start ( ) [EOL] self . mock_timezones . abbreviations = { [string] : TimeZone ( - [number] * [number] ) , [string] : TimeZone ( [number] * [number] ) } [EOL] self . mock_timezones . utc = TimeZone ( [number] ) [EOL] [EOL] def test_time_of_day ( self ) : [EOL] self . assertEqual ( countdown . next_datetime ( self . now , time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , None , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , timezones . utc ) , True ) ) [EOL] self . assertEqual ( countdown . next_datetime ( self . now , time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , None , False ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , timezones . utc ) , False ) ) [EOL] self . assertEqual ( countdown . next_datetime ( self . now , time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , None , False ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , timezones . utc ) , False ) ) [EOL] [EOL] def test_time_of_day_day_of_week ( self ) : [EOL] self . assertEqual ( countdown . next_datetime ( self . now , time ( [number] , [number] , [number] , [number] , timezones . utc ) , countdown . SUNDAY , None , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , timezones . utc ) , True ) ) [EOL] self . assertEqual ( countdown . next_datetime ( self . now , time ( [number] , [number] , [number] , [number] , timezones . utc ) , countdown . MONDAY , None , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , timezones . utc ) , True ) ) [EOL] self . assertEqual ( countdown . next_datetime ( self . now , time ( [number] , [number] , [number] , [number] , timezones . utc ) , countdown . TUESDAY , None , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , timezones . utc ) , True ) ) [EOL] self . assertEqual ( countdown . next_datetime ( self . now , time ( [number] , [number] , [number] , [number] , timezones . utc ) , countdown . WEDNESDAY , None , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , timezones . utc ) , True ) ) [EOL] self . assertEqual ( countdown . next_datetime ( self . now , time ( [number] , [number] , [number] , [number] , timezones . utc ) , countdown . THURSDAY , None , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , timezones . utc ) , True ) ) [EOL] self . assertEqual ( countdown . next_datetime ( self . now , time ( [number] , [number] , [number] , [number] , timezones . utc ) , countdown . FRIDAY , None , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , timezones . utc ) , True ) ) [EOL] self . assertEqual ( countdown . next_datetime ( self . now , time ( [number] , [number] , [number] , [number] , timezones . utc ) , countdown . SATURDAY , None , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , timezones . utc ) , True ) ) [EOL] [EOL] def test_time_of_day_day_of_week_timezone ( self ) : [EOL] self . assertEqual ( countdown . next_datetime ( self . now , time ( [number] , [number] , [number] , [number] , self . mock_timezones . abbreviations [ [string] ] ) , countdown . FRIDAY , None , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , timezones . utc ) , True ) ) [EOL] self . assertEqual ( countdown . next_datetime ( self . now , time ( [number] , [number] , [number] , [number] , self . mock_timezones . abbreviations [ [string] ] ) , countdown . SUNDAY , None , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , timezones . utc ) , True ) ) [EOL] [EOL] def test_time_of_day_month_day ( self ) : [EOL] self . assertEqual ( countdown . next_datetime ( self . now , time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , countdown . Date ( None , [number] , [number] ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , timezones . utc ) , True ) ) [EOL] self . assertEqual ( countdown . next_datetime ( self . now , time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , countdown . Date ( None , [number] , [number] ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , timezones . utc ) , True ) ) [EOL] [EOL] def test_time_of_day_year_month_day ( self ) : [EOL] self . assertIsNone ( countdown . next_datetime ( self . now , time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , countdown . Date ( [number] , [number] , [number] ) , True ) ) [EOL] self . assertEqual ( countdown . next_datetime ( self . now , time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , countdown . Date ( [number] , [number] , [number] ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , timezones . utc ) , True ) ) [EOL] [EOL] [EOL] class TesCustomCommandtCustomCountdownPastDatetime ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . now = datetime ( [number] , [number] , [number] , tzinfo = timezones . utc ) [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_timezones = patcher . start ( ) [EOL] self . mock_timezones . abbreviations = { [string] : TimeZone ( - [number] * [number] ) , [string] : TimeZone ( [number] * [number] ) } [EOL] self . mock_timezones . utc = TimeZone ( [number] ) [EOL] [EOL] def test_time_of_day ( self ) : [EOL] self . assertEqual ( countdown . past_datetime ( self . now , time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , None , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , timezones . utc ) , True ) ) [EOL] self . assertEqual ( countdown . past_datetime ( self . now , time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , None , False ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , timezones . utc ) , False ) ) [EOL] self . assertEqual ( countdown . past_datetime ( self . now , time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , None , False ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , timezones . utc ) , False ) ) [EOL] [EOL] def test_time_of_day_day_of_week ( self ) : [EOL] self . assertEqual ( countdown . past_datetime ( self . now , time ( [number] , [number] , [number] , [number] , timezones . utc ) , countdown . SUNDAY , None , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , timezones . utc ) , True ) ) [EOL] self . assertEqual ( countdown . past_datetime ( self . now , time ( [number] , [number] , [number] , [number] , timezones . utc ) , countdown . MONDAY , None , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , timezones . utc ) , True ) ) [EOL] self . assertEqual ( countdown . past_datetime ( self . now , time ( [number] , [number] , [number] , [number] , timezones . utc ) , countdown . TUESDAY , None , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , timezones . utc ) , True ) ) [EOL] self . assertEqual ( countdown . past_datetime ( self . now , time ( [number] , [number] , [number] , [number] , timezones . utc ) , countdown . WEDNESDAY , None , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , timezones . utc ) , True ) ) [EOL] self . assertEqual ( countdown . past_datetime ( self . now , time ( [number] , [number] , [number] , [number] , timezones . utc ) , countdown . THURSDAY , None , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , timezones . utc ) , True ) ) [EOL] self . assertEqual ( countdown . past_datetime ( self . now , time ( [number] , [number] , [number] , [number] , timezones . utc ) , countdown . FRIDAY , None , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , timezones . utc ) , True ) ) [EOL] self . assertEqual ( countdown . past_datetime ( self . now , time ( [number] , [number] , [number] , [number] , timezones . utc ) , countdown . SATURDAY , None , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , timezones . utc ) , True ) ) [EOL] [EOL] def test_time_of_day_day_of_week_timezone ( self ) : [EOL] self . assertEqual ( countdown . past_datetime ( self . now , time ( [number] , [number] , [number] , [number] , self . mock_timezones . abbreviations [ [string] ] ) , countdown . SATURDAY , None , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , timezones . utc ) , True ) ) [EOL] self . assertEqual ( countdown . past_datetime ( self . now , time ( [number] , [number] , [number] , [number] , self . mock_timezones . abbreviations [ [string] ] ) , countdown . SATURDAY , None , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , timezones . utc ) , True ) ) [EOL] [EOL] def test_time_of_day_month_day ( self ) : [EOL] self . assertEqual ( countdown . past_datetime ( self . now , time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , countdown . Date ( None , [number] , [number] ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , timezones . utc ) , True ) ) [EOL] self . assertEqual ( countdown . past_datetime ( self . now , time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , countdown . Date ( None , [number] , [number] ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , timezones . utc ) , True ) ) [EOL] [EOL] def test_time_of_day_year_month_day ( self ) : [EOL] self . assertEqual ( countdown . past_datetime ( self . now , time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , countdown . Date ( [number] , [number] , [number] ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , timezones . utc ) , True ) ) [EOL] self . assertIsNone ( countdown . past_datetime ( self . now , time ( [number] , [number] , [number] , [number] , timezones . utc ) , None , countdown . Date ( [number] , [number] , [number] ) , True ) ) [EOL] [EOL] [EOL] class TestCustomCommandCustomCountdownParseCooldown ( unittest . TestCase ) : [EOL] def test_percent ( self ) : [EOL] self . assertEqual ( countdown . parse_cooldown ( [string] ) , [number] ) [EOL] self . assertEqual ( countdown . parse_cooldown ( [string] ) , [number] ) [EOL] self . assertEqual ( countdown . parse_cooldown ( [string] ) , [number] ) [EOL] self . assertIsNone ( countdown . parse_cooldown ( [string] ) ) [EOL] self . assertIsNone ( countdown . parse_cooldown ( [string] ) ) [EOL] self . assertIsNone ( countdown . parse_cooldown ( [string] ) ) [EOL] [EOL] def test_weeks ( self ) : [EOL] self . assertEqual ( countdown . parse_cooldown ( [string] ) , timedelta ( weeks = [number] ) ) [EOL] self . assertEqual ( countdown . parse_cooldown ( [string] ) , timedelta ( weeks = [number] ) ) [EOL] self . assertEqual ( countdown . parse_cooldown ( [string] ) , timedelta ( weeks = [number] ) ) [EOL] self . assertEqual ( countdown . parse_cooldown ( [string] ) , timedelta ( weeks = [number] ) ) [EOL] [EOL] def test_days ( self ) : [EOL] self . assertEqual ( countdown . parse_cooldown ( [string] ) , timedelta ( days = [number] ) ) [EOL] self . assertEqual ( countdown . parse_cooldown ( [string] ) , timedelta ( days = [number] ) ) [EOL] self . assertEqual ( countdown . parse_cooldown ( [string] ) , timedelta ( days = [number] ) ) [EOL] self . assertEqual ( countdown . parse_cooldown ( [string] ) , timedelta ( days = [number] ) ) [EOL] [EOL] def test_hours ( self ) : [EOL] self . assertEqual ( countdown . parse_cooldown ( [string] ) , timedelta ( hours = [number] ) ) [EOL] self . assertEqual ( countdown . parse_cooldown ( [string] ) , timedelta ( hours = [number] ) ) [EOL] self . assertEqual ( countdown . parse_cooldown ( [string] ) , timedelta ( hours = [number] ) ) [EOL] self . assertIsNone ( countdown . parse_cooldown ( [string] ) ) [EOL] [EOL] def test_minutes ( self ) : [EOL] self . assertEqual ( countdown . parse_cooldown ( [string] ) , timedelta ( minutes = [number] ) ) [EOL] self . assertEqual ( countdown . parse_cooldown ( [string] ) , timedelta ( minutes = [number] ) ) [EOL] self . assertEqual ( countdown . parse_cooldown ( [string] ) , timedelta ( minutes = [number] ) ) [EOL] self . assertIsNone ( countdown . parse_cooldown ( [string] ) ) [EOL] [EOL] def test_seconds ( self ) : [EOL] self . assertEqual ( countdown . parse_cooldown ( [string] ) , timedelta ( seconds = [number] ) ) [EOL] self . assertEqual ( countdown . parse_cooldown ( [string] ) , timedelta ( seconds = [number] ) ) [EOL] self . assertEqual ( countdown . parse_cooldown ( [string] ) , timedelta ( seconds = [number] ) ) [EOL] self . assertIsNone ( countdown . parse_cooldown ( [string] ) ) [EOL] [EOL] def test_multiple ( self ) : [EOL] self . assertEqual ( countdown . parse_cooldown ( [string] ) , timedelta ( weeks = [number] , days = [number] ) ) [EOL] self . assertEqual ( countdown . parse_cooldown ( [string] ) , timedelta ( days = [number] , hours = [number] ) ) [EOL] self . assertEqual ( countdown . parse_cooldown ( [string] ) , timedelta ( hours = [number] , minutes = [number] ) ) [EOL] self . assertEqual ( countdown . parse_cooldown ( [string] ) , timedelta ( minutes = [number] , seconds = [number] ) ) [EOL] self . assertIsNone ( countdown . parse_cooldown ( [string] ) ) [EOL] self . assertIsNone ( countdown . parse_cooldown ( [string] ) ) [EOL] self . assertIsNone ( countdown . parse_cooldown ( [string] ) ) [EOL] self . assertIsNone ( countdown . parse_cooldown ( [string] ) ) [EOL] self . assertIsNone ( countdown . parse_cooldown ( [string] ) ) [EOL] self . assertEqual ( countdown . parse_cooldown ( [string] ) , timedelta ( ) ) [EOL] self . assertEqual ( countdown . parse_cooldown ( [string] ) , timedelta ( weeks = [number] , days = [number] , hours = [number] , minutes = [number] , seconds = [number] ) ) [EOL] self . assertEqual ( countdown . parse_cooldown ( [string] ) , timedelta ( weeks = [number] , days = [number] , hours = [number] , minutes = [number] , seconds = [number] ) ) [EOL] [EOL] [EOL] class TestCustomCommandCustomCountdownTestCooldown ( unittest . TestCase ) : [EOL] def test ( self ) : [EOL] self . assertEqual ( countdown . test_cooldown ( None , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) , [number] ) [EOL] [EOL] def test_timedelta ( self ) : [EOL] duration = timedelta ( hours = [number] ) [EOL] past = datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] future = datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] self . assertEqual ( countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) , - math . inf ) [EOL] self . assertEqual ( countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) , - [number] ) [EOL] self . assertEqual ( countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) , - [number] ) [EOL] self . assertEqual ( countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) , [number] ) [EOL] self . assertEqual ( countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) , [number] ) [EOL] self . assertEqual ( countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) , [number] ) [EOL] self . assertEqual ( countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) , [number] ) [EOL] self . assertEqual ( countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) , [number] ) [EOL] self . assertEqual ( countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) , math . inf ) [EOL] [EOL] def test_timedelta_over_half ( self ) : [EOL] duration = timedelta ( hours = [number] ) [EOL] past = datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] future = datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] self . assertEqual ( countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) , - math . inf ) [EOL] self . assertEqual ( countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) , - [number] ) [EOL] self . assertEqual ( countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) , - [number] ) [EOL] test = countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) [EOL] self . assertTrue ( math . isnan ( test ) , test ) [EOL] test = countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) [EOL] self . assertTrue ( math . isnan ( test ) , test ) [EOL] test = countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) [EOL] self . assertTrue ( math . isnan ( test ) , test ) [EOL] self . assertEqual ( countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) , [number] ) [EOL] self . assertEqual ( countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) , [number] ) [EOL] self . assertEqual ( countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) , math . inf ) [EOL] [EOL] def test_timedelta_over_full ( self ) : [EOL] duration = timedelta ( days = [number] ) [EOL] past = datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] future = datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] self . assertEqual ( countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) , - math . inf ) [EOL] test = countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) [EOL] self . assertTrue ( math . isnan ( test ) , test ) [EOL] test = countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) [EOL] self . assertTrue ( math . isnan ( test ) , test ) [EOL] test = countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) [EOL] self . assertTrue ( math . isnan ( test ) , test ) [EOL] self . assertEqual ( countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) , math . inf ) [EOL] [EOL] def test_float ( self ) : [EOL] duration = [number] / [number] [EOL] past = datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] future = datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] self . assertEqual ( countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) , - math . inf ) [EOL] self . assertEqual ( countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) , - [number] ) [EOL] self . assertEqual ( countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) , - [number] ) [EOL] self . assertEqual ( countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) , [number] ) [EOL] self . assertEqual ( countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) , [number] ) [EOL] self . assertEqual ( countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) , [number] ) [EOL] self . assertEqual ( countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) , [number] ) [EOL] self . assertEqual ( countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) , [number] ) [EOL] self . assertEqual ( countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) , math . inf ) [EOL] [EOL] def test_float_over_half ( self ) : [EOL] duration = [number] / [number] [EOL] past = datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] future = datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] self . assertEqual ( countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) , - math . inf ) [EOL] self . assertEqual ( countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) , - [number] ) [EOL] self . assertEqual ( countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) , - [number] ) [EOL] test = countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) [EOL] self . assertTrue ( math . isnan ( test ) , test ) [EOL] test = countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) [EOL] self . assertTrue ( math . isnan ( test ) , test ) [EOL] test = countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) [EOL] self . assertTrue ( math . isnan ( test ) , test ) [EOL] self . assertEqual ( countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) , [number] ) [EOL] self . assertEqual ( countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) , [number] ) [EOL] self . assertEqual ( countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) , math . inf ) [EOL] [EOL] def test_float_over_full ( self ) : [EOL] duration = [number] [EOL] past = datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] future = datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] self . assertEqual ( countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) , - math . inf ) [EOL] test = countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) [EOL] self . assertTrue ( math . isnan ( test ) , test ) [EOL] test = countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) [EOL] self . assertTrue ( math . isnan ( test ) , test ) [EOL] test = countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) [EOL] self . assertTrue ( math . isnan ( test ) , test ) [EOL] self . assertEqual ( countdown . test_cooldown ( duration , past , future , datetime ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) , math . inf ) [EOL] [EOL] [EOL] class TestCustomCommandCustomCountdownParseNextPastCooldown ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . now = datetime ( [number] , [number] , [number] , tzinfo = timezones . utc ) [EOL] [EOL] def test_blank ( self ) : [EOL] times = [string] [EOL] self . assertEqual ( countdown . parse_next_past_cooldown ( times , self . now ) , countdown . NextPastCooldown ( None , None , None ) ) [EOL] [EOL] def test ( self ) : [EOL] times = [string] [EOL] self . assertEqual ( countdown . parse_next_past_cooldown ( times , self . now ) , countdown . NextPastCooldown ( None , None , None ) ) [EOL] [EOL] def test_cooldown ( self ) : [EOL] times = [string] [EOL] self . assertEqual ( countdown . parse_next_past_cooldown ( times , self . now ) , countdown . NextPastCooldown ( None , None , None ) ) [EOL] [EOL] def test_single_exact_next ( self ) : [EOL] times = [string] [EOL] self . assertEqual ( countdown . parse_next_past_cooldown ( times , self . now ) , countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None , None ) ) [EOL] [EOL] def test_single_exact_past ( self ) : [EOL] times = [string] [EOL] self . assertEqual ( countdown . parse_next_past_cooldown ( times , self . now ) , countdown . NextPastCooldown ( None , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , False ) , None ) ) [EOL] [EOL] def test_multiple_exact ( self ) : [EOL] times = [string] [EOL] self . assertEqual ( countdown . parse_next_past_cooldown ( times , self . now ) , countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , False ) , [number] ) ) [EOL] [EOL] def test_hour_minute ( self ) : [EOL] times = [string] [EOL] self . assertEqual ( countdown . parse_next_past_cooldown ( times , self . now ) , countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , [number] ) ) [EOL] [EOL] def test_day_of_week ( self ) : [EOL] times = [string] [EOL] self . assertEqual ( countdown . parse_next_past_cooldown ( times , self . now ) , countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , [number] ) ) [EOL] [EOL] def test_month_day ( self ) : [EOL] times = [string] [EOL] self . assertEqual ( countdown . parse_next_past_cooldown ( times , self . now ) , countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , [number] ) ) [EOL] [EOL] def test_multiple ( self ) : [EOL] times = [string] [EOL] self . assertEqual ( countdown . parse_next_past_cooldown ( times , self . now ) , countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , False ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , [number] ) ) [EOL] [EOL] def test_multiple_2 ( self ) : [EOL] times = [string] [EOL] self . assertEqual ( countdown . parse_next_past_cooldown ( times , self . now ) , countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , False ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , [number] ) ) [EOL] [EOL] def test_hour_minute_cooldown ( self ) : [EOL] times = [string] [EOL] self . assertEqual ( countdown . parse_next_past_cooldown ( times , self . now ) , countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , [number] ) ) [EOL] [EOL] def test_cooldown_hour_minute ( self ) : [EOL] times = [string] [EOL] self . assertEqual ( countdown . parse_next_past_cooldown ( times , self . now ) , countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , [number] ) ) [EOL] [EOL] def test_cooldown_hour_minute_early_cooldown ( self ) : [EOL] times = [string] [EOL] self . assertEqual ( countdown . parse_next_past_cooldown ( times , self . now ) , countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , - [number] ) ) [EOL] [EOL] def test_cooldown_hour_minute_late_cooldown ( self ) : [EOL] times = [string] [EOL] self . assertEqual ( countdown . parse_next_past_cooldown ( times , self . now ) , countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , [number] ) ) [EOL] [EOL] def test_cooldown_hour_minute_overlap_cooldown ( self ) : [EOL] times = [string] [EOL] self . assertEqual ( countdown . parse_next_past_cooldown ( times , self . now ) , countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , math . nan ) ) [EOL] [EOL] def test_cooldown_hour_minute_multiple ( self ) : [EOL] times = [string] [EOL] self . assertEqual ( countdown . parse_next_past_cooldown ( times , self . now ) , countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , - [number] ) ) [EOL] [EOL] [EOL] class TestCustomCommandCustomCountdownFieldCountdown ( TestCustomField ) : [EOL] def setUp ( self ) : [EOL] super ( ) . setUp ( ) [EOL] self . args = self . args . _replace ( field = [string] , param = [string] ) [EOL] [EOL] patcher = patch ( countdown . __name__ + [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_parse = patcher . start ( ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( None , None , None ) [EOL] [EOL] async def test ( self ) : [EOL] self . args = self . args . _replace ( field = [string] ) [EOL] self . assertIsNone ( await countdown . fieldCountdown ( self . args ) ) [EOL] self . assertFalse ( self . mock_parse . called ) [EOL] [EOL] async def test_none_time ( self ) : [EOL] self . args = self . args . _replace ( param = None ) [EOL] self . assertIsNone ( await countdown . fieldCountdown ( self . args ) ) [EOL] self . assertFalse ( self . mock_parse . called ) [EOL] [EOL] async def test_invalid_time ( self ) : [EOL] self . assertIsNone ( await countdown . fieldCountdown ( self . args ) ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_default ( self ) : [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( None , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None ) [EOL] self . assertEqual ( await countdown . fieldCountdown ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_default_prefix_suffix ( self ) : [EOL] self . args = self . args . _replace ( prefix = [string] , suffix = [string] ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( None , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None ) [EOL] self . assertEqual ( await countdown . fieldCountdown ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_default_default ( self ) : [EOL] self . args = self . args . _replace ( default = [string] ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( None , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None ) [EOL] self . assertEqual ( await countdown . fieldCountdown ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_default_default_prefix_suffix ( self ) : [EOL] self . args = self . args . _replace ( default = [string] , prefix = [string] , suffix = [string] ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( None , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None ) [EOL] self . assertEqual ( await countdown . fieldCountdown ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_time ( self ) : [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None , None ) [EOL] self . assertEqual ( await countdown . fieldCountdown ( self . args ) , format ( timedelta ( days = [number] ) ) ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_time_prefix ( self ) : [EOL] self . args = self . args . _replace ( prefix = [string] ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None , None ) [EOL] self . assertEqual ( await countdown . fieldCountdown ( self . args ) , [string] + format ( timedelta ( days = [number] ) ) ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_time_prefix_blank ( self ) : [EOL] self . args = self . args . _replace ( prefix = [string] ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None , None ) [EOL] self . assertEqual ( await countdown . fieldCountdown ( self . args ) , format ( timedelta ( days = [number] ) ) ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_time_suffix ( self ) : [EOL] self . args = self . args . _replace ( suffix = [string] ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None , None ) [EOL] self . assertEqual ( await countdown . fieldCountdown ( self . args ) , format ( timedelta ( days = [number] ) ) + [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_time_suffix_blank ( self ) : [EOL] self . args = self . args . _replace ( suffix = [string] ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None , None ) [EOL] self . assertEqual ( await countdown . fieldCountdown ( self . args ) , format ( timedelta ( days = [number] ) ) ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_not_cooldown ( self ) : [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , [number] ) [EOL] self . assertEqual ( await countdown . fieldCountdown ( self . args ) , format ( timedelta ( days = [number] ) ) ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] self . mock_parse . reset_mock ( ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , [number] ) [EOL] self . assertEqual ( await countdown . fieldCountdown ( self . args ) , format ( timedelta ( days = [number] ) ) ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] self . mock_parse . reset_mock ( ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , math . inf ) [EOL] self . assertEqual ( await countdown . fieldCountdown ( self . args ) , format ( timedelta ( days = [number] ) ) ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_cooldown ( self ) : [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , - math . inf ) [EOL] self . assertEqual ( await countdown . fieldCountdown ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] self . mock_parse . reset_mock ( ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , - [number] ) [EOL] self . assertEqual ( await countdown . fieldCountdown ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] self . mock_parse . reset_mock ( ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , math . nan ) [EOL] self . assertEqual ( await countdown . fieldCountdown ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_cooldown_prefix_suffix ( self ) : [EOL] self . args = self . args . _replace ( prefix = [string] , suffix = [string] ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , - [number] ) [EOL] self . assertEqual ( await countdown . fieldCountdown ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_cooldown_default ( self ) : [EOL] self . args = self . args . _replace ( default = [string] ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , - [number] ) [EOL] self . assertEqual ( await countdown . fieldCountdown ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_cooldown_default_prefix_suffix ( self ) : [EOL] self . args = self . args . _replace ( default = [string] , prefix = [string] , suffix = [string] ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , - [number] ) [EOL] self . assertEqual ( await countdown . fieldCountdown ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] [EOL] class TestCustomCommandCustomCountdownFieldSince ( TestCustomField ) : [EOL] def setUp ( self ) : [EOL] super ( ) . setUp ( ) [EOL] self . args = self . args . _replace ( field = [string] , param = [string] ) [EOL] [EOL] patcher = patch ( countdown . __name__ + [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_parse = patcher . start ( ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( None , None , None ) [EOL] [EOL] async def test ( self ) : [EOL] self . args = self . args . _replace ( field = [string] ) [EOL] self . assertIsNone ( await countdown . fieldSince ( self . args ) ) [EOL] self . assertFalse ( self . mock_parse . called ) [EOL] [EOL] async def test_none_time ( self ) : [EOL] self . args = self . args . _replace ( param = None ) [EOL] self . assertIsNone ( await countdown . fieldSince ( self . args ) ) [EOL] self . assertFalse ( self . mock_parse . called ) [EOL] [EOL] async def test_invalid_time ( self ) : [EOL] self . assertIsNone ( await countdown . fieldSince ( self . args ) ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_default ( self ) : [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None , None ) [EOL] self . assertEqual ( await countdown . fieldSince ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_default_prefix_suffix ( self ) : [EOL] self . args = self . args . _replace ( prefix = [string] , suffix = [string] ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None , None ) [EOL] self . assertEqual ( await countdown . fieldSince ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_default_default ( self ) : [EOL] self . args = self . args . _replace ( default = [string] ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None , None ) [EOL] self . assertEqual ( await countdown . fieldSince ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_default_default_prefix_suffix ( self ) : [EOL] self . args = self . args . _replace ( default = [string] , prefix = [string] , suffix = [string] ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None , None ) [EOL] self . assertEqual ( await countdown . fieldSince ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_time ( self ) : [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( None , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None ) [EOL] self . assertEqual ( await countdown . fieldSince ( self . args ) , format ( timedelta ( days = [number] ) ) ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_time_prefix ( self ) : [EOL] self . args = self . args . _replace ( prefix = [string] ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( None , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None ) [EOL] self . assertEqual ( await countdown . fieldSince ( self . args ) , [string] + format ( timedelta ( days = [number] ) ) ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_time_prefix_blank ( self ) : [EOL] self . args = self . args . _replace ( prefix = [string] ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( None , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None ) [EOL] self . assertEqual ( await countdown . fieldSince ( self . args ) , format ( timedelta ( days = [number] ) ) ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_time_suffix ( self ) : [EOL] self . args = self . args . _replace ( suffix = [string] ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( None , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None ) [EOL] self . assertEqual ( await countdown . fieldSince ( self . args ) , format ( timedelta ( days = [number] ) ) + [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_time_suffix_blank ( self ) : [EOL] self . args = self . args . _replace ( suffix = [string] ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( None , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None ) [EOL] self . assertEqual ( await countdown . fieldSince ( self . args ) , format ( timedelta ( days = [number] ) ) ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_not_cooldown ( self ) : [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , [number] ) [EOL] self . assertEqual ( await countdown . fieldSince ( self . args ) , format ( timedelta ( days = [number] ) ) ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] self . mock_parse . reset_mock ( ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , - [number] ) [EOL] self . assertEqual ( await countdown . fieldSince ( self . args ) , format ( timedelta ( days = [number] ) ) ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] self . mock_parse . reset_mock ( ) [EOL] self . assertEqual ( await countdown . fieldSince ( self . args ) , format ( timedelta ( days = [number] ) ) ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , - math . inf ) [EOL] self . assertEqual ( await countdown . fieldSince ( self . args ) , format ( timedelta ( days = [number] ) ) ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_cooldown ( self ) : [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , math . inf ) [EOL] self . assertEqual ( await countdown . fieldSince ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] self . mock_parse . reset_mock ( ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , [number] ) [EOL] self . assertEqual ( await countdown . fieldSince ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] self . mock_parse . reset_mock ( ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , math . nan ) [EOL] self . assertEqual ( await countdown . fieldSince ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_cooldown_prefix_suffix ( self ) : [EOL] self . args = self . args . _replace ( prefix = [string] , suffix = [string] ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , [number] ) [EOL] self . assertEqual ( await countdown . fieldSince ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_cooldown_default ( self ) : [EOL] self . args = self . args . _replace ( default = [string] ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , [number] ) [EOL] self . assertEqual ( await countdown . fieldSince ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_cooldown_default_prefix_suffix ( self ) : [EOL] self . args = self . args . _replace ( default = [string] , prefix = [string] , suffix = [string] ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , [number] ) [EOL] self . assertEqual ( await countdown . fieldSince ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] [EOL] class TestCustomCommandCustomCountdownFieldNext ( TestCustomField ) : [EOL] def setUp ( self ) : [EOL] super ( ) . setUp ( ) [EOL] self . args = self . args . _replace ( field = [string] , param = [string] ) [EOL] [EOL] patcher = patch ( countdown . __name__ + [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_parse = patcher . start ( ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( None , None , None ) [EOL] [EOL] async def test ( self ) : [EOL] self . args = self . args . _replace ( field = [string] ) [EOL] self . assertIsNone ( await countdown . fieldNext ( self . args ) ) [EOL] self . assertFalse ( self . mock_parse . called ) [EOL] [EOL] async def test_none_time ( self ) : [EOL] self . args = self . args . _replace ( param = None ) [EOL] self . assertIsNone ( await countdown . fieldNext ( self . args ) ) [EOL] self . assertFalse ( self . mock_parse . called ) [EOL] [EOL] async def test_invalid_time ( self ) : [EOL] self . assertIsNone ( await countdown . fieldNext ( self . args ) ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_default ( self ) : [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( None , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None ) [EOL] self . assertEqual ( await countdown . fieldNext ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_default_prefix_suffix ( self ) : [EOL] self . args = self . args . _replace ( prefix = [string] , suffix = [string] ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( None , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None ) [EOL] self . assertEqual ( await countdown . fieldNext ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_default_default ( self ) : [EOL] self . args = self . args . _replace ( default = [string] ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( None , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None ) [EOL] self . assertEqual ( await countdown . fieldNext ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_default_default_prefix_suffix ( self ) : [EOL] self . args = self . args . _replace ( default = [string] , prefix = [string] , suffix = [string] ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( None , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None ) [EOL] self . assertEqual ( await countdown . fieldNext ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_time ( self ) : [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None , None ) [EOL] self . assertEqual ( await countdown . fieldNext ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_time_12_hour ( self ) : [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , False ) , None , None ) [EOL] self . assertEqual ( await countdown . fieldNext ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_future ( self ) : [EOL] self . args = self . args . _replace ( field = [string] ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None , None ) [EOL] self . assertEqual ( await countdown . fieldNext ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_time_prefix ( self ) : [EOL] self . args = self . args . _replace ( prefix = [string] ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None , None ) [EOL] self . assertEqual ( await countdown . fieldNext ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_time_prefix_blank ( self ) : [EOL] self . args = self . args . _replace ( prefix = [string] ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None , None ) [EOL] self . assertEqual ( await countdown . fieldNext ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_time_suffix ( self ) : [EOL] self . args = self . args . _replace ( suffix = [string] ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None , None ) [EOL] self . assertEqual ( await countdown . fieldNext ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_time_suffix_blank ( self ) : [EOL] self . args = self . args . _replace ( suffix = [string] ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None , None ) [EOL] self . assertEqual ( await countdown . fieldNext ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_cooldown ( self ) : [EOL] self . mock_parse . reset_mock ( ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , [number] ) [EOL] self . assertEqual ( await countdown . fieldNext ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] self . mock_parse . reset_mock ( ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , math . inf ) [EOL] self . assertEqual ( await countdown . fieldNext ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] self . mock_parse . reset_mock ( ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , [number] ) [EOL] self . assertEqual ( await countdown . fieldNext ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] self . mock_parse . reset_mock ( ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , math . nan ) [EOL] self . assertEqual ( await countdown . fieldNext ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] self . mock_parse . reset_mock ( ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , - [number] ) [EOL] self . assertEqual ( await countdown . fieldNext ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] self . mock_parse . reset_mock ( ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , - math . inf ) [EOL] self . assertEqual ( await countdown . fieldNext ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] [EOL] class TestCustomCommandCustomCountdownFieldPrevious ( TestCustomField ) : [EOL] def setUp ( self ) : [EOL] super ( ) . setUp ( ) [EOL] self . args = self . args . _replace ( field = [string] , param = [string] ) [EOL] [EOL] patcher = patch ( countdown . __name__ + [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_parse = patcher . start ( ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( None , None , None ) [EOL] [EOL] async def test ( self ) : [EOL] self . args = self . args . _replace ( field = [string] ) [EOL] self . assertIsNone ( await countdown . fieldPrevious ( self . args ) ) [EOL] self . assertFalse ( self . mock_parse . called ) [EOL] [EOL] async def test_none_time ( self ) : [EOL] self . args = self . args . _replace ( param = None ) [EOL] self . assertIsNone ( await countdown . fieldPrevious ( self . args ) ) [EOL] self . assertFalse ( self . mock_parse . called ) [EOL] [EOL] async def test_invalid_time ( self ) : [EOL] self . assertIsNone ( await countdown . fieldPrevious ( self . args ) ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_default ( self ) : [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None , None ) [EOL] self . assertEqual ( await countdown . fieldPrevious ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_default_prefix_suffix ( self ) : [EOL] self . args = self . args . _replace ( prefix = [string] , suffix = [string] ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None , None ) [EOL] self . assertEqual ( await countdown . fieldPrevious ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_default_default ( self ) : [EOL] self . args = self . args . _replace ( default = [string] ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None , None ) [EOL] self . assertEqual ( await countdown . fieldPrevious ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_default_default_prefix_suffix ( self ) : [EOL] self . args = self . args . _replace ( default = [string] , prefix = [string] , suffix = [string] ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None , None ) [EOL] self . assertEqual ( await countdown . fieldPrevious ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_time ( self ) : [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( None , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None ) [EOL] self . assertEqual ( await countdown . fieldPrevious ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_time_12_hour ( self ) : [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( None , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , False ) , None ) [EOL] self . assertEqual ( await countdown . fieldPrevious ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_past ( self ) : [EOL] self . args = self . args . _replace ( field = [string] ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( None , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None ) [EOL] self . assertEqual ( await countdown . fieldPrevious ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_prev ( self ) : [EOL] self . args = self . args . _replace ( field = [string] ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( None , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None ) [EOL] self . assertEqual ( await countdown . fieldPrevious ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_time_prefix ( self ) : [EOL] self . args = self . args . _replace ( prefix = [string] ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( None , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None ) [EOL] self . assertEqual ( await countdown . fieldPrevious ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_time_prefix_blank ( self ) : [EOL] self . args = self . args . _replace ( prefix = [string] ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( None , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None ) [EOL] self . assertEqual ( await countdown . fieldPrevious ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_time_suffix ( self ) : [EOL] self . args = self . args . _replace ( suffix = [string] ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( None , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None ) [EOL] self . assertEqual ( await countdown . fieldPrevious ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_time_suffix_blank ( self ) : [EOL] self . args = self . args . _replace ( suffix = [string] ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( None , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , None ) [EOL] self . assertEqual ( await countdown . fieldPrevious ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] [EOL] async def test_cooldown ( self ) : [EOL] self . mock_parse . reset_mock ( ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , [number] ) [EOL] self . assertEqual ( await countdown . fieldPrevious ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] self . mock_parse . reset_mock ( ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , math . inf ) [EOL] self . assertEqual ( await countdown . fieldPrevious ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] self . mock_parse . reset_mock ( ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , [number] ) [EOL] self . assertEqual ( await countdown . fieldPrevious ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] self . mock_parse . reset_mock ( ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , math . nan ) [EOL] self . assertEqual ( await countdown . fieldPrevious ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] self . mock_parse . reset_mock ( ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , - [number] ) [EOL] self . assertEqual ( await countdown . fieldPrevious ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL] self . mock_parse . reset_mock ( ) [EOL] self . mock_parse . return_value = countdown . NextPastCooldown ( countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , countdown . DateTime ( datetime ( [number] , [number] , [number] , [number] , [number] , tzinfo = timezones . utc ) , True ) , - math . inf ) [EOL] self . assertEqual ( await countdown . fieldPrevious ( self . args ) , [string] ) [EOL] self . assertTrue ( self . mock_parse . called ) [EOL]	
	0
import aiohttp [EOL] [EOL] from asynctest . mock import MagicMock , patch [EOL] [EOL] from tests . unittest . base_custom import TestCustomField [EOL] from lib . data . message import Message [EOL] from . . . custom import url [EOL] [EOL] [EOL] class TestCustomUrl ( TestCustomField ) : [EOL] def setUp ( self ) : [EOL] super ( ) . setUp ( ) [EOL] self . args = self . args . _replace ( field = [string] , nick = [string] , message = Message ( [string] ) , param = [string] ) [EOL] [EOL] self . mock_response = MagicMock ( spec = aiohttp . ClientResponse ) [EOL] self . mock_response . __aenter__ . return_value = self . mock_response [EOL] self . mock_response . __aexit__ . return_value = False [EOL] self . mock_response . status = [number] [EOL] self . mock_response . text . return_value = [string] [EOL] [EOL] self . mock_session = MagicMock ( spec = aiohttp . ClientSession ) [EOL] self . mock_session . __aenter__ . return_value = self . mock_session [EOL] self . mock_session . __aexit__ . return_value = False [EOL] self . mock_session . get . return_value = self . mock_response [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_clientsession = patcher . start ( ) [EOL] self . mock_clientsession . return_value = self . mock_session [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_config = patcher . start ( ) [EOL] self . mock_config . customMessageUrlTimeout = [number] [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_globals = patcher . start ( ) [EOL] self . mock_globals . pkgs = [ [string] ] [EOL] [EOL] async def test_query ( self ) : [EOL] self . args = self . args . _replace ( param = [string] ) [EOL] self . assertEqual ( await url . fieldUrl ( self . args ) , [string] ) [EOL] self . mock_session . get . assert_called_once_with ( [string] , timeout = [number] ) [EOL] [EOL] async def test_user ( self ) : [EOL] self . args = self . args . _replace ( param = [string] , nick = [string] ) [EOL] self . assertEqual ( await url . fieldUrl ( self . args ) , [string] ) [EOL] self . mock_session . get . assert_called_once_with ( [string] , timeout = [number] ) [EOL] [EOL] async def test_nick ( self ) : [EOL] self . args = self . args . _replace ( param = [string] , nick = [string] ) [EOL] self . assertEqual ( await url . fieldUrl ( self . args ) , [string] ) [EOL] self . mock_session . get . assert_called_once_with ( [string] , timeout = [number] ) [EOL] [EOL] async def test_broadcaster ( self ) : [EOL] self . args = self . args . _replace ( param = [string] ) [EOL] self . assertEqual ( await url . fieldUrl ( self . args ) , [string] ) [EOL] self . mock_session . get . assert_called_once_with ( [string] , timeout = [number] ) [EOL] [EOL] async def test_streamer ( self ) : [EOL] self . args = self . args . _replace ( param = [string] ) [EOL] self . assertEqual ( await url . fieldUrl ( self . args ) , [string] ) [EOL] self . mock_session . get . assert_called_once_with ( [string] , timeout = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
import asynctest [EOL] [EOL] import bot [comment] [EOL] [EOL] from asynctest . mock import Mock , patch [EOL] [EOL] from lib . cache import CacheStore [EOL] from lib . data . message import Message [EOL] from lib . helper import parser [EOL] from tests . unittest . mock_class import StrContains [EOL] from . . import library [EOL] [EOL] [EOL] def send ( messages ) : [EOL] pass [EOL] [EOL] [EOL] class TestFeatureLibrary ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . data = Mock ( spec = CacheStore ) [EOL] self . send = Mock ( spec = send ) [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_feature = patcher . start ( ) [EOL] self . mock_feature . features . return_value = { [string] : [string] , [string] : None } [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_response = patcher . start ( ) [EOL] [EOL] patcher = patch ( library . __name__ + [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_add = patcher . start ( ) [EOL] [EOL] patcher = patch ( library . __name__ + [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_remove = patcher . start ( ) [EOL] [EOL] async def test_add ( self ) : [EOL] self . mock_add . return_value = True [EOL] self . mock_response . return_value = parser . Yes [EOL] self . assertIs ( await library . feature ( self . data , [string] , Message ( [string] ) , self . send ) , True ) [EOL] self . assertFalse ( self . send . called ) [EOL] self . assertTrue ( self . mock_response . called ) [EOL] self . mock_add . assert_called_once_with ( self . data , [string] , [string] , self . send ) [EOL] self . assertFalse ( self . mock_remove . called ) [EOL] [EOL] async def test_remove ( self ) : [EOL] self . mock_remove . return_value = True [EOL] self . mock_response . return_value = parser . No [EOL] self . assertIs ( await library . feature ( self . data , [string] , Message ( [string] ) , self . send ) , True ) [EOL] self . assertFalse ( self . send . called ) [EOL] self . assertTrue ( self . mock_response . called ) [EOL] self . mock_remove . assert_called_once_with ( self . data , [string] , [string] , self . send ) [EOL] self . assertFalse ( self . mock_add . called ) [EOL] [EOL] async def test_not_existing_feature ( self ) : [EOL] self . assertIs ( await library . feature ( self . data , [string] , Message ( [string] ) , self . send ) , True ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] self . assertFalse ( self . mock_response . called ) [EOL] self . assertFalse ( self . mock_add . called ) [EOL] self . assertFalse ( self . mock_remove . called ) [EOL] [EOL] async def test_feature_none ( self ) : [EOL] self . assertIs ( await library . feature ( self . data , [string] , Message ( [string] ) , self . send ) , True ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] self . assertFalse ( self . mock_response . called ) [EOL] self . assertFalse ( self . mock_add . called ) [EOL] self . assertFalse ( self . mock_remove . called ) [EOL] [EOL] async def test_bad_param ( self ) : [EOL] self . mock_response . return_value = parser . Unknown [EOL] self . assertIs ( await library . feature ( self . data , [string] , Message ( [string] ) , self . send ) , True ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] self . assertTrue ( self . mock_response . called ) [EOL] self . assertFalse ( self . mock_add . called ) [EOL] self . assertFalse ( self . mock_remove . called ) [EOL] [EOL] [EOL] class TestLibraryFeatureFeature_OLD ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . data = Mock ( spec = CacheStore ) [EOL] self . send = Mock ( spec = send ) [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_feature = patcher . start ( ) [EOL] self . mock_feature . features . return_value = { [string] : [string] , [string] : None } [EOL] [EOL] patcher = patch ( library . __name__ + [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_add = patcher . start ( ) [EOL] [EOL] patcher = patch ( library . __name__ + [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_remove = patcher . start ( ) [EOL] [EOL] async def test ( self ) : [EOL] self . mock_add . return_value = True [EOL] self . assertIs ( await library . feature ( self . data , [string] , Message ( [string] ) , self . send ) , True ) [EOL] self . assertFalse ( self . send . called ) [EOL] self . mock_add . assert_called_once_with ( self . data , [string] , [string] , self . send ) [EOL] self . assertFalse ( self . mock_remove . called ) [EOL] [EOL] async def test_add ( self ) : [EOL] self . mock_add . return_value = True [EOL] self . assertIs ( await library . feature ( self . data , [string] , Message ( [string] ) , self . send ) , True ) [EOL] self . assertFalse ( self . send . called ) [EOL] self . mock_add . assert_called_once_with ( self . data , [string] , [string] , self . send ) [EOL] self . assertFalse ( self . mock_remove . called ) [EOL] [EOL] async def test_remove ( self ) : [EOL] self . mock_remove . return_value = True [EOL] self . assertIs ( await library . feature ( self . data , [string] , Message ( [string] ) , self . send ) , True ) [EOL] self . assertFalse ( self . send . called ) [EOL] self . mock_remove . assert_called_once_with ( self . data , [string] , [string] , self . send ) [EOL] self . assertFalse ( self . mock_add . called ) [EOL] [EOL] async def test_not_existing_feature ( self ) : [EOL] self . assertIs ( await library . feature ( self . data , [string] , Message ( [string] ) , self . send ) , True ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] self . assertFalse ( self . mock_add . called ) [EOL] self . assertFalse ( self . mock_remove . called ) [EOL] [EOL] async def test_feature_none ( self ) : [EOL] self . assertIs ( await library . feature ( self . data , [string] , Message ( [string] ) , self . send ) , True ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] self . assertFalse ( self . mock_add . called ) [EOL] self . assertFalse ( self . mock_remove . called ) [EOL] [EOL] async def test_bad_param ( self ) : [EOL] self . assertIs ( await library . feature ( self . data , [string] , Message ( [string] ) , self . send ) , True ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] self . assertFalse ( self . mock_add . called ) [EOL] self . assertFalse ( self . mock_remove . called ) [EOL] [EOL] [EOL] class TestLibraryFeatureAdd ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . data = Mock ( spec = CacheStore ) [EOL] self . send = Mock ( spec = send ) [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_feature = patcher . start ( ) [EOL] self . mock_feature . features . return_value = { [string] : [string] } [EOL] [EOL] async def test ( self ) : [EOL] self . data . hasFeature . return_value = False [EOL] self . assertIs ( await library . feature_add ( self . data , [string] , [string] , self . send ) , True ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] self . data . hasFeature . assert_called_once_with ( [string] , [string] ) [EOL] self . data . addFeature . assert_called_once_with ( [string] , [string] ) [EOL] [EOL] async def test_existing ( self ) : [EOL] self . data . hasFeature . return_value = True [EOL] self . assertIs ( await library . feature_add ( self . data , [string] , [string] , self . send ) , True ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] , [string] ) ) [EOL] self . data . hasFeature . assert_called_once_with ( [string] , [string] ) [EOL] self . assertFalse ( self . data . addFeature . called ) [EOL] [EOL] [EOL] class TestLibraryFeatureRemove ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . data = Mock ( spec = CacheStore ) [EOL] self . send = Mock ( spec = send ) [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_feature = patcher . start ( ) [EOL] self . mock_feature . features . return_value = { [string] : [string] } [EOL] [EOL] async def test ( self ) : [EOL] self . data . hasFeature . return_value = True [EOL] self . assertIs ( await library . feature_remove ( self . data , [string] , [string] , self . send ) , True ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] self . data . hasFeature . assert_called_once_with ( [string] , [string] ) [EOL] self . data . removeFeature . assert_called_once_with ( [string] , [string] ) [EOL] [EOL] async def test_existing ( self ) : [EOL] self . data . hasFeature . return_value = False [EOL] self . assertIs ( await library . feature_remove ( self . data , [string] , [string] , self . send ) , True ) [EOL] self . send . assert_called_once_with ( StrContains ( [string] , [string] , [string] ) ) [EOL] self . data . hasFeature . assert_called_once_with ( [string] , [string] ) [EOL] self . assertFalse ( self . data . removeFeature . called ) [EOL]	
from asynctest . mock import patch [EOL] [EOL] from tests . unittest . base_channel import TestChannel [EOL] from lib . data . message import Message [EOL] [EOL] [comment] [EOL] from . . import library [EOL] from . . import channel [EOL] [EOL] [EOL] class TestFeatureChannel ( TestChannel ) : [EOL] @ patch ( library . __name__ + [string] ) async def test_feature ( self , mock_feature ) : [EOL] self . assertIs ( await channel . commandFeature ( self . args ) , False ) [EOL] self . assertFalse ( mock_feature . called ) [EOL] mock_feature . return_value = True [EOL] self . permissions . inOwnerChannel = True [EOL] self . permissionSet [ [string] ] = True [EOL] message = Message ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await channel . commandFeature ( args ) , True ) [EOL] mock_feature . assert_called_once_with ( self . data , [string] , message , self . channel . send ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from . import autoload [comment] [EOL] [EOL] from . items import channel [comment] [EOL] from . items import whisper [comment] [EOL] from . items import custom [comment] [EOL] from . items import manage [comment] [EOL] from . items import feature [comment] [EOL] [EOL] from . import ircmessage [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from asynctest . mock import call , patch [EOL] [EOL] from tests . unittest . base_channel import TestChannel [EOL] from lib . data . message import Message [EOL] from lib . data import AutoRepeatList [EOL] from tests . unittest . mock_class import AsyncIterator , StrContains [EOL] [EOL] [comment] [EOL] from . . import channel [EOL] [EOL] [EOL] class TestRepeatChannel ( TestChannel ) : [EOL] @ patch ( channel . __name__ + [string] ) async def test_auto_repeat ( self , mock_process ) : [EOL] self . assertIs ( await channel . commandAutoRepeat ( self . args ) , False ) [EOL] self . assertFalse ( mock_process . called ) [EOL] self . permissionSet [ [string] ] = True [EOL] mock_process . return_value = True [EOL] self . assertIs ( await channel . commandAutoRepeat ( self . args ) , True ) [EOL] mock_process . assert_called_once_with ( self . args , None ) [EOL] [EOL] @ patch ( channel . __name__ + [string] ) async def test_auto_repeat_count ( self , mock_process ) : [EOL] self . assertIs ( await channel . commandAutoRepeatCount ( self . args ) , False ) [EOL] self . assertFalse ( mock_process . called ) [EOL] self . permissionSet [ [string] ] = True [EOL] mock_process . return_value = True [EOL] self . assertIs ( await channel . commandAutoRepeat ( self . args ) , True ) [EOL] mock_process . assert_called_once_with ( self . args , None ) [EOL] [EOL] async def test_process_false ( self ) : [EOL] self . assertIs ( await channel . process_auto_repeat ( self . args , None ) , False ) [EOL] self . assertFalse ( self . data . listAutoRepeat . called ) [EOL] self . assertFalse ( self . data . clearAutoRepeat . called ) [EOL] self . assertFalse ( self . data . removeAutoRepeat . called ) [EOL] self . assertFalse ( self . data . setAutoRepeat . called ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] async def test_process_error ( self ) : [EOL] self . args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await channel . process_auto_repeat ( self . args , None ) , False ) [EOL] self . assertFalse ( self . data . listAutoRepeat . called ) [EOL] self . assertFalse ( self . data . clearAutoRepeat . called ) [EOL] self . assertFalse ( self . data . removeAutoRepeat . called ) [EOL] self . assertFalse ( self . data . setAutoRepeat . called ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] async def test_process_off ( self ) : [EOL] self . args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await channel . process_auto_repeat ( self . args , None ) , True ) [EOL] self . assertFalse ( self . data . listAutoRepeat . called ) [EOL] self . assertFalse ( self . data . clearAutoRepeat . called ) [EOL] self . data . removeAutoRepeat . assert_called_once_with ( self . channel . channel , [string] ) [EOL] self . assertFalse ( self . data . setAutoRepeat . called ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] async def test_process_zero_minutes ( self ) : [EOL] self . args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await channel . process_auto_repeat ( self . args , None ) , True ) [EOL] self . assertFalse ( self . data . listAutoRepeat . called ) [EOL] self . assertFalse ( self . data . clearAutoRepeat . called ) [EOL] self . data . removeAutoRepeat . assert_called_once_with ( self . channel . channel , [string] ) [EOL] self . assertFalse ( self . data . setAutoRepeat . called ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] async def test_process_zero_count ( self ) : [EOL] self . args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await channel . process_auto_repeat ( self . args , [number] ) , True ) [EOL] self . assertFalse ( self . data . listAutoRepeat . called ) [EOL] self . assertFalse ( self . data . clearAutoRepeat . called ) [EOL] self . data . removeAutoRepeat . assert_called_once_with ( self . channel . channel , [string] ) [EOL] self . assertFalse ( self . data . setAutoRepeat . called ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] async def test_process_no_message ( self ) : [EOL] self . args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await channel . process_auto_repeat ( self . args , None ) , True ) [EOL] self . assertFalse ( self . data . listAutoRepeat . called ) [EOL] self . assertFalse ( self . data . clearAutoRepeat . called ) [EOL] self . data . removeAutoRepeat . assert_called_once_with ( self . channel . channel , [string] ) [EOL] self . assertFalse ( self . data . setAutoRepeat . called ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] async def test_process ( self ) : [EOL] self . args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await channel . process_auto_repeat ( self . args , None ) , True ) [EOL] self . assertFalse ( self . data . listAutoRepeat . called ) [EOL] self . assertFalse ( self . data . clearAutoRepeat . called ) [EOL] self . assertFalse ( self . data . removeAutoRepeat . called ) [EOL] self . data . setAutoRepeat . assert_called_once_with ( self . channel . channel , [string] , [string] , None , [number] ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] async def test_process_count ( self ) : [EOL] self . args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await channel . process_auto_repeat ( self . args , [number] ) , True ) [EOL] self . assertFalse ( self . data . listAutoRepeat . called ) [EOL] self . assertFalse ( self . data . clearAutoRepeat . called ) [EOL] self . assertFalse ( self . data . removeAutoRepeat . called ) [EOL] self . data . setAutoRepeat . assert_called_once_with ( self . channel . channel , [string] , [string] , [number] , [number] ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] async def test_process_clear ( self ) : [EOL] self . args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await channel . process_auto_repeat ( self . args , [number] ) , True ) [EOL] self . assertFalse ( self . data . listAutoRepeat . called ) [EOL] self . data . clearAutoRepeat . aasert_called_once_with ( self . channel . channel ) [EOL] self . assertFalse ( self . data . removeAutoRepeat . called ) [EOL] self . assertFalse ( self . data . setAutoRepeat . called ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] async def test_process_list ( self ) : [EOL] self . args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . data . listAutoRepeat . return_value = AsyncIterator ( [ AutoRepeatList ( [string] , [string] , None , [number] , self . now ) , AutoRepeatList ( [string] , [string] , None , [number] , self . now ) , ] ) [EOL] self . assertIs ( await channel . process_auto_repeat ( self . args , [number] ) , True ) [EOL] self . data . listAutoRepeat . assert_called_once_with ( self . channel . channel ) [EOL] self . assertFalse ( self . data . removeAutoRepeat . called ) [EOL] self . assertFalse ( self . data . setAutoRepeat . called ) [EOL] self . channel . send . assert_has_calls ( [ call ( StrContains ( [string] ) ) , call ( StrContains ( [string] , [string] , [string] ) ) , call ( StrContains ( [string] , [string] , [string] ) ) , ] ) [EOL] [EOL] async def test_process_list_empty ( self ) : [EOL] self . args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . data . listAutoRepeat . return_value = AsyncIterator ( [ ] ) [EOL] self . assertIs ( await channel . process_auto_repeat ( self . args , [number] ) , True ) [EOL] self . data . listAutoRepeat . assert_called_once_with ( self . channel . channel ) [EOL] self . assertFalse ( self . data . removeAutoRepeat . called ) [EOL] self . assertFalse ( self . data . setAutoRepeat . called ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL] [EOL] async def test_process_name_error ( self ) : [EOL] self . args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await channel . process_auto_repeat ( self . args , None ) , False ) [EOL] self . assertFalse ( self . data . listAutoRepeat . called ) [EOL] self . assertFalse ( self . data . clearAutoRepeat . called ) [EOL] self . assertFalse ( self . data . removeAutoRepeat . called ) [EOL] self . assertFalse ( self . data . setAutoRepeat . called ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] async def test_process_name_off ( self ) : [EOL] self . args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await channel . process_auto_repeat ( self . args , None ) , True ) [EOL] self . assertFalse ( self . data . listAutoRepeat . called ) [EOL] self . assertFalse ( self . data . clearAutoRepeat . called ) [EOL] self . data . removeAutoRepeat . assert_called_once_with ( self . channel . channel , [string] ) [EOL] self . assertFalse ( self . data . setAutoRepeat . called ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] async def test_process_name_zero_minutes ( self ) : [EOL] self . args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await channel . process_auto_repeat ( self . args , None ) , True ) [EOL] self . assertFalse ( self . data . listAutoRepeat . called ) [EOL] self . assertFalse ( self . data . clearAutoRepeat . called ) [EOL] self . data . removeAutoRepeat . assert_called_once_with ( self . channel . channel , [string] ) [EOL] self . assertFalse ( self . data . setAutoRepeat . called ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] async def test_process_name_zero_count ( self ) : [EOL] self . args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await channel . process_auto_repeat ( self . args , [number] ) , True ) [EOL] self . assertFalse ( self . data . listAutoRepeat . called ) [EOL] self . assertFalse ( self . data . clearAutoRepeat . called ) [EOL] self . data . removeAutoRepeat . assert_called_once_with ( self . channel . channel , [string] ) [EOL] self . assertFalse ( self . data . setAutoRepeat . called ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] async def test_process_name_no_message ( self ) : [EOL] self . args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await channel . process_auto_repeat ( self . args , None ) , True ) [EOL] self . assertFalse ( self . data . listAutoRepeat . called ) [EOL] self . assertFalse ( self . data . clearAutoRepeat . called ) [EOL] self . data . removeAutoRepeat . assert_called_once_with ( self . channel . channel , [string] ) [EOL] self . assertFalse ( self . data . setAutoRepeat . called ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] async def test_process_name ( self ) : [EOL] self . args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await channel . process_auto_repeat ( self . args , None ) , True ) [EOL] self . assertFalse ( self . data . listAutoRepeat . called ) [EOL] self . assertFalse ( self . data . clearAutoRepeat . called ) [EOL] self . assertFalse ( self . data . removeAutoRepeat . called ) [EOL] self . data . setAutoRepeat . assert_called_once_with ( self . channel . channel , [string] , [string] , None , [number] ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] async def test_process_name_caps ( self ) : [EOL] self . args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await channel . process_auto_repeat ( self . args , None ) , True ) [EOL] self . assertFalse ( self . data . listAutoRepeat . called ) [EOL] self . assertFalse ( self . data . clearAutoRepeat . called ) [EOL] self . assertFalse ( self . data . removeAutoRepeat . called ) [EOL] self . data . setAutoRepeat . assert_called_once_with ( self . channel . channel , [string] , [string] , None , [number] ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] async def test_process_name_count ( self ) : [EOL] self . args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await channel . process_auto_repeat ( self . args , [number] ) , True ) [EOL] self . assertFalse ( self . data . listAutoRepeat . called ) [EOL] self . assertFalse ( self . data . clearAutoRepeat . called ) [EOL] self . assertFalse ( self . data . removeAutoRepeat . called ) [EOL] self . data . setAutoRepeat . assert_called_once_with ( self . channel . channel , [string] , [string] , [number] , [number] ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] async def test_process_name_clear ( self ) : [EOL] self . args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . assertIs ( await channel . process_auto_repeat ( self . args , [number] ) , True ) [EOL] self . assertFalse ( self . data . listAutoRepeat . called ) [EOL] self . data . clearAutoRepeat . aasert_called_once_with ( self . channel . channel ) [EOL] self . assertFalse ( self . data . removeAutoRepeat . called ) [EOL] self . assertFalse ( self . data . setAutoRepeat . called ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] async def test_process_name_list ( self ) : [EOL] self . args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . data . listAutoRepeat . return_value = AsyncIterator ( [ AutoRepeatList ( [string] , [string] , None , [number] , self . now ) , AutoRepeatList ( [string] , [string] , None , [number] , self . now ) , ] ) [EOL] self . assertIs ( await channel . process_auto_repeat ( self . args , [number] ) , True ) [EOL] self . data . listAutoRepeat . assert_called_once_with ( self . channel . channel ) [EOL] self . assertFalse ( self . data . removeAutoRepeat . called ) [EOL] self . assertFalse ( self . data . setAutoRepeat . called ) [EOL] self . channel . send . assert_has_calls ( [ call ( StrContains ( [string] ) ) , call ( StrContains ( [string] , [string] , [string] ) ) , call ( StrContains ( [string] , [string] , [string] ) ) , ] ) [EOL] [EOL] async def test_process_name_list_empty ( self ) : [EOL] self . args = self . args . _replace ( message = Message ( [string] ) ) [EOL] self . data . listAutoRepeat . return_value = AsyncIterator ( [ ] ) [EOL] self . assertIs ( await channel . process_auto_repeat ( self . args , [number] ) , True ) [EOL] self . data . listAutoRepeat . assert_called_once_with ( self . channel . channel ) [EOL] self . assertFalse ( self . data . removeAutoRepeat . called ) [EOL] self . assertFalse ( self . data . setAutoRepeat . called ) [EOL] self . channel . send . assert_called_once_with ( StrContains ( [string] , [string] ) ) [EOL]	
import asynctest [EOL] [EOL] from datetime import datetime [EOL] [EOL] from asynctest . mock import MagicMock , Mock , call , patch [EOL] [EOL] from bot . data import Channel [EOL] from lib . cache import CacheStore [EOL] from lib . data import AutoRepeatMessage [EOL] from tests . unittest . mock_class import AsyncIterator [EOL] from . . import tasks [EOL] [EOL] [EOL] class TestRepeatTasks ( asynctest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . channel = Mock ( spec = Channel ) [EOL] self . channel . channel = [string] [EOL] self . channel . isMod = False [EOL] self . data = MagicMock ( spec = CacheStore ) [EOL] self . data . __aenter__ . return_value = self . data [EOL] [EOL] patcher = patch ( [string] , autospec = True ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_globals = patcher . start ( ) [EOL] self . mock_globals . channels = { [string] : self . channel , } [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_data = patcher . start ( ) [EOL] self . mock_data . return_value = self . data [EOL] [EOL] patcher = patch ( [string] ) [EOL] self . addCleanup ( patcher . stop ) [EOL] self . mock_timeout = patcher . start ( ) [EOL] [EOL] self . now = datetime ( [number] , [number] , [number] ) [EOL] [EOL] async def test_empty ( self ) : [EOL] self . data . getAutoRepeatToSend . return_value = AsyncIterator ( [ ] ) [EOL] await tasks . autoRepeatMessage ( self . now ) [EOL] self . assertFalse ( self . data . sentAutoRepeat . called ) [EOL] self . assertFalse ( self . mock_timeout . called ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] async def test_no_channel ( self ) : [EOL] self . data . getAutoRepeatToSend . return_value = AsyncIterator ( [ AutoRepeatMessage ( [string] , [string] , [string] ) ] ) [EOL] await tasks . autoRepeatMessage ( self . now ) [EOL] self . assertFalse ( self . data . sentAutoRepeat . called ) [EOL] self . assertFalse ( self . mock_timeout . called ) [EOL] self . assertFalse ( self . channel . send . called ) [EOL] [EOL] async def test ( self ) : [EOL] self . data . getAutoRepeatToSend . return_value = AsyncIterator ( [ AutoRepeatMessage ( [string] , [string] , [string] ) , ] ) [EOL] await tasks . autoRepeatMessage ( self . now ) [EOL] self . data . sentAutoRepeat . assert_called_once_with ( [string] , [string] ) [EOL] self . assertFalse ( self . mock_timeout . called ) [EOL] self . channel . send . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_multiple ( self ) : [EOL] self . data . getAutoRepeatToSend . return_value = AsyncIterator ( [ AutoRepeatMessage ( [string] , [string] , [string] ) , AutoRepeatMessage ( [string] , [string] , [string] ) , ] ) [EOL] await tasks . autoRepeatMessage ( self . now ) [EOL] self . data . sentAutoRepeat . assert_has_calls ( [ call ( [string] , [string] ) , call ( [string] , [string] ) ] ) [EOL] self . assertFalse ( self . mock_timeout . called ) [EOL] self . channel . send . assert_has_calls ( [ call ( [string] ) , call ( [string] ) ] ) [EOL] [EOL] async def test_mod ( self ) : [EOL] self . channel . isMod = True [EOL] self . data . getAutoRepeatToSend . return_value = AsyncIterator ( [ AutoRepeatMessage ( [string] , [string] , [string] ) , ] ) [EOL] await tasks . autoRepeatMessage ( self . now ) [EOL] self . data . sentAutoRepeat . assert_called_once_with ( [string] , [string] ) [EOL] self . mock_timeout . assert_called_once_with ( self . channel , None , [string] , None , [string] ) [EOL] self . channel . send . assert_called_once_with ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . items import channel [comment] [EOL] from . items import whisper [comment] [EOL] from . items import custom [comment] [EOL] from . items import manage [comment] [EOL] from . items import feature [comment] [EOL] [EOL] from . import ircmessage [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
from tests . unittest . base_channel import TestChannel [EOL] from lib . data . message import Message [EOL] [EOL] [comment] [EOL] from . . import channel [EOL] [EOL] [EOL] class TestChannelTextFormat ( TestChannel ) : [EOL] async def test_text_command ( self ) : [EOL] command = channel . text_command ( [string] , lambda s : s ) [EOL] self . assertIs ( await command ( self . args ) , False ) [EOL] message = Message ( [string] ) [EOL] self . permissionSet [ [string] ] = True [EOL] self . features . append ( [string] ) [EOL] self . assertIs ( await command ( self . args . _replace ( message = message ) ) , True ) [EOL] self . channel . send . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_full ( self ) : [EOL] self . assertIs ( await channel . commandFull ( self . args ) , False ) [EOL] message = Message ( [string] ) [EOL] self . permissionSet [ [string] ] = True [EOL] self . features . append ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await channel . commandFull ( args ) , True ) [EOL] self . channel . send . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_parenthesized ( self ) : [EOL] self . assertIs ( await channel . commandParenthesized ( self . args ) , False ) [EOL] message = Message ( [string] ) [EOL] self . permissionSet [ [string] ] = True [EOL] self . features . append ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await channel . commandParenthesized ( args ) , True ) [EOL] self . channel . send . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_circled ( self ) : [EOL] self . assertIs ( await channel . commandCircled ( self . args ) , False ) [EOL] message = Message ( [string] ) [EOL] self . permissionSet [ [string] ] = True [EOL] self . features . append ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await channel . commandCircled ( args ) , True ) [EOL] self . channel . send . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_small_caps ( self ) : [EOL] self . assertIs ( await channel . commandSmallCaps ( self . args ) , False ) [EOL] message = Message ( [string] ) [EOL] self . permissionSet [ [string] ] = True [EOL] self . features . append ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await channel . commandSmallCaps ( args ) , True ) [EOL] self . channel . send . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_upsidedown ( self ) : [EOL] self . assertIs ( await channel . commandUpsideDown ( self . args ) , False ) [EOL] message = Message ( [string] ) [EOL] self . permissionSet [ [string] ] = True [EOL] self . features . append ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await channel . commandUpsideDown ( args ) , True ) [EOL] self . channel . send . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_serif_bold ( self ) : [EOL] self . assertIs ( await channel . commandSerifBold ( self . args ) , False ) [EOL] message = Message ( [string] ) [EOL] self . permissionSet [ [string] ] = True [EOL] self . features . append ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await channel . commandSerifBold ( args ) , True ) [EOL] self . channel . send . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_serif_italic ( self ) : [EOL] self . assertIs ( await channel . commandSerifItalic ( self . args ) , False ) [EOL] message = Message ( [string] ) [EOL] self . permissionSet [ [string] ] = True [EOL] self . features . append ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await channel . commandSerifItalic ( args ) , True ) [EOL] self . channel . send . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_serif_bold_italic ( self ) : [EOL] self . assertIs ( await channel . commandSerifBoldItalic ( self . args ) , False ) [EOL] message = Message ( [string] ) [EOL] self . permissionSet [ [string] ] = True [EOL] self . features . append ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await channel . commandSerifBoldItalic ( args ) , True ) [EOL] self . channel . send . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_sanserif ( self ) : [EOL] self . assertIs ( await channel . commandSanSerif ( self . args ) , False ) [EOL] message = Message ( [string] ) [EOL] self . permissionSet [ [string] ] = True [EOL] self . features . append ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await channel . commandSanSerif ( args ) , True ) [EOL] self . channel . send . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_sanserif_bold ( self ) : [EOL] self . assertIs ( await channel . commandSanSerifBold ( self . args ) , False ) [EOL] message = Message ( [string] ) [EOL] self . permissionSet [ [string] ] = True [EOL] self . features . append ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await channel . commandSanSerifBold ( args ) , True ) [EOL] self . channel . send . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_sanserif_italic ( self ) : [EOL] self . assertIs ( await channel . commandSanSerifItalic ( self . args ) , False ) [EOL] message = Message ( [string] ) [EOL] self . permissionSet [ [string] ] = True [EOL] self . features . append ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await channel . commandSanSerifItalic ( args ) , True ) [EOL] self . channel . send . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_sanserif_bold_italic ( self ) : [EOL] self . assertIs ( await channel . commandSanSerifBoldItalic ( self . args ) , False ) [EOL] message = Message ( [string] ) [EOL] self . permissionSet [ [string] ] = True [EOL] self . features . append ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await channel . commandSanSerifBoldItalic ( args ) , True ) [EOL] self . channel . send . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_script ( self ) : [EOL] self . assertIs ( await channel . commandScript ( self . args ) , False ) [EOL] message = Message ( [string] ) [EOL] self . permissionSet [ [string] ] = True [EOL] self . features . append ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await channel . commandScript ( args ) , True ) [EOL] self . channel . send . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_script_bold ( self ) : [EOL] self . assertIs ( await channel . commandScriptBold ( self . args ) , False ) [EOL] message = Message ( [string] ) [EOL] self . permissionSet [ [string] ] = True [EOL] self . features . append ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await channel . commandScriptBold ( args ) , True ) [EOL] self . channel . send . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_fraktur ( self ) : [EOL] self . assertIs ( await channel . commandFraktur ( self . args ) , False ) [EOL] message = Message ( [string] ) [EOL] self . permissionSet [ [string] ] = True [EOL] self . features . append ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await channel . commandFraktur ( args ) , True ) [EOL] self . channel . send . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_fraktur_bold ( self ) : [EOL] self . assertIs ( await channel . commandFrakturBold ( self . args ) , False ) [EOL] message = Message ( [string] ) [EOL] self . permissionSet [ [string] ] = True [EOL] self . features . append ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await channel . commandFrakturBold ( args ) , True ) [EOL] self . channel . send . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_monospace ( self ) : [EOL] self . assertIs ( await channel . commandMonospace ( self . args ) , False ) [EOL] message = Message ( [string] ) [EOL] self . permissionSet [ [string] ] = True [EOL] self . features . append ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await channel . commandMonospace ( args ) , True ) [EOL] self . channel . send . assert_called_once_with ( [string] ) [EOL] [EOL] async def test_double_struck ( self ) : [EOL] self . assertIs ( await channel . commandDoubleStruck ( self . args ) , False ) [EOL] message = Message ( [string] ) [EOL] self . permissionSet [ [string] ] = True [EOL] self . features . append ( [string] ) [EOL] args = self . args . _replace ( message = message ) [EOL] self . assertIs ( await channel . commandDoubleStruck ( args ) , True ) [EOL] self . channel . send . assert_called_once_with ( [string] ) [EOL]	
from typing import Dict , Optional , Union , List [EOL] import typing [EOL] import builtins [EOL] import configparser [EOL] import os [EOL] [EOL] import aiofiles [EOL] [EOL] from typing import Dict , List , Optional , Union [comment] [EOL] [EOL] [EOL] class BotConfig : [EOL] def __init__ ( self ) : [EOL] self . development = False [EOL] [EOL] self . botnick = [string] [EOL] self . password = [string] [EOL] self . owner = [string] [EOL] [EOL] self . awsServer = [string] [EOL] self . awsPort = [number] [EOL] [EOL] self . messageLimit = [number] [EOL] self . modLimit = [number] [EOL] self . modSpamLimit = [number] [EOL] self . publicLimit = [number] [EOL] self . publicDelay = [number] [EOL] self . messageSpan = [number] [EOL] self . whiperLimit = [number] [EOL] self . whiperSpan = [number] [EOL] [EOL] self . customMessageCooldown = [number] [EOL] self . customMessageUserCooldown = [number] [EOL] self . customMessageUrlTimeout = [number] [EOL] [EOL] self . spamModeratorCooldown = [number] [EOL] [EOL] self . warningDuration = [number] [EOL] self . moderatorDefaultTimeout = [ [number] , [number] , [number] ] [EOL] [EOL] self . httpTimeout = [number] [EOL] [EOL] self . joinLimit = [number] [EOL] self . joinPerSecond = [number] [EOL] [EOL] self . database = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] self . connections = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , } [EOL] [EOL] self . redis = { [string] : [string] , [string] : [number] , [string] : None , [string] : None , [string] : [number] , } [EOL] [EOL] self . pkgs = [ [string] ] [EOL] [EOL] self . twitchClientId = [string] [EOL] [EOL] self . ircLogFolder = [string] [EOL] self . exceptionLog = [string] [EOL] [EOL] async def read_config ( self ) : [EOL] ini = ... [EOL] if os . path . isfile ( [string] ) : [EOL] ini = configparser . ConfigParser ( ) [EOL] async with aiofiles . open ( [string] , [string] , encoding = [string] ) as file : [EOL] ini . read_string ( await file . read ( None ) ) [EOL] [EOL] self . botnick = str ( ini [ [string] ] [ [string] ] ) . lower ( ) [EOL] self . password = str ( ini [ [string] ] [ [string] ] ) [EOL] self . owner = str ( ini [ [string] ] [ [string] ] ) . lower ( ) [EOL] [EOL] if os . path . isfile ( [string] ) : [EOL] ini = configparser . ConfigParser ( ) [EOL] async with aiofiles . open ( [string] , [string] , encoding = [string] ) as file : [EOL] ini . read_string ( await file . read ( None ) ) [EOL] [EOL] self . awsServer = str ( ini [ [string] ] [ [string] ] ) [EOL] self . awsPort = int ( ini [ [string] ] [ [string] ] ) [EOL] [EOL] self . development = bool ( int ( ini [ [string] ] [ [string] ] ) ) [EOL] [EOL] self . messageLimit = int ( ini [ [string] ] [ [string] ] ) [EOL] self . modLimit = min ( int ( ini [ [string] ] [ [string] ] ) , [number] ) [EOL] self . modSpamLimit = min ( int ( ini [ [string] ] [ [string] ] ) , [number] ) [EOL] self . publicLimit = min ( int ( ini [ [string] ] [ [string] ] ) , [number] ) [EOL] self . publicDelay = float ( ini [ [string] ] [ [string] ] ) [EOL] self . messageSpan = float ( ini [ [string] ] [ [string] ] ) [EOL] self . whiperLimit = float ( ini [ [string] ] [ [string] ] ) [EOL] self . whiperSpan = float ( ini [ [string] ] [ [string] ] ) [EOL] [EOL] f = ... [EOL] i = ... [EOL] [EOL] f = float ( ini [ [string] ] [ [string] ] ) [EOL] self . customMessageCooldown = f [EOL] if self . customMessageCooldown <= [number] : [EOL] self . customMessageCooldown = [number] [EOL] f = float ( ini [ [string] ] [ [string] ] ) [EOL] self . customMessageUserCooldown = f [EOL] if self . customMessageUserCooldown <= [number] : [EOL] self . customMessageUserCooldown = [number] [EOL] f = float ( ini [ [string] ] [ [string] ] ) [EOL] self . customMessageUrlTimeout = f [EOL] if self . customMessageUrlTimeout <= [number] : [EOL] self . customMessageUrlTimeout = [number] [EOL] [EOL] f = float ( ini [ [string] ] [ [string] ] ) [EOL] self . spamModeratorCooldown = f [EOL] if self . spamModeratorCooldown <= [number] : [EOL] self . spamModeratorCooldown = [number] [EOL] [EOL] self . warningDuration = float ( ini [ [string] ] [ [string] ] ) [EOL] if self . warningDuration <= [number] : [EOL] self . warningDuration = [number] [EOL] self . moderatorDefaultTimeout = [ [number] , [number] , [number] ] [EOL] i = int ( ini [ [string] ] [ [string] ] ) [EOL] self . moderatorDefaultTimeout [ [number] ] = i [EOL] if self . moderatorDefaultTimeout [ [number] ] <= [number] : [EOL] self . moderatorDefaultTimeout [ [number] ] = [number] [EOL] i = int ( ini [ [string] ] [ [string] ] ) [EOL] self . moderatorDefaultTimeout [ [number] ] = i [EOL] if self . moderatorDefaultTimeout [ [number] ] <= [number] : [EOL] self . moderatorDefaultTimeout [ [number] ] = [number] [EOL] i = int ( ini [ [string] ] [ [string] ] ) [EOL] self . moderatorDefaultTimeout [ [number] ] = i [EOL] if self . moderatorDefaultTimeout [ [number] ] <= [number] : [EOL] self . moderatorDefaultTimeout [ [number] ] = [number] [EOL] [EOL] self . joinLimit = min ( int ( ini [ [string] ] [ [string] ] ) , [number] ) [EOL] self . joinPerSecond = float ( ini [ [string] ] [ [string] ] ) [EOL] if self . joinPerSecond <= [number] : [EOL] self . joinPerSecond = [number] [EOL] [EOL] self . httpTimeout = float ( ini [ [string] ] [ [string] ] ) [EOL] [EOL] self . ircLogFolder = str ( ini [ [string] ] [ [string] ] ) [EOL] self . exceptionLog = str ( ini [ [string] ] [ [string] ] ) [EOL] if self . ircLogFolder : [EOL] if not os . path . isdir ( self . ircLogFolder ) : [EOL] os . mkdir ( self . ircLogFolder ) [EOL] [EOL] if os . path . isfile ( [string] ) : [EOL] ini = configparser . ConfigParser ( ) [EOL] async with aiofiles . open ( [string] , [string] , encoding = [string] ) as file : [EOL] ini . read_string ( await file . read ( None ) ) [EOL] [EOL] self . pkgs . clear ( ) [EOL] option = ... [EOL] _value = ... [EOL] for option , _value in ini . items ( [string] ) : [EOL] if ini . getboolean ( [string] , option ) : [EOL] self . pkgs . append ( option ) [EOL] if [string] not in self . pkgs : [EOL] self . pkgs . append ( [string] ) [EOL] [EOL] if os . path . isfile ( [string] ) : [EOL] ini = configparser . ConfigParser ( ) [EOL] async with aiofiles . open ( [string] , [string] , encoding = [string] ) as file : [EOL] ini . read_string ( await file . read ( None ) ) [EOL] [EOL] for s in [ [string] , [string] , [string] , [string] ] : [EOL] self . database [ s ] = str ( ini [ [string] ] [ s ] ) [EOL] if ini [ [string] ] [ s ] : [EOL] i = int ( ini [ [string] ] [ s ] ) [EOL] if i : [EOL] self . connections [ s ] = i [EOL] [EOL] if ini [ [string] ] [ [string] ] and ini [ [string] ] [ [string] ] : [EOL] self . redis [ [string] ] = ini [ [string] ] [ [string] ] [EOL] self . redis [ [string] ] = ini [ [string] ] [ [string] ] [EOL] [EOL] if [string] in ini [ [string] ] : [EOL] self . redis [ [string] ] = int ( ini [ [string] ] [ [string] ] ) [EOL] [EOL] if [string] in ini [ [string] ] : [EOL] self . redis [ [string] ] = ini [ [string] ] [ [string] ] [EOL] [EOL] if ini [ [string] ] [ [string] ] : [EOL] i = int ( ini [ [string] ] [ [string] ] ) [EOL] self . redis [ [string] ] = i [EOL] [EOL] if os . path . isfile ( [string] ) : [EOL] ini = configparser . ConfigParser ( ) [EOL] async with aiofiles . open ( [string] , [string] , encoding = [string] ) as file : [EOL] ini . read_string ( await file . read ( None ) ) [EOL] [EOL] self . twitchClientId = str ( ini [ [string] ] [ [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Optional[typing.Union[builtins.str,builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $Nonebuiltins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str
import _config [EOL] import _globals [EOL] from . import _config , _globals [EOL] [EOL] __version__ = [string] [EOL] [EOL] config = _config . BotConfig ( ) [EOL] globals = _globals . BotGlobals ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_config.BotConfig$ 0 0 0 0 0 0 0 $_globals.BotGlobals$ 0 0 0 0 0 0 0
from typing import Dict , Any , Tuple [EOL] import typing [EOL] import builtins [EOL] import aioodbc [EOL] import aioodbc [comment] [EOL] import aioredis [comment] [EOL] [EOL] from typing import Any , Dict , Tuple [comment] [EOL] [EOL] from . import data [comment] [EOL] from . coroutine import connection [comment] [EOL] [EOL] [EOL] class BotGlobals : [EOL] def __init__ ( self ) : [EOL] self . running = True [EOL] [EOL] self . groupChannel = None [EOL] [EOL] self . cluster = None [EOL] self . whisperCluster = [string] [EOL] [EOL] self . channels = { } [EOL] self . displayName = [string] [EOL] self . isTwitchAdmin = False [EOL] self . isTwitchStaff = False [EOL] self . isGlobalMod = False [EOL] self . globalSessionData = { } [EOL] [EOL] self . pkgs = tuple ( ) [EOL] self . connectionPools = { } [EOL] [EOL] self . redisPool = ... [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Dict[builtins.str,'data.Channel']$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,...]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,aioodbc.Pool]$ 0 0 0 0 0 0 0 $aioredis.ConnectionsPool$ 0 0 0
from typing import Optional , Awaitable , Tuple , List [EOL] import typing [EOL] import builtins [EOL] import asyncio [EOL] import importlib [EOL] import pkgutil [EOL] import types [comment] [EOL] from importlib . abc import PathEntryFinder [comment] [EOL] from typing import Any , Awaitable , Generator , List , Optional , Tuple [comment] [EOL] [EOL] import aioodbc [EOL] import aioredis [EOL] [EOL] import bot [EOL] from lib import database [EOL] from lib . data import timezones [EOL] from lib . data import AutoJoinChannel [comment] [EOL] from . import utils [EOL] from . coroutine import background , connection , join , logging [EOL] [EOL] [EOL] async def initializer ( ) : [EOL] await bot . config . read_config ( ) [EOL] bot . globals . displayName = bot . config . botnick [EOL] [EOL] bot . globals . pkgs = tuple ( bot . config . pkgs ) [EOL] [EOL] bot . globals . running = True [EOL] [EOL] bot . globals . cluster = connection . ConnectionHandler ( [string] , bot . config . awsServer , bot . config . awsPort ) [EOL] [EOL] bot . globals . redisPool = await aioredis . create_pool ( ( bot . config . redis [ [string] ] , bot . config . redis [ [string] ] ) , db = bot . config . redis [ [string] ] , password = bot . config . redis [ [string] ] , encoding = [string] , minsize = bot . config . redis [ [string] ] , maxsize = bot . config . redis [ [string] ] , ) [EOL] [EOL] schema = ... [EOL] for schema in bot . config . database : [EOL] pool = ... [EOL] pool = await aioodbc . create_pool ( minsize = bot . config . connections [ schema ] , maxsize = bot . config . connections [ schema ] , dsn = bot . config . database [ schema ] ) [EOL] bot . globals . connectionPools [ schema ] = pool [EOL] [EOL] pkg = ... [EOL] modules = ... [EOL] for pkg in bot . globals . pkgs : [EOL] try : [EOL] mod = ... [EOL] mod = importlib . import_module ( [string] + pkg + [string] ) [EOL] if hasattr ( mod , [string] ) : [EOL] modules = pkgutil . walk_packages ( path = mod . __path__ , prefix = mod . __name__ + [string] ) [EOL] _importer = ... [EOL] modname = ... [EOL] _ispkg = ... [EOL] for _importer , modname , _ispkg in modules : [EOL] importlib . import_module ( modname ) [EOL] except ModuleNotFoundError : [EOL] pass [EOL] [EOL] utils . joinChannel ( bot . config . botnick , float ( [string] ) ) [EOL] bot . globals . groupChannel = bot . globals . channels [ bot . config . botnick ] [EOL] if bot . config . owner : [EOL] utils . joinChannel ( bot . config . owner , float ( [string] ) ) [EOL] [EOL] db = ... [EOL] async with database . DatabaseMain . acquire ( ) as db : [EOL] autojoin = ... [EOL] async for autoJoin in db . getAutoJoinsChats ( ) : [EOL] utils . joinChannel ( autoJoin . broadcaster , autoJoin . priority ) [EOL] [EOL] [EOL] async def finalizer ( ) : [EOL] schema = ... [EOL] for schema in bot . config . database : [EOL] bot . globals . connectionPools [ schema ] . close ( ) [EOL] await bot . globals . connectionPools [ schema ] . wait_closed ( ) [EOL] [EOL] [EOL] def main ( argv = None ) : [EOL] print ( f'{ utils . now ( ) } [string] ' ) [EOL] try : [EOL] loop = asyncio . get_event_loop ( ) [EOL] loop . run_until_complete ( initializer ( ) ) [EOL] coro = asyncio . gather ( timezones . load_timezones ( ) , background . background_tasks ( ) , logging . record_logs ( ) , join . join_manager ( ) , bot . globals . cluster . run_connection ( ) , ) [EOL] loop . run_until_complete ( coro ) [EOL] if asyncio . Task . all_tasks ( ) : [EOL] asyncio . wait_for ( asyncio . gather ( * asyncio . Task . all_tasks ( ) ) , [number] ) [EOL] loop . run_until_complete ( finalizer ( ) ) [EOL] loop . close ( ) [EOL] return [number] [EOL] except Exception : [EOL] bot . globals . running = False [EOL] utils . logException ( ) [EOL] raise [EOL] finally : [EOL] print ( f'{ utils . now ( ) } [string] ' ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Optional , Any , Dict , Tuple , Deque [EOL] import typing [EOL] import datetime [EOL] import asyncio [EOL] import bot [EOL] import builtins [EOL] import asyncio [EOL] [EOL] import bot [EOL] import lib . ircmessage [EOL] [EOL] from collections import deque [EOL] from datetime import datetime , timedelta [EOL] from typing import Any , Deque , Dict , List , Optional , Tuple [comment] [EOL] [EOL] [EOL] from bot import data , utils [EOL] from bot . data . _messaging_queue import ChatMessage , WhisperMessage [comment] [EOL] from bot . coroutine import join [EOL] from bot . twitchmessage import IrcMessage , IrcMessageParams [EOL] [EOL] [EOL] class ConnectionHandler : [EOL] def __init__ ( self , name , server , port ) : [EOL] self . _writeQueue = ... [EOL] self . _writeQueue = deque ( ) [EOL] self . _name = name [EOL] self . _server = server [EOL] self . _port = port [EOL] self . _channels = { } [EOL] self . _transport = None [EOL] self . _reader = None [EOL] self . _writer = None [EOL] self . _messaging = data . MessagingQueue ( ) [EOL] self . lastSentPing = datetime . max [EOL] self . lastPing = datetime . max [EOL] self . lastConnectAttempt = datetime . min [EOL] [EOL] @ property def name ( self ) : [EOL] return self . _name [EOL] [EOL] @ property def server ( self ) : [EOL] return self . _server [EOL] [EOL] @ property def port ( self ) : [EOL] return self . _port [EOL] [EOL] @ property def address ( self ) : [EOL] return self . _server , self . _port [EOL] [EOL] @ property def isConnected ( self ) : [EOL] return self . _transport is not None [EOL] [EOL] @ property def channels ( self ) : [EOL] return self . _channels . copy ( ) [EOL] [EOL] @ property def messaging ( self ) : [EOL] return self . _messaging [EOL] [EOL] @ property def writeQueue ( self ) : [EOL] return self . _writeQueue [EOL] [EOL] async def run_connection ( self ) : [EOL] print ( f'{ utils . now ( ) } [string] { self . name }' ) [EOL] while bot . globals . running : [EOL] if not self . isConnected and not await self . connect ( ) : [EOL] await asyncio . sleep ( [number] ) [EOL] continue [EOL] try : [EOL] self . send_ping ( ) [EOL] self . flush_writes ( ) [EOL] await self . drain ( ) [EOL] try : [EOL] await asyncio . wait_for ( self . read ( ) , [number] ) [EOL] except asyncio . TimeoutError : [EOL] pass [EOL] except ( ConnectionError , data . ConnectionReset , asyncio . IncompleteReadError ) : [EOL] if self . _transport is not None : [EOL] self . disconnect ( ) [EOL] except data . LoginUnsuccessful : [EOL] if self . _transport is not None : [EOL] self . disconnect ( ) [EOL] break [EOL] [EOL] print ( f'{ utils . now ( ) } [string] { self . name }' ) [EOL] [EOL] async def connect ( self ) : [EOL] if self . _transport is not None : [EOL] raise ConnectionError ( [string] ) [EOL] [EOL] now = utils . now ( ) [EOL] if now - self . lastConnectAttempt < timedelta ( seconds = [number] ) : [EOL] return None [EOL] self . lastConnectAttempt = now [EOL] [EOL] try : [EOL] reader = ... [EOL] writer = ... [EOL] reader , writer = await asyncio . open_connection ( * self . address ) [EOL] [EOL] print ( f'{ utils . now ( ) } [string] { self . name } [string] { self . server }' ) [EOL] await self . login ( writer ) [EOL] self . _reader = reader [EOL] self . _writer = writer [EOL] self . _transport = writer . transport [EOL] [EOL] now = utils . now ( ) [EOL] self . lastSentPing = now [EOL] self . lastPing = now [EOL] join . connected ( self ) [EOL] [EOL] return True [EOL] except ConnectionError : [EOL] return False [EOL] [EOL] async def login ( self , writer ) : [EOL] if not isinstance ( writer , asyncio . StreamWriter ) : [EOL] raise TypeError ( ) [EOL] commands = [ IrcMessage ( None , None , [string] , IrcMessageParams ( bot . config . password or None ) ) , IrcMessage ( None , None , [string] , IrcMessageParams ( bot . config . botnick ) ) , IrcMessage ( None , None , [string] , IrcMessageParams ( bot . config . botnick + [string] , bot . config . botnick ) ) , IrcMessage ( None , None , [string] , IrcMessageParams ( [string] , [string] ) ) , IrcMessage ( None , None , [string] , IrcMessageParams ( [string] , [string] ) ) , IrcMessage ( None , None , [string] , IrcMessageParams ( [string] , [string] ) ) , ] [EOL] command = ... [EOL] for command in commands : [EOL] message = ( str ( command ) + [string] ) . encode ( [string] ) [EOL] writer . write ( message ) [EOL] self . _log_write ( command ) [EOL] await writer . drain ( ) [EOL] [EOL] def disconnect ( self ) : [EOL] if self . _transport is None : [EOL] raise ConnectionError ( ) [EOL] self . _transport . close ( ) [EOL] join . disconnected ( self ) [EOL] self . _transport = None [EOL] self . _reader = None [EOL] self . _writer = None [EOL] self . lastConnectAttempt = utils . now ( ) [EOL] self . lastSentPing = datetime . max [EOL] self . lastPing = datetime . max [EOL] print ( f'{ utils . now ( ) } [string] { self . name } [string] { self . server }' ) [EOL] [EOL] async def write ( self , command , * , channel = None , whisper = None ) : [EOL] if not isinstance ( command , IrcMessage ) : [EOL] raise TypeError ( ) [EOL] if self . _transport is None : [EOL] raise ConnectionError ( ) [EOL] [EOL] try : [EOL] messageBytes = str ( command ) . encode ( [string] ) [EOL] timestamp = utils . now ( ) [EOL] self . _writer . write ( messageBytes ) [EOL] self . _writer . write ( [string] ) [EOL] await self . _writer . drain ( ) [EOL] self . _on_write ( command , timestamp , channel = channel ) [EOL] self . _log_write ( command , channel = channel , whisper = whisper , timestamp = timestamp ) [EOL] except Exception : [EOL] utils . logException ( ) [EOL] raise [EOL] [EOL] def _on_write ( self , command , timestamp , * , channel = None ) : [EOL] if command . command == [string] : [EOL] self . lastSentPing = timestamp [EOL] if command . command == [string] and isinstance ( channel , data . Channel ) : [EOL] channel . onJoin ( ) [EOL] join . record_join ( ) [EOL] print ( f'{ utils . now ( ) } [string] { channel . channel } [string] { self . name }' ) [EOL] [EOL] async def drain ( self ) : [EOL] if self . _transport is None : [EOL] raise ConnectionError ( ) [EOL] while self . writeQueue : [EOL] item = ... [EOL] item = self . writeQueue . popleft ( ) [EOL] await self . write ( * item [ [number] ] , ** item [ [number] ] ) [EOL] [EOL] async def read ( self ) : [EOL] if self . _transport is None : [EOL] raise ConnectionError ( ) [EOL] try : [EOL] ircmsg = await self . _reader . readuntil ( [string] ) [EOL] except ConnectionError : [EOL] utils . logException ( ) [EOL] return [EOL] [EOL] try : [EOL] ircmsg = ircmsg [ : - [number] ] [EOL] if not ircmsg : [EOL] return [EOL] message = ircmsg . decode ( [string] ) [EOL] self . _log_read ( message ) [EOL] lib . ircmessage . parseMessage ( self , message , utils . now ( ) ) [EOL] except data . ConnectionReset : [EOL] raise [EOL] except data . LoginUnsuccessful : [EOL] bot . globals . running = False [EOL] raise [EOL] [EOL] def ping ( self , message = [string] ) : [EOL] self . queue_write ( IrcMessage ( None , None , [string] , IrcMessageParams ( None , message ) ) , prepend = True ) [EOL] self . lastPing = utils . now ( ) [EOL] [EOL] def send_ping ( self ) : [EOL] now = utils . now ( ) [EOL] sinceLastSend = now - self . lastSentPing [EOL] sinceLast = now - self . lastPing [EOL] if sinceLastSend >= timedelta ( minutes = [number] ) : [EOL] self . queue_write ( IrcMessage ( None , None , [string] , IrcMessageParams ( bot . config . botnick ) ) , prepend = True ) [EOL] self . lastSentPing = now [EOL] elif sinceLast >= timedelta ( minutes = [number] , seconds = [number] ) : [EOL] raise ConnectionError ( ) [EOL] [EOL] def _log_read ( self , message ) : [EOL] file = f'{ bot . config . botnick } [string] { self . name } [string] ' [EOL] utils . logIrcMessage ( file , [string] + message ) [EOL] [EOL] def _log_write ( self , command , * , channel = None , whisper = None , timestamp = None ) : [EOL] timestamp = timestamp or utils . now ( ) [EOL] if command . command == [string] : [EOL] command = IrcMessage ( command = [string] ) [EOL] files = [ ] [EOL] logs = [ ] [EOL] files . append ( f'{ bot . config . botnick } [string] { self . name } [string] ' ) [EOL] logs . append ( [string] + str ( command ) ) [EOL] file = ... [EOL] log = ... [EOL] if whisper and channel : [EOL] for file , log in zip ( files , logs ) : [EOL] utils . logIrcMessage ( file , log , timestamp ) [EOL] raise ValueError ( ) [EOL] if whisper : [EOL] files . append ( f' [string] { whisper . nick } [string] ' ) [EOL] logs . append ( f'{ bot . config . botnick } [string] { whisper . message }' ) [EOL] files . append ( f'{ bot . config . botnick } [string] ' ) [EOL] logs . append ( f'{ bot . config . botnick } [string] { whisper . nick } [string] { whisper . message }' ) [EOL] files . append ( f'{ bot . config . botnick } [string] ' ) [EOL] logs . append ( f' [string] { command }' ) [EOL] if channel : [EOL] files . append ( f'{ channel . ircChannel } [string] ' ) [EOL] logs . append ( f' [string] { command }' ) [EOL] if command . command == [string] : [EOL] files . append ( f'{ channel . ircChannel } [string] ' ) [EOL] logs . append ( f'{ bot . config . botnick } [string] { command . params . trailing }' ) [EOL] for file , log in zip ( files , logs ) : [EOL] utils . logIrcMessage ( file , log , timestamp ) [EOL] [EOL] def queue_write ( self , message , * , channel = None , whisper = None , prepend = False ) : [EOL] if not isinstance ( message , IrcMessage ) : [EOL] raise TypeError ( ) [EOL] kwargs = { } [EOL] if channel : [EOL] if not isinstance ( channel , data . Channel ) : [EOL] raise TypeError ( ) [EOL] kwargs [ [string] ] = channel [EOL] if whisper : [EOL] if not isinstance ( whisper , WhisperMessage ) : [EOL] raise TypeError ( ) [EOL] kwargs [ [string] ] = whisper [EOL] if channel and whisper : [EOL] raise ValueError ( ) [EOL] item = ... [EOL] item = ( message , ) , kwargs [EOL] if prepend : [EOL] self . writeQueue . appendleft ( item ) [EOL] else : [EOL] self . writeQueue . append ( item ) [EOL] [EOL] def join_channel ( self , channel ) : [EOL] self . _channels [ channel . channel ] = channel [EOL] [EOL] def part_channel ( self , channel ) : [EOL] if channel . channel not in self . _channels : [EOL] return [EOL] self . queue_write ( IrcMessage ( None , None , [string] , IrcMessageParams ( channel . ircChannel ) ) ) [EOL] del self . _channels [ channel . channel ] [EOL] [EOL] join . on_part ( channel . channel ) [EOL] print ( f'{ utils . now ( ) } [string] { channel . channel }' ) [EOL] [EOL] def flush_writes ( self ) : [EOL] self . messaging . cleanOldTimestamps ( ) [EOL] whisperMessage = ... [EOL] for whisperMessage in iter ( self . messaging . popWhisper , None ) : [EOL] ircMsg = f' [string] { whisperMessage . nick } [string] { whisperMessage . message }' [EOL] ircMsg = ircMsg [ : bot . config . messageLimit ] [EOL] try : [EOL] self . queue_write ( IrcMessage ( None , None , [string] , IrcMessageParams ( bot . globals . groupChannel . ircChannel , ircMsg ) ) , whisper = whisperMessage ) [EOL] except ValueError : [EOL] utils . logException ( ) [EOL] nessage = ... [EOL] for message in iter ( self . messaging . popChat , None ) : [EOL] try : [EOL] self . queue_write ( IrcMessage ( None , None , [string] , IrcMessageParams ( message . channel . ircChannel , message . message [ : bot . config . messageLimit ] ) ) , channel = message . channel ) [EOL] except ValueError : [EOL] utils . logException ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $bot.twitchmessage.IrcMessage$ 0 0 0 0 $bot.twitchmessage.IrcMessage$ 0 0 0 0 0 0 0 0 0 $bot.twitchmessage.IrcMessage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $bot.twitchmessage.IrcMessagebuiltins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $bot.data._messaging_queue.WhisperMessage$ 0 0 0 0 $bot.data._messaging_queue.WhisperMessage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $bot.data._messaging_queue.WhisperMessage$ 0 0 0 0 0 $bot.data._messaging_queue.WhisperMessage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $bot.data._messaging_queue.WhisperMessage$ 0 0 0 0 0 0 0 0 0 0 0 0 $bot.data._messaging_queue.ChatMessage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Deque [EOL] import typing [EOL] import builtins [EOL] import asyncio [EOL] [EOL] import aiofiles [EOL] [EOL] import bot [EOL] [EOL] from collections import deque [EOL] from typing import Deque , Tuple [EOL] [EOL] from bot import utils [EOL] [EOL] _queue = deque ( ) [EOL] [EOL] [EOL] async def record_logs ( ) : [EOL] name = [string] [EOL] print ( f'{ utils . now ( ) } [string] { name }' ) [EOL] try : [EOL] while bot . globals . running or _queue : [EOL] if _queue : [EOL] await _process_log ( ) [EOL] await asyncio . sleep ( [number] ) [EOL] finally : [EOL] bot . globals . running = False [EOL] print ( f'{ utils . now ( ) } [string] { name }' ) [EOL] [EOL] [EOL] def log ( file , log ) : [EOL] _queue . append ( ( file , log ) ) [EOL] [EOL] [EOL] async def _process_log ( ) : [EOL] filename = ... [EOL] log = ... [EOL] filename , log = _queue . popleft ( ) [EOL] async with aiofiles . open ( filename , [string] , encoding = [string] ) as file : [EOL] await file . write ( log ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Deque[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Deque[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 $typing.Deque[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $typing.Deque[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Deque[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Optional , Set , Deque [EOL] import typing [EOL] import builtins [EOL] import datetime [EOL] import bot [EOL] import asyncio [EOL] [EOL] import bot [EOL] [EOL] from datetime import datetime , timedelta [EOL] from collections import deque [EOL] from typing import Dict , Deque , List , Optional , Set [comment] [EOL] [EOL] from bot import data , utils [comment] [EOL] from bot . twitchmessage import IrcMessage , IrcMessageParams [EOL] from . import connection [comment] [EOL] [EOL] joinDuration = timedelta ( seconds = [number] ) [EOL] _joinTimes = deque ( ) [EOL] _channelJoined = set ( ) [EOL] [EOL] [EOL] async def join_manager ( ) : [EOL] name = [string] [EOL] print ( f'{ utils . now ( ) } [string] { name }' ) [EOL] while bot . globals . running : [EOL] try : [EOL] join_a_channel ( ) [EOL] await asyncio . sleep ( [number] / bot . config . joinPerSecond ) [EOL] except Exception : [EOL] utils . logException ( ) [EOL] print ( f'{ utils . now ( ) } [string] { name }' ) [EOL] [EOL] [EOL] def join_a_channel ( ) : [EOL] if not _can_process ( ) : [EOL] return [EOL] [EOL] channels = _connected_channels ( ) [EOL] notJoined = set ( channels . keys ( ) ) - _channelJoined [EOL] if not notJoined : [EOL] return [EOL] [EOL] broadcaster = ... [EOL] broadcaster = _get_join_with_lowest_priority ( channels , notJoined ) [EOL] if broadcaster is None : [EOL] return [EOL] chat = channels [ broadcaster ] [EOL] if chat . connection is None : [EOL] return [EOL] ircCommand = IrcMessage ( None , None , [string] , IrcMessageParams ( chat . ircChannel ) ) [EOL] chat . connection . queue_write ( ircCommand , channel = chat ) [EOL] _channelJoined . add ( chat . channel ) [EOL] [EOL] [EOL] def connected ( socket ) : [EOL] _joinTimes . append ( utils . now ( ) ) [EOL] [EOL] [EOL] def disconnected ( socket ) : [EOL] global _channelJoined [EOL] _channelJoined -= socket . channels . keys ( ) [EOL] [EOL] [EOL] def on_part ( channel ) : [EOL] _channelJoined . discard ( channel ) [EOL] [EOL] [EOL] def record_join ( ) : [EOL] timestamp = utils . now ( ) [EOL] _joinTimes . append ( timestamp ) [EOL] [EOL] [EOL] def _can_process ( ) : [EOL] timestamp = utils . now ( ) [EOL] while _joinTimes and ( timestamp - _joinTimes [ [number] ] ) > joinDuration : [EOL] _joinTimes . popleft ( ) [EOL] return len ( _joinTimes ) < bot . config . joinLimit [EOL] [EOL] [EOL] def _connected_channels ( ) : [EOL] if not bot . globals . cluster . isConnected : [EOL] return { } [EOL] return bot . globals . cluster . channels [EOL] [EOL] [EOL] def _get_join_with_lowest_priority ( channels , notJoinedChannels ) : [EOL] notJoined = ... [EOL] notJoined = [ channels [ nc ] for nc in notJoinedChannels ] [EOL] if not notJoined : [EOL] return None [EOL] priority = float ( min ( ch . joinPriority for ch in notJoined ) ) [EOL] return [ ch . channel for ch in notJoined if ch . joinPriority == priority ] [ [number] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.timedelta$ 0 0 0 0 0 0 0 0 $typing.Deque[datetime.datetime]$ 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Deque[datetime.datetime]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Deque[datetime.datetime]$ 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Deque[datetime.datetime]$ 0 0 0 0 $typing.Deque[datetime.datetime]$ 0 0 0 0 0 $datetime.timedelta$ 0 0 $typing.Deque[datetime.datetime]$ 0 0 0 0 0 0 0 0 $typing.Deque[datetime.datetime]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,'data.Channel']$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Any , Callable , Tuple [EOL] import typing [EOL] import builtins [EOL] from collections import OrderedDict [EOL] [EOL] from typing import Any , Dict , Callable , Optional , Tuple , TypeVar [EOL] [EOL] _KT = TypeVar ( [string] ) [EOL] _VT = TypeVar ( [string] ) [EOL] [EOL] [EOL] class DefaultOrderedDict ( OrderedDict , Dict [ _KT , _VT ] ) : [EOL] [comment] [EOL] def __init__ ( self , default_factory = None , * args , ** kwargs ) : [EOL] if default_factory is not None : [EOL] if not callable ( default_factory ) : [EOL] raise TypeError ( [string] ) [EOL] OrderedDict . __init__ ( self , * args , ** kwargs ) [EOL] self . default_factory = default_factory [EOL] [EOL] def __getitem__ ( self , key ) : [EOL] try : [EOL] return OrderedDict . __getitem__ ( self , key ) [EOL] except KeyError : [EOL] return self . __missing__ ( key ) [EOL] [EOL] def __missing__ ( self , key ) : [EOL] if self . default_factory is None : [EOL] raise KeyError ( key ) [EOL] value = ... [EOL] self [ key ] = value = self . default_factory ( ) [EOL] return value [EOL] [EOL] def __reduce__ ( self ) : [EOL] args = ... [EOL] if self . default_factory is None : [EOL] args = tuple ( ) [EOL] else : [EOL] args = self . default_factory , [EOL] return type ( self ) , args , None , None , self . items ( ) [EOL] [EOL] def copy ( self ) : [EOL] return self . __copy__ ( ) [EOL] [EOL] def __copy__ ( self ) : [EOL] return type ( self ) ( self . default_factory , self ) [EOL] [EOL] def __deepcopy__ ( self , memo ) : [EOL] import copy [EOL] return type ( self ) ( self . default_factory , copy . deepcopy ( self . items ( ) ) ) [EOL] [EOL] def __repr__ ( self ) : [EOL] return [string] % ( self . default_factory , OrderedDict . __repr__ ( self ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Optional[typing.Callable[[],_VT]]$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 $typing.Optional[typing.Callable[[],_VT]]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Callable[[],_VT]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 $typing.Optional[typing.Callable[[],_VT]]$ 0 $typing.Optional[typing.Callable[[],_VT]]$ 0 0 0 $_VT$ 0 0 0 $_KT$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $_KT$ 0 0 0 0 0 0 0 0 0 0 0 $_KT$ 0 0 0 0 $_VT$ 0 0 0 $_KT$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_KT$ 0 0 0 0 0 0 0 0 $_KT$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'DefaultOrderedDict[_KT,_VT]'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'DefaultOrderedDict[_KT,_VT]'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'DefaultOrderedDict[_KT,_VT]'$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
class LoginUnsuccessful ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class ConnectionReset ( Exception ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . _channel import Channel [comment] [EOL] from . _messaging_queue import MessagingQueue [comment] [EOL] from . _error import ConnectionReset , LoginUnsuccessful [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import OrderedDict , Optional , Any , List , Union , Set , Iterable , Deque [EOL] import typing [EOL] import builtins [EOL] import datetime [EOL] import collections [EOL] import bot [EOL] [EOL] from collections import defaultdict , deque , OrderedDict [EOL] from datetime import datetime , timedelta [EOL] from typing import Any , Deque , Dict , Iterable , NamedTuple , List , Optional , Set [comment] [EOL] from typing import Tuple , Union [comment] [EOL] [EOL] from bot import utils [EOL] from . import _channel , _collections [EOL] [EOL] [EOL] class ChatMessage ( NamedTuple ) : [EOL] channel = ... [EOL] message = ... [EOL] [EOL] [EOL] class WhisperMessage ( NamedTuple ) : [EOL] nick = ... [EOL] message = ... [EOL] [EOL] [EOL] disallowedCommands = { [string] , [string] , [string] , [string] , } [EOL] [EOL] [EOL] class MessagingQueue : [EOL] def __init__ ( self ) : [EOL] self . _chatQueues = ... [EOL] self . _chatQueues = [ ] , [ ] , [ ] [EOL] self . _whisperQueue = deque ( ) [EOL] self . _chatSent = [ ] [EOL] self . _whisperSent = [ ] [EOL] self . _lowQueueRecent = OrderedDict ( ) [EOL] self . _publicTime = ... [EOL] self . _publicTime = defaultdict ( lambda : datetime . min ) [EOL] [EOL] def cleanOldTimestamps ( self ) : [EOL] timestamp = utils . now ( ) [EOL] msgDuration = timedelta ( seconds = bot . config . messageSpan ) [EOL] self . _chatSent = [ t for t in self . _chatSent if timestamp - t <= msgDuration ] [EOL] msgDuration = timedelta ( seconds = bot . config . whiperSpan ) [EOL] self . _whisperSent = [ t for t in self . _whisperSent if timestamp - t <= msgDuration ] [EOL] [EOL] def sendChat ( self , channel , messages , priority = [number] , bypass = False ) : [EOL] if not isinstance ( channel , _channel . Channel ) : [EOL] raise TypeError ( ) [EOL] listMessages = ... [EOL] if isinstance ( messages , str ) : [EOL] listMessages = [ messages ] [EOL] elif isinstance ( messages , Iterable ) : [EOL] listMessages = list ( messages ) [EOL] else : [EOL] raise TypeError ( ) [EOL] if any ( msg for msg in listMessages if not isinstance ( msg , str ) ) : [EOL] raise TypeError ( ) [EOL] if ( priority < - len ( self . _chatQueues ) or priority >= len ( self . _chatQueues ) ) : [EOL] raise ValueError ( ) [EOL] whispers = ... [EOL] whispers = _collections . DefaultOrderedDict ( list ) [EOL] [EOL] message = ... [EOL] for message in listMessages : [EOL] if not message : [EOL] continue [EOL] if ( not bypass [EOL] and message . startswith ( tuple ( disallowedCommands ) ) ) : [EOL] continue [EOL] if message . startswith ( ( [string] , [string] ) ) : [EOL] tokens = message . split ( [string] , [number] ) [EOL] if len ( tokens ) < [number] : [EOL] continue [EOL] whispers [ tokens [ [number] ] . lower ( ) ] . append ( tokens [ [number] ] ) [EOL] else : [EOL] self . _chatQueues [ priority ] . append ( ChatMessage ( channel , message ) ) [EOL] if whispers : [EOL] for nick in whispers : [comment] [EOL] self . sendWhisper ( nick , whispers [ nick ] ) [EOL] [EOL] def sendWhisper ( self , nick , messages ) : [EOL] if not isinstance ( nick , str ) : [EOL] raise TypeError ( ) [EOL] if isinstance ( messages , str ) : [EOL] messages = messages , [EOL] elif not isinstance ( messages , Iterable ) : [EOL] raise TypeError ( ) [EOL] message = ... [EOL] for message in messages : [EOL] self . _whisperQueue . append ( WhisperMessage ( nick , message ) ) [EOL] [EOL] def popChat ( self ) : [EOL] timestamp = utils . now ( ) [EOL] nextMessage = self . _getChatMessage ( timestamp ) [EOL] if nextMessage : [EOL] self . _chatSent . append ( timestamp ) [EOL] return nextMessage [EOL] [EOL] def _getChatMessage ( self , timestamp ) : [EOL] publicDelay = timedelta ( seconds = bot . config . publicDelay ) [EOL] isModGood = len ( self . _chatSent ) < bot . config . modLimit [EOL] isModSpamGood = len ( self . _chatSent ) < bot . config . modSpamLimit [EOL] isPublicGood = len ( self . _chatSent ) < bot . config . publicLimit [EOL] [EOL] if isPublicGood : [EOL] queue = ... [EOL] i = ... [EOL] message = ... [EOL] for queue in self . _chatQueues : [EOL] for i , message in enumerate ( queue ) : [EOL] last = ... [EOL] last = self . _publicTime [ message . channel . channel ] [EOL] if ( self . _isMod ( message . channel ) or timestamp - last < publicDelay ) : [EOL] continue [EOL] self . _publicTime [ message . channel . channel ] = timestamp [EOL] del queue [ i ] [EOL] return message [EOL] if isModGood : [EOL] for queue in self . _chatQueues [ : - [number] ] : [EOL] for i , message in enumerate ( queue ) : [EOL] if not self . _isMod ( message . channel ) : [EOL] continue [EOL] del queue [ i ] [EOL] return message [EOL] else : [EOL] for i , message in enumerate ( self . _chatQueues [ - [number] ] ) : [EOL] if message . channel . channel in self . _lowQueueRecent : [EOL] continue [EOL] if not self . _isMod ( message . channel ) : [EOL] continue [EOL] del self . _chatQueues [ - [number] ] [ i ] [EOL] self . _lowQueueRecent [ message . channel . channel ] = True [EOL] return message [EOL] if isModSpamGood and self . _chatQueues [ - [number] ] : [EOL] for channel in self . _lowQueueRecent : [EOL] for i , message in enumerate ( self . _chatQueues [ - [number] ] ) : [EOL] if message . channel . channel != channel : [EOL] continue [EOL] if not self . _isMod ( message . channel ) : [EOL] continue [EOL] del self . _chatQueues [ - [number] ] [ i ] [EOL] self . _lowQueueRecent [ message . channel . channel ] = True [EOL] self . _lowQueueRecent . move_to_end ( message . channel . channel ) [EOL] return message [EOL] return None [EOL] [EOL] @ staticmethod def _isMod ( channel ) : [EOL] return channel . isMod or bot . config . botnick == channel . channel [EOL] [EOL] def popWhisper ( self ) : [EOL] if ( self . _whisperQueue [EOL] and len ( self . _whisperSent ) < bot . config . whiperLimit ) : [EOL] self . _whisperSent . append ( utils . now ( ) ) [EOL] return self . _whisperQueue . popleft ( ) [EOL] return None [EOL] [EOL] def clearChat ( self , channel ) : [EOL] queue = ... [EOL] message = ... [EOL] for queue in self . _chatQueues : [EOL] for message in queue [ : ] : [EOL] if message . channel . channel == channel . channel : [EOL] queue . remove ( message ) [EOL] [EOL] def clearAllChat ( self ) : [EOL] queue = ... [EOL] for queue in self . _chatQueues : [EOL] queue . clear ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'_channel.Channel'$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[ChatMessage]$ 0 0 0 $builtins.int$ 0 0 0 $ChatMessage$ 0 0 0 0 $typing.List[ChatMessage]$ 0 0 0 0 0 0 0 $builtins.int$ 0 $ChatMessage$ 0 0 0 $typing.List[ChatMessage]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $ChatMessage$ 0 0 0 0 0 0 0 0 0 0 0 0 $ChatMessage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ChatMessage$ 0 0 0 0 0 0 0 0 0 $typing.List[ChatMessage]$ 0 $builtins.int$ 0 0 0 $ChatMessage$ 0 0 0 0 0 0 $typing.List[ChatMessage]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $ChatMessage$ 0 0 0 $typing.List[ChatMessage]$ 0 0 0 0 0 0 0 0 0 $ChatMessage$ 0 0 0 0 0 0 0 0 $typing.List[ChatMessage]$ 0 $builtins.int$ 0 0 0 $ChatMessage$ 0 0 0 0 0 $builtins.int$ 0 $ChatMessage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ChatMessage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ChatMessage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $ChatMessage$ 0 0 0 0 0 0 0 0 0 $ChatMessage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $ChatMessage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ChatMessage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ChatMessage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $ChatMessage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ChatMessage$ 0 0 0 0 0 0 0 $ChatMessage$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $'_channel.Channel'$ 0 0 0 0 $'_channel.Channel'$ 0 0 0 0 0 0 0 0 0 $'_channel.Channel'$ 0 $'_channel.Channel'$ 0 0 0 $typing.Optional[WhisperMessage]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $'_channel.Channel'$ 0 0 0 $typing.List[ChatMessage]$ 0 0 0 $ChatMessage$ 0 0 0 0 $typing.List[ChatMessage]$ 0 0 0 0 0 0 0 $ChatMessage$ 0 $typing.List[ChatMessage]$ 0 0 0 0 0 0 $ChatMessage$ 0 $'_channel.Channel'$ 0 $'_channel.Channel'$ 0 $'_channel.Channel'$ 0 $'_channel.Channel'$ 0 0 $typing.List[ChatMessage]$ 0 0 0 $ChatMessage$ 0 0 0 0 $None$ 0 0 0 0 0 $typing.List[ChatMessage]$ 0 0 0 0 $typing.List[ChatMessage]$ 0 0 0 0 0 0 $typing.List[ChatMessage]$ 0 0 0 0 0
from typing import Optional , List [EOL] import typing [EOL] import builtins [EOL] from typing import List , NamedTuple , Optional [comment] [EOL] [EOL] [EOL] class ParsedParams ( NamedTuple ) : [EOL] middle = ... [EOL] trailing = ... [EOL] [EOL] [EOL] class IrcMessageParams : [EOL] __slots__ = ( [string] , [string] ) [EOL] [EOL] def __init__ ( self , middle = None , trailing = None ) : [EOL] if not isinstance ( middle , ( type ( None ) , str ) ) : [EOL] raise TypeError ( f' [string] { type ( middle ) . __name__ }' ) [EOL] if not isinstance ( trailing , ( type ( None ) , str ) ) : [EOL] raise TypeError ( f' [string] { type ( trailing ) . __name__ }' ) [EOL] [EOL] if middle is not None : [EOL] if not middle : [EOL] raise ValueError ( f' [string] ' ) [EOL] if any ( [ s for s in middle . split ( [string] ) if len ( s ) and s [ [number] ] == [string] ] ) : [EOL] raise ValueError ( f' [string] { middle }' ) [EOL] if set ( middle ) == { [string] } or any ( c in [string] for c in middle ) : [EOL] raise ValueError ( f' [string] { middle }' ) [EOL] if trailing is not None and any ( c in [string] for c in trailing ) : [EOL] raise ValueError ( f' [string] { trailing }' ) [EOL] [EOL] self . _middle = middle [EOL] self . _trailing = trailing [EOL] [EOL] @ classmethod def fromParams ( cls , params ) : [EOL] if not isinstance ( params , str ) : [EOL] raise TypeError ( ) [EOL] return cls ( * cls . parse ( params ) ) [EOL] [EOL] @ property def isEmpty ( self ) : [EOL] return self . _middle is None and self . _trailing is None [EOL] [EOL] @ property def middle ( self ) : [EOL] return self . _middle [EOL] [EOL] @ property def trailing ( self ) : [EOL] return self . _trailing [EOL] [EOL] def __str__ ( self ) : [EOL] s = [string] [EOL] if self . _middle is not None : [EOL] s += self . _middle [EOL] if self . _middle is not None and self . _trailing is not None : [EOL] s += [string] [EOL] if self . _trailing is not None : [EOL] s += [string] + self . _trailing [EOL] return s [EOL] [EOL] def __eq__ ( self , other ) : [EOL] if isinstance ( other , IrcMessageParams ) : [EOL] return ( self . _middle == other . _middle [EOL] and self . _trailing == other . _trailing ) [EOL] return False [EOL] [EOL] def __ne__ ( self , other ) : [EOL] return not self . __eq__ ( other ) [EOL] [EOL] @ staticmethod def parse ( params ) : [EOL] if not isinstance ( params , str ) : [EOL] raise TypeError ( ) [EOL] [EOL] length = len ( params ) [EOL] i = [number] [EOL] [EOL] if i == length : [EOL] return ParsedParams ( None , None ) [EOL] [EOL] char = ... [EOL] middle = ... [EOL] trailing = ... [EOL] hasTrailing = False [EOL] s = [ ] [EOL] m = [ ] [EOL] t = [ ] [EOL] while i < length : [EOL] char = params [ i ] [EOL] i += [number] [EOL] [EOL] if char == [string] : [EOL] while i < length and params [ i ] == [string] : [EOL] i += [number] [EOL] m . extend ( s ) [EOL] m . append ( [string] ) [EOL] s = [ ] [EOL] continue [EOL] elif char == [string] and not len ( s ) : [EOL] break [EOL] else : [EOL] s . append ( char ) [EOL] [EOL] if len ( s ) : [EOL] m . extend ( s ) [EOL] elif len ( m ) : [EOL] del m [ - [number] ] [EOL] [EOL] if char == [string] : [EOL] hasTrailing = True [EOL] while i < length : [EOL] char = params [ i ] [EOL] i += [number] [EOL] [EOL] t . append ( char ) [EOL] [EOL] if i != length : [EOL] raise ValueError ( ) [EOL] [EOL] middle = [string] . join ( m ) if m else None [EOL] trailing = [string] . join ( t ) if hasTrailing else None [EOL] [EOL] return ParsedParams ( middle , trailing ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $'IrcMessageParams'$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.object$ 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 $ParsedParams$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional [EOL] import typing [EOL] import _irctags [EOL] import _ircparams [EOL] import _ircprefix [EOL] import builtins [EOL] from . _ircparams import IrcMessageParams [EOL] from . _ircprefix import IrcMessagePrefix , nickSpecials [EOL] from . _irctags import IrcMessageTagsReadOnly , IrcMessageTags , IrcMessageTagsKey [EOL] from . _irctags import TagValue , unescapedValue [comment] [EOL] from typing import List , NamedTuple , Optional , Union [comment] [EOL] import string [EOL] [EOL] Command = Union [ str , int ] [EOL] [EOL] defaultParams = IrcMessageParams ( ) [EOL] [EOL] [EOL] class ParsedMessage ( NamedTuple ) : [EOL] tags = ... [EOL] prefix = ... [EOL] command = ... [EOL] params = ... [EOL] [EOL] [EOL] class IrcMessage : [EOL] __slots__ = ( [string] , [string] , [string] , [string] ) [EOL] [EOL] def __init__ ( self , tags = None , prefix = None , command = [number] , params = defaultParams ) : [EOL] if isinstance ( tags , IrcMessageTagsReadOnly ) : [EOL] tags = IrcMessageTagsReadOnly ( tags ) [EOL] elif tags is not None : [EOL] raise TypeError ( ) [EOL] if not isinstance ( prefix , ( type ( None ) , IrcMessagePrefix ) ) : [EOL] raise TypeError ( ) [EOL] if isinstance ( command , str ) : [EOL] if not command . isalpha ( ) : [EOL] raise ValueError ( ) [EOL] elif isinstance ( command , int ) : [EOL] if not ( [number] <= command <= [number] ) : [EOL] raise ValueError ( ) [EOL] else : [EOL] raise TypeError ( ) [EOL] if not isinstance ( params , IrcMessageParams ) : [EOL] raise TypeError ( ) [EOL] [EOL] self . _tags = tags [EOL] self . _prefix = prefix [EOL] self . _command = command [EOL] self . _params = params [EOL] [EOL] @ classmethod def fromMessage ( cls , message ) : [EOL] if not isinstance ( message , str ) : [EOL] raise TypeError ( ) [EOL] return cls ( * cls . parse ( message ) ) [EOL] [EOL] @ property def tags ( self ) : [EOL] return self . _tags [EOL] [EOL] @ property def prefix ( self ) : [EOL] return self . _prefix [EOL] [EOL] @ property def command ( self ) : [EOL] return self . _command [EOL] [EOL] @ property def params ( self ) : [EOL] return self . _params [EOL] [EOL] def __str__ ( self ) : [EOL] message = [string] [EOL] if self . _tags is not None : [EOL] message += [string] + str ( self . _tags ) + [string] [EOL] if self . _prefix is not None : [EOL] message += [string] + str ( self . _prefix ) + [string] [EOL] if isinstance ( self . _command , int ) : [EOL] message += str ( self . _command ) . rjust ( [number] , [string] ) [EOL] else : [EOL] message += str ( self . _command ) [EOL] if not self . _params . isEmpty : [EOL] message += [string] + str ( self . _params ) [EOL] return message [EOL] [EOL] def __eq__ ( self , other ) : [EOL] if isinstance ( other , IrcMessage ) : [EOL] return ( self . _tags == other . _tags [EOL] and self . _prefix == other . _prefix [EOL] and self . _command == other . _command [EOL] and self . _params == other . _params ) [EOL] return False [EOL] [EOL] def __ne__ ( self , other ) : [EOL] return not self . __eq__ ( other ) [EOL] [EOL] @ staticmethod def parse ( message ) : [EOL] if not isinstance ( message , str ) : [EOL] raise TypeError ( ) [EOL] [EOL] length = len ( message ) [EOL] i = [number] [EOL] [EOL] if i == length : [EOL] raise ValueError ( ) [EOL] [EOL] tags = None [EOL] prefix = None [EOL] command = ... [EOL] params = ... [EOL] [EOL] [comment] [EOL] v = ... [EOL] s = ... [EOL] isVendor = ... [EOL] isKey = ... [EOL] key = ... [EOL] vendor = ... [EOL] value = ... [EOL] tagkey = ... [EOL] char = message [ i ] [EOL] if char == [string] : [EOL] i += [number] [EOL] [EOL] tags = IrcMessageTags ( ) [EOL] while True : [EOL] if i == length : [EOL] raise ValueError ( ) [EOL] if message [ i ] == [string] : [EOL] raise ValueError ( ) [EOL] if message [ i ] == [string] : [EOL] raise ValueError ( ) [EOL] [EOL] v = [ ] [EOL] isVendor = False [EOL] isKey = False [EOL] value = True [EOL] s = [ ] [EOL] while i < length : [EOL] char = message [ i ] [EOL] i += [number] [EOL] [EOL] if char == [string] : [EOL] while i < length and message [ i ] == [string] : [EOL] i += [number] [EOL] break [EOL] elif char == [string] : [EOL] break [EOL] elif char == [string] : [EOL] break [EOL] elif char == [string] : [EOL] if len ( s ) == [number] : [EOL] raise ValueError ( ) [EOL] if s [ - [number] ] == [string] : [EOL] raise ValueError ( ) [EOL] if not s [ [number] ] . isalpha ( ) : [EOL] raise ValueError ( ) [EOL] if not isVendor and v : [EOL] raise ValueError ( ) [EOL] v . extend ( s ) [EOL] v . append ( char ) [EOL] s = [ ] [EOL] isVendor = True [EOL] elif char == [string] : [EOL] if isKey : [EOL] raise ValueError ( ) [EOL] if len ( s ) == [number] : [EOL] raise ValueError ( ) [EOL] if s [ - [number] ] == [string] : [EOL] raise ValueError ( ) [EOL] if not s [ [number] ] . isalpha ( ) : [EOL] raise ValueError ( ) [EOL] v . extend ( s ) [EOL] s = [ ] [EOL] isVendor = False [EOL] isKey = True [EOL] else : [EOL] if not char . isalnum ( ) and char != [string] and char != [string] : [EOL] raise ValueError ( ) [EOL] s . append ( char ) [EOL] [EOL] if isVendor : [EOL] raise ValueError ( ) [EOL] [EOL] key = [string] . join ( s ) [EOL] vendor = [string] . join ( v ) if v else None [EOL] [EOL] if char == [string] : [EOL] v = [ ] [EOL] while i < length : [EOL] char = message [ i ] [EOL] i += [number] [EOL] [EOL] if char == [string] : [EOL] while i < length and message [ i ] == [string] : [EOL] i += [number] [EOL] break [EOL] elif char == [string] : [EOL] break [EOL] if char in [string] : [EOL] raise ValueError ( ) [EOL] if char == [string] : [EOL] if i < length and message [ i ] in unescapedValue : [EOL] char = unescapedValue [ message [ i ] ] [EOL] v . append ( char ) [EOL] i += [number] [EOL] else : [EOL] raise ValueError ( ) [EOL] else : [EOL] v . append ( char ) [EOL] value = [string] . join ( v ) [EOL] [EOL] tagkey = IrcMessageTagsKey ( key , vendor ) [EOL] [EOL] if tagkey in tags : [EOL] raise ValueError ( ) [EOL] [EOL] tags [ tagkey ] = value [EOL] [EOL] if i == length : [EOL] raise ValueError ( ) [EOL] if char == [string] : [EOL] char = message [ i ] [EOL] break [EOL] [EOL] [comment] [EOL] u = ... [EOL] h = ... [EOL] s = ... [EOL] servername = ... [EOL] nick = ... [EOL] user = ... [EOL] host = ... [EOL] isServerName = ... [EOL] isNick = ... [EOL] ss = ... [EOL] if char == [string] : [EOL] i += [number] [EOL] [EOL] if i == length : [EOL] raise ValueError ( ) [EOL] [EOL] s = [ ] [EOL] servername = None [EOL] nick = None [EOL] user = None [EOL] host = None [EOL] isServerName = False [EOL] isNick = False [EOL] while i < length : [EOL] char = message [ i ] [EOL] i += [number] [EOL] [EOL] if char == [string] : [EOL] while i < length and message [ i ] == [string] : [EOL] i += [number] [EOL] break [EOL] if char == [string] : [EOL] if isServerName : [EOL] raise ValueError ( ) [EOL] break [EOL] if char == [string] : [EOL] if isServerName : [EOL] raise ValueError ( ) [EOL] break [EOL] if not len ( s ) : [EOL] if char not in string . ascii_letters and not char . isdigit ( ) : [EOL] raise ValueError ( ) [EOL] s . append ( char ) [EOL] else : [EOL] if ( char in string . ascii_letters or char . isdigit ( ) or char == [string] ) : [EOL] s . append ( char ) [EOL] elif char in nickSpecials : [EOL] if isServerName : [EOL] raise ValueError ( ) [EOL] s . append ( char ) [EOL] isNick = True [EOL] elif char == [string] : [EOL] if isNick : [EOL] raise ValueError ( ) [EOL] if s [ - [number] ] == [string] : [EOL] raise ValueError ( ) [EOL] if s [ - [number] ] == [string] : [EOL] raise ValueError ( ) [EOL] s . append ( char ) [EOL] isServerName = True [EOL] else : [EOL] raise ValueError ( ) [EOL] if isServerName and isNick : [EOL] raise ValueError ( ) [EOL] if len ( s ) == [number] : [EOL] raise ValueError ( ) [EOL] ss = [string] . join ( s ) [EOL] if isServerName : [EOL] if s [ - [number] ] == [string] : [EOL] raise ValueError ( ) [EOL] if s [ - [number] ] == [string] : [EOL] raise ValueError ( ) [EOL] servername = ss [EOL] else : [EOL] nick = ss [EOL] [EOL] if char == [string] : [EOL] u = [ ] [EOL] while i < length : [EOL] char = message [ i ] [EOL] i += [number] [EOL] [EOL] if char == [string] : [EOL] while i < length and message [ i ] == [string] : [EOL] i += [number] [EOL] break [EOL] if char == [string] : [EOL] raise ValueError ( ) [EOL] if char == [string] : [EOL] break [EOL] if char in [string] : [EOL] raise ValueError ( ) [EOL] u . append ( char ) [EOL] user = [string] . join ( u ) [EOL] [EOL] if char == [string] : [EOL] h = [ ] [EOL] s = [ ] [EOL] while i < length : [EOL] char = message [ i ] [EOL] i += [number] [EOL] [EOL] if char == [string] : [EOL] if len ( s ) == [number] : [EOL] raise ValueError ( ) [EOL] if s [ - [number] ] == [string] : [EOL] raise ValueError ( ) [EOL] if not s [ [number] ] . isalpha ( ) and not s [ [number] ] . isdigit ( ) : [EOL] raise ValueError ( ) [EOL] h . extend ( s ) [EOL] s = [ ] [EOL] [EOL] while i < length and message [ i ] == [string] : [EOL] i += [number] [EOL] break [EOL] elif char == [string] : [EOL] if len ( s ) == [number] : [EOL] raise ValueError ( ) [EOL] if s [ - [number] ] == [string] : [EOL] raise ValueError ( ) [EOL] if not s [ [number] ] . isalpha ( ) and not s [ [number] ] . isdigit ( ) : [EOL] raise ValueError ( ) [EOL] s . append ( char ) [EOL] h . extend ( s ) [EOL] s = [ ] [EOL] else : [EOL] if not char . isalnum ( ) and char != [string] and char != [string] : [EOL] raise ValueError ( ) [EOL] s . append ( char ) [EOL] host = [string] . join ( h ) [EOL] [EOL] prefix = IrcMessagePrefix ( servername , nick , user , host ) [EOL] [EOL] [comment] [EOL] if i == length : [EOL] raise ValueError ( ) [EOL] [EOL] s = [ ] [EOL] while i < length : [EOL] char = message [ i ] [EOL] i += [number] [EOL] [EOL] if char == [string] : [EOL] while i < length and message [ i ] == [string] : [EOL] i += [number] [EOL] break [EOL] if len ( s ) : [EOL] if s [ [number] ] . isalpha ( ) and not char . isalpha ( ) : [EOL] raise ValueError ( ) [EOL] elif s [ [number] ] . isdigit ( ) and not char . isdigit ( ) : [EOL] raise ValueError ( ) [EOL] else : [EOL] if not char . isalpha ( ) and not char . isdigit ( ) : [EOL] raise ValueError ( ) [EOL] s . append ( char ) [EOL] if not s : [EOL] raise ValueError ( ) [EOL] if s [ [number] ] . isdigit ( ) : [EOL] if len ( s ) != [number] : [EOL] raise ValueError ( ) [EOL] command = int ( [string] . join ( s ) ) [EOL] else : [EOL] command = [string] . join ( s ) [EOL] [EOL] [comment] [EOL] s = ... [EOL] m = ... [EOL] t = ... [EOL] hasTrailing = ... [EOL] middle = None [EOL] trailing = None [EOL] if i != length : [EOL] hasTrailing = False [EOL] s = [ ] [EOL] m = [ ] [EOL] t = [ ] [EOL] while i < length : [EOL] char = message [ i ] [EOL] i += [number] [EOL] [EOL] if char == [string] : [EOL] while i < length and message [ i ] == [string] : [EOL] i += [number] [EOL] m . extend ( s ) [EOL] m . append ( [string] ) [EOL] s = [ ] [EOL] continue [EOL] elif char == [string] and not len ( s ) : [EOL] break [EOL] else : [EOL] s . append ( char ) [EOL] [EOL] if len ( s ) : [EOL] m . extend ( s ) [EOL] elif len ( m ) : [EOL] del m [ - [number] ] [EOL] [EOL] if char == [string] : [EOL] hasTrailing = True [EOL] while i < length : [EOL] char = message [ i ] [EOL] i += [number] [EOL] [EOL] t . append ( char ) [EOL] [EOL] middle = [string] . join ( m ) if m else None [EOL] trailing = [string] . join ( t ) if hasTrailing else None [EOL] params = IrcMessageParams ( middle , trailing ) [EOL] [EOL] return ParsedMessage ( tags , prefix , command , params ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_ircparams.IrcMessageParams$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[_irctags.IrcMessageTags.ReadOnly]$ 0 0 0 $typing.Optional[_ircprefix.IrcMessagePrefix]$ 0 0 0 $Command$ 0 0 0 $_ircparams.IrcMessageParams$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Optional[_irctags.IrcMessageTags.ReadOnly]$ 0 0 0 $typing.Optional[_ircprefix.IrcMessagePrefix]$ 0 0 0 $Command$ 0 0 0 $_ircparams.IrcMessageParams$ 0 $_ircparams.IrcMessageParams$ 0 0 0 0 0 0 $typing.Optional[_irctags.IrcMessageTags.ReadOnly]$ 0 0 0 0 0 $typing.Optional[_irctags.IrcMessageTags.ReadOnly]$ 0 0 0 $typing.Optional[_irctags.IrcMessageTags.ReadOnly]$ 0 0 0 $typing.Optional[_irctags.IrcMessageTags.ReadOnly]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[_ircprefix.IrcMessagePrefix]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Command$ 0 0 0 0 0 0 0 $Command$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Command$ 0 0 0 0 0 0 0 0 0 0 $Command$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_ircparams.IrcMessageParams$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[_irctags.IrcMessageTags.ReadOnly]$ 0 $typing.Optional[_irctags.IrcMessageTags.ReadOnly]$ 0 0 0 $typing.Optional[_ircprefix.IrcMessagePrefix]$ 0 $typing.Optional[_ircprefix.IrcMessagePrefix]$ 0 0 0 $Command$ 0 $Command$ 0 0 0 $_ircparams.IrcMessageParams$ 0 $_ircparams.IrcMessageParams$ 0 0 0 0 0 $'IrcMessage'$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Optional[_irctags.IrcMessageTags.ReadOnly]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[_ircprefix.IrcMessagePrefix]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Command$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_ircparams.IrcMessageParams$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.object$ 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 $ParsedMessage$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional [EOL] import typing [EOL] import builtins [EOL] from typing import List , NamedTuple , Optional [comment] [EOL] import string [EOL] [EOL] [EOL] class ParsedPrefix ( NamedTuple ) : [EOL] servername = ... [EOL] nick = ... [EOL] user = ... [EOL] host = ... [EOL] [EOL] [EOL] nickSpecials = [string] [EOL] [EOL] [EOL] class IrcMessagePrefix : [EOL] __slots__ = ( [string] , [string] , [string] , [string] ) [EOL] [EOL] def __init__ ( self , servername = None , nick = None , user = None , host = None ) : [EOL] if not isinstance ( servername , ( type ( None ) , str ) ) : [EOL] raise TypeError ( ) [EOL] if not isinstance ( nick , ( type ( None ) , str ) ) : [EOL] raise TypeError ( ) [EOL] if not isinstance ( user , ( type ( None ) , str ) ) : [EOL] raise TypeError ( ) [EOL] if not isinstance ( host , ( type ( None ) , str ) ) : [EOL] raise TypeError ( ) [EOL] [EOL] if servername is None and nick is None : [EOL] raise ValueError ( ) [EOL] if servername is not None : [EOL] if nick is not None or user is not None or host is not None : [EOL] raise ValueError ( ) [EOL] if not servername or any ( c in [string] for c in servername ) : [EOL] raise ValueError ( ) [EOL] if nick is not None : [EOL] if not nick or any ( c in [string] for c in nick ) : [EOL] raise ValueError ( ) [EOL] if user is not None : [EOL] if not user or any ( c in [string] for c in user ) : [EOL] raise ValueError ( ) [EOL] if host is not None : [EOL] if not host or any ( c in [string] for c in host ) : [EOL] raise ValueError ( ) [EOL] [EOL] self . _servername = servername [EOL] self . _nick = nick [EOL] self . _user = user [EOL] self . _host = host [EOL] [EOL] @ classmethod def fromPrefix ( cls , prefix ) : [EOL] if not isinstance ( prefix , str ) : [EOL] raise TypeError ( ) [EOL] return cls ( * cls . parse ( prefix ) ) [EOL] [EOL] @ property def servername ( self ) : [EOL] return self . _servername [EOL] [EOL] @ property def nick ( self ) : [EOL] return self . _nick [EOL] [EOL] @ property def user ( self ) : [EOL] return self . _user [EOL] [EOL] @ property def host ( self ) : [EOL] return self . _host [EOL] [EOL] def __str__ ( self ) : [EOL] if self . _servername is not None : [EOL] return str ( self . _servername ) [EOL] if self . _nick is not None : [EOL] s = str ( self . _nick ) [EOL] if self . _user is not None : [EOL] s += [string] + self . _user [EOL] if self . _host is not None : [EOL] s += [string] + self . _host [EOL] return s [EOL] return [string] [EOL] [EOL] def __eq__ ( self , other ) : [EOL] if isinstance ( other , IrcMessagePrefix ) : [EOL] return ( self . _servername == other . _servername [EOL] and self . _nick == other . _nick [EOL] and self . _user == other . _user [EOL] and self . _host == other . _host ) [EOL] return False [EOL] [EOL] def __ne__ ( self , other ) : [EOL] return not ( self == other ) [EOL] [EOL] @ staticmethod def parse ( params ) : [EOL] if not isinstance ( params , str ) : [EOL] raise TypeError ( ) [EOL] [EOL] length = len ( params ) [EOL] i = [number] [EOL] [EOL] if i == length : [EOL] raise ValueError ( ) [EOL] [EOL] char = ... [EOL] ss = ... [EOL] s = ... [EOL] u = ... [EOL] h = ... [EOL] servername = None [EOL] nick = None [EOL] user = None [EOL] host = None [EOL] isServerName = False [EOL] isNick = False [EOL] s = [ ] [EOL] while i < length : [EOL] char = params [ i ] [EOL] i += [number] [EOL] [EOL] if char == [string] : [EOL] if isServerName : [EOL] raise ValueError ( ) [EOL] break [EOL] if char == [string] : [EOL] if isServerName : [EOL] raise ValueError ( ) [EOL] break [EOL] if not len ( s ) : [EOL] if char not in string . ascii_letters and not char . isdigit ( ) : [EOL] raise ValueError ( ) [EOL] s . append ( char ) [EOL] else : [EOL] if ( char in string . ascii_letters or char . isdigit ( ) or char == [string] ) : [EOL] s . append ( char ) [EOL] elif char in nickSpecials : [EOL] if isServerName : [EOL] raise ValueError ( ) [EOL] s . append ( char ) [EOL] isNick = True [EOL] elif char == [string] : [EOL] if isNick : [EOL] raise ValueError ( ) [EOL] s . append ( char ) [EOL] isServerName = True [EOL] else : [EOL] raise ValueError ( ) [EOL] if isServerName and isNick : [EOL] raise ValueError ( ) [EOL] if len ( s ) == [number] : [EOL] raise ValueError ( ) [EOL] if char == [string] : [EOL] raise ValueError ( ) [EOL] ss = [string] . join ( s ) [EOL] if isServerName : [EOL] servername = ss [EOL] else : [EOL] nick = ss [EOL] [EOL] if char == [string] : [EOL] u = [ ] [EOL] while i < length : [EOL] char = params [ i ] [EOL] i += [number] [EOL] [EOL] if char == [string] : [EOL] break [EOL] if char == [string] : [EOL] raise ValueError ( ) [EOL] if char in [string] : [EOL] raise ValueError ( ) [EOL] u . append ( char ) [EOL] if len ( u ) == [number] : [EOL] raise ValueError ( ) [EOL] user = [string] . join ( u ) [EOL] [EOL] if char == [string] : [EOL] h = [ ] [EOL] s = [ ] [EOL] while i < length : [EOL] char = params [ i ] [EOL] i += [number] [EOL] [EOL] if char == [string] : [EOL] if len ( s ) == [number] : [EOL] raise ValueError ( ) [EOL] if s [ - [number] ] == [string] : [EOL] raise ValueError ( ) [EOL] if not s [ [number] ] . isalpha ( ) and not s [ [number] ] . isdigit ( ) : [EOL] raise ValueError ( ) [EOL] s . append ( char ) [EOL] h . extend ( s ) [EOL] s = [ ] [EOL] else : [EOL] if not char . isalnum ( ) and char != [string] and char != [string] : [EOL] raise ValueError ( ) [EOL] s . append ( char ) [EOL] [EOL] if len ( s ) == [number] : [EOL] raise ValueError ( ) [EOL] if s [ - [number] ] == [string] : [EOL] raise ValueError ( ) [EOL] if not s [ [number] ] . isalpha ( ) and not s [ [number] ] . isdigit ( ) : [EOL] raise ValueError ( ) [EOL] h . extend ( s ) [EOL] [EOL] host = [string] . join ( h ) [EOL] [EOL] if i != length : [EOL] raise ValueError ( ) [EOL] [EOL] return ParsedPrefix ( servername , nick , user , host ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $'IrcMessagePrefix'$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.object$ 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 $ParsedPrefix$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . _ircmessage import IrcMessage [comment] [EOL] from . _ircparams import IrcMessageParams [comment] [EOL] from . _ircprefix import IrcMessagePrefix [comment] [EOL] from . _irctags import IrcMessageTags [comment] [EOL] from . _irctags import IrcMessageTagsKey , IrcMessageTagsReadOnly [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0