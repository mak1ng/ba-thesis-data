import builtins [EOL] from typing import List , Any , Tuple , Literal , Iterator [EOL] import typing_extensions [EOL] import typing [EOL] import abjad [EOL] import baca [EOL] [EOL] import desir [EOL] [EOL] [EOL] class DemoCalligraphYx ( object ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [EOL] __slots__ = ( ) [EOL] [EOL] [comment] [EOL] [EOL] @ staticmethod def configure_lilypond_file ( lilypond_file ) : [EOL] lilypond_file . layout . indent = [number] [EOL] lilypond_file . layout . ragged_right = True [EOL] lilypond_file . paper . top_margin = [number] [EOL] lilypond_file . paper . left_margin = [number] [EOL] lilypond_file . paper . print_page_number = False [EOL] lilypond_file . paper . minimal_page_breaking = True [EOL] lilypond_file . paper . ragged_last_bottom = True [EOL] lilypond_file . paper . ragged_bottom = True [EOL] lilypond_file . global_staff_size = [number] [EOL] lilypond_file . default_paper_size = [string] [EOL] return lilypond_file [EOL] [EOL] @ staticmethod def extend_staff ( staff , notes ) : [EOL] staff . extend ( notes ) [EOL] stop_offset = staff [ - [number] ] . offset . prolated . stop [EOL] stop_sixteenth = abjad . in_terms_of ( stop_offset , [number] ) [ [number] ] [EOL] if not stop_sixteenth % [number] == [number] : [EOL] skips_needed = [number] - ( stop_sixteenth % [number] ) [EOL] skips = abjad . Skip ( ( [number] , [number] ) ) * skips_needed [EOL] staff . extend ( skips ) [EOL] staff [ - [number] ] . breaks . line = True [EOL] [EOL] @ staticmethod def format_cycle_token ( cycle_token ) : [EOL] period , residue_list = cycle_token [EOL] residue_list = [string] . join ( [ str ( x ) for x in residue_list ] ) [EOL] return [string] % ( period , residue_list ) [EOL] [EOL] @ staticmethod def make_pitch_numbers_and_duration ( ) : [EOL] notes = reversed ( abjad . make_scale ( [number] ) [ [number] : ] ) [EOL] pitch_numbers = [ note . pitch . number for note in notes ] [EOL] duration = abjad . Duration ( [number] , [number] ) [EOL] return pitch_numbers , duration [EOL] [EOL] @ staticmethod def make_score ( ) : [EOL] score = abjad . Score ( [ abjad . Staff ( ) ] ) [EOL] staff = score [ [number] ] [EOL] staff . remove_commands . add ( [string] ) [EOL] pnd = abjad . Duration ( [number] , [number] ) [EOL] score . spacing . proportional_notation_duration = pnd [EOL] score . spacing . uniform_stretching = True [EOL] score . spacing . strict_note_spacing = True [EOL] score . stem . transparent = True [EOL] score . beam . auto_beaming = False [EOL] score . meter . transparent = True [EOL] score . text_script . staff_padding = [number] [EOL] score . bar_line . stencil = False [EOL] score . meter . stencil = False [EOL] lilypond_file = abjad . LilyPondFile . new ( score ) [EOL] DemoCalligraphYx . configure_lilypond_file ( lilypond_file ) [EOL] return score [EOL] [EOL] [comment] [EOL] [EOL] @ staticmethod def Yx_1 ( pitch_numbers , duration ) : [EOL] from desir import calligraphs [EOL] [EOL] segment_cycle = ( [number] , [ [number] , [number] , [number] , [number] ] ) [EOL] segment_cycles = [ segment_cycle ] [EOL] pitch_numbers = list ( calligraphs . Y ( pitch_numbers , segment_cycles ) ) [EOL] cycle_token = ( [number] , [ [number] ] ) [EOL] [EOL] def function ( x ) : [EOL] return list ( abjad . repeat_n_cycles ( x , [number] ) ) [EOL] [EOL] extrusion_token = calligraphs . ExtrusionToken ( cycle_token , [number] , function ) [EOL] [EOL] pitch_numbers = calligraphs . extrude_line_segment_strict ( pitch_numbers , extrusion_token ) [EOL] pitch_numbers = baca . sequence ( pitch_numbers ) . flatten ( ) [EOL] [EOL] notes = abjad . make_notes ( pitch_numbers , [ duration ] ) [EOL] fseg_1 = DemoCalligraphYx . format_cycle_token ( segment_cycle ) [EOL] ext_label = [string] [EOL] label = [string] % ( fseg_1 , ext_label ) [EOL] notes [ [number] ] . markup . up . append ( abjad . Markup ( label ) ) [EOL] return notes [EOL] [EOL] @ staticmethod def Yx_2 ( pitch_numbers , duration ) : [EOL] from desir import calligraphs [EOL] [EOL] segment_cycle = ( [number] , [ [number] , [number] , [number] , [number] ] ) [EOL] segment_cycles = [ segment_cycle ] [EOL] pitch_numbers = list ( calligraphs . Y ( pitch_numbers , segment_cycles ) ) [EOL] cycle_token = ( [number] , [ [number] ] ) [EOL] [EOL] def function ( x ) : [EOL] return list ( desir . iterate_sequence_boustrophedon ( x ) ) [EOL] [EOL] extrusion_token = calligraphs . ExtrusionToken ( cycle_token , [number] , function ) [EOL] [EOL] pitch_numbers = calligraphs . extrude_line_segment_strict ( pitch_numbers , extrusion_token ) [EOL] pitch_numbers = baca . sequence ( pitch_numbers ) . flatten ( ) [EOL] [EOL] notes = abjad . make_notes ( pitch_numbers , [ duration ] ) [EOL] fseg_1 = DemoCalligraphYx . format_cycle_token ( segment_cycle ) [EOL] ext_label = [string] [EOL] label = [string] % ( fseg_1 , ext_label ) [EOL] notes [ [number] ] . markup . up . append ( abjad . Markup ( label ) ) [EOL] return notes [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] score = DemoCalligraphYx . make_score ( ) [EOL] staff = score [ [number] ] [EOL] ( pitch_numbers , duration , ) = DemoCalligraphYx . make_pitch_numbers_and_duration ( ) [EOL] staff ( DemoCalligraphYx . Yx_1 ( pitch_numbers , duration ) ) [EOL] staff ( DemoCalligraphYx . Yx_2 ( pitch_numbers , duration ) ) [EOL] abjad . show ( score . lilypond_file ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,typing.List[builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,typing.List[builtins.int]]]$ 0 0 $typing.List[typing.Tuple[builtins.int,typing.List[builtins.int]]]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.List[typing.Tuple[builtins.int,typing.List[builtins.int]]]$ 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,typing.List[builtins.int]]]$ 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,typing.List[builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,typing.List[builtins.int]]]$ 0 0 $typing.List[typing.Tuple[builtins.int,typing.List[builtins.int]]]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.List[typing.Tuple[builtins.int,typing.List[builtins.int]]]$ 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,typing.List[builtins.int]]]$ 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Tuple , List [EOL] import typing [EOL] import abjad [EOL] import baca [EOL] [EOL] import desir [EOL] [EOL] [EOL] def Y ( iterable , segment_tokens = [ ( [number] , [ ] ) ] , start_tokens = [ ( [number] , [ ] ) ] , stop_tokens = [ ( [number] , [ ] ) ] , ) : [EOL] [docstring] [EOL] precursor = _Y_precursor ( iterable , segment_tokens , start_tokens , stop_tokens ) [EOL] result = precursor . flatten ( ) [EOL] result = [ _ for _ in result if _ is not None ] [EOL] return result [EOL] [EOL] [EOL] def _Y_precursor ( iterable , segment_tokens = [ ( [number] , [ ] ) ] , start_tokens = [ ( [number] , [ ] ) ] , stop_tokens = [ ( [number] , [ ] ) ] , ) : [EOL] iterable = list ( iterable ) [EOL] iterable_length = len ( iterable ) [EOL] token_lists = ( segment_tokens , start_tokens , stop_tokens ) [EOL] total_period = _token_lists_to_total_period ( token_lists , iterable_length ) [EOL] cycled_iterable = abjad . CyclicTuple ( iterable ) [EOL] segment_sieve = desir . cycle_tokens_to_sieve ( * segment_tokens ) [EOL] scaled_start_tokens = _scale_start_cycle_tokens ( start_tokens , iterable_length ) [EOL] start_sieve = desir . cycle_tokens_to_sieve ( * scaled_start_tokens ) [EOL] scaled_stop_tokens = _scale_stop_cycle_tokens ( stop_tokens , iterable_length ) [EOL] stop_sieve = desir . cycle_tokens_to_sieve ( * scaled_stop_tokens ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] total_sieve = segment_sieve | start_sieve | stop_sieve [EOL] total_bases = desir . get_congruent_bases ( total_sieve , total_period ) [EOL] total_values = baca . sequence ( cycled_iterable ) [EOL] total_values = total_values . retain ( total_bases ) [EOL] total_values = list ( total_values ) [EOL] total_train = total_sieve . get_boolean_vector ( total_period ) [EOL] [comment] [EOL] populated_train = [ ] [EOL] for boolean_value in total_train : [EOL] if boolean_value == [number] : [EOL] populated_train . append ( None ) [EOL] else : [EOL] populated_train . append ( total_values . pop ( [number] ) ) [EOL] [comment] [EOL] populated_train = baca . sequence ( populated_train ) [EOL] parts = populated_train . partition_by_counts ( [ iterable_length ] , cyclic = True ) [EOL] return parts [EOL] [EOL] [EOL] def _positional_vector ( * iterables ) : [EOL] positional_vector = [ ] [EOL] iterables = baca . sequence ( iterables ) [EOL] for token in iterables . zip ( truncate = False ) : [EOL] if any ( token ) : [EOL] positional_vector . append ( [number] ) [EOL] else : [EOL] positional_vector . append ( [number] ) [EOL] return positional_vector [EOL] [EOL] [EOL] def _token_lists_to_total_period ( token_lists , iterable_length ) : [EOL] periods = [ iterable_length ] [EOL] for token_list in token_lists : [EOL] for period , residue_list in token_list : [EOL] periods . append ( period ) [EOL] return abjad . mathx . least_common_multiple ( * periods ) [EOL] [EOL] [EOL] def _scale_start_cycle_token ( cycle_token , multiplier ) : [EOL] period , residue_list = cycle_token [EOL] scaled_period = multiplier * period [EOL] scaled_residue_list = [ multiplier * residue for residue in residue_list ] [EOL] scaled_cycle_token = ( scaled_period , scaled_residue_list ) [EOL] return scaled_cycle_token [EOL] [EOL] [EOL] def _scale_start_cycle_tokens ( cycle_tokens , multiplier ) : [EOL] result = [ ] [EOL] for cycle_token in cycle_tokens : [EOL] result . append ( _scale_start_cycle_token ( cycle_token , multiplier ) ) [EOL] return result [EOL] [EOL] [EOL] def _scale_stop_cycle_token ( cycle_token , iterable_length ) : [EOL] period , residue_list = cycle_token [EOL] scaled_period = iterable_length * period [EOL] scaled_residue_list = [ ( iterable_length * residue ) - [number] for residue in residue_list ] [EOL] scaled_cycle_token = ( scaled_period , scaled_residue_list ) [EOL] return scaled_cycle_token [EOL] [EOL] [EOL] def _scale_stop_cycle_tokens ( cycle_tokens , iterable_length ) : [EOL] result = [ ] [EOL] for cycle_token in cycle_tokens : [EOL] result . append ( _scale_stop_cycle_token ( cycle_token , iterable_length ) ) [EOL] return result [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Optional , List [EOL] import pathlib [EOL] import typing [EOL] import os [EOL] import pathlib [EOL] import sys [EOL] [EOL] import baca [EOL] import ide [EOL] import pytest [EOL] [EOL] import desir [EOL] [EOL] [EOL] def test_desir_pitch_machat_01 ( ) : [EOL] [EOL] assert desir . machat == [ [number] , [number] , - [number] , - [number] , [number] , [number] , [number] , [number] , [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] , - [number] , - [number] , - [number] , [number] , ] [EOL] [EOL] [EOL] def test_desir_pitch_machat_02 ( ) : [EOL] [docstring] [EOL] [EOL] assert tuple ( sorted ( desir . machat ) ) == ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ) [EOL] [EOL] [EOL] def test_desir_pitch_partitioned_pitch_field_pitch_number_lists_01 ( ) : [EOL] [EOL] assert desir . partitioned_pitch_field_pitch_number_lists == [ [ ( - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ) , ] , [ ( - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] ) , ] , [ ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ] , [ ( - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ] , [ ( - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] ) , ( [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ] , [ ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] ) , ] , [ ( - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] ) , ] , [ ( - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] ) , ] , ] [EOL] [EOL] [EOL] def test_desir_pitch_pitch_field_number_lists_01 ( ) : [EOL] [EOL] assert desir . pitch_field_pitch_number_lists == [ ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ) , ] [EOL] [EOL] [EOL] def test_desir_pitch_teferim_01 ( ) : [EOL] [EOL] assert desir . teferim == [ ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] ) , ] [EOL] [EOL] [EOL] def test_partition_to_avoid_octave_adjacencies_01 ( ) : [EOL] [EOL] pitches = [ [number] , [number] ] [EOL] [EOL] result = desir . partition_to_avoid_octave_adjacencies ( pitches , [string] ) [EOL] assert result == [ ( [number] , ) , ( [number] , ) ] [EOL] [EOL] result = desir . partition_to_avoid_octave_adjacencies ( pitches , [string] ) [EOL] assert result == [ ( [number] , ) , ( [number] , ) ] [EOL] [EOL] [EOL] def test_partition_to_avoid_octave_adjacencies_02 ( ) : [EOL] pytest . skip ( [string] ) [EOL] [EOL] pitches = [ [number] , [number] , [number] ] [EOL] [EOL] result = desir . partition_to_avoid_octave_adjacencies ( pitches , [string] ) [EOL] assert result == [ ( [number] , [number] ) , ( [number] , ) ] [EOL] [EOL] result = desir . partition_to_avoid_octave_adjacencies ( pitches , [string] ) [EOL] assert result == [ ( [number] , ) , ( [number] , [number] ) ] [EOL] [EOL] [EOL] def test_partition_to_avoid_octave_adjacencies_03 ( ) : [EOL] [EOL] pitches = [ [number] , [number] , [number] , [number] ] [EOL] [EOL] result = desir . partition_to_avoid_octave_adjacencies ( pitches , [string] ) [EOL] assert result == [ ( [number] , [number] ) , ( [number] , [number] ) ] [EOL] [EOL] result = desir . partition_to_avoid_octave_adjacencies ( pitches , [string] ) [EOL] assert result == [ ( [number] , [number] ) , ( [number] , [number] ) ] [EOL] [EOL] [EOL] def test_partition_to_avoid_octave_adjacencies_04 ( ) : [EOL] pytest . skip ( [string] ) [EOL] [EOL] pitches = [ [number] , [number] , [number] , [number] , [number] ] [EOL] [EOL] result = desir . partition_to_avoid_octave_adjacencies ( pitches , [string] ) [EOL] assert result == [ ( [number] , [number] , [number] ) , ( [number] , [number] ) ] [EOL] [EOL] result = desir . partition_to_avoid_octave_adjacencies ( pitches , [string] ) [EOL] assert result == [ ( [number] , [number] ) , ( [number] , [number] , [number] ) ] [EOL] [EOL] [EOL] def test_partition_to_avoid_octave_adjacencies_05 ( ) : [EOL] [EOL] pitches = [ [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] [EOL] result = desir . partition_to_avoid_octave_adjacencies ( pitches , [string] ) [EOL] assert result == [ ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) ] [EOL] [EOL] result = desir . partition_to_avoid_octave_adjacencies ( pitches , [string] ) [EOL] assert result == [ ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) ] [EOL] [EOL] [EOL] directories = [ ] [EOL] if os . getenv ( [string] ) == [string] : [EOL] abjad_ide = ide . AbjadIDE ( ) [EOL] travis_build_dir = os . getenv ( [string] ) [EOL] assert isinstance ( travis_build_dir , str ) , repr ( travis_build_dir ) [EOL] wrapper = pathlib . Path ( travis_build_dir ) [EOL] assert isinstance ( wrapper , pathlib . Path ) , repr ( wrapper ) [EOL] segments = wrapper / wrapper . name / [string] [EOL] segments = baca . Path ( segments , scores = wrapper . parent ) [EOL] assert isinstance ( segments , baca . Path ) , repr ( segments ) [EOL] directories = segments . list_paths ( ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , directories ) def test_segments_01 ( directory ) : [EOL] exit_code = abjad_ide . check_definition_py ( directory ) [EOL] if exit_code != [number] : [EOL] sys . exit ( exit_code ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , directories ) def test_segments_02 ( directory ) : [EOL] abjad_ide . _test_segment_illustration ( directory ) [EOL]	typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 $pathlib.Path$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 $typing.Any$ 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
from typing import Any , Dict , List [EOL] import io [EOL] import pathlib [EOL] import typing [EOL] import pathlib [EOL] [EOL] import abjad [EOL] [EOL] import desir [EOL] [EOL] [EOL] def trim_teferim ( ) : [EOL] reading_number_to_pitch_range = { [number] : abjad . PitchRange ( [string] ) , [number] : abjad . PitchRange ( [string] ) , [number] : abjad . PitchRange ( [string] ) , [number] : abjad . PitchRange ( [string] ) , [number] : abjad . PitchRange ( [string] ) , [number] : abjad . PitchRange ( [string] ) , } [EOL] teferim_by_reading_in_range = [ ] [EOL] teferim_by_reading_out_of_range = [ ] [EOL] for reading_number in range ( [number] , [number] ) : [EOL] teferim_octet_in_range = [ ] [EOL] teferim_octet_out_of_range = [ ] [EOL] pitch_range = reading_number_to_pitch_range [ reading_number ] [EOL] reading_index = reading_number - [number] [EOL] teferim = desir . teferim_by_reading [ reading_index ] [EOL] for tefer in teferim : [EOL] tefer_in_range = [ ] [EOL] tefer_out_of_range = [ ] [EOL] for pitch in tefer : [EOL] if pitch in pitch_range : [EOL] tefer_in_range . append ( pitch ) [EOL] else : [EOL] tefer_out_of_range . append ( pitch ) [EOL] teferim_octet_in_range . append ( tuple ( tefer_in_range ) ) [EOL] teferim_octet_out_of_range . append ( tuple ( tefer_out_of_range ) ) [EOL] teferim_by_reading_in_range . append ( teferim_octet_in_range ) [EOL] teferim_by_reading_out_of_range . append ( teferim_octet_out_of_range ) [EOL] return teferim_by_reading_in_range , teferim_by_reading_out_of_range [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] result = trim_teferim ( ) [EOL] teferim_by_reading_in_range , teferim_by_reading_out_of_range = result [EOL] [EOL] print ( teferim_by_reading_in_range ) [EOL] print ( ) [EOL] print ( teferim_by_reading_out_of_range ) [EOL] [EOL] data_name = [string] [EOL] path_name = pathlib . Path ( [string] , [string] % data_name ) [EOL] out = open ( path_name , [string] ) [EOL] output = [string] % ( data_name , teferim_by_reading_in_range ) [EOL] out . write ( output ) [EOL] out . close [EOL] [EOL] data_name = [string] [EOL] path_name = pathlib . Path ( [string] , [string] % data_name ) [EOL] out = open ( path_name , [string] ) [EOL] output = [string] % ( data_name , teferim_by_reading_out_of_range ) [EOL] out . write ( output ) [EOL] out . close [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $io.TextIOWrapper$ 0 0 0 $pathlib.Path$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $io.TextIOWrapper$ 0 0 0 $builtins.str$ 0 0 $io.TextIOWrapper$ 0 0 0 0 $builtins.str$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $io.TextIOWrapper$ 0 0 0 $pathlib.Path$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $io.TextIOWrapper$ 0 0 0 $builtins.str$ 0 0 $io.TextIOWrapper$ 0 0 0
from typing import Any , Set , Tuple , List [EOL] import desir [EOL] import typing [EOL] import abjad [EOL] import baca [EOL] [EOL] import desir [EOL] [EOL] [EOL] def sacred_reading ( iterable , contour_sieve , deletion_sieve , * extrusion_tokens ) : [EOL] [docstring] [EOL] [EOL] result = desir . tools . apply_contour_sieve ( iterable , contour_sieve ) [EOL] result = _apply_deletion_sieve ( result , deletion_sieve ) [EOL] result = _apply_extrusion_tokens ( result , * extrusion_tokens ) [EOL] [EOL] segment_lengths = [ ] [EOL] for segment in result : [EOL] segment = baca . sequence ( segment ) [EOL] flattened_segment = segment . flatten ( ) [EOL] filtered_segment = [ _ for _ in flattened_segment if _ is not None ] [EOL] segment_lengths . append ( len ( filtered_segment ) ) [EOL] segment_lengths = [string] . join ( [ str ( _ ) for _ in segment_lengths ] ) [EOL] [comment] [EOL] result = baca . sequence ( result ) [EOL] flattened_result = result . flatten ( ) [EOL] filtered_result = [ _ for _ in flattened_result if _ is not None ] [EOL] length = len ( filtered_result ) [EOL] filtered_result = baca . sequence ( filtered_result ) [EOL] period = filtered_result . period_of_rotation ( ) [EOL] [EOL] if length == period : [EOL] print ( [string] % length ) [EOL] else : [EOL] new_result = [ ] [EOL] while len ( baca . sequence ( new_result ) . flatten ( ) ) != period : [EOL] new_result . append ( result . pop ( [number] ) ) [EOL] result = new_result [EOL] print ( [string] % ( length , period ) ) [EOL] [EOL] print ( [string] % len ( result ) ) [EOL] [EOL] repetitions_removed = [number] [EOL] result = baca . sequence ( result ) [EOL] for left , right in result . nwise ( n = [number] ) : [EOL] [comment] [EOL] try : [EOL] if isinstance ( left [ - [number] ] , list ) : [EOL] left_number = left [ - [number] ] [ - [number] ] [EOL] else : [EOL] left_number = left [ - [number] ] [EOL] if isinstance ( right [ [number] ] , list ) : [EOL] right_list = right [ [number] ] [EOL] right_number = right [ [number] ] [ [number] ] [EOL] else : [EOL] right_list = right [EOL] right_number = right [ [number] ] [EOL] if left_number == right_number : [EOL] right_list . pop ( [number] ) [EOL] repetitions_removed += [number] [EOL] except IndexError : [EOL] pass [EOL] print ( [string] % repetitions_removed ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def _apply_deletion_sieve ( structured_iterable , deletion_sieve ) : [EOL] [comment] [EOL] [comment] [EOL] if deletion_sieve is None : [EOL] return structured_iterable [EOL] lengths = [ len ( x ) for x in structured_iterable ] [EOL] structured_iterable = baca . sequence ( structured_iterable ) [EOL] flattened_iterable = structured_iterable . flatten ( depth = [number] ) [EOL] [comment] [EOL] [comment] [EOL] result = abjad . CyclicTuple ( flattened_iterable ) [EOL] for i , element in enumerate ( result ) : [EOL] if deletion_sieve . is_congruent_base ( i ) : [EOL] result [ i ] = None [EOL] result = result . partition_by_counts ( lengths , cyclic = True ) [EOL] return result [EOL] [EOL] [EOL] def _make_filtered_iterable ( structured_iterable ) : [EOL] filtered_iterable = [ ] [EOL] for part in structured_iterable : [EOL] filtered_part = [ x for x in part if x is not None ] [EOL] filtered_iterable . append ( filtered_part ) [EOL] return filtered_iterable [EOL] [EOL] [EOL] def _apply_extrusion_tokens ( structured_iterable , * extrusion_tokens ) : [EOL] filtered_iterable = _make_filtered_iterable ( structured_iterable ) [EOL] lengths = [ len ( x ) for x in filtered_iterable ] [EOL] flattened_iterable = baca . sequence ( filtered_iterable ) [EOL] flattened_iterable = flattened_iterable . flatten ( ) [EOL] print ( [string] % len ( flattened_iterable ) ) [EOL] divisors = abjad . mathx . divisors ( len ( flattened_iterable ) ) [EOL] print ( [string] % divisors ) [EOL] periods = [ len ( flattened_iterable ) ] [EOL] periods += [ token . sieve . period for token in extrusion_tokens ] [EOL] period = abjad . mathx . least_common_multiple ( * periods ) [EOL] print ( [string] % periods [ [number] : ] ) [EOL] print ( [string] % period ) [EOL] cycled_iterable = abjad . phasor ( flattened_iterable , length = period ) [EOL] cycled_iterable = list ( cycled_iterable ) [EOL] total_length = len ( cycled_iterable ) [EOL] forbidden_indices = abjad . mathx . cumulative_sums ( lengths ) [EOL] cycle_token = ( len ( flattened_iterable ) , forbidden_indices ) [EOL] forbidden_sieve = desir . cycle_tokens_to_sieve ( cycle_token ) [EOL] forbidden_indices = set ( forbidden_sieve . get_congruent_bases ( total_length ) ) [EOL] forbidden_indices . remove ( [number] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] for index , element in enumerate ( cycled_iterable ) : [EOL] applicable_token = None [EOL] for token in extrusion_tokens : [EOL] if token . sieve . is_congruent_base ( index ) : [EOL] [comment] [EOL] next_index = index + [number] [EOL] stop_index = index + token . length [EOL] following_indices = set ( range ( next_index , stop_index ) ) [EOL] [comment] [EOL] if not following_indices & forbidden_indices : [EOL] applicable_token = token [EOL] if applicable_token is not None : [EOL] [comment] [EOL] input = cycled_iterable [ index : stop_index ] [EOL] output = applicable_token . function ( input ) [EOL] cycled_iterable [ index ] = output [EOL] cycled_iterable = baca . sequence ( cycled_iterable ) [EOL] result = cycled_iterable . partition_by_counts ( lengths , cyclic = True ) [EOL] return result [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] iterable = list ( range ( [number] ) ) [EOL] contour_sieve = abjad . Pattern ( [ [number] ] , period = [number] ) | abjad . Pattern ( [ [number] ] , period = [number] ) [EOL] result = desir . tools . apply_contour_sieve ( iterable , contour_sieve ) [EOL] print ( len ( result ) ) [EOL] deletion_sieve = abjad . Pattern ( [ [number] ] , period = [number] ) | abjad . Pattern ( [ [number] ] , period = [number] ) [EOL] result = _apply_deletion_sieve ( result , deletion_sieve ) [EOL] print ( len ( result ) ) [EOL] cycle = abjad . Pattern ( [ [number] ] , period = [number] ) | abjad . Pattern ( [ [number] ] , period = [number] ) [EOL] length = [number] [EOL] [EOL] def function ( x ) : [EOL] return list ( baca . sequence ( x ) . repeat ( x , [number] ) ) + x [ [number] : [number] ] [EOL] [EOL] extrusion_token = desir . tools . ExtrusionToken ( cycle , length , function ) [EOL] result = _apply_extrusion_tokens ( result , extrusion_token ) [EOL] print ( len ( result ) ) [EOL] print ( result ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $desir.tools.ExtrusionToken$ 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $desir.tools.ExtrusionToken$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0
from typing import Any , List [EOL] import pathlib [EOL] import typing [EOL] import pathlib [EOL] [EOL] import abjad [EOL] import baca [EOL] import quicktions [EOL] [EOL] [EOL] class TabulateVerticalities ( object ) : [EOL] [docstring] [EOL] [EOL] output_directory = pathlib . Path ( [string] ) [EOL] [EOL] @ staticmethod def add_measures ( score ) : [EOL] for staff in abjad . iterate ( score ) . components ( abjad . Staff ) : [EOL] measures = [ ] [EOL] leaves = abjad . select ( staff ) . leaves ( ) [EOL] durations = [ abjad . Duration ( [number] , [number] ) ] [EOL] for notes in abjad . Duration . group_prolated ( leaves , durations , cyclic = True , overhang = True ) : [EOL] time_signature = abjad . TimeSignature ( ( [number] , [number] ) ) [EOL] abjad . attch ( time_signature , notes [ [number] ] ) [EOL] measure = abjad . Container ( notes ) [EOL] measures . append ( measure ) [EOL] staff [ : ] = measures [EOL] return score [EOL] [EOL] @ staticmethod def add_partitions ( score , partitions ) : [EOL] print ( [string] % len ( partitions ) ) [EOL] treble_staff = score [ [string] ] [EOL] bass_staff = score [ [string] ] [EOL] for partition in partitions : [EOL] treble_measure = abjad . Container ( ) [EOL] bass_measure = abjad . Container ( ) [EOL] for chord in partition : [EOL] treble_chord , bass_chord = chord . split_by_altitude ( chord ) [EOL] treble_measure . append ( treble_chord ) [EOL] bass_measure . append ( bass_chord ) [EOL] treble_staff . append ( treble_measure ) [EOL] bass_staff . append ( bass_measure ) [EOL] print ( [string] ) [EOL] return score [EOL] [EOL] @ staticmethod def apply_footer ( lilypond_file ) : [EOL] footer_string = [string] [EOL] next_file_number = TabulateVerticalities . get_next_file_number ( ) [EOL] footer_string += str ( next_file_number ) [EOL] footer_markup = abjad . Markup ( [string] % footer_string ) [EOL] lilypond_file . paper . oddFooterMarkup = footer_markup [EOL] lilypond_file . paper . evenFooterMarkup = footer_markup [EOL] [EOL] @ staticmethod def apply_layout ( score ) : [EOL] schema = abjad . LayoutSchema ( quicktions . Fraction ( [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , - [number] ) ) [EOL] treble_staff = score [ [string] ] [EOL] abjad . apply_layout_schema ( treble_staff , schema , adjust_eol = False ) [EOL] abjad . label . measure_numbers ( score ) [EOL] return score [EOL] [EOL] @ staticmethod def conditionally_save_pdf ( ) : [EOL] save = input ( [string] ) [EOL] if save . lower ( ) == [string] : [EOL] next_file_number = TabulateVerticalities . get_next_file_number ( ) [EOL] next_file_number = str ( next_file_number ) . zfill ( [number] ) [EOL] next_file_name = f" [string] { next_file_number } [string] " [EOL] next_full_file_name = pathlib . Path ( TabulateVerticalities . output_directory , next_file_name ) [EOL] abjad . persist ( next_full_file_name ) . as_pdf ( ) [EOL] print ( f" [string] { next_file_name } [string] " ) [EOL] [EOL] @ staticmethod def get_next_file_number ( ) : [EOL] file_numbers = [ ] [EOL] for file_name in TabulateVerticalities . output_directory . glob ( [string] ) : [EOL] try : [EOL] file_numbers . append ( int ( file_name [ - [number] : - [number] ] ) ) [EOL] except ValueError : [EOL] pass [EOL] if file_numbers : [EOL] max_file_number = max ( file_numbers ) [EOL] else : [EOL] max_file_number = [number] [EOL] next_file_number = max_file_number + [number] [EOL] return next_file_number [EOL] [EOL] @ staticmethod def is_good_chord ( chord ) : [EOL] icv = abjad . IntervalClassVector ( chord . pitches ) [EOL] if not icv . get ( [number] , [number] ) : [EOL] if not icv . get ( [number] , [number] ) and not icv . get ( [number] ) : [EOL] return True [EOL] return False [EOL] [EOL] @ staticmethod def make_annotations ( score ) : [EOL] abjad . label . vertical_moment_interval_class_vectors ( score ) [EOL] return score [EOL] [EOL] @ staticmethod def make_file ( score ) : [EOL] lilypond_file = abjad . LilyPondFile . new ( score ) [EOL] lilypond_file . layout . indent = [number] [EOL] lilypond_file . layout . ragged_right = True [EOL] lilypond_file . paper . top_margin = [number] [EOL] lilypond_file . paper . left_margin = [number] [EOL] lilypond_file . paper . print_page_number = False [EOL] lilypond_file . paper . minimal_page_breaking = True [EOL] lilypond_file . paper . ragged_last_bottom = True [EOL] lilypond_file . paper . ragged_bottom = True [EOL] lilypond_file . global_staff_size = [number] [EOL] lilypond_file . default_paper_size = [string] [EOL] return score [EOL] [EOL] @ staticmethod def make_score ( ) : [EOL] treble = abjad . Staff ( ) [EOL] treble . name = [string] [EOL] treble . accidental . style = [string] [EOL] bass = abjad . Staff ( ) [EOL] bass . name = [string] [EOL] bass . clef . forced = abjad . Clef ( [string] ) [EOL] bass . accidental . style = [string] [EOL] score = abjad . Score ( [ treble , bass ] ) [EOL] pnd = quicktions . Fraction ( [number] , [number] ) [EOL] score . spacing . proportional_notation_duration = pnd [EOL] score . spacing . uniform_stretching = True [EOL] score . spacing . strict_note_spacing = True [EOL] score . non_musical_paper_column . page_break_permission = False [EOL] score . non_musical_paper_column . line_break_permission = False [EOL] score . bar_number . padding = [number] [EOL] score . bar_number . font_size = [number] [EOL] score . text_script . staff_padding = [number] [EOL] score . text_spanner . staff_padding = [number] [EOL] score . beam . auto_beaming = False [EOL] score . tuplet_bracket . tuplet_full_length = True [EOL] score . tuplet_bracket . staff_padding = [number] [EOL] score . rest . transparent = True [EOL] return score [EOL] [EOL] @ staticmethod def make_special_chord_partitions ( chord ) : [EOL] partitions = [ ] [EOL] pitch_numbers = abjad . Pitch . get_pitch_numbers ( chord ) [EOL] for partition in abjad . enumeratex . yield_set_partitions ( pitch_numbers ) : [EOL] if all ( [ [number] <= len ( x ) <= [number] for x in partition ] ) : [EOL] partition = [ abjad . Chord ( x , ( [number] , [number] ) ) for x in partition ] [EOL] if all ( [ TabulateVerticalities . is_good_chord ( x ) for x in partition ] ) : [EOL] partitions . append ( partition ) [EOL] return partitions [EOL] [EOL] @ staticmethod def make_special_subchords ( chord ) : [EOL] special_subchords = [ ] [EOL] for subchord in chord . subchords ( chord ) : [EOL] if [number] <= len ( subchord ) <= [number] : [EOL] icv = abjad . IntervalClassVector ( subchord . pitches ) [EOL] if not icv . get ( [number] , [number] ) and not icv . get ( [number] , [number] ) and not icv . get ( [number] ) : [EOL] special_subchords . append ( subchord ) [EOL] return special_subchords [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] range_ = abjad . PitchRange ( [string] ) [EOL] constellation_circuit = baca . ConstellationCircuit ( baca . ConstellationCircuit . CC1 , range_ , ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] chord = abjad . Chord ( constellation_circuit [ [number] ] [ [number] ] , ( [number] , [number] ) ) [EOL] partitions = TabulateVerticalities . make_special_chord_partitions ( chord ) [EOL] score = TabulateVerticalities . make_score ( ) [EOL] TabulateVerticalities . add_partitions ( score , partitions ) [EOL] TabulateVerticalities . make_file ( score ) [EOL] TabulateVerticalities . make_annotations ( score ) [EOL] TabulateVerticalities . apply_layout ( score ) [EOL] TabulateVerticalities . apply_footer ( score . lilypond_file ) [EOL] abjad . show ( score . lilypond_file ) [EOL] TabulateVerticalities . conditionally_save_pdf ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Any , Type , List [EOL] import io [EOL] import desir [EOL] import pathlib [EOL] import typing [EOL] import pathlib [EOL] [EOL] import abjad [EOL] import baca [EOL] [EOL] import desir [EOL] [EOL] [EOL] class DuratedMachatMaker ( object ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [EOL] duration = abjad . Duration ( [number] , [number] ) [EOL] [EOL] talea = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] [EOL] @ staticmethod def make_durated_machat ( ) : [EOL] notes = [ ] [EOL] double_machat = [number] * desir . machat [EOL] for pitch_number , count in baca . sequence ( double_machat ) . zip_cyclic ( DuratedMachatMaker . talea ) : [EOL] note = abjad . Note ( pitch_number , count * DuratedMachatMaker . duration ) [EOL] notes . append ( note ) [EOL] return notes [EOL] [EOL] @ staticmethod def show_durated_machat ( notes ) : [EOL] score , treble_staff , bass_staff = abjad . Score . make_piano_score ( notes ) [EOL] score . spacing . proportional_notation_duration = abjad . Duration ( [number] , [number] ) [EOL] score . note_head . style = [string] [EOL] score . note_head . color = [string] [EOL] score . stem . color = [string] [EOL] score . beam . color = [string] [EOL] score . dots . color = [string] [EOL] score . accidental . color = [string] [EOL] score . text_script . staff_padding = [number] [EOL] for rest in abjad . iterate ( score ) . leaves ( abjad . Rest ) : [EOL] rest . dots . transparent = True [EOL] score . rest . transparent = True [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] lilypond_file = abjad . LilyPondFile . new ( score ) [EOL] lilypond_file . default_paper_size = [string] [EOL] lilypond_file . global_staff_size = [number] [EOL] lilypond_file . header . tagline = abjad . Markup ( [string] ) [EOL] lilypond_file . layout . indent = [number] [EOL] lilypond_file . layout . ragged_right = True [EOL] lilypond_file . paper . top_margin = [number] [EOL] lilypond_file . paper . left_margin = [number] [EOL] lilypond_file . paper . oddFooterMarkup = abjad . Markup ( [string] ) [EOL] abjad . show ( lilypond_file ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] notes = DuratedMachatMaker . make_durated_machat ( ) [EOL] data_name = [string] [EOL] path_name = pathlib . Path ( [string] , [string] % data_name ) [EOL] out = open ( path_name , [string] ) [EOL] note_signatures = [ note . signature for note in notes ] [EOL] output = [string] % ( data_name , note_signatures ) [EOL] out . write ( output ) [EOL] out . close ( ) [EOL] DuratedMachatMaker . show_durated_machat ( notes ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[desir.DuratedMachatMaker.DuratedMachatMaker]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] [EOL] metadata = abjad . OrderedDict ( [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [number] ) , ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import List , Any , Tuple , Literal , Iterator [EOL] import typing_extensions [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] class DemoCalligraphY ( object ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [EOL] __slots__ = ( ) [EOL] [EOL] [comment] [EOL] [EOL] @ staticmethod def configure_lilypond_file ( lilypond_file ) : [EOL] lilypond_file . layout . indent = [number] [EOL] lilypond_file . layout . ragged_right = True [EOL] lilypond_file . paper . top_margin = [number] [EOL] lilypond_file . paper . left_margin = [number] [EOL] lilypond_file . paper . print_page_number = False [EOL] lilypond_file . paper . minimal_page_breaking = True [EOL] lilypond_file . paper . ragged_last_bottom = True [EOL] lilypond_file . paper . ragged_bottom = True [EOL] lilypond_file . global_staff_size = [number] [EOL] lilypond_file . default_paper_size = [string] [EOL] return lilypond_file [EOL] [EOL] @ staticmethod def extend_staff ( staff , notes ) : [EOL] staff . extend ( notes ) [EOL] stop_offset = staff [ - [number] ] . offset . prolated . stop [EOL] stop_sixteenth = abjad . in_terms_of ( stop_offset , [number] ) [ [number] ] [EOL] if not stop_sixteenth % [number] == [number] : [EOL] skips_needed = [number] - ( stop_sixteenth % [number] ) [EOL] skips = abjad . Skip ( ( [number] , [number] ) ) * skips_needed [EOL] staff . extend ( skips ) [EOL] staff [ - [number] ] . breaks . line = True [EOL] [EOL] @ staticmethod def format_cycle_token ( cycle_token ) : [EOL] period , residue_list = cycle_token [EOL] residue_list = [string] . join ( [ str ( x ) for x in residue_list ] ) [EOL] return [string] % ( period , residue_list ) [EOL] [EOL] @ staticmethod def make_pitch_numbers_and_duration ( ) : [EOL] notes = reversed ( abjad . construct_scale ( [number] ) [ [number] : ] ) [EOL] pitch_numbers = [ note . pitch . number for note in notes ] [EOL] duration = abjad . Duration ( [number] , [number] ) [EOL] return pitch_numbers , duration [EOL] [EOL] @ staticmethod def make_score ( ) : [EOL] score = abjad . Score ( [ abjad . Staff ( ) ] ) [EOL] staff = score [ [number] ] [EOL] staff . remove_commands . add ( [string] ) [EOL] pnd = abjad . Duration ( [number] , [number] ) [EOL] score . spacing . proportional_notation_duration = pnd [EOL] score . spacing . uniform_stretching = True [EOL] score . spacing . strict_note_spacing = True [EOL] score . stem . transparent = True [EOL] score . beam . auto_beaming = False [EOL] score . meter . transparent = True [EOL] score . text_script . staff_padding = [number] [EOL] score . bar_line . stencil = False [EOL] score . meter . stencil = False [EOL] lilypond_file = abjad . LilyPondFile . new ( score ) [EOL] DemoCalligraphY . configure_lilypond_file ( lilypond_file ) [EOL] return score [EOL] [EOL] [comment] [EOL] [EOL] @ staticmethod def Y_01 ( pitch_numbers , duration ) : [EOL] from desir import calligraphs [EOL] [EOL] segment_cycle = ( [number] , [ [number] , [number] , [number] , [number] ] ) [EOL] pitch_numbers = list ( calligraphs . Y ( pitch_numbers , [ segment_cycle ] ) ) [EOL] notes = abjad . make_notes ( pitch_numbers , [ duration ] ) [EOL] label = [string] % DemoCalligraphY . format_cycle_token ( segment_cycle ) [EOL] notes [ [number] ] . markup . up . append ( abjad . Markup ( label ) ) [EOL] return notes [EOL] [EOL] @ staticmethod def Y_01b ( pitch_numbers , duration ) : [EOL] from desir import calligraphs [EOL] [EOL] segment_cycle = ( [number] , [ [number] , [number] , [number] , [number] ] ) [EOL] pitch_numbers = list ( calligraphs . Y ( pitch_numbers , [ segment_cycle ] ) ) [EOL] notes = abjad . make_notes ( pitch_numbers , [ duration ] ) [EOL] label = [string] % DemoCalligraphY . format_cycle_token ( segment_cycle ) [EOL] notes [ [number] ] . markup . up . append ( abjad . Markup ( label ) ) [EOL] return notes [EOL] [EOL] @ staticmethod def Y_01e ( pitch_numbers , duration ) : [EOL] from desir import calligraphs [EOL] [EOL] segment_cycle = ( [number] , [ [number] ] ) [EOL] start_cycle = ( [number] , [ [number] , [number] ] ) [EOL] pitch_numbers = list ( calligraphs . Y ( pitch_numbers , [ segment_cycle ] , [ start_cycle ] ) ) [EOL] notes = abjad . make_notes ( pitch_numbers , [ duration ] ) [EOL] f_segment = DemoCalligraphY . format_cycle_token ( segment_cycle ) [EOL] f_start = DemoCalligraphY . format_cycle_token ( start_cycle ) [EOL] label = [string] % ( f_segment , f_start ) [EOL] notes [ [number] ] . markup . up . append ( abjad . Markup ( label ) ) [EOL] return notes [EOL] [EOL] @ staticmethod def Y_01f ( pitch_numbers , duration ) : [EOL] from desir import calligraphs [EOL] [EOL] segment_cycle = ( [number] , [ [number] ] ) [EOL] start_cycle = ( [number] , [ [number] ] ) [EOL] pitch_numbers = list ( calligraphs . Y ( pitch_numbers , [ segment_cycle ] , [ start_cycle ] ) ) [EOL] notes = abjad . make_notes ( pitch_numbers , [ duration ] ) [EOL] f_segment = DemoCalligraphY . format_cycle_token ( segment_cycle ) [EOL] f_start = DemoCalligraphY . format_cycle_token ( start_cycle ) [EOL] label = [string] % ( f_segment , f_start ) [EOL] notes [ [number] ] . markup . up . append ( abjad . Markup ( label ) ) [EOL] return notes [EOL] [EOL] @ staticmethod def Y_01g ( pitch_numbers , duration ) : [EOL] from desir import calligraphs [EOL] [EOL] segment_cycle = ( [number] , [ [number] ] ) [EOL] stop_cycle = ( [number] , [ [number] ] ) [EOL] pitch_numbers = list ( calligraphs . Y ( pitch_numbers , [ segment_cycle ] , [ ] , [ stop_cycle ] ) ) [EOL] notes = abjad . make_notes ( pitch_numbers , [ duration ] ) [EOL] f_segment = DemoCalligraphY . format_cycle_token ( segment_cycle ) [EOL] f_stop = DemoCalligraphY . format_cycle_token ( stop_cycle ) [EOL] label = [string] % ( f_segment , f_stop ) [EOL] notes [ [number] ] . markup . up . append ( abjad . Markup ( label ) ) [EOL] return notes [EOL] [EOL] @ staticmethod def Y_01h ( pitch_numbers , duration ) : [EOL] from desir import calligraphs [EOL] [EOL] segment_cycle = ( [number] , [ [number] ] ) [EOL] start_cycle = ( [number] , [ [number] ] ) [EOL] stop_cycle = ( [number] , [ [number] ] ) [EOL] pitch_numbers = list ( calligraphs . Y ( pitch_numbers , [ segment_cycle ] , [ start_cycle ] , [ stop_cycle ] ) ) [EOL] notes = abjad . make_notes ( pitch_numbers , [ duration ] ) [EOL] f_segment = DemoCalligraphY . format_cycle_token ( segment_cycle ) [EOL] f_start = DemoCalligraphY . format_cycle_token ( start_cycle ) [EOL] f_stop = DemoCalligraphY . format_cycle_token ( stop_cycle ) [EOL] label = [string] % ( f_segment , f_start , f_stop ) [EOL] notes [ [number] ] . markup . up . append ( abjad . Markup ( label ) ) [EOL] return notes [EOL] [EOL] @ staticmethod def Y_02 ( pitch_numbers , duration ) : [EOL] from desir import calligraphs [EOL] [EOL] segment_cycle_1 = ( [number] , [ [number] , [number] , [number] , [number] ] ) [EOL] segment_cycle_2 = ( [number] , [ [number] , [number] , [number] ] ) [EOL] segment_cycles = [ segment_cycle_1 , segment_cycle_2 ] [EOL] pitch_numbers = list ( calligraphs . Y ( pitch_numbers , segment_cycles ) ) [EOL] notes = abjad . make_notes ( pitch_numbers , [ duration ] ) [EOL] fsc_1 = DemoCalligraphY . format_cycle_token ( segment_cycle_1 ) [EOL] fsc_2 = DemoCalligraphY . format_cycle_token ( segment_cycle_2 ) [EOL] label = [string] % ( fsc_1 , fsc_2 ) [EOL] notes [ [number] ] . markup . up . append ( abjad . Markup ( label ) ) [EOL] return notes [EOL] [EOL] @ staticmethod def Y_02a ( pitch_numbers , duration ) : [EOL] from desir import calligraphs [EOL] [EOL] segment_cycle = ( [number] , [ [number] , [number] , [number] , [number] , [number] ] ) [EOL] start_cycle = ( [number] , [ [number] ] ) [EOL] stop_cycle = ( [number] , [ [number] ] ) [EOL] pitch_numbers = list ( calligraphs . Y ( pitch_numbers , [ segment_cycle ] , [ start_cycle ] , [ stop_cycle ] ) ) [EOL] notes = abjad . make_notes ( pitch_numbers , [ duration ] ) [EOL] f_segment = DemoCalligraphY . format_cycle_token ( segment_cycle ) [EOL] f_start = DemoCalligraphY . format_cycle_token ( start_cycle ) [EOL] f_stop = DemoCalligraphY . format_cycle_token ( stop_cycle ) [EOL] label = [string] % ( f_segment , f_start , f_stop ) [EOL] notes [ [number] ] . markup . up . append ( abjad . Markup ( label ) ) [EOL] return notes [EOL] [EOL] @ staticmethod def Y_02b ( pitch_numbers , duration ) : [EOL] from desir import calligraphs [EOL] [EOL] segment_cycle = ( [number] , [ [number] , [number] , [number] , [number] , [number] ] ) [EOL] start_cycle = ( [number] , [ [number] ] ) [EOL] stop_cycle = ( [number] , [ [number] , [number] ] ) [EOL] pitch_numbers = list ( calligraphs . Y ( pitch_numbers , [ segment_cycle ] , [ start_cycle ] , [ stop_cycle ] ) ) [EOL] notes = abjad . make_notes ( pitch_numbers , [ duration ] ) [EOL] f_segment = DemoCalligraphY . format_cycle_token ( segment_cycle ) [EOL] f_start = DemoCalligraphY . format_cycle_token ( start_cycle ) [EOL] f_stop = DemoCalligraphY . format_cycle_token ( stop_cycle ) [EOL] label = [string] % ( f_segment , f_start , f_stop ) [EOL] notes [ [number] ] . markup . up . append ( abjad . Markup ( label ) ) [EOL] return notes [EOL] [EOL] @ staticmethod def Y_03 ( pitch_numbers , duration ) : [EOL] from desir import calligraphs [EOL] [EOL] segment_cycle = ( [number] , [ [number] , [number] , [number] , [number] ] ) [EOL] start_cycle = ( [number] , [ [number] , [number] ] ) [EOL] pitch_numbers = list ( calligraphs . Y ( pitch_numbers , [ segment_cycle ] , [ start_cycle ] ) ) [EOL] notes = abjad . make_notes ( pitch_numbers , [ duration ] ) [EOL] f_segment = DemoCalligraphY . format_cycle_token ( segment_cycle ) [EOL] f_start = DemoCalligraphY . format_cycle_token ( start_cycle ) [EOL] label = [string] % ( f_segment , f_start ) [EOL] notes [ [number] ] . markup . up . append ( abjad . Markup ( label ) ) [EOL] return notes [EOL] [EOL] @ staticmethod def Y_10 ( pitch_numbers , duration ) : [EOL] from desir import calligraphs [EOL] [EOL] segment_cycle = ( [number] , [ [number] ] ) [EOL] pitch_numbers = list ( calligraphs . Y ( pitch_numbers , [ segment_cycle ] ) ) [EOL] notes = abjad . make_notes ( pitch_numbers , [ duration ] ) [EOL] label = [string] % DemoCalligraphY . format_cycle_token ( segment_cycle ) [EOL] notes [ [number] ] . markup . up . append ( abjad . Markup ( label ) ) [EOL] return notes [EOL] [EOL] @ staticmethod def Y_20 ( pitch_numbers , duration ) : [EOL] from desir import calligraphs [EOL] [EOL] segment_cycle = ( [number] , [ [number] ] ) [EOL] pitch_numbers = list ( calligraphs . Y ( pitch_numbers , [ segment_cycle ] ) ) [EOL] notes = abjad . make_notes ( pitch_numbers , [ duration ] ) [EOL] label = [string] % DemoCalligraphY . format_cycle_token ( segment_cycle ) [EOL] notes [ [number] ] . markup . up . append ( abjad . Markup ( label ) ) [EOL] return notes [EOL] [EOL] @ staticmethod def Y_30 ( pitch_numbers , duration ) : [EOL] from desir import calligraphs [EOL] [EOL] segment_cycle = ( [number] , [ [number] ] ) [EOL] pitch_numbers = list ( calligraphs . Y ( pitch_numbers , [ segment_cycle ] ) ) [EOL] notes = abjad . make_notes ( pitch_numbers , [ duration ] ) [EOL] label = [string] % DemoCalligraphY . format_cycle_token ( segment_cycle ) [EOL] notes [ [number] ] . markup . up . append ( abjad . Markup ( label ) ) [EOL] return notes [EOL] [EOL] @ staticmethod def Y_40 ( pitch_numbers , duration ) : [EOL] from desir import calligraphs [EOL] [EOL] segment_cycle = ( [number] , [ [number] ] ) [EOL] pitch_numbers = list ( calligraphs . Y ( pitch_numbers , [ segment_cycle ] ) ) [EOL] notes = abjad . make_notes ( pitch_numbers , [ duration ] ) [EOL] label = [string] % DemoCalligraphY . format_cycle_token ( segment_cycle ) [EOL] notes [ [number] ] . markup . up . append ( abjad . Markup ( label ) ) [EOL] return notes [EOL] [EOL] @ staticmethod def Y_50 ( pitch_numbers , duration ) : [EOL] from desir import calligraphs [EOL] [EOL] segment_cycle = ( [number] , [ [number] ] ) [EOL] pitch_numbers = list ( calligraphs . Y ( pitch_numbers , [ segment_cycle ] ) ) [EOL] notes = abjad . make_notes ( pitch_numbers , [ duration ] ) [EOL] label = [string] % DemoCalligraphY . format_cycle_token ( segment_cycle ) [EOL] notes [ [number] ] . markup . up . append ( abjad . Markup ( label ) ) [EOL] return notes [EOL] [EOL] @ staticmethod def Y_60 ( pitch_numbers , duration ) : [EOL] from desir import calligraphs [EOL] [EOL] segment_cycle = ( [number] , [ [number] ] ) [EOL] pitch_numbers = list ( calligraphs . Y ( pitch_numbers , [ segment_cycle ] ) ) [EOL] notes = abjad . make_notes ( pitch_numbers , [ duration ] ) [EOL] label = [string] % DemoCalligraphY . format_cycle_token ( segment_cycle ) [EOL] notes [ [number] ] . markup . up . append ( abjad . Markup ( label ) ) [EOL] return notes [EOL] [EOL] @ staticmethod def Y_70 ( pitch_numbers , duration ) : [EOL] from desir import calligraphs [EOL] [EOL] segment_cycle = ( [number] , [ [number] ] ) [EOL] pitch_numbers = list ( calligraphs . Y ( pitch_numbers , [ segment_cycle ] ) ) [EOL] notes = abjad . make_notes ( pitch_numbers , [ duration ] ) [EOL] label = [string] % DemoCalligraphY . format_cycle_token ( segment_cycle ) [EOL] notes [ [number] ] . markup . up . append ( abjad . Markup ( label ) ) [EOL] return notes [EOL] [EOL] @ staticmethod def Y_80 ( pitch_numbers , duration ) : [EOL] from desir import calligraphs [EOL] [EOL] segment_cycle = ( [number] , [ [number] ] ) [EOL] pitch_numbers = list ( calligraphs . Y ( pitch_numbers , [ segment_cycle ] ) ) [EOL] notes = abjad . make_notes ( pitch_numbers , [ duration ] ) [EOL] label = [string] % DemoCalligraphY . format_cycle_token ( segment_cycle ) [EOL] notes [ [number] ] . markup . up . append ( abjad . Markup ( label ) ) [EOL] return notes [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] score = DemoCalligraphY . make_score ( ) [EOL] staff = score [ [number] ] [EOL] pitch_numbers , duration = DemoCalligraphY . make_pitch_numbers_and_duration ( ) [EOL] staff . extend ( DemoCalligraphY . Y_10 ( pitch_numbers , duration ) ) [EOL] staff . extend ( DemoCalligraphY . Y_20 ( pitch_numbers , duration ) ) [EOL] staff . extend ( DemoCalligraphY . Y_30 ( pitch_numbers , duration ) ) [EOL] staff . extend ( DemoCalligraphY . Y_40 ( pitch_numbers , duration ) ) [EOL] staff . extend ( DemoCalligraphY . Y_50 ( pitch_numbers , duration ) ) [EOL] staff . extend ( DemoCalligraphY . Y_60 ( pitch_numbers , duration ) ) [EOL] staff . extend ( DemoCalligraphY . Y_70 ( pitch_numbers , duration ) ) [EOL] staff . extend ( DemoCalligraphY . Y_80 ( pitch_numbers , duration ) ) [EOL] [EOL] staff . extend ( DemoCalligraphY . Y_01 ( pitch_numbers , duration ) ) [EOL] staff . extend ( DemoCalligraphY . Y_01b ( pitch_numbers , duration ) ) [EOL] staff . extend ( DemoCalligraphY . Y_01f ( pitch_numbers , duration ) ) [EOL] staff . extend ( DemoCalligraphY . Y_01g ( pitch_numbers , duration ) ) [EOL] staff . extend ( DemoCalligraphY . Y_01h ( pitch_numbers , duration ) ) [EOL] [EOL] staff . extend ( DemoCalligraphY . Y_01e ( pitch_numbers , duration ) ) [EOL] [EOL] staff . extend ( DemoCalligraphY . Y_02a ( pitch_numbers , duration ) ) [EOL] staff . extend ( DemoCalligraphY . Y_02b ( pitch_numbers , duration ) ) [EOL] [EOL] staff . extend ( DemoCalligraphY . Y_02 ( pitch_numbers , duration ) ) [EOL] staff . extend ( DemoCalligraphY . Y_03 ( pitch_numbers , duration ) ) [EOL] abjad . show ( score . lilypond_file ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,typing.List[builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,typing.List[builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,typing.List[builtins.int]]]$ 0 0 $typing.List[typing.Tuple[builtins.int,typing.List[builtins.int]]]$ 0 $typing.List[typing.Tuple[builtins.int,typing.List[builtins.int]]]$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Tuple[builtins.int,typing.List[builtins.int]]]$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,typing.List[builtins.int]]]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,typing.List[builtins.int]]]$ 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any
import builtins [EOL] from typing import Any [EOL] import typing [EOL] import abjad [EOL] import baca [EOL] [EOL] [EOL] class DemoSacredReading ( object ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [EOL] __slots__ = ( ) [EOL] [EOL] [comment] [EOL] [EOL] @ staticmethod def sacred_reading_1 ( pitch_numbers , duration ) : [EOL] from desir import calligraphs [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] contour_sieve = [number] [EOL] [EOL] deletion_sieve = abjad . sievetools . ResidueClass ( [number] , [number] ) | abjad . sievetools . ResidueClass ( [number] , [number] ) [EOL] [comment] [EOL] [EOL] cycle = abjad . sievetools . ResidueClass ( [number] , [number] ) | abjad . sievetools . ResidueClass ( [number] , [number] ) [EOL] length = [number] [EOL] [EOL] def function ( x ) : [EOL] return list ( calligraphs . undulate_backward ( x , [number] ) ) [EOL] [EOL] extrusion_1 = calligraphs . ExtrusionToken ( cycle , length , function ) [EOL] cycle = abjad . sievetools . ResidueClass ( [number] , [number] ) | abjad . sievetools . ResidueClass ( [number] , [number] ) [EOL] length = [number] [EOL] [EOL] def function ( x ) : [EOL] list ( calligraphs . cycle_forward ( x , [number] ) ) [EOL] [EOL] extrusion_2 = calligraphs . ExtrusionToken ( cycle , length , function ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] pitch_numbers = calligraphs . sacred_reading ( pitch_numbers , contour_sieve , deletion_sieve , extrusion_1 , extrusion_2 , ) [EOL] [comment] [EOL] pitch_numbers = baca . sequence ( pitch_numbers ) . flatten ( ) [EOL] pitch_numbers = [ x for x in pitch_numbers if x is not None ] [EOL] pitch_numbers = baca . sequence ( pitch_numbers ) [EOL] value = pitch_numbers . is_repetition_free ( ) [EOL] message = f" [string] { value }" [EOL] print ( message ) [EOL] notes = abjad . make_notes ( pitch_numbers , [ duration ] ) [EOL] label = [string] [EOL] notes [ [number] ] . markup . up . append ( abjad . Markup ( label ) ) [EOL] return notes [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] from desir . DemoTools import DemoTools [EOL] [EOL] score = DemoTools . make_score ( ) [EOL] staff = score [ [number] ] [EOL] ( pitch_numbers , duration , ) = DemoTools . make_pitch_numbers_and_duration ( ) [EOL] staff . extend ( DemoSacredReading . sacred_reading_1 ( pitch_numbers , duration ) ) [EOL] abjad . show ( score . lilypond_file ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Any , List [EOL] import io [EOL] import pathlib [EOL] import typing [EOL] import pathlib [EOL] [EOL] import abjad [EOL] [EOL] import desir [EOL] [EOL] [EOL] class TeferimByReading ( object ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [EOL] __slots__ = ( ) [EOL] [EOL] [comment] [EOL] [EOL] @ staticmethod def center_value_to_teferim ( pitch_field_number , center_value ) : [EOL] pitch_field_index = pitch_field_number - [number] [EOL] pitch_field_chords = desir . recombined_pitch_field_pitch_number_lists [ pitch_field_index ] [EOL] best_distance , best_chord = None , None [EOL] for chord in pitch_field_chords : [EOL] chord_center = abjad . mathx . arithmetic_mean ( chord ) [EOL] this_distance = abs ( chord_center - center_value ) [EOL] if best_distance is None or this_distance <= best_distance : [EOL] best_distance = this_distance [EOL] best_chord = chord [EOL] return best_chord [EOL] [EOL] @ staticmethod def center_value_to_teferim_octet ( center_value ) : [EOL] teferim_octet = [ ] [EOL] for pitch_field_number in range ( [number] , [number] ) : [EOL] teferim = TeferimByReading . center_value_to_teferim ( pitch_field_number , center_value ) [EOL] teferim_octet . append ( teferim ) [EOL] return teferim_octet [EOL] [EOL] @ staticmethod def make_teferim_by_reading ( ) : [EOL] teferim_octets = [ ] [EOL] for reading_number in range ( [number] , [number] ) : [EOL] center_value = TeferimByReading . reading_number_to_center_value ( reading_number ) [EOL] teferim_octet = TeferimByReading . center_value_to_teferim_octet ( center_value ) [EOL] teferim_octets . append ( teferim_octet ) [EOL] return teferim_octets [EOL] [EOL] @ staticmethod def reading_number_to_center_value ( reading_number ) : [EOL] if reading_number == [number] : [EOL] center_value = [number] [EOL] elif reading_number == [number] : [EOL] center_value = [number] [EOL] elif reading_number == [number] : [EOL] center_value = [number] [EOL] elif reading_number == [number] : [EOL] center_value = [number] [EOL] elif reading_number == [number] : [EOL] center_value = [number] [EOL] elif reading_number == [number] : [EOL] center_value = - [number] [EOL] else : [EOL] raise ValueError ( [string] ) [EOL] return center_value [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] teferim_by_reading = TeferimByReading . make_teferim_by_reading ( ) [EOL] data_name = [string] [EOL] path_name = pathlib . Path ( [string] , [string] % data_name ) [EOL] out = open ( path_name , [string] ) [EOL] output = [string] % ( data_name , teferim_by_reading ) [EOL] out . write ( output ) [EOL] out . close ( ) [EOL] print ( teferim_by_reading ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import List , Any , Tuple , Literal , Iterator [EOL] import typing_extensions [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] class DemoCalligraphZ ( object ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [EOL] __slots__ = ( ) [EOL] [EOL] [comment] [EOL] [EOL] @ staticmethod def configure_lilypond_file ( lilypond_file ) : [EOL] lilypond_file . layout . indent = [number] [EOL] lilypond_file . layout . ragged_right = True [EOL] lilypond_file . paper . top_margin = [number] [EOL] lilypond_file . paper . left_margin = [number] [EOL] lilypond_file . paper . print_page_number = False [EOL] lilypond_file . paper . minimal_page_breaking = True [EOL] lilypond_file . paper . ragged_last_bottom = True [EOL] lilypond_file . paper . ragged_bottom = True [EOL] lilypond_file . global_staff_size = [number] [EOL] lilypond_file . default_paper_size = [string] [EOL] return lilypond_file [EOL] [EOL] @ staticmethod def extend_staff ( staff , notes ) : [EOL] staff . extend ( notes ) [EOL] stop_offset = staff [ - [number] ] . offset . prolated . stop [EOL] stop_sixteenth = abjad . Duration ( stop_offset ) . with_denominator ( [number] ) [ [number] ] [EOL] if not stop_sixteenth % [number] == [number] : [EOL] skips_needed = [number] - ( stop_sixteenth % [number] ) [EOL] skips = abjad . Skip ( ( [number] , [number] ) ) * skips_needed [EOL] staff . extend ( skips ) [EOL] staff [ - [number] ] . breaks . line = True [EOL] [EOL] @ staticmethod def format_cycle_token ( cycle_token ) : [EOL] period , residue_list = cycle_token [EOL] residue_list = [string] . join ( [ str ( x ) for x in residue_list ] ) [EOL] return [string] % ( period , residue_list ) [EOL] [EOL] @ staticmethod def make_pitch_numbers_and_duration ( ) : [EOL] notes = reversed ( abjad . make_scale ( [number] ) [ [number] : ] ) [EOL] pitch_numbers = [ note . pitch . number for note in notes ] [EOL] duration = abjad . Duration ( [number] , [number] ) [EOL] return pitch_numbers , duration [EOL] [EOL] @ staticmethod def make_score ( ) : [EOL] score = abjad . Score ( [ abjad . Staff ( ) ] ) [EOL] staff = score [ [number] ] [EOL] staff . remove_commands . add ( [string] ) [EOL] pnd = abjad . Duration ( [number] , [number] ) [EOL] score . spacing . proportional_notation_duration = pnd [EOL] score . spacing . uniform_stretching = True [EOL] score . spacing . strict_note_spacing = True [EOL] score . stem . transparent = True [EOL] score . beam . auto_beaming = False [EOL] score . meter . transparent = True [EOL] score . text_script . staff_padding = [number] [EOL] score . bar_line . stencil = False [EOL] score . meter . stencil = False [EOL] lilypond_file = abjad . LilyPondFile . new ( score ) [EOL] DemoCalligraphZ . configure_lilypond_file ( lilypond_file ) [EOL] return score [EOL] [EOL] [comment] [EOL] [EOL] @ staticmethod def Z_01 ( pitch_numbers , duration ) : [EOL] from desir import calligraphs [EOL] [EOL] segment_cycle = ( [number] , [ [number] , [number] , [number] , [number] ] ) [EOL] pitch_numbers = list ( calligraphs . Z ( pitch_numbers , [ segment_cycle ] ) ) [EOL] notes = abjad . make_notes ( pitch_numbers , [ duration ] ) [EOL] label = [string] % DemoCalligraphZ . format_cycle_token ( segment_cycle ) [EOL] notes [ [number] ] . markup . up . append ( abjad . Markup ( label ) ) [EOL] return notes [EOL] [EOL] @ staticmethod def Z_01b ( pitch_numbers , duration ) : [EOL] from desir import calligraphs [EOL] [EOL] segment_cycle = ( [number] , [ [number] , [number] , [number] , [number] ] ) [EOL] pitch_numbers = list ( calligraphs . Z ( pitch_numbers , [ segment_cycle ] ) ) [EOL] notes = abjad . make_notes ( pitch_numbers , [ duration ] ) [EOL] label = [string] % DemoCalligraphZ . format_cycle_token ( segment_cycle ) [EOL] notes [ [number] ] . markup . up . append ( abjad . Markup ( label ) ) [EOL] return notes [EOL] [EOL] @ staticmethod def Z_01e ( pitch_numbers , duration ) : [EOL] from desir import calligraphs [EOL] [EOL] segment_cycle = ( [number] , [ [number] ] ) [EOL] start_cycle = ( [number] , [ [number] , [number] ] ) [EOL] pitch_numbers = list ( calligraphs . Z ( pitch_numbers , [ segment_cycle ] , [ start_cycle ] ) ) [EOL] notes = abjad . make_notes ( pitch_numbers , [ duration ] ) [EOL] f_segment = DemoCalligraphZ . format_cycle_token ( segment_cycle ) [EOL] f_start = DemoCalligraphZ . format_cycle_token ( start_cycle ) [EOL] label = [string] % ( f_segment , f_start ) [EOL] notes [ [number] ] . markup . up . append ( abjad . Markup ( label ) ) [EOL] return notes [EOL] [EOL] @ staticmethod def Z_01f ( pitch_numbers , duration ) : [EOL] from desir import calligraphs [EOL] [EOL] segment_cycle = ( [number] , [ [number] ] ) [EOL] start_cycle = ( [number] , [ [number] ] ) [EOL] pitch_numbers = list ( calligraphs . Z ( pitch_numbers , [ segment_cycle ] , [ start_cycle ] ) ) [EOL] notes = abjad . make_notes ( pitch_numbers , [ duration ] ) [EOL] f_segment = DemoCalligraphZ . format_cycle_token ( segment_cycle ) [EOL] f_start = DemoCalligraphZ . format_cycle_token ( start_cycle ) [EOL] label = [string] % ( f_segment , f_start ) [EOL] notes [ [number] ] . markup . up . append ( abjad . Markup ( label ) ) [EOL] return notes [EOL] [EOL] @ staticmethod def Z_01g ( pitch_numbers , duration ) : [EOL] from desir import calligraphs [EOL] [EOL] segment_cycle = ( [number] , [ [number] ] ) [EOL] stop_cycle = ( [number] , [ [number] ] ) [EOL] pitch_numbers = list ( calligraphs . Z ( pitch_numbers , [ segment_cycle ] , [ ] , [ stop_cycle ] ) ) [EOL] notes = abjad . make_notes ( pitch_numbers , [ duration ] ) [EOL] f_segment = DemoCalligraphZ . format_cycle_token ( segment_cycle ) [EOL] f_stop = DemoCalligraphZ . format_cycle_token ( stop_cycle ) [EOL] label = [string] % ( f_segment , f_stop ) [EOL] notes [ [number] ] . markup . up . append ( abjad . Markup ( label ) ) [EOL] return notes [EOL] [EOL] @ staticmethod def Z_01h ( pitch_numbers , duration ) : [EOL] from desir import calligraphs [EOL] [EOL] segment_cycle = ( [number] , [ [number] ] ) [EOL] start_cycle = ( [number] , [ [number] ] ) [EOL] stop_cycle = ( [number] , [ [number] ] ) [EOL] pitch_numbers = list ( calligraphs . Z ( pitch_numbers , [ segment_cycle ] , [ start_cycle ] , [ stop_cycle ] ) ) [EOL] notes = abjad . make_notes ( pitch_numbers , [ duration ] ) [EOL] f_segment = DemoCalligraphZ . format_cycle_token ( segment_cycle ) [EOL] f_start = DemoCalligraphZ . format_cycle_token ( start_cycle ) [EOL] f_stop = DemoCalligraphZ . format_cycle_token ( stop_cycle ) [EOL] label = [string] % ( f_segment , f_start , f_stop ) [EOL] notes [ [number] ] . markup . up . append ( abjad . Markup ( label ) ) [EOL] return notes [EOL] [EOL] @ staticmethod def Z_02 ( pitch_numbers , duration ) : [EOL] from desir import calligraphs [EOL] [EOL] segment_cycle_1 = ( [number] , [ [number] , [number] , [number] , [number] ] ) [EOL] segment_cycle_2 = ( [number] , [ [number] , [number] , [number] ] ) [EOL] segment_cycles = [ segment_cycle_1 , segment_cycle_2 ] [EOL] pitch_numbers = list ( calligraphs . Z ( pitch_numbers , segment_cycles ) ) [EOL] notes = abjad . make_notes ( pitch_numbers , [ duration ] ) [EOL] fsc_1 = DemoCalligraphZ . format_cycle_token ( segment_cycle_1 ) [EOL] fsc_2 = DemoCalligraphZ . format_cycle_token ( segment_cycle_2 ) [EOL] label = [string] % ( fsc_1 , fsc_2 ) [EOL] notes [ [number] ] . markup . up . append ( abjad . Markup ( label ) ) [EOL] return notes [EOL] [EOL] @ staticmethod def Z_02a ( pitch_numbers , duration ) : [EOL] from desir import calligraphs [EOL] [EOL] segment_cycle = ( [number] , [ [number] , [number] , [number] , [number] , [number] ] ) [EOL] start_cycle = ( [number] , [ [number] ] ) [EOL] stop_cycle = ( [number] , [ [number] ] ) [EOL] pitch_numbers = list ( calligraphs . Z ( pitch_numbers , [ segment_cycle ] , [ start_cycle ] , [ stop_cycle ] ) ) [EOL] notes = abjad . make_notes ( pitch_numbers , [ duration ] ) [EOL] f_segment = DemoCalligraphZ . format_cycle_token ( segment_cycle ) [EOL] f_start = DemoCalligraphZ . format_cycle_token ( start_cycle ) [EOL] f_stop = DemoCalligraphZ . format_cycle_token ( stop_cycle ) [EOL] label = [string] % ( f_segment , f_start , f_stop ) [EOL] notes [ [number] ] . markup . up . append ( abjad . Markup ( label ) ) [EOL] return notes [EOL] [EOL] @ staticmethod def Z_02b ( pitch_numbers , duration ) : [EOL] from desir import calligraphs [EOL] [EOL] segment_cycle = ( [number] , [ [number] , [number] , [number] , [number] , [number] ] ) [EOL] start_cycle = ( [number] , [ [number] ] ) [EOL] stop_cycle = ( [number] , [ [number] , [number] ] ) [EOL] pitch_numbers = list ( calligraphs . Z ( pitch_numbers , [ segment_cycle ] , [ start_cycle ] , [ stop_cycle ] ) ) [EOL] notes = abjad . make_notes ( pitch_numbers , [ duration ] ) [EOL] f_segment = DemoCalligraphZ . format_cycle_token ( segment_cycle ) [EOL] f_start = DemoCalligraphZ . format_cycle_token ( start_cycle ) [EOL] f_stop = DemoCalligraphZ . format_cycle_token ( stop_cycle ) [EOL] label = [string] % ( f_segment , f_start , f_stop ) [EOL] notes [ [number] ] . markup . up . append ( abjad . Markup ( label ) ) [EOL] return notes [EOL] [EOL] @ staticmethod def Z_03 ( pitch_numbers , duration ) : [EOL] from desir import calligraphs [EOL] [EOL] segment_cycle = ( [number] , [ [number] , [number] , [number] , [number] ] ) [EOL] start_cycle = ( [number] , [ [number] , [number] ] ) [EOL] pitch_numbers = list ( calligraphs . Z ( pitch_numbers , [ segment_cycle ] , [ start_cycle ] ) ) [EOL] notes = abjad . make_notes ( pitch_numbers , [ duration ] ) [EOL] f_segment = DemoCalligraphZ . format_cycle_token ( segment_cycle ) [EOL] f_start = DemoCalligraphZ . format_cycle_token ( start_cycle ) [EOL] label = [string] % ( f_segment , f_start ) [EOL] notes [ [number] ] . markup . up . append ( abjad . Markup ( label ) ) [EOL] return notes [EOL] [EOL] @ staticmethod def Z_10 ( pitch_numbers , duration ) : [EOL] from desir import calligraphs [EOL] [EOL] segment_cycle = ( [number] , [ [number] ] ) [EOL] pitch_numbers = list ( calligraphs . Z ( pitch_numbers , [ segment_cycle ] ) ) [EOL] notes = abjad . make_notes ( pitch_numbers , [ duration ] ) [EOL] label = [string] % DemoCalligraphZ . format_cycle_token ( segment_cycle ) [EOL] notes [ [number] ] . markup . up . append ( abjad . Markup ( label ) ) [EOL] return notes [EOL] [EOL] @ staticmethod def Z_20 ( pitch_numbers , duration ) : [EOL] from desir import calligraphs [EOL] [EOL] segment_cycle = ( [number] , [ [number] ] ) [EOL] pitch_numbers = list ( calligraphs . Z ( pitch_numbers , [ segment_cycle ] ) ) [EOL] notes = abjad . make_notes ( pitch_numbers , [ duration ] ) [EOL] label = [string] % DemoCalligraphZ . format_cycle_token ( segment_cycle ) [EOL] notes [ [number] ] . markup . up . append ( abjad . Markup ( label ) ) [EOL] return notes [EOL] [EOL] @ staticmethod def Z_30 ( pitch_numbers , duration ) : [EOL] from desir import calligraphs [EOL] [EOL] segment_cycle = ( [number] , [ [number] ] ) [EOL] pitch_numbers = list ( calligraphs . Z ( pitch_numbers , [ segment_cycle ] ) ) [EOL] notes = abjad . make_notes ( pitch_numbers , [ duration ] ) [EOL] label = [string] % DemoCalligraphZ . format_cycle_token ( segment_cycle ) [EOL] notes [ [number] ] . markup . up . append ( abjad . Markup ( label ) ) [EOL] return notes [EOL] [EOL] @ staticmethod def Z_40 ( pitch_numbers , duration ) : [EOL] from desir import calligraphs [EOL] [EOL] segment_cycle = ( [number] , [ [number] ] ) [EOL] pitch_numbers = list ( calligraphs . Z ( pitch_numbers , [ segment_cycle ] ) ) [EOL] notes = abjad . make_notes ( pitch_numbers , [ duration ] ) [EOL] label = [string] % DemoCalligraphZ . format_cycle_token ( segment_cycle ) [EOL] notes [ [number] ] . markup . up . append ( abjad . Markup ( label ) ) [EOL] return notes [EOL] [EOL] @ staticmethod def Z_50 ( pitch_numbers , duration ) : [EOL] from desir import calligraphs [EOL] [EOL] segment_cycle = ( [number] , [ [number] ] ) [EOL] pitch_numbers = list ( calligraphs . Z ( pitch_numbers , [ segment_cycle ] ) ) [EOL] notes = abjad . make_notes ( pitch_numbers , [ duration ] ) [EOL] label = [string] % DemoCalligraphZ . format_cycle_token ( segment_cycle ) [EOL] notes [ [number] ] . markup . up . append ( abjad . Markup ( label ) ) [EOL] return notes [EOL] [EOL] @ staticmethod def Z_60 ( pitch_numbers , duration ) : [EOL] from desir import calligraphs [EOL] [EOL] segment_cycle = ( [number] , [ [number] ] ) [EOL] pitch_numbers = list ( calligraphs . Z ( pitch_numbers , [ segment_cycle ] ) ) [EOL] notes = abjad . make_notes ( pitch_numbers , [ duration ] ) [EOL] label = [string] % DemoCalligraphZ . format_cycle_token ( segment_cycle ) [EOL] notes [ [number] ] . markup . up . append ( abjad . Markup ( label ) ) [EOL] return notes [EOL] [EOL] @ staticmethod def Z_70 ( pitch_numbers , duration ) : [EOL] from desir import calligraphs [EOL] [EOL] segment_cycle = ( [number] , [ [number] ] ) [EOL] pitch_numbers = list ( calligraphs . Z ( pitch_numbers , [ segment_cycle ] ) ) [EOL] notes = abjad . make_notes ( pitch_numbers , [ duration ] ) [EOL] label = [string] % DemoCalligraphZ . format_cycle_token ( segment_cycle ) [EOL] notes [ [number] ] . markup . up . append ( abjad . Markup ( label ) ) [EOL] return notes [EOL] [EOL] @ staticmethod def Z_80 ( pitch_numbers , duration ) : [EOL] from desir import calligraphs [EOL] [EOL] segment_cycle = ( [number] , [ [number] ] ) [EOL] pitch_numbers = list ( calligraphs . Z ( pitch_numbers , [ segment_cycle ] ) ) [EOL] notes = abjad . make_notes ( pitch_numbers , [ duration ] ) [EOL] label = [string] % DemoCalligraphZ . format_cycle_token ( segment_cycle ) [EOL] notes [ [number] ] . markup . up . append ( abjad . Markup ( label ) ) [EOL] return notes [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] score = DemoCalligraphZ . make_score ( ) [EOL] staff = score [ [number] ] [EOL] pitch_numbers , duration = DemoCalligraphZ . make_pitch_numbers_and_duration ( ) [EOL] staff . extend ( DemoCalligraphZ . Z_10 ( pitch_numbers , duration ) ) [EOL] staff . extend ( DemoCalligraphZ . Z_20 ( pitch_numbers , duration ) ) [EOL] staff . extend ( DemoCalligraphZ . Z_30 ( pitch_numbers , duration ) ) [EOL] staff . extend ( DemoCalligraphZ . Z_40 ( pitch_numbers , duration ) ) [EOL] staff . extend ( DemoCalligraphZ . Z_50 ( pitch_numbers , duration ) ) [EOL] staff . extend ( DemoCalligraphZ . Z_60 ( pitch_numbers , duration ) ) [EOL] staff . extend ( DemoCalligraphZ . Z_70 ( pitch_numbers , duration ) ) [EOL] staff . extend ( DemoCalligraphZ . Z_80 ( pitch_numbers , duration ) ) [EOL] [EOL] staff . extend ( DemoCalligraphZ . Z_01 ( pitch_numbers , duration ) ) [EOL] staff . extend ( DemoCalligraphZ . Z_01b ( pitch_numbers , duration ) ) [EOL] staff . extend ( DemoCalligraphZ . Z_01f ( pitch_numbers , duration ) ) [EOL] staff . extend ( DemoCalligraphZ . Z_01g ( pitch_numbers , duration ) ) [EOL] staff . extend ( DemoCalligraphZ . Z_01h ( pitch_numbers , duration ) ) [EOL] [EOL] staff . extend ( DemoCalligraphZ . Z_01e ( pitch_numbers , duration ) ) [EOL] [EOL] staff . extend ( DemoCalligraphZ . Z_02a ( pitch_numbers , duration ) ) [EOL] staff . extend ( DemoCalligraphZ . Z_02b ( pitch_numbers , duration ) ) [EOL] [EOL] staff . extend ( DemoCalligraphZ . Z_02 ( pitch_numbers , duration ) ) [EOL] staff . extend ( DemoCalligraphZ . Z_03 ( pitch_numbers , duration ) ) [EOL] abjad . show ( score . lilypond_file ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,typing.List[builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,typing.List[builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,typing.List[builtins.int]]]$ 0 0 $typing.List[typing.Tuple[builtins.int,typing.List[builtins.int]]]$ 0 $typing.List[typing.Tuple[builtins.int,typing.List[builtins.int]]]$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Tuple[builtins.int,typing.List[builtins.int]]]$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,typing.List[builtins.int]]]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,typing.List[builtins.int]]]$ 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing.List[builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any
from typing import Type , List , Any , Tuple , Union [EOL] import builtins [EOL] import desir [EOL] import pathlib [EOL] import typing [EOL] import io [EOL] import collections [EOL] import math [EOL] import os [EOL] import pathlib [EOL] [EOL] import abjad [EOL] import baca [EOL] import quicktions [EOL] [EOL] [comment] [EOL] [EOL] durated_machat = [ ( ( ( [string] , [number] ) , ) , ( [number] , [number] ) ) , ( ( ( [string] , [number] ) , ) , ( [number] , [number] ) ) , ( ( ( [string] , [number] ) , ) , ( [number] , [number] ) ) , ( ( ( [string] , [number] ) , ) , ( [number] , [number] ) ) , ( ( ( [string] , [number] ) , ) , ( [number] , [number] ) ) , ( ( ( [string] , [number] ) , ) , ( [number] , [number] ) ) , ( ( ( [string] , [number] ) , ) , ( [number] , [number] ) ) , ( ( ( [string] , [number] ) , ) , ( [number] , [number] ) ) , ( ( ( [string] , [number] ) , ) , ( [number] , [number] ) ) , ( ( ( [string] , [number] ) , ) , ( [number] , [number] ) ) , ( ( ( [string] , [number] ) , ) , ( [number] , [number] ) ) , ( ( ( [string] , [number] ) , ) , ( [number] , [number] ) ) , ( ( ( [string] , [number] ) , ) , ( [number] , [number] ) ) , ( ( ( [string] , [number] ) , ) , ( [number] , [number] ) ) , ( ( ( [string] , [number] ) , ) , ( [number] , [number] ) ) , ( ( ( [string] , [number] ) , ) , ( [number] , [number] ) ) , ( ( ( [string] , [number] ) , ) , ( [number] , [number] ) ) , ( ( ( [string] , [number] ) , ) , ( [number] , [number] ) ) , ( ( ( [string] , [number] ) , ) , ( [number] , [number] ) ) , ( ( ( [string] , [number] ) , ) , ( [number] , [number] ) ) , ( ( ( [string] , [number] ) , ) , ( [number] , [number] ) ) , ( ( ( [string] , [number] ) , ) , ( [number] , [number] ) ) , ( ( ( [string] , [number] ) , ) , ( [number] , [number] ) ) , ( ( ( [string] , [number] ) , ) , ( [number] , [number] ) ) , ( ( ( [string] , [number] ) , ) , ( [number] , [number] ) ) , ( ( ( [string] , [number] ) , ) , ( [number] , [number] ) ) , ( ( ( [string] , [number] ) , ) , ( [number] , [number] ) ) , ( ( ( [string] , [number] ) , ) , ( [number] , [number] ) ) , ( ( ( [string] , [number] ) , ) , ( [number] , [number] ) ) , ( ( ( [string] , [number] ) , ) , ( [number] , [number] ) ) , ( ( ( [string] , [number] ) , ) , ( [number] , [number] ) ) , ( ( ( [string] , [number] ) , ) , ( [number] , [number] ) ) , ( ( ( [string] , [number] ) , ) , ( [number] , [number] ) ) , ( ( ( [string] , [number] ) , ) , ( [number] , [number] ) ) , ( ( ( [string] , [number] ) , ) , ( [number] , [number] ) ) , ( ( ( [string] , [number] ) , ) , ( [number] , [number] ) ) , ( ( ( [string] , [number] ) , ) , ( [number] , [number] ) ) , ( ( ( [string] , [number] ) , ) , ( [number] , [number] ) ) , ] [EOL] [EOL] [comment] [EOL] [EOL] [docstring] [EOL] [EOL] [comment] [EOL] machat = [ [number] , [number] , - [number] , - [number] , [number] , [number] , [number] , [number] , [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] , - [number] , - [number] , - [number] , [number] , ] [EOL] [EOL] assert tuple ( sorted ( machat ) ) == ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ) [EOL] [EOL] [comment] [EOL] [EOL] partitioned_pitch_field_pitch_number_lists = [ [ ( - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ) , ] , [ ( - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] ) , ] , [ ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ] , [ ( - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ] , [ ( - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] ) , ( [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ] , [ ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] ) , ] , [ ( - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] ) , ] , [ ( - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] ) , ] , ] [EOL] [EOL] [comment] [EOL] [EOL] pitch_field_pitch_number_lists = [ ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ) , ] [EOL] [EOL] [comment] [EOL] [EOL] recombined_pitch_field_pitch_number_lists = [ [ ( - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ) , ] , [ ( - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , [number] , [number] ) , ] , [ ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ] , [ ( - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ) , ] , [ ( - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] ) , ( [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , [number] , [number] , [number] ) , ] , [ ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] ) , ] , [ ( - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] ) , ] , [ ( - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , [number] ) , ( [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , [number] , [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] ) , ] , ] [EOL] [EOL] [comment] [EOL] [EOL] teferim = [ ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] ) , ] [EOL] [EOL] [comment] [EOL] [EOL] teferim_by_reading = [ [ ( - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] ) , ( - [number] , - [number] , - [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , [number] , [number] , [number] ) , ] , [ ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] ) , ] , [ ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] ) , ] , [ ( - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , [number] , [number] , [number] , [number] , [number] ) , ] , [ ( - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] ) , ( - [number] , - [number] , - [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , [number] , [number] , [number] ) , ] , [ ( - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , [number] ) , ( - [number] , - [number] , - [number] , [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , [number] , [number] , [number] ) , ] , ] [EOL] [EOL] [comment] [EOL] [EOL] teferim_by_reading_in_range = [ [ ( - [number] , - [number] , - [number] , [number] , [number] ) , ( ) , ( - [number] , [number] ) , ( ) , ( ) , ( - [number] , - [number] , - [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] ) , ( [number] , [number] ) , ] , [ ( [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] ) , ( [number] , ) , ( ) , ( [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] ) , ] , [ ( [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] , [number] ) , ] , [ ( - [number] , - [number] , [number] , [number] , [number] ) , ( - [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] ) , ] , [ ( - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] ) , ( - [number] , ) , ( - [number] , - [number] , [number] ) , ( ) , ( [number] , ) , ( - [number] , - [number] , - [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , [number] , [number] , [number] ) , ] , [ ( - [number] , - [number] , - [number] , - [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , [number] ) , ( - [number] , [number] , [number] ) , ( - [number] , [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , - [number] , [number] , [number] ) , ( [number] , ) , ] , ] [EOL] [EOL] [comment] [EOL] [EOL] teferim_by_reading_out_of_range = [ [ ( - [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , [number] , [number] , [number] ) , ( ) , ( ) , ( - [number] , - [number] , - [number] , [number] ) , ] , [ ( [number] , [number] ) , ( [number] , [number] ) , ( ) , ( [number] , ) , ( [number] , [number] ) , ( [number] , [number] , [number] , [number] , [number] ) , ( [number] , ) , ( [number] , ) ] , [ ( [number] , [number] , [number] , [number] ) , ( [number] , ) , ( ) , ( [number] , [number] , [number] ) , ( [number] , ) , ( [number] , [number] ) , ( [number] , ) , ( - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] ) , ] , [ ( - [number] , - [number] ) , ( - [number] , ) , ( ) , ( ) , ( ) , ( ) , ( ) , ( - [number] , - [number] , - [number] , [number] , [number] , [number] ) ] , [ ( ) , ( - [number] , - [number] , - [number] , - [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , - [number] ) , ( - [number] , - [number] , - [number] , [number] , [number] , [number] ) , ( - [number] , - [number] , - [number] , [number] , [number] ) , ( ) , ( ) , ( - [number] , ) , ] , [ ( [number] , [number] ) , ( - [number] , [number] , [number] ) , ( - [number] , ) , ( - [number] , - [number] , [number] , [number] ) , ( - [number] , - [number] ) , ( ) , ( [number] , ) , ( - [number] , - [number] , - [number] , [number] , [number] ) , ] , ] [EOL] [EOL] [EOL] class Calligraphs ( object ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [EOL] __slots__ = ( ) [EOL] [EOL] [comment] [EOL] [EOL] @ staticmethod def cycle_backward ( pitches , cycles ) : [EOL] [docstring] [EOL] pitches = list ( pitches ) [EOL] if None in pitches : [EOL] yield pitches [ [number] ] [EOL] else : [EOL] first_element = None [EOL] for element in reversed ( list ( Calligraphs . cycle_forward ( pitches , cycles ) ) ) : [EOL] if first_element is None : [EOL] first_element = element [EOL] else : [EOL] yield element [EOL] [EOL] @ staticmethod def cycle_forward ( pitches , cycles ) : [EOL] [docstring] [EOL] pitches = list ( pitches ) [EOL] if None in pitches : [EOL] yield pitches [ [number] ] [EOL] else : [EOL] for cycle in range ( cycles ) : [EOL] for pitch in pitches : [EOL] yield pitch [EOL] yield pitches [ [number] ] [EOL] [EOL] @ staticmethod def FB ( iterable ) : [EOL] [docstring] [EOL] return iterate_sequence_boustrophedon ( iterable ) [EOL] [EOL] @ staticmethod def FBc ( iterable , cycles ) : [EOL] [docstring] [EOL] return baca . sequence ( list ( Calligraphs . FB ( iterable ) ) ) . repeat ( n = cycles ) . flatten ( ) [EOL] [EOL] @ staticmethod def FBl ( iterable , length ) : [EOL] [docstring] [EOL] return baca . sequence ( list ( Calligraphs . FB ( iterable ) ) ) . repeat_to_length ( length ) [EOL] [EOL] @ staticmethod def Fc ( iterable , cycles ) : [EOL] [docstring] [EOL] return baca . sequence ( iterable ) . repeat ( n = cycles ) . flatten ( ) [EOL] [EOL] @ staticmethod def Fcab ( iterable , cycles , start = [number] , stop = None ) : [EOL] [docstring] [EOL] manifest_iterable = list ( iterable ) [EOL] for cycle in range ( cycles ) : [EOL] cycle_iterable = manifest_iterable [ : ] [EOL] if cycle == [number] : [EOL] cycle_iterable = cycle_iterable [ start : ] [EOL] if stop is not None : [EOL] if cycle == cycles - [number] : [EOL] cycle_iterable = cycle_iterable [ : stop ] [EOL] for x in cycle_iterable : [EOL] yield x [EOL] [EOL] @ staticmethod def Fl ( iterable , length ) : [EOL] [docstring] [EOL] return baca . sequence ( iterable ) . repeat_to_length ( length ) [EOL] [EOL] @ staticmethod def Ll ( iterable , length ) : [EOL] [docstring] [EOL] iterable = list ( iterable ) [EOL] sublist = iterable [ : length ] [EOL] for item in sublist : [EOL] yield item [EOL] for item in reversed ( sublist [ [number] : - [number] ] ) : [EOL] yield item [EOL] [EOL] @ staticmethod def Llc ( iterable , length , cycles ) : [EOL] [docstring] [EOL] for cycle in range ( cycles ) : [EOL] for item in Calligraphs . Ll ( iterable , length ) : [EOL] yield item [EOL] [EOL] @ staticmethod def Lll ( iterable , lengths ) : [EOL] [docstring] [EOL] for length in lengths : [EOL] for item in Calligraphs . Ll ( iterable , length ) : [EOL] yield item [EOL] [EOL] @ staticmethod def LllFcQll ( iterable , left_lengths , forward_cycles , Q_lengths ) : [EOL] [docstring] [EOL] for item in Calligraphs . Lll ( iterable , left_lengths ) : [EOL] yield item [EOL] for item in Calligraphs . Fc ( iterable , forward_cycles ) : [EOL] yield item [EOL] for item in Calligraphs . Qll ( iterable , Q_lengths ) : [EOL] yield item [EOL] [EOL] @ staticmethod def Ml ( iterable , length ) : [EOL] [docstring] [EOL] iterable = list ( iterable ) [EOL] sublist = iterable [ : length ] [EOL] for item in sublist [ [number] : - [number] ] : [EOL] yield item [EOL] for item in reversed ( sublist ) : [EOL] yield item [EOL] [EOL] @ staticmethod def Mlc ( iterable , length , cycles ) : [EOL] [docstring] [EOL] for cycle in range ( cycles ) : [EOL] for item in Calligraphs . Ml ( iterable , length ) : [EOL] yield item [EOL] [EOL] @ staticmethod def Mll ( iterable , lengths ) : [EOL] [docstring] [EOL] for length in lengths : [EOL] for item in Calligraphs . Ml ( iterable , length ) : [EOL] yield item [EOL] [EOL] @ staticmethod def Ql ( iterable , right_length ) : [EOL] [docstring] [EOL] iterable = list ( iterable ) [EOL] sublist = iterable [ - right_length : ] [EOL] for item in reversed ( sublist [ : - [number] ] ) : [EOL] yield item [EOL] for item in sublist [ [number] : ] : [EOL] yield item [EOL] [EOL] @ staticmethod def Qlc ( iterable , length , cycles ) : [EOL] [docstring] [EOL] iterable = list ( Calligraphs . Ql ( iterable , length ) ) [EOL] return baca . sequence ( iterable ) . repeat ( n = cycles ) . flatten ( ) [EOL] [EOL] @ staticmethod def Qll ( iterable , lengths ) : [EOL] [docstring] [EOL] for length in lengths : [EOL] for item in Calligraphs . Ql ( iterable , length ) : [EOL] yield item [EOL] [EOL] @ staticmethod def Rl ( iterable , length ) : [EOL] [docstring] [EOL] iterable = list ( iterable ) [EOL] sublist = iterable [ - length : ] [EOL] for item in reversed ( sublist ) : [EOL] yield item [EOL] for item in sublist [ [number] : - [number] ] : [EOL] yield item [EOL] [EOL] @ staticmethod def Rlc ( iterable , length , cycles ) : [EOL] [docstring] [EOL] result = Calligraphs . Rl ( iterable , length ) [EOL] return baca . sequence ( list ( result ) ) . repeat ( n = cycles ) . flatten ( ) [EOL] [EOL] @ staticmethod def Rll ( iterable , lengths ) : [EOL] [docstring] [EOL] for length in lengths : [EOL] for item in Calligraphs . Rl ( iterable , length ) : [EOL] yield item [EOL] [EOL] @ staticmethod def undulate_backward ( pitches , cycles ) : [EOL] [docstring] [EOL] pitches = list ( pitches ) [EOL] if None in pitches : [EOL] yield pitches [ [number] ] [EOL] else : [EOL] undulation = list ( reversed ( pitches ) ) + pitches [ [number] : - [number] ] [EOL] for cycle in range ( cycles ) : [EOL] for pitch in undulation : [EOL] yield pitch [EOL] [comment] [EOL] [EOL] @ staticmethod def undulate_forward ( pitches , cycles ) : [EOL] [docstring] [EOL] pitches = list ( pitches ) [EOL] if None in pitches : [EOL] yield pitches [ [number] ] [EOL] else : [EOL] undulation = pitches [ : - [number] ] + list ( reversed ( pitches ) ) [ : - [number] ] [EOL] for cycle in range ( cycles ) : [EOL] for pitch in undulation : [EOL] yield pitch [EOL] yield pitches [ [number] ] [EOL] [EOL] [EOL] class ExtrusionToken ( object ) : [EOL] def __init__ ( self , cycle_token , length , function ) : [EOL] sieve = cycle_tokens_to_sieve ( cycle_token ) [EOL] self . sieve = sieve [EOL] self . length = length [EOL] self . function = function [EOL] [EOL] [comment] [EOL] [EOL] def __repr__ ( self ) : [EOL] return [string] % ( self . __class__ . __name__ , self . sieve , self . length , ) [EOL] [EOL] [EOL] class Litfor ( object ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [EOL] duration = abjad . Duration ( [number] , [number] ) [EOL] [EOL] __slots__ = ( ) [EOL] [EOL] [comment] [EOL] [EOL] @ staticmethod def do_layout ( score ) : [EOL] treble_staff = score [ [number] ] [ [number] ] [EOL] abjad . line_break_every_prolated ( treble_staff , abjad . Duration ( [number] , [number] ) ) [EOL] systems = abjad . SystemYOffsets ( [number] , [number] , [number] ) [EOL] staves = abjad . StaffAlignmentOffsets ( [number] , - [number] ) [EOL] positioning = abjad . FixedStaffPositioning ( systems , staves ) [EOL] abjad . apply_fixed_staff_positioning ( treble_staff , positioning ) [EOL] [EOL] @ staticmethod def do_measures ( score ) : [EOL] delattr ( score . bar_line , [string] ) [EOL] delattr ( score . span_bar , [string] ) [EOL] treble_staff = score [ [number] ] [ [number] ] [EOL] bass_staff = score [ [number] ] [ [number] ] [EOL] abjad . override ( treble_staff [ : ] , [string] , [string] , [string] , False ) [EOL] abjad . override ( treble_staff [ : ] , [string] , [string] , [string] , False ) [EOL] abjad . override ( bass_staff [ : ] , [string] , [string] , [string] , False ) [EOL] treble_staff [ - [number] ] . bar_line . kind = [string] [EOL] [EOL] @ staticmethod def get_chord_closest_to_center_value ( chords , center_value ) : [EOL] best_distance , best_chord = None , None [EOL] for chord in chords : [EOL] this_distance = abs ( chord . center - center_value ) [EOL] if best_distance is None or this_distance <= best_distance : [EOL] best_distance = this_distance [EOL] best_chord = chord [EOL] new_best_chord = abjad . Chord ( best_chord . pairs , best_chord . duration . written ) [EOL] return new_best_chord [EOL] [EOL] @ staticmethod def litfor ( pitch_field_number ) : [EOL] measures = Litfor . make_measures ( ) [EOL] result = [ ] [EOL] durated_machat_notes = [ ] [EOL] for signature in durated_machat : [EOL] note = abjad . Note ( signature [ [number] ] [ [number] ] , signature [ - [number] ] ) [EOL] durated_machat_notes . append ( note ) [EOL] print ( [string] % len ( durated_machat_notes ) ) [EOL] stroke_count = [number] [EOL] for durated_machat_note in durated_machat_notes : [EOL] machat_pitch_number = durated_machat_note . pitch . number [EOL] duration = durated_machat_note . duration . written [EOL] numerator , denominator = abjad . Duration ( duration ) . with_denominator ( [number] ) [EOL] for duration_count in range ( numerator ) : [EOL] pitch_field_number = ( stroke_count % len ( measures ) ) + [number] [EOL] measure = measures [ stroke_count % len ( measures ) ] [EOL] stroke_count += [number] [EOL] chord = Litfor . get_chord_closest_to_center_value ( measure , machat_pitch_number ) [EOL] for note_head in chord : [EOL] note_head . duration_log = [number] [EOL] note_head = abjad . NoteHead ( None , machat_pitch_number ) [EOL] note_head . style = [string] [EOL] note_head . color = [string] [EOL] chord . append ( note_head ) [EOL] tmp = [string] [EOL] tmp %= stroke_count , pitch_field_number , machat_pitch_number [EOL] tmp = [string] % tmp [EOL] chord . markup . up . append ( tmp ) [EOL] rounded_chord_center = round ( chord . center , [number] ) [EOL] tmp = [string] % rounded_chord_center [EOL] chord . markup . up . append ( tmp ) [EOL] result . append ( chord ) [EOL] print ( [string] % stroke_count ) [EOL] return result [EOL] [EOL] @ staticmethod def make_measures ( ) : [EOL] result = [ ] [EOL] for pitch_number_list in recombined_pitch_field_pitch_number_lists : [EOL] measure = abjad . Container ( ) [EOL] for sublist in pitch_number_list : [EOL] chord = abjad . Chord ( sublist , Litfor . duration ) [EOL] measure . append ( chord ) [EOL] result . append ( measure ) [EOL] return result [EOL] [EOL] @ staticmethod def replace_single_notes ( score ) : [EOL] for note in abjad . iterate ( score ) . leaves ( abjad . Note ) : [EOL] parent , start , stop = abjad . get . _get_parent_with_start_stop_indices ( note ) [EOL] new_note = abjad . Note ( note . pitch . pair , note . duration . written ) [EOL] parent [ start : stop + [number] ] = [ new_note ] [EOL] new_note . note_head . duration_log = [number] [EOL] new_note . markup . up . extend ( note . markup . up [ : ] ) [EOL] [EOL] @ staticmethod def show_teferim ( chords ) : [EOL] score , treble_staff , bass_staff = abjad . Score . make_piano_score ( chords , sketch = True ) [EOL] for leaf in score . leaves : [EOL] abjad . Container ( [ leaf ] ) [EOL] abjad . label . measure_numbers ( treble_staff ) [EOL] abjad . label . measure_numbers ( bass_staff ) [EOL] Litfor . replace_single_notes ( treble_staff ) [EOL] Litfor . replace_single_notes ( bass_staff ) [EOL] for leaf in score . leaves : [EOL] if isinstance ( leaf , abjad . Note ) : [EOL] leaf . note_head . duration_log = [number] [EOL] Litfor . do_layout ( score ) [EOL] Litfor . do_measures ( score ) [EOL] score . non_musical_paper_column . line_break_permission = False [EOL] score . non_musical_paper_column . page_break_permission = False [EOL] score . spacing . proportional_notation_duration = abjad . Duration ( [number] , [number] ) [EOL] score . rest . transparent = True [EOL] score . stem . transparent = True [EOL] score . text_script . staff_padding = [number] [EOL] lilypond_file = abjad . LilyPondFile . new ( score ) [EOL] lilypond_file . header . tagline = abjad . Markup ( [string] ) [EOL] lilypond_file . layout . indent = [number] [EOL] lilypond_file . layout . ragged_right = True [EOL] lilypond_file . paper . left_margin = [number] [EOL] lilypond_file . paper . top_margin = [number] [EOL] lilypond_file . paper . oddFooterMarkup = abjad . Markup ( [string] ) [EOL] lilypond_file . paper . ragged_last_bottom = True [EOL] lilypond_file . paper . ragged_bottom = True [EOL] lilypond_file . paper . minimal_page_breaking = True [EOL] lilypond_file . paper . print_page_number = False [EOL] lilypond_file . default_paper_size = [string] [EOL] lilypond_file . global_staff_size = [number] [EOL] abjad . show ( lilypond_file ) [EOL] [EOL] [EOL] class PartitionedPitchFieldMaker ( object ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [EOL] __slots__ = ( ) [EOL] [EOL] [comment] [EOL] [EOL] @ staticmethod def make_lilypond_file ( score ) : [EOL] lilypond_file = abjad . LilyPondFile . new ( score ) [EOL] lilypond_file . layout . indent = [number] [EOL] lilypond_file . layout . ragged_right = True [EOL] lilypond_file . global_staff_size = [number] [EOL] lilypond_file . default_paper_size = [string] [EOL] lilypond_file . paper . top_margin = [number] [EOL] lilypond_file . paper . oddFooterMarkup = abjad . Markup ( [string] ) [EOL] lilypond_file . paper . evenFooterMarkup = abjad . Markup ( [string] ) [EOL] return lilypond_file [EOL] [EOL] @ staticmethod def show_partitioned_pitch_field_pitch_number_lists ( ) : [EOL] treble_staff = abjad . Staff ( ) [EOL] treble_staff . accidental . style = [string] [EOL] bass_staff = abjad . Staff ( ) [EOL] bass_staff . accidental_style = [string] [EOL] bass_staff . clef . forced = abjad . Clef ( [string] ) [EOL] for pitch_field in partitioned_pitch_field_pitch_number_lists : [EOL] treble_measure = abjad . Container ( ) [EOL] bass_measure = abjad . Container ( ) [EOL] chords = [ abjad . Chord ( x , ( [number] , [number] ) ) for x in pitch_field ] [EOL] for chord in chords : [EOL] treble_chord , bass_chord = chord . split_by_altitude ( chord ) [EOL] treble_measure . append ( treble_chord ) [EOL] bass_measure . append ( bass_chord ) [EOL] treble_staff . append ( treble_measure ) [EOL] bass_staff . append ( bass_measure ) [EOL] piano_staff = abjad . PianoStaff ( [ treble_staff , bass_staff ] ) [EOL] score = abjad . Score ( [ piano_staff ] ) [EOL] score . spacing . proportional_notation_duration = quicktions . Fraction ( [number] , [number] ) [EOL] score . bar_number . transparent = True [EOL] score . rest . transparent = True [EOL] score . text_script . staff_padding = [number] [EOL] treble_staff . bar_line . kind = [string] [EOL] lilypond_file = PartitionedPitchFieldMaker . make_lilypond_file ( score ) [EOL] for i , measure in enumerate ( treble_staff ) : [EOL] label = [string] % ( i + [number] ) [EOL] measure . leaves [ [number] ] . markup . up . append ( label ) [EOL] abjad . show ( lilypond_file ) [EOL] return lilypond_file [EOL] [EOL] [EOL] class RecombinedPitchFieldMaker ( object ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [EOL] __slots__ = ( ) [EOL] [EOL] [comment] [EOL] [EOL] @ staticmethod def make_lilypond_file ( score ) : [EOL] lilypond_file = abjad . LilyPondFile . new ( score ) [EOL] lilypond_file . layout . indent = [number] [EOL] lilypond_file . layout . ragged_right = True [EOL] lilypond_file . global_staff_size = [number] [EOL] lilypond_file . default_paper_size = [string] [EOL] lilypond_file . paper . top_margin = [number] [EOL] lilypond_file . paper . oddFooterMarkup = abjad . Markup ( [string] ) [EOL] lilypond_file . paper . evenFooterMarkup = abjad . Markup ( [string] ) [EOL] return lilypond_file [EOL] [EOL] @ staticmethod def show_recombined_pitch_fields ( ) : [EOL] treble_staff = abjad . Staff ( ) [EOL] treble_staff . accidental . style = [string] [EOL] bass_staff = abjad . Staff ( ) [EOL] bass_staff . accidental . style = [string] [EOL] bass_staff . clef . forced = abjad . Clef ( [string] ) [EOL] for pitch_field in recombined_pitch_field_pitch_number_lists : [EOL] treble_measure = abjad . Container ( ) [EOL] bass_measure = abjad . Container ( ) [EOL] chords = [ abjad . Chord ( x , ( [number] , [number] ) ) for x in pitch_field ] [EOL] for chord in chords : [EOL] chord . markup . up . append ( round ( chord . center , [number] ) ) [EOL] treble_chord , bass_chord = chord . split_by_altitude ( chord ) [EOL] treble_measure . append ( treble_chord ) [EOL] bass_measure . append ( bass_chord ) [EOL] treble_staff . append ( treble_measure ) [EOL] bass_staff . append ( bass_measure ) [EOL] piano_staff = abjad . PianoStaff ( [ treble_staff , bass_staff ] ) [EOL] score = abjad . Score ( [ piano_staff ] ) [EOL] score . spacing . proportional_notation_duration = quicktions . Fraction ( [number] , [number] ) [EOL] score . bar_number . transparent = True [EOL] score . rest . transparent = True [EOL] score . text_script . staff_padding = [number] [EOL] [EOL] abjad . line_break_every_prolated ( treble_staff , quicktions . Fraction ( [number] , [number] ) ) [EOL] systems = abjad . SystemYOffsets ( [number] , [number] , [number] ) [EOL] staves = abjad . StaffAlignmentOffsets ( [number] , - [number] ) [EOL] positioning = abjad . FixedStaffPositioning ( systems , staves ) [EOL] abjad . apply_fixed_staff_positioning ( treble_staff , positioning ) [EOL] [EOL] treble_staff . bar_line . kind = [string] [EOL] lilypond_file = RecombinedPitchFieldMaker . make_lilypond_file ( score ) [EOL] for i , measure in enumerate ( treble_staff ) : [EOL] label = [string] % ( i + [number] ) [EOL] [comment] [EOL] measure . leaves [ [number] ] . markup . up . insert ( [number] , label ) [EOL] abjad . show ( lilypond_file ) [EOL] return lilypond_file [EOL] [EOL] [EOL] class SpacingIndication ( object ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [EOL] __slots__ = ( [string] , [string] ) [EOL] [EOL] _publish_storage_format = True [EOL] [EOL] [comment] [EOL] [EOL] def __init__ ( self , * arguments ) : [EOL] if len ( arguments ) == [number] and isinstance ( arguments [ [number] ] , type ( self ) ) : [EOL] self . _tempo_indication = arguments [ [number] ] . tempo_indication [EOL] self . _proportional_notation_duration = arguments [ [number] ] . proportional_notation_duration [EOL] elif len ( arguments ) == [number] : [EOL] tempo = arguments [ [number] ] [EOL] if isinstance ( tempo , tuple ) : [EOL] tempo = abjad . MetronomeMark ( * tempo ) [EOL] tempo_indication = tempo [EOL] proportional_notation_duration = abjad . Duration ( arguments [ [number] ] ) [EOL] self . _tempo_indication = tempo_indication [EOL] self . _proportional_notation_duration = proportional_notation_duration [EOL] elif len ( arguments ) == [number] : [EOL] tempo = abjad . MetronomeMark ( ) [EOL] proportional_notation_duration = abjad . Duration ( [number] , [number] ) [EOL] self . _tempo_indication = tempo [EOL] self . _proportional_notation_duration = proportional_notation_duration [EOL] else : [EOL] raise ValueError ( f" [string] { arguments !r} [string] " ) [EOL] [EOL] [comment] [EOL] [EOL] def __eq__ ( self , argument ) : [EOL] [docstring] [EOL] if isinstance ( argument , SpacingIndication ) : [EOL] if self . normalized_spacing_duration == argument . normalized_spacing_duration : [EOL] return True [EOL] return False [EOL] [EOL] def __format__ ( self , format_specification = [string] ) : [EOL] [docstring] [EOL] if format_specification in ( [string] , [string] ) : [EOL] return abjad . StorageFormatManager ( self ) . get_storage_format ( ) [EOL] return str ( self ) [EOL] [EOL] def __hash__ ( self ) : [EOL] [docstring] [EOL] hash_values = abjad . StorageFormatManager ( self ) . get_hash_values ( ) [EOL] try : [EOL] result = hash ( hash_values ) [EOL] except TypeError : [EOL] raise TypeError ( f" [string] { self }" ) [EOL] return result [EOL] [EOL] def __repr__ ( self ) : [EOL] [docstring] [EOL] return abjad . StorageFormatManager ( self ) . get_repr_format ( ) [EOL] [EOL] [comment] [EOL] [EOL] def _get_format_specification ( self ) : [EOL] return abjad . FormatSpecification ( client = self , repr_is_indented = False , storage_format_args_values = [ self . _tempo_indication , self . _proportional_notation_duration , ] , ) [EOL] [EOL] [comment] [EOL] [EOL] @ property def normalized_spacing_duration ( self ) : [EOL] [docstring] [EOL] indication = self . tempo_indication [EOL] scalar = ( indication . reference_duration / indication . units_per_minute * [number] / abjad . Duration ( [number] , [number] ) ) [EOL] return scalar * self . proportional_notation_duration [EOL] [EOL] @ property def proportional_notation_duration ( self ) : [EOL] [docstring] [EOL] return self . _proportional_notation_duration [EOL] [EOL] @ property def tempo_indication ( self ) : [EOL] [docstring] [EOL] return self . _tempo_indication [EOL] [EOL] [EOL] def apply_contour_sieve ( iterable , contour_sieve ) : [EOL] [docstring] [EOL] result = [ ] [EOL] most_iterable = list ( iterable ) [ : - [number] ] [EOL] most_reversed_iterable = list ( reversed ( iterable ) ) [ : - [number] ] [EOL] if contour_sieve is None : [EOL] return [ most_iterable ] [EOL] if isinstance ( contour_sieve , int ) : [EOL] if [number] < contour_sieve : [EOL] return [ most_iterable ] * contour_sieve [EOL] else : [EOL] return [ most_reversed_iterable ] * abs ( contour_sieve ) [EOL] [comment] [EOL] for boolean in contour_sieve . get_boolean_vector ( ) : [EOL] if boolean == [number] : [EOL] result . append ( most_iterable ) [EOL] elif boolean == [number] : [EOL] result . append ( most_reversed_iterable ) [EOL] else : [EOL] raise ValueError ( [string] ) [EOL] return result [EOL] [EOL] [EOL] def conditionally_save_incremental_pdf ( output_directory , base_file_name ) : [EOL] [docstring] [EOL] [EOL] save = input ( [string] ) [EOL] if save . lower ( ) == [string] : [EOL] next_file_number = get_next_file_number ( output_directory , [string] ) [EOL] next_file_number = str ( next_file_number ) . zfill ( [number] ) [EOL] next_file_name = f"{ base_file_name }{ next_file_number } [string] " [EOL] next_full_file_name = pathlib . Path ( output_directory , next_file_name ) [EOL] abjad . save_last_pdf_as ( next_full_file_name ) [EOL] message = f" [string] { next_file_name } [string] " [EOL] print ( message ) [EOL] [EOL] [EOL] def cycle_tokens_to_sieve ( * tokens ) : [EOL] patterns = [ ] [EOL] for token in tokens : [EOL] assert isinstance ( token , tuple ) , repr ( token ) [EOL] assert len ( token ) == [number] , repr ( token ) [EOL] period , indices = token [EOL] if indices == [ ] : [EOL] indices = [ [number] ] [EOL] pattern = abjad . Pattern ( indices = indices , period = period ) [EOL] patterns . append ( pattern ) [EOL] pattern = patterns [ [number] ] [EOL] for pattern_ in patterns : [EOL] pattern = pattern | pattern [EOL] return pattern [EOL] [EOL] [EOL] def extrude_line_segment_strict ( line_segment , * extrusion_tokens ) : [EOL] [docstring] [EOL] for index , element in enumerate ( line_segment ) : [EOL] matching_token = None [EOL] for token in extrusion_tokens : [EOL] if token . sieve . is_congruent_base ( index ) : [EOL] matching_token = token [EOL] if matching_token is not None : [EOL] stop_index = index + matching_token . length [EOL] input = line_segment [ index : stop_index ] [EOL] [comment] [EOL] if len ( input ) == matching_token . length : [EOL] output = matching_token . function ( input ) [EOL] line_segment [ index ] = output [EOL] return line_segment [EOL] [EOL] [EOL] def get_congruent_bases ( pattern , total_period ) : [EOL] [docstring] [EOL] result = [ ] [EOL] for i in range ( total_period ) : [EOL] if pattern . matches_index ( i , total_length = total_period ) : [EOL] result . append ( i ) [EOL] return result [EOL] [EOL] [EOL] def get_next_file_number ( output_directory , extension ) : [EOL] [docstring] [EOL] [EOL] file_numbers = [ ] [EOL] for file_name in os . listdir ( output_directory ) : [EOL] if file_name . endswith ( extension ) : [EOL] try : [EOL] file_numbers . append ( int ( file_name [ - [number] : - [number] ] ) ) [EOL] except ValueError : [EOL] pass [EOL] if file_numbers : [EOL] max_file_number = max ( file_numbers ) [EOL] else : [EOL] max_file_number = [number] [EOL] next_file_number = max_file_number + [number] [EOL] return next_file_number [EOL] [EOL] [EOL] def import_public_functions ( directory , namespace ) : [EOL] [docstring] [EOL] module_names = pathlib . Path ( directory ) . parent . glob ( [string] ) [EOL] module_names = [ _ for _ in module_names if _ . endswith ( [string] ) ] [EOL] module_names = [ _ for _ in module_names if not _ . startswith ( [string] ) ] [EOL] module_names = [ _ [ : - [number] ] for _ in module_names ] [EOL] for module_name in module_names : [EOL] module = __import__ ( module_name , globals = namespace ) [EOL] for key , value in vars ( module ) . items ( ) : [EOL] if _is_defined_in_module ( value , module ) or isinstance ( value , ( list , dict ) ) : [EOL] if not key . startswith ( [string] ) : [EOL] namespace [ key ] = value [EOL] [EOL] [EOL] def _is_defined_in_module ( value , module ) : [EOL] [comment] [EOL] module_name = module . __name__ [EOL] [comment] [EOL] value_module_name = getattr ( value , [string] , None ) [EOL] [comment] [EOL] return module_name == value_module_name [EOL] [EOL] [EOL] def is_dotted_integer ( argument ) : [EOL] [docstring] [EOL] if argument == [number] : [EOL] return False [EOL] non_two_product = [number] [EOL] non_two_factors = [ _ for _ in abjad . mathx . factors ( argument ) if not _ == [number] ] [EOL] for non_two_factor in non_two_factors : [EOL] non_two_product *= non_two_factor [EOL] number = math . log ( abs ( non_two_product ) + [number] , [number] ) [EOL] result = [number] < abs ( non_two_product ) and int ( number ) == number [EOL] return result [EOL] [EOL] [EOL] def iterate_sequence_boustrophedon ( iterable , duplicates = False ) : [EOL] [docstring] [EOL] if not isinstance ( iterable , collections . abc . Iterable ) : [EOL] raise Exception ( f" [string] { iterable !r} [string] " ) [EOL] if duplicates : [EOL] sequence_copy = [ ] [EOL] for x in iterable : [EOL] yield x [EOL] sequence_copy . append ( x ) [EOL] for x in reversed ( sequence_copy ) : [EOL] yield x [EOL] else : [EOL] sequence_copy = [ ] [EOL] for x in iterable : [EOL] yield x [EOL] sequence_copy . append ( x ) [EOL] for x in reversed ( sequence_copy [ [number] : - [number] ] ) : [EOL] yield x [EOL] [EOL] [EOL] def make_recombined_pitch_field_number_lists ( ) : [EOL] result = [ ] [EOL] for partitioned_list in partitioned_pitch_field_pitch_number_lists : [EOL] combinations = [ ] [EOL] sublists = abjad . enumeratex . yield_sublists ( partitioned_list ) [EOL] for sublist in sublists : [EOL] flattened_sublist = baca . sequence ( sublist ) . flatten ( ) [EOL] pitch_set = abjad . PitchSet ( flattened_sublist ) [EOL] if not pitch_set . has_duplicate_pitch_class ( ) : [EOL] if [number] < len ( pitch_set ) : [EOL] combinations . append ( pitch_set . pitch_numbers ) [EOL] result . append ( combinations ) [EOL] data_name = [string] [EOL] path_name = pathlib . Path ( [string] , [string] % data_name ) [EOL] out = open ( path_name , [string] ) [EOL] output = [string] % ( data_name , result ) [EOL] out . write ( output ) [EOL] return result [EOL] [EOL] [EOL] def partition_pitch_field_pitch_number_lists ( ) : [EOL] partitioned_number_lists = [ ] [EOL] for pitch_field_pitch_number_list in pitch_field_pitch_number_lists : [EOL] partitioned_number_list = partition_to_avoid_octave_adjacencies ( pitch_field_pitch_number_list , [string] ) [EOL] partitioned_number_lists . append ( partitioned_number_list ) [EOL] data_name = [string] [EOL] path_name = pathlib . Path ( [string] , [string] % data_name ) [EOL] out = open ( path_name , [string] ) [EOL] output = [string] % ( data_name , partitioned_number_lists ) [EOL] out . write ( output ) [EOL] out . close ( ) [EOL] return partitioned_number_lists [EOL] [EOL] [EOL] def partition_to_avoid_octave_adjacencies ( list_ , direction ) : [EOL] [docstring] [EOL] assert direction in ( [string] , [string] ) [EOL] result = [ [ ] ] [EOL] part = result [ - [number] ] [EOL] for number in list_ : [EOL] if not isinstance ( number , ( int , float , quicktions . Fraction ) ) : [EOL] raise TypeError ( [string] ) [EOL] if number % [number] in [ y % [number] for y in part ] : [EOL] first_value = [ y for y in part if y % [number] == number % [number] ] [ [number] ] [EOL] first_index = part . index ( first_value ) [EOL] [comment] [EOL] old_part = part [ : first_index + [number] ] [EOL] disputed_part = part [ first_index + [number] : ] [EOL] new_part = [ ] [EOL] [comment] [EOL] left , right = baca . partition_integer_into_halves ( len ( disputed_part ) , bigger = direction ) [EOL] disputed_parts = baca . sequence ( disputed_part ) . partition_by_counts ( [ left , right ] , cyclic = False , overhang = False ) [EOL] left_disputed_part , right_disputed_part = disputed_parts [EOL] assert len ( left_disputed_part ) == left [EOL] assert len ( right_disputed_part ) == right [EOL] old_part . extend ( left_disputed_part ) [EOL] new_part . extend ( right_disputed_part ) [EOL] [comment] [EOL] result [ - [number] ] = old_part [EOL] [comment] [EOL] result . append ( new_part ) [EOL] part = result [ - [number] ] [EOL] part . append ( number ) [EOL] result = [ tuple ( _ ) for _ in result ] [EOL] return result [EOL] [EOL] [EOL] def print_stats ( score ) : [EOL] mciseg = abjad . expr_to_melodic_chromatic_interval_segment ( score ) [EOL] print ( ) [EOL] print ( mciseg . melodic_chromatic_interval_class_vector ) [EOL] print ( ) [EOL] [EOL] [EOL] def render_tex ( input_directory , input_file_name_stem , output_directory ) : [EOL] [docstring] [EOL] message = f" [string] { input_file_name_stem } [string] " [EOL] print ( message ) [EOL] command = [string] [EOL] command = command . format ( input_file_name_stem , output_directory , input_directory , input_file_name_stem , ) [EOL] os . system ( command ) [EOL] command = f" [string] { output_directory } [string] " [EOL] os . system ( command ) [EOL] command = f" [string] { output_directory } [string] " [EOL] os . system ( command ) [EOL] [EOL] [EOL] def save_illumination_and_pdf ( illumination , number ) : [EOL] [comment] [EOL] [comment] [EOL] output_directory = [string] [EOL] if True : [EOL] name = str ( number ) . zfill ( [number] ) [EOL] pdf_name = [string] % name [EOL] path_name = pathlib . Path ( output_directory , [string] , pdf_name ) [EOL] abjad . persist ( path_name ) . as_pdf ( ) [EOL] print ( [string] % pdf_name ) [EOL] output_name = [string] % name [EOL] path_name = pathlib . Path ( output_directory , [string] , output_name ) [EOL] data = [string] % str ( illumination ) [EOL] output = open ( path_name , [string] ) [EOL] output . write ( data ) [EOL] output . close ( ) [EOL] print ( [string] % output_name ) [EOL] [EOL] [EOL] def show_machat ( ) : [EOL] maker = abjad . LeafMaker ( ) [EOL] machat_notes = maker ( machat , [ ( [number] , [number] ) ] ) [EOL] pitch_numbers = [ x . pitch . number for x in machat_notes ] [EOL] score , treble_staff , bass_staff = abjad . Score . make_piano_score ( machat_notes , sketch = True ) [EOL] abjad . label . leaf_numbers ( bass_staff ) [EOL] for bass_leaf , pitch_number in zip ( bass_staff . leaves , pitch_numbers ) : [EOL] label = [string] % pitch_number [EOL] bass_leaf . markup . down . append ( label ) [EOL] bass_staff . text_script . staff_padding = [number] [EOL] score . spacing . proportional_notation_duration = quicktions . Fraction ( [number] , [number] ) [EOL] score . rest . transparent = True [EOL] score . stem . transparent = True [EOL] score . note_head . color = [string] [EOL] score . note_head . style = [string] [EOL] score . accidental . color = [string] [EOL] lilypond_file = abjad . LilyPondFile . new ( score ) [EOL] lilypond_file . global_staff_size = [number] [EOL] lilypond_file . default_paper_size = [string] [EOL] lilypond_file . layout . indent = [number] [EOL] lilypond_file . paper . left_margin = [number] [EOL] lilypond_file . paper . top_margin = [number] [EOL] lilypond_file . paper . oddFooterMarkup = abjad . Markup ( [string] ) [EOL] lilypond_file . header . tagline = abjad . Markup ( [string] ) [EOL] abjad . show ( lilypond_file ) [EOL]	typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any
from typing import List [EOL] import typing [EOL] import distutils . version [EOL] import platform [EOL] [EOL] from . AggregateMaker import AggregateMaker [EOL] from . DemoCalligraphY import DemoCalligraphY [EOL] from . DemoCalligraphYx import DemoCalligraphYx [EOL] from . DemoCalligraphZ import DemoCalligraphZ [EOL] from . DemoSacredReading import DemoSacredReading [EOL] from . DemoTools import DemoTools [EOL] from . DuratedMachatMaker import DuratedMachatMaker [EOL] from . TabulateVerticalities import TabulateVerticalities [EOL] from . TeferimByReading import TeferimByReading [EOL] from . Y import Y [EOL] from . Z import Z [EOL] from . tools import ( Calligraphs , ExtrusionToken , Litfor , PartitionedPitchFieldMaker , RecombinedPitchFieldMaker , SpacingIndication , apply_contour_sieve , conditionally_save_incremental_pdf , cycle_tokens_to_sieve , durated_machat , extrude_line_segment_strict , get_congruent_bases , get_next_file_number , import_public_functions , is_dotted_integer , iterate_sequence_boustrophedon , machat , make_recombined_pitch_field_number_lists , partition_pitch_field_pitch_number_lists , partition_to_avoid_octave_adjacencies , partitioned_pitch_field_pitch_number_lists , pitch_field_pitch_number_lists , print_stats , recombined_pitch_field_pitch_number_lists , render_tex , save_illumination_and_pdf , show_machat , teferim , teferim_by_reading , teferim_by_reading_in_range , teferim_by_reading_out_of_range , ) [EOL] [EOL] __all__ = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] if not ( distutils . version . LooseVersion ( [string] ) < distutils . version . LooseVersion ( platform . python_version ( ) ) ) : [EOL] raise ImportError ( [string] ) [EOL] del distutils [EOL] del platform [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Any , Type , List [EOL] import desir [EOL] import typing [EOL] import abjad [EOL] import baca [EOL] import quicktions [EOL] [EOL] [EOL] class AggregateMaker ( object ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [EOL] __slots__ = ( ) [EOL] [EOL] CC = baca . ConstellationCircuit . make_constellation_circuit_1 ( ) [EOL] [EOL] [comment] [EOL] [EOL] @ staticmethod def make_aggregates ( ) : [EOL] [docstring] [EOL] [EOL] CC = baca . ConstellationCircuit . make_constellation_circuit_1 ( ) [EOL] aggregates = [ CC . get ( [number] , [number] ) , CC . get ( [number] , [number] ) , CC . get ( [number] , [number] ) , CC . get ( [number] , [number] ) , CC . get ( [number] , [number] ) , CC . get ( [number] , [number] ) , CC . get ( [number] , [number] ) , CC . get ( [number] , [number] ) , ] [EOL] [EOL] aggregates = [ abjad . Chord ( x , ( [number] , [number] ) ) for x in aggregates ] [EOL] [EOL] for chord , constellation_number in zip ( aggregates , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] ) : [EOL] CC . get ( constellation_number ) . _label_chord ( chord ) [EOL] [EOL] return aggregates [EOL] [EOL] @ staticmethod def make_colored_intersection_chords ( ) : [EOL] aggregates = AggregateMaker . make_aggregates ( ) [EOL] colored_chords = [ ] [EOL] for chord_1 , chord_2 in baca . sequence ( aggregates ) . nwise ( wrapped = True ) : [EOL] union = chord_1 | chord_2 [EOL] intersection = chord_1 & chord_2 [EOL] color_map = abjad . PitchClassColorMap ( [ intersection . numbers ] , [ [string] ] ) [EOL] abjad . label ( union ) . color_by_pc ( color_map ) [EOL] colored_chords . append ( union ) [EOL] return colored_chords [EOL] [EOL] @ staticmethod def make_intersection_labels ( ) : [EOL] labels = AggregateMaker . make_labels ( ) [EOL] intersection_labels = [ ] [EOL] for l1 , l2 in baca . sequence ( labels ) . nwise ( n = [number] , wrapped = True ) : [EOL] intersection_label = abjad . Markup ( [string] % ( l1 , l2 ) ) [EOL] intersection_labels . append ( intersection_label ) [EOL] return intersection_labels [EOL] [EOL] @ staticmethod def make_labels ( ) : [EOL] aggregates = AggregateMaker . make_aggregates ( ) [EOL] labels = [ ] [EOL] for chord , constellation_number in zip ( aggregates , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] ) : [EOL] constellation = AggregateMaker . CC . get ( constellation_number ) [EOL] chord_number = constellation . get_chord_number ( chord ) [EOL] label = [string] % ( constellation_number , chord_number ) [EOL] labels . append ( label ) [EOL] return labels [EOL] [EOL] @ staticmethod def make_lilypond_file ( chords ) : [EOL] score , treble , bass = abjad . Score . make_piano_score ( chords , sketch = True ) [EOL] score . spacing . proportional_notation_duration = quicktions . Fraction ( [number] , [number] ) [EOL] score . text_script . staff_padding = [number] [EOL] score . rest . transparent = True [EOL] score . meter . stencil = False [EOL] lilypond_file = abjad . LilyPondFile . new ( score ) [EOL] lilypond_file . global_staff_size = [number] [EOL] lilypond_file . paper . top_margin = [number] [EOL] lilypond_file . paper . left_margin = [number] [EOL] lilypond_file . paper . oddFooterMarkup = abjad . Markup ( [string] ) [EOL] lilypond_file . paper . evenFooterMarkup = abjad . Markup ( [string] ) [EOL] lilypond_file . layout . ragged_right = True [EOL] lilypond_file . layout . indent = [number] [EOL] lilypond_file . header . tagline = abjad . Markup ( [string] ) [EOL] return lilypond_file [EOL] [EOL] @ staticmethod def make_pitch_fields ( ) : [EOL] aggregates = AggregateMaker . make_aggregates ( ) [EOL] pitch_fields = [ ] [EOL] for chord_1 , chord_2 in baca . sequence ( aggregates ) . nwise ( wrapped = True ) : [EOL] union = chord_1 | chord_2 [EOL] intersection = chord_1 & chord_2 [EOL] color_map = abjad . PitchClassColorMap ( [ intersection . numbers ] , [ [string] ] ) [EOL] abjad . label ( union ) . color_by_pc ( color_map ) [EOL] union_center = union . center [EOL] for notehead in union : [EOL] if notehead . pitch . number in intersection . numbers : [EOL] if notehead . pitch . number < union_center : [EOL] notehead . pitch = notehead . pitch . number - [number] [EOL] elif union_center < notehead . pitch . number : [EOL] notehead . pitch = notehead . pitch . number + [number] [EOL] else : [EOL] print ( [string] ) [EOL] pitch_fields . append ( union ) [EOL] return pitch_fields [EOL] [EOL] @ staticmethod def make_pitch_fields_pnls ( ) : [EOL] pitch_fields = AggregateMaker . make_pitch_fields ( ) [EOL] return [ pitch_field . numbers for pitch_field in pitch_fields ] [EOL] [EOL] @ staticmethod def show_aggregates ( ) : [EOL] aggregates = AggregateMaker . make_aggregates ( ) [EOL] lilypond_file = AggregateMaker . make_lilypond_file ( aggregates ) [EOL] abjad . show ( lilypond_file ) [EOL] [EOL] @ staticmethod def show_both ( ) : [EOL] aggregates = AggregateMaker . make_aggregates ( ) [EOL] colored_chords = AggregateMaker . make_colored_intersection_chords ( ) [EOL] lilypond_file = AggregateMaker . make_lilypond_file ( aggregates + colored_chords ) [EOL] abjad . layouttools . line_break_every_prolated ( lilypond_file . music [ [number] ] , quicktions . Fraction ( [number] , [number] ) , klass = abjad . Leaf ) [EOL] systems = abjad . layouttools . SystemYOffsets ( [number] , [number] , [number] ) [EOL] staves = abjad . layouttools . StaffAlignmentOffsets ( [number] , - [number] ) [EOL] positioning = abjad . layouttools . FixedStaffPositioning ( systems , staves ) [EOL] abjad . layouttools . apply_fixed_staff_positioning ( lilypond_file . music [ [number] ] , positioning , klass = abjad . Leaf ) [EOL] intersection_labels = AggregateMaker . make_intersection_labels ( ) [EOL] for chord , intersection_label in zip ( lilypond_file . music [ [number] ] [ [number] ] [ - [number] : ] , intersection_labels ) : [EOL] chord . markup . up . append ( intersection_label . contents ) [EOL] abjad . show ( lilypond_file ) [EOL] [EOL] @ staticmethod def show_intersection ( ) : [EOL] colored_chords = AggregateMaker . make_colored_intersection_chords ( ) [EOL] lilypond_file = AggregateMaker . make_lilypond_file ( colored_chords ) [EOL] abjad . show ( lilypond_file ) [EOL] [EOL] @ staticmethod def show_pitch_fields ( ) : [EOL] pitch_fields = AggregateMaker . make_pitch_fields ( ) [EOL] lilypond_file = AggregateMaker . make_lilypond_file ( pitch_fields ) [EOL] abjad . show ( lilypond_file ) [EOL] [EOL] if __name__ == [string] : [EOL] show_aggregates ( ) [EOL] show_intersection ( ) [EOL] show_both ( ) [EOL] show_pitch_fields ( ) [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[desir.AggregateMaker.AggregateMaker]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Any , Iterator [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] class DemoTools ( object ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [EOL] __slots__ = ( ) [EOL] [EOL] [comment] [EOL] [EOL] @ staticmethod def configure_lilypond_file ( lilypond_file ) : [EOL] lilypond_file . layout . indent = [number] [EOL] lilypond_file . layout . ragged_right = True [EOL] lilypond_file . paper . top_margin = [number] [EOL] lilypond_file . paper . left_margin = [number] [EOL] lilypond_file . paper . print_page_number = False [EOL] lilypond_file . paper . minimal_page_breaking = True [EOL] lilypond_file . paper . ragged_last_bottom = True [EOL] lilypond_file . paper . ragged_bottom = True [EOL] lilypond_file . global_staff_size = [number] [EOL] lilypond_file . default_paper_size = [string] [EOL] return lilypond_file [EOL] [EOL] @ staticmethod def extend_staff ( staff , notes ) : [EOL] staff . extend ( notes ) [EOL] stop_offset = staff [ - [number] ] . offset . prolated . stop [EOL] stop_sixteenth = abjad . Duration ( stop_offset ) . with_denominator ( [number] ) [ [number] ] [EOL] if not stop_sixteenth % [number] == [number] : [EOL] skips_needed = [number] - ( stop_sixteenth % [number] ) [EOL] skips = abjad . Skip ( ( [number] , [number] ) ) * skips_needed [EOL] staff . extend ( skips ) [EOL] staff [ - [number] ] . breaks . line = True [EOL] [EOL] @ staticmethod def format_cycle_token ( cycle_token ) : [EOL] period , residue_list = cycle_token [EOL] residue_list = [string] . join ( [ str ( x ) for x in residue_list ] ) [EOL] return [string] % ( period , residue_list ) [EOL] [EOL] @ staticmethod def make_pitch_numbers_and_duration ( ) : [EOL] notes = reversed ( abjad . make_scale ( [number] ) [ [number] : ] ) [EOL] pitch_numbers = [ note . pitch . number for note in notes ] [EOL] duration = abjad . Duration ( [number] , [number] ) [EOL] return pitch_numbers , duration [EOL] [EOL] @ staticmethod def make_score ( ) : [EOL] score = abjad . Score ( [ abjad . Staff ( ) ] ) [EOL] staff = score [ [number] ] [EOL] staff . remove_commands . add ( [string] ) [EOL] pnd = abjad . Duration ( [number] , [number] ) [EOL] score . spacing . proportional_notation_duration = pnd [EOL] score . spacing . uniform_stretching = True [EOL] score . spacing . strict_note_spacing = True [EOL] score . stem . transparent = True [EOL] score . beam . auto_beaming = False [EOL] score . meter . transparent = True [EOL] score . text_script . staff_padding = [number] [EOL] score . bar_line . stencil = False [EOL] score . meter . stencil = False [EOL] lilypond_file = abjad . LilyPondFile . new ( score ) [EOL] DemoTools . configure_lilypond_file ( lilypond_file ) [EOL] return score [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0
	0
import pathlib [EOL] import pathlib [EOL] [EOL] [EOL] def get_fleur_by_number ( fleur_number ) : [EOL] path = [string] [EOL] file_name = [string] % str ( fleur_number ) . zfill ( [number] ) [EOL] path_name = pathlib . Path ( path , file_name ) [EOL] illumination = None [EOL] exec ( open ( path_name , [string] ) . read ( ) ) [EOL] return illumination [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] [docstring] [EOL] from . get_fleur_by_number import get_fleur_by_number [EOL] [EOL] __all__ = [ [string] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] import baca [EOL] import quicktions [EOL] [EOL] from desir . fleurs . get_fleur_by_number import get_fleur_by_number [EOL] [EOL] [EOL] def get_fleur_pitch_sets ( ) : [EOL] fleur_pitch_sets = [ ] [EOL] fleur_number = [number] [EOL] while True : [EOL] try : [EOL] structured_fleur_pitch_numbers = get_fleur_by_number ( fleur_number ) [EOL] fleur_pitch_numbers = baca . sequence ( structured_fleur_pitch_numbers ) . flatten ( ) [EOL] fleur_pitch_set = abjad . PitchSet ( fleur_pitch_numbers ) [EOL] fleur_pitch_sets . append ( fleur_pitch_set ) [EOL] except Exception : [EOL] break [EOL] fleur_number += [number] [EOL] return fleur_pitch_sets [EOL] [EOL] [EOL] def make_chords ( ) : [EOL] fleur_pitch_sets = get_fleur_pitch_sets ( ) [EOL] chords = [ ] [EOL] for fleur_pitch_set in fleur_pitch_sets : [EOL] chord = abjad . Chord ( fleur_pitch_set . pitches , quicktions . Fraction ( [number] , [number] ) ) [EOL] chords . append ( chord ) [EOL] return chords [EOL] [EOL] [EOL] def configure_score ( score ) : [EOL] treble_staff = score [ [number] ] [ [number] ] [EOL] bass_staff = score [ [number] ] [ [number] ] [EOL] treble_staff . meter . forced = abjad . TimeSignature ( [number] , [number] ) [EOL] bass_staff . meter . forced = abjad . TimeSignature ( [number] , [number] ) [EOL] schema = abjad . LayoutSchema ( quicktions . Fraction ( [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , ) ) [EOL] abjad . apply_layout_schema ( treble_staff , schema , klass = abjad . Leaf ) [EOL] score . note_head . duration_log = [number] [EOL] [comment] [EOL] treble_staff . text_script . staff_padding = [number] [EOL] pnd = quicktions . Fraction ( [number] , [number] ) [EOL] score . spacing . proportional_notation_duration = pnd [EOL] score . spacing . uniform_stretching = True [EOL] score . spacing . strict_note_spacing = True [EOL] score . stem . transparent = True [EOL] score . beam . auto_beaming = False [EOL] score . meter . transparent = True [EOL] score . text_script . staff_padding = [number] [EOL] score . text_script . Y_extent = ( [number] , [number] ) [EOL] score . bar_line . stencil = False [EOL] score . meter . stencil = False [EOL] configure_lilypond_file ( score ) [EOL] [EOL] [EOL] def configure_lilypond_file ( score ) : [EOL] lilypond_file = abjad . LilyPondFile . new ( score ) [EOL] lilypond_file . layout . indent = [number] [EOL] lilypond_file . layout . ragged_right = True [EOL] lilypond_file . paper . top_margin = [number] [EOL] lilypond_file . paper . left_margin = [number] [EOL] lilypond_file . paper . print_page_number = False [EOL] lilypond_file . paper . minimal_page_breaking = True [EOL] lilypond_file . paper . ragged_last_bottom = True [EOL] lilypond_file . paper . ragged_bottom = True [EOL] lilypond_file . paper . between_system_padding = [number] [EOL] lilypond_file . global_staff_size = [number] [EOL] lilypond_file . default_paper_size = [string] , [string] [EOL] apply_footer ( score ) [EOL] return lilypond_file [EOL] [EOL] [EOL] def apply_footer ( score ) : [EOL] lilypond_file = score . lilypond_file [EOL] footer_string = [string] [EOL] footer_markup = abjad . Markup ( [string] % footer_string ) [EOL] lilypond_file . paper . oddFooterMarkup = footer_markup [EOL] lilypond_file . paper . evenFooterMarkup = footer_markup [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] chords = make_chords ( ) [EOL] abjad . label . leaf_numbers ( chords , direction = abjad . Up ) [EOL] chords . sort ( ) [EOL] score = abjad . Score . make_piano_score ( chords ) [EOL] configure_score ( score ) [EOL] abjad . show ( score . lilypond_file ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0
from typing import List [EOL] import typing [EOL] import os [EOL] [EOL] pdftk_command = [string] [EOL] pdf_names = [ ] [EOL] [EOL] file_names = os . listdir ( [string] ) [EOL] for file_name in sorted ( file_names ) : [EOL] if file_name . startswith ( [string] ) and file_name . endswith ( [string] ) : [EOL] pdf_names . append ( file_name ) [EOL] pdf_names = [string] . join ( pdf_names ) [EOL] [EOL] pdftk_command %= pdf_names [EOL] os . system ( pdftk_command ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0
from typing import Union , List [EOL] import typing [EOL] illumination = [ [ [ [number] , [number] ] , [number] ] , [ [ [number] , [number] ] , [ [number] , [number] ] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [ [number] , [number] ] , [number] ] , [ [ [number] , [number] ] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [number] ] , [ [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] ] , [ [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] , [number] , [number] , [ [number] , [number] ] , [number] ] , [ [ [number] , [number] ] , [ [number] , [number] ] , [number] , [number] , [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] ] , [ [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] ] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , List [EOL] import typing [EOL] illumination = [ [ - [number] , [ - [number] , - [number] ] , - [number] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ [number] , [ - [number] , - [number] ] , - [number] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , - [number] ] , [ - [number] , - [number] ] , [ - [number] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , - [number] ] , [ [number] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , - [number] ] , [ - [number] , [ - [number] , - [number] ] , - [number] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , - [number] ] , [ - [number] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ [number] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , - [number] ] , [ - [number] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ [number] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , - [number] ] , [ - [number] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ [number] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , - [number] ] , [ - [number] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ [number] , [ - [number] , - [number] ] , - [number] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , - [number] ] , [ - [number] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , - [number] ] , [ [number] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , - [number] ] , [ - [number] , - [number] ] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , List [EOL] import typing [EOL] illumination = [ [ [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Union[typing.List[builtins.float],typing.List[builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , List [EOL] import typing [EOL] illumination = [ [ - [number] , - [number] , [ - [number] , - [number] ] , [ - [number] , - [number] ] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ] , [ - [number] , [ - [number] , - [number] ] , [ - [number] , - [number] ] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] , [ - [number] , - [number] ] , [ - [number] , - [number] ] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ] , [ - [number] , [ - [number] , - [number] ] , [ - [number] , - [number] ] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] , [ - [number] , - [number] ] , [ - [number] , - [number] ] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ] , [ - [number] , [ - [number] , - [number] ] , [ - [number] , - [number] ] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , List [EOL] import typing [EOL] illumination = [ [ - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] , - [number] ] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Union[typing.List[builtins.float],typing.List[builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , List [EOL] import typing [EOL] illumination = [ [ [ - [number] , - [number] ] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , - [number] , [ - [number] , - [number] ] , - [number] ] , [ - [number] , - [number] ] , [ [ - [number] , - [number] , - [number] ] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] , [ - [number] , - [number] ] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] ] , [ [ - [number] ] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] , [ - [number] , - [number] ] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] ] , [ [ - [number] , - [number] , - [number] ] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] ] , [ [ - [number] ] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , - [number] , [ - [number] , - [number] ] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] ] , [ [ - [number] ] , - [number] ] , [ [ - [number] , - [number] , - [number] ] , - [number] , - [number] , - [number] ] , [ [ - [number] ] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] , [ - [number] , - [number] ] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] ] , [ [ - [number] ] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] ] , [ [ - [number] ] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , - [number] , [ - [number] , - [number] ] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] ] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , List [EOL] import typing [EOL] illumination = [ [ [ - [number] , [number] , - [number] , [number] ] , - [number] ] , [ [ [number] , [number] , [number] , [number] ] , [number] , [number] , - [number] ] , [ [number] , [number] , - [number] ] , [ - [number] , - [number] , [number] ] , [ [number] , [number] , - [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] , - [number] ] , [ [ [number] , - [number] , [number] , - [number] ] , [number] ] , [ [ [number] , [number] , [number] ] , [number] , [number] , - [number] ] , [ [number] , [number] , - [number] ] , [ [number] , [number] , [number] ] , [ - [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] , - [number] ] , [ [ [number] , - [number] , [number] ] , - [number] ] , [ [ - [number] , - [number] , - [number] ] , - [number] , [number] , [number] ] , [ [number] , [number] , - [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , - [number] ] , [ - [number] , - [number] , [number] ] , [ [number] , [number] , [number] , - [number] ] , [ [ [number] , - [number] , [number] ] , - [number] ] , [ [ [number] , [number] , [number] , [number] ] , [number] , [number] , - [number] ] , [ - [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , - [number] ] , [ [number] , [number] , [number] ] , [ - [number] , - [number] , [number] , [number] ] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , List [EOL] import typing [EOL] illumination = [ [ - [number] , - [number] , [number] , [number] ] , [ [ [number] ] , [ [number] , [number] ] , [number] , [number] , - [number] , - [number] ] , [ [ [number] , [number] ] , [ [number] , [number] ] , [number] , - [number] , - [number] , - [number] ] , [ - [number] , [ [number] , - [number] ] , [ [number] , [number] ] , [number] ] , [ - [number] , - [number] , - [number] , [ [number] , - [number] ] , [ [number] , [number] ] , [number] ] , [ - [number] , - [number] , [number] , [ [number] , [number] ] , [ [number] , [number] ] , [number] ] , [ [number] , [number] , [number] , - [number] ] , [ [number] , [ [number] , [number] ] , [ [number] , [number] ] , [ - [number] , [number] ] , - [number] , - [number] ] , [ - [number] , [ [number] , - [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [number] , [number] ] , [ - [number] , [ [number] , - [number] ] , [ [number] , [number] ] , [number] ] , [ - [number] , - [number] , - [number] , - [number] , [number] , [number] ] , [ [ [number] , [number] ] , [ [number] , [number] ] , [number] , - [number] , - [number] , - [number] ] , [ [ [number] , [number] ] , [ [number] , [number] ] , [number] , - [number] ] , [ - [number] , [ - [number] , - [number] ] , [ - [number] , - [number] ] , [ [number] , - [number] ] , [number] , [number] ] , [ - [number] , - [number] , [number] , [ [number] , [number] ] , [ [number] , [number] ] , [number] ] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] illumination = [ [ - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] ] , [ - [number] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] ] , [ - [number] , - [number] ] , [ - [number] , - [number] ] , ] [EOL]	0 0 0 0 0 0 0 0 $typing.List[typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , List [EOL] import typing [EOL] illumination = [ [ [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] ] , [ - [number] , [ - [number] , - [number] ] , - [number] , - [number] , - [number] ] , [ - [number] , [ - [number] , - [number] ] , - [number] ] , [ - [number] , - [number] , - [number] , [ - [number] , - [number] ] , - [number] ] , [ - [number] , - [number] , - [number] ] , [ [ - [number] , - [number] ] , - [number] , - [number] , - [number] ] , [ - [number] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , - [number] , [ - [number] , - [number] ] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] ] , [ - [number] , [ - [number] , - [number] ] , - [number] , - [number] , - [number] ] , [ - [number] , [ - [number] , - [number] ] , - [number] ] , [ - [number] , - [number] , - [number] , [ - [number] , - [number] ] , - [number] ] , [ - [number] , - [number] , - [number] ] , [ [ - [number] , - [number] ] , - [number] , - [number] , - [number] , - [number] ] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , List [EOL] import typing [EOL] illumination = [ [ [ [number] , - [number] ] , [number] , [number] , [number] , [number] ] , [ [ [number] , [number] ] , [number] , - [number] , - [number] ] , [ - [number] , [ - [number] , - [number] ] , - [number] , [number] , [number] ] , [ [number] , [ [number] , [number] ] , [number] , [number] , - [number] ] , [ - [number] , [ [number] , [number] ] , [number] , [number] ] , [ - [number] , - [number] , [ [number] , - [number] ] , [number] , [number] ] , [ [number] , [number] , [ [number] , [number] ] , [number] , - [number] ] , [ - [number] , [number] , [ [number] , [number] ] , [number] ] , [ [number] , [number] , [number] , [ - [number] , [number] ] , - [number] ] , [ - [number] , [number] , [number] , [ [number] , [number] ] , [number] ] , [ - [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , - [number] ] , [ - [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , - [number] , - [number] ] , [ [ - [number] ] , - [number] , - [number] , [number] , [number] ] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , List [EOL] import typing [EOL] illumination = [ [ - [number] , - [number] , [number] , [number] ] , [ - [number] , - [number] , [number] , [number] ] , [ - [number] , - [number] ] , [ [number] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] ] , [ [number] , [number] ] , [ - [number] , - [number] , - [number] , - [number] , [number] , [number] ] , [ - [number] , - [number] , [number] , [number] ] , [ - [number] , - [number] , [number] , [number] ] , [ [number] , [number] , - [number] , - [number] ] , [ [number] , [number] ] , [ - [number] , - [number] , - [number] , - [number] , [number] , [number] ] , [ - [number] , - [number] , [number] , [number] ] , [ [number] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] ] , [ - [number] , - [number] , [number] , [number] ] , [ - [number] , - [number] , - [number] , - [number] ] , [ [number] , [number] , [number] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] , [number] , [number] ] , [ [number] , [number] , - [number] , - [number] ] , [ - [number] , - [number] , [number] , [number] ] , [ - [number] , - [number] , [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] , [number] , - [number] , - [number] , - [number] ] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Union[typing.List[builtins.float],typing.List[builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , List [EOL] import typing [EOL] illumination = [ [ [ - [number] , - [number] ] , - [number] , - [number] , [number] ] , [ [number] , [ [number] , [number] ] , [number] , [number] , [number] , - [number] , - [number] ] , [ [number] , [number] , - [number] , - [number] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , - [number] , [ [number] , - [number] ] , [number] ] , [ - [number] , - [number] , - [number] , [ [number] , [number] , - [number] , - [number] , [number] , [number] , - [number] , - [number] ] , - [number] , [number] , [number] ] , [ - [number] , [ - [number] , - [number] ] , - [number] , [number] , [number] , [number] , [number] ] , [ - [number] , - [number] , - [number] , [number] ] , [ [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [number] , [number] , [number] , [number] , [ - [number] , - [number] ] , - [number] ] , [ [number] , [number] , - [number] , [ - [number] , - [number] ] , - [number] , - [number] , - [number] ] , [ - [number] , [ - [number] , [number] , - [number] , - [number] ] , - [number] , [number] ] , [ - [number] , - [number] , [ - [number] , - [number] ] , - [number] , - [number] , [number] , [number] ] , [ [ - [number] , - [number] ] , - [number] , - [number] , [number] , [number] , [ - [number] , - [number] , [number] , [number] ] , [number] ] , [ - [number] , - [number] , - [number] , [number] ] , [ [number] , [number] , [number] , [number] , [ - [number] , [number] ] , - [number] , - [number] ] , [ [number] , [number] , [ - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ] , - [number] , - [number] , - [number] , - [number] ] , [ [ - [number] , - [number] ] , - [number] , - [number] , [number] ] , [ - [number] , [ - [number] , - [number] ] , - [number] , - [number] , - [number] , [number] , [number] ] , [ - [number] , - [number] , - [number] , [number] , [ [number] , [number] ] , [number] , [number] ] , [ - [number] , - [number] , [ [number] , - [number] ] , [number] ] , [ [number] , [number] , [number] , [ - [number] , - [number] , [number] , [number] , - [number] , - [number] , [number] , [number] ] , [number] , - [number] , - [number] ] , [ [number] , [ - [number] , [number] ] , - [number] , - [number] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] , [number] ] , [ [ - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] , - [number] ] , - [number] , - [number] , - [number] , - [number] , [ [number] , [number] ] , [number] ] , [ - [number] , - [number] , - [number] , [ [number] , [number] ] , [number] , [number] , [number] ] , [ - [number] , [ [number] , [number] , - [number] , - [number] ] , - [number] , [number] ] , [ [number] , [number] , [ [number] , [number] ] , [number] , [number] , - [number] , - [number] ] , [ [ [number] , [number] ] , [number] , - [number] , - [number] , - [number] , [ - [number] , - [number] , - [number] , - [number] ] , - [number] ] , [ - [number] , - [number] , - [number] , [number] ] , [ - [number] , - [number] , - [number] , - [number] , [ [number] , - [number] ] , [number] , [number] ] , [ - [number] , - [number] , [ [number] , [number] , [number] , - [number] , [number] , [number] , [number] , - [number] ] , [number] , [number] , [number] , [number] ] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , List [EOL] import typing [EOL] illumination = [ [ [ - [number] , - [number] ] , - [number] , [ - [number] , - [number] ] , - [number] , [ - [number] , - [number] ] , - [number] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , [ - [number] , - [number] ] , - [number] , [ - [number] , - [number] ] , - [number] , [ - [number] , - [number] ] , - [number] , [ - [number] , - [number] ] , - [number] ] , [ [ - [number] , - [number] ] , - [number] , [ - [number] , - [number] ] , - [number] , [ - [number] , - [number] ] , - [number] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , [ - [number] , - [number] ] , - [number] , [ - [number] , - [number] ] , - [number] , [ - [number] , - [number] ] , - [number] , [ - [number] , - [number] ] , - [number] ] , [ [ - [number] , - [number] ] , - [number] , [ - [number] , - [number] ] , - [number] , [ - [number] , - [number] ] , - [number] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , [ - [number] , - [number] ] , - [number] , [ - [number] , - [number] ] , - [number] , [ - [number] , - [number] ] , - [number] , [ - [number] , - [number] ] , - [number] ] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[typing.Union[typing.List[builtins.float],typing.List[builtins.int],builtins.float]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , List [EOL] import typing [EOL] illumination = [ [ [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [ [number] , [number] , [number] , [number] ] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [number] , [number] , [number] ] , [ [number] , [number] , [ [number] , [number] , [number] , [number] ] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [ [number] , [number] , [number] , [number] ] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] , [ [ [number] , [number] , [number] ] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [ [number] , [number] , [number] , [number] ] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [ [number] , [number] , [number] , [number] ] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [ [number] , [number] , [number] , [number] ] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , List [EOL] import typing [EOL] illumination = [ [ [ - [number] , - [number] ] , [ - [number] , - [number] ] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] , - [number] ] , [ [ - [number] ] , - [number] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] ] , [ - [number] , [ - [number] , - [number] ] , [ - [number] , - [number] ] , - [number] ] , [ - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] , - [number] ] , [ [ - [number] , - [number] ] , [ - [number] , - [number] ] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] , [ - [number] , - [number] ] , [ - [number] , - [number] ] , - [number] ] , [ - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] , - [number] ] , [ [ - [number] ] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] , [ - [number] , - [number] ] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] , - [number] ] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , List [EOL] import typing [EOL] illumination = [ [ [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [number] , [number] ] , [ [number] , [ [number] , [number] ] , [number] ] , [ [ [number] , [number] ] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] ] , [ [number] , [ [number] , [number] ] , [ [number] , [number] ] , [number] ] , [ [number] , [number] , [number] ] , [ [ [number] , [number] ] , [ [number] , [number] ] , [number] ] , [ [number] , [number] , [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [ [number] , [number] ] , [ [number] , [number] ] , [number] ] , [ [number] , [number] , [number] ] , [ [ [number] ] , [ [number] , [number] ] , [number] , [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [ [number] , [number] ] , [ [number] , [number] ] , [number] ] , [ [number] , [number] ] , [ [number] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] , [ [number] , [number] ] , [number] ] , [ [ [number] , [number] ] , [number] ] , [ [number] , [number] , [ [number] , [number] ] , [number] ] , [ [ [number] ] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , [ [ [number] , [number] ] , [ [number] , [number] ] , [number] ] , [ [number] , [number] , [number] ] , [ [ [number] ] , [ [number] , [number] ] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [ [number] , [number] ] , [ [number] , [number] ] , [number] ] , [ [number] , [number] , [ [number] , [number] ] , [number] ] , [ [ [number] ] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [ [number] , [number] ] , [number] ] , [ [ [number] , [number] ] , [number] , [number] , [number] , [number] ] , [ [ [number] , [number] ] , [number] ] , [ [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] , [ [number] , [number] ] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , List [EOL] import typing [EOL] illumination = [ [ [ - [number] , - [number] ] , [ - [number] , - [number] ] , - [number] ] , [ [number] , - [number] , [ - [number] , - [number] ] , - [number] ] , [ - [number] , - [number] , - [number] ] , [ [number] , - [number] , - [number] , - [number] ] , [ - [number] , [ - [number] , - [number] ] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , [ - [number] , - [number] ] , [ - [number] , - [number] ] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] ] , [ [ [number] ] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , [ - [number] , - [number] ] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] ] , [ [number] , - [number] , - [number] , - [number] , - [number] ] , [ [ - [number] , - [number] ] , - [number] , - [number] , - [number] ] , [ [ - [number] , - [number] ] , [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] ] , [ [ [number] ] , - [number] , - [number] ] , [ - [number] , [ - [number] , - [number] ] , [ - [number] , - [number] ] , - [number] ] , [ [number] , - [number] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] , [ - [number] , - [number] ] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] ] , [ [ - [number] , - [number] ] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] ] , [ [number] , - [number] , - [number] ] , [ [ - [number] , - [number] ] , - [number] , - [number] , - [number] ] , [ [ - [number] , - [number] ] , [ - [number] , - [number] ] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] ] , [ - [number] , [ - [number] , - [number] ] , [ - [number] , - [number] ] , - [number] ] , [ - [number] , - [number] ] , [ [ - [number] ] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] ] , [ [number] , - [number] , [ - [number] , - [number] ] , - [number] ] , [ - [number] , - [number] , - [number] , [ - [number] , - [number] ] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] ] , [ - [number] , - [number] , - [number] , - [number] ] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , List [EOL] import typing [EOL] illumination = [ [ [ [number] , [number] ] , [ [number] , [number] ] , [number] ] , [ [number] , [number] , [number] ] , [ [ [number] , [number] ] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] , [ [number] , [number] ] , [ [ [number] , [number] ] , [number] , [number] , [number] ] , [ [ [number] , [number] ] , [ [number] , [number] ] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [ [number] , [number] ] , [ [number] , [number] ] , [number] ] , [ [number] , [number] , [number] ] , [ [ [number] ] , [number] , [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] , [number] ] , [ [ [number] , [number] ] , [number] , [number] ] , [ [number] , [ [number] , [number] ] , [ [number] , [number] ] , [number] ] , [ [number] , [number] ] , [ [number] , [number] , [number] , [number] ] , [ [ [number] , [number] ] , [ [number] , [number] ] , [number] ] , [ [number] , [number] , [number] ] , [ [ [number] ] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [ [number] ] , [number] , [number] , [number] ] , [ [ [number] , [number] ] , [ [number] , [number] ] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [ [number] , [number] ] , [ [number] , [number] ] , [number] ] , [ [number] , [number] ] , [ [ [number] , [number] ] , [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [ [number] ] , [number] , [number] ] , [ [number] , [ [number] , [number] ] , [ [number] , [number] ] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from . helpers . handle_illumination import handle_illumination [EOL] from . illuminations . illumination_01 import illumination_01 [EOL] from . illuminations . illumination_02 import illumination_02 [EOL] from . illuminations . illumination_03 import illumination_03 [EOL] from . illuminations . illumination_04 import illumination_04 [EOL] from . illuminations . illumination_05 import illumination_05 [EOL] from . illuminations . illumination_06 import illumination_06 [EOL] from . illuminations . illumination_07 import illumination_07 [EOL] from . illuminations . illumination_08 import illumination_08 [EOL] from . illuminations . illumination_09 import illumination_09 [EOL] from . illuminations . illumination_10 import illumination_10 [EOL] from . illuminations . illumination_11 import illumination_11 [EOL] from . illuminations . illumination_12 import illumination_12 [EOL] from . illuminations . illumination_13 import illumination_13 [EOL] from . illuminations . illumination_14 import illumination_14 [EOL] from . illuminations . illumination_15 import illumination_15 [EOL] from . illuminations . illumination_16 import illumination_16 [EOL] from . illuminations . illumination_17 import illumination_17 [EOL] from . illuminations . illumination_18 import illumination_18 [EOL] from . illuminations . illumination_19 import illumination_19 [EOL] [EOL] if __name__ == [string] : [EOL] score = handle_illumination ( * illumination_01 ( ) ) [EOL] score = handle_illumination ( * illumination_02 ( ) ) [EOL] score = handle_illumination ( * illumination_03 ( ) ) [EOL] score = handle_illumination ( * illumination_04 ( ) ) [EOL] score = handle_illumination ( * illumination_05 ( ) ) [EOL] score = handle_illumination ( * illumination_06 ( ) ) [EOL] score = handle_illumination ( * illumination_07 ( ) ) [EOL] score = handle_illumination ( * illumination_08 ( ) ) [EOL] score = handle_illumination ( * illumination_09 ( ) ) [EOL] score = handle_illumination ( * illumination_10 ( ) ) [EOL] score = handle_illumination ( * illumination_11 ( ) ) [EOL] score = handle_illumination ( * illumination_12 ( ) ) [EOL] score = handle_illumination ( * illumination_13 ( ) ) [EOL] score = handle_illumination ( * illumination_14 ( ) ) [EOL] score = handle_illumination ( * illumination_15 ( ) ) [EOL] score = handle_illumination ( * illumination_16 ( ) ) [EOL] score = handle_illumination ( * illumination_17 ( ) ) [EOL] score = handle_illumination ( * illumination_18 ( ) ) [EOL] score = handle_illumination ( * illumination_19 ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0
	0
from typing import Any , List [EOL] import typing [EOL] import desir [EOL] from desir import partitioned_pitch_field_pitch_number_lists as ppfs [EOL] [EOL] [EOL] def illumination_07 ( ) : [EOL] [docstring] [EOL] [EOL] part = ppfs [ [number] ] [ [number] ] [EOL] part = list ( sorted ( part ) ) [EOL] [EOL] contour = [ ] [EOL] contour . append ( ( [number] , [ [number] , [number] ] ) ) [EOL] contour = desir . cycle_tokens_to_sieve ( * contour ) [EOL] [EOL] deletions = [ ] [EOL] deletions . append ( ( [number] , [ [number] , [number] ] ) ) [EOL] deletions . append ( ( [number] , [ [number] , [number] ] ) ) [EOL] deletions . append ( ( [number] , [ [number] , [number] ] ) ) [EOL] deletions = desir . cycle_tokens_to_sieve ( * deletions ) [EOL] [EOL] extrusions = [ ] [EOL] [EOL] cycle = [ ] [EOL] cycle . append ( ( [number] , [ [number] , [number] ] ) ) [EOL] cycle = desir . cycle_tokens_to_sieve ( * cycle ) [EOL] [EOL] def function ( x ) : [EOL] list ( desir . calligraphs . cycle_backward ( x , [number] ) ) [EOL] [EOL] extrusions . append ( desir . ExtrusionToken ( cycle , [number] , function ) ) [EOL] [EOL] cycle = [ ] [EOL] cycle . append ( ( [number] , [ [number] ] ) ) [EOL] cycle = desir . cycle_tokens_to_sieve ( * cycle ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] reading = desir . calligraphs . sacred_reading ( part , contour , deletions , * extrusions ) [EOL] number = [number] [EOL] [EOL] return reading , number [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import abjad [EOL] [EOL] import desir [EOL] from desir import partitioned_pitch_field_pitch_number_lists as ppfs [EOL] [EOL] [EOL] def illumination_04 ( ) : [EOL] part = ppfs [ [number] ] [ [number] ] [EOL] part = list ( sorted ( part ) ) [EOL] [EOL] contour = abjad . Pattern ( [number] , [number] ) | abjad . Pattern ( [number] , [number] ) [EOL] [EOL] deletions = [ ] [EOL] deletions . append ( ( [number] , [ [number] , [number] ] ) ) [EOL] deletions = desir . cycle_tokens_to_sieve ( * deletions ) [EOL] [EOL] extrusions = [ ] [EOL] [EOL] cycle = [ ] [EOL] cycle . append ( ( [number] , [ [number] , [number] , [number] , [number] ] ) ) [EOL] cycle = desir . cycle_tokens_to_sieve ( * cycle ) [EOL] [EOL] def function ( x ) : [EOL] return list ( desir . calligraphs . cycle_backward ( x , [number] ) ) [EOL] [EOL] extrusions . append ( desir . calligraphs . ExtrusionToken ( cycle , [number] , function ) ) [EOL] [EOL] cycle = [ ] [EOL] cycle . append ( ( [number] , [ [number] ] ) ) [EOL] cycle = desir . cycle_tokens_to_sieve ( * cycle ) [EOL] [EOL] def function ( x ) : [EOL] return list ( desir . calligraphs . cycle_backward ( x , [number] ) ) [EOL] [EOL] extrusions . append ( desir . ExtrusionToken ( cycle , [number] , function ) ) [EOL] [EOL] reading = desir . calligraphs . sacred_reading ( part , contour , deletions , * extrusions ) [EOL] number = [number] [EOL] [EOL] return reading , number [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] [EOL] duration = abjad . Duration ( [number] , [number] ) [EOL] [EOL] [EOL] def populate_notes ( score , structured_reading_pitch_numbers , annotate ) : [EOL] staff = score [ [number] ] [EOL] total_parts = len ( structured_reading_pitch_numbers ) [EOL] for sublist in structured_reading_pitch_numbers : [EOL] notes = [ ] [EOL] for x in sublist : [EOL] if isinstance ( x , list ) : [EOL] new_notes = abjad . make_notes ( x , [ duration ] ) [EOL] if annotate : [EOL] for x in new_notes : [EOL] x . note_head . color = [string] [EOL] notes . extend ( new_notes ) [EOL] else : [EOL] note = abjad . Note ( x , duration ) [EOL] notes . append ( note ) [EOL] if annotate : [EOL] [comment] [EOL] [comment] [EOL] pass [EOL] staff . extend ( notes ) [EOL] if annotate : [EOL] markup = abjad . Markup ( [string] % total_parts ) [EOL] staff . leaves [ [number] ] . markup . up . append ( markup ) [EOL] [comment] [EOL] return score [EOL] [EOL] [EOL] def create_illumination_score ( structured_reading_pitch_numbers , number , annotate = False ) : [EOL] name = str ( number ) [EOL] score = abjad . Score ( [ abjad . Staff ( ) ] ) [EOL] staff = score [ [number] ] [EOL] populate_notes ( score , structured_reading_pitch_numbers , annotate ) [EOL] schema = abjad . layout . LayoutSchema ( abjad . Duration ( [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , ) ) [EOL] abjad . layout . apply_layout_schema ( staff , schema , klass = abjad . Note ) [EOL] staff . remove_commands . add ( [string] ) [EOL] pnd = abjad . Duration ( [number] , [number] ) [EOL] score . spacing . proportional_notation_duration = pnd [EOL] score . spacing . uniform_stretching = True [EOL] score . spacing . strict_note_spacing = True [EOL] score . stem . transparent = True [EOL] score . beam . auto_beaming = False [EOL] score . meter . transparent = True [EOL] score . text_script . staff_padding = [number] [EOL] score . text_script . Y_extent = ( [number] , [number] ) [EOL] score . bar_line . stencil = False [EOL] score . meter . stencil = False [EOL] lilypond_file = abjad . LilyPondFile . new ( score ) [EOL] configure_lilypond_file ( lilypond_file ) [EOL] apply_footer ( lilypond_file , name ) [EOL] return score [EOL] [EOL] [EOL] def configure_lilypond_file ( lilypond_file ) : [EOL] lilypond_file . layout . indent = [number] [EOL] lilypond_file . layout . ragged_right = True [EOL] lilypond_file . paper . top_margin = [number] [EOL] lilypond_file . paper . left_margin = [number] [EOL] lilypond_file . paper . print_page_number = False [EOL] lilypond_file . paper . minimal_page_breaking = True [EOL] lilypond_file . paper . ragged_last_bottom = True [EOL] lilypond_file . paper . ragged_bottom = True [EOL] lilypond_file . paper . between_system_padding = [number] [EOL] lilypond_file . global_staff_size = [number] [EOL] lilypond_file . default_paper_size = [string] , [string] [EOL] return lilypond_file [EOL] [EOL] [EOL] def apply_footer ( lilypond_file , name ) : [EOL] footer_string = [string] % name [EOL] footer_markup = abjad . Markup ( [string] % footer_string ) [EOL] lilypond_file . paper . oddFooterMarkup = footer_markup [EOL] lilypond_file . paper . evenFooterMarkup = footer_markup [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] [EOL] import desir [EOL] [EOL] [EOL] def handle_illumination ( illumination , number ) : [EOL] score = desir . create_illumination_score ( illumination , number , True ) [EOL] desir . print_stats ( score ) [EOL] abjad . show ( score . lilypond_file ) [EOL] desir . save_illumination_and_pdf ( illumination , number ) [EOL] return score [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[docstring] [EOL]	0 0
[comment] [EOL] [EOL] [EOL] from typing import Any , List [EOL] import io [EOL] import typing [EOL] def add_current_bar_numbers ( ) : [EOL] input_file_name = [string] [EOL] current_bar_number = [number] [EOL] edited_lines = [ ] [EOL] for line in open ( input_file_name , [string] ) . readlines ( ) : [EOL] if [string] in line : [EOL] new_line = [string] % current_bar_number [EOL] edited_lines . append ( new_line ) [EOL] current_bar_number += [number] [EOL] edited_lines . append ( line ) [EOL] out = open ( [string] , [string] ) [EOL] out . write ( [string] . join ( edited_lines ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] add_current_bar_numbers ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any , List [EOL] import io [EOL] import pathlib [EOL] import typing [EOL] import os [EOL] import pathlib [EOL] [EOL] [EOL] def main ( input_file_name ) : [EOL] edited_lines = [ ] [EOL] file_pointer = open ( input_file_name , [string] ) [EOL] for line in file_pointer . readlines ( ) : [EOL] if line . startswith ( [string] ) and [string] in line and [string] in line : [EOL] line = line [ [number] : ] [EOL] edited_lines . append ( line ) [EOL] file_pointer . close ( ) [EOL] out = open ( input_file_name , [string] ) [EOL] out . write ( [string] . join ( edited_lines ) ) [EOL] print ( [string] % input_file_name ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] os . system ( [string] ) [EOL] DESIR = os . environ [ [string] ] [EOL] ly_directory = pathlib . Path ( DESIR , [string] ) [EOL] for instrument_name in ( [string] , [string] , [string] , [string] ) : [EOL] file_name = [string] % ( ly_directory , instrument_name , ) [EOL] main ( file_name ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $builtins.str$ 0 0
[comment] [EOL] [EOL] [EOL] from typing import Any , List [EOL] import io [EOL] import typing [EOL] def add_hairpins ( ) : [EOL] input_file_name = [string] [EOL] slur_count = [number] [EOL] edited_lines = [ ] [EOL] for line in open ( input_file_name , [string] ) . readlines ( ) : [EOL] if [string] in line : [EOL] if slur_count : [EOL] line = line . replace ( [string] , [string] ) [EOL] else : [EOL] line = line . replace ( [string] , [string] ) [EOL] slur_count += [number] [EOL] edited_lines . append ( line ) [EOL] out = open ( [string] , [string] ) [EOL] out . write ( [string] . join ( edited_lines ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] add_hairpins ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] from typing import Any , List [EOL] import io [EOL] import typing [EOL] def add_hairpins ( ) : [EOL] input_file_name = [string] [EOL] slur_count = [number] [EOL] edited_lines = [ ] [EOL] for line in open ( input_file_name , [string] ) . readlines ( ) : [EOL] if line . endswith ( [string] ) : [EOL] line = line . replace ( [string] , [string] ) [EOL] elif line . endswith ( [string] ) : [EOL] if slur_count % [number] : [EOL] line = line . replace ( [string] , [string] ) [EOL] else : [EOL] line = line . replace ( [string] , [string] ) [EOL] slur_count += [number] [EOL] edited_lines . append ( line ) [EOL] out = open ( [string] , [string] ) [EOL] out . write ( [string] . join ( edited_lines ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] add_hairpins ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] from typing import Any , List [EOL] import io [EOL] import typing [EOL] def set_y_offsets ( ) : [EOL] input_file_name = [string] [EOL] y_offset_lines = [number] [EOL] edited_lines = [ ] [EOL] for line in open ( input_file_name , [string] ) . readlines ( ) : [EOL] if [string] in line : [EOL] y_offset = [number] * ( y_offset_lines % [number] ) + [number] [EOL] line = [string] % y_offset [EOL] y_offset_lines += [number] [EOL] edited_lines . append ( line ) [EOL] out = open ( [string] , [string] ) [EOL] out . write ( [string] . join ( edited_lines ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] set_y_offsets ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] from typing import Any , List [EOL] import io [EOL] import typing [EOL] def main ( ) : [EOL] input_file_name = [string] [EOL] last_hairpin_encountered = None [EOL] edited_lines = [ ] [EOL] for line in open ( input_file_name , [string] ) . readlines ( ) : [EOL] if [string] in line : [EOL] last_hairpin_encountered = [string] [EOL] elif [string] in line : [EOL] last_hairpin_encountered = [string] [EOL] [EOL] if last_hairpin_encountered == [string] : [EOL] if [string] in line : [EOL] line = line . replace ( [string] , [string] ) [EOL] elif last_hairpin_encountered == [string] : [EOL] if [string] in line : [EOL] line = line . replace ( [string] , [string] ) [EOL] [EOL] edited_lines . append ( line ) [EOL] out = open ( [string] , [string] ) [EOL] out . write ( [string] . join ( edited_lines ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] from typing import Any , List [EOL] import io [EOL] import typing [EOL] def remove_text_spanners ( ) : [EOL] input_file_name = [string] [EOL] [comment] [EOL] edited_lines = [ ] [EOL] for line in open ( input_file_name , [string] ) . readlines ( ) : [EOL] if [string] in line : [EOL] pass [EOL] else : [EOL] line = line . replace ( [string] , [string] ) [EOL] line = line . replace ( [string] , [string] ) [EOL] edited_lines . append ( line ) [EOL] out = open ( [string] , [string] ) [EOL] out . write ( [string] . join ( edited_lines ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] remove_text_spanners ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] from typing import Any , List [EOL] import io [EOL] import typing [EOL] def main ( ) : [EOL] input_file_name = [string] [EOL] edited_lines = [ ] [EOL] for line in open ( input_file_name , [string] ) . readlines ( ) : [EOL] edited_lines . append ( line ) [EOL] if [string] in line : [EOL] new_line = [string] [EOL] edited_lines . append ( new_line ) [EOL] out = open ( [string] , [string] ) [EOL] out . write ( [string] . join ( edited_lines ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] import quicktions [EOL] [EOL] [EOL] def add_shuddering_voices ( score ) : [EOL] print ( [string] ) [EOL] for instrument_staff in score . instrument_staves : [EOL] duration = instrument_staff . duration . prolated [EOL] assert duration == quicktions . Fraction ( [number] * [number] , [number] ) [EOL] skips = [number] * abjad . Skip ( ( [number] , [number] ) ) [EOL] shuddering_voice = abjad . Voice ( skips ) [EOL] name = [string] % instrument_staff . name [EOL] shuddering_voice . name = name [EOL] configure_shuddering_voice ( shuddering_voice ) [EOL] instrument_staff . append ( shuddering_voice ) [EOL] instrument_staff . parallel = True [EOL] assert instrument_staff . duration . prolated == quicktions . Fraction ( [number] , [number] ) [EOL] assert score . duration . prolated == quicktions . Fraction ( [number] , [number] ) [EOL] [EOL] [EOL] def configure_shuddering_voice ( shuddering_voice ) : [EOL] shuddering_voice . stem . direction = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import baca [EOL] [EOL] import desir [EOL] [EOL] [EOL] def cast_top_level_prolation_pairs ( top_level_prolation_pairs ) : [EOL] tokens = desir . cast_tokens ( ) [EOL] pairs = top_level_prolation_pairs [ : ] [EOL] for instrument_indices , weights in tokens : [EOL] instrument_pair_lists = [ ] [EOL] for instrument_index in instrument_indices : [EOL] instrument_pair_list = pairs [ instrument_index ] [EOL] instrument_eighths = [ pair [ [number] ] for pair in instrument_pair_list ] [EOL] parts = instrument_eighths . split_by_weights ( weights , cyclic = True , overhang = True ) [EOL] lengths = [ len ( part ) for part in parts ] [EOL] instrument_pair_list = baca . sequence ( instrument_pair_list ) [EOL] instrument_pair_list = instrument_pair_list . partition_by_counts ( lengths ) [EOL] instrument_pair_lists . append ( instrument_pair_list ) [EOL] rebuilt_pair_lists = [ ] [EOL] for i , parts in enumerate ( zip ( * instrument_pair_lists ) ) : [EOL] [comment] [EOL] if i % [number] == [number] : [EOL] rebuilt_pair_lists . append ( ( parts [ [number] ] , ) * len ( parts ) ) [EOL] else : [EOL] rebuilt_pair_lists . append ( parts ) [EOL] rebuilt_pair_lists = zip ( * rebuilt_pair_lists ) [EOL] rebuilt_pair_lists = [ baca . sequence ( x ) . flatten ( depth = [number] ) for x in rebuilt_pair_lists ] [EOL] rebuilt_pair_lists = [ list ( x ) for x in rebuilt_pair_lists ] [EOL] for instrument_index , rebuilt_pair_list in zip ( instrument_indices , rebuilt_pair_lists ) : [EOL] pairs [ instrument_index ] = rebuilt_pair_list [EOL] return pairs [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict , Tuple , List [EOL] import typing [EOL] import abjad [EOL] import baca [EOL] import quicktions [EOL] [EOL] [EOL] def add_slurs ( score ) : [EOL] print ( [string] ) [EOL] for instrument_index , voice in enumerate ( score . instrument_voices ) : [EOL] [comment] [EOL] for tuplet_index , tuplet in enumerate ( abjad . iterate . naive_forward_in ( voice , abjad . Tuplet ) ) : [EOL] add_slurs_to_tuplet ( instrument_index , tuplet_index , tuplet ) [EOL] [EOL] [EOL] def add_slurs_to_leaf_duration_group ( index_tuple , leaf_group ) : [EOL] leaf_group = baca . sequence ( leaf_group ) [EOL] instrument_index , tuplet_index , leaf_group_index = index_tuple [EOL] small = ( quicktions . Fraction ( [number] , [number] ) , quicktions . Fraction ( [number] , [number] ) , quicktions . Fraction ( [number] , [number] ) , ) [EOL] medium = ( quicktions . Fraction ( [number] , [number] ) , quicktions . Fraction ( [number] , [number] ) , quicktions . Fraction ( [number] , [number] ) , ) [EOL] large = ( quicktions . Fraction ( [number] , [number] ) , quicktions . Fraction ( [number] , [number] ) , quicktions . Fraction ( [number] , [number] ) , quicktions . Fraction ( [number] , [number] ) , ) [EOL] first_leaf_duration = leaf_group [ [number] ] . duration . written [EOL] [comment] [EOL] [comment] [EOL] if first_leaf_duration in large or quicktions . Fraction ( [number] , [number] ) < first_leaf_duration : [EOL] for leaf in leaf_group : [EOL] leaf . articulations . extend ( [ [string] , [string] ] ) [EOL] [comment] [EOL] elif first_leaf_duration in medium : [EOL] for pair in leaf_group . partition_by_counts ( [ [number] ] , cyclic = True , overhang = True ) : [EOL] abjad . slur ( pair ) [EOL] [comment] [EOL] elif first_leaf_duration in small : [EOL] lengths = get_lengths ( index_tuple , len ( leaf_group ) ) [EOL] [comment] [EOL] for subgroup in leaf_group . partition_by_counts ( lengths , cyclic = False , overhang = True ) : [EOL] abjad . slur ( subgroup ) [EOL] else : [EOL] raise ValueError ( f" [string] { first_leaf_duration !r} [string] " ) [EOL] [EOL] [EOL] def add_slurs_to_tuplet ( instrument_index , tuplet_index , tuplet ) : [EOL] [comment] [EOL] tuplet_leaves = list ( abjad . iterate . leaves_forward_in ( tuplet ) ) [EOL] leaf_groups = abjad . Duration . group_by_duration_preprolated ( tuplet_leaves ) [EOL] for leaf_group_index , leaf_group in enumerate ( leaf_groups ) : [EOL] index_tuple = ( instrument_index , tuplet_index , leaf_group_index ) [EOL] add_slurs_to_leaf_duration_group ( index_tuple , leaf_group ) [EOL] return tuplet [EOL] [EOL] [EOL] def add_slurs_to_voice ( instrument_index , voice ) : [EOL] slur_durations = make_slur_durations ( ) [EOL] voice_leaves = get_voice_leaves ( instrument_index , voice ) [EOL] leaf_groups = abjad . Duration . group_prolated ( voice_leaves , slur_durations , fill = [string] , cyclic = True , overhang = True , ) [EOL] [comment] [EOL] for leaf_group in leaf_groups : [EOL] if [number] < len ( leaf_group ) : [EOL] abjad . slur ( leaf_group ) [EOL] [EOL] [EOL] def get_voice_leaves ( instrument_index , voice ) : [EOL] instrument_index_to_stop_slur_ordinal = { [number] : [number] , [number] : [number] , [number] : [number] , [number] : [number] } [EOL] stop_slur_ordinal = instrument_index_to_stop_slur_ordinal [ instrument_index ] [EOL] voice_leaves = [ ] [EOL] for leaf in abjad . iterate . leaves_forward_in ( voice ) : [EOL] fleur_ordinal = getattr ( leaf . history , [string] , None ) [EOL] if fleur_ordinal is not None : [EOL] if fleur_ordinal == stop_slur_ordinal : [EOL] return voice_leaves [EOL] voice_leaves . append ( leaf ) [EOL] [EOL] [EOL] def get_lengths ( index_tuple , total_leaves ) : [EOL] instrument_index , tuplet_index , leaf_group_index = index_tuple [EOL] start_index = [number] * instrument_index + [number] * tuplet_index + leaf_group_index [EOL] slur_lengths = make_slur_lengths ( ) [EOL] slur_lengths = abjad . CyclicTuple ( slur_lengths ) [EOL] lengths = slur_lengths [ start_index : start_index + [number] ] [EOL] lengths = baca . sequence ( lengths ) [EOL] lengths = lengths . repeat_to_weight ( total_leaves , remainder = [string] ) [EOL] if lengths [ - [number] ] == [number] : [EOL] lengths = lengths [ : - [number] ] + [ sum ( lengths [ - [number] : ] ) ] [EOL] return lengths [EOL] [EOL] [EOL] def make_slur_durations ( ) : [EOL] slur_durations = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] slur_durations = [ abjad . Duration ( n , [number] ) for n in slur_durations ] [EOL] return slur_durations [EOL] [EOL] [EOL] def make_slur_lengths ( ) : [EOL] slur_lengths = [ [ [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] ] [EOL] slur_lengths = baca . sequence ( slur_lengths ) [EOL] slur_lengths = slur_lengths . helianthate ( [number] , [number] ) [EOL] assert len ( slur_lengths ) == [number] [EOL] return slur_lengths [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import baca [EOL] [EOL] from desir . etc . legatissimo . py . make_numerators import make_numerators [EOL] [EOL] from . cast_top_level_eighths import cast_top_level_eighths [EOL] [EOL] [EOL] def top_level_eighths ( ) : [EOL] [docstring] [EOL] [EOL] first_numerators , second_numerators = make_numerators ( ) [EOL] [EOL] eighths = first_numerators [EOL] assert eighths == [ [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , ] [EOL] [EOL] eighths = baca . sequence ( eighths ) . permute ( [ [number] , [number] , [number] , [number] , [number] , [number] ] ) [EOL] eighths = baca . sequence ( eighths ) . flatten ( ) [EOL] eighths = list ( eighths ) [EOL] eighths += second_numerators [EOL] [EOL] assert eighths == [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ] [EOL] assert sum ( eighths ) == [number] [EOL] assert len ( eighths ) == [number] [EOL] [EOL] eighths = baca . sequence ( eighths ) . partition_by_ratio_of_weights ( [ [number] , [number] , [number] , [number] , [number] ] ) [EOL] [EOL] top_level_eighths = [ ] [EOL] for n in range ( [number] ) : [EOL] top_level = baca . sequence ( eighths ) . rotate ( - n ) [EOL] top_level = baca . sequence ( top_level ) . flatten ( ) [EOL] assert sum ( top_level ) == [number] [EOL] assert len ( top_level ) == [number] [EOL] top_level = merge_top_level ( top_level ) [EOL] top_level = baca . sequence ( top_level ) . flatten ( ) [EOL] assert sum ( top_level ) == [number] [EOL] assert len ( top_level ) == [number] [EOL] top_level_eighths . append ( top_level ) [EOL] [EOL] top_level_eighths = cast_top_level_eighths ( top_level_eighths ) [EOL] [EOL] return top_level_eighths [EOL] [EOL] [EOL] def merge_top_level ( top_level_eighths ) : [EOL] merged_top_level = [ ] [EOL] ratio = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] parts = baca . sequence ( top_level_eighths ) . partition_by_ratio_of_weigths ( ratio ) [EOL] for part in parts : [EOL] part = part [ : - [number] ] + [ sum ( part [ - [number] : ] ) ] [EOL] merged_top_level . append ( part ) [EOL] return merged_top_level [EOL] [EOL] [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict , Optional [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def clef_cello ( score ) : [EOL] cello_music_voice = score [ [string] ] [EOL] print ( [string] ) [EOL] fleur_ordinal_to_clef_string = { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } [EOL] for leaf in abjad . iterate . leaves_forward_in ( cello_music_voice ) : [EOL] fleur_ordinal = getattr ( leaf . history , [string] , None ) [EOL] if fleur_ordinal is not None : [EOL] clef_string = fleur_ordinal_to_clef_string . get ( fleur_ordinal , None ) [EOL] if clef_string is not None : [EOL] leaf . clef . forced = abjad . Clef ( clef_string ) [EOL] [comment] [EOL] else : [EOL] [comment] [EOL] pass [EOL] return cello_music_voice [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def set_first_measure_number ( score , first_measure_number ) : [EOL] breaks_voice = score [ [string] ] [EOL] first_leaf = breaks_voice [ : ] . get ( abjad . Leaf , [number] ) [EOL] first_leaf . bar_number . current = first_measure_number [EOL] abjad . override ( first_leaf ) . score . bar_number . current = first_measure_number [EOL] return score [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] import quicktions [EOL] [EOL] from . section_timings import eighth_notes_per_tempo_region [EOL] [EOL] [EOL] def add_stub_eighths ( score ) : [EOL] for staff in abjad . iterate . naive_forward_in ( score , abjad . Staff ) : [EOL] total_eighths = sum ( eighth_notes_per_tempo_region ( ) ) [EOL] notes = abjad . make_notes ( [ [number] ] * total_eighths , [ quicktions . Fraction ( [number] , [number] ) ] ) [EOL] staff . extend ( notes ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def add_end_of_score_markup ( score ) : [EOL] end_of_score_markup = [string] [EOL] [EOL] cello_music_voice = score [ [string] ] [EOL] last_cello_leaf = abjad . get . leaf ( cello_music_voice [ : ] , - [number] ) [EOL] markup = abjad . Markup ( end_of_score_markup ) [EOL] last_cello_leaf . markup . down . append ( markup ) [EOL] last_cello_leaf . text_script . extra_offset = ( [number] , [number] ) [EOL] return score [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import abjad [EOL] import baca [EOL] [EOL] from desir . etc . legatissimo . py . make_numerators import make_numerators [EOL] [EOL] [EOL] def harmonic_rhythms ( ) : [EOL] [comment] [EOL] first_numerators , second_numerators = make_numerators ( ) [EOL] assert second_numerators == [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ] [EOL] assert sum ( second_numerators ) == [number] [EOL] assert len ( second_numerators ) == [number] [EOL] second_numerators *= [number] [EOL] assert sum ( second_numerators ) == [number] [EOL] assert len ( second_numerators ) == [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] first = [ [number] ] * [number] + [ [number] ] * [number] + [ [number] ] * [number] + [ [number] ] * [number] [EOL] second = [ [number] ] * [number] + [ [number] ] * [number] + [ [number] ] * [number] + [ [number] ] * [number] [EOL] core_partition_lengths = first + second [EOL] assert sum ( core_partition_lengths ) == [number] [EOL] assert len ( core_partition_lengths ) == [number] [EOL] [EOL] harmonic_rhythms = [ ] [EOL] for n in range ( [number] ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] instrument_numerators = baca . sequence ( second_numerators ) . rotate ( - n ) [EOL] partition = baca . sequence ( instrument_numerators ) . partition_by_lengths ( core_partition_lengths , cyclic = False , overhang = False ) [EOL] harmonic_rhythm = [ sum ( part ) for part in partition ] [EOL] assert sum ( harmonic_rhythm ) == [number] [EOL] assert len ( harmonic_rhythm ) == [number] [EOL] harmonic_rhythms . append ( harmonic_rhythm ) [EOL] [EOL] return harmonic_rhythms [EOL] [EOL] [EOL] def harmonic_changes ( harmonic_rhythms ) : [EOL] harmonic_changes = [ ] [EOL] for harmonic_rhythm in harmonic_rhythms : [EOL] harmonic_change = abjad . mathx . cumulative_sums ( harmonic_rhythm ) [EOL] harmonic_changes . append ( harmonic_change ) [EOL] return harmonic_changes [EOL] [EOL] [EOL] def depict_harmonic_changes ( harmonic_changes ) : [EOL] report = [string] [EOL] for i in range ( [number] ) : [EOL] vector = [ ] [EOL] for hc in harmonic_changes : [EOL] if i in hc : [EOL] vector . append ( str ( i ) . rjust ( [number] ) ) [EOL] else : [EOL] vector . append ( [string] . rjust ( [number] ) ) [EOL] report += [string] . join ( vector ) + [string] [EOL] open ( [string] , [string] ) . write ( report ) [EOL] return report [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Tuple , List [EOL] import typing [EOL] from . allowable_addenda import allowable_addenda [EOL] from . cast_top_level_prolation_pairs import cast_top_level_prolation_pairs [EOL] from . top_level_prolation_mask import top_level_prolation_mask [EOL] [EOL] [EOL] def top_level_prolation_pairs ( top_level_eighths ) : [EOL] top_level_prolation_pairs = [ ] [EOL] mask = top_level_prolation_mask ( ) [EOL] len_mask = len ( mask ) [EOL] for top_level_eighth_list in top_level_eighths : [EOL] top_level_prolation_pair_list = [ ] [EOL] for i , eighth in enumerate ( top_level_eighth_list ) : [EOL] mask_indicator = mask [ i % len_mask ] [EOL] if mask_indicator == [number] : [EOL] denominator = eighth [EOL] else : [EOL] assert mask_indicator in ( - [number] , [number] ) [EOL] addenda = allowable_addenda ( eighth ) [EOL] addendum = addenda [ i % len ( addenda ) ] [EOL] addendum *= mask_indicator [EOL] denominator = eighth + addendum [EOL] prolation_pair = ( eighth , denominator ) [EOL] top_level_prolation_pair_list . append ( prolation_pair ) [EOL] top_level_prolation_pairs . append ( top_level_prolation_pair_list ) [EOL] top_level_prolation_pairs = cast_top_level_prolation_pairs ( top_level_prolation_pairs ) [EOL] return top_level_prolation_pairs [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] [EOL] from . get_next_file_number import get_next_file_number , output_directory [EOL] [EOL] [EOL] def conditionally_save_pdf ( ) : [EOL] save = input ( [string] ) [EOL] if save . lower ( ) == [string] : [EOL] next_file_number = get_next_file_number ( ) [EOL] next_file_name = [string] % str ( next_file_number ) . zfill ( [number] ) [EOL] next_full_file_name = output_directory / next_file_name [EOL] abjad . persist ( next_full_file_name ) . as_pdf ( ) [EOL] print ( [string] % next_file_name ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import abjad [EOL] import quicktions [EOL] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def add_shuddering_instrument ( score , instrument_index ) : [EOL] print ( [string] % instrument_index ) [EOL] instrument_name = instrument_index_to_instrument_name ( instrument_index ) [EOL] voice = score [ [string] % instrument_name ] [EOL] pitch = instrument_index_to_shuddering_pitch ( instrument_index ) [EOL] measures = [ [number] , [number] , [number] , [number] ] [EOL] start_measure = [number] [EOL] offset = instrument_index_to_eighth_offset ( instrument_index ) [EOL] eighths = [ [number] * ( x - start_measure ) + offset for x in measures ] [EOL] shudder_duration = quicktions . Fraction ( [number] , [number] ) [EOL] shudder_note = abjad . Note ( pitch , shudder_duration ) [EOL] for eighth in reversed ( eighths ) : [EOL] print ( eighth ) [EOL] start_index = eighth [EOL] stop_index = eighth + [number] [EOL] voice [ start_index : stop_index ] = shudder_note * [number] [EOL] trill = abjad . Trill ( voice [ start_index : start_index + [number] ] ) [EOL] if instrument_index in ( [number] , [number] ) : [EOL] markup = abjad . Markup ( [string] ) [EOL] trill [ [number] ] . markup . up . append ( markup ) [EOL] else : [EOL] trill [ [number] ] . add_artificial_harmonic ( ) [EOL] markup = abjad . Markup ( [string] ) [EOL] trill [ [number] ] . markup . up . append ( markup ) [EOL] [EOL] [EOL] def instrument_index_to_instrument_name ( instrument_index ) : [EOL] if instrument_index == [number] : [EOL] return [string] [EOL] elif instrument_index == [number] : [EOL] return [string] [EOL] elif instrument_index == [number] : [EOL] return [string] [EOL] elif instrument_index == [number] : [EOL] return [string] [EOL] else : [EOL] raise ValueError [EOL] [EOL] [EOL] def instrument_index_to_shuddering_pitch ( instrument_index ) : [EOL] if instrument_index == [number] : [EOL] return - [number] [EOL] elif instrument_index == [number] : [EOL] return - [number] [EOL] elif instrument_index == [number] : [EOL] return [number] [EOL] else : [EOL] raise ValueError [EOL] [EOL] [EOL] def instrument_index_to_eighth_offset ( instrument_index ) : [EOL] if instrument_index == [number] : [EOL] return [number] [EOL] elif instrument_index == [number] : [EOL] return [number] [EOL] elif instrument_index == [number] : [EOL] return [number] [EOL] else : [EOL] raise ValueError [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import baca [EOL] [EOL] from desir import pitch_field_pitch_number_lists [EOL] [EOL] [EOL] def get_shuddering_pitches ( ) : [EOL] pitch_field = pitch_field_pitch_number_lists [ [number] - [number] ] [EOL] pitches = baca . sequence ( pitch_field ) . retain ( [ [number] , [number] , [number] ] ) [EOL] return pitches [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List [EOL] import typing [EOL] [docstring] [EOL] [EOL] [EOL] def cast_tokens ( ) : [EOL] cast_tokens = [ ( [ [number] , [number] , [number] , [number] ] , ( [number] , [number] , [number] ) ) , ( [ [number] , [number] , [number] , [number] ] , ( [number] , [number] , [number] ) ) , ( [ [number] , [number] , [number] , [number] ] , ( [number] , [number] , [number] ) ) , ( [ [number] , [number] , [number] ] , ( [number] , [number] , [number] ) ) , ( [ [number] , [number] , [number] ] , ( [number] , [number] , [number] ) ) , ( [ [number] , [number] , [number] ] , ( [number] , [number] , [number] ) ) , ( [ [number] , [number] , [number] ] , ( [number] , [number] , [number] ) ) , ( [ [number] , [number] ] , ( [number] , [number] , [number] ) ) , ( [ [number] , [number] ] , ( [number] , [number] , [number] ) ) , ( [ [number] , [number] ] , ( [number] , [number] , [number] ) ) , ( [ [number] , [number] ] , ( [number] , [number] , [number] ) ) , ( [ [number] , [number] ] , ( [number] , [number] , [number] ) ) , ] [EOL] return cast_tokens [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def label_fleur_ordinals ( score ) : [EOL] for leaf in abjad . iterate . leaves_forward_in ( score ) : [EOL] fleur_ordinal = getattr ( leaf . history , [string] , None ) [EOL] if fleur_ordinal is not None : [EOL] markup = abjad . Markup ( [string] % fleur_ordinal ) [EOL] leaf . markup . down . append ( markup ) [EOL] return score [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] import baca [EOL] [EOL] from desir . etc . fleurs import get_fleur_by_number [EOL] [EOL] [EOL] def add_fleur_to_leaf_run ( leaf_run , fleur_number , offset , fleur_ordinal ) : [EOL] fleur = get_fleur_by_number ( fleur_number ) [EOL] flattened_fleur = baca . sequence ( fleur ) . flatten ( ) [EOL] period = len ( flattened_fleur ) [EOL] offset = offset % period [EOL] for leaf_index , leaf in enumerate ( leaf_run ) : [EOL] cyclic_index = leaf_index % period [EOL] pitch_number = flattened_fleur [ cyclic_index ] [EOL] leaf . pitch = abjad . NamedPitch ( pitch_number ) [EOL] leaf . history . fleur_number = fleur_number [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] leaf_run [ [number] ] . history . fleur_ordinal = fleur_ordinal [EOL] [EOL] return leaf_run [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Tuple , List [EOL] import typing [EOL] import abjad [EOL] import quicktions [EOL] [EOL] [EOL] def add_shuddering_conclusion ( score ) : [EOL] print ( [string] ) [EOL] assert score . duration . prolated == quicktions . Fraction ( [number] , [number] ) [EOL] conclusion_start_measure = [number] - [number] [EOL] conclusion_start_eighth = [number] * conclusion_start_measure [EOL] conclusion_stop_eighth = conclusion_start_eighth + [number] [EOL] [EOL] durations = [ ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ] [EOL] [EOL] flute = score [ [string] ] [EOL] flute_durations = durations [ : ] [EOL] notes = abjad . make_notes ( [ - [number] ] , flute_durations ) [EOL] start_eighth = conclusion_start_eighth + [number] [EOL] flute [ start_eighth : conclusion_stop_eighth ] = notes [EOL] trill = abjad . Trill ( notes ) [EOL] markup = abjad . Markup ( [string] ) [EOL] trill [ [number] ] . markup . up . append ( markup ) [EOL] [EOL] clarinet = score [ [string] ] [EOL] clarinet_durations = durations [ [number] : ] [EOL] notes = abjad . make_notes ( [ - [number] ] , clarinet_durations ) [EOL] start_eighth = conclusion_start_eighth + [number] [EOL] clarinet [ start_eighth : conclusion_stop_eighth ] = notes [EOL] trill = abjad . Trill ( notes ) [EOL] markup = abjad . Markup ( [string] ) [EOL] trill [ [number] ] . markup . up . append ( markup ) [EOL] [EOL] violin = score [ [string] ] [EOL] violin_durations = durations [ [number] : ] [EOL] notes = abjad . make_notes ( [ [number] ] , violin_durations ) [EOL] start_eighth = conclusion_start_eighth + [number] [EOL] violin [ start_eighth : conclusion_stop_eighth ] = notes [EOL] for note in notes : [EOL] note . add_artificial_harmonic ( ) [EOL] trill = abjad . Trill ( notes ) [EOL] markup = abjad . Markup ( [string] ) [EOL] trill [ [number] ] . markup . up . append ( markup ) [EOL] [EOL] cello = score [ [string] ] [EOL] cello_durations = [ ( x , [number] ) for x in ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ] [EOL] notes = abjad . make_notes ( [ [number] ] , cello_durations ) [EOL] start_eighth = conclusion_start_eighth + [number] [EOL] cello [ start_eighth : ] = notes [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] assert score . duration . prolated == quicktions . Fraction ( [number] , [number] ) [EOL] return score [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import abjad [EOL] import quicktions [EOL] [EOL] from . add_fleur_to_leaf_run import add_fleur_to_leaf_run [EOL] from . harmonic_rhythms import harmonic_rhythms [EOL] from . harmonies import harmonies [EOL] [EOL] [EOL] def add_fleurs ( score ) : [EOL] print ( [string] ) [EOL] hh = harmonies ( ) [EOL] hr = harmonic_rhythms ( ) [EOL] assert [ len ( x ) for x in hh ] == [ [number] , [number] , [number] , [number] ] [EOL] assert [ len ( x ) for x in hr ] == [ [number] , [number] , [number] , [number] ] [EOL] for staff_index , staff in enumerate ( score . instrument_staves ) : [EOL] hr_eighths = hr [ staff_index ] [EOL] hr_durations = [ quicktions . Fraction ( n , [number] ) for n in hr_eighths ] [EOL] staff_harmony = hh [ staff_index ] [EOL] staff_leaves = list ( abjad . iterate . leaves_forward_in ( staff ) ) [EOL] leaf_runs = abjad . Duration . group_prolated ( staff_leaves , hr_durations , fill = [string] , cyclic = False , overhang = True , ) [EOL] offset = [number] [EOL] fleur_ordinal = [number] [EOL] for leaf_run , fleur_number in zip ( leaf_runs , staff_harmony ) : [EOL] add_fleur_to_leaf_run ( leaf_run , fleur_number , offset , fleur_ordinal ) [EOL] offset += len ( leaf_run ) [EOL] fleur_ordinal += [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def apply_bisbigliando ( notes , pitch , instrument_index ) : [EOL] buffer = [ ] [EOL] for i , note in enumerate ( notes ) : [EOL] note . pitch = pitch [EOL] note . articulations = [ ] [EOL] if [number] < i : [EOL] note . accidental . stencil = False [EOL] note . note_head . transparent = True [EOL] note . note_head . no_ledgers = True [EOL] if instrument_index == [number] : [EOL] note . pitch = - [number] [EOL] elif instrument_index == [number] : [EOL] note . pitch = - [number] [EOL] elif instrument_index == [number] : [EOL] note . pitch = - [number] [EOL] buffer . append ( note ) [EOL] if instrument_index == [number] : [EOL] chord = buffer [ [number] ] . add_artificial_harmonic ( ) [EOL] buffer [ [number] ] = chord [EOL] text_spanner = buffer [ [number] ] . text_spanner . spanner [EOL] index = text_spanner . index ( buffer [ [number] ] ) [EOL] text_spanner . fracture ( index , direction = [string] ) [EOL] text_spanner = buffer [ - [number] ] . text_spanner . spanner [EOL] index = text_spanner . index ( buffer [ - [number] ] ) [EOL] text_spanner . fracture ( index , direction = [string] ) [EOL] for note in buffer : [EOL] note . text_spanner . spanner . clear ( ) [EOL] next_note = abjad . iterate ( buffer [ - [number] ] ) . by_logical_voice_from_component ( ) [EOL] next_note = list ( next_note ) [ [number] : [number] ] [EOL] trill = abjad . Trill ( buffer + next_note ) [EOL] if instrument_index == [number] : [EOL] trill . pitch = abjad . NamedPitch ( pitch ) [EOL] elif instrument_index == [number] : [EOL] trill . pitch = abjad . NamedPitch ( pitch ) [EOL] abjad . hairpin ( [string] , buffer ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def make_score ( ) : [EOL] flute_staff = abjad . Staff ( [ abjad . Voice ( ) ] ) [EOL] clarinet_staff = abjad . Staff ( [ abjad . Voice ( ) ] ) [EOL] violin_staff = abjad . Staff ( [ abjad . Voice ( ) ] ) [EOL] cello_staff = abjad . Staff ( [ abjad . Voice ( ) ] ) [EOL] [EOL] flute_staff . meter . forced = abjad . TimeSignature ( [number] , [number] ) [EOL] clarinet_staff . meter . forced = abjad . TimeSignature ( [number] , [number] ) [EOL] violin_staff . meter . forced = abjad . TimeSignature ( [number] , [number] ) [EOL] cello_staff . meter . forced = abjad . TimeSignature ( [number] , [number] ) [EOL] [EOL] flute_staff . name = [string] [EOL] flute_staff [ [number] ] . name = [string] [EOL] markup = [string] [EOL] flute_staff . instrument . name = abjad . Markup ( markup ) [EOL] markup = [string] [EOL] flute_staff . instrument . short_name = abjad . Markup ( markup ) [EOL] [EOL] clarinet_staff . name = [string] [EOL] clarinet_staff [ [number] ] . name = [string] [EOL] markup = [string] [EOL] clarinet_staff . instrument . name = abjad . Markup ( markup ) [EOL] markup = [string] [EOL] clarinet_staff . instrument . short_name = abjad . Markup ( markup ) [EOL] [comment] [EOL] [EOL] violin_staff . name = [string] [EOL] violin_staff [ [number] ] . name = [string] [EOL] markup = [string] [EOL] violin_staff . instrument . name = abjad . Markup ( markup ) [EOL] markup = [string] [EOL] violin_staff . instrument . short_name = abjad . Markup ( markup ) [EOL] [EOL] cello_staff . name = [string] [EOL] cello_staff [ [number] ] . name = [string] [EOL] markup = [string] [EOL] cello_staff . instrument . name = abjad . Markup ( markup ) [EOL] markup = [string] [EOL] cello_staff . instrument . short_name = abjad . Markup ( markup ) [EOL] cello_staff . bar_line . kind = [string] [EOL] [EOL] staves = [ flute_staff , clarinet_staff , violin_staff , cello_staff ] [EOL] staff_group = abjad . StaffGroup ( staves ) [EOL] staff_group . name = [string] [EOL] score = abjad . Score ( [ staff_group ] ) [EOL] instrument_staves = ( flute_staff , clarinet_staff , violin_staff , cello_staff , ) [EOL] score . instrument_staves = instrument_staves [EOL] instrument_voices = [ staff [ [number] ] for staff in instrument_staves ] [EOL] score . instrument_voices = instrument_voices [EOL] [comment] [EOL] [EOL] score . flute_staff = flute_staff [EOL] score . clarinet_staff = clarinet_staff [EOL] score . violin_staff = violin_staff [EOL] score . cello_staff = cello_staff [EOL] [EOL] return score [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def adjust_final_bar_line ( score ) : [EOL] breaks_voice = score [ [string] ] [EOL] last_measure = abjad . iterate . get_nth_measure ( breaks_voice , - [number] ) [EOL] last_measure . breaks . line = True [EOL] last_measure . bar_line . transparent = False [EOL] abjad . override ( last_measure ) . score . bar_line . transparent = True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import abjad [EOL] [EOL] [EOL] def color_problem_tuplets ( score ) : [EOL] for tuplet in abjad . iterate . naive_forward_in ( score , abjad . Tuplet ) : [EOL] if not tuplet . trivial : [EOL] if abjad . has_dotted_written_duration ( tuplet ) : [EOL] abjad . label ( tuplet ) . color_contents ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import abjad [EOL] [EOL] from . apply_bisbigliando import apply_bisbigliando [EOL] [EOL] [EOL] def add_shuddering_violin ( score ) : [EOL] [comment] [EOL] violin = score [ [string] ] [EOL] instrument_index = [number] [EOL] pitch = [number] [EOL] [EOL] notes = abjad . iterate ( violin [ [number] ] [ - [number] ] ) . by_logical_voice_from_component ( ) [EOL] notes = list ( notes ) [ : [number] ] [EOL] apply_bisbigliando ( notes , pitch , instrument_index ) [EOL] [EOL] notes = abjad . iterate ( violin [ [number] ] [ - [number] ] ) . by_logical_voice_from_component ( ) [EOL] notes = list ( notes ) [ : [number] ] [EOL] apply_bisbigliando ( notes , pitch , instrument_index ) [EOL] [EOL] notes = abjad . iterate ( violin [ [number] ] [ [number] ] ) . by_logical_voice_from_component ( ) [EOL] notes = list ( notes ) [ : [number] ] [EOL] apply_bisbigliando ( notes , pitch , instrument_index ) [EOL] [EOL] notes = abjad . iterate ( violin [ [number] ] [ [number] ] ) . by_logical_voice_from_component ( ) [EOL] notes = list ( notes ) [ : [number] ] [EOL] apply_bisbigliando ( notes , pitch , instrument_index ) [EOL] [EOL] notes = abjad . iterate ( violin [ [number] ] [ - [number] ] ) . by_logical_voice_from_component ( ) [EOL] notes = list ( notes ) [ : [number] ] [EOL] apply_bisbigliando ( notes , pitch , instrument_index ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import os [EOL] [EOL] output_directory = [string] [EOL] [EOL] [EOL] def get_next_file_number ( ) : [EOL] file_numbers = [ ] [EOL] for file_name in os . listdir ( output_directory ) : [EOL] if file_name . endswith ( [string] ) : [EOL] try : [EOL] file_numbers . append ( int ( file_name [ - [number] : - [number] ] ) ) [EOL] except ValueError : [EOL] pass [EOL] if file_numbers : [EOL] max_file_number = max ( file_numbers ) [EOL] else : [EOL] max_file_number = [number] [EOL] next_file_number = max_file_number + [number] [EOL] return next_file_number [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Tuple [EOL] import typing [EOL] import abjad [EOL] import quicktions [EOL] [EOL] [EOL] def set_scorewide_spacing ( score ) : [EOL] print ( [string] ) [EOL] reference_tempo = abjad . MetronomeMark ( quicktions . Fraction ( [number] , [number] ) , [number] ) [EOL] [comment] [EOL] reference_pnd = quicktions . Fraction ( [number] , [number] ) [EOL] reference_pair = ( reference_tempo , reference_pnd ) [EOL] reference_spacing = abjad . SpacingIndication ( * reference_pair ) [EOL] score . spacing . scorewide = reference_spacing [EOL] return score [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Literal , Tuple [EOL] import typing_extensions [EOL] import typing [EOL] import abjad [EOL] import quicktions [EOL] [EOL] [EOL] def apply_line_breaking ( score ) : [EOL] line_duration = quicktions . Fraction ( [number] , [number] ) [EOL] [EOL] [comment] [EOL] systems = ( [number] , [number] , [number] ) [EOL] alignment_distances = ( [number] , ) * [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] schema = abjad . layout . LayoutSchema ( line_duration , systems , alignment_distances ) [EOL] breaks_voice = score [ [string] ] [EOL] abjad . layout . apply_layout_schema ( breaks_voice , schema , klass = abjad . Skip ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import abjad [EOL] [EOL] [EOL] def apply_score_header ( score ) : [EOL] lilypond_file = score . lilypond_file [EOL] lilypond_file . paper . oddHeaderMarkup = abjad . Markup ( [string] ) [EOL] lilypond_file . paper . evenHeaderMarkup = abjad . Markup ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import abjad [EOL] [EOL] [EOL] def add_marcati ( score ) : [EOL] for voice in abjad . iterate . naive_forward_in ( score , abjad . Voice ) : [EOL] for i , tuplet in enumerate ( abjad . iterate . naive_forward_in ( voice , abjad . Tuplet ) ) : [EOL] if [number] <= i : [EOL] for note in abjad . iterate . naive_forward_in ( tuplet , abjad . Note ) : [EOL] note . articulations . extend ( [ [string] , [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Set , Any , List [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def transpose_bass_flute ( score ) : [EOL] print ( [string] ) [EOL] voices = [ ] [EOL] voices . append ( score [ [string] ] ) [EOL] mdi = abjad . MelodicDiatonicInterval ( [string] , [number] ) [EOL] already_transposed_trill_spanners = set ( [ ] ) [EOL] for voice in voices : [EOL] for note in abjad . iterate . naive_forward_in ( voice , abjad . Note ) : [EOL] pitch = note . pitch [EOL] new = abjad . Pitch . transpose_by_melodic_diatonic_interval ( pitch , mdi ) [EOL] note . pitch = new [EOL] try : [EOL] trill = note . trill . spanner [EOL] if trill not in already_transposed_trill_spanners : [EOL] pitch = trill . pitch [EOL] new = abjad . Pitch . transpose_by_melodic_diatonic_interval ( pitch , mdi ) [EOL] trill . pitch = new [EOL] already_transposed_trill_spanners . add ( trill ) [EOL] [comment] [EOL] except Exception : [EOL] pass [EOL] return score [EOL] [EOL] [EOL] def transpose_bass_clarinet ( score ) : [EOL] print ( [string] ) [EOL] voices = [ ] [EOL] voices . append ( score [ [string] ] ) [EOL] [comment] [EOL] mdi = abjad . MelodicDiatonicInterval ( [string] , [number] ) [EOL] already_transposed_trill_spanners = set ( [ ] ) [EOL] for voice in voices : [EOL] for note in abjad . iterate . naive_forward_in ( voice , abjad . Note ) : [EOL] pitch = note . pitch [EOL] new = abjad . Pitch . transpose_by_melodic_diatonic_interval ( pitch , mdi ) [EOL] note . pitch = new [EOL] try : [EOL] trill = note . trill . spanner [EOL] if trill not in already_transposed_trill_spanners : [EOL] pitch = trill . pitch [EOL] new = abjad . Pitch . transpose_by_melodic_diatonic_interval ( pitch , mdi ) [EOL] trill . pitch = new [EOL] already_transposed_trill_spanners . add ( trill ) [EOL] [comment] [EOL] except Exception : [EOL] pass [EOL] return score [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Iterator , Tuple , List [EOL] import typing [EOL] import itertools [EOL] [EOL] import abjad [EOL] [EOL] [EOL] def group_leaves_by_fleur_number ( argument ) : [EOL] result = [ ] [EOL] leaves = list ( abjad . iterate . leaves_forward_in ( argument ) ) [EOL] generator = itertools . groupby ( leaves , lambda x : getattr ( x . history , [string] , None ) ) [EOL] for fleur_number , leaf_grouper in generator : [EOL] leaf_grouper = tuple ( leaf_grouper ) [EOL] result . append ( leaf_grouper ) [EOL] return result [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import time [EOL] [EOL] from . add_dynamics import add_dynamics [EOL] from . add_fleurs import add_fleurs [EOL] from . add_shuddering import add_shuddering [EOL] from . add_slurs import add_slurs [EOL] from . add_top_level_tuplets import add_top_level_tuplets [EOL] from . apply_layout import apply_layout [EOL] from . configure_lilypond_file import configure_lilypond_file [EOL] from . configure_score import configure_score [EOL] from . make_by_hand_adjustments import make_by_hand_adjustments [EOL] from . make_score import make_score [EOL] [EOL] [comment] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] start_time = time . time ( ) [EOL] score = make_score ( ) [EOL] configure_score ( score ) [EOL] configure_lilypond_file ( score ) [EOL] add_top_level_tuplets ( score ) [EOL] add_fleurs ( score ) [EOL] add_slurs ( score ) [EOL] add_dynamics ( score ) [EOL] add_shuddering ( score ) [EOL] apply_layout ( score ) [EOL] make_by_hand_adjustments ( score ) [EOL] stop_time = time . time ( ) [EOL] print ( [string] % int ( stop_time - start_time ) ) [EOL] print ( [string] ) [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import baca [EOL] [EOL] from . harmonic_rhythms import harmonic_rhythms [EOL] [EOL] [EOL] def harmonies ( ) : [EOL] hr = harmonic_rhythms ( ) [EOL] assert [ len ( x ) for x in hr ] == [ [number] , [number] , [number] , [number] ] [EOL] [comment] [EOL] [EOL] cello_harmonies = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] assert len ( cello_harmonies ) == [number] [EOL] [EOL] violin_harmonies = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ] [EOL] assert len ( violin_harmonies ) == [number] [EOL] [EOL] flute_harmonies = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] assert len ( flute_harmonies ) == [number] [EOL] [EOL] clarinet_harmonies = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ] [EOL] assert len ( clarinet_harmonies ) == [number] [EOL] [EOL] harmonies = [ flute_harmonies , clarinet_harmonies , violin_harmonies , cello_harmonies , ] [EOL] harmonies = [ baca . sequence ( x ) . repeat_to_length ( [number] ) for x in harmonies ] [EOL] return harmonies [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def add_silver_staves ( score ) : [EOL] silver_staff_1 = abjad . Staff ( [ abjad . Voice ( ) ] ) [EOL] silver_staff_1 . name = [string] [EOL] silver_staff_1 . instrument . name = [string] [EOL] silver_staff_1 . instrument . short_name = [string] [EOL] silver_staff_1 . clef . forced = abjad . Clef ( [string] ) [EOL] silver_staff_1 . meter . forced = abjad . TimeSignature ( [number] , [number] ) [EOL] [EOL] silver_staff_2 = abjad . Staff ( [ abjad . Voice ( ) ] ) [EOL] silver_staff_2 . name = [string] [EOL] silver_staff_2 . instrument . name = [string] [EOL] silver_staff_2 . instrument . short_name = [string] [EOL] silver_staff_2 . clef . forced = abjad . Clef ( [string] ) [EOL] silver_staff_2 . meter . forced = abjad . TimeSignature ( [number] , [number] ) [EOL] [EOL] silver_staff_3 = abjad . Staff ( [ abjad . Voice ( ) ] ) [EOL] silver_staff_3 . name = [string] [EOL] silver_staff_3 . instrument . name = [string] [EOL] silver_staff_3 . instrument . short_name = [string] [EOL] silver_staff_3 . clef . forced = abjad . Clef ( [string] ) [EOL] silver_staff_3 . meter . forced = abjad . TimeSignature ( [number] , [number] ) [EOL] [EOL] silver_staff_4 = abjad . Staff ( [ abjad . Voice ( ) ] ) [EOL] silver_staff_4 . name = [string] [EOL] silver_staff_4 . instrument . name = [string] [EOL] silver_staff_4 . instrument . short_name = [string] [EOL] silver_staff_4 . clef . forced = abjad . Clef ( [string] ) [EOL] silver_staff_4 . meter . forced = abjad . TimeSignature ( [number] , [number] ) [EOL] [EOL] silver_staff_5 = abjad . Staff ( [ abjad . Voice ( ) ] ) [EOL] silver_staff_5 . name = [string] [EOL] silver_staff_5 . instrument . name = [string] [EOL] silver_staff_5 . instrument . short_name = [string] [EOL] silver_staff_5 . clef . forced = abjad . Clef ( [string] ) [EOL] silver_staff_5 . meter . forced = abjad . TimeSignature ( [number] , [number] ) [EOL] [EOL] staff_group = score [ [number] ] [EOL] [EOL] staff_group [ [number] : [number] ] = [ silver_staff_1 , silver_staff_2 ] [EOL] [EOL] staff_group . append ( silver_staff_3 ) [EOL] staff_group . append ( silver_staff_4 ) [EOL] staff_group . append ( silver_staff_5 ) [EOL] [EOL] return score [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def label_tuplet_indices ( score ) : [EOL] print ( [string] ) [EOL] for voice in abjad . iterate . naive_forward_in ( score , abjad . Voice ) : [EOL] for tuplet_index , tuplet in enumerate ( abjad . iterate . naive_forward_in ( voice , abjad . Tuplet ) ) : [EOL] first_leaf = abjad . get . leaf ( tuplet [ : ] , [number] ) [EOL] first_leaf . markup . up . append ( str ( tuplet_index ) ) [EOL] return score [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def eighth_notes_per_minute ( ) : [EOL] return ( [number] , [number] , [number] ) [EOL] [EOL] [EOL] def eighth_notes_per_tempo_region ( ) : [EOL] [docstring] [EOL] return ( [number] , [number] , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import baca [EOL] [EOL] [EOL] def top_level_prolation_mask ( ) : [EOL] mask = baca . sequence ( [ [ [number] , [number] , - [number] , - [number] ] , [ [number] , - [number] , - [number] ] , [ [number] , - [number] ] ] ) [EOL] mask = mask . helianthate ( [number] , [number] ) [EOL] assert mask == [ [number] , [number] , - [number] , - [number] , [number] , - [number] , - [number] , [number] , - [number] , [number] , - [number] , - [number] , - [number] , [number] , [number] , - [number] , - [number] , [number] , - [number] , [number] , - [number] , [number] , - [number] , [number] , [number] , - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] , - [number] , - [number] , [number] , - [number] , [number] , - [number] , [number] , [number] , - [number] , - [number] , - [number] , - [number] , [number] , - [number] , [number] , - [number] , [number] , - [number] , - [number] , - [number] , [number] , [number] , ] [EOL] assert len ( mask ) == [number] [EOL] assert sum ( mask ) == - [number] [EOL] return mask [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import time [EOL] [EOL] import abjad [EOL] [EOL] [EOL] def meiose_notes ( score ) : [EOL] print ( [string] ) [EOL] start_time = time . time ( ) [EOL] [comment] [EOL] [comment] [EOL] score . parentage . root . _update . _forbidUpdate ( ) [EOL] abjad . meiose ( score , [number] ) [EOL] score . parentage . root . _update . _allowUpdate ( ) [EOL] stop_time = time . time ( ) [EOL] print ( [string] % ( stop_time - start_time ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import abjad [EOL] [EOL] [EOL] def remove_line_break_engravers ( score ) : [EOL] for voice in abjad . iterate . naive_forward_in ( score , abjad . Voice ) : [EOL] voice . remove_commands . add ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def add_dashed_bar_lines ( score ) : [EOL] breaks_voice = score [ [string] ] [EOL] for measure in abjad . iterate . measures_forward_in ( breaks_voice ) : [EOL] last_leaf = abjad . inspecdt ( measure [ : ] ) . leaf ( - [number] ) [EOL] last_leaf . bar_line . kind = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def make_by_hand_adjustments ( score ) : [EOL] print ( [string] ) [EOL] clarinet = score [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] violin = score [ [string] ] [EOL] violin [ - [number] ] . leaves [ - [number] ] . text_spanner . spanner . pop ( ) [EOL] [EOL] flute = score [ [string] ] [EOL] [EOL] flute [ : ] . get ( abjad . Leaf , - [number] ) . dynamics . mark = [string] [EOL] clarinet [ : ] . get ( abjad . Leaf , - [number] ) . dynamics . mark = [string] [EOL] violin [ : ] . get ( abjad . Leaf , - [number] ) . dynamics . mark = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def add_shuddering_cello ( score ) : [EOL] [comment] [EOL] cello = score [ [string] ] [EOL] pitch = [number] [EOL] [EOL] for tuplet in cello [ [number] : ] : [EOL] notes = abjad . make_notes ( [ pitch ] , [ tuplet . duration . target ] ) [EOL] notes [ [number] ] . tie . spanner . clear ( ) [EOL] tuplet [ : ] = notes [EOL] for note in tuplet . leaves : [EOL] spanner = note . text_spanner . spanner [EOL] for x in reversed ( spanner ) : [EOL] spanner . pop ( ) [EOL] if x is note : [EOL] break [EOL] note . dynamics . mark = [string] [EOL] [EOL] first_shuddering_tuplet = cello [ [number] ] [EOL] directive = [string] [EOL] first_shuddering_tuplet . directives . before . append ( directive ) [EOL] directive = [string] [EOL] first_shuddering_tuplet . directives . before . append ( directive ) [EOL] directive = [string] [EOL] first_shuddering_tuplet . directives . before . append ( directive ) [EOL] directive = [string] [EOL] first_shuddering_tuplet . directives . before . append ( directive ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import abjad [EOL] import baca [EOL] [EOL] import desir [EOL] [EOL] [EOL] def depict_cast_schedule ( ) : [EOL] tokens = desir . cast_tokens ( ) [EOL] start_stops = [ ] [EOL] for token in tokens : [EOL] start , stop = print_cast_line ( token ) [EOL] start_stops . append ( ( start , stop ) ) [EOL] start_stops . sort ( ) [EOL] print ( start_stops ) [EOL] [EOL] [EOL] def print_cast_line ( cast_token ) : [EOL] instrument_indices , ( left , capture , right ) = cast_token [EOL] if not sum ( [ left , capture , right ] ) == [number] : [EOL] raise ValueError ( [string] ) [EOL] eighths = [ left , capture , right ] [EOL] eighths = baca . sequence ( eighths ) . repeat_to_weight ( [number] ) [EOL] eighths = abjad . mathx . cumulative_sums ( eighths ) [EOL] measure_numbers = [ x / [number] + [number] for x in eighths ] [EOL] in_synch_measure_numbers = [ ] [EOL] for i , measure_number in enumerate ( measure_numbers ) : [EOL] if i % [number] == [number] : [EOL] measure_number = abjad . mathx . integer_equivalent_number_to_integer ( measure_number ) [EOL] in_synch_measure_numbers . append ( measure_number ) [EOL] if [number] < len ( in_synch_measure_numbers ) : [EOL] raise ValueError ( [string] ) [EOL] start = in_synch_measure_numbers [ [number] ] [EOL] stop = abjad . mathx . integer_equivalent_number_to_integer ( start + capture / [number] ) [EOL] rpt = [string] % ( instrument_indices , start , stop ) [EOL] print ( rpt ) [EOL] return start , stop [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] depict_cast_schedule ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] [EOL] from . get_next_file_number import get_next_file_number [EOL] [EOL] [EOL] def apply_sketch_footer ( score ) : [EOL] lilypond_file = score . lilypond_file [EOL] footer_string = [string] [EOL] next_file_number = get_next_file_number ( ) [EOL] footer_string += str ( next_file_number ) [EOL] footer_markup = abjad . Markup ( [string] % footer_string ) [EOL] lilypond_file . paper . oddFooterMarkup = footer_markup [EOL] lilypond_file . paper . evenFooterMarkup = footer_markup [EOL] [EOL] [EOL] def apply_score_footer ( score ) : [EOL] lilypond_file = score . lilypond_file [EOL] lilypond_file . paper . oddFooterMarkup = abjad . Markup . big_centered_page_number ( ) [EOL] lilypond_file . paper . evenFooterMarkup = abjad . Markup . big_centered_page_number ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import abjad [EOL] import quicktions [EOL] [EOL] from . get_division_token import get_fancy_division_token [EOL] [EOL] [EOL] def make_other_tuplet ( target_eighths , division_token ) : [EOL] target_duration = quicktions . Fraction ( target_eighths , [number] ) [EOL] durations = [ quicktions . Fraction ( n , [number] ) for n in division_token ] [EOL] notes = abjad . make_notes ( [ [number] ] , durations ) [EOL] tuplet = abjad . Tuplet . from_duration ( target_duration , notes ) [EOL] tuplet . duration . denominator = target_eighths [EOL] beam_unit_durations = calculate_beam_unit_durations ( tuplet ) [EOL] return tuplet , beam_unit_durations [EOL] [EOL] [EOL] def top_level_tuplets ( top_level_prolation_pairs , instrument_index ) : [EOL] top_level_tuplets = [ ] [EOL] for tuplet_index , pair in enumerate ( top_level_prolation_pairs ) : [EOL] target_eighths , total_eighths = pair [EOL] division_token = get_fancy_division_token ( instrument_index , tuplet_index , pair ) [EOL] if abjad . mathx . is_dotted_integer ( target_eighths ) and abjad . mathx . is_power_of_two ( total_eighths ) : [EOL] tuplet , beam_unit_durations = make_dotted_trivial_tuplet ( target_eighths , total_eighths , division_token ) [EOL] else : [EOL] tuplet , beam_unit_durations = make_other_tuplet ( target_eighths , division_token ) [EOL] [comment] [EOL] abjad . Beam ( tuplet , durations = beam_unit_durations , span = [number] ) [EOL] top_level_tuplets . append ( tuplet ) [EOL] return top_level_tuplets [EOL] [EOL] [EOL] def calculate_beam_unit_durations ( tuplet ) : [EOL] beam_unit_duration = tuplet . duration . multiplier * quicktions . Fraction ( [number] , [number] ) [EOL] total_units = tuplet . duration . denominator [EOL] beam_unit_durations = total_units * [ beam_unit_duration ] [EOL] return beam_unit_durations [EOL] [EOL] [EOL] def make_dotted_trivial_tuplet ( target_eighths , total_eighths , division_token ) : [EOL] target_duration = quicktions . Fraction ( target_eighths , [number] ) [EOL] if target_eighths < total_eighths : [EOL] tuplet = abjad . Tuplet . divide . duration_into_arbitrary_diminution_dotted ( target_duration , division_token ) [EOL] else : [EOL] tuplet = abjad . Tuplet . divide . duration_into_arbitrary_augmentation_dotted ( target_duration , division_token ) [EOL] first_note = tuplet [ [number] ] [EOL] if first_note . duration . written . _numerator == [number] : [EOL] beam_unit_duration = quicktions . Fraction ( [number] , [number] ) [EOL] elif first_note . duration . written . _numerator == [number] : [EOL] beam_unit_duration = quicktions . Fraction ( [number] , [number] ) [EOL] else : [EOL] raise ValueError ( [string] ) [EOL] num_units = tuplet . duration . target / beam_unit_duration [EOL] int_num_units = int ( num_units ) [EOL] assert int_num_units == num_units [EOL] beam_unit_durations = int_num_units * [ beam_unit_duration ] [EOL] return tuplet , beam_unit_durations [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import baca [EOL] [EOL] import desir [EOL] [EOL] [EOL] def cast_top_level_eighths ( top_level_eighths ) : [EOL] tokens = desir . cast_tokens ( ) [EOL] top_level_eighths = top_level_eighths [ : ] [EOL] [comment] [EOL] for instrument_indices , weights in tokens : [EOL] instruments = [ ] [EOL] for instrument_index in instrument_indices : [EOL] instrument = top_level_eighths [ instrument_index ] [EOL] parts = instrument . split_by_weights ( weights , cyclic = True , overhang = True ) [EOL] instruments . append ( parts ) [EOL] [comment] [EOL] rebuilt_instruments = [ ] [EOL] for i , parts in enumerate ( zip ( * instruments ) ) : [EOL] [comment] [EOL] if i % [number] == [number] : [EOL] rebuilt_instruments . append ( ( parts [ [number] ] , ) * len ( parts ) ) [EOL] else : [EOL] rebuilt_instruments . append ( parts ) [EOL] rebuilt_instruments = zip ( * rebuilt_instruments ) [EOL] rebuilt_instruments = [ baca . sequence ( x ) . flatten ( ) for x in rebuilt_instruments ] [EOL] rebuilt_instruments = [ list ( x ) for x in rebuilt_instruments ] [EOL] [comment] [EOL] for instrument_index , rebuilt_instrument in zip ( instrument_indices , rebuilt_instruments ) : [EOL] top_level_eighths [ instrument_index ] = rebuilt_instrument [EOL] return top_level_eighths [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Literal , Tuple , List [EOL] import typing_extensions [EOL] import typing [EOL] import abjad [EOL] import quicktions [EOL] [EOL] [EOL] def add_tempo_indications ( score ) : [EOL] breaks_voice = score [ [string] ] [EOL] breaks_measures = list ( abjad . iterate . measures_forward_in ( breaks_voice ) ) [EOL] duration = breaks_voice . duration . prolated [EOL] durations = abjad . mathx . divide_scalar_by_ratio ( duration , [ [number] , [number] , [number] ] ) [EOL] groups = abjad . Duration . group_prolated ( breaks_measures , durations ) [EOL] metronome_marks = ( [number] , [number] , [number] ) [EOL] for group , mm in zip ( groups , metronome_marks ) : [EOL] first_measure = abjad . iterate . get_nth_measure ( group , [number] ) [EOL] tempo_indication = abjad . MetronomeMark ( quicktions . Fraction ( [number] , [number] ) , mm ) [EOL] first_measure . tempo . forced = tempo_indication [EOL] return score [EOL] [EOL] [EOL] def add_tempo_spanners ( score ) : [EOL] print ( [string] ) [EOL] breaks_voice = score [ [string] ] [EOL] breaks_measures = list ( abjad . iterate . measures_forward_in ( breaks_voice ) ) [EOL] duration = breaks_voice . duration . prolated [EOL] durations = abjad . mathx . divide_scalar_by_ratio ( duration , [ [number] , [number] , [number] ] ) [EOL] groups = abjad . Duration . group_prolated ( breaks_measures , durations ) [EOL] metronome_marks = ( [number] , [number] , [number] ) [EOL] for group , mm in zip ( groups , metronome_marks ) : [EOL] tempo_indication = abjad . MetronomeMark ( quicktions . Fraction ( [number] , [number] ) , mm ) [EOL] abjad . TempoSpannerProportional ( group , tempo_indication ) [EOL] return score [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from . top_level_eighths import top_level_eighths [EOL] from . top_level_prolation_pairs import top_level_prolation_pairs [EOL] from . top_level_tuplets import top_level_tuplets [EOL] [EOL] [EOL] def add_top_level_tuplets ( score ) : [EOL] print ( [string] ) [EOL] [comment] [EOL] eighths = top_level_eighths ( ) [EOL] prolation_pairs = top_level_prolation_pairs ( eighths ) [EOL] for staff_index , staff in enumerate ( score . instrument_staves ) : [EOL] tuplets = top_level_tuplets ( prolation_pairs [ staff_index ] , staff_index ) [EOL] voice = staff [ [number] ] [EOL] voice . extend ( tuplets ) [EOL] [comment] [EOL] [comment] [EOL] return score [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . add_shuddering_cello import add_shuddering_cello [EOL] from . add_shuddering_clarinet import add_shuddering_clarinet [EOL] from . add_shuddering_flute import add_shuddering_flute [EOL] from . add_shuddering_violin import add_shuddering_violin [EOL] [EOL] [EOL] def add_shuddering ( score ) : [EOL] print ( [string] ) [EOL] add_shuddering_flute ( score ) [EOL] add_shuddering_clarinet ( score ) [EOL] add_shuddering_violin ( score ) [EOL] add_shuddering_cello ( score ) [EOL] return score [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] import baca [EOL] [EOL] import desir [EOL] [EOL] [EOL] def add_dynamics ( score ) : [EOL] print ( [string] ) [EOL] for instrument_index , voice in enumerate ( score . instrument_voices ) : [EOL] leaf_groups = desir . group_leaves_by_fleur_number ( voice ) [EOL] for leaf_group_index , leaf_group in enumerate ( leaf_groups ) : [EOL] add_dynamics_to_leaf_group ( instrument_index , leaf_group_index , leaf_group ) [EOL] [EOL] [EOL] def add_dynamics_to_leaf_group ( instrument_index , leaf_group_index , leaf_group ) : [EOL] dynamic_cycle = make_dynamic_cycle ( ) [EOL] dynamic_index = [number] * instrument_index + leaf_group_index [EOL] dynamic_text = dynamic_cycle [ dynamic_index % len ( dynamic_cycle ) ] [EOL] abjad . dynamic_spanner_below_with_nib_at_right ( dynamic_text , leaf_group ) [EOL] return leaf_group [EOL] [EOL] [EOL] def make_dynamic_cycle ( ) : [EOL] result = [ [ [string] , [string] , [string] ] , [ [string] , [string] , [string] , [string] ] , [ [string] , [string] ] ] [EOL] result = baca . sequece ( result ) [EOL] result = result . helianthate ( [number] , [number] ) [EOL] result = result . remove_repeats ( ) [EOL] return result [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def trim_score ( score , offset ) : [EOL] for staff in abjad . iterate . naive_forward_in ( score , abjad . Staff ) : [EOL] delete_contents_of_container_starting_at_or_after_offset ( staff , offset ) [EOL] [EOL] [EOL] def delete_contents_of_container_starting_at_or_after_offset ( container , offset ) : [EOL] [comment] [EOL] element = get_first_element_starting_at_or_after_offset ( container , offset ) [EOL] [comment] [EOL] index = container . index ( element ) [EOL] [comment] [EOL] del container [ index : ] [EOL] [comment] [EOL] return container [EOL] [EOL] [EOL] def get_first_element_starting_at_or_after_offset ( container , offset ) : [EOL] offset = abjad . Duration ( offset ) [EOL] for element in container : [EOL] if offset <= abjad . get . timespan ( element ) . start_offset : [EOL] return element [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def label_slur_indices ( score ) : [EOL] print ( [string] ) [EOL] for voice in score . instrument_voices : [EOL] label_slur_indices_on_voice ( voice ) [EOL] [EOL] [EOL] def label_slur_indices_on_voice ( voice ) : [EOL] slurs = list ( voice . slur . spanners_attached_to_contents ) [EOL] slurs . sort ( ) [EOL] for slur_index , slur in enumerate ( slurs ) : [EOL] markup = abjad . Markup ( [string] % slur_index ) [EOL] slur [ [number] ] . markup . up . append ( markup ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] import baca [EOL] [EOL] [EOL] def create_rests ( score ) : [EOL] print ( [string] ) [EOL] cycle = baca . sequence ( [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] ) [EOL] cycle = cycle . helianthate ( [number] , [number] ) [EOL] assert cycle == [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ] [EOL] assert len ( cycle ) == [number] [EOL] rest_pairs_created = [number] [EOL] for voice in abjad . iterate ( score ) . by_voice ( ) : [EOL] tuplets = abjad . iterate ( voice ) . components ( abjad . Tuplet ) [EOL] tuplets = baca . sequence ( tuplets ) [EOL] for i , pair in enumerate ( tuplets . nwise ( n = [number] ) ) : [EOL] if cycle [ i % len ( cycle ) ] == [number] : [EOL] left_tuplet , right_tuplet = pair [EOL] last_left_leaf = left_tuplet [ : ] . get ( abjad . Leaf , - [number] ) [EOL] first_right_leaf = right_tuplet [ : ] . get ( abjad . Leaf , [number] ) [EOL] abjad . Rest ( last_left_leaf ) [EOL] abjad . Rest ( first_right_leaf ) [EOL] rest_pairs_created += [number] [EOL] print ( [string] % rest_pairs_created ) [EOL] return score [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import abjad [EOL] import baca [EOL] [EOL] [EOL] def get_fancy_division_token ( instrument_index , tuplet_index , pair ) : [EOL] first_filter = baca . sequence ( [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] ) [EOL] first_filter = first_filter . helianthate ( [number] , [number] ) [EOL] second_filter = baca . sequence ( [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] ) [EOL] second_filter = second_filter . helianthate ( [number] , [number] ) [EOL] third_filter = baca . sequence ( [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] ) [EOL] third_filter = third_filter . helianthate ( [number] , [number] ) [EOL] target_eighths , total_eighths = pair [EOL] start_index = [number] * instrument_index + tuplet_index [EOL] stop_index = start_index + total_eighths [EOL] if [number] <= tuplet_index < [number] : [EOL] cur_filter = first_filter [EOL] elif [number] <= tuplet_index < [number] : [EOL] cur_filter = second_filter [EOL] else : [EOL] cur_filter = third_filter [EOL] swath = abjad . CyclicTuple ( cur_filter ) [ start_index : stop_index ] [EOL] assert len ( swath ) == total_eighths [EOL] division_token = [ ] [EOL] for element in swath : [EOL] if element == [number] : [EOL] division_token . append ( [number] ) [EOL] elif element == [number] : [EOL] division_token . extend ( [ [number] , [number] ] ) [EOL] elif element == [number] : [EOL] division_token . extend ( [ [number] , [number] , [number] , [number] ] ) [EOL] else : [EOL] raise ValueError [EOL] return division_token [EOL] [EOL] [EOL] def get_division_token ( instrument_index , tuplet_index , pair ) : [EOL] target_eighths , total_eighths = pair [EOL] total_thirty_seconds = [number] * total_eighths [EOL] division_token = total_thirty_seconds * [ [number] ] [EOL] return division_token [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
def allowable_addenda ( eighths ) : [EOL] [comment] [EOL] if eighths in [ [number] , [number] ] : [EOL] return [ [number] ] [EOL] elif eighths in [ [number] , [number] , [number] ] : [EOL] return [ [number] ] [EOL] elif eighths in [ [number] , [number] , [number] ] : [EOL] return [ [number] , [number] ] [EOL] elif eighths in [ [number] , [number] , [number] , [number] ] : [EOL] return [ [number] , [number] , [number] ] [EOL] elif [number] < eighths : [EOL] return [ [number] , [number] , [number] , [number] ] [EOL] else : [EOL] raise ValueError [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def configure_lilypond_file ( score ) : [EOL] lilypond_file = score . lilypond_file [EOL] lilypond_file . default_paper_size = [string] [EOL] lilypond_file . global_staff_size = [number] [EOL] lilypond_file . layout . indent = [number] [EOL] lilypond_file . layout . ragged_right = True [EOL] lilypond_file . paper . first_page_number = [number] [EOL] lilypond_file . paper . left_margin = [number] [EOL] lilypond_file . paper . minimal_page_breaking = True [EOL] lilypond_file . paper . print_first_page_number = True [EOL] lilypond_file . paper . ragged_bottom = True [EOL] lilypond_file . paper . ragged_last_bottom = True [EOL] lilypond_file . paper . top_margin = [number] [EOL] return score [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] import quicktions [EOL] [EOL] [EOL] def add_breaks_voice_by_measure ( score , measure_duration ) : [EOL] staff = score [ [string] ] [EOL] prolated_score_duration = staff . score . explicit . duration . prolated [EOL] assert prolated_score_duration == quicktions . Fraction ( [number] , [number] ) [EOL] total_measures = int ( prolated_score_duration / measure_duration ) [EOL] skip = abjad . Skip ( ( [number] , [number] ) ) [EOL] skip . duration . multiplier = measure_duration [EOL] token_measure = abjad . Container ( [ skip ] ) [EOL] measures = token_measure * total_measures [EOL] breaks_voice = abjad . Voice ( measures ) [EOL] breaks_voice . name = [string] [EOL] staff . append ( breaks_voice ) [EOL] staff . parallel = True [EOL] return staff [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import pathlib [EOL] import os [EOL] import pathlib [EOL] [EOL] import desir [EOL] [EOL] input_directory = pathlib . Path ( os . environ [ [string] ] , [string] , [string] ) [EOL] [EOL] output_directory = pathlib . Path ( os . environ [ [string] ] , [string] , [string] ) [EOL] desir . render_tex ( input_directory , [string] , output_directory ) [EOL] [EOL] output_directory = pathlib . Path ( os . environ [ [string] ] , [string] , [string] ) [EOL] desir . render_tex ( input_directory , [string] , output_directory ) [EOL] os . system ( [string] ) [EOL] [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 $pathlib.Path$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import pathlib [EOL] import os [EOL] import pathlib [EOL] [EOL] import desir [EOL] [EOL] [comment] [EOL] cur_directory = pathlib . Path ( os . environ [ [string] ] , [string] , [string] ) [EOL] script = pathlib . Path ( cur_directory , [string] ) [EOL] os . system ( script ) [EOL] [EOL] [comment] [EOL] input_directory = pathlib . Path ( os . environ [ [string] ] , [string] , [string] ) [EOL] output_directory = pathlib . Path ( os . environ [ [string] ] , [string] , [string] ) [EOL] [EOL] for part_file_name in ( [string] , [string] , [string] , [string] , ) : [EOL] part_file_name_stem = part_file_name [ : - [number] ] [EOL] desir . render_tex ( input_directory , part_file_name_stem , output_directory ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] desir . render_tex ( input_directory , [string] , output_directory , ) [EOL] desir . render_tex ( input_directory , [string] , output_directory , ) [EOL] desir . render_tex ( input_directory , [string] , output_directory , ) [EOL] [EOL] [comment] [EOL] os . system ( [string] ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] print ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $builtins.str$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import pathlib [EOL] import os [EOL] import pathlib [EOL] [EOL] import desir [EOL] [EOL] [EOL] def make_desir_annotated_back_covers ( ) : [EOL] input_directory = pathlib . Path ( os . environ [ [string] ] , [string] , [string] ) [EOL] output_directory = pathlib . Path ( os . environ [ [string] ] , [string] , [string] ) [EOL] for cover_file_name in ( [string] , [string] , [string] , [string] , [string] , [string] , ) : [EOL] cover_file_name_stem = cover_file_name [ : - [number] ] [EOL] desir . render_tex ( input_directory , cover_file_name_stem , output_directory ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] os . system ( [string] ) [EOL] make_desir_annotated_back_covers ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Tuple , List [EOL] import typing [EOL] import abjad [EOL] [EOL] flute = [ ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ] [EOL] print ( sum ( [ x [ [number] ] for x in flute ] ) ) [EOL] [EOL] clarinet = [ ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ] [EOL] print ( sum ( [ x [ [number] ] for x in clarinet ] ) ) [EOL] [EOL] violin = [ ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ] [EOL] print ( sum ( [ x [ [number] ] for x in violin ] ) ) [EOL] [EOL] cello = [ ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ] [EOL] print ( sum ( [ x [ [number] ] for x in cello ] ) ) [EOL] [EOL] tuplets = [ ] [EOL] for x , y in cello : [EOL] notes = x * abjad . Note ( [string] ) [EOL] tuplet = abjad . Tuplet . from_duration ( ( y , [number] ) , notes ) [EOL] tuplet [ [number] ] . pitch = [number] [EOL] tuplets . append ( tuplet ) [EOL] [EOL] staff = abjad . Staff ( tuplets ) [EOL] abjad . show ( staff ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,builtins.int]]$ 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,builtins.int]]$ 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,builtins.int]]$ 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,builtins.int]]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,builtins.int]]$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0
[docstring] [EOL]	0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def adjust_length_one_tuplets ( score ) : [EOL] print ( [string] ) [EOL] tuplet = abjad . iterate . get_measure_number ( score . clarinet_music_voice , [number] ) [ [number] ] [EOL] tuplet . duration . target = abjad . Duration ( [number] , [number] ) [EOL] tuplet . leaves [ [number] ] . duration . written = abjad . Duration ( [number] , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import abjad [EOL] [EOL] [EOL] def apply_manual_adjustments ( score ) : [EOL] print ( [string] ) [EOL] [EOL] note = abjad . iterate . get_measure_leaf ( score . cello_music_voice , [number] , [number] ) [EOL] note . tuplet_bracket . staff_padding = [number] [EOL] [EOL] note = abjad . iterate . get_measure_leaf ( score , [number] , [number] ) [EOL] note . tuplet_bracket . staff_padding = [number] [EOL] [EOL] note = abjad . iterate . get_measure_leaf ( score . cello_music_voice , [number] , [number] ) [EOL] note . clef . forced = abjad . Clef ( [string] ) [EOL] [EOL] note = abjad . iterate . get_measure_leaf ( score . cello_music_voice , [number] , [number] ) [EOL] note . clef . forced = abjad . Clef ( [string] ) [EOL] [EOL] note = abjad . iterate . get_measure_leaf ( score . cello_music_voice , [number] , [number] ) [EOL] note . clef . forced = abjad . Clef ( [string] ) [EOL] [EOL] note = abjad . iterate . get_measure_leaf ( score . violin_music_voice , [number] , [number] ) [EOL] note . dynamic_line_spanner . staff_padding = [number] [EOL] note = note . next [EOL] note . dynamic_line_spanner . staff_padding = [number] [EOL] note = note . next [EOL] note . dynamic_line_spanner . staff_padding = [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import quicktions [EOL] [EOL] [EOL] def set_pnd_manually ( score ) : [EOL] score . spacing . proportional_notation_duration = quicktions . Fraction ( [number] , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import desir [EOL] [EOL] [EOL] def get_fitting ( reading_index , tefer_index , fitting_index ) : [EOL] fittings = desir . legatissimo . read_fittings_from_disk ( reading_index , tefer_index ) [EOL] fitting = fittings [ fitting_index ] [EOL] return fitting [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def add_timepoints_to_staff ( score , staff ) : [EOL] durations = abjad . mathx . difference_series ( score ) [EOL] notes = abjad . make_quarter_notes_with_multipliers ( [ [number] ] , durations ) [EOL] staff . extend ( notes ) [EOL] return score [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Set , List [EOL] import typing [EOL] import copy [EOL] import math [EOL] [EOL] import abjad [EOL] [EOL] from . filter_candidate_arrays import filter_candidate_arrays [EOL] from . make_tefer_skeleton_array import make_tefer_skeleton_array [EOL] [EOL] [EOL] def make_tefer_fittings ( reading_index , tefer_index ) : [EOL] [docstring] [EOL] [EOL] skeleton_array , pitch_tokens = make_tefer_skeleton_array ( reading_index , tefer_index ) [EOL] [EOL] reading_number = reading_index + [number] [EOL] tefer_number = tefer_index + [number] [EOL] [EOL] forbidden_melodic_interval_classes = [ [number] , [number] , [number] , [number] , [number] , [number] , - [number] , - [number] , - [number] , - [number] , ] [EOL] [comment] [EOL] allowed_melodic_intervals = [ ] [EOL] forbidden_harmonic_interval_classes = [ [number] , [number] , [number] ] [EOL] allowed_harmonic_intervals = [ [number] ] [EOL] [EOL] print ( [string] % ( reading_number , tefer_number ) ) [EOL] print ( skeleton_array ) [EOL] print ( ) [EOL] [EOL] print ( [string] % ( reading_number , tefer_number ) ) [EOL] print ( pitch_tokens ) [EOL] print ( ) [EOL] [EOL] good_arrays = yield_all_good_arrays ( skeleton_array , pitch_tokens , forbidden_melodic_interval_classes , allowed_melodic_intervals , forbidden_harmonic_interval_classes , allowed_harmonic_intervals , ) [EOL] [EOL] good_arrays = list ( good_arrays ) [EOL] [comment] [EOL] [EOL] return good_arrays [EOL] [EOL] [EOL] def yield_all_good_arrays ( skeleton_array , pitch_tokens , forbidden_melodic_interval_classes = None , allowed_melodic_intervals = None , forbidden_harmonic_interval_classes = None , allowed_harmonic_intervals = None , ) : [EOL] [comment] [EOL] [EOL] pitch_set = abjad . PitchSet ( pitch_tokens ) [EOL] [EOL] row_melodies_list = make_row_melodies_list ( skeleton_array , pitch_tokens , forbidden_melodic_interval_classes , allowed_melodic_intervals , ) [EOL] [comment] [EOL] [comment] [EOL] for i , row_melody in enumerate ( row_melodies_list [ : ] ) : [EOL] if row_melody == [ ] : [EOL] row_melodies_list [ i ] = [ [ [string] ] ] [EOL] lengths = [ len ( x ) for x in row_melodies_list ] [EOL] total_arrays = abjad . mathx . cumulative_products ( lengths ) [ - [number] ] [EOL] if [number] < total_arrays : [EOL] print ( [string] % total_arrays ) [EOL] tmp = [ ] [EOL] for row_melody in row_melodies_list : [EOL] half = len ( row_melody ) / [number] [EOL] tmp . append ( row_melody [ : half ] ) [EOL] row_melodies_list = tmp [ : ] [EOL] lengths = [ len ( x ) for x in row_melodies_list ] [EOL] total_arrays = abjad . mathx . cumulative_products ( lengths ) [ - [number] ] [EOL] print ( [string] % total_arrays ) [EOL] array_pitch_lists = abjad . enumeratex . yield_outer_product ( row_melodies_list ) [EOL] for pitch_list in array_pitch_lists : [EOL] for i , row_melody in enumerate ( pitch_list [ : ] ) : [EOL] if row_melody == [ [string] ] : [EOL] pitch_list [ i ] = [ ] [EOL] [comment] [EOL] [EOL] candidate_arrays = [ ] [EOL] for array_pitch_list in array_pitch_lists : [EOL] candidate_array = copy . copy ( skeleton_array ) [EOL] candidate_array . apply_pitches_by_row ( array_pitch_list ) [EOL] candidate_arrays . append ( candidate_array ) [EOL] [EOL] good_arrays = filter_candidate_arrays ( candidate_arrays , pitch_set , forbidden_harmonic_interval_classes , allowed_harmonic_intervals , ) [EOL] for good_array in good_arrays : [EOL] yield good_array [EOL] [EOL] [EOL] def make_row_melodies_list ( skeleton_array , pitch_tokens , forbidden_melodic_interval_classes , allowed_melodic_intervals , ) : [EOL] row_melodies_list = [ ] [EOL] for row in skeleton_array . rows : [EOL] row_melodies = yield_all_row_melodies ( row , pitch_tokens , forbidden_melodic_interval_classes , allowed_melodic_intervals , ) [EOL] row_melodies = list ( row_melodies ) [EOL] row_melodies_list . append ( row_melodies ) [EOL] [comment] [EOL] return row_melodies_list [EOL] [EOL] [EOL] def yield_all_row_melodies ( row , pitch_tokens , forbidden_melodic_interval_classes = None , allowed_intervals = None , ) : [EOL] print ( ) [EOL] print ( [string] % row . name ) [EOL] [comment] [EOL] forbidden_melodic_interval_classes = set ( forbidden_melodic_interval_classes ) [EOL] [comment] [EOL] pitch_tokens = [ k for k in pitch_tokens if k in row . pitch_range ] [EOL] pitch_multisets = get_all_unordered_melodies ( row . weight , pitch_tokens ) [EOL] [comment] [EOL] candidate_melodies = [ ] [EOL] for multiset in pitch_multisets : [EOL] for permutation in abjad . enumeratex . yield_permutations ( multiset ) : [EOL] if permutation not in candidate_melodies : [EOL] candidate_melodies . append ( permutation ) [EOL] candidate_melodies = [ abjad . PitchSegment ( x ) for x in candidate_melodies ] [EOL] print ( [string] % len ( candidate_melodies ) ) [EOL] [EOL] keep_this_time = [ ] [EOL] for candidate_melody in candidate_melodies : [EOL] if ( abjad . MelodicChromaticInterval ( [number] ) not in candidate_melody . melodic_chromatic_interval_class_segment ) : [EOL] keep_this_time . append ( candidate_melody ) [EOL] if not keep_this_time : [EOL] print ( [string] ) [EOL] else : [EOL] candidate_melodies = keep_this_time [ : ] [EOL] print ( [string] % len ( candidate_melodies ) ) [EOL] [EOL] keep_this_time = [ ] [EOL] for candidate_melody in candidate_melodies : [EOL] if candidate_melody . inflection_point_count <= [number] : [EOL] keep_this_time . append ( candidate_melody ) [EOL] if not keep_this_time : [EOL] print ( [string] ) [EOL] else : [EOL] candidate_melodies = keep_this_time [ : ] [EOL] print ( [string] % len ( candidate_melodies ) ) [EOL] [EOL] keep_this_time = [ ] [EOL] for candidate_melody in candidate_melodies : [EOL] segment = set ( candidate_melody . melodic_chromatic_interval_class_segment ) [EOL] intersection = segment & forbidden_melodic_interval_classes [EOL] if not intersection : [EOL] keep_this_time . append ( candidate_melody ) [EOL] if not keep_this_time : [EOL] print ( [string] ) [EOL] else : [EOL] candidate_melodies = keep_this_time [ : ] [EOL] print ( [string] % len ( candidate_melodies ) ) [EOL] [EOL] good_melodies = [ ] [EOL] for melody in candidate_melodies : [EOL] if melody not in good_melodies : [EOL] good_melodies . append ( melody ) [EOL] yield melody [EOL] else : [EOL] print ( [string] ) [EOL] [EOL] [EOL] def get_all_unordered_melodies ( melody_length , pitch_tokens ) : [EOL] if melody_length < len ( pitch_tokens ) : [EOL] return get_unordered_shorter_melodies ( melody_length , pitch_tokens ) [EOL] else : [EOL] return get_unordered_longer_melodies ( melody_length , pitch_tokens ) [EOL] [EOL] [EOL] def get_unordered_shorter_melodies ( melody_length , pitch_tokens ) : [EOL] pitch_tokens . sort ( ) [EOL] if melody_length < len ( pitch_tokens ) : [EOL] unordered_melodies = abjad . enumeratex . yield_subsequences ( pitch_tokens , minimum_length = melody_length , maximum_length = melody_length ) [EOL] unordered_melodies = list ( unordered_melodies ) [EOL] return unordered_melodies [EOL] [EOL] [EOL] def get_unordered_longer_melodies ( melody_length , pitch_tokens ) : [EOL] pitch_tokens . sort ( ) [EOL] if len ( pitch_tokens ) : [EOL] minimum_appearances = int ( math . floor ( melody_length / len ( pitch_tokens ) ) ) [EOL] if melody_length % len ( pitch_tokens ) == [number] : [EOL] maximum_appearances = [number] [EOL] else : [EOL] maximum_appearances = minimum_appearances + [number] [EOL] number_at_maximum = melody_length % len ( pitch_tokens ) [EOL] else : [EOL] minimum_appearances = [number] [EOL] maximum_appearances = [number] [EOL] number_at_maximum = [number] [EOL] maximum_appearances [EOL] extra = number_at_maximum [EOL] [comment] [EOL] extra_parts = abjad . enumeratex . yield_subsequences ( pitch_tokens , extra , extra ) [EOL] extra_parts = list ( extra_parts ) [EOL] [comment] [EOL] multiplied_pitch_tokens = minimum_appearances * pitch_tokens [EOL] [comment] [EOL] if extra : [EOL] unordered_melodies = [ ] [EOL] for extra_part in extra_parts : [EOL] unordered_melody = multiplied_pitch_tokens + extra_part [EOL] unordered_melody . sort ( ) [EOL] if unordered_melody not in unordered_melodies : [EOL] unordered_melodies . append ( unordered_melody ) [EOL] else : [EOL] unordered_melodies = [ multiplied_pitch_tokens ] [EOL] return unordered_melodies [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict , Tuple , List [EOL] import pathlib [EOL] import typing [EOL] import pathlib [EOL] [EOL] import abjad [EOL] import baca [EOL] import quicktions [EOL] [EOL] output_directory = pathlib . Path ( [string] ) [EOL] [EOL] [EOL] def make_score ( ) : [EOL] flute_staff = abjad . Staff ( ) [EOL] violin_staff = abjad . Staff ( ) [EOL] violin_staff . bar_line . kind = [string] [EOL] flute_staff . name = [string] [EOL] flute_staff . instrument . name = [string] [EOL] flute_staff . instrument . short_name = [string] [EOL] violin_staff . name = [string] [EOL] violin_staff . instrument . name = [string] [EOL] violin_staff . instrument . short_name = [string] [EOL] staff_group = abjad . StaffGroup ( [ flute_staff , violin_staff ] ) [EOL] score = abjad . Score ( [ staff_group ] ) [EOL] [comment] [EOL] tempo_indication = abjad . MetronomeMark ( abjad . Duration ( [number] , [number] ) , [number] ) [EOL] score . tempo . forced = tempo_indication [EOL] score . tempo . Y_extent = ( [number] , [number] ) [EOL] score . tempo . extra_offset = ( [number] , [number] ) [EOL] [comment] [EOL] [comment] [EOL] score . spacing . proportional_notation_duration = quicktions . Fraction ( [number] , [number] ) [EOL] score . spacing . uniform_stretching = True [EOL] score . spacing . strict_note_spacing = True [EOL] score . bar_number . transparent = True [EOL] score . text_script . staff_padding = [number] [EOL] score . text_spanner . staff_padding = [number] [EOL] score . beam . auto_beaming = False [EOL] lilypond_file = abjad . LilyPondFile . new ( score ) [EOL] lilypond_file . layout . indent = [number] [EOL] lilypond_file . layout . ragged_right = True [EOL] lilypond_file . paper . top_margin = [number] [EOL] lilypond_file . paper . left_margin = [number] [EOL] lilypond_file . paper . print_page_number = False [EOL] lilypond_file . paper . oddFooterMarkup = abjad . Markup ( [string] ) [EOL] lilypond_file . global_staff_size = [number] [EOL] lilypond_file . default_paper_size = [string] [EOL] return score [EOL] [EOL] [EOL] def make_numerators ( ) : [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] numerators = [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] [EOL] numerators = numerators . helianthate ( [number] , [number] ) [EOL] numerators = numerators . split_by_weights ( [ [number] ] , cyclic = True , overhang = True ) [EOL] assert numerators == [ [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , ] [EOL] numerators = numerators . flatten ( ) [EOL] numerators = numerators . split_by_weights ( [ [number] ] , cyclic = True , overhang = True ) [EOL] assert numerators == [ [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , ] [EOL] numerators = numerators . flatten ( ) [EOL] numerators = numerators . split_by_weights ( [ [number] ] , cyclic = True , overhang = True ) [EOL] assert numerators == [ [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , ] [EOL] numerators = numerators [ [number] ] [EOL] return numerators [EOL] [EOL] [EOL] def make_measures ( score , numerators ) : [EOL] flute_staff = score [ [string] ] [ [number] ] [EOL] violin_staff = score [ [string] ] [ [number] ] [EOL] meter_tokens = [ ( numerator , [number] ) for numerator in numerators ] [EOL] measures = [ abjad . Container ( ) for _ in meter_tokens ] [EOL] violin_staff . extend ( measures ) [EOL] measures = [ abjad . Container ( ) for _ in meter_tokens ] [EOL] flute_staff . extend ( measures ) [EOL] [EOL] [EOL] def apply_layout ( score ) : [EOL] [comment] [EOL] schema = abjad . layout . LayoutSchema ( quicktions . Fraction ( [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , - [number] ) ) [EOL] flute_staff = score [ [string] ] [EOL] abjad . layout . apply_layout_schema ( flute_staff , schema , adjust_eol = True ) [EOL] [EOL] [EOL] def make_flute_run_lengths ( ) : [EOL] numerators = make_numerators ( ) [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] numerator_to_flute_lengths = { [number] : [ [number] ] , [number] : [ [number] , [number] ] , [number] : [ [number] , [number] , [number] , [number] ] , [number] : [ [number] , [number] , [number] , [number] ] , [number] : [ [number] , [number] , [number] , [number] , [number] ] , } [EOL] run_lengths = [ ] [EOL] for i , numerator in enumerate ( numerators ) : [EOL] lengths = numerator_to_flute_lengths [ numerator ] [EOL] lengths = baca . sequence ( lengths ) [EOL] lengths = lengths . rotate ( n = i ) [EOL] run_lengths . append ( lengths ) [EOL] return run_lengths [EOL] [EOL] [EOL] def make_flute_runs ( score , flute_run_lengths ) : [EOL] [comment] [EOL] flute_staff = score [ [string] ] [ [number] ] [EOL] flute_run_lengths = baca . sequence ( flute_run_lengths ) . flatten ( ) [EOL] flute_eighths = flute_staff . duration . prolated [EOL] flute_eighths = abjad . Duration ( flute_eighths ) . with_denominator ( [number] ) [ [number] ] [EOL] [comment] [EOL] flute_thirty_seconds = [number] * flute_eighths [EOL] assert flute_thirty_seconds == sum ( flute_run_lengths ) [EOL] note_durations = [ ( x , [number] ) for x in flute_run_lengths ] [EOL] notes = abjad . make_notes ( [number] , note_durations ) [EOL] flute_staff [ : ] = notes [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def make_violin_run_lengths ( ) : [EOL] numerators = make_numerators ( ) [EOL] [comment] [EOL] [comment] [EOL] numerator_to_violin_lengths = { [number] : [ [number] ] , [number] : [ [number] , [number] ] , [number] : [ [number] , [number] , [number] , [number] ] , [number] : [ [number] , [number] , [number] , [number] ] , [number] : [ [number] , [number] , [number] , [number] , [number] ] , } [EOL] run_lengths = [ ] [EOL] for i , numerator in enumerate ( numerators ) : [EOL] lengths = numerator_to_violin_lengths [ numerator ] [EOL] lengths = baca . sequence ( lengths ) [EOL] lengths = lengths . rotate ( n = i ) [EOL] run_lengths . append ( lengths ) [EOL] return run_lengths [EOL] [EOL] [EOL] def make_violin_runs ( score , violin_run_lengths ) : [EOL] [comment] [EOL] violin_staff = score [ [string] ] [ [number] ] [EOL] violin_run_lengths = baca . sequence ( violin_run_lengths ) . flatten ( ) [EOL] violin_eighths = violin_staff . duration . prolated [EOL] violin_eighths = abjad . Duration ( violin_eighths ) . with_denominator ( [number] ) [ [number] ] [EOL] [comment] [EOL] violin_thirty_seconds = [number] * violin_eighths [EOL] assert violin_thirty_seconds == sum ( violin_run_lengths ) [EOL] note_durations = [ ( x , [number] ) for x in violin_run_lengths ] [EOL] notes = abjad . make_notes ( [number] , note_durations ) [EOL] violin_staff [ : ] = notes [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] for leaf in abjad . iterate . leaves_forward ( violin_staff ) : [EOL] leaf . pitch . number = [number] [EOL] [EOL] [EOL] def make_flute_prolation_values ( ) : [EOL] flute_run_lengths = make_flute_run_lengths ( ) [EOL] flute_run_lengths = baca . sequence ( flute_run_lengths ) [EOL] prolation_values = flute_run_lengths . rotate ( n = - [number] ) [EOL] return prolation_values [EOL] [EOL] [EOL] def make_violin_prolation_values ( ) : [EOL] violin_run_lengths = make_violin_run_lengths ( ) [EOL] violin_run_lengths = baca . sequence ( violin_run_lengths ) [EOL] prolation_values = violin_run_lengths . rotate ( n = - [number] ) [EOL] return prolation_values [EOL] [EOL] [EOL] def prolate_flute_runs ( score ) : [EOL] flute_staff = score [ [string] ] [ [number] ] [EOL] flute_prolation_values = baca . sequence ( make_flute_prolation_values ( ) ) . flatten ( ) [EOL] for leaf , prolation in zip ( abjad . iterate . leaves_backward ( flute_staff ) , flute_prolation_values ) : [EOL] tuplet = abjad . Tuplet . divide . leaf_into_even_augmentation ( leaf , prolation ) [EOL] abjad . Beam ( tuplet ) [EOL] abjad . mutate . replace ( leaf , tuplet ) [EOL] [EOL] [EOL] def prolate_violin_runs ( score ) : [EOL] violin_staff = score [ [string] ] [ [number] ] [EOL] violin_prolation_values = baca . sequence ( make_violin_prolation_values ( ) ) . flatten ( ) [EOL] for leaf , prolation in zip ( abjad . iterate . leaves_backward ( violin_staff ) , violin_prolation_values ) : [EOL] tuplet = abjad . Tuplet . divide . leaf_into_even_augmentation ( leaf , prolation ) [EOL] abjad . Beam ( tuplet ) [EOL] abjad . mutate . replace ( leaf , tuplet ) [EOL] for leaf in abjad . iterate . leaves_forward ( violin_staff ) : [EOL] leaf . pitch . number = [number] [EOL] [EOL] [EOL] def get_next_file_number ( ) : [EOL] file_numbers = [ ] [EOL] for file_name in output_directory . glob ( [string] ) : [EOL] try : [EOL] file_numbers . append ( int ( file_name [ - [number] : - [number] ] ) ) [EOL] except ValueError : [EOL] pass [EOL] if file_numbers : [EOL] max_file_number = max ( file_numbers ) [EOL] else : [EOL] max_file_number = [number] [EOL] next_file_number = max_file_number + [number] [EOL] return next_file_number [EOL] [EOL] [EOL] def apply_footer ( lilypond_file ) : [EOL] footer_string = [string] [EOL] next_file_number = get_next_file_number ( ) [EOL] footer_string += str ( next_file_number ) [EOL] footer_markup = abjad . Markup ( [string] % footer_string ) [EOL] lilypond_file . paper . oddFooterMarkup = footer_markup [EOL] lilypond_file . paper . evenFooterMarkup = footer_markup [EOL] [EOL] [EOL] def conditionally_save_pdf ( ) : [EOL] save = input ( [string] ) [EOL] if save . lower ( ) == [string] : [EOL] next_file_number = get_next_file_number ( ) [EOL] next_file_name = [string] % str ( next_file_number ) . zfill ( [number] ) [EOL] next_full_file_name = output_directory / next_file_name [EOL] abjad . persist ( next_full_file_name ) . as_pdf ( ) [EOL] print ( [string] % next_file_name ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] score = make_score ( ) [EOL] numerators = make_numerators ( ) [EOL] make_measures ( score , numerators ) [EOL] apply_layout ( score ) [EOL] flute_run_lengths = make_flute_run_lengths ( ) [EOL] make_flute_runs ( score , flute_run_lengths ) [EOL] violin_run_lengths = make_violin_run_lengths ( ) [EOL] make_violin_runs ( score , violin_run_lengths ) [EOL] prolate_flute_runs ( score ) [EOL] prolate_violin_runs ( score ) [EOL] apply_footer ( score . lilypond_file ) [EOL] abjad . show ( score . lilypond_file ) [EOL] conditionally_save_pdf ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
from typing import Any , Tuple , List [EOL] import typing [EOL] import abjad [EOL] import baca [EOL] [EOL] from . make_numerators import make_numerators [EOL] [EOL] [EOL] def make_empty_measures ( score ) : [EOL] print ( [string] ) [EOL] numerators , second_numerators = make_numerators ( ) [EOL] numerators = baca . sequence ( numerators ) . flatten ( ) [EOL] for voice in score . music_voices : [EOL] meter_tokens = [ ( numerator , [number] ) for numerator in numerators ] [EOL] measures = [ abjad . Container ( ) for _ in meter_tokens ] [EOL] voice . extend ( measures ) [EOL] return score [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def set_tuplet_bracket_direction ( score ) : [EOL] print ( [string] ) [EOL] flute_staff = score [ [string] ] [EOL] clarinet_staff = score [ [string] ] [EOL] violin_staff = score [ [string] ] [EOL] [comment] [EOL] [EOL] abjad . override ( flute_staff [ [number] - [number] : ] , [string] , [string] , [string] ) [EOL] abjad . override ( clarinet_staff [ [number] - [number] : ] , [string] , [string] , [string] ) [EOL] abjad . override ( violin_staff [ [number] - [number] : [number] - [number] ] , [string] , [string] , [string] ) [EOL] abjad . override ( violin_staff [ [number] - [number] : ] , [string] , [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def make_score ( ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] flute_staff = abjad . Staff ( [ abjad . Voice ( ) ] ) [EOL] clarinet_staff = abjad . Staff ( [ abjad . Voice ( ) ] ) [EOL] violin_staff = abjad . Staff ( [ abjad . Voice ( ) ] ) [EOL] cello_staff = abjad . Staff ( [ abjad . Voice ( ) ] ) [EOL] [EOL] flute_staff . parallel = True [EOL] clarinet_staff . parallel = True [EOL] violin_staff . parallel = True [EOL] cello_staff . parallel = True [EOL] [EOL] flute_staff [ [number] ] . name = [string] [EOL] clarinet_staff [ [number] ] . name = [string] [EOL] violin_staff [ [number] ] . name = [string] [EOL] cello_staff [ [number] ] . name = [string] [EOL] [EOL] music_voices = [ flute_staff [ [number] ] , clarinet_staff [ [number] ] , violin_staff [ [number] ] , cello_staff [ [number] ] , ] [EOL] [EOL] full_name_hspace = [number] [EOL] short_name_hspace = [number] [EOL] [EOL] flute_staff . name = [string] [EOL] markup = [string] % full_name_hspace [EOL] flute_staff . instrument . name = abjad . Markup ( markup ) [EOL] markup = [string] % short_name_hspace [EOL] flute_staff . instrument . short_name = abjad . Markup ( markup ) [EOL] [EOL] clarinet_staff . name = [string] [EOL] markup = [string] % full_name_hspace [EOL] clarinet_staff . instrument . name = abjad . Markup ( markup ) [EOL] markup = [string] % short_name_hspace [EOL] clarinet_staff . instrument . short_name = abjad . Markup ( markup ) [EOL] [EOL] violin_staff . name = [string] [EOL] markup = [string] % full_name_hspace [EOL] violin_staff . instrument . name = abjad . Markup ( markup ) [EOL] markup = [string] % short_name_hspace [EOL] violin_staff . instrument . short_name = abjad . Markup ( markup ) [EOL] [EOL] cello_staff . name = [string] [EOL] markup = [string] % full_name_hspace [EOL] cello_staff . instrument . name = abjad . Markup ( markup ) [EOL] markup = [string] % short_name_hspace [EOL] cello_staff . instrument . short_name = abjad . Markup ( markup ) [EOL] cello_staff . clef . forced = abjad . Clef ( [string] ) [EOL] cello_staff . bar_line . kind = [string] [EOL] [EOL] instrument_staves = [ flute_staff , clarinet_staff , violin_staff , cello_staff , ] [EOL] staff_group = abjad . StaffGroup ( instrument_staves ) [EOL] staff_group . name = [string] [EOL] score = abjad . Score ( [ staff_group ] ) [EOL] score . instrument_staves = instrument_staves [EOL] [comment] [EOL] [EOL] score . flute_staff = flute_staff [EOL] score . clarinet_staff = clarinet_staff [EOL] score . violin_staff = violin_staff [EOL] score . cello_staff = cello_staff [EOL] [EOL] score . flute_music_voice = flute_staff [ [number] ] [EOL] score . clarinet_music_voice = clarinet_staff [ [number] ] [EOL] score . violin_music_voice = violin_staff [ [number] ] [EOL] score . cello_music_voice = cello_staff [ [number] ] [EOL] [EOL] score . music_voices = music_voices [EOL] [EOL] return score [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Tuple , List [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def add_star_chain_measures ( score ) : [EOL] print ( [string] ) [EOL] meters = [ ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ] [EOL] for music_voice in score . music_voices : [EOL] for meter in meters : [EOL] rest = abjad . Rest ( meter ) [EOL] time_signature = abjad . TimeSignature ( meter ) [EOL] abjad . attach ( time_signature , rest ) [EOL] measure = abjad . Container ( [ rest ] ) [EOL] music_voice . append ( measure ) [EOL] return score [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Literal , Tuple [EOL] import typing_extensions [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def apply_line_breaking ( score ) : [EOL] systems = ( [number] , [number] , [number] ) [EOL] alignment_distances = ( [number] , ) * [number] [EOL] schema = abjad . layout . LayoutSchema ( [number] , systems , alignment_distances ) [EOL] schema . in_seconds = True [EOL] abjad . layout . apply_layout_schema ( score . breaks_voice , schema , adjust_eol = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . make_numerators import make_numerators [EOL] [EOL] [EOL] def get_measures_per_reading ( ) : [EOL] first_numerators , second_numerators = make_numerators ( ) [EOL] return [ len ( reading ) for reading in first_numerators ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Tuple [EOL] import typing [EOL] import abjad [EOL] import quicktions [EOL] [EOL] [EOL] def set_scorewide_spacing ( score ) : [EOL] [docstring] [EOL] reference_tempo = abjad . MetronomeMark ( quicktions . Fraction ( [number] , [number] ) , [number] ) [EOL] [comment] [EOL] reference_pnd = quicktions . Fraction ( [number] , [number] ) [EOL] reference_pair = ( reference_tempo , reference_pnd ) [EOL] reference_spacing = abjad . SpacingIndication ( * reference_pair ) [EOL] score . spacing . scorewide = reference_spacing [EOL] return score [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import abjad [EOL] [EOL] [EOL] def change_inactive_notes_to_rests ( score ) : [EOL] print ( [string] ) [EOL] for leaf in abjad . iterate . leaves_forward_in ( score ) : [EOL] if not getattr ( leaf . history , [string] , True ) : [EOL] abjad . Rest ( leaf ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def add_slurs ( score ) : [EOL] print ( [string] ) [EOL] for instrument_index , staff in enumerate ( score . instrument_staves ) : [EOL] add_slurs_to_staff ( instrument_index , staff ) [EOL] [EOL] [EOL] def add_slurs_to_staff ( instrument_index , staff ) : [EOL] [comment] [EOL] music_voice = staff [ [number] ] [EOL] leaves = abjad . iterate . leaves_forward_in ( music_voice ) [EOL] for note_subrun in abjad . select ( leaves ) . leaves ( pitched = True ) . contiguous ( ) : [EOL] last_note = note_subrun [ - [number] ] [EOL] next_leaf = last_note . next [EOL] if next_leaf is not None : [EOL] note_subrun += ( next_leaf , ) [EOL] if [number] < len ( note_subrun ) : [EOL] add_slurs_to_note_subrun ( note_subrun ) [EOL] [EOL] [EOL] def add_slurs_to_note_subrun ( note_subrun ) : [EOL] text = abjad . Markup ( [string] ) [EOL] spanner = abjad . solid_text_spanner_below_with_nib_at_right ( text , note_subrun ) [EOL] [comment] [EOL] spanner . bound_details__left__stencil_align_dir_y = [number] [EOL] spanner . bound_details__left_broken__padding = - [number] [EOL] spanner . bound_details__left_broken_stencil_align_dir_y = [number] [EOL] text = abjad . Markup ( [string] ) [EOL] spanner . bound_details__left_broken__text = text [EOL] text = abjad . Markup ( [string] ) [EOL] spanner . bound_details__right_broken__text = text [EOL] spanner . bound_details__right_broken__padding = - [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def make_empty_tuplets_trivial ( score ) : [EOL] print ( [string] ) [EOL] for tuplet in abjad . iterate . naive_forward_in ( score , abjad . Tuplet ) : [EOL] if not tuplet . trivial : [EOL] if all ( [ isinstance ( x , abjad . Rest ) for x in tuplet . leaves ] ) : [EOL] rests = abjad . make_rests ( [ tuplet . duration . target ] ) [EOL] tuplet [ : ] = rests [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL]	0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def hide_grey_note_heads ( score ) : [EOL] instrument_groups = abjad . get_inactive_measure_groups ( score ) [EOL] for leaf in abjad . iterate . leaves_forward_in ( instrument_groups ) : [EOL] leaf . note_head . transparent = True [EOL] leaf . note_head . no_ledgers = True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict , Union [EOL] import typing [EOL] best_fittings = { [number] : { [number] : [number] , [number] : [number] } , [number] : { } , [number] : { } , [number] : { } , [number] : { } , [number] : { } } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,typing.Union[typing.Dict[typing.Any,typing.Any],typing.Dict[builtins.int,builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from desir . etc . legatissimo . py . smart_filters import ( bad_harmony_filter , bad_succession_filter , missing_pitch_filter , unison_cross_filter , unprepared_unison_filter , voice_crossing_filter , ) [EOL] [EOL] [EOL] def filter_candidate_arrays ( candidate_arrays , pitch_set , forbidden_harmonic_interval_classes , allowed_harmonic_intervals , ) : [EOL] print ( ) [EOL] print ( [string] ) [EOL] message = [string] [EOL] message += [string] % len ( candidate_arrays ) [EOL] message += [string] [EOL] print ( message ) [EOL] candidate_arrays = unprepared_unison_filter ( candidate_arrays ) [EOL] candidate_arrays = unison_cross_filter ( candidate_arrays ) [EOL] candidate_arrays = voice_crossing_filter ( candidate_arrays ) [EOL] candidate_arrays = missing_pitch_filter ( candidate_arrays , pitch_set ) [EOL] candidate_arrays = bad_harmony_filter ( candidate_arrays , forbidden_harmonic_interval_classes , allowed_harmonic_intervals , ) [EOL] candidate_arrays = bad_succession_filter ( candidate_arrays ) [EOL] print ( ) [EOL] return candidate_arrays [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import abjad [EOL] import baca [EOL] [EOL] from . get_measures_per_reading import get_measures_per_reading [EOL] [EOL] [EOL] def get_active_measure_groups ( score ) : [EOL] reading_lengths = get_measures_per_reading ( ) [EOL] [EOL] flute_staff = score [ [string] ] [EOL] flute_measures = baca . sequence ( abjad . iterate . measures_forward_in ( flute_staff ) ) [EOL] flute_measure_groups = flute_measures . partition_by_lengths ( reading_lengths ) [EOL] [EOL] clarinet_staff = score [ [string] ] [EOL] clarinet_measures = baca . sequence ( abjad . iterate . measures_forward_in ( clarinet_staff ) ) [EOL] clarinet_measure_groups = clarinet_measures . partition_by_lengths ( reading_lengths ) [EOL] [EOL] violin_staff = score [ [string] ] [EOL] violin_measures = baca . sequence ( abjad . iterate . measures_forward_in ( violin_staff ) ) [EOL] violin_measure_groups = violin_measures . partition_by_lengths ( reading_lengths ) [EOL] [EOL] cello_staff = score [ [string] ] [EOL] cello_measures = baca . sequence ( abjad . iterate . measures_forward_in ( cello_staff ) ) [EOL] cello_measure_groups = cello_measures . partition_by_lengths ( reading_lengths ) [EOL] [EOL] active_flute_measure_groups = [ ] [EOL] active_flute_measure_groups . append ( flute_measure_groups [ [number] ] ) [EOL] active_flute_measure_groups . append ( flute_measure_groups [ [number] ] ) [EOL] active_flute_measure_groups . append ( flute_measure_groups [ [number] ] ) [EOL] active_flute_measure_groups . append ( flute_measure_groups [ [number] ] ) [EOL] [EOL] active_clarinet_measure_groups = [ ] [EOL] active_clarinet_measure_groups . append ( clarinet_measure_groups [ [number] ] ) [EOL] active_clarinet_measure_groups . append ( clarinet_measure_groups [ [number] ] ) [EOL] active_clarinet_measure_groups . append ( clarinet_measure_groups [ [number] ] ) [EOL] active_clarinet_measure_groups . append ( clarinet_measure_groups [ [number] ] ) [EOL] [EOL] active_violin_measure_groups = [ ] [EOL] active_violin_measure_groups . append ( violin_measure_groups [ [number] ] ) [EOL] active_violin_measure_groups . append ( violin_measure_groups [ [number] ] ) [EOL] active_violin_measure_groups . append ( violin_measure_groups [ [number] ] ) [EOL] active_violin_measure_groups . append ( violin_measure_groups [ [number] ] ) [EOL] [EOL] active_cello_measure_groups = [ ] [EOL] active_cello_measure_groups . append ( cello_measure_groups [ [number] ] ) [EOL] active_cello_measure_groups . append ( cello_measure_groups [ [number] ] ) [EOL] active_cello_measure_groups . append ( cello_measure_groups [ [number] ] ) [EOL] active_cello_measure_groups . append ( cello_measure_groups [ [number] ] ) [EOL] [EOL] return ( active_flute_measure_groups , active_clarinet_measure_groups , active_violin_measure_groups , active_cello_measure_groups , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import abjad [EOL] import baca [EOL] import quicktions [EOL] [EOL] from . get_measures_per_reading import get_measures_per_reading [EOL] [EOL] [docstring] [EOL] [EOL] [EOL] def make_tempi ( ) : [EOL] [comment] [EOL] [comment] [EOL] tempi = [ [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] return tempi [EOL] [EOL] [EOL] def make_tempo_spanners ( ) : [EOL] tempo_spanners = [ ] [EOL] tempi = make_tempi ( ) [EOL] for tempo in tempi : [EOL] duration = quicktions . Fraction ( [number] , [number] ) [EOL] tempo_indication = abjad . MetronomeMark ( duration , tempo ) [EOL] tempo_spanner = abjad . TempoSpannerProportional ( [ ] , tempo_indication ) [EOL] tempo_spanners . append ( tempo_spanner ) [EOL] return tempo_spanners [EOL] [EOL] [EOL] def apply_tempo_spanners ( score ) : [EOL] lengths = get_measures_per_reading ( ) [EOL] [comment] [EOL] for staff in abjad . iterate . naive_forward_in ( score , abjad . Staff ) : [EOL] measures = baca . sequence ( abjad . iterate . measures_forward_in ( staff ) ) [EOL] readings = measures . partition_by_lengths ( lengths , True , True ) [EOL] tempo_spanners = make_tempo_spanners ( ) [EOL] for reading , tempo_spanner in zip ( readings , tempo_spanners ) : [EOL] tempo_spanner . extend ( reading ) [EOL] return score [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] [EOL] from . add_timepoints_to_staff import add_timepoints_to_staff [EOL] [EOL] [EOL] def insert_ossia_pitch_staves ( score ) : [EOL] print ( [string] ) [EOL] ossia_treble = make_ossia_pitch_staff ( ) [EOL] ossia_treble . name = [string] [EOL] ossia_treble . accidental . style = [string] [EOL] ossia_treble . note_head . duration_log = [number] [EOL] ossia_treble . stem . transparent = True [EOL] ossia_treble . text_script . staff_padding = [number] [EOL] ossia_bass = make_ossia_pitch_staff ( ) [EOL] ossia_bass . name = [string] [EOL] ossia_bass . accidental . style = [string] [EOL] ossia_bass . note_head . duration_log = [number] [EOL] ossia_bass . stem . transparent = True [EOL] ossia_bass . clef . forced = abjad . Clef ( [string] ) [EOL] score . insert ( [number] , ossia_bass ) [EOL] score . insert ( [number] , ossia_treble ) [EOL] add_timepoints_to_staff ( score , ossia_treble ) [EOL] add_timepoints_to_staff ( score , ossia_bass ) [EOL] for leaf in abjad . iterate ( ossia_treble ) . leaves ( ) : [EOL] skip = abjad . Skip ( leaf . written_duration ) [EOL] abjad . mutate . replace ( leaf , skip ) [EOL] for leaf in abjad . iterate ( ossia_bass ) . leaves ( ) : [EOL] skip = abjad . Skip ( leaf . written_duration ) [EOL] abjad . mutate . replace ( leaf , skip ) [EOL] return score [EOL] [EOL] [EOL] def make_ossia_pitch_staff ( ) : [EOL] staff = abjad . Staff ( ) [EOL] staff . remove_commands . add ( [string] ) [EOL] staff . clef . transparent = True [EOL] staff . bar_line . transparent = True [EOL] staff . staff . font_size = - [number] [EOL] tmp = abjad . SchemeFunction ( [string] , - [number] ) [EOL] staff . staff . staff_space = tmp [EOL] staff . staff . thickness = tmp [EOL] staff . text_script . staff_padding = [number] [EOL] return staff [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Tuple [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def calculate_score_statistics ( score ) : [EOL] fl = score [ [string] ] [EOL] cl = score [ [string] ] [EOL] vn = score [ [string] ] [EOL] vc = score [ [string] ] [EOL] music_staves = ( fl , cl , vn , vc ) [EOL] total_notes , total_rests = [number] , [number] [EOL] pitch_vector , pc_vector = { } , { } [EOL] for leaf in abjad . iterate . leaves_forward_in ( music_staves ) : [EOL] if isinstance ( leaf , abjad . Note ) : [EOL] total_notes += [number] [EOL] elif isinstance ( leaf , abjad . Rest ) : [EOL] total_rests += [number] [EOL] else : [EOL] raise TypeError ( [string] ) [EOL] for pitch in abjad . PitchSet ( leaf ) : [EOL] try : [EOL] pitch_vector [ pitch . number ] += [number] [EOL] except KeyError : [EOL] pitch_vector [ pitch . number ] = [number] [EOL] try : [EOL] pc_vector [ pitch . pitch_class . number ] += [number] [EOL] except KeyError : [EOL] pc_vector [ pitch . pitch_class . number ] = [number] [EOL] print ( [string] % total_notes ) [EOL] print ( [string] % total_rests ) [EOL] for vector in ( pitch_vector , pc_vector ) : [EOL] for key , value in sorted ( vector . items ( ) ) : [EOL] if value == [number] : [EOL] suffix = [string] [EOL] else : [EOL] suffix = [string] [EOL] print ( [string] % ( str ( key ) . rjust ( [number] ) , str ( value ) . rjust ( [number] ) , suffix ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def read_fittings_from_disk ( section_index , subsection_index ) : [EOL] section_number = section_index + [number] [EOL] subsection_number = subsection_index + [number] [EOL] string = [string] [EOL] string += [string] [EOL] string %= ( section_number , subsection_number , section_number , subsection_number , ) [EOL] fittings = [ ] [EOL] exec ( string ) [EOL] fittings = [ abjad . PitchArray ( x ) for x in fittings ] [EOL] return fittings [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import abjad [EOL] [EOL] [EOL] def configure_lilypond_file ( score ) : [EOL] [docstring] [EOL] lilypond_file = score . lilypond_file [EOL] lilypond_file . default_paper_size = [string] [EOL] lilypond_file . global_staff_size = [number] [EOL] lilypond_file . header . composer = make_composer_markup ( ) [EOL] lilypond_file . header . title = make_title_markup ( ) [EOL] lilypond_file . layout . contexts . append ( [ [string] ] ) [EOL] lilypond_file . layout . indent = [number] [EOL] lilypond_file . layout . ragged_right = True [EOL] lilypond_file . paper . left_margin = [number] [EOL] lilypond_file . paper . minimal_page_breaking = True [EOL] lilypond_file . paper . ragged_bottom = True [EOL] lilypond_file . paper . ragged_last_bottom = True [EOL] lilypond_file . paper . top_margin = [number] [EOL] return score [EOL] [EOL] [EOL] def make_title_markup ( ) : [EOL] title_markup = [string] [EOL] [EOL] return abjad . Markup ( title_markup ) [EOL] [EOL] [EOL] def make_composer_markup ( ) : [EOL] composer_markup = [string] [EOL] return abjad . Markup ( composer_markup ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def teferim_rests_to_skips ( score ) : [EOL] ossia_treble = score [ [string] ] [EOL] for rest in abjad . iterate . naive_forward_in ( ossia_treble , abjad . Rest ) : [EOL] abjad . Skip ( rest ) [EOL] ossia_bass = score [ [string] ] [EOL] for rest in abjad . iterate . naive_forward_in ( ossia_bass , abjad . Rest ) : [EOL] abjad . Skip ( rest ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import abjad [EOL] [EOL] from . transpose import transpose_bass_clarinet [EOL] [EOL] [EOL] def populate_star_chain_measures ( score ) : [EOL] print ( [string] ) [EOL] violin_staff = score [ [string] ] [EOL] clarinet_staff = score [ [string] ] [EOL] [EOL] violin_measures = abjad . iterate . measures_forward_in ( violin_staff , [number] - [number] ) [EOL] violin_measures = list ( violin_measures ) [EOL] assert len ( violin_measures ) == [number] [EOL] [EOL] bass_clarinet_measures = abjad . iterate . measures_forward_in ( clarinet_staff , [number] - [number] ) [EOL] bass_clarinet_measures = list ( bass_clarinet_measures ) [EOL] assert len ( bass_clarinet_measures ) == [number] [EOL] [EOL] violin_pitch = abjad . NamedPitch ( [number] ) [EOL] [EOL] leaves = [ abjad . Note ( violin_pitch , ( [number] , [number] ) ) , abjad . Rest ( ( [number] , [number] ) ) ] [EOL] tuplet = abjad . Tuplet . from_duration ( [number] , leaves ) [EOL] tuplet . leaves [ [number] ] . note_head . style = [string] [EOL] tuplet . leaves [ [number] ] . dynamics . mark = [string] [EOL] violin_measures [ [number] ] [ : ] = [ tuplet ] [EOL] [EOL] markup = abjad . Markup ( [string] ) [EOL] leaves = violin_measures [ [number] ] . leaves [EOL] spanner = abjad . solid_text_spanner_below_with_nib_at_right ( markup , leaves ) [EOL] spanner . thickness = [number] [EOL] spanner . bound_details__left__stencil_align_dir_y = [number] [EOL] [EOL] leaves = [ abjad . Rest ( ( [number] , [number] ) ) ] [EOL] tuplet = abjad . Tuplet . from_duration ( [number] , leaves ) [EOL] violin_measures [ [number] ] [ : ] = [ tuplet ] [EOL] [EOL] leaves = [ abjad . Note ( violin_pitch , ( [number] , [number] ) ) , abjad . Rest ( ( [number] , [number] ) ) ] [EOL] tuplet = abjad . Tuplet . from_duration ( [number] , leaves ) [EOL] tuplet . leaves [ [number] ] . note_head . style = [string] [EOL] tuplet . leaves [ [number] ] . dynamics . mark = [string] [EOL] violin_measures [ [number] ] [ : ] = [ tuplet ] [EOL] [EOL] markup = abjad . Markup ( [string] ) [EOL] leaves = violin_measures [ [number] ] . leaves [EOL] spanner = abjad . solid_text_spanner_below_with_nib_at_right ( markup , leaves ) [EOL] spanner . thickness = [number] [EOL] spanner . bound_details__left__stencil_align_dir_y = [number] [EOL] [EOL] leaves = [ abjad . Rest ( ( [number] , [number] ) ) ] [EOL] tuplet = abjad . Tuplet . from_duration ( [number] , leaves ) [EOL] violin_measures [ [number] ] [ : ] = [ tuplet ] [EOL] [EOL] leaves = [ abjad . Note ( violin_pitch , ( [number] , [number] ) ) , abjad . Rest ( ( [number] , [number] ) ) , abjad . Rest ( ( [number] , [number] ) ) , ] [EOL] tuplet = abjad . Tuplet . from_duration ( ( [number] , [number] ) , leaves ) [EOL] tuplet . leaves [ [number] ] . note_head . style = [string] [EOL] tuplet . leaves [ [number] ] . dynamics . mark = [string] [EOL] violin_measures [ [number] ] [ : ] = [ tuplet ] [EOL] [EOL] markup = abjad . Markup ( [string] ) [EOL] leaves = violin_measures [ [number] ] . leaves [ : [number] ] [EOL] spanner = abjad . solid_text_spanner_below_with_nib_at_right ( markup , leaves ) [EOL] spanner . thickness = [number] [EOL] spanner . bound_details__left__stencil_align_dir_y = [number] [EOL] [EOL] bass_clarinet_pitch = abjad . NamedPitch ( - [number] ) [EOL] [EOL] leaves = [ abjad . Rest ( ( [number] , [number] ) ) ] [EOL] tuplet = abjad . Tuplet . from_duration ( [number] , leaves ) [EOL] bass_clarinet_measures [ [number] ] [ : ] = tuplet * [number] [EOL] bass_clarinet_measures [ [number] ] [ : ] = tuplet * [number] [EOL] bass_clarinet_measures [ [number] ] [ : ] = tuplet * [number] [EOL] bass_clarinet_measures [ [number] ] [ : ] = tuplet * [number] [EOL] [EOL] note = abjad . Note ( bass_clarinet_pitch , ( [number] , [number] ) ) [EOL] leaves = [ abjad . Rest ( ( [number] , [number] ) ) , note , abjad . Rest ( ( [number] , [number] ) ) ] [EOL] tuplet = abjad . Tuplet . from_duration ( ( [number] , [number] ) , leaves ) [EOL] bass_clarinet_measures [ [number] ] [ : ] = [ tuplet ] [EOL] [EOL] leaves = bass_clarinet_measures [ [number] ] . leaves [ [number] : [number] ] [EOL] abjad . hairpin ( [string] , leaves ) [EOL] [EOL] transpose_bass_clarinet ( bass_clarinet_measures ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def adjust_line_breaking ( score ) : [EOL] print ( [string] ) [EOL] [EOL] for measure in abjad . iterate . measures_forward_in ( score . breaks_voice ) : [EOL] measure . breaks . page = None [EOL] [EOL] [comment] [EOL] abjad . iterate . get_measure_number ( score . breaks_voice , [number] ) . breaks . y = [number] [EOL] abjad . iterate . get_measure_number ( score . breaks_voice , [number] ) . breaks . y = [number] [EOL] abjad . iterate . get_measure_number ( score . breaks_voice , [number] ) . breaks . page = True [EOL] [EOL] [comment] [EOL] abjad . iterate . get_measure_number ( score . breaks_voice , [number] ) . breaks . y = [number] [EOL] abjad . iterate . get_measure_number ( score . breaks_voice , [number] ) . breaks . y = [number] [EOL] abjad . iterate . get_measure_number ( score . breaks_voice , [number] ) . breaks . y = [number] [EOL] abjad . iterate . get_measure_number ( score . breaks_voice , [number] ) . breaks . y = [number] [EOL] abjad . iterate . get_measure_number ( score . breaks_voice , [number] ) . breaks . page = True [EOL] [EOL] [comment] [EOL] abjad . iterate . get_measure_number ( score . breaks_voice , [number] ) . breaks . y = [number] [EOL] abjad . iterate . get_measure_number ( score . breaks_voice , [number] ) . breaks . y = [number] [EOL] abjad . iterate . get_measure_number ( score . breaks_voice , [number] ) . breaks . y = [number] [EOL] abjad . iterate . get_measure_number ( score . breaks_voice , [number] ) . breaks . page = True [EOL] [EOL] [comment] [EOL] abjad . iterate . get_measure_number ( score . breaks_voice , [number] ) . breaks . y = [number] [EOL] measure = abjad . iterate . get_measure_number ( score . breaks_voice , [number] ) [EOL] measure . breaks . eold_adjustment = True [EOL] measure . breaks . line = True [EOL] [EOL] measure = abjad . iterate . get_measure_number ( score . breaks_voice , [number] ) [EOL] measure . breaks . y = [number] [EOL] measure . breaks . alignment_distances = ( [number] , [number] , [number] ) [EOL] measure . breaks . eol_adjustment = None [EOL] measure . breaks . line = None [EOL] [EOL] measure = abjad . iterate . get_measure_number ( score . breaks_voice , [number] ) [EOL] measure . breaks . line = True [EOL] directive = [string] [EOL] measure . directives . before . append ( directive ) [EOL] measure . breaks . eol_adjustment = True [EOL] [EOL] measure = abjad . iterate . get_measure_number ( score . breaks_voice , [number] ) [EOL] measure . breaks . y = [number] [EOL] measure . breaks . alignment_distances = ( [number] , [number] , [number] , [number] ) [EOL] [EOL] abjad . iterate . get_measure_number ( score . breaks_voice , [number] ) . breaks . page = True [EOL] [EOL] [comment] [EOL] abjad . iterate . get_measure_number ( score . breaks_voice , [number] ) . breaks . y = [number] [EOL] abjad . iterate . get_measure_number ( score . breaks_voice , [number] ) . breaks . y = [number] [EOL] abjad . iterate . get_measure_number ( score . breaks_voice , [number] ) . breaks . y = [number] [EOL] measure = abjad . iterate . get_measure_number ( score . breaks_voice , [number] ) [EOL] measure . breaks . y = [number] [EOL] measure . breaks . eol_adjustment = None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] [EOL] from . get_active_measure_groups import get_active_measure_groups [EOL] from . get_inactive_measure_groups import get_inactive_measure_groups [EOL] [EOL] [EOL] def mark_active_and_inactive ( score ) : [EOL] print ( [string] ) [EOL] active_measure_groups = get_active_measure_groups ( score ) [EOL] for measure in abjad . iterate . measures_forward_in ( active_measure_groups ) : [EOL] measure . history . active = True [EOL] for leaf in abjad . iterate . leaves_forward_in ( measure ) : [EOL] leaf . history . active = True [EOL] inactive_measure_groups = get_inactive_measure_groups ( score ) [EOL] for measure in abjad . iterate . measures_forward_in ( inactive_measure_groups ) : [EOL] measure . history . active = False [EOL] for leaf in abjad . iterate . leaves_forward_in ( measure ) : [EOL] leaf . history . active = False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def apply_instrument_spanners ( score ) : [EOL] flute = score [ [string] ] [EOL] clarinet = score [ [string] ] [EOL] [EOL] full_name_hspace = [number] [EOL] short_name_hspace = [number] [EOL] [EOL] piccolo_measures = list ( abjad . iterate . measures_forward_in ( flute , [number] , [number] ) ) [EOL] first_leaf = abjad . get . leaf ( piccolo_measures [ : ] , [number] ) [EOL] markup = abjad . Markup ( [string] ) [EOL] first_leaf . markup . up . append ( markup ) [EOL] full_name = abjad . Markup ( [string] % ( full_name_hspace , full_name_hspace ) ) [EOL] short_name = abjad . Markup ( [string] % ( short_name_hspace , short_name_hspace ) ) [EOL] abjad . Instrument ( piccolo_measures , full_name , short_name ) [EOL] [EOL] last_flute_measures = list ( abjad . iterate . measures_forward_in ( flute , [number] - [number] ) ) [EOL] first_leaf = abjad . get ( last_flute_measures [ : ] , [number] ) [EOL] markup = abjad . Markup ( [string] ) [EOL] first_leaf . markup . up . append ( markup ) [EOL] full_name = abjad . Markup ( [string] % ( full_name_hspace , full_name_hspace ) ) [EOL] short_name = abjad . Markup ( [string] % ( short_name_hspace , short_name_hspace ) ) [EOL] abjad . Instrument ( last_flute_measures , full_name , short_name ) [EOL] [EOL] last_clarinet_measures = list ( abjad . iterate . measures_forward_in ( clarinet , [number] - [number] ) ) [EOL] first_leaf = abjad . get . leaf ( last_clarinet_measures [ : ] , [number] ) [EOL] markup = abjad . Markup ( [string] ) [EOL] first_leaf . markup . up . append ( markup ) [EOL] full_name = abjad . Markup ( [string] % ( full_name_hspace , full_name_hspace ) ) [EOL] short_name = abjad . Markup ( [string] % ( short_name_hspace , short_name_hspace ) ) [EOL] abjad . Instrument ( last_clarinet_measures , full_name , short_name ) [EOL] [EOL] last_clarinet_measures [ [number] ] . clef . forced = abjad . Clef ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import abjad [EOL] [EOL] [EOL] def apply_score_header ( score ) : [EOL] lilypond_file = score . lilypond_file [EOL] lilypond_file . paper . oddHeaderMarkup = abjad . Markup ( [string] ) [EOL] lilypond_file . paper . evenHeaderMarkup = abjad . Markup ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import abjad [EOL] [EOL] [EOL] def generate_furled_compositions ( n , length = None ) : [EOL] assert isinstance ( n , int ) [EOL] assert [number] < n [EOL] for composition in abjad . mathx . integer_compositions ( n ) : [EOL] if all ( [ abjad . mathx . is_assignable ( x ) for x in composition ] ) : [EOL] if length is not None : [EOL] if len ( composition ) == length : [EOL] yield composition [EOL] else : [EOL] yield composition [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import abjad [EOL] [EOL] from . add_breaks_voice import add_breaks_voice [EOL] from . add_dashed_bar_lines import add_dashed_bar_lines [EOL] from . add_double_bar_lines import add_double_bar_lines [EOL] from . adjust_final_bar_line import adjust_final_bar_line [EOL] from . adjust_length_one_tuplets import adjust_length_one_tuplets [EOL] from . adjust_line_breaking import adjust_line_breaking [EOL] from . apply_line_breaking import apply_line_breaking [EOL] from . apply_manual_adjustments import apply_manual_adjustments [EOL] from . configure_lilypond_file import configure_lilypond_file [EOL] from . configure_score import configure_score [EOL] from . footers import apply_score_footer [EOL] from . headers import apply_score_header [EOL] from . set_pnd_manually import set_pnd_manually [EOL] from . set_tuplet_bracket_direction import set_tuplet_bracket_direction [EOL] from . trim_compact_measures import trim_compact_measures [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def apply_layout ( score , output_directory ) : [EOL] print ( [string] ) [EOL] trim_compact_measures ( score ) [EOL] adjust_length_one_tuplets ( score ) [EOL] configure_lilypond_file ( score ) [EOL] configure_score ( score ) [EOL] set_tuplet_bracket_direction ( score ) [EOL] add_breaks_voice ( score ) [EOL] apply_line_breaking ( score ) [EOL] adjust_line_breaking ( score ) [EOL] abjad . label . measure_numbers ( score ) [EOL] set_pnd_manually ( score ) [EOL] add_dashed_bar_lines ( score ) [EOL] add_double_bar_lines ( score ) [EOL] adjust_final_bar_line ( score ) [EOL] apply_score_header ( score ) [EOL] apply_score_footer ( score ) [EOL] apply_manual_adjustments ( score ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def configure_score ( score ) : [EOL] score . bar_line . hair_thickness = [number] [EOL] score . bar_line . transparent = True [EOL] [EOL] tmp = abjad . SchemeFunction ( [string] ) [EOL] score . bar_number . break_visibility = tmp [EOL] score . bar_number . font_size = [number] [EOL] score . bar_number . padding = [number] [EOL] [EOL] score . beam . auto_beaming = False [EOL] score . beam . breakable = True [EOL] score . beam . direction = [string] [EOL] score . beam . positions = ( - [number] , - [number] ) [EOL] [EOL] score . dynamic_line_spanner . outside_staff_priority = False [EOL] score . dynamic_line_spanner . staff_padding = [number] [EOL] [EOL] score . glissando . breakable = True [EOL] [EOL] score . hairpin . outside_staff_priority = False [EOL] score . hairpin . to_bar_line = False [EOL] [EOL] score . non_musical_paper_column . line_break_permission = False [EOL] score . non_musical_paper_column . page_break_permission = False [EOL] [EOL] score . spacing . strict_note_spacing = True [EOL] score . spacing . uniform_stretching = True [EOL] [EOL] tempo_indication = abjad . MetronomeMark ( abjad . Duration ( [number] , [number] ) , [number] ) [EOL] score . tempo . extra_offset = ( [number] , [number] ) [EOL] score . tempo . forced = tempo_indication [EOL] score . tempo . Y_extent = ( [number] , [number] ) [EOL] [EOL] score . text_script . staff_padding = [number] [EOL] [EOL] score . text_spanner . breakable = True [EOL] score . text_spanner . outside_staff_priority = False [EOL] score . text_spanner . staff_padding = [number] [EOL] score . text_spanner . Y_extent = ( - [number] , [number] ) [EOL] [EOL] score . tuplet_bracket . direction = [string] [EOL] score . tuplet_bracket . padding = [number] [EOL] score . tuplet_bracket . staff_padding = [number] [EOL] score . tuplet_bracket . tuplet_full_length = True [EOL] [EOL] score . tuplet_number . font_size = [number] [EOL] tmp = abjad . SchemeFunction ( [string] ) [EOL] score . tuplet_number . text = tmp [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] return score [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pathlib [EOL] [EOL] import abjad [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def extract_parts ( score , parts_directory ) : [EOL] [docstring] [EOL] print ( [string] ) [EOL] parts_directory = [string] [EOL] abjad . save_source_ly ( score , parts_directory ) [EOL] for instrument_name in ( [string] , [string] , [string] , [string] ) : [EOL] print ( [string] % instrument_name ) [EOL] save_part_ly ( score , instrument_name , parts_directory ) [EOL] save_part_pdf ( score , instrument_name , parts_directory ) [EOL] [EOL] [EOL] def save_source ( score , parts_directory ) : [EOL] print ( [string] ) [EOL] raise Exception ( NotImplemented ) [EOL] file_name = pathlib . Path ( parts_directory , [string] ) [EOL] abjad . write_ly ( score . lilypond_file , file_name ) [EOL] [EOL] [EOL] def save_part_ly ( score , instrument_name , parts_directory ) : [EOL] raise Exception ( NotImplemented ) [EOL] part_voice_name = f"{ instrument_name . upper ( ) } [string] " [EOL] part_voice = score [ part_voice_name ] [EOL] file_name = pathlib . Path ( parts_directory , instrument_name + [string] ) [EOL] abjad . write_ly ( part_voice , file_name ) [EOL] [EOL] [EOL] def save_part_pdf ( score , instrument_name , parts_directory ) : [EOL] raise Exception ( NotImplemented ) [EOL] part_voice_name = f"{ instrument_name . upper ( ) } [string] " [EOL] part_voice = score [ part_voice_name ] [EOL] file_name = pathlib . Path ( parts_directory , instrument_name + [string] ) [EOL] abjad . write_pdf ( part_voice , file_name ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . add_star_chain_measures import add_star_chain_measures [EOL] from . apply_instrument_spanners import apply_instrument_spanners [EOL] from . cast_violin_gridati import cast_violin_gridati [EOL] from . populate_star_chain_measures import populate_star_chain_measures [EOL] [EOL] [EOL] def add_star_chain ( score ) : [EOL] print ( [string] ) [EOL] cast_violin_gridati ( score ) [EOL] add_star_chain_measures ( score ) [EOL] populate_star_chain_measures ( score ) [EOL] apply_instrument_spanners ( score ) [EOL] return score [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def add_breaks_voice ( score ) : [EOL] print ( [string] ) [EOL] flute_music_voice = score . flute_music_voice [EOL] meter_list = abjad . Meter . extract_meter_list ( [ flute_music_voice ] ) [EOL] measures = [ abjad . Container ( ) for _ in meter_list ] [EOL] breaks_voice = abjad . Voice ( measures ) [EOL] breaks_voice . name = [string] [EOL] assert score . flute_staff . parallel [EOL] score . flute_staff . append ( breaks_voice ) [EOL] score . breaks_voice = breaks_voice [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] import baca [EOL] [EOL] [EOL] def apply_sketch_footer ( score , output_directory ) : [EOL] lilypond_file = score . lilypond_file [EOL] footer_string = [string] [EOL] next_file_number = baca . get_next_file_number ( output_directory , [string] ) [EOL] footer_string += str ( next_file_number ) [EOL] footer_markup = abjad . Markup ( [string] % footer_string ) [EOL] lilypond_file . paper . oddFooterMarkup = footer_markup [EOL] lilypond_file . paper . evenFooterMarkup = footer_markup [EOL] return score [EOL] [EOL] [EOL] def apply_score_footer ( score ) : [EOL] lilypond_file = score . lilypond_file [EOL] lilypond_file . paper . oddFooterMarkup = abjad . Markup . big_centered_page_number ( ) [EOL] lilypond_file . paper . evenFooterMarkup = abjad . Markup . big_centered_page_number ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Literal , Tuple [EOL] import typing_extensions [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def add_breath_rests ( score ) : [EOL] print ( [string] ) [EOL] flute = score . flute_staff [ [number] ] [EOL] clarinet = score . clarinet_staff [ [number] ] [EOL] violin = score . violin_staff [ [number] ] [EOL] cello = score . cello_staff [ [number] ] [EOL] [EOL] abjad . Rest ( abjad . iterate . get_measure_leaf ( flute , [number] , [number] ) ) [EOL] abjad . Rest ( abjad . iterate . get_measure_leaf ( flute , [number] , [number] ) ) [EOL] abjad . Rest ( abjad . iterate . get_measure_leaf ( flute , [number] , [number] ) ) [EOL] abjad . Rest ( abjad . iterate . get_measure_leaf ( flute , [number] , - [number] ) ) [EOL] abjad . Rest ( abjad . iterate . get_measure_leaf ( flute , [number] , - [number] ) ) [EOL] abjad . Rest ( abjad . iterate . get_measure_leaf ( flute , [number] , - [number] ) ) [EOL] [EOL] [comment] [EOL] measure_numbers = ( [number] , [number] , [number] , [number] , [number] ) [EOL] for measure_number in measure_numbers : [EOL] measure = abjad . iterate . get_measure_number ( flute , measure_number ) [EOL] measure [ [number] ] [ : ] = [ abjad . Rest ( ( [number] , [number] ) ) ] [EOL] [EOL] abjad . Rest ( abjad . iterate . get_measure_leaf ( clarinet , [number] , [number] ) ) [EOL] abjad . Rest ( abjad . iterate . get_measure_leaf ( clarinet , [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] note = abjad . iterate . get_measure_leaf ( violin , [number] , - [number] ) [EOL] note . shorten ( abjad . Duration ( [number] , [number] ) ) [EOL] [EOL] note = abjad . iterate . get_measure_leaf ( cello , [number] , - [number] ) [EOL] note . shorten ( abjad . Duration ( [number] , [number] ) ) [EOL] [EOL] note = abjad . iterate . get_measure_leaf ( violin , [number] , - [number] ) [EOL] note . shorten ( abjad . Duration ( [number] , [number] ) ) [EOL] [EOL] note = abjad . iterate . get_measure_leaf ( cello , [number] , - [number] ) [EOL] prolated_duration = abjad . Duration ( [number] , [number] ) * abjad . Duration ( [number] , [number] ) [EOL] note . shorten ( prolated_duration ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def adjust_time_signatures ( score ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def add_dynamics ( score ) : [EOL] print ( [string] ) [EOL] for instrument_index , staff in enumerate ( score . instrument_staves ) : [EOL] add_dynamics_to_staff ( instrument_index , staff ) [EOL] [EOL] [EOL] def add_dynamics_to_staff ( instrument_index , staff ) : [EOL] leaves = abjad . iterate . leaves_forward_in ( staff ) [EOL] for note_subrun in abjad . select ( leaves ) . leaves ( pitched = True ) . contiguous ( ) : [EOL] last_note = note_subrun [ - [number] ] [EOL] next_leaf = last_note . next [EOL] if next_leaf is not None : [EOL] note_subrun += ( next_leaf , ) [EOL] if [number] < len ( note_subrun ) : [EOL] add_dynamics_to_note_subrun ( note_subrun ) [EOL] [EOL] [EOL] def add_dynamics_to_note_subrun ( note_subrun ) : [EOL] [docstring] [EOL] minimum_dynamic , maximum_dynamic = [string] , [string] [EOL] if len ( note_subrun ) == [number] : [EOL] note_subrun [ [number] ] . dynamics . mark = minimum_dynamic [EOL] abjad . attach ( abjad . StartHairpin ( [string] ) , note_subrun [ [number] ] ) [EOL] note_subrun [ - [number] ] . dynamics . mark = maximum_dynamic [EOL] else : [EOL] left , right = partition_notes_in_half_by_duration_prolated ( note_subrun ) [EOL] abjad . attach ( abjad . StartHairpin ( [string] ) , left [ [number] ] ) [EOL] abjad . attach ( abjad . StartHairpin ( [string] ) , right [ [number] ] ) [EOL] left [ [number] ] . dynamics . mark = minimum_dynamic [EOL] right [ [number] ] . dynamics . mark = maximum_dynamic [EOL] [EOL] [EOL] def partition_notes_in_half_by_duration_prolated ( notes ) : [EOL] prolated_duration = abjad . sum_prolated ( notes ) [EOL] halfway = prolated_duration / [number] [EOL] parts = abjad . partition_noncyclic_with_overhang_by_durations_prolated_not_less_than ( notes , [ halfway ] ) [EOL] parts = list ( parts ) [EOL] if len ( parts ) == [number] : [EOL] left , right = notes [ : [number] ] , notes [ [number] : ] [EOL] elif len ( parts ) == [number] : [EOL] left , right = parts [EOL] if len ( right ) == [number] : [EOL] right = left [ - [number] : ] + right [EOL] left = left [ : - [number] ] [EOL] else : [EOL] message = [string] [EOL] message %= parts [EOL] raise Exception ( message ) [EOL] return left , right [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Union , Tuple , List [EOL] import typing [EOL] import os [EOL] [EOL] import abjad [EOL] import baca [EOL] import quicktions [EOL] [EOL] output_directory = [string] [EOL] [EOL] [EOL] def make_score ( ) : [EOL] flute_staff = abjad . Staff ( ) [EOL] clarinet_staff = abjad . Staff ( ) [EOL] cello_staff = abjad . Staff ( ) [EOL] cello_staff . bar_line . kind = [string] [EOL] flute_staff . name = [string] [EOL] flute_staff . instrument . name = [string] [EOL] flute_staff . instrument . short_name = [string] [EOL] clarinet_staff . name = [string] [EOL] clarinet_staff . instrument . name = [string] [EOL] clarinet_staff . instrument . short_name = [string] [EOL] cello_staff . name = [string] [EOL] cello_staff . instrument . name = [string] [EOL] cello_staff . instrument . short_name = [string] [EOL] staff_group = abjad . StaffGroup ( [ flute_staff , clarinet_staff , cello_staff ] ) [EOL] score = abjad . Score ( [ staff_group ] ) [EOL] [comment] [EOL] tempo_indication = abjad . MetronomeMark ( quicktions . Fraction ( [number] , [number] ) , [number] ) [EOL] score . tempo . forced = tempo_indication [EOL] score . tempo . Y_extent = ( [number] , [number] ) [EOL] score . tempo . extra_offset = ( [number] , [number] ) [EOL] [comment] [EOL] [comment] [EOL] score . spacing . proportional_notation_duration = quicktions . Fraction ( [number] , [number] ) [EOL] score . spacing . uniform_stretching = True [EOL] score . spacing . strict_note_spacing = True [EOL] score . bar_number . transparent = True [EOL] score . text_script . staff_padding = [number] [EOL] score . text_spanner . staff_padding = [number] [EOL] score . beam . auto_beaming = False [EOL] score . tuplet_bracket . tuplet_full_length = True [EOL] lilypond_file = abjad . LilyPondFile . new ( score ) [EOL] lilypond_file . layout . indent = [number] [EOL] lilypond_file . layout . ragged_right = True [EOL] lilypond_file . paper . top_margin = [number] [EOL] lilypond_file . paper . left_margin = [number] [EOL] lilypond_file . paper . print_page_number = False [EOL] lilypond_file . paper . oddFooterMarkup = abjad . Markup ( [string] ) [EOL] lilypond_file . global_staff_size = [number] [EOL] lilypond_file . default_paper_size = [string] [EOL] return score [EOL] [EOL] [EOL] def make_numerators ( ) : [EOL] numerators = [ ] [EOL] seed = baca . sequence ( [ [number] , [number] , [number] ] ) [EOL] for i in range ( len ( seed ) ) : [EOL] seed = seed . rotate ( n = i ) [EOL] numerators . extend ( seed ) [EOL] return numerators [EOL] [EOL] [EOL] def make_first_level_five_divisions ( ) : [EOL] five_divisions = [ ( [number] , [number] ) , ( [number] , [number] ) ] [EOL] return five_divisions [EOL] [EOL] [EOL] def make_first_level_six_divisions ( ) : [EOL] six_divisions = [ ( [number] , ) , ( [number] , [number] ) , ( [number] , [number] ) ] [EOL] return six_divisions [EOL] [EOL] [EOL] def make_five_indicators ( ) : [EOL] return [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] [EOL] [EOL] def make_six_indicators ( ) : [EOL] return [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] [EOL] [EOL] def make_red_circle ( indicator ) : [EOL] return [string] % indicator [EOL] [EOL] [EOL] def apply_indicators ( score ) : [EOL] fives = make_five_indicators ( ) [EOL] sixes = make_six_indicators ( ) [EOL] cur_five , cur_six = [number] , [number] [EOL] for measure in abjad . iterate ( score ) . components ( abjad . Container ) : [EOL] if measure . __class__ . __name__ != [string] : [EOL] continue [EOL] if measure . meter . effective . numerator == [number] : [EOL] indicator = fives [ cur_five % len ( fives ) ] [EOL] cur_five += [number] [EOL] elif measure . meter . effective . numerator == [number] : [EOL] indicator = sixes [ cur_six % len ( sixes ) ] [EOL] cur_six += [number] [EOL] measure . history . top_level_pattern = indicator [EOL] circle = make_red_circle ( indicator ) [EOL] leaf = measure [ : ] . get ( abjad . Leaf , [number] ) [EOL] leaf . markup . up . append ( circle ) [EOL] [EOL] [EOL] def make_empty_measures ( score ) : [EOL] numerators = make_numerators ( ) [EOL] meter_tokens = [ ( numerator , [number] ) for numerator in numerators ] [EOL] flute_staff = score [ [string] ] [EOL] clarinet_staff = score [ [string] ] [EOL] cello_staff = score [ [string] ] [EOL] measures = [ abjad . Container ( ) for _ in meter_tokens ] [EOL] flute_staff . extend ( measures ) [EOL] measures = [ abjad . Container ( ) for _ in meter_tokens ] [EOL] clarinet_staff . extend ( measures ) [EOL] measures = [ abjad . Container ( ) for _ in meter_tokens ] [EOL] cello_staff . extend ( measures ) [EOL] [EOL] [EOL] def apply_top_level_divisions ( score ) : [EOL] five_divisions = make_first_level_five_divisions ( ) [EOL] six_divisions = make_first_level_six_divisions ( ) [EOL] for measure in abjad . iterate ( score ) . components ( abjad . Container ) : [EOL] if measure . __class__ . __name__ != [string] : [EOL] continue [EOL] top_level_pattern = measure . history . top_level_pattern [EOL] numerator = measure . meter . effective . numerator [EOL] if numerator == [number] : [EOL] division = five_divisions [ top_level_pattern - [number] ] [EOL] elif numerator == [number] : [EOL] division = six_divisions [ top_level_pattern - [number] ] [EOL] else : [EOL] raise Exception [EOL] duration = measure . duration . prolated [EOL] if sum ( division ) < numerator : [EOL] tuplet = abjad . Tuplet . divide . duration_into_arbitrary_augmentation ( duration , division ) [EOL] else : [EOL] tuplet = abjad . Tuplet . divide . duration_into_arbitrary_diminution ( duration , division ) [EOL] measure [ : ] = [ tuplet ] [EOL] [EOL] [EOL] def make_furled_rhythms ( ) : [EOL] rhythms = [ [ ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ] , [ ( [number] , [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ] , [ ( [number] , [number] , [number] ) , ( [number] , ) , ( [number] , [number] , [number] ) ] , [ ( [number] , [number] , [number] ) , ( [number] , ) , ( [number] , [number] , [number] ) ] , [ ( [number] , [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ] , ] [EOL] return rhythms [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def apply_furled_rhythms ( score ) : [EOL] rhythms = make_furled_rhythms ( ) [EOL] for i , moment in enumerate ( abjad . iterate . vertical_moments_forward_in ( score ) ) : [EOL] rhythm = rhythms [ i % len ( rhythms ) ] [EOL] for j , measure in enumerate ( moment . measures ) : [EOL] division = rhythm [ j ] [EOL] duration = measure . meter . effective . duration [EOL] tuplet = abjad . Tuplet . divide . duration_into_arbitrary_diminution ( duration , division ) [EOL] measure [ : ] = [ tuplet ] [EOL] [EOL] [EOL] def apply_layout ( score ) : [EOL] schema = abjad . layout . LayoutSchema ( quicktions . Fraction ( [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , - [number] , - [number] ) ) [EOL] flute_staff = score [ [string] ] [EOL] abjad . layout . apply_layout_schema ( flute_staff , schema , adjust_eol = True ) [EOL] [EOL] [EOL] def get_next_file_number ( ) : [EOL] file_numbers = [ ] [EOL] for file_name in os . listdir ( output_directory ) : [EOL] if file_name . endswith ( [string] ) : [EOL] try : [EOL] file_numbers . append ( int ( file_name [ - [number] : - [number] ] ) ) [EOL] except ValueError : [EOL] pass [EOL] if file_numbers : [EOL] max_file_number = max ( file_numbers ) [EOL] else : [EOL] max_file_number = [number] [EOL] next_file_number = max_file_number + [number] [EOL] return next_file_number [EOL] [EOL] [EOL] def apply_footer ( lilypond_file ) : [EOL] footer_string = [string] [EOL] next_file_number = get_next_file_number ( ) [EOL] footer_string += str ( next_file_number ) [EOL] footer_markup = abjad . Markup ( [string] % footer_string ) [EOL] lilypond_file . paper . oddFooterMarkup = footer_markup [EOL] lilypond_file . paper . evenFooterMarkup = footer_markup [EOL] [EOL] [EOL] def conditionally_save_pdf ( ) : [EOL] save = input ( [string] ) [EOL] if save . lower ( ) == [string] : [EOL] next_file_number = get_next_file_number ( ) [EOL] next_file_name = [string] % str ( next_file_number ) . zfill ( [number] ) [EOL] next_full_file_name = output_directory / next_file_name [EOL] abjad . persist ( next_full_file_name ) . as_pdf ( ) [EOL] print ( [string] % next_file_name ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] score = make_score ( ) [EOL] make_empty_measures ( score ) [EOL] [comment] [EOL] [comment] [EOL] apply_furled_rhythms ( score ) [EOL] apply_layout ( score ) [EOL] apply_footer ( score . lilypond_file ) [EOL] abjad . show ( score . lilypond_file ) [EOL] conditionally_save_pdf ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import quicktions [EOL] [EOL] [EOL] def get_metric_modulation_multipliers ( ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] multipliers = [ quicktions . Fraction ( [number] , [number] ) , quicktions . Fraction ( [number] , [number] ) , quicktions . Fraction ( [number] , [number] ) , quicktions . Fraction ( [number] , [number] ) , quicktions . Fraction ( [number] , [number] ) , ] [EOL] return multipliers [EOL] [EOL] [EOL] def get_tempi ( ) : [EOL] tempi = [ [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] tempi = [ [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] return tempi [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def transpose_bass_clarinet ( argument ) : [EOL] for note in abjad . iterate . notes_forward_in ( argument ) : [EOL] mdi = abjad . MelodicDiatonicInterval ( [string] , [number] ) [EOL] note . pitch += mdi [EOL] [EOL] [EOL] def transpose_clarinet ( score ) : [EOL] voice = score [ [string] ] [EOL] for note in abjad . iterate . notes_forward_in ( voice ) : [EOL] mdi = abjad . MelodicDiatonicInterval ( [string] , [number] ) [EOL] note . pitch += mdi [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Iterator , Tuple , List [EOL] import typing [EOL] [docstring] [EOL] import abjad [EOL] import baca [EOL] import quicktions [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] mm = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ] [EOL] measure_numerators = mm [ : [number] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] meter_tokens = [ ( numerator , [number] ) for numerator in measure_numerators ] [EOL] [EOL] [docstring] [EOL] [EOL] [EOL] def make_invocation_lilypond_file ( ) : [EOL] violin_staff = abjad . Staff ( ) [EOL] cello_staff = abjad . Staff ( ) [EOL] violin_staff . instrument . name = [string] [EOL] violin_staff . instrument . short_name = [string] [EOL] cello_staff . instrument . name = [string] [EOL] cello_staff . instrument . short_name = [string] [EOL] staff_group = abjad . StaffGroup ( [ violin_staff , cello_staff ] ) [EOL] score = abjad . Score ( [ staff_group ] ) [EOL] [comment] [EOL] score . spacing . proportional_notation_duration = quicktions . Fraction ( [number] , [number] ) [EOL] score . spacing . uniform_stretching = True [EOL] score . spacing . strict_spacing = True [EOL] score . bar_number . transparent = True [EOL] score . text_script . staff_padding = [number] [EOL] score . text_spanner . staff_padding = [number] [EOL] score . tuplet_bracket . tuplet_full_length = True [EOL] score . tuplet_bracket . staff_padding = [number] [EOL] score . tempo . forced = abjad . MetronomeMark ( quicktions . Fraction ( [number] , [number] ) , [number] ) [EOL] score . tempo . padding = [number] [EOL] lilypond_file = abjad . LilyPondFile . new ( score ) [EOL] lilypond_file . layout . indent = [number] [EOL] lilypond_file . layout . ragged_right = True [EOL] lilypond_file . paper . top_margin = [number] [EOL] lilypond_file . paper . left_margin = [number] [EOL] lilypond_file . paper . print_page_number = False [EOL] lilypond_file . paper . oddFooterMarkup = abjad . Markup ( [string] ) [EOL] [comment] [EOL] lilypond_file . global_staff_size = [number] [EOL] lilypond_file . default_paper_size = [string] [EOL] return lilypond_file [EOL] [EOL] [EOL] def make_empty_measure_lilypond_file ( ) : [EOL] lilypond_file = make_invocation_lilypond_file ( ) [EOL] score = lilypond_file [ - [number] ] [EOL] violin_measures = [ abjad . Container ( ) for _ in meter_tokens ] [EOL] cello_measures = [ abjad . Container ( ) for _ in meter_tokens ] [EOL] score [ [number] ] [ [number] ] . extend ( violin_measures ) [EOL] score [ [number] ] [ [number] ] . extend ( cello_measures ) [EOL] cello_measures [ - [number] ] . bar_line . kind = [string] [EOL] schema = abjad . layout . LayoutSchema ( quicktions . Fraction ( [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , - [number] ) ) [EOL] abjad . layout . apply_layout_schema ( score [ [number] ] [ [number] ] , schema , adjust_eol = True ) [EOL] return lilypond_file [EOL] [EOL] [EOL] def assess_same_different_measures ( violin_measures , cello_measures ) : [EOL] assert len ( violin_measures ) == len ( cello_measures ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] measure_indicators = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ] [EOL] [EOL] measure_indicators = baca . sequence ( [ [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] ] ) [EOL] measure_indicators = measure_indicators . helianthate ( [number] , [number] ) [EOL] [EOL] indices = list ( range ( len ( violin_measures ) ) ) [EOL] tmp = zip ( indices , violin_measures , cello_measures ) [EOL] top_level_division_number = [number] [EOL] for measure_index , violin_measure , cello_measure in tmp : [EOL] measure_indicator = measure_indicators [ measure_index ] [EOL] violin_measure . history . top_level_division_number = top_level_division_number [EOL] first_vn_leaf = abjad . get . leaf ( violin_measure , [number] ) [EOL] token = circle_in_red ( top_level_division_number ) [EOL] first_vn_leaf . markup . up . append ( token ) [EOL] first_vc_leaf = cello_measure [ : ] . get ( abjad . Leaf , [number] ) [EOL] [comment] [EOL] if measure_indicator == [number] : [EOL] cello_measure . history . top_level_division_number = top_level_division_number [EOL] [comment] [EOL] [comment] [EOL] else : [EOL] top_level_division_number += [number] [EOL] cello_measure . history . top_level_division_number = top_level_division_number [EOL] token = circle_in_red ( top_level_division_number ) [EOL] first_vc_leaf = cello_measure [ : ] . get ( abjad . Leaf , [number] ) [EOL] first_vc_leaf . markup . up . append ( token ) [EOL] top_level_division_number += [number] [EOL] [EOL] [EOL] def circle_in_red ( s ) : [EOL] return [string] % s [EOL] [EOL] [EOL] def make_top_level_division_ratios ( total_divisions ) : [EOL] ratios = [ ] [EOL] parts = [ [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] counts = [ [number] , [number] , [number] , [number] , [number] ] [EOL] for i in range ( total_divisions ) : [EOL] count = counts [ i % len ( counts ) ] [EOL] ratio = [ ] [EOL] for j in range ( count ) : [EOL] part = parts [ ( i + j ) % len ( parts ) ] [EOL] ratio . append ( part ) [EOL] ratio = tuple ( ratio ) [EOL] ratios . append ( ratio ) [EOL] return ratios [EOL] [EOL] [EOL] def group_top_level_leaves ( score ) : [EOL] violin_staff = score [ [number] ] [ [number] ] [EOL] durations = [ quicktions . Fraction ( [number] , [number] ) , quicktions . Fraction ( [number] , [number] ) , quicktions . Fraction ( [number] , [number] ) , quicktions . Fraction ( [number] , [number] ) , ] [EOL] leaves = violin_staff . leaves [EOL] groups = abjad . Duration . group_prolated ( leaves , durations , fill = [string] , cyclic = True , rump = True ) [EOL] for i , group in enumerate ( groups ) : [EOL] slur = abjad . slur ( group ) [EOL] slur . style = [string] [EOL] [EOL] cello_staff = score [ [number] ] [ [number] ] [EOL] leaves = cello_staff . leaves [EOL] [comment] [EOL] durations = [ quicktions . Fraction ( [number] , [number] ) , quicktions . Fraction ( [number] , [number] ) , quicktions . Fraction ( [number] , [number] ) , quicktions . Fraction ( [number] , [number] ) , quicktions . Fraction ( [number] , [number] ) , ] [EOL] groups = abjad . Duration . group_prolated ( leaves , durations , fill = [string] , cyclic = True , rump = True ) [EOL] for i , group in enumerate ( groups ) : [EOL] slur = abjad . slur ( group ) [EOL] slur . style = [string] [EOL] [EOL] [EOL] def rest_edges ( score ) : [EOL] pass [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] lilypond_file = make_empty_measure_lilypond_file ( ) [EOL] score = lilypond_file [ - [number] ] [EOL] violin_staff = score [ [number] ] [ [number] ] [EOL] cello_staff = score [ [number] ] [ [number] ] [EOL] assess_same_different_measures ( violin_staff [ : ] , cello_staff [ : ] ) [EOL] last_measure = cello_staff [ - [number] ] [EOL] total_top_level_divisions = last_measure . history . top_level_division_number [EOL] ratios = make_top_level_division_ratios ( total_top_level_divisions ) [EOL] abjad . label ( score ) . measure_numbers ( ) [EOL] group_top_level_leaves ( score ) [EOL] abjad . show ( lilypond_file ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,builtins.int]]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0
from typing import Dict , List , Any , Tuple , Union [EOL] import typing [EOL] import abjad [EOL] import baca [EOL] import quicktions [EOL] [EOL] from . make_numerators import make_numerators [EOL] [EOL] [EOL] def make_first_level_divisions ( score ) : [EOL] print ( [string] ) [EOL] ascribe_tilt ( score ) [EOL] ascribe_scaling ( score ) [EOL] score . _update . _updateAll ( ) [EOL] score . _update . _forbidUpdate ( ) [EOL] for measure in abjad . iterate . measures_forward_in ( score ) : [EOL] effective_meter = measure . meter . effective [EOL] duration = effective_meter . duration [EOL] numerator = effective_meter . numerator [EOL] cell_index = measure . history . cell_index [EOL] [comment] [EOL] scaling = measure . history . scaling [EOL] [comment] [EOL] tilt = measure . history . tilt [EOL] [comment] [EOL] composition = get_first_level_composition ( numerator , scaling , tilt , cell_index ) [EOL] pair = ( duration , composition ) [EOL] if abjad . mathx . is_dotted_integer ( duration . _numerator ) and abjad . mathx . is_power_of_two ( sum ( composition ) ) : [EOL] tuplet = make_dotted_trivial_tuplet ( duration , composition ) [EOL] else : [EOL] tuplet = make_undotted_tuplet ( scaling , pair ) [EOL] measure [ : ] = [ tuplet ] [EOL] meter_numerator = measure . meter . effective . numerator [EOL] tuplet . duration . denominator = meter_numerator [EOL] score . _update . _allowUpdate ( ) [EOL] return score [EOL] [EOL] [EOL] def make_dotted_trivial_tuplet ( duration , composition ) : [EOL] target_duration = duration [EOL] contents_duration = quicktions . Fraction ( sum ( composition ) , [number] ) [EOL] if target_duration < contents_duration : [EOL] tuplet = abjad . Tuplet . divide . duration_into_arbitrary_diminution_dotted ( target_duration , composition ) [EOL] else : [EOL] tuplet = abjad . Tuplet . divide . duration_into_arbitrary_augmentation_dotted ( target_duration , composition ) [EOL] return tuplet [EOL] [EOL] [EOL] def make_undotted_tuplet ( scaling , pair ) : [EOL] if [number] < scaling : [EOL] tuplet = abjad . Tuplet . divide . duration_into_arbitrary_diminution_undotted ( * pair ) [EOL] else : [EOL] tuplet = abjad . Tuplet . divide . duration_into_arbitrary_augmentation_undotted ( * pair ) [EOL] return tuplet [EOL] [EOL] [EOL] def ascribe_tilt ( score ) : [EOL] numerators , second_numerators = make_numerators ( ) [EOL] numerators = baca . sequence ( numerators ) . flatten ( ) [EOL] sublists = numerators . partition_by_ratio_of_weights ( [ [number] , [number] , [number] ] ) [EOL] lengths = [ len ( sublist ) for sublist in sublists ] [EOL] for staff in abjad . iterate . naive_forward_in ( score , abjad . Staff ) : [EOL] measures = baca . sequence ( abjad . iterate . measures_forward_in ( staff ) ) [EOL] measure_groups = measures . partition_by_lengths ( lengths ) [EOL] for measure_group_index , measure_group in enumerate ( measure_groups ) : [EOL] for measure in measure_group : [EOL] tilt = get_tilt ( measure_group_index , measure ) [EOL] measure . history . tilt = tilt [EOL] [EOL] [EOL] tilt_patterns_by_measure_group = [ [ ( - [number] , [number] , [number] , [number] ) , ( - [number] , [number] , - [number] , [number] ) , ( [number] , - [number] , [number] , - [number] ) , ( [number] , - [number] , [number] , - [number] ) ] , [ ( [number] , [number] , - [number] , [number] ) , ( [number] , - [number] , [number] , [number] ) , ( - [number] , - [number] , [number] , [number] ) , ( [number] , [number] , - [number] , - [number] ) ] , [ ( - [number] , - [number] , [number] , [number] ) , ( - [number] , - [number] , [number] , [number] ) , ( - [number] , [number] , - [number] , [number] ) ] , ] [EOL] [EOL] [EOL] def get_tilt ( measure_group_index , measure ) : [EOL] tilt_pattern_group = tilt_patterns_by_measure_group [ measure_group_index ] [EOL] measure_index = measure . history . index [EOL] tilt_pattern = tilt_pattern_group [ measure_index % len ( tilt_pattern_group ) ] [EOL] tilt = tilt_pattern [ measure . history . staff_index ] [EOL] return tilt [EOL] [EOL] [EOL] def ascribe_scaling ( score ) : [EOL] scaling_cycle = [ [number] , [number] , [number] , [number] , - [number] , [number] , [number] , [number] , [number] , [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ] [EOL] for measure in abjad . iterate . measures_forward_in ( score ) : [EOL] scaling = scaling_cycle [ measure . history . cell_index % len ( scaling_cycle ) ] [EOL] measure . history . scaling = scaling [EOL] return score [EOL] [EOL] [EOL] def get_first_level_composition ( numerator , scaling , tilt , cell_index ) : [EOL] if numerator + scaling <= [number] : [EOL] return ( [number] , ) [EOL] elif numerator + scaling == [number] : [EOL] return ( [number] , ) [EOL] [EOL] if tilt == - [number] : [EOL] compositions = left_heavy_integer_compositions [EOL] elif tilt == [number] : [EOL] compositions = unary_integer_compositions [EOL] elif tilt == [number] : [EOL] compositions = right_heavy_integer_compositions [EOL] else : [EOL] raise ValueError ( [string] ) [EOL] [EOL] compositions = compositions [ numerator + scaling ] [EOL] composition = compositions [ cell_index % len ( compositions ) ] [EOL] return composition [EOL] [EOL] [EOL] def make_special_integer_compositions ( n ) : [EOL] [docstring] [EOL] compositions = [ ] [EOL] for composition in abjad . mathx . integer_compositions ( n ) : [EOL] composition = baca . sequence ( composition ) [EOL] [comment] [EOL] if composition . is_decreasing ( ) : [EOL] if abjad . mathx . is_assignable_integer ( composition ) : [EOL] [comment] [EOL] if sum ( composition [ [number] : ] ) < composition [ [number] ] : [EOL] if [number] < len ( composition ) <= [number] : [EOL] compositions . append ( composition ) [EOL] compositions . sort ( ) [EOL] return compositions [EOL] [EOL] [EOL] left_heavy_integer_compositions = { [number] : [ ] , [number] : [ ] , [number] : [ ( [number] , [number] ) ] , [number] : [ ( [number] , [number] ) ] , [number] : [ ( [number] , [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ] , [number] : [ ( [number] , [number] , [number] ) , ( [number] , [number] ) ] , [number] : [ ( [number] , [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ] , [number] : [ ( [number] , [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ] , [number] : [ ( [number] , [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ] , [number] : [ ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] ) ] , [number] : [ ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] ) ] , [number] : [ ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] ) ] , } [EOL] [EOL] [EOL] right_heavy_integer_compositions = { [number] : [ ] , [number] : [ ] , [number] : [ ( [number] , [number] ) ] , [number] : [ ( [number] , [number] ) ] , [number] : [ ( [number] , [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ] , [number] : [ ( [number] , [number] , [number] ) , ( [number] , [number] ) ] , [number] : [ ( [number] , [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ] , [number] : [ ( [number] , [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ] , [number] : [ ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ] , [number] : [ ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ] , [number] : [ ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ] , [number] : [ ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] ) ] , } [EOL] [EOL] [EOL] unary_integer_compositions = { [number] : [ ( [number] , ) ] , [number] : [ ( [number] , ) ] , [number] : [ ( [number] , ) ] , [number] : [ ( [number] , ) ] , [number] : [ ( [number] , [number] ) ] , [number] : [ ( [number] , ) ] , [number] : [ ( [number] , ) ] , [number] : [ ( [number] , ) ] , [number] : [ ( [number] , [number] ) ] , [number] : [ ( [number] , [number] ) ] , [number] : [ ( [number] , [number] ) ] , [number] : [ ( [number] , ) ] , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[typing.Tuple[builtins.int,builtins.int,builtins.int,builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[typing.Tuple[builtins.int,builtins.int,builtins.int,builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,typing.Union[typing.List[typing.Any],typing.List[typing.Tuple[builtins.int,builtins.int]],typing.List[typing.Union[typing.Tuple[builtins.int,builtins.int],typing.Tuple[builtins.int,builtins.int,builtins.int]]]]]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,typing.Union[typing.List[typing.Tuple[builtins.int]],typing.List[typing.Tuple[builtins.int,builtins.int]]]]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,typing.Union[typing.List[typing.Any],typing.List[typing.Tuple[builtins.int,builtins.int]],typing.List[typing.Union[typing.Tuple[builtins.int,builtins.int],typing.Tuple[builtins.int,builtins.int,builtins.int]]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,typing.Union[typing.List[typing.Any],typing.List[typing.Tuple[builtins.int,builtins.int]],typing.List[typing.Union[typing.Tuple[builtins.int,builtins.int],typing.Tuple[builtins.int,builtins.int,builtins.int]]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,typing.Union[typing.List[typing.Any],typing.List[typing.Tuple[builtins.int,builtins.int]],typing.List[typing.Union[typing.Tuple[builtins.int,builtins.int],typing.Tuple[builtins.int,builtins.int,builtins.int]]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,typing.Union[typing.List[typing.Tuple[builtins.int]],typing.List[typing.Tuple[builtins.int,builtins.int]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import abjad [EOL] import baca [EOL] [EOL] import desir [EOL] [EOL] [EOL] def place_teferim_by_reading ( score ) : [EOL] reading_lengths = desir . get_measures_per_reading ( ) [EOL] ossia_treble = score [ [string] ] [EOL] ossia_bass = score [ [string] ] [EOL] measures = ossia_treble [ : ] [EOL] measures = baca . sequence ( measures ) [EOL] ossia_treble_measure_groups = measures . partition_by_counts ( reading_lengths , cyclic = True , overhang = True ) [EOL] measures = ossia_bass [ : ] [EOL] measures = baca . sequence ( measures ) [EOL] ossia_bass_measure_groups = measures . partition_by_counts ( reading_lengths , cyclic = True , overhang = True ) [EOL] for reading_number in range ( [number] , [number] ) : [EOL] reading_index = reading_number - [number] [EOL] teferim_in_range = desir . teferim_by_reading_in_range [ reading_index ] [EOL] treble_measures = ossia_treble_measure_groups [ reading_index ] [EOL] bass_measures = ossia_bass_measure_groups [ reading_index ] [EOL] treble_leaves = list ( abjad . iterate . leaves_forward_in ( treble_measures ) ) [EOL] bass_leaves = list ( abjad . iterate . leaves_forward_in ( bass_measures ) ) [EOL] for treble_leaf , bass_leaf , tefer in zip ( treble_leaves [ : [number] ] , bass_leaves [ : [number] ] , teferim_in_range ) : [EOL] chord = abjad . Chord ( tefer , treble_leaf . duration . written ) [EOL] chord . written_duration = treble_leaf . written_duration [EOL] treble_chord , bass_chord = chord . split_by_altitude ( chord ) [EOL] if len ( treble_chord ) == [number] : [EOL] treble_chord = abjad . Note ( treble_chord . pitch , ( [number] , [number] ) ) [EOL] treble_chord . written_duration = treble_leaf . written_duration [EOL] if len ( bass_chord ) == [number] : [EOL] bass_chord = abjad . Note ( bass_chord . pitch , ( [number] , [number] ) ) [EOL] bass_chord . written_duration = bass_leaf . written_duration [EOL] treble_chord . note_head . color = [string] [EOL] treble_chord . accidental . color = [string] [EOL] bass_chord . note_head . color = [string] [EOL] bass_chord . accidental . color = [string] [EOL] abjad . mutate . replace ( treble_leaf , treble_chord ) [EOL] abjad . mutate . replace ( bass_leaf , bass_chord ) [EOL] teferim_out_of_range = desir . teferim_by_reading_out_of_range [ reading_index ] [EOL] for treble_leaf , bass_leaf , tefer in zip ( treble_leaves [ [number] : [number] ] , bass_leaves [ [number] : [number] ] , teferim_out_of_range ) : [EOL] chord = abjad . Chord ( tefer , treble_leaf . duration . written ) [EOL] chord . written_duration = treble_leaf . written_duration [EOL] treble_chord , bass_chord = chord . split_by_altitude ( chord ) [EOL] if len ( treble_chord ) == [number] : [EOL] treble_chord = abjad . Note ( treble_chord . pitch , ( [number] , [number] ) ) [EOL] treble_chord . written_duration = treble_leaf . written_duration [EOL] if len ( bass_chord ) == [number] : [EOL] bass_chord = abjad . Note ( bass_chord . pitch , ( [number] , [number] ) ) [EOL] bass_chord . written_duration = bass_leaf . written_duration [EOL] treble_chord . note_head . color = [string] [EOL] treble_chord . accidental . color = [string] [EOL] bass_chord . note_head . color = [string] [EOL] bass_chord . accidental . color = [string] [EOL] abjad . mutate . replace ( treble_leaf , treble_chord ) [EOL] abjad . mutate . replace ( bass_leaf , bass_chord ) [EOL] return score [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def make_red ( score ) : [EOL] instrument_groups = abjad . get_active_measure_groups ( score ) [EOL] for instrument_group in instrument_groups : [EOL] for group in instrument_group : [EOL] override = abjad . override ( [ ] , [string] , [string] , [string] ) [EOL] override . _contiguity_constraint = None [EOL] override . extend ( group ) [EOL] override = abjad . override ( [ ] , [string] , [string] , [string] ) [EOL] override . _contiguity_constraint = None [EOL] override . extend ( group ) [EOL] override = abjad . override ( [ ] , [string] , [string] , [string] ) [EOL] override . _contiguity_constraint = None [EOL] override . extend ( group ) [EOL] override = abjad . override ( [ ] , [string] , [string] , [string] ) [EOL] override . _contiguity_constraint = None [EOL] override . extend ( group ) [EOL] override = abjad . override ( [ ] , [string] , [string] , [string] ) [EOL] override . _contiguity_constraint = None [EOL] override . extend ( group ) [EOL] override = abjad . override ( [ ] , [string] , [string] , [string] ) [EOL] override . _contiguity_constraint = None [EOL] override . extend ( group ) [EOL] override = abjad . override ( [ ] , [string] , [string] , [string] ) [EOL] override . _contiguity_constraint = None [EOL] override . extend ( group ) [EOL] [EOL] [EOL] def make_grey ( score ) : [EOL] instrument_groups = abjad . get_inactive_measure_groups ( score ) [EOL] for instrument_group in instrument_groups : [EOL] for group in instrument_group : [EOL] override = abjad . override ( [ ] , [string] , [string] , [string] ) [EOL] override . _contiguity_constraint = None [EOL] override . extend ( group ) [EOL] override = abjad . override ( [ ] , [string] , [string] , [string] ) [EOL] override . _contiguity_constraint = None [EOL] override . extend ( group ) [EOL] override = abjad . override ( [ ] , [string] , [string] , [string] ) [EOL] override . _contiguity_constraint = None [EOL] override . extend ( group ) [EOL] override = abjad . override ( [ ] , [string] , [string] , [string] ) [EOL] override . _contiguity_constraint = None [EOL] override . extend ( group ) [EOL] override = abjad . override ( [ ] , [string] , [string] , [string] ) [EOL] override . _contiguity_constraint = None [EOL] override . extend ( group ) [EOL] override = abjad . override ( [ ] , [string] , [string] , [string] ) [EOL] override . _contiguity_constraint = None [EOL] override . extend ( group ) [EOL] override = abjad . override ( [ ] , [string] , [string] , [string] ) [EOL] override . _contiguity_constraint = None [EOL] override . extend ( group ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import abjad [EOL] import baca [EOL] [EOL] [EOL] def has_bad_harmony ( array , forbidden_harmonic_interval_classes = None , allowed_harmonic_intervals = None , ) : [EOL] for column in array . columns : [EOL] if not _is_good_harmony ( column , forbidden_harmonic_interval_classes , allowed_harmonic_intervals , ) : [EOL] return True [EOL] return False [EOL] [EOL] [EOL] def _is_good_harmony ( argument , forbidden_harmonic_interval_classes = None , allowed_harmonic_intervals = None , ) : [EOL] if forbidden_harmonic_interval_classes is None : [EOL] forbidden_harmonic_interval_classes = [ ] [EOL] if allowed_harmonic_intervals is None : [EOL] allowed_harmonic_intervals = [ ] [EOL] [EOL] chromatic_intervals = abjad . Pitch . get_harmonic_chromatic_intervals_in ( argument ) [EOL] [comment] [EOL] for chromatic_interval in chromatic_intervals : [EOL] if chromatic_interval . interval_class in forbidden_harmonic_interval_classes : [EOL] if chromatic_interval . number not in allowed_harmonic_intervals : [EOL] return False [EOL] return True [EOL] [EOL] [EOL] def has_bad_succession ( array ) : [EOL] succession = _two_voice_succession ( array ) [EOL] return has_parallels ( succession ) [EOL] [EOL] [EOL] def _two_voice_succession ( array ) : [EOL] numbers = [ ] [EOL] for column in array . columns : [EOL] intervals = abjad . Pitch . get_harmonic_chromatic_intervals_in ( column ) [EOL] if intervals : [EOL] number = intervals . pop ( ) . number [EOL] else : [EOL] number = [string] [EOL] numbers . append ( number ) [EOL] return numbers [EOL] [EOL] [EOL] def has_missing_pitches ( array , pitch_set ) : [EOL] return not pitch_set . issubset ( abjad . PitchSet ( array . pitches ) ) [EOL] [EOL] [EOL] def has_parallels ( succession ) : [EOL] succession = baca . sequence ( succession ) [EOL] for left , right in succession . nwise ( n = [number] ) : [EOL] if isinstance ( left , ( int , float ) ) : [EOL] if isinstance ( right , ( int , float ) ) : [EOL] if left == right == [number] : [EOL] return True [EOL] return False [EOL] [EOL] [EOL] def has_unison_cross_relation ( array ) : [EOL] columns = baca . sequence ( array . columns ) [EOL] for left , right in columns . nwise ( n = [number] ) : [EOL] cross_pitches = left . stop_pitches + right . start_pitches [EOL] if abjad . Pitch . has_duplicate_pitch ( cross_pitches ) : [EOL] return True [EOL] return False [EOL] [EOL] [EOL] def count_unison_cross_relations ( array ) : [EOL] total = [number] [EOL] columns = baca . sequence ( array . columns ) [EOL] for left , right in columns . nwise ( n = [number] ) : [EOL] right_start_pitches = right . start_pitches [EOL] for pitch in left . stop_pitches : [EOL] if pitch in right_start_pitches : [EOL] total += [number] [EOL] return total [EOL] [EOL] [EOL] def has_unprepared_unison ( array ) : [EOL] for column in array . columns : [EOL] if abjad . Pitch . has_duplicate_pitch ( column . start_pitches ) : [EOL] return True [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import abjad [EOL] [EOL] [EOL] def remember_measure_and_staff_indices ( score ) : [EOL] print ( [string] ) [EOL] for measure in abjad . iterate . measures_forward_in ( score ) : [EOL] measure . history . index = measure . number - [number] [EOL] staff_name = measure . staff . effective . name [EOL] if staff_name == [string] : [EOL] measure . history . staff_index = [number] [EOL] elif staff_name == [string] : [EOL] measure . history . staff_index = [number] [EOL] elif staff_name == [string] : [EOL] measure . history . staff_index = [number] [EOL] elif staff_name == [string] : [EOL] measure . history . staff_index = [number] [EOL] else : [EOL] raise ValueError ( [string] ) [EOL] cell_index = [number] * measure . history . index + measure . history . staff_index [EOL] measure . history . cell_index = cell_index [EOL] return score [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import abjad [EOL] import baca [EOL] [EOL] from . get_measures_per_reading import get_measures_per_reading [EOL] [EOL] [EOL] def get_inactive_measure_groups ( score ) : [EOL] reading_lengths = get_measures_per_reading ( ) [EOL] [EOL] flute_staff = score [ [string] ] [EOL] flute_measures = baca . sequence ( abjad . iterate . measures_forward_in ( flute_staff ) ) [EOL] flute_measure_groups = flute_measures . partition_by_lengths ( reading_lengths ) [EOL] [EOL] clarinet_staff = score [ [string] ] [EOL] clarinet_measures = baca . sequence ( abjad . iterate . measures_forward_in ( clarinet_staff ) ) [EOL] clarinet_measure_groups = clarinet_measures . partition_by_lengths ( reading_lengths ) [EOL] [EOL] violin_staff = score [ [string] ] [EOL] violin_measures = baca . sequence ( abjad . iterate . measures_forward_in ( violin_staff ) ) [EOL] violin_measure_groups = violin_measures . partition_by_lengths ( reading_lengths ) [EOL] [EOL] cello_staff = score [ [string] ] [EOL] cello_measures = baca . sequence ( abjad . iterate . measures_forward_in ( cello_staff ) ) [EOL] cello_measure_groups = cello_measures . partition_by_lengths ( reading_lengths ) [EOL] [EOL] inactive_flute_measure_groups = [ ] [EOL] for group_index in ( [number] , [number] ) : [EOL] inactive_flute_measure_groups . append ( flute_measure_groups [ group_index ] ) [EOL] [EOL] inactive_clarinet_measure_groups = [ ] [EOL] for group_index in ( [number] , [number] ) : [EOL] inactive_clarinet_measure_groups . append ( clarinet_measure_groups [ group_index ] ) [EOL] [EOL] inactive_violin_measure_groups = [ ] [EOL] for group_index in ( [number] , [number] ) : [EOL] inactive_violin_measure_groups . append ( violin_measure_groups [ group_index ] ) [EOL] [EOL] inactive_cello_measure_groups = [ ] [EOL] for group_index in ( [number] , [number] ) : [EOL] inactive_cello_measure_groups . append ( cello_measure_groups [ group_index ] ) [EOL] [EOL] return ( inactive_flute_measure_groups , inactive_clarinet_measure_groups , inactive_violin_measure_groups , inactive_cello_measure_groups , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def trim_compact_measures ( score ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] violin_staff = score [ [string] ] [EOL] compact_measure = abjad . iterate . get_nth_measure ( violin_staff , [number] - [number] ) [EOL] trim_compact_measure ( compact_measure ) [EOL] [EOL] [EOL] def trim_compact_measure ( compact_measure ) : [EOL] tuplet = compact_measure . get ( abjad . Tuplet , [number] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] del tuplet [ - [number] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] import baca [EOL] [EOL] [EOL] def make_numerators ( ) : [EOL] [EOL] first = baca . sequence ( [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] ] ) [EOL] first = first . helianthate ( [number] , [number] ) [EOL] lengths = abjad . mathx . partition_integer_by_ratio ( len ( first ) , [ [number] , [number] , [number] ] ) [EOL] A , B , C = first . partition_by_counts ( lengths , cyclic = False , overhang = False ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] second = baca . sequence ( [ [ [number] , [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] , [number] ] ] ) [EOL] second = second . helianthate ( [number] , [number] ) [EOL] lengths = abjad . mathx . partition_integer_by_ratio ( len ( second ) , [ [number] , [number] ] ) [EOL] D , E = second . partition_by_counts ( lengths , cyclic = False , overhang = False ) [EOL] [comment] [EOL] [comment] [EOL] [EOL] third = baca . sequence ( [ [ [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] ] ] ) [EOL] third = third . helianthate ( [number] , [number] ) [EOL] lengths = abjad . mathx . partition_integer_by_ratio ( len ( third ) , [ [number] , [number] ] ) [EOL] F , G = third . partition_by_counts ( lengths , cyclic = False , overhang = False ) [EOL] [comment] [EOL] [comment] [EOL] [EOL] fourth = baca . sequence ( [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] ) [EOL] fourth = fourth . helianthate ( [number] , [number] ) [EOL] H = fourth [EOL] [comment] [EOL] [comment] [EOL] [EOL] numerators = baca . sequence ( [ A , D , F , B , H , C , E , G ] ) [EOL] [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] numerators = numerators . flatten ( ) [EOL] [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] numerators = numerators . split_by_weights ( [ [number] ] , cyclic = True , overhang = True ) [EOL] numerators [ [number] ] = baca . sequence ( [ [number] ] ) . repeat_to_weight ( ( numerators [ [number] ] ) ) [EOL] numerators [ [number] ] = baca . sequence ( [ [number] ] ) . repeat_to_weight ( ( numerators [ [number] ] ) ) [EOL] numerators [ [number] ] = baca . sequence ( [ [number] ] ) . repeat_to_weight ( ( numerators [ [number] ] ) ) [EOL] [EOL] numerators = numerators . flatten ( ) [EOL] [EOL] weights = abjad . mathx . partition_integer_by_ratio ( sum ( numerators ) , [ [number] , [number] ] ) [EOL] numerators = numerators . split_by_weights ( weights , cyclic = False , overhang = False ) [EOL] numerators = numerators . rotate ( n = - [number] ) [EOL] numerators = numerators . flatten ( ) [EOL] [EOL] numerators = numerators . split_by_weights ( [ [number] ] , cyclic = True , overhang = True ) [EOL] numerators [ [number] ] = numerators [ [number] ] . repeat_to_weight ( [ [number] ] ) [EOL] [EOL] numerators = numerators . flatten ( ) [EOL] [EOL] weights = abjad . mathx . partition_integer_by_ratio ( sum ( numerators ) , [ [number] , [number] ] ) [EOL] numerators = numerators . split_by_weights ( weights , cyclic = False , overhang = False ) [EOL] numerators = numerators . rotate ( n = - [number] ) [EOL] numerators = numerators . flatten ( ) [EOL] [EOL] weights = abjad . mathx . partition_integer_by_ratio ( sum ( numerators ) , [ [number] , [number] ] ) [EOL] first_numerators , second_numerators = numerators . split_by_weights ( weights , cyclic = False , overhang = True ) [EOL] [EOL] [docstring] [EOL] [EOL] [docstring] [EOL] [EOL] first_numerators = first_numerators . partition_by_weights_at_least ( [ [number] ] , cyclic = True , overhang = True ) [EOL] [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] return first_numerators , second_numerators [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import abjad [EOL] [EOL] from . get_measures_per_reading import get_measures_per_reading [EOL] [EOL] [EOL] def get_active_measures_by_section_index ( score , section_index ) : [EOL] [comment] [EOL] reading_lengths = get_measures_per_reading ( ) [EOL] start_stop_pairs = abjad . mathx . cumulative_sums_pairwise ( reading_lengths ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] start_stop_pair = start_stop_pairs [ section_index ] [EOL] measure_lists = [ ] [EOL] [comment] [EOL] for music_voice in score . music_voices : [EOL] [comment] [EOL] measures = list ( abjad . iterate . measures_forward_in ( music_voice , * start_stop_pair ) ) [EOL] measures = [ m for m in measures if getattr ( m . history , [string] , False ) ] [EOL] measure_lists . append ( measures ) [EOL] return measure_lists [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import abjad [EOL] [EOL] from . get_star_chain_pitches import get_star_chain_pitches [EOL] [EOL] [EOL] def cast_violin_gridati ( score ) : [EOL] print ( [string] ) [EOL] gridati_rests = [ ] [EOL] violin_staff = score [ [string] ] [EOL] mm_60_61 = list ( abjad . iterate . measures_forward_in ( violin_staff , [number] , [number] ) ) [EOL] leaves = list ( abjad . iterate . leaves_forward_in ( mm_60_61 ) ) [EOL] assert len ( leaves ) == [number] [EOL] gridati_rests . extend ( leaves [ [number] : [number] ] ) [EOL] mm_63_65 = list ( abjad . iterate . measures_forward_in ( violin_staff , [number] , [number] ) ) [EOL] leaves = list ( abjad . iterate . leaves_forward_in ( mm_63_65 ) ) [EOL] assert len ( leaves ) == [number] [EOL] gridati_rests . extend ( leaves [ [number] : [number] ] + leaves [ - [number] : ] ) [EOL] [EOL] assert len ( gridati_rests ) == [number] [EOL] gridato_notes = [ ] [EOL] for gridato_rest in gridati_rests : [EOL] gridato_note = abjad . Note ( gridato_rest ) [EOL] gridato_notes . append ( gridato_note ) [EOL] [EOL] star_chain_pitches = get_star_chain_pitches ( ) [EOL] assert len ( star_chain_pitches ) == [number] [EOL] for gridato_note in gridato_notes : [EOL] pitch = abjad . NamedPitch ( star_chain_pitches . pop ( [number] ) ) [EOL] gridato_note . pitch = pitch [EOL] gridato_note . articulations . extend ( [ [string] , [string] ] ) [EOL] gridato_note . note_head . style = [string] [EOL] gridato_note . dynamics . mark = [string] [EOL] [EOL] markup = [string] [EOL] gridato_notes [ [number] ] . markup . down . append ( abjad . Markup ( markup ) ) [EOL] gridato_notes [ [number] ] . markup . down . append ( abjad . Markup ( markup ) ) [EOL] [EOL] assert len ( star_chain_pitches ) == [number] [EOL] return gridato_notes [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def adjust_stray_spanner ( score ) : [EOL] note = abjad . iterate . get_measure_leaf ( score . clarinet_music_voice , [number] , [number] ) [EOL] text_spanner = note . text_spanner . spanner [EOL] text_spanner . append ( text_spanner [ - [number] ] . next ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import abjad [EOL] import baca [EOL] import quicktions [EOL] [EOL] from desir import teferim_by_reading_out_of_range as structured_discards [EOL] [EOL] [EOL] def reintroduce_piccolo_discards ( score ) : [EOL] print ( [string] ) [EOL] sequence = make_discard_sequence ( ) [EOL] sequence = baca . sequence ( sequence ) . flatten ( ) [EOL] assert len ( sequence ) == [number] [EOL] sequence . extend ( abjad . Rest ( ( [number] , [number] ) ) * [number] ) [EOL] assert len ( sequence ) == [number] [EOL] for i , measure in enumerate ( abjad . iterate . measures_forward_in ( score . flute_staff , [number] , [number] ) ) : [EOL] start_index = [number] * i [EOL] stop_index = start_index + [number] [EOL] notes = sequence [ start_index : stop_index ] [EOL] measure [ [number] ] [ : ] = notes [EOL] measure [ [number] ] . duration . denominator = [number] [EOL] first_piccolo_note = abjad . iterate . get_measure_leaf ( score . flute_staff , [number] , [number] ) [EOL] beam_unit_durations = ( [number] * [number] ) * [ quicktions . Fraction ( [number] , [number] ) ] [EOL] beam = abjad . Beam ( durations = beam_unit_durations , span = [number] ) [EOL] abjad . attach ( beam , sequence ) [EOL] markup = abjad . Markup ( [string] ) [EOL] sequence [ [number] ] . markup . down . append ( markup ) [EOL] directive = [string] [EOL] first_piccolo_note . directives . before . append ( directive ) [EOL] directive = [string] [EOL] first_piccolo_note . directives . before . append ( directive ) [EOL] manually_change_spacing ( score ) [EOL] [EOL] [EOL] def make_discard_sequence ( ) : [EOL] all_sections = [ ] [EOL] for i , section in enumerate ( structured_discards ) : [EOL] notes_in_section = [ ] [EOL] for run in section : [EOL] if run : [EOL] pitch_numbers = [ x % [number] + [number] for x in run ] [EOL] notes = abjad . make_notes ( pitch_numbers , [ ( [number] , [number] ) ] ) [EOL] if [number] <= len ( notes ) : [EOL] abjad . slur ( notes ) [EOL] notes [ [number] ] . articulations . append ( [string] ) [EOL] notes [ - [number] ] . articulations . append ( [string] ) [EOL] notes_in_section . extend ( notes ) [EOL] else : [EOL] try : [EOL] if isinstance ( notes_in_section [ - [number] ] , abjad . Note ) : [EOL] notes_in_section . append ( abjad . Rest ( ( [number] , [number] ) ) ) [EOL] except IndexError : [EOL] pass [EOL] all_sections . append ( notes_in_section ) [EOL] return all_sections [EOL] [EOL] [EOL] def manually_change_spacing ( score ) : [EOL] print ( [string] ) [EOL] measure = abjad . iterate . get_measure_number ( score . flute_staff , [number] ) [EOL] measure . directives . opening . extend ( [ [string] , [string] , [string] , [string] , ] ) [EOL] [EOL] measure = abjad . iterate . get_measure_number ( score . flute_staff , [number] ) [EOL] measure . directives . opening . extend ( [ [string] , [string] , [string] , [string] , ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import pathlib [EOL] import typing [EOL] import pathlib [EOL] [EOL] import abjad [EOL] [EOL] output_directory = pathlib . Path ( [string] ) [EOL] [EOL] [EOL] def save_fittings_pdf ( reading_index , tefer_index ) : [EOL] print ( ) [EOL] save = input ( [string] ) [EOL] if save . lower ( ) == [string] : [EOL] reading_number = reading_index + [number] [EOL] tefer_number = tefer_index + [number] [EOL] file_name = [string] % ( reading_number , tefer_number ) [EOL] path_name = output_directory / file_name [EOL] abjad . persist ( path_name ) . as_pdf ( ) [EOL] print ( [string] % file_name ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import abjad [EOL] [EOL] [EOL] def reading_index_to_instrument_names ( reading_index ) : [EOL] if reading_index == [number] : [EOL] return [string] , [string] [EOL] elif reading_index == [number] : [EOL] return [string] , [string] [EOL] elif reading_index == [number] : [EOL] return [string] , [string] , [string] [EOL] elif reading_index == [number] : [EOL] return [string] , [string] , [string] , [string] [EOL] elif reading_index == [number] : [EOL] return [string] , [string] , [string] [EOL] elif reading_index == [number] : [EOL] return [string] , [string] [EOL] else : [EOL] raise ValueError ( [string] ) [EOL] [EOL] [EOL] def instrument_name_to_instrument_range ( name ) : [EOL] if name == [string] : [EOL] return abjad . PitchRange ( - [number] , None ) [EOL] elif name == [string] : [EOL] return abjad . PitchRange ( - [number] , None ) [EOL] elif name == [string] : [EOL] return abjad . PitchRange ( - [number] , None ) [EOL] elif name == [string] : [EOL] return abjad . PitchRange ( - [number] , None ) [EOL] else : [EOL] raise ValueError ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] [EOL] from . add_timepoints_to_staff import add_timepoints_to_staff [EOL] from . insert_ossia_pitch_staves import make_ossia_pitch_staff [EOL] [EOL] [EOL] def insert_timepoint_staff ( score ) : [EOL] print ( [string] ) [EOL] timepoints = make_ossia_pitch_staff ( ) [EOL] timepoints . name = [string] [EOL] timepoints . note_head . transparent = True [EOL] timepoints . note_head . no_ledgers = True [EOL] timepoints . staff . transparent = True [EOL] score . append ( timepoints ) [EOL] add_timepoints_to_staff ( score , timepoints ) [EOL] for leaf in abjad . iterate ( timepoints ) : [EOL] skip = abjad . Skip ( leaf . written_duration ) [EOL] abjad . mutate . replace ( leaf , skip ) [EOL] [comment] [EOL] return score [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from desir import machat [EOL] [EOL] [EOL] def get_star_chain_pitches ( ) : [EOL] star_chain_pitches = machat [ : [number] ] [EOL] assert star_chain_pitches == [ [number] , [number] , - [number] , - [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] return star_chain_pitches [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import io [EOL] import pathlib [EOL] import typing [EOL] import pathlib [EOL] import pprint [EOL] [EOL] [EOL] def write_fittings_to_disk ( fittings , reading_index , tefer_index ) : [EOL] [docstring] [EOL] print ( f" [string] { len ( fittings ) } [string] " ) [EOL] reading_number = reading_index + [number] [EOL] tefer_number = tefer_index + [number] [EOL] data_name = f" [string] { reading_number } [string] { tefer_number }" [EOL] path_name = pathlib . Path ( [string] , f"{ data_name } [string] " ) [EOL] out = open ( path_name , [string] ) [EOL] fittings = [ array . cell_tokens_by_row for array in fittings ] [EOL] fittings = pprint . pformat ( fittings ) [EOL] output = f"{ data_name } [string] { fittings }" [EOL] out . write ( output ) [EOL] out . close ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import abjad [EOL] import baca [EOL] [EOL] [EOL] def add_rests ( score ) : [EOL] first = baca . sequence ( [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] ] ] ) [EOL] first = first . helianthate ( [number] , [number] ) [EOL] [EOL] first = [ x if x != [number] else [number] for x in first ] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] active_note_index = [number] [EOL] for note in abjad . iterate . timeline_forward_in ( score , abjad . Note ) : [EOL] if getattr ( note . history , [string] , None ) : [EOL] token = first [ active_note_index % len ( first ) ] [EOL] if token == [number] : [EOL] abjad . Rest ( note ) [EOL] active_note_index += [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def empty_inactive_measures ( score ) : [EOL] print ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] flute = score . flute_music_voice [EOL] clarinet = score . clarinet_music_voice [EOL] violin = score . violin_music_voice [EOL] cello = score . cello_music_voice [EOL] empty ( flute , [number] , [number] ) [EOL] empty ( clarinet , [number] , [number] ) [EOL] empty ( clarinet , [number] , [number] ) [EOL] empty ( cello , [number] , [number] ) [EOL] empty ( cello , [number] , [number] ) [EOL] empty ( violin , [number] , [number] ) [EOL] [comment] [EOL] [comment] [EOL] empty ( flute , [number] , [number] ) [EOL] empty ( cello , [number] , [number] ) [EOL] [EOL] [EOL] def empty ( voice , start_measure_number , stop_measure_number ) : [EOL] start_measure_index = start_measure_number - [number] [EOL] stop_measure_index = stop_measure_number [EOL] measures = voice [ start_measure_index : stop_measure_index ] [EOL] for measure in measures : [EOL] duration = abjad . get . duration ( measure ) [EOL] skip = abjad . Skip ( [number] , multiplier = duration ) [EOL] measure [ : ] = [ skip ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import io [EOL] import pathlib [EOL] import typing [EOL] import pathlib [EOL] import pprint [EOL] [EOL] import abjad [EOL] import baca [EOL] [EOL] [EOL] def write_nonspanning_subarrays_to_disk ( score ) : [EOL] print ( [string] ) [EOL] subarray_list = [ ] [EOL] for section_index in range ( [number] ) : [EOL] skeleton_array = get_skeleton_pitch_array_by_section_index ( score , section_index ) [EOL] subarrays = baca . PitchArray . array_to_nonspanning_subarrays ( skeleton_array ) [EOL] subarrays = [ r . cell_tokens_by_row for r in subarrays ] [EOL] subarray_list . append ( subarrays ) [EOL] data_name = [string] [EOL] path_name = pathlib . Path ( [string] , f"{ data_name } [string] " ) [EOL] out = open ( path_name , [string] ) [EOL] subarray_list = pprint . pformat ( subarray_list ) [EOL] output = f"{ data_name } [string] { subarray_list }" [EOL] out . write ( output ) [EOL] out . close ( ) [EOL] [EOL] [EOL] def get_skeleton_pitch_array_by_section_index ( score , section_index ) : [EOL] measure_lists = abjad . get_active_measures_by_section_index ( score , section_index ) [EOL] measure_lists = [ _ for _ in measure_lists if len ( _ ) ] [EOL] array = baca . PitchArray . leaf_iterables_to_pitch_array_populated ( measure_lists ) [EOL] return array [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] import baca [EOL] [EOL] from . get_measures_per_reading import get_measures_per_reading [EOL] [EOL] [EOL] def add_double_bar_lines ( score ) : [EOL] measures_per_reading = get_measures_per_reading ( ) [EOL] breaks_measures = baca . sequence ( abjad . iterate . measures_forward_in ( score . breaks_voice ) ) [EOL] measure_groups = breaks_measures . partition_by_lengths ( breaks_measures , measures_per_reading ) [EOL] [comment] [EOL] for group in measure_groups [ : - [number] ] : [EOL] last_measure = group [ - [number] ] [EOL] last_measure . bar_line . kind = [string] [EOL] return score [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def change_inactive_leaves_into_skips ( score ) : [EOL] print ( [string] ) [EOL] for leaf in abjad . iterate . leaves_forward_in ( score ) : [EOL] active = getattr ( leaf . history , [string] , None ) [EOL] [comment] [EOL] if active is False : [EOL] abjad . Skip ( leaf ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def color_cross_relations_blue ( score ) : [EOL] print ( [string] ) [EOL] numbers = [ - [number] , - [number] , - [number] , [number] , [number] , [number] , [number] ] [EOL] bad_intervals = abjad . MelodicChromaticIntervalSet ( numbers ) [EOL] total_cross_relations = [number] [EOL] for i , leaf_pair in enumerate ( abjad . iterate . leaf_pairs_forward_in ( score ) ) : [EOL] [comment] [EOL] if isinstance ( leaf_pair , set ) : [EOL] continue [EOL] left , right = leaf_pair [EOL] [comment] [EOL] if not isinstance ( left , abjad . Note ) or not isinstance ( right , abjad . Note ) : [EOL] continue [EOL] [comment] [EOL] if not getattr ( left . history , [string] , False ) : [EOL] continue [EOL] if not getattr ( right . history , [string] , False ) : [EOL] continue [EOL] [comment] [EOL] if left . staff . effective is right . staff . effective : [EOL] continue [EOL] mci = abjad . Pitch . melodic_chromatic_interval_from_to ( left , right ) [EOL] if mci in bad_intervals : [EOL] total_cross_relations += [number] [EOL] right . note_head . color = [string] [EOL] right . stem . color = [string] [EOL] right . accidental . color = [string] [EOL] right . dots . color = [string] [EOL] right . markup . up . append ( mci . number ) [EOL] print ( [string] % ( total_cross_relations , i ) ) [EOL] [EOL] [EOL] def color_melodic_chromatic_octaves ( argument ) : [EOL] for leaf in abjad . iterate . leaves_forward_in ( argument ) : [EOL] try : [EOL] mcic = abjad . Pitch . melodic_chromatic_interval_class_from_to ( leaf , leaf . next ) [EOL] if mcic . number in ( [number] , [number] , [number] ) : [EOL] color_leaf_blue ( leaf ) [EOL] color_leaf_blue ( leaf . next ) [EOL] except TypeError : [EOL] pass [EOL] [EOL] [EOL] def color_leaf_blue ( leaf ) : [EOL] leaf . note_head . color = [string] [EOL] leaf . stem . color = [string] [EOL] leaf . accidental . color = [string] [EOL] leaf . dots . color = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] [EOL] from . add_slurs import add_slurs_to_note_subrun [EOL] [EOL] [EOL] def add_last_cello_decrescendo ( score ) : [EOL] print ( [string] ) [EOL] skip = abjad . iterate . get_measure_leaf ( score . cello_staff , [number] , [number] ) [EOL] rest = abjad . Rest ( skip ) [EOL] note = rest . prev [EOL] abjad . hairpin ( [string] , [ note , rest ] ) [EOL] add_slurs_to_note_subrun ( [ note , rest ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] [EOL] [EOL] def add_dashed_bar_lines ( score ) : [EOL] for measure in abjad . iterate . measures_forward_in ( score . breaks_voice ) : [EOL] last_leaf = measure [ : ] . get ( abjad . Leaf , - [number] ) [EOL] last_leaf . bar_line . kind = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] import baca [EOL] import quicktions [EOL] [EOL] from . instrumentation import reading_index_to_instrument_names [EOL] from . read_fittings_from_disk import read_fittings_from_disk [EOL] [EOL] [EOL] def configure_score ( score , reading_index , tefer_index ) : [EOL] reading_number = reading_index + [number] [EOL] tefer_number = tefer_index + [number] [EOL] instrument_names = reading_index_to_instrument_names ( reading_index ) [EOL] pnd = quicktions . Fraction ( [number] , [number] ) [EOL] score . spacing . proportional_notation_duration = pnd [EOL] score . spacing . uniform_stretching = True [EOL] score . spacing . strict_note_spacing = True [EOL] score . meter . stencil = False [EOL] score . bar_number . transparent = True [EOL] score . beam . auto_beaming = False [EOL] score . stem . stencil = False [EOL] score . text_script . staff_padding = [number] [EOL] for staff , instrument_name in zip ( abjad . iterate . naive_forward_in ( score , abjad . Staff ) , instrument_names ) : [EOL] staff . name = instrument_name . capitalize ( ) [EOL] if staff . name == [string] : [EOL] staff . clef . forced = abjad . Clef ( [string] ) [EOL] lilypond_file = abjad . LilyPondFile . new ( score ) [EOL] lilypond_file . layout . indent = [number] [EOL] lilypond_file . layout . ragged_right = True [EOL] lilypond_file . paper . top_margin = [number] [EOL] lilypond_file . paper . print_page_number = False [EOL] lilypond_file . paper . oddFooterMarkup = abjad . Markup ( [string] % ( reading_number , tefer_number ) ) [EOL] lilypond_file . paper . minimal_page_breaking = True [EOL] lilypond_file . paper . ragged_bottom = True [EOL] lilypond_file . paper . ragged_last_bottom = True [EOL] lilypond_file . global_staff_size = [number] [EOL] lilypond_file . default_paper_size = [string] [EOL] return score [EOL] [EOL] [EOL] def apply_whitespace_after_measures ( argument ) : [EOL] for measure in abjad . iterate . measures_forward_in ( argument ) : [EOL] if not measure . breaks . line : [EOL] measure_parent = measure . parentage . parent [EOL] length = len ( measure_parent ) [EOL] [comment] [EOL] if not measure_parent . index ( measure ) + [number] == length : [EOL] measure . breaks . whitespace = quicktions . Fraction ( [number] , [number] ) [EOL] [EOL] [EOL] def label_first_leaf_in_measure ( argument ) : [EOL] for measure in abjad . iterate . measures_forward_in ( argument ) : [EOL] leaf = abjad . get . leaf ( measure , [number] ) [EOL] markup = abjad . Markup ( [string] % measure . number ) [EOL] leaf . markup . up . append ( markup ) [EOL] return argument [EOL] [EOL] [EOL] def label_intervals ( score ) : [EOL] print ( [string] ) [EOL] last_staff = score . get ( abjad . Staff , - [number] ) [EOL] [comment] [EOL] timepoint_voice = abjad . Voice ( ) [EOL] durations = abjad . mathx . difference_series ( score ) [EOL] notes = abjad . make_quarter_notes_with_multipliers ( [ - [number] ] , durations ) [EOL] timepoint_voice . extend ( notes ) [EOL] for leaf in abjad . abjad . iterate ( timepoint_voice ) . leaves ( ) : [EOL] skip = abjad . Skip ( leaf . written_duration ) [EOL] abjad . mutate . replace ( leaf , skip ) [EOL] last_staff . append ( timepoint_voice ) [EOL] last_staff . parallel = True [EOL] [comment] [EOL] print ( [string] ) [EOL] abjad . label . vertical_moment_chromatic_interval_classes ( score ) [EOL] [EOL] [EOL] def make_fittings_score ( reading_index , tefer_index ) : [EOL] print ( [string] ) [EOL] fittings = read_fittings_from_disk ( reading_index , tefer_index ) [EOL] [comment] [EOL] [comment] [EOL] fittings = baca . PitchArrayList ( fittings ) [EOL] score = fittings . to_score ( ) [EOL] configure_score ( score , reading_index , tefer_index ) [EOL] [comment] [EOL] label_first_leaf_in_measure ( score [ [number] ] [ [number] ] ) [EOL] abjad . label . measure_numbers ( score ) [EOL] apply_whitespace_after_measures ( score ) [EOL] return score [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict , List [EOL] import typing [EOL] from . candidate_restrictions import ( count_unison_cross_relations , has_bad_harmony , has_bad_succession , has_missing_pitches , has_unprepared_unison , ) [EOL] [EOL] [EOL] def missing_pitch_filter ( candidate_arrays , pitch_set ) : [EOL] print ( [string] ) [EOL] keep_this_time = [ ] [EOL] for array in candidate_arrays : [EOL] if not has_missing_pitches ( array , pitch_set ) : [EOL] keep_this_time . append ( array ) [EOL] if not keep_this_time : [EOL] print ( [string] ) [EOL] else : [EOL] candidate_arrays = keep_this_time [ : ] [EOL] message = [string] [EOL] message += [string] % len ( candidate_arrays ) [EOL] message += [string] [EOL] print ( message ) [EOL] return candidate_arrays [EOL] [EOL] [EOL] def bad_harmony_filter ( candidate_arrays , forbidden_harmonic_interval_classes , allowed_harmonic_intervals , ) : [EOL] print ( [string] ) [EOL] keep_this_time = [ ] [EOL] for array in candidate_arrays : [EOL] if not has_bad_harmony ( array , forbidden_harmonic_interval_classes , allowed_harmonic_intervals , ) : [EOL] keep_this_time . append ( array ) [EOL] if not keep_this_time : [EOL] print ( [string] ) [EOL] else : [EOL] candidate_arrays = keep_this_time [ : ] [EOL] message = [string] [EOL] message += [string] % len ( candidate_arrays ) [EOL] message += [string] [EOL] print ( message ) [EOL] return candidate_arrays [EOL] [EOL] [EOL] def bad_succession_filter ( candidate_arrays ) : [EOL] print ( [string] ) [EOL] keep_this_time = [ ] [EOL] for array in candidate_arrays : [EOL] if not has_bad_succession ( array ) : [EOL] keep_this_time . append ( array ) [EOL] if not keep_this_time : [EOL] print ( [string] ) [EOL] else : [EOL] candidate_arrays = keep_this_time [ : ] [EOL] message = [string] [EOL] message += [string] % len ( candidate_arrays ) [EOL] message += [string] [EOL] print ( message ) [EOL] return candidate_arrays [EOL] [EOL] [EOL] def unison_cross_filter ( candidate_arrays ) : [EOL] print ( [string] ) [EOL] unison_cross_relation_count = { } [EOL] for array in candidate_arrays : [EOL] count = count_unison_cross_relations ( array ) [EOL] try : [EOL] unison_cross_relation_count [ count ] += [number] [EOL] except KeyError : [EOL] unison_cross_relation_count [ count ] = [number] [EOL] min_crossings = None [EOL] message = [string] [EOL] for key , value in sorted ( unison_cross_relation_count . items ( ) ) : [EOL] [comment] [EOL] message += [string] % str ( ( key , value ) ) [EOL] if value < len ( candidate_arrays ) : [EOL] if min_crossings is None or key < min_crossings : [EOL] min_crossings = key [EOL] message += [string] [EOL] print ( message ) [EOL] if min_crossings is not None : [EOL] message = [string] [EOL] message += [string] % min_crossings [EOL] print ( message ) [EOL] keep_this_time = [ ] [EOL] for array in candidate_arrays : [EOL] if count_unison_cross_relations ( array ) <= min_crossings : [EOL] keep_this_time . append ( array ) [EOL] candidate_arrays = keep_this_time [ : ] [EOL] else : [EOL] print ( [string] ) [EOL] message = [string] [EOL] message += [string] % len ( candidate_arrays ) [EOL] message += [string] [EOL] print ( message ) [EOL] return candidate_arrays [EOL] [EOL] [EOL] def voice_crossing_filter ( candidate_arrays ) : [EOL] print ( [string] ) [EOL] voice_crossing_counts = { } [EOL] for array in candidate_arrays : [EOL] count = array . voice_crossing_count [EOL] try : [EOL] voice_crossing_counts [ count ] += [number] [EOL] except KeyError : [EOL] voice_crossing_counts [ count ] = [number] [EOL] message = [string] [EOL] min_crossings = None [EOL] for key , value in sorted ( voice_crossing_counts . items ( ) ) : [EOL] [comment] [EOL] message += [string] % str ( ( key , value ) ) [EOL] if value < len ( candidate_arrays ) : [EOL] if min_crossings is None or key < min_crossings : [EOL] min_crossings = key [EOL] message += [string] [EOL] print ( message ) [EOL] if min_crossings is not None : [EOL] message = [string] [EOL] message += [string] % min_crossings [EOL] print ( message ) [EOL] keep_this_time = [ ] [EOL] for array in candidate_arrays : [EOL] if array . voice_crossing_count <= min_crossings : [EOL] keep_this_time . append ( array ) [EOL] candidate_arrays = keep_this_time [ : ] [EOL] else : [EOL] print ( [string] ) [EOL] message = [string] [EOL] message += [string] % len ( candidate_arrays ) [EOL] message += [string] [EOL] print ( message ) [EOL] return candidate_arrays [EOL] [EOL] [EOL] def unprepared_unison_filter ( candidate_arrays ) : [EOL] print ( [string] ) [EOL] keep_this_time = [ ] [EOL] for array in candidate_arrays : [EOL] if not has_unprepared_unison ( array ) : [EOL] keep_this_time . append ( array ) [EOL] if not keep_this_time : [EOL] print ( [string] ) [EOL] else : [EOL] candidate_arrays = keep_this_time [ : ] [EOL] message = [string] [EOL] message += [string] % len ( candidate_arrays ) [EOL] message += [string] [EOL] print ( message ) [EOL] return candidate_arrays [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List [EOL] import typing [EOL] fittings_6_4 = [ ( ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) ) , ( ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) ) , ( ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Tuple[typing.Tuple[builtins.str,builtins.int]],typing.Tuple[typing.Tuple[builtins.str,builtins.int]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] from . nonspanning_arrays import nonspanning_arrays [EOL] [EOL] __all__ = [ [string] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0
from typing import Tuple , List [EOL] import typing [EOL] fittings_2_4 = [ ( ( ( [string] , [number] ) , [number] , ( [string] , [number] ) , ( [string] , [number] ) ) , ( ( [string] , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) ) , ( ( ( [string] , [number] ) , [number] , ( [string] , [number] ) , ( [string] , [number] ) ) , ( ( [string] , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int,typing.Tuple[builtins.str,builtins.int],typing.Tuple[builtins.str,builtins.int]],typing.Tuple[typing.Tuple[builtins.str,builtins.int],typing.Tuple[builtins.str,builtins.int],typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Union , List [EOL] import typing [EOL] nonspanning_arrays = [ [ ( ( [number] , ) , ( ( [string] , [number] ) , ( [string] , [number] ) ) ) , ( ( ( [string] , [number] ) , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ) ) , ( ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) ) , ( ( ( [string] , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , [number] ) ) , ( ( ( ( [string] , [number] ) , [number] ) , ) , ( [number] , ( [string] , [number] ) ) ) , ( ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) ) , ( ( ( [string] , [number] ) , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ) ) , ( ( [number] , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) ) , ( ( [number] , ) , ( ( [string] , [number] ) , ( [string] , [number] ) ) ) , ( ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( [string] , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) ) , ( ( ( ( [string] , [number] ) , [number] ) , ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , ) , ( [number] , ) ) , ( ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( [string] , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) ) , ] , [ ( ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) ) , ( ( ( ( [string] , [number] ) , [number] ) , ) , ( ( [string] , [number] ) , ( [string] , [number] ) ) ) , ( ( [number] , ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ) ) , ( ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) ) , ( ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) ) , ( ( ( [string] , [number] ) , [number] , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) ) , ( ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) ) , ( ( [number] , ) , ( ( [string] , [number] ) , ) ) , ( ( ( [string] , [number] ) , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ) ) , ( ( ( ( [string] , [number] ) , [number] ) , ) , ( ( [string] , [number] ) , ( [string] , [number] ) ) ) , ( ( ( ( [string] , [number] ) , [number] ) , ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , ) , ( [number] , ) ) , ( ( ( [string] , [number] ) , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ) ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ) , ] , [ ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , [number] , ( [string] , [number] ) ) , ( ( [string] , [number] ) , [number] ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ) , ( ( ( [string] , [number] ) , [number] ) , ) , ( ( [string] , [number] ) , ( [string] , [number] ) ) ) , ( ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) ) , ( ( ( ( [string] , [number] ) , [number] ) , ) , ( [number] , ) , ( ( [string] , [number] ) , ( [string] , [number] ) ) ) , ( ( ( ( [string] , [number] ) , [number] ) , ) , ( ( [string] , [number] ) , ( [string] , [number] ) ) , ( [number] , ) ) , ( ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( [string] , [number] ) , ( [string] , [number] ) , [number] ) , ( [number] , ) ) , ( ( ( [string] , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ) , ( ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) ) , ( ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( [number] , ( [string] , [number] ) ) , ( ( [string] , [number] ) , [number] ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ) , ) , ] , [ ( ( [number] , [number] ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ) , ( ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) ) , ( ( ( [string] , [number] ) , [number] ) , ( ( ( [string] , [number] ) , [number] ) , ) , ( [number] , ) , ( ( ( [string] , [number] ) , [number] ) , ) ) , ( ( ( ( [string] , [number] ) , [number] ) , ) , ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ) , ) , ( ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) ) , ( ( ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) ) , ( [number] , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ) , ( [number] , ) , ) , ( ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ) , ( ( ( [string] , [number] ) , [number] ) , [number] , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( [number] , ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ) , ( ( ( [string] , [number] ) , [number] ) , ) , ( ( ( [string] , [number] ) , [number] ) , ) , ( ( [string] , [number] ) , ( [string] , [number] ) ) , ) , ( ( ( [string] , [number] ) , [number] ) , ( ( ( [string] , [number] ) , [number] ) , ) , ( [number] , ) , ( ( ( [string] , [number] ) , [number] ) , ) ) , ( ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) ) , ( ( ( ( [string] , [number] ) , [number] ) , ) , ( ( ( [string] , [number] ) , [number] ) , ) , ( ( [string] , [number] ) , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ) , ) , ] , [ ( ( ( ( [string] , [number] ) , [number] ) , ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( [string] , [number] ) , [number] ) ) , ( ( [number] , ) , ( ( [string] , [number] ) , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ) ) , ( ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ) , ( ( [number] , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) ) , ( ( ( ( [string] , [number] ) , [number] ) , ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( [number] , ( ( [string] , [number] ) , [number] ) ) ) , ( ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) ) , ( [number] , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , [number] ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , [number] ) , ( [number] , ( ( [string] , [number] ) , [number] ) ) ) , ( ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ) , ] , [ ( ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( [number] , ( ( [string] , [number] ) , [number] ) ) ) , ( ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) ) , ( ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) ) , ( ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) ) , ( ( [number] , ( [string] , [number] ) ) , ( ( [string] , [number] ) , [number] , ( ( [string] , [number] ) , [number] ) ) ) , ( ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) ) , ( ( ( [string] , [number] ) , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ) ) , ( ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) ) , ( ( ( ( [string] , [number] ) , [number] ) , [number] ) , ( [number] , ( ( [string] , [number] ) , [number] ) ) ) , ] , ] [EOL]	
from typing import Tuple , List [EOL] import typing [EOL] fittings_6_6 = [ ( ( [number] , [number] ) , ( ( ( [string] , [number] ) , [number] ) , ) ) , ( ( [number] , [number] ) , ( ( ( [string] , [number] ) , [number] ) , ) ) , ( ( [number] , [number] ) , ( ( ( [string] , [number] ) , [number] ) , ) ) , ( ( [number] , [number] ) , ( ( ( [string] , [number] ) , [number] ) , ) ) , ( ( [number] , [number] ) , ( ( ( [string] , [number] ) , [number] ) , ) ) , ( ( [number] , [number] ) , ( ( ( [string] , [number] ) , [number] ) , ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Tuple[builtins.int,builtins.int],typing.Tuple[typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List [EOL] import typing [EOL] fittings_2_7 = [ ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Tuple[typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int],typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int],typing.Tuple[builtins.str,builtins.int]],typing.Tuple[typing.Tuple[builtins.str,builtins.int],typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int],typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int
from typing import Tuple , List [EOL] import typing [EOL] fittings_6_2 = [ ( ( [number] , [number] ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) ) , ( ( [number] , [number] ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) ) , ( ( [number] , [number] ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) ) , ( ( [number] , [number] ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) ) , ( ( [number] , [number] ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) ) , ( ( [number] , [number] ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) ) , ( ( [number] , [number] ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) ) , ( ( [number] , [number] ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) ) , ( ( [number] , [number] ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) ) , ( ( [number] , [number] ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Tuple[builtins.int,builtins.int],typing.Tuple[typing.Tuple[builtins.str,builtins.int],typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List [EOL] import typing [EOL] fittings_3_6 = [ ( ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Tuple[typing.Tuple[builtins.str,builtins.int]],typing.Tuple[typing.Tuple[builtins.str,builtins.int]],typing.Tuple[typing.Tuple[builtins.str,builtins.int]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List [EOL] import typing [EOL] fittings_4_8 = [ ( ( ( ( [string] , [number] ) , [number] ) , ) , ( ( ( [string] , [number] ) , [number] ) , ) , ( ( [string] , [number] ) , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ) , ( ( ( [string] , [number] ) , [number] ) , ) , ( ( [string] , [number] ) , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Tuple[typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int]],typing.Tuple[typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int]],typing.Tuple[typing.Tuple[builtins.str,builtins.int],typing.Tuple[builtins.str,builtins.int]],typing.Tuple[typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List [EOL] import typing [EOL] fittings_6_3 = [ ( ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) ) , ( ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) ) , ( ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) ) , ( ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) ) , ( ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Tuple[typing.Tuple[builtins.str,builtins.int]],typing.Tuple[typing.Tuple[builtins.str,builtins.int]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List [EOL] import typing [EOL] fittings_3_7 = [ ( ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( [number] , ( [string] , [number] ) ) , ( ( [string] , [number] ) , [number] ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( [number] , ( [string] , [number] ) ) , ( ( [string] , [number] ) , [number] ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( [number] , ( [string] , [number] ) ) , ( ( [string] , [number] ) , [number] ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Tuple[typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int],typing.Tuple[builtins.str,builtins.int],typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int]],typing.Tuple[builtins.int,typing.Tuple[builtins.str,builtins.int]],typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List [EOL] import typing [EOL] fittings_3_5 = [ ( ( ( [string] , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Tuple[typing.Tuple[builtins.str,builtins.int],typing.Tuple[builtins.str,builtins.int],typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int]],typing.Tuple[typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int],typing.Tuple[builtins.str,builtins.int]],typing.Tuple[typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int],typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List [EOL] import typing [EOL] fittings_4_2 = [ ( ( ( [string] , [number] ) , ( [string] , [number] ) , [number] , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , [number] , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ) , ( ( ( [string] , [number] ) , ( [string] , [number] ) , [number] , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , [number] , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ) , ( ( ( [string] , [number] ) , ( [string] , [number] ) , [number] , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , [number] , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ) , ( ( ( [string] , [number] ) , ( [string] , [number] ) , [number] , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , [number] , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ) , ( ( ( [string] , [number] ) , ( [string] , [number] ) , [number] , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , [number] , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ) , ( ( ( [string] , [number] ) , ( [string] , [number] ) , [number] , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , [number] , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Tuple[typing.Tuple[builtins.str,builtins.int],typing.Tuple[builtins.str,builtins.int],builtins.int,typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int]],typing.Tuple[typing.Tuple[builtins.str,builtins.int],typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int],typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int],typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int]],typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int,typing.Tuple[builtins.str,builtins.int],typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int],typing.Tuple[builtins.str,builtins.int]],typing.Tuple[typing.Tuple[builtins.str,builtins.int],typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int],typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int
from typing import Tuple , List [EOL] import typing [EOL] fittings_4_3 = [ ( ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) ) , ( ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) ) , ( ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) ) , ( ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) ) , ( ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) ) , ( ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) ) , ( ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) ) , ( ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) ) , ( ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) ) , ( ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) ) , ( ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) ) , ( ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) ) , ( ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) ) , ( ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) ) , ( ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) , ( ( [string] , [number] ) , ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Tuple[typing.Tuple[builtins.str,builtins.int]],typing.Tuple[typing.Tuple[builtins.str,builtins.int]],typing.Tuple[typing.Tuple[builtins.str,builtins.int]],typing.Tuple[typing.Tuple[builtins.str,builtins.int]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List [EOL] import typing [EOL] fittings_5_4 = [ ( ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) ) , ( [number] , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , [number] ) ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Tuple[typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int],typing.Tuple[builtins.str,builtins.int],typing.Tuple[builtins.str,builtins.int]],typing.Tuple[builtins.int,typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int]],typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List [EOL] import typing [EOL] fittings_5_5 = [ ( ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Tuple[typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int],typing.Tuple[builtins.str,builtins.int],typing.Tuple[builtins.str,builtins.int]],typing.Tuple[typing.Tuple[builtins.str,builtins.int],typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int]],typing.Tuple[typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int],typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List [EOL] import typing [EOL] fittings_1_1 = [ ( ( [number] , ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ) , ( ( [string] , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , [number] , ) , ) , ( ( [number] , ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ) , ( ( [string] , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , [number] , ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Tuple[builtins.int,typing.Tuple[builtins.str,builtins.int],typing.Tuple[builtins.str,builtins.int],typing.Tuple[builtins.str,builtins.int],typing.Tuple[builtins.str,builtins.int],typing.Tuple[builtins.str,builtins.int],typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int]],typing.Tuple[typing.Tuple[builtins.str,builtins.int],typing.Tuple[builtins.str,builtins.int],typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int],typing.Tuple[builtins.str,builtins.int],typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int],typing.Tuple[builtins.str,builtins.int],builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List [EOL] import typing [EOL] fittings_4_5 = [ ( ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ) , ( ( ( [string] , [number] ) , [number] ) , [number] , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Tuple[typing.Tuple[builtins.str,builtins.int],typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int]],typing.Tuple[typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int]],typing.Tuple[typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int],builtins.int,typing.Tuple[builtins.str,builtins.int]],typing.Tuple[typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int],typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List [EOL] import typing [EOL] fittings_3_8 = [ ( ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ) , ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Tuple[typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int],typing.Tuple[builtins.str,builtins.int],typing.Tuple[builtins.str,builtins.int]],typing.Tuple[typing.Tuple[builtins.str,builtins.int],typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int]],typing.Tuple[typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List [EOL] import typing [EOL] fittings_5_2 = [ ( ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Tuple[builtins.int,builtins.int,builtins.int],typing.Tuple[builtins.int,builtins.int,builtins.int],typing.Tuple[typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int],typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int],typing.Tuple[builtins.str,builtins.int]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List [EOL] import typing [EOL] fittings_4_7 = [ ( ( ( [string] , [number] ) , [number] , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( [number] , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ) , ( ( ( [string] , [number] ) , [number] , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( [number] , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ) , ( ( ( [string] , [number] ) , [number] , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( [number] , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ) , ( ( ( [string] , [number] ) , [number] , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( [number] , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ) , ( ( ( [string] , [number] ) , [number] , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( [number] , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ) , ( ( ( [string] , [number] ) , [number] , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( [number] , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ) , ( ( ( [string] , [number] ) , [number] , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( [number] , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ) , ( ( ( [string] , [number] ) , [number] , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( [number] , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ) , ( ( ( [string] , [number] ) , [number] , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( [number] , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int,typing.Tuple[builtins.str,builtins.int]],typing.Tuple[typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int],typing.Tuple[builtins.str,builtins.int]],typing.Tuple[builtins.int,typing.Tuple[builtins.str,builtins.int]],typing.Tuple[typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int],typing.Tuple[builtins.str,builtins.int]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List [EOL] import typing [EOL] fittings_4_6 = [ ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( [number] , ( [string] , [number] ) , ( [string] , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( [number] , ( [string] , [number] ) , ( [string] , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( [number] , ( [string] , [number] ) , ( [string] , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( [number] , ( [string] , [number] ) , ( [string] , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( [number] , ( [string] , [number] ) , ( [string] , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( [number] , ( [string] , [number] ) , ( [string] , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( [number] , ( [string] , [number] ) , ( [string] , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( [number] , ( [string] , [number] ) , ( [string] , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( [number] , ( [string] , [number] ) , ( [string] , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( [number] , ( [string] , [number] ) , ( [string] , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( [number] , ( [string] , [number] ) , ( [string] , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( [number] , ( [string] , [number] ) , ( [string] , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( [number] , ( [string] , [number] ) , ( [string] , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( [number] , ( [string] , [number] ) , ( [string] , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( [number] , ( [string] , [number] ) , ( [string] , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( [number] , ( [string] , [number] ) , ( [string] , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( [number] , ( [string] , [number] ) , ( [string] , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( [number] , ( [string] , [number] ) , ( [string] , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( [number] , ( [string] , [number] ) , ( [string] , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( [number] , ( [string] , [number] ) , ( [string] , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( [number] , ( [string] , [number] ) , ( [string] , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( [number] , ( [string] , [number] ) , ( [string] , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( [number] , ( [string] , [number] ) , ( [string] , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( [number] , ( [string] , [number] ) , ( [string] , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( [number] , ( [string] , [number] ) , ( [string] , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( [number] , ( [string] , [number] ) , ( [string] , [number] ) ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Tuple[typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int],typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int]],typing.Tuple[typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int],typing.Tuple[builtins.str,builtins.int],typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int]],typing.Tuple[typing.Tuple[builtins.str,builtins.int],typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int],typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int]],typing.Tuple[builtins.int,typing.Tuple[builtins.str,builtins.int],typing.Tuple[builtins.str,builtins.int
from typing import Tuple , List [EOL] import typing [EOL] fittings_1_2 = [ ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) ) , ( [number] , ( [string] , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) ) , ( [number] , ( [string] , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) ) , ( [number] , ( [string] , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( [string] , [number] ) ) , ( [number] , ( [string] , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Tuple[typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int],typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int],typing.Tuple[builtins.str,builtins.int],typing.Tuple[builtins.str,builtins.int]],typing.Tuple[builtins.int,typing.Tuple[builtins.str,builtins.int],typing.Tuple[builtins.str,builtins.int],typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List [EOL] import typing [EOL] fittings_5_3 = [ ( ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( [number] , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ) , ( ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) ) , ( ( ( [string] , [number] ) , [number] ) , ( [string] , [number] ) , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ( [number] , ( ( [string] , [number] ) , [number] ) , ( ( [string] , [number] ) , [number] ) ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Tuple[typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int],typing.Tuple[builtins.str,builtins.int],typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int],typing.Tuple[builtins.str,builtins.int]],typing.Tuple[typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int],typing.Tuple[builtins.str,builtins.int],typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int],typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int]],typing.Tuple[builtins.int,typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int],typing.Tuple[typing.Tuple[builtins.str,builtins.int],builtins.int]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] [EOL] metadata = abjad . OrderedDict ( [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import abjad [EOL] [EOL] metadata = abjad . OrderedDict ( [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0