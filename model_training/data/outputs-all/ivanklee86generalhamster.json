VERSION = [string] [EOL]	$builtins.str$ 0 0 0
from typing import List [EOL] import typing [EOL] import os [EOL] from dotenv import load_dotenv [EOL] [EOL] [comment] [EOL] load_dotenv ( ) [EOL] [EOL] [comment] [EOL] API_TOKEN = os . environ [ [string] ] [EOL] DEFAULT_REPLY = [string] [EOL] ERRORS_TO = [string] [EOL] [EOL] [comment] [EOL] CHANNEL_ID = os . environ [ [string] ] [EOL] [EOL] PLUGINS = [ [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import re [EOL] from slackbot . bot import respond_to [EOL] from slackbot . bot import Bot [EOL] [EOL] [EOL] @ respond_to ( [string] , re . IGNORECASE ) def help ( message ) : [comment] [EOL] message . reply ( [string] ) [EOL] [EOL] [EOL] def main ( ) : [EOL] bot = Bot ( ) [EOL] bot . run ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
import re [EOL] from slackbot . bot import respond_to [EOL] from app . constants import VERSION [EOL] [EOL] [EOL] @ respond_to ( [string] , re . IGNORECASE ) def status ( message ) : [EOL] message . reply ( f" [string] { VERSION }" ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import builtins [EOL] import json [EOL] from slackclient import SlackClient [EOL] [EOL] [EOL] def send_slack_msg ( slack_token , slack_channel , message = [string] , attachments = None ) : [EOL] [docstring] [EOL] client = SlackClient ( slack_token ) [EOL] [EOL] client . api_call ( [string] , channel = slack_channel , text = message , attachments = json . dumps ( attachments ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Dict [EOL] import typing [EOL] import os [EOL] import pytest [EOL] from dotenv import load_dotenv [EOL] [EOL] [EOL] @ pytest . fixture ( ) def envconfigs ( ) : [EOL] load_dotenv ( ) [EOL] [EOL] configs = { [string] : os . environ [ [string] ] , [string] : os . environ [ [string] ] , } [EOL] [EOL] yield configs [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Dict , List [EOL] import typing [EOL] from app . helpers . slack import send_slack_msg [EOL] from tests . utilities . fixtures import envconfigs [comment] [EOL] [EOL] [EOL] MESSAGE = [string] [EOL] ATTACHMENT_DICT = [ { [string] : [string] , [string] : [string] , [string] : [string] } ] [EOL] [EOL] [EOL] def test_send_slack_msg_only_message ( envconfigs ) : [comment] [EOL] send_slack_msg ( envconfigs [ [string] ] , envconfigs [ [string] ] , MESSAGE ) [EOL] [EOL] [EOL] def test_send_slack_msg_only_attachment ( envconfigs ) : [comment] [EOL] send_slack_msg ( envconfigs [ [string] ] , envconfigs [ [string] ] , attachments = ATTACHMENT_DICT ) [EOL] [EOL] [EOL] def test_send_slack_msg_both ( envconfigs ) : [comment] [EOL] send_slack_msg ( envconfigs [ [string] ] , envconfigs [ [string] ] , message = MESSAGE , attachments = ATTACHMENT_DICT ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] import os [EOL] from dotenv import load_dotenv [EOL] from slackclient import SlackClient [EOL] [EOL] [EOL] load_dotenv ( ) [EOL] slack_token = os . environ [ [string] ] [EOL] sc = SlackClient ( slack_token ) [EOL] channels = sc . api_call ( [string] , exclude_archived = [number] ) [EOL] [EOL] for channel in channels [ [string] ] : [EOL] print ( f"{ channel [ [string] ] } [string] { channel [ [string] ] }" ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0