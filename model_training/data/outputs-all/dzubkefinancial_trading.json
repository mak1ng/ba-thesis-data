[comment] [EOL] [comment] [EOL] [docstring] [EOL] import sys [EOL] [EOL] from pkg_resources import require , VersionConflict [EOL] from setuptools import setup [EOL] [EOL] try : [EOL] require ( [string] ) [EOL] except VersionConflict : [EOL] print ( [string] ) [EOL] sys . exit ( [number] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] setup ( use_pyscaffold = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from pkg_resources import get_distribution , DistributionNotFound [EOL] [EOL] try : [EOL] [comment] [EOL] dist_name = __name__ [EOL] __version__ = get_distribution ( dist_name ) . version [EOL] except DistributionNotFound : [EOL] __version__ = [string] [EOL] finally : [EOL] del get_distribution , DistributionNotFound [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0
[EOL] [EOL] [EOL] import builtins [EOL] def simple_bond_valuation ( coupon_rate , market_rate , maturity ) : [EOL] [docstring] [EOL] [EOL] market_value = coupon_rate * [number] * ( [number] - [number] / ( [number] + market_rate ) ** maturity ) / market_rate + [number] * [number] / ( [number] + market_rate ) ** maturity [EOL] [EOL] return market_value	0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] [EOL] [comment] [EOL] [EOL] def main ( ) : [EOL] [docstring] [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any , Callable , List [EOL] import typing [EOL] import builtins [EOL] from typing import List , Callable [EOL] [EOL] [comment] [EOL] from matplotlib import pyplot as plt [EOL] [EOL] [comment] [EOL] from bonds import simple_bond_valuation [EOL] [EOL] def plot_function ( function , list_range , step = [number] ) : [EOL] [docstring] [EOL] [EOL] x_values = range ( list_range [ [number] ] , list_range [ [number] ] , step ) [EOL] [EOL] y_values = list ( function ( x ) for x in x_values ) [EOL] [EOL] return y_values [EOL] [EOL] if __name__ == [string] : [EOL] func = simple_bond_valuation ( coupon_rate = [number] , maturity = [number] ) [EOL] print ( func ( market_rate = [number] ) ) [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [docstring] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0
[comment] [EOL] import unittest [EOL] import sys [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] from financial_trading . bonds import simple_bond_valuation [EOL] [EOL] sys . path . insert ( [number] , [string] ) [EOL] [EOL] [EOL] class TestPrepData ( unittest . TestCase ) : [EOL] [EOL] [EOL] def test_simple_bond_valuation ( self ) : [EOL] [docstring] [EOL] [EOL] self . assertLess ( simple_bond_valuation ( [number] , [number] , [number] ) - [number] , [number] ) [EOL] [EOL] [EOL] [comment] [EOL] self . assertIsInstance ( simple_bond_valuation ( [number] , [number] , [number] ) , float ) [EOL] [EOL] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0