import tkinter [EOL] import src [EOL] import tkinter as tk [EOL] import tkinter . ttk as ttk [EOL] [EOL] from tkinter . colorchooser import askcolor [EOL] [EOL] class testapp ( ttk . Frame ) : [EOL] [EOL] def __init__ ( self , master = None ) : [EOL] super ( ) . __init__ ( master ) [EOL] [EOL] if master is not None : [EOL] self . master = master [EOL] [EOL] self . create_widgets ( ) [EOL] [EOL] def create_widgets ( self ) : [EOL] self . color ( ) [EOL] [EOL] def color ( self ) : [EOL] colRGB , colHex = askcolor ( parent = self , color = [string] , title = [string] ) [EOL] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] root = tk . Tk ( ) [EOL] app = testapp ( root ) [EOL] [EOL] app . mainloop ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tkinter.Tk$ 0 0 0 0 0 0 0 $src.dml_thread.test.testapp$ 0 0 0 $tkinter.Tk$ 0 0 0 $src.dml_thread.test.testapp$ 0 0 0 0 0
import builtins [EOL] from typing import Type , Dict , List , Any , Tuple , Union [EOL] import src [EOL] import typing [EOL] from typing import Tuple , List , Any , Union , Dict , NewType , NamedTuple [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] num = Union [ int , float ] [EOL] numList = List [ num ] [EOL] numTup = Tuple [ num ] [EOL] [EOL] simpTypes = Union [ str , num , bool , None ] [EOL] simpList = List [ simpTypes ] [EOL] simpTup = Tuple [ simpTypes , ... ] [EOL] simpDict = Dict [ str , Union [ simpTypes , simpList ] ] [EOL] compList = List [ Union [ simpTypes , List [ Any ] , Dict [ str , Any ] ] ] [EOL] compDict = Dict [ str , Union [ simpTypes , List [ Any ] , Dict [ str , Any ] ] ] [EOL] [EOL] [comment] [EOL] pathType = str [EOL] tkEvent = NewType ( [string] , str ) [EOL] [EOL] paramsTup = NamedTuple ( [string] , [ ( [string] , str ) , ( [string] , str ) , ( [string] , str ) , ( [string] , str ) , ( [string] , str ) ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[typing.Dict[builtins.str,typing.Union[None,typing.List[typing.Union[None,builtins.bool,builtins.float,builtins.int,builtins.str]],builtins.bool,builtins.float,builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[typing.List[typing.Union[None,typing.Dict[builtins.str,typing.Any],typing.List[typing.Any],builtins.bool,builtins.float,builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[typing.Dict[builtins.str,typing.Union[None,typing.Dict[builtins.str,typing.Any],typing.List[typing.Any],builtins.bool,builtins.float,builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.dml_thread.my_types.paramsTup]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import sys [EOL] from PySide2 . QtWidgets import QApplication , QLabel [EOL] [EOL] app = QApplication ( sys . argv ) [EOL] [comment] [EOL] label = QLabel ( [string] ) [EOL] label . show ( ) [EOL] app . exec_ ( ) [EOL] [EOL] [EOL] import sys [EOL] from PySide2 . QtWidgets import QApplication , QMessageBox [EOL] [EOL] [comment] [EOL] app = QApplication ( sys . argv ) [EOL] [EOL] [comment] [EOL] msg_box = QMessageBox ( ) [EOL] msg_box . setText ( [string] ) [EOL] msg_box . show ( ) [EOL] [EOL] sys . exit ( msg_box . exec_ ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
import logging [EOL] import logging [EOL] [comment] [EOL] [EOL] logger = logging . getLogger ( [string] ) [EOL] logging . basicConfig ( level = logging . INFO , format = [string] , datefmt = [string] , filename = [string] , filemode = [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0
[comment] [EOL] from typing import Any , List [EOL] import typing [EOL] try : [EOL] from setuptools import setup [EOL] from setuptools import Extension [EOL] except ImportError : [EOL] from distutils . core import setup [EOL] from distutils . extension import Extension [EOL] [EOL] from Cython . Build import cythonize [EOL] import numpy [EOL] [EOL] scripts = [ Extension ( [string] , [ [string] ] ) , Extension ( [string] , [ [string] ] , include_dirs = [ numpy . get_include ( ) ] ) , ] [EOL] [EOL] [EOL] setup ( ext_modules = cythonize ( scripts , build_dir = [string] , ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0
from typing import Any , Dict , Union , Tuple [EOL] import numpy [EOL] import builtins [EOL] import dml_thread [EOL] import typing [EOL] import os [EOL] import json [EOL] import numpy as np [EOL] import matplotlib [EOL] matplotlib . use ( [string] ) [EOL] import matplotlib . pyplot as plt [EOL] [EOL] from typing import Tuple [comment] [EOL] from typing import Optional as Opt [EOL] from dml_thread . types import simpDict , pathType [EOL] [EOL] [EOL] data_dir = pathType ( os . getcwd ( ) ) [comment] [EOL] [EOL] [EOL] def get_json_settings ( json_file ) : [EOL] [docstring] [EOL] with open ( [string] + json_file , [string] ) as jf : [EOL] settings = json . load ( jf ) [EOL] return settings [EOL] [EOL] [EOL] def save_json_settings ( json_file , setting_dict ) : [EOL] [docstring] [EOL] try : [EOL] setting_json = json . dumps ( setting_dict ) [EOL] except ValueError as e : [EOL] print ( e ) [EOL] except Exception as e : [EOL] print ( e ) [EOL] else : [EOL] with open ( json_file , [string] ) as jf : [EOL] jf . write ( setting_json ) [EOL] [EOL] fontlab_default = dict ( family = [string] , color = [string] , weight = [string] , size = [number] ) [EOL] [EOL] fontlab = get_json_settings ( pathType ( [string] ) ) [EOL] if fontlab is None : [EOL] fontlab = fontlab_default [EOL] [comment] [EOL] [EOL] [EOL] def make_cv_plot ( x_var , y_var , params , output_dir = None , settings = fontlab_default ) : [EOL] [docstring] [EOL] [EOL] fig = plt . figure ( ) [EOL] ax1 = fig . add_subplot ( [number] ) [EOL] [comment] [EOL] [comment] [EOL] ax1 . plot ( x_var , y_var ) [EOL] xmin , xmax = plt . xlim ( ) [comment] [EOL] [EOL] ( filename_strip , solv , elec , ref_elec , work_elec ) = params [EOL] expt_vars = f" [string] { work_elec } [string] { ref_elec } [string] { elec } [string] { solv }" [EOL] plt . title ( f" [string] { work_elec } [string] { elec } [string] { solv } [string] { ref_elec } [string] " , y = [number] ) [EOL] [EOL] plt . xlabel ( f' [string] { ref_elec } [string] ' , fontdict = settings ) [EOL] [EOL] plt . ylabel ( [string] + [string] , fontdict = settings ) [EOL] plt . text ( xmax * [number] , [number] , expt_vars , fontdict = settings , withdash = False ) [EOL] [EOL] plt . savefig ( f"{ output_dir } [string] { filename_strip }" + [string] , bbox_inches = [string] , dpi = [number] , transparent = True ) [EOL] [EOL] plt . ylim ( - [number] , [number] ) [comment] [EOL] plt . savefig ( f"{ output_dir } [string] { filename_strip }" + [string] , bbox_inches = [string] , dpi = [number] , transparent = True ) [EOL] [EOL] print ( f"{ filename_strip } [string] " ) [EOL] [comment] [EOL] [EOL] [EOL] def make_nyquist_plot ( imped_imag , imped_real , params , output_dir = None ) : [EOL] fig = plt . figure ( ) [EOL] ax1 = fig . add_subplot ( [number] ) [EOL] [EOL] [comment] [EOL] ax1 . plot ( imped_real , imped_imag , [string] ) [EOL] [comment] [EOL] filename_strip = params [ [number] ] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] plt . xlabel ( f' [string] ' , fontdict = fontlab ) [EOL] plt . ylabel ( [string] , fontdict = fontlab ) [EOL] plt . savefig ( f'{ output_dir } [string] { filename_strip }' + [string] , bbox_inches = [string] , dpi = [number] , transparent = True ) [EOL] [EOL] plt . xlim ( [number] , [number] ) [EOL] plt . ylim ( [number] , [number] ) [EOL] plt . savefig ( f'{ output_dir } [string] { filename_strip }' + [string] , bbox_inches = [string] , dpi = [number] , transparent = True ) [EOL] print ( f"{ filename_strip } [string] " ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] def make_bode_plot ( freq_log , imped_log , phase , params , output_dir = None ) : [EOL] fig = plt . figure ( ) [EOL] ax1 = fig . add_subplot ( [number] ) [EOL] xmin , xmax = plt . xlim ( ) [comment] [EOL] plt . ylim ( [number] , [number] ) [EOL] [comment] [EOL] ax1 . plot ( freq_log , imped_log , [string] ) [EOL] [EOL] ax2 = ax1 . twinx ( ) [EOL] plt . ylim ( - [number] , [number] ) [EOL] ax2 . plot ( freq_log , phase , [string] ) [EOL] [EOL] ( filename_strip , solv , elec , ref_elec , work_elec ) = params [EOL] expt_vars = f" [string] { work_elec } [string] { ref_elec } [string] { elec } [string] { solv }" [EOL] plt . title ( f" [string] { work_elec } [string] { elec } [string] { solv } [string] { ref_elec } [string] " , y = [number] ) [EOL] [EOL] plt . xlabel ( f' [string] ' , fontdict = fontlab ) [EOL] [EOL] plt . ylabel ( [string] , fontdict = fontlab ) [EOL] plt . text ( xmax * [number] , [number] , expt_vars , fontdict = fontlab , withdash = False ) [EOL] [EOL] plt . savefig ( f"{ output_dir } [string] { filename_strip }" + [string] , bbox_inches = [string] , dpi = [number] , transparent = True ) [EOL] [EOL] [EOL] plt . savefig ( f"{ output_dir } [string] { filename_strip }" + [string] , bbox_inches = [string] , dpi = [number] , transparent = True ) [EOL] [EOL] print ( f"{ filename_strip } [string] " ) [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dml_thread.types.pathType$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dml_thread.types.simpDict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dml_thread.types.simpDict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 $dml_thread.types.simpDict$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $dml_thread.types.simpDict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import cython [EOL] import cython [EOL] [EOL] [EOL] @ cython . ccall def somemath ( number ) : [EOL] dn = number * [number] [EOL] return dn [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 $cython.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import logging [EOL] import logging [EOL] [comment] [EOL] [EOL] logger = logging . getLogger ( [string] ) [EOL] logging . basicConfig ( level = logging . INFO , format = [string] , datefmt = [string] , filename = [string] , filemode = [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import builtins [EOL] from typing import Any , Union , List [EOL] import tkinter [EOL] import matplotlib [EOL] import typing [EOL] import src [EOL] import matplotlib [EOL] matplotlib . use ( [string] ) [EOL] import numpy as np [EOL] import matplotlib . pyplot as plt [EOL] from matplotlib . backends . backend_tkagg import FigureCanvasTkAgg , NavigationToolbar2TkAgg [EOL] from matplotlib . figure import Figure [EOL] import tkinter as tk [EOL] from tkinter import ttk [EOL] import sys [EOL] from typing import Union [EOL] [EOL] class Application ( ttk . Frame ) : [EOL] def __init__ ( self , master = None ) : [EOL] tk . Frame . __init__ ( self , master ) [EOL] self . createWidgets ( ) [EOL] [EOL] def createWidgets ( self ) : [EOL] fig = plt . figure ( figsize = ( [number] , [number] ) ) [EOL] ax = fig . add_axes ( [ [number] , [number] , [number] , [number] ] , polar = True ) [EOL] canvas = FigureCanvasTkAgg ( fig , master = root ) [EOL] canvas . get_tk_widget ( ) . grid ( row = [number] , column = [number] ) [EOL] canvas . show ( ) [EOL] [EOL] self . plotbutton = tk . Button ( master = root , text = [string] , command = lambda : self . polar_plot ( canvas , ax ) ) [EOL] self . plotbutton . grid ( row = [number] , column = [number] ) [EOL] [EOL] [EOL] def polar_plot ( self , canvas , ax ) : [EOL] c = [ [string] , [string] , [string] ] [comment] [EOL] ax . clear ( ) [comment] [EOL] for i in range ( [number] ) : [comment] [EOL] theta = np . random . uniform ( [number] , [number] , [number] ) [EOL] r = np . random . uniform ( [number] , [number] , [number] ) [EOL] ax . plot ( theta , r , linestyle = [string] , marker = [string] , color = c [ i ] ) [EOL] canvas . draw ( ) [EOL] [EOL] root = tk . Tk ( ) [EOL] app = Application ( master = root ) [EOL] app . mainloop ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $matplotlib.backends.backend_tkagg.FigureCanvasTkAgg$ 0 $matplotlib.figure.Figure$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $matplotlib.figure.Figure$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $matplotlib.figure.Figure$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $matplotlib.backends.backend_tkagg.FigureCanvasTkAgg$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import tkinter [EOL] import builtins [EOL] import typing [EOL] import tkinter as tk [EOL] from tkinter import X , Y , TOP , BOTTOM , LEFT , RIGHT , HORIZONTAL , VERTICAL , END , BOTH , ACTIVE , WORD , N , E , NSEW , EW [EOL] from tkinter import ttk [EOL] [comment] [EOL] import panels [EOL] class Notebook ( ttk . Frame ) : [EOL] [docstring] [EOL] def __init__ ( self , isapp = True , master = None , name = [string] ) : [EOL] ttk . Frame . __init__ ( self , name = name ) [EOL] self . pack ( expand = Y , fill = BOTH ) [EOL] if master is not None : [EOL] self . master = master [EOL] self . master . title ( [string] ) [EOL] self . isapp = isapp [EOL] self . _create_widgets ( ) [EOL] [EOL] def _create_widgets ( self ) : [EOL] if self . isapp : [EOL] panels . SeeDismissPanel ( self ) [EOL] self . _create_demo_panel ( ) [EOL] [EOL] def _create_demo_panel ( self ) : [EOL] demoPanel = tk . Frame ( self , name = [string] ) [EOL] demoPanel . pack ( side = TOP , fill = BOTH , expand = Y ) [EOL] nb = ttk . Notebook ( demoPanel , name = [string] ) [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] nb . enable_traversal ( ) [EOL] nb . pack ( fill = BOTH , expand = Y , padx = [number] , pady = [number] ) [EOL] self . _create_descrip_tab ( nb ) [EOL] self . _create_disabled_tab ( nb ) [EOL] self . _create_text_tab ( nb ) [EOL] [EOL] def _create_descrip_tab ( self , nb ) : [EOL] [docstring] [EOL] frame = ttk . Frame ( nb , name = [string] ) [EOL] msg = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] [string] ] [comment] [EOL] lbl = ttk . Label ( frame , wraplength = [string] , justify = LEFT , anchor = N , text = [string] . join ( msg ) ) [EOL] neatVar = tk . StringVar ( ) [EOL] btn = ttk . Button ( frame , text = [string] , underline = [number] , command = lambda v = neatVar : self . _say_neat ( v ) ) [EOL] neat = ttk . Label ( frame , textvariable = neatVar , name = [string] ) [EOL] [EOL] [comment] [EOL] lbl . grid ( row = [number] , column = [number] , columnspan = [number] , sticky = [string] , pady = [number] ) [EOL] btn . grid ( row = [number] , column = [number] , pady = ( [number] , [number] ) ) [EOL] neat . grid ( row = [number] , column = [number] , pady = ( [number] , [number] ) ) [EOL] frame . rowconfigure ( [number] , weight = [number] ) [EOL] frame . columnconfigure ( ( [number] , [number] ) , weight = [number] , uniform = [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] self . winfo_toplevel ( ) . bind ( [string] , lambda e , v = neatVar : self . _say_neat ( v ) ) [EOL] [EOL] [comment] [EOL] nb . add ( frame , text = [string] , underline = [number] , padding = [number] ) [EOL] [EOL] def _say_neat ( self , v ) : [EOL] v . set ( [string] ) [EOL] self . update ( ) [EOL] self . after ( [number] , v . set ( [string] ) ) [EOL] [EOL] [comment] [EOL] def _create_disabled_tab ( self , nb ) : [EOL] [docstring] [EOL] frame = ttk . Frame ( nb ) [EOL] nb . add ( frame , text = [string] , state = [string] ) [EOL] [EOL] [comment] [EOL] def _create_text_tab ( self , nb ) : [EOL] [docstring] [EOL] frame = ttk . Frame ( nb ) [EOL] txt = tk . Text ( frame , wrap = WORD , width = [number] , height = [number] ) [EOL] vscroll = ttk . Scrollbar ( frame , orient = VERTICAL , command = txt . yview ) [EOL] txt [ [string] ] = vscroll . set [EOL] vscroll . pack ( side = RIGHT , fill = Y ) [EOL] txt . pack ( fill = BOTH , expand = Y ) [EOL] nb . add ( frame , text = [string] , underline = [number] ) [comment] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] Notebook ( ) . mainloop ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import tkinter [EOL] import builtins [EOL] import typing [EOL] import tkinter as tk [EOL] from tkinter import X , Y , TOP , BOTTOM , LEFT , RIGHT , HORIZONTAL , VERTICAL , END , BOTH , ACTIVE , WORD , N , E , NSEW , EW [EOL] from tkinter import ttk [EOL] import panels [EOL] [EOL] [comment] [EOL] [EOL] class dmlNotebook ( ttk . Frame ) : [EOL] [docstring] [EOL] def __init__ ( self , master = None , name = [string] ) : [EOL] super ( ) . __init__ ( master , name = name ) [EOL] if master is not None : [EOL] self . master = master [EOL] self . master . title ( [string] ) [EOL] self . _create_widgets ( ) [EOL] self . pack ( expand = Y , fill = BOTH ) [EOL] [EOL] style = ttk . Style ( ) [EOL] style . theme_create ( [string] , parent = [string] , settings = { [string] : { [string] : { [string] : [ [number] , [number] , [number] , [number] ] } } , [string] : { [string] : { [string] : [ [number] , [number] ] } , } } ) [comment] [EOL] style . theme_use ( [string] ) [EOL] [EOL] def _create_widgets ( self ) : [EOL] panels . SeeDismissPanel ( self ) [EOL] self . _create_notebook_panel ( ) [EOL] [EOL] [EOL] def _create_notebook_panel ( self ) : [EOL] MainPanel = tk . Frame ( self , name = [string] ) [EOL] MainPanel . pack ( side = TOP , fill = BOTH , expand = Y ) [EOL] [EOL] [comment] [EOL] nb = ttk . Notebook ( MainPanel , name = [string] ) [EOL] nb . enable_traversal ( ) [comment] [EOL] nb . pack ( fill = BOTH , expand = Y , padx = [number] , pady = [number] ) [EOL] [EOL] [comment] [EOL] self . _create_home_tab ( nb ) [EOL] self . _create_file_tab ( nb ) [EOL] self . _create_batch_tab ( nb ) [EOL] self . _create_settings_tab ( nb ) [EOL] [comment] [EOL] self . _create_text_tab ( nb ) [EOL] self . _create_misc_tab ( nb ) [EOL] [EOL] [EOL] def _create_home_tab ( self , nb ) : [EOL] [docstring] [EOL] frame = ttk . Frame ( nb ) [EOL] nb . add ( frame , text = [string] , underline = [number] ) [EOL] [EOL] [EOL] def _create_file_tab ( self , nb ) : [EOL] [docstring] [EOL] frame = ttk . Frame ( nb ) [EOL] nb . add ( frame , text = [string] , underline = [number] ) [EOL] [EOL] [EOL] def _create_batch_tab ( self , nb ) : [EOL] [docstring] [EOL] frame = ttk . Frame ( nb ) [EOL] nb . add ( frame , text = [string] , underline = [number] ) [EOL] [EOL] [EOL] def _create_settings_tab ( self , nb ) : [EOL] [docstring] [EOL] settings_frame = ttk . Frame ( nb , name = [string] ) [EOL] settings_frame . rowconfigure ( [number] , weight = [number] ) [EOL] settings_frame . columnconfigure ( ( [number] , [number] ) , weight = [number] , uniform = [number] ) [EOL] nb . add ( settings_frame , text = [string] , underline = [number] , padding = [number] ) [comment] [EOL] [EOL] msg = [ [string] ] [comment] [EOL] settingslbl = ttk . Label ( settings_frame , wraplength = [string] , justify = LEFT , anchor = N , text = [string] . join ( msg ) ) [EOL] settingslbl . grid ( row = [number] , column = [number] , columnspan = [number] , sticky = [string] , pady = [number] ) [EOL] [EOL] loadbtn = ttk . Button ( settings_frame , text = [string] , underline = [number] , command = None ) [EOL] loadbtn . grid ( row = [number] , column = [number] , pady = ( [number] , [number] ) ) [EOL] [EOL] savebtn = ttk . Button ( settings_frame , text = [string] , underline = [number] , command = None ) [EOL] savebtn . grid ( row = [number] , column = [number] , pady = ( [number] , [number] ) ) [EOL] [EOL] resetbtn = ttk . Button ( settings_frame , text = [string] , underline = [number] , command = None ) [EOL] resetbtn . grid ( row = [number] , column = [number] , pady = ( [number] , [number] ) ) [EOL] [EOL] [EOL] def _create_misc_tab ( self , nb ) : [EOL] [docstring] [EOL] frame = ttk . Frame ( nb ) [EOL] nb . add ( frame , text = [string] , underline = [number] ) [EOL] [EOL] [EOL] def _create_disabled_tab ( self , nb ) : [EOL] [docstring] [EOL] frame = ttk . Frame ( nb ) [EOL] nb . add ( frame , text = [string] , state = [string] ) [EOL] [EOL] [EOL] def _create_text_tab ( self , nb ) : [EOL] [docstring] [EOL] frame = ttk . Frame ( nb ) [EOL] txt = tk . Text ( frame , wrap = WORD , width = [number] , height = [number] ) [EOL] vscroll = ttk . Scrollbar ( frame , orient = VERTICAL , command = txt . yview ) [EOL] txt [ [string] ] = vscroll . set [EOL] vscroll . pack ( side = RIGHT , fill = Y ) [EOL] txt . pack ( fill = BOTH , expand = Y ) [EOL] nb . add ( frame , text = [string] , underline = [number] ) [comment] [EOL] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] dmlNotebook ( ) . mainloop ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0