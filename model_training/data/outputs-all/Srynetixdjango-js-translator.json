from typing import Tuple , List [EOL] import typing [EOL] [docstring] [EOL] [EOL] import distutils . cmd [EOL] import distutils . log [EOL] import subprocess [EOL] import sys [EOL] from typing import List , Tuple [EOL] [EOL] from setuptools import setup [EOL] [EOL] from django_js_translator . version import __version__ [EOL] [EOL] [EOL] class LintCommand ( distutils . cmd . Command ) : [EOL] [docstring] [EOL] [EOL] description = [string] [EOL] user_options = [ ( [string] , [string] , [string] ) ] [EOL] [EOL] def initialize_options ( self ) : [EOL] self . path = None [EOL] [EOL] def finalize_options ( self ) : [EOL] if self . path is None : [EOL] self . path = [string] [EOL] [EOL] def run ( self ) : [EOL] try : [EOL] self . announce ( f" [string] { self . path } [string] " ) [EOL] subprocess . check_call ( [ [string] , self . path ] ) [EOL] except subprocess . CalledProcessError : [EOL] sys . exit ( [number] ) [EOL] [EOL] [EOL] class FormatCommand ( distutils . cmd . Command ) : [EOL] [docstring] [EOL] [EOL] description = [string] [EOL] user_options = [ ( [string] , [string] , [string] ) ] [EOL] [EOL] def initialize_options ( self ) : [EOL] self . path = None [EOL] [EOL] def finalize_options ( self ) : [EOL] if self . path is None : [EOL] self . path = [string] [EOL] [EOL] def run ( self ) : [EOL] self . announce ( f" [string] { self . path } [string] " ) [EOL] [EOL] try : [EOL] self . announce ( [string] ) [EOL] subprocess . check_call ( [ [string] , [string] , [string] , self . path ] ) [EOL] except subprocess . CalledProcessError : [EOL] sys . exit ( [number] ) [EOL] [EOL] try : [EOL] self . announce ( [string] ) [EOL] subprocess . check_call ( [ [string] , [string] , [string] , [string] , [string] , self . path ] ) [EOL] except subprocess . CalledProcessError : [EOL] sys . exit ( [number] ) [EOL] [EOL] [EOL] class FormatCheckCommand ( distutils . cmd . Command ) : [EOL] [docstring] [EOL] [EOL] description = [string] [EOL] user_options = [ ( [string] , [string] , [string] ) ] [EOL] [EOL] def initialize_options ( self ) : [EOL] self . path = None [EOL] [EOL] def finalize_options ( self ) : [EOL] if self . path is None : [EOL] self . path = [string] [EOL] [EOL] def run ( self ) : [EOL] try : [EOL] self . announce ( f" [string] { self . path } [string] " ) [EOL] subprocess . check_call ( [ [string] , [string] , [string] , [string] , [string] , [string] , self . path ] ) [EOL] except subprocess . CalledProcessError : [EOL] sys . exit ( [number] ) [EOL] [EOL] [EOL] class TypeCheckCommand ( distutils . cmd . Command ) : [EOL] [docstring] [EOL] [EOL] description = [string] [EOL] user_options = [ ( [string] , [string] , [string] ) ] [EOL] [EOL] def initialize_options ( self ) : [EOL] self . path = None [EOL] [EOL] def finalize_options ( self ) : [EOL] if self . path is None : [EOL] self . path = [string] [EOL] [EOL] def run ( self ) : [EOL] try : [EOL] self . announce ( f" [string] { self . path } [string] " ) [EOL] subprocess . check_call ( [ [string] , self . path ] ) [EOL] except subprocess . CalledProcessError : [EOL] sys . exit ( [number] ) [EOL] [EOL] [EOL] class CICommand ( distutils . cmd . Command ) : [EOL] [docstring] [EOL] [EOL] description = [string] [EOL] user_options = [ ] [EOL] [EOL] def initialize_options ( self ) : [EOL] pass [EOL] [EOL] def finalize_options ( self ) : [EOL] pass [EOL] [EOL] def run ( self ) : [EOL] self . announce ( f" [string] " ) [EOL] self . run_command ( [string] ) [EOL] self . run_command ( [string] ) [EOL] self . run_command ( [string] ) [EOL] [EOL] [EOL] setup ( name = [string] , version = __version__ , description = [string] , url = [string] , author = [string] , author_email = [string] , license = [string] , packages = [ [string] ] , zip_safe = False , entry_points = { [string] : [ [string] ] } , cmdclass = { [string] : LintCommand , [string] : FormatCommand , [string] : FormatCheckCommand , [string] : TypeCheckCommand , [string] : CICommand , } , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Tuple]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import argparse [EOL] [docstring] [EOL] [EOL] import argparse [EOL] import sys [EOL] import textwrap [EOL] [EOL] from django_js_translator . translator import prepare_translation [EOL] from django_js_translator . version import __version__ [EOL] [EOL] [EOL] def entry_point ( ) : [EOL] [docstring] [EOL] description = textwrap . dedent ( [string] . format ( __version__ ) ) [EOL] [EOL] parser = argparse . ArgumentParser ( description = description , formatter_class = argparse . RawTextHelpFormatter ) [EOL] parser . add_argument ( [string] , [string] , action = [string] , version = [string] + __version__ ) [EOL] [EOL] parser . add_argument ( [string] , help = [string] ) [EOL] parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] [EOL] if len ( sys . argv ) == [number] : [EOL] parser . print_help ( ) [EOL] sys . exit ( [number] ) [EOL] [EOL] args = parser . parse_args ( ) [EOL] prepare_translation ( args ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] [EOL] VERSION = ( [number] , [number] , [number] ) [EOL] [EOL] __version__ = [string] . join ( str ( x ) for x in VERSION ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import logging [EOL] import sys [EOL] [EOL] import yaml [EOL] [EOL] [EOL] def config_load ( path ) : [EOL] [docstring] [EOL] try : [EOL] with open ( path , mode = [string] ) as handle : [EOL] file_content = handle . read ( ) [EOL] [EOL] loaded_content = yaml . load ( file_content ) [EOL] return loaded_content [EOL] [EOL] except IOError as exc : [EOL] logging . traceback ( exc ) [EOL] sys . exit ( [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Pattern , Set , DefaultDict , Tuple , Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] from __future__ import print_function , unicode_literals [EOL] [EOL] from collections import defaultdict [EOL] import os [EOL] import re [EOL] [EOL] from django_js_translator . config_loader import config_load [EOL] [EOL] [EOL] def list_files_to_translate ( path , extensions , ignore_files ) : [EOL] [docstring] [EOL] result = [ ] [EOL] for root , _ , files in os . walk ( path ) : [EOL] for filename in files : [EOL] for extension in extensions : [EOL] if filename . endswith ( extension ) : [EOL] full_path = os . path . normpath ( os . path . join ( root , filename ) ) [EOL] if full_path not in ignore_files : [EOL] result . append ( full_path ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def generate_translation_output ( output_map , show_files , show_lines ) : [EOL] [docstring] [EOL] output = [string] [EOL] [EOL] keys = output_map . keys ( ) [EOL] keys_len = len ( keys ) [EOL] [EOL] for i , k in enumerate ( sorted ( keys ) ) : [EOL] origins = output_map [ k ] [EOL] if show_files : [EOL] known_filenames = set ( ) [EOL] for origin in origins : [EOL] filename , position = origin [EOL] [EOL] [comment] [EOL] if not show_lines and filename in known_filenames : [EOL] continue [EOL] known_filenames . add ( filename ) [EOL] [EOL] output += [string] . format ( filename ) [EOL] if show_lines : [EOL] output += [string] . format ( position ) [EOL] output += [string] [EOL] [EOL] output += [string] . format ( k ) [EOL] [EOL] if i != keys_len - [number] : [EOL] output += [string] [EOL] if show_files : [EOL] output += [string] [EOL] [EOL] return output [EOL] [EOL] [EOL] def write_translation_to_file ( output_str , output_path , file_body ) : [EOL] [docstring] [EOL] with open ( output_path , mode = [string] ) as handle : [EOL] handle . write ( file_body . format ( output_str ) ) [EOL] [EOL] print ( [string] . format ( output_path ) ) [EOL] [EOL] [EOL] def prepare_translation ( args ) : [EOL] [docstring] [EOL] translation_config = config_load ( args . config_path ) [EOL] dry_run = args . dry_run [EOL] [EOL] paths_to_analyze = translation_config [ [string] ] [ [string] ] [EOL] directive = translation_config [ [string] ] [ [string] ] [EOL] output_path = translation_config [ [string] ] [ [string] ] [ [string] ] [EOL] output_body = translation_config [ [string] ] [ [string] ] [ [string] ] [EOL] extensions = translation_config [ [string] ] . get ( [string] , [ [string] ] ) [EOL] ignore_files = translation_config [ [string] ] . get ( [string] , [ ] ) [EOL] show_files = translation_config [ [string] ] . get ( [string] , True ) [EOL] show_lines = translation_config [ [string] ] . get ( [string] , False ) [EOL] [EOL] ignore_files = [ os . path . normpath ( p ) for p in ignore_files ] [EOL] files = sum ( ( list_files_to_translate ( path , extensions , ignore_files ) for path in paths_to_analyze ) , [ ] ) [EOL] output_map = defaultdict ( list ) [EOL] [EOL] rgx_val = [string] . format ( directive ) [EOL] rgx = re . compile ( rgx_val , flags = re . MULTILINE ) [EOL] for filename in files : [EOL] with open ( filename , mode = [string] ) as handle : [EOL] content = handle . read ( ) [EOL] for match in re . finditer ( rgx , content ) : [EOL] target = match . groups ( ) [ [number] ] [EOL] if target is None : [EOL] target = match . groups ( ) [ [number] ] [EOL] if target is None : [EOL] continue [EOL] position = match . span ( ) [EOL] output_map [ target ] . append ( ( filename , position ) ) [EOL] [EOL] output = generate_translation_output ( output_map , show_files , show_lines ) [EOL] if dry_run : [EOL] print ( output ) [EOL] else : [EOL] write_translation_to_file ( output , output_path , output_body ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0