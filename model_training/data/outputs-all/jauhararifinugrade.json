from typing import Any , List [EOL] import typing [EOL] from django . urls import path [EOL] [EOL] from . views import JobView [EOL] [EOL] urlpatterns = [ path ( [string] , JobView . as_view ( ) , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from django . http import HttpResponse [EOL] from django . views import View [EOL] [EOL] from contests . auth . core import get_me [EOL] from contests . exceptions import AuthenticationError [EOL] from . grader import get_grading_job , submit_grading_job [EOL] [EOL] [EOL] class JobView ( View ) : [EOL] [EOL] [comment] [EOL] def get ( self , request ) : [EOL] try : [EOL] try : [EOL] my_user = get_me ( request ) [EOL] except AuthenticationError as err : [EOL] return HttpResponse ( err , status = [number] ) [EOL] [EOL] job_token , spec = get_grading_job ( my_user ) [EOL] [EOL] if spec is None : [EOL] return HttpResponse ( [string] , status = [number] ) [EOL] [EOL] filename = spec . name . split ( [string] ) [ - [number] ] [EOL] response = HttpResponse ( spec , content_type = [string] ) [EOL] response [ [string] ] = [string] % filename [EOL] response [ [string] ] = job_token [EOL] [EOL] return response [EOL] except ValueError as err : [EOL] return HttpResponse ( err , status = [number] ) [EOL] [EOL] [comment] [EOL] def post ( self , request ) : [EOL] try : [EOL] output_file = request . FILES [ [string] ] [EOL] job_token = request . META . get ( [string] ) [EOL] if job_token is None : [EOL] job_token = request . POST [ [string] ] [EOL] verdict = request . POST [ [string] ] [EOL] submit_grading_job ( job_token , verdict , output_file ) [EOL] return HttpResponse ( [string] , status = [number] ) [EOL] except ValueError as err : [EOL] return HttpResponse ( err , status = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Set , List , Tuple , Dict [EOL] import typing [EOL] import server [EOL] import tarfile [EOL] import json [EOL] import os [EOL] import tarfile [EOL] import tempfile [EOL] [EOL] import jwt [EOL] [EOL] from django . utils import timezone [EOL] from django . conf import settings [EOL] from django . core . files import File [EOL] from django . db import transaction [EOL] from django_rq import job [EOL] [EOL] from . models import GradingGroup , Grading [EOL] [EOL] [EOL] def insert_spec ( grading_group ) : [EOL] submission = grading_group . submission [EOL] problem = submission . problem [EOL] [EOL] [comment] [EOL] fd , tar_path = tempfile . mkstemp ( ) [EOL] os . close ( fd ) [EOL] [EOL] [comment] [EOL] files = [ ( problem . tcgen_source , [string] ) , ( problem . solution_source , [string] ) , ( problem . checker_source , [string] ) , ( submission . solution_source , [string] ) , ] [EOL] [EOL] [comment] [EOL] spec = tarfile . open ( tar_path , [string] ) [EOL] for f , arcname in files : [EOL] ext = os . path . splitext ( f . name ) [ [number] ] [EOL] with f . open ( ) as source : [EOL] fd , filename = tempfile . mkstemp ( ) [EOL] os . close ( fd ) [EOL] with open ( filename , [string] ) as dest : [EOL] for chunk in source . chunks ( ) : [EOL] dest . write ( chunk ) [EOL] spec . add ( filename , arcname + ext ) [EOL] os . remove ( filename ) [EOL] [EOL] [comment] [EOL] fd , lang_info_path = tempfile . mkstemp ( ) [EOL] os . close ( fd ) [EOL] language_info = { [string] : str ( problem . tcgen_language . id ) , [string] : str ( problem . solution_language . id ) , [string] : str ( problem . checker_language . id ) , [string] : str ( submission . solution_language . id ) , } [EOL] with open ( lang_info_path , [string] ) as lang_info_file : [EOL] json . dump ( language_info , lang_info_file ) [EOL] spec . add ( lang_info_path , [string] ) [EOL] os . remove ( lang_info_path ) [EOL] [EOL] [comment] [EOL] fd , problem_info_path = tempfile . mkstemp ( ) [EOL] os . close ( fd ) [EOL] problem_info = { [string] : problem . time_limit , [string] : problem . output_limit , [string] : problem . memory_limit , [string] : problem . tolerance , } [EOL] with open ( problem_info_path , [string] ) as problem_info_file : [EOL] json . dump ( problem_info , problem_info_file ) [EOL] spec . add ( problem_info_path , [string] ) [EOL] os . remove ( problem_info_path ) [EOL] [EOL] spec . close ( ) [EOL] [EOL] with open ( tar_path , [string] ) as tar_file : [EOL] grading_group . spec . save ( [string] , File ( tar_file ) ) [EOL] os . remove ( tar_path ) [EOL] [EOL] [EOL] @ job @ transaction . atomic def grade_submission ( submission_model ) : [EOL] problem = submission_model . problem [EOL] contest = problem . contest [EOL] [EOL] ggroup = GradingGroup ( submission = submission_model , verdict = [string] , grading_size = contest . grading_size ) [EOL] ggroup . save ( ) [EOL] [EOL] try : [EOL] [comment] [EOL] insert_spec ( ggroup ) [EOL] [EOL] [comment] [EOL] for i in range ( contest . grading_size ) : [EOL] grading = Grading ( grading_group = ggroup , contest = contest , verdict = [string] , grader_group = i ) [EOL] grading . save ( ) [EOL] [EOL] except : [EOL] ggroup . verdict = [string] [EOL] ggroup . save ( ) [EOL] [EOL] [EOL] [comment] [EOL] @ transaction . atomic def get_grading_job ( user ) : [EOL] [comment] [EOL] def hash_id ( user_id ) : [EOL] return ( ( ( user_id + [number] ) * [number] ) + [number] ) * [number] [EOL] [EOL] [comment] [EOL] contest = user . contest [EOL] grading_size = contest . grading_size [EOL] hashed_id = hash_id ( user . id ) [EOL] grader_group = hashed_id % grading_size [EOL] [EOL] [comment] [EOL] grading_job = Grading . objects . filter ( contest = contest , grader_group = grader_group , claimed_by = None ) . first ( ) [EOL] if grading_job is None : [EOL] return None , None [EOL] spec = grading_job . grading_group . spec [EOL] [EOL] [comment] [EOL] job_token = jwt . encode ( { [string] : grading_job . id , [string] : user . id , } , settings . SECRET_KEY , algorithm = [string] ) . decode ( [string] ) [EOL] [EOL] [comment] [EOL] grading_job . claimed_by = user [EOL] grading_job . claimed_at = timezone . now ( ) [EOL] grading_job . save ( ) [EOL] [EOL] return job_token , spec [EOL] [EOL] [EOL] @ transaction . atomic def submit_grading_job ( token , verdict , output ) : [EOL] try : [EOL] data = jwt . decode ( token , settings . SECRET_KEY , algorithm = [ [string] ] ) [EOL] user_id = data [ [string] ] [EOL] job_id = data [ [string] ] [EOL] if user_id is None or job_id is None : [EOL] raise ValueError ( [string] ) [EOL] except Exception : [EOL] raise ValueError ( [string] ) [EOL] [EOL] grading = Grading . objects . get ( pk = job_id ) [EOL] if grading . claimed_by . id != user_id : [EOL] raise ValueError ( [string] ) [EOL] [EOL] if grading . finish_at is not None : [EOL] raise ValueError ( [string] ) [EOL] [EOL] grading . finish_at = timezone . now ( ) [EOL] grading . verdict = verdict [EOL] grading . output = output [EOL] grading . save ( ) [EOL] [EOL] [comment] [EOL] grading_group = grading . grading_group [EOL] grading_size = grading_group . grading_size [EOL] gradings = Grading . objects . filter ( grading_group = grading_group ) . all ( ) [EOL] accepted_count = [number] [EOL] job_finished = [number] [EOL] verdict_set = set ( ) [EOL] for grad in gradings : [EOL] if grad . finish_at is not None : [EOL] job_finished += [number] [EOL] if grad . verdict == [string] : [EOL] accepted_count += [number] [EOL] verdict_set . add ( grad . verdict ) [EOL] [EOL] [comment] [EOL] if job_finished == grading_size : [EOL] grading_group . finish_time = timezone . now ( ) [EOL] if accepted_count >= ( grading_size + [number] ) // [number] : [EOL] grading_group . verdict = [string] [EOL] else : [EOL] verdict_order = [ [string] , [string] , [string] , [string] , [string] ] [EOL] found = False [EOL] for verd in verdict_order : [EOL] if verd in verdict_set : [EOL] grading_group . verdict = verd [EOL] found = True [EOL] break [EOL] if not found : [EOL] grading_group . verdict = [string] [EOL] grading_group . save ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Type [EOL] import typing [EOL] import server [EOL] import os [EOL] import random [EOL] [EOL] from django . db import models [EOL] [EOL] from contests . models import Submission , User , Contest [EOL] [EOL] VERDICT = ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ) [EOL] [EOL] [EOL] def spec_upload_path ( instance , filename ) : [EOL] alphanum = [string] [EOL] random_str = [string] . join ( random . choice ( alphanum ) for _ in range ( [number] ) ) [EOL] return os . path . join ( [string] . format ( [string] , instance . id , random_str ) , filename ) [EOL] [EOL] [EOL] class GradingGroup ( models . Model ) : [EOL] submission = models . ForeignKey ( Submission , on_delete = models . CASCADE , related_name = [string] ) [EOL] issued_time = models . DateTimeField ( auto_now_add = True ) [EOL] verdict = models . CharField ( max_length = [number] , choices = VERDICT , default = [string] ) [EOL] finish_time = models . DateTimeField ( blank = True , null = True ) [EOL] [EOL] [comment] [EOL] spec = models . FileField ( upload_to = spec_upload_path ) [EOL] grading_size = models . IntegerField ( ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . submission , self . id ) [EOL] [EOL] [EOL] class Grading ( models . Model ) : [EOL] [comment] [EOL] grading_group = models . ForeignKey ( GradingGroup , on_delete = models . CASCADE , related_name = [string] ) [EOL] [comment] [EOL] contest = models . ForeignKey ( Contest , on_delete = models . CASCADE , related_name = [string] ) [EOL] verdict = models . CharField ( max_length = [number] , choices = VERDICT , default = [string] ) [EOL] grader_group = models . IntegerField ( ) [EOL] [EOL] [comment] [EOL] claimed_at = models . DateTimeField ( blank = True , null = True ) [EOL] claimed_by = models . ForeignKey ( User , null = True , blank = True , on_delete = models . SET_NULL ) [EOL] [EOL] [comment] [EOL] finish_at = models . DateTimeField ( blank = True , null = True ) [EOL] output = models . FileField ( null = True , blank = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . grading_group , self . id ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.grading.models.GradingGroup]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.grading.models.GradingGroup]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.grading.models.GradingGroup]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 $typing.Type[server.grading.models.GradingGroup]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.grading.models.GradingGroup]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.grading.models.GradingGroup]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.grading.models.Grading]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.grading.models.Grading]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.grading.models.Grading]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 $typing.Type[server.grading.models.Grading]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.grading.models.Grading]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.grading.models.Grading]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.grading.models.Grading]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.grading.models.Grading]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class GradingConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Any , Dict [EOL] import typing [EOL] from django . core . exceptions import ValidationError [EOL] from graphene_django . views import GraphQLView [EOL] from graphene_file_upload . django import FileUploadGraphQLView [EOL] [EOL] from . exceptions import ContestError [EOL] [EOL] [EOL] class ContestView ( FileUploadGraphQLView ) : [EOL] @ staticmethod def format_error ( error ) : [EOL] if hasattr ( error , [string] ) : [EOL] original_error = error . original_error [EOL] if isinstance ( original_error , ValidationError ) : [EOL] err_dict = original_error . message_dict [EOL] [EOL] def to_camel ( strs ) : [EOL] components = strs . split ( [string] ) [EOL] return components [ [number] ] + [string] . join ( x . title ( ) for x in components [ [number] : ] ) [EOL] [EOL] err_dict = { to_camel ( k ) : err_dict [ k ] for k in err_dict } [EOL] [EOL] return { [string] : [string] , [string] : [string] , [string] : err_dict } [EOL] [EOL] if isinstance ( original_error , ContestError ) : [EOL] returned_err = { [string] : original_error . __class__ . __name__ , [string] : original_error . args [ [number] ] , } [EOL] if len ( original_error . args ) > [number] : [EOL] returned_err [ [string] ] = original_error . args [ [number] : ] [EOL] return returned_err [EOL] [EOL] return { [string] : [string] , [string] : [string] , } [EOL] [EOL] return GraphQLView . format_error ( error ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Type [EOL] import typing [EOL] import server [EOL] import graphene [EOL] from graphene_django import DjangoObjectType [EOL] from graphene_file_upload . scalars import Upload [EOL] [EOL] from . models import Submission , Language , Problem , Contest , User [EOL] from . auth . resolvers import user_permissions_resolver , sign_in_mutate , sign_up_mutate , forgot_password_mutate , reset_passwod_mutate , me_resolver , user_resolver , users_resolver , user_by_username_resolver , user_by_email_resolver [EOL] from . contest . resolvers import language_extensions_resolver , contest_members_resolver , contest_problems_resolver , contest_submissions_resolver , language_resolver , languages_resolver , contest_resolver , contest_by_short_id_resolver , contests_resolver , my_contest_resolver , create_contest_mutate , update_contest_mutate , invite_users_mutate , update_user_permissions_mutate [EOL] from . problem . resolvers import create_problem_mutate , update_problem_mutate , delete_problem_mutate , problem_resolver , problems_resolver [EOL] from . submission . resolvers import submission_language_resolver , submission_source_code_resolver , submission_resolver , submissions_resolver , submit_solution_mutate [EOL] from . status . resolvers import ping_resolver , server_clock_resolver [EOL] [EOL] [EOL] class UserType ( DjangoObjectType ) : [EOL] permissions = graphene . NonNull ( graphene . List ( graphene . NonNull ( graphene . String ) ) , resolver = user_permissions_resolver ) [EOL] [EOL] class Meta : [EOL] model = User [EOL] only_fields = ( [string] , [string] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] class SignInResult ( graphene . ObjectType ) : [EOL] user = graphene . Field ( UserType , required = True ) [EOL] token = graphene . Field ( graphene . String , required = True ) [EOL] [EOL] [EOL] class SignIn ( graphene . Mutation ) : [EOL] class Arguments : [EOL] user_id = graphene . ID ( required = True ) [EOL] password = graphene . String ( required = True ) [EOL] Output = SignInResult [EOL] mutate = sign_in_mutate [EOL] [EOL] [EOL] class UserInput ( graphene . InputObjectType ) : [EOL] username = graphene . String ( required = True ) [EOL] name = graphene . String ( required = True ) [EOL] password = graphene . String ( required = True ) [EOL] [EOL] [EOL] class SignUpResult ( graphene . ObjectType ) : [EOL] user = graphene . Field ( UserType , required = True ) [EOL] token = graphene . Field ( graphene . String , required = True ) [EOL] [EOL] [EOL] class SignUp ( graphene . Mutation ) : [EOL] class Arguments : [EOL] user_id = graphene . ID ( required = True ) [EOL] user = UserInput ( required = True ) [EOL] signup_code = graphene . String ( required = True ) [EOL] Output = SignUpResult [EOL] mutate = sign_up_mutate [EOL] [EOL] [EOL] class ForgotPassword ( graphene . Mutation ) : [EOL] class Arguments : [EOL] user_id = graphene . ID ( required = True ) [EOL] Output = UserType [EOL] mutate = forgot_password_mutate [EOL] [EOL] [EOL] class ResetPassword ( graphene . Mutation ) : [EOL] class Arguments : [EOL] user_id = graphene . ID ( required = True ) [EOL] reset_password_otc = graphene . String ( required = True ) [EOL] new_password = graphene . String ( required = True ) [EOL] Output = UserType [EOL] mutate = reset_passwod_mutate [EOL] [EOL] [EOL] class AuthQuery ( graphene . ObjectType ) : [EOL] me = graphene . NonNull ( UserType , resolver = me_resolver ) [EOL] user = graphene . NonNull ( UserType , user_id = graphene . ID ( required = True ) , resolver = user_resolver ) [EOL] users = graphene . NonNull ( graphene . List ( UserType , required = True ) , resolver = users_resolver ) [EOL] user_by_username = graphene . NonNull ( UserType , contest_id = graphene . ID ( required = True ) , username = graphene . String ( required = True ) , resolver = user_by_username_resolver ) [EOL] user_by_email = graphene . NonNull ( UserType , contest_id = graphene . ID ( required = True ) , email = graphene . String ( required = True ) , resolver = user_by_email_resolver ) [EOL] [EOL] [EOL] class AuthMutation ( graphene . ObjectType ) : [EOL] sign_in = SignIn . Field ( ) [EOL] sign_up = SignUp . Field ( ) [EOL] forgot_password = ForgotPassword . Field ( ) [EOL] reset_password = ResetPassword . Field ( ) [EOL] [EOL] [EOL] class LanguageType ( DjangoObjectType ) : [EOL] extensions = graphene . NonNull ( graphene . List ( graphene . String , required = True ) , resolver = language_extensions_resolver ) [EOL] [EOL] class Meta : [EOL] model = Language [EOL] only_fields = ( [string] , [string] ) [EOL] [EOL] [EOL] class ProblemType ( DjangoObjectType ) : [EOL] class Meta : [EOL] model = Problem [EOL] only_fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] class ProblemInput ( graphene . InputObjectType ) : [EOL] short_id = graphene . String ( required = True ) [EOL] name = graphene . String ( required = True ) [EOL] statement = graphene . String ( required = True ) [EOL] disabled = graphene . Boolean ( required = True ) [EOL] time_limit = graphene . Int ( required = True ) [EOL] tolerance = graphene . Float ( required = True ) [EOL] memory_limit = graphene . Int ( required = True ) [EOL] output_limit = graphene . Int ( required = True ) [EOL] tcgen_language_id = graphene . ID ( ) [EOL] tcgen_source_code = Upload ( ) [EOL] solution_language_id = graphene . ID ( ) [EOL] solution_source_code = Upload ( ) [EOL] checker_language_id = graphene . ID ( ) [EOL] checker_source_code = Upload ( ) [EOL] [EOL] [EOL] [EOL] class CreateProblem ( graphene . Mutation ) : [EOL] class Arguments : [EOL] problem = ProblemInput ( required = True ) [EOL] Output = graphene . NonNull ( ProblemType ) [EOL] mutate = create_problem_mutate [EOL] [EOL] [EOL] class ProblemModificationInput ( graphene . InputObjectType ) : [EOL] short_id = graphene . String ( ) [EOL] name = graphene . String ( ) [EOL] statement = graphene . String ( ) [EOL] disabled = graphene . Boolean ( ) [EOL] time_limit = graphene . Int ( ) [EOL] tolerance = graphene . Float ( ) [EOL] memory_limit = graphene . Int ( ) [EOL] output_limit = graphene . Int ( ) [EOL] tcgen_language_id = graphene . ID ( ) [EOL] tcgen_source_code = Upload ( ) [EOL] solution_language_id = graphene . ID ( ) [EOL] solution_source_code = Upload ( ) [EOL] checker_language_id = graphene . ID ( ) [EOL] checker_source_code = Upload ( ) [EOL] [EOL] [EOL] class UpdateProblem ( graphene . Mutation ) : [EOL] class Arguments : [EOL] problem_id = graphene . ID ( required = True ) [EOL] problem = ProblemModificationInput ( required = True ) [EOL] Output = ProblemType [EOL] mutate = update_problem_mutate [EOL] [EOL] [EOL] class DeleteProblem ( graphene . Mutation ) : [EOL] class Arguments : [EOL] problem_id = graphene . ID ( required = True ) [EOL] Output = graphene . String [EOL] mutate = delete_problem_mutate [EOL] [EOL] [EOL] class ProblemQuery ( graphene . ObjectType ) : [EOL] problem = graphene . NonNull ( ProblemType , problem_id = graphene . ID ( required = True ) , resolver = problem_resolver ) [EOL] [EOL] problems = graphene . NonNull ( graphene . List ( graphene . NonNull ( ProblemType ) ) , resolver = problems_resolver ) [EOL] [EOL] [EOL] class ProblemMutation ( graphene . ObjectType ) : [EOL] create_problem = CreateProblem . Field ( ) [EOL] update_problem = UpdateProblem . Field ( ) [EOL] delete_problem = DeleteProblem . Field ( ) [EOL] [EOL] [EOL] class SubmissionType ( DjangoObjectType ) : [EOL] language = graphene . Field ( LanguageType , required = True , resolver = submission_language_resolver ) [EOL] source_code = graphene . Field ( graphene . String , required = True , resolver = submission_source_code_resolver ) [EOL] verdict = graphene . Field ( graphene . String , required = True ) [EOL] [EOL] @ staticmethod def resolve_verdict ( root , _info ) : [EOL] return root . verdict [EOL] [EOL] class Meta : [EOL] model = Submission [EOL] only_fields = ( [string] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] class SubmissionQuery ( graphene . ObjectType ) : [EOL] submission = graphene . NonNull ( SubmissionType , id = graphene . Int ( required = True ) , resolver = submission_resolver ) [EOL] submissions = graphene . NonNull ( graphene . List ( graphene . NonNull ( SubmissionType ) ) , resolver = submissions_resolver ) [EOL] [EOL] [EOL] class SubmitSolution ( graphene . Mutation ) : [EOL] class Arguments : [EOL] problem_id = graphene . ID ( required = True ) [EOL] language_id = graphene . ID ( required = True ) [EOL] source_code = Upload ( required = True ) [EOL] Output = SubmissionType [EOL] mutate = submit_solution_mutate [EOL] [EOL] [EOL] class SubmissionMutation ( graphene . ObjectType ) : [EOL] submit_solution = SubmitSolution . Field ( ) [EOL] [EOL] [EOL] class ContestType ( DjangoObjectType ) : [EOL] members = graphene . NonNull ( graphene . List ( graphene . NonNull ( UserType ) ) , resolver = contest_members_resolver ) [EOL] problems = graphene . NonNull ( graphene . List ( graphene . NonNull ( ProblemType ) ) , resolver = contest_problems_resolver ) [EOL] submissions = graphene . NonNull ( graphene . List ( graphene . NonNull ( SubmissionType ) ) , resolver = contest_submissions_resolver ) [EOL] permitted_languages = graphene . NonNull ( graphene . List ( graphene . NonNull ( LanguageType ) ) ) [EOL] [EOL] @ staticmethod def resolve_permitted_languages ( root , _info ) : [EOL] return root . permitted_languages . all ( ) [EOL] [EOL] class Meta : [EOL] model = Contest [EOL] only_fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] class ContestQuery ( graphene . ObjectType ) : [EOL] languages = graphene . NonNull ( graphene . List ( LanguageType , required = True ) , resolver = languages_resolver ) [EOL] language = graphene . NonNull ( LanguageType , lang_id = graphene . ID ( required = True ) , resolver = language_resolver ) [EOL] [EOL] contest = graphene . NonNull ( ContestType , contest_id = graphene . ID ( required = True ) , resolver = contest_resolver ) [EOL] contest_by_short_id = graphene . NonNull ( ContestType , short_id = graphene . String ( required = True ) , resolver = contest_by_short_id_resolver ) [EOL] contests = graphene . NonNull ( graphene . List ( ContestType , required = True ) , resolver = contests_resolver ) [EOL] my_contest = graphene . NonNull ( ContestType , resolver = my_contest_resolver ) [EOL] [EOL] [EOL] class ContestInput ( graphene . InputObjectType ) : [EOL] name = graphene . String ( required = True ) [EOL] short_id = graphene . String ( required = True ) [EOL] short_description = graphene . String ( required = True ) [EOL] description = graphene . String ( default_value = [string] ) [EOL] start_time = graphene . DateTime ( ) [EOL] freezed = graphene . Boolean ( default_value = False ) [EOL] finish_time = graphene . DateTime ( ) [EOL] grading_size = graphene . Int ( default_value = [number] ) [EOL] [EOL] [EOL] class CreateContest ( graphene . Mutation ) : [EOL] class Arguments : [EOL] email = graphene . String ( required = True ) [EOL] contest = ContestInput ( required = True ) [EOL] contest = graphene . Field ( ContestType ) [EOL] admin = graphene . Field ( UserType ) [EOL] mutate = create_contest_mutate [EOL] [EOL] [EOL] class UpdateContestInput ( graphene . InputObjectType ) : [EOL] name = graphene . String ( ) [EOL] short_description = graphene . String ( ) [EOL] description = graphene . String ( ) [EOL] start_time = graphene . DateTime ( ) [EOL] freezed = graphene . Boolean ( ) [EOL] finish_time = graphene . DateTime ( ) [EOL] permitted_languages = graphene . List ( graphene . String ) [EOL] grading_size = graphene . Int ( ) [EOL] [EOL] [EOL] class UpdateContest ( graphene . Mutation ) : [EOL] class Arguments : [EOL] contest = UpdateContestInput ( required = True ) [EOL] Output = graphene . NonNull ( ContestType ) [EOL] mutate = update_contest_mutate [EOL] [EOL] [EOL] class InviteUsers ( graphene . Mutation ) : [EOL] class Arguments : [EOL] emails = graphene . NonNull ( graphene . List ( graphene . String , required = True ) ) [EOL] permissions = graphene . NonNull ( graphene . List ( graphene . String , required = True ) ) [EOL] Output = graphene . NonNull ( graphene . List ( graphene . NonNull ( UserType ) ) ) [EOL] mutate = invite_users_mutate [EOL] [EOL] [EOL] class UpdateUserPermissions ( graphene . Mutation ) : [EOL] class Arguments : [EOL] user_id = graphene . ID ( required = True ) [EOL] permissions = graphene . NonNull ( graphene . List ( graphene . String , required = True ) ) [EOL] Output = UserType [EOL] mutate = update_user_permissions_mutate [EOL] [EOL] [EOL] class ContestMutation ( graphene . ObjectType ) : [EOL] create_contest = CreateContest . Field ( ) [EOL] update_contest = UpdateContest . Field ( ) [EOL] invite_users = InviteUsers . Field ( ) [EOL] update_user_permissions = UpdateUserPermissions . Field ( ) [EOL] [EOL] [EOL] class StatusQuery ( ) : [EOL] server_clock = graphene . DateTime ( required = True , resolver = server_clock_resolver ) [EOL] ping = graphene . String ( required = True , resolver = ping_resolver ) [EOL] [EOL] [EOL] class Query ( AuthQuery , ProblemQuery , ContestQuery , SubmissionQuery , StatusQuery , graphene . ObjectType ) : [EOL] pass [EOL] [EOL] [EOL] class Mutation ( AuthMutation , ProblemMutation , ContestMutation , SubmissionMutation , graphene . ObjectType ) : [EOL] pass [EOL]	typing.Type[server.contests.schema.ContestMutation]$ 0 0 0 0 0 0 0 $typing.Type[server.contests.schema.ContestMutation]$ 0 0 0 0 0 0 0 $typing.Type[server.contests.schema.ContestMutation]$ 0 0 0 0 0 0 0 $typing.Type[server.contests.schema.ContestMutation]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.contests.schema.StatusQuery]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.contests.schema.StatusQuery]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Tuple , Type , List [EOL] import typing [EOL] import builtins [EOL] import server [EOL] import os [EOL] import random [EOL] from typing import List , Any [EOL] [EOL] from django . db import models [EOL] from django . core . exceptions import ValidationError [EOL] from django . core . validators import validate_email , validate_slug , MinLengthValidator , MaxLengthValidator , MinValueValidator [EOL] [EOL] [EOL] class Language ( models . Model ) : [EOL] name = models . CharField ( max_length = [number] ) [EOL] extensions = models . CharField ( max_length = [number] ) [EOL] [EOL] @ property def extension_list ( self ) : [EOL] return self . extensions . split ( [string] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] [EOL] class Contest ( models . Model ) : [EOL] name = models . CharField ( max_length = [number] , validators = [ MinLengthValidator ( [number] ) , MaxLengthValidator ( [number] ) ] ) [EOL] short_id = models . CharField ( max_length = [number] , unique = True , validators = [ validate_slug , MinLengthValidator ( [number] ) , MaxLengthValidator ( [number] ) ] ) [EOL] short_description = models . CharField ( max_length = [number] , validators = [ MinLengthValidator ( [number] ) , MaxLengthValidator ( [number] ) ] ) [EOL] description = models . TextField ( validators = [ MaxLengthValidator ( [number] * [number] * [number] ) ] ) [EOL] start_time = models . DateTimeField ( ) [EOL] freezed = models . BooleanField ( ) [EOL] finish_time = models . DateTimeField ( ) [EOL] permitted_languages = models . ManyToManyField ( Language ) [EOL] [EOL] grading_size = models . IntegerField ( default = [number] , validators = [ MinValueValidator ( [number] ) ] ) [EOL] [EOL] def clean ( self ) : [EOL] if self . finish_time <= self . start_time : [EOL] raise ValidationError ( { [string] : [string] } ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] [EOL] class Permission ( models . Model ) : [EOL] code = models . CharField ( max_length = [number] , unique = True ) [EOL] description = models . TextField ( validators = [ MaxLengthValidator ( [number] ) ] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . code [EOL] [EOL] [EOL] class User ( models . Model ) : [EOL] name = models . CharField ( [string] , max_length = [number] , validators = [ MinLengthValidator ( [number] ) , MaxLengthValidator ( [number] ) ] , null = True , default = None , blank = True ) [EOL] username = models . CharField ( [string] , max_length = [number] , validators = [ validate_slug , MinLengthValidator ( [number] ) , MaxLengthValidator ( [number] ) ] , null = True , default = None , blank = True ) [EOL] email = models . EmailField ( [string] , max_length = [number] , validators = [ validate_email , MinLengthValidator ( [number] ) , MaxLengthValidator ( [number] ) ] ) [EOL] permissions = models . ManyToManyField ( Permission ) [EOL] contest = models . ForeignKey ( Contest , related_name = [string] , on_delete = models . CASCADE ) [EOL] [EOL] password = models . CharField ( max_length = [number] , null = True , default = None , blank = True ) [EOL] signup_otc = models . CharField ( max_length = [number] , null = True , default = None , blank = True ) [EOL] reset_password_otc = models . CharField ( max_length = [number] , null = True , default = None , blank = True ) [EOL] [EOL] class Meta : [EOL] unique_together = [ ( [string] , [string] ) , ( [string] , [string] ) ] [EOL] [EOL] @ property def permission_codes ( self ) : [EOL] return list ( map ( lambda perm : perm . code , self . permissions . all ( ) ) ) [EOL] [EOL] def has_permission ( self , perm ) : [EOL] return perm in self . permission_codes [EOL] [EOL] def __str__ ( self ) : [EOL] return str ( self . name ) [EOL] [EOL] [EOL] def checker_upload_path ( instance , filename ) : [EOL] alphanum = [string] [EOL] random_str = [string] . join ( random . choice ( alphanum ) for _ in range ( [number] ) ) [EOL] return os . path . join ( [string] . format ( [string] , instance . id , random_str ) , filename ) [EOL] [EOL] [EOL] def solution_upload_path ( instance , filename ) : [EOL] alphanum = [string] [EOL] random_str = [string] . join ( random . choice ( alphanum ) for _ in range ( [number] ) ) [EOL] return os . path . join ( [string] . format ( [string] , instance . id , random_str ) , filename ) [EOL] [EOL] [EOL] def tcgen_upload_path ( instance , filename ) : [EOL] alphanum = [string] [EOL] random_str = [string] . join ( random . choice ( alphanum ) for _ in range ( [number] ) ) [EOL] return os . path . join ( [string] . format ( [string] , instance . id , random_str ) , filename ) [EOL] [EOL] [EOL] class Problem ( models . Model ) : [EOL] short_id = models . CharField ( max_length = [number] , validators = [ validate_slug , MinLengthValidator ( [number] ) , MaxLengthValidator ( [number] ) ] ) [EOL] name = models . CharField ( max_length = [number] , validators = [ MinLengthValidator ( [number] ) , MaxLengthValidator ( [number] ) ] ) [EOL] statement = models . TextField ( validators = [ MaxLengthValidator ( [number] * [number] * [number] ) ] ) [EOL] contest = models . ForeignKey ( Contest , related_name = [string] , on_delete = models . CASCADE ) [EOL] disabled = models . BooleanField ( ) [EOL] order = models . IntegerField ( ) [EOL] time_limit = models . IntegerField ( ) [EOL] tolerance = models . FloatField ( ) [EOL] memory_limit = models . IntegerField ( ) [EOL] output_limit = models . IntegerField ( ) [EOL] [EOL] checker_source = models . FileField ( null = True , blank = True , upload_to = checker_upload_path ) [EOL] checker_language = models . ForeignKey ( Language , on_delete = models . SET_NULL , null = True , related_name = [string] ) [EOL] [EOL] solution_source = models . FileField ( null = True , blank = True , upload_to = solution_upload_path ) [EOL] solution_language = models . ForeignKey ( Language , on_delete = models . SET_NULL , null = True , related_name = [string] ) [EOL] [EOL] tcgen_source = models . FileField ( null = True , blank = True , upload_to = tcgen_upload_path ) [EOL] tcgen_language = models . ForeignKey ( Language , on_delete = models . SET_NULL , null = True , related_name = [string] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] class Meta : [EOL] unique_together = [ ( [string] , [string] ) ] [EOL] [EOL] [EOL] def submission_upload_path ( instance , filename ) : [EOL] alphanum = [string] [EOL] random_str = [string] . join ( random . choice ( alphanum ) for _ in range ( [number] ) ) [EOL] return os . path . join ( [string] . format ( [string] , instance . id , random_str ) , filename ) [EOL] [EOL] [EOL] class Submission ( models . Model ) : [EOL] problem = models . ForeignKey ( Problem , on_delete = models . CASCADE ) [EOL] [EOL] solution_source = models . FileField ( null = True , blank = True , upload_to = submission_upload_path ) [EOL] solution_language = models . ForeignKey ( Language , on_delete = models . SET_NULL , null = True , related_name = [string] ) [EOL] [EOL] issuer = models . ForeignKey ( User , on_delete = models . CASCADE ) [EOL] issued_time = models . DateTimeField ( auto_now_add = True ) [EOL] [EOL] [comment] [EOL] grading_groups = None [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . id ) [EOL] [EOL] @ property def verdict ( self ) : [EOL] last_grading = self . grading_groups . last ( ) [EOL] if last_grading is not None : [EOL] return last_grading . verdict [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.contests.models.Language]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.contests.models.Language]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.contests.models.Contest]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.contests.models.Contest]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.contests.models.Contest]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.contests.models.Contest]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.contests.models.Contest]$ 0 0 0 0 0 0 0 $typing.Type[server.contests.models.Contest]$ 0 0 0 0 0 0 0 $typing.Type[server.contests.models.Contest]$ 0 0 0 0 0 0 0 $typing.Type[server.contests.models.Contest]$ 0 0 0 0 0 0 0 0 0 $typing.Type[server.contests.models.Contest]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.contests.models.Permission]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.contests.models.Permission]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.contests.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.contests.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.contests.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.contests.models.User]$ 0 0 0 0 0 0 0 0 $typing.Type[server.contests.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.contests.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.contests.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.contests.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.contests.models.Problem]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.contests.models.Problem]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.contests.models.Problem]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.contests.models.Problem]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.contests.models.Problem]$ 0 0 0 0 0 0 0 $typing.Type[server.contests.models.Problem]$ 0 0 0 0 0 0 0 $typing.Type[server.contests.models.Problem]$ 0 0 0 0 0 0 0 $typing.Type[server.contests.models.Problem]$ 0 0 0 0 0 0 0 $typing.Type[server.contests.models.Problem]$ 0 0 0 0 0 0 0 $typing.Type[server.contests.models.Problem]$ 0 0 0 0 0 0 0 0 $typing.Type[server.contests.models.Problem]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.contests.models.Problem]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.contests.models.Problem]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.contests.models.Problem]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.contests.models.Problem]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.contests.models.Problem]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.contests.models.Submission]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.contests.models.Submission]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.contests.models.Submission]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.contests.models.Submission]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.contests.models.Submission]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ContestsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
import builtins [EOL] class ContestError ( Exception ) : [EOL] def __init__ ( self , message = [string] , * args ) : [EOL] super ( ContestError , self ) . __init__ ( message , * args ) [EOL] [EOL] [EOL] class NoSuchLanguageError ( ContestError ) : [EOL] def __init__ ( self , message = [string] ) : [EOL] super ( NoSuchLanguageError , self ) . __init__ ( message ) [EOL] [EOL] [EOL] class NoSuchContestError ( ContestError ) : [EOL] def __init__ ( self , message = [string] ) : [EOL] super ( NoSuchContestError , self ) . __init__ ( message ) [EOL] [EOL] [EOL] class NoSuchUserError ( ContestError ) : [EOL] def __init__ ( self , message = [string] ) : [EOL] super ( NoSuchUserError , self ) . __init__ ( message ) [EOL] [EOL] [EOL] class UserAlreadySignedUpError ( ContestError ) : [EOL] def __init__ ( self , message = [string] ) : [EOL] super ( UserAlreadySignedUpError , self ) . __init__ ( message ) [EOL] [EOL] [EOL] class UsernameAlreadyUsedError ( ContestError ) : [EOL] def __init__ ( self , message = [string] ) : [EOL] super ( UsernameAlreadyUsedError , self ) . __init__ ( message ) [EOL] [EOL] [EOL] class UserAlreadyInvitedError ( ContestError ) : [EOL] def __init__ ( self , message = [string] ) : [EOL] super ( UserAlreadyInvitedError , self ) . __init__ ( message ) [EOL] [EOL] [EOL] class UserHaventSignedUpError ( ContestError ) : [EOL] def __init__ ( self , message = [string] ) : [EOL] super ( UserHaventSignedUpError , self ) . __init__ ( message ) [EOL] [EOL] [EOL] class AuthenticationError ( ContestError ) : [EOL] def __init__ ( self , message = [string] ) : [EOL] super ( AuthenticationError , self ) . __init__ ( message ) [EOL] [EOL] [EOL] class ForbiddenActionError ( ContestError ) : [EOL] def __init__ ( self , message = [string] ) : [EOL] super ( ForbiddenActionError , self ) . __init__ ( message ) [EOL] [EOL] [EOL] class NoSuchProblemError ( ContestError ) : [EOL] def __init__ ( self , message = [string] ) : [EOL] super ( NoSuchProblemError , self ) . __init__ ( message ) [EOL] [EOL] [EOL] class NoSuchSubmissionError ( ContestError ) : [EOL] def __init__ ( self , message = [string] ) : [EOL] super ( NoSuchSubmissionError , self ) . __init__ ( message ) [EOL] [EOL] [EOL] class ForbiddenLanguageError ( ContestError ) : [EOL] def __init__ ( self , message = [string] ) : [EOL] super ( ForbiddenLanguageError , self ) . __init__ ( message ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
	0
from typing import Any , List , Iterable [EOL] import typing [EOL] import builtins [EOL] import contests [EOL] import datetime [EOL] from typing import Iterable , List , NamedTuple , Optional [EOL] [EOL] from contests . auth . core import get_contest_users , get_me [EOL] from contests . problem . core import get_contest_problems [EOL] from contests . models import Language , Contest , User , Problem , Submission [EOL] from contests . submission . core import get_contest_submissions [EOL] from . core import get_language_by_id , get_all_languages , get_all_contests , get_contest_by_id , get_contest_by_short_id , create_contest , update_contest , invite_users , update_permissions [EOL] [EOL] [EOL] class ContestInput ( NamedTuple ) : [EOL] name = ... [EOL] short_id = ... [EOL] short_description = ... [EOL] description = ... [EOL] start_time = ... [EOL] freezed = ... [EOL] finish_time = ... [EOL] grading_size = ... [EOL] [EOL] [EOL] class CreateContestResult ( NamedTuple ) : [EOL] contest = ... [EOL] admin = ... [EOL] [EOL] [EOL] class UpdateContestInput ( NamedTuple ) : [EOL] name = ... [EOL] short_description = ... [EOL] description = ... [EOL] start_time = ... [EOL] freezed = ... [EOL] finish_time = ... [EOL] permitted_languages = ... [EOL] grading_size = ... [EOL] [EOL] [EOL] def language_extensions_resolver ( root , _info ) : [EOL] return root . extension_list [EOL] [EOL] [EOL] def contest_members_resolver ( root , _info ) : [EOL] return get_contest_users ( root . id ) [EOL] [EOL] [EOL] def contest_problems_resolver ( root , info ) : [EOL] user = get_me ( info . context ) [EOL] return get_contest_problems ( user , root . id ) [EOL] [EOL] [EOL] def contest_submissions_resolver ( root , info ) : [EOL] user = get_me ( info . context ) [EOL] return get_contest_submissions ( user , root . id ) [EOL] [EOL] [EOL] def language_resolver ( _root , _info , lang_id ) : [EOL] return get_language_by_id ( lang_id ) [EOL] [EOL] [EOL] def languages_resolver ( _root , _info ) : [EOL] return get_all_languages ( ) [EOL] [EOL] [EOL] def contest_resolver ( _root , _info , contest_id ) : [EOL] return get_contest_by_id ( contest_id ) [EOL] [EOL] [EOL] def contest_by_short_id_resolver ( _root , _info , short_id ) : [EOL] return get_contest_by_short_id ( short_id ) [EOL] [EOL] [EOL] def contests_resolver ( _root , _info ) : [EOL] return get_all_contests ( ) [EOL] [EOL] [EOL] def my_contest_resolver ( _root , info ) : [EOL] user = get_me ( info . context ) [EOL] return get_contest_by_id ( user . contest . id ) [EOL] [EOL] [EOL] def create_contest_mutate ( _self , _info , email , contest ) : [EOL] new_contest , user = create_contest ( email , contest . name , contest . short_id , contest . short_description , contest . description , contest . start_time , contest . finish_time , contest . freezed , contest . grading_size ) [EOL] return CreateContestResult ( contest = new_contest , admin = user ) [EOL] [EOL] [EOL] def update_contest_mutate ( _root , info , contest ) : [EOL] user = get_me ( info . context ) [EOL] new_contest = update_contest ( user , contest . name , contest . short_description , contest . description , contest . start_time , contest . finish_time , contest . freezed , contest . grading_size , contest . permitted_languages ) [EOL] return new_contest [EOL] [EOL] [EOL] def invite_users_mutate ( _root , info , emails , permissions ) : [EOL] user = get_me ( info . context ) [EOL] return invite_users ( user , emails , permissions ) [EOL] [EOL] [EOL] def update_user_permissions_mutate ( _root , info , user_id , permissions ) : [EOL] user = get_me ( info . context ) [EOL] return update_permissions ( user , user_id , permissions ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[datetime.datetime]$ 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 $typing.Optional[datetime.datetime]$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 $contests.models.Contest$ 0 0 0 $contests.models.User$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[datetime.datetime]$ 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 $typing.Optional[datetime.datetime]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[contests.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[contests.models.Problem]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[contests.models.Submission]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contests.models.Language$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[contests.models.Language]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contests.models.Contest$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contests.models.Contest$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[contests.models.Contest]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contests.models.Contest$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $CreateContestResult$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contests.models.Contest$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[contests.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contests.models.User$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import pytest [EOL] [EOL] [EOL] @ pytest . mark . django_db class TestAuth : [EOL] [EOL] def test_dummy ( self ) : [EOL] assert True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , Iterable [EOL] import typing [EOL] import builtins [EOL] import django [EOL] import contests [EOL] from typing import Iterable [EOL] [EOL] from django . core . files import File [EOL] [EOL] from contests . models import Submission , Language [EOL] from contests . auth . core import get_me [EOL] from . core import get_contest_submissions , get_submission_by_id , submit_solution [EOL] [EOL] [EOL] def submission_language_resolver ( root , _info ) : [EOL] return root . solution_language [EOL] [EOL] [EOL] def submission_source_code_resolver ( root , _info ) : [EOL] return root . solution_source . url [EOL] [EOL] [EOL] def submission_resolver ( _root , info , submission_id ) : [EOL] user = get_me ( info . context ) [EOL] return get_submission_by_id ( user , submission_id ) [EOL] [EOL] [EOL] def submissions_resolver ( _root , info ) : [EOL] user = get_me ( info . context ) [EOL] return get_contest_submissions ( user , user . contest . id ) [EOL] [EOL] [EOL] def submit_solution_mutate ( _root , info , problem_id , language_id , source_code ) : [EOL] user = get_me ( info . context ) [EOL] return submit_solution ( user , problem_id , language_id , source_code ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contests.models.Language$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contests.models.Submission$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[contests.models.Submission]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contests.models.Submission$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List , Iterable [EOL] import typing [EOL] import builtins [EOL] import django [EOL] import contests [EOL] from typing import Iterable [EOL] [EOL] from django . core . files import File [EOL] [EOL] from contests . models import User , Submission [EOL] from contests . contest . core import get_contest_by_id , get_language_by_id [EOL] from contests . problem . core import get_problem_by_id [EOL] from contests . exceptions import ForbiddenActionError , NoSuchSubmissionError , ForbiddenLanguageError [EOL] from grading . grader import grade_submission [EOL] [EOL] [EOL] def get_contest_submissions ( user , contest_id ) : [EOL] my_contest = user . contest [EOL] target_contest = get_contest_by_id ( contest_id ) [EOL] if my_contest . id != target_contest . id : [EOL] raise ForbiddenActionError ( [string] ) [EOL] [EOL] submissions_qs = Submission . objects . filter ( problem__contest__id = contest_id ) [EOL] if not user . has_permission ( [string] ) : [EOL] submissions_qs = submissions_qs . filter ( issuer__id = user . id ) [EOL] submissions_qs = submissions_qs . order_by ( [string] ) [EOL] [EOL] return submissions_qs . all ( ) [EOL] [EOL] [EOL] def get_submission_by_id ( user , submission_id ) : [EOL] try : [EOL] submission = Submission . objects . get ( pk = submission_id ) [EOL] except Submission . DoesNotExist : [EOL] raise NoSuchSubmissionError ( ) [EOL] [EOL] if submission . contest . id != user . contest . id : [EOL] raise NoSuchSubmissionError ( ) [EOL] [EOL] if not user . has_permission ( [string] ) and submission . issuer . id != user . id : [EOL] raise NoSuchSubmissionError ( ) [EOL] [EOL] return submission [EOL] [EOL] [EOL] def submit_solution ( user , problem_id , language_id , source_code ) : [EOL] problem = get_problem_by_id ( user , problem_id ) [EOL] language = get_language_by_id ( language_id ) [EOL] [EOL] contest = user . contest [EOL] permitted_langs = list ( map ( lambda lang : lang . id , contest . permitted_languages . all ( ) ) ) [EOL] if language . id not in permitted_langs : [EOL] raise ForbiddenLanguageError ( ) [EOL] [EOL] sub = Submission ( problem = problem , solution_source = source_code , solution_language = language , issuer = user ) [EOL] sub . save ( ) [EOL] [comment] [EOL] grade_submission ( sub ) [EOL] [EOL] return sub [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[contests.models.Submission]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contests.models.Submission$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contests.models.Submission$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , Iterable [EOL] import typing [EOL] import builtins [EOL] import contests [EOL] from typing import Iterable , NamedTuple , Optional [EOL] [EOL] from django . core . files import File [EOL] from django . db import transaction [EOL] [EOL] from contests . models import Problem [EOL] from contests . auth . core import get_me [EOL] from . core import create_problem , update_problem , delete_problem , get_problem_by_id , get_contest_problems [EOL] [EOL] [EOL] class ProblemInput ( NamedTuple ) : [EOL] short_id = ... [EOL] name = ... [EOL] statement = ... [EOL] disabled = ... [EOL] time_limit = ... [EOL] tolerance = ... [EOL] memory_limit = ... [EOL] output_limit = ... [EOL] tcgen_language_id = ... [EOL] tcgen_source_code = ... [EOL] solution_language_id = ... [EOL] solution_source_code = ... [EOL] checker_language_id = ... [EOL] checker_source_code = ... [EOL] [EOL] [EOL] class ProblemModificationInput ( NamedTuple ) : [EOL] short_id = ... [EOL] name = ... [EOL] statement = ... [EOL] disabled = ... [EOL] time_limit = ... [EOL] tolerance = ... [EOL] memory_limit = ... [EOL] output_limit = ... [EOL] tcgen_language_id = ... [EOL] tcgen_source_code = ... [EOL] solution_language_id = ... [EOL] solution_source_code = ... [EOL] checker_language_id = ... [EOL] checker_source_code = ... [EOL] [EOL] [EOL] @ transaction . atomic def create_problem_mutate ( _root , info , problem ) : [EOL] user = get_me ( info . context ) [EOL] return create_problem ( user , problem . short_id , problem . name , problem . statement , problem . disabled , problem . time_limit , problem . tolerance , problem . memory_limit , problem . output_limit , problem . tcgen_language_id , problem . tcgen_source_code , problem . solution_language_id , problem . solution_source_code , problem . checker_language_id , problem . checker_source_code , ) [EOL] [EOL] [EOL] def update_problem_mutate ( _root , info , problem_id , problem ) : [EOL] user = get_me ( info . context ) [EOL] return update_problem ( user , problem_id , problem . short_id , problem . name , problem . statement , problem . disabled , problem . time_limit , problem . tolerance , problem . memory_limit , problem . output_limit , problem . tcgen_language_id , problem . tcgen_source_code , problem . solution_language_id , problem . solution_source_code , problem . checker_language_id , problem . checker_source_code , ) [EOL] [EOL] [EOL] def delete_problem_mutate ( _root , info , problem_id ) : [EOL] user = get_me ( info . context ) [EOL] return delete_problem ( user , problem_id ) [EOL] [EOL] [EOL] def problem_resolver ( _root , info , problem_id ) : [EOL] user = get_me ( info . context ) [EOL] return get_problem_by_id ( user , problem_id ) [EOL] [EOL] [EOL] def problems_resolver ( _root , info ) : [EOL] user = get_me ( info . context ) [EOL] return get_contest_problems ( user , user . contest . id ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.int$ 0 0 0 $builtins.float$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $typing.Optional[django.core.files.File]$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $typing.Optional[django.core.files.File]$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $typing.Optional[django.core.files.File]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $typing.Optional[builtins.float]$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $typing.Optional[django.core.files.File]$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $typing.Optional[django.core.files.File]$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $typing.Optional[django.core.files.File]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contests.models.Problem$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[contests.models.Problem]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List , Iterable , Optional [EOL] import typing [EOL] import builtins [EOL] import django [EOL] import contests [EOL] from typing import Optional , Iterable [EOL] [EOL] from django . core . files import File [EOL] from django . db import transaction [EOL] from django . db . models import Max [EOL] [EOL] from contests . contest . core import get_language_by_id [EOL] from contests . models import User , Problem [EOL] from contests . exceptions import ForbiddenActionError , NoSuchProblemError , ForbiddenLanguageError [EOL] [EOL] [EOL] def get_contest_problems ( user , contest_id ) : [EOL] if not user . has_permission ( [string] ) : [EOL] raise ForbiddenActionError ( [string] ) [EOL] [EOL] user_cid = user . contest . id [EOL] if contest_id != user_cid : [EOL] raise ForbiddenActionError ( [string] ) [EOL] [EOL] problems_qs = user . contest . problems [EOL] if not user . has_permission ( [string] ) : [EOL] problems_qs = problems_qs . filter ( disabled = False ) [EOL] [EOL] return problems_qs . all ( ) [EOL] [EOL] [EOL] def get_problem_by_id ( user , problem_id ) : [EOL] if not user . has_permission ( [string] ) : [EOL] raise ForbiddenActionError ( [string] ) [EOL] [EOL] try : [EOL] problem = Problem . objects . get ( pk = problem_id ) [EOL] except Problem . DoesNotExist : [EOL] raise NoSuchProblemError ( ) [EOL] [EOL] [comment] [EOL] user_cid = user . contest . id [EOL] problem_cid = problem . contest . id [EOL] in_same_contest = problem_cid == user_cid [EOL] can_read = not problem . disabled or user . has_permission ( [string] ) [EOL] if not in_same_contest or not can_read : [EOL] raise NoSuchProblemError ( ) [EOL] [EOL] return problem [EOL] [EOL] [EOL] def check_files ( user , tcgen_language_id , tcgen_source_code , solution_language_id , solution_source_code , checker_language_id , checker_source_code ) : [EOL] contest = user . contest [EOL] permitted_langs = list ( map ( lambda lang : lang . id , contest . permitted_languages . all ( ) ) ) [EOL] [EOL] if tcgen_language_id is None or tcgen_source_code is None : [EOL] tcgen_source = None [EOL] tcgen_language = None [EOL] else : [EOL] if tcgen_language_id not in permitted_langs : [EOL] raise ForbiddenLanguageError ( ) [EOL] tcgen_language = get_language_by_id ( tcgen_language_id ) [EOL] tcgen_source = tcgen_source_code [EOL] [EOL] if solution_language_id is None or solution_source_code is None : [EOL] solution_source = None [EOL] solution_language = None [EOL] else : [EOL] if solution_language_id not in permitted_langs : [EOL] raise ForbiddenLanguageError ( ) [EOL] solution_language = get_language_by_id ( solution_language_id ) [EOL] solution_source = solution_source_code [EOL] [EOL] if checker_language_id is None or checker_source_code is None : [EOL] checker_source = None [EOL] checker_language = None [EOL] else : [EOL] if checker_language_id not in permitted_langs : [EOL] raise ForbiddenLanguageError ( ) [EOL] checker_language = get_language_by_id ( checker_language_id ) [EOL] checker_source = checker_source_code [EOL] [EOL] return tcgen_language , tcgen_source , solution_language , solution_source , checker_language , checker_source [EOL] [EOL] [EOL] @ transaction . atomic def create_problem ( user , short_id , name , statement , disabled , time_limit , tolerance , memory_limit , output_limit , tcgen_language_id , tcgen_source_code , solution_language_id , solution_source_code , checker_language_id , checker_source_code ) : [EOL] tcgen_language , tcgen_source , solution_language , solution_source , checker_language , checker_source = check_files ( user , tcgen_language_id , tcgen_source_code , solution_language_id , solution_source_code , checker_language_id , checker_source_code ) [EOL] [EOL] if not user . has_permission ( [string] ) : [EOL] raise ForbiddenActionError ( [string] ) [EOL] [EOL] last_order = Problem . objects . filter ( contest__id = user . contest . id ) . aggregate ( Max ( [string] ) ) [EOL] new_prob = Problem ( short_id = short_id , name = name , statement = statement , disabled = disabled , time_limit = time_limit , tolerance = tolerance , memory_limit = memory_limit , output_limit = output_limit , order = last_order [ [string] ] + [number] , contest = user . contest , tcgen_language = tcgen_language , tcgen_source = tcgen_source , solution_language = solution_language , solution_source = solution_source , checker_language = checker_language , checker_source = checker_source ) [EOL] new_prob . save ( ) [EOL] return new_prob [EOL] [EOL] [EOL] def update_problem ( user , problem_id , short_id , name , statement , disabled , time_limit , tolerance , memory_limit , output_limit , tcgen_language_id , tcgen_source_code , solution_language_id , solution_source_code , checker_language_id , checker_source_code ) : [EOL] tcgen_language , tcgen_source , solution_language , solution_source , checker_language , checker_source = check_files ( user , tcgen_language_id , tcgen_source_code , solution_language_id , solution_source_code , checker_language_id , checker_source_code ) [EOL] [EOL] if not user . has_permission ( [string] ) : [EOL] raise ForbiddenActionError ( [string] ) [EOL] [EOL] try : [EOL] prob = Problem . objects . get ( pk = problem_id ) [EOL] except Problem . DoesNotExist : [EOL] raise NoSuchProblemError ( ) [EOL] [EOL] permissions = map ( lambda user : user . code , user . permissions . all ( ) ) [EOL] if prob . disabled and [string] not in permissions : [EOL] raise ValueError ( [string] ) [EOL] [EOL] if short_id is not None : [EOL] prob . short_id = short_id [EOL] if name is not None : [EOL] prob . name = name [EOL] if statement is not None : [EOL] prob . statement = statement [EOL] if disabled is not None : [EOL] prob . disabled = disabled [EOL] if time_limit is not None : [EOL] prob . time_limit = time_limit [EOL] if tolerance is not None : [EOL] prob . tolerance = tolerance [EOL] if memory_limit is not None : [EOL] prob . memory_limit = memory_limit [EOL] if output_limit is not None : [EOL] prob . output_limit = output_limit [EOL] if tcgen_language is not None : [EOL] prob . tcgen_language = tcgen_language [EOL] if tcgen_source is not None : [EOL] prob . tcgen_source = tcgen_source [EOL] if solution_language is not None : [EOL] prob . solution_language = solution_language [EOL] if solution_source is not None : [EOL] prob . solution_source = solution_source [EOL] if checker_language is not None : [EOL] prob . checker_language = checker_language [EOL] if checker_source is not None : [EOL] prob . checker_source = checker_source [EOL] [EOL] prob . save ( ) [EOL] return prob [EOL] [EOL] [EOL] def delete_problem ( user , problem_id ) : [EOL] if not user . has_permission ( [string] ) : [EOL] raise ForbiddenActionError ( [string] ) [EOL] [EOL] try : [EOL] prob = Problem . objects . get ( pk = problem_id ) [EOL] except Problem . DoesNotExist : [EOL] raise NoSuchProblemError ( ) [EOL] [EOL] if prob . disabled and not user . has_permission ( [string] ) : [EOL] raise NoSuchProblemError ( ) [EOL] [EOL] prob . delete ( ) [EOL] return problem_id [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[contests.models.Problem]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contests.models.Problem$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contests.models.Problem$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contests.models.Problem$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import datetime [EOL] import builtins [EOL] import datetime [EOL] from django . utils import timezone [EOL] [EOL] [EOL] def ping_resolver ( _root , _info ) : [EOL] return [string] [EOL] [EOL] [EOL] def server_clock_resolver ( _root , _info ) : [EOL] return timezone . now ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] import django . core . validators [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterField ( model_name = [string] , name = [string] , field = models . IntegerField ( default = [number] , validators = [ django . core . validators . MinValueValidator ( [number] ) ] ) , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = models . EmailField ( max_length = [number] , validators = [ django . core . validators . EmailValidator ( ) , django . core . validators . MinLengthValidator ( [number] ) , django . core . validators . MaxLengthValidator ( [number] ) ] , verbose_name = [string] ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] import contests . models [EOL] import django . core . validators [EOL] from django . db import migrations , models [EOL] import django . db . models . deletion [EOL] import re [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] initial = True [EOL] [EOL] dependencies = [ ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . CharField ( max_length = [number] , validators = [ django . core . validators . MinLengthValidator ( [number] ) , django . core . validators . MaxLengthValidator ( [number] ) ] ) ) , ( [string] , models . CharField ( max_length = [number] , unique = True , validators = [ django . core . validators . RegexValidator ( re . compile ( [string] ) , [string] , [string] ) , django . core . validators . MinLengthValidator ( [number] ) , django . core . validators . MaxLengthValidator ( [number] ) ] ) ) , ( [string] , models . CharField ( max_length = [number] , validators = [ django . core . validators . MinLengthValidator ( [number] ) , django . core . validators . MaxLengthValidator ( [number] ) ] ) ) , ( [string] , models . TextField ( validators = [ django . core . validators . MaxLengthValidator ( [number] ) ] ) ) , ( [string] , models . DateTimeField ( ) ) , ( [string] , models . BooleanField ( ) ) , ( [string] , models . DateTimeField ( ) ) , ] , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . CharField ( max_length = [number] ) ) , ( [string] , models . CharField ( max_length = [number] ) ) , ] , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . CharField ( max_length = [number] , unique = True ) ) , ( [string] , models . TextField ( validators = [ django . core . validators . MaxLengthValidator ( [number] ) ] ) ) , ] , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . CharField ( max_length = [number] , validators = [ django . core . validators . RegexValidator ( re . compile ( [string] ) , [string] , [string] ) , django . core . validators . MinLengthValidator ( [number] ) , django . core . validators . MaxLengthValidator ( [number] ) ] ) ) , ( [string] , models . CharField ( max_length = [number] , validators = [ django . core . validators . MinLengthValidator ( [number] ) , django . core . validators . MaxLengthValidator ( [number] ) ] ) ) , ( [string] , models . TextField ( validators = [ django . core . validators . MaxLengthValidator ( [number] ) ] ) ) , ( [string] , models . BooleanField ( ) ) , ( [string] , models . IntegerField ( ) ) , ( [string] , models . IntegerField ( ) ) , ( [string] , models . FloatField ( ) ) , ( [string] , models . IntegerField ( ) ) , ( [string] , models . IntegerField ( ) ) , ( [string] , models . FileField ( blank = True , null = True , upload_to = contests . models . checker_upload_path ) ) , ( [string] , models . FileField ( blank = True , null = True , upload_to = contests . models . solution_upload_path ) ) , ( [string] , models . FileField ( blank = True , null = True , upload_to = contests . models . tcgen_upload_path ) ) , ( [string] , models . ForeignKey ( null = True , on_delete = django . db . models . deletion . SET_NULL , related_name = [string] , to = [string] ) ) , ( [string] , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , related_name = [string] , to = [string] ) ) , ( [string] , models . ForeignKey ( null = True , on_delete = django . db . models . deletion . SET_NULL , related_name = [string] , to = [string] ) ) , ( [string] , models . ForeignKey ( null = True , on_delete = django . db . models . deletion . SET_NULL , related_name = [string] , to = [string] ) ) , ] , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . FileField ( blank = True , null = True , upload_to = contests . models . submission_upload_path ) ) , ( [string] , models . DateTimeField ( auto_now_add = True ) ) , ] , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . CharField ( blank = True , default = None , max_length = [number] , null = True , validators = [ django . core . validators . MinLengthValidator ( [number] ) , django . core . validators . MaxLengthValidator ( [number] ) ] , verbose_name = [string] ) ) , ( [string] , models . CharField ( blank = True , default = None , max_length = [number] , null = True , validators = [ django . core . validators . RegexValidator ( re . compile ( [string] ) , [string] , [string] ) , django . core . validators . MinLengthValidator ( [number] ) , django . core . validators . MaxLengthValidator ( [number] ) ] , verbose_name = [string] ) ) , ( [string] , models . EmailField ( max_length = [number] , validators = [ django . core . validators . EmailValidator ( ) , django . core . validators . MinLengthValidator ( [number] ) , django . core . validators . MaxLengthValidator ( [number] ) ] , verbose_name = [string] ) ) , ( [string] , models . CharField ( blank = True , default = None , max_length = [number] , null = True ) ) , ( [string] , models . CharField ( blank = True , default = None , max_length = [number] , null = True ) ) , ( [string] , models . CharField ( blank = True , default = None , max_length = [number] , null = True ) ) , ( [string] , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , related_name = [string] , to = [string] ) ) , ( [string] , models . ManyToManyField ( to = [string] ) ) , ] , ) , migrations . AddField ( model_name = [string] , name = [string] , field = models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = [string] ) , ) , migrations . AddField ( model_name = [string] , name = [string] , field = models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = [string] ) , ) , migrations . AddField ( model_name = [string] , name = [string] , field = models . ForeignKey ( null = True , on_delete = django . db . models . deletion . SET_NULL , related_name = [string] , to = [string] ) , ) , migrations . AddField ( model_name = [string] , name = [string] , field = models . ManyToManyField ( to = [string] ) , ) , migrations . AlterUniqueTogether ( name = [string] , unique_together = { ( [string] , [string] ) , ( [string] , [string] ) } , ) , migrations . AlterUniqueTogether ( name = [string] , unique_together = { ( [string] , [string] ) } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool
from typing import Tuple , Any , Iterable , Dict [EOL] import typing [EOL] import builtins [EOL] import django [EOL] import contests [EOL] import random [EOL] from typing import Tuple , Iterable [EOL] [EOL] import bcrypt [EOL] import jwt [EOL] from jwt . exceptions import PyJWTError [EOL] from django . conf import settings [EOL] from django . http import HttpRequest [EOL] [EOL] from contests . exceptions import NoSuchContestError , NoSuchUserError , AuthenticationError , UserAlreadySignedUpError , UserHaventSignedUpError , UsernameAlreadyUsedError [EOL] from contests . models import Permission , User , Contest [EOL] [EOL] [EOL] def _assert_contest_exists ( contest_id ) : [EOL] if Contest . objects . filter ( pk = contest_id ) . count ( ) == [number] : [EOL] raise NoSuchContestError ( ) [EOL] [EOL] [EOL] def get_all_permissions ( ) : [EOL] return Permission . objects . all ( ) [EOL] [EOL] [EOL] def get_all_users ( ) : [EOL] return User . objects . all ( ) [EOL] [EOL] [EOL] def get_user_by_id ( user_id ) : [EOL] try : [EOL] return User . objects . get ( pk = user_id ) [EOL] except User . DoesNotExist : [EOL] raise NoSuchUserError ( ) [EOL] [EOL] [EOL] def get_user_by_email ( contest_id , email ) : [EOL] _assert_contest_exists ( contest_id ) [EOL] user = User . objects . filter ( contest__id = contest_id , email = email ) . first ( ) [EOL] if user is None : [EOL] raise NoSuchUserError ( ) [EOL] return user [EOL] [EOL] [EOL] def get_user_by_username ( contest_id , username ) : [EOL] _assert_contest_exists ( contest_id ) [EOL] user = User . objects . filter ( contest__id = contest_id , username = username ) . first ( ) [EOL] if user is None : [EOL] raise NoSuchUserError ( ) [EOL] return user [EOL] [EOL] [EOL] def get_contest_users ( contest_id ) : [EOL] _assert_contest_exists ( contest_id ) [EOL] return User . objects . filter ( contest__id = contest_id ) . all ( ) [EOL] [EOL] [EOL] def sign_in ( user_id , password ) : [EOL] try : [EOL] user = User . objects . get ( pk = user_id ) [EOL] except User . DoesNotExist : [EOL] raise AuthenticationError ( [string] ) [EOL] [EOL] if user . username is None : [EOL] raise UserHaventSignedUpError ( [string] ) [EOL] [EOL] password_matched = bcrypt . checkpw ( bytes ( password , [string] ) , bytes ( user . password , [string] ) ) [EOL] if not password_matched : [EOL] raise AuthenticationError ( [string] ) [EOL] [EOL] token = jwt . encode ( { [string] : user . id } , settings . SECRET_KEY , algorithm = [string] ) . decode ( [string] ) [EOL] [EOL] return user , token [EOL] [EOL] [EOL] def sign_up ( user_id , username , name , password , signup_code ) : [EOL] try : [EOL] new_user = User . objects . get ( pk = user_id ) [EOL] except User . DoesNotExist : [EOL] raise NoSuchUserError ( ) [EOL] [EOL] if new_user . username is not None : [EOL] raise UserAlreadySignedUpError ( ) [EOL] [EOL] if new_user . signup_otc != signup_code : [EOL] raise AuthenticationError ( [string] ) [EOL] [EOL] if User . objects . filter ( contest__id = new_user . contest . id , username = username ) . count ( ) > [number] : [EOL] raise UsernameAlreadyUsedError ( ) [EOL] [EOL] new_user . name = name [EOL] new_user . username = username [EOL] new_user . password = bcrypt . hashpw ( bytes ( password , [string] ) , bcrypt . gensalt ( ) ) . decode ( [string] ) [EOL] [EOL] new_user . signup_otc = None [EOL] new_user . reset_password_otc = None [EOL] new_user . full_clean ( ) [EOL] new_user . save ( ) [EOL] [EOL] token = jwt . encode ( { [string] : new_user . id } , settings . SECRET_KEY , algorithm = [string] ) . decode ( [string] ) [EOL] [EOL] return new_user , token [EOL] [EOL] [EOL] def forgot_password ( user_id ) : [EOL] try : [EOL] user = User . objects . get ( pk = user_id ) [EOL] except User . DoesNotExist : [EOL] raise NoSuchUserError ( ) [EOL] [EOL] if user . username is None : [EOL] raise UserHaventSignedUpError ( ) [EOL] [EOL] if user . reset_password_otc is None : [EOL] user . reset_password_otc = [string] . join ( random . choice ( [string] ) for _ in range ( [number] ) ) [EOL] user . save ( ) [EOL] [EOL] return user [EOL] [EOL] [EOL] def reset_password ( user_id , reset_password_otc , new_password ) : [EOL] try : [EOL] user = User . objects . get ( pk = user_id ) [EOL] except User . DoesNotExist : [EOL] raise NoSuchUserError ( ) [EOL] [EOL] if user . username is None : [EOL] raise UserHaventSignedUpError ( ) [EOL] [EOL] if reset_password_otc != user . reset_password_otc : [EOL] raise AuthenticationError ( [string] ) [EOL] [EOL] user . password = bcrypt . hashpw ( bytes ( new_password , [string] ) , bcrypt . gensalt ( ) ) . decode ( [string] ) [EOL] user . reset_password_otc = None [EOL] user . save ( ) [EOL] [EOL] return user [EOL] [EOL] [EOL] def get_user_from_token ( token ) : [EOL] try : [EOL] data = jwt . decode ( token , settings . SECRET_KEY , algorithm = [ [string] ] ) [EOL] user_id = data [ [string] ] [EOL] user = User . objects . get ( pk = user_id ) [EOL] except ( PyJWTError , User . DoesNotExist , KeyError , ValueError ) : [EOL] raise AuthenticationError ( [string] ) [EOL] [EOL] [comment] [EOL] if user . username is None : [EOL] raise AuthenticationError ( [string] ) [EOL] return user [EOL] [EOL] [EOL] def get_me ( request ) : [EOL] auth_header = request . META . get ( [string] ) [EOL] if auth_header is None : [EOL] raise AuthenticationError ( [string] ) [EOL] [EOL] partition = auth_header . split ( ) [EOL] if len ( partition ) != [number] or partition [ [number] ] . lower ( ) != [string] : [EOL] raise AuthenticationError ( [string] ) [EOL] [EOL] token = partition [ [number] ] [EOL] return get_user_from_token ( token ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[contests.models.Permission]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[contests.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contests.models.User$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contests.models.User$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contests.models.User$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[contests.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[contests.models.User,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[contests.models.User,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contests.models.User$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contests.models.User$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contests.models.User$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contests.models.User$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Iterable [EOL] import typing [EOL] import builtins [EOL] import contests [EOL] from typing import Iterable , NamedTuple [EOL] [EOL] from contests . models import User [EOL] from . core import sign_in , sign_up , forgot_password , reset_password , get_me , get_user_by_username , get_user_by_email , get_user_by_id , get_all_users [EOL] [EOL] [EOL] class SignInResult ( NamedTuple ) : [EOL] user = ... [EOL] token = ... [EOL] [EOL] [EOL] class UserInput ( NamedTuple ) : [EOL] username = ... [EOL] name = ... [EOL] password = ... [EOL] [EOL] [EOL] class SignUpResult ( NamedTuple ) : [EOL] user = ... [EOL] token = ... [EOL] [EOL] [EOL] def user_permissions_resolver ( root , _info ) : [EOL] return map ( lambda perm : perm . code , root . permissions . all ( ) ) [EOL] [EOL] [EOL] def sign_in_mutate ( _self , _info , user_id , password ) : [EOL] user , token = sign_in ( user_id , password ) [EOL] return SignInResult ( user = user , token = token ) [EOL] [EOL] [EOL] def sign_up_mutate ( _self , _info , user_id , user , signup_code ) : [EOL] new_user , token = sign_up ( user_id , user . username , user . name , user . password , signup_code ) [EOL] return SignUpResult ( user = new_user , token = token ) [EOL] [EOL] [EOL] def forgot_password_mutate ( _self , _info , user_id ) : [EOL] return forgot_password ( user_id ) [EOL] [EOL] [EOL] def reset_passwod_mutate ( _self , _info , user_id , reset_password_otc , new_password ) : [EOL] return reset_password ( user_id , reset_password_otc , new_password ) [EOL] [EOL] [EOL] def me_resolver ( _root , info ) : [EOL] return get_me ( info . context ) [EOL] [EOL] [EOL] def user_resolver ( _root , _info , user_id ) : [EOL] return get_user_by_id ( user_id ) [EOL] [EOL] [EOL] def users_resolver ( _root , _info ) : [EOL] return get_all_users ( ) [EOL] [EOL] [EOL] def user_by_username_resolver ( _root , _info , contest_id , username ) : [EOL] return get_user_by_username ( contest_id , username ) [EOL] [EOL] [EOL] def user_by_email_resolver ( _root , _info , contest_id , email ) : [EOL] return get_user_by_email ( contest_id , email ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contests.models.User$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $contests.models.User$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Iterable[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $SignInResult$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $SignUpResult$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contests.models.User$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contests.models.User$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contests.models.User$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contests.models.User$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[contests.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contests.models.User$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contests.models.User$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] import pytest [EOL] import jwt [EOL] import bcrypt [EOL] from mixer . backend . django import mixer [EOL] [EOL] from django . test import TestCase [EOL] from django . core . exceptions import ValidationError [EOL] [EOL] from ugrade import settings [EOL] from contests . models import User [EOL] from contests . exceptions import NoSuchUserError , NoSuchContestError , AuthenticationError , UserHaventSignedUpError , UserAlreadySignedUpError , UsernameAlreadyUsedError [EOL] from . core import get_all_permissions , get_all_users , get_user_by_id , get_user_by_username , get_user_by_email , get_contest_users , sign_in , sign_up , forgot_password , reset_password , get_user_from_token [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_get_all_permissions ( ) : [EOL] mixer . cycle ( [number] ) . blend ( [string] ) [EOL] assert len ( get_all_permissions ( ) ) == [number] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_get_all_users ( ) : [EOL] mixer . cycle ( [number] ) . blend ( [string] ) [EOL] users = get_all_users ( ) [EOL] assert len ( users ) == [number] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_get_user_by_id ( ) : [EOL] perm1 = mixer . blend ( [string] , code = [string] ) [EOL] perm2 = mixer . blend ( [string] , code = [string] ) [EOL] mixer . cycle ( [number] ) . blend ( [string] , name = [string] , permissions = [ perm1 , perm2 ] ) [EOL] user1 = get_user_by_id ( [number] ) [EOL] [EOL] assert user1 . name == [string] [EOL] assert user1 . has_permission ( [string] ) and user1 . has_permission ( [string] ) [EOL] assert user1 . permission_codes == [ [string] , [string] ] [EOL] [EOL] with pytest . raises ( NoSuchUserError ) : [EOL] get_user_by_id ( [number] ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_get_user_by_username ( ) : [EOL] contest1 = mixer . blend ( [string] , id = [number] , name = [string] ) [EOL] mixer . blend ( [string] , id = [number] , name = [string] ) [EOL] mixer . blend ( [string] , name = [string] , username = [string] , contest = contest1 ) [EOL] mixer . blend ( [string] , name = [string] , username = [string] , contest = contest1 ) [EOL] [EOL] assert get_user_by_username ( [number] , [string] ) . name == [string] [EOL] assert get_user_by_username ( [number] , [string] ) . name == [string] [EOL] with pytest . raises ( NoSuchUserError ) : [EOL] get_user_by_username ( [number] , [string] ) [EOL] with pytest . raises ( NoSuchUserError ) : [EOL] get_user_by_username ( [number] , [string] ) [EOL] with pytest . raises ( NoSuchContestError ) : [EOL] get_user_by_username ( [number] , [string] ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_get_user_by_email ( ) : [EOL] contest1 = mixer . blend ( [string] , id = [number] , name = [string] ) [EOL] mixer . blend ( [string] , id = [number] , name = [string] ) [EOL] mixer . blend ( [string] , name = [string] , email = [string] , contest = contest1 ) [EOL] mixer . blend ( [string] , name = [string] , email = [string] , contest = contest1 ) [EOL] [EOL] assert get_user_by_email ( [number] , [string] ) . name == [string] [EOL] assert get_user_by_email ( [number] , [string] ) . name == [string] [EOL] with pytest . raises ( NoSuchUserError ) : [EOL] get_user_by_email ( [number] , [string] ) [EOL] with pytest . raises ( NoSuchUserError ) : [EOL] get_user_by_email ( [number] , [string] ) [EOL] with pytest . raises ( NoSuchContestError ) : [EOL] get_user_by_email ( [number] , [string] ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_get_contest_users ( ) : [EOL] contest1 = mixer . blend ( [string] , id = [number] ) [EOL] mixer . cycle ( [number] ) . blend ( [string] , name = [string] , contest = contest1 ) [EOL] [EOL] result = get_contest_users ( [number] ) [EOL] assert len ( result ) == [number] [EOL] for user in result : [EOL] assert user . name == [string] [EOL] [EOL] with pytest . raises ( NoSuchContestError ) : [EOL] get_contest_users ( [number] ) [EOL] [EOL] [EOL] @ pytest . mark . django_db class SignInTest ( TestCase ) : [EOL] @ classmethod def setUpTestData ( cls ) : [EOL] mixer . cycle ( [number] ) . blend ( [string] , name = ( [string] % n for n in range ( [number] , [number] ) ) , email = ( [string] % n for n in range ( [number] , [number] ) ) , username = ( [string] % n for n in range ( [number] , [number] ) ) , password = bcrypt . hashpw ( [string] , bcrypt . gensalt ( ) ) . decode ( [string] ) ) [EOL] mixer . blend ( [string] , name = [string] , email = [string] ) [EOL] [EOL] def test_wrong_user_id ( self ) : [EOL] with pytest . raises ( AuthenticationError ) : [EOL] sign_in ( [number] , [string] ) [EOL] [EOL] def test_havent_signed_up ( self ) : [EOL] with pytest . raises ( UserHaventSignedUpError ) : [EOL] sign_in ( [number] , [string] ) [EOL] [EOL] def test_wrong_password ( self ) : [EOL] with pytest . raises ( AuthenticationError ) : [EOL] sign_in ( [number] , [string] ) [EOL] [EOL] def test_success ( self ) : [EOL] user , token = sign_in ( [number] , [string] ) [EOL] assert user . id == [number] [EOL] assert token is not None and token != [string] [EOL] token_data = jwt . decode ( token , verify = False ) [EOL] assert token_data [ [string] ] == [number] [EOL] [EOL] [EOL] @ pytest . mark . django_db class SignUpTest ( TestCase ) : [EOL] @ classmethod def setUpTestData ( cls ) : [EOL] contest1 = mixer . blend ( [string] , id = [number] ) [EOL] contest2 = mixer . blend ( [string] , id = [number] ) [EOL] mixer . blend ( [string] , name = [string] , email = [string] , username = [string] , password = bcrypt . hashpw ( [string] , bcrypt . gensalt ( ) ) . decode ( [string] ) , contest = contest1 ) [EOL] mixer . blend ( [string] , email = [string] , contest = contest2 , signup_otc = [string] ) [EOL] mixer . blend ( [string] , name = [string] , email = [string] , username = [string] , password = bcrypt . hashpw ( [string] , bcrypt . gensalt ( ) ) . decode ( [string] ) , contest = contest2 ) [EOL] [EOL] def test_wrong_email ( self ) : [EOL] with pytest . raises ( NoSuchUserError ) : [EOL] sign_up ( [number] , [string] , [string] , [string] , [string] ) [EOL] with pytest . raises ( NoSuchUserError ) : [EOL] sign_up ( [number] , [string] , [string] , [string] , [string] ) [EOL] [EOL] def test_already_signed_up ( self ) : [EOL] with pytest . raises ( UserAlreadySignedUpError ) : [EOL] sign_up ( [number] , [string] , [string] , [string] , [string] ) [EOL] [EOL] def test_wrong_otc ( self ) : [EOL] with pytest . raises ( AuthenticationError ) : [EOL] sign_up ( [number] , [string] , [string] , [string] , [string] ) [EOL] [EOL] def test_already_used_username ( self ) : [EOL] with pytest . raises ( UsernameAlreadyUsedError ) : [EOL] sign_up ( [number] , [string] , [string] , [string] , [string] ) [EOL] [EOL] def test_invalid_input ( self ) : [EOL] with pytest . raises ( ValidationError ) as error : [EOL] sign_up ( [number] , [string] , [string] , [string] , [string] ) [EOL] assert error . value . message_dict [ [string] ] is not None [EOL] [EOL] def test_success ( self ) : [EOL] user , token = sign_up ( [number] , [string] , [string] , [string] , [string] ) [EOL] [EOL] assert user . id == [number] [EOL] assert token is not None and token != [string] [EOL] token_data = jwt . decode ( token , verify = False ) [EOL] assert token_data [ [string] ] == [number] [EOL] [EOL] user = User . objects . get ( pk = [number] ) [EOL] assert user . signup_otc is None [EOL] [EOL] [EOL] @ pytest . mark . django_db class ForgotPasswordTest ( TestCase ) : [EOL] @ classmethod def setUpTestData ( cls ) : [EOL] mixer . blend ( [string] , name = [string] , email = [string] , username = [string] , password = bcrypt . hashpw ( [string] , bcrypt . gensalt ( ) ) . decode ( [string] ) ) [EOL] mixer . blend ( [string] , email = [string] , signup_otc = [string] ) [EOL] [EOL] def test_wrong_email ( self ) : [EOL] with pytest . raises ( NoSuchUserError ) : [EOL] forgot_password ( [number] ) [EOL] [EOL] def test_havent_signed_up ( self ) : [EOL] with pytest . raises ( UserHaventSignedUpError ) : [EOL] forgot_password ( [number] ) [EOL] [EOL] def test_success_and_create_new_otc ( self ) : [EOL] forgot_password ( [number] ) [EOL] user = User . objects . get ( pk = [number] ) [EOL] assert user . reset_password_otc is not None [EOL] [EOL] def test_success_and_use_old_otc ( self ) : [EOL] user = User . objects . get ( pk = [number] ) [EOL] user . reset_password_otc = [string] [EOL] user . save ( ) [EOL] [EOL] forgot_password ( [number] ) [EOL] user = User . objects . get ( pk = [number] ) [EOL] assert user . reset_password_otc == [string] [EOL] [EOL] [EOL] @ pytest . mark . django_db class ResetPasswordTest ( TestCase ) : [EOL] @ classmethod def setUpTestData ( cls ) : [EOL] contest1 = mixer . blend ( [string] , id = [number] ) [EOL] mixer . blend ( [string] , name = [string] , email = [string] , username = [string] , password = bcrypt . hashpw ( [string] , bcrypt . gensalt ( ) ) . decode ( [string] ) , contest = contest1 ) [EOL] mixer . blend ( [string] , email = [string] , contest = contest1 , signup_otc = [string] ) [EOL] [EOL] def test_wrong_user_id ( self ) : [EOL] with pytest . raises ( NoSuchUserError ) : [EOL] reset_password ( [number] , [string] , [string] ) [EOL] [EOL] def test_havent_signed_up ( self ) : [EOL] with pytest . raises ( UserHaventSignedUpError ) : [EOL] reset_password ( [number] , [string] , [string] ) [EOL] [EOL] def test_wrong_code ( self ) : [EOL] user = User . objects . get ( pk = [number] ) [EOL] user . reset_password_otc = [string] [EOL] user . save ( ) [EOL] with pytest . raises ( AuthenticationError ) : [EOL] reset_password ( [number] , [string] , [string] ) [EOL] [EOL] def test_success ( self ) : [EOL] user = User . objects . get ( pk = [number] ) [EOL] user . reset_password_otc = [string] [EOL] user . save ( ) [EOL] [EOL] reset_password ( [number] , [string] , [string] ) [EOL] user = User . objects . get ( pk = [number] ) [EOL] assert bcrypt . checkpw ( [string] , bytes ( user . password , [string] ) ) [EOL] [EOL] def test_with_forgot_password ( self ) : [EOL] forgot_password ( [number] ) [EOL] user = User . objects . get ( pk = [number] ) [EOL] assert user . reset_password_otc is not None [EOL] [EOL] reset_password ( [number] , user . reset_password_otc , [string] ) [EOL] user = User . objects . get ( pk = [number] ) [EOL] assert bcrypt . checkpw ( [string] , bytes ( user . password , [string] ) ) [EOL] [EOL] [EOL] @ pytest . mark . django_db class GetUserFromTokenTest ( TestCase ) : [EOL] @ classmethod def setUpTestData ( cls ) : [EOL] contest1 = mixer . blend ( [string] , id = [number] ) [EOL] mixer . blend ( [string] , name = [string] , email = [string] , username = [string] , password = bcrypt . hashpw ( [string] , bcrypt . gensalt ( ) ) . decode ( [string] ) , contest = contest1 ) [EOL] mixer . blend ( [string] , email = [string] , contest = contest1 , signup_otc = [string] ) [EOL] [EOL] def test_authentication_error ( self ) : [EOL] with pytest . raises ( AuthenticationError ) : [EOL] get_user_from_token ( [string] ) [EOL] with pytest . raises ( AuthenticationError ) : [EOL] get_user_from_token ( [string] ) [EOL] [EOL] [comment] [EOL] with pytest . raises ( AuthenticationError ) : [EOL] get_user_from_token ( [string] ) [EOL] [EOL] [comment] [EOL] with pytest . raises ( AuthenticationError ) : [EOL] get_user_from_token ( [string] ) [EOL] with pytest . raises ( AuthenticationError ) : [EOL] get_user_from_token ( [string] ) [EOL] [EOL] [comment] [EOL] with pytest . raises ( AuthenticationError ) : [EOL] get_user_from_token ( jwt . encode ( { [string] : [string] } , settings . SECRET_KEY , algorithm = [string] ) ) [EOL] [EOL] [comment] [EOL] with pytest . raises ( AuthenticationError ) : [EOL] get_user_from_token ( jwt . encode ( { [string] : [number] } , settings . SECRET_KEY , algorithm = [string] ) ) [EOL] [EOL] def test_success ( self ) : [EOL] user = get_user_from_token ( jwt . encode ( { [string] : [number] } , settings . SECRET_KEY , algorithm = [string] ) ) [EOL] assert user . id == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import graphene [EOL] import contests . schema [EOL] [EOL] [EOL] class Query ( contests . schema . Query , graphene . ObjectType ) : [EOL] pass [EOL] [EOL] [EOL] class Mutation ( contests . schema . Mutation , graphene . ObjectType ) : [EOL] pass [EOL] [EOL] [EOL] schema = graphene . Schema ( query = Query , mutation = Mutation ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Union , List , Optional , Dict [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] [EOL] import os [EOL] import typing [EOL] import django_heroku [EOL] import dj_database_url [EOL] import sentry_sdk [EOL] from sentry_sdk . integrations . django import DjangoIntegration [EOL] [EOL] [comment] [EOL] BASE_DIR = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) [EOL] BASE_URL = [string] [EOL] [EOL] MEDIA_ROOT = os . path . join ( BASE_DIR , [string] ) [EOL] MEDIA_URL = BASE_URL + [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] SECRET_KEY = os . environ . get ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] DEBUG = os . environ . get ( [string] , [string] ) . lower ( ) == [string] [EOL] [EOL] ALLOWED_HOSTS = [ ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] INSTALLED_APPS = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] MIDDLEWARE = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] ROOT_URLCONF = [string] [EOL] [EOL] TEMPLATES = [ { [string] : [string] , [string] : [ ] , [string] : True , [string] : { [string] : [ [string] , [string] , [string] , [string] , ] , } , } , ] [EOL] [EOL] WSGI_APPLICATION = [string] [EOL] [EOL] [comment] [EOL] [EOL] RQ_QUEUES = { [string] : { [string] : os . getenv ( [string] , [string] ) , [string] : [number] , } } [EOL] [EOL] [comment] [EOL] [EOL] if [string] in os . environ : [EOL] sentry_sdk . init ( dsn = os . environ [ [string] ] , integrations = [ DjangoIntegration ( ) ] ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] DATABASES = { [string] : { [string] : [string] , [string] : os . path . join ( BASE_DIR , [string] ) , } } [EOL] DATABASES [ [string] ] = dj_database_url . config ( default = [string] ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] GRAPHENE = { [string] : [string] } [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] AUTH_PASSWORD_VALIDATORS = [ { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , ] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] LANGUAGE_CODE = [string] [EOL] [EOL] TIME_ZONE = [string] [EOL] [EOL] USE_I18N = True [EOL] [EOL] USE_L10N = True [EOL] [EOL] USE_TZ = True [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] STATIC_URL = [string] [EOL] [EOL] django_heroku . settings ( locals ( ) ) [EOL] [EOL] CORS_ALLOW_CREDENTIALS = True [EOL] [EOL] CORS_ORIGIN_WHITELIST = [ [string] , [string] ] [EOL] [EOL] if [string] in os . environ : [EOL] CORS_ORIGIN_WHITELIST += [ os . environ . get ( [string] , [string] ) ] [EOL] [EOL] if [string] in os . environ : [EOL] AWS_ACCESS_KEY_ID = os . environ . get ( [string] ) [EOL] AWS_SECRET_ACCESS_KEY = os . environ . get ( [string] ) [EOL] AWS_STORAGE_BUCKET_NAME = os . environ . get ( [string] ) [EOL] AWS_DEFAULT_ACL = None [EOL] [EOL] DEFAULT_FILE_STORAGE = [string] [EOL] STATICFILES_STORAGE = [string] [EOL] AWS_S3_CUSTOM_DOMAIN = os . environ . get ( [string] , [string] % AWS_STORAGE_BUCKET_NAME ) [EOL] STATIC_URL = [string] % AWS_S3_CUSTOM_DOMAIN [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.List[builtins.str]],typing.List[typing.Any],builtins.bool,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] from django . contrib import admin [EOL] from django . conf . urls import url , include [EOL] from django . urls import path [EOL] from django . views . static import serve [EOL] [EOL] from ugrade import settings [EOL] from ugrade . schema import schema [EOL] from contests . views import ContestView [EOL] [EOL] urlpatterns = [ path ( [string] , admin . site . urls ) , url ( [string] , ContestView . as_view ( graphiql = True , schema = schema ) ) , url ( [string] , serve , { [string] : settings . MEDIA_ROOT } ) , path ( [string] , include ( [string] ) ) , path ( [string] , include ( [string] ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0