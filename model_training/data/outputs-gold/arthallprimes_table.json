from typing import List , Any [EOL] import typing [EOL] import builtins [EOL] from typing import List [EOL] [EOL] [EOL] class MultiplicationTable : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , values ) : [EOL] [docstring] [EOL] [EOL] self . values = values [EOL] self . table = self . _build_table ( ) [EOL] [EOL] def _build_table ( self ) : [EOL] [docstring] [EOL] [EOL] table = [ ] [EOL] [EOL] [comment] [EOL] row = [ str ( x ) for x in self . values ] [EOL] row . insert ( [number] , [string] ) [EOL] table . append ( row ) [EOL] [EOL] [comment] [EOL] for y in self . values : [EOL] row = [ str ( y * x ) for x in self . values ] [EOL] row . insert ( [number] , str ( y ) ) [EOL] table . append ( row ) [EOL] [EOL] return table [EOL] [EOL] def _text_table ( self ) : [EOL] [docstring] [EOL] [EOL] separator = [string] [EOL] horizontal = [string] [EOL] [EOL] rows = len ( self . table ) [EOL] cols = len ( self . table [ rows - [number] ] ) [EOL] [EOL] [comment] [EOL] largest_value = self . table [ rows - [number] ] [ cols - [number] ] [EOL] [comment] [EOL] padding = len ( largest_value ) + [number] [EOL] [EOL] row_length = len ( separator ) + cols * ( padding + len ( separator ) ) [EOL] row_separator = horizontal * row_length [EOL] [EOL] lines = [ ] [EOL] [comment] [EOL] lines . append ( row_separator ) [EOL] for row in self . table : [EOL] [comment] [EOL] lines . append ( [string] . format ( edge = separator , row = separator . join ( [ x . rjust ( padding - [number] ) + [string] for x in row ] ) ) ) [EOL] lines . append ( row_separator ) [EOL] [EOL] return lines [EOL] [EOL] def print_table ( self ) : [EOL] [docstring] [EOL] [EOL] lines = self . _text_table ( ) [EOL] [EOL] for line in lines : [EOL] print ( line ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.int$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0
from typing import Iterator [EOL] import typing [EOL] import builtins [EOL] import sys [EOL] from typing import Iterator [EOL] [EOL] [EOL] def prime_generator ( limit = [number] ) : [EOL] [docstring] [EOL] stop = sys . maxsize [EOL] [EOL] if limit < [number] : [EOL] raise ValueError ( [string] . format ( limit ) ) [EOL] [EOL] [comment] [EOL] primes = [ [number] ] [EOL] yield[number] [EOL] [EOL] [comment] [EOL] for i in range ( [number] , stop , [number] ) : [EOL] if len ( primes ) >= limit : [EOL] break [EOL] prime = True [EOL] largest_possible_divisor = ( i / [number] ) + [number] [EOL] [comment] [EOL] for y in primes [ [number] : ] : [EOL] if y < largest_possible_divisor : [EOL] if i % y == [number] : [EOL] prime = False [EOL] break [EOL] else : [EOL] break [EOL] [EOL] if prime : [EOL] primes . append ( i ) [EOL] yield(i) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List [EOL] import typing [EOL] import builtins [EOL] import multiplication_table [EOL] import argparse [EOL] import argparse [EOL] [EOL] from primes_generator import prime_generator [EOL] from multiplication_table import MultiplicationTable [EOL] [EOL] [docstring] [EOL] [EOL] [EOL] def get_table_size ( ) : [EOL] [docstring] [EOL] [EOL] parser = argparse . ArgumentParser ( description = [string] ) [EOL] parser . add_argument ( [string] , [string] , help = [string] , default = [number] , type = int ) [EOL] [EOL] return ( int ( parser . parse_args ( ) . table_size ) ) [EOL] [EOL] [EOL] [docstring] [EOL] if __name__ == [string] : [EOL] table_size = get_table_size ( ) [EOL] [EOL] primes = list ( prime_generator ( table_size ) ) [EOL] [EOL] table = MultiplicationTable ( primes ) [EOL] table . print_table ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $multiplication_table.MultiplicationTable$ 0 0 0 $typing.List[builtins.int]$ 0 0 $multiplication_table.MultiplicationTable$ 0 0 0 0 0
	0
from typing import List , Any [EOL] import typing [EOL] import pytest [EOL] from primes . primes_generator import prime_generator [EOL] [EOL] [EOL] def test_first_ten ( ) : [EOL] [docstring] [EOL] [EOL] limit = [number] [EOL] first_ten_primes = list ( prime_generator ( limit ) ) [EOL] [EOL] assert len ( first_ten_primes ) == limit [EOL] assert first_ten_primes [ [number] ] == [number] [EOL] assert first_ten_primes [ - [number] ] == [number] [EOL] [EOL] [EOL] def test_negative_value ( ) : [EOL] [docstring] [EOL] [EOL] with pytest . raises ( ValueError ) : [EOL] list ( prime_generator ( - [number] ) ) [EOL] [EOL] [EOL] @ pytest . mark . slow def test_generator ( ) : [EOL] [docstring] [EOL] [EOL] primes = prime_generator ( [number] ) [EOL] [EOL] answer = list ( primes ) [ - [number] ] [EOL] [EOL] assert answer == [number] [EOL] [EOL] [EOL] @ pytest . mark . slow def test_first_prime_over_one_million ( ) : [EOL] [docstring] [EOL] [EOL] finished = False [EOL] [comment] [EOL] primes = prime_generator ( [number] ) [EOL] count = [number] [EOL] while True : [EOL] prime = next ( primes ) [EOL] count += [number] [EOL] if prime > [number] : [EOL] assert prime == [number] [EOL] finished = True [EOL] break [EOL] [EOL] assert finished [EOL] assert count == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from primes . multiplication_table import MultiplicationTable [EOL] [EOL] [EOL] def test_build_table ( ) : [EOL] [docstring] [EOL] [EOL] values = [ [number] , [number] , [number] ] [EOL] mt = MultiplicationTable ( values ) [EOL] assert len ( mt . table ) == len ( values ) + [number] [EOL] assert len ( mt . table [ [number] ] ) == len ( values ) + [number] [EOL] [comment] [EOL] [comment] [EOL] assert int ( mt . table [ [number] ] [ len ( values ) ] ) * int ( mt . table [ len ( values ) ] [ [number] ] ) == int ( mt . table [ len ( values ) ] [ len ( values ) ] ) [EOL] [EOL] assert mt . table [ [number] ] [ [number] ] . strip ( ) == [string] [EOL] [EOL] [EOL] def test_text_table_number_of_lines ( ) : [EOL] [docstring] [EOL] [EOL] values = [ [number] , [number] ] [EOL] mt = MultiplicationTable ( values ) [EOL] lines = mt . _text_table ( ) [EOL] assert len ( lines ) == [number] [EOL] [EOL] [EOL] def test_text_table_equal_lines ( ) : [EOL] [docstring] [EOL] [EOL] values = [ [number] , [number] ] [EOL] mt = MultiplicationTable ( values ) [EOL] lines = mt . _text_table ( ) [EOL] length = len ( lines [ [number] ] ) [EOL] [EOL] for line in lines [ [number] : ] : [EOL] assert length == len ( line ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0