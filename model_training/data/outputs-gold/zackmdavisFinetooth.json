[comment] [EOL] import os [EOL] import sys [EOL] [EOL] if __name__ == [string] : [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] from django . core . management import execute_from_command_line [EOL] [EOL] execute_from_command_line ( sys . argv ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import concerned_testrunner [EOL] import unittest [EOL] [EOL] from django . test . runner import DiscoverRunner [EOL] [EOL] [EOL] class ConcernedTestLoader ( unittest . TestLoader ) : [EOL] testMethodPrefix = [string] [EOL] [EOL] [EOL] class ConcernedTestRunner ( DiscoverRunner ) : [EOL] test_loader = ConcernedTestLoader ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $concerned_testrunner.ConcernedTestLoader$ 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . conf . urls import include , url [EOL] from django . contrib . auth . views import login [EOL] [EOL] from core import views , feeds [EOL] [EOL] urlpatterns = [ url ( [string] , views . home , name = [string] ) , url ( [string] , views . serve_stylesheet , name = [string] ) , url ( [string] , views . new_post , name = [string] ) , url ( [string] , views . tag , name = [string] ) , url ( [string] , views . tagged , name = [string] ) , url ( [string] , views . ballot_box , name = [string] ) , url ( [string] , login , { [string] : [string] } , name = [string] ) , url ( [string] , views . logout_view , name = [string] ) , url ( [string] , views . sign_up , name = [string] ) , url ( [string] , views . show_profile , name = [string] ) , url ( [string] , views . edit_profile , name = [string] ) , url ( [string] , views . add_comment , name = [string] ) , url ( [string] , views . check_slug , name = [string] ) , url ( [string] , views . MonthlyArchive . as_view ( ) , name = [string] ) , url ( [string] , views . show_post , name = [string] ) , url ( [string] , feeds . LatestPostsFeed ( ) , name = [string] ) , url ( [string] , feeds . AuthorFeed ( ) , name = [string] ) , url ( [string] , feeds . CommenterFeed ( ) , name = [string] ) , url ( [string] , feeds . TagFeed ( ) , name = [string] ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] [EOL] if os . path . exists ( [string] ) : [EOL] application = get_wsgi_application ( ) [EOL] else : [EOL] from dj_static import Cling [EOL] application = Cling ( get_wsgi_application ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] import monkeytype_config [EOL] import django [EOL] django . setup ( ) [EOL] [EOL] from monkeytype . config import DefaultConfig [EOL] class MonkeyConfig ( DefaultConfig ) : [EOL] pass [EOL] [EOL] CONFIG = MonkeyConfig ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $monkeytype_config.MonkeyConfig$ 0 0 0 0 0
import django [EOL] import settings [EOL] [EOL] from django . utils import deprecation [EOL] [EOL] from django . core . handlers . wsgi import WSGIRequest [EOL] [EOL] [EOL] class FinetoothEnvironmentMiddleware ( deprecation . MiddlewareMixin ) : [EOL] def process_request ( self , request ) : [EOL] request . possible_environments = settings . Environment [EOL] request . environment = settings . ENVIRONMENT [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $django.core.handlers.wsgi.WSGIRequest$ 0 0 0 $django.core.handlers.wsgi.WSGIRequest$ 0 0 0 0 0 0 0 $django.core.handlers.wsgi.WSGIRequest$ 0 0 0 0 0 0 0
from typing import Dict , List , Tuple , Union , Any [EOL] import django [EOL] import typing [EOL] import builtins [EOL] import calendar [EOL] from collections import Counter [EOL] [EOL] from django . conf import settings [EOL] from django . contrib . auth . forms import AuthenticationForm [EOL] from django . utils . translation import ugettext as _ [EOL] [EOL] from core . models import Post , Tag [EOL] from core . views . view_utils import tag_cloud_context [EOL] [EOL] from django . core . handlers . wsgi import WSGIRequest [EOL] from typing import Any , Dict , List , Tuple , Union [EOL] [EOL] [EOL] def tag_cloud_context_processor ( request ) : [EOL] return { [string] : tag_cloud_context ( Tag . objects . all ( ) ) } [EOL] [EOL] def sidebar_login_form_context_processor ( request ) : [EOL] return { [string] : AuthenticationForm ( ) } [EOL] [EOL] def monthly_archives_context_processor ( request ) : [EOL] month_counts = Counter ( [ ( p . year , p . month ) for p in Post . objects . all ( ) ] ) [EOL] month_counts = sorted ( month_counts . items ( ) , key = lambda k : ( int ( k [ [number] ] [ [number] ] ) , int ( k [ [number] ] [ [number] ] ) ) ) [EOL] month_display_texts = [ ( month , [string] . format ( month = _ ( calendar . month_name [ int ( month [ [number] ] ) ] ) , year = month [ [number] ] , count = count ) ) for month , count in month_counts ] [EOL] return { [string] : month_display_texts } [EOL] [EOL] def contextual_static_serving_context_processor ( request ) : [EOL] if settings . SERVE_STATIC_LIBS_LOCALLY : [EOL] jquery_url = [string] [EOL] underscore_url = [string] [EOL] bootstrap_url = [string] [EOL] else : [EOL] jquery_url = [string] [EOL] underscore_url = ( [string] [string] ) [EOL] bootstrap_url = ( [string] [string] ) [EOL] return locals ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[django.core.handlers.wsgi.WSGIRequest,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import core [EOL] from django . contrib . syndication . views import Feed [EOL] from django . shortcuts import get_object_or_404 [EOL] [EOL] from core . models import FinetoothUser , Post , Comment , Tag [EOL] [EOL] class LatestAbstractContentFeed ( Feed ) : [EOL] [EOL] def items ( self ) : [EOL] return Post . objects . order_by ( [string] ) [ : [number] ] [EOL] [EOL] def item_title ( self , content ) : [EOL] return content . title [EOL] [EOL] def item_description ( self , content ) : [EOL] return content . content [ : [number] ] + [string] [EOL] [EOL] def item_pubdate ( self , content ) : [EOL] return content . published_at [EOL] [EOL] [EOL] class LatestPostsFeed ( LatestAbstractContentFeed ) : [EOL] title = [string] [EOL] link = [string] [EOL] description = [string] [EOL] [EOL] [EOL] class AbstractUserContentFeed ( LatestAbstractContentFeed ) : [EOL] def get_object ( self , request , username ) : [EOL] return get_object_or_404 ( FinetoothUser , username = username ) [EOL] [EOL] def title ( self , user ) : [EOL] return [string] . format ( self . model . __name__ . title ( ) , user . username ) [EOL] [EOL] def link ( self , user ) : [EOL] return [string] . format ( user . username , self . model . __name__ . lower ( ) ) [EOL] [EOL] def description ( self , user ) : [EOL] return [string] . format ( self . model . __name__ . lower ( ) , user . username ) [EOL] [EOL] def items ( self , user ) : [EOL] return self . model . objects . filter ( ** { [string] . format ( self . model_creator_job_title ) : user . username } ) . order_by ( [string] ) [ : [number] ] [EOL] [EOL] [EOL] class AuthorFeed ( AbstractUserContentFeed ) : [EOL] model = Post [EOL] model_creator_job_title = [string] [EOL] [EOL] class CommenterFeed ( AbstractUserContentFeed ) : [EOL] model = Comment [EOL] model_creator_job_title = [string] [EOL] [EOL] [EOL] class TagFeed ( LatestAbstractContentFeed ) : [EOL] def get_object ( self , request , label ) : [EOL] return get_object_or_404 ( Tag , label = label ) [EOL] [EOL] def title ( self , tag ) : [EOL] return [string] . format ( tag . label ) [EOL] [EOL] def link ( self , tag ) : [EOL] return [string] . format ( tag . label ) [EOL] [EOL] def description ( self , tag ) : [EOL] return [string] . format ( tag . label ) [EOL] [EOL] def items ( self , tag ) : [EOL] return tag . posts . order_by ( [string] ) [ : [number] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[core.models.Post]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[core.models.Comment]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Tuple , Any , Optional [EOL] import typing [EOL] import django [EOL] import logging [EOL] import builtins [EOL] import itertools [EOL] import logging [EOL] from html . parser import HTMLParser [EOL] [EOL] from markdown import markdown as markdown_to_html [EOL] [EOL] from django . db . models import Q [EOL] [EOL] from django . utils . functional import SimpleLazyObject [EOL] from typing import List , Optional , Tuple , Union , Any [EOL] [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] class Tagnostic ( HTMLParser ) : [EOL] def __init__ ( self , content ) : [EOL] super ( ) . __init__ ( convert_charrefs = False ) [EOL] self . content = [ ] [EOL] self . feed ( markdown_to_html ( content , lazy_ol = False ) ) [EOL] [EOL] def handle_starttag ( self , tag , attrs ) : [EOL] self . content . append ( ( tag , dict ( attrs ) ) ) [EOL] [EOL] def handle_endtag ( self , tag ) : [EOL] self . content . append ( ( [string] + tag , ) ) [EOL] [EOL] def handle_data ( self , data ) : [EOL] self . content . append ( data ) [EOL] [EOL] def plaintext ( self ) : [EOL] return [string] . join ( token for token in self . content if isinstance ( token , str ) ) [EOL] [EOL] [EOL] class VotingException ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class VotableMixin : [EOL] [EOL] @ property def score ( self ) : [EOL] return sum ( v . value for v in self . vote_set . all ( ) ) [EOL] [EOL] @ property def plaintext ( self ) : [EOL] return Tagnostic ( self . content ) . plaintext ( ) [EOL] [EOL] def scored_plaintext ( self , for_voter = None ) : [EOL] plaintext = Tagnostic ( self . content ) . plaintext ( ) [EOL] score_increments = [ [number] ] * ( len ( plaintext ) + [number] ) [EOL] mark_increments = [ [number] ] * ( len ( plaintext ) + [number] ) [EOL] for vote in self . vote_set . all ( ) : [EOL] score_increments [ vote . start_index ] += vote . value [EOL] score_increments [ vote . end_index ] -= vote . value [EOL] if for_voter and vote . voter == for_voter : [EOL] mark_increments [ vote . start_index ] += vote . value [EOL] mark_increments [ vote . end_index ] -= vote . value [EOL] return tuple ( zip ( plaintext , itertools . accumulate ( score_increments ) , itertools . accumulate ( mark_increments ) ) ) [EOL] [EOL] @ staticmethod def _render_scored_substring ( scored_characters ) : [EOL] join_to_render_partial = [ ] [EOL] value_at_index = None [EOL] mark_at_index = None [EOL] open_span = False [EOL] for character , value , mark in scored_characters : [EOL] if value == value_at_index and mark == mark_at_index : [EOL] join_to_render_partial . append ( character ) [EOL] else : [EOL] if open_span : [EOL] join_to_render_partial . append ( [string] ) [EOL] open_span = False [EOL] join_to_render_partial . append ( [string] . format ( value , mark ) ) [EOL] open_span = True [EOL] value_at_index = value [EOL] mark_at_index = mark [EOL] join_to_render_partial . append ( character ) [EOL] if open_span : [EOL] join_to_render_partial . append ( [string] ) [EOL] return [string] . join ( join_to_render_partial ) [EOL] [EOL] def render ( self ) : [EOL] for_voter = getattr ( self , [string] , None ) [EOL] parsed_content = Tagnostic ( self . content ) . content [EOL] [comment] [EOL] scored_plaintext_stack = list ( reversed ( self . scored_plaintext ( for_voter ) ) ) [EOL] join_to_render = [ ] [EOL] for token in parsed_content : [EOL] if isinstance ( token , str ) : [comment] [EOL] scored_characters = [ scored_plaintext_stack . pop ( ) for _ in range ( len ( token ) ) ] [EOL] join_to_render . append ( self . _render_scored_substring ( scored_characters ) ) [EOL] elif isinstance ( token , tuple ) and len ( token ) == [number] : [comment] [EOL] tag_type , attributes = token [EOL] join_to_render . append ( [string] . format ( tag_type , [string] if attributes else [string] , [string] . join ( [string] . format ( k , v ) for k , v in attributes . items ( ) ) ) ) [EOL] elif isinstance ( token , tuple ) and len ( token ) == [number] : [comment] [EOL] join_to_render . append ( [string] . format ( token [ [number] ] ) ) [EOL] return [string] . join ( join_to_render ) [EOL] [EOL] def low_score ( self ) : [EOL] return min ( v for c , v , _m in self . scored_plaintext ( ) ) [EOL] [EOL] def high_score ( self ) : [EOL] return max ( v for c , v , _m in self . scored_plaintext ( ) ) [EOL] [EOL] def vote_in_range_for_user ( self , voter , ballot_start_index , ballot_end_index ) : [EOL] return self . vote_set . filter ( end_index__gt = ballot_start_index , start_index__lt = ballot_end_index , voter = voter ) . first ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Tuple , Any [EOL] import core [EOL] import typing [EOL] import builtins [EOL] from django import forms [EOL] [EOL] import bleach [EOL] [EOL] from core . models import FinetoothUser [EOL] [EOL] class CommentForm ( forms . Form ) : [EOL] content = forms . CharField ( label = [string] , widget = forms . Textarea ( attrs = { [string] : [number] } ) ) [EOL] [EOL] def clean_content ( self ) : [EOL] return bleach . clean ( self . cleaned_data . get ( [string] ) ) [EOL] [EOL] [EOL] class SignupForm ( forms . ModelForm ) : [EOL] class Meta : [EOL] model = FinetoothUser [EOL] fields = ( [string] , [string] ) [EOL] [EOL] password = forms . CharField ( widget = forms . PasswordInput ) [EOL] confirm_password = forms . CharField ( widget = forms . PasswordInput ) [EOL] [EOL] def clean_confirm_password ( self ) : [EOL] password = self . cleaned_data . get ( [string] ) [EOL] confirm_password = self . cleaned_data . get ( [string] ) [EOL] if password != confirm_password : [EOL] raise forms . ValidationError ( [string] ) [EOL] return password [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[core.forms.CommentForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[core.models.FinetoothUser]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Type[core.forms.SignupForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[core.forms.SignupForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class FinetoothConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL] [EOL] def ready ( self ) : [EOL] import core . signals [EOL] [EOL] default_app_config = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Dict , Union , List , KeysView [EOL] import typing [EOL] import builtins [EOL] import itertools [EOL] from typing import Dict , List , Union [EOL] [EOL] [EOL] def diffract ( hex_encoding ) : [EOL] return [ int ( band , [number] ) for band in ( hex_encoding [ i : i + [number] ] for i in ( [number] , [number] , [number] ) ) ] [EOL] [EOL] def undiffract ( rgb ) : [EOL] return [string] . join ( hex ( int ( band ) ) [ [number] : ] . zfill ( [number] ) for band in rgb ) [EOL] [EOL] def interpolate ( rgb1 , rgb2 , weighting ) : [EOL] return list ( map ( lambda c1 , c2 : c1 + weighting * ( c2 - c1 ) , rgb1 , rgb2 ) ) [EOL] [EOL] def interpolate_stop ( color_stops , x ) : [EOL] stops = sorted ( color_stops . keys ( ) ) [EOL] closest_above = min ( stop for stop in stops if ( stop - x ) > [number] ) [EOL] closest_below = max ( stop for stop in stops if ( stop - x ) < [number] ) [EOL] diffracted_above , diffracted_below = [ diffract ( color_stops [ s ] ) for s in ( closest_above , closest_below ) ] [EOL] weighting = ( x - closest_below ) / ( closest_above - closest_below ) [EOL] return undiffract ( interpolate ( diffracted_below , diffracted_above , weighting ) ) [EOL] [EOL] def populate_stops ( color_stops ) : [EOL] full_stops = color_stops . copy ( ) [EOL] stops = color_stops . keys ( ) [EOL] heroism = max ( stops ) [EOL] villainy = min ( stops ) [EOL] for moral_quality in range ( villainy , heroism + [number] ) : [EOL] if moral_quality not in color_stops : [EOL] full_stops [ moral_quality ] = interpolate_stop ( color_stops , moral_quality ) [EOL] return full_stops [EOL] [EOL] [EOL] def style_block ( data_attribute , style_property , state , color ) : [EOL] return [string] . join ( [ [string] . format ( data_attribute , state ) , [string] . format ( style_property , color ) , [string] ] ) [EOL] [EOL] def value_style_block ( value , color ) : [EOL] return style_block ( [string] , [string] , value , color ) [EOL] [EOL] def mark_style_block ( mark , color ) : [EOL] return style_block ( [string] , [string] , mark , color ) [EOL] [EOL] [EOL] def stylesheet ( low_score , low_color , high_score , high_color ) : [EOL] stops = { [number] : [string] } [EOL] if low_score < [number] : [EOL] stops . update ( { low_score : low_color } ) [EOL] if high_score > [number] : [EOL] stops . update ( { high_score : high_color } ) [EOL] colors = populate_stops ( stops ) [EOL] return [string] . join ( itertools . chain ( ( value_style_block ( value , color ) for value , color in colors . items ( ) ) , ( mark_style_block ( mark , color ) for mark , color in ( ( - [number] , [string] ) , ( [number] , [string] ) ) ) ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import logging [EOL] import logging [EOL] [EOL] from django . contrib . auth . signals import user_login_failed [EOL] from django . dispatch import receiver [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] @ receiver ( user_login_failed ) def log_failed_login ( sender , ** kwargs ) : [EOL] logger . info ( [string] . format ( kwargs [ [string] ] [ [string] ] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] from core . colorize import ( diffract , undiffract , interpolate , interpolate_stop , populate_stops ) [EOL] [EOL] class ColorTestCase ( TestCase ) : [EOL] [EOL] def concerning_diffraction ( self ) : [EOL] self . assertEqual ( [ [number] , [number] , [number] ] , diffract ( [string] ) ) [EOL] [EOL] def concerning_undiffraction ( self ) : [EOL] self . assertEqual ( [string] , undiffract ( [ [number] , [number] , [number] ] ) ) [EOL] [EOL] def concerning_interpolation ( self ) : [EOL] self . assertEqual ( [ [number] , [number] , [number] ] , interpolate ( [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [number] ) ) [EOL] [EOL] def concerning_stop_interpolation ( self ) : [EOL] self . assertEqual ( [string] , interpolate_stop ( { [number] : [string] , [number] : [string] } , [number] ) ) [EOL] [EOL] class StyleTestCase ( TestCase ) : [EOL] [EOL] def concerning_stop_population ( self ) : [EOL] self . assertEqual ( { - [number] : [string] , - [number] : [string] , - [number] : [string] , - [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] } , populate_stops ( { - [number] : [string] , [number] : [string] } ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Literal , Tuple [EOL] import typing [EOL] import typing_extensions [EOL] from datetime import datetime [EOL] [EOL] from django . test import TestCase [EOL] [EOL] from core . models import Post [EOL] from core . votable import Tagnostic [EOL] [EOL] from core . tests . factories import ( FinetoothUserFactory , PostFactory , PostVoteFactory ) [EOL] [EOL] class TagnosticismTestCase ( TestCase ) : [EOL] [EOL] @ classmethod def setUpTestData ( self ) : [EOL] content = [string] [EOL] self . tag_skeptic = Tagnostic ( content ) [EOL] [EOL] def concerning_feeding ( self ) : [EOL] self . assertEqual ( self . tag_skeptic . content , [ ( [string] , { } ) , ( [string] , { } ) , [string] , ( [string] , ) , [string] , ( [string] , { [string] : [string] } ) , [string] , ( [string] , ) , [string] , ( [string] , ) ] ) [EOL] [EOL] def concerning_plaintext ( self ) : [EOL] self . assertEqual ( self . tag_skeptic . plaintext ( ) , [string] ) [EOL] [EOL] class ScoringTestCase ( TestCase ) : [EOL] [EOL] @ classmethod def setUpTestData ( self ) : [EOL] self . the_post = Post . objects . create ( author_id = [number] , content = [string] , title = [string] , published_at = datetime . now ( ) ) [EOL] for i in range ( [number] ) : [EOL] self . the_post . vote_set . create ( voter_id = [number] , value = [number] , start_index = i , end_index = [number] ) [EOL] [EOL] def concerning_scored_plaintext ( self ) : [EOL] self . assertEqual ( self . the_post . scored_plaintext ( ) , ( ( [string] , [number] , [number] ) , ( [string] , [number] , [number] ) , ( [string] , [number] , [number] ) , ( [string] , [number] , [number] ) , ( [string] , [number] , [number] ) , ( [string] , [number] , [number] ) , ( [string] , [number] , [number] ) , ( [string] , [number] , [number] ) , ( [string] , [number] , [number] ) , ( [string] , [number] , [number] ) ) ) [EOL] [EOL] class RenderingTestCase ( TestCase ) : [EOL] [EOL] @ classmethod def setUpTestData ( self ) : [EOL] self . the_post = PostFactory . create ( content = ( [string] [string] ) ) [EOL] upvote_indices = ( ( [number] , [number] ) , ( [number] , [number] ) ) [EOL] for indices in upvote_indices : [EOL] PostVoteFactory . create ( post = self . the_post , start_index = indices [ [number] ] , end_index = indices [ [number] ] ) [EOL] [EOL] def concerning_rendering ( self ) : [EOL] self . assertHTMLEqual ( self . the_post . render ( ) , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[typing_extensions.Literal,typing_extensions.Literal],typing.Tuple[typing_extensions.Literal,typing_extensions.Literal]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , List , Tuple , Any [EOL] import typing [EOL] from datetime import datetime , timedelta [EOL] [EOL] from django . test import TestCase [EOL] from django . urls import reverse [EOL] from django . utils . text import slugify [EOL] [EOL] from core . models import FinetoothUser , Post [EOL] from core . tests import factories as f [EOL] from core . tests . factories import romanize [EOL] [EOL] class SignupTestCase ( TestCase ) : [EOL] [EOL] def concerning_signup ( self ) : [EOL] response = self . client . post ( reverse ( [string] ) , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } ) [EOL] self . assertRedirects ( response , [string] ) [EOL] user_queryset = FinetoothUser . objects . filter ( username = [string] ) [EOL] self . assertTrue ( user_queryset . exists ( ) ) [EOL] self . assertTrue ( user_queryset [ [number] ] . check_password ( [string] ) ) [EOL] [EOL] def concerning_the_inability_to_claim_extant_usernames ( self ) : [EOL] f . FinetoothUserFactory . create ( username = [string] ) [EOL] response = self . client . post ( reverse ( [string] ) , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } , follow = True ) [EOL] self . assertIn ( [string] , response . content ) [EOL] [EOL] def concerning_confirm_passwords_needing_to_match ( self ) : [EOL] prior_user_count = FinetoothUser . objects . count ( ) [EOL] response = self . client . post ( reverse ( [string] ) , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } , follow = True ) [EOL] post_user_count = FinetoothUser . objects . count ( ) [EOL] self . assertEqual ( prior_user_count , post_user_count ) [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] [EOL] def concerning_required_fields ( self ) : [EOL] prior_user_count = FinetoothUser . objects . count ( ) [EOL] response = self . client . post ( reverse ( [string] ) , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } , follow = True ) [EOL] post_user_count = FinetoothUser . objects . count ( ) [EOL] self . assertEqual ( prior_user_count , post_user_count ) [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] [EOL] [EOL] class TaggingTestCase ( TestCase ) : [EOL] [EOL] @ classmethod def setUpTestData ( cls ) : [EOL] cls . the_user = f . FinetoothUserFactory . create ( ) [EOL] cls . other_user = f . FinetoothUserFactory . create ( ) [EOL] cls . the_post = f . PostFactory . create ( author = cls . the_user ) [EOL] cls . other_post = f . PostFactory . create ( ) [EOL] cls . extant_tag = f . TagFactory . create ( ) [EOL] cls . the_post . tag_set . add ( cls . extant_tag ) [EOL] [EOL] def setUp ( self ) : [EOL] self . client . login ( username = self . the_user . username , password = f . FACTORY_USER_PASSWORD ) [EOL] [EOL] def concerning_users_tagging_their_own_posts ( self ) : [EOL] self . client . post ( reverse ( [string] , args = ( self . the_post . pk , ) ) , { [string] : [string] } ) [EOL] tags = self . the_post . tag_set [EOL] self . assertTrue ( [string] , tags . filter ( label = [string] ) . exists ( ) ) [EOL] [EOL] def concerning_users_inability_to_tag_posts_of_others ( self ) : [EOL] response = self . client . post ( reverse ( [string] , args = ( self . other_post . pk , ) ) , { [string] : [string] } ) [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] tags = self . other_post . tag_set [EOL] self . assertEqual ( [number] , tags . count ( ) ) [EOL] [EOL] def concerning_prohibition_of_double_tagging ( self ) : [EOL] tags_before = self . the_post . tag_set . all ( ) [EOL] response = self . client . post ( reverse ( [string] , args = ( self . the_post . pk , ) ) , { [string] : self . extant_tag . label } ) [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] self . assertQuerysetEqual ( self . the_post . tag_set . all ( ) , [ repr ( t ) for t in tags_before ] ) [EOL] [EOL] class CommentingTestCase ( TestCase ) : [EOL] [EOL] @ classmethod def setUpTestData ( cls ) : [EOL] cls . the_user = f . FinetoothUserFactory . create ( ) [EOL] cls . the_post = f . PostFactory . create ( ) [EOL] [EOL] def concerning_comment_submission ( self ) : [EOL] self . client . login ( username = self . the_user . username , password = f . FACTORY_USER_PASSWORD ) [EOL] response = self . client . post ( reverse ( [string] , args = ( self . the_post . pk , ) ) , { [string] : [string] } ) [EOL] comment = self . the_post . comment_set . filter ( commenter = self . the_user ) [ [number] ] [EOL] fragment_identifier = [string] . format ( comment . pk ) [EOL] self . assertRedirects ( response , reverse ( [string] , args = ( self . the_post . year , self . the_post . month , self . the_post . slug ) ) + fragment_identifier ) [EOL] [EOL] def concerning_html_injection ( self ) : [EOL] self . client . login ( username = self . the_user . username , password = f . FACTORY_USER_PASSWORD ) [EOL] response = self . client . post ( reverse ( [string] , args = ( self . the_post . pk , ) ) , { [string] : [string] } ) [EOL] comment = self . the_post . comment_set . filter ( commenter = self . the_user ) [ [number] ] [EOL] self . assertNotIn ( [string] , comment . content ) [EOL] [EOL] def concerning_blank_comment_submissions ( self ) : [EOL] self . client . login ( username = self . the_user . username , password = f . FACTORY_USER_PASSWORD ) [EOL] response = self . client . post ( reverse ( [string] , args = ( self . the_post . pk , ) ) , { [string] : [string] } ) [EOL] self . assertNotEqual ( [number] , response . status_code ) [EOL] [EOL] [EOL] class BallotBoxTestCase ( TestCase ) : [EOL] [EOL] @ classmethod def setUpTestData ( cls ) : [EOL] cls . the_user = f . FinetoothUserFactory . create ( ) [EOL] cls . the_post = f . PostFactory . create ( content = [string] ) [EOL] [EOL] def concerning_suffrage ( self ) : [EOL] self . client . login ( username = self . the_user . username , password = f . FACTORY_USER_PASSWORD ) [EOL] for start_index , end_index in ( ( [number] , [number] ) , ( [number] , [number] ) , ( [number] , [number] ) ) : [EOL] response = self . client . post ( reverse ( [string] , args = ( [string] , self . the_post . pk ) ) , { [string] : start_index , [string] : end_index , [string] : [number] } ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] [EOL] [EOL] def concerning_suffrage_of_undocumented_immigrants ( self ) : [EOL] response = self . client . post ( reverse ( [string] , args = ( [string] , self . the_post . pk ) ) , { [string] : [number] , [string] : [number] , [string] : [number] } ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] [EOL] def concerning_hanging_chads ( self ) : [EOL] self . client . login ( username = self . the_user . username , password = f . FACTORY_USER_PASSWORD ) [EOL] response = self . client . post ( reverse ( [string] , args = ( [string] , self . the_post . pk ) ) , { [string] : [number] , [string] : [number] , [string] : [number] } ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] [EOL] def concerning_the_principle_of_one_user_one_vote ( self ) : [EOL] self . client . login ( username = self . the_user . username , password = f . FACTORY_USER_PASSWORD ) [EOL] response = self . client . post ( reverse ( [string] , args = ( [string] , self . the_post . pk ) ) , { [string] : [number] , [string] : [number] , [string] : [number] } ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] response = self . client . post ( reverse ( [string] , args = ( [string] , self . the_post . pk ) ) , { [string] : [number] , [string] : [number] , [string] : [number] } ) [EOL] self . assertContains ( response , [string] , status_code = [number] ) [EOL] [EOL] class ProfileTestCase ( TestCase ) : [EOL] [EOL] @ classmethod def setUpTestData ( cls ) : [EOL] FinetoothUser . objects . create_user ( username = [string] , password = [string] ) [EOL] FinetoothUser . objects . create_user ( username = [string] , password = [string] ) [EOL] [EOL] def concerning_nonexistent_users ( self ) : [EOL] response = self . client . get ( reverse ( [string] , args = ( [string] , ) ) , follow = True ) [EOL] self . assertContains ( response , [string] ) [EOL] [EOL] def concerning_profile_editing ( self ) : [EOL] self . client . login ( username = [string] , password = [string] ) [EOL] response = self . client . post ( reverse ( [string] , args = ( [string] , ) ) , { [string] : [string] , [string] : [string] } ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] the_user_transformed = FinetoothUser . objects . get ( username = [string] ) [EOL] self . assertEqual ( [string] , the_user_transformed . url ) [EOL] self . assertEqual ( [string] , the_user_transformed . location ) [EOL] [EOL] def concerning_editing_the_profiles_of_others ( self ) : [EOL] self . client . login ( username = [string] , password = [string] ) [EOL] response = self . client . post ( reverse ( [string] , args = ( [string] , ) ) , { [string] : [string] , [string] : [string] } ) [EOL] self . assertEqual ( [number] , response . status_code ) [EOL] [EOL] [EOL] class PostTestCase ( TestCase ) : [EOL] [EOL] @ classmethod def setUpTestData ( cls ) : [EOL] FinetoothUser . objects . create_user ( username = [string] , password = [string] ) [EOL] [EOL] def setUp ( self ) : [EOL] self . client . login ( username = [string] , password = [string] ) [EOL] [EOL] def concerning_new_posts ( self ) : [EOL] new_post_title = [string] [EOL] response = self . client . post ( reverse ( [string] ) , { [string] : [string] , [string] : new_post_title , [string] : slugify ( new_post_title ) } ) [EOL] matching_posts = Post . objects . filter ( content = [string] , title = new_post_title , slug = slugify ( new_post_title ) ) [EOL] self . assertEqual ( len ( matching_posts ) , [number] ) [EOL] [EOL] [EOL] class PaginationTestCase ( TestCase ) : [EOL] [EOL] @ classmethod def setUpTestData ( cls ) : [EOL] for i in range ( [number] , [number] ) : [EOL] f . PostFactory . create ( title = [string] . format ( romanize ( i ) ) , published_at = datetime . now ( ) - timedelta ( [number] - i ) ) [EOL] [EOL] def concerning_pagination ( self ) : [EOL] with self . settings ( POSTS_PER_PAGE = [number] ) : [EOL] pages = [ self . client . get ( reverse ( [string] , args = ( i , ) ) ) for i in range ( [number] , [number] ) ] [EOL] installment_groups = [ ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) , ( [string] , ) ] [EOL] for page_index , installment_group in enumerate ( installment_groups ) : [EOL] for part_no in installment_group : [EOL] with self . subTest ( page_no = page_index + [number] ) : [EOL] self . assertContains ( pages [ page_index ] , [string] . format ( part_no ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Union[typing.Tuple[builtins.str],typing.Tuple[builtins.str,builtins.str,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Union[typing.Tuple[builtins.str],typing.Tuple[builtins.str,builtins.str,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0
from core . tests . view_tests import * [EOL] from core . tests . votable_tests import * [EOL] from core . tests . color_tests import * [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Dict [EOL] import typing [EOL] import os [EOL] from urllib . request import urlretrieve [EOL] [EOL] from django . core . management . base import BaseCommand , CommandError [EOL] [EOL] our_statics = { [string] : [string] , [string] : ( [string] [string] ) , os . path . join ( [string] , [string] ) : ( [string] [string] ) , os . path . join ( [string] , [string] ) : ( [string] [string] ) , os . path . join ( [string] , [string] ) : ( [string] [string] ) , [string] : [string] } [EOL] [EOL] class Command ( BaseCommand ) : [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] for static , upstream in our_statics . items ( ) : [EOL] destination = os . path . join ( [string] , [string] , static ) [EOL] if not os . path . exists ( destination ) : [EOL] self . stdout . write ( [string] . format ( destination , upstream ) ) [EOL] urlretrieve ( upstream , destination ) [EOL] else : [EOL] self . stdout . write ( [string] . format ( static ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Type , Any , Union [EOL] import django [EOL] import typing [EOL] import core [EOL] import builtins [EOL] import json [EOL] [EOL] from django . http import ( HttpResponse , HttpResponseBadRequest , HttpResponseForbidden , JsonResponse ) [EOL] from django . views . decorators . http import require_POST [EOL] from django . contrib . auth . decorators import login_required [EOL] [EOL] from core . models import Post , Comment , Tag [EOL] from core . colorize import stylesheet [EOL] [EOL] from django . core . handlers . wsgi import WSGIRequest [EOL] from django . http . response import HttpResponse [EOL] [EOL] [EOL] def serve_stylesheet ( request , low_score , low_color , high_score , high_color ) : [EOL] return HttpResponse ( stylesheet ( int ( low_score ) , low_color , int ( high_score ) , high_color ) , content_type = [string] ) [EOL] [EOL] @ login_required @ require_POST def tag ( request , post_pk ) : [EOL] label = request . POST [ [string] ] [EOL] post = Post . objects . get ( pk = post_pk ) [EOL] if post . author != request . user : [EOL] return HttpResponseForbidden ( [string] ) [EOL] tag = Tag . objects . filter ( label = label ) . first ( ) [EOL] if tag : [EOL] if post . tag_set . filter ( pk = tag . pk ) . exists ( ) : [EOL] return HttpResponseBadRequest ( [string] . format ( label ) ) [EOL] else : [EOL] post . tag_set . add ( tag ) [EOL] return HttpResponse ( status = [number] ) [EOL] else : [EOL] post . tag_set . create ( label = label ) [EOL] return HttpResponse ( status = [number] ) [EOL] [EOL] @ require_POST def ballot_box ( request , kind , pk ) : [EOL] if not request . user . is_authenticated : [EOL] return HttpResponse ( [string] , status = [number] ) [EOL] kinds = { [string] : Post , [string] : Comment } [EOL] value = request . POST . get ( [string] ) [EOL] start_index = int ( request . POST . get ( [string] ) ) [EOL] end_index = int ( request . POST . get ( [string] ) ) [EOL] item = kinds [ kind ] . objects . get ( pk = pk ) [EOL] if start_index < [number] or end_index > len ( item . plaintext ) : [EOL] return HttpResponseBadRequest ( [string] ) [EOL] if item . vote_in_range_for_user ( request . user , start_index , end_index ) : [EOL] return HttpResponseForbidden ( [string] ) [EOL] else : [EOL] item . vote_set . create ( voter = request . user , value = value , start_index = start_index , end_index = end_index ) [EOL] return HttpResponse ( status = [number] ) [EOL] [EOL] def check_slug ( request ) : [EOL] slug = request . GET . get ( [string] ) [EOL] if slug is None : [EOL] return HttpResponseBadRequest ( ) [EOL] already_exists = Post . objects . filter ( slug = slug ) . exists ( ) [EOL] return JsonResponse ( { [string] : already_exists } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.http.response.HttpResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.http.response.HttpResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from core . views . views import * [EOL] from core . views . service import * [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , List , Callable , Union , Any [EOL] import django [EOL] import typing [EOL] import core [EOL] import builtins [EOL] import operator [EOL] import re [EOL] from functools import partial , wraps [EOL] from urllib . parse import urlencode [EOL] [EOL] from django . db . models import Count [EOL] from django . http import HttpResponseRedirect [EOL] from django . contrib import messages [EOL] from django . core . paginator import Paginator [EOL] from django . conf import settings [EOL] from django . db . models . query import QuerySet [EOL] [EOL] from core . models import Post [EOL] [EOL] from typing import Any , Callable , Dict , List , Union [EOL] [EOL] [EOL] def score_bound_context_supplement ( scorables ) : [EOL] if scorables : [EOL] low_score = min ( s . low_score ( ) for s in scorables ) [EOL] high_score = max ( s . high_score ( ) for s in scorables ) [EOL] else : [EOL] low_score , high_score = [number] , [number] [EOL] return { [string] : low_score - [number] , [string] : high_score + [number] , [string] : [string] , [string] : [string] } [EOL] [EOL] def scored_view ( scorable_key ) : [EOL] def derived_decorator ( view ) : [EOL] @ wraps ( view ) def derived_view ( * args , ** kwargs ) : [EOL] response = view ( * args , ** kwargs ) [EOL] response . context_data . update ( score_bound_context_supplement ( response . context_data [ scorable_key ] ) ) [EOL] return response [EOL] return derived_view [EOL] return derived_decorator [EOL] [EOL] [EOL] def paginated_view ( pageable_name ) : [EOL] def derived_decorator ( view ) : [EOL] @ wraps ( view ) def derived_view ( * args , ** kwargs ) : [EOL] request , * _groups = args [EOL] page_number = kwargs [ [string] ] [EOL] response = view ( * args , ** kwargs ) [EOL] page_number = int ( page_number ) if page_number else [number] [EOL] requested = request . GET . get ( [string] ) [EOL] pageables_per_page = ( int ( requested ) [EOL] if ( requested and requested . isdigit ( ) ) [EOL] else settings . POSTS_PER_PAGE ) [EOL] pageables = response . context_data [ pageable_name ] [EOL] paginator = Paginator ( pageables , pageables_per_page ) [EOL] if page_number > paginator . num_pages : [EOL] true_destination = re . sub ( [string] , [string] . join ( [ [string] . format ( paginator . num_pages ) , [string] , urlencode ( request . GET ) ] ) , request . path ) [EOL] messages . warning ( request , ( [string] [string] ) ) [EOL] return HttpResponseRedirect ( true_destination ) [EOL] paged = paginator . page ( page_number ) [EOL] response . context_data . update ( { pageable_name : paged , [string] : ( page_number - [number] [EOL] if paged . has_previous ( ) [EOL] else None ) , [string] : ( page_number + [number] [EOL] if paged . has_next ( ) [EOL] else None ) , [string] : requested } ) [EOL] return response [EOL] return derived_view [EOL] return derived_decorator [EOL] [EOL] [EOL] def thread_sorting_view ( view ) : [EOL] @ wraps ( view ) def derived_view ( * args , ** kwargs ) : [EOL] response = view ( * args , ** kwargs ) [EOL] request , * rest = args [EOL] criterion_key = request . GET . get ( [string] ) [EOL] if criterion_key == [string] : [EOL] criterion = { [string] : operator . attrgetter ( [string] ) } [EOL] elif criterion_key == [string] : [EOL] criterion = { [string] : operator . attrgetter ( [string] ) , [string] : True } [EOL] elif criterion_key == [string] : [EOL] criterion = { [string] : operator . attrgetter ( [string] ) , [string] : True } [EOL] elif criterion_key == [string] : [EOL] criterion = { [string] : operator . attrgetter ( [string] ) } [EOL] else : [EOL] return response [EOL] response . context_data [ [string] ] = partial ( sorted , ** criterion ) ( response . context_data [ [string] ] ) [EOL] return response [EOL] [EOL] return derived_view [EOL] [EOL] [EOL] def tag_cloud_context ( tags ) : [EOL] if not tags . exists ( ) : [EOL] return { } [EOL] min_size = [number] [EOL] max_size = [number] [EOL] tags = tags . annotate ( Count ( [string] ) ) . order_by ( [string] ) [EOL] min_count = tags [ [number] ] . posts__count [EOL] max_count = tags [ tags . count ( ) - [number] ] . posts__count [EOL] def font_size ( count ) : [EOL] if max_count == min_count : [EOL] return ( max_size + min_size ) / [number] [EOL] else : [EOL] slope = ( max_size - min_size ) / ( max_count - min_count ) [EOL] return min_size + slope * count [EOL] return { tag : font_size ( tag . posts__count ) for tag in tags } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0