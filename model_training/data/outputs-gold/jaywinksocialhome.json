[comment] [EOL] import os [EOL] import sys [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] from django . core . management import execute_from_command_line [EOL] [EOL] execute_from_command_line ( sys . argv ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Dict , Tuple , Any , List [EOL] import typing [EOL] __version__ = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] extensions = [ [string] , [string] , [string] , ] [EOL] [EOL] [comment] [EOL] templates_path = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] source_suffix = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] master_doc = [string] [EOL] [EOL] [comment] [EOL] project = [string] [EOL] copyright = [string] [EOL] author = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] version = __version__ [EOL] [comment] [EOL] release = __version__ [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] language = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] exclude_patterns = [ [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] pygments_style = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] todo_include_todos = False [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_static_path = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] htmlhelp_basename = [string] [EOL] [EOL] [comment] [EOL] [EOL] latex_elements = { } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] latex_documents = [ ( master_doc , [string] , [string] , [string] , [string] ) , ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] man_pages = [ ( master_doc , [string] , [string] , [ author ] , [number] ) ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] texinfo_documents = [ ( master_doc , [string] , [string] , author , [string] , [string] , [string] ) , ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,typing.List[builtins.str],builtins.int]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from channels . auth import AuthMiddlewareStack [EOL] from channels . routing import ProtocolTypeRouter , URLRouter [EOL] from django . urls import path [EOL] [EOL] from socialhome . streams . consumers import StreamConsumer [EOL] [EOL] application = ProtocolTypeRouter ( { [string] : AuthMiddlewareStack ( URLRouter ( [ path ( [string] , StreamConsumer ) , ] ) ) , } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , List [EOL] import typing [EOL] from django . conf import settings [EOL] from django . conf . urls import url [EOL] from django . conf . urls . static import static [EOL] from django . contrib import admin [EOL] from django . urls import include , path [EOL] from django . views import defaults as default_views [EOL] from django . views . i18n import JavaScriptCatalog [EOL] from drf_yasg import openapi [EOL] from drf_yasg . views import get_schema_view [EOL] from rest_framework import permissions [EOL] from rest_framework . routers import DefaultRouter [EOL] from django_js_reverse . views import urls_js [EOL] [EOL] from socialhome . content . views import ContentCreateView [EOL] from socialhome . content . viewsets import ContentViewSet , TagViewSet [EOL] from socialhome . enums import PolicyDocumentType [EOL] from socialhome . viewsets import ImageUploadView [EOL] from socialhome . views import ( HomeView , MarkdownXImageUploadView , ObtainSocialhomeAuthToken , PolicyDocumentView ) [EOL] from socialhome . users . viewsets import UserViewSet , ProfileViewSet [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] router = DefaultRouter ( ) [EOL] router . register ( [string] , ContentViewSet ) [EOL] router . register ( [string] , ProfileViewSet ) [EOL] router . register ( [string] , TagViewSet ) [EOL] router . register ( [string] , UserViewSet ) [EOL] [EOL] schema_view = get_schema_view ( openapi . Info ( title = f"{ settings . SOCIALHOME_DOMAIN } [string] " , default_version = [string] , terms_of_service = f"{ settings . SOCIALHOME_URL } [string] " , contact = openapi . Contact ( email = settings . SOCIALHOME_CONTACT_EMAIL ) , license = openapi . License ( name = [string] ) , ) , public = True , permission_classes = ( permissions . AllowAny , ) , ) [EOL] [EOL] urlpatterns = [ url ( [string] , include ( [string] , namespace = [string] ) ) , url ( [string] , include ( [string] ) ) , url ( [string] , include ( [string] , namespace = [string] ) ) , url ( [string] , HomeView . as_view ( ) , name = [string] ) , url ( [string] , include ( [string] , namespace = [string] ) ) , url ( [string] , include ( [string] ) ) , url ( [string] , MarkdownXImageUploadView . as_view ( ) , name = [string] ) , url ( [string] , include ( [string] ) ) , url ( [string] , include ( [string] , namespace = [string] ) ) , url ( [string] , ContentCreateView . as_view ( ) , name = [string] ) , path ( [string] , JavaScriptCatalog . as_view ( packages = [ [string] ] ) , name = [string] ) , url ( [string] , urls_js , name = [string] ) , url ( settings . ADMIN_URL , admin . site . urls ) , url ( [string] , include ( [string] ) ) , url ( [string] , schema_view . without_ui ( cache_timeout = [number] ) , name = [string] ) , url ( [string] , schema_view . with_ui ( [string] , cache_timeout = [number] ) , name = [string] ) , url ( [string] , schema_view . with_ui ( [string] , cache_timeout = [number] ) , name = [string] ) , url ( [string] , include ( ( router . urls , [string] ) ) ) , url ( [string] , ImageUploadView . as_view ( ) , name = [string] ) , url ( [string] , include ( [string] , namespace = [string] ) ) , url ( [string] , include ( [string] , namespace = [string] ) ) , url ( [string] , ObtainSocialhomeAuthToken . as_view ( ) , name = [string] ) , url ( [string] , include ( [string] ) ) , url ( [string] , include ( [string] , namespace = [string] ) ) , path ( [string] , PolicyDocumentView . as_view ( ) , { [string] : PolicyDocumentType . PRIVACY_POLICY } , name = [string] ) , path ( [string] , PolicyDocumentView . as_view ( ) , { [string] : PolicyDocumentType . TERMS_OF_SERVICE } , name = [string] ) , ] + static ( settings . MEDIA_URL , document_root = settings . MEDIA_ROOT ) [EOL] [EOL] if settings . SILKY_INSTALLED : [EOL] urlpatterns += [ url ( [string] , include ( [string] , namespace = [string] ) ) , ] [EOL] [EOL] if settings . DEBUG : [EOL] [comment] [EOL] [comment] [EOL] urlpatterns += [ url ( [string] , default_views . bad_request , kwargs = { [string] : Exception ( [string] ) } ) , url ( [string] , default_views . permission_denied , kwargs = { [string] : Exception ( [string] ) } ) , url ( [string] , default_views . page_not_found , kwargs = { [string] : Exception ( [string] ) } ) , url ( [string] , default_views . server_error ) , ] [EOL] if settings . DEBUG_TOOLBAR_ENABLED : [EOL] import debug_toolbar [EOL] urlpatterns += [ url ( [string] , include ( debug_toolbar . urls ) ) , ] [EOL] [EOL] if settings . SOCIALHOME_ADDITIONAL_APPS_URLS : [EOL] url_prefix , url_path = settings . SOCIALHOME_ADDITIONAL_APPS_URLS . split ( [string] ) [EOL] urlpatterns += [ url ( url_prefix , include ( url_path ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import os [EOL] [EOL] import django [EOL] from channels . routing import get_default_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] django . setup ( ) [EOL] channel_layer = get_default_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
[comment] [EOL]	0 0
from typing import Any , Union [EOL] import pytz [EOL] import datetime [EOL] import typing [EOL] import datetime [EOL] [EOL] import pytz [EOL] import redis [EOL] from django . conf import settings [EOL] from django . core . exceptions import ValidationError [EOL] from django . core . validators import URLValidator [EOL] from django . utils . timezone import make_aware [EOL] [EOL] redis_connection = None [EOL] [EOL] [EOL] def get_full_url ( path ) : [EOL] return [string] % ( settings . SOCIALHOME_URL , path ) [EOL] [EOL] [EOL] def get_full_media_url ( path ) : [EOL] return [string] . format ( url = settings . SOCIALHOME_URL , media = settings . MEDIA_URL , path = path , ) [EOL] [EOL] [EOL] def get_redis_connection ( ) : [EOL] global redis_connection [EOL] if redis_connection : [EOL] return redis_connection [EOL] redis_connection = redis . StrictRedis ( host = settings . REDIS_HOST , port = settings . REDIS_PORT , db = settings . REDIS_DB , password = settings . REDIS_PASSWORD , ) [EOL] return redis_connection [EOL] [EOL] [EOL] def is_dst ( zonename ) : [EOL] [docstring] [EOL] tz = pytz . timezone ( zonename ) [EOL] now = pytz . utc . localize ( datetime . datetime . utcnow ( ) ) [EOL] return now . astimezone ( tz ) . dst ( ) != datetime . timedelta ( [number] ) [EOL] [EOL] [EOL] def is_url ( url ) : [EOL] val = URLValidator ( ) [EOL] try : [EOL] val ( url ) [EOL] except ValidationError : [EOL] return False [EOL] return True [EOL] [EOL] [EOL] def safe_make_aware ( value , timezone = None ) : [EOL] [docstring] [EOL] if not timezone : [EOL] timezone = settings . TIME_ZONE [EOL] return make_aware ( value , is_dst = is_dst ( timezone ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 $None$ 0 0 0 $None$ 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import logging [EOL] import logging [EOL] import os [EOL] [EOL] from django . conf import settings [EOL] from django . db . models . signals import post_delete [EOL] from django . dispatch import receiver [EOL] [EOL] from socialhome . models import ImageUpload [EOL] [EOL] logger = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] @ receiver ( post_delete , sender = ImageUpload , dispatch_uid = [string] ) def delete_upload_from_disk ( instance , ** kwargs ) : [EOL] [docstring] [EOL] try : [EOL] path = os . path . join ( settings . MEDIA_ROOT , instance . image . path ) [EOL] logger . debug ( [string] , path ) [EOL] os . unlink ( path ) [EOL] except Exception : [EOL] logger . exception ( [string] , instance ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0
from typing import Type , Tuple [EOL] import typing [EOL] import socialhome [EOL] from rest_framework . generics import CreateAPIView [EOL] from rest_framework . parsers import MultiPartParser , FormParser [EOL] from rest_framework . permissions import IsAuthenticated [EOL] from rest_framework . throttling import UserRateThrottle [EOL] [EOL] from socialhome . serializers import ImageUploadSerializer [EOL] [EOL] [EOL] class ImageUploadThrottle ( UserRateThrottle ) : [EOL] scope = [string] [EOL] [EOL] [EOL] class ImageUploadView ( CreateAPIView ) : [EOL] [docstring] [EOL] serializer_class = ImageUploadSerializer [EOL] permission_classes = ( IsAuthenticated , ) [EOL] parser_classes = ( MultiPartParser , FormParser ) [EOL] throttle_classes = ( ImageUploadThrottle , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Type[socialhome.viewsets.ImageUploadThrottle]]$ 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import socialhome [EOL] import reversion [EOL] from django . db import models [EOL] from django . utils . timezone import now [EOL] from django_fsm import FSMField , transition [EOL] from enumfields import EnumField [EOL] from markdownx . models import MarkdownxField [EOL] from model_utils . models import TimeStampedModel [EOL] [EOL] from socialhome . enums import PolicyDocumentType [EOL] from socialhome . users . models import User [EOL] [EOL] [EOL] class ImageUpload ( TimeStampedModel ) : [EOL] user = models . ForeignKey ( User , on_delete = models . CASCADE , related_name = [string] ) [EOL] image = models . ImageField ( ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . image . name [EOL] [EOL] [EOL] @ reversion . register ( ignore_duplicates = True ) class PolicyDocument ( TimeStampedModel ) : [EOL] content = MarkdownxField ( ) [EOL] version = models . DateTimeField ( auto_now = True ) [EOL] published_content = MarkdownxField ( editable = False , blank = True ) [EOL] published_version = models . DateTimeField ( editable = False , null = True ) [EOL] state = FSMField ( default = [string] , choices = [ ( [string] , [string] ) , ( [string] , [string] ) , ] ) [EOL] type = EnumField ( PolicyDocumentType , unique = True , max_length = [number] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] % ( self . type , self . state , self . version ) [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] with reversion . create_revision ( ) : [EOL] super ( ) . save ( * args , ** kwargs ) [EOL] [EOL] @ transition ( field = state , source = [ [string] , [string] ] , target = [string] ) def edit_draft ( self ) : [EOL] pass [EOL] [EOL] @ transition ( field = state , source = [ [string] , [string] ] , target = [string] ) def publish ( self ) : [EOL] self . published_content = self . content [EOL] self . published_version = now ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.models.ImageUpload]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.models.ImageUpload]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.models.PolicyDocument]$ 0 0 0 0 0 $typing.Type[socialhome.models.PolicyDocument]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.models.PolicyDocument]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.models.PolicyDocument]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.models.PolicyDocument]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.models.PolicyDocument]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] from socialhome . models import PolicyDocument [EOL] [EOL] [EOL] def policy_documents ( request ) : [EOL] [docstring] [EOL] docs = PolicyDocument . objects . filter ( published_version__isnull = False ) . values ( [string] ) [EOL] policy_docs = { [string] : False , [string] : False , } [EOL] for doc in docs : [EOL] policy_docs [ doc [ [string] ] . value ] = True [EOL] return { [string] : policy_docs } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class SocialhomeConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL] [EOL] def ready ( self ) : [EOL] [comment] [EOL] import socialhome . signals [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any [EOL] import typing [EOL] import socialhome [EOL] import coreapi [EOL] import coreschema [EOL] from importlib import import_module [EOL] [EOL] from braces . views import LoginRequiredMixin [EOL] from django . conf import settings [EOL] from django . http import Http404 [EOL] from django . shortcuts import get_object_or_404 [EOL] from django . template import Template , Context [EOL] from django . utils . decorators import method_decorator [EOL] from django . views . generic import TemplateView [EOL] from federation . entities . activitypub . django . views import activitypub_object_view [EOL] from markdownx . utils import markdownify [EOL] from markdownx . views import ImageUploadView [EOL] from rest_framework . authtoken . views import ObtainAuthToken [EOL] from rest_framework . authtoken . models import Token [EOL] from rest_framework . response import Response [EOL] from rest_framework . schemas import AutoSchema [EOL] from rest_framework . views import APIView [EOL] [EOL] from socialhome . forms import MarkdownXImageForm [EOL] from socialhome . models import PolicyDocument [EOL] from socialhome . streams . views import FollowedStreamView , PublicStreamView [EOL] from socialhome . users . models import Profile [EOL] from socialhome . users . serializers import LimitedProfileSerializer [EOL] from socialhome . users . views import ProfileDetailView , ProfileAllContentView [EOL] [EOL] [EOL] @ method_decorator ( activitypub_object_view , name = [string] ) class HomeView ( TemplateView ) : [EOL] template_name = [string] [EOL] [EOL] def get ( self , request , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] if settings . SOCIALHOME_HOME_VIEW : [EOL] p , m = settings . SOCIALHOME_HOME_VIEW . rsplit ( [string] , [number] ) [EOL] return getattr ( import_module ( p ) , m ) . as_view ( ) ( request ) [EOL] [EOL] if request . user . is_authenticated : [EOL] landing_page = request . user . preferences . get ( [string] ) [EOL] if landing_page == [string] : [EOL] return ProfileDetailView . as_view ( ) ( request , uuid = request . user . profile . uuid ) [EOL] elif landing_page == [string] : [EOL] return ProfileAllContentView . as_view ( ) ( request , uuid = request . user . profile . uuid ) [EOL] elif landing_page == [string] : [EOL] return FollowedStreamView . as_view ( ) ( request ) [EOL] elif landing_page == [string] : [EOL] return PublicStreamView . as_view ( ) ( request ) [EOL] else : [EOL] [comment] [EOL] return ProfileDetailView . as_view ( ) ( request , uuid = request . user . profile . uuid ) [EOL] if settings . SOCIALHOME_ROOT_PROFILE : [EOL] profile = get_object_or_404 ( Profile , user__username = settings . SOCIALHOME_ROOT_PROFILE ) [EOL] return ProfileDetailView . as_view ( ) ( request , uuid = profile . uuid ) [EOL] return super ( HomeView , self ) . get ( request , * args , ** kwargs ) [EOL] [EOL] [EOL] class MarkdownXImageUploadView ( LoginRequiredMixin , ImageUploadView ) : [EOL] form_class = MarkdownXImageForm [EOL] raise_exception = True [EOL] [EOL] def get_form_kwargs ( self ) : [EOL] kwargs = super ( ) . get_form_kwargs ( ) [EOL] kwargs . update ( { [string] : self . request . user } ) [EOL] return kwargs [EOL] [EOL] [EOL] class ObtainSocialhomeAuthToken ( ObtainAuthToken , APIView ) : [EOL] [comment] [EOL] schema = AutoSchema ( manual_fields = [ coreapi . Field ( [string] , description = [string] , required = True , location = [string] , schema = coreschema . String ( ) ) , coreapi . Field ( [string] , description = [string] , required = True , location = [string] , schema = coreschema . String ( ) ) , ] ) [EOL] [EOL] def post ( self , request , * args , ** kwargs ) : [EOL] serializer = self . serializer_class ( data = request . data , context = { [string] : request } ) [EOL] serializer . is_valid ( raise_exception = True ) [EOL] user = serializer . validated_data [ [string] ] [EOL] token , created = Token . objects . get_or_create ( user = user ) [EOL] data = LimitedProfileSerializer ( user . profile , context = { [string] : self . request } ) . data [EOL] data . update ( { [string] : token . key } ) [EOL] return Response ( data ) [EOL] [EOL] [EOL] class PolicyDocumentView ( TemplateView ) : [EOL] template_name = [string] [EOL] [EOL] def dispatch ( self , request , document_type = None , * args , ** kwargs ) : [EOL] if not document_type : [EOL] return Http404 ( ) [EOL] self . document = get_object_or_404 ( PolicyDocument , type = document_type . value , published_version__isnull = False ) [EOL] return super ( ) . dispatch ( request , * args , ** kwargs ) [EOL] [EOL] def get_context_data ( self , ** kwargs ) : [EOL] context = super ( ) . get_context_data ( ** kwargs ) [EOL] template = Template ( self . document . published_content ) [EOL] template_context = Context ( { [string] : settings . SOCIALHOME_DOMAIN , [string] : settings . SOCIALHOME_CONTACT_EMAIL , [string] : settings . SOCIALHOME_MAINTAINER , [string] : settings . SOCIALHOME_TOS_JURISDICTION , } ) [EOL] rendered = template . render ( template_context ) [EOL] context . update ( { [string] : self . document . type . label , [string] : markdownify ( rendered ) , [string] : self . document . published_version , } ) [EOL] return context [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.forms.MarkdownXImageForm]$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.views.ObtainSocialhomeAuthToken]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.views.ObtainSocialhomeAuthToken]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.views.ObtainSocialhomeAuthToken]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0
from typing import Type , Any [EOL] import typing [EOL] import socialhome [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from dynamic_preferences . registries import global_preferences_registry [EOL] from dynamic_preferences . types import Section , BooleanPreference [EOL] [EOL] admin = Section ( [string] ) [EOL] [EOL] [EOL] @ global_preferences_registry . register class LogAllOutboundPayloads ( BooleanPreference ) : [EOL] section = admin [EOL] name = [string] [EOL] default = False [EOL] verbose_name = _ ( [string] ) [EOL] help_text = _ ( [string] [string] [string] ) [EOL] [EOL] [EOL] @ global_preferences_registry . register class LogAllReceivePayloads ( BooleanPreference ) : [EOL] section = admin [EOL] name = [string] [EOL] default = False [EOL] verbose_name = _ ( [string] ) [EOL] help_text = _ ( [string] [string] [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.preferences.LogAllOutboundPayloads]$ 0 $typing.Any$ 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $typing.Type[socialhome.preferences.LogAllOutboundPayloads]$ 0 0 0 0 0 0 $typing.Type[socialhome.preferences.LogAllOutboundPayloads]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.preferences.LogAllReceivePayloads]$ 0 $typing.Any$ 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $typing.Type[socialhome.preferences.LogAllReceivePayloads]$ 0 0 0 0 0 0 $typing.Type[socialhome.preferences.LogAllReceivePayloads]$ 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Tuple , Union [EOL] import typing [EOL] __version__ = [string] [EOL] __version_info__ = tuple ( [ int ( num ) if num . isdigit ( ) else num for num in __version__ . replace ( [string] , [string] , [number] ) . split ( [string] ) ] ) [EOL] [EOL] default_app_config = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[typing.Union[builtins.int,builtins.str],...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Any [EOL] import typing [EOL] from markdownx . forms import ImageForm [EOL] [EOL] from socialhome . models import ImageUpload [EOL] [EOL] [EOL] class MarkdownXImageForm ( ImageForm ) : [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] self . user = kwargs . pop ( [string] ) [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] def _save ( self , * args , ** kwargs ) : [EOL] url = super ( ) . _save ( * args , ** kwargs ) [EOL] ImageUpload . objects . create ( image = url . replace ( [string] , [string] ) , user = self . user ) [EOL] return url [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0
from typing import Type [EOL] import typing [EOL] import socialhome [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from enumfields import Enum [EOL] [EOL] [EOL] class PolicyDocumentType ( Enum ) : [EOL] TERMS_OF_SERVICE = [string] [EOL] PRIVACY_POLICY = [string] [EOL] [EOL] class Labels : [EOL] TERMS_OF_SERVICE = _ ( [string] ) [EOL] PRIVACY_POLICY = _ ( [string] ) [EOL] [EOL] [EOL] class Visibility ( Enum ) : [EOL] PUBLIC = [number] [EOL] LIMITED = [number] [EOL] SITE = [number] [EOL] SELF = [number] [EOL] [EOL] class Labels : [EOL] PUBLIC = _ ( [string] ) [EOL] LIMITED = _ ( [string] ) [EOL] SITE = _ ( [string] ) [EOL] SELF = _ ( [string] ) [EOL] [EOL] @ property def string_value ( self ) : [EOL] return { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] } . get ( self . value ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Type[socialhome.enums.PolicyDocumentType.Labels]$ 0 0 0 0 0 0 $typing.Type[socialhome.enums.PolicyDocumentType.Labels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.Type[socialhome.enums.Visibility.Labels]$ 0 0 0 0 0 0 $typing.Type[socialhome.enums.Visibility.Labels]$ 0 0 0 0 0 0 $typing.Type[socialhome.enums.Visibility.Labels]$ 0 0 0 0 0 0 $typing.Type[socialhome.enums.Visibility.Labels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any [EOL] import typing [EOL] import socialhome [EOL] from django . conf import settings [EOL] from rest_framework . exceptions import ValidationError [EOL] from rest_framework . fields import ImageField [EOL] from rest_framework . serializers import Serializer [EOL] [EOL] from socialhome . forms import MarkdownXImageForm [EOL] [EOL] [EOL] class ImageUploadSerializer ( Serializer ) : [EOL] image = ImageField ( ) [EOL] [EOL] def validate_image ( self , value ) : [EOL] self . form = MarkdownXImageForm ( files = { [string] : value } , user = self . context . get ( [string] ) . user ) [EOL] if self . form . is_valid ( ) : [EOL] return value [EOL] raise ValidationError ( [string] ) [EOL] [EOL] def create ( self , data ) : [EOL] image_path = self . form . save ( commit = True ) [EOL] image_url = [string] % ( settings . SOCIALHOME_URL , image_path ) [EOL] image_code = [string] . format ( image_url ) [EOL] return { [string] : image_code , [string] : image_url , } [EOL] [EOL] def to_representation ( self , instance ) : [EOL] return instance [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.serializers.ImageUploadSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import socialhome [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from enumfields import Enum [EOL] [EOL] [EOL] class StreamType ( Enum ) : [EOL] CONTENT = [string] [EOL] CUSTOM = [string] [EOL] FOLLOWED = [string] [EOL] LIMITED = [string] [EOL] LOCAL = [string] [EOL] PROFILE_ALL = [string] [EOL] PROFILE_PINNED = [string] [EOL] PUBLIC = [string] [EOL] TAG = [string] [EOL] TAGS = [string] [EOL] [EOL] class Labels : [EOL] CONTENT = _ ( [string] ) [EOL] CUSTOM = _ ( [string] ) [EOL] FOLLOWED = _ ( [string] ) [EOL] LIMITED = _ ( [string] ) [EOL] LOCAL = _ ( [string] ) [EOL] PROFILE_ALL = _ ( [string] ) [EOL] PROFILE_PINNED = _ ( [string] ) [EOL] PUBLIC = _ ( [string] ) [EOL] TAG = _ ( [string] ) [EOL] TAGS = _ ( [string] ) [EOL] [EOL] @ classmethod def to_dict ( cls ) : [EOL] return { i . name : i . value for i in cls } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Type[socialhome.streams.enums.StreamType.Labels]$ 0 0 0 0 0 0 $typing.Type[socialhome.streams.enums.StreamType.Labels]$ 0 0 0 0 0 0 $typing.Type[socialhome.streams.enums.StreamType.Labels]$ 0 0 0 0 0 0 $typing.Type[socialhome.streams.enums.StreamType.Labels]$ 0 0 0 0 0 0 $typing.Type[socialhome.streams.enums.StreamType.Labels]$ 0 0 0 0 0 0 $typing.Type[socialhome.streams.enums.StreamType.Labels]$ 0 0 0 0 0 0 $typing.Type[socialhome.streams.enums.StreamType.Labels]$ 0 0 0 0 0 0 $typing.Type[socialhome.streams.enums.StreamType.Labels]$ 0 0 0 0 0 0 $typing.Type[socialhome.streams.enums.StreamType.Labels]$ 0 0 0 0 0 0 $typing.Type[socialhome.streams.enums.StreamType.Labels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import socialhome [EOL] from rest_framework . generics import get_object_or_404 [EOL] from rest_framework . permissions import IsAuthenticated [EOL] from rest_framework . response import Response [EOL] from rest_framework . views import APIView [EOL] [EOL] from socialhome . content . models import Tag [EOL] from socialhome . content . serializers import ContentSerializer [EOL] from socialhome . streams . streams import ( PublicStream , FollowedStream , TagStream , ProfileAllStream , ProfilePinnedStream , LimitedStream , LocalStream , TagsStream ) [EOL] from socialhome . users . models import Profile [EOL] [EOL] [EOL] class StreamsAPIBaseView ( APIView ) : [EOL] def dispatch ( self , request , * args , ** kwargs ) : [EOL] self . last_id = request . GET . get ( [string] ) [EOL] self . accept_ids = request . GET . get ( [string] , None ) [EOL] if self . accept_ids : [EOL] self . accept_ids = self . accept_ids . split ( [string] ) [EOL] return super ( ) . dispatch ( request , * args , ** kwargs ) [EOL] [EOL] def get ( self , request , ** kwargs ) : [EOL] qs , throughs = self . get_content ( ) [EOL] serializer = ContentSerializer ( qs , many = True , context = { [string] : throughs , [string] : request } ) [EOL] return Response ( serializer . data ) [EOL] [EOL] def get_content ( self ) : [EOL] return [ ] , { } [EOL] [EOL] [EOL] class FollowedStreamAPIView ( StreamsAPIBaseView ) : [EOL] permission_classes = ( IsAuthenticated , ) [EOL] [EOL] def get_content ( self ) : [EOL] stream = FollowedStream ( last_id = self . last_id , user = self . request . user , accept_ids = self . accept_ids ) [EOL] return stream . get_content ( ) [EOL] [EOL] [EOL] class LimitedStreamAPIView ( StreamsAPIBaseView ) : [EOL] permission_classes = ( IsAuthenticated , ) [EOL] [EOL] def get_content ( self ) : [EOL] stream = LimitedStream ( last_id = self . last_id , user = self . request . user , accept_ids = self . accept_ids ) [EOL] return stream . get_content ( ) [EOL] [EOL] [EOL] class LocalStreamAPIView ( StreamsAPIBaseView ) : [EOL] def get_content ( self ) : [EOL] stream = LocalStream ( last_id = self . last_id , user = self . request . user , accept_ids = self . accept_ids ) [EOL] return stream . get_content ( ) [EOL] [EOL] [EOL] class ProfileAllStreamAPIView ( StreamsAPIBaseView ) : [EOL] def dispatch ( self , request , * args , ** kwargs ) : [EOL] self . profile = get_object_or_404 ( Profile , uuid = kwargs . get ( [string] ) ) [EOL] return super ( ) . dispatch ( request , * args , ** kwargs ) [EOL] [EOL] def get_content ( self ) : [EOL] stream = ProfileAllStream ( last_id = self . last_id , profile = self . profile , user = self . request . user , accept_ids = self . accept_ids , ) [EOL] return stream . get_content ( ) [EOL] [EOL] [EOL] class ProfilePinnedStreamAPIView ( StreamsAPIBaseView ) : [EOL] def dispatch ( self , request , * args , ** kwargs ) : [EOL] self . profile = get_object_or_404 ( Profile , uuid = kwargs . get ( [string] ) ) [EOL] return super ( ) . dispatch ( request , * args , ** kwargs ) [EOL] [EOL] def get_content ( self ) : [EOL] stream = ProfilePinnedStream ( last_id = self . last_id , profile = self . profile , user = self . request . user , accept_ids = self . accept_ids , ) [EOL] return stream . get_content ( ) [EOL] [EOL] [EOL] class PublicStreamAPIView ( StreamsAPIBaseView ) : [EOL] def get_content ( self ) : [EOL] stream = PublicStream ( last_id = self . last_id , accept_ids = self . accept_ids ) [EOL] return stream . get_content ( ) [EOL] [EOL] [EOL] class TagStreamAPIView ( StreamsAPIBaseView ) : [EOL] def dispatch ( self , request , * args , ** kwargs ) : [EOL] self . tag = get_object_or_404 ( Tag , name = kwargs . get ( [string] ) ) [EOL] return super ( ) . dispatch ( request , * args , ** kwargs ) [EOL] [EOL] def get_content ( self ) : [EOL] stream = TagStream ( last_id = self . last_id , tag = self . tag , user = self . request . user , accept_ids = self . accept_ids ) [EOL] return stream . get_content ( ) [EOL] [EOL] [EOL] class TagsStreamAPIView ( StreamsAPIBaseView ) : [EOL] permission_classes = ( IsAuthenticated , ) [EOL] [EOL] def get_content ( self ) : [EOL] stream = TagsStream ( last_id = self . last_id , user = self . request . user , accept_ids = self . accept_ids ) [EOL] return stream . get_content ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $socialhome.streams.streams.TagsStream$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $socialhome.streams.streams.TagsStream$ 0 0 0 0 0
from typing import Dict , Any , List [EOL] import builtins [EOL] import typing [EOL] from datetime import datetime , timedelta [EOL] [EOL] from django . conf import settings [EOL] from django . utils . timezone import now [EOL] [EOL] from socialhome . utils import get_redis_connection [EOL] [EOL] [EOL] def delete_redis_keys ( pattern , only_without_expiry = True ) : [EOL] [docstring] [EOL] r = get_redis_connection ( ) [EOL] keys = r . keys ( pattern ) [EOL] to_delete = [ ] [EOL] [EOL] for key in keys : [EOL] if only_without_expiry : [EOL] delete = r . ttl ( key ) == - [number] [EOL] else : [EOL] delete = True [EOL] if delete : [EOL] to_delete . append ( key ) [EOL] if len ( to_delete ) > [number] : [EOL] r . delete ( * to_delete ) [EOL] [EOL] if to_delete : [EOL] r . delete ( * to_delete ) [EOL] [EOL] [EOL] def get_precache_trim_size ( user_activities , key ) : [EOL] [docstring] [EOL] [comment] [EOL] from socialhome . streams . streams import BaseStream [EOL] from socialhome . users . models import User [EOL] user_id = BaseStream . get_key_user_id ( key ) [EOL] if not user_id : [EOL] [comment] [EOL] return settings . SOCIALHOME_STREAMS_PRECACHE_INACTIVE_SIZE [EOL] user_active = user_activities . get ( user_id ) [EOL] if user_active is not None : [EOL] [comment] [EOL] return ( settings . SOCIALHOME_STREAMS_PRECACHE_SIZE [EOL] if user_active else settings . SOCIALHOME_STREAMS_PRECACHE_INACTIVE_SIZE ) [EOL] [comment] [EOL] try : [EOL] user = User . objects . get ( id = user_id ) [EOL] except User . DoesNotExist : [EOL] [comment] [EOL] return [number] [EOL] check_time = user . last_login if user . last_login else user . date_joined [EOL] user_active = check_time >= now ( ) - timedelta ( days = settings . SOCIALHOME_STREAMS_PRECACHE_INACTIVE_DAYS ) [EOL] user_activities [ user_id ] = user_active [EOL] [comment] [EOL] return ( settings . SOCIALHOME_STREAMS_PRECACHE_SIZE [EOL] if user_active else settings . SOCIALHOME_STREAMS_PRECACHE_INACTIVE_SIZE ) [EOL] [EOL] [EOL] def groom_redis_precaches ( ) : [EOL] [docstring] [EOL] r = get_redis_connection ( ) [EOL] user_activities = { } [EOL] keys = r . keys ( [string] ) [EOL] for key in keys : [EOL] decoded_key = key . decode ( [string] ) [EOL] if decoded_key . endswith ( [string] ) : [EOL] [comment] [EOL] continue [EOL] trim_size = get_precache_trim_size ( user_activities , decoded_key ) [EOL] [comment] [EOL] r . zremrangebyrank ( key , [number] , - trim_size - [number] ) [EOL] [comment] [EOL] throughs_key = [string] % decoded_key [EOL] if not r . zcount ( key , [string] , [string] ) : [EOL] [comment] [EOL] r . delete ( throughs_key ) [EOL] continue [EOL] delkeys = [ ] [EOL] for content_id , _through_id in r . hgetall ( throughs_key ) . items ( ) : [EOL] if r . zrank ( key , int ( content_id ) ) is None : [EOL] delkeys . append ( int ( content_id ) ) [EOL] if delkeys : [EOL] r . hdel ( throughs_key , * delkeys ) [EOL] [EOL] [EOL] def streams_tasks ( scheduler ) : [EOL] [comment] [EOL] scheduler . schedule ( scheduled_time = datetime . utcnow ( ) , func = delete_redis_keys , args = [ [string] ] , interval = [number] * [number] * [number] , timeout = [number] * [number] * [number] , ) [EOL] [comment] [EOL] scheduler . schedule ( scheduled_time = datetime . utcnow ( ) , func = groom_redis_precaches , interval = [number] * [number] * [number] , timeout = [number] * [number] * [number] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any , Union , Set [EOL] import builtins [EOL] import typing [EOL] import socialhome [EOL] import json [EOL] from typing import Set [EOL] [EOL] from asgiref . sync import async_to_sync [EOL] from channels . generic . websocket import WebsocketConsumer [EOL] from channels . layers import get_channel_layer [EOL] [EOL] from socialhome . content . models import Content [EOL] [EOL] [EOL] def notify_listeners ( content , keys ) : [EOL] [docstring] [EOL] channel_layer = get_channel_layer ( ) [EOL] data = { [string] : [string] , [string] : { [string] : [string] , [string] : content . id } } [EOL] for key in keys : [EOL] async_to_sync ( channel_layer . group_send ) ( key , data ) [EOL] [EOL] [EOL] class StreamConsumer ( WebsocketConsumer ) : [EOL] def connect ( self ) : [EOL] async_to_sync ( self . channel_layer . group_add ) ( self . get_stream_name ( ) , self . channel_name ) [EOL] user = self . scope [ [string] ] [EOL] if user and user . is_authenticated : [EOL] async_to_sync ( user . mark_recently_active ( ) ) [EOL] super ( ) . connect ( ) [EOL] [EOL] def disconnect ( self , code ) : [EOL] async_to_sync ( self . channel_layer . group_discard ) ( self . get_stream_name ( ) , self . channel_name ) [EOL] super ( ) . disconnect ( code ) [EOL] [EOL] def get_stream_name ( self ) : [EOL] return f" [string] { self . scope [ [string] ] [ [string] ] [ [string] ] }" [EOL] [EOL] def notification ( self , event ) : [EOL] self . send ( text_data = json . dumps ( event [ [string] ] ) ) [EOL] [EOL] def receive ( self , text_data = None , bytes_data = None ) : [EOL] data = json . loads ( text_data ) [EOL] if data . get ( [string] ) == [string] : [EOL] user = self . scope [ [string] ] [EOL] if user and user . is_authenticated : [EOL] async_to_sync ( user . mark_recently_active ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
default_app_config = [string] [EOL]	$builtins.str$ 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class StreamsConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Any , List [EOL] import typing [EOL] from django . conf . urls import url [EOL] [EOL] from socialhome . streams . views import ( PublicStreamView , TagStreamView , FollowedStreamView , LimitedStreamView , LocalStreamView , TagsStreamView ) [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ url ( [string] , FollowedStreamView . as_view ( ) , name = [string] ) , url ( [string] , LimitedStreamView . as_view ( ) , name = [string] ) , url ( [string] , LocalStreamView . as_view ( ) , name = [string] ) , url ( [string] , PublicStreamView . as_view ( ) , name = [string] ) , url ( [string] , TagStreamView . as_view ( ) , name = [string] ) , url ( [string] , TagStreamView . as_view ( ) , name = [string] ) , url ( [string] , TagsStreamView . as_view ( ) , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] from django . conf . urls import url [EOL] [EOL] from socialhome . streams . viewsets import ( FollowedStreamAPIView , PublicStreamAPIView , TagStreamAPIView , ProfileAllStreamAPIView , ProfilePinnedStreamAPIView , LimitedStreamAPIView , LocalStreamAPIView , TagsStreamAPIView ) [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ url ( [string] , FollowedStreamAPIView . as_view ( ) , name = [string] ) , url ( [string] , LimitedStreamAPIView . as_view ( ) , name = [string] ) , url ( [string] , LocalStreamAPIView . as_view ( ) , name = [string] ) , url ( [string] , ProfileAllStreamAPIView . as_view ( ) , name = [string] ) , url ( [string] , ProfilePinnedStreamAPIView . as_view ( ) , name = [string] ) , url ( [string] , PublicStreamAPIView . as_view ( ) , name = [string] ) , url ( [string] , TagStreamAPIView . as_view ( ) , name = [string] ) , url ( [string] , TagsStreamAPIView . as_view ( ) , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from unittest . mock import Mock [EOL] [EOL] [EOL] class MockStream ( Mock ) : [EOL] def get_content ( self , * args , ** kwargs ) : [EOL] return [ ] , { } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from test_plus import TestCase [EOL] [EOL] from socialhome . streams . enums import StreamType [EOL] [EOL] [EOL] class TestStreamType ( TestCase ) : [EOL] def test_to_dict ( self ) : [EOL] [comment] [EOL] self . assertEqual ( StreamType . to_dict ( ) , { i . name : i . value for i in StreamType } , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type , List [EOL] import typing [EOL] import socialhome [EOL] from django . forms import ModelForm [EOL] [EOL] from socialhome . content . utils import safe_text [EOL] from socialhome . users . models import Profile , User [EOL] [EOL] [EOL] class ProfileForm ( ModelForm ) : [EOL] class Meta : [EOL] model = Profile [EOL] fields = [ [string] , [string] ] [EOL] [EOL] def clean_name ( self ) : [EOL] return safe_text ( self . cleaned_data [ [string] ] ) [EOL] [EOL] [EOL] class UserPictureForm ( ModelForm ) : [EOL] class Meta : [EOL] model = User [EOL] fields = [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.models.User]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.models.User]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class UsersConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL] [EOL] def ready ( self ) : [EOL] [comment] [EOL] import socialhome . users . signals [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Type , Any [EOL] import typing [EOL] import socialhome [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from dynamic_preferences . types import Section , ChoicePreference , BooleanPreference [EOL] from dynamic_preferences . users . registries import user_preferences_registry [EOL] [EOL] generic = Section ( [string] ) [EOL] content = Section ( [string] ) [EOL] [EOL] [EOL] @ user_preferences_registry . register class LandingPage ( ChoicePreference ) : [EOL] [docstring] [EOL] section = generic [EOL] name = [string] [EOL] choices = [ ( [string] , _ ( [string] ) ) , ( [string] , _ ( [string] ) ) , ( [string] , _ ( [string] ) ) , ( [string] , _ ( [string] ) ) , ( [string] , _ ( [string] ) ) , ( [string] , _ ( [string] ) ) , ] [EOL] default = [string] [EOL] verbose_name = _ ( [string] ) [EOL] help_text = _ ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[socialhome.users.preferences.LandingPage]$ 0 0 0 0 0 0 $typing.Type[socialhome.users.preferences.LandingPage]$ 0 0 0 0 0 0
from typing import Dict , Tuple , Any [EOL] import django [EOL] import typing [EOL] import builtins [EOL] from typing import Dict , Tuple , TYPE_CHECKING , Any [EOL] [EOL] from django . db . models import QuerySet , Q , ObjectDoesNotExist [EOL] [EOL] from socialhome . enums import Visibility [EOL] [EOL] if TYPE_CHECKING : [EOL] from socialhome . users . models import Profile [EOL] [EOL] [EOL] class ProfileQuerySet ( QuerySet ) : [EOL] def active_local ( self ) : [EOL] [docstring] [EOL] return self . filter ( user__isnull = False , user__is_active = True , ) [EOL] [EOL] def fed ( self , value , ** params ) : [EOL] [docstring] [EOL] return self . filter ( Q ( fid = value ) | Q ( guid = value ) | Q ( handle = value ) ) . filter ( ** params ) [EOL] [EOL] def fed_update_or_create ( self , fid , values , extra_lookups = None ) : [EOL] [docstring] [EOL] if not extra_lookups : [EOL] extra_lookups = { } [EOL] try : [EOL] profile = self . fed ( fid , ** extra_lookups ) . get ( ) [EOL] except ObjectDoesNotExist : [EOL] if fid . startswith ( [string] ) : [EOL] values [ [string] ] = fid [EOL] values . update ( extra_lookups ) [EOL] return self . create ( ** values ) , True [EOL] else : [EOL] for key , value in values . items ( ) : [EOL] if key in ( [string] , [string] , [string] ) : [EOL] continue [EOL] setattr ( profile , key , value ) [EOL] profile . save ( ) [EOL] return profile , False [EOL] [EOL] def followers ( self , profile ) : [EOL] [docstring] [EOL] return self . filter ( following = profile ) [EOL] [EOL] def visible_for_user ( self , user ) : [EOL] if not user . is_authenticated : [EOL] return self . filter ( visibility = Visibility . PUBLIC ) [EOL] if user . is_staff : [EOL] return self [EOL] return self . filter ( Q ( id = user . profile . id ) | Q ( visibility__in = [ Visibility . LIMITED , Visibility . SITE , Visibility . PUBLIC ] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple['Profile',builtins.bool]$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import logging [EOL] import django_rq [EOL] import logging [EOL] from django . conf import settings [EOL] from django . db import transaction [EOL] from django . db . models . signals import post_save , m2m_changed , post_delete , pre_delete [EOL] from django . dispatch import receiver [EOL] from federation . entities . activitypub . enums import ActivityType [EOL] [EOL] from socialhome . federate . tasks import send_follow_change , send_profile , send_profile_retraction [EOL] from socialhome . notifications . tasks import send_follow_notification [EOL] from socialhome . users . models import User , Profile [EOL] [EOL] logger = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] @ receiver ( post_save , sender = User ) def user_post_save ( sender , ** kwargs ) : [EOL] user = kwargs . get ( [string] ) [EOL] if kwargs . get ( [string] ) : [EOL] [comment] [EOL] profile = Profile . objects . create ( user = user , name = user . name , email = user . email , handle = [string] % ( user . username , settings . SOCIALHOME_DOMAIN ) , ) [EOL] if settings . SOCIALHOME_GENERATE_USER_RSA_KEYS_ON_SAVE : [EOL] profile . generate_new_rsa_key ( ) [EOL] [comment] [EOL] user . init_pictures_on_disk ( ) [EOL] user . copy_picture_to_profile ( ) [EOL] [EOL] [EOL] def on_commit_profile_following_change ( action , pks , instance ) : [EOL] for _id in pks : [EOL] if instance . user : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] activity_type = ActivityType . FOLLOW if action == [string] else ActivityType . UNDO [EOL] instance . create_activity ( activity_type , object_id = _id ) [EOL] [comment] [EOL] if Profile . objects . filter ( id = _id , user__isnull = True ) . exists ( ) and instance . user : [EOL] django_rq . enqueue ( send_follow_change , instance . id , _id , True if action == [string] else False ) [EOL] [comment] [EOL] if action == [string] and Profile . objects . filter ( id = _id , user__isnull = False ) : [EOL] django_rq . enqueue ( send_follow_notification , instance . id , _id ) [EOL] [EOL] [EOL] @ receiver ( m2m_changed , sender = Profile . following . through ) def profile_following_change ( sender , instance , action , pk_set , ** kwargs ) : [EOL] [docstring] [EOL] if action in [ [string] , [string] ] : [EOL] transaction . on_commit ( lambda : on_commit_profile_following_change ( action , pk_set , instance ) ) [EOL] [EOL] [EOL] @ receiver ( post_save , sender = Profile ) def profile_post_save ( instance , ** kwargs ) : [EOL] if instance . is_local : [EOL] transaction . on_commit ( lambda : federate_profile ( instance ) ) [EOL] [EOL] [EOL] def federate_profile ( profile ) : [EOL] [docstring] [EOL] try : [EOL] transaction . on_commit ( lambda : django_rq . enqueue ( send_profile , profile . id ) ) [EOL] except Exception as ex : [EOL] logger . exception ( [string] , profile , ex ) [EOL] [EOL] [EOL] @ receiver ( pre_delete , sender = Profile ) def federate_profile_retraction ( instance , ** kwargs ) : [EOL] [docstring] [EOL] if instance . is_local : [EOL] logger . debug ( [string] , instance ) [EOL] try : [EOL] [comment] [EOL] send_profile_retraction ( instance ) [EOL] except Exception as ex : [EOL] logger . exception ( [string] , instance , ex ) [EOL] [EOL] [EOL] @ receiver ( post_delete , sender = User , dispatch_uid = [string] ) def delete_user_pictures ( sender , instance , ** kwargs ) : [EOL] [docstring] [EOL] if instance . picture : [EOL] try : [EOL] logger . debug ( [string] , instance ) [EOL] [comment] [EOL] instance . picture . delete_all_created_images ( ) [EOL] [comment] [EOL] instance . picture . delete ( save = False ) [EOL] except Exception : [EOL] logger . exception ( [string] , instance ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0
[comment] [EOL] default_app_config = [string] [EOL]	0 0 $builtins.str$ 0 0 0
from typing import Type , Tuple , Any , List [EOL] import builtins [EOL] import socialhome [EOL] import typing [EOL] from typing import List [EOL] [EOL] from enumfields . drf import EnumField [EOL] from rest_framework . fields import SerializerMethodField [EOL] from rest_framework . serializers import ModelSerializer [EOL] [EOL] from socialhome . content . models import Content [EOL] from socialhome . enums import Visibility [EOL] from socialhome . users . models import User , Profile [EOL] [EOL] [EOL] class LimitedProfileSerializer ( ModelSerializer ) : [EOL] [docstring] [EOL] user_following = SerializerMethodField ( ) [EOL] [EOL] class Meta : [EOL] model = Profile [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] read_only_fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] def get_user_following ( self , obj ) : [EOL] request = self . context . get ( [string] ) [EOL] if not request : [EOL] return False [EOL] return bool ( request . user . is_authenticated and obj . id in request . user . profile . following_ids ) [EOL] [EOL] [EOL] class ProfileSerializer ( ModelSerializer ) : [EOL] followed_tags = SerializerMethodField ( ) [EOL] followers_count = SerializerMethodField ( ) [EOL] following_count = SerializerMethodField ( ) [EOL] has_pinned_content = SerializerMethodField ( ) [EOL] user_following = SerializerMethodField ( ) [EOL] visibility = EnumField ( Visibility , lenient = True , ints_as_names = True ) [EOL] [EOL] class Meta : [EOL] model = Profile [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] read_only_fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] def get_followed_tags ( self , obj ) : [EOL] [docstring] [EOL] user = self . context . get ( [string] ) . user [EOL] if ( hasattr ( user , [string] ) and user . profile . id == obj . id ) or user . is_staff : [EOL] return list ( obj . followed_tags . values_list ( [string] , flat = True ) ) [EOL] return [ ] [EOL] [EOL] def get_following_count ( self , obj ) : [EOL] return obj . following . count ( ) [EOL] [EOL] def get_followers_count ( self , obj ) : [EOL] return Profile . objects . followers ( obj ) . count ( ) [EOL] [EOL] def get_has_pinned_content ( self , obj ) : [EOL] user = self . context . get ( [string] ) . user [EOL] return Content . objects . profile_pinned ( obj , user ) . exists ( ) [EOL] [EOL] def get_user_following ( self , obj ) : [EOL] request = self . context . get ( [string] ) [EOL] if not request : [EOL] return False [EOL] return bool ( request . user . is_authenticated and obj . id in request . user . profile . following_ids ) [EOL] [EOL] [EOL] class UserSerializer ( ModelSerializer ) : [EOL] class Meta : [EOL] model = User [EOL] fields = ( [string] , [string] , [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.serializers.LimitedProfileSerializer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.models.User]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $socialhome.users.models.Profile$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $socialhome.users.models.Profile$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.serializers.ProfileSerializer]$ 0 0 0 0 0 $typing.Type[socialhome.users.serializers.ProfileSerializer]$ 0 0 0 0 0 $typing.Type[socialhome.users.serializers.ProfileSerializer]$ 0 0 0 0 0 $typing.Type[socialhome.users.serializers.ProfileSerializer]$ 0 0 0 0 0 $typing.Type[socialhome.users.serializers.ProfileSerializer]$ 0 0 0 0 0 $typing.Type[socialhome.users.serializers.ProfileSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.models.User]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List$ 0 0 0 $socialhome.users.models.Profile$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $socialhome.users.models.Profile$ 0 0 0 0 0 0 0 0 0 0 0 0 $socialhome.users.models.Profile$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.models.User]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple [EOL] import typing [EOL] from django . contrib import admin [EOL] from django . contrib . admin import ModelAdmin [EOL] [EOL] from socialhome . users . models import User , Profile [EOL] [EOL] [EOL] @ admin . register ( Profile ) class ProfileAdmin ( ModelAdmin ) : [EOL] list_display = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] list_filter = ( [string] , [string] ) [EOL] raw_id_fields = ( [string] , [string] , [string] ) [EOL] readonly_fields = ( [string] , [string] , [string] , [string] , [string] ) [EOL] search_fields = ( [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] list_select_related = ( [string] , ) [EOL] [EOL] [EOL] @ admin . register ( User ) class UserAdmin ( ModelAdmin ) : [EOL] list_display = ( [string] , [string] , [string] , [string] ) [EOL] list_filter = ( [string] , ) [EOL] search_fields = ( [string] , [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import builtins [EOL] from typing import List [EOL] [EOL] from Crypto import Random [EOL] from Crypto . PublicKey import RSA [EOL] from django . conf import settings [EOL] [EOL] from socialhome . utils import get_redis_connection [EOL] [EOL] [EOL] def generate_rsa_private_key ( bits = [number] ) : [EOL] [docstring] [EOL] rand = Random . new ( ) . read [EOL] return RSA . generate ( bits , rand ) [EOL] [EOL] [EOL] def get_pony_urls ( ) : [EOL] [docstring] [EOL] base_url = [string] . format ( url = settings . SOCIALHOME_URL , staticpath = settings . STATIC_URL ) [EOL] return [ base_url . replace ( [string] , [string] ) , base_url . replace ( [string] , [string] ) , base_url . replace ( [string] , [string] ) ] [EOL] [EOL] [EOL] def get_recently_active_user_ids ( ) : [EOL] [docstring] [EOL] r = get_redis_connection ( ) [EOL] keys = r . keys ( [string] ) [EOL] return [ int ( key . decode ( [string] ) . rsplit ( [string] , [number] ) [ [number] ] ) for key in keys ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Tuple [EOL] import typing [EOL] import socialhome [EOL] from haystack import indexes [EOL] [EOL] from socialhome . enums import Visibility [EOL] from socialhome . users . models import Profile [EOL] [EOL] [EOL] class IntegerEnumField ( indexes . IntegerField ) : [EOL] def convert ( self , value ) : [EOL] [docstring] [EOL] if value is None : [EOL] return None [EOL] try : [EOL] return value . value [EOL] except AttributeError : [EOL] return value [EOL] [EOL] [EOL] class ProfileIndex ( indexes . ModelSearchIndex , indexes . Indexable ) : [EOL] text = indexes . EdgeNgramField ( document = True , use_template = True ) [EOL] profile_visibility = IntegerEnumField ( model_attr = [string] ) [EOL] [EOL] class Meta : [EOL] model = Profile [EOL] fields = ( [string] , [string] ) [EOL] [EOL] def index_queryset ( self , using = None ) : [EOL] [docstring] [EOL] return self . get_model ( ) . objects . exclude ( visibility = Visibility . SELF ) [EOL] [EOL] def should_update ( self , instance , ** kwargs ) : [EOL] [docstring] [EOL] return instance . visibility != Visibility . SELF [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.search_indexes.ProfileIndex]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $socialhome.users.search_indexes.IntegerEnumField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.models.Profile]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Dict , Any [EOL] import typing [EOL] import builtins [EOL] import socialhome [EOL] import federation [EOL] import logging [EOL] import logging [EOL] import os [EOL] import time [EOL] from typing import Dict [EOL] from uuid import uuid4 [EOL] [EOL] [comment] [EOL] from Crypto . PublicKey import RSA [EOL] from django . conf import settings [EOL] from django . contrib . auth . models import AbstractUser [EOL] from django . db import models [EOL] from django . urls import reverse [EOL] from django . utils . functional import cached_property [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from enumfields import EnumIntegerField [EOL] from federation . entities . activitypub . enums import ActivityType [EOL] from federation . types import UserType [EOL] from federation . utils . text import validate_handle , decode_if_bytes [EOL] from model_utils . models import TimeStampedModel [EOL] [comment] [EOL] from versatileimagefield . fields import VersatileImageField , PPOIField [EOL] from versatileimagefield . image_warmer import VersatileImageFieldWarmer [EOL] from versatileimagefield . placeholder import OnDiscPlaceholderImage [EOL] [EOL] from socialhome . activities . models import Activity [EOL] from socialhome . content . utils import safe_text [EOL] from socialhome . enums import Visibility [EOL] from socialhome . users . querysets import ProfileQuerySet [EOL] from socialhome . users . utils import get_pony_urls , generate_rsa_private_key [EOL] from socialhome . utils import get_full_media_url , get_redis_connection [EOL] [EOL] logger = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] class User ( AbstractUser ) : [EOL] [EOL] [comment] [EOL] [comment] [EOL] name = models . CharField ( _ ( [string] ) , blank = True , max_length = [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] trusted_editor = models . BooleanField ( _ ( [string] ) , default = False ) [EOL] [EOL] [comment] [EOL] picture = VersatileImageField ( _ ( [string] ) , upload_to = [string] , width_field = [string] , height_field = [string] , placeholder_image = OnDiscPlaceholderImage ( path = os . path . join ( os . path . dirname ( os . path . abspath ( __file__ ) ) , [string] , [string] , [string] , [string] , ) ) , blank = True , null = True , max_length = [number] , ppoi_field = [string] , ) [EOL] picture_height = models . PositiveIntegerField ( _ ( [string] ) , blank = True , null = True ) [EOL] picture_width = models . PositiveIntegerField ( _ ( [string] ) , blank = True , null = True ) [EOL] picture_ppoi = PPOIField ( [string] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . username [EOL] [EOL] @ property def activity_key ( self ) : [EOL] return f" [string] { self . id }" [EOL] [EOL] @ property def url ( self ) : [EOL] return f'{ settings . SOCIALHOME_URL }{ reverse ( [string] , kwargs = { [string] : self . username } ) }' [EOL] [EOL] def get_first_name ( self ) : [EOL] [docstring] [EOL] if self . first_name : [EOL] return self . first_name [EOL] elif self . name : [EOL] return self . name . split ( [string] ) [ [number] ] [EOL] return [string] [EOL] [EOL] def get_last_name ( self ) : [EOL] [docstring] [EOL] if self . last_name : [EOL] return self . last_name [EOL] elif self . name : [EOL] try : [EOL] return self . name . split ( [string] , [number] ) [ [number] ] [EOL] except IndexError : [EOL] return [string] [EOL] return [string] [EOL] [EOL] def get_absolute_url ( self ) : [EOL] if settings . SOCIALHOME_ROOT_PROFILE == self . username : [EOL] return [string] [EOL] return reverse ( [string] , kwargs = { [string] : self . username } ) [EOL] [EOL] def copy_picture_to_profile ( self ) : [EOL] [docstring] [EOL] if self . picture : [EOL] self . profile . image_url_small = get_full_media_url ( self . picture . crop [ [string] ] . name ) [EOL] self . profile . image_url_medium = get_full_media_url ( self . picture . crop [ [string] ] . name ) [EOL] self . profile . image_url_large = get_full_media_url ( self . picture . crop [ [string] ] . name ) [EOL] self . profile . save ( update_fields = [ [string] , [string] , [string] ] ) [EOL] [EOL] def init_pictures_on_disk ( self ) : [EOL] [docstring] [EOL] picture_warmer = VersatileImageFieldWarmer ( instance_or_queryset = self , rendition_key_set = [string] , image_attr = [string] , ) [EOL] picture_warmer . warm ( ) [EOL] [EOL] def mark_recently_active ( self ) : [EOL] [docstring] [EOL] r = get_redis_connection ( ) [EOL] r . set ( self . activity_key , int ( time . time ( ) ) ) [EOL] r . expire ( self . activity_key , settings . SOCIALHOME_USER_ACTIVITY_SECONDS ) [EOL] [EOL] @ cached_property def recently_active ( self ) : [EOL] [docstring] [EOL] r = get_redis_connection ( ) [EOL] return r . exists ( self . activity_key ) [EOL] [EOL] [EOL] [comment] [EOL] class Profile ( TimeStampedModel ) : [EOL] [docstring] [EOL] [comment] [EOL] uuid = models . UUIDField ( unique = True , blank = True , null = True , editable = False ) [EOL] [EOL] [comment] [EOL] user = models . OneToOneField ( User , on_delete = models . CASCADE , null = True ) [EOL] [EOL] [comment] [EOL] name = models . CharField ( _ ( [string] ) , blank = True , max_length = [number] ) [EOL] email = models . EmailField ( _ ( [string] ) , blank = True ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] guid = models . CharField ( _ ( [string] ) , max_length = [number] , unique = True , editable = False , blank = True , null = True ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] handle = models . CharField ( _ ( [string] ) , editable = False , max_length = [number] , unique = True , blank = True , null = True ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] fid = models . URLField ( _ ( [string] ) , editable = False , max_length = [number] , unique = True , blank = True , null = True ) [EOL] [EOL] [comment] [EOL] rsa_private_key = models . TextField ( _ ( [string] ) , null = True , editable = False ) [EOL] rsa_public_key = models . TextField ( _ ( [string] ) , null = True , editable = False ) [EOL] [EOL] [comment] [EOL] visibility = EnumIntegerField ( Visibility , verbose_name = _ ( [string] ) , default = Visibility . PUBLIC ) [EOL] [EOL] [comment] [EOL] image_url_large = models . URLField ( _ ( [string] ) , blank = True ) [EOL] image_url_medium = models . URLField ( _ ( [string] ) , blank = True ) [EOL] image_url_small = models . URLField ( _ ( [string] ) , blank = True ) [EOL] [EOL] [comment] [EOL] location = models . CharField ( _ ( [string] ) , max_length = [number] , blank = True ) [EOL] [EOL] [comment] [EOL] nsfw = models . BooleanField ( _ ( [string] ) , default = False , help_text = _ ( [string] ) ) [EOL] [EOL] [comment] [EOL] following = models . ManyToManyField ( [string] , verbose_name = _ ( [string] ) , related_name = [string] , symmetrical = False ) [EOL] [EOL] [comment] [EOL] followed_tags = models . ManyToManyField ( [string] , verbose_name = _ ( [string] ) , related_name = [string] , ) [EOL] [EOL] [comment] [EOL] inbox_private = models . URLField ( _ ( [string] ) , blank = True ) [EOL] inbox_public = models . URLField ( _ ( [string] ) , blank = True ) [EOL] [EOL] [comment] [EOL] protocol = models . CharField ( _ ( [string] ) , blank = True , max_length = [number] ) [EOL] [EOL] objects = ProfileQuerySet . as_manager ( ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f"{ self . name } [string] { self . fid or self . handle } [string] " [EOL] [EOL] def create_activity ( self , activity_type , object_id = None ) : [EOL] [docstring] [EOL] from django . contrib . contenttypes . models import ContentType as DjangoContentType [EOL] return Activity . objects . create ( content_type = DjangoContentType . objects . get_for_model ( Profile ) , fid = f"{ self . fid } [string] { uuid4 ( ) }" , object_id = object_id or self . id , profile = self , type = activity_type , ) [EOL] [EOL] def get_absolute_url ( self ) : [EOL] return reverse ( [string] , kwargs = { [string] : self . uuid } ) [EOL] [EOL] def get_recipient_for_visibility ( self , visibility ) : [EOL] [docstring] [EOL] if visibility == Visibility . PUBLIC : [EOL] return { [string] : self . inbox_public , [string] : self . fid , [string] : True , [string] : self . protocol , } [EOL] elif visibility == Visibility . LIMITED : [EOL] return { [string] : self . inbox_private , [string] : self . fid , [string] : False , [string] : self . protocol , [string] : self . rsa_public_key , } [EOL] else : [EOL] raise ValueError ( [string] [string] ) [EOL] [EOL] @ property def federable ( self ) : [EOL] return UserType ( id = self . fid or self . handle , private_key = self . rsa_private_key , handle = self . handle , ) [EOL] [EOL] @ property def home_url ( self ) : [EOL] if not self . user : [EOL] [comment] [EOL] return self . remote_url [EOL] return self . url [EOL] [EOL] @ property def local_url ( self ) : [EOL] if self . is_local : [EOL] return f"{ settings . SOCIALHOME_URL }{ self . user . get_absolute_url ( ) }" [EOL] return self . url [EOL] [EOL] @ property def name_or_handle ( self ) : [EOL] return self . name or self . handle or self . fid [EOL] [EOL] @ property def remote_url ( self ) : [EOL] [comment] [EOL] [comment] [EOL] return [string] [EOL] [comment] [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] if not self . uuid : [EOL] self . uuid = uuid4 ( ) [EOL] if not self . pk and self . is_local : [EOL] if not self . guid : [EOL] self . guid = str ( self . uuid ) [EOL] if not self . fid : [EOL] self . fid = self . user . url [EOL] [comment] [EOL] self . protocol = [string] [EOL] [EOL] if not self . fid and not self . handle : [EOL] raise ValueError ( [string] ) [EOL] [EOL] if self . handle : [EOL] [comment] [EOL] self . handle = self . handle . lower ( ) [EOL] if not validate_handle ( self . handle ) : [EOL] raise ValueError ( [string] ) [EOL] else : [EOL] self . handle = None [EOL] [EOL] if self . guid == [string] : [EOL] self . guid = None [EOL] [EOL] [comment] [EOL] if not self . image_url_small or not self . image_url_medium or not self . image_url_large : [EOL] ponies = get_pony_urls ( ) [EOL] for idx , attr in enumerate ( [ [string] , [string] , [string] ] ) : [EOL] if not getattr ( self , attr , None ) : [EOL] setattr ( self , attr , ponies [ idx ] ) [EOL] [EOL] [comment] [EOL] self . rsa_private_key = decode_if_bytes ( self . rsa_private_key ) [EOL] self . rsa_public_key = decode_if_bytes ( self . rsa_public_key ) [EOL] [EOL] [comment] [EOL] if self . is_local : [EOL] if not self . inbox_private : [EOL] self . inbox_private = f"{ self . fid } [string] " [EOL] if not self . inbox_public : [EOL] self . inbox_public = f"{ settings . SOCIALHOME_URL }{ reverse ( [string] ) }" [EOL] [EOL] super ( ) . save ( * args , ** kwargs ) [EOL] [EOL] @ property def url ( self ) : [EOL] return [string] % ( settings . SOCIALHOME_URL , self . get_absolute_url ( ) ) [EOL] [EOL] def generate_new_rsa_key ( self , bits = [number] ) : [EOL] [docstring] [EOL] key = generate_rsa_private_key ( bits = bits ) [EOL] self . rsa_public_key = key . publickey ( ) . exportKey ( ) [EOL] self . rsa_private_key = key . exportKey ( ) [EOL] self . save ( update_fields = ( [string] , [string] ) ) [EOL] [EOL] @ cached_property def private_key ( self ) : [EOL] [docstring] [EOL] if self . rsa_private_key : [EOL] return RSA . importKey ( self . rsa_private_key ) [EOL] [EOL] @ cached_property def key ( self ) : [EOL] [docstring] [EOL] if self . rsa_public_key : [EOL] return RSA . importKey ( self . rsa_public_key ) [EOL] [EOL] @ property def public ( self ) : [EOL] [docstring] [EOL] return self . visibility == Visibility . PUBLIC [EOL] [EOL] @ property def is_local ( self ) : [EOL] [docstring] [EOL] return self . user is not None [EOL] [EOL] def safer_image_url ( self , size ) : [EOL] [docstring] [EOL] attr = [string] % size [EOL] if getattr ( self , attr ) . startswith ( [string] ) and self . handle : [EOL] return [string] % ( self . handle . split ( [string] ) [ [number] ] , getattr ( self , attr ) , ) [EOL] return getattr ( self , attr ) [EOL] [EOL] @ property def safer_image_url_small ( self ) : [EOL] return self . safer_image_url ( [string] ) [EOL] [EOL] @ property def safer_image_url_medium ( self ) : [EOL] return self . safer_image_url ( [string] ) [EOL] [EOL] @ property def safer_image_url_large ( self ) : [EOL] return self . safer_image_url ( [string] ) [EOL] [EOL] @ cached_property def following_ids ( self ) : [EOL] return self . following . values_list ( [string] , flat = True ) [EOL] [EOL] @ property def username_part ( self ) : [EOL] if not self . handle : [EOL] return [string] [EOL] return self . handle . split ( [string] ) [ [number] ] [EOL] [EOL] def visible_to_user ( self , user ) : [EOL] [docstring] [EOL] if self . visibility == Visibility . PUBLIC : [EOL] return True [EOL] elif user . is_authenticated : [EOL] if self . visibility != Visibility . SELF or user . profile == self : [EOL] return True [EOL] return False [EOL] [EOL] def get_first_name ( self ) : [EOL] [docstring] [EOL] if self . user and self . user . first_name : [EOL] return self . user . first_name [EOL] elif self . name : [EOL] return self . name . split ( [string] ) [ [number] ] [EOL] return [string] [EOL] [EOL] def get_last_name ( self ) : [EOL] [docstring] [EOL] if self . user and self . user . last_name : [EOL] return self . user . last_name [EOL] elif self . name : [EOL] try : [EOL] return self . name . split ( [string] , [number] ) [ [number] ] [EOL] except IndexError : [EOL] return [string] [EOL] return [string] [EOL] [EOL] @ staticmethod def absolute_image_url ( profile , image_name ) : [EOL] [docstring] [EOL] url = safe_text ( profile . image_urls [ image_name ] ) [EOL] [EOL] if url . startswith ( [string] ) and profile . handle : [EOL] return [string] % ( profile . handle . split ( [string] ) [ [number] ] , url , ) [EOL] return url [EOL] [EOL] @ staticmethod def from_remote_profile ( remote_profile ) : [EOL] [docstring] [EOL] logger . info ( [string] , remote_profile ) [EOL] [comment] [EOL] values = { [string] : safe_text ( remote_profile . name ) , [string] : Visibility . PUBLIC , [string] : Profile . absolute_image_url ( remote_profile , [string] ) , [string] : Profile . absolute_image_url ( remote_profile , [string] ) , [string] : Profile . absolute_image_url ( remote_profile , [string] ) , [string] : safe_text ( remote_profile . location ) , [string] : safe_text ( remote_profile . email ) , [string] : safe_text ( remote_profile . inboxes . get ( [string] , [string] ) ) , [string] : safe_text ( remote_profile . inboxes . get ( [string] , [string] ) ) , [string] : remote_profile . _source_protocol , } [EOL] public_key = safe_text ( remote_profile . public_key ) [EOL] if public_key : [EOL] [comment] [EOL] values [ [string] ] = public_key [EOL] for img_size in [ [string] , [string] , [string] ] : [EOL] [comment] [EOL] values [ [string] % img_size ] = values [ [string] % img_size ] . replace ( [string] , [string] ) [EOL] fid = safe_text ( remote_profile . id ) [EOL] values [ [string] ] = safe_text ( remote_profile . handle ) [EOL] values [ [string] ] = safe_text ( remote_profile . guid ) [EOL] logger . debug ( [string] , values ) [EOL] profile , created = Profile . objects . fed_update_or_create ( fid , values ) [EOL] logger . info ( [string] , created , profile ) [EOL] return profile [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.models.Profile]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $socialhome.activities.models.Activity$ 0 0 0 $federation.entities.activitypub.enums.ActivityType$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $federation.entities.activitypub.enums.ActivityType$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 $socialhome.enums.Visibility$ 0 0 0 0 0 0 $socialhome.enums.Visibility$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $socialhome.enums.Visibility$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,unknown]$ 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] from django . conf . urls import url [EOL] from django . urls import path [EOL] from django . views . decorators . csrf import csrf_exempt [EOL] [EOL] from . import views [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ url ( regex = [string] , view = views . UserAllContentView . as_view ( ) , name = [string] ) , url ( regex = [string] , view = csrf_exempt ( views . UserDetailView . as_view ( ) ) , name = [string] ) , url ( regex = [string] , view = views . UserPictureUpdateView . as_view ( ) , name = [string] ) , url ( regex = [string] , view = views . UserAPITokenView . as_view ( ) , name = [string] , ) , url ( regex = [string] , view = views . OrganizeContentProfileDetailView . as_view ( ) , name = [string] ) , url ( regex = [string] , view = views . ProfileUpdateView . as_view ( ) , name = [string] ) , url ( regex = [string] , view = views . ContactsFollowingView . as_view ( ) , name = [string] ) , url ( regex = [string] , view = views . ContactsFollowersView . as_view ( ) , name = [string] ) , url ( regex = [string] , view = views . ProfileAllContentView . as_view ( ) , name = [string] ) , url ( regex = [string] , view = views . ProfileDetailView . as_view ( ) , name = [string] ) , path ( [string] , views . DeleteAccountView . as_view ( ) , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] import logging [EOL] import logging [EOL] [EOL] from django . core . management . base import BaseCommand [EOL] [EOL] from socialhome . enums import Visibility [EOL] from socialhome . users . models import User , Profile [EOL] [EOL] logger = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [string] [string] [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , dest = [string] , default = [string] , help = [string] , ) [EOL] parser . add_argument ( [string] , dest = [string] , default = True , action = [string] , help = [string] [string] , ) [EOL] parser . add_argument ( [string] , dest = [string] , default = [string] , help = [string] , ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] users = options [ [string] ] . split ( [string] ) [EOL] profiles = options [ [string] ] . split ( [string] ) [EOL] lock_profiles = options [ [string] ] [EOL] self . handle_users ( users ) [EOL] self . handle_profiles ( profiles , lock_profiles = lock_profiles ) [EOL] [EOL] def handle_users ( self , users ) : [EOL] for uuid in users : [EOL] uuid = uuid . strip ( ) [EOL] if not uuid : [EOL] continue [EOL] try : [EOL] user = User . objects . get ( profile__uuid = uuid ) [EOL] except User . DoesNotExist : [EOL] print ( [string] % uuid ) [EOL] continue [EOL] confirm = input ( [string] % ( user . profile . name , user . username , uuid ) ) [EOL] if confirm != [string] : [EOL] print ( [string] % uuid ) [EOL] continue [EOL] try : [EOL] user . delete ( ) [EOL] except Exception : [EOL] msg = [string] % user [EOL] print ( msg ) [EOL] logger . exception ( msg ) [EOL] else : [EOL] msg = [string] % user [EOL] print ( msg ) [EOL] logger . info ( msg ) [EOL] [EOL] def handle_profiles ( self , profiles , lock_profiles = False ) : [EOL] for fid in profiles : [EOL] fid = fid . strip ( ) [EOL] if not fid : [EOL] continue [EOL] try : [EOL] profile = Profile . objects . fed ( fid , user__isnull = True ) . get ( ) [EOL] except Profile . DoesNotExist : [EOL] print ( [string] % fid ) [EOL] continue [EOL] [EOL] confirm = input ( [string] % ( profile . name , fid ) ) [EOL] if confirm != [string] : [EOL] print ( [string] % fid ) [EOL] continue [EOL] [EOL] if lock_profiles : [EOL] [comment] [EOL] [comment] [EOL] for content in profile . content_set . all ( ) : [EOL] print ( [string] % content ) [EOL] content . delete ( ) [EOL] [comment] [EOL] profile . rsa_public_key = [string] [EOL] [comment] [EOL] profile . visibility = Visibility . SELF [EOL] print ( [string] % profile ) [EOL] profile . save ( ) [EOL] [comment] [EOL] for follower in profile . followers . all ( ) : [EOL] print ( [string] % ( follower , profile ) ) [EOL] follower . following . remove ( profile ) [EOL] else : [EOL] try : [EOL] profile . delete ( ) [EOL] except Exception : [EOL] msg = [string] % profile [EOL] print ( msg ) [EOL] logger . exception ( msg ) [EOL] else : [EOL] msg = [string] % profile [EOL] print ( msg ) [EOL] logger . info ( msg ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $logging.Logger$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $logging.Logger$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $logging.Logger$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $logging.Logger$ 0 0 0 $builtins.str$ 0 0
from typing import Type , Any , List [EOL] import typing [EOL] import socialhome [EOL] from random import randint [EOL] [EOL] import factory [EOL] from allauth . account . models import EmailAddress [EOL] from django . conf import settings [EOL] from factory import fuzzy [EOL] [EOL] from federation . entities import base [EOL] [EOL] from socialhome . enums import Visibility [EOL] [EOL] [EOL] class UserFactory ( factory . django . DjangoModelFactory ) : [EOL] username = factory . Sequence ( lambda n : [string] . format ( n ) ) [EOL] email = factory . Sequence ( lambda n : [string] . format ( n ) ) [EOL] password = factory . PostGenerationMethodCall ( [string] , [string] ) [EOL] [EOL] class Meta : [EOL] model = [string] [EOL] [EOL] @ factory . post_generation def with_verified_email ( self , create , extracted , ** kwargs ) : [EOL] if not create or not extracted : [EOL] return [EOL] [EOL] EmailAddress . objects . create ( user = self , email = self . email , verified = True , ) [EOL] [EOL] [EOL] class LimitedUserFactory ( UserFactory ) : [EOL] @ classmethod def _generate ( cls , create , attrs ) : [EOL] user = super ( UserFactory , cls ) . _generate ( create , attrs ) [EOL] user . profile . visibility = Visibility . LIMITED [EOL] user . profile . save ( update_fields = [ [string] ] ) [EOL] return user [EOL] [EOL] [EOL] class PublicUserFactory ( UserFactory ) : [EOL] @ classmethod def _generate ( cls , create , attrs ) : [EOL] user = super ( UserFactory , cls ) . _generate ( create , attrs ) [EOL] user . profile . visibility = Visibility . PUBLIC [EOL] user . profile . save ( update_fields = [ [string] ] ) [EOL] return user [EOL] [EOL] [EOL] class SiteUserFactory ( UserFactory ) : [EOL] @ classmethod def _generate ( cls , create , attrs ) : [EOL] user = super ( UserFactory , cls ) . _generate ( create , attrs ) [EOL] user . profile . visibility = Visibility . SITE [EOL] user . profile . save ( update_fields = [ [string] ] ) [EOL] return user [EOL] [EOL] [EOL] class SelfUserFactory ( UserFactory ) : [EOL] @ classmethod def _generate ( cls , create , attrs ) : [EOL] user = super ( UserFactory , cls ) . _generate ( create , attrs ) [EOL] user . profile . visibility = Visibility . SELF [EOL] user . profile . save ( update_fields = [ [string] ] ) [EOL] return user [EOL] [EOL] [EOL] class UserWithKeyFactory ( UserFactory ) : [EOL] @ classmethod def _generate ( cls , create , attrs ) : [EOL] user = super ( UserFactory , cls ) . _generate ( create , attrs ) [EOL] user . profile . generate_new_rsa_key ( bits = [number] ) [EOL] return user [EOL] [EOL] [EOL] class AdminUserFactory ( UserFactory ) : [EOL] is_superuser = True [EOL] is_staff = True [EOL] [EOL] username = [string] [EOL] [EOL] [EOL] class UserWithContactFactory ( UserFactory ) : [EOL] @ classmethod def _generate ( cls , create , attrs ) : [EOL] count_following = attrs . pop ( [string] , [number] ) if isinstance ( attrs , dict ) else [number] [EOL] count_followers = attrs . pop ( [string] , [number] ) if isinstance ( attrs , dict ) else [number] [EOL] following = [ ProfileFactory ( ) for _ in range ( count_following ) ] [EOL] followers = [ ProfileFactory ( ) for _ in range ( count_followers ) ] [EOL] [EOL] user = super ( UserWithContactFactory , cls ) . _generate ( create , attrs ) [EOL] user . profile . following . set ( following ) [EOL] user . profile . followers . set ( followers ) [EOL] return user [EOL] [EOL] [EOL] class ProfileFactory ( factory . django . DjangoModelFactory ) : [EOL] email = factory . Faker ( [string] ) [EOL] fid = [string] [EOL] name = factory . Faker ( [string] ) [EOL] [EOL] [comment] [EOL] rsa_private_key = fuzzy . FuzzyText ( ) [EOL] rsa_public_key = fuzzy . FuzzyText ( ) [EOL] [EOL] [comment] [EOL] image_url_small = [string] [EOL] image_url_medium = [string] [EOL] image_url_large = [string] [EOL] [EOL] uuid = factory . Faker ( [string] ) [EOL] [EOL] class Meta : [EOL] model = [string] [EOL] [EOL] class Params : [EOL] diaspora = factory . Trait ( handle = factory . lazy_attribute ( lambda x : x . email ) , guid = factory . Faker ( [string] ) , ) [EOL] [EOL] @ factory . post_generation def set_fid ( self , extracted , created , ** kwargs ) : [EOL] if self . fid == [string] : [EOL] self . fid = f"{ settings . SOCIALHOME_URL } [string] { self . user . username } [string] " \ [EOL] if self . user else f"{ settings . SOCIALHOME_URL } [string] { self . uuid } [string] " [EOL] [EOL] [comment] [EOL] @ factory . post_generation def set_handle ( self , extracted , created , ** kwargs ) : [EOL] if extracted is False or self . handle : [EOL] return [EOL] [EOL] [comment] [EOL] if extracted is True or randint ( [number] , [number] ) > [number] : [EOL] self . handle = self . email [EOL] [EOL] @ factory . post_generation def with_key ( self , extracted , created , ** kwargs ) : [EOL] if not extracted : [EOL] return [EOL] [EOL] self . generate_new_rsa_key ( bits = [number] ) [EOL] [EOL] [EOL] class PublicProfileFactory ( ProfileFactory ) : [EOL] visibility = Visibility . PUBLIC [EOL] [EOL] [EOL] class SiteProfileFactory ( ProfileFactory ) : [EOL] visibility = Visibility . SITE [EOL] [EOL] [EOL] class LimitedProfileFactory ( ProfileFactory ) : [EOL] visibility = Visibility . LIMITED [EOL] [EOL] [EOL] class SelfProfileFactory ( ProfileFactory ) : [EOL] visibility = Visibility . SELF [EOL] [EOL] [EOL] class BaseProfileFactory ( factory . Factory ) : [EOL] class Meta : [EOL] model = base . Profile [EOL] [EOL] id = factory . Faker ( [string] ) [EOL] raw_content = factory . Faker ( [string] , nb = [number] ) [EOL] email = factory . Faker ( [string] ) [EOL] gender = factory . Faker ( [string] ) [EOL] location = [string] [EOL] nsfw = factory . Faker ( [string] ) [EOL] public_key = factory . Faker ( [string] ) [EOL] public = factory . Faker ( [string] ) [EOL] image_urls = { [string] : factory . Faker ( [string] , width = [number] , height = [number] ) . generate ( { } ) , [string] : factory . Faker ( [string] , width = [number] , height = [number] ) . generate ( { } ) , [string] : factory . Faker ( [string] , width = [number] , height = [number] ) . generate ( { } ) , } [EOL] tag_list = factory . Faker ( [string] , nb = [number] ) [EOL] [EOL] [EOL] class BaseShareFactory ( factory . Factory ) : [EOL] class Meta : [EOL] model = base . Share [EOL] [EOL] id = factory . Faker ( [string] ) [EOL] actor_id = factory . Faker ( [string] ) [EOL] target_id = factory . Faker ( [string] ) [EOL] public = factory . Faker ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.tests.factories.BaseShareFactory.Meta]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.tests.factories.BaseShareFactory.Meta]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.tests.factories.BaseShareFactory.Meta]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.tests.factories.BaseProfileFactory]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.tests.factories.BaseShareFactory.Meta]$ 0 0 0 0 0 0 $typing.Type[socialhome.users.tests.factories.BaseShareFactory]$ 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.tests.factories.BaseShareFactory]$ 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.tests.factories.BaseShareFactory]$ 0 0 0 0 0 0 0 0 $typing.Type[socialhome.users.tests.factories.BaseShareFactory]$ 0 0 0 0 0 0 0 0
	0
	0
from typing import Any , List [EOL] import os [EOL] import typing [EOL] import socialhome [EOL] import datetime [EOL] import json [EOL] import os [EOL] import zipfile [EOL] [EOL] import django_rq [EOL] from django . conf import settings [EOL] from django . test import RequestFactory [EOL] from django . urls import reverse [EOL] from django . utils import timezone [EOL] from django . utils . functional import cached_property [EOL] from django . utils . timezone import now [EOL] [EOL] from socialhome . content . models import Content [EOL] from socialhome . content . serializers import ContentSerializer [EOL] from socialhome . notifications . tasks import send_data_export_ready_notification [EOL] from socialhome . users . models import User [EOL] from socialhome . users . serializers import ProfileSerializer , UserSerializer , LimitedProfileSerializer [EOL] [EOL] [EOL] def create_user_export ( user_id ) : [EOL] user = User . objects . get ( id = user_id ) [EOL] exporter = UserExporter ( user = user ) [EOL] exporter . create ( ) [EOL] [EOL] [EOL] class UserExporter : [EOL] def __init__ ( self , user , request = None ) : [EOL] self . user = user [EOL] if request : [EOL] self . request = request [EOL] else : [EOL] self . request = RequestFactory ( ) . get ( [string] ) [EOL] self . request . user = self . user [EOL] self . context = { [string] : self . request , } [EOL] self . data = { } [EOL] self . data_json_path = os . path . join ( self . path , [string] ) [EOL] self . images_zip_path = os . path . join ( self . path , [string] ) [EOL] self . name = [string] % ( settings . SOCIALHOME_DOMAIN , now ( ) . date ( ) . isoformat ( ) ) [EOL] [EOL] def _create_final_zip ( self ) : [EOL] [comment] [EOL] with zipfile . ZipFile ( os . path . join ( self . path , self . name ) , [string] , zipfile . ZIP_DEFLATED ) as zipf : [EOL] zipf . write ( self . data_json_path , arcname = [string] ) [EOL] zipf . write ( self . images_zip_path , arcname = [string] ) [EOL] [comment] [EOL] os . unlink ( self . data_json_path ) [EOL] os . unlink ( self . images_zip_path ) [EOL] [EOL] def _remove_previous_export ( self ) : [EOL] [comment] [EOL] files = os . listdir ( self . path ) [EOL] for file in files : [EOL] os . unlink ( os . path . join ( self . path , file ) ) [EOL] [EOL] def _store_data ( self ) : [EOL] [comment] [EOL] export = json . dumps ( self . data , indent = [number] ) [EOL] with open ( self . data_json_path , [string] ) as exportf : [EOL] exportf . writelines ( export ) [EOL] [EOL] def _store_images ( self ) : [EOL] [comment] [EOL] with zipfile . ZipFile ( self . images_zip_path , [string] , zipfile . ZIP_DEFLATED ) as zipf : [EOL] for image in self . user . imageuploads . all ( ) : [EOL] zipf . write ( image . image . path , arcname = image . image . name ) [EOL] [EOL] def collect_data ( self ) : [EOL] [comment] [EOL] serializer = UserSerializer ( instance = self . user , context = self . context ) [EOL] self . data [ [string] ] = serializer . data [EOL] [comment] [EOL] serializer = ProfileSerializer ( instance = self . user . profile , context = self . context ) [EOL] self . data [ [string] ] = serializer . data [EOL] [comment] [EOL] self . data [ [string] ] = [ ] [EOL] for follow in self . user . profile . following . all ( ) : [EOL] serializer = LimitedProfileSerializer ( instance = follow , context = self . context ) [EOL] self . data [ [string] ] . append ( serializer . data ) [EOL] [comment] [EOL] self . data [ [string] ] = [ ] [EOL] content_qs = Content . objects . filter ( author = self . user . profile ) . order_by ( [string] ) [EOL] for content in content_qs : [EOL] serializer = ContentSerializer ( instance = content , context = self . context ) [EOL] self . data [ [string] ] . append ( serializer . data ) [EOL] [EOL] def create ( self ) : [EOL] self . collect_data ( ) [EOL] self . store ( ) [EOL] self . notify ( ) [EOL] [EOL] @ property def file_date ( self ) : [EOL] if self . file_path : [EOL] stat = os . stat ( self . file_path ) [EOL] return datetime . datetime . fromtimestamp ( stat . st_ctime , tz = timezone . get_current_timezone ( ) ) [EOL] [EOL] @ cached_property def file_path ( self ) : [EOL] files = os . listdir ( self . path ) [EOL] if not files : [EOL] return [EOL] file = files [ [number] ] [EOL] return os . path . join ( self . path , file ) [EOL] [EOL] @ cached_property def path ( self ) : [EOL] path = os . path . join ( settings . SOCIALHOME_EXPORTS_PATH , str ( self . user . id ) ) [EOL] if not os . path . isdir ( path ) : [EOL] os . makedirs ( path ) [EOL] return path [EOL] [EOL] def notify ( self ) : [EOL] django_rq . enqueue ( send_data_export_ready_notification , self . user . id ) [EOL] [EOL] def retrieve ( self ) : [EOL] if self . file_path : [EOL] return open ( self . file_path , [string] ) [EOL] [EOL] def store ( self ) : [EOL] self . _remove_previous_export ( ) [EOL] self . _store_data ( ) [EOL] self . _store_images ( ) [EOL] self . _create_final_zip ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $socialhome.content.serializers.ContentSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $socialhome.content.serializers.ContentSerializer$ 0 0 0 0 0 $socialhome.content.serializers.ContentSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $socialhome.content.serializers.ContentSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $socialhome.content.serializers.ContentSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $socialhome.content.serializers.ContentSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $socialhome.content.serializers.ContentSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $socialhome.content.serializers.ContentSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $os.stat_result$ 0 0 0 $os.stat_result$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $os.stat_result$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] from typing import Tuple , Any , List [EOL] import typing [EOL] from uuid import uuid4 [EOL] [EOL] from django . conf import settings [EOL] from django . db import migrations [EOL] from django . db . migrations import RunPython [EOL] from django . urls import reverse [EOL] [EOL] [EOL] def forward ( apps , schema_editor ) : [EOL] Profile = apps . get_model ( [string] , [string] ) [EOL] for profile in Profile . objects . select_related ( [string] ) . iterator ( ) : [EOL] if profile . user : [EOL] profile . uuid = profile . guid [EOL] url = reverse ( [string] , kwargs = { [string] : profile . uuid } ) [EOL] fid = f"{ settings . SOCIALHOME_URL }{ url }" [EOL] Profile . objects . filter ( id = profile . id ) . update ( uuid = profile . uuid , fid = fid ) [EOL] else : [EOL] Profile . objects . filter ( id = profile . id ) . update ( uuid = uuid4 ( ) ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ RunPython ( forward , RunPython . noop ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , Any , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] from django . db . migrations import RunPython [EOL] from django . db . utils import IntegrityError [EOL] [EOL] [EOL] def forward ( apps , schema_editor ) : [EOL] User = apps . get_model ( [string] , [string] ) [EOL] for user in User . objects . all ( ) : [EOL] if True in { i . isupper ( ) for i in user . username } : [EOL] try : [EOL] print ( [string] % user . username ) [EOL] User . objects . filter ( id = user . id ) . update ( username = user . username . lower ( ) ) [EOL] except IntegrityError : [EOL] print ( [string] % user . username ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ RunPython ( forward , RunPython . noop ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , Any , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] from django . db . migrations import RunPython [EOL] [EOL] [EOL] def forward ( apps , schema_editor ) : [EOL] UserPreferenceModel = apps . get_model ( [string] , [string] ) [EOL] UserPreferenceModel . objects . filter ( name = [string] ) . update ( raw_value = [string] ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] [EOL] operations = [ RunPython ( forward , RunPython . noop ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , Any , List [EOL] import typing [EOL] from django . db import migrations [EOL] from django . db . migrations import RunPython [EOL] [EOL] [EOL] def forward ( apps , schema_editor ) : [EOL] Profile = apps . get_model ( [string] , [string] ) [EOL] Profile . objects . filter ( protocol = [string] ) . update ( protocol = [string] ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ RunPython ( forward , RunPython . noop ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , Any , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . conf import settings [EOL] from django . db import migrations [EOL] from django . db . migrations import RunPython [EOL] [EOL] [EOL] def forward ( apps , schema_editor ) : [EOL] User = apps . get_model ( [string] , [string] ) [EOL] for user in User . objects . all ( ) : [EOL] user . handle = [string] % ( user . username , settings . SOCIALHOME_DOMAIN ) [EOL] user . save ( ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ RunPython ( forward , RunPython . noop ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , Any , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] from django . db . migrations import RunPython [EOL] from django . db . models import Q [EOL] [EOL] from socialhome . users . utils import get_pony_urls [EOL] [EOL] [EOL] def forward ( apps , schema_editor ) : [EOL] [docstring] [EOL] Profile = apps . get_model ( [string] , [string] ) [EOL] ponies = get_pony_urls ( ) [EOL] for profile in Profile . objects . filter ( Q ( image_url_small = [string] ) | Q ( image_url_medium = [string] ) | Q ( image_url_large = [string] ) ) : [EOL] for idx , attr in enumerate ( [ [string] , [string] , [string] ] ) : [EOL] if not getattr ( profile , attr , None ) : [EOL] setattr ( profile , attr , ponies [ idx ] ) [EOL] profile . save ( ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ RunPython ( forward , RunPython . noop ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] from typing import Tuple , Any , List [EOL] import typing [EOL] from django . conf import settings [EOL] from django . db import migrations [EOL] from django . db . migrations import RunPython [EOL] from django . db . models . query_utils import Q [EOL] from django . urls import reverse [EOL] [EOL] [EOL] def forward ( apps , schema_editor ) : [EOL] Profile = apps . get_model ( [string] , [string] ) [EOL] [comment] [EOL] for profile in Profile . objects . filter ( user_id__isnull = False ) . filter ( Q ( inbox_private = [string] ) | Q ( inbox_public = [string] ) ) : [EOL] url = reverse ( [string] , kwargs = { [string] : profile . uuid } ) [EOL] inbox_private = f"{ settings . SOCIALHOME_URL }{ url } [string] " [EOL] inbox_public = f'{ settings . SOCIALHOME_URL }{ reverse ( [string] ) }' [EOL] Profile . objects . filter ( id = profile . id ) . update ( inbox_private = inbox_private , inbox_public = inbox_public ) [EOL] [EOL] [comment] [EOL] for profile in Profile . objects . filter ( user_id__isnull = True , handle__isnull = False , guid__isnull = False ) . filter ( Q ( inbox_private = [string] ) | Q ( inbox_public = [string] ) ) : [EOL] inbox_private = f' [string] { profile . handle . rsplit ( [string] , [number] ) [ [number] ] } [string] { profile . guid }' [EOL] inbox_public = f' [string] { profile . handle . rsplit ( [string] , [number] ) [ [number] ] } [string] ' [EOL] Profile . objects . filter ( id = profile . id ) . update ( inbox_private = inbox_private , inbox_public = inbox_public ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ RunPython ( forward , RunPython . noop ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] import django . contrib . auth . models [EOL] import django . core . validators [EOL] from django . db import migrations , models [EOL] import uuid [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterModelManagers ( name = [string] , managers = [ ( [string] , django . contrib . auth . models . UserManager ( ) ) , ] , ) , migrations . AddField ( model_name = [string] , name = [string] , field = models . UUIDField ( default = uuid . uuid4 , editable = False , verbose_name = [string] ) , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = models . CharField ( error_messages = { [string] : [string] } , help_text = [string] , max_length = [number] , unique = True , validators = [ django . core . validators . RegexValidator ( [string] , [string] ) ] , verbose_name = [string] ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] import django . core . validators [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AddField ( model_name = [string] , name = [string] , field = models . CharField ( editable = False , max_length = [number] , null = True , unique = True , validators = [ django . core . validators . EmailValidator ( ) ] , verbose_name = [string] ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] import versatileimagefield . fields [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AddField ( model_name = [string] , name = [string] , field = versatileimagefield . fields . PPOIField ( default = [string] , editable = False , max_length = [number] , verbose_name = [string] ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any , List [EOL] import typing [EOL] from django . db import migrations [EOL] from django . db . migrations import RunPython [EOL] [EOL] [EOL] def forward ( apps , schema_editor ) : [EOL] [comment] [EOL] Profile = apps . get_model ( [string] , [string] ) [EOL] for profile in Profile . objects . filter ( user__isnull = False ) . select_related ( [string] ) . iterator ( ) : [EOL] inbox = f"{ profile . fid } [string] " [EOL] Profile . objects . filter ( id = profile . id ) . update ( inbox_private = inbox ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ RunPython ( forward , RunPython . noop ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any , List [EOL] import typing [EOL] from django . conf import settings [EOL] from django . db import migrations [EOL] from django . db . migrations import RunPython [EOL] from django . urls import reverse [EOL] [EOL] [EOL] def forward ( apps , schema_editor ) : [EOL] [docstring] [EOL] [comment] [EOL] Profile = apps . get_model ( [string] , [string] ) [EOL] for profile in Profile . objects . filter ( user__isnull = False ) . select_related ( [string] ) . iterator ( ) : [EOL] url = reverse ( [string] , kwargs = { [string] : profile . user . username } ) [EOL] fid = f"{ settings . SOCIALHOME_URL }{ url }" [EOL] Profile . objects . filter ( id = profile . id ) . update ( fid = fid ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ RunPython ( forward , RunPython . noop ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations , models [EOL] import django . utils . timezone [EOL] import model_utils . fields [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AddField ( model_name = [string] , name = [string] , field = models . ManyToManyField ( related_name = [string] , to = [string] , verbose_name = [string] ) , ) , migrations . AddField ( model_name = [string] , name = [string] , field = models . ManyToManyField ( related_name = [string] , to = [string] , verbose_name = [string] ) , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = model_utils . fields . AutoCreatedField ( default = django . utils . timezone . now , editable = False , verbose_name = [string] ) , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = model_utils . fields . AutoLastModifiedField ( default = django . utils . timezone . now , editable = False , verbose_name = [string] ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , Any , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] from django . db . migrations import RunPython [EOL] [EOL] [EOL] def forward ( apps , schema_editor ) : [EOL] User = apps . get_model ( [string] , [string] ) [EOL] for user in User . objects . all ( ) : [EOL] for profile in user . followers . all ( ) : [EOL] profile . following . add ( user . profile ) [EOL] for profile in user . following . all ( ) : [EOL] user . profile . following . add ( profile ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ RunPython ( forward , RunPython . noop ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , Any , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] from django . db . migrations import RunPython [EOL] [EOL] [EOL] def forward ( apps , schema_editor ) : [EOL] User = apps . get_model ( [string] , [string] ) [EOL] Profile = apps . get_model ( [string] , [string] ) [EOL] for user in User . objects . all ( ) : [EOL] print ( [string] % user . username ) [EOL] Profile . objects . create ( user = user , name = user . name , nickname = user . username , email = user . email , guid = str ( user . guid ) , handle = user . handle , rsa_private_key = user . rsa_private_key , rsa_public_key = user . rsa_public_key , visibility = user . visibility , ) [EOL] [EOL] [EOL] def reverse ( apps , schema_editor ) : [EOL] Profile = apps . get_model ( [string] , [string] ) [EOL] Profile . objects . all ( ) . delete ( ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ RunPython ( forward , reverse ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import socialhome [EOL] from django import template [EOL] [EOL] from socialhome . users . tasks . exports import UserExporter [EOL] [EOL] register = template . Library ( ) [EOL] [EOL] [EOL] @ register . simple_tag ( takes_context = True ) def get_user_export_date ( context ) : [EOL] exporter = UserExporter ( context . get ( [string] ) . user , context . get ( [string] ) ) [EOL] try : [EOL] return exporter . file_date [EOL] except Exception : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
default_app_config = [string] [EOL]	$builtins.str$ 0 0 0
from typing import Tuple [EOL] import typing [EOL] from django . contrib import admin [EOL] from django . contrib . admin import ModelAdmin [EOL] [EOL] from socialhome . content . models import Content , Tag [EOL] [EOL] [EOL] @ admin . register ( Content ) class ContentAdmin ( ModelAdmin ) : [EOL] list_display = ( [string] , [string] , [string] , [string] , [string] ) [EOL] list_filter = ( [string] , [string] , [string] , [string] , [string] ) [EOL] raw_id_fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] readonly_fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] search_fields = ( [string] , [string] , [string] , [string] , [string] ) [EOL] list_select_related = ( [string] , ) [EOL] [EOL] [EOL] @ admin . register ( Tag ) class TagAdmin ( ModelAdmin ) : [EOL] list_display = ( [string] , [string] , [string] , [string] ) [EOL] list_filter = ( [string] , [string] , [string] , [string] ) [EOL] readonly_fields = ( [string] , [string] , [string] , [string] ) [EOL] search_fields = ( [string] , [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] from django . conf . urls import url [EOL] [EOL] from socialhome . content import views [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ url ( [string] , views . ContentCreateView . as_view ( ) , name = [string] ) , url ( [string] , views . ContentCreateView . as_view ( ) , name = [string] ) , url ( [string] , views . ContentUpdateView . as_view ( ) , name = [string] ) , url ( [string] , views . ContentDeleteView . as_view ( ) , name = [string] ) , url ( [string] , views . ContentReplyView . as_view ( ) , name = [string] ) , url ( [string] , views . ContentView . as_view ( ) , name = [string] ) , url ( [string] , views . ContentView . as_view ( ) , name = [string] ) , url ( [string] , views . ContentView . as_view ( ) , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import builtins [EOL] import typing [EOL] import re [EOL] [EOL] import bleach [EOL] from django . conf import settings [EOL] [EOL] [EOL] def safe_text_for_markdown ( text ) : [EOL] [docstring] [EOL] code_blocks , text = code_blocks_add_markers ( text ) [EOL] [comment] [EOL] text = re . sub ( [string] , [string] , text ) [EOL] text = re . sub ( [string] , [string] , text , flags = re . DOTALL ) [EOL] [comment] [EOL] text = bleach . clean ( text or [string] , tags = settings . SOCIALHOME_CONTENT_SAFE_TAGS , attributes = settings . SOCIALHOME_CONTENT_SAFE_ATTRS , ) [EOL] [comment] [EOL] text = text . replace ( [string] , [string] ) [EOL] text = text . replace ( [string] , [string] ) [EOL] text = code_blocks_restore ( code_blocks , text ) [EOL] return text [EOL] [EOL] [EOL] def code_blocks_add_markers ( text ) : [EOL] [docstring] [EOL] [comment] [EOL] codes = re . findall ( [string] , text , flags = re . DOTALL ) + re . findall ( [string] , text , flags = re . DOTALL ) [EOL] [comment] [EOL] safety = [ ] [EOL] for counter , code in enumerate ( codes , [number] ) : [EOL] safety . append ( code ) [EOL] text = text . replace ( code , [string] % counter , [number] ) [EOL] return safety , text [EOL] [EOL] [EOL] def code_blocks_restore ( code_blocks , text ) : [EOL] [comment] [EOL] for counter , code in enumerate ( code_blocks , [number] ) : [EOL] text = text . replace ( [string] % counter , code , [number] ) [EOL] return text [EOL] [EOL] [EOL] def safe_text ( text ) : [EOL] [docstring] [EOL] return bleach . clean ( text or [string] , tags = [ ] , attributes = [ ] , styles = [ ] , strip = True ) [EOL] [EOL] [EOL] def find_urls_in_text ( text ) : [EOL] [docstring] [EOL] urls = [ ] [EOL] [EOL] def link_collector ( attrs , new = False ) : [EOL] if [string] in attrs . get ( ( None , [string] ) , [ ] ) : [EOL] return [EOL] url = attrs . get ( ( None , [string] ) ) [EOL] if url not in urls : [EOL] urls . append ( url ) [EOL] [EOL] bleach . linkify ( text , callbacks = [ link_collector ] , parse_email = False , skip_tags = [ [string] ] ) [EOL] return urls [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] import datetime [EOL] import os [EOL] import re [EOL] [EOL] from django . db import DataError [EOL] from django . db import IntegrityError [EOL] from django . db import transaction [EOL] from django . template . defaultfilters import truncatechars [EOL] from django . utils . timezone import now [EOL] from opengraph import OpenGraph [EOL] from pyembed import core as pyembedcore [comment] [EOL] from pyembed . core import PyEmbed , PyEmbedError [EOL] from pyembed . core . consumer import PyEmbedConsumerError [EOL] from pyembed . core . discovery import ( UrlDiscoverer , PyEmbedDiscoveryError , ChainingDiscoverer , FileDiscoverer , StaticDiscoveryEndpoint , StaticDiscoverer ) [EOL] [EOL] from socialhome . content . models import Content , OEmbedCache , OpenGraphCache [EOL] from socialhome . content . utils import safe_text , find_urls_in_text [EOL] [EOL] [EOL] def fetch_content_preview ( content ) : [EOL] [docstring] [EOL] if not content . show_preview : [EOL] return [EOL] urls = find_urls_in_text ( content . text ) [EOL] if not urls : [EOL] return [EOL] preview_done = fetch_oembed_preview ( content , urls ) [EOL] if not preview_done : [EOL] fetch_og_preview ( content , urls ) [EOL] [EOL] [EOL] def fetch_og_preview ( content , urls ) : [EOL] [docstring] [EOL] for url in urls : [EOL] [comment] [EOL] if OpenGraphCache . objects . filter ( url = url , modified__gte = now ( ) - datetime . timedelta ( days = [number] ) ) . exists ( ) : [EOL] opengraph = OpenGraphCache . objects . get ( url = url ) [EOL] Content . objects . filter ( id = content . id ) . update ( opengraph = opengraph ) [EOL] return opengraph [EOL] try : [EOL] og = OpenGraph ( url = url , parser = [string] ) [EOL] except AttributeError : [EOL] continue [EOL] if not og or ( [string] not in og and [string] not in og and [string] not in og and [string] not in og ) : [EOL] continue [EOL] try : [EOL] title = og . title if [string] in og else og . site_name if [string] in og else [string] [EOL] description = og . description if [string] in og else [string] [EOL] image = og . image if [string] in og else [string] [EOL] try : [EOL] with transaction . atomic ( ) : [EOL] opengraph = OpenGraphCache . objects . create ( url = url , title = truncatechars ( safe_text ( title ) , [number] ) , description = truncatechars ( safe_text ( description ) , [number] ) , image = safe_text ( image ) , ) [EOL] except DataError : [EOL] continue [EOL] except IntegrityError : [EOL] [comment] [EOL] opengraph = OpenGraphCache . objects . get ( url = url ) [EOL] Content . objects . filter ( id = content . id ) . update ( opengraph = opengraph ) [EOL] return opengraph [EOL] Content . objects . filter ( id = content . id ) . update ( opengraph = opengraph ) [EOL] return opengraph [EOL] return False [EOL] [EOL] [EOL] class OEmbedDiscoverer ( ChainingDiscoverer ) : [EOL] [docstring] [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( [ FileDiscoverer ( os . path . join ( os . path . dirname ( pyembedcore . __file__ ) , [string] , [string] ) ) , UrlDiscoverer ( [string] ) , StaticDiscoverer ( endpoints = [ StaticDiscoveryEndpoint ( { [string] : [ [string] ] , [string] : [string] , } ) ] ) ] ) [EOL] [EOL] [EOL] def fetch_oembed_preview ( content , urls ) : [EOL] [docstring] [EOL] for url in urls : [EOL] [comment] [EOL] if OEmbedCache . objects . filter ( url = url , modified__gte = now ( ) - datetime . timedelta ( days = [number] ) ) . exists ( ) : [EOL] oembed = OEmbedCache . objects . get ( url = url ) [EOL] Content . objects . filter ( id = content . id ) . update ( oembed = oembed ) [EOL] return oembed [EOL] [comment] [EOL] options = { } [EOL] if url . startswith ( [string] ) : [EOL] if len ( url . split ( [string] ) ) < [number] : [EOL] [comment] [EOL] [comment] [EOL] continue [EOL] [comment] [EOL] [comment] [EOL] options = { [string] : [string] , [string] : [string] } [EOL] try : [EOL] oembed = PyEmbed ( discoverer = OEmbedDiscoverer ( ) ) . embed ( url , ** options ) [EOL] except ( PyEmbedError , PyEmbedDiscoveryError , PyEmbedConsumerError , ValueError ) : [EOL] continue [EOL] if not oembed : [EOL] continue [EOL] [comment] [EOL] oembed = re . sub ( [string] , [string] , oembed ) [EOL] oembed = re . sub ( [string] , [string] , oembed ) [EOL] try : [EOL] with transaction . atomic ( ) : [EOL] oembed = OEmbedCache . objects . create ( url = url , oembed = oembed ) [EOL] except IntegrityError : [EOL] [comment] [EOL] oembed = OEmbedCache . objects . get ( url = url ) [EOL] Content . objects . filter ( id = content . id ) . update ( oembed = oembed ) [EOL] return oembed [EOL] Content . objects . filter ( id = content . id ) . update ( oembed = oembed ) [EOL] return oembed [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Type , Dict , Set , Any , List [EOL] import builtins [EOL] import typing [EOL] import socialhome [EOL] import re [EOL] from typing import Dict , Any , Set , List [EOL] [EOL] from django . db . models import Q [EOL] from django . utils . translation import ngettext as _ [EOL] from enumfields . drf import EnumField [EOL] from federation . utils . text import validate_handle [EOL] from rest_framework import serializers [EOL] from rest_framework . fields import SerializerMethodField , BooleanField [EOL] [EOL] from socialhome . content . enums import ContentType [EOL] from socialhome . content . models import Content , Tag [EOL] from socialhome . content . utils import safe_text_for_markdown [EOL] from socialhome . enums import Visibility [EOL] from socialhome . users . models import Profile [EOL] from socialhome . users . serializers import LimitedProfileSerializer [EOL] [EOL] [EOL] class RecipientsField ( serializers . Field ) : [EOL] def get_value ( self , dictionary ) : [EOL] if dictionary . get ( [string] , Visibility . PUBLIC . value ) != Visibility . LIMITED . value : [EOL] return set ( ) [EOL] [EOL] raw_recipients = set ( ) [EOL] for r in dictionary . get ( [string] , [string] ) : [EOL] r2 = r . strip ( ) [EOL] if len ( r2 ) > [number] : [EOL] raw_recipients . add ( r2 ) [EOL] [EOL] return raw_recipients [EOL] [EOL] def get_attribute ( self , instance ) : [EOL] [docstring] [EOL] handles = instance . limited_visibilities . filter ( fid__isnull = True ) . order_by ( [string] ) . values_list ( [string] , flat = True ) [EOL] fids = instance . limited_visibilities . filter ( handle__isnull = True ) . order_by ( [string] ) . values_list ( [string] , flat = True ) [EOL] both = instance . limited_visibilities . filter ( handle__isnull = False , fid__isnull = False , ) . order_by ( [string] ) . values_list ( [string] , flat = True ) [EOL] return set ( list ( handles ) + list ( fids ) + list ( both ) ) [EOL] [EOL] def to_internal_value ( self , data ) : [EOL] return data [EOL] [EOL] def to_representation ( self , value ) : [EOL] return list ( value ) [EOL] [EOL] [EOL] class ContentSerializer ( serializers . ModelSerializer ) : [EOL] author = LimitedProfileSerializer ( read_only = True ) [EOL] content_type = EnumField ( ContentType , ints_as_names = True , read_only = True ) [EOL] include_following = BooleanField ( default = False ) [EOL] recipients = RecipientsField ( ) [EOL] user_is_author = SerializerMethodField ( ) [EOL] user_has_shared = SerializerMethodField ( ) [EOL] tags = serializers . SlugRelatedField ( many = True , read_only = True , slug_field = [string] ) [EOL] through = SerializerMethodField ( ) [EOL] through_author = SerializerMethodField ( ) [EOL] visibility = EnumField ( Visibility , lenient = True , ints_as_names = True , required = False ) [EOL] [EOL] class Meta : [EOL] model = Content [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] read_only_fields = ( [string] , [string] [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] self . cache_through_authors ( ) [EOL] [EOL] def cache_through_authors ( self ) : [EOL] [docstring] [EOL] request = self . context . get ( [string] ) [EOL] if not self . context . get ( [string] ) or not request : [EOL] self . context [ [string] ] = { } [EOL] return [EOL] throughs_ids = self . context [ [string] ] [EOL] ids = { value for _key , value in throughs_ids . items ( ) } [EOL] through_to_id = { value : key for key , value in throughs_ids . items ( ) } [EOL] throughs = Content . objects . visible_for_user ( request . user ) . select_related ( [string] ) . filter ( id__in = list ( ids ) ) [EOL] self . context [ [string] ] = { through_to_id . get ( c . id , c . id ) : c . author for c in throughs } [EOL] [EOL] def get_through ( self , obj ) : [EOL] [docstring] [EOL] throughs = self . context . get ( [string] ) [EOL] if not throughs : [EOL] return obj . id [EOL] return throughs . get ( obj . id , obj . id ) [EOL] [EOL] def get_through_author ( self , obj ) : [EOL] throughs_authors = self . context . get ( [string] ) [EOL] if not throughs_authors : [EOL] return { } [EOL] through_author = throughs_authors . get ( obj . id , obj . author ) [EOL] if through_author != obj . author : [EOL] return LimitedProfileSerializer ( instance = through_author , read_only = True , context = { [string] : self . context . get ( [string] ) } , ) . data [EOL] return { } [EOL] [EOL] def get_user_is_author ( self , obj ) : [EOL] request = self . context . get ( [string] ) [EOL] if not request : [EOL] return False [EOL] return bool ( request . user . is_authenticated and obj . author == request . user . profile ) [EOL] [EOL] def get_user_has_shared ( self , obj ) : [EOL] request = self . context . get ( [string] ) [EOL] if not request : [EOL] return False [EOL] return Content . has_shared ( obj . id , request . user . profile . id ) if hasattr ( request . user , [string] ) else False [EOL] [EOL] def validate_parent ( self , value ) : [EOL] [comment] [EOL] if self . instance and value != self . instance . parent : [EOL] raise serializers . ValidationError ( [string] ) [EOL] [comment] [EOL] if not self . instance and value : [EOL] request = self . context . get ( [string] ) [EOL] if not value . visible_for_user ( request . user ) : [EOL] raise serializers . ValidationError ( [string] ) [EOL] [EOL] return value [EOL] [EOL] def to_representation ( self , instance ) : [EOL] result = dict ( super ( ) . to_representation ( instance ) ) [EOL] if not self . get_user_is_author ( instance ) : [EOL] result [ [string] ] = [string] [EOL] [EOL] return result [EOL] [EOL] def save ( self , ** kwargs ) : [EOL] [docstring] [EOL] updating = self . instance is not None [EOL] raw_recipients = self . validated_data . pop ( [string] , [string] ) [EOL] parent = self . validated_data . get ( [string] ) [EOL] user = self . context . get ( [string] ) . user [EOL] [EOL] [comment] [EOL] previous_recipients = [ ] [EOL] if updating : [EOL] if not self . instance . author_id : [EOL] self . instance . author = user . profile [EOL] [EOL] if self . instance . limited_visibilities . count ( ) : [EOL] previous_recipients = self . instance . limited_visibilities . values_list ( [string] , flat = True ) [EOL] [EOL] if parent is not None : [EOL] self . instance . parent = parent [EOL] [comment] [EOL] self . instance . visibility = None [EOL] [EOL] content = super ( ) . save ( ** kwargs ) [EOL] [EOL] if content . visibility != Visibility . LIMITED or content . content_type == ContentType . SHARE : [EOL] return content [EOL] [EOL] if content . content_type == ContentType . CONTENT : [EOL] [comment] [EOL] recipients = Profile . objects . filter ( Q ( handle__in = raw_recipients ) | Q ( fid__in = raw_recipients ) ) . visible_for_user ( user ) [EOL] [EOL] [comment] [EOL] if self . validated_data . get ( [string] ) : [EOL] recipients = recipients | user . profile . following . all ( ) [EOL] recipients = recipients . distinct ( ) [EOL] elif content . content_type == ContentType . REPLY : [EOL] recipients = content . root_parent . limited_visibilities . all ( ) [EOL] else : [EOL] return content [EOL] [EOL] [comment] [EOL] if previous_recipients : [EOL] to_remove = set ( previous_recipients ) . difference ( set ( recipients . values_list ( [string] , flat = True ) ) ) [EOL] for remove_id in to_remove : [EOL] profile = Profile . objects . get ( id = remove_id ) [EOL] content . limited_visibilities . remove ( profile ) [EOL] [EOL] [comment] [EOL] content . limited_visibilities . clear ( ) [EOL] content . limited_visibilities . set ( recipients ) [EOL] [EOL] return content [EOL] [EOL] def validate ( self , data ) : [EOL] [docstring] [EOL] parent = data . get ( [string] ) [EOL] if parent : [EOL] if data . get ( [string] ) and parent . visibility != data . get ( [string] ) : [EOL] raise serializers . ValidationError ( [string] ) [EOL] data [ [string] ] = parent . visibility [EOL] else : [EOL] if not self . instance and not data . get ( [string] ) : [EOL] raise serializers . ValidationError ( [string] ) [EOL] [EOL] return data [EOL] [EOL] def validate_text ( self , value ) : [EOL] [docstring] [EOL] user = self . context . get ( [string] ) . user [EOL] if user . trusted_editor : [EOL] return value [EOL] return safe_text_for_markdown ( value ) [EOL] [EOL] def validate_recipients ( self , value ) : [EOL] if self . initial_data . get ( [string] , Visibility . PUBLIC . value ) != Visibility . LIMITED . value : [EOL] return value [EOL] [EOL] if not value and not self . initial_data . get ( [string] ) : [EOL] raise serializers . ValidationError ( [string] ) [EOL] [EOL] user = self . context . get ( [string] ) . user [EOL] [EOL] validation_errors = [ ] [EOL] for recipient in value : [EOL] if not validate_handle ( recipient ) and not re . match ( [string] , recipient ) : [EOL] validation_errors . append ( recipient ) [EOL] [EOL] if len ( validation_errors ) > [number] : [EOL] msg = _ ( [string] , [string] , len ( validation_errors ) ) [EOL] [EOL] raise serializers . ValidationError ( { [string] : [string] , [string] : msg , [string] : validation_errors , } ) [EOL] [EOL] recipient_profiles = Profile . objects . filter ( Q ( handle__in = value ) | Q ( fid__in = value ) ) . visible_for_user ( user ) [EOL] [EOL] [comment] [EOL] if recipient_profiles . distinct ( ) . count ( ) != len ( set ( value ) ) : [EOL] raise serializers . ValidationError ( [string] ) [EOL] [EOL] return value [EOL] [EOL] [EOL] class TagSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = Tag [EOL] fields = ( [string] , [string] , [string] ) [EOL] read_only_fields = ( [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.Tag]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.strtyping.Type[socialhome.content.models.Tag]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0
from typing import Type , Dict , Any [EOL] import logging [EOL] import typing [EOL] import socialhome [EOL] import logging [EOL] [EOL] from braces . views import UserPassesTestMixin , LoginRequiredMixin [EOL] from django . core . exceptions import ValidationError [EOL] from django . urls import reverse [EOL] from django . http import HttpResponseRedirect [EOL] from django . http . response import Http404 [EOL] from django . shortcuts import get_object_or_404 [EOL] from django . template . loader import render_to_string [EOL] from django . templatetags . static import static [EOL] from django . utils . decorators import method_decorator [EOL] from django . views . generic import CreateView , UpdateView , DeleteView , DetailView [EOL] from django . views . generic . base import TemplateView [EOL] from django . views . generic . detail import SingleObjectMixin [EOL] from federation . entities . activitypub . django . views import activitypub_object_view [EOL] [EOL] from socialhome . content . enums import ContentType [EOL] from socialhome . content . forms import ContentForm [EOL] from socialhome . content . models import Content [EOL] from socialhome . content . serializers import ContentSerializer [EOL] from socialhome . streams . enums import StreamType [EOL] from socialhome . utils import get_full_url [EOL] [EOL] logger = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] class ContentVisibleForUserMixin ( UserPassesTestMixin ) : [EOL] def test_func ( self , user ) : [EOL] [docstring] [EOL] object = self . get_object ( ) [EOL] return ( bool ( object ) and object . visible_for_user ( user ) ) [EOL] [EOL] [EOL] class UserOwnsContentMixin ( UserPassesTestMixin ) : [EOL] raise_exception = Http404 [EOL] [EOL] def test_func ( self , user ) : [EOL] [docstring] [EOL] object = self . get_object ( ) [EOL] return ( bool ( object ) and hasattr ( user , [string] ) and object . author == user . profile ) [EOL] [EOL] [EOL] class ContentCreateView ( LoginRequiredMixin , TemplateView ) : [EOL] model = Content [EOL] template_name = [string] [EOL] is_reply = False [EOL] [EOL] def get_context_data ( self , ** kwargs ) : [EOL] context = super ( ) . get_context_data ( ** kwargs ) [EOL] context [ [string] ] = render_to_string ( [string] , { } , request = self . request ) [EOL] context [ [string] ] = self . is_reply [EOL] context [ [string] ] = self . get_json_context ( ) [EOL] return context [EOL] [EOL] def get_json_context ( self ) : [EOL] return { [string] : getattr ( getattr ( self . request . user , [string] , None ) , [string] , None ) , [string] : bool ( self . request . user . is_authenticated ) , } [EOL] [EOL] [EOL] class ContentReplyView ( ContentVisibleForUserMixin , ContentCreateView , SingleObjectMixin ) : [EOL] is_reply = True [EOL] [EOL] def dispatch ( self , request , * args , ** kwargs ) : [EOL] content_id = kwargs . get ( [string] ) [EOL] self . object = self . get_object ( ) [EOL] self . parent = get_object_or_404 ( Content , id = content_id ) [EOL] return super ( ) . dispatch ( request , * args , ** kwargs ) [EOL] [EOL] def get_success_url ( self ) : [EOL] return self . parent . get_absolute_url ( ) [EOL] [EOL] [EOL] class ContentUpdateView ( UserOwnsContentMixin , DetailView ) : [EOL] model = Content [EOL] template_name = [string] [EOL] [EOL] def get_context_data ( self , ** kwargs ) : [EOL] context = super ( ) . get_context_data ( ** kwargs ) [EOL] context [ [string] ] = self . is_reply [EOL] context [ [string] ] = self . get_json_context ( ) [EOL] return context [EOL] [EOL] def get_json_context ( self ) : [EOL] context = { [string] : getattr ( getattr ( self . request . user , [string] , None ) , [string] , None ) , [string] : bool ( self . request . user . is_authenticated ) , [string] : self . is_reply , [string] : self . object . federate , [string] : self . object . include_following , [string] : self . object . pinned , [string] : self . object . show_preview , [string] : self . object . visibility . value } [EOL] [EOL] parent_id = getattr ( getattr ( self . object , [string] ) , [string] , None ) [EOL] if parent_id is not None : [EOL] context [ [string] ] = parent_id [EOL] [EOL] serialized = ContentSerializer ( self . object , context = { [string] : self . request } ) . data [EOL] context [ [string] ] = serialized . get ( [string] , [ ] ) [EOL] context [ [string] ] = serialized . get ( [string] , [string] ) [EOL] [EOL] return context [EOL] [EOL] @ property def is_reply ( self ) : [EOL] return True if self . object . content_type == ContentType . REPLY else False [EOL] [EOL] [EOL] [comment] [EOL] class ContentDeleteView ( UserOwnsContentMixin , DeleteView ) : [EOL] model = Content [EOL] template_name = [string] [EOL] [EOL] def get_success_url ( self ) : [EOL] next = self . request . GET . get ( [string] ) [EOL] if next : [EOL] return next [EOL] return reverse ( [string] ) [EOL] [EOL] [EOL] @ method_decorator ( activitypub_object_view , name = [string] ) class ContentView ( ContentVisibleForUserMixin , DetailView ) : [EOL] model = Content [EOL] template_name = [string] [EOL] [EOL] def dispatch ( self , request , * args , ** kwargs ) : [EOL] [docstring] [EOL] self . object = self . get_object ( ) [EOL] if self . object . content_type == ContentType . SHARE : [EOL] return HttpResponseRedirect ( self . object . share_of . get_absolute_url ( ) ) [EOL] elif self . object . content_type == ContentType . REPLY : [EOL] return HttpResponseRedirect ( self . object . root_parent . get_absolute_url ( ) ) [EOL] return super ( ) . dispatch ( request , * args , ** kwargs ) [EOL] [EOL] def get_object ( self , queryset = None ) : [EOL] uuid = self . kwargs . get ( [string] ) [EOL] if uuid : [EOL] try : [EOL] return get_object_or_404 ( Content , uuid = uuid ) [EOL] except ValidationError as ex : [EOL] logger . debug ( [string] , ex ) [EOL] raise Http404 ( ) [EOL] return super ( ) . get_object ( queryset = queryset ) [EOL] [EOL] def get_context_data ( self , ** kwargs ) : [EOL] context = super ( ) . get_context_data ( ** kwargs ) [EOL] context [ [string] ] = self . get_json_context ( ) [EOL] context [ [string] ] = self . get_page_meta ( ) [EOL] return context [EOL] [EOL] def get_json_context ( self ) : [EOL] return { [string] : getattr ( getattr ( self . request . user , [string] , None ) , [string] , None ) , [string] : bool ( self . request . user . is_authenticated ) , [string] : [string] % ( StreamType . CONTENT . value , self . object . channel_group_name ) , [string] : self . get_serialized_content ( ) , } [EOL] [EOL] def get_page_meta ( self ) : [EOL] return { [string] : [string] , [string] : self . object . short_text , [string] : self . object . url , [string] : self . object . short_text , [string] : get_full_url ( static ( [string] ) ) , [string] : self . object . author . home_url , [string] : self . object . author . name , } [EOL] [EOL] def get_serialized_content ( self ) : [EOL] serializer = ContentSerializer ( instance = self . object , context = { [string] : self . request } ) [EOL] return serializer . data [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.views.UserOwnsContentMixin]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.Content]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.Content]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.Content]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.Content]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $socialhome.content.serializers.ContentSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $socialhome.content.serializers.ContentSerializer$ 0 0 0
from typing import Type , Any , List , Set [EOL] import builtins [EOL] import typing [EOL] import socialhome [EOL] import federation [EOL] import datetime [EOL] import re [EOL] from uuid import uuid4 [EOL] [EOL] import arrow [EOL] import bleach [EOL] from commonmark import commonmark [EOL] from django . conf import settings [EOL] from django . contrib . contenttypes . fields import GenericRelation [EOL] from django . core . exceptions import ValidationError [EOL] from django . db import models [EOL] from django . db . models . aggregates import Max [EOL] from django . template . defaultfilters import truncatechars [EOL] from django . template . loader import render_to_string [EOL] from django . urls import reverse [EOL] from django . utils . functional import cached_property [EOL] from django . utils . text import slugify [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from enumfields import EnumIntegerField [EOL] from federation . entities . activitypub . enums import ActivityType [EOL] from federation . utils . text import process_text_links , find_tags [EOL] from memoize import memoize , delete_memoized [EOL] from model_utils . fields import AutoCreatedField , AutoLastModifiedField [EOL] [EOL] from socialhome . activities . models import Activity [EOL] from socialhome . content . enums import ContentType [EOL] from socialhome . content . querysets import TagQuerySet , ContentManager [EOL] from socialhome . enums import Visibility [EOL] [EOL] [EOL] class OpenGraphCache ( models . Model ) : [EOL] url = models . URLField ( _ ( [string] ) , unique = True ) [EOL] title = models . CharField ( _ ( [string] ) , max_length = [number] , blank = True ) [EOL] description = models . TextField ( _ ( [string] ) , blank = True ) [EOL] image = models . URLField ( _ ( [string] ) , blank = True ) [EOL] modified = AutoLastModifiedField ( _ ( [string] ) , db_index = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] % ( self . url , truncatechars ( self . title , [number] ) ) [EOL] [EOL] [EOL] class OEmbedCache ( models . Model ) : [EOL] url = models . URLField ( _ ( [string] ) , unique = True ) [EOL] oembed = models . TextField ( _ ( [string] ) ) [EOL] modified = AutoLastModifiedField ( _ ( [string] ) , db_index = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . url [EOL] [EOL] [EOL] class Tag ( models . Model ) : [EOL] name = models . CharField ( _ ( [string] ) , max_length = [number] , unique = True ) [EOL] created = AutoCreatedField ( _ ( [string] ) ) [EOL] uuid = models . UUIDField ( unique = True , default = uuid4 , editable = False ) [EOL] [EOL] objects = TagQuerySet . as_manager ( ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] % self . name [EOL] [EOL] def get_absolute_url ( self ) : [EOL] slugified_name = slugify ( self . name ) [EOL] if not slugified_name : [EOL] return reverse ( [string] , kwargs = { [string] : str ( self . uuid ) } ) [EOL] return reverse ( [string] , kwargs = { [string] : slugified_name } ) [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] self . name = self . name . strip ( ) . lower ( ) [EOL] super ( ) . save ( ) [EOL] [EOL] @ cached_property def channel_group_name ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] return ( [string] % ( self . id , slugify ( self . name ) ) ) [ : [number] ] [EOL] [EOL] [EOL] class Content ( models . Model ) : [EOL] [comment] [EOL] uuid = models . UUIDField ( unique = True , blank = True , null = True , editable = False ) [EOL] [EOL] text = models . TextField ( _ ( [string] ) , blank = True ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] guid = models . CharField ( _ ( [string] ) , max_length = [number] , unique = True , editable = False , blank = True , null = True ) [EOL] [EOL] author = models . ForeignKey ( [string] , on_delete = models . CASCADE , verbose_name = _ ( [string] ) ) [EOL] visibility = EnumIntegerField ( Visibility , default = Visibility . PUBLIC , db_index = True ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] fid = models . URLField ( _ ( [string] ) , editable = False , max_length = [number] , unique = True , blank = True , null = True ) [EOL] [EOL] [comment] [EOL] pinned = models . BooleanField ( _ ( [string] ) , default = False , db_index = True ) [EOL] [comment] [EOL] order = models . PositiveIntegerField ( verbose_name = _ ( [string] ) , default = [number] , db_index = True ) [EOL] [EOL] [comment] [EOL] service_label = models . CharField ( _ ( [string] ) , blank = True , max_length = [number] ) [EOL] [EOL] [comment] [EOL] show_preview = models . BooleanField ( _ ( [string] ) , default = True , help_text = _ ( [string] [string] ) , ) [EOL] oembed = models . ForeignKey ( OEmbedCache , verbose_name = _ ( [string] ) , on_delete = models . SET_NULL , null = True ) [EOL] opengraph = models . ForeignKey ( OpenGraphCache , verbose_name = _ ( [string] ) , on_delete = models . SET_NULL , null = True ) [EOL] [EOL] mentions = models . ManyToManyField ( [string] , verbose_name = _ ( [string] ) , related_name = [string] ) [EOL] tags = models . ManyToManyField ( Tag , verbose_name = _ ( [string] ) , related_name = [string] ) [EOL] [EOL] parent = models . ForeignKey ( [string] , on_delete = models . CASCADE , verbose_name = _ ( [string] ) , related_name = [string] , null = True , blank = True , ) [EOL] [EOL] share_of = models . ForeignKey ( [string] , on_delete = models . CASCADE , verbose_name = _ ( [string] ) , related_name = [string] , null = True , blank = True , ) [EOL] [EOL] federate = models . BooleanField ( _ ( [string] ) , default = True , help_text = _ ( [string] [string] ) ) [EOL] [EOL] [comment] [EOL] limited_visibilities = models . ManyToManyField ( [string] , verbose_name = _ ( [string] ) , related_name = [string] , ) [EOL] include_following = models . BooleanField ( _ ( [string] ) , default = False , help_text = _ ( [string] ) , ) [EOL] [EOL] [comment] [EOL] remote_created = models . DateTimeField ( _ ( [string] ) , blank = True , null = True ) [EOL] created = AutoCreatedField ( _ ( [string] ) , db_index = True ) [EOL] modified = AutoLastModifiedField ( _ ( [string] ) ) [EOL] [EOL] [comment] [EOL] content_type = EnumIntegerField ( ContentType , default = ContentType . CONTENT , db_index = True , editable = False ) [EOL] local = models . BooleanField ( _ ( [string] ) , default = False , editable = False ) [EOL] rendered = models . TextField ( _ ( [string] ) , blank = True , editable = False ) [EOL] reply_count = models . PositiveIntegerField ( _ ( [string] ) , default = [number] , editable = False ) [EOL] shares_count = models . PositiveIntegerField ( _ ( [string] ) , default = [number] , editable = False ) [EOL] [comment] [EOL] root_parent = models . ForeignKey ( [string] , on_delete = models . CASCADE , verbose_name = _ ( [string] ) , related_name = [string] , null = True , blank = True , ) [EOL] [EOL] [comment] [EOL] activities = GenericRelation ( Activity ) [EOL] [EOL] objects = ContentManager ( ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f"{ truncatechars ( self . text , [number] ) } [string] { self . content_type } [string] { self . visibility } [string] { self . fid or self . guid } [string] " [EOL] [EOL] def cache_data ( self , commit = False ) : [EOL] [docstring] [EOL] [comment] [EOL] self . local = self . author . user is not None [EOL] if self . pk : [EOL] [comment] [EOL] share_ids = Content . objects . filter ( share_of = self ) . values_list ( [string] , flat = True ) [EOL] self . reply_count = self . all_children . count ( ) + Content . objects . filter ( parent_id__in = share_ids ) . count ( ) [EOL] [comment] [EOL] self . shares_count = self . shares . count ( ) [EOL] if commit : [EOL] Content . objects . filter ( id = self . id ) . update ( local = self . local , reply_count = self . reply_count , shares_count = self . shares_count , ) [EOL] [EOL] def cache_related_object_data ( self ) : [EOL] [docstring] [EOL] if self . share_of : [EOL] self . share_of . cache_data ( commit = True ) [EOL] if self . parent : [EOL] self . parent . cache_data ( commit = True ) [EOL] if self . parent . share_of : [EOL] self . parent . share_of . cache_data ( commit = True ) [EOL] if self . root_parent : [EOL] self . root_parent . cache_data ( commit = True ) [EOL] [EOL] def create_activity ( self , activity_type ) : [EOL] [docstring] [EOL] from django . contrib . contenttypes . models import ContentType as DjangoContentType [EOL] return Activity . objects . create ( content_type = DjangoContentType . objects . get_for_model ( Content ) , fid = f"{ self . author . fid } [string] { uuid4 ( ) }" , object_id = self . id , profile = self . author , type = activity_type , ) [EOL] [EOL] def extract_mentions ( self ) : [EOL] [comment] [EOL] [comment] [EOL] from socialhome . users . models import Profile [EOL] mentions = re . findall ( [string] , self . text ) [EOL] if not mentions : [EOL] self . mentions . clear ( ) [EOL] handles = { s . split ( [string] ) [ [number] ] . strip ( [string] ) for s in mentions } [EOL] [EOL] existing_handles = set ( self . mentions . values_list ( [string] , flat = True ) ) [EOL] to_remove = existing_handles . difference ( handles ) [EOL] to_add = handles . difference ( existing_handles ) [EOL] for handle in to_remove : [EOL] try : [EOL] self . mentions . remove ( Profile . objects . get ( handle = handle ) ) [EOL] except Profile . DoesNotExist : [EOL] pass [EOL] for handle in to_add : [EOL] try : [EOL] self . mentions . add ( Profile . objects . get ( handle = handle ) ) [EOL] except Profile . DoesNotExist : [EOL] pass [EOL] [EOL] def get_absolute_url ( self ) : [EOL] if self . slug : [EOL] return reverse ( [string] , kwargs = { [string] : self . id , [string] : self . slug } ) [EOL] return reverse ( [string] , kwargs = { [string] : self . id } ) [EOL] [EOL] @ property def has_twitter_oembed ( self ) : [EOL] return self . rendered . find ( [string] ) > - [number] [EOL] [EOL] @ property def humanized_timestamp ( self ) : [EOL] [docstring] [EOL] return arrow . get ( self . modified ) . humanize ( ) [EOL] [EOL] @ cached_property def root ( self ) : [EOL] [docstring] [EOL] if self . content_type == ContentType . CONTENT : [EOL] return self [EOL] elif self . content_type == ContentType . REPLY : [EOL] return self . parent . root [EOL] elif self . content_type == ContentType . SHARE : [EOL] return self . share_of . root [EOL] [EOL] @ property def timestamp ( self ) : [EOL] return arrow . get ( self . modified ) . format ( ) [EOL] [EOL] @ property def url ( self ) : [EOL] return [string] % ( settings . SOCIALHOME_URL , self . get_absolute_url ( ) ) [EOL] [EOL] @ property def url_uuid ( self ) : [EOL] return [string] % ( settings . SOCIALHOME_URL , reverse ( [string] , kwargs = { [string] : self . uuid } ) ) [EOL] [EOL] @ staticmethod @ memoize ( timeout = [number] ) def has_shared ( content_id , profile_id ) : [EOL] return Content . objects . filter ( id = content_id , shares__author_id = profile_id ) . exists ( ) [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] if self . parent and self . share_of : [EOL] raise ValueError ( [string] ) [EOL] self . cache_data ( ) [EOL] [EOL] if self . parent : [EOL] self . content_type = ContentType . REPLY [EOL] [comment] [EOL] if self . visibility is None : [EOL] self . visibility = self . root . visibility [EOL] self . pinned = False [EOL] self . root_parent = self . root [EOL] elif self . share_of : [EOL] self . content_type = ContentType . SHARE [EOL] [EOL] if not self . uuid : [EOL] self . uuid = uuid4 ( ) [EOL] if not self . pk and self . local : [EOL] if not self . guid : [EOL] self . guid = str ( self . uuid ) [EOL] if not self . fid : [EOL] self . fid = self . url_uuid [EOL] if self . pinned : [EOL] max_order = Content . objects . top_level ( ) . filter ( author = self . author ) . aggregate ( Max ( [string] ) ) [ [string] ] [EOL] if max_order is not None : [comment] [EOL] self . order = max_order + [number] [EOL] [EOL] if not self . fid and not self . guid : [EOL] raise ValueError ( [string] ) [EOL] [EOL] self . fix_local_uploads ( ) [EOL] super ( ) . save ( * args , ** kwargs ) [EOL] self . cache_related_object_data ( ) [EOL] [EOL] def save_tags ( self , tags ) : [EOL] [docstring] [EOL] current = set ( self . tags . values_list ( [string] , flat = True ) ) [EOL] if tags == current : [EOL] return [EOL] to_add = tags - current [EOL] tags_to_add = [ ] [EOL] for tag_name in to_add : [EOL] tag , _created = Tag . objects . get_or_create ( name = tag_name ) [EOL] tags_to_add . append ( tag ) [EOL] final_tags = tags_to_add + list ( Tag . objects . filter ( name__in = tags & current ) ) [EOL] self . tags . set ( final_tags ) [EOL] [EOL] def share ( self , profile ) : [EOL] [docstring] [EOL] if self . content_type != ContentType . CONTENT : [EOL] [comment] [EOL] raise ValidationError ( [string] ) [EOL] if self . author == profile : [EOL] raise ValidationError ( [string] ) [EOL] if not self . visible_for_user ( profile . user ) : [EOL] raise ValidationError ( [string] ) [EOL] if self . shares . filter ( author = profile ) . exists ( ) : [EOL] raise ValidationError ( [string] ) [EOL] [comment] [EOL] share , _created = Content . objects . get_or_create ( author = profile , share_of = self , defaults = { [string] : self . visibility , } ) [EOL] delete_memoized ( Content . has_shared , self . id , profile . id ) [EOL] return share [EOL] [EOL] def unshare ( self , profile ) : [EOL] [docstring] [EOL] if not self . shares . filter ( author = profile ) . exists ( ) : [EOL] raise ValidationError ( [string] ) [EOL] try : [EOL] share = Content . objects . get ( author = profile , share_of = self ) [EOL] except Content . DoesNotExist : [EOL] [comment] [EOL] pass [EOL] else : [EOL] share . delete ( ) [EOL] delete_memoized ( Content . has_shared , self . id , profile . id ) [EOL] [EOL] @ cached_property def is_nsfw ( self ) : [EOL] return self . text . lower ( ) . find ( [string] ) > - [number] [EOL] [EOL] @ property def effective_modified ( self ) : [EOL] if self . remote_created : [EOL] return self . remote_created [EOL] return self . modified [EOL] [EOL] @ property def edited ( self ) : [EOL] [docstring] [EOL] return self . modified > self . created + datetime . timedelta ( minutes = [number] ) [EOL] [EOL] @ cached_property def short_text ( self ) : [EOL] [comment] [EOL] cleaned_text = bleach . clean ( self . text , strip = True ) [EOL] [comment] [EOL] cleaned_text = re . sub ( [string] , [string] , cleaned_text ) [EOL] return truncatechars ( cleaned_text , [number] ) or [string] [EOL] [EOL] @ property def short_text_inline ( self ) : [EOL] return self . short_text . replace ( [string] , [string] ) . replace ( [string] , [string] ) [EOL] [EOL] @ cached_property def slug ( self ) : [EOL] return slugify ( self . short_text ) [EOL] [EOL] @ cached_property def channel_group_name ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] return ( [string] % ( self . id , self . uuid ) ) [EOL] [EOL] def render ( self ) : [EOL] [docstring] [EOL] text = self . get_and_linkify_tags ( ) [EOL] rendered = commonmark ( text , ignore_html_blocks = True ) . strip ( ) [EOL] rendered = process_text_links ( rendered ) [EOL] if self . show_preview : [EOL] if self . oembed : [EOL] rendered = [string] % ( rendered , self . oembed . oembed ) [EOL] if self . opengraph : [EOL] image_in_text = self . opengraph . image and self . text . find ( self . opengraph . image ) > - [number] [EOL] rendered = [string] % ( rendered , render_to_string ( [string] , { [string] : image_in_text , [string] : self . opengraph , } ) ) [EOL] self . rendered = rendered [EOL] Content . objects . filter ( id = self . id ) . update ( rendered = rendered ) [EOL] [EOL] def get_and_linkify_tags ( self ) : [EOL] [docstring] [EOL] def linkifier ( tag ) : [EOL] return [string] % ( tag , reverse ( [string] , kwargs = { [string] : tag . lower ( ) } ) ) [EOL] found_tags , text = find_tags ( self . text , replacer = linkifier ) [EOL] self . save_tags ( found_tags ) [EOL] return text [EOL] [EOL] def fix_local_uploads ( self ) : [EOL] [docstring] [EOL] self . text = re . sub ( [string] , [string] % settings . SOCIALHOME_URL , self . text ) [EOL] [EOL] def visible_for_user ( self , user ) : [EOL] [docstring] [EOL] if self . visibility == Visibility . PUBLIC : [EOL] return True [EOL] if user . is_authenticated : [EOL] if self . author == user . profile or self . visibility == Visibility . SITE : [EOL] return True [EOL] if self . limited_visibilities . filter ( id = user . profile . id ) . exists ( ) : [EOL] return True [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.OpenGraphCache]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.OpenGraphCache]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.OpenGraphCache]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.OpenGraphCache]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.OpenGraphCache]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.OEmbedCache]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.OEmbedCache]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.OEmbedCache]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.Tag]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.Tag]$ 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.Tag]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.Tag]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.Content]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.Content]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.Content]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.Content]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.Content]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.Content]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.Content]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.Content]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.Content]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.Content]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.Content]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.Content]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.Content]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.Content]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.Content]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.Content]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.Content]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.Content]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.Content]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.Content]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.Content]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.Content]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.Content]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.Content]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.Content]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.Content]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.Content]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.Content]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.Content]$ 0 0 0 0 0 0 0 $socialhome.content.querysets.ContentManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $socialhome.activities.models.Activity$ 0 0 0 $federation.entities.activitypub.enums.ActivityType$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $federation.entities.activitypub.enums.ActivityType$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 $typing.Set[typing.Any]$ 0 0 0 $typing.Set[typing.Any]$ 0 0 $typing.Set[typing.Any]$ 0 $typing.Set[typing.Any]$ 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Set[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import logging [EOL] import typing [EOL] import socialhome [EOL] import logging [EOL] [EOL] import django_rq [EOL] from django . db import transaction [EOL] from django . db . models . signals import post_save , m2m_changed , pre_delete [EOL] from django . dispatch import receiver [EOL] from federation . entities . activitypub . enums import ActivityType [EOL] [EOL] from socialhome . activities . models import Activity [EOL] from socialhome . content . enums import ContentType [EOL] from socialhome . content . models import Content [EOL] from socialhome . content . previews import fetch_content_preview [EOL] from socialhome . enums import Visibility [EOL] from socialhome . federate . tasks import send_content , send_content_retraction , send_reply , send_share [EOL] from socialhome . notifications . tasks import send_reply_notifications , send_share_notification , send_mention_notification [EOL] from socialhome . streams . streams import update_streams_with_content [EOL] from socialhome . users . models import Profile [EOL] [EOL] logger = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] @ receiver ( post_save , sender = Content ) def content_post_save ( instance , ** kwargs ) : [EOL] [comment] [EOL] if instance . local : [EOL] instance . extract_mentions ( ) [EOL] fetch_preview ( instance ) [EOL] render_content ( instance ) [EOL] created = kwargs . get ( [string] ) [EOL] if created : [EOL] if instance . content_type == ContentType . REPLY : [EOL] transaction . on_commit ( lambda : django_rq . enqueue ( send_reply_notifications , instance . id ) ) [EOL] elif instance . content_type == ContentType . SHARE and instance . share_of . local : [EOL] transaction . on_commit ( lambda : django_rq . enqueue ( send_share_notification , instance . id ) ) [EOL] transaction . on_commit ( lambda : update_streams_with_content ( instance ) ) [EOL] if instance . federate and instance . local : [EOL] [comment] [EOL] activity_type = ActivityType . CREATE if created else ActivityType . UPDATE [EOL] activity = instance . create_activity ( activity_type ) [EOL] transaction . on_commit ( lambda : federate_content ( instance , activity = activity ) ) [EOL] [EOL] [EOL] @ receiver ( pre_delete , sender = Content ) def federate_content_retraction ( instance , ** kwargs ) : [EOL] [docstring] [EOL] if instance . local : [EOL] logger . debug ( [string] , instance ) [EOL] try : [EOL] [comment] [EOL] send_content_retraction ( instance , instance . author_id ) [EOL] except Exception as ex : [EOL] logger . exception ( [string] , instance , ex ) [EOL] [EOL] [EOL] def fetch_preview ( content ) : [EOL] try : [EOL] fetch_content_preview ( content ) [EOL] except Exception as ex : [EOL] logger . exception ( [string] , content , ex ) [EOL] [EOL] [EOL] def on_commit_mentioned ( action , pks , instance ) : [EOL] for id in pks : [EOL] [comment] [EOL] if action == [string] and Profile . objects . filter ( id = id , user__isnull = False ) . exists ( ) : [EOL] profile = Profile . objects . values ( [string] ) . get ( id = id ) [EOL] django_rq . enqueue ( send_mention_notification , profile [ [string] ] , instance . author . id , instance . id ) [EOL] [EOL] [EOL] @ receiver ( m2m_changed , sender = Content . mentions . through ) def content_mentions_change ( sender , instance , action , pk_set , ** kwargs ) : [EOL] [docstring] [EOL] if action == [string] : [EOL] transaction . on_commit ( lambda : on_commit_mentioned ( action , pk_set , instance ) ) [EOL] [EOL] [EOL] def on_commit_limited_visibilities ( action , pks , instance ) : [EOL] if action not in ( [string] , [string] ) : [EOL] return [EOL] [EOL] activity = instance . activities . order_by ( [string] ) . first ( ) [EOL] [EOL] for id in pks : [EOL] [comment] [EOL] if not Profile . objects . filter ( id = id , user__isnull = True ) . exists ( ) : [EOL] continue [EOL] profile = Profile . objects . get ( id = id ) [EOL] [EOL] if action == [string] : [EOL] try : [EOL] federate_content ( instance , recipient = profile , activity = activity ) [EOL] except Exception : [EOL] logger . exception ( [string] , instance . uuid , profile . uuid ) [EOL] elif action == [string] : [EOL] try : [EOL] federate_content_retraction ( instance , recipient = profile ) [EOL] except Exception : [EOL] logger . exception ( [string] , instance . uuid , profile . uuid ) [EOL] [EOL] [EOL] @ receiver ( m2m_changed , sender = Content . limited_visibilities . through ) def content_limited_visibilities_change ( sender , instance , action , pk_set , ** kwargs ) : [EOL] [docstring] [EOL] if not instance . local or not instance . content_type == ContentType . CONTENT : [EOL] return [EOL] if action in ( [string] , [string] ) : [EOL] transaction . on_commit ( lambda : on_commit_limited_visibilities ( action , pk_set , instance ) ) [EOL] [EOL] [EOL] def render_content ( content ) : [EOL] content . refresh_from_db ( ) [EOL] try : [EOL] content . render ( ) [EOL] except Exception as ex : [EOL] logger . exception ( [string] , content , ex ) [EOL] [EOL] [EOL] def federate_content ( content , recipient = None , activity = None ) : [EOL] [docstring] [EOL] recipient_id = recipient . id if recipient else None [EOL] try : [EOL] if content . content_type == ContentType . REPLY : [EOL] django_rq . enqueue ( send_reply , content . id , activity . fid ) [EOL] elif content . content_type == ContentType . SHARE : [EOL] django_rq . enqueue ( send_share , content . id , activity . fid ) [EOL] else : [EOL] if content . visibility == Visibility . LIMITED and not recipient_id : [EOL] return [EOL] django_rq . enqueue ( send_content , content . id , activity . fid , recipient_id = recipient_id ) [EOL] except Exception as ex : [EOL] logger . exception ( [string] , content , ex ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any , List , Set [EOL] import typing [EOL] import socialhome [EOL] import re [EOL] [EOL] from django import forms [EOL] from django . core . exceptions import ValidationError [EOL] from django . db . models import Q [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from federation . utils . text import validate_handle [EOL] from markdownx . widgets import MarkdownxWidget [EOL] [EOL] from socialhome . content . enums import ContentType [EOL] from socialhome . content . models import Content [EOL] from socialhome . content . utils import safe_text_for_markdown [EOL] from socialhome . enums import Visibility [EOL] from socialhome . users . models import Profile [EOL] [EOL] [EOL] class ContentForm ( forms . ModelForm ) : [EOL] recipients = forms . CharField ( required = False , label = _ ( [string] ) ) [EOL] [EOL] class Meta : [EOL] model = Content [EOL] fields = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] widgets = { [string] : MarkdownxWidget ( ) } [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] self . user = kwargs . pop ( [string] , None ) [EOL] is_reply = kwargs . pop ( [string] , False ) [EOL] super ( ContentForm , self ) . __init__ ( * args , ** kwargs ) [EOL] if is_reply : [EOL] self . fields . pop ( [string] ) [EOL] self . fields . pop ( [string] ) [EOL] self . fields . pop ( [string] ) [EOL] self . fields . pop ( [string] ) [EOL] self . fields . pop ( [string] ) [EOL] else : [EOL] self . fields [ [string] ] . widget . attrs = { [string] : [string] } [EOL] self . fields [ [string] ] . widget . attrs = { [string] : [string] } [EOL] self . fields [ [string] ] . widget . attrs = { [string] : [string] } [EOL] self . fields [ [string] ] . widget . attrs = { [string] : [string] } [EOL] self . fields [ [string] ] . widget . attrs = { [string] : [string] } [EOL] self . fields [ [string] ] . widget . attrs = { [string] : [string] } [EOL] self . fields [ [string] ] . widget . attrs = { [string] : [string] } [EOL] [EOL] def clean ( self ) : [EOL] cleaned_data = super ( ) . clean ( ) [EOL] if cleaned_data . get ( [string] ) == Visibility . LIMITED : [EOL] if not cleaned_data . get ( [string] ) and not cleaned_data . get ( [string] ) : [EOL] self . add_error ( [string] , _ ( [string] ) ) [EOL] [EOL] def clean_recipients ( self ) : [EOL] [docstring] [EOL] if self . cleaned_data . get ( [string] ) != Visibility . LIMITED or not self . cleaned_data . get ( [string] ) : [EOL] return [string] [EOL] [EOL] recipients = [ r . strip ( ) for r in self . cleaned_data . get ( [string] , [string] ) . split ( [string] ) ] [EOL] [EOL] for recipient in recipients : [EOL] if not validate_handle ( recipient ) and not re . match ( [string] , recipient ) : [EOL] raise ValidationError ( _ ( [string] % recipient ) ) [EOL] recipient_profiles = Profile . objects . filter ( Q ( handle__in = recipients ) | Q ( fid__in = recipients ) ) . visible_for_user ( self . user ) [EOL] [comment] [EOL] if recipient_profiles . distinct ( ) . count ( ) != len ( set ( recipients ) ) : [EOL] raise ValidationError ( _ ( [string] ) ) [EOL] [EOL] return self . cleaned_data . get ( [string] ) [EOL] [EOL] def clean_text ( self ) : [EOL] [docstring] [EOL] if self . user . trusted_editor : [EOL] return self . cleaned_data [ [string] ] [EOL] return safe_text_for_markdown ( self . cleaned_data [ [string] ] ) [EOL] [EOL] def get_initial_for_field ( self , field , field_name ) : [EOL] [docstring] [EOL] if field_name != [string] or not self . instance or self . instance . visibility != Visibility . LIMITED : [EOL] return super ( ) . get_initial_for_field ( field , field_name ) [EOL] [EOL] handles = self . instance . limited_visibilities . filter ( fid__isnull = True ) . values_list ( [string] , flat = True ) [EOL] fids = self . instance . limited_visibilities . filter ( handle__isnull = True ) . values_list ( [string] , flat = True ) [EOL] both = self . instance . limited_visibilities . filter ( handle__isnull = False , fid__isnull = False , ) . values_list ( [string] , flat = True ) [EOL] return [string] . join ( list ( handles ) + list ( fids ) + list ( both ) ) [EOL] [EOL] def save ( self , commit = True , parent = None ) : [EOL] [docstring] [EOL] [comment] [EOL] previous_recipients = [ ] [EOL] if not self . instance . _state . adding and self . instance . limited_visibilities . count ( ) : [EOL] previous_recipients = self . instance . limited_visibilities . values_list ( [string] , flat = True ) [EOL] [EOL] if self . instance . _state . adding and parent : [EOL] [comment] [EOL] self . instance . visibility = None [EOL] [EOL] if not self . instance . author_id : [EOL] self . instance . author = self . user . profile [EOL] [EOL] if parent : [EOL] self . instance . parent = parent [EOL] [EOL] [comment] [EOL] content = super ( ) . save ( commit = commit ) [EOL] if content . visibility != Visibility . LIMITED or content . content_type == ContentType . SHARE : [EOL] return content [EOL] [EOL] if content . content_type == ContentType . CONTENT : [EOL] [comment] [EOL] recipients = [ r . strip ( ) for r in self . cleaned_data . get ( [string] ) . split ( [string] ) ] [EOL] recipients = Profile . objects . filter ( Q ( handle__in = recipients ) | Q ( fid__in = recipients ) ) . visible_for_user ( self . user ) [EOL] [EOL] [comment] [EOL] if self . cleaned_data . get ( [string] ) : [EOL] recipients = recipients | self . user . profile . following . all ( ) [EOL] recipients = recipients . distinct ( ) [EOL] elif content . content_type == ContentType . REPLY : [EOL] recipients = content . root_parent . limited_visibilities . all ( ) [EOL] else : [EOL] return content [EOL] [EOL] [comment] [EOL] if previous_recipients : [EOL] to_remove = set ( previous_recipients ) . difference ( set ( recipients . values_list ( [string] , flat = True ) ) ) [EOL] for id in to_remove : [EOL] profile = Profile . objects . get ( id = id ) [EOL] content . limited_visibilities . remove ( profile ) [EOL] [EOL] [comment] [EOL] content . limited_visibilities . clear ( ) [EOL] content . limited_visibilities . set ( recipients ) [EOL] [EOL] return content [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.forms.ContentForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Set[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0
from typing import Type , Tuple , Any [EOL] import typing [EOL] import socialhome [EOL] from django . core . exceptions import ValidationError [EOL] from rest_framework import exceptions , status [EOL] from rest_framework import mixins [EOL] from rest_framework . decorators import action [EOL] from rest_framework . permissions import BasePermission , SAFE_METHODS [EOL] from rest_framework . response import Response [EOL] from rest_framework . status import HTTP_201_CREATED , HTTP_204_NO_CONTENT [EOL] from rest_framework . viewsets import GenericViewSet [EOL] [EOL] from socialhome . content . models import Content , Tag [EOL] from socialhome . content . serializers import ContentSerializer , TagSerializer [EOL] [EOL] [EOL] class IsOwnContentOrReadOnly ( BasePermission ) : [EOL] def has_permission ( self , request , view ) : [EOL] if request . method in SAFE_METHODS : [EOL] return True [EOL] [EOL] if request . user . is_authenticated : [EOL] return True [EOL] [EOL] return False [EOL] [EOL] def has_object_permission ( self , request , view , obj ) : [EOL] if request . method in SAFE_METHODS : [EOL] return True [EOL] [EOL] if request . user . is_authenticated : [EOL] if view . action == [string] or obj . author == request . user . profile : [EOL] return True [EOL] [EOL] return False [EOL] [EOL] [EOL] class ContentViewSet ( mixins . CreateModelMixin , mixins . RetrieveModelMixin , mixins . UpdateModelMixin , mixins . DestroyModelMixin , GenericViewSet ) : [EOL] [docstring] [EOL] queryset = Content . objects . none ( ) [EOL] serializer_class = ContentSerializer [EOL] permission_classes = ( IsOwnContentOrReadOnly , ) [EOL] [EOL] def _share ( self ) : [EOL] content = self . get_object ( ) [EOL] try : [EOL] share = content . share ( self . request . user . profile ) [EOL] except ValidationError as e : [EOL] raise exceptions . ValidationError ( e . message ) [EOL] except Exception : [EOL] raise exceptions . APIException ( [string] ) [EOL] return Response ( { [string] : [string] , [string] : share . id } , status = HTTP_201_CREATED ) [EOL] [EOL] def _unshare ( self ) : [EOL] content = self . get_object ( ) [EOL] try : [EOL] content . unshare ( self . request . user . profile ) [EOL] except ValidationError as e : [EOL] raise exceptions . ValidationError ( e . message ) [EOL] except Exception : [EOL] raise exceptions . APIException ( [string] ) [EOL] return Response ( { [string] : [string] } , status = HTTP_204_NO_CONTENT ) [EOL] [EOL] def get_queryset ( self , parent = None , share_of = None ) : [EOL] if parent : [EOL] return Content . objects . children ( parent . id , self . request . user ) [EOL] elif share_of : [EOL] return Content . objects . shares ( share_of . id , self . request . user ) [EOL] if self . request . user . is_staff : [EOL] return Content . objects . all ( ) [EOL] else : [EOL] return Content . objects . visible_for_user ( self . request . user ) [EOL] [EOL] def get_throttles ( self ) : [EOL] if self . action in [ [string] ] : [EOL] self . throttle_scope = [string] [EOL] return super ( ) . get_throttles ( ) [EOL] [EOL] def perform_create ( self , serializer ) : [EOL] serializer . save ( author = self . request . user . profile ) [EOL] [EOL] @ action ( detail = True , methods = [ [string] ] ) def replies ( self , request , * args , ** kwargs ) : [EOL] parent = self . get_object ( ) [EOL] queryset = self . filter_queryset ( self . get_queryset ( parent = parent ) ) . order_by ( [string] ) [EOL] serializer = self . get_serializer ( queryset , many = True ) [EOL] return Response ( serializer . data ) [EOL] [EOL] @ action ( detail = True , methods = [ [string] , [string] ] ) def share ( self , request , * args , ** kwargs ) : [EOL] if request . method == [string] : [EOL] return self . _share ( ) [EOL] elif request . method == [string] : [EOL] return self . _unshare ( ) [EOL] [EOL] @ action ( detail = True , methods = [ [string] ] ) def shares ( self , request , * args , ** kwargs ) : [EOL] content = self . get_object ( ) [EOL] queryset = self . filter_queryset ( self . get_queryset ( share_of = content ) ) . order_by ( [string] ) [EOL] serializer = self . get_serializer ( queryset , many = True ) [EOL] return Response ( serializer . data ) [EOL] [EOL] [EOL] class TagViewSet ( mixins . ListModelMixin , mixins . RetrieveModelMixin , GenericViewSet ) : [EOL] [docstring] [EOL] lookup_field = [string] [EOL] queryset = Tag . objects . all ( ) . order_by ( [string] ) [EOL] serializer_class = TagSerializer [EOL] [EOL] @ action ( detail = True , methods = [ [string] ] ) def follow ( self , request , uuid = None ) : [EOL] if not request . user . is_authenticated : [EOL] return Response ( { [string] : [string] } , status = status . HTTP_401_UNAUTHORIZED ) [EOL] tag = self . get_object ( ) [EOL] request . user . profile . followed_tags . add ( tag ) [EOL] return Response ( { [string] : [string] } , status = status . HTTP_200_OK ) [EOL] [EOL] @ action ( detail = True , methods = [ [string] ] ) def unfollow ( self , request , uuid = None ) : [EOL] if not request . user . is_authenticated : [EOL] return Response ( { [string] : [string] } , status = status . HTTP_401_UNAUTHORIZED ) [EOL] tag = self . get_object ( ) [EOL] request . user . profile . followed_tags . remove ( tag ) [EOL] return Response ( { [string] : [string] } , status = status . HTTP_200_OK ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.viewsets.ContentViewSet]$ 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.serializers.ContentSerializer]$ 0 0 0 $typing.Tuple[typing.Type[socialhome.content.viewsets.IsOwnContentOrReadOnly]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[socialhome.content.viewsets.TagViewSet]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.serializers.TagSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ContentConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL] [EOL] def ready ( self ) : [EOL] [docstring] [EOL] import socialhome . content . signals [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import socialhome [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from enumfields import Enum [EOL] [EOL] [EOL] class ContentTarget ( Enum ) : [EOL] [comment] [EOL] [comment] [EOL] PROFILE = [number] [EOL] [EOL] [EOL] class ContentType ( Enum ) : [EOL] CONTENT = [number] [EOL] REPLY = [number] [EOL] SHARE = [number] [EOL] [EOL] class Labels : [EOL] CONTENT = _ ( [string] ) [EOL] REPLY = _ ( [string] ) [EOL] SHARE = _ ( [string] ) [EOL] [EOL] @ property def string_value ( self ) : [EOL] return { [number] : [string] , [number] : [string] , [number] : [string] } . get ( self . value ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.enums.ContentType.Labels]$ 0 0 0 0 0 0 $typing.Type[socialhome.content.enums.ContentType.Labels]$ 0 0 0 0 0 0 $typing.Type[socialhome.content.enums.ContentType.Labels]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from test_plus import TestCase [EOL] [EOL] from socialhome . content . enums import ContentType [EOL] [EOL] [EOL] class TestContentType ( TestCase ) : [EOL] def test_string_value ( self ) : [EOL] self . assertEqual ( ContentType . CONTENT . string_value , [string] ) [EOL] self . assertEqual ( ContentType . REPLY . string_value , [string] ) [EOL] self . assertEqual ( ContentType . SHARE . string_value , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL]	0 0
from typing import Any [EOL] import typing [EOL] from django . test import TestCase [EOL] [EOL] from socialhome . content . utils import ( safe_text_for_markdown , safe_text , find_urls_in_text ) [EOL] [EOL] PLAIN_TEXT = [string] [EOL] MARKDOWN_TEXT = [string] [EOL] MARKDOWN_QUOTES_TEXT = [string] [EOL] SCRIPT_TEXT = [string] [EOL] MARKDOWN_CODE_TEXT = [string] [string] [EOL] HTML_TEXT = [string] [EOL] HTML_TEXT_WITH_MENTION_LINK = [string] [string] [EOL] [EOL] [EOL] class TestSafeTextForMarkdown : [EOL] def test_plain_text_survives ( self ) : [EOL] assert safe_text_for_markdown ( PLAIN_TEXT ) == PLAIN_TEXT [EOL] [EOL] def test_text_with_markdown_survives ( self ) : [EOL] assert safe_text_for_markdown ( MARKDOWN_TEXT ) == MARKDOWN_TEXT [EOL] [EOL] def test_text_with_markdown_code_survives ( self ) : [EOL] assert safe_text_for_markdown ( MARKDOWN_CODE_TEXT ) == [string] [string] [EOL] [EOL] def test_text_with_script_is_cleaned ( self ) : [EOL] assert safe_text_for_markdown ( SCRIPT_TEXT ) == [string] [EOL] [EOL] def test_text_with_html_is_cleaned ( self ) : [EOL] assert safe_text_for_markdown ( HTML_TEXT ) == [string] [string] [EOL] [EOL] def test_text_with_html_is_cleaned__mention_link_classes_preserved ( self ) : [EOL] assert safe_text_for_markdown ( HTML_TEXT_WITH_MENTION_LINK ) == [string] [string] [EOL] [EOL] def test_text_with_quotes_survives ( self ) : [EOL] assert safe_text_for_markdown ( MARKDOWN_QUOTES_TEXT ) == [string] [EOL] [EOL] [EOL] class TestSafeText : [EOL] def test_plain_text_survives ( self ) : [EOL] assert safe_text ( PLAIN_TEXT ) == PLAIN_TEXT [EOL] [EOL] def test_text_with_markdown_survives ( self ) : [EOL] assert safe_text ( MARKDOWN_TEXT ) == MARKDOWN_TEXT [EOL] [EOL] def test_text_with_markdown_code_is_cleaned ( self ) : [EOL] assert safe_text ( MARKDOWN_CODE_TEXT ) == [string] [string] [EOL] [EOL] def test_text_with_script_is_cleaned ( self ) : [EOL] assert safe_text ( SCRIPT_TEXT ) == [string] [EOL] [EOL] def test_text_with_html_is_cleaned ( self ) : [EOL] assert safe_text ( HTML_TEXT ) == [string] [EOL] [EOL] def test_text_with_html_is_cleaned__mention_link_removed ( self ) : [EOL] assert safe_text ( HTML_TEXT_WITH_MENTION_LINK ) == [string] [EOL] [EOL] [EOL] class TestFindUrlsInText ( TestCase ) : [EOL] @ classmethod def setUpTestData ( cls ) : [EOL] super ( ) . setUpTestData ( ) [EOL] cls . starts_with_url = [string] [EOL] cls . http_starts_with_url = [string] [EOL] cls . numbers = [string] [EOL] cls . special_chars = [string] [EOL] cls . urls_in_text = [string] [string] [EOL] cls . href_and_markdown = [string] [string] [string] [EOL] cls . without_protocol = [string] [EOL] cls . many_for_ordered = [string] [EOL] cls . with_mention = [string] [EOL] [EOL] def test_ignores_mention ( self ) : [EOL] urls = find_urls_in_text ( self . with_mention ) [EOL] self . assertEqual ( urls , [ [string] ] ) [EOL] [EOL] def test_returns_in_order_without_duplicates ( self ) : [EOL] urls = find_urls_in_text ( self . many_for_ordered ) [EOL] self . assertEqual ( urls , [ [string] , [string] ] ) [EOL] [EOL] def test_starts_with_url ( self ) : [EOL] urls = find_urls_in_text ( self . starts_with_url ) [EOL] self . assertEqual ( urls , [ self . starts_with_url ] ) [EOL] urls = find_urls_in_text ( self . http_starts_with_url ) [EOL] self . assertEqual ( urls , [ self . http_starts_with_url ] ) [EOL] [EOL] def test_numbers ( self ) : [EOL] urls = find_urls_in_text ( self . numbers ) [EOL] self . assertEqual ( urls , [ self . numbers ] ) [EOL] [EOL] def test_special_chars ( self ) : [EOL] urls = find_urls_in_text ( self . special_chars ) [EOL] self . assertEqual ( urls , [ self . special_chars ] ) [EOL] [EOL] def test_urls_in_text ( self ) : [EOL] urls = find_urls_in_text ( self . urls_in_text ) [EOL] self . assertEqual ( urls , [ [string] , [string] , [string] ] ) [EOL] [EOL] def test_href_markdown ( self ) : [EOL] urls = find_urls_in_text ( self . href_and_markdown ) [EOL] self . assertEqual ( urls , [ [string] , [string] , [string] ] ) [EOL] [EOL] def test_without_protocol ( self ) : [EOL] urls = find_urls_in_text ( self . without_protocol ) [EOL] self . assertEqual ( urls , [ [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
from typing import Type , Any [EOL] import typing [EOL] import socialhome [EOL] import factory [EOL] from django . conf import settings [EOL] [EOL] from socialhome . content . models import Content , OEmbedCache , OpenGraphCache , Tag [EOL] from socialhome . enums import Visibility [EOL] from socialhome . users . tests . factories import ProfileFactory , UserFactory , PublicProfileFactory , SiteProfileFactory , LimitedProfileFactory , SelfProfileFactory [EOL] [EOL] [EOL] class TagFactory ( factory . DjangoModelFactory ) : [EOL] class Meta : [EOL] model = Tag [EOL] [EOL] name = factory . Faker ( [string] ) [EOL] [EOL] [EOL] class ContentFactory ( factory . DjangoModelFactory ) : [EOL] class Meta : [EOL] model = Content [EOL] [EOL] author = factory . SubFactory ( ProfileFactory ) [EOL] fid = factory . LazyAttribute ( lambda o : f"{ settings . SOCIALHOME_URL } [string] { o . uuid } [string] " ) [EOL] text = factory . Faker ( [string] ) [EOL] uuid = factory . Faker ( [string] ) [EOL] [EOL] [EOL] class PublicContentFactory ( ContentFactory ) : [EOL] visibility = Visibility . PUBLIC [EOL] author = factory . SubFactory ( PublicProfileFactory ) [EOL] [EOL] [EOL] class LimitedContentFactory ( ContentFactory ) : [EOL] visibility = Visibility . LIMITED [EOL] author = factory . SubFactory ( LimitedProfileFactory ) [EOL] [EOL] [EOL] class LimitedContentWithRecipientsFactory ( ContentFactory ) : [EOL] visibility = Visibility . LIMITED [EOL] author = factory . SubFactory ( LimitedProfileFactory ) [EOL] [EOL] @ classmethod def _generate ( cls , strategy , params ) : [EOL] recipients = params . pop ( [string] , None ) [EOL] content = super ( ) . _generate ( strategy , params ) [EOL] [EOL] if recipients is not None : [EOL] content . limited_visibilities . clear ( ) [EOL] content . limited_visibilities . set ( recipients ) [EOL] else : [EOL] recipient1 = PublicProfileFactory ( ) [EOL] recipient2 = PublicProfileFactory ( ) [EOL] content . limited_visibilities . clear ( ) [EOL] content . limited_visibilities . set ( [ recipient1 , recipient2 ] ) [EOL] [EOL] return content [EOL] [EOL] [EOL] class SiteContentFactory ( ContentFactory ) : [EOL] visibility = Visibility . SITE [EOL] author = factory . SubFactory ( SiteProfileFactory ) [EOL] [EOL] [EOL] class SelfContentFactory ( ContentFactory ) : [EOL] visibility = Visibility . SELF [EOL] author = factory . SubFactory ( SelfProfileFactory ) [EOL] [EOL] [EOL] class LocalContentFactory ( ContentFactory ) : [EOL] @ factory . post_generation def set_profile_with_user ( self , create , extracted , ** kwargs ) : [EOL] user = UserFactory ( ) [EOL] self . author = user . profile [EOL] self . save ( ) [EOL] [EOL] [EOL] class OEmbedCacheFactory ( factory . DjangoModelFactory ) : [EOL] class Meta : [EOL] model = OEmbedCache [EOL] [EOL] url = factory . Faker ( [string] ) [EOL] oembed = factory . Faker ( [string] ) [EOL] [EOL] [EOL] class OpenGraphCacheFactory ( factory . DjangoModelFactory ) : [EOL] class Meta : [EOL] model = OpenGraphCache [EOL] [EOL] url = factory . Faker ( [string] ) [EOL] title = factory . Faker ( [string] , nb_words = [number] ) [EOL] description = factory . Faker ( [string] ) [EOL] image = factory . Faker ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.OpenGraphCache]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.OpenGraphCache]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.tests.factories.SelfContentFactory]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $socialhome.users.tests.factories.UserFactory$ 0 0 0 0 0 0 0 0 0 $socialhome.users.tests.factories.UserFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.OpenGraphCache]$ 0 0 0 0 $typing.Type[socialhome.content.tests.factories.OEmbedCacheFactory]$ 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.tests.factories.OEmbedCacheFactory]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.models.OpenGraphCache]$ 0 0 0 0 $typing.Type[socialhome.content.tests.factories.OpenGraphCacheFactory]$ 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.tests.factories.OpenGraphCacheFactory]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.tests.factories.OpenGraphCacheFactory]$ 0 0 0 0 0 0 0 0 $typing.Type[socialhome.content.tests.factories.OpenGraphCacheFactory]$ 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AddField ( model_name = [string] , name = [string] , field = models . UUIDField ( editable = False , null = True , unique = True ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Literal , Tuple , Any , List , Union [EOL] import typing [EOL] import typing_extensions [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] from django . db . migrations import RunPython [EOL] from django . db . models import Count , Q [EOL] [EOL] [EOL] def forward ( apps , schema_editor ) : [EOL] Content = apps . get_model ( [string] , [string] ) [EOL] qs = Content . objects . annotate ( child_count = Count ( [string] ) , share_count = Count ( [string] ) ) . filter ( Q ( child_count__gt = [number] ) | Q ( share_count__gt = [number] ) | Q ( author__user__isnull = False ) ) [EOL] for content in qs : [EOL] [comment] [EOL] share_ids = Content . objects . filter ( share_of = content ) . values_list ( [string] , flat = True ) [EOL] reply_count = content . children . count ( ) + Content . objects . filter ( parent_id__in = share_ids ) . count ( ) [EOL] [comment] [EOL] shares_count = content . shares . count ( ) [EOL] [comment] [EOL] local = True if content . author . user else False [EOL] Content . objects . filter ( id = content . id ) . update ( reply_count = reply_count , shares_count = shares_count , local = local , ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ RunPython ( forward , RunPython . noop ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] import enumfields . fields [EOL] import socialhome . content . enums [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AddField ( model_name = [string] , name = [string] , field = enumfields . fields . EnumIntegerField ( db_index = True , default = [number] , editable = False , enum = socialhome . content . enums . ContentType ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . core . management import call_command [EOL] from django . db import migrations [EOL] from django . db . migrations import RunPython [EOL] [EOL] [EOL] def forward ( apps , schema_editor ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] pass [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ RunPython ( RunPython . noop , RunPython . noop ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RenameModel ( old_name = [string] , new_name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations , models [EOL] import django . db . models . deletion [EOL] import django . utils . timezone [EOL] import model_utils . fields [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . URLField ( unique = True , verbose_name = [string] ) ) , ( [string] , models . TextField ( verbose_name = [string] ) ) , ( [string] , model_utils . fields . AutoLastModifiedField ( db_index = True , default = django . utils . timezone . now , editable = False , verbose_name = [string] ) ) , ] , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . URLField ( unique = True , verbose_name = [string] ) ) , ( [string] , models . CharField ( blank = True , max_length = [number] , verbose_name = [string] ) ) , ( [string] , models . TextField ( blank = True , verbose_name = [string] ) ) , ( [string] , models . URLField ( blank = True , verbose_name = [string] ) ) , ( [string] , model_utils . fields . AutoLastModifiedField ( db_index = True , default = django . utils . timezone . now , editable = False , verbose_name = [string] ) ) , ] , ) , migrations . AddField ( model_name = [string] , name = [string] , field = models . ForeignKey ( null = True , on_delete = django . db . models . deletion . SET_NULL , to = [string] , verbose_name = [string] ) , ) , migrations . AddField ( model_name = [string] , name = [string] , field = models . ForeignKey ( null = True , on_delete = django . db . models . deletion . SET_NULL , to = [string] , verbose_name = [string] ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , Any , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] from django . db . migrations import RunPython [EOL] [EOL] [EOL] def forward ( apps , schema_editor ) : [EOL] Content = apps . get_model ( [string] , [string] ) [EOL] Post = apps . get_model ( [string] , [string] ) [EOL] for content in Content . objects . all ( ) : [EOL] post = Post . objects . get ( id = content . object_id ) [EOL] post . order = content . order [EOL] post . pinned = True if content . target == [number] else False [EOL] post . visibility = content . visibility [EOL] post . save ( ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ RunPython ( forward , RunPython . noop ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations , models [EOL] import enumfields . fields [EOL] import socialhome . enums [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AddField ( model_name = [string] , name = [string] , field = models . PositiveIntegerField ( db_index = True , default = [number] , verbose_name = [string] ) , ) , migrations . AddField ( model_name = [string] , name = [string] , field = models . BooleanField ( db_index = True , default = False , verbose_name = [string] ) , ) , migrations . AddField ( model_name = [string] , name = [string] , field = enumfields . fields . EnumIntegerField ( db_index = True , default = [number] , enum = socialhome . enums . Visibility ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , Any , List [EOL] import typing [EOL] from django . db import migrations [EOL] from django . db . migrations import RunPython [EOL] [EOL] [EOL] def get_root ( content ) : [EOL] if content . parent : [EOL] return get_root ( content . parent ) [EOL] return content [EOL] [EOL] [EOL] def forward ( apps , schema_editor ) : [EOL] Content = apps . get_model ( [string] , [string] ) [EOL] for content in Content . objects . filter ( parent__isnull = False ) . iterator ( ) : [EOL] Content . objects . filter ( id = content . id ) . update ( root_parent = get_root ( content ) ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ RunPython ( forward , RunPython . noop ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] from typing import Tuple , Any , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] from django . db . migrations import RunPython [EOL] [EOL] [EOL] def forward ( apps , schema_editor ) : [EOL] Content = apps . get_model ( [string] , [string] ) [EOL] Post = apps . get_model ( [string] , [string] ) [EOL] for content in Content . objects . all ( ) : [EOL] content . author = content . user . profile [EOL] content . save ( ) [EOL] for post in Post . objects . all ( ) : [EOL] post . author = post . user . profile [EOL] post . save ( ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] [EOL] operations = [ RunPython ( forward , RunPython . noop ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . conf import settings [EOL] from django . db import migrations , models [EOL] import django . db . models . deletion [EOL] import enumfields . fields [EOL] import socialhome . content . enums [EOL] import socialhome . enums [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ migrations . swappable_dependency ( settings . AUTH_USER_MODEL ) , ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , enumfields . fields . EnumIntegerField ( enum = socialhome . content . enums . ContentTarget ) ) , ( [string] , models . PositiveIntegerField ( ) ) , ( [string] , enumfields . fields . EnumIntegerField ( default = [number] , enum = socialhome . enums . Visibility ) ) , ( [string] , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = [string] ) ) , ( [string] , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = settings . AUTH_USER_MODEL , verbose_name = [string] ) ) , ] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Dict , Tuple , Any , List [EOL] import typing [EOL] from uuid import uuid4 [EOL] [EOL] from django . conf import settings [EOL] from django . db import migrations [EOL] from django . db . migrations import RunPython [EOL] from django . urls import reverse [EOL] [EOL] [EOL] TYPE_MAPPINGS = { [number] : [string] , [number] : [string] , [number] : [string] , } [EOL] [EOL] [EOL] def forward ( apps , schema_editor ) : [EOL] Content = apps . get_model ( [string] , [string] ) [EOL] for content in Content . objects . iterator ( ) : [EOL] if content . local : [EOL] content . uuid = content . guid [EOL] url = reverse ( [string] , kwargs = { [string] : content . uuid } ) [EOL] fid = f"{ settings . SOCIALHOME_URL }{ url }" [EOL] Content . objects . filter ( id = content . id ) . update ( uuid = content . uuid , fid = fid ) [EOL] else : [EOL] content . uuid = uuid4 ( ) [EOL] Content . objects . filter ( id = content . id ) . update ( uuid = content . uuid ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ RunPython ( forward , RunPython . noop ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Tuple , Any , List [EOL] import typing [EOL] import uuid [EOL] [EOL] from django . db import migrations [EOL] from django . db . migrations import RunPython [EOL] [EOL] [EOL] def forward ( apps , schema_editor ) : [EOL] Tag = apps . get_model ( [string] , [string] ) [EOL] for tag in Tag . objects . iterator ( ) : [EOL] if not tag . uuid : [EOL] Tag . objects . filter ( id = tag . id ) . update ( uuid = uuid . uuid4 ( ) ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ RunPython ( forward , RunPython . noop ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , Any , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] from django . db . migrations import RunPython [EOL] from django . db . models import Q [EOL] [EOL] from socialhome . content . enums import ContentType [EOL] [EOL] [EOL] def forward ( apps , schema_editor ) : [EOL] Content = apps . get_model ( [string] , [string] ) [EOL] for content in Content . objects . filter ( Q ( parent__isnull = False ) | Q ( share_of__isnull = False ) ) : [EOL] if content . parent : [EOL] Content . objects . filter ( id = content . id ) . update ( content_type = ContentType . REPLY ) [EOL] elif content . share_of : [EOL] Content . objects . filter ( id = content . id ) . update ( content_type = ContentType . SHARE ) [EOL] [comment] [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ RunPython ( forward , RunPython . noop ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] import datetime [EOL] [EOL] from django . utils . timezone import now [EOL] [EOL] from socialhome . content . models import Content [EOL] [EOL] [EOL] def run ( * args ) : [EOL] qs = Content . objects . filter ( created__gt = now ( ) - datetime . timedelta ( days = [number] ) ) [EOL] count = qs . count ( ) [EOL] for c , content in enumerate ( qs . only ( [string] ) . iterator ( ) , [number] ) : [EOL] content . extract_mentions ( ) [EOL] if c % [number] == [number] : [EOL] print ( [string] % ( c , count ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from __future__ import unicode_literals [EOL]	0 0 0 0 0 0 0
[comment] [EOL] from __future__ import unicode_literals [EOL]	0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import socialhome [EOL] from random import shuffle [EOL] [EOL] from django . core . management . base import BaseCommand [EOL] [EOL] from socialhome . content . tests . factories import PublicContentFactory [EOL] from socialhome . users . models import Profile , User [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , type = int , help = [string] , default = [number] ) [EOL] parser . add_argument ( [string] , type = str , help = [string] , default = None ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] [docstring] [EOL] for i in range ( options [ [string] ] ) : [EOL] content = PublicContentFactory ( ) [EOL] print ( [string] % content ) [EOL] [EOL] user_email = options [ [string] ] [EOL] if user_email is not None : [EOL] [EOL] user = User . objects . get ( email = user_email ) [EOL] if user is None : [EOL] print ( [string] ) . format ( user_email ) [EOL] else : [EOL] all_profiles = Profile . objects . exclude ( uuid = user . profile . uuid ) [ : : [number] ] [EOL] count = len ( all_profiles ) [EOL] nb_contacts = min ( count , [number] ) [EOL] [EOL] shuffle ( all_profiles ) [EOL] user . profile . following . add ( * all_profiles [ : nb_contacts ] ) [EOL] print ( [string] % ( nb_contacts , user_email ) ) [EOL] [EOL] shuffle ( all_profiles ) [EOL] profiles = all_profiles [ : nb_contacts ] [EOL] [ profile . following . add ( user . profile ) for profile in profiles ] [EOL] print ( [string] % ( nb_contacts , user_email ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $socialhome.content.tests.factories.PublicContentFactory$ 0 0 0 0 0 0 0 0 0 $socialhome.content.tests.factories.PublicContentFactory$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 0 0
from typing import Any , List [EOL] import typing [EOL] from django . conf . urls import url , include [EOL] from django . views . decorators . csrf import csrf_exempt [EOL] [EOL] from federation . hostmeta . generators import NODEINFO_DOCUMENT_PATH [EOL] [EOL] from socialhome . federate . views import ( host_meta_view , webfinger_view , hcard_view , nodeinfo_well_known_view , nodeinfo_view , social_relay_view , ReceivePublicView , ReceiveUserView , content_xml_view , content_fetch_view ) [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ url ( [string] , include ( [string] ) ) , url ( [string] , host_meta_view , name = [string] ) , url ( [string] , webfinger_view , name = [string] ) , url ( [string] , hcard_view , name = [string] ) , url ( [string] , nodeinfo_well_known_view , name = [string] ) , url ( NODEINFO_DOCUMENT_PATH . lstrip ( [string] ) , nodeinfo_view , name = [string] ) , url ( [string] , social_relay_view , name = [string] ) , url ( [string] , csrf_exempt ( ReceivePublicView . as_view ( ) ) , name = [string] ) , url ( [string] , csrf_exempt ( ReceivePublicView . as_view ( ) ) ) , url ( [string] , csrf_exempt ( ReceiveUserView . as_view ( ) ) , name = [string] ) , url ( [string] , csrf_exempt ( ReceiveUserView . as_view ( ) ) ) , url ( [string] , content_xml_view , name = [string] ) , url ( [string] , content_fetch_view , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
default_app_config = [string] [EOL]	$builtins.str$ 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] import logging [EOL] import datetime [EOL] import logging [EOL] [EOL] from django . conf import settings [EOL] from django . contrib . sites . models import Site [EOL] from django . core . exceptions import ValidationError [EOL] from django . http import HttpResponse , HttpResponseBadRequest [EOL] from django . http . response import Http404 , JsonResponse , HttpResponseRedirect , HttpResponseNotFound , HttpResponseServerError [EOL] from django . shortcuts import get_object_or_404 [EOL] from django . utils . timezone import now [EOL] from django . views . generic import View [EOL] [EOL] from federation . entities . diaspora . utils import get_full_xml_representation [EOL] from federation . hostmeta . generators import ( generate_host_meta , generate_legacy_webfinger , generate_hcard , get_nodeinfo_well_known_document , NodeInfo , SocialRelayWellKnown ) [EOL] from federation . protocols . diaspora . magic_envelope import MagicEnvelope [EOL] [EOL] from socialhome import __version__ as version [EOL] from socialhome . content . enums import ContentType [EOL] from socialhome . content . models import Content [EOL] from socialhome . enums import Visibility [EOL] from socialhome . federate . utils import queue_payload [EOL] from socialhome . federate . utils . entities import make_federable_content [EOL] from socialhome . users . models import User , Profile [EOL] [EOL] logger = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] def host_meta_view ( request ) : [EOL] [docstring] [EOL] host_meta = generate_host_meta ( [string] , webfinger_host = settings . SOCIALHOME_URL ) [EOL] return HttpResponse ( host_meta , content_type = [string] ) [EOL] [EOL] [EOL] def webfinger_view ( request ) : [EOL] [docstring] [EOL] q = request . GET . get ( [string] ) [EOL] if not q : [EOL] raise Http404 ( ) [EOL] username = q . split ( [string] ) [ [number] ] [EOL] if username . startswith ( [string] ) : [EOL] username = username . replace ( [string] , [string] , [number] ) [EOL] user = get_object_or_404 ( User , username = username ) [EOL] [comment] [EOL] webfinger = generate_legacy_webfinger ( [string] , handle = [string] . format ( username = user . username , domain = settings . SOCIALHOME_DOMAIN ) , host = settings . SOCIALHOME_URL , guid = str ( user . profile . uuid ) , public_key = user . profile . rsa_public_key ) [EOL] return HttpResponse ( webfinger , content_type = [string] ) [EOL] [EOL] [EOL] def hcard_view ( request , uuid ) : [EOL] [docstring] [EOL] try : [EOL] profile = get_object_or_404 ( Profile , uuid = uuid , user__isnull = False ) [EOL] except ( ValueError , ValidationError ) : [EOL] raise Http404 ( ) [EOL] hcard = generate_hcard ( [string] , hostname = settings . SOCIALHOME_URL , fullname = profile . name , firstname = profile . get_first_name ( ) , lastname = profile . get_last_name ( ) , photo300 = profile . safer_image_url_large , photo100 = profile . safer_image_url_medium , photo50 = profile . safer_image_url_small , searchable = [string] if profile . public else [string] , guid = str ( profile . uuid ) , username = profile . user . username , public_key = profile . rsa_public_key , ) [EOL] return HttpResponse ( hcard ) [EOL] [EOL] [EOL] def nodeinfo_well_known_view ( request ) : [EOL] [docstring] [EOL] wellknown = get_nodeinfo_well_known_document ( settings . SOCIALHOME_URL ) [EOL] return JsonResponse ( wellknown ) [EOL] [EOL] [EOL] def nodeinfo_view ( request ) : [EOL] [docstring] [EOL] site = Site . objects . get_current ( ) [EOL] usage = { [string] : { } } [EOL] if settings . SOCIALHOME_STATISTICS : [EOL] usage = { [string] : { [string] : User . objects . count ( ) , [string] : User . objects . filter ( last_login__gte = now ( ) - datetime . timedelta ( days = [number] ) ) . count ( ) , [string] : User . objects . filter ( last_login__gte = now ( ) - datetime . timedelta ( days = [number] ) ) . count ( ) , } , [string] : Content . objects . filter ( author__user__isnull = False , content_type = ContentType . CONTENT ) . count ( ) , [string] : Content . objects . filter ( author__user__isnull = False , content_type = ContentType . REPLY ) . count ( ) , } [EOL] nodeinfo = NodeInfo ( software = { [string] : [string] , [string] : version } , protocols = { [string] : [ [string] ] , [string] : [ [string] ] } , services = { [string] : [ ] , [string] : [ ] } , open_registrations = settings . ACCOUNT_ALLOW_REGISTRATION , usage = usage , metadata = { [string] : site . name } ) [EOL] return JsonResponse ( nodeinfo . doc ) [EOL] [EOL] [EOL] def social_relay_view ( request ) : [EOL] [docstring] [EOL] scope = settings . SOCIALHOME_RELAY_SCOPE [EOL] if scope == [string] : [EOL] relay = SocialRelayWellKnown ( subscribe = False , scope = [string] ) [EOL] elif scope == [string] : [EOL] relay = SocialRelayWellKnown ( subscribe = True ) [EOL] else : [EOL] return HttpResponseNotFound ( ) [EOL] return JsonResponse ( relay . doc ) [EOL] [EOL] [EOL] def content_xml_view ( request , uuid ) : [EOL] [docstring] [EOL] content = get_object_or_404 ( Content , uuid = uuid , visibility = Visibility . PUBLIC , local = True ) [EOL] entity = make_federable_content ( content ) [EOL] xml = get_full_xml_representation ( entity , content . author . private_key ) [EOL] return HttpResponse ( xml , content_type = [string] ) [EOL] [EOL] [EOL] def content_fetch_view ( request , objtype , guid ) : [EOL] [docstring] [EOL] if objtype not in [ [string] , [string] , [string] , [string] ] : [EOL] raise Http404 ( ) [EOL] content = get_object_or_404 ( Content , guid = guid , visibility = Visibility . PUBLIC ) [EOL] if not content . local : [EOL] if content . author . handle is None : [EOL] raise Http404 ( ) [EOL] url = [string] % ( content . author . handle . split ( [string] ) [ [number] ] , objtype , guid ) [EOL] return HttpResponseRedirect ( url ) [EOL] try : [EOL] entity = make_federable_content ( content ) [EOL] message = get_full_xml_representation ( entity , content . author . private_key ) [EOL] document = MagicEnvelope ( message = message , private_key = content . author . private_key , author_handle = content . author . handle ) [EOL] return HttpResponse ( document . render ( ) , content_type = [string] ) [EOL] except TypeError as ex : [EOL] logger . warning ( [string] , ex ) [EOL] raise Http404 ( ) [EOL] [EOL] [EOL] class ReceivePublicView ( View ) : [EOL] [docstring] [EOL] def post ( self , request , * args , ** kwargs ) : [EOL] if queue_payload ( request ) : [EOL] return HttpResponse ( status = [number] ) [EOL] return HttpResponseBadRequest ( ) [EOL] [EOL] [EOL] class ReceiveUserView ( View ) : [EOL] [docstring] [EOL] def post ( self , request , * args , ** kwargs ) : [EOL] if queue_payload ( request , uuid = kwargs . get ( [string] ) ) : [EOL] return HttpResponse ( status = [number] ) [EOL] return HttpResponseBadRequest ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Loggerlogging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import logging [EOL] import builtins [EOL] import typing [EOL] import socialhome [EOL] import logging [EOL] from typing import List , TYPE_CHECKING , Optional [EOL] from uuid import uuid4 [EOL] [EOL] import django_rq [EOL] from django . conf import settings [EOL] from dynamic_preferences . registries import global_preferences_registry [EOL] from federation . entities import base [EOL] from federation . exceptions import NoSuitableProtocolFoundError , NoSenderKeyFoundError , SignatureVerificationError [EOL] from federation . inbound import handle_receive [EOL] from federation . outbound import handle_send [EOL] [EOL] from socialhome . content . enums import ContentType [EOL] from socialhome . content . models import Content [EOL] from socialhome . enums import Visibility [EOL] from socialhome . federate . models import Payload [EOL] from socialhome . federate . utils . tasks import process_entities , sender_key_fetcher [EOL] from socialhome . federate . utils import make_federable_profile , get_outbound_payload_logger [EOL] from socialhome . federate . utils . entities import make_federable_content , make_federable_retraction [EOL] from socialhome . users . models import Profile [EOL] [EOL] if TYPE_CHECKING : [EOL] from federation import RequestType [EOL] [EOL] logger = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] def receive_task ( request , uuid = None ) : [EOL] [comment] [EOL] [docstring] [EOL] profile = None [EOL] if uuid : [EOL] try : [EOL] profile = Profile . objects . get ( uuid = uuid , user__isnull = False ) [EOL] except Profile . DoesNotExist : [EOL] logger . warning ( [string] ) [EOL] return [EOL] try : [EOL] sender , protocol_name , entities = handle_receive ( request , user = profile . federable if profile else None , sender_key_fetcher = sender_key_fetcher , ) [EOL] logger . debug ( [string] % ( sender , protocol_name , entities ) ) [EOL] preferences = global_preferences_registry . manager ( ) [EOL] if preferences [ [string] ] : [EOL] Payload . objects . create ( body = request . body , direction = [string] , entities_found = len ( entities ) , headers = request . headers , method = request . method , protocol = protocol_name or [string] , sender = sender or [string] , url = request . url , ) [EOL] except NoSuitableProtocolFoundError : [EOL] logger . warning ( [string] ) [EOL] return [EOL] except NoSenderKeyFoundError : [EOL] logger . warning ( [string] ) [EOL] return [EOL] except SignatureVerificationError : [EOL] logger . warning ( [string] ) [EOL] return [EOL] if not entities : [EOL] logger . warning ( [string] ) [EOL] return [EOL] process_entities ( entities ) [EOL] [EOL] [EOL] def send_content ( content_id , activity_fid , recipient_id = None ) : [EOL] [docstring] [EOL] try : [EOL] content = Content . objects . get ( id = content_id , visibility__in = ( Visibility . PUBLIC , Visibility . LIMITED ) , content_type = ContentType . CONTENT , local = True , ) [EOL] except Content . DoesNotExist : [EOL] logger . warning ( [string] , content_id ) [EOL] return [EOL] if recipient_id : [EOL] try : [EOL] recipient = Profile . objects . get ( id = recipient_id , user__isnull = True ) [EOL] except Profile . DoesNotExist : [EOL] logger . warning ( [string] , recipient_id ) [EOL] return [EOL] else : [EOL] recipient = None [EOL] entity = make_federable_content ( content ) [EOL] if entity : [EOL] entity . activity_id = activity_fid [EOL] if settings . DEBUG : [EOL] [comment] [EOL] return [EOL] recipients = [ ] [EOL] if recipient : [EOL] recipients . append ( recipient . get_recipient_for_visibility ( content . visibility ) ) [EOL] else : [EOL] if content . visibility == Visibility . PUBLIC : [EOL] recipients . append ( { [string] : settings . SOCIALHOME_RELAY_ID , [string] : [string] , [string] : True , [string] : [string] } ) [EOL] recipients . extend ( _get_remote_followers ( content . author , content . visibility ) ) [EOL] [EOL] logger . debug ( [string] , recipients ) [EOL] handle_send ( entity , content . author . federable , recipients , payload_logger = get_outbound_payload_logger ( ) ) [EOL] else : [EOL] logger . warning ( [string] , content ) [EOL] [EOL] [EOL] def _get_remote_participants_for_content ( target_content , participants = None , exclude = None , include_remote = False ) : [EOL] [docstring] [EOL] if not participants : [EOL] participants = [ ] [EOL] if not include_remote and not target_content . local : [EOL] return participants [EOL] replies = Content . objects . filter ( root_parent_id = target_content . id , local = False , author__user__isnull = True ) [EOL] for reply in replies : [EOL] if not exclude or ( reply . author . fid != exclude and reply . author . handle != exclude ) : [EOL] participants . append ( reply . author . get_recipient_for_visibility ( target_content . visibility ) ) [EOL] if target_content . content_type == ContentType . CONTENT : [EOL] shares = Content . objects . filter ( share_of_id = target_content . id , local = False ) [EOL] for share in shares : [EOL] if not exclude or ( share . author . fid != exclude and share . author . handle != exclude ) : [EOL] participants . append ( share . author . get_recipient_for_visibility ( target_content . visibility ) ) [EOL] participants = _get_remote_participants_for_content ( share , participants , exclude = exclude , include_remote = True ) [EOL] return participants [EOL] [EOL] [EOL] def _get_remote_followers ( profile , visibility , exclude = None ) : [EOL] [docstring] [EOL] followers = [ ] [EOL] for follower in Profile . objects . filter ( following = profile , user__isnull = True ) : [EOL] if not exclude or ( follower . fid != exclude and follower . handle != exclude ) : [EOL] followers . append ( follower . get_recipient_for_visibility ( visibility ) ) [EOL] return followers [EOL] [EOL] [EOL] def _get_limited_recipients ( sender , content ) : [EOL] profiles = [ ] [EOL] for profile in content . limited_visibilities . all ( ) : [EOL] if profile . fid != sender and profile . handle != sender and profile . guid != sender : [EOL] profiles . append ( profile . get_recipient_for_visibility ( content . visibility ) ) [EOL] return profiles [EOL] [EOL] [EOL] def send_reply ( content_id , activity_fid ) : [EOL] [docstring] [EOL] try : [EOL] content = Content . objects . get ( id = content_id , visibility__in = ( Visibility . PUBLIC , Visibility . LIMITED ) , content_type = ContentType . REPLY , local = True , ) [EOL] except Content . DoesNotExist : [EOL] logger . warning ( [string] , content_id ) [EOL] return [EOL] entity = make_federable_content ( content ) [EOL] if not entity : [EOL] logger . warning ( [string] , content ) [EOL] entity . activity_id = activity_fid [EOL] if settings . DEBUG : [EOL] [comment] [EOL] return [EOL] recipients = [ ] [EOL] if not content . root_parent . author . is_local : [EOL] recipients . append ( content . root_parent . author . get_recipient_for_visibility ( content . visibility ) ) [EOL] if content . visibility == Visibility . PUBLIC : [EOL] recipients . extend ( _get_remote_participants_for_content ( content , exclude = content . author . fid , include_remote = True ) , ) [EOL] recipients . extend ( _get_remote_followers ( content . author , content . visibility , exclude = content . author . fid , ) ) [EOL] elif content . visibility == Visibility . LIMITED : [EOL] recipients . extend ( _get_limited_recipients ( content . author . fid , content ) ) [EOL] else : [EOL] return [EOL] if not recipients : [EOL] logger . debug ( [string] , content . id ) [EOL] return [EOL] logger . debug ( [string] , recipients ) [EOL] handle_send ( entity , content . author . federable , recipients , payload_logger = get_outbound_payload_logger ( ) ) [EOL] [EOL] [EOL] def send_share ( content_id , activity_fid ) : [EOL] [docstring] [EOL] try : [EOL] content = Content . objects . get ( id = content_id , visibility = Visibility . PUBLIC , content_type = ContentType . SHARE , local = True ) [EOL] except Content . DoesNotExist : [EOL] logger . warning ( [string] , content_id ) [EOL] return [EOL] entity = make_federable_content ( content ) [EOL] if entity : [EOL] entity . activity_id = activity_fid [EOL] if settings . DEBUG : [EOL] [comment] [EOL] return [EOL] recipients = _get_remote_followers ( content . author , content . visibility ) [EOL] if not content . share_of . local : [EOL] [comment] [EOL] recipients . append ( content . share_of . author . get_recipient_for_visibility ( content . visibility ) ) [EOL] logger . debug ( [string] , recipients ) [EOL] handle_send ( entity , content . author . federable , recipients , payload_logger = get_outbound_payload_logger ( ) ) [EOL] else : [EOL] logger . warning ( [string] , content ) [EOL] [EOL] [EOL] def send_content_retraction ( content , author_id ) : [EOL] [docstring] [EOL] if content . visibility not in ( Visibility . PUBLIC , Visibility . LIMITED ) or not content . local : [EOL] return [EOL] author = Profile . objects . get ( id = author_id ) [EOL] entity = make_federable_retraction ( content , author ) [EOL] if entity : [EOL] if settings . DEBUG : [EOL] [comment] [EOL] return [EOL] if content . visibility == Visibility . PUBLIC : [EOL] recipients = [ { [string] : settings . SOCIALHOME_RELAY_ID , [string] : [string] , [string] : True , [string] : [string] } ] [EOL] recipients . extend ( _get_remote_followers ( author , content . visibility ) ) [EOL] else : [EOL] recipients = _get_limited_recipients ( author . fid , content ) [EOL] [EOL] logger . debug ( [string] , recipients ) [EOL] [comment] [EOL] django_rq . enqueue ( handle_send , entity , author . federable , recipients , payload_logger = get_outbound_payload_logger ( ) , job_timeout = [number] , ) [EOL] else : [EOL] logger . warning ( [string] , content ) [EOL] [EOL] [EOL] def send_profile_retraction ( profile ) : [EOL] [docstring] [EOL] if profile . visibility not in ( Visibility . PUBLIC , Visibility . LIMITED ) or not profile . is_local : [EOL] return [EOL] entity = make_federable_retraction ( profile ) [EOL] if entity : [EOL] if settings . DEBUG : [EOL] [comment] [EOL] return [EOL] recipients = _get_remote_followers ( profile , profile . visibility ) [EOL] logger . debug ( [string] , recipients ) [EOL] handle_send ( entity , profile . federable , recipients , payload_logger = get_outbound_payload_logger ( ) ) [EOL] else : [EOL] logger . warning ( [string] , profile ) [EOL] [EOL] [EOL] def forward_entity ( entity , target_content_id ) : [EOL] [docstring] [EOL] try : [EOL] target_content = Content . objects . get ( id = target_content_id , visibility__in = ( Visibility . PUBLIC , Visibility . LIMITED ) , local = True , ) [EOL] except Content . DoesNotExist : [EOL] logger . warning ( [string] , target_content_id ) [EOL] return [EOL] try : [EOL] content = Content . objects . fed ( entity . id , visibility__in = ( Visibility . PUBLIC , Visibility . LIMITED ) ) . get ( ) [EOL] except Content . DoesNotExist : [EOL] logger . warning ( [string] , entity . id ) [EOL] return [EOL] if settings . DEBUG : [EOL] [comment] [EOL] return [EOL] if target_content . visibility == Visibility . PUBLIC : [EOL] recipients = _get_remote_participants_for_content ( target_content , exclude = entity . actor_id ) [EOL] recipients . extend ( _get_remote_followers ( target_content . author , target_content . visibility , exclude = entity . actor_id , ) ) [EOL] elif target_content . visibility == Visibility . LIMITED and content . content_type == ContentType . REPLY : [EOL] recipients = _get_limited_recipients ( entity . actor_id , target_content ) [EOL] else : [EOL] return [EOL] logger . debug ( [string] , recipients ) [EOL] handle_send ( entity , content . author . federable , recipients , parent_user = target_content . author . federable , payload_logger = get_outbound_payload_logger ( ) , ) [EOL] [EOL] [EOL] def send_follow_change ( profile_id , followed_id , follow ) : [EOL] [docstring] [EOL] try : [EOL] profile = Profile . objects . get ( id = profile_id , user__isnull = False ) [EOL] except Profile . DoesNotExist : [EOL] logger . warning ( [string] , profile_id ) [EOL] return [EOL] try : [EOL] remote_profile = Profile . objects . get ( id = followed_id , user__isnull = True ) [EOL] except Profile . DoesNotExist : [EOL] logger . warning ( [string] , followed_id ) [EOL] return [EOL] if settings . DEBUG : [EOL] [comment] [EOL] return [EOL] entity = base . Follow ( activity_id = f'{ profile . fid } [string] { uuid4 ( ) }' , actor_id = profile . fid , target_id = remote_profile . fid , following = follow , handle = profile . handle , target_handle = remote_profile . handle , ) [EOL] [comment] [EOL] recipients = [ remote_profile . get_recipient_for_visibility ( Visibility . LIMITED ) ] [EOL] logger . debug ( [string] , recipients ) [EOL] handle_send ( entity , profile . federable , recipients , payload_logger = get_outbound_payload_logger ( ) ) [EOL] [comment] [EOL] send_profile ( profile_id , recipients = recipients ) [EOL] [EOL] [EOL] def send_profile ( profile_id , recipients = None ) : [EOL] [docstring] [EOL] try : [EOL] profile = Profile . objects . get ( id = profile_id , user__isnull = False ) [EOL] except Profile . DoesNotExist : [EOL] logger . warning ( [string] , profile_id ) [EOL] return [EOL] entity = make_federable_profile ( profile ) [EOL] if not entity : [EOL] logger . warning ( [string] , profile ) [EOL] return [EOL] if settings . DEBUG : [EOL] [comment] [EOL] return [EOL] if not recipients : [EOL] recipients = _get_remote_followers ( profile , profile . visibility ) [EOL] logger . debug ( [string] , recipients ) [EOL] handle_send ( entity , profile . federable , recipients , payload_logger = get_outbound_payload_logger ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple [EOL] import typing [EOL] from django . contrib import admin [EOL] from django . contrib . admin import ModelAdmin [EOL] [EOL] from socialhome . federate . models import Payload [EOL] [EOL] [EOL] @ admin . register ( Payload ) class PayloadAdmin ( ModelAdmin ) : [EOL] list_display = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] list_filter = ( [string] , [string] , [string] , [string] , [string] ) [EOL] search_fields = ( [string] , [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class FederateConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL]	0 0
[comment] [EOL] [EOL] from django . db import migrations , models [EOL] import django . utils . timezone [EOL] import model_utils . fields [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] initial = True [EOL] [EOL] dependencies = [ ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . TextField ( ) ) , ( [string] , model_utils . fields . AutoCreatedField ( default = django . utils . timezone . now , editable = False ) ) , ( [string] , models . PositiveSmallIntegerField ( ) ) , ( [string] , models . TextField ( ) ) , ( [string] , models . CharField ( max_length = [number] ) ) , ( [string] , models . CharField ( max_length = [number] ) ) , ( [string] , models . CharField ( max_length = [number] ) ) , ( [string] , models . CharField ( max_length = [number] ) ) , ] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Optional , Dict , Set , Any , List [EOL] import logging [EOL] import builtins [EOL] import typing [EOL] import socialhome [EOL] import logging [EOL] from typing import Optional , List , Any [EOL] [EOL] import django_rq [EOL] from federation . entities import base [EOL] from federation . fetchers import retrieve_remote_profile , retrieve_remote_content [EOL] [EOL] from socialhome . content . models import Content [EOL] from socialhome . content . utils import safe_text , safe_text_for_markdown [EOL] from socialhome . enums import Visibility [EOL] from socialhome . federate . utils import get_profiles_from_receivers [EOL] from socialhome . utils import safe_make_aware [EOL] from socialhome . users . models import Profile , User [EOL] [EOL] logger = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] def get_sender_profile ( sender ) : [EOL] [docstring] [EOL] try : [EOL] logger . debug ( [string] , sender ) [EOL] sender_profile = Profile . objects . fed ( sender ) . exclude ( rsa_public_key = [string] ) . get ( ) [EOL] except Profile . DoesNotExist : [EOL] logger . debug ( [string] , sender ) [EOL] remote_profile = retrieve_remote_profile ( sender ) [EOL] if not remote_profile : [EOL] logger . warning ( [string] , sender ) [EOL] return [EOL] sender_profile = Profile . from_remote_profile ( remote_profile ) [EOL] else : [EOL] if sender_profile . is_local : [EOL] logger . warning ( [string] , sender ) [EOL] return [EOL] return sender_profile [EOL] [EOL] [EOL] def process_entities ( entities ) : [EOL] [docstring] [EOL] for entity in entities : [EOL] logger . info ( [string] , entity ) [EOL] [comment] [EOL] logger . info ( [string] , entity . _receivers ) [EOL] sender_id = entity . id if isinstance ( entity , base . Profile ) else entity . actor_id [EOL] profile = get_sender_profile ( sender_id ) [EOL] if not profile : [EOL] logger . warning ( [string] , entity ) [EOL] continue [EOL] try : [EOL] if isinstance ( entity , base . Post ) : [EOL] process_entity_post ( entity , profile ) [EOL] elif isinstance ( entity , base . Retraction ) : [EOL] process_entity_retraction ( entity , profile ) [EOL] elif isinstance ( entity , base . Comment ) : [EOL] process_entity_comment ( entity , profile ) [EOL] elif isinstance ( entity , base . Follow ) : [EOL] process_entity_follow ( entity , profile ) [EOL] elif isinstance ( entity , base . Profile ) : [EOL] Profile . from_remote_profile ( entity ) [EOL] elif isinstance ( entity , base . Share ) : [EOL] process_entity_share ( entity , profile ) [EOL] except Exception as ex : [EOL] logger . exception ( [string] , entity . id , ex ) [EOL] [EOL] [EOL] def process_entity_follow ( entity , profile ) : [EOL] [docstring] [EOL] try : [EOL] user = User . objects . get ( profile = Profile . objects . fed ( entity . target_id ) . get ( ) , is_active = True ) [EOL] except ( Profile . DoesNotExist , User . DoesNotExist ) : [EOL] logger . warning ( [string] , entity . target_id , entity ) [EOL] return [EOL] if entity . following : [EOL] profile . following . add ( user . profile ) [EOL] logger . info ( [string] , profile , user ) [EOL] else : [EOL] profile . following . remove ( user . profile ) [EOL] logger . info ( [string] , profile , user ) [EOL] [EOL] [EOL] def validate_against_old_content ( fid , entity , profile ) : [EOL] [docstring] [EOL] try : [EOL] old_content = Content . objects . fed ( fid ) . get ( ) [EOL] except Content . DoesNotExist : [EOL] return True [EOL] [comment] [EOL] if old_content . author . user : [EOL] logger . warning ( [string] , fid , old_content . author . fid ) [EOL] return False [EOL] if old_content . author != profile : [EOL] logger . warning ( [string] [string] , fid , profile . fid , old_content . author . fid ) [EOL] return False [EOL] if old_content . parent and entity . target_id and old_content . parent . fid != entity . target_id : [EOL] logger . warning ( [string] , fid ) [EOL] return False [EOL] return True [EOL] [EOL] [EOL] [comment] [EOL] def process_entity_post ( entity , profile ) : [EOL] [docstring] [EOL] fid = safe_text ( entity . id ) [EOL] if not validate_against_old_content ( fid , entity , profile ) : [EOL] return [EOL] values = { [string] : fid , [string] : _embed_entity_images_to_post ( entity . _children , safe_text_for_markdown ( entity . raw_content ) ) , [string] : profile , [string] : Visibility . PUBLIC if entity . public else Visibility . LIMITED , [string] : safe_make_aware ( entity . created_at , [string] ) , [string] : safe_text ( entity . provider_display_name ) or [string] , } [EOL] extra_lookups = { } [EOL] if getattr ( entity , [string] , None ) : [EOL] values [ [string] ] = safe_text ( entity . guid ) [EOL] extra_lookups [ [string] ] = values [ [string] ] [EOL] content , created = Content . objects . fed_update_or_create ( fid , values , extra_lookups = extra_lookups ) [EOL] _process_mentions ( content , entity ) [EOL] if created : [EOL] logger . info ( [string] , content ) [EOL] else : [EOL] logger . info ( [string] , content ) [EOL] if content . visibility == Visibility . LIMITED : [EOL] if entity . _receivers : [EOL] receivers = get_profiles_from_receivers ( entity . _receivers ) [EOL] if len ( receivers ) : [EOL] content . limited_visibilities . set ( receivers ) [EOL] logger . info ( [string] , content . fid , receivers ) [EOL] else : [EOL] logger . warning ( [string] , content . fid ) [EOL] else : [EOL] logger . warning ( [string] , content . fid ) [EOL] [EOL] [EOL] [comment] [EOL] def process_entity_comment ( entity , profile ) : [EOL] [docstring] [EOL] fid = safe_text ( entity . id ) [EOL] if not validate_against_old_content ( fid , entity , profile ) : [EOL] return [EOL] try : [EOL] parent = Content . objects . fed ( entity . target_id ) . get ( ) [EOL] except Content . DoesNotExist : [EOL] logger . warning ( [string] , entity ) [EOL] return [EOL] root_parent = parent [EOL] if entity . root_target_id : [EOL] try : [EOL] root_parent = Content . objects . fed ( entity . root_target_id ) . get ( ) [EOL] except Content . DoesNotExist : [EOL] pass [EOL] visibility = None [EOL] if getattr ( entity , [string] , None ) is not None : [EOL] visibility = Visibility . PUBLIC if entity . public else Visibility . LIMITED [EOL] values = { [string] : _embed_entity_images_to_post ( entity . _children , safe_text_for_markdown ( entity . raw_content ) ) , [string] : profile , [string] : visibility if visibility is not None else parent . visibility , [string] : safe_make_aware ( entity . created_at , [string] ) , [string] : parent , [string] : root_parent , } [EOL] extra_lookups = { } [EOL] if getattr ( entity , [string] , None ) : [EOL] values [ [string] ] = safe_text ( entity . guid ) [EOL] extra_lookups [ [string] ] = values [ [string] ] [EOL] content , created = Content . objects . fed_update_or_create ( fid , values , extra_lookups = extra_lookups ) [EOL] _process_mentions ( content , entity ) [EOL] if created : [EOL] logger . info ( [string] , content ) [EOL] else : [EOL] logger . info ( [string] , content ) [EOL] [EOL] if visibility == Visibility . LIMITED or ( visibility is None and parent . visibility == Visibility . LIMITED ) : [EOL] if entity . _receivers : [EOL] receivers = get_profiles_from_receivers ( entity . _receivers ) [EOL] if len ( receivers ) : [EOL] content . limited_visibilities . add ( * receivers ) [EOL] logger . info ( [string] , content . fid , receivers ) [EOL] else : [EOL] logger . warning ( [string] , content . fid ) [EOL] else : [EOL] logger . warning ( [string] , content . fid ) [EOL] [EOL] if parent . local : [EOL] [comment] [EOL] from socialhome . federate . tasks import forward_entity [EOL] django_rq . enqueue ( forward_entity , entity , root_parent . id ) [EOL] [EOL] [EOL] def _embed_entity_images_to_post ( children , text ) : [EOL] [docstring] [EOL] images = [ ] [EOL] for child in children : [EOL] if isinstance ( child , base . Image ) : [EOL] images . append ( f" [string] { safe_text ( child . name ) } [string] { safe_text ( child . url ) } [string] " ) [EOL] if images : [EOL] return [string] % ( [string] . join ( images ) , text ) [EOL] return text [EOL] [EOL] [EOL] def _process_mentions ( content , entity ) : [EOL] [docstring] [EOL] fids = set ( entity . _mentions ) [EOL] existing_fids = set ( content . mentions . values_list ( [string] , flat = True ) ) [EOL] to_remove = existing_fids . difference ( fids ) [EOL] to_add = fids . difference ( existing_fids ) [EOL] for fid in to_remove : [EOL] try : [EOL] content . mentions . remove ( Profile . objects . fed ( fid ) . get ( ) ) [EOL] except Profile . DoesNotExist : [EOL] pass [EOL] for fid in to_add : [EOL] try : [EOL] content . mentions . add ( Profile . objects . fed ( fid ) . get ( ) ) [EOL] except Profile . DoesNotExist : [EOL] pass [EOL] [EOL] [EOL] def _retract_content ( target_fid , profile ) : [EOL] [docstring] [EOL] try : [EOL] content = Content . objects . fed ( target_fid , local = False ) . get ( ) [EOL] except Content . DoesNotExist : [EOL] logger . warning ( [string] , target_fid ) [EOL] return [EOL] if content . author != profile : [EOL] logger . warning ( [string] , content , profile ) [EOL] return [EOL] [comment] [EOL] content . delete ( ) [EOL] logger . info ( [string] , content ) [EOL] [EOL] [EOL] def _retract_relationship ( target_uuid , profile ) : [EOL] [docstring] [EOL] try : [EOL] user = User . objects . get ( profile__uuid = target_uuid ) [EOL] except User . DoesNotExist : [EOL] logger . warning ( [string] , target_uuid ) [EOL] return [EOL] profile . following . remove ( user . profile ) [EOL] logger . info ( [string] , profile , user ) [EOL] [EOL] [EOL] def process_entity_retraction ( entity , profile ) : [EOL] [docstring] [EOL] entity_type = safe_text ( entity . entity_type ) [EOL] [comment] [EOL] [comment] [EOL] if entity_type in ( [string] , [string] , [string] , [string] ) : [EOL] target_fid = safe_text ( entity . target_id ) [EOL] _retract_content ( target_fid , profile ) [EOL] else : [EOL] logger . debug ( [string] , entity_type ) [EOL] [EOL] [EOL] def process_entity_share ( entity , profile ) : [EOL] [docstring] [EOL] if not entity . entity_type == [string] : [EOL] [comment] [EOL] logger . warning ( [string] ) [EOL] return [EOL] try : [EOL] target_content = Content . objects . fed ( entity . target_id , share_of__isnull = True ) . get ( ) [EOL] except Content . DoesNotExist : [EOL] [comment] [EOL] logger . debug ( [string] , entity . target_id , entity . target_guid , entity . target_handle , entity . entity_type , sender_key_fetcher , ) [EOL] remote_target = retrieve_remote_content ( entity . target_id , guid = entity . target_guid , handle = entity . target_handle , entity_type = entity . entity_type , sender_key_fetcher = sender_key_fetcher , ) [EOL] if remote_target : [EOL] process_entities ( [ remote_target ] ) [EOL] try : [EOL] target_content = Content . objects . fed ( entity . target_id , share_of__isnull = True ) . get ( ) [EOL] except Content . DoesNotExist : [EOL] logger . warning ( [string] , entity ) [EOL] return [EOL] else : [EOL] logger . warning ( [string] , entity ) [EOL] return [EOL] if target_content . visibility != Visibility . PUBLIC : [EOL] [comment] [EOL] logger . warning ( [string] , entity , target_content ) [EOL] return [EOL] values = { [string] : safe_text_for_markdown ( entity . raw_content ) , [string] : profile , [string] : Visibility . PUBLIC , [string] : safe_make_aware ( entity . created_at , [string] ) , [string] : safe_text ( entity . provider_display_name ) or [string] , } [EOL] [comment] [EOL] values [ [string] ] = _embed_entity_images_to_post ( entity . _children , values [ [string] ] ) [EOL] fid = safe_text ( entity . id ) [EOL] if getattr ( entity , [string] , None ) : [EOL] values [ [string] ] = safe_text ( entity . guid ) [EOL] content , created = Content . objects . fed_update_or_create ( fid , values , extra_lookups = { [string] : target_content } ) [EOL] _process_mentions ( content , entity ) [EOL] if created : [EOL] logger . info ( [string] , content ) [EOL] else : [EOL] logger . info ( [string] , content ) [EOL] [comment] [EOL] [comment] [EOL] if target_content . local : [EOL] [comment] [EOL] from socialhome . federate . tasks import forward_entity [EOL] django_rq . enqueue ( forward_entity , entity , target_content . id ) [EOL] [EOL] [EOL] def sender_key_fetcher ( fid ) : [EOL] [docstring] [EOL] logger . debug ( [string] , fid ) [EOL] profile = get_sender_profile ( fid ) [EOL] if not profile : [EOL] return [EOL] return profile . rsa_public_key [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . generic import * [comment] [EOL] from . entities import * [comment] [EOL] from . tasks import * [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Dict , Match , Any , Union [EOL] import django [EOL] import builtins [EOL] import logging [EOL] import typing [EOL] import datetime [EOL] import logging [EOL] import pickle [EOL] import re [EOL] from typing import Union , Dict , Optional [EOL] [EOL] import django_rq [EOL] from django . conf import settings [EOL] from django . contrib . sites . models import Site [EOL] from django . http import HttpRequest [EOL] from django . utils . timezone import now [EOL] from dynamic_preferences . registries import global_preferences_registry [EOL] from federation . types import RequestType [EOL] [EOL] from socialhome import __version__ as version [EOL] from socialhome . content . enums import ContentType [EOL] from socialhome . federate . models import Payload [EOL] [EOL] logger = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] def get_nodeinfo2_data ( ) : [EOL] [docstring] [EOL] from socialhome . content . models import Content [comment] [EOL] from socialhome . users . models import User [comment] [EOL] site = Site . objects . get_current ( ) [EOL] data = { [string] : { [string] : settings . SOCIALHOME_URL , [string] : site . name , [string] : [string] , [string] : version , } , [string] : settings . SOCIALHOME_RELAY_SCOPE , [string] : settings . ACCOUNT_ALLOW_REGISTRATION , } [EOL] if settings . SOCIALHOME_STATISTICS : [EOL] data . update ( { [string] : { [string] : { [string] : User . objects . count ( ) , [string] : User . objects . filter ( last_login__gte = now ( ) - datetime . timedelta ( days = [number] ) ) . count ( ) , [string] : User . objects . filter ( last_login__gte = now ( ) - datetime . timedelta ( days = [number] ) ) . count ( ) , [string] : User . objects . filter ( last_login__gte = now ( ) - datetime . timedelta ( days = [number] ) ) . count ( ) , } , [string] : Content . objects . filter ( author__user__isnull = False , content_type = ContentType . CONTENT ) . count ( ) , [string] : Content . objects . filter ( author__user__isnull = False , content_type = ContentType . REPLY ) . count ( ) , } } ) [EOL] if settings . SOCIALHOME_SHOW_ADMINS : [EOL] data . update ( { [string] : { [string] : settings . ADMINS [ [number] ] [ [number] ] , [string] : settings . ADMINS [ [number] ] [ [number] ] , } } ) [EOL] return data [EOL] [EOL] [EOL] def get_outbound_payload_logger ( ) : [EOL] [docstring] [EOL] preferences = global_preferences_registry . manager ( ) [EOL] if preferences [ [string] ] : [EOL] return outbound_payload_logger [EOL] [EOL] [EOL] def outbound_payload_logger ( payload , protocol , sender ) : [EOL] [docstring] [EOL] Payload . objects . create ( body = str ( payload ) , direction = [string] , entities_found = [number] , headers = [string] , method = [string] , protocol = protocol , sender = sender , url = [string] , ) [EOL] [EOL] [EOL] def queue_payload ( request , uuid = None ) : [EOL] [docstring] [EOL] from socialhome . federate . tasks import receive_task [comment] [EOL] try : [EOL] [comment] [EOL] headers = { } [EOL] for key , value in request . META . items ( ) : [EOL] key = key . replace ( [string] , [string] ) . lower ( ) . replace ( [string] , [string] ) . capitalize ( ) [EOL] try : [EOL] pickle . dumps ( value ) [EOL] except Exception : [EOL] pass [EOL] else : [EOL] headers [ key ] = value [EOL] [comment] [EOL] headers [ key . lower ( ) ] = value [EOL] _request = RequestType ( body = request . body , headers = headers , method = request . method , url = request . build_absolute_uri ( ) , ) [EOL] preferences = global_preferences_registry . manager ( ) [EOL] if preferences [ [string] ] : [EOL] logger . debug ( [string] , _request ) [EOL] [EOL] if not uuid : [EOL] [comment] [EOL] match = re . match ( [string] , request . path ) [EOL] if match : [EOL] uuid = match . groups ( ) [ [number] ] [EOL] [EOL] django_rq . enqueue ( receive_task , _request , uuid = uuid ) [EOL] return True [EOL] except Exception : [EOL] logger . exception ( [string] ) [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None
from typing import Optional , Set , Any , List , Union [EOL] import typing [EOL] import builtins [EOL] import socialhome [EOL] import Crypto [EOL] import federation [EOL] import logging [EOL] import django [EOL] import logging [EOL] from typing import Optional , Union , List [EOL] [EOL] from Crypto . PublicKey . RSA import RsaKey [EOL] from django . conf import settings [EOL] from django . contrib . auth . models import AnonymousUser [EOL] from django . db . models . query_utils import Q [EOL] from django . http import HttpRequest [EOL] from federation . entities import base [EOL] from federation . entities . mixins import BaseEntity [EOL] from federation . types import UserType , ReceiverVariant [EOL] [EOL] from socialhome . content . enums import ContentType [EOL] from socialhome . content . models import Content [EOL] from socialhome . enums import Visibility [EOL] from socialhome . users . models import Profile [EOL] [EOL] logger = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] def _make_post ( content ) : [EOL] try : [EOL] return base . Post ( raw_content = content . text , id = content . fid , actor_id = content . author . fid , public = True if content . visibility == Visibility . PUBLIC else False , provider_display_name = [string] , created_at = content . effective_modified , guid = str ( content . uuid ) , handle = content . author . handle , ) [EOL] except Exception as ex : [EOL] logger . exception ( [string] , content . fid , ex ) [EOL] [EOL] [EOL] def _make_comment ( content ) : [EOL] try : [EOL] return base . Comment ( raw_content = content . text , id = content . fid , actor_id = content . author . fid , target_id = content . parent . fid , root_target_id = content . root_parent . fid , created_at = content . effective_modified , guid = str ( content . uuid ) , handle = content . author . handle , target_guid = content . parent . guid , root_target_guid = content . root_parent . guid , ) [EOL] except Exception as ex : [EOL] logger . exception ( [string] , content . fid , ex ) [EOL] [EOL] [EOL] def _make_share ( content ) : [EOL] try : [EOL] return base . Share ( raw_content = content . text , id = content . fid , target_id = content . share_of . fid , actor_id = content . author . fid , created_at = content . effective_modified , public = True if content . visibility == Visibility . PUBLIC else False , provider_display_name = [string] , guid = str ( content . uuid ) , handle = content . author . handle , target_guid = content . share_of . guid , target_handle = content . share_of . author . handle , ) [EOL] except Exception as ex : [EOL] logger . exception ( [string] , content . fid , ex ) [EOL] [EOL] [EOL] def get_federable_object ( request ) : [EOL] [docstring] [EOL] object_id = request . build_absolute_uri ( ) [EOL] user = getattr ( request , [string] , AnonymousUser ( ) ) [EOL] if request . path . startswith ( [string] ) : [EOL] content = Content . objects . filter ( fid = object_id ) . first ( ) [EOL] if content and content . visible_for_user ( user ) : [EOL] federable_content = make_federable_content ( content ) [EOL] return federable_content [EOL] elif request . path . startswith ( [string] ) or request . path == [string] : [EOL] if settings . SOCIALHOME_ROOT_PROFILE and object_id . rstrip ( [string] ) == settings . SOCIALHOME_URL . rstrip ( [string] ) : [EOL] profile = Profile . objects . get ( user__username = settings . SOCIALHOME_ROOT_PROFILE ) [EOL] else : [EOL] profile = Profile . objects . filter ( fid = object_id ) . first ( ) [EOL] if profile and profile . visible_to_user ( user ) : [EOL] federable_profile = make_federable_profile ( profile ) [EOL] return federable_profile [EOL] [EOL] [EOL] def get_profile ( ** kwargs ) : [EOL] [docstring] [EOL] from socialhome . users . models import Profile [comment] [EOL] kwargs . pop ( [string] , None ) [EOL] profile = Profile . objects . select_related ( [string] ) . get ( ** kwargs ) [EOL] return make_federable_profile ( profile ) [EOL] [EOL] [EOL] def get_profiles_from_receivers ( receivers ) : [EOL] [docstring] [EOL] profile_ids = set ( ) [EOL] for receiver in receivers : [EOL] if receiver . receiver_variant == ReceiverVariant . ACTOR : [EOL] try : [EOL] profile = Profile . objects . fed ( receiver . id , user__isnull = False ) . get ( ) [EOL] except Profile . DoesNotExist : [EOL] continue [EOL] else : [EOL] profile_ids . add ( profile . id ) [EOL] elif receiver . receiver_variant == ReceiverVariant . FOLLOWERS : [EOL] sender = Profile . objects . fed ( receiver . id , user__isnull = True ) [EOL] receiver_ids = set ( Profile . objects . filter ( user__isnull = False , following__in = sender ) . values_list ( [string] , flat = True ) , ) [EOL] profile_ids = profile_ids . union ( receiver_ids ) [EOL] return Profile . objects . filter ( id__in = profile_ids ) [EOL] [EOL] [EOL] def get_user_private_key ( identifier ) : [EOL] [docstring] [EOL] from socialhome . users . models import Profile [comment] [EOL] try : [EOL] profile = Profile . objects . only ( [string] ) . get ( Q ( fid = identifier ) | Q ( handle = identifier ) | Q ( guid = identifier ) , ) [EOL] except Profile . DoesNotExist : [EOL] return [EOL] return profile . private_key [EOL] [EOL] [EOL] def make_federable_content ( content ) : [EOL] [docstring] [EOL] logger . info ( [string] , content ) [EOL] if content . content_type == ContentType . REPLY : [EOL] return _make_comment ( content ) [EOL] elif content . content_type == ContentType . SHARE : [EOL] return _make_share ( content ) [EOL] return _make_post ( content ) [EOL] [EOL] [EOL] def make_federable_retraction ( obj , author = None ) : [EOL] [docstring] [EOL] logger . info ( [string] , obj ) [EOL] try : [EOL] if isinstance ( obj , Content ) : [EOL] entity_type = { ContentType . REPLY : [string] , ContentType . SHARE : [string] , ContentType . CONTENT : [string] , } . get ( obj . content_type ) [EOL] actor_id = author . fid [EOL] handle = author . handle [EOL] elif isinstance ( obj , Profile ) : [EOL] entity_type = [string] [EOL] actor_id = obj . fid [EOL] handle = obj . handle [EOL] else : [EOL] logger . warning ( [string] , obj ) [EOL] return [EOL] return base . Retraction ( entity_type = entity_type , actor_id = actor_id , target_id = obj . fid , handle = handle , target_guid = obj . guid , ) [EOL] except Exception as ex : [EOL] logger . exception ( [string] , obj . fid , ex ) [EOL] [EOL] [EOL] def make_federable_profile ( profile ) : [EOL] [docstring] [EOL] logger . info ( [string] , profile ) [EOL] try : [EOL] return base . Profile ( raw_content = [string] , public = True , name = profile . name_or_handle , image_urls = { [string] : profile . safer_image_url_small , [string] : profile . safer_image_url_medium , [string] : profile . safer_image_url_large , } , public_key = profile . rsa_public_key , url = profile . url , created_at = profile . created , base_url = settings . SOCIALHOME_URL , id = profile . fid , handle = profile . handle or [string] , guid = str ( profile . uuid ) if profile . is_local else profile . guid if profile . guid else [string] , inboxes = { [string] : profile . inbox_private , [string] : profile . inbox_public , } , username = profile . username_part , ) [EOL] except Exception as ex : [EOL] logger . exception ( [string] , profile . uuid , ex ) [EOL] return [EOL]	
from django . apps import AppConfig [EOL] [EOL] [EOL] class SearchConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] import xml [EOL] [EOL] from django . contrib import messages [EOL] from django . db . models import Count [EOL] from django . http import HttpResponseRedirect , Http404 [EOL] from django . shortcuts import redirect [EOL] from django . urls import reverse [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from federation . entities import base [EOL] from federation . fetchers import retrieve_remote_profile , retrieve_remote_content [EOL] from federation . utils . text import validate_handle [EOL] from haystack . generic_views import SearchView [EOL] from whoosh . query import QueryError [EOL] [EOL] from socialhome . content . models import Tag , Content [EOL] from socialhome . content . utils import safe_text [EOL] from socialhome . enums import Visibility [EOL] from socialhome . federate . utils import process_entities [EOL] from socialhome . users . models import Profile [EOL] from socialhome . utils import is_url [EOL] [EOL] [EOL] class GlobalSearchView ( SearchView ) : [EOL] def get_context_data ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] context = super ( ) . get_context_data ( * args , ** kwargs ) [EOL] tags = self . get_tags_qs ( ) [EOL] tags_context = { [string] : None , [string] : None , [string] : False , [string] : tags , } [EOL] page_size = self . get_paginate_by ( tags ) [EOL] if page_size : [EOL] try : [EOL] paginator , page , queryset , is_paginated = self . paginate_queryset ( tags , page_size ) [EOL] except Http404 : [EOL] pass [EOL] else : [EOL] tags_context = { [string] : paginator , [string] : page , [string] : is_paginated , [string] : queryset , } [EOL] context [ [string] ] = tags_context [EOL] return context [EOL] [EOL] def get_queryset ( self ) : [EOL] [docstring] [EOL] queryset = super ( ) . get_queryset ( ) [EOL] return self . filter_queryset ( queryset ) [EOL] [EOL] def get_tags_qs ( self ) : [EOL] [docstring] [EOL] return Tag . objects . annotate ( content_count = Count ( [string] ) ) . filter ( content_count__gt = [number] , name__icontains = self . q , ) . order_by ( [string] ) [EOL] [EOL] def get ( self , request , * args , ** kwargs ) : [EOL] [docstring] [EOL] q = safe_text ( request . GET . get ( [string] ) ) [EOL] if q : [EOL] q = q . strip ( ) . lower ( ) . strip ( [string] ) [EOL] self . q = q [EOL] [comment] [EOL] if q . startswith ( [string] ) : [EOL] try : [EOL] tag = Tag . objects . filter ( name = q [ [number] : ] ) . annotate ( content_count = Count ( [string] ) ) . filter ( content_count__gt = [number] ) . get ( ) [EOL] except Tag . DoesNotExist : [EOL] pass [EOL] else : [EOL] return redirect ( tag . get_absolute_url ( ) ) [EOL] [comment] [EOL] profile = None [EOL] try : [EOL] profile = Profile . objects . visible_for_user ( request . user ) . fed ( q ) . get ( ) [EOL] except Profile . DoesNotExist : [EOL] [comment] [EOL] if is_url ( q ) or validate_handle ( q ) : [EOL] try : [EOL] remote_profile = retrieve_remote_profile ( q ) [EOL] except ( AttributeError , ValueError , xml . parsers . expat . ExpatError ) : [EOL] [comment] [EOL] return super ( ) . get ( request , * args , ** kwargs ) [EOL] if remote_profile and isinstance ( remote_profile , base . Profile ) : [EOL] profile = Profile . from_remote_profile ( remote_profile ) [EOL] if profile : [EOL] return redirect ( reverse ( [string] , kwargs = { [string] : profile . uuid } ) ) [EOL] [comment] [EOL] content = None [EOL] try : [EOL] content = Content . objects . visible_for_user ( request . user ) . fed ( q ) . get ( ) [EOL] except Content . DoesNotExist : [EOL] [comment] [EOL] if is_url ( q ) : [EOL] try : [EOL] remote_content = retrieve_remote_content ( q ) [EOL] except ( AttributeError , ValueError ) : [EOL] [comment] [EOL] return super ( ) . get ( request , * args , ** kwargs ) [EOL] if remote_content : [EOL] process_entities ( [ remote_content ] ) [EOL] [comment] [EOL] try : [EOL] content = Content . objects . visible_for_user ( request . user ) . fed ( remote_content . id ) . get ( ) [EOL] except Content . DoesNotExist : [EOL] return super ( ) . get ( request , * args , ** kwargs ) [EOL] if content : [EOL] return redirect ( reverse ( [string] , kwargs = { [string] : content . id } ) ) [EOL] try : [EOL] return super ( ) . get ( request , * args , ** kwargs ) [EOL] except QueryError : [EOL] [comment] [EOL] messages . warning ( self . request , _ ( [string] ) ) [EOL] return HttpResponseRedirect ( self . get_success_url ( ) ) [EOL] [EOL] def filter_queryset ( self , queryset ) : [EOL] [docstring] [EOL] if self . request . user . is_authenticated : [EOL] queryset = queryset . exclude ( id = self . request . user . profile . id ) [EOL] if self . request . user . is_staff : [EOL] return queryset [EOL] else : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] return queryset . exclude ( profile_visibility__in = [ Visibility . SELF . value , Visibility . LIMITED . value ] ) [EOL] return queryset . exclude ( profile_visibility__in = [ Visibility . LIMITED . value , Visibility . SITE . value , Visibility . SELF . value ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] from django . conf . urls import url [EOL] [EOL] from socialhome . search . views import GlobalSearchView [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ url ( [string] , GlobalSearchView . as_view ( ) , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
default_app_config = [string] [EOL]	$builtins.str$ 0 0 0
	0
default_app_config = [string] [EOL]	$builtins.str$ 0 0 0
from typing import Any [EOL] import typing [EOL] import sys [EOL] [EOL] import django_rq [EOL] from django . apps import AppConfig [EOL] [EOL] from socialhome . streams . tasks import streams_tasks [EOL] [EOL] [EOL] class TasksConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL] [EOL] def ready ( self ) : [EOL] [comment] [EOL] if [string] not in sys . argv : [EOL] return [EOL] [EOL] scheduler = django_rq . get_scheduler ( [string] ) [EOL] [EOL] [comment] [EOL] for job in scheduler . get_jobs ( ) : [EOL] job . delete ( ) [EOL] [EOL] [comment] [EOL] streams_tasks ( scheduler ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0
[comment] [EOL]	0 0
	0
from unittest import TestCase [EOL] [EOL] from socialhome . templatetags . string_utils import startswith [EOL] [EOL] [EOL] class TestStartswith ( TestCase ) : [EOL] def test_startswith ( self ) : [EOL] self . assertTrue ( startswith ( [string] , [string] ) ) [EOL] self . assertFalse ( startswith ( [string] , [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] [comment] [EOL]	0 0 0 0
[docstring] [EOL] [comment] [EOL]	0 0 0 0
[docstring] [EOL] [comment] [EOL]	0 0 0 0
from typing import Any [EOL] import typing [EOL] import logging [EOL] import logging [EOL] [EOL] import django_rq [EOL] from django . conf import settings [EOL] from django . contrib . sites . models import Site [EOL] from django . core . mail import send_mail [EOL] from django . template . loader import render_to_string [EOL] from django . urls import reverse [EOL] from django . utils . timezone import now [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] [EOL] from socialhome . content . enums import ContentType [EOL] from socialhome . content . models import Content [EOL] from socialhome . users . models import User , Profile [EOL] [EOL] logger = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] def get_common_context ( ) : [EOL] site = Site . objects . get_current ( ) [EOL] return { [string] : site . name , [string] : settings . SOCIALHOME_URL } [EOL] [EOL] [EOL] def get_root_content_participants ( content , exclude_user = None ) : [EOL] [docstring] [EOL] [comment] [EOL] participants = User . objects . filter ( profile__content__id = content . id ) [EOL] [comment] [EOL] participants = participants | User . objects . filter ( profile__content__parent_id = content . id ) [EOL] [comment] [EOL] participants = participants | User . objects . filter ( profile__content__share_of_id = content . id ) [EOL] [comment] [EOL] participants = participants | User . objects . filter ( profile__content__parent__share_of_id = content . id ) [EOL] if exclude_user : [EOL] participants = participants . exclude ( id = exclude_user . id ) [EOL] return set ( participants ) [EOL] [EOL] [EOL] def send_follow_notification ( follower_id , followed_id ) : [EOL] [docstring] [EOL] if settings . DEBUG : [EOL] return [EOL] try : [EOL] user = User . objects . get ( profile__id = followed_id , is_active = True ) [EOL] except User . DoesNotExist : [EOL] logger . warning ( [string] , followed_id ) [EOL] return [EOL] try : [EOL] follower = Profile . objects . get ( id = follower_id ) [EOL] except Profile . DoesNotExist : [EOL] logger . warning ( [string] , follower_id ) [EOL] return [EOL] logger . info ( [string] , user . email ) [EOL] subject = _ ( [string] % follower . name_or_handle ) [EOL] context = get_common_context ( ) [EOL] context . update ( { [string] : subject , [string] : follower . name_or_handle , [string] : [string] % ( settings . SOCIALHOME_URL , follower . get_absolute_url ( ) ) , [string] : user . profile . name_or_handle , } ) [EOL] send_mail ( [string] % ( settings . EMAIL_SUBJECT_PREFIX , subject ) , render_to_string ( [string] , context = context ) , settings . DEFAULT_FROM_EMAIL , [ user . email ] , fail_silently = False , html_message = render_to_string ( [string] , context = context ) , ) [EOL] [EOL] [EOL] def send_mention_notification ( user_id , mention_profile_id , content_id ) : [EOL] [docstring] [EOL] if settings . DEBUG : [EOL] return [EOL] try : [EOL] user = User . objects . get ( id = user_id , is_active = True ) [EOL] except User . DoesNotExist : [EOL] logger . warning ( [string] , user_id ) [EOL] return [EOL] try : [EOL] content = Content . objects . get ( id = content_id ) [EOL] except Content . DoesNotExist : [EOL] logger . warning ( [string] , content_id ) [EOL] return [EOL] try : [EOL] mention_profile = Profile . objects . get ( id = mention_profile_id ) [EOL] except Profile . DoesNotExist : [EOL] logger . warning ( [string] , mention_profile_id ) [EOL] return [EOL] content_url = [string] % ( settings . SOCIALHOME_URL , content . get_absolute_url ( ) ) [EOL] subject = _ ( [string] ) [EOL] context = get_common_context ( ) [EOL] context . update ( { [string] : subject , [string] : mention_profile . name_or_handle , [string] : [string] % ( settings . SOCIALHOME_URL , mention_profile . get_absolute_url ( ) ) , [string] : content_url , [string] : user . profile . name_or_handle , } ) [EOL] send_mail ( [string] % ( settings . EMAIL_SUBJECT_PREFIX , subject ) , render_to_string ( [string] , context = context ) , settings . DEFAULT_FROM_EMAIL , [ user . email ] , fail_silently = False , html_message = render_to_string ( [string] , context = context ) , ) [EOL] [EOL] [EOL] def send_reply_notifications ( content_id ) : [EOL] [docstring] [EOL] if settings . DEBUG : [EOL] return [EOL] try : [EOL] content = Content . objects . get ( id = content_id , content_type = ContentType . REPLY ) [EOL] except Content . DoesNotExist : [EOL] logger . warning ( [string] , content_id ) [EOL] return [EOL] root_content = content . root [EOL] exclude_user = content . author . user if content . local else None [EOL] participants = get_root_content_participants ( root_content , exclude_user = exclude_user ) [EOL] if not participants : [EOL] return [EOL] subject = _ ( [string] % root_content . short_text_inline ) [EOL] [comment] [EOL] content_url = [string] % ( settings . SOCIALHOME_URL , root_content . get_absolute_url ( ) ) [EOL] context = get_common_context ( ) [EOL] context . update ( { [string] : subject , [string] : content . author . name_or_handle , [string] : [string] % ( settings . SOCIALHOME_URL , content . author . get_absolute_url ( ) ) , [string] : content . text , [string] : content . rendered , [string] : content_url , } ) [EOL] for participant in participants : [EOL] if not content . visible_for_user ( participant ) : [EOL] logger . debug ( [string] , participant . id , ) [EOL] continue [EOL] context [ [string] ] = participant . profile . name_or_handle [EOL] logger . info ( [string] , participant . email ) [EOL] send_mail ( [string] % ( settings . EMAIL_SUBJECT_PREFIX , subject ) , render_to_string ( [string] , context = context ) , settings . DEFAULT_FROM_EMAIL , [ participant . email ] , fail_silently = False , html_message = render_to_string ( [string] , context = context ) , ) [EOL] [EOL] [EOL] def send_share_notification ( share_id ) : [EOL] [docstring] [EOL] if settings . DEBUG : [EOL] return [EOL] try : [EOL] content = Content . objects . get ( id = share_id , content_type = ContentType . SHARE , share_of__local = True ) [EOL] except Content . DoesNotExist : [EOL] logger . warning ( [string] , share_id ) [EOL] return [EOL] content_url = [string] % ( settings . SOCIALHOME_URL , content . share_of . get_absolute_url ( ) ) [EOL] subject = _ ( [string] % content . share_of . short_text_inline ) [EOL] context = get_common_context ( ) [EOL] context . update ( { [string] : subject , [string] : content . author . name_or_handle , [string] : [string] % ( settings . SOCIALHOME_URL , content . author . get_absolute_url ( ) ) , [string] : content_url , [string] : content . share_of . author . name_or_handle , } ) [EOL] send_mail ( [string] % ( settings . EMAIL_SUBJECT_PREFIX , subject ) , render_to_string ( [string] , context = context ) , settings . DEFAULT_FROM_EMAIL , [ content . share_of . author . user . email ] , fail_silently = False , html_message = render_to_string ( [string] , context = context ) , ) [EOL] [EOL] [EOL] def send_data_export_ready_notification ( user_id ) : [EOL] [docstring] [EOL] if settings . DEBUG : [EOL] return [EOL] try : [EOL] user = User . objects . get ( id = user_id ) [EOL] except User . DoesNotExist : [EOL] logger . warning ( [string] , user_id ) [EOL] return [EOL] [EOL] subject = _ ( [string] ) [EOL] context = get_common_context ( ) [EOL] context . update ( { [string] : [string] % ( settings . SOCIALHOME_URL , reverse ( [string] ) ) , [string] : user . profile . name_or_handle , [string] : subject , } ) [EOL] send_mail ( [string] % ( settings . EMAIL_SUBJECT_PREFIX , subject ) , render_to_string ( [string] , context = context ) , settings . DEFAULT_FROM_EMAIL , [ user . email ] , fail_silently = False , html_message = render_to_string ( [string] , context = context ) , ) [EOL] [EOL] [EOL] def send_policy_document_update_notification ( user_id , docs ) : [EOL] [docstring] [EOL] if settings . DEBUG : [EOL] return [EOL] try : [EOL] user = User . objects . get ( id = user_id ) [EOL] except User . DoesNotExist : [EOL] logger . warning ( [string] , user_id ) [EOL] return [EOL] [EOL] if docs == [string] : [EOL] subject = _ ( [string] ) [EOL] elif docs == [string] : [EOL] subject = _ ( [string] ) [EOL] elif docs == [string] : [EOL] subject = _ ( [string] ) [EOL] else : [EOL] raise ValueError ( [string] ) [EOL] context = get_common_context ( ) [EOL] context . update ( { [string] : docs , [string] : [string] % ( settings . SOCIALHOME_URL , reverse ( [string] ) ) , [string] : [string] % ( settings . SOCIALHOME_URL , reverse ( [string] ) ) , [string] : user . profile . name_or_handle , [string] : subject , [string] : now ( ) , } ) [EOL] send_mail ( [string] % ( settings . EMAIL_SUBJECT_PREFIX , subject ) , render_to_string ( [string] , context = context ) , settings . DEFAULT_FROM_EMAIL , [ user . email ] , fail_silently = False , html_message = render_to_string ( [string] , context = context ) , ) [EOL] [EOL] [EOL] def send_policy_document_update_notifications ( docs ) : [EOL] [docstring] [EOL] if settings . DEBUG : [EOL] return [EOL] [EOL] users = User . objects . filter ( emailaddress__verified = True ) . distinct ( ) [EOL] for user in users : [EOL] try : [EOL] django_rq . enqueue ( send_policy_document_update_notification , user . id , docs ) [EOL] except Exception : [EOL] logger . error ( [string] % user . id ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] from django import template [EOL] [EOL] register = template . Library ( ) [EOL] [EOL] [EOL] @ register . filter def startswith ( value , sub ) : [EOL] return value . startswith ( sub ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type [EOL] import typing [EOL] import socialhome [EOL] from django . contrib . contenttypes . fields import GenericForeignKey [EOL] from django . contrib . contenttypes . models import ContentType [EOL] from django . db import models [EOL] from enumfields import EnumField [EOL] from federation . entities . activitypub . enums import ActivityType [EOL] from model_utils . fields import AutoCreatedField [EOL] [EOL] [EOL] class Activity ( models . Model ) : [EOL] [docstring] [EOL] content_object = GenericForeignKey ( [string] , [string] ) [EOL] content_type = models . ForeignKey ( ContentType , on_delete = models . PROTECT ) [EOL] created = AutoCreatedField ( ) [EOL] fid = models . URLField ( editable = False , max_length = [number] , unique = True ) [EOL] object_id = models . PositiveIntegerField ( ) [EOL] profile = models . ForeignKey ( [string] , on_delete = models . CASCADE ) [EOL] type = EnumField ( ActivityType ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.activities.models.Activity]$ 0 0 0 0 0 0 0 0 $typing.Type[socialhome.activities.models.Activity]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.activities.models.Activity]$ 0 0 0 0 0 $typing.Type[socialhome.activities.models.Activity]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.activities.models.Activity]$ 0 0 0 0 0 0 0 $typing.Type[socialhome.activities.models.Activity]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[socialhome.activities.models.Activity]$ 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ActivitiesConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
default_app_config = [string] [EOL]	$builtins.str$ 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations , models [EOL] import django . db . models . deletion [EOL] import django . utils . timezone [EOL] import enumfields . fields [EOL] import federation . entities . activitypub . enums [EOL] import model_utils . fields [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] initial = True [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , model_utils . fields . AutoCreatedField ( default = django . utils . timezone . now , editable = False ) ) , ( [string] , models . URLField ( editable = False , max_length = [number] , unique = True ) ) , ( [string] , models . PositiveIntegerField ( ) ) , ( [string] , enumfields . fields . EnumField ( enum = federation . entities . activitypub . enums . ActivityType , max_length = [number] ) ) , ( [string] , models . ForeignKey ( on_delete = django . db . models . deletion . PROTECT , to = [string] ) ) , ( [string] , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = [string] ) ) , ] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
[comment] [EOL] from typing import Tuple , Any , List [EOL] import typing [EOL] from django . db import migrations [EOL] from django . db . migrations import RunPython [EOL] [EOL] [EOL] def forward ( apps , schema_editor ) : [EOL] Url = apps . get_model ( [string] , [string] ) [EOL] Rule = apps . get_model ( [string] , [string] ) [EOL] Site = apps . get_model ( [string] , [string] ) [EOL] [comment] [EOL] urls = [ Url . objects . create ( pattern = [string] ) , Url . objects . create ( pattern = [string] ) , Url . objects . create ( pattern = [string] ) , Url . objects . create ( pattern = [string] ) , Url . objects . create ( pattern = [string] ) , Url . objects . create ( pattern = [string] ) , Url . objects . create ( pattern = [string] ) , Url . objects . create ( pattern = [string] ) , Url . objects . create ( pattern = [string] ) , Url . objects . create ( pattern = [string] ) , Url . objects . create ( pattern = [string] ) , Url . objects . create ( pattern = [string] ) , Url . objects . create ( pattern = [string] ) , Url . objects . create ( pattern = [string] ) , Url . objects . create ( pattern = [string] ) , Url . objects . create ( pattern = [string] ) , Url . objects . create ( pattern = [string] ) , Url . objects . create ( pattern = [string] ) , Url . objects . create ( pattern = [string] ) , Url . objects . create ( pattern = [string] ) , Url . objects . create ( pattern = [string] ) , Url . objects . create ( pattern = [string] ) , Url . objects . create ( pattern = [string] ) , Url . objects . create ( pattern = [string] ) , Url . objects . create ( pattern = [string] ) , Url . objects . create ( pattern = [string] ) , ] [EOL] rule = Rule . objects . create ( robot = [string] ) [EOL] rule . disallowed . add ( * urls ) [EOL] rule . sites . add ( Site . objects . first ( ) ) [EOL] [EOL] [EOL] def backward ( apps , schema_editor ) : [EOL] Url = apps . get_model ( [string] , [string] ) [EOL] Rule = apps . get_model ( [string] , [string] ) [EOL] Url . objects . all ( ) . delete ( ) [EOL] Rule . objects . all ( ) . delete ( ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] [EOL] operations = [ RunPython ( forward , backward ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , Any , List [EOL] import typing [EOL] from django . db import migrations [EOL] from django . db . migrations import RunPython [EOL] [EOL] [EOL] def forward ( apps , schema_editor ) : [EOL] PolicyDocument = apps . get_model ( [string] , [string] ) [EOL] content = [string] [EOL] PolicyDocument . objects . create ( content = content , state = [string] , type = [string] , ) [EOL] content = [string] [EOL] PolicyDocument . objects . create ( content = content , state = [string] , type = [string] , ) [EOL] [EOL] [EOL] def backward ( apps , schema_editor ) : [EOL] PolicyDocument = apps . get_model ( [string] , [string] ) [EOL] PolicyDocument . objects . all ( ) . delete ( ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ RunPython ( forward , backward ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0