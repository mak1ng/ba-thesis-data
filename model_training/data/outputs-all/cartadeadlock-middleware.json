from typing import List , Tuple [EOL] import typing [EOL] import os [EOL] import sys [EOL] [EOL] from setuptools import setup [EOL] import setuptools . command . test [EOL] [EOL] try : [EOL] long_description = open ( [string] ) . read ( ) [EOL] except IOError : [EOL] long_description = [string] [EOL] [EOL] [EOL] [comment] [EOL] class pytest ( setuptools . command . test . test ) : [EOL] user_options = [ ( [string] , [string] , [string] ) ] [EOL] [EOL] def initialize_options ( self ) : [EOL] setuptools . command . test . test . initialize_options ( self ) [EOL] self . pytest_args = [ ] [EOL] [EOL] def run_tests ( self ) : [EOL] import pytest as _pytest [EOL] [EOL] sys . exit ( _pytest . main ( self . pytest_args ) ) [EOL] [EOL] [EOL] def _strip_comments ( l ) : [EOL] return l . split ( [string] , [number] ) [ [number] ] . strip ( ) [EOL] [EOL] [EOL] def _pip_requirement ( req ) : [EOL] if req . startswith ( [string] ) : [EOL] _ , path = req . split ( ) [EOL] return reqs ( * path . split ( [string] ) ) [EOL] return [ req ] [EOL] [EOL] [EOL] def _reqs ( * f ) : [EOL] return [ _pip_requirement ( r ) for r in ( _strip_comments ( l ) for l in open ( os . path . join ( os . getcwd ( ) , [string] , * f ) ) . readlines ( ) ) if r ] [EOL] [EOL] [EOL] def reqs ( * f ) : [EOL] [docstring] [EOL] return [ req for subreq in _reqs ( * f ) for req in subreq ] [EOL] [EOL] [EOL] setup ( name = [string] , version = [string] , description = [string] , license = [string] , author = [string] , author_email = [string] , packages = [ [string] ] , install_requires = reqs ( [string] ) , tests_require = reqs ( [string] ) , cmdclass = { [string] : pytest } , long_description = long_description , include_package_data = False , url = [string] % [string] , classifiers = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import logging [EOL] import typing [EOL] import logging [EOL] [EOL] from django . conf import settings [EOL] from django . db import OperationalError [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class DeadlockRetryMiddleware : [EOL] def __init__ ( self , get_response ) : [EOL] self . get_response = get_response [EOL] [EOL] def __call__ ( self , request ) : [EOL] request . deadlock_retry_attempt = [number] [EOL] [EOL] return self . get_response ( request ) [EOL] [EOL] def process_view ( self , request , view_func , view_args , view_kwargs ) : [EOL] non_atomic_requests = getattr ( view_func , [string] , set ( ) ) [EOL] [EOL] request . disable_deadlock_retry = bool ( non_atomic_requests ) [EOL] [EOL] def process_exception ( self , request , exception ) : [EOL] if request . disable_deadlock_retry : [EOL] return None [EOL] [EOL] if not isinstance ( exception , OperationalError ) : [EOL] return None [EOL] [EOL] if not exception . args [ [number] ] . startswith ( [string] ) : [EOL] return None [EOL] [EOL] total_retry_attempts = getattr ( settings , [string] , [number] ) [EOL] if request . deadlock_retry_attempt < total_retry_attempts : [EOL] logger . warning ( [string] . format ( request . path ) ) [EOL] [EOL] request . deadlock_retry_attempt += [number] [EOL] [EOL] return self . get_response ( request ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List [EOL] import typing [EOL] from . middleware import DeadlockRetryMiddleware [EOL] [EOL] name = [string] [EOL] [EOL] __all__ = [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0
from django . conf import settings [EOL] [EOL] [EOL] def pytest_configure ( ) : [EOL] settings . configure ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from deadlock_middleware import name [EOL] [EOL] [EOL] def test_name_is_same_as_module ( ) : [EOL] assert name == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import deadlock_middleware [EOL] from django . db import OperationalError , transaction [EOL] from django . http import HttpRequest [EOL] from django . conf import settings [EOL] [EOL] from deadlock_middleware import DeadlockRetryMiddleware [EOL] [EOL] [EOL] def get_response ( request ) : [EOL] return request [EOL] [EOL] [EOL] middleware = DeadlockRetryMiddleware ( get_response ) [EOL] [EOL] [EOL] def test_call_adds_retry_count ( ) : [EOL] request = HttpRequest ( ) [EOL] [EOL] result = middleware ( request ) [EOL] [EOL] assert result . deadlock_retry_attempt == [number] [EOL] [EOL] [EOL] def test_process_view_disables_if_non_atomic_requests_set ( ) : [EOL] @ transaction . non_atomic_requests def view_func ( request , * args , ** kwargs ) : [EOL] return request [EOL] [EOL] request = HttpRequest ( ) [EOL] [EOL] middleware . process_view ( request , view_func , [ ] , { } ) [EOL] [EOL] assert request . disable_deadlock_retry is True [EOL] [EOL] [EOL] def test_process_view_enables_if_non_atomic_requests_not_set ( ) : [EOL] def view_func ( request , * args , ** kwargs ) : [EOL] return request [EOL] [EOL] request = HttpRequest ( ) [EOL] [EOL] middleware . process_view ( request , view_func , [ ] , { } ) [EOL] [EOL] assert request . disable_deadlock_retry is False [EOL] [EOL] [EOL] def test_process_exception_increments_deadlock_retry_count_on_deadlock ( ) : [EOL] request = HttpRequest ( ) [EOL] request . disable_deadlock_retry = False [EOL] request . deadlock_retry_attempt = [number] [EOL] [EOL] exception = OperationalError ( [string] ) [EOL] [EOL] result = middleware . process_exception ( request , exception ) [EOL] [EOL] assert result . deadlock_retry_attempt > [number] [EOL] [EOL] [EOL] def test_process_exception_returns_none_if_attempts_exceeded ( ) : [EOL] request = HttpRequest ( ) [EOL] request . disable_deadlock_retry = False [EOL] request . deadlock_retry_attempt = [number] [EOL] [EOL] settings . DEADLOCK_RETRY_ATTEMPTS = [number] [EOL] [EOL] exception = OperationalError ( [string] ) [EOL] [EOL] result = middleware . process_exception ( request , exception ) [EOL] [EOL] assert result is None [EOL] [EOL] [EOL] def test_process_exception_returns_none_if_not_operational_error ( ) : [EOL] request = HttpRequest ( ) [EOL] request . disable_deadlock_retry = False [EOL] request . deadlock_retry_attempt = [number] [EOL] [EOL] exception = Exception ( [string] ) [EOL] [EOL] result = middleware . process_exception ( request , exception ) [EOL] [EOL] assert result is None [EOL] [EOL] [EOL] def test_process_exception_returns_none_if_not_deadlock_error ( ) : [EOL] request = HttpRequest ( ) [EOL] request . disable_deadlock_retry = False [EOL] request . deadlock_retry_attempt = [number] [EOL] [EOL] exception = OperationalError ( [string] ) [EOL] [EOL] result = middleware . process_exception ( request , exception ) [EOL] [EOL] assert result is None [EOL] [EOL] [EOL] def test_process_exception_returns_none_if_retry_disabled ( ) : [EOL] request = HttpRequest ( ) [EOL] request . disable_deadlock_retry = True [EOL] request . deadlock_retry_attempt = [number] [EOL] [EOL] exception = OperationalError ( [string] ) [EOL] [EOL] result = middleware . process_exception ( request , exception ) [EOL] [EOL] assert result is None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $deadlock_middleware.middleware.DeadlockRetryMiddleware$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $deadlock_middleware.middleware.DeadlockRetryMiddleware$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $deadlock_middleware.middleware.DeadlockRetryMiddleware$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $deadlock_middleware.middleware.DeadlockRetryMiddleware$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $deadlock_middleware.middleware.DeadlockRetryMiddleware$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $deadlock_middleware.middleware.DeadlockRetryMiddleware$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $deadlock_middleware.middleware.DeadlockRetryMiddleware$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $deadlock_middleware.middleware.DeadlockRetryMiddleware$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $deadlock_middleware.middleware.DeadlockRetryMiddleware$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0