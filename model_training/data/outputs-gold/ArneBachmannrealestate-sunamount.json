from typing import Tuple , List [EOL] import typing [EOL] import time [EOL] import os , sys , time [EOL] from setuptools import setup , find_packages [EOL] [EOL] lt = time . localtime ( ) [EOL] version = ( lt . tm_year , ( [number] + lt . tm_mon ) * [number] + lt . tm_mday , ( [number] + lt . tm_hour ) * [number] + lt . tm_min ) [EOL] versionString = [string] . join ( map ( str , version ) ) [EOL] [EOL] [comment] [EOL] if [string] in sys . argv : [EOL] import shutil [EOL] shutil . rmtree ( [string] ) [EOL] [EOL] if os . path . exists ( [string] ) : [EOL] rmFiles = list ( sorted ( os . listdir ( [string] ) ) ) [EOL] for file in ( f for f in rmFiles if any ( [ f . endswith ( ext ) for ext in ( [string] , [string] ) ] ) ) : [EOL] print ( [string] % file ) [EOL] try : os . unlink ( os . path . join ( [string] , file ) ) [EOL] except : print ( [string] + file ) [EOL] [EOL] setup ( name = [string] , version = versionString , description = [string] , long_description = [string] , install_requires = [ [string] , [string] , [string] ] , python_requires = [string] , classifiers = [ c . strip ( ) for c in [string] . split ( [string] ) if c . strip ( ) ] , keywords = [string] , author = [string] , author_email = [string] , maintainer = [string] , maintainer_email = [string] , url = [string] , license = [string] , packages = find_packages ( ) , package_dir = { [string] : [string] } , package_data = { [string] : [ [string] , [string] , [string] ] } , include_package_data = False , zip_safe = False ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $time.struct_time$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int,builtins.int]$ 0 0 $time.struct_time$ 0 0 0 0 0 0 $time.struct_time$ 0 0 0 0 0 0 $time.struct_time$ 0 0 0 0 0 0 $time.struct_time$ 0 0 0 0 0 0 $time.struct_time$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int,builtins.int]$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [EOL] import sys as _coconut_sys [EOL] from builtins import chr , filter , hex , input , int , map , object , oct , open , print , range , str , zip , filter , reversed , enumerate [EOL] py_chr , py_hex , py_input , py_int , py_map , py_object , py_oct , py_open , py_print , py_range , py_str , py_zip , py_filter , py_reversed , py_enumerate = chr , hex , input , int , map , object , oct , open , print , range , str , zip , filter , reversed , enumerate [EOL] class _coconut : [EOL] import collections , copy , functools , imp , itertools , operator , types , weakref [EOL] if _coconut_sys . version_info >= ( [number] , [number] ) : [EOL] import asyncio [EOL] else : [EOL] try : [EOL] import trollius as asyncio [EOL] except ImportError : [EOL] class you_need_to_install_trollius : pass [EOL] asyncio = you_need_to_install_trollius ( ) [EOL] import pickle [EOL] OrderedDict = collections . OrderedDict [EOL] if _coconut_sys . version_info < ( [number] , [number] ) : [EOL] abc = collections [EOL] else : [EOL] import collections . abc as abc [EOL] Ellipsis , Exception , ImportError , IndexError , KeyError , NameError , TypeError , ValueError , StopIteration , classmethod , dict , enumerate , filter , float , frozenset , getattr , hasattr , hash , id , int , isinstance , issubclass , iter , len , list , map , min , max , next , object , property , range , reversed , set , slice , str , sum , super , tuple , zip , repr = Ellipsis , Exception , ImportError , IndexError , KeyError , NameError , TypeError , ValueError , StopIteration , classmethod , dict , enumerate , filter , float , frozenset , getattr , hasattr , hash , id , int , isinstance , issubclass , iter , len , list , map , min , max , next , object , property , range , reversed , set , slice , str , sum , super , tuple , zip , repr [EOL] def _coconut_NamedTuple ( name , fields ) : [EOL] return _coconut . collections . namedtuple ( name , [ x for x , t in fields ] ) [EOL] class MatchError ( Exception ) : [EOL] [docstring] [EOL] __slots__ = ( [string] , [string] ) [EOL] class _coconut_tail_call : [EOL] __slots__ = ( [string] , [string] , [string] ) [EOL] def __init__ ( self , func , * args , ** kwargs ) : [EOL] self . func , self . args , self . kwargs = func , args , kwargs [EOL] _coconut_tco_func_dict = { } [EOL] def _coconut_tco ( func ) : [EOL] @ _coconut . functools . wraps ( func ) def tail_call_optimized_func ( * args , ** kwargs ) : [EOL] call_func = func [EOL] while True : [EOL] wkref = _coconut_tco_func_dict . get ( _coconut . id ( call_func ) ) [EOL] if wkref is not None and wkref ( ) is call_func : [EOL] call_func = call_func . _coconut_tco_func [EOL] result = call_func ( * args , ** kwargs ) [comment] [EOL] if not isinstance ( result , _coconut_tail_call ) : [EOL] return result [EOL] call_func , args , kwargs = result . func , result . args , result . kwargs [EOL] tail_call_optimized_func . _coconut_tco_func = func [EOL] _coconut_tco_func_dict [ _coconut . id ( tail_call_optimized_func ) ] = _coconut . weakref . ref ( tail_call_optimized_func ) [EOL] return tail_call_optimized_func [EOL] def _coconut_igetitem ( iterable , index ) : [EOL] if isinstance ( iterable , ( _coconut_reversed , _coconut_map , _coconut . filter , _coconut . zip , _coconut_enumerate , _coconut_count , _coconut . abc . Sequence ) ) : [EOL] return iterable [ index ] [EOL] if not _coconut . isinstance ( index , _coconut . slice ) : [EOL] if index < [number] : [EOL] return _coconut . collections . deque ( iterable , maxlen = - index ) [ [number] ] [EOL] return _coconut . next ( _coconut . itertools . islice ( iterable , index , index + [number] ) ) [EOL] if index . start is not None and index . start < [number] and ( index . stop is None or index . stop < [number] ) and index . step is None : [EOL] queue = _coconut . collections . deque ( iterable , maxlen = - index . start ) [EOL] if index . stop is not None : [EOL] queue = _coconut . list ( queue ) [ : index . stop - index . start ] [EOL] return queue [EOL] if ( index . start is not None and index . start < [number] ) or ( index . stop is not None and index . stop < [number] ) or ( index . step is not None and index . step < [number] ) : [EOL] return _coconut . list ( iterable ) [ index ] [EOL] return _coconut . itertools . islice ( iterable , index . start , index . stop , index . step ) [EOL] class _coconut_base_compose : [EOL] __slots__ = ( [string] , [string] ) [EOL] def __init__ ( self , func , * funcstars ) : [EOL] self . func = func [EOL] self . funcstars = [ ] [EOL] for f , star in funcstars : [EOL] if isinstance ( f , _coconut_base_compose ) : [EOL] self . funcstars . append ( ( f . func , star ) ) [EOL] self . funcstars += f . funcstars [EOL] else : [EOL] self . funcstars . append ( ( f , star ) ) [EOL] def __call__ ( self , * args , ** kwargs ) : [EOL] arg = self . func ( * args , ** kwargs ) [EOL] for f , star in self . funcstars : [EOL] arg = f ( * arg ) if star else f ( arg ) [EOL] return arg [EOL] def __repr__ ( self ) : [EOL] return _coconut . repr ( self . func ) + [string] + [string] . join ( ( [string] if star else [string] ) + _coconut . repr ( f ) for f , star in self . funcstars ) [EOL] def __reduce__ ( self ) : [EOL] return ( self . __class__ , ( self . func , ) + _coconut . tuple ( self . funcstars ) ) [EOL] def _coconut_forward_compose ( func , * funcs ) : return _coconut_base_compose ( func , * ( ( f , False ) for f in funcs ) ) [EOL] def _coconut_back_compose ( * funcs ) : return _coconut_forward_compose ( * _coconut . reversed ( funcs ) ) [EOL] def _coconut_forward_star_compose ( func , * funcs ) : return _coconut_base_compose ( func , * ( ( f , True ) for f in funcs ) ) [EOL] def _coconut_back_star_compose ( * funcs ) : return _coconut_forward_star_compose ( * _coconut . reversed ( funcs ) ) [EOL] def _coconut_pipe ( x , f ) : return f ( x ) [EOL] def _coconut_star_pipe ( xs , f ) : return f ( * xs ) [EOL] def _coconut_back_pipe ( f , x ) : return f ( x ) [EOL] def _coconut_back_star_pipe ( f , xs ) : return f ( * xs ) [EOL] def _coconut_bool_and ( a , b ) : return a and b [EOL] def _coconut_bool_or ( a , b ) : return a or b [EOL] def _coconut_none_coalesce ( a , b ) : return a if a is not None else b [EOL] def _coconut_minus ( a , * rest ) : [EOL] if not rest : [EOL] return - a [EOL] for b in rest : [EOL] a = a - b [EOL] return a [EOL] @ _coconut . functools . wraps ( _coconut . itertools . tee ) def tee ( iterable , n = [number] ) : [EOL] if n >= [number] and _coconut . isinstance ( iterable , ( _coconut . tuple , _coconut . frozenset ) ) : [EOL] return ( iterable , ) * n [EOL] if n > [number] and ( _coconut . hasattr ( iterable , [string] ) or _coconut . isinstance ( iterable , _coconut . abc . Sequence ) ) : [EOL] return ( iterable , ) + _coconut . tuple ( _coconut . copy . copy ( iterable ) for _ in _coconut . range ( n - [number] ) ) [EOL] return _coconut . itertools . tee ( iterable , n ) [EOL] class reiterable : [EOL] [docstring] [EOL] __slots__ = ( [string] , ) [EOL] def __init__ ( self , iterable ) : [EOL] self . iter = iterable [EOL] def __iter__ ( self ) : [EOL] self . iter , out = _coconut_tee ( self . iter ) [EOL] return _coconut . iter ( out ) [EOL] def __getitem__ ( self , index ) : [EOL] return _coconut_igetitem ( _coconut . iter ( self ) , index ) [EOL] def __reversed__ ( self ) : [EOL] return _coconut_reversed ( _coconut . iter ( self ) ) [EOL] def __len__ ( self ) : [EOL] return _coconut . len ( self . iter ) [EOL] def __repr__ ( self ) : [EOL] return [string] % ( self . iter , ) [EOL] def __reduce__ ( self ) : [EOL] return ( self . __class__ , ( self . iter , ) ) [EOL] def __copy__ ( self ) : [EOL] return self . __class__ ( _coconut . copy . copy ( self . iter ) ) [EOL] def __fmap__ ( self , func ) : [EOL] return _coconut_map ( func , self ) [EOL] class scan : [EOL] [docstring] [EOL] __slots__ = ( [string] , [string] , [string] ) [EOL] empty_initializer = _coconut . object ( ) [EOL] def __init__ ( self , function , iterable , initializer = empty_initializer ) : [EOL] self . func = function [EOL] self . iter = iterable [EOL] self . initializer = initializer [EOL] def __iter__ ( self ) : [EOL] acc = self . initializer [EOL] if acc is not self . empty_initializer : [EOL] yield acc [EOL] for item in self . iter : [EOL] if acc is self . empty_initializer : [EOL] acc = item [EOL] else : [EOL] acc = self . func ( acc , item ) [EOL] yield acc [EOL] def __len__ ( self ) : [EOL] return _coconut . len ( self . iter ) [EOL] def __repr__ ( self ) : [EOL] return [string] % ( self . func , self . iter ) [EOL] def __reduce__ ( self ) : [EOL] return ( self . __class__ , ( self . func , self . iter ) ) [EOL] def __copy__ ( self ) : [EOL] return self . __class__ ( self . func , _coconut . copy . copy ( self . iter ) ) [EOL] def __fmap__ ( self , func ) : [EOL] return _coconut_map ( func , self ) [EOL] class reversed : [EOL] __slots__ = ( [string] , ) [EOL] if hasattr ( _coconut . map , [string] ) : [EOL] __doc__ = _coconut . reversed . __doc__ [EOL] def __new__ ( cls , iterable ) : [EOL] if _coconut . isinstance ( iterable , _coconut . range ) : [EOL] return iterable [ : : - [number] ] [EOL] if not _coconut . hasattr ( iterable , [string] ) or _coconut . isinstance ( iterable , ( _coconut . list , _coconut . tuple ) ) : [EOL] return _coconut . object . __new__ ( cls ) [EOL] return _coconut . reversed ( iterable ) [EOL] def __init__ ( self , iterable ) : [EOL] self . iter = iterable [EOL] def __iter__ ( self ) : [EOL] return _coconut . iter ( _coconut . reversed ( self . iter ) ) [EOL] def __getitem__ ( self , index ) : [EOL] if _coconut . isinstance ( index , _coconut . slice ) : [EOL] return _coconut_igetitem ( self . iter , _coconut . slice ( - ( index . start + [number] ) if index . start is not None else None , - ( index . stop + [number] ) if index . stop else None , - ( index . step if index . step is not None else [number] ) ) ) [EOL] return _coconut_igetitem ( self . iter , - ( index + [number] ) ) [EOL] def __reversed__ ( self ) : [EOL] return self . iter [EOL] def __len__ ( self ) : [EOL] return _coconut . len ( self . iter ) [EOL] def __repr__ ( self ) : [EOL] return [string] % ( self . iter , ) [EOL] def __hash__ ( self ) : [EOL] return - _coconut . hash ( self . iter ) [EOL] def __reduce__ ( self ) : [EOL] return ( self . __class__ , ( self . iter , ) ) [EOL] def __copy__ ( self ) : [EOL] return self . __class__ ( _coconut . copy . copy ( self . iter ) ) [EOL] def __eq__ ( self , other ) : [EOL] return isinstance ( other , self . __class__ ) and self . iter == other . iter [EOL] def __contains__ ( self , elem ) : [EOL] return elem in self . iter [EOL] def count ( self , elem ) : [EOL] [docstring] [EOL] return self . iter . count ( elem ) [EOL] def index ( self , elem ) : [EOL] [docstring] [EOL] return _coconut . len ( self . iter ) - self . iter . index ( elem ) - [number] [EOL] def __fmap__ ( self , func ) : [EOL] return self . __class__ ( _coconut_map ( func , self . iter ) ) [EOL] class map ( _coconut . map ) : [EOL] __slots__ = ( [string] , [string] ) [EOL] if hasattr ( _coconut . map , [string] ) : [EOL] __doc__ = _coconut . map . __doc__ [EOL] def __new__ ( cls , function , * iterables ) : [EOL] new_map = _coconut . map . __new__ ( cls , function , * iterables ) [EOL] new_map . func = function [EOL] new_map . iters = iterables [EOL] return new_map [EOL] def __getitem__ ( self , index ) : [EOL] if _coconut . isinstance ( index , _coconut . slice ) : [EOL] return self . __class__ ( self . func , * ( _coconut_igetitem ( i , index ) for i in self . iters ) ) [EOL] return self . func ( * ( _coconut_igetitem ( i , index ) for i in self . iters ) ) [EOL] def __reversed__ ( self ) : [EOL] return self . __class__ ( self . func , * ( _coconut_reversed ( i ) for i in self . iters ) ) [EOL] def __len__ ( self ) : [EOL] return _coconut . min ( _coconut . len ( i ) for i in self . iters ) [EOL] def __repr__ ( self ) : [EOL] return [string] % ( self . func , [string] . join ( ( _coconut . repr ( i ) for i in self . iters ) ) ) [EOL] def __reduce__ ( self ) : [EOL] return ( self . __class__ , ( self . func , ) + self . iters ) [EOL] def __reduce_ex__ ( self , _ ) : [EOL] return self . __reduce__ ( ) [EOL] def __copy__ ( self ) : [EOL] return self . __class__ ( self . func , * _coconut . map ( _coconut . copy . copy , self . iters ) ) [EOL] def __fmap__ ( self , func ) : [EOL] return self . __class__ ( _coconut_forward_compose ( self . func , func ) , * self . iters ) [EOL] class parallel_map ( map ) : [EOL] [docstring] [EOL] __slots__ = ( ) [EOL] def __iter__ ( self ) : [EOL] from concurrent . futures import ProcessPoolExecutor [EOL] with ProcessPoolExecutor ( ) as executor : [EOL] return _coconut . iter ( _coconut . list ( executor . map ( self . func , * self . iters ) ) ) [EOL] def __repr__ ( self ) : [EOL] return [string] + _coconut_map . __repr__ ( self ) [EOL] class concurrent_map ( map ) : [EOL] [docstring] [EOL] __slots__ = ( ) [EOL] def __iter__ ( self ) : [EOL] from concurrent . futures import ThreadPoolExecutor [EOL] from multiprocessing import cpu_count [comment] [EOL] with ThreadPoolExecutor ( cpu_count ( ) * [number] ) as executor : [EOL] return _coconut . iter ( _coconut . list ( executor . map ( self . func , * self . iters ) ) ) [EOL] def __repr__ ( self ) : [EOL] return [string] + _coconut_map . __repr__ ( self ) [EOL] class filter ( _coconut . filter ) : [EOL] __slots__ = ( [string] , [string] ) [EOL] if hasattr ( _coconut . filter , [string] ) : [EOL] __doc__ = _coconut . filter . __doc__ [EOL] def __new__ ( cls , function , iterable ) : [EOL] new_filter = _coconut . filter . __new__ ( cls , function , iterable ) [EOL] new_filter . func = function [EOL] new_filter . iter = iterable [EOL] return new_filter [EOL] def __reversed__ ( self ) : [EOL] return self . __class__ ( self . func , _coconut_reversed ( self . iter ) ) [EOL] def __repr__ ( self ) : [EOL] return [string] % ( self . func , self . iter ) [EOL] def __reduce__ ( self ) : [EOL] return ( self . __class__ , ( self . func , self . iter ) ) [EOL] def __reduce_ex__ ( self , _ ) : [EOL] return self . __reduce__ ( ) [EOL] def __copy__ ( self ) : [EOL] return self . __class__ ( self . func , _coconut . copy . copy ( self . iter ) ) [EOL] def __fmap__ ( self , func ) : [EOL] return _coconut_map ( func , self ) [EOL] class zip ( _coconut . zip ) : [EOL] __slots__ = ( [string] , ) [EOL] if hasattr ( _coconut . zip , [string] ) : [EOL] __doc__ = _coconut . zip . __doc__ [EOL] def __new__ ( cls , * iterables ) : [EOL] new_zip = _coconut . zip . __new__ ( cls , * iterables ) [EOL] new_zip . iters = iterables [EOL] return new_zip [EOL] def __getitem__ ( self , index ) : [EOL] if _coconut . isinstance ( index , _coconut . slice ) : [EOL] return self . __class__ ( * ( _coconut_igetitem ( i , index ) for i in self . iters ) ) [EOL] return _coconut . tuple ( _coconut_igetitem ( i , index ) for i in self . iters ) [EOL] def __reversed__ ( self ) : [EOL] return self . __class__ ( * ( _coconut_reversed ( i ) for i in self . iters ) ) [EOL] def __len__ ( self ) : [EOL] return _coconut . min ( _coconut . len ( i ) for i in self . iters ) [EOL] def __repr__ ( self ) : [EOL] return [string] % ( [string] . join ( ( _coconut . repr ( i ) for i in self . iters ) ) , ) [EOL] def __reduce__ ( self ) : [EOL] return ( self . __class__ , self . iters ) [EOL] def __reduce_ex__ ( self , _ ) : [EOL] return self . __reduce__ ( ) [EOL] def __copy__ ( self ) : [EOL] return self . __class__ ( * _coconut . map ( _coconut . copy . copy , self . iters ) ) [EOL] def __fmap__ ( self , func ) : [EOL] return _coconut_map ( func , self ) [EOL] class enumerate ( _coconut . enumerate ) : [EOL] __slots__ = ( [string] , [string] ) [EOL] if hasattr ( _coconut . enumerate , [string] ) : [EOL] __doc__ = _coconut . enumerate . __doc__ [EOL] def __new__ ( cls , iterable , start = [number] ) : [EOL] new_enumerate = _coconut . enumerate . __new__ ( cls , iterable , start ) [EOL] new_enumerate . iter = iterable [EOL] new_enumerate . start = start [EOL] return new_enumerate [EOL] def __getitem__ ( self , index ) : [EOL] if _coconut . isinstance ( index , _coconut . slice ) : [EOL] return self . __class__ ( _coconut_igetitem ( self . iter , index ) , self . start + ( [number] if index . start is None else index . start if index . start >= [number] else len ( self . iter ) + index . start ) ) [EOL] return ( self . start + index , _coconut_igetitem ( self . iter , index ) ) [EOL] def __len__ ( self ) : [EOL] return _coconut . len ( self . iter ) [EOL] def __repr__ ( self ) : [EOL] return [string] % ( self . iter , self . start ) [EOL] def __reduce__ ( self ) : [EOL] return ( self . __class__ , ( self . iter , self . start ) ) [EOL] def __reduce_ex__ ( self , _ ) : [EOL] return self . __reduce__ ( ) [EOL] def __copy__ ( self ) : [EOL] return self . __class__ ( _coconut . copy . copy ( self . iter ) , self . start ) [EOL] def __fmap__ ( self , func ) : [EOL] return _coconut_map ( func , self ) [EOL] class count : [EOL] [docstring] [EOL] __slots__ = ( [string] , [string] ) [EOL] def __init__ ( self , start = [number] , step = [number] ) : [EOL] self . start = start [EOL] self . step = step [EOL] def __iter__ ( self ) : [EOL] while True : [EOL] yield self . start [EOL] if self . step : [EOL] self . start += self . step [EOL] def __contains__ ( self , elem ) : [EOL] if not self . step : [EOL] return elem == self . start [EOL] if elem < self . start : [EOL] return False [EOL] return ( elem - self . start ) % self . step == [number] [EOL] def __getitem__ ( self , index ) : [EOL] if _coconut . isinstance ( index , _coconut . slice ) and ( index . start is None or index . start >= [number] ) and ( index . stop is None or index . stop >= [number] ) : [EOL] if index . stop is None : [EOL] return self . __class__ ( self . start + ( index . start if index . start is not None else [number] ) , self . step * ( index . step if index . step is not None else [number] ) ) [EOL] if self . step and _coconut . isinstance ( self . start , _coconut . int ) and _coconut . isinstance ( self . step , _coconut . int ) : [EOL] return _coconut . range ( self . start + self . step * ( index . start if index . start is not None else [number] ) , self . start + self . step * index . stop , self . step * ( index . step if index . step is not None else [number] ) ) [EOL] return _coconut_map ( self . __getitem__ , _coconut . range ( index . start if index . start is not None else [number] , index . stop , index . step if index . step is not None else [number] ) ) [EOL] if index < [number] : [EOL] raise _coconut . IndexError ( [string] ) [EOL] return self . start + self . step * index if self . step else self . start [EOL] def count ( self , elem ) : [EOL] [docstring] [EOL] if not self . step : [EOL] return _coconut . float ( [string] ) if elem == self . start else [number] [EOL] return int ( elem in self ) [EOL] def index ( self , elem ) : [EOL] [docstring] [EOL] if elem not in self : [EOL] raise _coconut . ValueError ( _coconut . repr ( elem ) + [string] + _coconut . repr ( self ) ) [EOL] return ( elem - self . start ) // self . step if self . step else [number] [EOL] def __reversed__ ( self ) : [EOL] if not self . step : [EOL] return self [EOL] raise _coconut . TypeError ( repr ( self ) + [string] ) [EOL] def __repr__ ( self ) : [EOL] return [string] % ( self . start , self . step ) [EOL] def __hash__ ( self ) : [EOL] return _coconut . hash ( ( self . start , self . step ) ) [EOL] def __reduce__ ( self ) : [EOL] return ( self . __class__ , ( self . start , self . step ) ) [EOL] def __copy__ ( self ) : [EOL] return self . __class__ ( self . start , self . step ) [EOL] def __eq__ ( self , other ) : [EOL] return isinstance ( other , self . __class__ ) and self . start == other . start and self . step == other . step [EOL] def __fmap__ ( self , func ) : [EOL] return _coconut_map ( func , self ) [EOL] class groupsof : [EOL] [docstring] [EOL] __slots__ = ( [string] , [string] ) [EOL] def __init__ ( self , n , iterable ) : [EOL] self . iter = iterable [EOL] try : [EOL] self . group_size = _coconut . int ( n ) [EOL] except _coconut . ValueError : [EOL] raise _coconut . TypeError ( [string] % ( n , ) ) [EOL] if self . group_size <= [number] : [EOL] raise _coconut . ValueError ( [string] % ( self . group_size , ) ) [EOL] def __iter__ ( self ) : [EOL] iterator = _coconut . iter ( self . iter ) [EOL] loop = True [EOL] while loop : [EOL] group = [ ] [EOL] for _ in _coconut . range ( self . group_size ) : [EOL] try : [EOL] group . append ( _coconut . next ( iterator ) ) [EOL] except _coconut . StopIteration : [EOL] loop = False [EOL] break [EOL] if group : [EOL] yield _coconut . tuple ( group ) [EOL] def __len__ ( self ) : [EOL] return _coconut . len ( self . iter ) [EOL] def __repr__ ( self ) : [EOL] return [string] % ( self . iter , ) [EOL] def __reduce__ ( self ) : [EOL] return ( self . __class__ , ( self . group_size , self . iter ) ) [EOL] def __copy__ ( self ) : [EOL] return self . __class__ ( self . group_size , _coconut . copy . copy ( self . iter ) ) [EOL] def __fmap__ ( self , func ) : [EOL] return _coconut_map ( func , self ) [EOL] def recursive_iterator ( func ) : [EOL] [docstring] [EOL] tee_store = { } [EOL] backup_tee_store = [ ] [EOL] @ _coconut . functools . wraps ( func ) def recursive_iterator_func ( * args , ** kwargs ) : [EOL] key = ( args , _coconut . frozenset ( kwargs ) ) [EOL] use_backup = False [EOL] try : [EOL] hash ( key ) [EOL] except _coconut . Exception : [EOL] try : [EOL] key = _coconut . pickle . dumps ( key , - [number] ) [EOL] except _coconut . Exception : [EOL] use_backup = True [EOL] if use_backup : [EOL] for i , ( k , v ) in _coconut . enumerate ( backup_tee_store ) : [EOL] if k == key : [EOL] to_tee , store_pos = v , i [EOL] break [EOL] else : [comment] [EOL] to_tee = func ( * args , ** kwargs ) [EOL] store_pos = None [EOL] to_store , to_return = _coconut_tee ( to_tee ) [EOL] if store_pos is None : [EOL] backup_tee_store . append ( [ key , to_store ] ) [EOL] else : [EOL] backup_tee_store [ store_pos ] [ [number] ] = to_store [EOL] else : [EOL] tee_store [ key ] , to_return = _coconut_tee ( tee_store . get ( key ) or func ( * args , ** kwargs ) ) [EOL] return to_return [EOL] return recursive_iterator_func [EOL] def addpattern ( base_func ) : [EOL] [docstring] [EOL] def pattern_adder ( func ) : [EOL] @ _coconut_tco @ _coconut . functools . wraps ( func ) def add_pattern_func ( * args , ** kwargs ) : [EOL] try : [EOL] return base_func ( * args , ** kwargs ) [EOL] except _coconut_MatchError : [EOL] return _coconut_tail_call ( func , * args , ** kwargs ) [EOL] return add_pattern_func [EOL] return pattern_adder [EOL] def prepattern ( base_func ) : [EOL] [docstring] [EOL] def pattern_prepender ( func ) : [EOL] return addpattern ( func ) ( base_func ) [EOL] return pattern_prepender [EOL] class _coconut_partial : [EOL] __slots__ = ( [string] , [string] , [string] , [string] , [string] ) [EOL] if hasattr ( _coconut . functools . partial , [string] ) : [EOL] __doc__ = _coconut . functools . partial . __doc__ [EOL] def __init__ ( self , func , argdict , arglen , * args , ** kwargs ) : [EOL] self . func = func [EOL] self . _argdict = argdict [EOL] self . _arglen = arglen [EOL] self . _stargs = args [EOL] self . keywords = kwargs [EOL] def __reduce__ ( self ) : [EOL] return ( self . __class__ , ( self . func , self . _argdict , self . _arglen ) + self . _stargs , self . keywords ) [EOL] def __setstate__ ( self , keywords ) : [EOL] self . keywords = keywords [EOL] @ property def args ( self ) : [EOL] return _coconut . tuple ( self . _argdict . get ( i ) for i in _coconut . range ( self . _arglen ) ) + self . _stargs [EOL] def __call__ ( self , * args , ** kwargs ) : [EOL] callargs = [ ] [EOL] argind = [number] [EOL] for i in _coconut . range ( self . _arglen ) : [EOL] if i in self . _argdict : [EOL] callargs . append ( self . _argdict [ i ] ) [EOL] elif argind >= _coconut . len ( args ) : [EOL] raise _coconut . TypeError ( [string] + _coconut . str ( self . _arglen - _coconut . len ( self . _argdict ) ) + [string] + _coconut . repr ( self ) ) [EOL] else : [EOL] callargs . append ( args [ argind ] ) [EOL] argind += [number] [EOL] callargs += self . _stargs [EOL] callargs += args [ argind : ] [EOL] kwargs . update ( self . keywords ) [EOL] return self . func ( * callargs , ** kwargs ) [EOL] def __repr__ ( self ) : [EOL] args = [ ] [EOL] for i in _coconut . range ( self . _arglen ) : [EOL] if i in self . _argdict : [EOL] args . append ( _coconut . repr ( self . _argdict [ i ] ) ) [EOL] else : [EOL] args . append ( [string] ) [EOL] for arg in self . _stargs : [EOL] args . append ( _coconut . repr ( arg ) ) [EOL] return _coconut . repr ( self . func ) + [string] + [string] . join ( args ) + [string] [EOL] def consume ( iterable , keep_last = [number] ) : [EOL] [docstring] [EOL] return _coconut . collections . deque ( iterable , maxlen = keep_last ) [comment] [EOL] class starmap ( _coconut . itertools . starmap ) : [EOL] __slots__ = ( [string] , [string] ) [EOL] if hasattr ( _coconut . itertools . starmap , [string] ) : [EOL] __doc__ = _coconut . itertools . starmap . __doc__ [EOL] def __new__ ( cls , function , iterable ) : [EOL] new_map = _coconut . itertools . starmap . __new__ ( cls , function , iterable ) [EOL] new_map . func = function [EOL] new_map . iter = iterable [EOL] return new_map [EOL] def __getitem__ ( self , index ) : [EOL] if _coconut . isinstance ( index , _coconut . slice ) : [EOL] return self . __class__ ( self . func , _coconut_igetitem ( self . iter , index ) ) [EOL] return self . func ( * _coconut_igetitem ( self . iter , index ) ) [EOL] def __reversed__ ( self ) : [EOL] return self . __class__ ( self . func , * _coconut_reversed ( self . iter ) ) [EOL] def __len__ ( self ) : [EOL] return _coconut . len ( self . iter ) [EOL] def __repr__ ( self ) : [EOL] return [string] % ( self . func , self . iter ) [EOL] def __reduce__ ( self ) : [EOL] return ( self . __class__ , ( self . func , self . iter ) ) [EOL] def __reduce_ex__ ( self , _ ) : [EOL] return self . __reduce__ ( ) [EOL] def __copy__ ( self ) : [EOL] return self . __class__ ( self . func , _coconut . copy . copy ( self . iter ) ) [EOL] def __fmap__ ( self , func ) : [EOL] return self . __class__ ( _coconut_forward_compose ( self . func , func ) , self . iter ) [EOL] def makedata ( data_type , * args ) : [EOL] [docstring] [EOL] if _coconut . hasattr ( data_type , [string] ) and _coconut . issubclass ( data_type , _coconut . tuple ) : [EOL] return data_type . _make ( args ) [EOL] if _coconut . issubclass ( data_type , ( _coconut . map , _coconut . range , _coconut . abc . Iterator ) ) : [EOL] return args [EOL] if _coconut . issubclass ( data_type , _coconut . str ) : [EOL] return [string] . join ( args ) [EOL] return data_type ( args ) [EOL] def datamaker ( data_type ) : [EOL] [docstring] [EOL] return _coconut . functools . partial ( makedata , data_type ) [EOL] def fmap ( func , obj ) : [EOL] [docstring] [EOL] if _coconut . hasattr ( obj , [string] ) : [EOL] return obj . __fmap__ ( func ) [EOL] return _coconut_makedata ( obj . __class__ , * ( _coconut_starmap ( func , obj . items ( ) ) if _coconut . isinstance ( obj , _coconut . abc . Mapping ) else _coconut_map ( func , obj ) ) ) [EOL] def memoize ( maxsize = None , * args , ** kwargs ) : [EOL] [docstring] [EOL] return _coconut . functools . lru_cache ( maxsize , * args , ** kwargs ) [EOL] _coconut_MatchError , _coconut_count , _coconut_enumerate , _coconut_makedata , _coconut_map , _coconut_reversed , _coconut_starmap , _coconut_tee , _coconut_zip , TYPE_CHECKING , reduce , takewhile , dropwhile = MatchError , count , enumerate , makedata , map , reversed , starmap , tee , zip , False , _coconut . functools . reduce , _coconut . itertools . takewhile , _coconut . itertools . dropwhile [EOL]	
	0