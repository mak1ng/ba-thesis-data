from app import app [EOL]	0 0 0 0 0
[comment] [EOL] import flask [EOL] import builtins [EOL] import flask [EOL] [EOL] [comment] [EOL] from app import app [EOL] from app import controller [EOL] from app import httputil [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def get_text ( key ) : [EOL] return controller . get_text_by_key ( key ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def get_text_group ( group_id ) : [EOL] return controller . get_text_group ( group_id ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def check_health ( ) : [EOL] return controller . check_health ( ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Optional , Any [EOL] import logging [EOL] import typing [EOL] import flask [EOL] import builtins [EOL] import logging [EOL] [EOL] [comment] [EOL] import flask [EOL] from flask import jsonify , make_response , request [EOL] from app import httputil [EOL] from app . httputil import status [EOL] from app . httputil . error import BadRequestError [EOL] from app . httputil . instrumentation import trace [EOL] [EOL] [comment] [EOL] from app . config import LANGUAGE_HEADER [EOL] from app . service import health [EOL] from app . service import text_service [EOL] [EOL] [EOL] _log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] @ trace ( [string] ) def get_text_by_key ( key ) : [EOL] text = text_service . get_text_by_key ( key , _get_language ( ) ) [EOL] return httputil . create_response ( text ) [EOL] [EOL] [EOL] @ trace ( [string] ) def get_text_group ( group_id ) : [EOL] texts = text_service . get_text_by_group ( group_id , _get_language ( ) ) [EOL] return httputil . create_response ( texts ) [EOL] [EOL] [EOL] @ trace ( [string] ) def check_health ( ) : [EOL] health_status = health . check ( ) [EOL] return httputil . create_response ( health_status ) [EOL] [EOL] [EOL] def _get_language ( ) : [EOL] lang = request . headers . get ( LANGUAGE_HEADER ) [EOL] if not lang : [EOL] raise BadRequestError ( [string] ) [EOL] return lang [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import builtins [EOL] import os [EOL] import sys [EOL] [EOL] [EOL] def get_dsn ( storage_type ) : [EOL] if storage_type == [string] : [EOL] return [string] [EOL] if storage_type == [string] : [EOL] return _get_postgres_dsn ( ) [EOL] if storage_type == [string] : [EOL] return _get_sqlite_dsn ( ) [EOL] if storage_type == [string] : [EOL] print ( [string] ) [EOL] sys . exit ( [number] ) [EOL] return _get_postgres_dsn ( ) [EOL] [EOL] [EOL] def _get_postgres_dsn ( ) : [EOL] DB_USERNAME = os . environ [ [string] ] [EOL] DB_PASSWORD = os . environ [ [string] ] [EOL] DB_HOST = os . environ [ [string] ] [EOL] DB_PORT = os . environ [ [string] ] [EOL] DB_NAME = os . environ [ [string] ] [EOL] return f" [string] { DB_USERNAME } [string] { DB_PASSWORD } [string] { DB_HOST } [string] { DB_PORT } [string] { DB_NAME }" [EOL] [EOL] [EOL] def _get_sqlite_dsn ( ) : [EOL] return os . environ [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import builtins [EOL] import os [EOL] from logging . config import dictConfig [EOL] [EOL] [comment] [EOL] from . logging import LOGGING_CONIFG [EOL] from . util import get_dsn [EOL] [EOL] dictConfig ( LOGGING_CONIFG ) [EOL] [EOL] [EOL] SERVICE_NAME = [string] [EOL] SERVICE_VERSION = [string] [EOL] SERVER_NAME = f"{ SERVICE_NAME } [string] { SERVICE_VERSION }" [EOL] REQUEST_ID_HEADER = [string] [EOL] LANGUAGE_HEADER = [string] [EOL] STORAGE_TYPE = os . getenv ( [string] , [string] ) [EOL] [EOL] [EOL] class AppConfig : [EOL] SQLALCHEMY_DATABASE_URI = get_dsn ( STORAGE_TYPE ) [EOL] SQLALCHEMY_TRACK_MODIFICATIONS = False [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 $builtins.bool$ 0 0 0 0
[comment] [EOL] from typing import Optional [EOL] import typing [EOL] import app [EOL] import builtins [EOL] from typing import Optional [EOL] [EOL] [comment] [EOL] from app . httputil . instrumentation import trace [EOL] [EOL] [comment] [EOL] from app . models import Language [EOL] [EOL] [EOL] @ trace ( [string] ) def find_language ( id ) : [EOL] return Language . query . filter ( Language . id == id ) . first ( ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[app.models.Language]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Set , Optional , Callable , Any [EOL] import typing [EOL] import builtins [EOL] import logging [EOL] import flask [EOL] import werkzeug [EOL] import logging [EOL] import time [EOL] import sys [EOL] from datetime import datetime [EOL] from functools import wraps [EOL] from uuid import uuid4 [EOL] from platform import python_version [EOL] from typing import Any , Callable , Set , Optional [EOL] [EOL] [comment] [EOL] import flask [EOL] import prometheus_client [EOL] from flask import request [EOL] from prometheus_client import Counter , Histogram , Info , multiprocess , CollectorRegistry [EOL] [EOL] [comment] [EOL] from app . httputil import status [EOL] from app . httputil . error import InternalServerError [EOL] [EOL] [EOL] _log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] REQUEST_ID_HEADER = [string] [EOL] CONTENT_TYPE_LATEST = str ( [string] ) [EOL] _IGNORED_METRIC_ROUTES = { [string] } [EOL] [EOL] metrics_registry = CollectorRegistry ( ) [EOL] multiprocess . MultiProcessCollector ( metrics_registry ) [EOL] [EOL] APP_INFO = Info ( [string] , [string] , registry = metrics_registry ) [EOL] REQUESTS_TOTAL = Counter ( [string] , [string] , [ [string] , [string] , [string] ] , registry = metrics_registry , ) [EOL] REQUEST_LATENCY = Histogram ( [string] , [string] , [ [string] , [string] ] , registry = metrics_registry , ) [EOL] [EOL] [EOL] def add_request_id ( ) : [EOL] [docstring] [EOL] incomming_id = request . headers . get ( REQUEST_ID_HEADER ) [EOL] request . id = incomming_id or str ( uuid4 ( ) ) . lower ( ) [EOL] _log . info ( f" [string] { request . method } [string] { request . path } [string] { request . id } [string] " ) [EOL] [EOL] [EOL] def add_request_id_to_response ( response ) : [EOL] [docstring] [EOL] response . headers [ REQUEST_ID_HEADER ] = request . id [EOL] response . headers [ [string] ] = f"{ datetime . utcnow ( ) }" [EOL] return response [EOL] [EOL] [EOL] def get_request_id ( fail_if_missing = True ) : [EOL] try : [EOL] return request . id [EOL] except Exception as e : [EOL] if fail_if_missing : [EOL] raise InternalServerError ( f" [string] { e } [string] " ) [EOL] return [string] [EOL] [EOL] [EOL] def trace ( namespace = [string] ) : [EOL] def trace_with_namespace ( f ) : [EOL] @ wraps ( f ) def decorated ( * args , ** kwargs ) : [EOL] name = f"{ namespace } [string] { f . __qualname__ }" if namespace else f . __qualname__ [EOL] req_id = get_request_id ( fail_if_missing = False ) [EOL] _log . info ( f" [string] { name } [string] { req_id } [string] " ) [EOL] return f ( * args , ** kwargs ) [EOL] [EOL] return decorated [EOL] [EOL] return trace_with_namespace [EOL] [EOL] [EOL] def start_timer ( ) : [EOL] request . start_time = time . time ( ) [EOL] [EOL] [EOL] def stop_timer ( response ) : [EOL] if request . path not in _IGNORED_METRIC_ROUTES : [EOL] latency = _calculate_latency ( request . start_time ) [EOL] REQUEST_LATENCY . labels ( request . method , _parse_endpoint ( ) ) . observe ( latency ) [EOL] return response [EOL] [EOL] [EOL] def record_request_data ( response ) : [EOL] if request . path not in _IGNORED_METRIC_ROUTES : [EOL] endpoint = _parse_endpoint ( ) [EOL] REQUESTS_TOTAL . labels ( request . method , endpoint , response . status_code ) . inc ( ) [EOL] return response [EOL] [EOL] [EOL] def _calculate_latency ( start_time ) : [EOL] end_time = time . time ( ) [EOL] milliseconds = ( end_time - start_time ) * [number] [EOL] return round ( milliseconds , [number] ) [EOL] [EOL] [EOL] def _parse_endpoint ( ) : [EOL] rule = request . url_rule [EOL] return str ( rule ) if rule is not None else [string] [EOL] [EOL] [EOL] def setup_instrumentation ( app , name , version ) : [EOL] APP_INFO . info ( { [string] : name , [string] : version , [string] : f" [string] { python_version ( ) }" } ) [EOL] app . before_request ( start_timer ) [EOL] app . before_request ( add_request_id ) [EOL] [comment] [EOL] [comment] [EOL] app . after_request ( record_request_data ) [EOL] app . after_request ( stop_timer ) [EOL] app . after_request ( add_request_id_to_response ) [EOL] [EOL] @ app . route ( [string] ) def metrics ( ) : [EOL] return flask . Response ( prometheus_client . generate_latest ( metrics_registry ) , mimetype = CONTENT_TYPE_LATEST , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Dict , Optional , Any [EOL] import typing [EOL] import app [EOL] import builtins [EOL] from typing import Dict , Optional [EOL] [EOL] [comment] [EOL] from app . httputil . error import NotFoundError , BadRequestError [EOL] from app . httputil . instrumentation import trace [EOL] [EOL] [comment] [EOL] from app . models import TranslatedText , Language , TextGroup [EOL] from app . repository import text_repo , language_repo [EOL] [EOL] [EOL] @ trace ( [string] ) def get_text_by_key ( key , language ) : [EOL] _assert_language_support ( language ) [EOL] text = text_repo . find_by_key ( key , language ) [EOL] if not text : [EOL] raise NotFoundError ( ) [EOL] return { text . key : text . value } [EOL] [EOL] [EOL] @ trace ( [string] ) def get_text_by_group ( group_id , language ) : [EOL] _assert_language_support ( language ) [EOL] group = _assert_group ( group_id ) [EOL] keys = [ text_group . text_key for text_group in group . texts ] [EOL] texts = text_repo . find_by_keys ( keys , language ) [EOL] return { text . key : text . value for text in texts } [EOL] [EOL] [EOL] @ trace ( [string] ) def _assert_group ( group_id ) : [EOL] group = text_repo . find_group ( group_id ) [EOL] if not group : [EOL] raise NotFoundError ( f" [string] { group_id }" ) [EOL] return group [EOL] [EOL] [EOL] @ trace ( [string] ) def _assert_language_support ( language_id ) : [EOL] lang = language_repo . find_language ( language_id ) [EOL] if not lang : [EOL] raise BadRequestError ( f" [string] { language_id }" ) [EOL] return lang [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Optional[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $app.models.TextGroup$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $app.models.Language$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] import json [EOL] [EOL] [comment] [EOL] from app . config import SERVICE_VERSION , SERVICE_NAME [EOL] [EOL] [EOL] def test_version ( ) : [EOL] with open ( [string] , [string] ) as f : [EOL] package = json . load ( f ) [EOL] assert SERVICE_VERSION == package [ [string] ] . split ( [string] ) [ [number] ] [EOL] assert SERVICE_NAME == package [ [string] ] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Dict , List , Optional [EOL] import app [EOL] import typing [EOL] import flask [EOL] import builtins [EOL] from typing import Dict , List , Optional [EOL] from uuid import uuid4 [EOL] [EOL] [comment] [EOL] from flask . testing import FlaskClient [EOL] [EOL] [comment] [EOL] from app import app [EOL] from app import db [EOL] from app . config import LANGUAGE_HEADER [EOL] [EOL] [EOL] JSON = [string] [EOL] [EOL] [EOL] def new_id ( ) : [EOL] return str ( uuid4 ( ) ) . lower ( ) [EOL] [EOL] [EOL] def insert_items ( items ) : [EOL] for item in items : [EOL] db . session . add ( item ) [EOL] db . session . commit ( ) [EOL] [EOL] [EOL] def headers ( language ) : [EOL] h = { [string] : JSON , [string] : JSON } [EOL] if language : [EOL] h [ LANGUAGE_HEADER ] = language [EOL] return h [EOL] [EOL] [EOL] class TestEnvironment : [EOL] def __init__ ( self , items = [ ] ) : [EOL] self . client = app . test_client ( ) [EOL] self . items = items [EOL] [EOL] def __enter__ ( self ) : [EOL] db . create_all ( ) [EOL] insert_items ( self . items ) [EOL] return self . client [EOL] [EOL] def __exit__ ( self , type , value , traceback ) : [EOL] db . drop_all ( ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.testing.FlaskClient$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0