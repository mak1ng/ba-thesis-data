[comment] [EOL] import os [EOL] import sys [EOL] [EOL] import django [EOL] from django . conf import settings [EOL] from django . test . utils import get_runner [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] os . environ [ [string] ] = [string] [EOL] django . setup ( ) [EOL] failures = TestRunner = get_runner ( settings ) ( ) . run_tests ( [ [string] , [string] ] ) [EOL] sys . exit ( bool ( failures ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import os [EOL] [EOL] from gdpr . version import get_version [EOL] from setuptools import find_packages , setup [EOL] [EOL] [EOL] def read ( fname ) : [EOL] return open ( os . path . join ( os . path . dirname ( __file__ ) , fname ) ) . read ( ) [EOL] [EOL] [EOL] setup ( name = [string] , long_description = read ( [string] ) , long_description_content_type = [string] , version = get_version ( ) , description = [string] , author = [string] , author_email = [string] , url = [string] , license = [string] , package_dir = { [string] : [string] } , include_package_data = True , packages = find_packages ( ) , classifiers = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , install_requires = [ [string] , [string] , [string] , [string] , [string] , [string] , ] , zip_safe = False , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Type , Match , Any [EOL] import tests [EOL] import typing [EOL] import re [EOL] from datetime import date [EOL] [EOL] from django . core . exceptions import ValidationError [EOL] from django . utils . encoding import force_text [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] [EOL] [EOL] def get_day_from_personal_id ( personal_id ) : [EOL] day = int ( personal_id [ [number] : [number] ] ) [EOL] if day > [number] : [EOL] day -= [number] [EOL] return day [EOL] [EOL] [EOL] def get_month_from_personal_id ( personal_id ) : [EOL] year = get_year_from_personal_id ( personal_id ) [EOL] month = int ( personal_id [ [number] : [number] ] ) [EOL] if month > [number] and year > [number] : [EOL] month -= [number] [EOL] elif month > [number] : [EOL] month -= [number] [EOL] elif month > [number] and year > [number] : [EOL] month -= [number] [EOL] return month [EOL] [EOL] [EOL] def get_year_from_personal_id ( personal_id ) : [EOL] year = int ( personal_id [ [number] : [number] ] ) [EOL] value = personal_id . replace ( [string] , [string] ) [EOL] year += [number] if year < [number] and len ( value ) == [number] else [number] [EOL] return year [EOL] [EOL] [EOL] def personal_id_date ( personal_id ) : [EOL] try : [EOL] return date ( get_year_from_personal_id ( personal_id ) , get_month_from_personal_id ( personal_id ) , get_day_from_personal_id ( personal_id ) ) [EOL] except ValueError : [EOL] raise ValueError ( [string] ) [EOL] [EOL] [EOL] class CZBirthNumberValidator : [EOL] [docstring] [EOL] BIRTH_NUMBER = re . compile ( [string] ) [EOL] [EOL] def __call__ ( self , value ) : [EOL] value = force_text ( value ) [EOL] [EOL] match = re . match ( self . BIRTH_NUMBER , value ) [EOL] if not match : [EOL] raise ValidationError ( _ ( [string] ) ) [EOL] [EOL] birth , id = match . groupdict ( ) [ [string] ] , match . groupdict ( ) [ [string] ] [EOL] [EOL] [comment] [EOL] if len ( id ) != [number] : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] modulo = int ( birth + id [ : [number] ] ) % [number] [EOL] [EOL] if ( modulo != int ( id [ - [number] ] ) ) and ( modulo != [number] or id [ - [number] ] != [string] ) : [EOL] raise ValidationError ( _ ( [string] ) ) [EOL] [EOL] try : [EOL] personal_id_date ( value ) [EOL] except ValueError : [EOL] raise ValidationError ( _ ( [string] ) ) [EOL] [EOL] [EOL] class IDCardNoValidator : [EOL] [docstring] [EOL] ID_CARD_NUMBER = re . compile ( [string] ) [EOL] [EOL] def __call__ ( self , value ) : [EOL] value = force_text ( value ) [EOL] [EOL] match = re . match ( self . ID_CARD_NUMBER , value ) [EOL] if not match : [EOL] raise ValidationError ( _ ( [string] ) ) [EOL] elif value [ [number] ] == [string] : [EOL] raise ValidationError ( _ ( [string] ) ) [EOL] else : [EOL] return value [EOL] [EOL] [EOL] class BankAccountValidator : [EOL] BANK_ACCOUNT_NUMBER_REVERSE_PATTERN = re . compile ( [string] ) [EOL] [EOL] def __call__ ( self , value ) : [EOL] match = re . match ( self . BANK_ACCOUNT_NUMBER_REVERSE_PATTERN , force_text ( value ) [ : : - [number] ] ) [EOL] if match : [EOL] return construct_bank_account_number ( ( match . groupdict ( ) [ [string] ] or [string] ) [ : : - [number] ] , match . groupdict ( ) [ [string] ] [ : : - [number] ] , match . groupdict ( ) [ [string] ] [ : : - [number] ] ) [EOL] else : [EOL] raise ValidationError ( _ ( [string] ) ) [EOL] [EOL] [EOL] def construct_bank_account_number ( prefix , number , bank_code ) : [EOL] return [string] . format ( prefix , number , bank_code ) [EOL] [EOL] [EOL] def split_bank_account_to_prefix_postfix ( bank_account_number ) : [EOL] return bank_account_number . split ( [string] ) if [string] in bank_account_number else ( [string] , bank_account_number ) [EOL] [EOL] [EOL] def clean_bank_account_number_or_none ( bank_account_number ) : [EOL] try : [EOL] return BankAccountValidator ( ) ( bank_account_number ) [EOL] except ValidationError : [EOL] return None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[typing.Any]]$ 0 0 0 $typing.Optional[typing.Match[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[typing.Any]]$ 0 0 0 0 0 0 $typing.Optional[typing.Match[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations , models [EOL] import django . db . models . deletion [EOL] import gdpr . mixins [EOL] import tests . validators [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . FileField ( upload_to = [string] ) ) , ] , options = { [string] : False , } , bases = ( gdpr . mixins . AnonymizationModelMixin , models . Model ) , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = models . CharField ( blank = True , max_length = [number] , null = True , validators = [ tests . validators . BankAccountValidator ] ) , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = models . CharField ( blank = True , max_length = [number] , null = True , validators = [ tests . validators . CZBirthNumberValidator ] ) , ) , migrations . AddField ( model_name = [string] , name = [string] , field = models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , related_name = [string] , to = [string] ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RenameField ( model_name = [string] , old_name = [string] , new_name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [EOL] class EmptyTests ( TestCase ) : [EOL] def test_this_test_is_run ( self ) : [EOL] [docstring] [EOL] self . assertTrue ( True ) [EOL] [EOL] def test_GDPR_app_is_reachable ( self ) : [EOL] [docstring] [EOL] from gdpr . version import get_version [EOL] get_version ( ) [EOL] self . assertTrue ( True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any , List [EOL] import tests [EOL] import reversion [EOL] import typing [EOL] import gdpr [EOL] from datetime import timedelta [EOL] from typing import List [EOL] from unittest import skipIf [EOL] [EOL] from django . contrib . auth . models import User [EOL] from django . core . files . base import ContentFile [EOL] from django . test import TestCase [EOL] [EOL] from gdpr . anonymizers import ModelAnonymizer [EOL] from gdpr . loading import anonymizer_register [EOL] from gdpr . utils import is_reversion_installed , get_reversion_local_field_dict [EOL] from tests . anonymizers import ContactFormAnonymizer , ChildEAnonymizer [EOL] from tests . models import Account , Address , ContactForm , Customer , Email , Note , Payment , Avatar , ChildE [EOL] from . data import ( ACCOUNT__IBAN , ACCOUNT__NUMBER , ACCOUNT__OWNER , ACCOUNT__SWIFT , ADDRESS__CITY , ADDRESS__HOUSE_NUMBER , ADDRESS__POST_CODE , ADDRESS__STREET , CUSTOMER__BIRTH_DATE , CUSTOMER__EMAIL , CUSTOMER__EMAIL2 , CUSTOMER__EMAIL3 , CUSTOMER__FACEBOOK_ID , CUSTOMER__FIRST_NAME , CUSTOMER__IP , CUSTOMER__KWARGS , CUSTOMER__LAST_NAME , CUSTOMER__PERSONAL_ID , CUSTOMER__PHONE_NUMBER , PAYMENT__VALUE ) [EOL] from . utils import AnonymizedDataMixin , NotImplementedMixin [EOL] [EOL] [EOL] class TestModelAnonymization ( AnonymizedDataMixin , NotImplementedMixin , TestCase ) : [EOL] @ classmethod def setUpTestData ( cls ) : [EOL] cls . customer = Customer ( ** CUSTOMER__KWARGS ) [EOL] cls . customer . save ( ) [EOL] cls . base_encryption_key = [string] [EOL] [EOL] def test_anonymize_customer ( self ) : [EOL] self . customer . _anonymize_obj ( ) [EOL] anon_customer = Customer . objects . get ( pk = self . customer . pk ) [EOL] [EOL] self . assertNotEqual ( anon_customer . first_name , CUSTOMER__FIRST_NAME ) [EOL] self . assertAnonymizedDataExists ( anon_customer , [string] ) [EOL] self . assertNotEqual ( anon_customer . last_name , CUSTOMER__LAST_NAME ) [EOL] self . assertAnonymizedDataExists ( anon_customer , [string] ) [EOL] self . assertNotEqual ( anon_customer . full_name , [string] % ( CUSTOMER__FIRST_NAME , CUSTOMER__LAST_NAME ) ) [EOL] self . assertAnonymizedDataExists ( anon_customer , [string] ) [EOL] self . assertNotEqual ( anon_customer . primary_email_address , CUSTOMER__EMAIL ) [EOL] self . assertAnonymizedDataExists ( anon_customer , [string] ) [EOL] self . assertNotEqual ( anon_customer . personal_id , CUSTOMER__PERSONAL_ID ) [EOL] self . assertAnonymizedDataExists ( anon_customer , [string] ) [EOL] self . assertNotEqual ( anon_customer . phone_number , CUSTOMER__PHONE_NUMBER ) [EOL] self . assertAnonymizedDataExists ( anon_customer , [string] ) [EOL] self . assertNotEquals ( anon_customer . birth_date , CUSTOMER__BIRTH_DATE ) [EOL] self . assertAnonymizedDataExists ( anon_customer , [string] ) [EOL] self . assertNotEquals ( anon_customer . facebook_id , CUSTOMER__FACEBOOK_ID ) [EOL] self . assertAnonymizedDataExists ( anon_customer , [string] ) [EOL] self . assertNotEqual ( str ( anon_customer . last_login_ip ) , CUSTOMER__IP ) [EOL] self . assertAnonymizedDataExists ( anon_customer , [string] ) [EOL] [EOL] def test_email ( self ) : [EOL] self . email = Email ( customer = self . customer , email = CUSTOMER__EMAIL ) [EOL] self . email . save ( ) [EOL] self . email . _anonymize_obj ( base_encryption_key = self . base_encryption_key ) [EOL] anon_email = Email . objects . get ( pk = self . email . pk ) [EOL] [EOL] self . assertNotEqual ( anon_email . email , CUSTOMER__EMAIL ) [EOL] [EOL] def test_address ( self ) : [EOL] self . address = Address ( customer = self . customer , street = ADDRESS__STREET , house_number = ADDRESS__HOUSE_NUMBER , city = ADDRESS__CITY , post_code = ADDRESS__POST_CODE , ) [EOL] self . address . save ( ) [EOL] self . address . _anonymize_obj ( base_encryption_key = self . base_encryption_key ) [EOL] anon_address = Address . objects . get ( pk = self . address . pk ) [EOL] [EOL] self . assertNotEqual ( anon_address . street , ADDRESS__STREET ) [EOL] self . assertAnonymizedDataExists ( anon_address , [string] ) [EOL] self . assertEqual ( anon_address . house_number , ADDRESS__HOUSE_NUMBER ) [EOL] self . assertEqual ( anon_address . city , ADDRESS__CITY ) [EOL] self . assertEqual ( anon_address . post_code , ADDRESS__POST_CODE ) [EOL] [EOL] def test_account ( self ) : [EOL] self . account = Account ( customer = self . customer , number = ACCOUNT__NUMBER , owner = ACCOUNT__OWNER , IBAN = ACCOUNT__IBAN , swift = ACCOUNT__SWIFT , ) [EOL] self . account . save ( ) [EOL] self . account . _anonymize_obj ( base_encryption_key = self . base_encryption_key ) [EOL] [EOL] anon_account = Account . objects . get ( pk = self . account . pk ) [EOL] [EOL] self . assertNotEqual ( anon_account . number , ACCOUNT__NUMBER ) [EOL] self . assertAnonymizedDataExists ( anon_account , [string] ) [EOL] self . assertNotEqual ( anon_account . owner , ACCOUNT__OWNER ) [EOL] self . assertAnonymizedDataExists ( anon_account , [string] ) [EOL] self . assertNotEqual ( anon_account . IBAN , ACCOUNT__IBAN ) [EOL] self . assertAnonymizedDataExists ( anon_account , [string] ) [EOL] [EOL] def test_payment ( self ) : [EOL] self . account = Account ( customer = self . customer , number = ACCOUNT__NUMBER , owner = ACCOUNT__OWNER , IBAN = ACCOUNT__IBAN , swift = ACCOUNT__SWIFT , ) [EOL] self . account . save ( ) [EOL] self . payment = Payment ( account = self . account , value = PAYMENT__VALUE , ) [EOL] self . payment . save ( ) [EOL] payment_date = self . payment . date [EOL] [EOL] self . payment . _anonymize_obj ( base_encryption_key = self . base_encryption_key ) [EOL] [EOL] anon_payment = Payment . objects . get ( pk = self . payment . pk ) [EOL] [EOL] self . assertNotEquals ( anon_payment . value , PAYMENT__VALUE ) [EOL] self . assertAnonymizedDataExists ( anon_payment , [string] ) [EOL] self . assertNotEquals ( anon_payment . date , payment_date ) [EOL] self . assertAnonymizedDataExists ( anon_payment , [string] ) [EOL] [EOL] def test_contact_form ( self ) : [EOL] FULL_NAME = [string] % ( CUSTOMER__FIRST_NAME , CUSTOMER__LAST_NAME ) [EOL] self . contact_form = ContactForm ( email = CUSTOMER__EMAIL , full_name = FULL_NAME ) [EOL] self . contact_form . save ( ) [EOL] self . contact_form . _anonymize_obj ( ) [EOL] [EOL] anon_contact_form = ContactForm . objects . get ( pk = self . contact_form . pk ) [EOL] [EOL] self . assertNotEqual ( anon_contact_form . email , CUSTOMER__EMAIL ) [EOL] self . assertAnonymizedDataExists ( anon_contact_form , [string] ) [EOL] self . assertNotEqual ( anon_contact_form . full_name , FULL_NAME ) [EOL] self . assertAnonymizedDataExists ( anon_contact_form , [string] ) [EOL] [EOL] def test_anonymization_of_anonymized_data ( self ) : [EOL] [docstring] [EOL] self . customer . _anonymize_obj ( ) [EOL] anon_customer = Customer . objects . get ( pk = self . customer . pk ) [EOL] [EOL] self . assertNotEqual ( anon_customer . first_name , CUSTOMER__FIRST_NAME ) [EOL] self . assertAnonymizedDataExists ( anon_customer , [string] ) [EOL] [EOL] anon_customer . _anonymize_obj ( ) [EOL] anon_customer2 = Customer . objects . get ( pk = self . customer . pk ) [EOL] [EOL] self . assertEqual ( anon_customer2 . first_name , anon_customer . first_name ) [EOL] self . assertNotEqual ( anon_customer2 . first_name , CUSTOMER__FIRST_NAME ) [EOL] [EOL] def test_anonymization_field_matrix ( self ) : [EOL] self . customer . _anonymize_obj ( fields = ( [string] , ) ) [EOL] anon_customer = Customer . objects . get ( pk = self . customer . pk ) [EOL] [EOL] self . assertNotEqual ( anon_customer . first_name , CUSTOMER__FIRST_NAME ) [EOL] self . assertAnonymizedDataExists ( anon_customer , [string] ) [EOL] [EOL] self . assertEqual ( anon_customer . last_name , CUSTOMER__LAST_NAME ) [EOL] self . assertAnonymizedDataNotExists ( anon_customer , [string] ) [EOL] [EOL] def test_anonymization_field_matrix_related ( self ) : [EOL] related_email = Email ( customer = self . customer , email = CUSTOMER__EMAIL ) [EOL] related_email . save ( ) [EOL] [EOL] self . customer . _anonymize_obj ( fields = ( [string] , ( [string] , ( [string] , ) ) ) ) [EOL] anon_customer = Customer . objects . get ( pk = self . customer . pk ) [EOL] [EOL] self . assertNotEqual ( anon_customer . first_name , CUSTOMER__FIRST_NAME ) [EOL] self . assertAnonymizedDataExists ( anon_customer , [string] ) [EOL] [EOL] self . assertEqual ( anon_customer . last_name , CUSTOMER__LAST_NAME ) [EOL] self . assertAnonymizedDataNotExists ( anon_customer , [string] ) [EOL] [EOL] anon_related_email = Email . objects . get ( pk = related_email . pk ) [EOL] [EOL] self . assertNotEqual ( anon_related_email . email , CUSTOMER__EMAIL ) [EOL] self . assertAnonymizedDataExists ( anon_related_email , [string] ) [EOL] [EOL] def test_anonymization_field_matrix_related_all ( self ) : [EOL] related_email = Email ( customer = self . customer , email = CUSTOMER__EMAIL ) [EOL] related_email . save ( ) [EOL] [EOL] self . customer . _anonymize_obj ( fields = ( [string] , ( [string] , [string] ) ) ) [EOL] anon_customer = Customer . objects . get ( pk = self . customer . pk ) [EOL] [EOL] self . assertNotEqual ( anon_customer . first_name , CUSTOMER__FIRST_NAME ) [EOL] self . assertAnonymizedDataExists ( anon_customer , [string] ) [EOL] [EOL] self . assertEqual ( anon_customer . last_name , CUSTOMER__LAST_NAME ) [EOL] self . assertAnonymizedDataNotExists ( anon_customer , [string] ) [EOL] [EOL] anon_related_email = Email . objects . get ( pk = related_email . pk ) [EOL] [EOL] self . assertNotEqual ( anon_related_email . email , CUSTOMER__EMAIL ) [EOL] self . assertAnonymizedDataExists ( anon_related_email , [string] ) [EOL] [EOL] def test_reverse_generic_relation ( self ) : [EOL] note = Note ( note = [string] ) [EOL] note . content_object = self . customer [EOL] note . save ( ) [EOL] [EOL] self . customer . _anonymize_obj ( fields = ( ( [string] , [string] ) , ) ) [EOL] [EOL] anon_note = Note . objects . get ( pk = note . pk ) [EOL] [EOL] self . assertNotEqual ( anon_note . note , note . note ) [EOL] self . assertAnonymizedDataExists ( note , [string] ) [EOL] [EOL] self . customer . _deanonymize_obj ( fields = ( ( [string] , [string] ) , ) ) [EOL] [EOL] anon_note2 = Note . objects . get ( pk = note . pk ) [EOL] [EOL] self . assertEqual ( anon_note2 . note , note . note ) [EOL] self . assertAnonymizedDataNotExists ( note , [string] ) [EOL] [EOL] def test_irreversible_deanonymization ( self ) : [EOL] contact_form = ContactForm ( email = CUSTOMER__EMAIL , full_name = CUSTOMER__LAST_NAME ) [EOL] contact_form . save ( ) [EOL] contact_form . _anonymize_obj ( fields = ( [string] , ) ) [EOL] [EOL] self . assertRaises ( ModelAnonymizer . IrreversibleAnonymizerException , contact_form . _deanonymize_obj , fields = ( [string] , ) ) [EOL] [EOL] def test_generic_relation_anonymizer ( self ) : [EOL] contact_form = ContactForm ( email = CUSTOMER__EMAIL , full_name = CUSTOMER__LAST_NAME ) [EOL] contact_form . save ( ) [EOL] note = Note ( note = [string] ) [EOL] note . content_object = contact_form [EOL] note . save ( ) [EOL] [EOL] note . _anonymize_obj ( fields = ( ( [string] , [string] ) , ) , base_encryption_key = self . base_encryption_key ) [EOL] [EOL] anon_contact_form = ContactForm . objects . get ( pk = contact_form . pk ) [EOL] [EOL] self . assertNotEqual ( anon_contact_form . email , CUSTOMER__EMAIL ) [EOL] self . assertAnonymizedDataExists ( anon_contact_form , [string] ) [EOL] self . assertNotEqual ( anon_contact_form . full_name , CUSTOMER__LAST_NAME ) [EOL] self . assertAnonymizedDataExists ( anon_contact_form , [string] ) [EOL] [EOL] @ skipIf ( not is_reversion_installed ( ) , [string] ) def test_reversion_anonymization ( self ) : [EOL] from reversion import revisions as reversion [EOL] from reversion . models import Version [EOL] from gdpr . utils import get_reversion_versions [EOL] [EOL] anon = ContactFormAnonymizer ( ) [EOL] anon . Meta . anonymize_reversion = True [EOL] anon . Meta . reversible_anonymization = True [EOL] [EOL] user = User ( username = [string] ) [EOL] user . save ( ) [EOL] [EOL] with reversion . create_revision ( ) : [EOL] form = ContactForm ( ) [EOL] form . email = CUSTOMER__EMAIL [EOL] form . full_name = CUSTOMER__LAST_NAME [EOL] form . save ( ) [EOL] [EOL] reversion . set_user ( user ) [EOL] [EOL] with reversion . create_revision ( ) : [EOL] form . email = CUSTOMER__EMAIL2 [EOL] form . save ( ) [EOL] [EOL] reversion . set_user ( user ) [EOL] [EOL] with reversion . create_revision ( ) : [EOL] form . email = CUSTOMER__EMAIL3 [EOL] form . save ( ) [EOL] [EOL] reversion . set_user ( user ) [EOL] [EOL] versions = get_reversion_versions ( form ) [EOL] [EOL] self . assertEqual ( versions [ [number] ] . field_dict [ [string] ] , CUSTOMER__EMAIL ) [EOL] self . assertEqual ( versions [ [number] ] . field_dict [ [string] ] , CUSTOMER__EMAIL2 ) [EOL] self . assertEqual ( versions [ [number] ] . field_dict [ [string] ] , CUSTOMER__EMAIL3 ) [EOL] [EOL] anon . anonymize_obj ( form , base_encryption_key = self . base_encryption_key ) [EOL] [EOL] anon_versions = get_reversion_versions ( form ) [EOL] anon_form = ContactForm . objects . get ( pk = form . pk ) [EOL] [EOL] self . assertNotEqual ( anon_versions [ [number] ] . field_dict [ [string] ] , CUSTOMER__EMAIL ) [EOL] self . assertNotEqual ( anon_versions [ [number] ] . field_dict [ [string] ] , CUSTOMER__EMAIL2 ) [EOL] self . assertNotEqual ( anon_versions [ [number] ] . field_dict [ [string] ] , CUSTOMER__EMAIL3 ) [EOL] self . assertNotEqual ( anon_form . email , CUSTOMER__EMAIL3 ) [EOL] [EOL] anon . deanonymize_obj ( anon_form , base_encryption_key = self . base_encryption_key ) [EOL] [EOL] deanon_versions = get_reversion_versions ( form ) [EOL] deanon_form = ContactForm . objects . get ( pk = form . pk ) [EOL] [EOL] self . assertEqual ( deanon_versions [ [number] ] . field_dict [ [string] ] , CUSTOMER__EMAIL ) [EOL] self . assertEqual ( deanon_versions [ [number] ] . field_dict [ [string] ] , CUSTOMER__EMAIL2 ) [EOL] self . assertEqual ( deanon_versions [ [number] ] . field_dict [ [string] ] , CUSTOMER__EMAIL3 ) [EOL] self . assertEqual ( deanon_form . email , CUSTOMER__EMAIL3 ) [EOL] self . assertDictEqual ( versions [ [number] ] . field_dict , deanon_versions [ [number] ] . field_dict ) [EOL] self . assertDictEqual ( versions [ [number] ] . field_dict , deanon_versions [ [number] ] . field_dict ) [EOL] self . assertDictEqual ( versions [ [number] ] . field_dict , deanon_versions [ [number] ] . field_dict ) [EOL] [EOL] @ skipIf ( not is_reversion_installed ( ) , [string] ) def test_reversion_anonymization_parents ( self ) : [EOL] from reversion import revisions as reversion [EOL] from reversion . models import Version [EOL] from gdpr . utils import get_reversion_versions [EOL] [EOL] anon = ChildEAnonymizer ( ) [EOL] [EOL] user = User ( username = [string] ) [EOL] user . save ( ) [EOL] [EOL] with reversion . create_revision ( ) : [EOL] e = ChildE ( ) [EOL] e . name = [string] [EOL] e . first_name = [string] [EOL] e . last_name = [string] [EOL] e . birth_date = CUSTOMER__BIRTH_DATE [EOL] e . note = [string] [EOL] e . save ( ) [EOL] [EOL] reversion . set_user ( user ) [EOL] [EOL] with reversion . create_revision ( ) : [EOL] e . name = [string] [EOL] e . first_name = [string] [EOL] e . last_name = [string] [EOL] e . birth_date = CUSTOMER__BIRTH_DATE + timedelta ( days = [number] ) [EOL] e . note = [string] [EOL] e . save ( ) [EOL] [EOL] reversion . set_user ( user ) [EOL] [EOL] versions_a = get_reversion_versions ( e . topparenta_ptr ) [EOL] versions_b = get_reversion_versions ( e . parentb_ptr ) [EOL] versions_c = get_reversion_versions ( e . parentc_ptr ) [EOL] versions_d = get_reversion_versions ( e . extraparentd_ptr ) [EOL] versions_e = get_reversion_versions ( e ) [EOL] [EOL] self . assertEqual ( get_reversion_local_field_dict ( versions_a [ [number] ] ) [ [string] ] , [string] ) [EOL] self . assertEqual ( get_reversion_local_field_dict ( versions_a [ [number] ] ) [ [string] ] , [string] ) [EOL] [EOL] self . assertEqual ( get_reversion_local_field_dict ( versions_b [ [number] ] ) [ [string] ] , CUSTOMER__BIRTH_DATE ) [EOL] self . assertEqual ( get_reversion_local_field_dict ( versions_b [ [number] ] ) [ [string] ] , CUSTOMER__BIRTH_DATE + timedelta ( days = [number] ) ) [EOL] [EOL] self . assertEqual ( get_reversion_local_field_dict ( versions_c [ [number] ] ) [ [string] ] , [string] ) [EOL] self . assertEqual ( get_reversion_local_field_dict ( versions_c [ [number] ] ) [ [string] ] , [string] ) [EOL] [EOL] self . assertEqual ( get_reversion_local_field_dict ( versions_d [ [number] ] ) [ [string] ] , [string] ) [EOL] self . assertEqual ( get_reversion_local_field_dict ( versions_d [ [number] ] ) [ [string] ] , [string] ) [EOL] [EOL] self . assertEqual ( get_reversion_local_field_dict ( versions_e [ [number] ] ) [ [string] ] , [string] ) [EOL] self . assertEqual ( get_reversion_local_field_dict ( versions_e [ [number] ] ) [ [string] ] , [string] ) [EOL] [EOL] anon . anonymize_obj ( e , base_encryption_key = self . base_encryption_key ) [EOL] [EOL] anon_versions_a = get_reversion_versions ( e . topparenta_ptr ) [EOL] anon_versions_b = get_reversion_versions ( e . parentb_ptr ) [EOL] anon_versions_c = get_reversion_versions ( e . parentc_ptr ) [EOL] anon_versions_d = get_reversion_versions ( e . extraparentd_ptr ) [EOL] anon_versions_e = get_reversion_versions ( e ) [EOL] anon_e = ChildE . objects . get ( pk = e . pk ) [EOL] [EOL] self . assertNotEqual ( get_reversion_local_field_dict ( anon_versions_a [ [number] ] ) [ [string] ] , [string] ) [EOL] self . assertNotEqual ( get_reversion_local_field_dict ( anon_versions_a [ [number] ] ) [ [string] ] , [string] ) [EOL] [EOL] self . assertNotEqual ( get_reversion_local_field_dict ( anon_versions_b [ [number] ] ) [ [string] ] , CUSTOMER__BIRTH_DATE ) [EOL] self . assertNotEqual ( get_reversion_local_field_dict ( anon_versions_b [ [number] ] ) [ [string] ] , CUSTOMER__BIRTH_DATE + timedelta ( days = [number] ) ) [EOL] [EOL] self . assertNotEqual ( get_reversion_local_field_dict ( anon_versions_c [ [number] ] ) [ [string] ] , [string] ) [EOL] self . assertNotEqual ( get_reversion_local_field_dict ( anon_versions_c [ [number] ] ) [ [string] ] , [string] ) [EOL] [EOL] self . assertNotEqual ( get_reversion_local_field_dict ( anon_versions_d [ [number] ] ) [ [string] ] , [string] ) [EOL] self . assertNotEqual ( get_reversion_local_field_dict ( anon_versions_d [ [number] ] ) [ [string] ] , [string] ) [EOL] [EOL] self . assertNotEqual ( get_reversion_local_field_dict ( anon_versions_e [ [number] ] ) [ [string] ] , [string] ) [EOL] self . assertNotEqual ( get_reversion_local_field_dict ( anon_versions_e [ [number] ] ) [ [string] ] , [string] ) [EOL] [EOL] anon . deanonymize_obj ( anon_e , base_encryption_key = self . base_encryption_key ) [EOL] [EOL] deanon_versions_a = get_reversion_versions ( e . topparenta_ptr ) [EOL] deanon_versions_b = get_reversion_versions ( e . parentb_ptr ) [EOL] deanon_versions_c = get_reversion_versions ( e . parentc_ptr ) [EOL] deanon_versions_d = get_reversion_versions ( e . extraparentd_ptr ) [EOL] deanon_versions_e = get_reversion_versions ( e ) [EOL] [EOL] self . assertEqual ( get_reversion_local_field_dict ( deanon_versions_a [ [number] ] ) [ [string] ] , [string] ) [EOL] self . assertEqual ( get_reversion_local_field_dict ( deanon_versions_a [ [number] ] ) [ [string] ] , [string] ) [EOL] [EOL] self . assertEqual ( get_reversion_local_field_dict ( deanon_versions_b [ [number] ] ) [ [string] ] , CUSTOMER__BIRTH_DATE ) [EOL] self . assertEqual ( get_reversion_local_field_dict ( deanon_versions_b [ [number] ] ) [ [string] ] , CUSTOMER__BIRTH_DATE + timedelta ( days = [number] ) ) [EOL] [EOL] self . assertEqual ( get_reversion_local_field_dict ( deanon_versions_c [ [number] ] ) [ [string] ] , [string] ) [EOL] self . assertEqual ( get_reversion_local_field_dict ( deanon_versions_c [ [number] ] ) [ [string] ] , [string] ) [EOL] [EOL] self . assertEqual ( get_reversion_local_field_dict ( deanon_versions_d [ [number] ] ) [ [string] ] , [string] ) [EOL] self . assertEqual ( get_reversion_local_field_dict ( deanon_versions_d [ [number] ] ) [ [string] ] , [string] ) [EOL] [EOL] self . assertEqual ( get_reversion_local_field_dict ( deanon_versions_e [ [number] ] ) [ [string] ] , [string] ) [EOL] self . assertEqual ( get_reversion_local_field_dict ( deanon_versions_e [ [number] ] ) [ [string] ] , [string] ) [EOL] [EOL] [EOL] class TestFileFieldAnonymizer ( TestCase ) : [EOL] def test_file_field ( self ) : [EOL] customer = Customer ( ** CUSTOMER__KWARGS ) [EOL] customer . save ( ) [EOL] [EOL] avatar = Avatar ( ) [EOL] avatar . customer = customer [EOL] avatar . image . save ( [string] , ContentFile ( [string] ) , save = False ) [EOL] avatar . save ( ) [EOL] [EOL] avatar_2 = Avatar . objects . last ( ) [EOL] self . assertEqual ( avatar_2 . image . read ( ) , [string] ) [EOL] avatar_2 . _anonymize_obj ( base_encryption_key = [string] ) [EOL] [EOL] avatar_3 = Avatar . objects . last ( ) [EOL] self . assertNotEqual ( avatar_3 . image . read ( ) , [string] ) [EOL] [EOL] [comment] [EOL] avatar_3 . image . delete ( ) [EOL] avatar_3 . delete ( ) [EOL] [EOL] def test_file_field_real_file ( self ) : [EOL] anonymizer = anonymizer_register [ Avatar ] [EOL] anonymizer . image . replacement_file = [string] [EOL] customer = Customer ( ** CUSTOMER__KWARGS ) [EOL] customer . save ( ) [EOL] [EOL] avatar = Avatar ( ) [EOL] avatar . customer = customer [EOL] avatar . image . save ( [string] , ContentFile ( [string] ) ) [EOL] [EOL] avatar_2 = Avatar . objects . last ( ) [EOL] self . assertEqual ( avatar_2 . image . read ( ) , [string] ) [EOL] avatar_2 . _anonymize_obj ( base_encryption_key = [string] ) [EOL] [EOL] avatar_3 = Avatar . objects . last ( ) [EOL] self . assertNotEqual ( avatar_3 . image . read ( ) , [string] ) [EOL] [EOL] anonymizer . image . replacement_file = None [EOL] [comment] [EOL] avatar_3 . image . delete ( ) [EOL] avatar_3 . delete ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Email$ 0 0 0 0 0 0 0 0 0 $tests.models.Email$ 0 0 0 0 0 0 $tests.models.Email$ 0 0 0 0 0 0 0 $tests.models.Email$ 0 0 0 0 0 0 0 0 0 0 $tests.models.Email$ 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Email$ 0 0 0 0 0 0 0 0 0 $tests.models.Email$ 0 $tests.models.Email$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Address$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Address$ 0 0 0 0 0 0 0 $tests.models.Address$ 0 0 0 0 0 0 0 0 0 0 $tests.models.Address$ 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Address$ 0 0 0 0 0 0 0 0 0 $tests.models.Address$ 0 0 0 0 0 0 0 0 0 0 $tests.models.Address$ 0 0 0 0 0 0 0 0 $tests.models.Address$ 0 0 0 0 0 0 0 0 0 0 $tests.models.Address$ 0 0 0 0 0 0 0 0 0 0 $tests.models.Address$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Account$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Account$ 0 0 0 0 0 0 0 $tests.models.Account$ 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Account$ 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Account$ 0 0 0 0 0 0 0 0 0 $tests.models.Account$ 0 0 0 0 0 0 0 0 0 0 $tests.models.Account$ 0 0 0 0 0 0 0 0 $tests.models.Account$ 0 0 0 0 0 0 0 0 0 0 $tests.models.Account$ 0 0 0 0 0 0 0 0 $tests.models.Account$ 0 0 0 0 0 0 0 0 0 0 $tests.models.Account$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Account$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Account$ 0 0 0 0 0 0 0 $tests.models.Payment$ 0 0 0 $tests.models.Account$ 0 0 0 $tests.models.Account$ 0 0 0 0 0 0 0 0 0 $tests.models.Payment$ 0 0 0 0 0 0 0 0 0 $tests.models.Payment$ 0 0 0 0 0 0 $tests.models.Payment$ 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Payment$ 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Payment$ 0 0 0 0 0 0 0 0 0 $tests.models.Payment$ 0 0 0 0 0 0 0 0 0 0 $tests.models.Payment$ 0 0 0 0 0 0 0 0 $tests.models.Payment$ 0 0 0 0 0 0 0 0 0 0 $tests.models.Payment$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $tests.models.ContactForm$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $tests.models.ContactForm$ 0 0 0 0 0 0 0 $tests.models.ContactForm$ 0 0 0 0 0 0 $tests.models.ContactForm$ 0 0 0 0 0 0 0 0 0 0 0 $tests.models.ContactForm$ 0 0 0 0 0 0 0 0 0 $tests.models.ContactForm$ 0 0 0 0 0 0 0 0 0 0 $tests.models.ContactForm$ 0 0 0 0 0 0 0 0 $tests.models.ContactForm$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $tests.models.ContactForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 $tests.models.Customer$ 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Email$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Email$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 $tests.models.Email$ 0 0 0 0 0 0 0 0 0 $tests.models.Email$ 0 0 0 0 0 0 0 0 0 $tests.models.Email$ 0 0 0 0 0 0 0 0 0 0 $tests.models.Email$ 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Email$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Email$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 0 0 0 0 0 $tests.models.Customer$ 0 0 0 0 0 $tests.models.Email$ 0 0 0 0 0 0 0 0 0 $tests.models.Email$ 0 0 0 0 0 0 0 0 0 $tests.models.Email$ 0 0 0 0 0 0 0 0 0 0 $tests.models.Email$ 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Note$ 0 0 0 $tests.models.Note$ 0 0 0 0 $tests.models.Note$ 0 0 0 0 0 0 0 $tests.models.Note$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Note$ 0 0 0 0 0 0 0 0 0 $tests.models.Note$ 0 0 0 0 0 0 0 0 0 $tests.models.Note$ 0 $tests.models.Note$ 0 $tests.models.Note$ 0 $tests.models.Note$ 0 0 0 0 0 0 $tests.models.Note$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Note$ 0 0 0 0 0 0 0 0 0 $tests.models.Note$ 0 0 0 0 0 0 0 0 0 $tests.models.Note$ 0 $tests.models.Note$ 0 $tests.models.Note$ 0 $tests.models.Note$ 0 0 0 0 0 0 $tests.models.Note$ 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.ContactForm$ 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.ContactForm$ 0 0 0 0 0 $tests.models.ContactForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.ContactForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.ContactForm$ 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.ContactForm$ 0 0 0 0 0 $tests.models.Note$ 0 0 0 $tests.models.Note$ 0 0 0 0 $tests.models.Note$ 0 0 0 $tests.models.ContactForm$ 0 $tests.models.Note$ 0 0 0 0 0 0 $tests.models.Note$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.ContactForm$ 0 0 0 0 0 0 0 0 0 $tests.models.ContactForm$ 0 0 0 0 0 0 0 0 0 $tests.models.ContactForm$ 0 0 0 0 0 0 0 0 0 0 $tests.models.ContactForm$ 0 0 0 0 0 0 0 0 $tests.models.ContactForm$ 0 0 0 0 0 0 0 0 0 0 $tests.models.ContactForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[reversion.revisions.models.Version]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Avatar$ 0 0 0 0 0 $tests.models.Avatar$ 0 0 0 0 0 $tests.models.Avatar$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Avatar$ 0 0 0 0 0 0 $tests.models.Avatar$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Avatar$ 0 0 0 0 0 0 0 0 0 0 $tests.models.Avatar$ 0 0 0 0 0 0 0 0 0 $tests.models.Avatar$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Avatar$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Avatar$ 0 0 0 0 0 0 0 $tests.models.Avatar$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gdpr.anonymizers.ModelAnonymizer]$ 0 0 0 0 0 0 $typing.Type[gdpr.anonymizers.ModelAnonymizer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Avatar$ 0 0 0 0 0 $tests.models.Avatar$ 0 0 0 0 0 $tests.models.Avatar$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Avatar$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Avatar$ 0 0 0 0 0 0 0 0 0 0 $tests.models.Avatar$ 0 0 0 0 0 0 0 0 0 $tests.models.Avatar$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.models.Avatar$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gdpr.anonymizers.ModelAnonymizer]$ 0 0 0 0 0 0 0 0 0 $tests.models.Avatar$ 0 0 0 0 0 0 0 $tests.models.Avatar$ 0 0 0 0 0
	0
from typing import Any , Callable [EOL] import builtins [EOL] import django [EOL] import typing [EOL] from typing import Callable [EOL] [EOL] from django . contrib . contenttypes . models import ContentType [EOL] from django . db . models import Model [EOL] from django . test import TestCase [EOL] [EOL] from gdpr . models import AnonymizedData [EOL] [EOL] [EOL] class NotImplementedMixin ( TestCase ) : [EOL] def assertNotImplemented ( self , func , * args , ** kwargs ) : [EOL] try : [EOL] func ( * args , ** kwargs ) [EOL] except AssertionError as exc : [EOL] print ( [string] , self . id ( ) , exc ) [EOL] else : [EOL] raise AssertionError ( [string] ) [EOL] [EOL] def assertNotImplementedNotEqual ( self , * args , ** kwargs ) : [EOL] self . assertNotImplemented ( self . assertNotEqual , * args , ** kwargs ) [EOL] [EOL] [EOL] class AnonymizedDataMixin ( TestCase ) : [EOL] def assertAnonymizedDataExists ( self , obj , field ) : [EOL] content_type = ContentType . objects . get_for_model ( obj . __class__ ) [EOL] self . assertTrue ( AnonymizedData . objects . filter ( content_type = content_type , object_id = str ( obj . pk ) , field = field ) . exists ( ) ) [EOL] [EOL] def assertAnonymizedDataNotExists ( self , obj , field ) : [EOL] content_type = ContentType . objects . get_for_model ( obj . __class__ ) [EOL] self . assertFalse ( AnonymizedData . objects . filter ( content_type = content_type , object_id = str ( obj . pk ) , field = field ) . exists ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Callable$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $django.db.models.Model$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $django.db.models.Model$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $django.db.models.Model$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $django.db.models.Model$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0
from typing import Optional , Any , OrderedDict , List , Union , Iterator , TypeVar [EOL] from collections import _OrderedDictItemsView , _OrderedDictKeysView , _OrderedDictValuesView [EOL] import builtins [EOL] import typing [EOL] import collections [EOL] import gdpr [EOL] from collections import OrderedDict , _OrderedDictItemsView , _OrderedDictKeysView , _OrderedDictValuesView [EOL] from importlib import import_module [EOL] from typing import TYPE_CHECKING , Any , Generic , Iterator , Optional , Type , TypeVar , Union [EOL] [EOL] from django . apps import apps [EOL] from django . conf import settings [EOL] from django . core . exceptions import ImproperlyConfigured [EOL] from django . db . models import Model [EOL] from django . utils . encoding import force_text [EOL] [EOL] from . utils import str_to_class [EOL] [EOL] if TYPE_CHECKING : [EOL] from gdpr . anonymizers import ModelAnonymizer [EOL] from gdpr . purposes import AbstractPurpose [EOL] [EOL] [EOL] class BaseLoader : [EOL] [docstring] [EOL] [EOL] def import_modules ( self ) : [EOL] raise NotImplementedError [EOL] [EOL] [EOL] class AppLoader ( BaseLoader ) : [EOL] [docstring] [EOL] [EOL] module_name = ... [EOL] [EOL] def import_modules ( self ) : [EOL] for app in apps . get_app_configs ( ) : [EOL] if app . name == [string] : [EOL] continue [EOL] try : [EOL] import_module ( f'{ app . name } [string] { self . module_name }' ) [EOL] except ImportError as ex : [EOL] if force_text ( ex ) != f' [string] { app . name } [string] { self . module_name } [string] ' : [EOL] raise ex [EOL] [EOL] [EOL] class SettingsListLoader ( BaseLoader ) : [EOL] [docstring] [EOL] [EOL] list_name = ... [EOL] [EOL] def import_modules ( self ) : [EOL] if not hasattr ( settings , self . list_name ) : [EOL] raise ImproperlyConfigured ( f' [string] { self . list_name } [string] ' ) [EOL] modules_list = getattr ( settings , self . list_name ) [EOL] if type ( modules_list ) in [ list , tuple ] : [EOL] for i in modules_list : [EOL] import_module ( i ) [EOL] else : [EOL] raise ImproperlyConfigured ( f' [string] { self . list_name } [string] { str ( type ( modules_list ) ) } [string] ' ) [EOL] [EOL] [EOL] class SettingsListAnonymizerLoader ( SettingsListLoader ) : [EOL] [docstring] [EOL] [EOL] list_name = [string] [EOL] [EOL] [EOL] class SettingsListPurposesLoader ( SettingsListLoader ) : [EOL] [docstring] [EOL] [EOL] list_name = [string] [EOL] [EOL] [EOL] class AppAnonymizerLoader ( AppLoader ) : [EOL] [docstring] [EOL] [EOL] module_name = [string] [EOL] [EOL] [EOL] class AppPurposesLoader ( AppLoader ) : [EOL] [docstring] [EOL] [EOL] module_name = [string] [EOL] [EOL] [EOL] K = TypeVar ( [string] ) [EOL] V = TypeVar ( [string] ) [EOL] [EOL] [EOL] class BaseRegister ( Generic [ K , V ] ) : [EOL] [docstring] [EOL] [EOL] _is_import_done = False [EOL] register_dict = ... [EOL] loaders_settings = ... [EOL] default_loader = ... [EOL] [EOL] def __init__ ( self ) : [EOL] self . register_dict = OrderedDict ( ) [EOL] [EOL] def register ( self , key , object_class ) : [EOL] self . register_dict [ key ] = object_class [EOL] [EOL] def _import_objects ( self ) : [EOL] default_loader = [ self . default_loader ] if self . default_loader else [ ] [EOL] for loader_path in getattr ( settings , self . loaders_settings , default_loader ) : [EOL] if isinstance ( loader_path , ( list , tuple ) ) : [EOL] for path in loader_path : [EOL] import_module ( path ) [EOL] else : [EOL] str_to_class ( loader_path ) ( ) . import_modules ( ) [EOL] [EOL] def _import_objects_once ( self ) : [EOL] if self . _is_import_done : [EOL] return [EOL] self . _is_import_done = True [EOL] self . _import_objects ( ) [EOL] [EOL] def __iter__ ( self ) : [EOL] self . _import_objects_once ( ) [EOL] [EOL] for o in self . register_dict . values ( ) : [EOL] yield o [EOL] [EOL] def __contains__ ( self , key ) : [EOL] self . _import_objects_once ( ) [EOL] [EOL] return key in self . register_dict . keys ( ) [EOL] [EOL] def __getitem__ ( self , key ) : [EOL] self . _import_objects_once ( ) [EOL] [EOL] return self . register_dict [ key ] [EOL] [EOL] def keys ( self ) : [EOL] self . _import_objects_once ( ) [EOL] [EOL] return self . register_dict . keys ( ) [EOL] [EOL] def items ( self ) : [EOL] self . _import_objects_once ( ) [EOL] [EOL] return self . register_dict . items ( ) [EOL] [EOL] def values ( self ) : [EOL] self . _import_objects_once ( ) [EOL] [EOL] return self . register_dict . values ( ) [EOL] [EOL] def get ( self , * args , ** kwargs ) : [EOL] self . _import_objects_once ( ) [EOL] [EOL] return self . register_dict . get ( * args , ** kwargs ) [EOL] [EOL] [EOL] class AnonymizersRegister ( BaseRegister [ Model , Type [ [string] ] ] ) : [EOL] [docstring] [EOL] [EOL] default_loader = [string] [EOL] loaders_settings = [string] [EOL] [EOL] [EOL] class PurposesRegister ( BaseRegister [ str , Type [ [string] ] ] ) : [EOL] [docstring] [EOL] [EOL] default_loader = [string] [EOL] loaders_settings = [string] [EOL] [EOL] [EOL] anonymizer_register = AnonymizersRegister ( ) [EOL] purpose_register = PurposesRegister ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $"OrderedDict[K,V]"$ 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $collections.OrderedDict[Variable[gdpr.loading.K],Variable[gdpr.loading.V]]$ 0 0 0 0 0 0 0 $None$ 0 0 0 $K$ 0 $V$ 0 0 0 0 0 0 0 $K$ 0 0 $V$ 0 0 0 $None$ 0 0 0 0 0 $typing.Union[typing.List[typing.Any],typing.List[typing.Optional[builtins.str]]]$ 0 0 0 0 $typing.Union[typing.List[typing.Any],typing.List[typing.Optional[builtins.str]]]$ 0 0 0 0 $typing.Union[typing.List[typing.Any],typing.List[typing.Optional[builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing.List[typing.Any],typing.List[typing.Optional[builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[V]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $K$ 0 0 0 0 0 0 0 0 0 0 0 $K$ 0 0 0 0 0 0 0 0 0 0 0 $V$ 0 0 0 $K$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $K$ 0 0 0 0 $"_OrderedDictKeysView[K]"$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $"_OrderedDictItemsView[K,V]"$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $"_OrderedDictValuesView[V]"$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[V,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $gdpr.loading.AnonymizersRegister$ 0 0 0 0 0 $gdpr.loading.PurposesRegister$ 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import gdpr [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] [EOL] from enumfields import Choice , ChoiceEnum [EOL] [EOL] [EOL] class LegalReasonState ( ChoiceEnum ) : [EOL] [EOL] ACTIVE = Choice ( [number] , _ ( [string] ) ) [EOL] EXPIRED = Choice ( [number] , _ ( [string] ) ) [EOL] DEACTIVATED = Choice ( [number] , _ ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gdpr.enums.LegalReasonState]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gdpr.enums.LegalReasonState]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gdpr.enums.LegalReasonState]$ 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Tuple [EOL] import typing [EOL] VERSION = ( [number] , [number] , [number] ) [EOL] [EOL] [EOL] def get_version ( ) : [EOL] return [string] . join ( map ( str , VERSION ) ) [EOL]	0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int,builtins.int]$ 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Any , List , Tuple [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations , models [EOL] from django . db . models import Count [EOL] from tqdm import tqdm [EOL] [EOL] [EOL] def remove_duplicate_legal_reasons ( apps , purpose_slug , source_object_content_type , source_object_id ) : [EOL] LegalReason = apps . get_model ( [string] , [string] ) [EOL] duplicate_legal_reason_qs = LegalReason . objects . filter ( purpose_slug = purpose_slug , source_object_content_type = source_object_content_type , source_object_id = source_object_id ) [EOL] [EOL] if duplicate_legal_reason_qs . filter ( is_active = True ) . count ( ) > [number] : [EOL] duplicate_legal_reason_qs . filter ( is_active = False ) . delete ( ) [EOL] [EOL] latest_legal_reason = duplicate_legal_reason_qs . latest ( [string] ) [EOL] duplicate_legal_reason_qs . exclude ( pk = latest_legal_reason . pk ) . delete ( ) [EOL] [EOL] [EOL] def check_uniqueness_and_keep_latest_active_legal_reason ( apps , schema_editor ) : [EOL] LegalReason = apps . get_model ( [string] , [string] ) [EOL] check_qs = LegalReason . objects . values ( [string] , [string] , [string] ) . annotate ( lr_count = Count ( [string] ) ) . filter ( lr_count__gt = [number] ) . order_by ( [string] ) . distinct ( ) [EOL] [EOL] for legal_reason in tqdm ( check_qs . all ( ) ) : [EOL] remove_duplicate_legal_reasons ( apps , legal_reason [ [string] ] , legal_reason [ [string] ] , legal_reason [ [string] ] ) [EOL] [EOL] [EOL] def remove_duplicate_legal_reasons_relatives ( apps , legal_reason , object_content_type , object_id ) : [EOL] LegalReasonRelatedObject = apps . get_model ( [string] , [string] ) [EOL] duplicates_qs = LegalReasonRelatedObject . objects . filter ( legal_reason = legal_reason , object_content_type = object_content_type , object_id = object_id ) [EOL] latest_legal_reason_related_object = duplicates_qs . latest ( [string] ) [EOL] duplicates_qs . exclude ( pk = latest_legal_reason_related_object . pk ) . delete ( ) [EOL] [EOL] [EOL] def check_uniqueness_and_keep_latest_active_legal_reason_related_object ( apps , schema_editor ) : [EOL] LegalReasonRelatedObject = apps . get_model ( [string] , [string] ) [EOL] check_qs = LegalReasonRelatedObject . objects . values ( [string] , [string] , [string] ) . annotate ( lrro_count = Count ( [string] ) ) . filter ( lrro_count__gt = [number] ) . order_by ( [string] ) . distinct ( ) [EOL] [EOL] for legal_reason_related_object in tqdm ( check_qs . all ( ) , ncols = [number] ) : [EOL] remove_duplicate_legal_reasons_relatives ( apps , legal_reason_related_object [ [string] ] , legal_reason_related_object [ [string] ] , legal_reason_related_object [ [string] ] ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] dependencies = [ ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] operations = [ migrations . AlterField ( model_name = [string] , name = [string] , field = models . CharField ( choices = [ ] , db_index = True , max_length = [number] , verbose_name = [string] ) , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = models . TextField ( verbose_name = [string] , db_index = True ) , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = models . TextField ( verbose_name = [string] , db_index = True ) , ) , migrations . RunPython ( check_uniqueness_and_keep_latest_active_legal_reason ) , migrations . RunPython ( check_uniqueness_and_keep_latest_active_legal_reason_related_object ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Any , List , Tuple [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] import enumfields . fields [EOL] import gdpr . enums [EOL] [EOL] [EOL] def set_legal_reason_state ( apps , schema_editor ) : [EOL] LegalReason = apps . get_model ( [string] , [string] ) [EOL] LegalReason . objects . filter ( is_active = True ) . update ( state = gdpr . enums . LegalReasonState . ACTIVE ) [EOL] LegalReason . objects . filter ( is_active = False ) . update ( state = gdpr . enums . LegalReasonState . EXPIRED ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RunPython ( set_legal_reason_state ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from . default import AbstractPurpose [EOL] [EOL] __all__ = ( [string] ) [EOL]	0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0
from typing import Optional , Any , Dict , Union , Type , Tuple [EOL] import builtins [EOL] import django [EOL] import typing [EOL] import gdpr [EOL] from typing import TYPE_CHECKING , Any , Dict , KeysView , List , Optional , Tuple , Type , Union [EOL] [EOL] from django . core . exceptions import ImproperlyConfigured [EOL] from django . db . models import Model , Q [EOL] [EOL] from gdpr . enums import LegalReasonState [EOL] from gdpr . fields import Fields [EOL] from gdpr . loading import anonymizer_register , purpose_register [EOL] [EOL] if TYPE_CHECKING : [EOL] from gdpr . models import LegalReason [EOL] from gdpr . anonymizers import ModelAnonymizer [EOL] [EOL] FieldList = Union [ List [ str ] , Tuple , KeysView [ str ] ] [comment] [EOL] FieldMatrix = Union [ str , Tuple [ Any , ... ] ] [EOL] RelatedMatrix = Dict [ str , FieldMatrix ] [EOL] [EOL] [EOL] class PurposeMetaclass ( type ) : [EOL] [EOL] def __new__ ( mcs , name , bases , attrs ) : [EOL] from gdpr . loading import purpose_register [EOL] [EOL] new_class = super ( ) . __new__ ( mcs , name , bases , attrs ) [EOL] if hasattr ( new_class , [string] ) and new_class . slug : [EOL] if new_class . slug in purpose_register : [EOL] raise ImproperlyConfigured ( [string] . format ( new_class . slug ) ) [EOL] [EOL] purpose_register . register ( new_class . slug , new_class ) [EOL] return new_class [EOL] [EOL] def __str__ ( self ) : [EOL] return str ( self . name ) [EOL] [EOL] [EOL] class AbstractPurpose ( metaclass = PurposeMetaclass ) : [EOL] [docstring] [EOL] [EOL] name = ... [EOL] slug = ... [EOL] fields = None [EOL] expiration_timedelta = ... [EOL] anonymize_legal_reason_related_objects_only = False [comment] [EOL] [EOL] def get_parsed_fields ( self , model ) : [EOL] return Fields ( self . fields or ( ) , model ) [EOL] [EOL] def deanonymize_obj ( self , obj , fields = None ) : [EOL] fields = fields or self . fields or ( ) [EOL] if len ( fields ) == [number] : [EOL] [comment] [EOL] return [EOL] obj_model = obj . __class__ [EOL] anonymizer = anonymizer_register [ obj_model ] ( ) [EOL] anonymizer . deanonymize_obj ( obj , fields ) [EOL] [EOL] def anonymize_obj ( self , obj , legal_reason = None , fields = None ) : [EOL] fields = fields or self . fields or ( ) [EOL] if len ( fields ) == [number] : [EOL] [comment] [EOL] return [EOL] from gdpr . models import LegalReason [comment] [EOL] [EOL] obj_model = obj . __class__ [EOL] anonymizer = anonymizer_register [ obj_model ] ( ) [EOL] [EOL] [comment] [EOL] other_legal_reasons = LegalReason . objects . filter_source_instance ( obj ) . filter ( state = LegalReasonState . ACTIVE ) [EOL] if legal_reason : [EOL] other_legal_reasons = other_legal_reasons . filter ( ~ Q ( pk = legal_reason . pk ) ) [EOL] if other_legal_reasons . count ( ) == [number] : [EOL] anonymizer . anonymize_obj ( obj , legal_reason , self , fields ) [EOL] return [EOL] [EOL] from gdpr . loading import purpose_register [EOL] [EOL] parsed_fields = self . get_parsed_fields ( obj_model ) [EOL] [EOL] [comment] [EOL] for allowed_fields in [ purpose_register [ slug ] ( ) . get_parsed_fields ( obj_model ) for slug in set ( [ i . purpose_slug for i in other_legal_reasons ] ) ] : [EOL] parsed_fields -= allowed_fields [EOL] [EOL] if len ( parsed_fields ) == [number] : [EOL] [comment] [EOL] return [EOL] [EOL] anonymizer . anonymize_obj ( obj , legal_reason , self , parsed_fields ) [EOL] [EOL] [EOL] purposes_map = purpose_register [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[None,builtins.str,typing.Tuple[typing.Any,...]]$ 0 0 0 0 0 $typing.Union[None,builtins.str,typing.Tuple[typing.Any,...]]$ 0 $typing.Union[None,builtins.str,typing.Tuple[typing.Any,...]]$ 0 0 0 $typing.Union[None,builtins.str,typing.Tuple[typing.Any,...]]$ 0 0 0 0 0 0 0 $typing.Union[None,builtins.str,typing.Tuple[typing.Any,...]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $"ModelAnonymizer"$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $"ModelAnonymizer"$ 0 0 0 0 0 0 0 0 0 $typing.Union[None,builtins.str,typing.Tuple[typing.Any,...]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $"ModelAnonymizer"$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import math [EOL] [EOL] import pyprind [EOL] from django . core . management . base import BaseCommand [EOL] from utils import chunked_iterator , chunked_queryset_iterator [EOL] from utils . commands import ProgressBarStream [EOL] [EOL] from gdpr . anonymizers import DeleteModelAnonymizer [EOL] from gdpr . loading import anonymizer_register [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , type = str , action = [string] , dest = [string] , help = [string] ) [EOL] [EOL] def _anonymize_by_qs ( self , obj_anonymizer , qs ) : [EOL] bar = pyprind . ProgBar ( max ( math . ceil ( qs . count ( ) // obj_anonymizer . chunk_size ) , [number] ) , title = [string] . format ( self . _get_full_model_name ( qs . model ) ) , stream = ProgressBarStream ( self . stdout ) ) [EOL] for batch_qs in chunked_queryset_iterator ( qs , obj_anonymizer . chunk_size , delete_qs = isinstance ( obj_anonymizer , DeleteModelAnonymizer ) ) : [EOL] obj_anonymizer ( ) . anonymize_qs ( batch_qs ) [EOL] bar . update ( ) [EOL] [EOL] def _anonymize_by_obj ( self , obj_anonymizer , qs ) : [EOL] bar = pyprind . ProgBar ( qs . count ( ) , title = [string] . format ( self . _get_full_model_name ( qs . model ) ) , stream = ProgressBarStream ( self . stdout ) ) [EOL] for obj in chunked_iterator ( qs , obj_anonymizer . chunk_size ) : [EOL] obj_anonymizer ( ) . anonymize_obj ( obj ) [EOL] bar . update ( ) [EOL] [EOL] def _anonymize ( self , obj_anonymizer , model ) : [EOL] qs = model . objects . all ( ) [EOL] if obj_anonymizer . can_anonymize_qs : [EOL] self . _anonymize_by_qs ( obj_anonymizer , qs ) [EOL] else : [EOL] self . _anonymize_by_obj ( obj_anonymizer , qs ) [EOL] [EOL] def _get_full_model_name ( self , model ) : [EOL] return [string] . format ( model . _meta . app_label , model . _meta . model_name ) [EOL] [EOL] def handle ( self , models , * args , ** options ) : [EOL] models = { v . strip ( ) . lower ( ) for v in models . split ( [string] ) } if models else None [EOL] for obj_anonymizer in list ( anonymizer_register ( ) ) : [EOL] model = obj_anonymizer . Meta . model [EOL] if not models or self . _get_full_model_name ( model ) in models : [EOL] self . _anonymize ( obj_anonymizer , model ) [EOL] self . stdout . write ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . core . management . base import BaseCommand [EOL] [EOL] from gdpr . models import LegalReason [EOL] [EOL] from tqdm import tqdm [EOL] [EOL] from django . db import transaction [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] [EOL] @ transaction . atomic def handle ( self , * args , ** options ) : [EOL] [EOL] self . stdout . write ( [string] ) [EOL] for legal_reason in tqdm ( LegalReason . objects . filter_expired_retaining_data_in_last_days ( ) , ncols = [number] ) : [EOL] legal_reason . expire ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional [EOL] import logging [EOL] import builtins [EOL] import django [EOL] import typing [EOL] [docstring] [EOL] import logging [EOL] from typing import Optional [EOL] [EOL] from django . core . exceptions import ImproperlyConfigured [EOL] [EOL] from gdpr . anonymizers . base import NumericFieldAnonymizer [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def is_gis_installed ( ) : [EOL] try : [EOL] from django . contrib . gis . geos import Point [EOL] return True [EOL] except ImproperlyConfigured : [EOL] return False [EOL] [EOL] [EOL] if not is_gis_installed ( ) : [EOL] logger . warning ( [string] ) [EOL] [EOL] [EOL] class ExperimentalGISPointFieldAnonymizer ( NumericFieldAnonymizer ) : [EOL] [docstring] [EOL] [EOL] max_x_range = ... [EOL] max_y_range = ... [EOL] [EOL] def __init__ ( self , max_x_range = None , max_y_range = None , * args , ** kwargs ) : [EOL] if max_x_range is not None : [EOL] self . max_x_range = max_x_range [EOL] elif self . max_x_range is None : [EOL] raise ImproperlyConfigured ( f'{ self . __class__ } [string] ' ) [EOL] if max_y_range is not None : [EOL] self . max_y_range = max_y_range [EOL] elif self . max_y_range is None : [EOL] raise ImproperlyConfigured ( f'{ self . __class__ } [string] ' ) [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] def get_encrypted_value ( self , value , encryption_key ) : [EOL] if not is_gis_installed ( ) : [EOL] raise ImproperlyConfigured ( [string] ) [EOL] from django . contrib . gis . geos import Point [EOL] [EOL] new_val = Point ( value . tuple ) [EOL] new_val . x = ( new_val . x + self . get_numeric_encryption_key ( encryption_key , int ( new_val . x ) ) ) % self . max_x_range [EOL] new_val . y = ( new_val . y + self . get_numeric_encryption_key ( encryption_key , int ( new_val . y ) ) ) % self . max_y_range [EOL] [EOL] return new_val [EOL] [EOL] def get_decrypted_value ( self , value , encryption_key ) : [EOL] if not is_gis_installed ( ) : [EOL] raise ImproperlyConfigured ( [string] ) [EOL] from django . contrib . gis . geos import Point [EOL] [EOL] new_val = Point ( value . tuple ) [EOL] new_val . x = ( new_val . x - self . get_numeric_encryption_key ( encryption_key , int ( new_val . x ) ) ) % self . max_x_range [EOL] new_val . y = ( new_val . y - self . get_numeric_encryption_key ( encryption_key , int ( new_val . y ) ) ) % self . max_y_range [EOL] [EOL] return new_val [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.contrib.gis.geos.Point$ 0 0 0 0 0 0 0 0 $django.contrib.gis.geos.Point$ 0 0 0 0 $django.contrib.gis.geos.Point$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $django.contrib.gis.geos.Point$ 0 0 0 0 0 0 0 0 0 0 $django.contrib.gis.geos.Point$ 0 0 0 0 $django.contrib.gis.geos.Point$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $django.contrib.gis.geos.Point$ 0 0 0 0 0 0 0 0 0 0 0 0 $django.contrib.gis.geos.Point$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.contrib.gis.geos.Point$ 0 0 0 0 0 0 0 0 $django.contrib.gis.geos.Point$ 0 0 0 0 $django.contrib.gis.geos.Point$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $django.contrib.gis.geos.Point$ 0 0 0 0 0 0 0 0 0 0 $django.contrib.gis.geos.Point$ 0 0 0 0 $django.contrib.gis.geos.Point$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $django.contrib.gis.geos.Point$ 0 0 0 0 0 0 0 0 0 0 0 0 $django.contrib.gis.geos.Point$ 0
from typing import Optional , Any , Dict , KeysView , ItemsView , Union , List , Iterator , ValuesView , Type , Tuple [EOL] import typing [EOL] import reversion [EOL] import django [EOL] import builtins [EOL] import gdpr [EOL] import hashlib [EOL] import random [EOL] import string [EOL] import warnings [EOL] from typing import ( Any , Dict , ItemsView , Iterator , KeysView , List , Optional , TYPE_CHECKING , Tuple , Type , Union , ValuesView ) [EOL] [EOL] from django . conf import settings [EOL] from django . contrib . contenttypes . models import ContentType [EOL] from django . core import serializers [EOL] from django . db import transaction [EOL] from django . db . models import Model , QuerySet [EOL] [EOL] from gdpr . anonymizers . base import FieldAnonymizer , RelationAnonymizer [EOL] from gdpr . fields import Fields [EOL] from gdpr . models import AnonymizedData , LegalReason [EOL] from gdpr . utils import get_field_or_none , get_reversion_version_model [EOL] [EOL] if TYPE_CHECKING : [EOL] from gdpr . purposes . default import AbstractPurpose [EOL] [EOL] FieldList = Union [ List , Tuple , KeysView [ str ] ] [comment] [EOL] FieldMatrix = Union [ str , Tuple [ Any , ... ] ] [EOL] [EOL] [EOL] class ModelAnonymizerMeta ( type ) : [EOL] [docstring] [EOL] [EOL] def __new__ ( cls , name , bases , attrs ) : [EOL] from gdpr . loading import anonymizer_register [EOL] [EOL] new_obj = super ( ) . __new__ ( cls , name , bases , attrs ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] parents = [ b for b in bases if isinstance ( b , ModelAnonymizerMeta ) ] [EOL] if not parents or not hasattr ( new_obj , [string] ) : [EOL] return new_obj [EOL] [EOL] fields = getattr ( new_obj , [string] , { } ) [EOL] [EOL] for name , obj in attrs . items ( ) : [EOL] if isinstance ( obj , FieldAnonymizer ) : [EOL] fields [ name ] = obj [EOL] new_obj . fields = fields [EOL] [EOL] if not getattr ( new_obj . Meta , [string] , False ) : [EOL] anonymizer_register . register ( new_obj . Meta . model , new_obj ) [EOL] [EOL] return new_obj [EOL] [EOL] [EOL] class ModelAnonymizerBase ( metaclass = ModelAnonymizerMeta ) : [EOL] can_anonymize_qs = ... [EOL] fields = ... [EOL] _base_encryption_key = None [EOL] [EOL] class IrreversibleAnonymizerException ( Exception ) : [EOL] pass [EOL] [EOL] def __init__ ( self , base_encryption_key = None ) : [EOL] self . _base_encryption_key = base_encryption_key [EOL] [EOL] @ property def model ( self ) : [EOL] return self . Meta . model [comment] [EOL] [EOL] @ property def content_type ( self ) : [EOL] [docstring] [EOL] return ContentType . objects . get_for_model ( self . model ) [EOL] [EOL] def __getitem__ ( self , item ) : [EOL] return self . fields [ item ] [EOL] [EOL] def __contains__ ( self , item ) : [EOL] return item in self . fields . keys ( ) [EOL] [EOL] def __iter__ ( self ) : [EOL] for i in self . fields : [EOL] yield i [EOL] [EOL] def keys ( self ) : [EOL] return self . fields . keys ( ) [EOL] [EOL] def items ( self ) : [EOL] return self . fields . items ( ) [EOL] [EOL] def values ( self ) : [EOL] return self . fields . values ( ) [EOL] [EOL] def get ( self , * args , ** kwargs ) : [EOL] return self . fields . get ( * args , ** kwargs ) [EOL] [EOL] def _get_encryption_key ( self , obj , field_name ) : [EOL] [docstring] [EOL] return hashlib . sha256 ( f'{ obj . pk } [string] { self . get_encryption_key ( obj ) } [string] ' f'{ settings . GDPR_KEY if hasattr ( settings , [string] ) else settings . SECRET_KEY } [string] { field_name }' . encode ( [string] ) ) . hexdigest ( ) [EOL] [EOL] def is_reversible ( self , obj ) : [EOL] if hasattr ( self . Meta , [string] ) : [comment] [EOL] return self . Meta . reversible_anonymization [comment] [EOL] return True [EOL] [EOL] def anonymize_reversion ( self , obj ) : [EOL] if hasattr ( self . Meta , [string] ) : [comment] [EOL] return self . Meta . anonymize_reversion [comment] [EOL] return False [EOL] [EOL] def get_encryption_key ( self , obj ) : [EOL] if not self . is_reversible ( obj ) : [EOL] return [string] . join ( random . choices ( string . digits + string . ascii_letters , k = [number] ) ) [EOL] if self . _base_encryption_key : [EOL] return self . _base_encryption_key [EOL] raise NotImplementedError ( f' [string] { self . __class__ . __name__ } [string] ' [string] [string] ) [EOL] [EOL] def set_base_encryption_key ( self , base_encryption_key ) : [EOL] self . _base_encryption_key = base_encryption_key [EOL] [EOL] def is_field_anonymized ( self , obj , name ) : [EOL] [docstring] [EOL] return AnonymizedData . objects . filter ( field = name , is_active = True , content_type = self . content_type , object_id = str ( obj . pk ) ) . exists ( ) [EOL] [EOL] @ staticmethod def is_generic_relation ( field ) : [EOL] return isinstance ( field , RelationAnonymizer ) [EOL] [EOL] def get_related_model ( self , field_name ) : [EOL] field = get_field_or_none ( self . model , field_name ) [EOL] if field is None : [EOL] if self . is_generic_relation ( getattr ( self , field_name , None ) ) : [EOL] return getattr ( self , field_name ) . get_related_model ( ) [EOL] raise RuntimeError ( f' [string] { field_name } [string] { str ( self . model ) }' ) [EOL] elif hasattr ( field , [string] ) : [EOL] return field . related_model [EOL] else : [EOL] raise NotImplementedError ( f' [string] { str ( field ) } [string] ' ) [EOL] [EOL] def get_value_from_obj ( self , field , obj , name , anonymization = True ) : [EOL] return field . get_value_from_obj ( obj , name , self . _get_encryption_key ( obj , name ) , anonymization = anonymization ) [EOL] [EOL] def get_value_from_version ( self , field , obj , version , name , anonymization = True ) : [EOL] return field . get_value_from_version ( obj , version , name , self . _get_encryption_key ( obj , name ) , anonymization = anonymization ) [EOL] [EOL] def update_field_as_anonymized ( self , obj , name , legal_reason = None , anonymization = True ) : [EOL] if anonymization : [EOL] AnonymizedData . objects . create ( object = obj , field = name , expired_reason = legal_reason ) [EOL] else : [EOL] AnonymizedData . objects . filter ( field = name , is_active = True , content_type = self . content_type , object_id = str ( obj . pk ) ) . delete ( ) [EOL] [EOL] def mark_field_as_anonymized ( self , obj , name , legal_reason = None ) : [EOL] self . update_field_as_anonymized ( obj , name , legal_reason , anonymization = True ) [EOL] [EOL] def unmark_field_as_anonymized ( self , obj , name ) : [EOL] self . update_field_as_anonymized ( obj , name , anonymization = False ) [EOL] [EOL] def get_anonymized_value_from_obj ( self , field , obj , name ) : [EOL] [docstring] [EOL] return self . get_value_from_obj ( field , obj , name , anonymization = True ) [EOL] [EOL] def get_deanonymized_value_from_obj ( self , field , obj , name ) : [EOL] [docstring] [EOL] return self . get_value_from_obj ( field , obj , name , anonymization = False ) [EOL] [EOL] def get_anonymized_value_from_version ( self , field , obj , version , name ) : [EOL] [docstring] [EOL] return self . get_value_from_version ( field , obj , version , name , anonymization = True ) [EOL] [EOL] def get_deanonymized_value_from_version ( self , field , obj , version , name ) : [EOL] [docstring] [EOL] return self . get_value_from_version ( field , obj , version , name , anonymization = False ) [EOL] [EOL] def _perform_update ( self , obj , updated_data , legal_reason = None , anonymization = True ) : [EOL] for field_name , value in updated_data . items ( ) : [EOL] setattr ( obj , field_name , value ) [EOL] obj . save ( ) [EOL] for field_name in updated_data . keys ( ) : [EOL] self . update_field_as_anonymized ( obj , field_name , legal_reason , anonymization = anonymization ) [EOL] [EOL] def get_parent_models ( self , model_or_obj ) : [EOL] [docstring] [EOL] return model_or_obj . _meta . get_parent_list ( ) [EOL] [EOL] def get_all_parent_objects ( self , obj ) : [EOL] [docstring] [EOL] parent_paths = [ [ path_info . join_field . name for path_info in parent_path ] for parent_path in [ obj . _meta . get_path_to_parent ( parent_model ) for parent_model in self . get_parent_models ( obj ) ] ] [EOL] [EOL] parent_objects = [ ] [EOL] for parent_path in parent_paths : [EOL] parent_obj = obj [EOL] for path in parent_path : [EOL] parent_obj = getattr ( parent_obj , path , None ) [EOL] parent_objects . append ( parent_obj ) [EOL] [EOL] return [ i for i in parent_objects if i is not None ] [EOL] [EOL] def get_reversion_versions ( self , obj ) : [EOL] from gdpr . utils import get_reversion_versions [EOL] versions = [ i for i in get_reversion_versions ( obj ) ] [comment] [EOL] parent_obj_versions = [ get_reversion_versions ( i ) for i in self . get_all_parent_objects ( obj ) ] [EOL] versions += [ item for sublist in parent_obj_versions for item in sublist ] [EOL] return versions [EOL] [EOL] def _perform_anonymization ( self , obj , updated_data , legal_reason = None ) : [EOL] self . _perform_update ( obj , updated_data , legal_reason , anonymization = True ) [EOL] [EOL] def _perform_deanonymization ( self , obj , updated_data ) : [EOL] self . _perform_update ( obj , updated_data , anonymization = False ) [EOL] [EOL] def perform_update ( self , obj , updated_data , legal_reason = None , anonymization = True ) : [EOL] with transaction . atomic ( ) : [EOL] self . _perform_update ( obj , updated_data , legal_reason , anonymization = anonymization ) [EOL] [EOL] def perform_anonymization ( self , obj , updated_data , legal_reason = None ) : [EOL] [docstring] [EOL] self . perform_update ( obj , updated_data , legal_reason , anonymization = True ) [EOL] [EOL] def perform_deanonymization ( self , obj , updated_data ) : [EOL] [docstring] [EOL] self . perform_update ( obj , updated_data , anonymization = False ) [EOL] [EOL] @ staticmethod def _perform_version_update ( version , update_data ) : [EOL] from reversion import revisions [EOL] if hasattr ( version , [string] ) : [EOL] local_obj = version . object_version . object [EOL] else : [EOL] local_obj = version . _object_version . object [EOL] for field , value in update_data . items ( ) : [EOL] setattr ( local_obj , field , value ) [EOL] if hasattr ( revisions , [string] ) : [EOL] version_options = revisions . _get_options ( get_reversion_version_model ( version ) ) [EOL] version_format = version_options . format [EOL] version_fields = version_options . fields [EOL] else : [EOL] version_adapter = revisions . get_adapter ( get_reversion_version_model ( version ) ) [EOL] version_format = version_adapter . get_serialization_format ( ) [EOL] version_fields = list ( version_adapter . get_fields_to_serialize ( ) ) [EOL] version . serialized_data = serializers . serialize ( version_format , ( local_obj , ) , fields = version_fields ) [EOL] version . save ( ) [EOL] [EOL] def perform_update_with_version ( self , obj , updated_data , updated_version_data , legal_reason = None , anonymization = True ) : [EOL] with transaction . atomic ( ) : [EOL] [comment] [EOL] for version , version_dict in updated_version_data : [EOL] self . _perform_version_update ( version , version_dict ) [EOL] self . _perform_update ( obj , updated_data , legal_reason , anonymization = anonymization ) [EOL] [EOL] def perform_anonymization_with_version ( self , obj , updated_data , updated_version_data , legal_reason = None ) : [EOL] [docstring] [EOL] self . perform_update_with_version ( obj , updated_data , updated_version_data , legal_reason , anonymization = True ) [EOL] [EOL] def perform_deanonymization_with_version ( self , obj , updated_data , updated_version_data ) : [EOL] [docstring] [EOL] self . perform_update_with_version ( obj , updated_data , updated_version_data , anonymization = False ) [EOL] [EOL] def anonymize_qs ( self , qs ) : [EOL] raise NotImplementedError ( ) [EOL] [EOL] def deanonymize_qs ( self , qs ) : [EOL] raise NotImplementedError ( ) [EOL] [EOL] def update_related_fields ( self , parsed_fields , obj , legal_reason = None , purpose = None , anonymization = True ) : [EOL] for name , related_fields in parsed_fields . related_fields . items ( ) : [EOL] related_attribute = getattr ( obj , name , None ) [EOL] related_metafield = get_field_or_none ( self . model , name ) [EOL] if related_attribute is None and related_metafield is None : [EOL] if self . is_generic_relation ( getattr ( self , name , None ) ) : [EOL] objs = getattr ( self , name ) . get_related_objects ( obj ) [EOL] for related_obj in objs : [EOL] related_fields . anonymizer . update_obj ( related_obj , legal_reason , purpose , related_fields , base_encryption_key = self . _get_encryption_key ( obj , name ) , anonymization = anonymization ) [EOL] elif related_metafield . one_to_many or related_metafield . many_to_many : [EOL] for related_obj in related_attribute . all ( ) : [EOL] related_fields . anonymizer . update_obj ( related_obj , legal_reason , purpose , related_fields , base_encryption_key = self . _get_encryption_key ( obj , name ) , anonymization = anonymization ) [EOL] elif ( related_metafield . many_to_one or related_metafield . one_to_one ) and related_attribute is not None : [EOL] related_fields . anonymizer . update_obj ( related_attribute , legal_reason , purpose , related_fields , base_encryption_key = self . _get_encryption_key ( obj , name ) , anonymization = anonymization ) [EOL] elif related_attribute is not None : [EOL] warnings . warn ( f' [string] { name } [string] ' f'{ obj . __class__ . __name__ } [string] { obj } [string] { obj . pk }' ) [EOL] [EOL] def update_obj ( self , obj , legal_reason = None , purpose = None , fields = [string] , base_encryption_key = None , anonymization = True ) : [EOL] if not anonymization and not self . is_reversible ( obj ) : [EOL] raise self . IrreversibleAnonymizerException ( f'{ self . __class__ . __name__ } [string] { obj } [string] ' ) [EOL] [EOL] if base_encryption_key : [EOL] self . _base_encryption_key = base_encryption_key [EOL] [EOL] parsed_fields = Fields ( fields , obj . __class__ ) if not isinstance ( fields , Fields ) else fields [EOL] [EOL] if anonymization : [EOL] raw_local_fields = [ i for i in parsed_fields . local_fields if not self . is_field_anonymized ( obj , i ) ] [EOL] else : [EOL] raw_local_fields = [ i for i in parsed_fields . local_fields if self . is_field_anonymized ( obj , i ) and self [ i ] . get_is_reversible ( obj ) ] [EOL] [EOL] if raw_local_fields : [EOL] update_dict = { name : self . get_value_from_obj ( self [ name ] , obj , name , anonymization ) for name in raw_local_fields } [EOL] if self . anonymize_reversion ( obj ) : [EOL] from reversion . models import Version [EOL] from gdpr . utils import get_reversion_local_field_dict [EOL] versions = self . get_reversion_versions ( obj ) [EOL] versions_update_dict = [ ( version , { name : self . get_value_from_version ( self [ name ] , obj , version , name , anonymization = anonymization ) for name in raw_local_fields if name in get_reversion_local_field_dict ( version ) } ) for version in versions ] [EOL] self . perform_update_with_version ( obj , update_dict , versions_update_dict , legal_reason , anonymization = anonymization ) [EOL] else : [EOL] self . perform_update ( obj , update_dict , legal_reason , anonymization = anonymization ) [EOL] [EOL] self . update_related_fields ( parsed_fields , obj , legal_reason , purpose , anonymization ) [EOL] [EOL] def anonymize_obj ( self , obj , legal_reason = None , purpose = None , fields = [string] , base_encryption_key = None ) : [EOL] [EOL] self . update_obj ( obj , legal_reason , purpose , fields , base_encryption_key , anonymization = True ) [EOL] [EOL] def deanonymize_obj ( self , obj , fields = [string] , base_encryption_key = None ) : [EOL] [EOL] self . update_obj ( obj , fields = fields , base_encryption_key = base_encryption_key , anonymization = False ) [EOL] [EOL] [EOL] class ModelAnonymizer ( ModelAnonymizerBase ) : [EOL] [docstring] [EOL] [EOL] can_anonymize_qs = False [EOL] chunk_size = [number] [EOL] [EOL] [EOL] class DeleteModelAnonymizer ( ModelAnonymizer ) : [EOL] [docstring] [EOL] [EOL] can_anonymize_qs = True [EOL] [EOL] DELETE_FIELD_NAME = [string] [EOL] [EOL] def update_obj ( self , obj , legal_reason = None , purpose = None , fields = [string] , base_encryption_key = None , anonymization = True ) : [EOL] parsed_fields = Fields ( fields , obj . __class__ ) if not isinstance ( fields , Fields ) else fields [EOL] [EOL] if self . DELETE_FIELD_NAME in parsed_fields . local_fields and anonymization is True : [EOL] self . update_related_fields ( parsed_fields , obj , legal_reason , purpose , anonymization ) [EOL] [EOL] obj . __class__ . objects . filter ( pk = obj . pk ) . delete ( ) [EOL] [EOL] if self . anonymize_reversion ( obj ) : [EOL] from reversion . models import Version [EOL] from gdpr . utils import get_reversion_versions [EOL] get_reversion_versions ( obj ) . delete ( ) [EOL] [EOL] elif self . DELETE_FIELD_NAME in parsed_fields . local_fields : [EOL] parsed_fields . local_fields = [ i for i in parsed_fields . local_fields if i != self . DELETE_FIELD_NAME ] [EOL] super ( ) . update_obj ( obj , legal_reason , purpose , parsed_fields , base_encryption_key , anonymization ) [EOL] else : [EOL] super ( ) . update_obj ( obj , legal_reason , purpose , parsed_fields , base_encryption_key , anonymization ) [EOL] [EOL] def anonymize_qs ( self , qs ) : [EOL] qs . delete ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Dict[builtins.str,gdpr.anonymizers.base.FieldAnonymizertyping.List[django.db.models.Model]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $django.db.models.Model$ 0 $builtins.dict$ 0 $typing.Optional[gdpr.models.LegalReason]$ 0 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 $builtins.dict$ 0 $typing.Optional[gdpr.models.LegalReason]$ 0 0 0 0 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 $builtins.dict$ 0 0 0 0 0 0 0 $django.db.models.Model$ 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 $builtins.dict$ 0 $typing.Optional[gdpr.models.LegalReason]$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 $builtins.dict$ 0 $typing.Optional[gdpr.models.LegalReason]$ 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 $builtins.dict$ 0 $typing.Optional[gdpr.models.LegalReason]$ 0 0 0 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 $builtins.dict$ 0 $typing.Optional[gdpr.models.LegalReason]$ 0 0 0 0 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 $typing.List[typing.Tuple[typing.Any,typing.Dict]]$ 0 $typing.Optional[gdpr.models.LegalReason]$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Any,typing.Dict]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 $typing.Optional[gdpr.models.LegalReason]$ 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 $typing.List[typing.Tuple[typing.Any,typing.Dict]]$ 0 $typing.Optional[gdpr.models.LegalReason]$ 0 0 0 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 $typing.List[typing.Tuple[typing.Any,typing.Dict]]$ 0 $typing.Optional[gdpr.models.LegalReason]$ 0 0 0 0 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 $typing.Dict$ 0 $typing.List[typing.Tuple[typing.Any,typing.Dict]]$ 0 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 $typing.Dict$ 0 $typing.List[typing.Tuple[typing.Any,typing.Dict]]$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 $django.db.models.QuerySet$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $django.db.models.QuerySet$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $gdpr.fields.Fields$ 0 $django.db.models.Model$ 0 $typing.Optional[gdpr.models.LegalReason]$ 0 0 0 $typing.Optional["AbstractPurpose"]$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $gdpr.fields.Fields$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $django.db.models.Model$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[gdpr.models.LegalReason]$ 0 $typing.Optional["AbstractPurpose"]$ 0 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[gdpr.models.LegalReason]$ 0 $typing.Optional["AbstractPurpose"]$ 0 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Optional[gdpr.models.LegalReason]$ 0 $typing.Optional["AbstractPurpose"]$ 0 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 0 0 0 0 0 0 $django.db.models.Model$ 0 0 0 $django.db.models.Model$ 0 0 0 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 $typing.Optional[gdpr.models.LegalReason]$ 0 0 0 $typing.Optional["AbstractPurpose"]$ 0 0 0 $typing.Union[gdpr.fields.Fields,FieldMatrix]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $django.db.models.Model$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 $gdpr.fields.Fields$ 0 0 0 $typing.Union[gdpr.fields.Fields,FieldMatrix]$ 0 $django.db.models.Model$ 0 0 0 0 0 0 0 $typing.Union[gdpr.fields.Fields,FieldMatrix]$ 0 0 0 0 $typing.Union[gdpr.fields.Fields,FieldMatrix]$ 0 0 0 $builtins.bool$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $gdpr.fields.Fields$ 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $gdpr.fields.Fields$ 0 0 0 0 0 0 0 $django.db.models.Model$ 0 0 0 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 0 0 $builtins.bool$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $django.db.models.Model$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[reversion.models.Version]$ 0 0 0 0 0 $django.db.models.Model$ 0 0 $typing.List[typing.Tuple[typing.Any,typing.Dict[typing.Any,typing.Any]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[reversion.models.Version]$ 0 0 0 0 0 0 $django.db.models.Model$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.List[typing.Tuple[typing.Any,typing.Dict[typing.Any,typing.Any]]]$ 0 $typing.Optional[gdpr.models.LegalReason]$ 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Optional[gdpr.models.LegalReason]$ 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 $gdpr.fields.Fields$ 0 $django.db.models.Model$ 0 $typing.Optional[gdpr.models.LegalReason]$ 0 $typing.Optional["AbstractPurpose"]$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 $typing.Optional[gdpr.models.LegalReason]$ 0 0 0 $typing.Optional["AbstractPurpose"]$ 0 0 0 $typing.Union[gdpr.fields.Fields,FieldMatrix]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 $typing.Optional[gdpr.models.LegalReason]$ 0 $typing.Optional["AbstractPurpose"]$ 0 $typing.Union[gdpr.fields.Fields,FieldMatrix]$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 $typing.Union[gdpr.fields.Fields,FieldMatrix]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 $typing.Union[gdpr.fields.Fields,FieldMatrix]$ 0 $typing.Union[gdpr.fields.Fields,FieldMatrix]$ 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 $typing.Optional[gdpr.models.LegalReason]$ 0 0 0 $typing.Optional["AbstractPurpose"]$ 0 0 0 $typing.Union[gdpr.fields.Fields,FieldMatrix]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.bool$ 0 0 0 0 0 $gdpr.fields.Fields$ 0 0 0 $typing.Union[gdpr.fields.Fields,FieldMatrix]$ 0 $django.db.models.Model$ 0 0 0 0 0 0 0 $typing.Union[gdpr.fields.Fields,FieldMatrix]$ 0 0 0 0 $typing.Union[gdpr.fields.Fields,FieldMatrix]$ 0 0 0 0 0 0 0 $gdpr.fields.Fields$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 $gdpr.fields.Fields$ 0 $django.db.models.Model$ 0 $typing.Optional[gdpr.models.LegalReason]$ 0 $typing.Optional["AbstractPurpose"]$ 0 $builtins.bool$ 0 0 0 $django.db.models.Model$ 0 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 0 0 0 0 0 0 0 0 0 0 0 $gdpr.fields.Fields$ 0 0 0 0 $gdpr.fields.Fields$ 0 0 0 0 0 0 0 0 $gdpr.fields.Fields$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 $typing.Optional[gdpr.models.LegalReason]$ 0 $typing.Optional["AbstractPurpose"]$ 0 $gdpr.fields.Fields$ 0 $typing.Optional[builtins.str]$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $django.db.models.Model$ 0 $typing.Optional[gdpr.models.LegalReason]$ 0 $typing.Optional["AbstractPurpose"]$ 0 $gdpr.fields.Fields$ 0 $typing.Optional[builtins.str]$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Any , List , Union , Type , Iterable [EOL] import builtins [EOL] import django [EOL] import typing [EOL] import gdpr [EOL] from typing import Any , Iterable , List , Optional , Union , Type [EOL] [EOL] from django . core . exceptions import ImproperlyConfigured [EOL] from django . db . models import Model [EOL] [EOL] from gdpr . encryption import numerize_key [EOL] from gdpr . utils import get_number_guess_len [EOL] [EOL] [EOL] class RelationAnonymizer : [EOL] [docstring] [EOL] [EOL] model = ... [EOL] [EOL] def get_related_objects ( self , obj ) : [EOL] raise NotImplementedError [EOL] [EOL] def get_related_model ( self ) : [EOL] return self . model [EOL] [EOL] [EOL] class FieldAnonymizer : [EOL] [docstring] [EOL] [EOL] ignore_empty_values = True [EOL] empty_values = [ None ] [EOL] _encryption_key = None [EOL] is_reversible = True [EOL] [EOL] class IrreversibleAnonymizationException ( Exception ) : [EOL] pass [EOL] [EOL] def __init__ ( self , ignore_empty_values = None , empty_values = None ) : [EOL] [docstring] [EOL] self . _ignore_empty_values = ignore_empty_values if ignore_empty_values is not None else self . ignore_empty_values [EOL] self . _empty_values = empty_values if empty_values is not None else self . empty_values [EOL] [EOL] def get_is_reversible ( self , obj = None , raise_exception = False ) : [EOL] [docstring] [EOL] if not self . is_reversible and raise_exception : [EOL] raise self . IrreversibleAnonymizationException [EOL] return self . is_reversible [EOL] [EOL] def get_ignore_empty_values ( self , value ) : [EOL] return self . _ignore_empty_values [EOL] [EOL] def get_is_value_empty ( self , value ) : [EOL] return self . get_ignore_empty_values ( value ) and value in self . _empty_values [EOL] [EOL] def _get_anonymized_value_from_value ( self , value , encryption_key ) : [EOL] if self . get_is_value_empty ( value ) : [EOL] return value [EOL] return self . get_encrypted_value ( value , encryption_key ) [EOL] [EOL] def _get_deanonymized_value_from_value ( self , obj , value , encryption_key ) : [EOL] if self . get_is_reversible ( obj , raise_exception = True ) : [EOL] if self . get_is_value_empty ( value ) : [EOL] return value [EOL] return self . get_decrypted_value ( value , encryption_key ) [EOL] [EOL] def get_value_from_obj ( self , obj , name , encryption_key , anonymization = True ) : [EOL] if anonymization : [EOL] return self . _get_anonymized_value_from_value ( getattr ( obj , name ) , encryption_key ) [EOL] return self . _get_deanonymized_value_from_value ( obj , getattr ( obj , name ) , encryption_key ) [EOL] [EOL] def get_value_from_version ( self , obj , version , name , encryption_key , anonymization = True ) : [EOL] if anonymization : [EOL] return self . _get_anonymized_value_from_value ( version . field_dict [ name ] , encryption_key ) [EOL] return self . _get_deanonymized_value_from_value ( obj , version . field_dict [ name ] , encryption_key ) [EOL] [EOL] def get_anonymized_value_from_obj ( self , obj , name , encryption_key ) : [EOL] return self . get_value_from_obj ( obj , name , encryption_key , anonymization = True ) [EOL] [EOL] def get_deanonymized_value_from_obj ( self , obj , name , encryption_key ) : [EOL] return self . get_value_from_obj ( obj , name , encryption_key , anonymization = False ) [EOL] [EOL] def get_anonymized_value_from_version ( self , obj , version , name , encryption_key ) : [EOL] return self . get_value_from_version ( obj , version , name , encryption_key , anonymization = True ) [EOL] [EOL] def get_deanonymized_value_from_version ( self , obj , version , name , encryption_key ) : [EOL] return self . get_value_from_version ( obj , version , name , encryption_key , anonymization = False ) [EOL] [EOL] def get_anonymized_value ( self , value ) : [EOL] [docstring] [EOL] raise DeprecationWarning ( ) [EOL] [EOL] def get_encrypted_value ( self , value , encryption_key ) : [EOL] [docstring] [EOL] raise NotImplementedError [EOL] [EOL] def get_decrypted_value ( self , value , encryption_key ) : [EOL] [docstring] [EOL] if self . get_is_reversible ( raise_exception = True ) : [EOL] raise NotImplementedError [EOL] [EOL] [EOL] class NumericFieldAnonymizer ( FieldAnonymizer ) : [EOL] max_anonymization_range = None [EOL] [EOL] def __init__ ( self , max_anonymization_range = None , ignore_empty_values = None , empty_values = None ) : [EOL] if max_anonymization_range is not None : [EOL] self . max_anonymization_range = max_anonymization_range [EOL] super ( ) . __init__ ( ignore_empty_values , empty_values ) [EOL] [EOL] def get_numeric_encryption_key ( self , encryption_key , value = None ) : [EOL] [docstring] [EOL] if value is None : [EOL] if self . max_anonymization_range is None : [EOL] return numerize_key ( encryption_key ) [EOL] return numerize_key ( encryption_key ) % self . max_anonymization_range [EOL] [EOL] return numerize_key ( encryption_key ) % [number] ** get_number_guess_len ( value ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[django.db.models.Model]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Optional[typing.List[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $typing.Optional[typing.List[typing.Any]]$ 0 $typing.Optional[typing.List[typing.Any]]$ 0 0 0 0 0 0 $typing.Optional[typing.List[typing.Any]]$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $builtins.bool$ 0 0 0 $typing.Optional[typing.List[typing.Any]]$ 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 $builtins.bool$ 0 $typing.Optional[typing.List[typing.Any]]$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 $typing.Union[builtins.int,builtins.float]$ 0 0 0 0 0 0 0 0 $typing.Union[builtins.int,builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Union[builtins.int,builtins.float]$ 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] from django . core . exceptions import ValidationError [EOL] from django . test import TestCase [EOL] [EOL] from gdpr . anonymizers . local . cs import ( CzechAccountNumber , CzechAccountNumberFieldAnonymizer , CzechIBAN , CzechIBANSmartFieldAnonymizer , CzechIDCardFieldAnonymizer , CzechPersonalIDSmartFieldAnonymizer , CzechPhoneNumberFieldAnonymizer ) [EOL] [EOL] [EOL] class TestCzechAccountNumberField ( TestCase ) : [EOL] @ classmethod def setUpTestData ( cls ) : [EOL] cls . field = CzechAccountNumberFieldAnonymizer ( ) [EOL] cls . encryption_key = [string] [EOL] [EOL] def test_account_number_simple_field ( self ) : [EOL] account_number = [string] [EOL] out = self . field . get_encrypted_value ( account_number , self . encryption_key ) [EOL] [EOL] self . assertNotEqual ( out , account_number ) [EOL] [EOL] out_decrypt = self . field . get_decrypted_value ( out , self . encryption_key ) [EOL] [EOL] self . assertEqual ( out_decrypt , account_number ) [EOL] [EOL] def test_account_number_simple_field_smart_method ( self ) : [EOL] field = CzechAccountNumberFieldAnonymizer ( use_smart_method = True ) [EOL] account_number = [string] [EOL] out = field . get_encrypted_value ( account_number , self . encryption_key ) [EOL] [EOL] self . assertNotEqual ( out , account_number ) [EOL] [EOL] out_decrypt = field . get_decrypted_value ( out , self . encryption_key ) [EOL] [EOL] self . assertEqual ( out_decrypt , account_number ) [EOL] [EOL] def test_account_number_with_pre_num_field ( self ) : [EOL] account_number = [string] [EOL] out = self . field . get_encrypted_value ( account_number , self . encryption_key ) [EOL] [EOL] self . assertNotEqual ( out , account_number ) [EOL] [EOL] out_decrypt = self . field . get_decrypted_value ( out , self . encryption_key ) [EOL] [EOL] self . assertEqual ( out_decrypt , account_number ) [EOL] [EOL] def test_account_number_with_pre_num_field_smart_method ( self ) : [EOL] field = CzechAccountNumberFieldAnonymizer ( use_smart_method = True ) [EOL] account_number = [string] [EOL] out = field . get_encrypted_value ( account_number , self . encryption_key ) [EOL] [EOL] self . assertNotEqual ( out , account_number ) [EOL] [EOL] out_decrypt = field . get_decrypted_value ( out , self . encryption_key ) [EOL] [EOL] self . assertEqual ( out_decrypt , account_number ) [EOL] [EOL] def test_account_format_check ( self ) : [EOL] self . assertTrue ( CzechAccountNumber . parse ( [string] ) . check_account_format ( ) ) [EOL] self . assertTrue ( CzechAccountNumber . parse ( [string] ) . check_account_format ( ) ) [EOL] [EOL] def test_brute_force ( self ) : [EOL] account = CzechAccountNumber . parse ( [string] ) [EOL] key = [number] [EOL] original_account_num = account . num [EOL] [EOL] account . brute_force_next ( key ) [EOL] [EOL] self . assertNotEqual ( original_account_num , account . num ) [EOL] [EOL] account . brute_force_prev ( key ) [EOL] [EOL] self . assertEqual ( original_account_num , account . num ) [EOL] [EOL] [EOL] class TestCzechIBANSmartFieldAnonymizer ( TestCase ) : [EOL] @ classmethod def setUpTestData ( cls ) : [EOL] cls . field = CzechIBANSmartFieldAnonymizer ( ) [EOL] cls . encryption_key = [string] [EOL] cls . text_iban = [string] [EOL] cls . no_space_text_iban = [string] [EOL] cls . invalid_text_iban = [string] [EOL] cls . no_pre_num_iban = [string] [EOL] [EOL] def test_czech_iban_field ( self ) : [EOL] out = self . field . get_encrypted_value ( self . text_iban , self . encryption_key ) [EOL] self . assertNotEqual ( out , self . text_iban ) [EOL] [EOL] out_decrypted = self . field . get_decrypted_value ( out , self . encryption_key ) [EOL] self . assertEqual ( out_decrypted , self . text_iban ) [EOL] [EOL] def test_czech_iban_field_no_space ( self ) : [EOL] out = self . field . get_encrypted_value ( self . no_space_text_iban , self . encryption_key ) [EOL] self . assertNotEqual ( out , self . no_space_text_iban ) [EOL] self . assertNotEqual ( out , self . text_iban ) [EOL] [EOL] out_decrypted = self . field . get_decrypted_value ( out , self . encryption_key ) [EOL] self . assertEqual ( out_decrypted , self . no_space_text_iban ) [EOL] [EOL] def test_czech_iban_field_get_encrypted_value_invalid_format_raises ( self ) : [EOL] self . assertRaises ( ValidationError , self . field . get_encrypted_value , self . invalid_text_iban , self . encryption_key ) [EOL] [EOL] def test_czech_iban_field_get_decrypted_value_invalid_format_raises ( self ) : [EOL] self . assertRaises ( ValidationError , self . field . get_decrypted_value , self . invalid_text_iban , self . encryption_key ) [EOL] [EOL] def test_czech_iban_parse_and_str_with_spaces ( self ) : [EOL] self . assertEqual ( self . text_iban , str ( CzechIBAN . parse ( self . text_iban ) ) ) [EOL] [EOL] def test_czech_iban_parse_and_str_without_spaces ( self ) : [EOL] self . assertEqual ( self . no_space_text_iban , str ( CzechIBAN . parse ( self . no_space_text_iban ) ) ) [EOL] [EOL] def test_czech_iban_check_format ( self ) : [EOL] self . assertTrue ( CzechIBAN . parse ( self . text_iban ) . check_iban_format ( ) ) [EOL] [EOL] def test_czech_iban_check_format_invalid ( self ) : [EOL] self . assertFalse ( CzechIBAN . parse ( self . invalid_text_iban ) . check_iban_format ( ) ) [EOL] [EOL] def test_czech_iban_check_format_no_pre_num ( self ) : [EOL] self . assertTrue ( CzechIBAN . parse ( self . no_pre_num_iban ) . check_iban_format ( ) ) [EOL] [EOL] def test_brute_force ( self ) : [EOL] account = CzechIBAN . parse ( self . text_iban ) [EOL] key = [number] [EOL] [EOL] account . brute_force_next ( key ) [EOL] self . assertNotEqual ( self . text_iban , str ( account ) ) [EOL] [EOL] account . brute_force_prev ( key ) [EOL] self . assertEqual ( self . text_iban , str ( account ) ) [EOL] [EOL] [EOL] class TestCzechPhoneNumberField ( TestCase ) : [EOL] @ classmethod def setUpTestData ( cls ) : [EOL] cls . field = CzechPhoneNumberFieldAnonymizer ( ) [EOL] cls . encryption_key = [string] [EOL] [EOL] def test_basic_phone_number ( self ) : [EOL] phone_number = [string] [EOL] out = self . field . get_encrypted_value ( phone_number , self . encryption_key ) [EOL] [EOL] self . assertNotEqual ( phone_number , out ) [EOL] [EOL] out_decrypt = self . field . get_decrypted_value ( out , self . encryption_key ) [EOL] [EOL] self . assertEqual ( phone_number , out_decrypt ) [EOL] [EOL] def test_plus_area_code_phone_number ( self ) : [EOL] phone_number = [string] [EOL] out = self . field . get_encrypted_value ( phone_number , self . encryption_key ) [EOL] [EOL] self . assertNotEqual ( phone_number , out ) [EOL] [EOL] out_decrypt = self . field . get_decrypted_value ( out , self . encryption_key ) [EOL] [EOL] self . assertEqual ( phone_number , out_decrypt ) [EOL] [EOL] def test_zero_zero_area_code_phone_number ( self ) : [EOL] phone_number = [string] [EOL] out = self . field . get_encrypted_value ( phone_number , self . encryption_key ) [EOL] [EOL] self . assertNotEqual ( phone_number , out ) [EOL] [EOL] out_decrypt = self . field . get_decrypted_value ( out , self . encryption_key ) [EOL] [EOL] self . assertEqual ( phone_number , out_decrypt ) [EOL] [EOL] [EOL] class TestCzechIDCardFieldAnonymizer ( TestCase ) : [EOL] @ classmethod def setUpTestData ( cls ) : [EOL] cls . field = CzechIDCardFieldAnonymizer ( ) [EOL] cls . encryption_key = [string] [EOL] [EOL] def test_czech_id_card_field_anonymizer ( self ) : [EOL] id_card = [string] [EOL] [EOL] out = self . field . get_encrypted_value ( id_card , self . encryption_key ) [EOL] self . assertNotEqual ( id_card , out ) [EOL] [EOL] out_decrypt = self . field . get_decrypted_value ( out , self . encryption_key ) [EOL] self . assertEqual ( id_card , out_decrypt ) [EOL] [EOL] [EOL] class TestCzechPersonalIDSmartFieldAnonymizer ( TestCase ) : [EOL] @ classmethod def setUpTestData ( cls ) : [EOL] cls . field = CzechPersonalIDSmartFieldAnonymizer ( ) [EOL] cls . encryption_key = [string] [EOL] [EOL] def test_czech_personal_id_smart_field_anonymizer ( self ) : [EOL] personal_id = [string] [EOL] [EOL] out = self . field . get_encrypted_value ( personal_id , self . encryption_key ) [EOL] self . assertNotEqual ( personal_id , out ) [EOL] [EOL] out_decrypt = self . field . get_decrypted_value ( out , self . encryption_key ) [EOL] self . assertEqual ( personal_id , out_decrypt ) [EOL] [EOL] def test_czech_personal_id_smart_field_anonymizer_no_slash ( self ) : [EOL] personal_id = [string] [EOL] [EOL] out = self . field . get_encrypted_value ( personal_id , self . encryption_key ) [EOL] self . assertNotEqual ( personal_id , out ) [EOL] [EOL] out_decrypt = self . field . get_decrypted_value ( out , self . encryption_key ) [EOL] self . assertEqual ( personal_id , out_decrypt ) [EOL] [EOL] def test_czech_personal_id_smart_field_anonymizer_1954_change ( self ) : [EOL] personal_id = [string] [EOL] [EOL] out = self . field . get_encrypted_value ( personal_id , self . encryption_key ) [EOL] self . assertNotEqual ( personal_id , out ) [EOL] [EOL] out_decrypt = self . field . get_decrypted_value ( out , self . encryption_key ) [EOL] self . assertEqual ( personal_id , out_decrypt ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0