from typing import Union , List , Tuple , Any , Dict [EOL] import typing [EOL] import datetime [EOL] [docstring] [EOL] import datetime [EOL] import os [EOL] [EOL] import dj_database_url [EOL] from decouple import config [EOL] [EOL] [comment] [EOL] BASE_DIR = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] SECRET_KEY = config ( [string] ) [EOL] [EOL] [comment] [EOL] DEBUG = True [EOL] [EOL] ALLOWED_HOSTS = [ [string] ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] INSTALLED_APPS = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] AUTH_USER_MODEL = [string] [EOL] [EOL] JWT_AUTH = { [string] : True , [string] : True , [string] : datetime . timedelta ( seconds = [number] ) , [string] : [string] , } [EOL] [EOL] REST_FRAMEWORK = { [string] : ( [string] , ) , } [EOL] [EOL] REST_USE_JWT = True [EOL] [EOL] MIDDLEWARE = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] ROOT_URLCONF = [string] [EOL] [EOL] TEMPLATES = [ { [string] : [string] , [string] : [ os . path . join ( BASE_DIR , [string] ) ] , [string] : True , [string] : { [string] : [ [string] , [string] , [string] , [string] , ] , } , } , ] [EOL] [EOL] WSGI_APPLICATION = [string] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] DATABASES = { [string] : dj_database_url . config ( default = config ( [string] ) ) } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] AUTH_PASSWORD_VALIDATORS = [ { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , ] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] LANGUAGE_CODE = [string] [EOL] [EOL] TIME_ZONE = [string] [EOL] [EOL] USE_I18N = True [EOL] [EOL] USE_L10N = True [EOL] [EOL] USE_TZ = True [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] STATIC_URL = [string] [EOL] [EOL] [EOL] PROJECT_ROOT = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] STATIC_ROOT = os . path . join ( PROJECT_ROOT , [string] ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] STATICFILES_DIRS = ( os . path . join ( PROJECT_ROOT , [string] ) , ) [EOL] [EOL] STATICFILES_STORAGE = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,datetime.timedelta,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Tuple[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.List[builtins.str]],typing.List[builtins.str],builtins.bool,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from django . test import TestCase , Client [EOL] from django . urls import reverse [EOL] from rest_framework . test import APIClient [EOL] from rest_framework import status [EOL] from rest_framework . response import Response [EOL] from users . models import * [EOL] from users . serializers import * [EOL] [EOL] [EOL] class RoleTest ( TestCase ) : [EOL] def setUp ( self ) : [EOL] self . client = Client ( ) [EOL] self . role = Roles . objects . create ( name = [string] ) [EOL] [EOL] def test_is_instance ( self ) : [EOL] self . assertIsInstance ( self . role , Roles ) [EOL] [EOL] def test_role_name ( self ) : [EOL] self . assertEqual ( self . role . name , [string] ) [EOL] [EOL] def test_code_status ( self ) : [EOL] response = self . client . post ( [string] , { [string] : [string] } ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] [EOL] def test_details ( self ) : [EOL] response = self . client . get ( [string] ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] [EOL] def test_not_found ( self ) : [EOL] response = self . client . get ( [string] ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] [EOL] def test_list_roles ( self ) : [EOL] response = self . client . get ( [string] ) [EOL] roles = Roles . objects . all ( ) [EOL] serializer = RolesSerializer ( roles , many = True ) [EOL] [EOL] self . assertEqual ( response . data , serializer . data ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] [EOL] [EOL] class UserTest ( TestCase ) : [EOL] def setUp ( self ) : [EOL] self . client = Client ( ) [EOL] self . role = Roles . objects . create ( name = [string] ) [EOL] self . user = User . objects . create ( login = [string] , email = [string] , name = [string] , surname = [string] , roles = self . role , phone = [string] , password = [string] , ) [EOL] [EOL] def test_is_instance ( self ) : [EOL] self . assertIsInstance ( self . user , User ) [EOL] [EOL] def test_details ( self ) : [EOL] response = self . client . get ( [string] ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] [EOL] def test_not_found ( self ) : [EOL] response = self . client . get ( [string] ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] [EOL] def test_list_users ( self ) : [EOL] response = self . client . get ( [string] ) [EOL] users = User . objects . all ( ) [EOL] serializer = UserSerializer ( users , many = True ) [EOL] [EOL] self . assertEqual ( response . data , serializer . data ) [EOL] self . assertEqual ( response . status_code , [number] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from django . contrib import admin [EOL] from . models import * [EOL] [EOL] admin . site . register ( User )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] from django . urls import path [EOL] [EOL] from . views import RegistrationAPIView , LoginAPIView , login , UserLogin [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ path ( [string] , RegistrationAPIView . as_view ( ) ) , path ( [string] , UserLogin . as_view ( ) ) , ]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] import jwt [EOL] from django . conf import settings [EOL] from rest_framework import authentication , exceptions [EOL] from . models import User [EOL] [EOL] [EOL] class JWTAuthentication ( authentication . BaseAuthentication ) : [EOL] authentication_header_prefix = [string] [EOL] [EOL] def authenticate ( self , request ) : [EOL] request . user = None [EOL] auth_header = authentication . get_authorization_header ( request ) . split ( ) [EOL] auth_header_prefix = self . authentication_header_prefix . lower ( ) [EOL] [EOL] if not auth_header : [EOL] return None [EOL] [EOL] if len ( auth_header ) >= [number] : [EOL] return None [EOL] [EOL] prefix = auth_header [ [number] ] . decode ( [string] ) [EOL] token = auth_header [ [number] ] . decode ( [string] ) [EOL] [EOL] if prefix . lower ( ) != auth_header_prefix : [EOL] return None [EOL] [EOL] return self . _authenticate_credentails ( request , token ) [EOL] [EOL] def _authenticate_credentails ( self , request , token ) : [EOL] [EOL] try : [EOL] payload = jwt . decode ( token , settings . SECRET_KEY ) [EOL] except : [EOL] raise exceptions . AuthenticationFailed ( ) [EOL] [EOL] try : [EOL] user = User . objects . get ( pk = payload [ [string] ] ) [EOL] except : [EOL] raise exceptions . AuthenticationFailed ( ) [EOL] [EOL] if not user . is_active : [EOL] raise exceptions . AuthenticationFailed ( ) [EOL] [EOL] return ( user , token ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class UsersConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Any , Type , List [EOL] import typing [EOL] import datetime [EOL] import users [EOL] from __future__ import unicode_literals [EOL] from django . contrib . auth . base_user import BaseUserManager [EOL] from django . db import models , transaction [EOL] from django . utils import timezone [EOL] from django . contrib . auth . models import ( AbstractBaseUser , PermissionsMixin ) [EOL] import jwt [EOL] from datetime import datetime , timedelta [EOL] from django . conf import settings [EOL] [EOL] [EOL] class Roles ( models . Model ) : [EOL] name = models . CharField ( max_length = [number] , verbose_name = [string] ) [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] [EOL] class UserManager ( BaseUserManager ) : [EOL] [EOL] def _create_user ( self , login , password , ** extra_fields ) : [EOL] [EOL] if not login : [EOL] raise ValueError ( [string] ) [EOL] try : [EOL] with transaction . atomic ( ) : [EOL] user = self . model ( login = login , ** extra_fields ) [EOL] user . set_password ( password ) [EOL] user . save ( using = self . _db ) [EOL] return user [EOL] except : [EOL] raise [EOL] [EOL] def create_user ( self , login , password = None , ** extra_fields ) : [EOL] extra_fields . setdefault ( [string] , False ) [EOL] extra_fields . setdefault ( [string] , False ) [EOL] return self . _create_user ( login , password , ** extra_fields ) [EOL] [EOL] def create_superuser ( self , login , password , ** extra_fields ) : [EOL] extra_fields . setdefault ( [string] , True ) [EOL] extra_fields . setdefault ( [string] , True ) [EOL] return self . _create_user ( login , password = password , ** extra_fields ) [EOL] [EOL] [EOL] class User ( AbstractBaseUser , PermissionsMixin ) : [EOL] login = models . CharField ( db_index = True , max_length = [number] , unique = True , verbose_name = [string] ) [EOL] email = models . EmailField ( db_index = True , max_length = [number] , unique = True , verbose_name = [string] ) [EOL] name = models . CharField ( max_length = [number] , blank = True , verbose_name = [string] ) [EOL] surname = models . CharField ( max_length = [number] , blank = True , verbose_name = [string] ) [EOL] roles = models . ForeignKey ( Roles , on_delete = models . CASCADE , verbose_name = [string] , null = True ) [EOL] phone = models . CharField ( max_length = [number] , verbose_name = [string] ) [EOL] is_active = models . BooleanField ( default = True ) [EOL] is_staff = models . BooleanField ( default = False ) [EOL] date_of_add = models . DateTimeField ( default = timezone . now , verbose_name = [string] ) [EOL] updated_at = models . DateTimeField ( auto_now = True ) [EOL] [EOL] objects = UserManager ( ) [EOL] [EOL] USERNAME_FIELD = [string] [EOL] REQUIRED_FIELDS = [ [string] ] [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] super ( User , self ) . save ( * args , ** kwargs ) [EOL] return self [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . login [EOL] [EOL] @ property def token ( self ) : [EOL] return self . _generate_jwt_token ( ) [EOL] [EOL] def get_full_name ( self ) : [EOL] return self . email [EOL] [EOL] def get_short_name ( self ) : [EOL] return self . email [EOL] [EOL] def _generate_jwt_token ( self ) : [EOL] dt = datetime . now ( ) + timedelta ( days = [number] ) [EOL] token = jwt . encode ( { [string] : self . pk , [string] : int ( dt . strftime ( [string] ) ) } , settings . SECRET_KEY , algorithm = [string] ) [EOL] return token . decode ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.models.Roles]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.models.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.models.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 $users.models.UserManager$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0
	0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class FoodConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0