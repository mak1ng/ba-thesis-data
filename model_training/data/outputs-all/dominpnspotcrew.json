	0
[comment] [EOL] [EOL] default_app_config = [string] [EOL]	0 0 0 $builtins.str$ 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class TokensConfig ( AppConfig ) : [EOL] name = [string] [EOL] [EOL] def ready ( self ) : [EOL] import tokens . users . signals [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import spotcrew_backend [EOL] import typing [EOL] from rest_framework_simplejwt . views import TokenObtainPairView [EOL] [EOL] from tokens . jwt . models import SpotCrewTokenObtainPairSerializer [EOL] [EOL] [EOL] class SpotCrewTokenObtainPairView ( TokenObtainPairView ) : [EOL] serializer_class = SpotCrewTokenObtainPairSerializer [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.tokens.jwt.views.SpotCrewTokenObtainPairView]$ 0 0 0
	0
from typing import Type , Any [EOL] import spotcrew_backend [EOL] import typing [EOL] from rest_framework_simplejwt . serializers import TokenObtainPairSerializer [EOL] [EOL] from users . models import User [EOL] [EOL] [EOL] class SpotCrewTokenObtainPairSerializer ( TokenObtainPairSerializer ) : [EOL] username_field = User . USERNAME_FIELD [EOL] [EOL] @ classmethod def get_token ( cls , user ) : [EOL] token = super ( ) . get_token ( user ) [EOL] token [ [string] ] = user . is_superuser [EOL] return token [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.tokens.jwt.models.SpotCrewTokenObtainPairSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0
from typing import Any [EOL] import typing [EOL] from django . conf . urls import url [EOL] from rest_framework . urlpatterns import format_suffix_patterns [EOL] from rest_framework_simplejwt import views as jwt_views [EOL] [EOL] from tokens . jwt . views import SpotCrewTokenObtainPairView [EOL] [EOL] urlpatterns = [ url ( [string] , SpotCrewTokenObtainPairView . as_view ( ) , name = [string] ) , url ( [string] , jwt_views . TokenRefreshView . as_view ( ) , name = [string] ) , ] [EOL] [EOL] urlpatterns = format_suffix_patterns ( urlpatterns ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0
from typing import Any [EOL] import typing [EOL] from django . core . mail import EmailMessage [EOL] from django . dispatch import receiver [EOL] from django . template . loader import render_to_string [EOL] from django_rest_passwordreset . signals import reset_password_token_created [EOL] from django . urls import reverse [EOL] [EOL] [EOL] @ receiver ( reset_password_token_created ) def password_reset_token_created ( sender , reset_password_token , * args , ** kwargs ) : [EOL] mail_subject = [string] [EOL] message = render_to_string ( [string] , { [string] : reset_password_token . user . username , [string] : reset_password_token . key } ) [EOL] email = EmailMessage ( mail_subject , message , to = [ reset_password_token . user . email ] ) [EOL] email . send ( ) [EOL] [EOL] [docstring]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . utils . encoding import force_text [EOL] from django . utils . http import urlsafe_base64_decode [EOL] from rest_framework import status [EOL] from rest_framework . decorators import api_view , parser_classes [EOL] from rest_framework . response import Response [EOL] from rest_framework . parsers import JSONParser [EOL] [EOL] from tokens . users . activation import account_activation_token [EOL] from users . models import User [EOL] [EOL] [EOL] [comment] [EOL] @ api_view ( [ [string] ] ) @ parser_classes ( ( JSONParser , ) ) def activate ( request , uidb64 , token ) : [EOL] try : [EOL] uid = force_text ( urlsafe_base64_decode ( uidb64 ) ) [EOL] user = User . objects . get ( pk = uid ) [EOL] except ( TypeError , ValueError , OverflowError , User . DoesNotExist ) : [EOL] user = None [EOL] if user is not None and account_activation_token . check_token ( user , token ) : [EOL] user . is_active = True [EOL] user . save ( ) [EOL] return Response ( { [string] : [string] } ) [EOL] else : [EOL] return Response ( { [string] : [string] } , status = status . HTTP_400_BAD_REQUEST ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . conf . urls import url , include [EOL] from rest_framework . urlpatterns import format_suffix_patterns [EOL] [EOL] from tokens . users . views import activate [EOL] [EOL] urlpatterns = [ url ( [string] , activate , name = [string] ) , url ( [string] , include ( [string] , namespace = [string] ) ) , ] [EOL] [EOL] urlpatterns = format_suffix_patterns ( urlpatterns ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0
	0
from typing import Type [EOL] import spotcrew_backend [EOL] import typing [EOL] from django . contrib . auth . models import AbstractUser [EOL] from django . contrib . auth . models import UserManager [EOL] from django . db import models [EOL] from django . utils import timezone [EOL] [EOL] [EOL] class User ( AbstractUser ) : [EOL] id = models . AutoField ( primary_key = True ) [EOL] email = models . EmailField ( unique = True , null = False ) [EOL] username = models . CharField ( unique = True , null = False , max_length = [number] ) [EOL] date_joined = models . DateTimeField ( default = timezone . now , null = True ) [EOL] is_active = models . BooleanField ( default = False ) [EOL] avatar_link = models . TextField ( null = True , blank = True ) [EOL] [EOL] objects = UserManager ( ) [EOL] [EOL] USERNAME_FIELD = [string] [EOL] REQUIRED_FIELDS = [ ] [EOL] [EOL] class Meta : [EOL] managed = True [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . conf . urls import url [EOL] from rest_framework . urlpatterns import format_suffix_patterns [EOL] [EOL] from users . api . views import UserListView , UserDetailView [EOL] [EOL] urlpatterns = [ url ( [string] , UserListView . as_view ( ) , name = [string] ) , url ( [string] , UserDetailView . as_view ( ) , name = [string] ) , ] [EOL] [EOL] urlpatterns = format_suffix_patterns ( urlpatterns ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0
	0
from typing import Any [EOL] import typing [EOL] from django . utils . encoding import force_bytes [EOL] from django . utils . http import urlsafe_base64_encode [EOL] from django . template . loader import render_to_string [EOL] from django . core . mail import EmailMessage [EOL] [EOL] from tokens . users . activation import account_activation_token [EOL] [EOL] [EOL] def send_email ( user ) : [EOL] mail_subject = [string] [EOL] message = render_to_string ( [string] , { [string] : user , [string] : urlsafe_base64_encode ( force_bytes ( user . pk ) ) . decode ( ) , [string] : account_activation_token . make_token ( user ) , } ) [EOL] email = EmailMessage ( mail_subject , message , to = [ user . email ] ) [EOL] email . send ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from rest_framework import permissions [EOL] [EOL] [EOL] class IsOwnerAdminOrReadOnly ( permissions . BasePermission ) : [EOL] def has_object_permission ( self , request , view , obj ) : [EOL] if request . method in permissions . SAFE_METHODS : [EOL] return True [EOL] [EOL] return obj == request . user or request . user . is_staff [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type , Any , Dict , Tuple [EOL] import spotcrew_backend [EOL] import typing [EOL] from rest_framework . serializers import ModelSerializer [EOL] [EOL] from users . models import User [EOL] [EOL] [EOL] class UserSerializer ( ModelSerializer ) : [EOL] class Meta : [EOL] model = User [EOL] fields = ( [string] , [string] , [string] , [string] ) [EOL] extra_kwargs = { [string] : { [string] : True } } [EOL] [EOL] def create ( self , validated_data ) : [EOL] user = super ( ) . create ( validated_data ) [EOL] user . set_password ( validated_data [ [string] ] ) [EOL] user . save ( ) [EOL] return user [EOL] [EOL] def update ( self , instance , validated_data ) : [EOL] password = validated_data . pop ( [string] , None ) [EOL] [EOL] for ( key , value ) in validated_data . items ( ) : [EOL] setattr ( instance , key , value ) [EOL] [EOL] if password is not None : [EOL] instance . set_password ( password ) [EOL] [EOL] instance . save ( ) [EOL] [EOL] return instance [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.users.api.serializers.UserSerializer.Meta]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.bool]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any [EOL] import spotcrew_backend [EOL] import typing [EOL] from rest_framework import generics , mixins [EOL] [EOL] from users . emails import send_email [EOL] from users . models import User [EOL] from users . api . permissions import IsOwnerAdminOrReadOnly [EOL] from users . api . serializers import UserSerializer [EOL] [EOL] [EOL] class UserListView ( mixins . CreateModelMixin , generics . ListAPIView ) : [EOL] serializer_class = UserSerializer [EOL] [EOL] def get_queryset ( self ) : [EOL] return User . objects . all ( ) [EOL] [EOL] def perform_create ( self , serializer ) : [EOL] user = serializer . save ( ) [EOL] send_email ( user ) [EOL] [EOL] def post ( self , request , * args , ** kwargs ) : [EOL] return self . create ( request , * args , ** kwargs ) [EOL] [EOL] def get_serializer_context ( self , * args , ** kwargs ) : [EOL] return { [string] : self . request } [EOL] [EOL] [EOL] class UserDetailView ( generics . RetrieveUpdateDestroyAPIView ) : [EOL] lookup_field = [string] [EOL] serializer_class = UserSerializer [EOL] permission_classes = [ IsOwnerAdminOrReadOnly ] [EOL] [EOL] def get_queryset ( self ) : [EOL] return User . objects . all ( ) [EOL] [EOL] def get_serializer_context ( self , * args , ** kwargs ) : [EOL] return { [string] : self . request } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] from django . conf . urls import url [EOL] from rest_framework . urlpatterns import format_suffix_patterns [EOL] [EOL] from venues . api . views import VenueDetailView , VenueListView , VenueEventsListView [EOL] [EOL] urlpatterns = [ url ( [string] , VenueListView . as_view ( ) , name = [string] ) , url ( [string] , VenueDetailView . as_view ( ) , name = [string] ) , url ( [string] , VenueEventsListView . as_view ( ) , name = [string] ) ] [EOL] [EOL] urlpatterns = format_suffix_patterns ( urlpatterns ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0
from typing import Type [EOL] import spotcrew_backend [EOL] import typing [EOL] from django . contrib . gis . db import models as gis_models [EOL] from django . db import models [EOL] [EOL] from images . models import Image [EOL] [EOL] [EOL] class Venue ( models . Model ) : [EOL] venue_id = models . AutoField ( primary_key = True ) [EOL] name = models . TextField ( ) [EOL] description = models . TextField ( blank = True , null = True ) [EOL] location = gis_models . PointField ( ) [EOL] city = models . TextField ( ) [EOL] address = models . TextField ( ) [EOL] images = models . ManyToManyField ( Image ) [EOL] objects = gis_models . Manager ( ) [EOL] [EOL] class Meta : [EOL] managed = True [EOL] db_table = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.venues.models.Venue]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.venues.models.Venue]$ 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.venues.models.Venue]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.venues.models.Venue]$ 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.venues.models.Venue]$ 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.venues.models.Venue]$ 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.venues.models.Venue]$ 0 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.venues.models.Venue]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class VenuesConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Type , Any , List [EOL] import spotcrew_backend [EOL] import typing [EOL] from rest_framework_gis . serializers import GeoModelSerializer [EOL] [EOL] from images . api . serializers import ImageSerializer [EOL] from images . models import Image [EOL] from venues . models import Venue [EOL] [EOL] [EOL] class VenueSerializer ( GeoModelSerializer ) : [EOL] images = ImageSerializer ( many = True , required = False ) [EOL] [EOL] class Meta : [EOL] model = Venue [EOL] geo_field = [string] [EOL] fields = [string] [EOL] [EOL] def create ( self , validated_data ) : [EOL] images_links = validated_data . pop ( [string] ) [EOL] venue = Venue . objects . create ( ** validated_data ) [EOL] [EOL] for image_link in images_links : [EOL] image , created = Image . objects . get_or_create ( link = image_link [ [string] ] ) [EOL] venue . images . add ( image ) [EOL] return venue [EOL] [EOL] def update ( self , instance , validated_data ) : [EOL] images_links = validated_data . pop ( [string] ) [EOL] [EOL] instance . name = validated_data . get ( [string] , instance . name ) [EOL] instance . description = validated_data . get ( [string] , instance . description ) [EOL] instance . location = validated_data . get ( [string] , instance . location ) [EOL] instance . city = validated_data . get ( [string] , instance . city ) [EOL] instance . address = validated_data . get ( [string] , instance . address ) [EOL] [EOL] images_list = [ ] [EOL] [EOL] for image in images_links : [EOL] link , created = Image . objects . get_or_create ( link = image [ [string] ] ) [EOL] images_list . append ( link ) [EOL] [EOL] instance . images . set ( images_list ) [EOL] instance . save ( ) [EOL] return instance [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.venues.api.serializers.VenueSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.venues.api.serializers.VenueSerializer.Meta]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type , List [EOL] import spotcrew_backend [EOL] import typing [EOL] from django_filters import rest_framework as filters [EOL] [EOL] from venues . models import Venue [EOL] [EOL] [EOL] class VenueFilter ( filters . FilterSet ) : [EOL] name = filters . CharFilter ( lookup_expr = [string] ) [EOL] [EOL] class Meta : [EOL] model = Venue [EOL] fields = [ [string] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.venues.api.filters.VenueFilter]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.venues.api.filters.VenueFilter.Meta]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0
from typing import Type , Any [EOL] import spotcrew_backend [EOL] import typing [EOL] from django . contrib . gis . geos import Point [EOL] from django_filters import rest_framework as filters [EOL] from rest_framework import generics , mixins , permissions [EOL] [EOL] from events . api . serializers import EventSerializer [EOL] from events . api . filters import EventFilter [EOL] from events . models import Event [EOL] from venues . models import Venue [EOL] from venues . api . serializers import VenueSerializer [EOL] from venues . api . filters import VenueFilter [EOL] [EOL] [EOL] class VenueListView ( mixins . CreateModelMixin , generics . ListAPIView ) : [EOL] lookup_field = [string] [EOL] serializer_class = VenueSerializer [EOL] filter_backends = ( filters . DjangoFilterBackend , ) [EOL] filterset_class = VenueFilter [EOL] [EOL] def get_queryset ( self ) : [EOL] result = Venue . objects . all ( ) [EOL] if self . request . GET . get ( [string] ) and self . request . GET . get ( [string] ) and self . request . GET . get ( [string] ) : [EOL] location = Point ( float ( self . request . GET [ [string] ] ) , float ( self . request . GET [ [string] ] ) ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] radius = float ( self . request . GET [ [string] ] ) / [number] [EOL] result = result . filter ( location__distance_lte = ( location , radius ) ) [EOL] [EOL] return result [EOL] [EOL] def perform_create ( self , serializer ) : [EOL] serializer . save ( ) [EOL] [EOL] def post ( self , request , * args , ** kwargs ) : [EOL] return self . create ( request , * args , ** kwargs ) [EOL] [EOL] def get_serializer_context ( self , * args , ** kwargs ) : [EOL] return { [string] : self . request } [EOL] [EOL] [EOL] class VenueDetailView ( generics . RetrieveUpdateDestroyAPIView ) : [EOL] lookup_field = [string] [EOL] serializer_class = VenueSerializer [EOL] [comment] [EOL] [EOL] def get_queryset ( self ) : [EOL] return Venue . objects . all ( ) [EOL] [EOL] def get_serializer_context ( self , * args , ** kwargs ) : [EOL] return { [string] : self . request } [EOL] [EOL] [EOL] class VenueEventsListView ( generics . ListAPIView ) : [EOL] lookup_field = [string] [EOL] serializer_class = EventSerializer [EOL] filter_backends = ( filters . DjangoFilterBackend , ) [EOL] filterset_class = EventFilter [EOL] [EOL] def get_queryset ( self ) : [EOL] return Event . objects . filter ( venue_id__venue_id = self . kwargs . get ( self . lookup_field ) ) [EOL] [EOL] def get_serializer_context ( self , * args , ** kwargs ) : [EOL] return { [string] : self . request } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.venues.api.views.VenueEventsListView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] import django . contrib . gis . db . models . fields [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] initial = True [EOL] [EOL] dependencies = [ ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( primary_key = True , serialize = False ) ) , ( [string] , models . TextField ( ) ) , ( [string] , models . TextField ( blank = True , null = True ) ) , ( [string] , django . contrib . gis . db . models . fields . PointField ( srid = [number] ) ) , ( [string] , models . TextField ( ) ) , ( [string] , models . TextField ( ) ) , ] , options = { [string] : [string] , [string] : True , } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class EventsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Type , List [EOL] import spotcrew_backend [EOL] import typing [EOL] from django . db import models [EOL] [EOL] from sports . models import Sport [EOL] from users . models import User [EOL] from venues . models import Venue [EOL] [EOL] [EOL] class Event ( models . Model ) : [EOL] event_id = models . AutoField ( primary_key = True ) [EOL] venue_id = models . ForeignKey ( Venue , models . DO_NOTHING , db_column = [string] ) [EOL] host_id = models . ForeignKey ( User , models . DO_NOTHING , db_column = [string] ) [EOL] sport_id = models . ForeignKey ( Sport , models . DO_NOTHING , db_column = [string] ) [EOL] [EOL] name = models . TextField ( ) [EOL] description = models . TextField ( blank = True , null = True ) [EOL] [comment] [EOL] event_start = models . DateTimeField ( ) [EOL] event_stop = models . DateTimeField ( ) [EOL] [EOL] class Meta : [EOL] managed = True [EOL] db_table = [string] [EOL] [EOL] @ property def owner ( self ) : [EOL] return self . host_id [EOL] [EOL] [EOL] class EventAttendance ( models . Model ) : [EOL] id = models . AutoField ( primary_key = True ) [EOL] event_id = models . ForeignKey ( Event , models . DO_NOTHING , db_column = [string] ) [EOL] user_id = models . ForeignKey ( User , models . DO_NOTHING , db_column = [string] ) [EOL] [EOL] class Meta : [EOL] unique_together = [ [ [string] , [string] ] ] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.events.models.Event]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.events.models.Event]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.events.models.Event]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.events.models.Event]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.events.models.Event]$ 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.events.models.Event]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.events.models.Event]$ 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.events.models.Event]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.events.models.EventAttendance]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.events.models.EventAttendance]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.events.models.EventAttendance]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . conf . urls import url [EOL] from rest_framework . urlpatterns import format_suffix_patterns [EOL] [EOL] from events . api . views import EventListView , EventDetailView , EventAttendanceView [EOL] [EOL] urlpatterns = [ url ( [string] , EventListView . as_view ( ) , name = [string] ) , url ( [string] , EventDetailView . as_view ( ) , name = [string] ) , url ( [string] , EventAttendanceView . as_view ( ) , name = [string] ) , ] [EOL] [EOL] urlpatterns = format_suffix_patterns ( urlpatterns ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0
from typing import Type , Any , Tuple [EOL] import spotcrew_backend [EOL] import typing [EOL] from rest_framework . serializers import ModelSerializer , SerializerMethodField [EOL] [EOL] from events . models import Event , EventAttendance [EOL] from users . models import User [EOL] from users . api . serializers import UserSerializer [EOL] [EOL] [EOL] class EventSerializer ( ModelSerializer ) : [EOL] users = SerializerMethodField ( ) [EOL] [EOL] class Meta : [EOL] model = Event [EOL] fields = [string] [EOL] read_only_fields = ( [string] , ) [EOL] [EOL] def get_users ( self , event ) : [EOL] users = User . objects . filter ( eventattendance__event_id = event ) [EOL] return UserSerializer ( users , many = True , context = self . context ) . data [EOL] [EOL] [EOL] class EventAttendanceSerializer ( ModelSerializer ) : [EOL] class Meta : [EOL] model = EventAttendance [EOL] fields = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.events.api.serializers.EventSerializer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.events.api.serializers.EventAttendanceSerializer.Meta]$ 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.events.api.serializers.EventAttendanceSerializer.Meta]$ 0 0 0 $builtins.str$ 0 0 0
	0
from rest_framework import permissions [EOL] [EOL] [EOL] class IsOwnerAdminOrReadOnly ( permissions . BasePermission ) : [EOL] def has_object_permission ( self , request , view , obj ) : [EOL] if request . method in permissions . SAFE_METHODS : [EOL] return True [EOL] [EOL] return obj . owner == request . user or request . user . is_staff [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , List [EOL] import spotcrew_backend [EOL] import typing [EOL] from django_filters import rest_framework as filters [EOL] [EOL] from events . models import Event [EOL] [EOL] [EOL] class EventFilter ( filters . FilterSet ) : [EOL] name = filters . CharFilter ( lookup_expr = [string] ) [EOL] sport = filters . CharFilter ( field_name = [string] ) [EOL] start_date__gte = filters . DateFilter ( field_name = [string] , lookup_expr = [string] ) [EOL] [EOL] class Meta : [EOL] model = Event [EOL] fields = [ [string] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.events.api.filters.EventFilter]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.events.api.filters.EventFilter]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.events.api.filters.EventFilter]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.events.api.filters.EventFilter.Meta]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0
from typing import Type , Any [EOL] import spotcrew_backend [EOL] import typing [EOL] from django . core . exceptions import ObjectDoesNotExist [EOL] from django_filters import rest_framework as filters [EOL] from rest_framework import generics , mixins , permissions , status [EOL] from rest_framework . response import Response [EOL] [EOL] from events . models import Event , EventAttendance [EOL] from events . api . permissions import IsOwnerAdminOrReadOnly [EOL] from events . api . serializers import EventSerializer , EventAttendanceSerializer [EOL] from events . api . filters import EventFilter [EOL] [EOL] [EOL] class EventListView ( mixins . CreateModelMixin , generics . ListAPIView ) : [EOL] lookup_field = [string] [EOL] serializer_class = EventSerializer [EOL] permission_classes = [ IsOwnerAdminOrReadOnly ] [EOL] filter_backends = ( filters . DjangoFilterBackend , ) [EOL] filterset_class = EventFilter [EOL] [EOL] def get_queryset ( self ) : [EOL] return Event . objects . all ( ) [EOL] [EOL] def perform_create ( self , serializer ) : [EOL] serializer . save ( ) [EOL] [EOL] def post ( self , request , * args , ** kwargs ) : [EOL] return self . create ( request , * args , ** kwargs ) [EOL] [EOL] def get_serializer_context ( self , * args , ** kwargs ) : [EOL] return { [string] : self . request } [EOL] [EOL] [EOL] class EventDetailView ( generics . RetrieveUpdateDestroyAPIView ) : [EOL] lookup_field = [string] [EOL] serializer_class = EventSerializer [EOL] permission_classes = [ IsOwnerAdminOrReadOnly ] [EOL] [EOL] def destroy ( self , request , * args , ** kwargs ) : [EOL] instance = self . get_object ( ) [EOL] EventAttendance . objects . filter ( event_id = instance ) . delete ( ) [EOL] self . perform_destroy ( instance ) [EOL] return Response ( status = status . HTTP_204_NO_CONTENT ) [EOL] [EOL] def get_queryset ( self ) : [EOL] return Event . objects . all ( ) [EOL] [EOL] def get_serializer_context ( self , * args , ** kwargs ) : [EOL] return { [string] : self . request } [EOL] [EOL] [EOL] class EventAttendanceView ( mixins . CreateModelMixin , generics . DestroyAPIView ) : [EOL] lookup_field = [string] [EOL] serializer_class = EventAttendanceSerializer [EOL] permission_classes = [ permissions . IsAuthenticated ] [EOL] [EOL] def destroy ( self , request , * args , ** kwargs ) : [EOL] try : [EOL] instance = EventAttendance . objects . get ( event_id = self . kwargs . get ( self . lookup_field ) , user_id = self . request . user , ) [EOL] except ObjectDoesNotExist : [EOL] return Response ( { [string] : [string] } , status = status . HTTP_400_BAD_REQUEST ) [EOL] self . perform_destroy ( instance ) [EOL] return Response ( status = status . HTTP_204_NO_CONTENT ) [EOL] [EOL] def create ( self , request , * args , ** kwargs ) : [EOL] event = Event . objects . get ( event_id = self . kwargs . get ( self . lookup_field ) ) [EOL] serializer = self . get_serializer ( data = { [string] : self . request . user . id , [string] : event . event_id } ) [EOL] serializer . is_valid ( raise_exception = True ) [EOL] self . perform_create ( serializer ) [EOL] headers = self . get_success_headers ( serializer . data ) [EOL] return Response ( serializer . data , status = status . HTTP_201_CREATED , headers = headers ) [EOL] [EOL] def perform_create ( self , serializer ) : [EOL] serializer . save ( ) [EOL] [EOL] def post ( self , request , * args , ** kwargs ) : [EOL] return self . create ( request , * args , ** kwargs ) [EOL] [EOL] def get_serializer_context ( self , * args , ** kwargs ) : [EOL] return { [string] : self . request } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from django . conf import settings [EOL] from django . db import migrations , models [EOL] import django . db . models . deletion [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] initial = True [EOL] [EOL] dependencies = [ migrations . swappable_dependency ( settings . AUTH_USER_MODEL ) , ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( primary_key = True , serialize = False ) ) , ( [string] , models . TextField ( ) ) , ( [string] , models . TextField ( blank = True , null = True ) ) , ( [string] , models . DateTimeField ( ) ) , ( [string] , models . DateTimeField ( ) ) , ( [string] , models . OneToOneField ( db_column = [string] , on_delete = django . db . models . deletion . DO_NOTHING , to = settings . AUTH_USER_MODEL ) ) , ( [string] , models . OneToOneField ( db_column = [string] , on_delete = django . db . models . deletion . DO_NOTHING , to = [string] ) ) , ( [string] , models . OneToOneField ( db_column = [string] , on_delete = django . db . models . deletion . DO_NOTHING , to = [string] ) ) , ] , options = { [string] : [string] , [string] : True , } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . conf import settings [EOL] from django . db import migrations , models [EOL] import django . db . models . deletion [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterField ( model_name = [string] , name = [string] , field = models . ForeignKey ( db_column = [string] , on_delete = django . db . models . deletion . DO_NOTHING , to = settings . AUTH_USER_MODEL ) , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = models . ForeignKey ( db_column = [string] , on_delete = django . db . models . deletion . DO_NOTHING , to = [string] ) , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = models . ForeignKey ( db_column = [string] , on_delete = django . db . models . deletion . DO_NOTHING , to = [string] ) , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = models . OneToOneField ( db_column = [string] , on_delete = django . db . models . deletion . DO_NOTHING , to = [string] ) , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = models . OneToOneField ( db_column = [string] , on_delete = django . db . models . deletion . DO_NOTHING , to = settings . AUTH_USER_MODEL ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from django . conf import settings [EOL] from django . db import migrations , models [EOL] import django . db . models . deletion [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ migrations . swappable_dependency ( settings . AUTH_USER_MODEL ) , ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( primary_key = True , serialize = False ) ) , ( [string] , models . OneToOneField ( db_column = [string] , on_delete = django . db . models . deletion . DO_NOTHING , to = [string] ) ) , ( [string] , models . OneToOneField ( db_column = [string] , on_delete = django . db . models . deletion . DO_NOTHING , to = settings . AUTH_USER_MODEL ) ) , ] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type [EOL] import spotcrew_backend [EOL] import typing [EOL] from django . db import models [EOL] [EOL] [EOL] class Sport ( models . Model ) : [EOL] sport_id = models . AutoField ( primary_key = True ) [EOL] name = models . TextField ( ) [EOL] [EOL] class Meta : [EOL] managed = True [EOL] db_table = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.sports.models.Sport]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.sports.models.Sport]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0
from typing import Any [EOL] import typing [EOL] from django . conf . urls import url [EOL] from rest_framework . urlpatterns import format_suffix_patterns [EOL] [EOL] from sports . api . views import SportListView , SportDetailView [EOL] [EOL] urlpatterns = [ url ( [string] , SportListView . as_view ( ) , name = [string] ) , url ( [string] , SportDetailView . as_view ( ) , name = [string] ) , ] [EOL] [EOL] urlpatterns = format_suffix_patterns ( urlpatterns ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class SportsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Type [EOL] import spotcrew_backend [EOL] import typing [EOL] from rest_framework . serializers import ModelSerializer [EOL] [EOL] from sports . models import Sport [EOL] [EOL] [EOL] class SportSerializer ( ModelSerializer ) : [EOL] class Meta : [EOL] model = Sport [EOL] fields = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.sports.api.serializers.SportSerializer.Meta]$ 0 0 0 $builtins.str$ 0 0 0
from typing import Type , Any [EOL] import spotcrew_backend [EOL] import typing [EOL] from rest_framework import generics , mixins [EOL] from rest_framework import permissions , status [EOL] from rest_framework . response import Response [EOL] [EOL] from events . models import Event , EventAttendance [EOL] from sports . models import Sport [EOL] from sports . api . serializers import SportSerializer [EOL] [EOL] [EOL] class SportListView ( mixins . CreateModelMixin , generics . ListAPIView ) : [EOL] lookup_field = [string] [EOL] serializer_class = SportSerializer [EOL] permission_classes = [ permissions . IsAuthenticatedOrReadOnly ] [EOL] [EOL] def get_queryset ( self ) : [EOL] return Sport . objects . all ( ) [EOL] [EOL] def perform_create ( self , serializer ) : [EOL] serializer . save ( ) [EOL] [EOL] def post ( self , request , * args , ** kwargs ) : [EOL] return self . create ( request , * args , ** kwargs ) [EOL] [EOL] def get_serializer_context ( self , * args , ** kwargs ) : [EOL] return { [string] : self . request } [EOL] [EOL] [EOL] class SportDetailView ( generics . RetrieveUpdateDestroyAPIView ) : [EOL] lookup_field = [string] [EOL] serializer_class = SportSerializer [EOL] permission_classes = [ permissions . IsAuthenticatedOrReadOnly ] [EOL] [EOL] def get_queryset ( self ) : [EOL] return Sport . objects . all ( ) [EOL] [EOL] def destroy ( self , request , * args , ** kwargs ) : [EOL] instance = self . get_object ( ) [EOL] events = Event . objects . filter ( sport_id = instance ) [EOL] for event in events : [EOL] EventAttendance . objects . filter ( event_id = event ) . delete ( ) [EOL] events . delete ( ) [EOL] self . perform_destroy ( instance ) [EOL] return Response ( status = status . HTTP_204_NO_CONTENT ) [EOL] [EOL] def get_serializer_context ( self , * args , ** kwargs ) : [EOL] return { [string] : self . request } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] initial = True [EOL] [EOL] dependencies = [ ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( primary_key = True , serialize = False ) ) , ( [string] , models . TextField ( ) ) , ] , options = { [string] : [string] , [string] : True , } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , List [EOL] import typing [EOL] from django . urls import include [EOL] from django . conf . urls import url [EOL] [EOL] from rest_framework . documentation import include_docs_urls [EOL] [EOL] urlpatterns = [ url ( [string] , include_docs_urls ( title = [string] ) ) , url ( [string] , include ( [string] ) ) , url ( [string] , include ( [string] ) ) , url ( [string] , include ( [string] ) ) , url ( [string] , include ( [string] ) ) , url ( [string] , include ( [string] ) ) , url ( [string] , include ( [string] ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0
	0
from typing import Type [EOL] import spotcrew_backend [EOL] import typing [EOL] from django . db import models [EOL] [EOL] [EOL] class Image ( models . Model ) : [EOL] image_id = models . AutoField ( primary_key = True ) [EOL] link = models . TextField ( ) [EOL] [EOL] class Meta : [EOL] managed = True [EOL] db_table = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.images.models.Image]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.images.models.Image]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Type , Tuple [EOL] import spotcrew_backend [EOL] import typing [EOL] from rest_framework . serializers import ModelSerializer [EOL] [EOL] from images . models import Image [EOL] [EOL] [EOL] class ImageSerializer ( ModelSerializer ) : [EOL] class Meta : [EOL] model = Image [EOL] fields = ( [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[spotcrew_backend.images.api.serializers.ImageSerializer.Meta]$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0
	0