from typing import List [EOL] import typing [EOL] from . issues import IssueCategory [EOL] from . report import Report [EOL] from . profile import Profile , available_profiles , get_profile [EOL] from . import profiles [EOL] [EOL] __all__ = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import builtins [EOL] import uiucprescon [EOL] import abc [EOL] [EOL] import py3exiv2bind [EOL] import py3exiv2bind . core [EOL] from uiucprescon . imagevalidate import openjp2wrap [comment] [EOL] [EOL] [EOL] class InvalidStrategy ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class AbsColorSpaceExtractor ( metaclass = abc . ABCMeta ) : [EOL] [docstring] [EOL] [EOL] def check ( self , image ) : [EOL] pass [EOL] [EOL] [EOL] class ExtractColorSpace : [EOL] def __init__ ( self , strategy ) : [EOL] self . strategy = strategy [EOL] [EOL] def check ( self , image ) : [EOL] return self . strategy . check ( image ) [EOL] [EOL] [EOL] class ColorSpaceIccDeviceModelCheck ( AbsColorSpaceExtractor ) : [EOL] [docstring] [EOL] [EOL] def check ( self , image ) : [EOL] exiv_image = py3exiv2bind . Image ( image ) [EOL] try : [EOL] icc = exiv_image . icc ( ) [EOL] except py3exiv2bind . core . NoICCError : [EOL] raise InvalidStrategy ( [string] ) [EOL] [EOL] device_model = icc . get ( [string] ) . value . decode ( [string] ) . rstrip ( [string] ) [EOL] if not device_model : [EOL] raise InvalidStrategy ( [string] ) [EOL] return str ( device_model ) [EOL] [EOL] [EOL] class ColorSpaceIccPrefCcmCheck ( AbsColorSpaceExtractor ) : [EOL] [docstring] [EOL] [EOL] def check ( self , image ) : [EOL] exiv2_image = py3exiv2bind . Image ( image ) [EOL] try : [EOL] icc = exiv2_image . icc ( ) [EOL] except py3exiv2bind . core . NoICCError as e : [EOL] raise InvalidStrategy ( [string] [string] . format ( e ) ) [EOL] [EOL] pref_ccm = icc . get ( [string] ) . value . decode ( [string] ) . rstrip ( [string] ) [EOL] if not pref_ccm : [EOL] raise InvalidStrategy ( [string] ) [EOL] return str ( pref_ccm ) [EOL] [EOL] [EOL] class ColorSpaceOJPCheck ( AbsColorSpaceExtractor ) : [EOL] def check ( self , image ) : [EOL] return openjp2wrap . get_colorspace ( image ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $uiucprescon.imagevalidate.common.AbsColorSpaceExtractor$ 0 0 0 0 0 $uiucprescon.imagevalidate.common.AbsColorSpaceExtractor$ 0 $uiucprescon.imagevalidate.common.AbsColorSpaceExtractor$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
import builtins [EOL] import uiucprescon [EOL] import abc [EOL] [EOL] from uiucprescon . imagevalidate import report [EOL] [EOL] [EOL] class AbsMessage ( metaclass = abc . ABCMeta ) : [EOL] [EOL] @ abc . abstractmethod def generate_message ( self , field , data ) : [EOL] pass [EOL] [EOL] [EOL] class InvalidData ( AbsMessage ) : [EOL] [EOL] def generate_message ( self , field , data ) : [EOL] return f' [string] { field } [string] ' f' [string] { data . expected } [string] ' f' [string] { data . actual } [string] ' [EOL] [EOL] [EOL] class EmptyData ( AbsMessage ) : [EOL] [EOL] def generate_message ( self , field , data ) : [EOL] return f' [string] { field } [string] ' [EOL] [EOL] [EOL] class MissingField ( AbsMessage ) : [EOL] [EOL] def generate_message ( self , field , data ) : [EOL] return f' [string] { field } [string] ' [EOL] [EOL] [EOL] class MessageGenerator : [EOL] [EOL] def __init__ ( self , strategy ) : [EOL] self . _strategy = strategy [EOL] [EOL] def generate_message ( self , field , data ) : [EOL] return self . _strategy . generate_message ( field , data ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $uiucprescon.imagevalidate.report.Result$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $uiucprescon.imagevalidate.report.Result$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $uiucprescon.imagevalidate.report.Result$ 0 0 0 0 0 0 0 0 $uiucprescon.imagevalidate.report.Result$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $uiucprescon.imagevalidate.report.Result$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $uiucprescon.imagevalidate.report.Result$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $AbsMessage$ 0 0 0 0 0 $uiucprescon.imagevalidate.messages.AbsMessage$ 0 $AbsMessage$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $uiucprescon.imagevalidate.report.Result$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $uiucprescon.imagevalidate.report.Result$ 0 0
from enum import Enum [EOL] [EOL] [EOL] class IssueCategory ( Enum ) : [EOL] VALID = [number] [EOL] EMPTY_DATA = [number] [EOL] MISSING_FIELD = [number] [EOL] INVALID_DATA = [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Optional , List [EOL] import typing [EOL] import uiucprescon [EOL] import builtins [EOL] from uiucprescon import imagevalidate [EOL] from typing import NamedTuple , Optional , Dict , List , Union [EOL] from enum import Enum [EOL] [EOL] [EOL] class ResultCategory ( Enum ) : [EOL] ANY = [number] [EOL] NONE = [number] [EOL] [EOL] [EOL] class Result ( NamedTuple ) : [EOL] expected = ... [EOL] actual = ... [EOL] [EOL] [EOL] class Report : [EOL] def __init__ ( self ) : [EOL] self . _properties = dict ( ) [EOL] self . filename = None [EOL] [EOL] self . _data = dict ( ) [EOL] [EOL] @ property def valid ( self ) : [EOL] return len ( self . _data . items ( ) ) == [number] [EOL] [EOL] def issues ( self , issue_type = None ) : [EOL] [EOL] if issue_type is not None : [EOL] return self . _data . get ( issue_type , list ( ) ) [EOL] else : [EOL] [comment] [EOL] return [ issue for issues in self . _data . values ( ) for issue in issues ] [EOL] [EOL] def __str__ ( self ) : [EOL] if not self . valid : [EOL] issue_str = [string] . join ( self . issues ( ) ) [EOL] else : [EOL] issue_str = [string] [EOL] [EOL] return [string] . format ( self . filename , issue_str ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[builtins.str,ResultCategory]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,Result]$ 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Dict[uiucprescon.imagevalidate.IssueCategory,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.Optional[uiucprescon.imagevalidate.IssueCategory]$ 0 0 0 0 0 0 0 $typing.Optional[uiucprescon.imagevalidate.IssueCategory]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[uiucprescon.imagevalidate.IssueCategory]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
from typing import Dict , Type , Any , List , Set , Tuple [EOL] import typing [EOL] import builtins [EOL] import uiucprescon [EOL] import profiles [EOL] import os [EOL] import inspect [EOL] from typing import Type , Set , Dict [EOL] from uiucprescon import imagevalidate [EOL] from . import profiles as profile_pkg [EOL] [EOL] known_profiles = { } [EOL] [EOL] [EOL] class Profile : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , validation_profile ) : [EOL] self . _profile = validation_profile [EOL] [EOL] def validate ( self , file ) : [EOL] if not os . path . exists ( file ) : [EOL] raise FileNotFoundError ( [string] . format ( file ) ) [EOL] return self . _profile . validate ( file ) [EOL] [EOL] [EOL] def available_profiles ( ) : [EOL] [docstring] [EOL] return set ( known_profiles . keys ( ) ) [EOL] [EOL] [EOL] def get_profile ( name ) : [EOL] [docstring] [EOL] return known_profiles [ name ] ( ) [EOL] [EOL] [EOL] profiles = inspect . getmembers ( profile_pkg , lambda m : inspect . isclass ( m ) and not inspect . isabstract ( m ) ) [EOL] [EOL] for profile in profiles : [EOL] known_profiles [ profile [ [number] ] . profile_name ( ) ] = profile [ [number] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,typing.Any]]$ 0 0 0 0 $typing.Dict[builtins.str,typing.Type[profiles.AbsProfile]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $profiles.AbsProfile$ 0 0 0 0 0 $uiucprescon.imagevalidate.profiles.absProfile.AbsProfile$ 0 $profiles.AbsProfile$ 0 0 0 $uiucprescon.imagevalidate.Report$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Type[profiles.AbsProfile]]$ 0 0 0 0 0 0 0 0 0 $profiles.AbsProfile$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Type[profiles.AbsProfile]]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,typing.Any]]$ 0 0 $typing.Dict[builtins.str,typing.Type[profiles.AbsProfile]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Type , Union , Any , List , Set , Optional [EOL] import typing [EOL] import builtins [EOL] import uiucprescon [EOL] import collections [EOL] import sys [EOL] [EOL] import py3exiv2bind [EOL] import typing [EOL] from uiucprescon . imagevalidate import IssueCategory , common [EOL] from uiucprescon . imagevalidate import Report [EOL] from uiucprescon . imagevalidate . report import Result [EOL] from . import AbsProfile [EOL] [EOL] [EOL] class HathiJP2000 ( AbsProfile ) : [EOL] [docstring] [EOL] expected_metadata_any_value = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] expected_metadata_constants = { [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] valid_extensions = { [string] } [EOL] [EOL] @ staticmethod def profile_name ( ) : [EOL] return [string] [EOL] [EOL] def validate ( self , file ) : [EOL] report = Report ( ) [EOL] report . filename = file [EOL] report_data = self . get_data_from_image ( file ) [EOL] report . _properties = report_data [EOL] [EOL] analysis = collections . defaultdict ( list ) [EOL] [EOL] for key , result in report_data . items ( ) : [EOL] issue_category = self . analyze_data_for_issues ( result ) [EOL] if issue_category : [EOL] message = self . generate_error_msg ( issue_category , key , result ) [EOL] analysis [ issue_category ] . append ( message ) [EOL] [EOL] report . _data . update ( analysis ) [EOL] [EOL] return report [EOL] [EOL] @ classmethod def get_data_from_image ( cls , filename ) : [EOL] [EOL] image = py3exiv2bind . Image ( filename ) [EOL] data = super ( ) . get_data_from_image ( filename ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] color_space = cls . determine_color_space ( filename ) [EOL] if color_space : [EOL] data [ [string] ] = Result ( expected = [string] , actual = color_space ) [EOL] else : [EOL] data [ [string] ] = Result ( expected = [string] , actual = [string] ) [EOL] [EOL] longest_side = max ( image . pixelHeight , image . pixelWidth ) [EOL] [EOL] data [ [string] ] = Result ( expected = [string] , actual = str ( longest_side ) ) [EOL] [EOL] return data [EOL] [EOL] @ staticmethod def determine_color_space ( image ) : [EOL] strategies = [ common . ColorSpaceIccDeviceModelCheck , common . ColorSpaceIccPrefCcmCheck , common . ColorSpaceOJPCheck ] [EOL] for strategy in strategies : [EOL] [EOL] try : [EOL] colorspace_extractor = common . ExtractColorSpace ( strategy ( ) ) [EOL] return colorspace_extractor . check ( image ) [EOL] except common . InvalidStrategy as e : [EOL] print ( f" [string] " f"{ strategy . __name__ } [string] { e }" , file = sys . stderr ) [EOL] return None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $uiucprescon.imagevalidate.Report$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[uiucprescon.imagevalidate.IssueCategory,builtins.list]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[uiucprescon.imagevalidate.issues.IssueCategory]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[uiucprescon.imagevalidate.issues.IssueCategory]$ 0 0 $builtins.str$ 0 0 0 0 0 $typing.Optional[uiucprescon.imagevalidate.issues.IssueCategory]$ 0 0 0 0 0 0 $typing.Dict[uiucprescon.imagevalidate.IssueCategory,builtins.list]$ 0 $typing.Optional[uiucprescon.imagevalidate.issues.IssueCategory]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Dict[uiucprescon.imagevalidate.IssueCategory,builtins.list]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,uiucprescon.imagevalidate.report.Result]$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.Dict[builtins.str,uiucprescon.imagevalidate.report.Result]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 $typing.Dict[builtins.str,uiucprescon.imagevalidate.report.Result]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $typing.Dict[builtins.str,uiucprescon.imagevalidate.report.Result]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,uiucprescon.imagevalidate.report.Result]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,uiucprescon.imagevalidate.report.Result]$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 $builtins.str$ 0 0 0 $typing.List[typing.Type[typing.Union[uiucprescon.imagevalidate.common.ColorSpaceIccDeviceModelCheck,uiucprescon.imagevalidate.common.ColorSpaceIccPrefCcmCheck,uiucprescon.imagevalidate.common.ColorSpaceOJPCheck]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Type[typing.Union[uiucprescon.imagevalidate.common.ColorSpaceIccDeviceModelCheck,uiucprescon.imagevalidate.common.ColorSpaceIccPrefCcmCheck,uiucprescon.imagevalidate.common.ColorSpaceOJPCheck]]]$ 0 0 0 0 0 0 $uiucprescon.imagevalidate.common.ExtractColorSpace$ 0 0 0 0 0 0 0 0 0 0 0 $uiucprescon.imagevalidate.common.ExtractColorSpace$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any , List , Set , Optional [EOL] import builtins [EOL] import typing [EOL] import uiucprescon [EOL] import py3exiv2bind [EOL] import abc [EOL] [EOL] import py3exiv2bind [EOL] from typing import Dict , List , Optional , Set [EOL] from uiucprescon . imagevalidate import Report , IssueCategory , messages [EOL] from uiucprescon . imagevalidate . report import Result , ResultCategory [EOL] [EOL] [EOL] class AbsProfile ( metaclass = abc . ABCMeta ) : [EOL] [docstring] [EOL] [EOL] expected_metadata_constants = dict ( ) [EOL] expected_metadata_any_value = list ( ) [EOL] valid_extensions = set ( ) [EOL] [EOL] @ staticmethod @ abc . abstractmethod def profile_name ( ) : [EOL] pass [EOL] [EOL] @ abc . abstractmethod def validate ( self , file ) : [EOL] [docstring] [EOL] [EOL] @ classmethod def _get_metadata_static_values ( cls , image ) : [EOL] [EOL] data = dict ( ) [EOL] for key , value in cls . expected_metadata_constants . items ( ) : [EOL] data [ key ] = Result ( expected = value , actual = image . metadata . get ( key ) ) [EOL] return data [EOL] [EOL] @ classmethod def _get_metadata_has_values ( cls , image ) : [EOL] [EOL] data = dict ( ) [EOL] for key in cls . expected_metadata_any_value : [EOL] data [ key ] = Result ( expected = ResultCategory . ANY , actual = image . metadata . get ( key ) ) [EOL] return data [EOL] [EOL] @ staticmethod def generate_error_msg ( category , field , report_data ) : [EOL] [EOL] message_types = { IssueCategory . INVALID_DATA : messages . InvalidData ( ) , IssueCategory . EMPTY_DATA : messages . EmptyData ( ) , IssueCategory . MISSING_FIELD : messages . MissingField ( ) } [EOL] [EOL] if category in message_types : [EOL] [EOL] message_generator = messages . MessageGenerator ( message_types [ category ] ) [EOL] [EOL] return message_generator . generate_message ( field , report_data ) [EOL] [EOL] return [string] . format ( field ) [EOL] [EOL] @ staticmethod def analyze_data_for_issues ( result ) : [EOL] if result . actual is None : [EOL] return IssueCategory . MISSING_FIELD [EOL] [EOL] if result . actual == [string] : [EOL] return IssueCategory . EMPTY_DATA [EOL] [EOL] if result . actual != result . expected and result . expected is not ResultCategory . ANY : [EOL] [EOL] return IssueCategory . INVALID_DATA [EOL] [EOL] return None [EOL] [EOL] @ classmethod def get_data_from_image ( cls , filename ) : [EOL] image = py3exiv2bind . Image ( filename ) [EOL] data = dict ( ) [EOL] data . update ( cls . _get_metadata_has_values ( image ) ) [EOL] data . update ( cls . _get_metadata_static_values ( image ) ) [EOL] return data [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $uiucprescon.imagevalidate.Report$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,uiucprescon.imagevalidate.report.Result]$ 0 0 0 $py3exiv2bind.Image$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $py3exiv2bind.Image$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Dict[builtins.str,uiucprescon.imagevalidate.report.Result]$ 0 0 0 $py3exiv2bind.Image$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $py3exiv2bind.Image$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $builtins.str$ 0 $uiucprescon.imagevalidate.IssueCategory$ 0 $builtins.str$ 0 $uiucprescon.imagevalidate.report.Result$ 0 0 0 0 $typing.Dict[uiucprescon.imagevalidate.IssueCategory,uiucprescon.imagevalidate.messages.AbsMessage]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $uiucprescon.imagevalidate.IssueCategory$ 0 $typing.Dict[uiucprescon.imagevalidate.IssueCategory,uiucprescon.imagevalidate.messages.AbsMessage]$ 0 0 0 $uiucprescon.imagevalidate.messages.MessageGenerator$ 0 0 0 0 0 $typing.Dict[uiucprescon.imagevalidate.IssueCategory,uiucprescon.imagevalidate.messages.AbsMessage]$ 0 $uiucprescon.imagevalidate.IssueCategory$ 0 0 0 0 0 $uiucprescon.imagevalidate.messages.MessageGenerator$ 0 0 0 $builtins.str$ 0 $uiucprescon.imagevalidate.report.Result$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Optional[uiucprescon.imagevalidate.IssueCategory]$ 0 $uiucprescon.imagevalidate.report.Result$ 0 0 0 0 $uiucprescon.imagevalidate.report.Result$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $uiucprescon.imagevalidate.report.Result$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $uiucprescon.imagevalidate.report.Result$ 0 0 0 $uiucprescon.imagevalidate.report.Result$ 0 0 0 $uiucprescon.imagevalidate.report.Result$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,uiucprescon.imagevalidate.report.Result]$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.Dict[builtins.str,uiucprescon.imagevalidate.report.Result]$ 0 0 0 0 0 $typing.Dict[builtins.str,uiucprescon.imagevalidate.report.Result]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,uiucprescon.imagevalidate.report.Result]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[builtins.str,uiucprescon.imagevalidate.report.Result]$ 0
import uiucprescon [EOL] from uiucprescon . imagevalidate import messages , report [EOL] [EOL] [EOL] def test_invalid_data ( ) : [EOL] message_generator = messages . MessageGenerator ( strategy = messages . InvalidData ( ) ) [EOL] [EOL] new_message = message_generator . generate_message ( field = [string] , data = report . Result ( expected = [string] , actual = [string] ) ) [EOL] assert new_message == [string] [string] [EOL] [EOL] [EOL] def test_empty_data ( ) : [EOL] message_generator = messages . MessageGenerator ( strategy = messages . EmptyData ( ) ) [EOL] [EOL] new_message = message_generator . generate_message ( field = [string] , data = report . Result ( expected = [string] , actual = [string] ) ) [EOL] assert new_message == [string] [EOL] [EOL] [EOL] def test_missing_field ( ) : [EOL] message_generator = messages . MessageGenerator ( strategy = messages . MissingField ( ) ) [EOL] [EOL] new_message = message_generator . generate_message ( field = [string] , data = report . Result ( expected = [string] , actual = None ) ) [EOL] assert new_message == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import uiucprescon [EOL] import os [EOL] import shutil [EOL] [EOL] import pytest [EOL] [EOL] from uiucprescon import imagevalidate [EOL] from uiucprescon . imagevalidate import IssueCategory [EOL] import os [EOL] import tarfile [EOL] import urllib . request [EOL] from tempfile import TemporaryDirectory [EOL] [EOL] [comment] [EOL] SAMPLE_IMAGES = [string] [EOL] [EOL] [EOL] def download_images ( url , destination ) : [EOL] with TemporaryDirectory ( ) as download_path : [EOL] print ( [string] . format ( url ) , flush = True ) [EOL] urllib . request . urlretrieve ( url , filename = os . path . join ( download_path , [string] ) ) [EOL] if not os . path . exists ( os . path . join ( download_path , [string] ) ) : [EOL] raise FileNotFoundError ( [string] ) [EOL] print ( [string] ) [EOL] with tarfile . open ( os . path . join ( download_path , [string] ) , [string] ) as archive_file : [EOL] for item in archive_file . getmembers ( ) : [EOL] print ( [string] . format ( item . name ) ) [EOL] archive_file . extract ( item , path = destination ) [EOL] pass [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def sample_data ( ) : [EOL] [EOL] test_path = os . path . dirname ( __file__ ) [EOL] sample_images_path = os . path . join ( test_path , [string] ) [EOL] [EOL] if os . path . exists ( sample_images_path ) : [EOL] print ( [string] . format ( sample_images_path ) ) [EOL] else : [EOL] print ( [string] ) [EOL] if not os . path . exists ( sample_images_path ) : [EOL] download_images ( url = SAMPLE_IMAGES , destination = test_path ) [EOL] yield sample_images_path [EOL] shutil . rmtree ( sample_images_path ) [EOL] [EOL] [EOL] @ pytest . mark . integration @ pytest . mark . parametrize ( [string] , [ ( os . path . join ( [string] , [string] ) , [string] ) , ( os . path . join ( [string] , [string] ) , [string] ) , ] ) def test_bitdepth ( sample_data , test_file , profile_name ) : [EOL] test_image = os . path . join ( sample_data , test_file ) [EOL] profile_type = imagevalidate . get_profile ( profile_name ) [EOL] hathi_tiff_profile = imagevalidate . Profile ( profile_type ) [EOL] report = hathi_tiff_profile . validate ( file = test_image ) [EOL] print ( report ) [EOL] assert len ( report . issues ( ) ) == [number] [EOL] assert len ( report . issues ( issue_type = IssueCategory . INVALID_DATA ) ) == [number] [EOL] assert not report . valid [EOL] [EOL] [EOL] @ pytest . mark . integration @ pytest . mark . parametrize ( [string] , [ ( os . path . join ( [string] , [string] ) , [string] ) , ] ) def test_invalid_colorspace ( sample_data , test_file , profile_name ) : [EOL] test_image = os . path . join ( sample_data , test_file ) [EOL] profile_type = imagevalidate . get_profile ( profile_name ) [EOL] hathi_tiff_profile = imagevalidate . Profile ( profile_type ) [EOL] report = hathi_tiff_profile . validate ( file = test_image ) [EOL] print ( report ) [EOL] assert len ( report . issues ( ) ) == [number] [EOL] assert len ( report . issues ( issue_type = IssueCategory . INVALID_DATA ) ) == [number] [EOL] assert len ( report . issues ( issue_type = IssueCategory . EMPTY_DATA ) ) == [number] [EOL] assert len ( report . issues ( issue_type = IssueCategory . MISSING_FIELD ) ) == [number] [EOL] assert not report . valid [EOL] assert report . _properties [ [string] ] . actual != [string] [EOL] [EOL] [EOL] @ pytest . mark . integration @ pytest . mark . parametrize ( [string] , [ ( os . path . join ( [string] , [string] ) , [string] ) , ] ) def test_valid_colorspace ( sample_data , test_file , profile_name ) : [EOL] test_image = os . path . join ( sample_data , test_file ) [EOL] profile_type = imagevalidate . get_profile ( profile_name ) [EOL] validation_profile = imagevalidate . Profile ( profile_type ) [EOL] report = validation_profile . validate ( file = test_image ) [EOL] print ( report ) [EOL] assert len ( report . issues ( ) ) == [number] [EOL] assert len ( report . issues ( issue_type = IssueCategory . INVALID_DATA ) ) == [number] [EOL] assert len ( report . issues ( issue_type = IssueCategory . EMPTY_DATA ) ) == [number] [EOL] assert len ( report . issues ( issue_type = IssueCategory . MISSING_FIELD ) ) == [number] [EOL] assert report . valid [EOL] assert report . _properties [ [string] ] . actual == [string] [EOL] [EOL] [EOL] @ pytest . mark . integration @ pytest . mark . parametrize ( [string] , [ ( os . path . join ( [string] , [string] ) , [string] ) , ( os . path . join ( [string] , [string] ) , [string] ) , ] ) def test_correct ( sample_data , test_file , profile_name ) : [EOL] test_image = os . path . join ( sample_data , test_file ) [EOL] profile_type = imagevalidate . get_profile ( profile_name ) [EOL] hathi_tiff_profile = imagevalidate . Profile ( profile_type ) [EOL] report = hathi_tiff_profile . validate ( file = test_image ) [EOL] print ( report ) [EOL] assert [string] in str ( report ) [EOL] assert len ( report . issues ( ) ) == [number] [EOL] assert len ( report . issues ( issue_type = IssueCategory . INVALID_DATA ) ) == [number] [EOL] assert len ( report . issues ( issue_type = IssueCategory . EMPTY_DATA ) ) == [number] [EOL] assert len ( report . issues ( issue_type = IssueCategory . MISSING_FIELD ) ) == [number] [EOL] assert report . valid [EOL] [EOL] [EOL] @ pytest . mark . integration @ pytest . mark . parametrize ( [string] , [ ( os . path . join ( [string] , [string] ) , [string] ) , ( os . path . join ( [string] , [string] ) , [string] ) , ] ) def test_empty_address ( sample_data , test_file , profile_name ) : [EOL] test_image = os . path . join ( sample_data , test_file ) [EOL] profile_type = imagevalidate . get_profile ( profile_name ) [EOL] hathi_tiff_profile = imagevalidate . Profile ( profile_type ) [EOL] report = hathi_tiff_profile . validate ( file = test_image ) [EOL] print ( report ) [EOL] assert len ( report . issues ( ) ) == [number] [EOL] assert len ( report . issues ( issue_type = IssueCategory . INVALID_DATA ) ) == [number] [EOL] assert len ( report . issues ( issue_type = IssueCategory . EMPTY_DATA ) ) == [number] [EOL] assert len ( report . issues ( issue_type = IssueCategory . MISSING_FIELD ) ) == [number] [EOL] assert not report . valid [EOL] [EOL] [EOL] @ pytest . mark . integration @ pytest . mark . parametrize ( [string] , [ ( os . path . join ( [string] , [string] ) , [string] ) , ( os . path . join ( [string] , [string] ) , [string] ) , ] ) def test_empty_city ( sample_data , test_file , profile_name ) : [EOL] test_image = os . path . join ( sample_data , test_file ) [EOL] profile_type = imagevalidate . get_profile ( profile_name ) [EOL] hathi_tiff_profile = imagevalidate . Profile ( profile_type ) [EOL] report = hathi_tiff_profile . validate ( file = test_image ) [EOL] assert len ( report . issues ( issue_type = IssueCategory . INVALID_DATA ) ) == [number] [EOL] assert len ( report . issues ( issue_type = IssueCategory . EMPTY_DATA ) ) == [number] [EOL] assert len ( report . issues ( issue_type = IssueCategory . MISSING_FIELD ) ) == [number] [EOL] print ( report ) [EOL] assert len ( report . issues ( ) ) == [number] [EOL] assert not report . valid [EOL] [EOL] [EOL] @ pytest . mark . integration @ pytest . mark . parametrize ( [string] , [ ( os . path . join ( [string] , [string] ) , [string] ) , ( os . path . join ( [string] , [string] ) , [string] ) , ] ) def test_empty_country ( sample_data , test_file , profile_name ) : [EOL] test_image = os . path . join ( sample_data , test_file ) [EOL] profile_type = imagevalidate . get_profile ( profile_name ) [EOL] hathi_tiff_profile = imagevalidate . Profile ( profile_type ) [EOL] report = hathi_tiff_profile . validate ( file = test_image ) [EOL] print ( report ) [EOL] assert len ( report . issues ( ) ) == [number] [EOL] assert len ( report . issues ( issue_type = IssueCategory . INVALID_DATA ) ) == [number] [EOL] assert len ( report . issues ( issue_type = IssueCategory . EMPTY_DATA ) ) == [number] [EOL] assert len ( report . issues ( issue_type = IssueCategory . MISSING_FIELD ) ) == [number] [EOL] assert not report . valid [EOL] [EOL] [EOL] @ pytest . mark . integration @ pytest . mark . parametrize ( [string] , [ ( os . path . join ( [string] , [string] ) , [string] ) , ( os . path . join ( [string] , [string] ) , [string] ) , ] ) def test_missing_creator ( sample_data , test_file , profile_name ) : [EOL] test_image = os . path . join ( sample_data , test_file ) [EOL] profile_type = imagevalidate . get_profile ( profile_name ) [EOL] hathi_tiff_profile = imagevalidate . Profile ( profile_type ) [EOL] report = hathi_tiff_profile . validate ( file = test_image ) [EOL] print ( report ) [EOL] assert len ( report . issues ( ) ) == [number] [EOL] assert len ( report . issues ( issue_type = IssueCategory . INVALID_DATA ) ) == [number] [EOL] assert len ( report . issues ( issue_type = IssueCategory . EMPTY_DATA ) ) == [number] [EOL] assert len ( report . issues ( issue_type = IssueCategory . MISSING_FIELD ) ) == [number] [EOL] assert not report . valid [EOL] [EOL] [EOL] @ pytest . mark . integration @ pytest . mark . parametrize ( [string] , [ ( os . path . join ( [string] , [string] ) , [string] ) , ( os . path . join ( [string] , [string] ) , [string] ) , ] ) def test_empty_state ( sample_data , test_file , profile_name ) : [EOL] test_image = os . path . join ( sample_data , test_file ) [EOL] profile_type = imagevalidate . get_profile ( profile_name ) [EOL] hathi_tiff_profile = imagevalidate . Profile ( profile_type ) [EOL] report = hathi_tiff_profile . validate ( file = test_image ) [EOL] assert len ( report . issues ( ) ) == [number] [EOL] assert len ( report . issues ( issue_type = IssueCategory . INVALID_DATA ) ) == [number] [EOL] assert len ( report . issues ( issue_type = IssueCategory . EMPTY_DATA ) ) == [number] [EOL] assert len ( report . issues ( issue_type = IssueCategory . MISSING_FIELD ) ) == [number] [EOL] print ( report ) [EOL] assert not report . valid [EOL] [EOL] [EOL] @ pytest . mark . integration @ pytest . mark . parametrize ( [string] , [ ( os . path . join ( [string] , [string] ) , [string] ) , ( os . path . join ( [string] , [string] ) , [string] ) , ] ) def test_empty_zip ( sample_data , test_file , profile_name ) : [EOL] test_image = os . path . join ( sample_data , test_file ) [EOL] profile_name = imagevalidate . get_profile ( profile_name ) [EOL] hathi_tiff_profile = imagevalidate . Profile ( profile_name ) [EOL] report = hathi_tiff_profile . validate ( file = test_image ) [EOL] print ( report ) [EOL] assert len ( report . issues ( ) ) == [number] [EOL] assert len ( report . issues ( issue_type = IssueCategory . INVALID_DATA ) ) == [number] [EOL] assert len ( report . issues ( issue_type = IssueCategory . EMPTY_DATA ) ) == [number] [EOL] assert len ( report . issues ( issue_type = IssueCategory . MISSING_FIELD ) ) == [number] [EOL] assert not report . valid [EOL] [EOL] [EOL] @ pytest . mark . integration @ pytest . mark . parametrize ( [string] , [ ( os . path . join ( [string] , [string] ) , [string] ) , ( os . path . join ( [string] , [string] ) , [string] ) , ] ) def test_empty_phonenumber ( sample_data , test_file , profile_name ) : [EOL] test_image = os . path . join ( sample_data , test_file ) [EOL] profile_type = imagevalidate . get_profile ( profile_name ) [EOL] hathi_tiff_profile = imagevalidate . Profile ( profile_type ) [EOL] report = hathi_tiff_profile . validate ( file = test_image ) [EOL] print ( report ) [EOL] assert len ( report . issues ( ) ) == [number] [EOL] assert len ( report . issues ( issue_type = IssueCategory . INVALID_DATA ) ) == [number] [EOL] assert len ( report . issues ( issue_type = IssueCategory . EMPTY_DATA ) ) == [number] [EOL] assert len ( report . issues ( issue_type = IssueCategory . MISSING_FIELD ) ) == [number] [EOL] assert not report . valid [EOL] [EOL] [EOL] @ pytest . mark . integration @ pytest . mark . parametrize ( [string] , [ ( os . path . join ( [string] , [string] ) , [string] ) , ( os . path . join ( [string] , [string] ) , [string] ) , ] ) def test_pixelarray ( sample_data , test_file , profile_name ) : [EOL] [EOL] test_image = os . path . join ( sample_data , test_file ) [EOL] profile_name = imagevalidate . get_profile ( profile_name ) [EOL] hathi_tiff_profile = imagevalidate . Profile ( profile_name ) [EOL] report = hathi_tiff_profile . validate ( file = test_image ) [EOL] print ( report ) [EOL] assert len ( report . issues ( ) ) == [number] [EOL] assert len ( report . issues ( issue_type = IssueCategory . INVALID_DATA ) ) == [number] [EOL] assert len ( report . issues ( issue_type = IssueCategory . EMPTY_DATA ) ) == [number] [EOL] assert len ( report . issues ( issue_type = IssueCategory . MISSING_FIELD ) ) == [number] [EOL] assert not report . valid [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str
import uiucprescon [EOL] import pytest [EOL] from uiucprescon . imagevalidate import profiles [EOL] from uiucprescon import imagevalidate [EOL] [EOL] [EOL] def test_loaded ( ) : [EOL] assert imagevalidate . __name__ [EOL] [EOL] [EOL] def test_load_profile ( ) : [EOL] hathi_tiff_profile = imagevalidate . Profile ( profiles . HathiTiff ( ) ) [EOL] assert isinstance ( hathi_tiff_profile , imagevalidate . Profile ) [EOL] [EOL] [EOL] def test_missing_file ( ) : [EOL] hathi_tiff_profile = imagevalidate . Profile ( profiles . HathiTiff ( ) ) [EOL] with pytest . raises ( FileNotFoundError ) : [EOL] report = hathi_tiff_profile . validate ( file = [string] ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from uiucprescon . imagevalidate import openjp2wrap [EOL] [EOL] [EOL] def test_dummy ( ) : [EOL] print ( openjp2wrap . open_jpeg_version ( ) )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Set [EOL] import typing [EOL] import uiucprescon [EOL] from uiucprescon import imagevalidate [EOL] [EOL] [EOL] def test_get_all_profiles ( ) : [EOL] profiles = imagevalidate . available_profiles ( ) [EOL] assert isinstance ( profiles , set ) [EOL] [EOL] [EOL] [comment] [EOL] def test_get_hathi_tiff_profile ( ) : [EOL] hathi_tiff_profile = imagevalidate . get_profile ( [string] ) [EOL] assert isinstance ( hathi_tiff_profile , imagevalidate . profiles . AbsProfile ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0