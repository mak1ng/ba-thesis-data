from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] from django . contrib import admin [EOL] from django . urls import path , include [EOL] from rest_framework import routers [EOL] [EOL] from . recordbin . views import RecordViewSet , AppViewSet , AppTokenViewSet [EOL] from . docs import urlpatterns as doc_urlpatterns [EOL] from . tableau import urlpatterns as tableau_urlpatterns [EOL] [EOL] [EOL] router = routers . DefaultRouter ( ) [EOL] router . register ( [string] , RecordViewSet ) [EOL] router . register ( [string] , AppViewSet ) [EOL] router . register ( [string] , AppTokenViewSet ) [EOL] [EOL] urlpatterns = [ path ( [string] , include ( ( router . urls , [string] ) , namespace = [string] ) ) , path ( [string] , include ( [string] ) ) , path ( [string] , include ( [string] ) ) , path ( [string] , admin . site . urls ) , path ( [string] , include ( [string] , [string] ) ) , * doc_urlpatterns , * tableau_urlpatterns , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] [comment] [EOL] [comment] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Dict , List , Union , Any [EOL] import typing [EOL] from django . urls import path [EOL] from django . views . generic import TemplateView [EOL] from django . views . decorators . cache import never_cache [EOL] from django . http import JsonResponse [EOL] from django . views . decorators . clickjacking import xframe_options_exempt [EOL] [EOL] connector = never_cache ( xframe_options_exempt ( TemplateView . as_view ( template_name = [string] ) ) ) [EOL] [EOL] [EOL] @ xframe_options_exempt def connection_data ( request ) : [EOL] data = { [string] : [ { [string] : [string] , [string] : [ { [string] : [string] , [string] : [string] } ] , [string] : [ ] , } ] } [EOL] return JsonResponse ( data ) [EOL] [EOL] [EOL] @ xframe_options_exempt def table_info ( request ) : [EOL] data = { [string] : [ { [string] : [string] , [string] : [string] , [string] : [ { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , { [string] : [string] , [string] : [string] , [string] : [string] } , ] , } ] } [EOL] return JsonResponse ( data ) [EOL] [EOL] [EOL] urlpatterns = [ path ( [string] , connector ) , path ( [string] , table_info ) , path ( [string] , connection_data ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Any [EOL] import pathlib [EOL] import typing [EOL] from pathlib import Path [EOL] from rest_framework . decorators import api_view [EOL] from django . http . response import HttpResponse [EOL] [EOL] from django . urls import re_path , path [EOL] from drf_yasg . views import get_schema_view [EOL] from drf_yasg import openapi [EOL] [EOL] [comment] [EOL] schema_view = get_schema_view ( openapi . Info ( title = [string] , default_version = [string] , description = [string] , contact = openapi . Contact ( email = [string] ) , license = openapi . License ( name = [string] ) , ) , validators = [ [string] , [string] ] , public = False , ) [EOL] [EOL] [EOL] @ api_view ( [ [string] ] ) def openapi_view ( request ) : [EOL] path = Path ( [string] ) [EOL] with open ( path ) as fp : [EOL] data = fp . read ( ) [EOL] return HttpResponse ( data ) [EOL] [EOL] [EOL] urlpatterns = [ path ( [string] , openapi_view ) , re_path ( [string] , schema_view . without_ui ( cache_timeout = [number] ) , name = [string] , ) , re_path ( [string] , schema_view . with_ui ( [string] , cache_timeout = [number] ) , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . base import * [comment] [EOL] from . config import * [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Tuple , List , Any [EOL] import typing [EOL] [docstring] [EOL] import os [EOL] import dj_database_url [EOL] from decouple import config , Csv [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] docker_db = [string] [EOL] os . environ . setdefault ( [string] , docker_db ) [EOL] [EOL] [comment] [EOL] DEBUG = config ( [string] , cast = bool ) [EOL] SECRET_KEY = config ( [string] ) [EOL] ALLOWED_HOSTS = config ( [string] , cast = Csv ( ) ) [EOL] [EOL] [comment] [EOL] DATABASE_URL = config ( [string] ) [EOL] db_config = dj_database_url . config ( default = DATABASE_URL ) [EOL] DATABASES = { [string] : db_config } [comment] [EOL] [EOL] [comment] [EOL] CORS_ORIGIN_ALLOW_ALL = config ( [string] , cast = bool , default = False ) [EOL] CORS_ORIGIN_WHITELIST = [ [string] , [string] , * config ( [string] , cast = Csv ( ) , default = [string] ) ] [EOL] [EOL] if DEBUG : [EOL] CORS_ORIGIN_WHITELIST . append ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if not DEBUG : [EOL] SECURE_SSL_REDIRECT = config ( [string] , cast = bool , default = True ) [EOL] SECURE_PROXY_SSL_HEADER = ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any [EOL] import typing [EOL] import backend [EOL] from rest_framework . authentication import TokenAuthentication [EOL] from rest_framework . authtoken . models import Token [EOL] from rest_framework import exceptions [EOL] [EOL] from backend . recordbin . models import AppToken [EOL] [EOL] [EOL] class UserTokenAuthentication ( TokenAuthentication ) : [EOL] [docstring] [EOL] [EOL] keyword = [string] [EOL] model = Token [EOL] [EOL] [EOL] class AppTokenAuthentication ( TokenAuthentication ) : [EOL] [docstring] [EOL] [EOL] keyword = [string] [EOL] model = AppToken [EOL] [EOL] def authenticate ( self , request ) : [EOL] [docstring] [EOL] token = request . query_params . get ( [string] ) [EOL] if token : [EOL] return self . authenticate_credentials ( token ) [EOL] return super ( ) . authenticate ( request ) [EOL] [EOL] def authenticate_credentials ( self , key ) : [EOL] [docstring] [EOL] model = AppToken [EOL] try : [EOL] token = model . objects . get ( key = key ) [EOL] except model . DoesNotExist : [EOL] raise exceptions . AuthenticationFailed ( [string] ) [EOL] [EOL] if not token . app . owner . is_active : [EOL] raise exceptions . AuthenticationFailed ( [string] ) [EOL] [EOL] return ( token . app . owner , token ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[backend.recordbin.authentication.UserTokenAuthentication]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[backend.recordbin.models.app.AppToken]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.recordbin.models.app.AppToken]$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Type[backend.recordbin.models.app.AppToken]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.recordbin.models.app.AppToken]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0
default_app_config = [string] [EOL]	$builtins.str$ 0 0 0
from rest_framework . permissions import BasePermission [EOL] from rest_framework . authtoken . models import Token as UserToken [EOL] from . models import AppToken [EOL] [EOL] [EOL] class AppTokenReadWritePermission ( BasePermission ) : [EOL] def has_permission ( self , request , view ) : [EOL] if isinstance ( request . auth , AppToken ) : [EOL] permissions = request . auth . permissions [EOL] if request . method == [string] : [EOL] return [string] in permissions [EOL] if request . method == [string] : [EOL] return [string] in permissions [EOL] if isinstance ( request . auth , UserToken ) : [EOL] return request . method == [string] [EOL] return True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import backend [EOL] import django_filters [EOL] from . models import Record [EOL] [EOL] [EOL] class RecordFilterSet ( django_filters . FilterSet ) : [EOL] class Meta : [EOL] model = Record [EOL] fields = dict ( id = [ [string] ] , created_on = [ [string] , [string] , [string] ] , data = [ ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import List , Union , Type , Any [EOL] import typing [EOL] import backend [EOL] from django . contrib import admin [EOL] [EOL] from django . utils . html import format_html [EOL] from django . urls import reverse [EOL] [EOL] from . models import Record , App , AppToken , User [EOL] [EOL] [EOL] def linkify ( field_name ) : [EOL] [docstring] [EOL] [comment] [EOL] def _linkify ( obj ) : [EOL] app_label = obj . _meta . app_label [EOL] linked_obj = getattr ( obj , field_name ) [EOL] model_name = linked_obj . _meta . model_name [EOL] view_name = f" [string] { app_label } [string] { model_name } [string] " [EOL] link_url = reverse ( view_name , args = [ str ( linked_obj . id ) ] ) [EOL] return format_html ( [string] , link_url , linked_obj ) [EOL] [EOL] _linkify . short_description = field_name [EOL] return _linkify [EOL] [EOL] [EOL] class BaseModel ( admin . ModelAdmin ) : [EOL] view_on_site = False [EOL] [EOL] def short_id ( self , obj ) : [EOL] return f"{ str ( obj . id ) . split ( [string] ) [ [number] ] }" [EOL] [EOL] [EOL] @ admin . register ( Record ) class RecordAdmin ( BaseModel ) : [EOL] list_display = [ [string] , [string] , linkify ( [string] ) ] [EOL] list_filter = [ [string] ] [EOL] [EOL] [EOL] class RecordInline ( admin . TabularInline ) : [EOL] model = Record [EOL] [EOL] [EOL] class AppTokenInline ( admin . TabularInline ) : [EOL] model = AppToken [EOL] [EOL] [EOL] @ admin . register ( App ) class AppAdmin ( BaseModel ) : [EOL] list_display = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] inlines = [ RecordInline , AppTokenInline ] [EOL] [EOL] def records ( self , obj ) : [EOL] return len ( obj . records . all ( ) ) [EOL] [EOL] def tokens ( self , obj ) : [EOL] return len ( obj . tokens . all ( ) ) [EOL] [EOL] [EOL] @ admin . register ( AppToken ) class AppTokenAdmin ( BaseModel ) : [EOL] list_display = [ [string] , [string] , [string] , linkify ( [string] ) ] [EOL] [EOL] [EOL] @ admin . register ( User ) class UserAdmin ( admin . ModelAdmin ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class RecordBinConfig ( AppConfig ) : [EOL] name = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Type , Any , Optional , Tuple , Match [EOL] import typing [EOL] import backend [EOL] import re [EOL] from rest_framework import viewsets , mixins [EOL] from rest_framework . permissions import IsAdminUser , IsAuthenticated [comment] [EOL] from rest_framework . authtoken . models import Token as UserToken [EOL] from django_filters . rest_framework import DjangoFilterBackend [EOL] [EOL] [comment] [EOL] from backend . recordbin . authentication import ( UserTokenAuthentication , AppTokenAuthentication , ) [EOL] [EOL] from . filtersets import RecordFilterSet [EOL] from . permissions import AppTokenReadWritePermission [EOL] from . models import ( Record , RecordSerializer , App , AppSerializer , AppToken , AppTokenSerializer , ) [EOL] [EOL] [EOL] class RecordViewSet ( mixins . ListModelMixin , mixins . CreateModelMixin , viewsets . GenericViewSet ) : [EOL] [docstring] [EOL] [EOL] authentication_classes = ( AppTokenAuthentication , UserTokenAuthentication ) [EOL] permission_classes = ( IsAuthenticated , AppTokenReadWritePermission ) [EOL] [EOL] queryset = Record . objects . all ( ) [EOL] serializer_class = RecordSerializer [EOL] filterset_class = RecordFilterSet [EOL] filter_backends = ( DjangoFilterBackend , ) [EOL] [EOL] def perform_create ( self , serializer ) : [EOL] app_token = self . request . auth [EOL] [comment] [EOL] [comment] [EOL] serializer . save ( app_id = app_token . app . pk ) [EOL] [EOL] def get_queryset ( self ) : [EOL] params = self . request . query_params . copy ( ) [EOL] filter_kwargs = { } [EOL] [comment] [EOL] [comment] [EOL] for key , value in params . items ( ) : [EOL] pat = [string] [EOL] match = re . search ( pat , key ) [EOL] if match : [EOL] field = match . group ( [number] ) [EOL] filter_kwargs [ f" [string] { field }" ] = value [EOL] [EOL] [comment] [EOL] user = self . request . user [comment] [EOL] token = self . request . auth [EOL] if isinstance ( token , AppToken ) : [EOL] [comment] [EOL] app = token . app [EOL] filter_kwargs [ [string] ] = app [EOL] elif isinstance ( token , UserToken ) : [EOL] user = token . user [EOL] filter_kwargs [ [string] ] = user [EOL] else : [EOL] [comment] [EOL] return Record . objects . none ( ) [EOL] return Record . objects . filter ( ** filter_kwargs ) [EOL] [EOL] [EOL] class AppViewSet ( mixins . ListModelMixin , viewsets . GenericViewSet ) : [EOL] [docstring] [EOL] [EOL] authentication_classes = ( UserTokenAuthentication , ) [EOL] permission_classes = ( IsAuthenticated , ) [EOL] serializer_class = AppSerializer [EOL] queryset = App . objects . all ( ) [EOL] [EOL] def list ( self , * args , ** kwargs ) : [EOL] return super ( ) . list ( * args , ** kwargs ) [EOL] [EOL] def get_queryset ( self ) : [EOL] user = self . request . user [EOL] return App . objects . filter ( owner = user ) [EOL] [EOL] [EOL] class AppTokenViewSet ( mixins . ListModelMixin , viewsets . GenericViewSet ) : [EOL] [docstring] [EOL] [EOL] authentication_classes = ( UserTokenAuthentication , ) [EOL] permission_classes = ( IsAuthenticated , ) [EOL] serializer_class = AppTokenSerializer [EOL] queryset = AppToken . objects . all ( ) [EOL] [EOL] def list ( self , * args , ** kwargs ) : [EOL] return super ( ) . list ( * args , ** kwargs ) [EOL] [EOL] def get_queryset ( self ) : [EOL] user = self . request . user [EOL] return AppToken . objects . filter ( app__owner = user ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.recordbin.models.app.AppTokenSerializer]$ 0 0 0 $typing.Type[backend.recordbin.views.AppTokenViewSet]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import List , Union , Type [EOL] import typing [EOL] import backend [EOL] from . user import User [EOL] from . record import Record , RecordSerializer [comment] [EOL] from . app import App , AppSerializer , AppToken , AppTokenSerializer [comment] [EOL] [EOL] ALL_MODELS = [ Record , App , AppToken , User ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Type[typing.Union[backend.recordbin.models.app.App,backend.recordbin.models.app.AppToken,backend.recordbin.models.record.Record,backend.recordbin.models.user.User]]]$ 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any [EOL] import typing [EOL] import backend [EOL] from django . db . models import EmailField [EOL] from django . contrib . auth . models import AbstractUser [EOL] from django . contrib . auth . models import BaseUserManager [EOL] [EOL] [EOL] class UserManager ( BaseUserManager ) : [EOL] [docstring] [EOL] [EOL] def create_user ( self , email , password = None , ** kwargs ) : [EOL] if not email : [EOL] raise ValueError ( [string] ) [EOL] [EOL] email = self . normalize_email ( email ) [EOL] user = self . model ( email = email , ** kwargs ) [EOL] user . set_password ( password ) [EOL] user . save ( ) [EOL] return user [EOL] [EOL] def create_superuser ( self , email , password , ** extra_fields ) : [EOL] extra_fields . setdefault ( [string] , True ) [EOL] extra_fields . setdefault ( [string] , True ) [EOL] extra_fields . setdefault ( [string] , True ) [EOL] return self . create_user ( email , password , ** extra_fields ) [EOL] [EOL] [EOL] class User ( AbstractUser ) : [EOL] email = EmailField ( unique = True , null = True ) [EOL] username = None [EOL] USERNAME_FIELD = [string] [EOL] REQUIRED_FIELDS = [ ] [EOL] objects = UserManager ( ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . email [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $backend.recordbin.models.user.UserManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . db import models [EOL] [EOL] [EOL] class BaseModel ( models . Model ) : [EOL] def __repr__ ( self , ** kwargs ) : [EOL] cls_name = self . __class__ . __name__ [EOL] short_id = str ( self . id ) . split ( [string] ) [ [number] ] [EOL] return f" [string] { cls_name } [string] { short_id } [string] " [EOL] [EOL] class Meta : [EOL] abstract = True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0
from typing import List , Tuple , Type , Any [EOL] import typing [EOL] import backend [EOL] import uuid [EOL] from django . db import models [EOL] from django . contrib . postgres . fields import JSONField [EOL] from rest_framework import serializers [EOL] [EOL] from . base import BaseModel [EOL] [EOL] [EOL] class Record ( BaseModel ) : [EOL] id = models . UUIDField ( primary_key = True , default = uuid . uuid4 , editable = False ) [EOL] data = JSONField ( ) [EOL] created_on = models . DateTimeField ( auto_now_add = True ) [EOL] app = models . ForeignKey ( [string] , related_name = [string] , on_delete = models . CASCADE ) [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] super ( Record , self ) . save ( * args , ** kwargs ) [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL] ordering = [ [string] ] [EOL] [EOL] [EOL] class RecordSerializer ( serializers . ModelSerializer ) : [EOL] data = serializers . JSONField ( ) [comment] [EOL] app = serializers . SlugRelatedField ( many = False , read_only = True , slug_field = [string] ) [EOL] [EOL] class Meta : [EOL] model = Record [EOL] fields = ( [string] , [string] , [string] , [string] ) [EOL] [EOL] def create ( self , validated_data ) : [EOL] [docstring] [EOL] [comment] [EOL] app_id = validated_data . pop ( [string] ) [EOL] return Record . objects . create ( app_id = app_id , data = validated_data ) [EOL] [EOL] def to_internal_value ( self , request_data ) : [EOL] [docstring] [EOL] [comment] [EOL] return request_data [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.recordbin.models.record.Record]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.recordbin.models.record.Record]$ 0 0 0 0 0 $typing.Type[backend.recordbin.models.record.Record]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.recordbin.models.record.Record]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.recordbin.models.record.RecordSerializer]$ 0 0 0 0 0 0 0 0 $typing.Type[backend.recordbin.models.record.RecordSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.recordbin.models.record.Record]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Type [EOL] import typing [EOL] import backend [EOL] import uuid [EOL] import binascii [EOL] import os [EOL] from django . db import models [EOL] from django . conf import settings [EOL] from rest_framework import serializers [EOL] [EOL] from . base import BaseModel [EOL] [EOL] [EOL] class App ( BaseModel ) : [EOL] id = models . UUIDField ( primary_key = True , default = uuid . uuid4 , editable = False ) [EOL] name = models . CharField ( max_length = [number] , unique = True ) [EOL] created_on = models . DateTimeField ( auto_now_add = True ) [EOL] owner = models . ForeignKey ( settings . AUTH_USER_MODEL , related_name = [string] , on_delete = models . CASCADE ) [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL] [EOL] [EOL] class AppSerializer ( serializers . ModelSerializer ) : [EOL] owner = serializers . SlugRelatedField ( many = False , read_only = True , slug_field = [string] ) [EOL] [EOL] class Meta : [EOL] model = App [EOL] fields = ( [string] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] class AppToken ( models . Model ) : [EOL] [docstring] [EOL] [EOL] key = models . CharField ( [string] , max_length = [number] , primary_key = True , editable = False ) [EOL] created_on = models . DateTimeField ( auto_now_add = True ) [EOL] app = models . ForeignKey ( App , related_name = [string] , on_delete = models . CASCADE ) [EOL] permission_choices = ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ) [EOL] permissions = models . CharField ( max_length = [number] , choices = permission_choices ) [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . key [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] if not self . key : [EOL] self . key = binascii . hexlify ( os . urandom ( [number] ) ) . decode ( ) [EOL] return super ( ) . save ( * args , ** kwargs ) [EOL] [EOL] [EOL] class AppTokenSerializer ( serializers . ModelSerializer ) : [EOL] app = serializers . SlugRelatedField ( many = False , queryset = App . objects . all ( ) , read_only = False , slug_field = [string] ) [EOL] [EOL] class Meta : [EOL] model = AppToken [EOL] fields = ( [string] , [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.recordbin.models.app.App]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.recordbin.models.app.App]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.recordbin.models.app.App]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.recordbin.models.app.App]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.recordbin.models.app.AppSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.recordbin.models.app.AppToken]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.recordbin.models.app.AppToken]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.recordbin.models.app.AppToken]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.recordbin.models.app.AppToken]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.recordbin.models.app.AppToken]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.recordbin.models.app.AppTokenSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.recordbin.models.app.AppToken]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import List [EOL] import typing [EOL] import pathlib [EOL] from pathlib import Path [EOL] from django . core . management . base import BaseCommand [EOL] from django . core . management import call_command [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] path = Path ( [string] , [string] , f" [string] " ) [EOL] args = [ [string] , [string] , [string] , [string] , [string] , [string] , f" [string] { path }" , ] [EOL] call_command ( * args ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0
from typing import List , Union [EOL] import typing [EOL] import pathlib [EOL] from django . core . management . base import BaseCommand [EOL] from django . core . management import call_command [EOL] [EOL] from pathlib import Path [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] fixture_path = Path ( [string] , [string] , f" [string] " ) [EOL] args = [ [string] , fixture_path ] [EOL] call_command ( * args ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Union[pathlib.Path,builtins.str]]$ 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Union[pathlib.Path,builtins.str]]$ 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 $typing.List[typing.Union[pathlib.Path,builtins.str]]$ 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] import pytest [EOL] from rest_framework . test import APIClient [EOL] [EOL] from rest_framework . authtoken . models import Token as UserToken [EOL] from backend . recordbin . models import AppToken [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . fixture def client_usertoken ( client , ADMIN_CREDENTIALS ) : [EOL] email = ADMIN_CREDENTIALS [ [string] ] [EOL] token , _ = UserToken . objects . get_or_create ( user__email = email ) [EOL] client = APIClient ( ) [EOL] client . credentials ( HTTP_AUTHORIZATION = [string] + token . key ) [EOL] return client [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . fixture def client_apptoken ( client ) : [EOL] token = AppToken . objects . first ( ) [EOL] client = APIClient ( ) [EOL] client . credentials ( HTTP_AUTHORIZATION = [string] + token . key ) [EOL] return client [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_api_view_unauthorized ( client ) : [EOL] response = client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_api_view_records_tokens ( client_apptoken , client_usertoken ) : [EOL] response = client_apptoken . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] response = client_usertoken . get ( [string] ) [EOL] assert response . status_code == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import pytest [EOL] import os [EOL] import django [EOL] [EOL] from django . core . management import call_command [EOL] [EOL] [EOL] def pytest_configure ( ) : [EOL] os . environ [ [string] ] = [string] [EOL] os . environ [ [string] ] = [string] [EOL] django . setup ( ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def django_db_setup ( django_db_blocker ) : [EOL] with django_db_blocker . unblock ( ) : [EOL] [comment] [EOL] call_command ( [string] , [string] ) [EOL] [EOL] [EOL] @ pytest . fixture def ADMIN_CREDENTIALS ( ) : [EOL] return dict ( email = [string] , password = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pytest [EOL] [EOL] from backend . recordbin . models import ALL_MODELS [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . parametrize ( [string] , ALL_MODELS ) def test_models_repr ( model ) : [EOL] assert model . objects . first ( ) [EOL] assert repr ( model . objects . first ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] import pytest [EOL] from rest_framework . test import APIClient [EOL] [EOL] from backend . recordbin . models import AppToken [EOL] [EOL] [comment] [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . fixture def authenticated_client ( client ) : [EOL] token = AppToken . objects . first ( ) [EOL] client = APIClient ( ) [EOL] client . credentials ( HTTP_AUTHORIZATION = [string] + token . key ) [EOL] return client [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_api_view_unauthorized ( client ) : [EOL] response = client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_api_view_authorized ( authenticated_client ) : [EOL] response = authenticated_client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_api_admin ( client ) : [EOL] response = client . get ( [string] ) [EOL] assert response . status_code in ( [number] , [number] ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_openapi_spec ( authenticated_client ) : [EOL] response = authenticated_client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_docs ( authenticated_client , client ) : [EOL] [comment] [EOL] response = authenticated_client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_docs_unauthorized ( client ) : [EOL] response = client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_wsgi ( ) : [EOL] from backend . wsgi import application [comment] [EOL] [EOL] assert application [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_unauthorized ( client ) : [EOL] response = client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] import pytest [EOL] [EOL] from pyswagger import App , Security [EOL] from pyswagger . contrib . client . requests import Client [EOL] from backend . recordbin . models import AppToken [EOL] from rest_framework . authtoken . models import Token as UserToken [EOL] [EOL] [EOL] @ pytest . fixture def ADMIN_PAYLOAD ( ADMIN_CREDENTIALS ) : [EOL] return { [string] : ADMIN_CREDENTIALS } [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def app ( live_server ) : [EOL] [docstring] [EOL] app = App . _create_ ( f"{ live_server . url } [string] " ) [EOL] yield app [EOL] while live_server . thread . isAlive ( ) : [EOL] live_server . stop ( ) [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . fixture def client_usertoken ( app ) : [EOL] auth = Security ( app ) [EOL] usertoken = UserToken . objects . first ( ) [EOL] auth . update_with ( [string] , f" [string] { usertoken . key }" ) [EOL] client = Client ( auth ) [EOL] return client [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . fixture def client_apptoken ( app ) : [EOL] auth = Security ( app ) [EOL] apptoken = AppToken . objects . first ( ) [EOL] auth . update_with ( [string] , f" [string] { apptoken . key }" ) [EOL] client = Client ( auth ) [EOL] return client [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . fixture def app_token_readonly ( app ) : [EOL] apptoken = AppToken . objects . first ( ) [EOL] apptoken . permissions = [string] [EOL] apptoken . save ( ) [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . fixture def app_token_writeonly ( app ) : [EOL] apptoken = AppToken . objects . first ( ) [EOL] apptoken . permissions = [string] [EOL] apptoken . save ( ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_api_v1_records_list ( app , client_apptoken ) : [EOL] operation_name = [string] [EOL] req , resp = app . op [ operation_name ] ( ** { } ) [EOL] resp = client_apptoken . request ( ( req , resp ) ) [EOL] assert resp . status in ( [number] , [number] ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_api_v1_records_list_writeonly ( app , client_apptoken , app_token_writeonly ) : [EOL] operation_name = [string] [EOL] req , resp = app . op [ operation_name ] ( ** { } ) [EOL] resp = client_apptoken . request ( ( req , resp ) ) [EOL] assert resp . status == [number] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_api_v1_records_create ( app , client_apptoken ) : [EOL] operation_name = [string] [EOL] req , resp = app . op [ operation_name ] ( ** { } ) [EOL] resp = client_apptoken . request ( ( req , resp ) ) [EOL] assert resp . status == [number] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_api_v1_records_create_readonly ( app , client_apptoken , app_token_readonly ) : [EOL] operation_name = [string] [EOL] req , resp = app . op [ operation_name ] ( ** { } ) [EOL] resp = client_apptoken . request ( ( req , resp ) ) [EOL] assert resp . status == [number] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_api_v1_apps_list ( app , client_usertoken ) : [EOL] operation_name = [string] [EOL] req , resp = app . op [ operation_name ] ( ** { } ) [EOL] resp = client_usertoken . request ( ( req , resp ) ) [EOL] assert resp . status == [number] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_api_v1_tokens_list ( app , client_usertoken ) : [EOL] operation_name = [string] [EOL] req , resp = app . op [ operation_name ] ( ** { } ) [EOL] resp = client_usertoken . request ( ( req , resp ) ) [EOL] assert resp . status in ( [number] , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0