from typing import Dict , Any [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] [EOL] from typing import Any , Dict [EOL] [EOL] from werkzeug . utils import import_string [EOL] [EOL] [EOL] def parse_config ( obj ) : [EOL] [docstring] [EOL] config = { } [EOL] if isinstance ( obj , str ) : [EOL] obj = import_string ( obj ) [EOL] for key in dir ( obj ) : [EOL] if key . isupper ( ) : [EOL] config [ key ] = getattr ( obj , key ) [EOL] return config [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] [docstring] [EOL] [EOL] import subprocess [EOL] from os import path [EOL] [EOL] current_dir = path . dirname ( path . abspath ( __file__ ) ) [EOL] [EOL] [comment] [EOL] args = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , f" [string] { current_dir }" , [string] , [string] , [string] , f"{ current_dir } [string] " , [string] , [string] , f"{ current_dir } [string] " , [string] ] [EOL] [EOL] subprocess . Popen ( args ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0
from typing import Iterator , Dict , Any , Tuple , Union , Type [EOL] import typing [EOL] import builtins [EOL] import sqlalchemy [EOL] [docstring] [EOL] from __future__ import annotations [EOL] [EOL] import re [EOL] import traceback [EOL] from abc import ABCMeta [EOL] from typing import Any , Dict , Iterator , Tuple , Type , Union [EOL] [EOL] from sqlalchemy import create_engine [EOL] from sqlalchemy . dialects . sqlite . pysqlite import SQLiteDialect_pysqlite [EOL] from sqlalchemy . exc import SQLAlchemyError [EOL] from sqlalchemy . ext . declarative import DeclarativeMeta , declarative_base [EOL] from sqlalchemy . orm import scoped_session , sessionmaker [EOL] from sqlalchemy . sql . schema import Column , Table [EOL] from sqlalchemy . sql . sqltypes import Enum , SchemaType , TypeDecorator [EOL] [EOL] from exceptions import EnumParsingException , FailedToSpawnDBSession [EOL] [EOL] [EOL] class DeclarativeABCMeta ( DeclarativeMeta , ABCMeta ) : [EOL] [docstring] [EOL] [EOL] pass [EOL] [EOL] [EOL] Base = declarative_base ( metaclass = DeclarativeMeta ) [EOL] Base . query = None [EOL] db_engine = None [EOL] [EOL] [EOL] def create_session ( db_string , drop_tables = False ) : [EOL] [docstring] [EOL] import os [EOL] global db_engine , Base [EOL] [EOL] try : [EOL] [comment] [EOL] if db_engine is None or [string] not in os . environ or os . environ [ [string] ] == [string] : [EOL] db_engine = create_engine ( db_string , convert_unicode = True ) [EOL] db_session = scoped_session ( sessionmaker ( bind = db_engine ) ) [EOL] Base . query = db_session . query_property ( ) [EOL] [EOL] if drop_tables : [EOL] Base . metadata . drop_all ( bind = db_engine ) [EOL] [EOL] Base . metadata . create_all ( bind = db_engine ) [EOL] [EOL] return db_session [EOL] except SQLAlchemyError : [EOL] traceback . print_exc ( ) [EOL] raise FailedToSpawnDBSession ( ) [EOL] [EOL] [EOL] class EnumSymbol ( object ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , cls_ , name , value , description ) : [EOL] [docstring] [EOL] self . cls_ = cls_ [EOL] self . name = name [EOL] self . value = value [EOL] self . description = description [EOL] [EOL] def __reduce__ ( self ) : [EOL] [docstring] [EOL] return getattr , ( self . cls_ , self . name ) [EOL] [EOL] def __iter__ ( self ) : [EOL] [docstring] [EOL] return iter ( [ self . value , self . description ] ) [EOL] [EOL] def __repr__ ( self ) : [EOL] [docstring] [EOL] return f" [string] { self . name } [string] " [EOL] [EOL] [EOL] class EnumMeta ( type ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , classname , bases , dict_ ) : [EOL] [docstring] [EOL] self . _reg = ... [EOL] self . _reg = reg = self . _reg . copy ( ) [EOL] for k , v in dict_ . items ( ) : [EOL] if isinstance ( v , tuple ) : [EOL] sym = reg [ v [ [number] ] ] = EnumSymbol ( self , k , * v ) [EOL] setattr ( self , k , sym ) [EOL] return type . __init__ ( self , classname , bases , dict_ ) [EOL] [EOL] def __iter__ ( self ) : [EOL] [docstring] [EOL] return iter ( self . _reg . values ( ) ) [EOL] [EOL] [EOL] class DeclEnum ( object , metaclass = EnumMeta ) : [EOL] [docstring] [EOL] [EOL] _reg = { } [EOL] [EOL] @ classmethod def from_string ( cls , value ) : [EOL] [docstring] [EOL] try : [EOL] return cls . _reg [ value ] [EOL] except KeyError : [EOL] print ( f" [string] { cls . __name__ } [string] { value }" ) [EOL] raise EnumParsingException [EOL] [EOL] @ classmethod def values ( cls ) : [EOL] [docstring] [EOL] return cls . _reg . keys ( ) [EOL] [EOL] @ classmethod def db_type ( cls ) : [EOL] [docstring] [EOL] return DeclEnumType ( cls ) [EOL] [EOL] [EOL] class DeclEnumType ( SchemaType , TypeDecorator ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , enum ) : [EOL] self . enum = enum [EOL] self . impl = Enum ( * enum . values ( ) , name = [string] . format ( re . sub ( [string] , lambda m : [string] + m . group ( [number] ) . lower ( ) , enum . __name__ ) ) ) [EOL] [EOL] def _set_table ( self , table , column ) : [EOL] self . impl . _set_table ( table , column ) [EOL] [EOL] def copy ( self ) : [EOL] [docstring] [EOL] return DeclEnumType ( self . enum ) [EOL] [EOL] def process_bind_param ( self , value , dialect ) : [EOL] [docstring] [EOL] if value is None : [EOL] return None [EOL] return value . value [EOL] [EOL] def process_result_value ( self , value , dialect ) : [EOL] [docstring] [EOL] if value is None : [EOL] return None [EOL] return self . enum . from_string ( value . strip ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 $sqlalchemy.orm.scoped_session$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.Tuple[typing.Any,typing.Tuple[typing.Any,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $typing.Union[typing.Tuple[typing.Type[DeclEnum]],typing.Tuple[typing.Type[builtins.object]]]$ 0 $typing.Dict[builtins.str,typing.Union[builtins.str,typing.Tuple[builtins.str,builtins.str],builtins.classmethod,builtins.staticmethod]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.str,typing.Tuple[builtins.str,builtins.str],builtins.classmethod,builtins.staticmethod]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Union[typing.Tuple[typing.Type[DeclEnum]],typing.Tuple[typing.Type[builtins.object]]]$ 0 $typing.Dict[builtins.str,typing.Union[builtins.str,typing.Tuple[builtins.str,builtins.str],builtins.classmethod,builtins.staticmethod]]$ 0 0 0 0 $typing.Iterator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 $EnumSymbol$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $DeclEnumType$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 $sqlalchemy.sql.schema.Column$ 0 $sqlalchemy.sql.schema.Table$ 0 0 0 0 0 0 0 0 0 $sqlalchemy.sql.schema.Column$ 0 $sqlalchemy.sql.schema.Table$ 0 0 0 0 $DeclEnumType$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $EnumSymbol$ 0 $sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite$ 0 0 0 0 0 0 $EnumSymbol$ 0 0 0 0 0 0 0 0 $EnumSymbol$ 0 $EnumSymbol$ 0 0 0 $EnumSymbol$ 0 0 0 $builtins.str$ 0 $sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0
from typing import Dict , Type [EOL] import typing [EOL] import requests [EOL] import mailer [EOL] import builtins [EOL] [docstring] [EOL] [EOL] import traceback [EOL] from typing import Dict [EOL] [EOL] import requests [EOL] from requests . models import Response [EOL] [EOL] from exceptions import FailedToSendMail [EOL] [EOL] [EOL] class Mailer : [EOL] [docstring] [EOL] [EOL] auth = None [EOL] api_url = None [EOL] sender = None [EOL] [EOL] def __init__ ( self , domain , api_key , sender_name ) : [EOL] [docstring] [EOL] self . auth = ( [string] , api_key ) [EOL] self . api_url = f" [string] { domain }" [EOL] self . sender = f"{ sender_name } [string] { domain } [string] " [EOL] [EOL] def send_simple_message ( self , data ) : [EOL] [docstring] [EOL] data [ [string] ] = self . sender [EOL] try : [EOL] return requests . post ( f"{ self . api_url } [string] " , auth = self . auth , data = data ) [EOL] except ( requests . HTTPError , requests . ConnectionError ) : [EOL] traceback . print_exc ( ) [EOL] raise FailedToSendMail [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 $typing.Dict$ 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] [docstring] [EOL] import sys [EOL] [EOL] [EOL] class QueuedSampleNotFoundException ( Exception ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , message ) : [EOL] Exception . __init__ ( self ) [EOL] self . message = message [EOL] [EOL] [EOL] class SampleNotFoundException ( Exception ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , message ) : [EOL] Exception . __init__ ( self ) [EOL] self . message = message [EOL] [EOL] [EOL] class TestNotFoundException ( Exception ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , message ) : [EOL] Exception . __init__ ( self ) [EOL] self . message = message [EOL] [EOL] [EOL] class SecretKeyInstallationException ( Exception ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] Exception . __init__ ( self ) [EOL] sys . exit ( [number] ) [EOL] [EOL] [EOL] class IncompleteConfigException ( Exception ) : [EOL] [docstring] [EOL] [EOL] pass [EOL] [EOL] [EOL] class MissingConfigError ( Exception ) : [EOL] [docstring] [EOL] [EOL] pass [EOL] [EOL] [EOL] class FailedToSpawnDBSession ( Exception ) : [EOL] [docstring] [EOL] [EOL] pass [EOL] [EOL] [EOL] class EnumParsingException ( Exception ) : [EOL] [docstring] [EOL] [EOL] pass [EOL] [EOL] [EOL] class FailedToSendMail ( Exception ) : [EOL] [docstring] [EOL] [EOL] pass [EOL] [EOL] [EOL] class MissingPathToCCExtractor ( Exception ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] Exception . __init__ ( self ) [EOL] sys . exit ( [number] ) [EOL] [EOL] [EOL] class CCExtractorEndedWithNonZero ( Exception ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] Exception . __init__ ( self ) [EOL] sys . exit ( [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import logging [EOL] import builtins [EOL] [docstring] [EOL] [EOL] import logging [EOL] import logging . handlers [EOL] import os [EOL] from logging import Logger , StreamHandler [EOL] from logging . handlers import RotatingFileHandler [EOL] from typing import Union [EOL] [EOL] [EOL] class LogConfiguration : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , folder , filename , debug = False ) : [EOL] [comment] [EOL] self . _consoleLogger = logging . StreamHandler ( ) [EOL] self . _consoleLogger . setFormatter ( logging . Formatter ( [string] ) ) [EOL] if debug : [EOL] self . _consoleLogger . setLevel ( logging . DEBUG ) [EOL] else : [EOL] self . _consoleLogger . setLevel ( logging . INFO ) [EOL] [comment] [EOL] path = os . path . join ( folder , [string] , f'{ filename } [string] ' ) [EOL] self . _fileLogger = logging . handlers . RotatingFileHandler ( path , maxBytes = [number] * [number] , backupCount = [number] ) [EOL] self . _fileLogger . setLevel ( logging . DEBUG ) [EOL] [comment] [EOL] formatter = logging . Formatter ( [string] ) [EOL] self . _fileLogger . setFormatter ( formatter ) [EOL] [EOL] @ property def file_logger ( self ) : [EOL] [docstring] [EOL] return self . _fileLogger [EOL] [EOL] @ property def console_logger ( self ) : [EOL] [docstring] [EOL] return self . _consoleLogger [EOL] [EOL] def create_logger ( self , name ) : [EOL] [docstring] [EOL] logger = logging . getLogger ( name ) [EOL] logger . setLevel ( logging . DEBUG ) [EOL] [comment] [EOL] logger . addHandler ( self . file_logger ) [EOL] logger . addHandler ( self . console_logger ) [EOL] [EOL] return logger [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 $logging.StreamHandler$ 0 0 0 0 0 0 0 0 0 $logging.StreamHandler$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $logging.StreamHandler$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.StreamHandler$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $logging.handlers.RotatingFileHandler$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.handlers.RotatingFileHandler$ 0 0 0 0 0 0 0 0 0 0 $logging.Formatter$ 0 0 0 0 0 0 0 0 0 0 $logging.handlers.RotatingFileHandler$ 0 0 0 $logging.Formatter$ 0 0 0 0 0 0 $logging.handlers.RotatingFileHandler$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.StreamHandler$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 $builtins.str$ 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $builtins.str$ 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0
[docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] APPLICATION_ROOT = None [EOL] CSRF_ENABLED = True [EOL] DATABASE_URI = [string] [EOL] GITHUB_BOT = [string] [EOL] GITHUB_TOKEN = [string] [EOL] GITHUB_OWNER = [string] [EOL] GITHUB_REPOSITORY = [string] [EOL] SERVER_NAME = [string] [EOL] EMAIL_DOMAIN = [string] [EOL] EMAIL_API_KEY = [string] [EOL] HMAC_KEY = [string] [EOL] GITHUB_DEPLOY_KEY = [string] [EOL] GITHUB_CI_KEY = [string] [EOL] GITHUB_CLIENT_ID = [string] [EOL] GITHUB_CLIENT_SECRET = [string] [EOL] INSTALL_FOLDER = [string] [EOL] KVM_LINUX_NAME = [string] [EOL] KVM_WINDOWS_NAME = [string] [EOL] KVM_MAX_RUNTIME = [number] [comment] [EOL] SAMPLE_REPOSITORY = [string] [EOL] SESSION_COOKIE_PATH = [string] [EOL] FTP_PORT = [number] [EOL] MAX_CONTENT_LENGTH = [number] * [number] * [number] [EOL] MIN_PWD_LEN = [number] [EOL] MAX_PWD_LEN = [number] [EOL]	0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0
from typing import Callable , Dict , Optional , Any , List , Union [EOL] import typing [EOL] import builtins [EOL] import database [EOL] import mod_auth [EOL] [docstring] [EOL] [EOL] from datetime import date [EOL] from functools import wraps [EOL] from typing import Any , Callable , Dict , List , Optional , Union [EOL] [EOL] from flask import g , render_template , request [EOL] [EOL] from database import EnumSymbol [EOL] from mod_auth . models import User [EOL] [EOL] [EOL] def get_menu_entries ( user , title , icon , access = None , route = [string] , all_entries = None ) : [EOL] [docstring] [EOL] if all_entries is None : [EOL] all_entries = [ ] [EOL] if access is None : [EOL] access = [ ] [EOL] result = { [string] : title , [string] : icon } [EOL] allowed_entries = [ ] [EOL] passed = False [EOL] if user is not None : [EOL] if len ( route ) > [number] : [EOL] result [ [string] ] = route [EOL] passed = len ( access ) == [number] or user . role in access [EOL] else : [EOL] for entry in all_entries : [EOL] [comment] [EOL] if len ( entry [ [string] ] ) == [number] or user . role in entry [ [string] ] : [EOL] allowed_entries . append ( entry ) [EOL] if len ( allowed_entries ) > [number] : [EOL] result [ [string] ] = allowed_entries [EOL] passed = True [EOL] elif len ( access ) == [number] : [EOL] if len ( route ) > [number] : [EOL] result [ [string] ] = route [EOL] passed = True [EOL] else : [EOL] for entry in all_entries : [EOL] [comment] [EOL] if len ( entry [ [string] ] ) == [number] : [EOL] allowed_entries . append ( entry ) [EOL] if len ( allowed_entries ) > [number] : [EOL] result [ [string] ] = allowed_entries [EOL] passed = True [EOL] [EOL] return result if passed else { } [EOL] [EOL] [EOL] def template_renderer ( template = None , status = [number] ) : [EOL] [docstring] [EOL] def decorator ( f ) : [EOL] @ wraps ( f ) def decorated_function ( * args , ** kwargs ) : [EOL] template_name = template [EOL] if template_name is None : [EOL] template_name = request . endpoint . replace ( [string] , [string] ) + [string] [EOL] ctx = f ( * args , ** kwargs ) [EOL] [EOL] if ctx is None : [EOL] ctx = { } [EOL] elif not isinstance ( ctx , dict ) : [EOL] return ctx [EOL] [comment] [EOL] ctx [ [string] ] = [string] [EOL] ctx [ [string] ] = getattr ( g , [string] , [string] ) [EOL] ctx [ [string] ] = date . today ( ) . strftime ( [string] ) [EOL] try : [EOL] from build_commit import build_commit [EOL] except ImportError : [EOL] build_commit = [string] [EOL] ctx [ [string] ] = build_commit [EOL] user = getattr ( g , [string] , None ) [EOL] ctx [ [string] ] = user [EOL] [comment] [EOL] menu_entries = getattr ( g , [string] , { } ) [EOL] ctx [ [string] ] = [ menu_entries . get ( [string] , { } ) , menu_entries . get ( [string] , { } ) , menu_entries . get ( [string] , { } ) , menu_entries . get ( [string] , { } ) , menu_entries . get ( [string] , { } ) , menu_entries . get ( [string] , { } ) , menu_entries . get ( [string] , { } ) , menu_entries . get ( [string] , { } ) , menu_entries . get ( [string] , { } ) ] [EOL] ctx [ [string] ] = request . endpoint [EOL] [EOL] [comment] [EOL] return render_template ( template_name , ** ctx ) , status [EOL] [EOL] return decorated_function [EOL] [EOL] return decorator [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable
from typing import Dict , Type , Tuple [EOL] import typing [EOL] import builtins [EOL] import mod_upload [EOL] [docstring] [EOL] [EOL] import string [EOL] from typing import Any , Dict , Tuple , Type [EOL] [EOL] from sqlalchemy import Column , ForeignKey , Integer , String , Text [EOL] from sqlalchemy . orm import relationship [EOL] [EOL] import database [EOL] from database import Base , DeclEnum [EOL] [EOL] [EOL] class Platform ( DeclEnum ) : [EOL] [docstring] [EOL] [EOL] linux = [string] , [string] [EOL] windows = [string] , [string] [EOL] mac = [string] , [string] [EOL] bsd = [string] , [string] [EOL] [EOL] [EOL] class Upload ( Base ) : [EOL] [docstring] [EOL] [EOL] __tablename__ = [string] [EOL] __table_args__ = { [string] : [string] } [EOL] id = Column ( Integer , primary_key = True ) [EOL] user_id = Column ( Integer , ForeignKey ( [string] , onupdate = [string] , ondelete = [string] ) ) [EOL] user = relationship ( [string] , uselist = False ) [EOL] sample_id = Column ( Integer , ForeignKey ( [string] , onupdate = [string] , ondelete = [string] ) ) [EOL] sample = relationship ( [string] , uselist = False , back_populates = [string] ) [EOL] version_id = Column ( Integer , ForeignKey ( [string] , onupdate = [string] , ondelete = [string] ) ) [EOL] version = relationship ( [string] , uselist = False ) [EOL] platform = Column ( Platform . db_type ( ) , nullable = False ) [EOL] parameters = Column ( Text ( ) , nullable = False ) [EOL] notes = Column ( Text ( ) , nullable = False ) [EOL] [EOL] def __init__ ( self , user_id , sample_id , version_id , platform , parameters = [string] , notes = [string] ) : [EOL] [docstring] [EOL] self . user_id = user_id [EOL] self . sample_id = sample_id [EOL] self . version_id = version_id [EOL] self . platform = platform [EOL] self . parameters = parameters [EOL] self . notes = notes [EOL] [EOL] def __repr__ ( self ) : [EOL] [docstring] [EOL] return f" [string] { self . id } [string] " [EOL] [EOL] [EOL] class QueuedSample ( Base ) : [EOL] [docstring] [EOL] [EOL] __tablename__ = [string] [EOL] __table_args__ = { [string] : [string] } [EOL] id = Column ( Integer , primary_key = True ) [EOL] sha = Column ( String ( [number] ) , unique = True ) [EOL] extension = Column ( String ( [number] ) , nullable = False ) [comment] [EOL] original_name = Column ( Text ( ) , nullable = False ) [EOL] user_id = Column ( Integer , ForeignKey ( [string] , onupdate = [string] , ondelete = [string] ) ) [EOL] user = relationship ( [string] , uselist = False ) [EOL] [EOL] def __init__ ( self , sha , extension , original_name , user_id ) : [EOL] [docstring] [EOL] self . sha = sha [EOL] self . extension = extension [EOL] self . original_name = original_name [EOL] self . user_id = user_id [EOL] [EOL] @ property def filename ( self ) : [EOL] [docstring] [EOL] return f"{ self . sha }{ self . extension }" [EOL] [EOL] [EOL] class UploadLog ( Base ) : [EOL] [docstring] [EOL] [EOL] __tablename__ = [string] [EOL] __table_args__ = { [string] : [string] } [EOL] id = Column ( Integer , primary_key = True ) [EOL] message = Column ( Text ( ) , nullable = False ) [EOL] user_id = Column ( Integer , ForeignKey ( [string] , onupdate = [string] , ondelete = [string] ) ) [EOL] user = relationship ( [string] , uselist = False ) [EOL] [EOL] def __init__ ( self , message , user_id ) : [EOL] [docstring] [EOL] self . message = message [EOL] self . user_id = user_id [EOL] [EOL] [EOL] class FTPActive ( DeclEnum ) : [EOL] [docstring] [EOL] [EOL] disabled = [string] , [string] [EOL] enabled = [string] , [string] [EOL] [EOL] [EOL] class FTPCredentials ( Base ) : [EOL] [docstring] [EOL] [EOL] __tablename__ = [string] [EOL] __table_args__ = { [string] : [string] } [EOL] user_id = Column ( Integer , ForeignKey ( [string] , onupdate = [string] , ondelete = [string] ) , primary_key = True ) [EOL] user = relationship ( [string] , uselist = False ) [EOL] user_name = Column ( String ( [number] ) , nullable = False ) [EOL] status = Column ( FTPActive . db_type ( ) , nullable = False ) [EOL] [comment] [EOL] [comment] [EOL] password = Column ( String ( [number] ) , nullable = False ) [EOL] dir = Column ( String ( [number] ) , nullable = False ) [EOL] ip_access = Column ( String ( [number] ) , nullable = False ) [EOL] quota_files = Column ( Integer , nullable = False ) [EOL] uid = Column ( Integer , nullable = False , default = [number] ) [EOL] gid = Column ( Integer , nullable = False , default = [number] ) [EOL] [EOL] def __init__ ( self , user_id , user_name = None , status = FTPActive . enabled , password = None , home_directory = None , ip_access = [string] , quota_files = [number] ) : [EOL] [docstring] [EOL] self . user_id = user_id [EOL] self . status = status [EOL] self . ip_access = ip_access [EOL] self . quota_files = quota_files [EOL] [EOL] if user_name is None : [EOL] user_name = self . _create_random_string ( [number] ) [EOL] self . user_name = user_name [EOL] [EOL] if password is None : [EOL] password = self . _create_random_string ( [number] ) [EOL] self . password = password [EOL] [EOL] if home_directory is None : [EOL] home_directory = f' [string] { user_id }' [EOL] self . dir = home_directory [EOL] [EOL] @ staticmethod def _create_random_string ( length = [number] ) : [EOL] [docstring] [EOL] chars = string . ascii_letters + string . digits [EOL] import os [EOL] return [string] . join ( chars [ ord ( os . urandom ( [number] ) ) % len ( chars ) ] for i in range ( length ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Type[mod_upload.models.Upload]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_upload.models.Upload]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_upload.models.Upload]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_upload.models.Upload]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_upload.models.Upload]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_upload.models.Upload]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_upload.models.Upload]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_upload.models.Upload]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_upload.models.Upload]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_upload.models.Upload]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Type[mod_upload.models.QueuedSample]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_upload.models.QueuedSample]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_upload.models.QueuedSample]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_upload.models.QueuedSample]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_upload.models.QueuedSample]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_upload.models.QueuedSample]$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Type[mod_upload.models.UploadLog]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_upload.models.UploadLog]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_upload.models.UploadLog]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_upload.models.UploadLog]$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Type[mod_upload.models.FTPCredentials]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_upload.models.FTPCredentials]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_upload.models.FTPCredentials]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_upload.models.FTPCredentials]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_upload.models.FTPCredentials]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_upload.models.FTPCredentials]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_upload.models.FTPCredentials]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_upload.models.FTPCredentials]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_upload.models.FTPCredentials]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_upload.models.FTPCredentials]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Optional , Type [EOL] import typing [EOL] import mod_upload [EOL] [docstring] [EOL] [EOL] import mimetypes [EOL] import os [EOL] from typing import Any , Type [EOL] [EOL] import magic [EOL] from flask_wtf import FlaskForm [EOL] from wtforms import FileField , SelectField , SubmitField , TextAreaField [EOL] from wtforms . validators import DataRequired , ValidationError [EOL] [EOL] import mod_home . models [EOL] import mod_sample . models [EOL] import mod_upload . models [EOL] from mod_home . models import CCExtractorVersion [EOL] from mod_sample . models import ForbiddenExtension , ForbiddenMimeType [EOL] from mod_upload . models import Platform [EOL] [EOL] [EOL] class UploadForm ( FlaskForm ) : [EOL] [docstring] [EOL] [EOL] accept = [string] [EOL] [EOL] file = FileField ( [string] , [ DataRequired ( message = [string] ) ] , render_kw = { [string] : accept } ) [EOL] submit = SubmitField ( [string] ) [EOL] [EOL] @ staticmethod def validate_file ( form , field ) : [EOL] [docstring] [EOL] [comment] [EOL] filename , file_extension = os . path . splitext ( field . data . filename ) [EOL] if len ( file_extension ) > [number] : [EOL] forbidden_ext = ForbiddenExtension . query . filter ( ForbiddenExtension . extension == file_extension [ [number] : ] ) . first ( ) [EOL] if forbidden_ext is not None : [EOL] raise ValidationError ( [string] ) [EOL] mimetype = magic . from_buffer ( field . data . read ( [number] ) , mime = True ) [EOL] [comment] [EOL] field . data . seek ( [number] , [number] ) [EOL] [comment] [EOL] forbidden_mime = ForbiddenMimeType . query . filter ( ForbiddenMimeType . mimetype == mimetype ) . first ( ) [EOL] if forbidden_mime is not None : [EOL] raise ValidationError ( [string] ) [EOL] extension = mimetypes . guess_extension ( mimetype ) [EOL] if extension is not None : [EOL] forbidden_real = ForbiddenExtension . query . filter ( ForbiddenExtension . extension == extension [ [number] : ] ) . first ( ) [EOL] if forbidden_real is not None : [EOL] raise ValidationError ( [string] ) [EOL] [EOL] [EOL] class DeleteQueuedSampleForm ( FlaskForm ) : [EOL] [docstring] [EOL] [EOL] submit = SubmitField ( [string] ) [EOL] [EOL] [EOL] class CommonSampleForm ( FlaskForm ) : [EOL] [docstring] [EOL] [EOL] notes = TextAreaField ( [string] , [ DataRequired ( message = [string] ) ] ) [EOL] parameters = TextAreaField ( [string] , [ DataRequired ( message = [string] ) ] ) [EOL] platform = SelectField ( [string] , [ DataRequired ( message = [string] ) ] , coerce = str , choices = [ ( p . value , p . description ) for p in Platform ] ) [EOL] version = SelectField ( [string] , [ DataRequired ( message = [string] ) ] , coerce = int ) [EOL] report = SelectField ( [string] , choices = [ ( [string] , [string] ) , ( [string] , [string] ) ] ) [EOL] IssueTitle = TextAreaField ( [string] , [ DataRequired ( message = [string] ) ] ) [EOL] IssueBody = TextAreaField ( [string] , [ DataRequired ( message = [string] ) ] ) [EOL] [EOL] @ staticmethod def validate_version ( form , field ) : [EOL] [docstring] [EOL] version = CCExtractorVersion . query . filter ( CCExtractorVersion . id == field . data ) . first ( ) [EOL] if version is None : [EOL] raise ValidationError ( [string] ) [EOL] [EOL] [EOL] class FinishQueuedSampleForm ( CommonSampleForm ) : [EOL] [docstring] [EOL] [EOL] submit = SubmitField ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[mod_upload.forms.UploadForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[mod_upload.forms.UploadForm]$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_upload.forms.DeleteQueuedSampleForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_upload.forms.CommonSampleForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_upload.forms.CommonSampleForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_upload.forms.CommonSampleForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_upload.forms.CommonSampleForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_upload.forms.CommonSampleForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_upload.forms.CommonSampleForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_upload.forms.CommonSampleForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_upload.forms.FinishQueuedSampleForm]$ 0 0 0 0 0 0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
from typing import Type [EOL] import typing [EOL] import mod_sample [EOL] [docstring] [EOL] [EOL] from flask_wtf import FlaskForm [EOL] from wtforms import SubmitField [EOL] [EOL] from mod_upload . forms import CommonSampleForm [EOL] [EOL] [EOL] class EditSampleForm ( CommonSampleForm ) : [EOL] [docstring] [EOL] [EOL] submit = SubmitField ( [string] ) [EOL] [EOL] [EOL] class DeleteSampleForm ( FlaskForm ) : [EOL] [docstring] [EOL] [EOL] submit = SubmitField ( [string] ) [EOL] [EOL] [EOL] class DeleteAdditionalSampleForm ( FlaskForm ) : [EOL] [docstring] [EOL] [EOL] submit = SubmitField ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_sample.forms.EditSampleForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_sample.forms.DeleteSampleForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_sample.forms.DeleteAdditionalSampleForm]$ 0 0 0 0 0 0
[docstring] [EOL]	0 0
from typing import Dict , Tuple , Any , Type [EOL] import typing [EOL] import mod_regression [EOL] import builtins [EOL] [docstring] [EOL] [EOL] from typing import Any , Dict , Tuple , Type [EOL] [EOL] from sqlalchemy import ( Boolean , Column , ForeignKey , Integer , String , Table , Text ) [EOL] from sqlalchemy . orm import relationship [EOL] [EOL] import database [EOL] from database import Base , DeclEnum [EOL] [EOL] regressionTestLinkTable = Table ( [string] , Base . metadata , Column ( [string] , Integer , ForeignKey ( [string] , onupdate = [string] , ondelete = [string] ) ) , Column ( [string] , Integer , ForeignKey ( [string] , onupdate = [string] , ondelete = [string] ) ) ) [EOL] [EOL] [EOL] class Category ( Base ) : [EOL] [docstring] [EOL] [EOL] __tablename__ = [string] [EOL] __table_args__ = { [string] : [string] } [EOL] id = Column ( Integer , primary_key = True ) [EOL] name = Column ( String ( [number] ) , unique = True ) [EOL] description = Column ( Text ( ) , nullable = False ) [EOL] regression_tests = relationship ( [string] , secondary = regressionTestLinkTable , back_populates = [string] ) [EOL] [EOL] def __init__ ( self , name , description ) : [EOL] [docstring] [EOL] self . name = name [EOL] self . description = description [EOL] [EOL] def __repr__ ( self ) : [EOL] [docstring] [EOL] return f" [string] { self . name } [string] " [EOL] [EOL] [EOL] class InputType ( DeclEnum ) : [EOL] [docstring] [EOL] [EOL] file = [string] , [string] [EOL] stdin = [string] , [string] [EOL] udp = [string] , [string] [EOL] [EOL] [EOL] class OutputType ( DeclEnum ) : [EOL] [docstring] [EOL] [EOL] file = [string] , [string] [EOL] null = [string] , [string] [EOL] tcp = [string] , [string] [EOL] cea708 = [string] , [string] [EOL] multi_program = [string] , [string] [EOL] stdout = [string] , [string] [EOL] report = [string] , [string] [EOL] [EOL] [EOL] class RegressionTest ( Base ) : [EOL] [docstring] [EOL] [EOL] __tablename__ = [string] [EOL] __table_args__ = { [string] : [string] } [EOL] id = Column ( Integer , primary_key = True ) [EOL] sample_id = Column ( Integer , ForeignKey ( [string] , onupdate = [string] , ondelete = [string] ) ) [EOL] sample = relationship ( [string] , uselist = False , back_populates = [string] ) [EOL] command = Column ( Text ( ) , nullable = False ) [EOL] input_type = Column ( InputType . db_type ( ) ) [EOL] output_type = Column ( OutputType . db_type ( ) ) [EOL] categories = relationship ( [string] , secondary = regressionTestLinkTable , back_populates = [string] ) [EOL] output_files = relationship ( [string] , back_populates = [string] ) [EOL] expected_rc = Column ( Integer ) [EOL] active = Column ( Boolean ( ) , default = True ) [EOL] [EOL] def __init__ ( self , sample_id , command , input_type , output_type , category_id , expected_rc , active = True ) : [EOL] [docstring] [EOL] self . sample_id = sample_id [EOL] self . command = command [EOL] self . input_type = input_type [EOL] self . output_type = output_type [EOL] self . category_id = category_id [EOL] self . expected_rc = expected_rc [EOL] self . active = active [EOL] [EOL] def __repr__ ( self ) : [EOL] [docstring] [EOL] return f" [string] { self . id } [string] " [EOL] [EOL] [EOL] class RegressionTestOutput ( Base ) : [EOL] [docstring] [EOL] [EOL] __tablename__ = [string] [EOL] __table_args__ = { [string] : [string] } [EOL] id = Column ( Integer , primary_key = True ) [EOL] regression_id = Column ( Integer , ForeignKey ( [string] , onupdate = [string] , ondelete = [string] ) ) [EOL] regression_test = relationship ( [string] , back_populates = [string] ) [EOL] correct = Column ( Text ( ) ) [EOL] correct_extension = Column ( String ( [number] ) , nullable = False ) [comment] [EOL] expected_filename = Column ( Text ( ) ) [EOL] ignore = Column ( Boolean ( ) , default = False ) [EOL] [EOL] def __init__ ( self , regression_id , correct , correct_extension , expected_filename , ignore = False ) : [EOL] [docstring] [EOL] self . regression_id = regression_id [EOL] self . correct = correct [EOL] self . correct_extension = correct_extension [EOL] self . expected_filename = expected_filename [EOL] self . ignore = ignore [EOL] [EOL] def __repr__ ( self ) : [EOL] [docstring] [EOL] return f" [string] { self . id } [string] " [EOL] [EOL] @ property def filename_correct ( self ) : [EOL] [docstring] [EOL] return self . create_correct_filename ( self . correct ) [EOL] [EOL] def filename_expected ( self , sample_hash ) : [EOL] [docstring] [EOL] return f"{ sample_hash }{ self . expected_filename }{ self . correct_extension }" [EOL] [EOL] def create_correct_filename ( self , name ) : [EOL] [docstring] [EOL] return f"{ name }{ self . correct_extension }" [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Type[mod_regression.models.Category]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_regression.models.Category]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_regression.models.Category]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_regression.models.Category]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Type[mod_regression.models.RegressionTest]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_regression.models.RegressionTest]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_regression.models.RegressionTest]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_regression.models.RegressionTest]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_regression.models.RegressionTest]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_regression.models.RegressionTest]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_regression.models.RegressionTest]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Type[mod_regression.models.RegressionTest]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_regression.models.RegressionTest]$ 0 0 0 0 0 0 $typing.Type[mod_regression.models.RegressionTest]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Type[mod_regression.models.RegressionTestOutput]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_regression.models.RegressionTestOutput]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_regression.models.RegressionTestOutput]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_regression.models.RegressionTestOutput]$ 0 0 0 0 0 0 0 0 $typing.Type[mod_regression.models.RegressionTestOutput]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_regression.models.RegressionTestOutput]$ 0 0 0 0 0 0 0 0 $typing.Type[mod_regression.models.RegressionTestOutput]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import mod_regression [EOL] [docstring] [EOL] [EOL] from flask_wtf import FlaskForm [EOL] from wtforms import ( HiddenField , IntegerField , SelectField , StringField , SubmitField ) [EOL] from wtforms . validators import DataRequired , InputRequired [EOL] [EOL] from mod_regression . models import InputType , OutputType [EOL] [EOL] [EOL] class AddCategoryForm ( FlaskForm ) : [EOL] [docstring] [EOL] [EOL] category_name = StringField ( [string] , [ DataRequired ( message = [string] ) ] ) [EOL] category_description = StringField ( [string] ) [EOL] submit = SubmitField ( [string] ) [EOL] [EOL] [EOL] class CommonTestForm ( FlaskForm ) : [EOL] [docstring] [EOL] [EOL] sample_id = SelectField ( [string] , coerce = int ) [EOL] command = StringField ( [string] ) [EOL] input_type = SelectField ( [string] , [ DataRequired ( message = [string] ) ] , coerce = str , choices = [ ( i . value , i . description ) for i in InputType ] ) [EOL] output_type = SelectField ( [string] , [ DataRequired ( message = [string] ) ] , coerce = str , choices = [ ( o . value , o . description ) for o in OutputType ] ) [EOL] category_id = SelectField ( [string] , coerce = int ) [EOL] expected_rc = IntegerField ( [string] , [ InputRequired ( message = [string] ) ] ) [EOL] [EOL] [EOL] class AddTestForm ( CommonTestForm ) : [EOL] [docstring] [EOL] [EOL] submit = SubmitField ( [string] ) [EOL] [EOL] [EOL] class EditTestForm ( CommonTestForm ) : [EOL] [docstring] [EOL] [EOL] submit = SubmitField ( [string] ) [EOL] [EOL] [EOL] class ConfirmationForm ( FlaskForm ) : [EOL] [docstring] [EOL] [EOL] confirm = HiddenField ( [string] , default = [string] ) [EOL] submit = SubmitField ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_regression.forms.AddCategoryForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_regression.forms.AddCategoryForm]$ 0 0 0 0 0 0 $typing.Type[mod_regression.forms.AddCategoryForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_regression.forms.CommonTestForm]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_regression.forms.CommonTestForm]$ 0 0 0 0 0 0 $typing.Type[mod_regression.forms.CommonTestForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_regression.forms.CommonTestForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_regression.forms.CommonTestForm]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_regression.forms.CommonTestForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_regression.forms.AddTestForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_regression.forms.EditTestForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_regression.forms.ConfirmationForm]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_regression.forms.ConfirmationForm]$ 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import Any , List [EOL] import typing [EOL] import sys [EOL] from os import path [EOL] [EOL] from sqlalchemy . exc import IntegrityError [EOL] [EOL] sys . path . append ( path . dirname ( path . dirname ( path . abspath ( __file__ ) ) ) ) [EOL] [EOL] [EOL] def run ( ) : [EOL] from database import create_session [EOL] from mod_auth . models import User [EOL] from mod_home . models import CCExtractorVersion , GeneralData [EOL] from mod_regression . models import ( Category , InputType , OutputType , RegressionTest , RegressionTestOutput ) [EOL] from mod_sample . models import Sample [EOL] from mod_upload . models import Upload [EOL] [EOL] db = create_session ( sys . argv [ [number] ] ) [EOL] [EOL] entries = [ ] [EOL] categories = [ Category ( [string] , [string] ) , Category ( [string] , [string] ) , Category ( [string] , [string] ) , Category ( [string] , [string] ) , Category ( [string] , [string] ) ] [EOL] entries . extend ( categories ) [EOL] [EOL] samples = [ Sample ( [string] , [string] , [string] ) , Sample ( [string] , [string] , [string] ) ] [EOL] entries . extend ( samples ) [EOL] [EOL] cc_version = CCExtractorVersion ( [string] , [string] , [string] ) [EOL] entries . append ( cc_version ) [EOL] [EOL] regression_tests = [ RegressionTest ( [number] , [string] , InputType . file , OutputType . file , [number] , [number] ) , RegressionTest ( [number] , [string] , InputType . file , OutputType . file , [number] , [number] ) ] [EOL] entries . extend ( regression_tests ) [EOL] [EOL] gen_data = GeneralData ( [string] , [string] ) [EOL] entries . append ( gen_data ) [EOL] [EOL] regression_test_output = [ RegressionTestOutput ( [number] , [string] , [string] , [string] ) , RegressionTestOutput ( [number] , [string] , [string] , [string] ) ] [EOL] entries . extend ( regression_test_output ) [EOL] [EOL] for entry in entries : [EOL] try : [EOL] db . add ( entry ) [EOL] db . commit ( ) [EOL] except IntegrityError : [EOL] print ( [string] , entry , flush = True ) [EOL] db . rollback ( ) [EOL] [EOL] [EOL] run ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import sys [EOL] from os import path [EOL] [EOL] [comment] [EOL] sys . path . append ( path . dirname ( path . dirname ( path . abspath ( __file__ ) ) ) ) [EOL] [EOL] if len ( sys . argv ) != [number] : [EOL] print ( f' [string] { len ( sys . argv ) }' ) [EOL] exit ( ) [EOL] [EOL] [EOL] def run ( ) : [EOL] from database import create_session [EOL] from mod_auth . models import Role , User [EOL] [EOL] db = create_session ( sys . argv [ [number] ] ) [EOL] [comment] [EOL] admin = User . query . filter ( User . role == Role . admin ) . first ( ) [EOL] if admin is not None : [EOL] print ( f" [string] { admin . name }" ) [EOL] return [EOL] [EOL] user = User ( sys . argv [ [number] ] , Role . admin , sys . argv [ [number] ] , User . generate_hash ( sys . argv [ [number] ] ) ) [EOL] db . add ( user ) [EOL] db . commit ( ) [EOL] print ( f" [string] { user . name }" ) [EOL] [EOL] [EOL] run ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
	0
from typing import Type [EOL] import typing [EOL] import mod_ci [EOL] [docstring] [EOL] [EOL] from flask_wtf import FlaskForm [EOL] from wtforms import IntegerField , StringField , SubmitField [EOL] from wtforms . validators import DataRequired [EOL] [EOL] [EOL] class AddUsersToBlacklist ( FlaskForm ) : [EOL] [docstring] [EOL] [EOL] user_id = IntegerField ( [string] , [ DataRequired ( message = [string] ) ] ) [EOL] comment = StringField ( [string] ) [EOL] add = SubmitField ( [string] ) [EOL] [EOL] [EOL] class RemoveUsersFromBlacklist ( FlaskForm ) : [EOL] [docstring] [EOL] [EOL] user_id = IntegerField ( [string] , [ DataRequired ( message = [string] ) ] ) [EOL] remove = SubmitField ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_ci.forms.AddUsersToBlacklist]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_ci.forms.AddUsersToBlacklist]$ 0 0 0 0 0 0 $typing.Type[mod_ci.forms.AddUsersToBlacklist]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_ci.forms.RemoveUsersFromBlacklist]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_ci.forms.RemoveUsersFromBlacklist]$ 0 0 0 0 0 0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
from typing import Dict , Tuple , Any , Type [EOL] import typing [EOL] import builtins [EOL] import mod_auth [EOL] [docstring] [EOL] [EOL] import string [EOL] from typing import Any , Dict , Tuple , Type [EOL] [EOL] from passlib . apps import custom_app_context as pwd_context [EOL] from sqlalchemy import Column , Integer , String , Text [EOL] [EOL] import database [EOL] from database import Base , DeclEnum [EOL] [EOL] [EOL] class Role ( DeclEnum ) : [EOL] [docstring] [EOL] [EOL] admin = [string] , [string] [EOL] user = [string] , [string] [EOL] contributor = [string] , [string] [EOL] tester = [string] , [string] [EOL] [EOL] [EOL] class User ( Base ) : [EOL] [docstring] [EOL] [EOL] __tablename__ = [string] [EOL] __table_args__ = { [string] : [string] } [EOL] id = Column ( Integer , primary_key = True ) [EOL] name = Column ( String ( [number] ) , unique = True ) [EOL] email = Column ( String ( [number] ) , unique = True , nullable = True ) [EOL] github_token = Column ( Text ( ) , nullable = True ) [EOL] password = Column ( String ( [number] ) , unique = False , nullable = False ) [EOL] role = Column ( Role . db_type ( ) ) [EOL] [EOL] def __init__ ( self , name , role = Role . user , email = None , password = [string] , github_token = None ) : [EOL] [docstring] [EOL] self . name = name [EOL] self . email = email [EOL] self . password = password [EOL] self . role = role [EOL] self . github_token = github_token [EOL] [EOL] def __repr__ ( self ) : [EOL] [docstring] [EOL] return f' [string] { self . name } [string] ' [EOL] [EOL] @ staticmethod def generate_hash ( password ) : [EOL] [docstring] [EOL] [comment] [EOL] return pwd_context . encrypt ( password , category = [string] ) [EOL] [EOL] @ staticmethod def create_random_password ( length = [number] ) : [EOL] [docstring] [EOL] chars = string . ascii_letters + string . digits + [string] [EOL] import os [EOL] return [string] . join ( chars [ ord ( os . urandom ( [number] ) ) % len ( chars ) ] for i in range ( length ) ) [EOL] [EOL] def is_password_valid ( self , password ) : [EOL] [docstring] [EOL] return pwd_context . verify ( password , self . password ) [EOL] [EOL] def update_password ( self , new_password ) : [EOL] [docstring] [EOL] self . password = self . generate_hash ( new_password ) [EOL] [EOL] @ property def is_admin ( self ) : [EOL] [docstring] [EOL] return self . role == Role . admin [EOL] [EOL] def has_role ( self , name ) : [EOL] [docstring] [EOL] return self . role . value == name or self . is_admin [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_auth.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , List [EOL] import typing [EOL] import os [EOL] import unittest [EOL] from pathlib import Path [EOL] [EOL] from mod_test . nicediff . diff import get_html_diff [EOL] from tests . base import load_file_lines [EOL] [EOL] STATIC_MOCK_DIR = os . path . join ( Path ( __file__ ) . parents [ [number] ] , [string] ) [EOL] EXPECTED_RESULT_FILE = os . path . join ( STATIC_MOCK_DIR , [string] ) [EOL] OBTAINED_RESULT_FILE = os . path . join ( STATIC_MOCK_DIR , [string] ) [EOL] [EOL] [EOL] class TestDiff ( unittest . TestCase ) : [EOL] def test_if_same_diff_generated ( self ) : [EOL] expected_sub = [ [string] , [string] , [string] ] [EOL] obtained_sub = [ [string] , [string] , [string] ] [EOL] [EOL] expected_diff = [string] [EOL] [EOL] obtained_diff = get_html_diff ( expected_sub , obtained_sub ) [EOL] [EOL] self . assertEqual ( expected_diff , obtained_diff ) [EOL] [EOL] def test_if_view_limit_respected ( self ) : [EOL] [docstring] [EOL] expected_tr_count = [number] [comment] [EOL] obtained = load_file_lines ( OBTAINED_RESULT_FILE ) [EOL] expected = load_file_lines ( EXPECTED_RESULT_FILE ) [EOL] [EOL] obtained_diff = get_html_diff ( expected , obtained , to_view = True ) [EOL] obtained_tr_count = obtained_diff . count ( [string] ) [EOL] [EOL] self . assertEqual ( expected_tr_count , obtained_tr_count ) [EOL] [EOL] def test_if_full_diff_download ( self ) : [EOL] [docstring] [EOL] limit_tr_count = [number] [comment] [EOL] obtained = load_file_lines ( OBTAINED_RESULT_FILE ) [EOL] expected = load_file_lines ( EXPECTED_RESULT_FILE ) [EOL] [EOL] obtained_diff = get_html_diff ( expected , obtained , to_view = False ) [EOL] obtained_tr_count = obtained_diff . count ( [string] ) [EOL] [EOL] self . assertGreater ( obtained_tr_count , limit_tr_count ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0
from typing import Any , Dict , List [EOL] import typing [EOL] import unittest [EOL] from unittest import mock [EOL] [EOL] from werkzeug . exceptions import Forbidden , NotFound [EOL] [EOL] from mod_auth . models import Role [EOL] from mod_regression . models import RegressionTest [EOL] from mod_test . models import ( Test , TestPlatform , TestProgress , TestResult , TestResultFile , TestStatus ) [EOL] from tests . base import BaseTestCase [EOL] [EOL] [EOL] class TestControllers ( BaseTestCase ) : [EOL] @ staticmethod def create_completed_regression_t_entries ( test_id , regression_tests ) : [EOL] from flask import g [EOL] test_result_progress = [ TestProgress ( test_id , TestStatus . preparation , f" [string] { test_id } [string] " ) , TestProgress ( test_id , TestStatus . building , f" [string] { test_id } [string] " ) , TestProgress ( test_id , TestStatus . testing , f" [string] { test_id } [string] " ) , TestProgress ( test_id , TestStatus . completed , f" [string] { test_id } [string] " ) , ] [EOL] g . db . add_all ( test_result_progress ) [EOL] test_results = [ TestResult ( test_id , regression_test , [number] , [number] , [number] ) for regression_test in regression_tests ] [EOL] g . db . add_all ( test_results ) [EOL] test_result_files = [ TestResultFile ( test_id , regression_test , regression_test , [string] ) for regression_test in regression_tests ] [EOL] g . db . add_all ( test_result_files ) [EOL] g . db . commit ( ) [EOL] [EOL] def test_root ( self ) : [EOL] response = self . app . test_client ( ) . get ( [string] ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assert_template_used ( [string] ) [EOL] [EOL] def test_specific_test_loads ( self ) : [EOL] response = self . app . test_client ( ) . get ( [string] ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assert_template_used ( [string] ) [EOL] [EOL] def test_customize_test_loads ( self ) : [EOL] self . create_user_with_role ( self . user . name , self . user . email , self . user . password , Role . tester ) [EOL] self . create_forktest ( [string] , TestPlatform . linux , regression_tests = [ [number] ] ) [EOL] self . create_completed_regression_t_entries ( [number] , [ [number] ] ) [EOL] response = self . app . test_client ( ) . get ( [string] ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assert_template_used ( [string] ) [EOL] regression_tests = RegressionTest . query . all ( ) [EOL] self . assertIn ( regression_tests [ [number] ] . command , str ( response . data ) ) [EOL] self . assertNotIn ( regression_tests [ [number] ] . command , str ( response . data ) ) [EOL] [EOL] def test_restart_with_permission ( self ) : [EOL] self . create_user_with_role ( self . user . name , self . user . email , self . user . password , Role . tester ) [EOL] self . create_forktest ( [string] , TestPlatform . linux , regression_tests = [ [number] ] ) [EOL] self . create_completed_regression_t_entries ( [number] , [ [number] ] ) [EOL] with self . app . test_client ( ) as c : [EOL] response = c . post ( [string] , data = self . create_login_form_data ( self . user . email , self . user . password ) ) [EOL] response = c . get ( [string] ) [EOL] test = Test . query . filter ( Test . id == [number] ) . first ( ) [EOL] self . assertEqual ( test . finished , False ) [EOL] [EOL] def test_restart_fails_on_no_permission ( self ) : [EOL] self . create_user_with_role ( self . user . name , self . user . email , self . user . password , Role . user ) [EOL] with self . app . test_client ( ) as c : [EOL] response = c . post ( [string] , data = self . create_login_form_data ( self . user . email , self . user . password ) ) [EOL] response = c . get ( [string] ) [EOL] self . assert403 ( response ) [EOL] [EOL] def test_stop_with_permission ( self ) : [EOL] self . create_user_with_role ( self . user . name , self . user . email , self . user . password , Role . tester ) [EOL] self . create_forktest ( [string] , TestPlatform . linux , regression_tests = [ [number] ] ) [EOL] with self . app . test_client ( ) as c : [EOL] response = c . post ( [string] , data = self . create_login_form_data ( self . user . email , self . user . password ) ) [EOL] response = c . get ( [string] ) [EOL] test = Test . query . filter ( Test . id == [number] ) . first ( ) [EOL] self . assertEqual ( test . finished , True ) [EOL] [EOL] def test_stop_fails_on_no_permission ( self ) : [EOL] self . create_user_with_role ( self . user . name , self . user . email , self . user . password , Role . user ) [EOL] with self . app . test_client ( ) as c : [EOL] response = c . post ( [string] , data = self . create_login_form_data ( self . user . email , self . user . password ) ) [EOL] response = c . get ( [string] ) [EOL] self . assert403 ( response ) [EOL] [EOL] def test_get_json_data_throw_not_found_error ( self ) : [EOL] [docstring] [EOL] response = self . app . test_client ( ) . get ( [string] ) [EOL] self . assertEqual ( response . json [ [string] ] , [string] ) [EOL] self . assertEqual ( response . json [ [string] ] , [string] ) [EOL] [EOL] def test_get_nonexistent_test ( self ) : [EOL] [docstring] [EOL] response = self . app . test_client ( ) . get ( [string] ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assert_template_used ( [string] ) [EOL] [EOL] def test_ccextractor_version_not_found ( self ) : [EOL] [docstring] [EOL] response = self . app . test_client ( ) . get ( [string] ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assert_template_used ( [string] ) [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_data_for_test ( self , mock_test_progress , mock_category , mock_gen_data , mock_g ) : [EOL] [docstring] [EOL] from mod_test . controllers import get_data_for_test [EOL] [EOL] mock_test = mock . MagicMock ( ) [EOL] [EOL] result = get_data_for_test ( mock_test ) [EOL] [EOL] self . assertIsInstance ( result , dict ) [EOL] self . assertEqual ( [number] , mock_g . db . query . call_count ) [EOL] mock_category . query . filter . assert_called_once ( ) [EOL] mock_gen_data . query . filter . assert_called ( ) [EOL] [EOL] @ mock . patch ( [string] ) def test_get_json_data_no_test ( self , mock_test ) : [EOL] [docstring] [EOL] from mod_test . controllers import get_json_data [EOL] [EOL] mock_test . query . filter . return_value . first . return_value = None [EOL] expected = [string] [EOL] [EOL] result = get_json_data ( [number] ) [EOL] [EOL] self . assertEqual ( result . data , expected ) [EOL] mock_test . query . filter . assert_called_once_with ( mock_test . id == [number] ) [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_get_json_data ( self , mock_test , mock_jsonify ) : [EOL] [docstring] [EOL] from mod_test . controllers import get_json_data [EOL] [EOL] result = get_json_data ( [number] ) [EOL] [EOL] mock_test . query . filter . assert_called_once_with ( mock_test . id == [number] ) [EOL] mock_jsonify . assert_called_once ( ) [EOL] [EOL] @ mock . patch ( [string] ) def test_generate_diff_abort_403 ( self , mock_test_result_file ) : [EOL] [docstring] [EOL] from mod_test . controllers import generate_diff [EOL] [EOL] with self . assertRaises ( Forbidden ) : [EOL] generate_diff ( [number] , [number] , [number] ) [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_generate_diff_abort_404 ( self , mock_request , mock_test_result_file ) : [EOL] [docstring] [EOL] from mod_test . controllers import generate_diff [EOL] [EOL] mock_request . accept_mimetypes . best = [string] [EOL] mock_test_result_file . query . filter . return_value . first . return_value = None [EOL] [EOL] with self . assertRaises ( NotFound ) : [EOL] generate_diff ( [number] , [number] , [number] ) [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_generate_diff ( self , mock_request , mock_test_result_file ) : [EOL] [docstring] [EOL] from mod_test . controllers import generate_diff [EOL] [EOL] mock_request . accept_mimetypes . best = [string] [EOL] [EOL] response = generate_diff ( [number] , [number] , [number] ) [EOL] [EOL] self . assertTrue ( response , mock_test_result_file . filter ( ) . first ( ) . generate_html_diff ( ) ) [EOL] mock_test_result_file . filter . assert_called_once ( ) [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_generate_diff_download ( self , mock_response , mock_request , mock_test_result_file ) : [EOL] [docstring] [EOL] from mod_test . controllers import generate_diff [EOL] [EOL] mock_request . accept_mimetypes . best = [string] [EOL] [EOL] response = generate_diff ( [number] , [number] , [number] , to_view = [number] ) [EOL] [EOL] self . assertTrue ( response , mock_response ( ) ) [EOL] [EOL] @ mock . patch ( [string] ) def test_download_build_log_file_test_not_found ( self , mock_test ) : [EOL] [docstring] [EOL] from mod_test . controllers import ( TestNotFoundException , download_build_log_file ) [EOL] [EOL] mock_test . query . filter . return_value . first . return_value = None [EOL] [EOL] with self . assertRaises ( TestNotFoundException ) : [EOL] download_build_log_file ( [number] ) [EOL] [EOL] mock_test . query . filter . assert_called_once ( ) [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_download_build_log_file_log_not_file ( self , mock_test , mock_os ) : [EOL] [docstring] [EOL] from mod_test . controllers import ( TestNotFoundException , download_build_log_file ) [EOL] [EOL] mock_os . path . isfile . side_effect = TestNotFoundException ( [string] ) [EOL] [EOL] with self . assertRaises ( TestNotFoundException ) : [EOL] download_build_log_file ( [string] ) [EOL] [EOL] mock_test . query . filter . assert_called_once ( ) [EOL] mock_os . path . isfile . assert_called_once ( ) [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_download_build_log_file ( self , mock_serve , mock_test , mock_os ) : [EOL] [docstring] [EOL] from mod_test . controllers import ( TestNotFoundException , download_build_log_file ) [EOL] [EOL] response = download_build_log_file ( [string] ) [EOL] [EOL] self . assertEqual ( response , mock_serve ( ) ) [EOL] mock_test . query . filter . assert_called_once ( ) [EOL] mock_os . path . isfile . assert_called_once ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from unittest import mock [EOL] [EOL] from flask import g [EOL] from werkzeug . exceptions import NotFound [EOL] [EOL] from mod_auth . models import Role [EOL] from mod_customized . models import CustomizedTest [EOL] from mod_regression . models import ( Category , InputType , OutputType , RegressionTest ) [EOL] from mod_sample . models import Sample [EOL] from mod_test . models import Test [EOL] from tests . base import BaseTestCase [EOL] [EOL] [EOL] class TestControllers ( BaseTestCase ) : [EOL] def test_root ( self ) : [EOL] response = self . app . test_client ( ) . get ( [string] ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assert_template_used ( [string] ) [EOL] [EOL] def test_specific_regression_test_loads ( self ) : [EOL] response = self . app . test_client ( ) . get ( [string] ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assert_template_used ( [string] ) [EOL] regression_test = RegressionTest . query . filter ( RegressionTest . id == [number] ) . first ( ) [EOL] self . assertIn ( regression_test . command , str ( response . data ) ) [EOL] [EOL] def test_regression_test_status_toggle ( self ) : [EOL] self . create_user_with_role ( self . user . name , self . user . email , self . user . password , Role . admin ) [EOL] [EOL] with self . app . test_client ( ) as c : [EOL] c . post ( [string] , data = self . create_login_form_data ( self . user . email , self . user . password ) ) [EOL] [EOL] regression_test = RegressionTest . query . filter ( RegressionTest . id == [number] ) . first ( ) [EOL] response = c . get ( [string] ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assertEqual ( [string] , response . json [ [string] ] ) [EOL] if regression_test . active == [number] : [EOL] self . assertEqual ( [string] , response . json [ [string] ] ) [EOL] else : [EOL] self . assertEqual ( [string] , response . json [ [string] ] ) [EOL] [EOL] @ mock . patch ( [string] ) def test_download_result_file_not_found ( self , mock_regression_output ) : [EOL] [docstring] [EOL] from mod_regression . controllers import test_result_file [EOL] mock_regression_output . query . filter . return_value . first . return_value = None [EOL] [EOL] with self . assertRaises ( NotFound ) : [EOL] test_result_file ( [number] ) [EOL] [EOL] mock_regression_output . query . filter . assert_called_once_with ( mock_regression_output . id == [number] ) [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_download_result_file ( self , mock_regression_output , mock_serve ) : [EOL] [docstring] [EOL] from mod_regression . controllers import test_result_file [EOL] [EOL] response = test_result_file ( [number] ) [EOL] [EOL] mock_regression_output . query . filter . assert_called_once_with ( mock_regression_output . id == [number] ) [EOL] mock_serve . assert_called_once ( ) [EOL] [EOL] def test_regression_test_deletion_Without_login ( self ) : [EOL] response = self . app . test_client ( ) . get ( [string] ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assertIn ( [string] , response . data ) [EOL] [EOL] def test_delete_if_will_throw_404 ( self ) : [EOL] [docstring] [EOL] self . create_user_with_role ( self . user . name , self . user . email , self . user . password , Role . admin ) [EOL] [EOL] with self . app . test_client ( ) as c : [EOL] c . post ( [string] , data = self . create_login_form_data ( self . user . email , self . user . password ) ) [EOL] response = c . get ( [string] ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] [EOL] def test_delete ( self ) : [EOL] [docstring] [EOL] [EOL] customized_test = CustomizedTest ( test_id = [number] , regression_id = [number] ) [EOL] g . db . add ( customized_test ) [EOL] g . db . commit ( ) [EOL] [EOL] self . create_user_with_role ( self . user . name , self . user . email , self . user . password , Role . admin ) [EOL] [EOL] with self . app . test_client ( ) as c : [EOL] c . post ( [string] , data = self . create_login_form_data ( self . user . email , self . user . password ) ) [EOL] [EOL] response = c . get ( [string] ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] response = c . post ( [string] , data = dict ( hidden = [string] , submit = True ) ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assertEqual ( RegressionTest . query . filter ( RegressionTest . id == [number] ) . first ( ) , None ) [EOL] self . assertEqual ( CustomizedTest . query . filter ( CustomizedTest . regression_id == [number] ) . first ( ) , None ) [EOL] [EOL] def test_add_category ( self ) : [EOL] [docstring] [EOL] self . create_user_with_role ( self . user . name , self . user . email , self . user . password , Role . admin ) [EOL] [EOL] with self . app . test_client ( ) as c : [EOL] c . post ( [string] , data = self . create_login_form_data ( self . user . email , self . user . password ) ) [EOL] c . post ( [string] , data = dict ( category_name = [string] , category_description = [string] , submit = True ) ) [EOL] self . assertNotEqual ( Category . query . filter ( Category . name == [string] ) . first ( ) , None ) [EOL] [EOL] def test_add_category_empty ( self ) : [EOL] [docstring] [EOL] self . create_user_with_role ( self . user . name , self . user . email , self . user . password , Role . admin ) [EOL] [EOL] with self . app . test_client ( ) as c : [EOL] response = c . post ( [string] , data = self . create_login_form_data ( self . user . email , self . user . password ) ) [EOL] response = c . post ( [string] , data = dict ( category_name = [string] , category_description = [string] , submit = True ) ) [EOL] self . assertEqual ( Category . query . filter ( Category . name == [string] ) . first ( ) , None ) [EOL] self . assertEqual ( Category . query . filter ( Category . description == [string] ) . first ( ) , None ) [EOL] [EOL] def test_edit_category ( self ) : [EOL] [docstring] [EOL] self . create_user_with_role ( self . user . name , self . user . email , self . user . password , Role . admin ) [EOL] [EOL] with self . app . test_client ( ) as c : [EOL] c . post ( [string] , data = self . create_login_form_data ( self . user . email , self . user . password ) ) [EOL] new_category = Category ( name = [string] , description = [string] ) [EOL] g . db . add ( new_category ) [EOL] g . db . commit ( ) [EOL] c . post ( [string] , data = dict ( category_name = [string] , category_description = [string] , submit = True ) ) [EOL] self . assertNotEqual ( Category . query . filter ( Category . name == [string] ) . first ( ) , None ) [EOL] [EOL] def test_edit_category_empty ( self ) : [EOL] [docstring] [EOL] self . create_user_with_role ( self . user . name , self . user . email , self . user . password , Role . admin ) [EOL] [EOL] with self . app . test_client ( ) as c : [EOL] c . post ( [string] , data = self . create_login_form_data ( self . user . email , self . user . password ) ) [EOL] new_category = Category ( name = [string] , description = [string] ) [EOL] g . db . add ( new_category ) [EOL] g . db . commit ( ) [EOL] c . post ( [string] , data = dict ( category_name = [string] , category_description = [string] , submit = True ) ) [EOL] self . assertEqual ( Category . query . filter ( Category . name == [string] ) . first ( ) , None ) [EOL] self . assertEqual ( Category . query . filter ( Category . description == [string] ) . first ( ) , None ) [EOL] self . assertNotEqual ( Category . query . filter ( Category . name == [string] ) . first ( ) , None ) [EOL] [EOL] def test_edit_wrong_category ( self ) : [EOL] [docstring] [EOL] self . create_user_with_role ( self . user . name , self . user . email , self . user . password , Role . admin ) [EOL] [EOL] with self . app . test_client ( ) as c : [EOL] c . post ( [string] , data = self . create_login_form_data ( self . user . email , self . user . password ) ) [EOL] new_category = Category ( name = [string] , description = [string] ) [EOL] g . db . add ( new_category ) [EOL] g . db . commit ( ) [EOL] response = c . post ( [string] , data = dict ( category_name = [string] , category_description = [string] , submit = True ) ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] [EOL] def test_add_test ( self ) : [EOL] [docstring] [EOL] self . create_user_with_role ( self . user . name , self . user . email , self . user . password , Role . admin ) [EOL] [EOL] with self . app . test_client ( ) as c : [EOL] c . post ( [string] , data = self . create_login_form_data ( self . user . email , self . user . password ) ) [EOL] c . post ( [string] , data = dict ( sample_id = [number] , command = [string] , input_type = [string] , output_type = [string] , category_id = [number] , expected_rc = [number] , submit = True , ) ) [EOL] self . assertNotEqual ( RegressionTest . query . filter ( RegressionTest . id == [number] ) . first ( ) , None ) [EOL] [EOL] def test_add_test_empty_erc ( self ) : [EOL] [docstring] [EOL] self . create_user_with_role ( self . user . name , self . user . email , self . user . password , Role . admin ) [EOL] [EOL] with self . app . test_client ( ) as c : [EOL] c . post ( [string] , data = self . create_login_form_data ( self . user . email , self . user . password ) ) [EOL] c . post ( [string] , data = dict ( sample_id = [number] , command = [string] , input_type = InputType . file , output_type = OutputType . file , category_id = [number] , submit = True , ) ) [EOL] self . assertEqual ( RegressionTest . query . filter ( RegressionTest . id == [number] ) . first ( ) , None ) [EOL] [EOL] def test_category_deletion_without_login ( self ) : [EOL] response = self . app . test_client ( ) . get ( [string] ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assertIn ( [string] , response . data ) [EOL] [EOL] def test_category_delete_if_will_throw_404 ( self ) : [EOL] [docstring] [EOL] self . create_user_with_role ( self . user . name , self . user . email , self . user . password , Role . admin ) [EOL] [EOL] with self . app . test_client ( ) as c : [EOL] c . post ( [string] , data = self . create_login_form_data ( self . user . email , self . user . password ) ) [EOL] [EOL] response_regression = c . get ( [string] ) [EOL] self . assertEqual ( response_regression . status_code , [number] ) [EOL] [EOL] def test_category_delete ( self ) : [EOL] [docstring] [EOL] [EOL] self . create_user_with_role ( self . user . name , self . user . email , self . user . password , Role . admin ) [EOL] [EOL] with self . app . test_client ( ) as c : [EOL] c . post ( [string] , data = self . create_login_form_data ( self . user . email , self . user . password ) ) [EOL] response = c . get ( [string] ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] response = c . post ( [string] , data = dict ( hidden = [string] , submit = True ) ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] [EOL] def test_edit_test ( self ) : [EOL] [docstring] [EOL] self . create_user_with_role ( self . user . name , self . user . email , self . user . password , Role . admin ) [EOL] [EOL] with self . app . test_client ( ) as c : [EOL] c . post ( [string] , data = self . create_login_form_data ( self . user . email , self . user . password ) ) [EOL] c . post ( [string] , data = dict ( sample_id = [number] , command = [string] , input_type = [string] , output_type = [string] , category_id = [number] , expected_rc = [number] , submit = True , ) ) [EOL] self . assertNotEqual ( RegressionTest . query . filter ( RegressionTest . command == [string] ) . first ( ) , None ) [EOL] [EOL] category = Category . query . filter ( Category . id == [number] ) . first ( ) [EOL] for i in category . regression_tests : [EOL] self . assertNotEqual ( i . id , [number] ) [EOL] category = Category . query . filter ( Category . id == [number] ) . first ( ) [EOL] for i in category . regression_tests : [EOL] if i . id == [number] : [EOL] break [EOL] else : [EOL] self . fail ( [string] ) [EOL] [EOL] def test_edit_test_empty_erc ( self ) : [EOL] [docstring] [EOL] self . create_user_with_role ( self . user . name , self . user . email , self . user . password , Role . admin ) [EOL] [EOL] with self . app . test_client ( ) as c : [EOL] c . post ( [string] , data = self . create_login_form_data ( self . user . email , self . user . password ) ) [EOL] c . post ( [string] , data = dict ( sample_id = [number] , command = [string] , input_type = [string] , output_type = [string] , category_id = [number] , submit = True , ) ) [EOL] self . assertEqual ( RegressionTest . query . filter ( RegressionTest . command == [string] ) . first ( ) , None ) [EOL] [EOL] category = Category . query . filter ( Category . id == [number] ) . first ( ) [EOL] [EOL] for i in category . regression_tests : [EOL] if i . id == [number] : [EOL] break [EOL] else : [EOL] self . fail ( [string] ) [EOL] category = Category . query . filter ( Category . id == [number] ) . first ( ) [EOL] for i in category . regression_tests : [EOL] self . assertNotEqual ( i . id , [number] ) [EOL] [EOL] def test_edit_wrong_test ( self ) : [EOL] [docstring] [EOL] self . create_user_with_role ( self . user . name , self . user . email , self . user . password , Role . admin ) [EOL] [EOL] with self . app . test_client ( ) as c : [EOL] c . post ( [string] , data = self . create_login_form_data ( self . user . email , self . user . password ) ) [EOL] response_regression = c . post ( [string] , data = dict ( sample_id = [number] , command = [string] , input_type = [string] , output_type = [string] , expected_rc = [number] , category_id = [number] , submit = True , ) ) [EOL] self . assertEqual ( response_regression . status_code , [number] ) [EOL] [EOL] def test_edit_test_same_category ( self ) : [EOL] [docstring] [EOL] self . create_user_with_role ( self . user . name , self . user . email , self . user . password , Role . admin ) [EOL] [EOL] with self . app . test_client ( ) as c : [EOL] c . post ( [string] , data = self . create_login_form_data ( self . user . email , self . user . password ) ) [EOL] c . post ( [string] , data = dict ( sample_id = [number] , command = [string] , input_type = [string] , output_type = [string] , category_id = [number] , expected_rc = [number] , submit = True , ) ) [EOL] self . assertNotEqual ( RegressionTest . query . filter ( RegressionTest . command == [string] ) . first ( ) , None ) [EOL] [EOL] category = Category . query . filter ( Category . id == [number] ) . first ( ) [EOL] for i in category . regression_tests : [EOL] if i . id == [number] : [EOL] break [EOL] else : [EOL] self . fail ( [string] ) [EOL] [EOL] def test_if_test_regression_view_throws_a_not_found_error ( self ) : [EOL] [docstring] [EOL] response = self . app . test_client ( ) . get ( [string] ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] [EOL] def test_if_test_toggle_view_throws_a_not_found_error ( self ) : [EOL] [docstring] [EOL] self . create_user_with_role ( self . user . name , self . user . email , self . user . password , Role . admin ) [EOL] [EOL] with self . app . test_client ( ) as c : [EOL] c . post ( [string] , data = self . create_login_form_data ( self . user . email , self . user . password ) ) [EOL] [EOL] response = c . get ( [string] ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] [EOL] def test_sample_view ( self ) : [EOL] [docstring] [EOL] response = self . app . test_client ( ) . get ( [string] ) [EOL] sample = Sample . query . filter ( Sample . id == [number] ) . first ( ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assert_context ( [string] , sample ) [EOL] [EOL] def test_sample_view_nonexistent ( self ) : [EOL] [docstring] [EOL] response = self . app . test_client ( ) . get ( [string] ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import unittest [EOL] import mod_regression [EOL] import os [EOL] from unittest import mock [EOL] [EOL] from tests . base import BaseTestCase [EOL] [EOL] [EOL] class TestUpdateRegression ( BaseTestCase ) : [EOL] [EOL] def test_update_expected_results_not_path ( self ) : [EOL] [docstring] [EOL] from mod_regression . update_regression import update_expected_results [EOL] [EOL] expected = False [EOL] [EOL] response = update_expected_results ( [string] ) [EOL] [EOL] self . assertEqual ( response , expected ) [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_update_expected_results_zero_regressions ( self , mock_session , mock_os ) : [EOL] [docstring] [EOL] from mod_regression . update_regression import update_expected_results [EOL] [EOL] mock_os . path . isfile . return_value = True [EOL] mock_session . return_value . query . return_value . all . return_value = [ ] [EOL] expected = True [EOL] [EOL] response = update_expected_results ( [string] ) [EOL] [EOL] self . assertEqual ( response , expected ) [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_update_expected_results_ ( self , mock_test , mock_os ) : [EOL] [docstring] [EOL] from mod_regression . update_regression import update_expected_results [EOL] [EOL] mock_os . path . isfile . return_value = True [EOL] expected = True [EOL] num_tests = [number] [comment] [EOL] [EOL] response = update_expected_results ( [string] ) [EOL] [EOL] self . assertEqual ( response , expected ) [EOL] self . assertEqual ( mock_test . get_inputfilepath . call_count , num_tests ) [EOL] self . assertEqual ( mock_test . get_outputfilepath . call_count , num_tests ) [EOL] self . assertEqual ( mock_test . call_count , num_tests ) [EOL] mock_os . makedirs . assert_called_once ( ) [EOL] self . assertEqual ( mock_test . run_ccex . call_count , num_tests ) [EOL] [EOL] def test_Test_initiation ( self ) : [EOL] [docstring] [EOL] from mod_regression . update_regression import Test [EOL] [EOL] filename = [string] [EOL] args = [string] [EOL] output = [string] [EOL] [EOL] test = Test ( filename , args , output ) [EOL] [EOL] self . assertEqual ( test . input , filename ) [EOL] self . assertEqual ( test . args , args ) [EOL] self . assertEqual ( test . output , output ) [EOL] [EOL] def test_Test_get_inputfilepath ( self ) : [EOL] [docstring] [EOL] from mod_regression . update_regression import Test [EOL] from run import config [EOL] [EOL] reg_test = mock . MagicMock ( ) [EOL] reg_test . sample . filename = [string] [EOL] expected = os . path . abspath ( os . path . join ( os . path . join ( config . get ( [string] , [string] ) , [string] ) , reg_test . sample . filename ) ) [EOL] [EOL] filepath = Test . get_inputfilepath ( reg_test ) [EOL] [EOL] self . assertEqual ( filepath , expected ) [EOL] [EOL] def test_Test_get_outputfilepath ( self ) : [EOL] [docstring] [EOL] from mod_regression . update_regression import Test [EOL] from run import config [EOL] [EOL] class MockOutput : [EOL] def __init__ ( self , filename ) : [EOL] self . filename_correct = filename [EOL] [EOL] reg_test = mock . MagicMock ( ) [EOL] reg_test . output_files = [ MockOutput ( [string] ) ] [EOL] expected = os . path . abspath ( os . path . join ( os . path . join ( config . get ( [string] , [string] ) , [string] ) , reg_test . output_files [ [number] ] . filename_correct ) ) [EOL] [EOL] filepath = Test . get_outputfilepath ( reg_test ) [EOL] [EOL] self . assertEqual ( filepath , expected ) [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_Test_run_ccex ( self , mock_open , mock_subprocess ) : [EOL] [docstring] [EOL] from mod_regression . update_regression import Test [EOL] [EOL] mock_subprocess . run . return_value . returncode = [number] [EOL] path_to_ccex = [string] [EOL] log_file = [string] [EOL] input_file = [string] [EOL] args = [string] [EOL] output_file = [string] [EOL] [EOL] result = Test . run_ccex ( path_to_ccex , log_file , input_file , args , output_file ) [EOL] [EOL] self . assertEqual ( result , True ) [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_Test_run_ccex_with_error ( self , mock_open , mock_subprocess ) : [EOL] [docstring] [EOL] from mod_regression . update_regression import Test [EOL] [EOL] mock_subprocess . run . return_value . returncode = [number] [EOL] path_to_ccex = [string] [EOL] log_file = [string] [EOL] input_file = [string] [EOL] args = [string] [EOL] output_file = [string] [EOL] [EOL] result = Test . run_ccex ( path_to_ccex , log_file , input_file , args , output_file ) [EOL] [EOL] self . assertEqual ( result , False ) [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_Test_run_ccex_with_process_failure ( self , mock_open , mock_subprocess ) : [EOL] [docstring] [EOL] from subprocess import CalledProcessError [EOL] [EOL] from mod_regression . update_regression import Test [EOL] [EOL] mock_subprocess . run . side_effect = CalledProcessError ( [number] , [string] ) [EOL] mock_subprocess . CalledProcessError = CalledProcessError [EOL] path_to_ccex = [string] [EOL] log_file = [string] [EOL] input_file = [string] [EOL] args = [string] [EOL] output_file = [string] [EOL] [EOL] result = Test . run_ccex ( path_to_ccex , log_file , input_file , args , output_file ) [EOL] [EOL] self . assertEqual ( result , False ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $mod_regression.update_regression.Test$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $mod_regression.update_regression.Test$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $mod_regression.update_regression.Test$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $mod_regression.update_regression.Test$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0
from typing import Any [EOL] import typing [EOL] from markdown2 import markdown [EOL] [EOL] from tests . base import BaseTestCase [EOL] [EOL] [EOL] class TestMarkdown ( BaseTestCase ) : [EOL] [EOL] def test_heading ( self ) : [EOL] [docstring] [EOL] mkdown_test1 = [string] [EOL] expected_test1 = [string] [EOL] [EOL] mkdown_test2 = [string] [EOL] expected_test2 = [string] [EOL] [EOL] html_test1 = markdown ( mkdown_test1 ) [EOL] html_test2 = markdown ( mkdown_test2 ) [EOL] [EOL] assert expected_test1 == html_test1 , [string] [EOL] assert expected_test2 == html_test2 , [string] [EOL] [EOL] def test_strong_text ( self ) : [EOL] [docstring] [EOL] mkdown_test1 = [string] [EOL] expected_test1 = [string] [EOL] [EOL] html_test1 = markdown ( mkdown_test1 ) [EOL] [EOL] assert expected_test1 == html_test1 , [string] [EOL] [EOL] def test_italics_text ( self ) : [EOL] [docstring] [EOL] mkdown_test1 = [string] [EOL] expected_test1 = [string] [EOL] [EOL] html_test1 = markdown ( mkdown_test1 ) [EOL] [EOL] assert expected_test1 == html_test1 , [string] [EOL] [EOL] def test_link_text ( self ) : [EOL] [docstring] [EOL] mkdown_test1 = [string] [EOL] expected_test1 = [string] [EOL] [EOL] html_test1 = markdown ( mkdown_test1 ) [EOL] [EOL] assert expected_test1 == html_test1 , [string] [EOL] [EOL] def test_list_text ( self ) : [EOL] [docstring] [EOL] mkdown_test1 = [string] [EOL] expected_test1 = [string] [EOL] [EOL] html_test1 = markdown ( mkdown_test1 ) [EOL] [EOL] assert expected_test1 == html_test1 , [string] [EOL] [EOL] def test_code_text ( self ) : [EOL] [docstring] [EOL] mkdown_test1 = [string] [EOL] expected_test1 = [string] [EOL] [EOL] html_test1 = markdown ( mkdown_test1 ) [EOL] [EOL] assert expected_test1 == html_test1 , [string] [EOL] [EOL] def test_quote_text ( self ) : [EOL] [docstring] [EOL] mkdown_test1 = [string] [EOL] expected_test1 = [string] [EOL] [EOL] html_test1 = markdown ( mkdown_test1 ) [EOL] [EOL] assert expected_test1 == html_test1 , [string] [EOL] [EOL] def test_extra_link_new_tab ( self ) : [EOL] [docstring] [EOL] mkdown_test1 = [string] [EOL] expected_test1 = [string] [EOL] [EOL] html_test1 = markdown ( mkdown_test1 , extras = [ [string] ] ) [EOL] [EOL] assert expected_test1 == html_test1 , [string] [EOL] [EOL] def test_extra_task_list ( self ) : [EOL] [docstring] [EOL] mkdown_test1 = [string] [EOL] expected_test1 = ( [string] [string] ) [EOL] [EOL] html_test1 = markdown ( mkdown_test1 , extras = [ [string] ] ) [EOL] [EOL] assert expected_test1 == html_test1 , [string] [EOL] [EOL] def test_extra_code_friendliness ( self ) : [EOL] [docstring] [EOL] mkdown_test1 = [string] [EOL] expected_test1 = [string] [EOL] [EOL] mkdown_test2 = [string] [EOL] expected_test2 = [string] [EOL] [EOL] html_test1 = markdown ( mkdown_test1 , extras = [ [string] ] ) [EOL] html_test2 = markdown ( mkdown_test2 , extras = [ [string] ] ) [EOL] [EOL] assert expected_test1 == html_test1 , [string] [EOL] assert expected_test2 == html_test2 , [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0
from typing import Any [EOL] import typing [EOL] import tests [EOL] from flask import g [EOL] from wtforms . validators import ValidationError [EOL] [EOL] from mod_auth . forms import unique_username , valid_password [EOL] from mod_auth . models import User [EOL] from tests . base import BaseTestCase [EOL] [EOL] [EOL] class Field : [EOL] def __init__ ( self , data ) : [EOL] self . data = data [EOL] [EOL] [EOL] class TestForm ( BaseTestCase ) : [EOL] [EOL] def test_unique_username ( self ) : [EOL] [docstring] [EOL] user = User ( name = [string] ) [EOL] g . db . add ( user ) [EOL] g . db . commit ( ) [EOL] [EOL] user_field = Field ( [string] ) [EOL] [EOL] with self . assertRaises ( ValidationError ) : [EOL] unique_username ( None , user_field ) [EOL] [EOL] def test_empty_invalid_password ( self ) : [EOL] [docstring] [EOL] pass_field = Field ( [string] ) [EOL] [EOL] with self . assertRaises ( ValidationError ) : [EOL] valid_password ( None , pass_field ) [EOL] [EOL] def test_less_than_min_length_invalid_password ( self ) : [EOL] [docstring] [EOL] pass_field = Field ( [string] . join ( [ [string] * ( int ( self . app . config [ [string] ] ) - [number] ) ] ) ) [EOL] [EOL] with self . assertRaises ( ValidationError ) : [EOL] valid_password ( None , pass_field ) [EOL] [EOL] def test_more_than_max_length_invalid_password ( self ) : [EOL] [docstring] [EOL] pass_field = Field ( [string] . join ( [ [string] * ( int ( self . app . config [ [string] ] ) + [number] ) ] ) ) [EOL] [EOL] with self . assertRaises ( ValidationError ) : [EOL] valid_password ( None , pass_field ) [EOL] [EOL] def test_valid_password ( self ) : [EOL] [docstring] [EOL] pass_field = Field ( [string] . join ( [ [string] * ( int ( self . app . config [ [string] ] ) ) ] ) ) [EOL] [EOL] valid_password ( None , pass_field ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $tests.test_auth.TestForms.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.test_auth.TestForms.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 $tests.test_auth.TestForms.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.test_auth.TestForms.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 $tests.test_auth.TestForms.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.test_auth.TestForms.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 $tests.test_auth.TestForms.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.test_auth.TestForms.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 $tests.test_auth.TestForms.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.test_auth.TestForms.Field$ 0 0
from typing import Any , Dict , List [EOL] import typing [EOL] import tests [EOL] import json [EOL] import time [EOL] from unittest import mock [EOL] [EOL] from flask import url_for [EOL] from werkzeug . exceptions import Forbidden , NotFound [EOL] [EOL] from mod_auth import controllers [EOL] from mod_auth . controllers import ( fetch_username_from_token , generate_hmac_hash , github_token_validity , send_reset_email ) [EOL] from mod_auth . models import Role , User [EOL] from tests . base import BaseTestCase , mock_decorator , signup_information [EOL] [EOL] [EOL] [comment] [EOL] class MockUser : [EOL] def __init__ ( self , id = None , name = None , email = None , password = None , github_token = None , role = None ) : [EOL] self . id = id [EOL] self . name = name [EOL] self . email = email [EOL] self . password = password [EOL] self . github_token = github_token [EOL] self . role = role [EOL] [EOL] [EOL] class TestSignUp ( BaseTestCase ) : [EOL] [EOL] def test_if_email_signup_form_renders ( self ) : [EOL] response = self . app . test_client ( ) . get ( url_for ( [string] ) ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assert_template_used ( [string] ) [EOL] [EOL] def test_blank_email ( self ) : [EOL] response = self . signup ( email = [string] ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assertIn ( [string] , response . data ) [EOL] [EOL] def test_invalid_email_address ( self ) : [EOL] invalid_email_address = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] for email in invalid_email_address : [EOL] with self . subTest ( ) : [EOL] response = self . signup ( email ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assertIn ( [string] , response . data ) [EOL] [EOL] def test_existing_email_signup ( self ) : [EOL] response = self . signup ( email = signup_information [ [string] ] ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assertIn ( [string] , response . data ) [EOL] [EOL] def test_valid_email_signup ( self ) : [EOL] response = self . signup ( email = signup_information [ [string] ] ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assertIn ( [string] , response . data ) [EOL] [EOL] def signup ( self , email ) : [EOL] return self . app . test_client ( ) . post ( url_for ( [string] ) , data = dict ( email = email ) , follow_redirects = True ) [EOL] [EOL] [EOL] class TestLogin ( BaseTestCase ) : [EOL] [EOL] @ mock . patch ( [string] ) def test_not_show_login_user_logged_in ( self , mock_flash ) : [EOL] [docstring] [EOL] self . create_user_with_role ( self . user . name , self . user . email , self . user . password , Role . admin ) [EOL] with self . app . test_client ( ) as c : [EOL] response = c . post ( [string] , data = self . create_login_form_data ( self . user . email , self . user . password ) ) [EOL] response = c . get ( [string] ) [EOL] [EOL] self . assertStatus ( response , [number] ) [EOL] mock_flash . assert_called_once_with ( [string] , [string] ) [EOL] [EOL] [EOL] class CompleteSignUp ( BaseTestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . time_of_hash = int ( time . time ( ) ) [EOL] content_to_hash = f"{ signup_information [ [string] ] } [string] { self . time_of_hash }" [EOL] self . hash = generate_hmac_hash ( self . app . config . get ( [string] , [string] ) , content_to_hash ) [EOL] content_to_hash = f"{ signup_information [ [string] ] } [string] { self . time_of_hash }" [EOL] self . existing_user_hash = generate_hmac_hash ( self . app . config . get ( [string] , [string] ) , content_to_hash ) [EOL] [EOL] def test_if_link_expired ( self ) : [EOL] response = self . complete_signup ( signup_information [ [string] ] , self . time_of_hash + [number] , self . hash ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assertIn ( [string] , response . data ) [EOL] [EOL] def test_if_wrong_link ( self ) : [EOL] response = self . complete_signup ( signup_information [ [string] ] , self . time_of_hash , self . hash ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assertIn ( [string] , response . data ) [EOL] [EOL] def test_if_valid_link ( self ) : [EOL] response = self . complete_signup ( signup_information [ [string] ] , self . time_of_hash , self . hash ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assert_template_used ( [string] ) [EOL] [EOL] def test_if_password_is_blank ( self ) : [EOL] response = self . complete_signup ( signup_information [ [string] ] , self . time_of_hash , self . hash , name = signup_information [ [string] ] , password = [string] , password_repeat = [string] ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assert_template_used ( [string] ) [EOL] self . assertIn ( [string] , response . data ) [EOL] [EOL] def test_if_password_length_is_invalid ( self ) : [EOL] response = self . complete_signup ( signup_information [ [string] ] , self . time_of_hash , self . hash , name = signup_information [ [string] ] , password = [string] , password_repeat = [string] ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assert_template_used ( [string] ) [EOL] self . assertIn ( [string] , response . data ) [EOL] [EOL] def test_if_passwords_dont_match ( self ) : [EOL] response = self . complete_signup ( signup_information [ [string] ] , self . time_of_hash , self . hash , name = signup_information [ [string] ] , password = [string] , password_repeat = [string] ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assert_template_used ( [string] ) [EOL] self . assertIn ( [string] , response . data ) [EOL] [EOL] def complete_signup ( self , email , expires , mac , name = [string] , password = [string] , password_repeat = [string] ) : [EOL] return self . app . test_client ( ) . post ( url_for ( [string] , email = email , expires = expires , mac = mac ) , data = dict ( name = name , password = password , password_repeat = password_repeat ) , follow_redirects = True ) [EOL] [EOL] [EOL] class TestLogOut ( BaseTestCase ) : [EOL] [EOL] def test_if_logout_redirects_to_login ( self ) : [EOL] response = self . app . test_client ( ) . get ( url_for ( [string] ) , follow_redirects = True ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assertIn ( [string] , response . data ) [EOL] self . assert_template_used ( [string] ) [EOL] [EOL] [EOL] class TestGitHubFunctions ( BaseTestCase ) : [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_fetch_username_from_none_token ( self , mock_user_model , mock_g , mock_session ) : [EOL] [docstring] [EOL] mock_user_model . query . filter . return_value . first . return_value = MockUser ( ) [EOL] [EOL] return_value = fetch_username_from_token ( ) [EOL] [EOL] mock_user_model . query . filter . assert_called_once_with ( mock_user_model . id == mock_g . user . id ) [EOL] self . assertIsNone ( return_value ) [EOL] mock_session . assert_not_called ( ) [EOL] mock_g . log . error . assert_not_called ( ) [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_fetch_username_from_valid_token ( self , mock_user_model , mock_g , mock_session ) : [EOL] [docstring] [EOL] mock_user_model . query . filter . return_value . first . return_value = MockUser ( github_token = [string] ) [EOL] mock_session . return_value . get . return_value . json . return_value = { [string] : [string] } [EOL] [EOL] return_value = fetch_username_from_token ( ) [EOL] [EOL] mock_user_model . query . filter . assert_called_once_with ( mock_user_model . id == mock_g . user . id ) [EOL] mock_session . assert_called_once ( ) [EOL] self . assertEqual ( return_value , [string] , [string] ) [EOL] mock_g . log . error . assert_not_called ( ) [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_fetch_username_from_token_exception ( self , mock_user_model , mock_g , mock_session ) : [EOL] [docstring] [EOL] mock_user_model . query . filter . return_value . first . return_value = MockUser ( github_token = [string] ) [EOL] mock_session . return_value . get . side_effect = Exception [EOL] [EOL] return_value = fetch_username_from_token ( ) [EOL] [EOL] mock_user_model . query . filter . assert_called_once_with ( mock_user_model . id == mock_g . user . id ) [EOL] mock_session . assert_called_once ( ) [EOL] self . assertIsNone ( return_value ) [EOL] mock_g . log . error . assert_called_once_with ( [string] ) [EOL] [EOL] @ mock . patch ( [string] ) def test_github_callback_empty_post ( self , mock_post ) : [EOL] [docstring] [EOL] with self . app . test_client ( ) as client : [EOL] response = client . post ( [string] ) [EOL] [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] mock_post . assert_not_called ( ) [EOL] [EOL] @ mock . patch ( [string] ) def test_github_callback_empty_get ( self , mock_post ) : [EOL] [docstring] [EOL] with self . app . test_client ( ) as client : [EOL] response = client . get ( [string] ) [EOL] [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] mock_post . assert_not_called ( ) [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_github_callback_incomplete_get ( self , mock_post , mock_g , mock_user_model ) : [EOL] [docstring] [EOL] mock_post . return_value . json . return_value = { } [EOL] [EOL] with self . app . test_client ( ) as client : [EOL] response = client . get ( [string] , query_string = { [string] : [string] } ) [EOL] [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] mock_post . assert_called_once ( ) [EOL] mock_user_model . query . filter . assert_called_once ( ) [EOL] mock_g . db . commit . assert_not_called ( ) [EOL] mock_g . log . error . assert_called_once_with ( [string] ) [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_github_callback_valid_get ( self , mock_post , mock_g , mock_user_model ) : [EOL] [docstring] [EOL] mock_post . return_value . json . return_value = { [string] : [string] } [EOL] [EOL] with self . app . test_client ( ) as client : [EOL] response = client . get ( [string] , query_string = { [string] : [string] } ) [EOL] [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] mock_post . assert_called_once ( ) [EOL] self . assertEqual ( [number] , mock_user_model . query . filter . call_count ) [EOL] mock_user_model . query . filter . assert_called_with ( mock_user_model . id == mock_g . user . id ) [EOL] mock_g . db . commit . assert_called_once ( ) [EOL] mock_g . log . error . assert_not_called ( ) [EOL] [EOL] def test_github_redirect ( self ) : [EOL] [docstring] [EOL] self . create_user_with_role ( self . user . name , self . user . email , self . user . password , Role . admin , self . user . github_token ) [EOL] with self . app . test_client ( ) as c : [EOL] c . post ( [string] , data = self . create_login_form_data ( self . user . email , self . user . password ) ) [EOL] response = c . post ( [string] , data = dict ( current_password = self . user . password , name = [string] , email = self . user . email ) ) [EOL] user = User . query . filter ( User . name == [string] ) . first ( ) [EOL] self . assertNotEqual ( user , None ) [EOL] self . assertIn ( [string] , str ( response . data ) ) [EOL] [EOL] [EOL] class Miscellaneous ( BaseTestCase ) : [EOL] [EOL] def test_github_token_validity ( self ) : [EOL] [docstring] [EOL] res = github_token_validity ( [string] ) [EOL] self . assertEqual ( res , False ) [EOL] [EOL] [EOL] class ManageAccount ( BaseTestCase ) : [EOL] [EOL] def test_edit_username ( self ) : [EOL] [docstring] [EOL] self . create_user_with_role ( self . user . name , self . user . email , self . user . password , Role . admin ) [EOL] with self . app . test_client ( ) as c : [EOL] c . post ( [string] , data = self . create_login_form_data ( self . user . email , self . user . password ) ) [EOL] new_user_name = [string] [EOL] response = c . post ( [string] , data = dict ( current_password = self . user . password , name = new_user_name , email = self . user . email ) ) [EOL] user = User . query . filter ( User . name == new_user_name ) . first ( ) [EOL] self . assertNotEqual ( user , None ) [EOL] self . assertIn ( [string] , str ( response . data ) ) [EOL] [EOL] def test_edit_email ( self ) : [EOL] [docstring] [EOL] self . create_user_with_role ( self . user . name , self . user . email , self . user . password , Role . admin ) [EOL] with self . app . test_client ( ) as c : [EOL] c . post ( [string] , data = self . create_login_form_data ( self . user . email , self . user . password ) ) [EOL] new_user_email = [string] [EOL] response = c . post ( [string] , data = dict ( current_password = self . user . password , name = self . user . name , email = new_user_email ) ) [EOL] user = User . query . filter ( User . email == new_user_email ) . first ( ) [EOL] self . assertNotEqual ( user , None ) [EOL] self . assertIn ( [string] , str ( response . data ) ) [EOL] [EOL] def test_edit_invalid_email ( self ) : [EOL] [docstring] [EOL] self . create_user_with_role ( self . user . name , self . user . email , self . user . password , Role . admin ) [EOL] with self . app . test_client ( ) as c : [EOL] c . post ( [string] , data = self . create_login_form_data ( self . user . email , self . user . password ) ) [EOL] invalid_new_email = [string] [EOL] response = c . post ( [string] , data = dict ( current_password = self . user . password , name = self . user . name , email = invalid_new_email ) ) [EOL] user = User . query . filter ( User . email == invalid_new_email ) . first ( ) [EOL] self . assertEqual ( user , None ) [EOL] self . assertNotIn ( [string] , str ( response . data ) ) [EOL] self . assertIn ( [string] , str ( response . data ) ) [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_send_reset_email ( self , mock_app , mock_mailer , mock_flash , mock_hash , mock_url_for ) : [EOL] [docstring] [EOL] user = MockUser ( [number] , [string] , [string] , [string] ) [EOL] mock_mailer . send_simple_message . return_value = True [EOL] [EOL] send_reset_email ( user ) [EOL] [EOL] mock_hash . assert_called_once ( ) [EOL] mock_app . jinja_env . get_or_select_template . assert_called_once_with ( [string] ) [EOL] mock_url_for . assert_called_once ( ) [EOL] mock_mailer . send_simple_message . assert_called_once ( ) [EOL] mock_flash . assert_not_called ( ) [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_send_reset_email_fail ( self , mock_app , mock_mailer , mock_flash , mock_hash , mock_url_for ) : [EOL] [docstring] [EOL] user = MockUser ( [number] , [string] , [string] , [string] ) [EOL] mock_mailer . send_simple_message . return_value = False [EOL] [EOL] send_reset_email ( user ) [EOL] [EOL] mock_hash . assert_called_once ( ) [EOL] mock_app . jinja_env . get_or_select_template . assert_called_once_with ( [string] ) [EOL] mock_url_for . assert_called_once ( ) [EOL] mock_mailer . send_simple_message . assert_called_once ( ) [EOL] mock_flash . assert_called_once_with ( [string] , [string] ) [EOL] [EOL] def test_account_reset_get ( self ) : [EOL] [docstring] [EOL] with self . app . test_client ( ) as client : [EOL] response = client . get ( [string] ) [EOL] [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assertIn ( [string] , str ( response . data ) ) [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_account_reset_post_user_none ( self , mock_user_model , mock_mail , mock_flash ) : [EOL] [docstring] [EOL] mock_user_model . query . filter_by . return_value . first . return_value = None [EOL] email_to_test = [string] [EOL] form_data = { [string] : email_to_test } [EOL] [EOL] with self . app . test_client ( ) as client : [EOL] response = client . post ( [string] , data = form_data ) [EOL] [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assertIn ( [string] , str ( response . data ) ) [EOL] mock_user_model . query . filter_by . assert_called_once_with ( email = email_to_test ) [EOL] mock_mail . assert_not_called ( ) [EOL] mock_flash . assert_called_once ( ) [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_account_reset_post_user ( self , mock_user_model , mock_mail , mock_flash ) : [EOL] [docstring] [EOL] mock_user_model . query . filter_by . return_value . first . return_value = [string] [EOL] email_to_test = [string] [EOL] form_data = { [string] : email_to_test } [EOL] [EOL] with self . app . test_client ( ) as client : [EOL] response = client . post ( [string] , data = form_data ) [EOL] [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assertIn ( [string] , str ( response . data ) ) [EOL] mock_user_model . query . filter_by . assert_called_once_with ( email = email_to_test ) [EOL] mock_mail . assert_called_once_with ( [string] ) [EOL] mock_flash . assert_called_once ( ) [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_complete_reset_expired ( self , mock_time , mock_flash ) : [EOL] [docstring] [EOL] time_now = [number] [EOL] mock_time . return_value = time_now [EOL] time_expired = [number] [EOL] [EOL] with self . app . test_client ( ) as client : [EOL] response = client . post ( f" [string] { time_expired } [string] " ) [EOL] [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assertIn ( [string] , str ( response . data ) ) [EOL] mock_flash . assert_called_once ( ) [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] , return_value = True ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_complete_reset_get ( self , mock_time , mock_flash , mock_hmac , mock_user ) : [EOL] [docstring] [EOL] time_now = [number] [EOL] mock_time . return_value = time_now [EOL] mock_user . query . filter_by . return_value . first . return_value = MockUser ( email = [string] , name = [string] , password = [string] ) [EOL] [EOL] with self . app . test_client ( ) as client : [EOL] response = client . get ( f" [string] { time_now } [string] " ) [EOL] [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assertIn ( [string] , str ( response . data ) ) [EOL] mock_user . query . filter_by . assert_called_once_with ( id = [number] ) [EOL] mock_hmac . assert_called_once ( ) [EOL] mock_flash . assert_not_called ( ) [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] , return_value = True ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_complete_reset_post_valid ( self , mock_g , mock_form , mock_time , mock_flash , mock_hmac , mock_user ) : [EOL] [docstring] [EOL] time_now = [number] [EOL] mock_time . return_value = time_now [EOL] mock_user . query . filter_by . return_value . first . return_value = MockUser ( email = [string] , name = [string] , password = [string] ) [EOL] [EOL] with self . app . test_client ( ) as client : [EOL] new_password = [string] [EOL] response = client . post ( f" [string] { time_now } [string] " , data = { [string] : new_password , [string] : new_password , [string] : True } ) [EOL] [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] mock_user . query . filter_by . assert_called_once_with ( id = [number] ) [EOL] mock_hmac . assert_called_once ( ) [EOL] mock_user . generate_hash . assert_called_once ( ) [EOL] mock_g . db . commit . assert_called_once ( ) [EOL] mock_g . mailer . send_simple_message . assert_called_once ( ) [EOL] mock_flash . assert_not_called ( ) [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_complete_signup_expired ( self , mock_time , mock_flash ) : [EOL] [docstring] [EOL] time_now = [number] [EOL] mock_time . return_value = time_now [EOL] time_expired = [number] [EOL] [EOL] with self . app . test_client ( ) as client : [EOL] response = client . post ( f" [string] { time_expired } [string] " ) [EOL] [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assertIn ( [string] , str ( response . data ) ) [EOL] mock_flash . assert_called_once ( ) [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) @ mock . patch ( [string] , return_value = True ) @ mock . patch ( [string] ) def test_complete_signup_user_already_exists ( self , mock_time , mock_hmac , mock_flash , mock_user ) : [EOL] [docstring] [EOL] time_now = [number] [EOL] mock_time . return_value = time_now [EOL] mock_user . query . filter_by . return_value . first . return_value = MockUser ( email = [string] , name = [string] , password = [string] ) [EOL] [EOL] with self . app . test_client ( ) as client : [EOL] response = client . post ( f" [string] { time_now } [string] " ) [EOL] [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assertIn ( [string] , str ( response . data ) ) [EOL] mock_hmac . assert_called_once ( ) [EOL] mock_user . query . filter_by . assert_called_once_with ( email = [string] ) [EOL] mock_flash . assert_called_once_with ( mock . ANY , [string] ) [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) @ mock . patch ( [string] , return_value = True ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_complete_signup ( self , mock_g , mock_form , mock_time , mock_hmac , mock_flash , mock_user ) : [EOL] [docstring] [EOL] time_now = [number] [EOL] mock_time . return_value = time_now [EOL] mock_form . return_value . validate_on_submit . return_value = True [EOL] mock_user . query . filter_by . return_value . first . return_value = None [EOL] mock_user . return_value = MockUser ( id = [number] ) [EOL] [EOL] with self . app . test_client ( ) as client : [EOL] response = client . post ( f" [string] { time_now } [string] " ) [EOL] [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assertIn ( [string] , str ( response . data ) ) [EOL] mock_hmac . assert_called_once ( ) [EOL] mock_user . query . filter_by . assert_called_once_with ( email = [string] ) [EOL] mock_form . assert_called_once_with ( ) [EOL] mock_user . assert_called_once ( ) [EOL] mock_g . db . add . assert_called_once ( ) [EOL] mock_g . mailer . send_simple_message . assert_called_once ( ) [EOL] mock_flash . assert_not_called ( ) [EOL] [EOL] [EOL] class ManageUsers ( BaseTestCase ) : [EOL] [EOL] @ mock . patch ( [string] ) def test_user_view_not_loggen_in ( self , mock_g ) : [EOL] [docstring] [EOL] [EOL] with self . app . test_client ( ) as client : [EOL] response = client . get ( [string] ) [EOL] [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] [EOL] @ mock . patch ( [string] , side_effect = mock_decorator ) @ mock . patch ( [string] ) def test_user_view_wrong_user ( self , mock_g , mock_login ) : [EOL] [docstring] [EOL] from mod_auth . controllers import user [EOL] [EOL] mock_g . user = MockUser ( id = [number] , role = [string] ) [EOL] [EOL] with self . assertRaises ( Forbidden ) : [EOL] user ( [number] ) [EOL] [EOL] @ mock . patch ( [string] , side_effect = mock_decorator ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_user_view_non_existent_user ( self , mock_user , mock_g , mock_login ) : [EOL] [docstring] [EOL] from mod_auth . controllers import user [EOL] [EOL] mock_user . query . filter_by . return_value . first . return_value = None [EOL] mock_g . user = MockUser ( id = [number] , role = [string] ) [EOL] [EOL] with self . assertRaises ( NotFound ) : [EOL] user ( [number] ) [EOL] [EOL] mock_user . query . filter_by . assert_called_once_with ( id = [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] @ mock . patch ( [string] , side_effect = mock_decorator ) @ mock . patch ( [string] ) def test_user_reset_wrong_user ( self , mock_g , mock_login ) : [EOL] [docstring] [EOL] from mod_auth . controllers import reset_user [EOL] [EOL] mock_g . user = MockUser ( id = [number] , role = [string] ) [EOL] [EOL] with self . assertRaises ( Forbidden ) : [EOL] reset_user ( [number] ) [EOL] [EOL] @ mock . patch ( [string] , side_effect = mock_decorator ) @ mock . patch ( [string] ) def test_user_role_wrong_user ( self , mock_g , mock_login ) : [EOL] [docstring] [EOL] from mod_auth . controllers import role [EOL] [EOL] mock_g . user = MockUser ( id = [number] , role = [string] ) [EOL] [EOL] with self . assertRaises ( Forbidden ) : [EOL] role ( [number] ) [EOL] [EOL] @ mock . patch ( [string] , side_effect = mock_decorator ) @ mock . patch ( [string] ) def test_user_deactivate_wrong_user ( self , mock_g , mock_login ) : [EOL] [docstring] [EOL] from mod_auth . controllers import deactivate [EOL] [EOL] mock_g . user = MockUser ( id = [number] , role = [string] ) [EOL] [EOL] with self . assertRaises ( Forbidden ) : [EOL] deactivate ( [number] ) [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] , side_effect = mock_decorator ) @ mock . patch ( [string] ) def test_user_deactivate_non_existent_user ( self , mock_g , mock_login , mock_user ) : [EOL] [docstring] [EOL] from mod_auth . controllers import deactivate [EOL] [EOL] mock_g . user = MockUser ( id = [number] , role = [string] ) [EOL] mock_user . query . filter_by . return_value . first . return_value = None [EOL] [EOL] with self . assertRaises ( NotFound ) : [EOL] deactivate ( [number] ) [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) @ mock . patch ( [string] , side_effect = mock_decorator ) @ mock . patch ( [string] ) def test_user_deactivate_non_existent_user ( self , mock_g , mock_login , mock_user , mock_form , mock_url_for ) : [EOL] [docstring] [EOL] from mod_auth . controllers import deactivate [EOL] [EOL] mock_user . query . filter_by . return_value . first . return_value = MockUser ( id = [number] , role = None ) [EOL] mock_g . user = MockUser ( id = [number] , role = [string] ) [EOL] [EOL] deactivate ( [number] ) [EOL] [EOL] mock_user . query . filter_by . assert_called_once_with ( id = [number] ) [EOL] mock_form . assert_called_once ( ) [EOL] mock_form . return_value . validate_on_submit . assert_called_once ( ) [EOL] mock_g . db . commit . assert_called_once ( ) [EOL] mock_url_for . assert_called_once_with ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.test_auth.TestControllers.MockUser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.test_auth.TestControllers.MockUser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.test_auth.TestControllers.MockUser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.test_auth.TestControllers.MockUser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from mod_auth . models import Role [EOL] from tests . base import BaseTestCase [EOL] [EOL] [EOL] class TestControllers ( BaseTestCase ) : [EOL] [EOL] def test_root ( self ) : [EOL] response = self . app . test_client ( ) . get ( [string] ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assert_template_used ( [string] ) [EOL] [EOL] def test_about ( self ) : [EOL] response = self . app . test_client ( ) . get ( [string] ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assert_template_used ( [string] ) [EOL] [EOL] def test_if_user_has_test_access_rights ( self ) : [EOL] [docstring] [EOL] [EOL] self . create_user_with_role ( self . user . name , self . user . email , self . user . password , Role . admin ) [EOL] [EOL] with self . app . test_client ( ) as c : [EOL] response_login = c . post ( [string] , data = self . create_login_form_data ( self . user . email , self . user . password ) ) [EOL] [EOL] response = c . get ( [string] ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] self . assert_context ( [string] , True ) [EOL] self . assert_template_used ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import OrderedDict , Dict , List , Optional , Any , Union [EOL] import typing [EOL] import unittest [EOL] import mod_sample [EOL] import collections [EOL] from collections import OrderedDict [EOL] from unittest import mock [EOL] [EOL] from mod_sample . media_info_parser import ( InvalidMediaInfoError , MediaInfoFetcher ) [EOL] from tests . base import BaseTestCase [EOL] [EOL] [EOL] class MockSample : [EOL] [EOL] def __init__ ( self ) : [EOL] self . sha = [string] [EOL] self . filename = [string] [EOL] [EOL] [EOL] MOCK_MediaInfoFetcher = mock . MagicMock ( ) [EOL] [EOL] [EOL] class TestMediaInfoFetcher ( BaseTestCase ) : [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_init ( self , mock_xml , mock_os , mock_open ) : [EOL] [docstring] [EOL] mock_xml . parse . return_value = { [string] : [string] } [EOL] [EOL] MediaInfoFetcher ( MockSample ( ) ) [EOL] [EOL] mock_os . path . join . assert_called_once ( ) [EOL] mock_os . path . isfile . assert_called_once ( ) [EOL] mock_xml . parse . assert_called_once_with ( mock_open ( ) . __enter__ ( ) . read ( ) ) [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_init_invalid_media_xml ( self , mock_xml , mock_os , mock_open ) : [EOL] [docstring] [EOL] mock_xml . parse . side_effect = Exception [EOL] [EOL] with self . assertRaises ( InvalidMediaInfoError ) : [EOL] MediaInfoFetcher ( MockSample ( ) ) [EOL] [EOL] mock_os . path . join . assert_called_once ( ) [EOL] mock_os . path . isfile . assert_called_once ( ) [EOL] mock_xml . parse . assert_called_once_with ( mock_open ( ) . __enter__ ( ) . read ( ) ) [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_init_invalid_media_info_path ( self , mock_xml , mock_os , mock_open ) : [EOL] [docstring] [EOL] mock_os . path . isfile . return_value = False [EOL] [EOL] with self . assertRaises ( InvalidMediaInfoError ) : [EOL] MediaInfoFetcher ( MockSample ( ) ) [EOL] [EOL] mock_os . path . join . assert_called_once ( ) [EOL] mock_os . path . isfile . assert_called_once ( ) [EOL] mock_xml . parse . assert_not_called ( ) [EOL] [EOL] def test_get_media_info ( self ) : [EOL] [docstring] [EOL] MOCK_MediaInfoFetcher . reset_mock ( ) [EOL] [EOL] result = MediaInfoFetcher . get_media_info ( MOCK_MediaInfoFetcher , False ) [EOL] [EOL] MOCK_MediaInfoFetcher . _process_tracks . assert_not_called ( ) [EOL] self . assertEqual ( len ( result ) , [number] ) [EOL] [EOL] def test_get_media_info_forced ( self ) : [EOL] [docstring] [EOL] MOCK_MediaInfoFetcher . reset_mock ( ) [EOL] [EOL] result = MediaInfoFetcher . get_media_info ( MOCK_MediaInfoFetcher , True ) [EOL] [EOL] MOCK_MediaInfoFetcher . _process_tracks . assert_called_once ( ) [EOL] self . assertEqual ( len ( result ) , [number] ) [EOL] [EOL] def test__process_tracks_file_key_error ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] MOCK_MediaInfoFetcher = mock . MagicMock ( ) [EOL] MOCK_MediaInfoFetcher . media_info = { } [EOL] [EOL] with self . assertRaises ( InvalidMediaInfoError ) : [EOL] MediaInfoFetcher . _process_tracks ( MOCK_MediaInfoFetcher ) [EOL] [EOL] def test__process_tracks_no_track ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] MOCK_MediaInfoFetcher = mock . MagicMock ( ) [EOL] MOCK_MediaInfoFetcher . media_info = { [string] : OrderedDict ( ) } [EOL] [EOL] with self . assertRaises ( InvalidMediaInfoError ) : [EOL] MediaInfoFetcher . _process_tracks ( MOCK_MediaInfoFetcher ) [EOL] [EOL] def test__process_tracks ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] MOCK_MediaInfoFetcher = mock . MagicMock ( ) [EOL] MOCK_MediaInfoFetcher . media_info = { [string] : OrderedDict ( [ ( [string] , [ [string] ] ) ] ) } [EOL] [EOL] MediaInfoFetcher . _process_tracks ( MOCK_MediaInfoFetcher ) [EOL] [EOL] MOCK_MediaInfoFetcher . _process_track . assert_called_once_with ( [string] ) [EOL] [EOL] def test__process_track_not_ordereddict ( self ) : [EOL] [docstring] [EOL] MOCK_MediaInfoFetcher . reset_mock ( ) [EOL] track = { } [EOL] [EOL] result = MediaInfoFetcher . _process_track ( MOCK_MediaInfoFetcher , track ) [EOL] [EOL] self . assertIsNone ( result ) [EOL] [EOL] def test__process_track_missing_type ( self ) : [EOL] [docstring] [EOL] MOCK_MediaInfoFetcher . reset_mock ( ) [EOL] track = OrderedDict ( ) [EOL] [EOL] with self . assertRaises ( InvalidMediaInfoError ) : [EOL] MediaInfoFetcher . _process_track ( MOCK_MediaInfoFetcher , track ) [EOL] [EOL] def test__process_track_general ( self ) : [EOL] [docstring] [EOL] MOCK_MediaInfoFetcher . reset_mock ( ) [EOL] track = OrderedDict ( [ ( [string] , [string] ) ] ) [EOL] [EOL] MediaInfoFetcher . _process_track ( MOCK_MediaInfoFetcher , track ) [EOL] [EOL] MOCK_MediaInfoFetcher . _process_general . assert_called_once_with ( track ) [EOL] [EOL] def test__process_track_video ( self ) : [EOL] [docstring] [EOL] MOCK_MediaInfoFetcher . reset_mock ( ) [EOL] track = OrderedDict ( [ ( [string] , [string] ) ] ) [EOL] [EOL] MediaInfoFetcher . _process_track ( MOCK_MediaInfoFetcher , track ) [EOL] [EOL] MOCK_MediaInfoFetcher . _process_video . assert_called_once_with ( track ) [EOL] [EOL] def test__process_track_audio ( self ) : [EOL] [docstring] [EOL] MOCK_MediaInfoFetcher . reset_mock ( ) [EOL] track = OrderedDict ( [ ( [string] , [string] ) ] ) [EOL] [EOL] MediaInfoFetcher . _process_track ( MOCK_MediaInfoFetcher , track ) [EOL] [EOL] MOCK_MediaInfoFetcher . _process_audio . assert_not_called ( ) [EOL] [EOL] def test__process_track_text ( self ) : [EOL] [docstring] [EOL] MOCK_MediaInfoFetcher . reset_mock ( ) [EOL] track = OrderedDict ( [ ( [string] , [string] ) ] ) [EOL] [EOL] MediaInfoFetcher . _process_track ( MOCK_MediaInfoFetcher , track ) [EOL] [EOL] MOCK_MediaInfoFetcher . _process_text . assert_called_once_with ( track ) [EOL] [EOL] def test__process_generic ( self ) : [EOL] [docstring] [EOL] MOCK_MediaInfoFetcher . reset_mock ( ) [EOL] keys = [ [string] ] [EOL] track = OrderedDict ( [ ( [string] , [string] ) ] ) [EOL] [EOL] result = MediaInfoFetcher . _process_generic ( MOCK_MediaInfoFetcher , track , keys ) [EOL] self . assertEqual ( result [ [string] ] , track [ [string] ] ) [EOL] [EOL] def test__process_general ( self ) : [EOL] [docstring] [EOL] MOCK_MediaInfoFetcher . reset_mock ( ) [EOL] track = { } [EOL] key_list = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] MediaInfoFetcher . _process_general ( MOCK_MediaInfoFetcher , track ) [EOL] [EOL] MOCK_MediaInfoFetcher . _process_generic . assert_called_once_with ( track , key_list ) [EOL] [EOL] def test__process_video ( self ) : [EOL] [docstring] [EOL] MOCK_MediaInfoFetcher . reset_mock ( ) [EOL] track = { [string] : [number] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] key_list = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] MediaInfoFetcher . _process_video ( MOCK_MediaInfoFetcher , track ) [EOL] [EOL] MOCK_MediaInfoFetcher . _process_generic . assert_called_once_with ( track , key_list ) [EOL] MOCK_MediaInfoFetcher . video_tracks . append . assert_called_once ( ) [EOL] [EOL] def test__process_text ( self ) : [EOL] [docstring] [EOL] MOCK_MediaInfoFetcher . reset_mock ( ) [EOL] track = { [string] : [string] } [EOL] key_list = [ [string] , [string] , [string] ] [EOL] [EOL] MediaInfoFetcher . _process_text ( MOCK_MediaInfoFetcher , track ) [EOL] [EOL] MOCK_MediaInfoFetcher . caption_tracks . append . assert_called_once ( ) [EOL] MOCK_MediaInfoFetcher . _process_generic . assert_called_once_with ( track , key_list ) [EOL] [EOL] @ mock . patch ( [string] ) def test_generate_media_xml_windows ( self , mock_sys ) : [EOL] [docstring] [EOL] mock_sys . platform = [string] [EOL] [EOL] with self . assertRaises ( InvalidMediaInfoError ) : [EOL] MediaInfoFetcher . generate_media_xml ( MockSample ( ) ) [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_generate_media_xml_not_file ( self , mock_sys , mock_subprocess , mock_open ) : [EOL] [docstring] [EOL] mock_sys . platform = [string] [EOL] [EOL] with self . assertRaises ( InvalidMediaInfoError ) : [EOL] MediaInfoFetcher . generate_media_xml ( MockSample ( ) ) [EOL] [EOL] mock_open . assert_called_once ( ) [EOL] mock_subprocess . Popen . assert_called_once ( ) [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_generate_media_xml ( self , mock_sys , mock_subprocess , mock_open , mock_os , mock_etree , mock_media_info_fetcher ) : [EOL] [docstring] [EOL] mock_sys . platform = [string] [EOL] mock_os . path . isfile . return_value = True [EOL] [EOL] response = MediaInfoFetcher . generate_media_xml ( MockSample ( ) ) [EOL] [EOL] self . assertEqual ( response , mock_media_info_fetcher ( ) ) [EOL] mock_open . assert_called_once ( ) [EOL] mock_subprocess . Popen . assert_called_once ( ) [EOL] mock_os . path . isfile . assert_called_once ( ) [EOL] mock_etree . parse . assert_called_once ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 $typing.Optional[typing.List[typing.Dict[builtins.str,typing.Any]]]$ 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.List[typing.Dict[builtins.str,typing.Any]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 $typing.Optional[typing.List[typing.Dict[builtins.str,typing.Any]]]$ 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.List[typing.Dict[builtins.str,typing.Any]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $None$ 0 0 0 0 0 $unittest.mock.MagicMock$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 $collections.OrderedDict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 $collections.OrderedDict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 $collections.OrderedDict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 $collections.OrderedDict[builtins.str,builtins.str]$ 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 $collections.OrderedDict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 $collections.OrderedDict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 $collections.OrderedDict[builtins.str,builtins.str]$ 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 $collections.OrderedDict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 $collections.OrderedDict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 $collections.OrderedDict[builtins.str,builtins.str]$ 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 $collections.OrderedDict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 $collections.OrderedDict[builtins.str,builtins.str]$ 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 $collections.OrderedDict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $collections.OrderedDict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $unittest.mock.MagicMock$ 0 $collections.OrderedDict[builtins.str,builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $collections.OrderedDict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 $typing.List[builtins.str]$ 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $mod_sample.media_info_parser.MediaInfoFetcher$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $mod_sample.media_info_parser.MediaInfoFetcher$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
from typing import Dict , Type [EOL] import typing [EOL] import mod_home [EOL] import builtins [EOL] [docstring] [EOL] from datetime import datetime [EOL] from typing import Any , Dict , Type [EOL] [EOL] from sqlalchemy import Column , Date , Integer , String , Text [EOL] [EOL] import database [EOL] from database import Base , DeclEnum [EOL] [EOL] [EOL] class CCExtractorVersion ( Base ) : [EOL] [docstring] [EOL] [EOL] __tablename__ = [string] [EOL] __table_args__ = { [string] : [string] } [EOL] id = Column ( Integer , primary_key = True ) [EOL] version = Column ( String ( [number] ) , unique = True ) [EOL] released = Column ( Date ( ) , unique = True ) [EOL] commit = Column ( String ( [number] ) , unique = True ) [EOL] [EOL] def __init__ ( self , version , released , commit ) : [EOL] [docstring] [EOL] self . version = version [EOL] self . released = datetime . strptime ( released , [string] ) . date ( ) [EOL] self . commit = commit [EOL] [EOL] def __repr__ ( self ) : [EOL] [docstring] [EOL] return f" [string] { self . version } [string] " [EOL] [EOL] [EOL] class GeneralData ( Base ) : [EOL] [docstring] [EOL] [EOL] __tablename__ = [string] [EOL] __table_args__ = { [string] : [string] } [EOL] id = Column ( Integer , primary_key = True ) [EOL] key = Column ( String ( [number] ) , unique = True ) [EOL] value = Column ( Text ( ) , nullable = False ) [EOL] [EOL] def __init__ ( self , key , value ) : [EOL] [docstring] [EOL] self . key = key [EOL] self . value = value [EOL] [EOL] def __repr__ ( self ) : [EOL] [docstring] [EOL] return f" [string] { self . key } [string] { self . value } [string] " [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_home.models.CCExtractorVersion]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Type[mod_home.models.GeneralData]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_home.models.GeneralData]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[mod_home.models.GeneralData]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import flask [EOL] import typing [EOL] [docstring] [EOL] from flask import Blueprint , g [EOL] [EOL] from decorators import template_renderer [EOL] from mod_auth . models import Role [EOL] from mod_home . models import CCExtractorVersion , GeneralData [EOL] [EOL] mod_home = Blueprint ( [string] , __name__ ) [EOL] [EOL] [EOL] @ mod_home . before_app_request def before_app_request ( ) : [EOL] [docstring] [EOL] g . menu_entries [ [string] ] = { [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] [EOL] @ mod_home . route ( [string] , methods = [ [string] , [string] ] ) @ template_renderer ( ) def index ( ) : [EOL] [docstring] [EOL] last_commit = GeneralData . query . filter ( GeneralData . key == [string] ) . first ( ) . value [EOL] last_release = CCExtractorVersion . query . order_by ( CCExtractorVersion . released . desc ( ) ) . first ( ) [EOL] test_access = False [EOL] if g . user is not None and g . user . role in [ Role . tester , Role . contributor , Role . admin ] : [EOL] test_access = True [EOL] return { [string] : last_release , [string] : last_commit , [string] : test_access } [EOL] [EOL] [EOL] @ mod_home . route ( [string] ) @ template_renderer ( ) def about ( ) : [EOL] [docstring] [EOL] return { } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0