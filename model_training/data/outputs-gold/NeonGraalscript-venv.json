import sys [EOL] print ( [string] , sys . executable ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Dict [EOL] import builtins [EOL] import click [EOL] import configparser [EOL] import unittest [EOL] import pathlib2 [EOL] import typing [EOL] [docstring] [EOL] from click import BaseCommand [EOL] from click . testing import CliRunner , Result [EOL] from configparser import ConfigParser [EOL] from io import StringIO [EOL] from pathlib2 import Path [EOL] from typing import Dict [EOL] from unittest . mock import Mock [EOL] [EOL] [EOL] def config_read ( config_deps , mock_files ) : [EOL] def exists_callback ( file ) : [EOL] return str ( file ) in mock_files [EOL] [EOL] def read_callback ( file ) : [EOL] return StringIO ( mock_files [ str ( file ) ] ) [EOL] [EOL] config_deps . exists . side_effect = exists_callback [EOL] config_deps . read . side_effect = read_callback [EOL] [EOL] [EOL] def config_write ( config_deps ) : [EOL] if not isinstance ( getattr ( config_deps , [string] , None ) , dict ) : [EOL] config_deps . out_str = { } [EOL] [EOL] def write_mock ( config , config_path ) : [EOL] with StringIO ( ) as write_str : [EOL] config . write ( write_str ) [EOL] config_deps . out_str [ str ( config_path ) ] = write_str . getvalue ( ) [EOL] [EOL] config_deps . write . side_effect = write_mock [EOL] [EOL] [EOL] def venv_exists ( venv_deps , * mock_dirs ) : [EOL] def exists_callback ( exists_dir ) : [EOL] return str ( exists_dir ) in mock_dirs [EOL] [EOL] venv_deps . exists . side_effect = exists_callback [EOL] [EOL] [EOL] def config_scripts ( config_deps ) : [EOL] def scripts_callback ( _ , packages ) : [EOL] return [ ( p , [string] % p ) for p in packages ] [EOL] [EOL] config_deps . scripts . side_effect = scripts_callback [EOL] [EOL] [EOL] class StringContaining ( str ) : [EOL] def __eq__ ( self , other ) : [EOL] return self in other [EOL] [EOL] [EOL] class CliObjectRunner ( CliRunner ) : [EOL] def __init__ ( self , obj , ** kwargs ) : [EOL] self . obj = obj [EOL] super ( CliObjectRunner , self ) . __init__ ( ** kwargs ) [EOL] [EOL] def invoke ( self , cli , * args , ** extra ) : [EOL] extra [ [string] ] = self . obj [EOL] return super ( CliObjectRunner , self ) . invoke ( cli , * args , ** extra ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $click.testing.Result$ 0 0 0 $click.BaseCommand$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $click.BaseCommand$ 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [docstring] [EOL] [EOL] __author__ = [string] [EOL] __email__ = [string] [EOL]	0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
	0