from gym . envs . registration import register [EOL] [EOL] register ( id = [string] , entry_point = [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from gym_yahtzee . envs . yahtzee_env import YahtzeeSingleEnv [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Dict , TextIO , Any , Optional , Sequence , List [EOL] import logging [EOL] import pyhtzee [EOL] import builtins [EOL] import gym_yahtzee [EOL] import typing [EOL] from collections import defaultdict [EOL] from enum import Enum [EOL] import logging [EOL] import sys [EOL] from typing import Dict , Optional , Sequence [EOL] [EOL] from gym import Env , spaces [EOL] [EOL] import numpy as np [EOL] [EOL] from pyhtzee import Pyhtzee [EOL] from pyhtzee . classes import Category , PyhtzeeException , Rule [EOL] [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class GameType ( Enum ) : [EOL] SUDDEN_DEATH = [number] , [EOL] RETRY_ON_WRONG_ACTION = [number] [EOL] [EOL] [EOL] def get_score ( score ) : [EOL] return score if score is not None else - [number] [EOL] [EOL] [EOL] def get_dice_face_counts ( dice ) : [EOL] faces = defaultdict ( int ) [EOL] for die in dice : [EOL] faces [ die ] += [number] [EOL] return faces [EOL] [EOL] [EOL] class YahtzeeSingleEnv ( Env ) : [EOL] metadata = { [string] : [ [string] ] } [EOL] [EOL] def __init__ ( self , rule = Rule . YAHTZEE_FREE_CHOICE_JOKER , game_type = GameType . RETRY_ON_WRONG_ACTION , seed = None ) : [EOL] self . pyhtzee = Pyhtzee ( seed = seed ) [EOL] self . rule = rule [EOL] self . game_type = game_type [EOL] self . action_space = spaces . Discrete ( [number] ) [EOL] self . observation_space = spaces . Tuple ( ( spaces . Discrete ( [number] ) , spaces . Discrete ( [number] ) , spaces . Box ( low = [number] , high = [number] , shape = ( [number] , ) , dtype = np . uint8 ) , spaces . Box ( low = [number] , high = [number] , shape = ( [number] , ) , dtype = np . uint8 ) , spaces . Box ( low = [number] , high = [number] , shape = ( [number] , ) , dtype = np . uint8 ) , spaces . Box ( low = [number] , high = [number] , shape = ( [number] , ) , dtype = np . uint8 ) , spaces . Box ( low = [number] , high = [number] , shape = ( [number] , ) , dtype = np . uint8 ) , spaces . Box ( low = - [number] , high = [number] , shape = ( [number] , ) , dtype = np . int16 ) , spaces . Box ( low = - [number] , high = [number] , shape = ( [number] , ) , dtype = np . int16 ) , spaces . Box ( low = - [number] , high = [number] , shape = ( [number] , ) , dtype = np . int16 ) , spaces . Box ( low = - [number] , high = [number] , shape = ( [number] , ) , dtype = np . int16 ) , spaces . Box ( low = - [number] , high = [number] , shape = ( [number] , ) , dtype = np . int16 ) , spaces . Box ( low = - [number] , high = [number] , shape = ( [number] , ) , dtype = np . int16 ) , spaces . Box ( low = - [number] , high = [number] , shape = ( [number] , ) , dtype = np . int16 ) , spaces . Box ( low = - [number] , high = [number] , shape = ( [number] , ) , dtype = np . int16 ) , spaces . Box ( low = - [number] , high = [number] , shape = ( [number] , ) , dtype = np . int16 ) , spaces . Box ( low = - [number] , high = [number] , shape = ( [number] , ) , dtype = np . int16 ) , spaces . Box ( low = - [number] , high = [number] , shape = ( [number] , ) , dtype = np . int16 ) , spaces . Box ( low = - [number] , high = [number] , shape = ( [number] , ) , dtype = np . int16 ) , spaces . Box ( low = - [number] , high = [number] , shape = ( [number] , ) , dtype = np . int16 ) , spaces . Box ( low = - [number] , high = [number] , shape = ( [number] , ) , dtype = np . int16 ) , spaces . Box ( low = - [number] , high = [number] , shape = ( [number] , ) , dtype = np . int16 ) , ) ) [EOL] [EOL] def get_observation_space ( self ) : [EOL] pyhtzee = self . pyhtzee [EOL] return ( pyhtzee . round , pyhtzee . sub_round , pyhtzee . dice [ [number] ] , pyhtzee . dice [ [number] ] , pyhtzee . dice [ [number] ] , pyhtzee . dice [ [number] ] , pyhtzee . dice [ [number] ] , get_score ( pyhtzee . scores . get ( Category . ACES ) ) , get_score ( pyhtzee . scores . get ( Category . TWOS ) ) , get_score ( pyhtzee . scores . get ( Category . THREES ) ) , get_score ( pyhtzee . scores . get ( Category . FOURS ) ) , get_score ( pyhtzee . scores . get ( Category . FIVES ) ) , get_score ( pyhtzee . scores . get ( Category . SIXES ) ) , get_score ( pyhtzee . scores . get ( Category . THREE_OF_A_KIND ) ) , get_score ( pyhtzee . scores . get ( Category . FOUR_OF_A_KIND ) ) , get_score ( pyhtzee . scores . get ( Category . FULL_HOUSE ) ) , get_score ( pyhtzee . scores . get ( Category . SMALL_STRAIGHT ) ) , get_score ( pyhtzee . scores . get ( Category . LARGE_STRAIGHT ) ) , get_score ( pyhtzee . scores . get ( Category . CHANCE ) ) , get_score ( pyhtzee . scores . get ( Category . YAHTZEE ) ) , get_score ( pyhtzee . scores . get ( Category . UPPER_SECTION_BONUS ) ) , get_score ( pyhtzee . scores . get ( Category . YAHTZEE_BONUS ) ) , ) [EOL] [EOL] def sample_action ( self ) : [EOL] action = self . pyhtzee . sample_action ( ) [EOL] log . info ( f' [string] { action }' ) [EOL] return action [EOL] [EOL] def step ( self , action ) : [EOL] pyhtzee = self . pyhtzee [EOL] try : [EOL] reward = pyhtzee . take_action ( action ) [EOL] finished = pyhtzee . is_finished ( ) [EOL] valid_move = True [EOL] except PyhtzeeException : [EOL] valid_move = False [EOL] reward = [number] [EOL] if self . game_type == GameType . SUDDEN_DEATH : [EOL] log . info ( [string] ) [EOL] finished = True [EOL] else : [comment] [EOL] log . info ( [string] ) [EOL] finished = False [EOL] [EOL] log . info ( f' [string] { reward } [string] { finished }' ) [EOL] debug_info = { [string] : valid_move , } [EOL] return self . get_observation_space ( ) , reward , finished , debug_info [EOL] [EOL] def reset ( self ) : [EOL] self . pyhtzee = Pyhtzee ( ) [EOL] [EOL] def render ( self , mode = [string] , close = False ) : [EOL] dice = self . pyhtzee . dice [EOL] outfile = sys . stdout [EOL] outfile . write ( f' [string] { dice [ [number] ] } [string] { dice [ [number] ] } [string] { dice [ [number] ] } [string] { dice [ [number] ] } [string] { dice [ [number] ] } [string] ' f' [string] { self . pyhtzee . round } [string] { self . pyhtzee . sub_round } [string] ' f' [string] { self . pyhtzee . get_total_score ( ) } [string] ' ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $gym_yahtzee.envs.yahtzee_env.GameType$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $gym_yahtzee.envs.yahtzee_env.GameType$ 0 $gym_yahtzee.envs.yahtzee_env.GameType$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.bool]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.str$ 0 $typing.Dict[builtins.str,builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.TextIO$ 0 0 0 0 0 $typing.TextIO$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import gym_yahtzee [EOL] from gym_yahtzee . envs . yahtzee_env import GameType , YahtzeeSingleEnv [EOL] from pyhtzee . classes import Category [EOL] from pyhtzee . utils import category_to_action_map [EOL] [EOL] [EOL] from unittest import TestCase [EOL] [EOL] [EOL] class YahtzeeSingleEnvTestCase ( TestCase ) : [EOL] def test_sudden_death ( self ) : [EOL] env = YahtzeeSingleEnv ( seed = [number] , game_type = GameType . SUDDEN_DEATH ) [EOL] action = category_to_action_map [ Category . ACES ] [EOL] observation , reward , done , _ = env . step ( action ) [EOL] self . assertEqual ( env . pyhtzee . scores . get ( Category . ACES ) , [number] ) [EOL] self . assertFalse ( done ) [EOL] self . assertEqual ( observation [ [number] ] , [number] ) [EOL] self . assertEqual ( observation [ [number] ] , [number] ) [EOL] observation , reward , done , _ = env . step ( action ) [EOL] self . assertEqual ( reward , [number] ) [EOL] self . assertTrue ( done ) [EOL] [EOL] def test_retry_on_wrong_action ( self ) : [EOL] env = YahtzeeSingleEnv ( seed = [number] , game_type = GameType . RETRY_ON_WRONG_ACTION ) [EOL] action = category_to_action_map [ Category . ACES ] [EOL] observation , reward , done , _ = env . step ( action ) [EOL] self . assertEqual ( env . pyhtzee . scores . get ( Category . ACES ) , [number] ) [EOL] self . assertFalse ( done ) [EOL] self . assertEqual ( observation [ [number] ] , [number] ) [comment] [EOL] self . assertEqual ( observation [ [number] ] , [number] ) [comment] [EOL] observation , reward , done , _ = env . step ( action ) [EOL] self . assertEqual ( reward , [number] ) [EOL] [comment] [EOL] self . assertEqual ( observation [ [number] ] , [number] ) [EOL] self . assertEqual ( observation [ [number] ] , [number] ) [EOL] self . assertFalse ( done ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $gym_yahtzee.envs.yahtzee_env.YahtzeeSingleEnv$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $gym_yahtzee.envs.yahtzee_env.YahtzeeSingleEnv$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $gym_yahtzee.envs.yahtzee_env.YahtzeeSingleEnv$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $gym_yahtzee.envs.yahtzee_env.YahtzeeSingleEnv$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $gym_yahtzee.envs.yahtzee_env.YahtzeeSingleEnv$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $gym_yahtzee.envs.yahtzee_env.YahtzeeSingleEnv$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $gym_yahtzee.envs.yahtzee_env.YahtzeeSingleEnv$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $gym_yahtzee.envs.yahtzee_env.YahtzeeSingleEnv$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0