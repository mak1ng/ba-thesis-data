from fabric . api import local [EOL] [EOL] [EOL] def prep ( ) : [EOL] local ( [string] ) [EOL] with open ( [string] , [string] ) as f : [EOL] content = f . read ( ) [EOL] final_requirements = content . replace ( [string] , [string] ) [EOL] with open ( [string] , [string] ) as x : [EOL] x . write ( final_requirements ) [EOL] local ( [string] ) [EOL] local ( [string] ) [EOL] [EOL] [EOL] def test ( ) : [EOL] local ( [string] ) [EOL] [EOL] [EOL] def dev_migrate ( ) : [EOL] local ( [string] ) [EOL] [EOL] [EOL] def prod_migrate ( ) : [EOL] local ( [string] ) [EOL] [EOL] [EOL] def dev_shell ( ) : [EOL] local ( [string] ) [EOL] [EOL] [EOL] def prod_shell ( ) : [EOL] local ( [string] ) [EOL] [EOL] [EOL] def prod_logs ( ) : [EOL] local ( [string] ) [EOL] [EOL] [EOL] def dev_logs ( ) : [EOL] local ( [string] ) [EOL] [EOL] [EOL] def all ( ) : [EOL] prep ( ) [EOL] merge ( ) [EOL] [EOL] [EOL] def merge ( ) : [EOL] local ( [string] ) [EOL] local ( [string] ) [EOL] local ( [string] ) [EOL] local ( [string] ) [EOL] local ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] [EOL] from marketplace . views import job_list , job_details , apply_for_job , post_job , manage_posted_jobs , pick_candidate , select_candidate , dev_pool , dev_details , process_payment , payment_canceled , payment_done , add_dev_to_wish_list [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ path ( [string] , job_list , name = [string] ) , path ( [string] , job_details , name = [string] ) , path ( [string] , apply_for_job , name = [string] ) , path ( [string] , post_job , name = [string] ) , path ( [string] , manage_posted_jobs , name = [string] ) , path ( [string] , pick_candidate , name = [string] ) , path ( [string] , select_candidate , name = [string] ) , path ( [string] , dev_pool , name = [string] ) , path ( [string] , dev_details , name = [string] ) , path ( [string] , add_dev_to_wish_list , name = [string] ) , path ( [string] , process_payment , name = [string] ) , path ( [string] , payment_canceled , name = [string] ) , path ( [string] , payment_done , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Tuple [EOL] import marketplace [EOL] import typing [EOL] from django import forms [EOL] from . models import Job [EOL] [EOL] [EOL] class JobForm ( forms . ModelForm ) : [EOL] class Meta : [EOL] model = Job [EOL] exclude = ( [string] , [string] , [string] , [string] , ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[marketplace.models.Job]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] from . models import Job , JobApplication , DevRequest [EOL] [EOL] [EOL] class JobAdmin ( admin . ModelAdmin ) : [EOL] [comment] [EOL] pass [EOL] [EOL] [EOL] admin . site . register ( Job , JobAdmin ) [EOL] admin . site . register ( JobApplication ) [EOL] admin . site . register ( DevRequest ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Type , Tuple [EOL] import marketplace [EOL] import typing [EOL] import json [EOL] [EOL] from django . conf import settings [EOL] from django . db import models [EOL] from django . urls import reverse [EOL] from django_countries . fields import CountryField [EOL] from django . contrib . auth . models import User [EOL] from separatedvaluesfield . models import SeparatedValuesField [EOL] [EOL] [EOL] class Job ( models . Model ) : [EOL] ENGAGEMENT_TYPE = ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ) [EOL] [EOL] JOB_ROLE = ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ) [EOL] [EOL] DEV_EXPERIENCE = ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ) [EOL] company = models . CharField ( max_length = [number] ) [EOL] posted_by = models . ForeignKey ( User , on_delete = models . CASCADE ) [EOL] title = models . CharField ( max_length = [number] ) [EOL] description = models . TextField ( ) [EOL] job_role = models . CharField ( max_length = [number] , choices = JOB_ROLE , default = [string] ) [EOL] dev_experience = models . CharField ( max_length = [number] , choices = DEV_EXPERIENCE , default = [string] ) [EOL] engagement_type = models . CharField ( max_length = [number] , choices = ENGAGEMENT_TYPE , default = [string] ) [EOL] tech_stack = models . CharField ( max_length = [number] ) [EOL] num_devs_wanted = models . IntegerField ( default = [number] ) [EOL] location = CountryField ( null = True , max_length = [number] ) [EOL] remuneration = models . CharField ( max_length = [number] , help_text = [string] ) [EOL] created = models . DateTimeField ( auto_now_add = True ) [EOL] updated = models . DateTimeField ( auto_now = True ) [EOL] position_filled = models . BooleanField ( default = False ) [EOL] [EOL] class Meta : [EOL] ordering = ( [string] , ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . title [EOL] [EOL] [EOL] class JobApplication ( models . Model ) : [EOL] job = models . ForeignKey ( Job , related_name = [string] , on_delete = models . CASCADE ) [EOL] candidate = models . ForeignKey ( User , on_delete = models . CASCADE , related_name = [string] ) [EOL] selected = models . BooleanField ( default = False ) [EOL] [EOL] [EOL] class DevRequest ( models . Model ) : [EOL] owner = models . ForeignKey ( User , related_name = [string] , on_delete = models . CASCADE ) [EOL] developers = SeparatedValuesField ( null = True , max_length = [number] , token = [string] ) [EOL] created = models . DateTimeField ( auto_now_add = True ) [EOL] completed = models . DateTimeField ( auto_now = True ) [EOL] paid = models . BooleanField ( default = False ) [EOL] closed = models . BooleanField ( default = False ) [EOL] [EOL] [EOL] [EOL] def amount ( self ) : [EOL] total_amount = [number] [EOL] total_devs = len ( self . developers ) [EOL] [EOL] if [number] <= total_devs <= [number] : [EOL] total_amount = [number] [EOL] elif [number] < total_devs <= [number] : [EOL] total_amount = [number] * total_devs [EOL] return total_amount [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[marketplace.models.Job]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[marketplace.models.Job]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[marketplace.models.Job]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[marketplace.models.Job]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[marketplace.models.Job]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[marketplace.models.Job]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[marketplace.models.Job]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[marketplace.models.Job]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[marketplace.models.Job]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[marketplace.models.Job]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[marketplace.models.Job]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[marketplace.models.JobApplication]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[marketplace.models.JobApplication]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[marketplace.models.JobApplication]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[marketplace.models.DevRequest]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[marketplace.models.DevRequest]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[marketplace.models.DevRequest]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[marketplace.models.DevRequest]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[marketplace.models.DevRequest]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[marketplace.models.DevRequest]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0
from typing import Type , List [EOL] import marketplace [EOL] import typing [EOL] from django . contrib . auth . models import User [EOL] import django_filters [EOL] [EOL] [EOL] class UserFilter ( django_filters . FilterSet ) : [EOL] class Meta : [EOL] model = User [EOL] fields = [ [string] , [string] , [string] , [string] , [string] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[marketplace.filters.UserFilter.Meta]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class MarketplaceConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Dict , Set , Any , Counter , List [EOL] import frontend [EOL] import marketplace [EOL] import collections [EOL] import typing [EOL] from collections import Counter [EOL] [EOL] from django . core . mail import send_mail [EOL] from django . views . decorators . csrf import csrf_exempt [EOL] [EOL] import requests [EOL] from decouple import config [EOL] from django . core . paginator import Paginator [EOL] from django . db . models import Q [EOL] from django . http import HttpResponseRedirect [EOL] from django . contrib . auth . decorators import login_required [EOL] from django . shortcuts import render , redirect [EOL] from django . contrib . auth . models import User [EOL] from django . urls import reverse [EOL] from django . core import mail [EOL] from django . template . loader import render_to_string [EOL] from django . utils . html import strip_tags [EOL] [EOL] from classroom . models import Student , TakenQuiz [EOL] from frontend . form import Portfolio_form , Experience_Form [EOL] from frontend . models import Github , Experience , Portfolio [EOL] from marketplace . filters import UserFilter [EOL] from . models import Job , JobApplication , DevRequest [EOL] from . forms import JobForm [EOL] [EOL] [EOL] def job_list ( request ) : [EOL] jobs = Job . objects . all ( ) [EOL] applied_jobs = ( ) [EOL] if request . user . is_authenticated : [EOL] developer = request . user [EOL] applied_jobs = JobApplication . objects . filter ( candidate = developer ) [EOL] return render ( request , [string] , { [string] : jobs , [string] : applied_jobs } ) [EOL] [EOL] [EOL] def job_details ( request , id ) : [EOL] if request . user . profile . user_type == [string] : [EOL] job = Job . objects . get ( id = id ) [EOL] [EOL] selected_candidates = [ ] [EOL] applicants = [ ] [EOL] selected_devs = JobApplication . objects . filter ( selected = True ) . all ( ) [EOL] for selectdev in selected_devs : [EOL] selected_candidates . append ( selectdev . candidate ) [EOL] all_devs = JobApplication . objects . filter ( selected = False ) . all ( ) [EOL] for alldev in all_devs : [EOL] applicants . append ( alldev . candidate ) [EOL] [EOL] recommended = [ dev for dev in get_recommended_developers ( job ) if dev not in selected_candidates ] [EOL] [EOL] return render ( request , [string] , { [string] : job , [string] : applicants , [string] : recommended , [string] : selected_candidates } ) [EOL] elif request . user . profile . user_type == [string] : [EOL] status = JobApplication . objects . filter ( job_id = id ) . filter ( candidate = request . user ) . all ( ) [EOL] job = Job . objects . get ( id = id ) [EOL] return render ( request , [string] , { [string] : job , [string] : status } ) [EOL] [EOL] [EOL] @ login_required def post_job ( request ) : [EOL] recruiter = request . user [EOL] [EOL] if request . method == [string] : [EOL] job_form = JobForm ( data = request . POST ) [EOL] if job_form . is_valid ( ) : [EOL] new_job = job_form . save ( commit = False ) [EOL] new_job . posted_by = recruiter [EOL] new_job . save ( ) [EOL] return HttpResponseRedirect ( reverse ( [string] ) ) [EOL] else : [EOL] job_form = JobForm ( ) [EOL] return render ( request , [string] , { [string] : job_form } ) [EOL] [EOL] [EOL] @ login_required def apply_for_job ( request , job_id ) : [EOL] if request . method == [string] : [EOL] subject = [string] [EOL] html_message = render_to_string ( [string] , { [string] : request . user } ) [EOL] plain_message = strip_tags ( html_message ) [EOL] from_email = [string] [EOL] to = request . user . email [EOL] mail . send_mail ( subject , plain_message , from_email , [ to ] , html_message = html_message ) [EOL] job = Job . objects . get ( id = job_id ) [EOL] newapply = JobApplication ( candidate = request . user , job = job ) [EOL] newapply . save ( ) [EOL] return redirect ( reverse ( [string] ) ) [EOL] else : [EOL] return redirect ( reverse ( [string] ) ) [EOL] [EOL] [EOL] def manage_posted_jobs ( request ) : [EOL] jobs = Job . objects . filter ( posted_by = request . user ) [EOL] job_details = [ ] [EOL] for job in jobs : [EOL] applied = JobApplication . objects . filter ( job_id = job . id ) . all ( ) [EOL] app = applied . count ( ) [EOL] selected = JobApplication . objects . filter ( job_id = job . id ) . filter ( selected = True ) . all ( ) [EOL] sele = selected . count ( ) [EOL] job_details . append ( ( job , app , sele ) ) [EOL] [EOL] return render ( request , [string] , { [string] : job_details } ) [EOL] [EOL] [EOL] def pick_candidate ( request , job_id , dev_id ) : [EOL] job = Job . objects . get ( id = job_id ) [EOL] dev = User . objects . get ( id = dev_id ) [EOL] newpick = JobApplication ( job = job , candidate = dev , selected = True ) [EOL] newpick . save ( ) [EOL] [EOL] return HttpResponseRedirect ( reverse ( [string] , args = ( job_id , ) ) ) [EOL] [EOL] [EOL] def select_candidate ( request , job_id , dev_id ) : [EOL] candidate = User . objects . get ( id = dev_id ) [EOL] job = JobApplication . objects . filter ( job_id = job_id ) . filter ( candidate = candidate ) . get ( ) [EOL] job . selected = True [EOL] job . save ( ) [EOL] return HttpResponseRedirect ( reverse ( [string] , args = ( job_id , ) ) ) [EOL] [EOL] [EOL] def get_recommended_developers ( job ) : [EOL] job_tags = [ job . engagement_type . lower ( ) , job . job_role . lower ( ) , job . location . name . lower ( ) , job . dev_experience . lower ( ) ] [EOL] [EOL] for tech_stack_item in job . tech_stack . split ( [string] ) : [EOL] job_tags . append ( tech_stack_item . lower ( ) ) [EOL] [EOL] developers = User . objects . filter ( profile__user_type = [string] ) . filter ( profile__tags__name__in = job_tags ) . distinct ( ) [EOL] [EOL] return developers [EOL] [EOL] [EOL] def dev_pool ( request ) : [EOL] req_id = [number] [EOL] dev_req = None [EOL] [EOL] if request . user . is_authenticated : [EOL] try : [EOL] dev_req = DevRequest . objects . filter ( owner = request . user , paid = False , closed = False ) . get ( ) [EOL] devcount = dev_req . developers [EOL] requestcount = len ( devcount ) [EOL] if dev_req : [EOL] req_id = dev_req . id [EOL] withprofiles = Github . objects . all ( ) [EOL] profileids = [ ] [EOL] passedquizzes = { } [EOL] for candidate_id in profileids : [EOL] student = Student . objects . get ( user_id = profileids ) [EOL] passedexams = TakenQuiz . objects . filter ( student_id = student . id ) [EOL] allsubject = [ ] [EOL] for passedexam in passedexams : [EOL] allsubject . append ( passedexam . quiz . subject . name ) [EOL] setsubjects = set ( allsubject ) [EOL] subjectlist = list ( setsubjects ) [EOL] passedquizzes [ candidate_id ] = subjectlist [EOL] for profile in withprofiles : [EOL] profileids . append ( profile . candidate_id ) [EOL] [EOL] developers = User . objects . filter ( profile__user_type = [string] ) . filter ( id__in = profileids ) [EOL] [EOL] if request . method == [string] : [EOL] search_field = request . POST [ [string] ] [EOL] [EOL] developers_filter = UserFilter ( request . POST , queryset = developers ) [EOL] [EOL] filtered_devs = developers_filter . qs [EOL] [EOL] developers = filtered_devs . filter ( Q ( profile__gender__icontains = search_field ) | Q ( profile__framework__icontains = search_field ) | Q ( profile__language__icontains = search_field ) ) [EOL] [EOL] developers = [ dev for dev in developers ] [EOL] [EOL] return render ( request , [string] , { [string] : developers , [string] : developers_filter . form , [string] : withprofiles , [string] : req_id , [string] : requestcount } ) [EOL] else : [EOL] developers_filter = UserFilter ( request . GET , queryset = developers ) [EOL] developers = [ dev for dev in developers_filter . qs ] [EOL] [EOL] return render ( request , [string] , { [string] : developers , [string] : developers_filter . form , [string] : withprofiles , [string] : req_id , [string] : requestcount } ) [EOL] [EOL] except : [EOL] requestcount = [number] [EOL] withprofiles = Github . objects . all ( ) [EOL] profileids = [ ] [EOL] passedquizzes = { } [EOL] for candidate_id in profileids : [EOL] student = Student . objects . get ( user_id = profileids ) [EOL] passedexams = TakenQuiz . objects . filter ( student_id = student . id ) [EOL] allsubject = [ ] [EOL] for passedexam in passedexams : [EOL] allsubject . append ( passedexam . quiz . subject . name ) [EOL] setsubjects = set ( allsubject ) [EOL] subjectlist = list ( setsubjects ) [EOL] passedquizzes [ candidate_id ] = subjectlist [EOL] for profile in withprofiles : [EOL] profileids . append ( profile . candidate_id ) [EOL] [EOL] developers = User . objects . filter ( profile__user_type = [string] ) . filter ( id__in = profileids ) [EOL] [EOL] if request . method == [string] : [EOL] search_field = request . POST [ [string] ] [EOL] [EOL] developers_filter = UserFilter ( request . POST , queryset = developers ) [EOL] [EOL] filtered_devs = developers_filter . qs [EOL] [EOL] developers = filtered_devs . filter ( Q ( profile__gender__icontains = search_field ) | Q ( profile__framework__icontains = search_field ) | Q ( profile__language__icontains = search_field ) ) [EOL] [EOL] developers = [ dev for dev in developers ] [EOL] [EOL] return render ( request , [string] , { [string] : developers , [string] : developers_filter . form , [string] : withprofiles , [string] : req_id , [string] : requestcount } ) [EOL] else : [EOL] developers_filter = UserFilter ( request . GET , queryset = developers ) [EOL] developers = [ dev for dev in developers_filter . qs ] [EOL] [EOL] return render ( request , [string] , { [string] : developers , [string] : developers_filter . form , [string] : withprofiles , [string] : req_id , [string] : requestcount } ) [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] def dev_details ( request , dev_id , req_id ) : [EOL] dev_picked = False [EOL] if req_id != [number] and dev_id in DevRequest . objects . get ( id = req_id ) . get_developers ( ) : [EOL] dev_picked = True [EOL] [EOL] requested_dev = User . objects . get ( id = dev_id ) [EOL] [EOL] candidate = Github . objects . get ( candidate = requested_dev ) [EOL] user = candidate . github_username [EOL] username = config ( [string] , default = [string] ) [EOL] token = config ( [string] , default = [string] ) [EOL] json_data = requests . get ( [string] + user , auth = ( username , token ) ) . json ( ) [EOL] [EOL] form = Portfolio_form ( ) [EOL] experience_form = Experience_Form ( ) [EOL] repo = [string] + user + [string] [EOL] repos = requests . get ( repo , auth = ( username , token ) ) . json ( ) [EOL] paginator = Paginator ( repos , [number] ) [EOL] [EOL] page = request . GET . get ( [string] ) [EOL] repoz = paginator . get_page ( page ) [EOL] languages = [ ] [EOL] [EOL] for i in repos : [EOL] for x in i : [EOL] languages . append ( i [ [string] ] ) [EOL] [EOL] counter = Counter ( languages ) [EOL] labels = [ ] [EOL] c = { } [EOL] items = [ ] [EOL] for z in counter : [EOL] c [ z ] = counter [ z ] [EOL] labels . append ( z ) [EOL] items . append ( counter [ z ] ) [EOL] data = { [string] : labels , [string] : items , } [EOL] student = Student . objects . get ( user_id = dev_id ) [EOL] verified_skills = TakenQuiz . objects . filter ( student = student ) . filter ( score__gte = [number] ) . all ( ) [EOL] skill = [ ] [EOL] for verified_skill in verified_skills : [EOL] skill . append ( verified_skill . quiz . subject . name ) [EOL] skillset = set ( skill ) [EOL] skills = list ( skillset ) [EOL] [EOL] experiences = Experience . objects . filter ( candidate = requested_dev ) . all ( ) [EOL] verified_projects = Portfolio . objects . filter ( candidate = requested_dev ) . all ( ) [EOL] return render ( request , [string] , { [string] : json_data , [string] : repoz , [string] : data , [string] : c , [string] : form , [string] : verified_projects , [string] : experience_form , [string] : experiences , [string] : skills , [string] : requested_dev , [string] : candidate , [string] : dev_picked } ) [EOL] [EOL] [EOL] @ login_required ( ) def add_dev_to_wish_list ( request , dev_id ) : [EOL] [EOL] devlist = [ ] [EOL] devlist . append ( dev_id ) [EOL] dev_req = DevRequest ( owner = request . user , paid = False , closed = False , developers = devlist ) [EOL] dev_req . save ( ) [EOL] [EOL] [EOL] [EOL] return redirect ( reverse ( [string] ) ) [EOL] [EOL] [EOL] @ login_required ( ) def process_payment ( request , req_id ) : [EOL] if req_id == [number] : [EOL] return redirect ( reverse ( [string] ) ) [EOL] [EOL] dev_req = DevRequest . objects . get ( id = req_id ) [EOL] [EOL] print ( [string] , dev_req . amount ( ) ) [EOL] [EOL] return render ( request , [string] , { [string] : dev_req . amount ( ) , [string] : dev_req } ) [EOL] [EOL] [EOL] @ csrf_exempt def payment_canceled ( request ) : [EOL] return redirect ( reverse ( [string] ) ) [EOL] [EOL] [EOL] @ csrf_exempt def payment_done ( request , req_id ) : [EOL] dev_req = DevRequest . objects . get ( id = req_id ) [EOL] dev_req . paid = True [EOL] dev_req . closed = True [EOL] dev_req . save ( ) [EOL] [EOL] send_mail ( [string] , [string] + [string] + dev_req . dev . first_name + [string] + dev_req . dev . last_name + [string] + [string] [string] , [string] , [ dev_req . dev . email ] , fail_silently = False , ) [EOL] [EOL] return render ( request , [string] , { [string] : dev_req . dev , [string] : dev_req } ) [EOL]	
	0
from typing import Tuple [EOL] import typing [EOL] from __future__ import absolute_import , unicode_literals [EOL] [EOL] [comment] [EOL] [comment] [EOL] from . celery import app as celery_app [EOL] [EOL] __all__ = ( [string] , )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from __future__ import absolute_import , unicode_literals [EOL] import os [EOL] from decouple import config [EOL] from celery import Celery [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] [EOL] app = Celery ( [string] , broker = [string] , backend = [string] , include = [ [string] ] ) [EOL] [EOL] app . config_from_object ( [string] , namespace = [string] ) [EOL] app . autodiscover_tasks ( ) [EOL] app . conf . update ( task_serializer = [string] , accept_content = [ [string] ] , result_serializer = [string] , timezone = [string] , enable_utc = True , ) [EOL] [EOL] @ app . task ( bind = True ) def debug_task ( self ) : [EOL] print ( [string] . format ( self . request ) ) [EOL] [EOL] if __name__ == [string] : [EOL] app . start ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] from django . conf . urls import include [EOL] from django . contrib import admin [EOL] from django . urls import path [EOL] from django . conf import settings [EOL] from django . conf . urls . static import static [EOL] from django . conf . urls import handler404 , handler500 [EOL] [EOL] from accounts . views import profile [EOL] [EOL] urlpatterns = [ path ( [string] , include ( [string] ) ) , path ( [string] , admin . site . urls ) , path ( [string] , include ( [string] ) ) , path ( [string] , profile , name = [string] ) , path ( [string] , profile , name = [string] ) , path ( [string] , include ( [string] , namespace = [string] ) ) , path ( [string] , include ( [string] , namespace = [string] ) ) , path ( [string] , include ( [string] , namespace = [string] ) ) , path ( [string] , include ( [string] , namespace = [string] ) ) , path ( [string] , include ( [string] ) ) , path ( [string] , include ( [string] , namespace = [string] ) ) , path ( [string] , include ( [string] , namespace = [string] ) ) , path ( [string] , include ( [string] , namespace = [string] ) ) , path ( [string] , include ( [string] , namespace = [string] ) ) , ] [EOL] [EOL] if settings . DEBUG : [EOL] urlpatterns += static ( settings . MEDIA_URL , document_root = settings . MEDIA_ROOT ) [EOL] [EOL] handler404 = [string] [EOL] handler500 = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . conf import settings [EOL] from django . contrib . sites . models import Site [EOL] from django . shortcuts import render , redirect , get_object_or_404 [EOL] from django . urls import reverse [EOL] from django . views . decorators . csrf import csrf_exempt [EOL] from paypal . standard . forms import PayPalPaymentsForm [EOL] [EOL] from transactions . models import Transaction [EOL] [EOL] [EOL] [comment] [EOL] [EOL] def process_payment ( request , id ) : [EOL] transaction = get_object_or_404 ( Transaction , id = id ) [EOL] transaction . stage = [string] [EOL] amount = int ( transaction . amount ( ) ) [EOL] print ( transaction . allcandidates ( ) . count ( ) ) [EOL] transaction . save ( ) [EOL] return render ( request , [string] , { [string] : amount , [string] : transaction } ) [EOL] def process_opencalloption1 ( request , id ) : [EOL] transaction = get_object_or_404 ( Transaction , id = id ) [EOL] transaction . stage = [string] [EOL] amount = int ( [number] ) [EOL] print ( transaction . allcandidates ( ) . count ( ) ) [EOL] transaction . save ( ) [EOL] return render ( request , [string] , { [string] : amount , [string] : transaction } ) [EOL] [EOL] def process_opencalloption2 ( request , id ) : [EOL] transaction = get_object_or_404 ( Transaction , id = id ) [EOL] transaction . stage = [string] [EOL] amount = int ( [number] ) [EOL] print ( transaction . allcandidates ( ) . count ( ) ) [EOL] transaction . save ( ) [EOL] return render ( request , [string] , { [string] : amount , [string] : transaction } ) [EOL] [EOL] def process_opencalloption3 ( request , id ) : [EOL] transaction = get_object_or_404 ( Transaction , id = id ) [EOL] transaction . stage = [string] [EOL] amount = int ( [number] ) [EOL] print ( transaction . allcandidates ( ) . count ( ) ) [EOL] transaction . save ( ) [EOL] return render ( request , [string] , { [string] : amount , [string] : transaction } ) [EOL] @ csrf_exempt def payment_canceled ( request , id ) : [EOL] [comment] [EOL] return redirect ( reverse ( [string] , args = [ id ] ) ) [EOL] [EOL] [EOL] @ csrf_exempt def flutterwavepayment_done ( request , id ) : [EOL] transaction = Transaction . objects . get ( id = id ) [EOL] transaction . stage = [string] [EOL] transaction . paid = True [EOL] transaction . save ( ) [EOL] [comment] [EOL] return redirect ( reverse ( [string] , args = [ transaction . id ] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] from django . urls import path [EOL] from . views import process_payment , payment_canceled , flutterwavepayment_done , process_opencalloption1 , process_opencalloption2 , process_opencalloption3 [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ path ( [string] , process_payment , name = [string] ) , path ( [string] , process_opencalloption1 , name = [string] ) , path ( [string] , process_opencalloption2 , name = [string] ) , path ( [string] , process_opencalloption3 , name = [string] ) , path ( [string] , payment_canceled , name = [string] ) , path ( [string] , flutterwavepayment_done , name = [string] ) , ] [EOL] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
default_app_config = [string] [EOL]	$builtins.str$ 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class PaymentsConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL] [EOL] def ready ( self ) : [EOL] [comment] [EOL] import payments . signals [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . shortcuts import get_object_or_404 [EOL] from paypal . standard . models import ST_PP_COMPLETED [EOL] from paypal . standard . ipn . signals import valid_ipn_received [EOL] from transactions . models import Transaction [EOL] [EOL] [EOL] def payment_notification ( sender , ** kwargs ) : [EOL] ipn_obj = sender [EOL] if ipn_obj . payment_status == ST_PP_COMPLETED : [EOL] transaction = get_object_or_404 ( Transaction , id = ipn_obj . invoice ) [EOL] transaction . stage = [string] [EOL] transaction . paid = True [EOL] transaction . save ( ) [EOL] [EOL] valid_ipn_received . connect ( payment_notification ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class AccountsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL] from accounts . models import Profile [EOL] [EOL] [EOL] class ProfileAdmin ( admin . ModelAdmin ) : [EOL] pass [EOL] [EOL] admin . site . register ( Profile , ProfileAdmin )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Tuple [EOL] import accounts [EOL] import datetime [EOL] import typing [EOL] from django . conf import settings [EOL] from django . contrib . auth . models import User [EOL] from django . db import models [EOL] from django_countries . fields import CountryField [EOL] [EOL] [comment] [EOL] from django . db . models . signals import post_save [EOL] from django . dispatch import receiver [EOL] from taggit . managers import TaggableManager [EOL] import datetime [EOL] from django . core . cache import cache [EOL] [EOL] [EOL] class Profile ( models . Model ) : [EOL] USER_TYPE_CHOICES = ( ( [string] , [string] ) , ( [string] , [string] ) , ) [EOL] STAGE_CHOICES = ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ) [EOL] GENDER_CHOICES = ( ( [string] , [string] ) , ( [string] , [string] ) , ) [EOL] YEARS_ACTIVE_CHOICES = ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ) [EOL] [EOL] CONTRACT_CHOICES = ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ) [EOL] [EOL] user = models . OneToOneField ( settings . AUTH_USER_MODEL , on_delete = models . CASCADE ) [EOL] user_type = models . CharField ( choices = USER_TYPE_CHOICES , null = True , blank = True , max_length = [number] ) [EOL] stage = models . CharField ( choices = STAGE_CHOICES , default = [string] , max_length = [number] ) [EOL] profile_photo = models . ImageField ( upload_to = [string] , blank = True , null = True ) [EOL] date_of_birth = models . DateTimeField ( null = True , blank = True ) [EOL] gender = models . CharField ( choices = GENDER_CHOICES , null = True , blank = True , max_length = [number] ) [EOL] phone_number = models . CharField ( null = True , max_length = [number] ) [EOL] [comment] [EOL] linkedin_url = models . CharField ( max_length = [number] , null = True , ) [EOL] portfolio = models . CharField ( max_length = [number] , blank = True , null = True ) [EOL] github_repo = models . CharField ( max_length = [number] , null = True , ) [EOL] language = models . CharField ( max_length = [number] , null = True , blank = True ) [EOL] framework = models . CharField ( max_length = [number] , null = True , blank = True ) [EOL] years = models . CharField ( choices = YEARS_ACTIVE_CHOICES , null = True , max_length = [number] ) [EOL] [EOL] country = CountryField ( null = True , max_length = [number] ) [EOL] availabilty = models . CharField ( choices = CONTRACT_CHOICES , null = True , max_length = [number] ) [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] company = models . CharField ( max_length = [number] , null = True , blank = True ) [EOL] job_role = models . CharField ( max_length = [number] , null = True , blank = True ) [EOL] industry = models . CharField ( max_length = [number] , null = True , blank = True ) [EOL] company_url = models . CharField ( max_length = [number] , null = True , blank = True ) [EOL] tags = TaggableManager ( ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . user . username [EOL] [EOL] def last_seen ( self ) : [EOL] return cache . get ( [string] % self . user . username ) [EOL] [EOL] def online ( self ) : [EOL] if self . last_seen ( ) : [EOL] now = datetime . datetime . now ( ) [EOL] if now > ( self . last_seen ( ) + datetime . timedelta ( seconds = settings . USER_ONLINE_TIMEOUT ) ) : [EOL] return False [EOL] else : [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] def photo ( self , default_path = [string] ) : [EOL] if self . profile_photo : [EOL] return self . profile_photo [EOL] return default_path [EOL] [EOL] def get_absolute_url ( self ) : [EOL] return [string] [EOL] [EOL] @ property def full_name ( self ) : [EOL] return self . user . get_full_name ( ) [EOL] [EOL] @ property def date_joined ( self ) : [EOL] return self . user . date_joined [EOL] [EOL] @ receiver ( post_save , sender = User ) def create_user_profile ( sender , instance , created , ** kwargs ) : [EOL] if created : [EOL] Profile . objects . create ( user = instance ) [EOL] [EOL] @ receiver ( post_save , sender = User ) def save_user_profile ( sender , instance , ** kwargs ) : [EOL] instance . profile . save ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[accounts.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[accounts.models.Profile]$ 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[accounts.models.Profile]$ 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[accounts.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[accounts.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[accounts.models.Profile]$ 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[accounts.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[accounts.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[accounts.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[accounts.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[accounts.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[accounts.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[accounts.models.Profile]$ 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[accounts.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[accounts.models.Profile]$ 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[accounts.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[accounts.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[accounts.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[accounts.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[accounts.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Any [EOL] import chat [EOL] import typing [EOL] from django . contrib . auth . decorators import login_required [EOL] from django . contrib . auth . models import User [EOL] from django . http . response import JsonResponse [EOL] from django . shortcuts import render [EOL] from django . views . decorators . csrf import csrf_exempt [EOL] from rest_framework . parsers import JSONParser [EOL] from chat . models import Message [EOL] from chat . serializers import MessageSerializer , UserSerializer [EOL] [EOL] [EOL] @ csrf_exempt def user_list ( request , pk = None ) : [EOL] [docstring] [EOL] if request . method == [string] : [EOL] if pk : [EOL] users = User . objects . filter ( id = pk ) [EOL] else : [EOL] [comment] [EOL] users = [ user . receiver for user in request . user . sender . all ( ) ] [EOL] [comment] [EOL] users = list ( dict . fromkeys ( users ) ) [EOL] serializer = UserSerializer ( users , many = True , context = { [string] : request } ) [EOL] return JsonResponse ( serializer . data , safe = False ) [EOL] [EOL] [EOL] @ csrf_exempt def message_list ( request , sender = None , receiver = None ) : [EOL] [EOL] if request . method == [string] : [EOL] messages = Message . objects . filter ( sender_id = sender , receiver_id = receiver , is_read = False ) [EOL] serializer = MessageSerializer ( messages , many = True , context = { [string] : request } ) [EOL] for message in messages : [EOL] message . is_read = True [EOL] message . save ( ) [EOL] return JsonResponse ( serializer . data , safe = False ) [EOL] [EOL] elif request . method == [string] : [EOL] data = JSONParser ( ) . parse ( request ) [EOL] serializer = MessageSerializer ( data = data ) [EOL] if serializer . is_valid ( ) : [EOL] serializer . save ( ) [EOL] return JsonResponse ( serializer . data , status = [number] ) [EOL] return JsonResponse ( serializer . errors , status = [number] ) [EOL] [EOL] [EOL] @ login_required def chat_home ( request ) : [EOL] if request . method == [string] : [EOL] return render ( request , [string] , { [string] : User . objects . exclude ( username = request . user . username ) } ) [EOL] [EOL] [EOL] @ login_required def chat_view ( request , sender , receiver ) : [EOL] if request . method == [string] : [EOL] return render ( request , [string] , { [string] : User . objects . exclude ( username = request . user . username ) , [string] : User . objects . get ( id = receiver ) , [string] : Message . objects . filter ( sender_id = sender , receiver_id = receiver ) | Message . objects . filter ( sender_id = receiver , receiver_id = sender ) } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , List [EOL] import chat [EOL] import typing [EOL] from django . contrib . auth . models import User [EOL] from rest_framework import serializers [EOL] from chat . models import Message [EOL] [EOL] [EOL] class UserSerializer ( serializers . ModelSerializer ) : [EOL] password = serializers . CharField ( write_only = True ) [EOL] online = serializers . ReadOnlyField ( source = [string] ) [EOL] [EOL] class Meta : [EOL] model = User [EOL] fields = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] class MessageSerializer ( serializers . ModelSerializer ) : [EOL] sender = serializers . SlugRelatedField ( many = False , slug_field = [string] , queryset = User . objects . all ( ) ) [EOL] receiver = serializers . SlugRelatedField ( many = False , slug_field = [string] , queryset = User . objects . all ( ) ) [EOL] [EOL] class Meta : [EOL] model = Message [EOL] fields = [ [string] , [string] , [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[chat.serializers.UserSerializer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[chat.serializers.UserSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[chat.models.Message]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[chat.serializers.MessageSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[chat.serializers.MessageSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[chat.models.Message]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] from chat . models import Message [EOL] [EOL] [comment] [EOL] admin . site . register ( Message )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . contrib . auth . views import LogoutView [EOL] from django . urls import path [EOL] from . import views [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ path ( [string] , views . chat_home , name = [string] ) , path ( [string] , views . chat_view , name = [string] ) , path ( [string] , views . message_list , name = [string] ) , path ( [string] , views . message_list , name = [string] ) , path ( [string] , views . user_list , name = [string] ) , path ( [string] , views . user_list , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import datetime [EOL] import typing [EOL] import datetime [EOL] from django . core . cache import cache [EOL] from django . conf import settings [EOL] from accounts . models import Profile [EOL] [EOL] [EOL] class ActiveUserMiddleware : [EOL] [EOL] def __init__ ( self , get_response ) : [EOL] self . get_response = get_response [EOL] [EOL] def __call__ ( self , request ) : [EOL] if request . user . is_authenticated : [EOL] now = datetime . datetime . now ( ) [EOL] current_user = request . user [EOL] try : [EOL] Profile . objects . get ( user = current_user ) [EOL] except Profile . DoesNotExist : [EOL] Profile . objects . create ( user = current_user ) [EOL] finally : [EOL] cache . set ( [string] % current_user . username , now , settings . USER_LASTSEEN_TIMEOUT ) [EOL] response = self . get_response ( request ) [EOL] return response [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ChatConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Type , Tuple [EOL] import chat [EOL] import typing [EOL] from django . contrib . auth . models import User [EOL] from django . db import models [EOL] from datetime import datetime [EOL] [EOL] [EOL] [EOL] class Message ( models . Model ) : [EOL] sender = models . ForeignKey ( User , on_delete = models . CASCADE , related_name = [string] ) [EOL] receiver = models . ForeignKey ( User , on_delete = models . CASCADE , related_name = [string] ) [EOL] message = models . CharField ( max_length = [number] ) [EOL] timestamp = models . DateTimeField ( default = datetime . now ) [EOL] is_read = models . BooleanField ( default = False ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . message [EOL] [EOL] class Meta : [EOL] ordering = ( [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[chat.models.Message]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[chat.models.Message]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[chat.models.Message]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[chat.models.Message]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[chat.models.Message]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] import datetime [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterModelOptions ( name = [string] , options = { [string] : ( [string] , ) } , ) , migrations . AddField ( model_name = [string] , name = [string] , field = models . BooleanField ( default = False ) , ) , migrations . AddField ( model_name = [string] , name = [string] , field = models . DateTimeField ( default = datetime . datetime . now ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
	0
	0
	0
	0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Type , Any , Tuple , List [EOL] import classroom [EOL] import typing [EOL] from django import forms [EOL] from django . contrib . auth . forms import UserCreationForm [EOL] from django . db import transaction [EOL] from django . contrib . auth . models import User [EOL] from django . forms . utils import ValidationError [EOL] [EOL] from classroom . models import ( Answer , Question , Student , StudentAnswer , Subject , User , Quiz ) [EOL] [EOL] [EOL] [EOL] class QuestionForm ( forms . ModelForm ) : [EOL] class Meta : [EOL] model = Question [EOL] fields = ( [string] , ) [EOL] [EOL] [EOL] class BaseAnswerInlineFormSet ( forms . BaseInlineFormSet ) : [EOL] def clean ( self ) : [EOL] super ( ) . clean ( ) [EOL] [EOL] has_one_correct_answer = False [EOL] for form in self . forms : [EOL] if not form . cleaned_data . get ( [string] , False ) : [EOL] if form . cleaned_data . get ( [string] , False ) : [EOL] has_one_correct_answer = True [EOL] break [EOL] if not has_one_correct_answer : [EOL] raise ValidationError ( [string] , code = [string] ) [EOL] [EOL] [EOL] class TakeQuizForm ( forms . ModelForm ) : [EOL] answer = forms . ModelChoiceField ( queryset = Answer . objects . none ( ) , widget = forms . RadioSelect ( ) , required = False , empty_label = None , ) [EOL] [EOL] [EOL] class Meta : [EOL] model = StudentAnswer [EOL] fields = ( [string] , ) [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] question = kwargs . pop ( [string] ) [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] self . fields [ [string] ] . queryset = question . answers . order_by ( [string] ) [EOL] [EOL] class Addquiz ( forms . ModelForm ) : [EOL] [EOL] class Meta : [EOL] model = Quiz [EOL] fields = [ [string] , [string] ] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[classroom.forms.Addquiz.Meta]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[classroom.forms.TakeQuizForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[classroom.forms.Addquiz.Meta]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[classroom.forms.Addquiz.Meta]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . contrib . auth import REDIRECT_FIELD_NAME [EOL] from django . contrib . auth . decorators import user_passes_test [EOL] [EOL] [EOL] def student_required ( function = None , redirect_field_name = REDIRECT_FIELD_NAME , login_url = [string] ) : [EOL] [docstring] [EOL] actual_decorator = user_passes_test ( lambda u : u . is_active and u . profile . user_type == [string] , login_url = login_url , redirect_field_name = redirect_field_name ) [EOL] if function : [EOL] return actual_decorator ( function ) [EOL] return actual_decorator [EOL] [EOL] [EOL] def teacher_required ( function = None , redirect_field_name = REDIRECT_FIELD_NAME , login_url = [string] ) : [EOL] [docstring] [EOL] actual_decorator = user_passes_test ( lambda u : u . is_active and u . profile . user_type == [string] , login_url = login_url , redirect_field_name = redirect_field_name ) [EOL] if function : [EOL] return actual_decorator ( function ) [EOL] return actual_decorator [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ClassroomConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Type , Any , Tuple , List [EOL] import classroom [EOL] import typing [EOL] from django . contrib import messages [EOL] from django . contrib . auth import login [EOL] from django . contrib . auth . decorators import login_required [EOL] from django . db import transaction [EOL] from django . db . models import Count [EOL] from django . db . models import Q [EOL] from django . urls import reverse [EOL] from django . http import request [EOL] from django . shortcuts import get_object_or_404 , redirect , render [EOL] from django . urls import reverse_lazy [EOL] from django . utils . decorators import method_decorator [EOL] from django . views . generic import ListView [EOL] from . . decorators import student_required [EOL] from . . forms import TakeQuizForm [EOL] from . . models import Quiz , Student , TakenQuiz , User , StudentAnswer , Answer , Subject , RandomQuiz , Question [EOL] import random [EOL] from transactions . models import OpenCall [EOL] [EOL] @ method_decorator ( [ login_required , student_required ] , name = [string] ) class QuizListView ( ListView ) : [EOL] [EOL] model = Quiz [EOL] ordering = ( [string] , ) [EOL] context_object_name = [string] [EOL] template_name = [string] [EOL] [EOL] def get_queryset ( self ) : [EOL] student = self . request . user . student [EOL] queryset = Quiz . objects . all ( ) . annotate ( questions_count = Count ( [string] ) ) . filter ( questions_count__gt = [number] ) [EOL] return queryset [EOL] [EOL] def get_context_data ( self , ** kwargs ) : [EOL] context = super ( QuizListView , self ) . get_context_data ( ** kwargs ) [EOL] context [ [string] ] = Subject . objects . all ( ) [EOL] [EOL] return context [EOL] [EOL] [EOL] [EOL] @ method_decorator ( [ login_required , student_required ] , name = [string] ) class TakenQuizListView ( ListView ) : [EOL] model = TakenQuiz [EOL] context_object_name = [string] [EOL] template_name = [string] [EOL] [EOL] def get_queryset ( self ) : [EOL] queryset = self . request . user . student . taken_quizzes . select_related ( [string] , [string] ) . order_by ( [string] ) [EOL] return queryset [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def student_registration ( request ) : [EOL] if Student . objects . filter ( user_id = request . user . id ) . exists ( ) : [EOL] return redirect ( [string] ) [EOL] else : [EOL] registration = Student ( user = request . user ) [EOL] registration . save ( ) [EOL] return redirect ( [string] ) [EOL] [EOL] @ login_required def take ( request , pk ) : [EOL] global tempquiz [EOL] quiz = get_object_or_404 ( Quiz , pk = pk ) [EOL] [EOL] student = Student . objects . get ( user_id = request . user . id ) [EOL] takenquizlist = [ ] [EOL] quizzes = TakenQuiz . objects . filter ( student_id = student . id ) [EOL] for onequiz in quizzes : [EOL] takenquizlist . append ( onequiz . quiz . name ) [EOL] [EOL] if quiz . name in takenquizlist : [EOL] return redirect ( [string] ) [EOL] else : [EOL] questionlist = [ ] [EOL] try : [EOL] tempquiz = RandomQuiz . objects . get ( student_id = student . id , quiz_id = pk ) [EOL] [EOL] [EOL] except RandomQuiz . DoesNotExist : [EOL] currentquiz = Question . objects . filter ( quiz_id = pk ) [EOL] for onequestion in currentquiz : [EOL] [EOL] questionlist . append ( onequestion . id ) [EOL] try : [EOL] questionrandomlist = random . sample ( questionlist , [number] ) [EOL] obj = RandomQuiz ( quiz = quiz , student = student , questions = questionrandomlist ) [EOL] obj . save ( ) [EOL] [EOL] return redirect ( [string] , pk ) [EOL] except : [EOL] pass [EOL] [EOL] if not tempquiz . questions == None : [EOL] tempquizquestionsids = tempquiz . questions [EOL] randomquestionlist = [ ] [EOL] for tempquizquestionsid in tempquizquestionsids : [EOL] randomquestionlist . append ( int ( tempquizquestionsid ) ) [EOL] questions = Question . objects . filter ( id__in = randomquestionlist ) [EOL] total_questions = len ( randomquestionlist ) [EOL] total_unanswered_questions = questions . count ( ) [EOL] progress = [number] - round ( ( ( total_unanswered_questions - [number] ) / [number] ) * [number] ) [EOL] question = questions . first ( ) [EOL] updatedrandomquestionlist = [ ] [EOL] updatedrandomquestionlist . append ( question . id ) [EOL] [EOL] unanswered_questions = list ( set ( randomquestionlist ) ^ set ( updatedrandomquestionlist ) ) [EOL] [EOL] if request . method == [string] : [EOL] form = TakeQuizForm ( question = question , data = request . POST ) [EOL] if form . is_valid ( ) : [EOL] with transaction . atomic ( ) : [EOL] if [string] in request . POST : [EOL] student_answer = form . save ( commit = False ) [EOL] student_answer . student = student [EOL] student_answer . quiz = quiz [EOL] student_answer . save ( ) [EOL] randomquizinstance = RandomQuiz . objects . get ( quiz_id = pk , student_id = student . id ) [EOL] randomquizinstance . questions = unanswered_questions [EOL] randomquizinstance . save ( ) [EOL] [EOL] else : [EOL] default_answer = StudentAnswer ( quiz = quiz , student = student , answer = Answer . objects . filter ( question_id = question . id ) . last ( ) ) [EOL] default_answer . save ( ) [EOL] randomquizinstance = RandomQuiz . objects . get ( quiz_id = pk , student_id = student . id ) [EOL] randomquizinstance . questions = unanswered_questions [EOL] randomquizinstance . save ( ) [EOL] if student . get_unanswered_questions ( quiz ) . exists ( ) : [EOL] return redirect ( [string] , pk ) [EOL] [EOL] else : [EOL] form = TakeQuizForm ( question = question ) [EOL] [EOL] return render ( request , [string] , { [string] : quiz , [string] : question , [string] : form , [string] : progress } ) [EOL] [EOL] else : [EOL] correctanswercounter = StudentAnswer . objects . filter ( quiz = quiz , student = student , answer__is_correct = True ) . count ( ) [EOL] print ( correctanswercounter ) [EOL] score = ( correctanswercounter / [number] ) * [number] [EOL] TakenQuiz . objects . create ( student = student , quiz = quiz , score = score ) [EOL] return redirect ( [string] ) [EOL] [EOL] [EOL] def retake ( request , quizid , studentid ) : [EOL] [EOL] TakenQuiz . objects . filter ( quiz_id = quizid , student_id = studentid ) . delete ( ) [EOL] StudentAnswer . objects . filter ( quiz_id = quizid , student_id = studentid ) . delete ( ) [EOL] return redirect ( [string] , quizid ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[classroom.views.students.QuizListView]$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[classroom.views.students.TakenQuizListView]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any , Dict , Tuple [EOL] import classroom [EOL] import typing [EOL] from django . contrib import messages [EOL] from django . contrib . auth import login [EOL] from django . contrib . auth . decorators import login_required [EOL] from django . db import transaction [EOL] from django . db . models import Avg , Count [EOL] from django . forms import inlineformset_factory [EOL] from django . shortcuts import get_object_or_404 , redirect , render [EOL] from django . urls import reverse , reverse_lazy [EOL] from django . utils . decorators import method_decorator [EOL] from django . views . generic import ( CreateView , DeleteView , DetailView , ListView , UpdateView ) [EOL] [EOL] [EOL] from . . forms import BaseAnswerInlineFormSet , QuestionForm [EOL] from . . models import Answer , Question , Quiz , User [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] class QuizListView ( ListView ) : [EOL] model = Quiz [EOL] ordering = ( [string] , ) [EOL] context_object_name = [string] [EOL] template_name = [string] [EOL] [EOL] def get_queryset ( self ) : [EOL] queryset = self . request . user . quizzes . select_related ( [string] ) . annotate ( questions_count = Count ( [string] , distinct = True ) ) . annotate ( taken_count = Count ( [string] , distinct = True ) ) [EOL] return queryset [EOL] [EOL] [EOL] [EOL] class QuizCreateView ( CreateView ) : [EOL] model = Quiz [EOL] fields = ( [string] , [string] , ) [EOL] template_name = [string] [EOL] [EOL] def form_valid ( self , form ) : [EOL] quiz = form . save ( commit = False ) [EOL] quiz . owner = self . request . user [EOL] quiz . save ( ) [EOL] messages . success ( self . request , [string] ) [EOL] return redirect ( [string] , quiz . pk ) [EOL] [EOL] [EOL] [EOL] class QuizUpdateView ( UpdateView ) : [EOL] model = Quiz [EOL] fields = ( [string] , [string] , ) [EOL] context_object_name = [string] [EOL] template_name = [string] [EOL] [EOL] def get_context_data ( self , ** kwargs ) : [EOL] kwargs [ [string] ] = self . get_object ( ) . questions . annotate ( answers_count = Count ( [string] ) ) [EOL] return super ( ) . get_context_data ( ** kwargs ) [EOL] [EOL] def get_queryset ( self ) : [EOL] [docstring] [EOL] return self . request . user . quizzes . all ( ) [EOL] [EOL] def get_success_url ( self ) : [EOL] return reverse ( [string] , kwargs = { [string] : self . object . pk } ) [EOL] [EOL] [EOL] [EOL] class QuizDeleteView ( DeleteView ) : [EOL] model = Quiz [EOL] context_object_name = [string] [EOL] template_name = [string] [EOL] success_url = reverse_lazy ( [string] ) [EOL] [EOL] def delete ( self , request , * args , ** kwargs ) : [EOL] quiz = self . get_object ( ) [EOL] messages . success ( request , [string] % quiz . name ) [EOL] return super ( ) . delete ( request , * args , ** kwargs ) [EOL] [EOL] def get_queryset ( self ) : [EOL] return self . request . user . quizzes . all ( ) [EOL] [EOL] [EOL] [EOL] class QuizResultsView ( DetailView ) : [EOL] model = Quiz [EOL] context_object_name = [string] [EOL] template_name = [string] [EOL] [EOL] def get_context_data ( self , ** kwargs ) : [EOL] quiz = self . get_object ( ) [EOL] taken_quizzes = quiz . taken_quizzes . select_related ( [string] ) . order_by ( [string] ) [EOL] total_taken_quizzes = taken_quizzes . count ( ) [EOL] quiz_score = quiz . taken_quizzes . aggregate ( average_score = Avg ( [string] ) ) [EOL] extra_context = { [string] : taken_quizzes , [string] : total_taken_quizzes , [string] : quiz_score } [EOL] kwargs . update ( extra_context ) [EOL] return super ( ) . get_context_data ( ** kwargs ) [EOL] [EOL] def get_queryset ( self ) : [EOL] return self . request . user . quizzes . all ( ) [EOL] [EOL] [EOL] [EOL] def question_add ( request , pk ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] quiz = get_object_or_404 ( Quiz , pk = pk , owner = request . user ) [EOL] [EOL] if request . method == [string] : [EOL] form = QuestionForm ( request . POST ) [EOL] if form . is_valid ( ) : [EOL] question = form . save ( commit = False ) [EOL] question . quiz = quiz [EOL] question . save ( ) [EOL] messages . success ( request , [string] ) [EOL] return redirect ( [string] , quiz . pk , question . pk ) [EOL] else : [EOL] form = QuestionForm ( ) [EOL] [EOL] return render ( request , [string] , { [string] : quiz , [string] : form } ) [EOL] [EOL] [EOL] [EOL] def question_change ( request , quiz_pk , question_pk ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] quiz = get_object_or_404 ( Quiz , pk = quiz_pk , owner = request . user ) [EOL] question = get_object_or_404 ( Question , pk = question_pk , quiz = quiz ) [EOL] [EOL] AnswerFormSet = inlineformset_factory ( Question , Answer , formset = BaseAnswerInlineFormSet , fields = ( [string] , [string] ) , min_num = [number] , validate_min = True , max_num = [number] , validate_max = True ) [EOL] [EOL] if request . method == [string] : [EOL] form = QuestionForm ( request . POST , instance = question ) [EOL] formset = AnswerFormSet ( request . POST , instance = question ) [EOL] if form . is_valid ( ) and formset . is_valid ( ) : [EOL] with transaction . atomic ( ) : [EOL] form . save ( ) [EOL] formset . save ( ) [EOL] messages . success ( request , [string] ) [EOL] return redirect ( [string] , quiz . pk ) [EOL] else : [EOL] form = QuestionForm ( instance = question ) [EOL] formset = AnswerFormSet ( instance = question ) [EOL] [EOL] return render ( request , [string] , { [string] : quiz , [string] : question , [string] : form , [string] : formset } ) [EOL] [EOL] [EOL] [EOL] class QuestionDeleteView ( DeleteView ) : [EOL] model = Question [EOL] context_object_name = [string] [EOL] template_name = [string] [EOL] pk_url_kwarg = [string] [EOL] [EOL] def get_context_data ( self , ** kwargs ) : [EOL] question = self . get_object ( ) [EOL] kwargs [ [string] ] = question . quiz [EOL] return super ( ) . get_context_data ( ** kwargs ) [EOL] [EOL] def delete ( self , request , * args , ** kwargs ) : [EOL] question = self . get_object ( ) [EOL] messages . success ( request , [string] % question . text ) [EOL] return super ( ) . delete ( request , * args , ** kwargs ) [EOL] [EOL] def get_queryset ( self ) : [EOL] return Question . objects . filter ( quiz__owner = self . request . user ) [EOL] [EOL] def get_success_url ( self ) : [EOL] question = self . get_object ( ) [EOL] return reverse ( [string] , kwargs = { [string] : question . quiz_id } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[classroom.views.teachers.QuizListView]$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[classroom.views.teachers.QuizCreateView]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[classroom.views.teachers.QuizUpdateView]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[classroom.views.teachers.QuizDeleteView]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Type[classroom.views.teachers.QuizDeleteView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[classroom.views.teachers.QuizResultsView]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[classroom.views.teachers.QuestionDeleteView]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0
	0
	0
from typing import Dict , Set , Any , Counter , List [EOL] import frontend [EOL] import typing [EOL] import transactions [EOL] import collections [EOL] import accounts [EOL] from django . contrib . auth . decorators import login_required [EOL] from django . http import HttpResponse , HttpResponseRedirect , JsonResponse [EOL] from django . shortcuts import render , redirect , get_object_or_404 [EOL] from django . contrib . auth . models import User [EOL] from django . db . models . aggregates import Max [EOL] from django . core . paginator import Paginator [EOL] from collections import Counter [EOL] from django . urls import reverse [EOL] import requests [EOL] [EOL] import json [EOL] from decouple import config [EOL] [EOL] import base64 [EOL] import urllib . parse [EOL] from django . contrib import messages [EOL] from django . core import mail [EOL] from django . template . loader import render_to_string [EOL] from django . utils . html import strip_tags [EOL] [EOL] from accounts . forms import ProfileTypeForm , DeveloperFillingDetailsForm , RecruiterFillingDetailsForm [EOL] from transactions . models import Transaction , Candidate , OpenCall , Applications [EOL] from invitations . models import Invitation [EOL] from projects . models import Project , Framework [EOL] from frontend . form import Projectinvite , EditProjectForm , Submissions , Portfolio_form , Github_form , Experience_Form , About [EOL] from frontend . models import candidatesprojects , devs , recruiters , submissions , Portfolio , Github , Experience [EOL] from classroom . models import TakenQuiz , Student [EOL] from marketplace . models import Job [EOL] from taggit . models import TaggedItem [EOL] @ login_required def developer_filling_details ( request , current_profile ) : [EOL] if request . method == [string] : [EOL] developer_filling_details_form = DeveloperFillingDetailsForm ( request . POST , request . FILES ) [EOL] if developer_filling_details_form . is_valid ( ) : [EOL] current_profile . github_repo = developer_filling_details_form . cleaned_data [ [string] ] [EOL] current_profile . linkedin_url = developer_filling_details_form . cleaned_data [ [string] ] [EOL] current_profile . portfolio = developer_filling_details_form . cleaned_data [ [string] ] [EOL] current_profile . language = developer_filling_details_form . cleaned_data [ [string] ] [EOL] current_profile . framework = developer_filling_details_form . cleaned_data [ [string] ] [EOL] current_profile . years = developer_filling_details_form . cleaned_data [ [string] ] , [EOL] current_profile . gender = developer_filling_details_form . cleaned_data [ [string] ] [EOL] current_profile . availabilty = developer_filling_details_form . cleaned_data [ [string] ] [EOL] current_profile . country = developer_filling_details_form . cleaned_data [ [string] ] [EOL] current_profile . phone_number = developer_filling_details_form . cleaned_data [ [string] ] [EOL] current_profile . stage = [string] [EOL] current_profile . save ( ) [EOL] [EOL] user = User . objects . get ( username = request . user ) [EOL] exp1 = [string] [EOL] exp2 = [string] [EOL] [comment] [EOL] if user . profile . years == [string] : [EOL] exp1 = [string] [EOL] exp2 = [string] [EOL] elif user . profile . years == [string] : [EOL] exp1 = [string] [EOL] exp2 = [string] [EOL] elif user . profile . years == [string] : [EOL] exp1 = [string] [EOL] exp2 = [string] [EOL] [EOL] profile_tags = [ current_profile . language , current_profile . framework , exp1 , exp2 , current_profile . country . name , current_profile . availabilty ] [EOL] [EOL] print ( [string] , profile_tags ) [EOL] [EOL] current_profile . tags . add ( profile_tags [ [number] ] , profile_tags [ [number] ] , profile_tags [ [number] ] , profile_tags [ [number] ] , profile_tags [ [number] ] , profile_tags [ [number] ] ) [EOL] [EOL] return redirect ( reverse ( [string] ) ) [EOL] else : [EOL] developer_filling_details_form = DeveloperFillingDetailsForm ( ) [EOL] return render ( request , [string] , { [string] : developer_filling_details_form } ) [EOL] [EOL] [EOL] @ login_required def recruiter_filling_details ( request , current_profile ) : [EOL] if request . method == [string] : [EOL] recruiter_filling_details_form = RecruiterFillingDetailsForm ( request . POST ) [EOL] if recruiter_filling_details_form . is_valid ( ) : [EOL] current_profile . company = recruiter_filling_details_form . cleaned_data [ [string] ] [EOL] current_profile . job_role = recruiter_filling_details_form . cleaned_data [ [string] ] [EOL] current_profile . industry = recruiter_filling_details_form . cleaned_data [ [string] ] [EOL] current_profile . country = recruiter_filling_details_form . cleaned_data [ [string] ] [EOL] current_profile . company_url = recruiter_filling_details_form . cleaned_data [ [string] ] [EOL] current_profile . stage = [string] [EOL] current_profile . save ( ) [EOL] return redirect ( reverse ( [string] ) ) [EOL] else : [EOL] recruiter_filling_details_form = RecruiterFillingDetailsForm ( ) [EOL] return render ( request , [string] , { [string] : recruiter_filling_details_form } ) [EOL] [EOL] [EOL] @ login_required def profile_type_selection ( request , current_profile ) : [EOL] if request . method == [string] : [EOL] profile_type_form = ProfileTypeForm ( request . POST ) [EOL] if profile_type_form . is_valid ( ) : [EOL] profile_type = profile_type_form . cleaned_data [ [string] ] [EOL] current_profile . user_type = profile_type [EOL] if profile_type == [string] : [EOL] current_profile . stage = [string] [EOL] [comment] [EOL] [comment] [EOL] elif profile_type == [string] : [EOL] current_profile . stage = [string] [EOL] current_profile . save ( ) [EOL] return redirect ( reverse ( [string] ) ) [EOL] else : [EOL] profile_type_form = ProfileTypeForm ( ) [EOL] return render ( request , [string] , { [string] : profile_type_form } ) [EOL] [EOL] [EOL] def index ( request ) : [EOL] if request . user . is_authenticated : [EOL] current_profile = request . user . profile [EOL] transactions = Transaction . objects . filter ( user = request . user ) . filter ( stage = [string] ) [EOL] if request . user . profile . stage == [string] : [EOL] return profile_type_selection ( request , current_profile ) [EOL] elif request . user . profile . stage == [string] : [EOL] return developer_filling_details ( request , current_profile ) [EOL] elif request . user . profile . stage == [string] : [EOL] return recruiter_filling_details ( request , current_profile ) [EOL] elif request . user . profile . stage == [string] : [EOL] if request . user . profile . user_type == [string] : [EOL] try : [EOL] [comment] [EOL] [comment] [EOL] student = Student . objects . get ( user_id = request . user . id ) [EOL] passedquizz = TakenQuiz . objects . filter ( score__gt = [number] ) . filter ( student_id = student ) [EOL] return render ( request , [string] , { [string] : passedquizz } ) [EOL] except Student . DoesNotExist : [EOL] obj = Student ( user = request . user ) [EOL] obj . save ( ) [EOL] return render ( request , [string] ) [EOL] [EOL] elif request . user . profile . user_type == [string] : [EOL] jobs = Job . objects . filter ( posted_by = request . user ) [EOL] return render ( request , [string] , { [string] : transactions , [string] : jobs } ) [EOL] else : [EOL] return home ( request ) [EOL] [EOL] [EOL] def home ( request ) : [EOL] return render ( request , [string] ) [EOL] [EOL] [EOL] @ login_required def activity ( request ) : [EOL] if request . user . is_authenticated : [EOL] transactions = Transaction . objects . filter ( user = request . user ) [EOL] opencalls = OpenCall . objects . filter ( recruiter = request . user ) [EOL] alltransactions = [ ] [EOL] allopencalls = [ ] [EOL] for transaction in transactions : [EOL] alltransactions . append ( transaction . id ) [EOL] for opencall in opencalls : [EOL] allopencalls . append ( opencall . transaction . id ) [EOL] [EOL] res = set ( alltransactions ) - set ( allopencalls ) [EOL] [EOL] closedprojects = list ( res ) [EOL] [EOL] [EOL] if request . user . profile . user_type == [string] : [EOL] return render ( request , [string] , { [string] : transactions , [string] : closedprojects , [string] : allopencalls } ) [EOL] elif request . user . profile . user_type == [string] : [EOL] return render ( request , [string] , { [string] : transactions } ) [EOL] [EOL] @ login_required def tracker ( request , id ) : [EOL] project = Transaction . objects . get ( id = id ) [EOL] candidates = candidatesprojects . objects . filter ( transaction = id ) [EOL] submitted = submissions . objects . filter ( transaction = id ) . all ( ) [EOL] return render ( request , [string] , { [string] : candidates , [string] : project , [string] : submitted } ) [EOL] [EOL] [EOL] @ login_required def inprogress ( request ) : [EOL] user = request . user . id [EOL] projects = candidatesprojects . objects . filter ( candidate = user ) [EOL] return render ( request , [string] , { [string] : projects } ) [EOL] [EOL] [EOL] @ login_required def invites ( request ) : [EOL] candidates = Candidate . objects . filter ( email = request . user . email ) [EOL] return render ( request , [string] , { [string] : candidates } ) [EOL] [EOL] [EOL] @ login_required def projectdetails ( request , id ) : [EOL] form = Submissions ( ) [EOL] transaction = candidatesprojects . objects . get ( id = id ) [EOL] projectinvite = Projectinvite ( ) [EOL] if Applications . objects . filter ( candidate_id = request . user . id ) . filter ( transaction_id = transaction . transaction_id ) . exists ( ) : [EOL] opencall = Applications . objects . filter ( candidate_id = request . user . id ) . filter ( transaction_id = transaction . transaction_id ) . get ( ) [EOL] else : [EOL] opencall = None [EOL] project = candidatesprojects . objects . get ( id = id ) [EOL] return render ( request , [string] , { [string] : project , [string] : projectinvite , [string] : opencall , [string] : form } ) [EOL] [EOL] [EOL] @ login_required def pendingproject ( request , transaction_id ) : [EOL] acceptedinvites = candidatesprojects . objects . filter ( transaction_id = transaction_id , candidate = request . user ) [EOL] transaction = Transaction . objects . get ( id = transaction_id ) [EOL] [EOL] return render ( request , [string] , { [string] : transaction , [string] : acceptedinvites } ) [EOL] [EOL] @ login_required def projectinvites ( request , transaction_id ) : [EOL] user = request . user . id [EOL] trans_id = Transaction . objects . get ( id = transaction_id ) [EOL] currentcandidate = User . objects . get ( id = user ) [EOL] [EOL] acceptedinvite = candidatesprojects ( transaction = trans_id , candidate = currentcandidate , stage = [string] ) [EOL] acceptedinvite . save ( ) [EOL] return redirect ( [string] ) [EOL] [EOL] @ login_required def update_candidateprojects ( request , candidateproject_id , transaction_id ) : [EOL] transaction = Transaction . objects . get ( id = transaction_id ) [EOL] candidatesproject = candidatesprojects . objects . get ( id = candidateproject_id ) [EOL] candidatesproject . stage = [string] [EOL] candidatesproject . save ( ) [EOL] return HttpResponseRedirect ( [string] % candidateproject_id ) [EOL] [EOL] @ login_required def update_finished ( request , candidateproject_id , transaction_id ) : [EOL] transaction = Transaction . objects . get ( id = transaction_id ) [EOL] candidatesproject = candidatesprojects . objects . get ( id = candidateproject_id ) [EOL] candidatesproject . stage = [string] [EOL] candidatesproject . save ( ) [EOL] return HttpResponseRedirect ( [string] % candidateproject_id ) [EOL] [EOL] @ login_required def update_finishedopencall ( request , project_id , transaction_id ) : [EOL] if request . method == [string] : [EOL] submission_form = Submissions ( request . POST ) [EOL] if submission_form . is_valid ( ) : [EOL] transaction = Transaction . objects . get ( id = transaction_id ) [EOL] [EOL] subject = [string] [EOL] repo = submission_form . cleaned_data [ [string] ] [EOL] demo = submission_form . cleaned_data [ [string] ] [EOL] html_message = render_to_string ( [string] , { [string] : request . user , [string] : transaction , [string] : demo , [string] : repo } ) [EOL] plain_message = strip_tags ( html_message ) [EOL] from_email = [string] [EOL] to = [string] [EOL] mail . send_mail ( subject , plain_message , from_email , [ to ] , html_message = html_message ) [EOL] [EOL] candidatesproject = candidatesprojects . objects . get ( id = project_id ) [EOL] candidatesproject . stage = [string] [EOL] candidatesproject . save ( ) [EOL] submit = submissions ( candidate = request . user , transaction = transaction , demo = demo , repo = repo ) [EOL] submit . save ( ) [EOL] return HttpResponseRedirect ( [string] % project_id ) [EOL] [EOL] def pricing ( request ) : [EOL] return render ( request , [string] ) [EOL] [EOL] [EOL] def dev ( request ) : [EOL] return render ( request , [string] ) [EOL] [EOL] def competitions ( request ) : [EOL] return render ( request , [string] ) [EOL] [EOL] def takenquizzes ( request ) : [EOL] taken = TakenQuiz . objects . all ( ) [EOL] allquizzes = TakenQuiz . objects . filter ( score__gte = [number] ) . all ( ) [EOL] [EOL] return render ( request , [string] , { [string] : allquizzes , [string] : taken } ) [EOL] [EOL] def howitworks ( request ) : [EOL] return render ( request , [string] ) [EOL] [EOL] [EOL] def report ( request , email , transaction_id ) : [EOL] user = User . objects . get ( email = email ) [EOL] transaction = Transaction . objects . get ( id = transaction_id ) [EOL] return render ( request , [string] , { [string] : user , [string] : transaction } ) [EOL] [EOL] [EOL] def onboarddevs ( request ) : [EOL] for alluser in User . objects . all ( ) : [EOL] if alluser . profile . user_type == [string] : [EOL] if alluser . profile . stage == [string] : [EOL] if not devs . objects . filter ( email = alluser . email ) . exists ( ) : [EOL] dev = devs ( ) [EOL] dev . email = alluser . email [EOL] dev . firstname = alluser . first_name [EOL] dev . lastname = alluser . last_name [EOL] dev . language = alluser . profile . language [EOL] dev . framework = alluser . profile . framework [EOL] dev . country = alluser . profile . country [EOL] dev . github = alluser . profile . github_repo [EOL] dev . linkedin = alluser . profile . linkedin_url [EOL] dev . portfolio = alluser . profile . portfolio [EOL] dev . save ( ) [EOL] [EOL] return redirect ( reverse ( [string] ) ) [EOL] [EOL] [EOL] def onboardrecruiters ( request ) : [EOL] for alluser in User . objects . all ( ) : [EOL] if alluser . profile . user_type == [string] : [EOL] if alluser . profile . stage == [string] : [EOL] if not recruiters . objects . filter ( email = alluser . email ) . exists ( ) : [EOL] recruiter = recruiters ( ) [EOL] recruiter . email = alluser . email [EOL] recruiter . firstname = alluser . first_name [EOL] recruiter . lastname = alluser . last_name [EOL] recruiter . company = alluser . profile . company [EOL] recruiter . companyurl = alluser . profile . company_url [EOL] recruiter . country = alluser . profile . country [EOL] recruiter . save ( ) [EOL] [EOL] return redirect ( reverse ( [string] ) ) [EOL] [EOL] [EOL] def credits ( request ) : [EOL] return render ( request , [string] ) [EOL] [EOL] def management ( request ) : [EOL] return render ( request , [string] ) [EOL] [EOL] [EOL] def privacy ( request ) : [EOL] return render ( request , [string] ) [EOL] [EOL] [EOL] def terms ( request ) : [EOL] return render ( request , [string] ) [EOL] [EOL] [EOL] def sample ( request ) : [EOL] return render ( request , [string] ) [EOL] [EOL] [EOL] def page_404 ( request ) : [EOL] return render ( request , [string] ) [EOL] [EOL] [EOL] def page_500 ( request ) : [EOL] return render ( request , [string] ) [EOL] [EOL] [EOL] def seedevs ( request ) : [EOL] developers = devs . objects . all ( ) [EOL] return render ( request , [string] , { [string] : developers } ) [EOL] [EOL] [EOL] def seerecruiters ( request ) : [EOL] payers = recruiters . objects . all ( ) [EOL] return render ( request , [string] , { [string] : payers } ) [EOL] [EOL] @ login_required def manageprojects ( request ) : [EOL] projects = Project . objects . all ( ) [EOL] return render ( request , [string] , { [string] : projects } ) [EOL] [EOL] @ login_required def managetransactions ( request ) : [EOL] transactions = Transaction . objects . all ( ) [EOL] return render ( request , [string] , { [string] : transactions } ) [EOL] [EOL] @ login_required def editproject ( request , project_id ) : [EOL] instance = get_object_or_404 ( Project , id = project_id ) [EOL] project = Project . objects . get ( id = project_id ) [EOL] form = EditProjectForm ( request . POST or None , instance = instance ) [EOL] if form . is_valid ( ) : [EOL] form . save ( ) [EOL] return redirect ( [string] ) [EOL] [EOL] return render ( request , [string] , { [string] : project , [string] : form } ) [EOL] [EOL] @ login_required def deleteproject ( request , project_id ) : [EOL] Project . objects . filter ( id = project_id ) . delete ( ) [EOL] return redirect ( [string] ) [EOL] @ login_required def addproject ( request ) : [EOL] form = EditProjectForm ( request . POST or None ) [EOL] if form . is_valid ( ) : [EOL] form . save ( ) [EOL] return redirect ( [string] ) [EOL] return render ( request , [string] , { [string] : form } ) [EOL] [EOL] @ login_required def edittransactions ( request , transaction_id ) : [EOL] transaction = Transaction . objects . get ( id = transaction_id ) [EOL] candidates = Candidate . objects . filter ( transaction_id = transaction_id ) [EOL] return render ( request , [string] , { [string] : transaction , [string] : candidates } ) [EOL] @ login_required def deletetransaction ( request , transaction_id ) : [EOL] OpenCall . objects . filter ( transaction_id = transaction_id ) . delete ( ) [EOL] Transaction . objects . filter ( id = transaction_id ) . delete ( ) [EOL] Candidate . objects . filter ( transaction_id = transaction_id ) . delete ( ) [EOL] return redirect ( [string] ) [EOL] def closetransaction ( request , transaction_id ) : [EOL] project = Transaction . objects . get ( id = transaction_id ) [EOL] project . closed = True [EOL] project . save ( ) [EOL] return redirect ( [string] ) [EOL] @ login_required def buildproject ( request ) : [EOL] return render ( request , [string] ) [EOL] @ login_required def calltoapply ( request ) : [EOL] alltransactions = Transaction . objects . filter ( stage = [string] ) . filter ( closed = False ) [EOL] complete = [ ] [EOL] for i in alltransactions : [EOL] complete . append ( i . id ) [EOL] [EOL] opportunities = OpenCall . objects . all ( ) [EOL] opencalls = [ ] [EOL] for io in opportunities : [EOL] opencalls . append ( io . transaction . id ) [EOL] [EOL] payedopencalls = set ( complete ) & set ( opencalls ) [EOL] payed = list ( payedopencalls ) [EOL] [EOL] qualifys = Applications . objects . filter ( candidate = request . user ) [EOL] student = Student . objects . get ( user_id = request . user . id ) [EOL] passedquizz = TakenQuiz . objects . filter ( score__gte = [number] ) . filter ( student_id = student ) [EOL] [EOL] allsubjectspassed = [ ] [EOL] for d in passedquizz : [EOL] allsubjectspassed . append ( d . quiz . subject ) [EOL] [EOL] uniquesubjects = list ( set ( allsubjectspassed ) ) [EOL] uniquelangs = [ ] [EOL] langs = { } [EOL] for unique in uniquesubjects : [EOL] izzes = TakenQuiz . objects . filter ( quiz__subject_id = unique . id ) . filter ( student_id = student ) [EOL] [EOL] for i in izzes : [EOL] langs [ i . quiz . subject . name ] = i . quiz . subject . name [EOL] original = [ ] [EOL] taken = [ ] [EOL] for oppo in payed : [EOL] original . append ( oppo ) [EOL] for qualify in qualifys : [EOL] taken . append ( qualify . transaction . id ) [EOL] untaken = [ ] [EOL] [EOL] non = set ( original ) - set ( taken ) [EOL] untaken = list ( non ) [EOL] untakenopportunities = [ ] [EOL] for untake in untaken : [EOL] untakentrans = Transaction . objects . get ( id = untake ) [EOL] untakenopportunities . append ( untakentrans . id ) [EOL] [EOL] return render ( request , [string] , { [string] : opportunities , [string] : qualifys , [string] : original , [string] : taken , [string] : untaken , [string] : langs , [string] : qualifys } ) [EOL] @ login_required def apply ( request , opportunity_id ) : [EOL] language = OpenCall . objects . get ( transaction = opportunity_id ) [EOL] student = Student . objects . get ( user_id = request . user . id ) [EOL] passedquizz = TakenQuiz . objects . filter ( score__gte = [number] ) . filter ( student_id = student ) [EOL] [EOL] [EOL] allsubjectspassed = [ ] [EOL] for d in passedquizz : [EOL] allsubjectspassed . append ( d . quiz . subject ) [EOL] [EOL] uniquesubjects = list ( set ( allsubjectspassed ) ) [EOL] [EOL] [EOL] for pa in uniquesubjects : [EOL] blu = TakenQuiz . objects . filter ( quiz__subject = pa ) . filter ( student_id = student ) [EOL] doublequizzes = [ ] [EOL] for paz in blu : [EOL] doublequizzes . append ( paz . score ) [EOL] [EOL] [EOL] if pa . name == language . transaction . framework . language . name or pa . name == language . transaction . framework . name : [comment] [EOL] qualifiedcandidate = Applications ( recruiter = language . recruiter , transaction = language . transaction , project = language . project , candidate = request . user , stage = [string] , score = max ( doublequizzes ) ) [EOL] [EOL] qualifiedcandidate . save ( ) [EOL] [EOL] [EOL] [EOL] [EOL] return redirect ( [string] ) [EOL] @ login_required def opencalltracker ( request , trans_id ) : [EOL] candidatespicked = Candidate . objects . filter ( transaction_id = trans_id ) [EOL] [EOL] candidates = Applications . objects . filter ( transaction = trans_id ) . order_by ( [string] ) [EOL] return render ( request , [string] , { [string] : candidates , [string] : trans_id , [string] : candidatespicked } ) [EOL] @ login_required def pickcandidates ( request , trans_id , candidate_id ) : [EOL] candidate = User . objects . get ( id = candidate_id ) [EOL] transaction = Transaction . objects . get ( id = trans_id ) [EOL] application = Applications . objects . filter ( transaction = trans_id ) . filter ( candidate_id = candidate_id ) . get ( ) [EOL] application . stage = [string] [EOL] newcandidate = Candidate ( email = application . candidate . email , first_name = application . candidate . first_name , last_name = application . candidate . last_name , transaction = transaction ) [EOL] newcandidate . save ( ) [EOL] application . save ( ) [EOL] subject = [string] [EOL] html_message = render_to_string ( [string] , { [string] : request . user , [string] : transaction } ) [EOL] plain_message = strip_tags ( html_message ) [EOL] from_email = [string] [EOL] to = candidate . email [EOL] mail . send_mail ( subject , plain_message , from_email , [ to ] , html_message = html_message ) [EOL] return HttpResponseRedirect ( [string] % trans_id ) [EOL] [EOL] [EOL] @ login_required def portfolio ( request ) : [EOL] try : [EOL] [EOL] candidate = Github . objects . get ( candidate = request . user ) [EOL] user = candidate . github_username [EOL] username = config ( [string] , default = [string] ) [EOL] token = config ( [string] , default = [string] ) [EOL] json_data = requests . get ( [string] + user , auth = ( username , token ) ) . json ( ) [EOL] [EOL] form = Portfolio_form ( ) [EOL] experience_form = Experience_Form ( ) [EOL] about_form = About ( ) [EOL] repo = [string] + user + [string] [EOL] repos = requests . get ( repo , auth = ( username , token ) ) . json ( ) [EOL] paginator = Paginator ( repos , [number] ) [EOL] [EOL] page = request . GET . get ( [string] ) [EOL] repoz = paginator . get_page ( page ) [EOL] languages = [ ] [EOL] [EOL] for i in repos : [EOL] for x in i : [EOL] languages . append ( i [ [string] ] ) [EOL] [EOL] counter = Counter ( languages ) [EOL] labels = [ ] [EOL] c = { } [EOL] items = [ ] [EOL] for z in counter : [EOL] c [ z ] = counter [ z ] [EOL] labels . append ( z ) [EOL] items . append ( counter [ z ] ) [EOL] data = { [string] : labels , [string] : items , } [EOL] student = Student . objects . get ( user_id = request . user . id ) [EOL] verified_skills = TakenQuiz . objects . filter ( student = student ) . filter ( score__gte = [number] ) . all ( ) [EOL] skill = [ ] [EOL] for verified_skill in verified_skills : [EOL] skill . append ( verified_skill . quiz . subject . name ) [EOL] skillset = set ( skill ) [EOL] skills = list ( skillset ) [EOL] [EOL] [EOL] [EOL] experiences = Experience . objects . filter ( candidate = request . user ) . all ( ) [EOL] verified_projects = Portfolio . objects . filter ( candidate = request . user ) . all ( ) [EOL] return render ( request , [string] , { [string] : json_data , [string] : repoz , [string] : data , [string] : c , [string] : form , [string] : verified_projects , [string] : experience_form , [string] : experiences , [string] : skills , [string] : candidate , [string] : about_form } ) [EOL] except Github . DoesNotExist : [EOL] form = Github_form ( ) [EOL] [EOL] return render ( request , [string] , { [string] : form } ) [EOL] [EOL] [EOL] @ login_required def newproject ( request ) : [EOL] if request . method == [string] : [EOL] myprojects = Portfolio_form ( request . POST ) [EOL] if myprojects . is_valid ( ) : [EOL] title = myprojects . cleaned_data [ [string] ] [EOL] description = myprojects . cleaned_data [ [string] ] [EOL] repo = myprojects . cleaned_data [ [string] ] [EOL] demo = myprojects . cleaned_data [ [string] ] [EOL] newprojo = Portfolio ( candidate = request . user , demo_link = demo , repository_link = repo , title = title , description = description ) [EOL] newprojo . save ( ) [EOL] return redirect ( reverse ( [string] ) ) [EOL] @ login_required def get_data ( request , * args , ** kwargs ) : [EOL] try : [EOL] candidate = Github . objects . get ( candidate = request . user ) [EOL] user = candidate . github_username [EOL] username = config ( [string] , default = [string] ) [EOL] token = config ( [string] , default = [string] ) [EOL] repo = [string] + user + [string] [EOL] repos = requests . get ( repo , auth = ( username , token ) ) . json ( ) [EOL] [EOL] languages = [ ] [EOL] for i in repos : [EOL] for x in i : [EOL] languages . append ( i [ [string] ] ) [EOL] counter = Counter ( languages ) [EOL] labels = [ ] [EOL] items = [ ] [EOL] for z in counter : [EOL] labels . append ( z ) [EOL] items . append ( counter [ z ] ) [EOL] data = { [string] : labels , [string] : items , } [EOL] [EOL] return JsonResponse ( data ) [EOL] [EOL] [EOL] except Github . DoesNotExist : [EOL] form = Github_form ( ) [EOL] [EOL] return render ( request , [string] , { [string] : form } ) [EOL] [EOL] def github ( request ) : [EOL] if request . method == [string] : [EOL] newuser = Github_form ( request . POST ) [EOL] if newuser . is_valid ( ) : [EOL] username = newuser . cleaned_data [ [string] ] [EOL] password = newuser . cleaned_data [ [string] ] [EOL] [EOL] if requests . get ( [string] + username , auth = ( username , password ) ) : [EOL] newgithubprofile = Github ( candidate = request . user , github_username = username ) [EOL] newgithubprofile . save ( ) [EOL] return redirect ( reverse ( [string] ) ) [EOL] else : [EOL] [EOL] [EOL] return redirect ( reverse ( [string] ) ) [EOL] [EOL] return redirect ( reverse ( [string] ) ) [EOL] def experience ( request ) : [EOL] if request . method == [string] : [EOL] new_experience = Experience_Form ( request . POST ) [EOL] if new_experience . is_valid ( ) : [EOL] title = new_experience . cleaned_data [ [string] ] [EOL] company = new_experience . cleaned_data [ [string] ] [EOL] description = new_experience . cleaned_data [ [string] ] [EOL] location = new_experience . cleaned_data [ [string] ] [EOL] duration = new_experience . cleaned_data [ [string] ] [EOL] experience = Experience ( candidate = request . user , title = title , description = description , company = company , location = location , duration = duration ) [EOL] experience . save ( ) [EOL] return redirect ( reverse ( [string] ) ) [EOL] else : [EOL] return redirect ( reverse ( [string] ) ) [EOL] [EOL] [EOL] return redirect ( reverse ( [string] ) ) [EOL] [EOL] @ login_required def editportfolioproject ( request , project_id ) : [EOL] instance = get_object_or_404 ( Portfolio , id = project_id ) [EOL] project = Portfolio . objects . get ( id = project_id ) [EOL] form = Portfolio_form ( request . POST or None , instance = instance ) [EOL] if form . is_valid ( ) : [EOL] form . save ( ) [EOL] return redirect ( [string] ) [EOL] [EOL] return render ( request , [string] , { [string] : project , [string] : form } ) [EOL] [EOL] def about ( request , candidate_id ) : [EOL] instance = get_object_or_404 ( Github , candidate_id = candidate_id ) [EOL] if request . method == [string] : [EOL] new_about = About ( request . POST or None , instance = instance ) [EOL] if new_about . is_valid ( ) : [EOL] new_about . save ( ) [EOL] return redirect ( [string] ) [EOL] return redirect ( reverse ( [string] ) ) [EOL] [EOL] [EOL]	
from typing import List , Type [EOL] import frontend [EOL] import typing [EOL] from django import forms [EOL] from django . forms import ModelForm , Form [EOL] from frontend . models import candidatesprojects , Portfolio , Github , Experience [EOL] from projects . models import Framework , Project [EOL] from django_countries . fields import CountryField [EOL] [EOL] [EOL] class Projectinvite ( forms . ModelForm ) : [EOL] stage = forms . CharField ( required = True ) [EOL] transaction = forms . IntegerField ( required = True ) [EOL] candidate = forms . IntegerField ( required = True ) [EOL] [EOL] class Meta : [EOL] model = candidatesprojects [EOL] fields = [ [string] , [string] , [string] ] [EOL] class Submissions ( Form ) : [EOL] repositorylink = forms . CharField ( required = True ) [EOL] demolink = forms . CharField ( required = True ) [EOL] class Experience_Form ( forms . ModelForm ) : [EOL] title = forms . CharField ( required = True ) [EOL] description = forms . CharField ( widget = forms . Textarea ( attrs = { [string] : [number] } ) , required = True ) [EOL] duration = forms . IntegerField ( required = True ) [EOL] company = forms . CharField ( required = True ) [EOL] [EOL] class Meta : [EOL] model = Experience [EOL] fields = [ [string] , [string] , [string] , [string] , [string] ] [EOL] class Portfolio_form ( forms . ModelForm ) : [EOL] title = forms . CharField ( required = True ) [EOL] description = forms . CharField ( widget = forms . Textarea ( attrs = { [string] : [number] } ) , required = True ) [EOL] demo_link = forms . CharField ( required = True ) [EOL] repository_link = forms . CharField ( required = True ) [EOL] class Meta : [EOL] model = Portfolio [EOL] fields = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] class Github_form ( Form ) : [EOL] github_username = forms . CharField ( required = True ) [EOL] password = forms . CharField ( widget = forms . PasswordInput ( ) ) [EOL] [EOL] class About ( forms . ModelForm ) : [EOL] about = forms . CharField ( widget = forms . Textarea ( attrs = { [string] : [number] } ) , required = True ) [EOL] class Meta : [EOL] model = Github [EOL] fields = [ [string] ] [EOL] class EditProjectForm ( forms . ModelForm ) : [EOL] name = forms . CharField ( ) [EOL] brief = forms . CharField ( widget = forms . Textarea ( attrs = { [string] : [number] } ) , ) [EOL] description = forms . CharField ( widget = forms . Textarea ( attrs = { [string] : [number] } ) , ) [EOL] projectimage1 = forms . CharField ( widget = forms . Textarea ( attrs = { [string] : [number] } ) , ) [EOL] projectimage2 = forms . CharField ( widget = forms . Textarea ( attrs = { [string] : [number] } ) , ) [EOL] projectimage3 = forms . CharField ( widget = forms . Textarea ( attrs = { [string] : [number] } ) , required = False ) [EOL] projectimage4 = forms . CharField ( widget = forms . Textarea ( attrs = { [string] : [number] } ) , required = False ) [EOL] projectimage5 = forms . CharField ( widget = forms . Textarea ( attrs = { [string] : [number] } ) , required = False ) [EOL] projectimage6 = forms . CharField ( widget = forms . Textarea ( attrs = { [string] : [number] } ) , required = False ) [EOL] projectimage7 = forms . CharField ( widget = forms . Textarea ( attrs = { [string] : [number] } ) , required = False ) [EOL] projectimage8 = forms . CharField ( widget = forms . Textarea ( attrs = { [string] : [number] } ) , required = False ) [EOL] projectimage9 = forms . CharField ( widget = forms . Textarea ( attrs = { [string] : [number] } ) , required = False ) [EOL] projectimage10 = forms . CharField ( widget = forms . Textarea ( attrs = { [string] : [number] } ) , required = False ) [EOL] requirement1 = forms . CharField ( widget = forms . Textarea ( attrs = { [string] : [number] } ) , ) [EOL] requirement2 = forms . CharField ( widget = forms . Textarea ( attrs = { [string] : [number] } ) , ) [EOL] requirement3 = forms . CharField ( widget = forms . Textarea ( attrs = { [string] : [number] } ) , ) [EOL] requirement4 = forms . CharField ( widget = forms . Textarea ( attrs = { [string] : [number] } ) , ) [EOL] requirement5 = forms . CharField ( widget = forms . Textarea ( attrs = { [string] : [number] } ) , required = False ) [EOL] requirement6 = forms . CharField ( widget = forms . Textarea ( attrs = { [string] : [number] } ) , required = False ) [EOL] requirement7 = forms . CharField ( widget = forms . Textarea ( attrs = { [string] : [number] } ) , required = False ) [EOL] requirement8 = forms . CharField ( widget = forms . Textarea ( attrs = { [string] : [number] } ) , required = False ) [EOL] requirement9 = forms . CharField ( widget = forms . Textarea ( attrs = { [string] : [number] } ) , required = False ) [EOL] requirement10 = forms . CharField ( widget = forms . Textarea ( attrs = { [string] : [number] } ) , required = False ) [EOL] [EOL] [EOL] class Meta : [EOL] model = Project [EOL] [EOL] fields = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.Projectinvite]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.Projectinvite]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.Projectinvite]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.EditProjectForm.Meta]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.Submissions]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.Submissions]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.Experience_Form]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.Experience_Form]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.Experience_Form]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.Experience_Form]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.EditProjectForm.Meta]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.Portfolio_form]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.Portfolio_form]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.Portfolio_form]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.Portfolio_form]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.EditProjectForm.Meta]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.Github_form]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.Github_form]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.About]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.EditProjectForm.Meta]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.EditProjectForm]$ 0 0 0 0 0 0 0 $typing.Type[frontend.form.EditProjectForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.EditProjectForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.EditProjectForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.EditProjectForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.EditProjectForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.EditProjectForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.EditProjectForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.EditProjectForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.EditProjectForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.EditProjectForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.EditProjectForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.EditProjectForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.EditProjectForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.EditProjectForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.EditProjectForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.EditProjectForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.EditProjectForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.EditProjectForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.EditProjectForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.EditProjectForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.EditProjectForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.EditProjectForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.form.EditProjectForm.Meta]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Set , Any , List [EOL] import typing [EOL] from __future__ import absolute_import , unicode_literals [EOL] from celery import shared_task [EOL] from django . template . loader import render_to_string [EOL] from django . shortcuts import render , redirect , get_object_or_404 [EOL] from django . contrib . auth . models import User [EOL] from django . utils . html import strip_tags [EOL] from django . core import mail [EOL] from classroom . models import TakenQuiz [EOL] from transactions . models import Applications [EOL] from frontend . models import candidatesprojects [EOL] from accounts . models import Profile , User [EOL] import csv [EOL] [EOL] @ shared_task def reminderforprofiledevs ( request ) : [EOL] allusers = User . objects . all ( ) [EOL] for dev in allusers : [EOL] if dev . profile . user_type == [string] and dev . profile . stage == [string] : [EOL] subject = [string] [EOL] html_message = render_to_string ( [string] , { [string] : dev } ) [EOL] plain_message = strip_tags ( html_message ) [EOL] from_email = [string] [EOL] to = dev . email [EOL] mail . send_mail ( subject , plain_message , from_email , [ to ] , html_message = html_message ) [EOL] return render ( request , [string] ) [EOL] [EOL] def applyreminder ( request ) : [EOL] passed_set = TakenQuiz . objects . filter ( score__gte = [number] ) [EOL] all = [ ] [EOL] for pas in passed_set : [EOL] all . append ( pas . student . user . email ) [EOL] myset = set ( all ) [EOL] [EOL] taken = [ ] [EOL] applied = Applications . objects . all ( ) [EOL] for i in applied : [EOL] taken . append ( i . candidate . email ) [EOL] send_email = set ( all ) - set ( taken ) [EOL] emails = list ( send_email ) [EOL] for email in emails : [EOL] subject = [string] [EOL] html_message = render_to_string ( [string] ) [EOL] plain_message = strip_tags ( html_message ) [EOL] from_email = [string] [EOL] to = email [EOL] mail . send_mail ( subject , plain_message , from_email , [ to ] , html_message = html_message ) [EOL] [EOL] return render ( request , [string] ) [EOL] [EOL] [EOL] def massmail ( request ) : [EOL] angular = Profile . objects . filter ( framework__contains = [string] ) . filter ( country = [string] ) [EOL] react = Profile . objects . filter ( framework__contains = [string] ) . filter ( country = [string] ) [EOL] mongo = Profile . objects . filter ( framework__contains = [string] ) . filter ( country = [string] ) [EOL] python = Profile . objects . filter ( language__contains = [string] ) . filter ( country = [string] ) [EOL] golang = Profile . objects . filter ( language__contains = [string] ) . filter ( country = [string] ) [EOL] li = [ ] [EOL] newset = set ( li ) [EOL] new = list ( newset ) [EOL] me = [ ] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] for can in mongo : [EOL] li . append ( can . user_id ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] nn = [ ] [EOL] for m in new : [EOL] casc = User . objects . get ( id = m ) [EOL] nn . append ( casc . email ) [EOL] for jsk in nn : [EOL] print ( jsk ) [EOL] [EOL] [EOL] return render ( request , [string] ) [EOL] [EOL] def submission ( request ) : [EOL] me = [ ] [EOL] all = User . objects . all ( ) [EOL] for i in all : [EOL] if i . profile . user_type == [string] : [EOL] me . append ( ) [EOL] return render ( request , [string] ) [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class FrontendConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] [EOL] from frontend . views import index [EOL] from frontend . views import home , activity , tracker , update_candidateprojects , sample , inprogress , projectinvites , update_finished , invites , projectdetails , pendingproject , terms , dev , pricing , howitworks , privacy , report , credits , onboarddevs , onboardrecruiters , seedevs , seerecruiters , manageprojects , managetransactions , editproject , deleteproject , addproject , edittransactions , deletetransaction , buildproject , calltoapply , apply , opencalltracker , competitions , newproject , takenquizzes , get_data , pickcandidates , update_finishedopencall , portfolio , github , experience , closetransaction , editportfolioproject , about , management [EOL] from frontend . tasks import reminderforprofiledevs , applyreminder , massmail , submission [EOL] from accounts . views import update_profile [EOL] [EOL] app_name = [string] [EOL] urlpatterns = [ path ( [string] , index , name = [string] ) , path ( [string] , home , name = [string] ) , path ( [string] , tracker , name = [string] ) , path ( [string] , dev , name = [string] ) , path ( [string] , howitworks , name = [string] ) , path ( [string] , pricing , name = [string] ) , path ( [string] , report , name = [string] ) , path ( [string] , privacy , name = [string] ) , path ( [string] , terms , name = [string] ) , path ( [string] , sample , name = [string] ) , path ( [string] , credits , name = [string] ) , path ( [string] , inprogress , name = [string] ) , path ( [string] , invites , name = [string] ) , path ( [string] , pendingproject , name = [string] ) , path ( [string] , projectdetails , name = [string] ) , path ( [string] , activity , name = [string] ) , path ( [string] , update_profile , name = [string] ) , path ( [string] , projectinvites , name = [string] ) , path ( [string] , update_finished , name = [string] ) , path ( [string] , update_finishedopencall , name = [string] ) , path ( [string] , update_candidateprojects , name = [string] ) , path ( [string] , onboarddevs , name = [string] ) , path ( [string] , onboardrecruiters , name = [string] ) , path ( [string] , seedevs , name = [string] ) , path ( [string] , seerecruiters , name = [string] ) , path ( [string] , manageprojects , name = [string] ) , path ( [string] , managetransactions , name = [string] ) , path ( [string] , editproject , name = [string] ) , path ( [string] , deleteproject , name = [string] ) , path ( [string] , edittransactions , name = [string] ) , path ( [string] , deletetransaction , name = [string] ) , path ( [string] , closetransaction , name = [string] ) , path ( [string] , addproject , name = [string] ) , path ( [string] , calltoapply , name = [string] ) , path ( [string] , buildproject , name = [string] ) , path ( [string] , takenquizzes , name = [string] ) , path ( [string] , competitions , name = [string] ) , path ( [string] , apply , name = [string] ) , path ( [string] , opencalltracker , name = [string] ) , path ( [string] , pickcandidates , name = [string] ) , path ( [string] , reminderforprofiledevs , name = [string] ) , path ( [string] , applyreminder , name = [string] ) , path ( [string] , massmail , name = [string] ) , path ( [string] , submission , name = [string] ) , path ( [string] , portfolio , name = [string] ) , path ( [string] , github , name = [string] ) , path ( [string] , get_data , name = [string] ) , path ( [string] , newproject , name = [string] ) , path ( [string] , experience , name = [string] ) , path ( [string] , editportfolioproject , name = [string] ) , path ( [string] , about , name = [string] ) , path ( [string] , management , name = [string] ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import frontend [EOL] import typing [EOL] from django . contrib . auth . models import User [EOL] from django . db import models [EOL] [EOL] from django_countries . fields import CountryField [EOL] from projects . models import Language , Framework , Project [EOL] from transactions . models import Transaction [EOL] [EOL] [EOL] [comment] [EOL] class candidatesprojects ( models . Model ) : [EOL] stage = models . CharField ( default = [string] , max_length = [number] ) [EOL] candidate = models . ForeignKey ( User , on_delete = models . CASCADE ) [EOL] transaction = models . ForeignKey ( Transaction , on_delete = models . CASCADE ) [EOL] [EOL] [EOL] class devs ( models . Model ) : [EOL] email = models . EmailField ( null = True , max_length = [number] ) [EOL] language = models . CharField ( null = True , max_length = [number] ) [EOL] framework = models . CharField ( null = True , max_length = [number] ) [EOL] country = CountryField ( null = True , max_length = [number] ) [EOL] firstname = models . CharField ( null = True , max_length = [number] ) [EOL] lastname = models . CharField ( null = True , max_length = [number] ) [EOL] github = models . CharField ( null = True , max_length = [number] ) [EOL] linkedin = models . CharField ( null = True , max_length = [number] ) [EOL] portfolio = models . CharField ( null = True , max_length = [number] ) [EOL] [EOL] class recruiters ( models . Model ) : [EOL] email = models . EmailField ( null = True , max_length = [number] ) [EOL] country = CountryField ( null = True , max_length = [number] ) [EOL] firstname = models . CharField ( null = True , max_length = [number] ) [EOL] lastname = models . CharField ( null = True , max_length = [number] ) [EOL] company = models . CharField ( null = True , max_length = [number] ) [EOL] companyurl = models . CharField ( null = True , max_length = [number] ) [EOL] class submissions ( models . Model ) : [EOL] candidate = models . ForeignKey ( User , on_delete = models . CASCADE ) [EOL] transaction = models . ForeignKey ( Transaction , on_delete = models . CASCADE ) [EOL] demo = models . CharField ( null = True , max_length = [number] ) [EOL] repo = models . CharField ( null = True , max_length = [number] ) [EOL] [EOL] class Portfolio ( models . Model ) : [EOL] candidate = models . ForeignKey ( User , on_delete = models . CASCADE ) [EOL] title = models . CharField ( null = True , max_length = [number] ) [EOL] description = models . CharField ( null = True , max_length = [number] ) [EOL] repository_link = models . CharField ( null = True , max_length = [number] ) [EOL] demo_link = models . CharField ( null = True , max_length = [number] ) [EOL] verified = models . BooleanField ( default = False ) [EOL] [EOL] class Github ( models . Model ) : [EOL] candidate = models . ForeignKey ( User , on_delete = models . CASCADE ) [EOL] github_username = models . CharField ( null = True , max_length = [number] ) [EOL] about = models . CharField ( null = True , max_length = [number] ) [EOL] [EOL] class Experience ( models . Model ) : [EOL] candidate = models . ForeignKey ( User , on_delete = models . CASCADE ) [EOL] title = models . CharField ( null = True , max_length = [number] ) [EOL] company = models . CharField ( null = True , max_length = [number] ) [EOL] description = models . CharField ( null = True , max_length = [number] ) [EOL] location = CountryField ( null = True , max_length = [number] ) [EOL] duration = models . IntegerField ( null = True ) [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.models.candidatesprojects]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.models.candidatesprojects]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.models.candidatesprojects]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.models.devs]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.models.devs]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.models.devs]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.models.devs]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.models.devs]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.models.devs]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.models.devs]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.models.devs]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.models.devs]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.models.recruiters]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.models.recruiters]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.models.recruiters]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.models.recruiters]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.models.recruiters]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.models.recruiters]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.models.submissions]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.models.submissions]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.models.submissions]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.models.submissions]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.models.Portfolio]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.models.Portfolio]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.models.Portfolio]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.models.Portfolio]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.models.Portfolio]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.models.Portfolio]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.models.Github]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.models.Github]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.models.Github]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.models.Experience]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.models.Experience]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.models.Experience]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.models.Experience]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.models.Experience]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[frontend.models.Experience]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , migrations . DeleteModel ( name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] [EOL] from . import views [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ path ( [string] , views . create_or_edit_post , { } , name = [string] ) , path ( [string] , views . create_or_edit_post , { } , name = [string] ) , path ( [string] , views . post_list , name = [string] ) , path ( [string] , views . post_detail , name = [string] ) , path ( [string] , views . post_list , name = [string] ) , ]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any [EOL] import blog [EOL] import typing [EOL] from django . contrib . auth . decorators import login_required [EOL] from django . http . response import HttpResponseRedirect , HttpResponseForbidden [EOL] from django . shortcuts import render , get_object_or_404 [EOL] from django . core . paginator import Paginator , EmptyPage , PageNotAnInteger [EOL] from django . urls import reverse [EOL] from django . utils . text import slugify [EOL] from django . views . generic import ListView [EOL] [EOL] from . models import Post , Comment [EOL] from . forms import CommentForm , PostForm [EOL] from taggit . models import Tag [EOL] from django . db . models import Count [EOL] [EOL] [EOL] class PostListView ( ListView ) : [EOL] [docstring] [EOL] queryset = Post . published . all ( ) [comment] [EOL] context_object_name = [string] [comment] [EOL] paginate_by = [number] [comment] [EOL] template_name = [string] [comment] [EOL] [EOL] [EOL] def post_list ( request , tag_slug = None ) : [EOL] [docstring] [EOL] object_list = Post . published . all ( ) [EOL] tag = None [EOL] [EOL] if tag_slug : [EOL] tag = get_object_or_404 ( Tag , slug = tag_slug ) [EOL] object_list = object_list . filter ( tags__in = [ tag ] ) [EOL] [EOL] paginator = Paginator ( object_list , [number] ) [comment] [EOL] page = request . GET . get ( [string] ) [EOL] [EOL] try : [EOL] posts = paginator . page ( page ) [EOL] except PageNotAnInteger : [EOL] posts = paginator . page ( [number] ) [comment] [EOL] except EmptyPage : [EOL] posts = paginator . page ( paginator . num_pages ) [comment] [EOL] [EOL] return render ( request , [string] , { [string] : page , [string] : posts , [string] : tag } ) [EOL] [EOL] [EOL] def post_detail ( request , post_id ) : [EOL] [docstring] [EOL] post = get_object_or_404 ( Post , id = post_id ) [EOL] [EOL] [comment] [EOL] comments = post . comments . filter ( active = True ) [EOL] [EOL] if request . method == [string] : [EOL] [comment] [EOL] comment_form = CommentForm ( data = request . POST ) [EOL] [EOL] if comment_form . is_valid ( ) : [EOL] [comment] [EOL] new_comment = comment_form . save ( commit = False ) [EOL] [EOL] [comment] [EOL] new_comment . post = post [EOL] [EOL] [comment] [EOL] new_comment . save ( ) [EOL] else : [EOL] comment_form = CommentForm ( ) [EOL] [EOL] [comment] [EOL] post_tags_ids = post . tags . values_list ( [string] , flat = True ) [EOL] similar_posts = Post . published . filter ( tags__in = post_tags_ids ) . exclude ( id = post . id ) [EOL] similar_posts = similar_posts . annotate ( same_tags = Count ( [string] ) ) . order_by ( [string] , [string] ) [ : [number] ] [EOL] [EOL] return render ( request , [string] , { [string] : post , [string] : comments , [string] : comment_form , [string] : similar_posts } ) [EOL] [EOL] [EOL] @ login_required def create_or_edit_post ( request , _id = None ) : [EOL] if _id : [EOL] post = get_object_or_404 ( Post , pk = _id ) [EOL] if post . author != request . user : [EOL] return HttpResponseForbidden ( ) [EOL] else : [EOL] post = Post ( author = request . user ) [EOL] [EOL] post_form = PostForm ( data = request . POST or None , instance = post ) [EOL] [EOL] if request . POST and post_form . is_valid ( ) : [EOL] new_post = post_form . save ( commit = False ) [EOL] new_post . slug = slugify ( new_post . title ) [EOL] new_post . save ( ) [EOL] [EOL] tags = post_form . cleaned_data [ [string] ] [EOL] new_post . tags . add ( * tags ) [EOL] [EOL] return HttpResponseRedirect ( reverse ( [string] ) ) [EOL] [EOL] return render ( request , [string] , { [string] : post_form } )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[blog.views.PostListView]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Tuple [EOL] import blog [EOL] import typing [EOL] from . models import Comment , Post [EOL] from django import forms [EOL] from taggit . forms import TagWidget [EOL] [EOL] [EOL] class CommentForm ( forms . ModelForm ) : [EOL] class Meta : [EOL] model = Comment [EOL] fields = ( [string] , [string] , [string] ) [EOL] [EOL] [EOL] class PostForm ( forms . ModelForm ) : [EOL] class Meta : [EOL] model = Post [EOL] fields = ( [string] , [string] , [string] , [string] , ) [EOL] widgets = { [string] : TagWidget ( ) , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class BlogConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] from django import template [EOL] from django . utils . safestring import mark_safe [EOL] import markdown [EOL] [EOL] register = template . Library ( ) [EOL] [EOL] from . . models import Post [EOL] [EOL] [EOL] @ register . simple_tag def total_posts ( ) : [EOL] return Post . published . count ( ) [EOL] [EOL] [EOL] @ register . inclusion_tag ( [string] ) def show_latest_posts ( count = [number] ) : [EOL] latest_posts = Post . published . order_by ( [string] ) [ : count ] [EOL] return { [string] : latest_posts } [EOL] [EOL] [EOL] @ register . filter ( name = [string] ) def markdown_format ( text ) : [EOL] return mark_safe ( markdown . markdown ( text ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import transactions [EOL] import projects [EOL] import typing [EOL] from django . http import HttpResponse [EOL] from django . shortcuts import render , redirect , get_object_or_404 [EOL] from django . urls import reverse [EOL] from django . contrib . auth . decorators import login_required [EOL] from django . contrib . auth . models import User [EOL] from django . contrib import messages [EOL] from projects . forms import FrameworkForm [EOL] from projects . models import Project , Framework [EOL] from transactions . models import Transaction , Candidate , OpenCall [EOL] from transactions . forms import CandidateForm , SourcingForm [EOL] from invitations . models import Invitation [EOL] from django . core import mail [EOL] from django . template . loader import render_to_string [EOL] from django . utils . html import strip_tags [EOL] [EOL] from django . core . mail import send_mail , BadHeaderError [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] def transaction_view ( request , id ) : [EOL] if request . method == [string] : [EOL] framework_form = FrameworkForm ( request . POST ) [EOL] if framework_form . is_valid ( ) : [EOL] name = framework_form . cleaned_data [ [string] ] [EOL] project = Project . objects . get ( id = id ) [EOL] user = request . user [EOL] new_transaction = Transaction . objects . create ( user = user , project = project , stage = [string] , framework = get_object_or_404 ( Framework , name = name ) , projecttitle = user . profile . company ) [EOL] return redirect ( reverse ( [string] , args = [ new_transaction . id ] ) ) [EOL] [EOL] [EOL] def process_transaction ( request , id ) : [EOL] current_transaction = Transaction . objects . get ( id = id ) [EOL] if current_transaction . stage == [string] : [EOL] return upload_candidates ( request , current_transaction ) [EOL] elif current_transaction . stage == [string] : [EOL] return all_candidates ( request , current_transaction ) [EOL] elif current_transaction . stage == [string] : [EOL] return all_candidates ( request , current_transaction ) [EOL] elif current_transaction . stage == [string] : [EOL] return invitations ( request , current_transaction ) [EOL] elif current_transaction . stage == [string] : [EOL] return invitations ( request , current_transaction ) [EOL] elif current_transaction . stage == [string] : [EOL] return redirect ( reverse ( [string] ) ) [EOL] [EOL] [EOL] def upload_candidates ( request , current_transaction ) : [EOL] [comment] [EOL] mule = current_transaction . id [EOL] [comment] [EOL] if request . method == [string] : [EOL] candidate_form = CandidateForm ( request . POST ) [EOL] if request . POST . get ( [string] ) : [EOL] if candidate_form . is_valid ( ) : [EOL] current_transaction . stage = [string] [EOL] first_name = candidate_form . cleaned_data [ [string] ] [EOL] last_name = candidate_form . cleaned_data [ [string] ] [EOL] email = candidate_form . cleaned_data [ [string] ] [EOL] new_candidate = Candidate . objects . create ( first_name = first_name , last_name = last_name , email = email , transaction = current_transaction ) [EOL] new_candidate . save ( ) [EOL] current_transaction . save ( ) [EOL] return redirect ( reverse ( [string] , args = [ current_transaction . id ] ) ) [EOL] [EOL] elif request . POST . get ( [string] ) : [EOL] if candidate_form . is_valid ( ) : [EOL] current_transaction . stage = [string] [EOL] first_name = candidate_form . cleaned_data [ [string] ] [EOL] last_name = candidate_form . cleaned_data [ [string] ] [EOL] email = candidate_form . cleaned_data [ [string] ] [EOL] new_candidate = Candidate . objects . create ( first_name = first_name , last_name = last_name , email = email , transaction = current_transaction ) [EOL] new_candidate . save ( ) [EOL] return redirect ( reverse ( [string] , args = [ current_transaction . id ] ) ) [EOL] else : [EOL] candidate_form = CandidateForm ( ) [EOL] return render ( request , [string] , { [string] : candidate_form , [string] : current_transaction } ) [EOL] [EOL] else : [EOL] candidate_form = CandidateForm ( ) [EOL] return render ( request , [string] , { [string] : candidate_form , [string] : current_transaction , [string] : mule } ) [EOL] [EOL] [EOL] def all_candidates ( request , current_transaction ) : [EOL] [comment] [EOL] candidates = Candidate . objects . filter ( transaction = current_transaction ) [EOL] total_amount = current_transaction . amount ( ) [EOL] return render ( request , [string] , { [string] : candidates , [string] : total_amount , [string] : current_transaction } ) [EOL] [EOL] [EOL] def invitations ( request , current_transaction ) : [EOL] candidates = Candidate . objects . filter ( transaction = current_transaction ) [EOL] if request . method == [string] : [EOL] if candidates . count ( ) != [number] : [EOL] for candidate in candidates : [EOL] if User . objects . filter ( email = candidate . email ) . exists ( ) : [EOL] existinguser = User . objects . get ( email = candidate . email ) [EOL] send_mail ( [string] , [string] + [string] + existinguser . first_name + [string] + existinguser . last_name + [string] + [string] [string] , [string] , [ existinguser . email ] , fail_silently = False , ) [EOL] else : [EOL] invite = Invitation . create ( candidate . email , inviter = request . user ) [EOL] invite . send_invitation ( request ) [EOL] [EOL] current_transaction . stage = [string] [EOL] current_transaction . save ( ) [EOL] elif candidates . count ( ) == [number] : [EOL] current_transaction . stage = [string] [EOL] current_transaction . save ( ) [EOL] return redirect ( reverse ( [string] , args = [ current_transaction . id ] ) ) [EOL] return render ( request , [string] , { [string] : candidates , [string] : current_transaction } ) [EOL] [EOL] [EOL] [EOL] [EOL] def my_invites ( request ) : [EOL] candidates = Candidate . objects . filter ( email = request . user . email ) [EOL] return render ( request , [string] , { [string] : candidates } ) [EOL] def success ( request ) : [EOL] [EOL] return render ( request , [string] ) [EOL] [EOL] @ login_required def sourcing ( request ) : [EOL] if request . method == [string] : [EOL] sourcing_form = SourcingForm ( request . POST ) [EOL] if sourcing_form . is_valid ( ) : [EOL] user = request . user [EOL] subject = [string] [EOL] from_email = [string] [EOL] jobrole = str ( sourcing_form . cleaned_data [ [string] ] ) [EOL] contract = str ( sourcing_form . cleaned_data [ [string] ] ) [EOL] techstack = sourcing_form . cleaned_data [ [string] ] [EOL] devsneeded = str ( sourcing_form . cleaned_data [ [string] ] ) [EOL] pay = str ( sourcing_form . cleaned_data [ [string] ] ) [EOL] html_message = render_to_string ( [string] , { [string] : jobrole , [string] : contract , [string] : techstack , [string] : devsneeded , [string] : pay , [string] : user } ) [EOL] plain_message = strip_tags ( html_message ) [EOL] from_email = [string] [EOL] [EOL] try : [EOL] mail . send_mail ( subject , plain_message , from_email , [ [string] ] , html_message = html_message ) [EOL] except BadHeaderError : [EOL] print ( [string] ) [EOL] return redirect ( reverse ( [string] ) ) [EOL] elif request . user . profile . user_type == [string] : [EOL] sourcing_form = SourcingForm ( ) [EOL] return render ( request , [string] , { [string] : sourcing_form } ) [EOL] else : [EOL] return render ( request , [string] ) [EOL] def opencall ( request , id ) : [EOL] transaction = Transaction . objects . get ( id = id ) [EOL] newopencall = OpenCall ( recruiter = request . user , project = transaction . project , transaction = transaction ) [EOL] newopencall . save ( ) [EOL] transaction . stage = [string] [EOL] transaction . save ( ) [EOL] amount = [number] [EOL] return redirect ( [string] , transaction . id ) [EOL] [EOL]	
from django . apps import AppConfig [EOL] [EOL] [EOL] class TransactionsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Type , Any , Tuple [EOL] import transactions [EOL] import typing [EOL] from django . db import models [EOL] from django . contrib . auth . models import User [EOL] from projects . models import Project , Framework [EOL] [EOL] [EOL] [comment] [EOL] class Transaction ( models . Model ) : [EOL] [comment] [EOL] [EOL] STAGE_CHOICES = ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ) [EOL] user = models . ForeignKey ( User , on_delete = models . CASCADE ) [EOL] project = models . ForeignKey ( Project , on_delete = models . CASCADE ) [EOL] stage = models . CharField ( choices = STAGE_CHOICES , default = [string] , max_length = [number] ) [EOL] created = models . DateTimeField ( auto_now_add = True ) [EOL] completed = models . DateTimeField ( auto_now = True ) [EOL] paid = models . BooleanField ( default = False ) [EOL] framework = models . ForeignKey ( Framework , on_delete = models . CASCADE ) [EOL] projecttitle = models . CharField ( null = True , max_length = [number] ) [EOL] closed = models . BooleanField ( default = False ) [EOL] [EOL] def allcandidates ( self ) : [EOL] candidates = Candidate . objects . filter ( transaction = self . id ) [EOL] return candidates [EOL] [EOL] def amount ( self ) : [EOL] total_amount = [number] [EOL] if self . allcandidates ( ) . count ( ) >= [number] and self . allcandidates ( ) . count ( ) <= [number] : [EOL] total_amount = [number] [EOL] elif self . allcandidates ( ) . count ( ) > [number] and self . allcandidates ( ) . count ( ) <= [number] : [EOL] total_amount = [number] * self . allcandidates ( ) . count ( ) [EOL] return total_amount [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . user . username , self . project . name , self . stage ) [EOL] [EOL] [EOL] class Candidate ( models . Model ) : [EOL] first_name = models . CharField ( max_length = [number] ) [EOL] last_name = models . CharField ( max_length = [number] ) [EOL] email = models . EmailField ( ) [EOL] transaction = models . ForeignKey ( Transaction , on_delete = models . CASCADE ) [EOL] [EOL] def generate_link ( self ) : [EOL] pass [EOL] [EOL] def generate_temporary_password ( self ) : [EOL] pass [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . first_name , self . last_name ) [EOL] class OpenCall ( models . Model ) : [EOL] recruiter = models . ForeignKey ( User , on_delete = models . CASCADE ) [EOL] project = models . ForeignKey ( Project , on_delete = models . CASCADE ) [EOL] transaction = models . ForeignKey ( Transaction , on_delete = models . CASCADE ) [EOL] [EOL] [EOL] [EOL] [EOL] class Applications ( models . Model ) : [EOL] recruiter = models . ForeignKey ( User , on_delete = models . CASCADE , related_name = [string] ) [EOL] project = models . ForeignKey ( Project , on_delete = models . CASCADE ) [EOL] candidate = models . ForeignKey ( User , on_delete = models . CASCADE , related_name = [string] ) [EOL] stage = models . CharField ( default = [string] , max_length = [number] ) [EOL] transaction = models . ForeignKey ( Transaction , on_delete = models . CASCADE ) [EOL] score = models . IntegerField ( ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[transactions.models.Transaction]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[transactions.models.Transaction]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[transactions.models.Transaction]$ 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[transactions.models.Transaction]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[transactions.models.Transaction]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[transactions.models.Transaction]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[transactions.models.Transaction]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[transactions.models.Transaction]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[transactions.models.Transaction]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[transactions.models.Candidate]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[transactions.models.Candidate]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[transactions.models.Candidate]$ 0 0 0 0 0 0 0 $typing.Type[transactions.models.Candidate]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[transactions.models.OpenCall]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[transactions.models.OpenCall]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[transactions.models.OpenCall]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[transactions.models.Applications]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[transactions.models.Applications]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[transactions.models.Applications]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[transactions.models.Applications]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[transactions.models.Applications]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[transactions.models.Applications]$ 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] [EOL] from django . urls import path [EOL] [EOL] from transactions . views import process_transaction , my_invites , sourcing , transaction_view , success , opencall [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ path ( [string] , transaction_view , name = [string] ) , path ( [string] , process_transaction , name = [string] ) , path ( [string] , my_invites , name = [string] ) , path ( [string] , sourcing , name = [string] ) , path ( [string] , success , name = [string] ) , path ( [string] , opencall , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Tuple [EOL] import transactions [EOL] import typing [EOL] from django import forms [EOL] from django . forms import ModelForm , Form [EOL] from django_countries import Countries [EOL] from phonenumber_field . formfields import PhoneNumberField [EOL] from accounts . models import Profile [EOL] from transactions . models import Candidate [EOL] [EOL] [EOL] class CandidateForm ( ModelForm ) : [EOL] class Meta : [EOL] model = Candidate [EOL] exclude = ( [string] , ) [EOL] [EOL] [EOL] def job_roles ( ) : [EOL] return ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ) [EOL] [EOL] def engagement ( ) : [EOL] [EOL] return ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ) [EOL] [EOL] [EOL] class SourcingForm ( Form ) : [EOL] job_role = forms . ChoiceField ( choices = job_roles ) [EOL] contract = forms . ChoiceField ( choices = engagement , required = True ) [EOL] tech_stack = forms . CharField ( max_length = [number] , required = True ) [EOL] number_of_devs_needed = forms . IntegerField ( required = True ) [EOL] renumeration_in_dollars = forms . CharField ( required = True ) [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[transactions.models.Candidate]$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[transactions.forms.SourcingForm]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[transactions.forms.SourcingForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[transactions.forms.SourcingForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[transactions.forms.SourcingForm]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[transactions.forms.SourcingForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] from django . urls import path [EOL] from projects . views import project_list , project , categories , devtypes [EOL] [EOL] app_name = [string] [EOL] urlpatterns = [ path ( [string] , project_list , name = [string] ) , path ( [string] , devtypes , name = [string] ) , path ( [string] , categories , name = [string] ) , path ( [string] , project , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import projects [EOL] import typing [EOL] from django . http import HttpResponse [EOL] from django . shortcuts import render [EOL] from django . contrib . auth . decorators import login_required [EOL] [EOL] from projects . forms import FrameworkForm [EOL] from projects . models import Project , Projecttype , Devtype , Framework [EOL] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] @ login_required def project_list ( request , type_id ) : [EOL] [comment] [EOL] categoryname = Projecttype . objects . get ( id = type_id ) [EOL] [EOL] projecttypes = Project . objects . filter ( projecttype_id = type_id ) [EOL] return render ( request , [string] , { [string] : projecttypes , [string] : categoryname } ) [EOL] @ login_required def devtypes ( request , dev_id ) : [EOL] [comment] [EOL] [EOL] categoryname = Devtype . objects . get ( id = dev_id ) [EOL] devtypes = Project . objects . filter ( devtype_id = dev_id ) [EOL] return render ( request , [string] , { [string] : devtypes , [string] : categoryname } ) [EOL] @ login_required def categories ( request ) : [EOL] projecttypes = Projecttype . objects . all ( ) [EOL] devtypes = Devtype . objects . all ( ) [EOL] [EOL] return render ( request , [string] , { [string] : projecttypes , [string] : devtypes } ) [EOL] [EOL] @ login_required def project ( request , id ) : [EOL] [EOL] frameworks = Framework . objects . all ( ) [EOL] project = Project . objects . get ( id = id ) [EOL] framework_form = FrameworkForm ( ) [EOL] return render ( request , [string] , { [string] : project , [string] : frameworks , [string] : framework_form , } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import projects [EOL] import typing [EOL] from django import forms [EOL] [EOL] from projects . models import Framework [EOL] def framework_choices ( ) : [EOL] return tuple ( [ ( str ( framework . name ) , framework . name ) for framework in Framework . objects . all ( ) ] ) [EOL] [EOL] class FrameworkForm ( forms . Form ) : [EOL] name = forms . ChoiceField ( choices = framework_choices ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[projects.forms.FrameworkForm]$ 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ProjectsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0