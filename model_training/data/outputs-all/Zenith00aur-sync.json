from typing import Any [EOL] import typing [EOL] import aursync [EOL] import asyncio [EOL] [EOL] async def test_pub ( ) : [EOL] print ( [string] ) [EOL] [EOL] messager_1 = aursync . sync . Sync ( ) [EOL] await messager_1 . init ( ) [EOL] messager_2 = aursync . sync . Sync ( ) [EOL] await messager_2 . init ( ) [EOL] [EOL] async def handle ( message ) : [EOL] print ( f" [string] { message }" ) [EOL] [EOL] messager_2 . subscribe ( handle , [string] ) [EOL] [EOL] for i in range ( [number] ) : [EOL] await messager_1 . publish ( str ( i ) , [string] ) [EOL] [EOL] await asyncio . sleep ( [number] ) [EOL] print ( [string] ) [EOL] [EOL] asyncio . run ( test_pub ( ) )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[ [string] , { [string] : [string] , [string] : { [string] : [ [string] , { [string] : [ [ [string] , [ [ [ [ { [string] : { [string] : [ { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL]	
from typing import Any , Set , List [EOL] from collections import deque [EOL] import logging [EOL] import typing [EOL] import collections [EOL] import pytest [EOL] import uuid [EOL] import aioredis [EOL] import aursync [EOL] import asyncio [EOL] [comment] [EOL] import time [EOL] import typing as ty [EOL] [EOL] import logging [EOL] logging . basicConfig ( ) [EOL] log = logging . getLogger ( [string] ) [EOL] [EOL] log . setLevel ( [string] ) [EOL] [EOL] [EOL] def message ( ) : [EOL] return uuid . uuid4 ( ) . hex [EOL] [EOL] [EOL] @ pytest . mark . asyncio @ pytest . mark . repeat ( [number] ) async def test_long_async_handler ( event_loop ) : [EOL] pub = aursync . sync . Sync ( ) [EOL] await pub . init ( ) [EOL] sub = aursync . sync . Sync ( ) [EOL] await sub . init ( ) [EOL] messages_seen = [ ] [EOL] [EOL] async def handle ( message ) : [EOL] await asyncio . sleep ( [number] ) [EOL] messages_seen . append ( message ) [EOL] return message [EOL] [EOL] await sub . subscribe ( handle , [string] , wait = True ) [EOL] [EOL] await asyncio . sleep ( [number] ) [EOL] messages_to_send = list ( range ( [number] ) ) [EOL] [EOL] for t_mess in messages_to_send : [EOL] await pub . publish ( t_mess , [string] ) [EOL] [EOL] await asyncio . sleep ( [number] ) [EOL] await pub . stop ( ) [EOL] await sub . stop ( ) [EOL] [EOL] assert messages_seen == messages_to_send [EOL] [EOL] [EOL] @ pytest . mark . asyncio @ pytest . mark . repeat ( [number] ) async def test_multpub ( event_loop ) : [EOL] sub = await aursync . sync . Sync ( ) . init ( ) [EOL] [EOL] pubs = [ await aursync . sync . Sync ( name = str ( i ) ) . init ( ) for i in range ( [number] ) ] [EOL] [EOL] messages_seen = set ( ) [EOL] messages_sent = set ( ) [EOL] [EOL] async def handle ( mess_in ) : [EOL] await asyncio . sleep ( [number] ) [EOL] messages_seen . add ( mess_in ) [EOL] return mess_in [EOL] [EOL] await sub . subscribe ( handle , [string] ) [EOL] supertot = [number] [EOL] for i in range ( [number] ) : [EOL] log . info ( f" [string] { i }" ) [EOL] message_list = [ message ( ) for _ in range ( len ( pubs ) ) ] [EOL] messages_sent . update ( set ( message_list ) ) [EOL] res = sum ( aursync . sync . _flatten ( await asyncio . gather ( * [ pub . publish ( mess , [string] ) for mess , pub in zip ( message_list , pubs ) ] ) ) ) [EOL] supertot += res [EOL] [EOL] await asyncio . sleep ( [number] ) [EOL] [EOL] await asyncio . gather ( * [ pub . stop ( ) for pub in pubs ] ) [EOL] await sub . stop ( ) [EOL] print ( len ( messages_seen ) ) [EOL] print ( len ( messages_sent ) ) [EOL] print ( supertot ) [EOL] assert messages_seen == messages_sent [EOL] [EOL] @ pytest . mark . asyncio @ pytest . mark . repeat ( [number] ) async def test_multsub ( event_loop ) : [EOL] import collections [EOL] sub_count = [number] [EOL] pub_loop_count = [number] [EOL] subs = [ await aursync . sync . Sync ( ) . init ( ) for _ in range ( sub_count ) ] [EOL] [EOL] pub = await aursync . sync . Sync ( ) . init ( ) [EOL] [EOL] [EOL] messages_seen = collections . deque ( ) [EOL] [EOL] messages_sent = set ( ) [EOL] [EOL] async def handle ( mess_in ) : [EOL] messages_seen . append ( mess_in ) [EOL] return mess_in [EOL] [EOL] for sub in subs : [EOL] await sub . subscribe ( handle , [string] ) [EOL] [EOL] for _ in range ( pub_loop_count ) : [EOL] mess = message ( ) [EOL] messages_sent . add ( mess ) [EOL] await pub . publish ( mess , [string] ) [EOL] [EOL] await asyncio . sleep ( [number] ) [EOL] [EOL] await asyncio . gather ( * [ sub . stop ( ) for sub in subs ] ) [EOL] [EOL] await pub . stop ( ) [EOL] assert ( len ( messages_seen ) == pub_loop_count * sub_count ) [EOL] [EOL] @ pytest . mark . asyncio @ pytest . mark . repeat ( [number] ) async def test_long_sync_handler ( event_loop ) : [EOL] pub = aursync . sync . Sync ( ) [EOL] await pub . init ( ) [EOL] sub = aursync . sync . Sync ( ) [EOL] await sub . init ( ) [EOL] messages_seen = [ ] [EOL] [EOL] def handle ( message ) : [EOL] time . sleep ( [number] ) [EOL] messages_seen . append ( message ) [EOL] return message [EOL] [EOL] await sub . subscribe ( handle , [string] ) [EOL] [EOL] messages_to_send = list ( range ( [number] ) ) [EOL] [EOL] for t_mess in messages_to_send : [EOL] await pub . publish ( t_mess , [string] ) [EOL] [EOL] await asyncio . sleep ( [number] ) [EOL] await pub . stop ( ) [EOL] await sub . stop ( ) [EOL] [EOL] assert messages_seen == messages_to_send [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import logging [EOL] import typing [EOL] import pytest [EOL] import uuid [EOL] import aioredis [EOL] import aursync [EOL] import asyncio [EOL] import time [EOL] import typing as ty [EOL] import functools [EOL] import logging [EOL] [EOL] logging . basicConfig ( ) [EOL] log = logging . getLogger ( [string] ) [EOL] [EOL] log . setLevel ( [string] ) [EOL] [EOL] def makeEvilDict ( n ) : [EOL] return functools . reduce ( lambda acc , x : { x : acc } , ( [ { str ( i ) + [string] : [string] for i in range ( n ) } ] + [ str ( x ) for x in range ( n ) ] ) ) [EOL] [EOL] [EOL] @ pytest . mark . asyncio async def test_dict_getset ( event_loop ) : [EOL] sync_client = aursync . Sync ( ) [EOL] await sync_client . init ( ) [EOL] [EOL] test_dict = makeEvilDict ( [number] ) [EOL] [EOL] print ( test_dict ) [EOL] [EOL] await sync_client . redis . aur_set_dict ( [string] , test_dict ) [EOL] [EOL] result_dict = await sync_client . redis . aur_get_dict ( [string] ) [EOL] print ( result_dict ) [EOL] await sync_client . stop ( ) [EOL] [EOL] assert result_dict == test_dict [EOL] [EOL] @ pytest . mark . asyncio async def test_proxy_get ( event_loop ) : [EOL] sync_client = await aursync . Sync ( ) . init ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Callable , Any , Union , Dict , List [EOL] import aursync [EOL] import builtins [EOL] import typing [EOL] import typing as ty [EOL] import functools [EOL] [EOL] _DICT_FLATTEN_SEP = [string] [comment] [EOL] _LIST_FLATTEN_SEP = [string] [comment] [EOL] [EOL] FlatContainer = ty . Union [ dict , list ] [EOL] FlatContainerType = ty . Union [ ty . Type [ dict ] , ty . Type [ list ] ] [EOL] FlatKey = ty . Union [ str , int ] [EOL] [EOL] [EOL] def compose_keys ( root , leaf , separation , dict_sep = _DICT_FLATTEN_SEP , list_sep = _LIST_FLATTEN_SEP ) : [EOL] sep = [string] [EOL] if root : [EOL] if separation == list : [EOL] sep = list_sep [EOL] elif separation == dict : [EOL] sep = dict_sep [EOL] else : [EOL] raise ValueError ( f" [string] { separation }" ) [EOL] [EOL] return root + sep + str ( leaf ) [EOL] [EOL] [EOL] def _flatten ( d , list_sep , dict_sep , key_str = [string] ) : [EOL] if type ( d ) is dict : [EOL] for k in d : [EOL] yield from _flatten ( d [ k ] , list_sep , dict_sep , compose_keys ( key_str , k , separation = dict ) ) [EOL] elif type ( d ) is list : [EOL] for index , l_elem in enumerate ( d ) : [EOL] yield from _flatten ( l_elem , list_sep , dict_sep , compose_keys ( key_str , index , separation = list ) ) [EOL] else : [EOL] yield key_str , d [EOL] [EOL] [EOL] def flatten ( d , list_sep = _LIST_FLATTEN_SEP , dict_sep = _DICT_FLATTEN_SEP ) : [EOL] return { k : v for k , v in _flatten ( d , list_sep , dict_sep ) } [EOL] [EOL] [EOL] class _Composition : [EOL] def __init__ ( self ) : [EOL] self . root = { } [EOL] self . parent = self . root [EOL] self . current_target = None [EOL] [EOL] def partial_compose ( self , container ) : [EOL] if isinstance ( container , dict ) : [EOL] return functools . partial ( self . add_dict , container ) [EOL] elif isinstance ( container , list ) : [EOL] return functools . partial ( self . add_list , container ) [EOL] else : [EOL] raise ValueError ( f" [string] " f" [string] { type ( container ) } [string] { container }" ) [EOL] [EOL] def set_parent_and_compose ( self , new_target , layer_factory ) : [EOL] self . partial_compose ( self . parent ) ( self . current_target , layer_factory ( ) ) [EOL] self . parent = self . parent [ self . current_target ] [EOL] self . current_target = new_target [EOL] [EOL] def reset ( self ) : [EOL] self . parent = self . root [EOL] self . current_target = None [EOL] [EOL] @ staticmethod def add_dict ( d , k , v ) : [EOL] if k not in d : [EOL] d [ k ] = v [EOL] [EOL] @ staticmethod def add_list ( li , i , v ) : [EOL] li . extend ( None for _ in range ( i + [number] - len ( li ) ) ) [EOL] if li [ i ] is None : [EOL] li [ i ] = v [EOL] [EOL] [EOL] def inflate ( d , dict_sep = _DICT_FLATTEN_SEP , list_sep = _LIST_FLATTEN_SEP ) : [EOL] composer = _Composition ( ) [EOL] for k , v in d . items ( ) : [EOL] dict_compositions = k . split ( dict_sep ) [EOL] local_key = dict_compositions [ - [number] ] [EOL] [EOL] for full_key in dict_compositions : [EOL] dict_key = ... [EOL] indexes = ... [EOL] dict_key , * indexes = full_key . split ( list_sep ) [EOL] [EOL] composer . set_parent_and_compose ( dict_key , dict ) [EOL] if indexes : [EOL] for idx in map ( int , indexes ) : [EOL] local_key = idx [EOL] composer . set_parent_and_compose ( idx , list ) [EOL] [EOL] composer . set_parent_and_compose ( local_key , lambda : v ) [EOL] composer . reset ( ) [EOL] [EOL] return composer . root [ None ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable$ 0 0 0 $FlatContainer$ 0 0 0 0 0 0 $FlatContainer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $FlatContainer$ 0 0 0 0 0 $FlatContainer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $FlatContainer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $FlatContainer$ 0 0 0 0 $FlatContainer$ 0 0 0 0 0 $None$ 0 0 0 $FlatKey$ 0 $typing.Callable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $FlatKey$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 $builtins.str$ 0 $FlatContainer$ 0 0 0 0 $builtins.str$ 0 0 $builtins.dict$ 0 0 $builtins.dict$ 0 $builtins.str$ 0 0 $FlatContainer$ 0 0 0 0 0 0 0 $builtins.list$ 0 $builtins.int$ 0 $FlatContainer$ 0 0 0 $builtins.list$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.list$ 0 0 0 0 0 $builtins.list$ 0 $builtins.int$ 0 0 0 0 0 $builtins.list$ 0 $builtins.int$ 0 0 $FlatContainer$ 0 0 0 0 $builtins.dict$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from aursync . sync import Sync	0 0 0 0 0 0
from typing import Callable , Set , TypeVar , Any , AsyncGenerator , Optional , Dict [EOL] import logging [EOL] import aioredis [EOL] import aursync [EOL] import typing [EOL] import builtins [EOL] import asyncio [EOL] import asyncio [EOL] import contextlib [EOL] import logging [EOL] import traceback [EOL] import typing as ty [EOL] [EOL] import aioredis [EOL] import jsonpickle [EOL] [EOL] logger = logging . getLogger ( ) [EOL] T_m = ty . TypeVar ( [string] ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] class MPMC : [EOL] _TERMINATE = object ( ) [EOL] [EOL] def __init__ ( self , redis_conn , serializer = jsonpickle . dumps , deserializer = jsonpickle . loads ) : [EOL] [EOL] self . redis_conn = redis_conn [EOL] self . serializer = serializer [EOL] self . deserializer = deserializer [EOL] self . channels = set ( ) [EOL] self . channel_patterns = set ( ) [EOL] self . _lock = asyncio . Lock ( ) [EOL] self . _mpsc = aioredis . pubsub . Receiver ( ) [EOL] self . _reader_task = None [EOL] self . _registry = { } [EOL] [EOL] async def start ( self ) : [EOL] self . _reader_task = asyncio . create_task ( self . reader ( ) ) [EOL] [EOL] async def stop ( self ) : [EOL] if not self . _reader_task : [EOL] raise RuntimeError ( f'{ type ( self ) . __name__ } [string] ' ) [EOL] [EOL] self . _reader_task . cancel ( ) [EOL] f = asyncio . gather ( * [ subscription . put ( self . _TERMINATE ) for subscriptions in self . _registry . values ( ) for subscription in subscriptions ] ) [EOL] f . add_done_callback ( lambda x : self . stop ) [EOL] [comment] [EOL] await f [EOL] [comment] [EOL] [EOL] async def reader ( self ) : [EOL] async for channel , produced in self . _mpsc . iter ( ) : [EOL] channel = ... [EOL] data = produced [ [number] ] if channel . is_pattern else produced [EOL] message = self . deserializer ( data ) [EOL] [comment] [EOL] [EOL] await asyncio . gather ( * [ sub . put ( message ) for sub in self . _registry . get ( channel , [ ] ) ] ) [EOL] [EOL] async def publish ( self , channel , message ) : [EOL] serialized = self . serializer ( message ) [EOL] pub_res = await self . redis_conn . publish ( channel , serialized ) [EOL] return pub_res [EOL] [EOL] @ contextlib . asynccontextmanager async def _subscribe ( self , channel , is_pattern ) : [EOL] [EOL] sub_method = self . redis_conn . psubscribe if is_pattern else self . redis_conn . subscribe [EOL] self . channel_patterns . add ( channel ) if is_pattern else self . channels . add ( channel ) [EOL] [EOL] async with self . _lock : [EOL] handler = self . _mpsc . pattern if is_pattern else self . _mpsc . channel [EOL] registration = handler ( channel ) [EOL] subscription = asyncio . Queue ( ) [EOL] [EOL] if registration not in self . _registry : [EOL] await sub_method ( registration ) [EOL] self . _registry [ registration ] = set ( ) [EOL] self . _registry [ registration ] . add ( subscription ) [EOL] [EOL] try : [EOL] yield subscription [EOL] except : [EOL] print ( traceback . format_exc ( ) ) [EOL] finally : [EOL] async with self . _lock : [EOL] self . _registry [ registration ] . remove ( subscription ) [EOL] if not self . _registry [ registration ] : [EOL] await sub_method ( registration ) [EOL] del self . _registry [ registration ] [EOL] [EOL] async def subscribe ( self , channel , is_pattern = False , ) : [EOL] async with self . _subscribe ( channel , is_pattern ) as subscription : [EOL] while True : [EOL] value = await subscription . get ( ) [EOL] if value is self . _TERMINATE : [EOL] break [EOL] else : [EOL] yield value [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aioredis.Redis$ 0 $typing.Callable[[None],typing.Any]$ 0 0 0 0 0 $typing.Callable[[typing.Any],Variable[aursync.mpmc.T_m]]$ 0 0 0 0 0 0 0 0 0 0 $aioredis.Redis$ 0 $aioredis.Redis$ 0 0 0 $typing.Callable[[None],typing.Any]$ 0 $typing.Callable[[None],typing.Any]$ 0 0 0 $typing.Callable[[typing.Any],Variable[aursync.mpmc.T_m]]$ 0 $typing.Callable[[typing.Any],Variable[aursync.mpmc.T_m]]$ 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 $asyncio.locks.Lock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[asyncio.Future]$ 0 0 0 0 0 $typing.Dict[aioredis.abc.AbcChannel,typing.Set[asyncio.Queue],]$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aioredis.abc.AbcChannel$ 0 0 0 0 0 0 0 0 0 0 0 0 $aioredis.abc.AbcChannel$ 0 0 0 0 0 0 0 0 0 0 $aioredis.abc.AbcChannel$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aioredis.abc.AbcChannel$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.AsyncGenerator[asyncio.Queue,None]$ 0 0 0 $builtins.str$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $asyncio.Queue$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.Queue$ 0 0 0 0 0 0 0 $asyncio.Queue$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.Queue$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.AsyncGenerator[typing.Any,None]$ 0 0 0 $builtins.str$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Callable , Iterable , TypeVar , Any , OrderedDict , Awaitable , Tuple , Type , Optional , Union , Coroutine , Dict , List [EOL] import logging [EOL] import collections [EOL] import aursync [EOL] import typing [EOL] import builtins [EOL] import asyncio [EOL] from __future__ import annotations [EOL] [EOL] import asyncio [EOL] import functools [EOL] import inspect [EOL] import logging [EOL] import operator [EOL] import typing as ty [EOL] import warnings [EOL] [EOL] import aioredis [comment] [EOL] import jsonpickle [comment] [EOL] [EOL] import aursync . flattener as flattener [EOL] import aursync . mpmc as mpmc [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] log = logging . getLogger ( [string] ) [EOL] [EOL] _FLAG_FIRST = object ( ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] class _ConfigProxy : [EOL] [EOL] def __init__ ( self , sync , key_root ) : [EOL] self . key_root = key_root [EOL] self . hm_key = [string] [EOL] self . sync = sync [EOL] [EOL] def _verify_redis ( self ) : [EOL] if not self . sync . ready : [EOL] raise RuntimeError ( [string] ) [EOL] if not self . sync . redis : [EOL] raise RuntimeError ( [string] ) [EOL] if self . sync . redis . closed : [EOL] raise RuntimeError ( [string] ) [EOL] [EOL] def __setitem__ ( self , k , v ) : [EOL] self . _verify_redis ( ) [EOL] self . compose_key ( k ) [EOL] [EOL] assert self . sync . redis is not None [comment] [EOL] self . sync . redis . hmset ( self . key_root , self . hm_key , v ) [EOL] [EOL] def compose_key ( self , k ) : [EOL] sep = ... [EOL] sep = list if isinstance ( k , int ) else dict [EOL] self . hm_key = flattener . compose_keys ( self . hm_key , k , sep ) [EOL] [EOL] def __delitem__ ( self , k ) : [EOL] self . _verify_redis ( ) [EOL] self . compose_key ( k ) [EOL] [EOL] assert self . sync . redis is not None [comment] [EOL] self . sync . redis . hdel ( self . key_root , self . hm_key ) [EOL] [EOL] def __getitem__ ( self , k ) : [EOL] self . _verify_redis ( ) [EOL] self . compose_key ( k ) [EOL] [EOL] assert self . sync . redis is not None [comment] [EOL] return self [EOL] [EOL] def __str__ ( self ) : [EOL] assert self . sync . redis is not None [comment] [EOL] return self . sync . redis . hmget ( self . key_root , self . hm_key ) [EOL] [EOL] def _listify_arg ( listy ) : [EOL] if listy is None : [EOL] return [ ] [EOL] list_like__types = list , tuple , set [EOL] if isinstance ( listy , list_like__types ) : [EOL] return listy [EOL] return [ listy ] [EOL] [EOL] [EOL] def _flatten ( li , list_types = ( list , tuple ) ) : [EOL] li_type = type ( li ) [EOL] li = list ( li ) [EOL] i = [number] [EOL] while i < len ( li ) : [EOL] while isinstance ( li [ i ] , list_types ) : [EOL] if not li [ i ] : [EOL] li . pop ( i ) [EOL] i -= [number] [EOL] break [EOL] else : [EOL] li [ i : i + [number] ] = li [ i ] [EOL] i += [number] [EOL] return li_type ( li ) [EOL] [EOL] [EOL] def _parameterize ( deco_to_enhance ) : [EOL] [docstring] [EOL] [EOL] def deco_factory ( * args , ** kwargs ) : [EOL] [comment] [EOL] def deco_wrapper ( func ) : [EOL] [comment] [EOL] return deco_to_enhance ( func , * args , ** kwargs ) [EOL] [EOL] return deco_wrapper [EOL] [EOL] return deco_factory [EOL] [EOL] [EOL] @ _parameterize def _link_args ( func , * arg_tups ) : [EOL] @ functools . wraps ( func ) def wrapper ( * args , ** kwargs ) : [EOL] func_binding = inspect . signature ( func ) . bind ( * args , ** kwargs ) . arguments [EOL] for arg_tup in arg_tups : [EOL] if functools . reduce ( operator . xor , [ arg in func_binding for arg in arg_tup ] ) : [EOL] raise ValueError ( f"{ [string] . join ( arg_tup ) } [string] " ) [EOL] [EOL] func ( * args , ** kwargs ) [EOL] [EOL] return wrapper [EOL] [EOL] [EOL] def _timegate ( coro , gate = [number] ) : [EOL] async def wrap ( ) : [EOL] res = await asyncio . gather ( coro , asyncio . sleep ( gate ) ) [EOL] return res [ [number] ] [EOL] [EOL] return wrap ( ) [EOL] [EOL] [EOL] T_m = ty . TypeVar ( [string] ) [EOL] from aioredis import commands [EOL] [EOL] [EOL] [comment] [EOL] class AurRedis ( commands . Redis ) : [EOL] def aur_get ( self , keys = ty . Union [ str , ty . Iterable [ str ] ] ) : [EOL] if isinstance ( keys , ty . Iterable ) : [EOL] keys = list ( keys ) [EOL] return self . mget ( * keys , encoding = [string] ) [EOL] return self . get ( keys , encoding = [string] ) [EOL] [EOL] async def aur_set ( self , keyval_pairs , setopt = [string] ) : [EOL] [EOL] if isinstance ( keyval_pairs , ty . List ) : [EOL] return await asyncio . gather ( * [ self . aur_set ( keyval_pairs = pair , setopt = setopt ) for pair in keyval_pairs ] ) [EOL] if isinstance ( keyval_pairs , ty . Dict ) : [EOL] return await self . mset ( * keyval_pairs . values ( ) ) [EOL] if isinstance ( keyval_pairs , tuple ) : [EOL] return await self . set ( * keyval_pairs ) [EOL] raise RuntimeWarning ( [string] ) [EOL] [EOL] async def aur_set_dict ( self , key , d , update = False ) : [EOL] if not update : [EOL] await self . delete ( key ) [EOL] flattened_dict = flattener . flatten ( d ) [EOL] return self . hmset_dict ( key , flattened_dict ) [EOL] [EOL] async def aur_get_dict ( self , key , fields = None ) : [EOL] if fields : [EOL] flattened_dict = await self . hmget ( key , fields [ [number] ] , * fields [ [number] : ] , encoding = [string] ) [EOL] else : [EOL] flattened_dict = await self . hgetall ( key , encoding = [string] ) [EOL] return flattener . inflate ( flattened_dict ) [EOL] [EOL] [EOL] class Sync : [EOL] redis = ... [EOL] _mpmc = ... [EOL] _receiver = ... [EOL] p = ... [EOL] [EOL] @ _link_args ( ( [string] , [string] ) ) def __init__ ( self , name = [string] , redis = None , serializer = jsonpickle . dumps , deserializer = jsonpickle . loads ) : [EOL] self . name = name [EOL] self . _serializer = serializer [EOL] self . _deserializer = deserializer [EOL] self . _waiting_handler_ct = [number] [EOL] self . _waiting_handlers_done = asyncio . Event ( ) [EOL] self . redis = redis [EOL] self . _receiver = None [EOL] self . ready = False [EOL] [EOL] async def init ( self ) : [EOL] if self . ready : [EOL] warnings . warn ( f" [string] { self . name } [string] " , RuntimeWarning ) [EOL] return self [EOL] [EOL] if self . redis is None : [EOL] self . redis = await aioredis . create_redis_pool ( [string] , maxsize = [number] , commands_factory = AurRedis ) [EOL] log . info ( f" [string] { self . name } [string] " ) [EOL] self . ready = True [EOL] [EOL] self . _mpmc = mpmc . MPMC ( redis_conn = self . redis , serializer = self . _serializer , deserializer = self . _deserializer ) [EOL] [EOL] self . _waiting_handler_ct = [number] [EOL] self . _waiting_handlers_done . clear ( ) [EOL] await self . _mpmc . start ( ) [EOL] await asyncio . sleep ( [number] ) [EOL] self . p = functools . partial ( _ConfigProxy . __init__ , self ) [EOL] return self [EOL] [EOL] async def stop ( self ) : [EOL] log . info ( f" [string] { self . name } [string] " ) [EOL] await self . _mpmc . stop ( ) [EOL] [EOL] if self . _waiting_handler_ct != [number] : [EOL] log . debug ( f" [string] { self . name } [string] { self . _waiting_handler_ct } [string] " ) [EOL] log . debug ( f" [string] { self . _waiting_handlers_done . is_set ( ) }" ) [EOL] await self . _waiting_handlers_done . wait ( ) [EOL] log . debug ( f" [string] { self . _waiting_handlers_done . is_set ( ) }" ) [EOL] log . info ( f" [string] { self . name } [string] " ) [EOL] await asyncio . sleep ( [number] ) [EOL] self . redis . close ( ) [EOL] await self . redis . wait_closed ( ) [EOL] [EOL] async def _handle ( self , handler_func , channel , is_pattern = False ) : [EOL] [EOL] is_coro = inspect . iscoroutinefunction ( handler_func ) [EOL] [EOL] log . info ( f" [string] { self . name } [string] " f" [string] { [string] if is_coro else [string] } [string] { handler_func . __name__ } [string] " f" [string] { [string] if is_pattern else [string] } [string] { channel }" ) [EOL] assert self . _mpmc is not None [EOL] async for message in self . _mpmc . subscribe ( channel , is_pattern = is_pattern ) : [EOL] if is_coro : [EOL] self . _waiting_handler_ct += [number] [EOL] log . debug ( f" [string] { self . name } [string] { self . _waiting_handler_ct }" ) [EOL] self . _waiting_handlers_done . clear ( ) [EOL] [EOL] [comment] [EOL] def track_live_handlers ( _ ) : [EOL] log . debug ( f" [string] { self . name } [string] { self . _waiting_handler_ct }" ) [EOL] self . _waiting_handler_ct -= [number] [EOL] if self . _waiting_handler_ct == [number] : [EOL] log . debug ( f" [string] { self . name } [string] " ) [EOL] self . _waiting_handlers_done . set ( ) [EOL] [EOL] asyncio . create_task ( handler_func ( message ) ) . add_done_callback ( track_live_handlers ) [EOL] else : [EOL] handler_func ( message ) [EOL] [EOL] def subscribe ( self , handler_func , channels = None , channel_patterns = None , wait = True ) : [EOL] [docstring] [EOL] if not self . ready : [EOL] raise RuntimeWarning ( [string] ) [EOL] listy_channels = _listify_arg ( channels ) [EOL] listy_channel_patterns = _listify_arg ( channel_patterns ) [EOL] log . info ( f" [string] { self . name } [string] " f" [string] { [string] . join ( listy_channels ) } [string] " f" [string] { [string] . join ( listy_channel_patterns ) } [string] { handler_func . __name__ }" ) [EOL] [EOL] for t_channel in listy_channels : [EOL] asyncio . create_task ( self . _handle ( handler_func = handler_func , channel = t_channel , is_pattern = False ) ) [EOL] for t_channel_pattern in listy_channel_patterns : [EOL] asyncio . create_task ( self . _handle ( handler_func = handler_func , channel = t_channel_pattern , is_pattern = True ) ) [EOL] if wait : [EOL] return asyncio . sleep ( [number] ) [EOL] return None [EOL] [EOL] @ _link_args ( ( [string] , [string] ) ) def publish ( self , message , channels = None , wait = True , callback = None ) : [EOL] if not self . ready : [EOL] raise RuntimeWarning ( [string] ) [EOL] assert self . _mpmc is not None [EOL] listy_channels = _listify_arg ( channels ) [EOL] if wait and callback is not None : [EOL] raise ValueError ( [string] ) [EOL] pub_coros = [ self . _mpmc . publish ( t_channel , message ) for t_channel in listy_channels ] [EOL] if wait : [EOL] return _timegate ( asyncio . gather ( * pub_coros ) , gate = [number] ) [EOL] else : [EOL] if callback is not None : [EOL] for t_coro in pub_coros : [EOL] asyncio . create_task ( t_coro ) . add_done_callback ( lambda x : callback ( x . result ( ) ) ) [comment] [EOL] return None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[AurRedis]$ 0 0 0 $typing.Optional[aursync.mpmc.MPMC]$ 0 0 0 $typing.Optional[aioredis.pubsub.Receiver]$ 0 0 0 $typing.Callable[[builtins.str],_ConfigProxy]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Callable[[aursync.mpmc.T_m],typing.Any]$ 0 $builtins.str$ 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $typing.Callable[[aursync.mpmc.T_m],typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $typing.Callable[[aursync.mpmc.T_m],typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable[[aursync.mpmc.T_m],typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable[[aursync.mpmc.T_m],typing.Any]$ 0 0 0 0 0 0 $typing.Union[typing.Awaitable,None]$ 0 0 0 $typing.Callable[[aursync.mpmc.T_m],typing.Any]$ 0 $typing.Union[builtins.str,typing.List[builtins.str]]$ 0 0 0 $typing.Union[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[typing.Any]$ 0 0 0 $typing.Union[builtins.str,typing.List[builtins.str]]$ 0 0 $typing.Iterable[typing.Any]$ 0 0 0 $typing.Union[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[typing.Any]$ 0 0 0 0 $typing.Callable[[aursync.mpmc.T_m],typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Iterable[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Callable[[aursync.mpmc.T_m],typing.Any]$ 0 $typing.Callable[[aursync.mpmc.T_m],typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Callable[[aursync.mpmc.T_m],typing.Any]$ 0 $typing.Callable[[aursync.mpmc.T_m],typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing.Awaitable,None]$ 0 0 0 $aursync.mpmc.T_m$ 0 $typing.Union[builtins.str,typing.List[builtins.str]]$ 0 0 0 $builtins.bool$ 0 0 0 $typing.Callable[[aursync.mpmc.T_m],typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[typing.Any]$ 0 0 0 $typing.Union[builtins.str,typing.List[builtins.str]]$ 0 0 0 $builtins.bool$ 0 $typing.Callable[[aursync.mpmc.T_m],typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $aursync.mpmc.T_m$ 0 0 0 0 $typing.Iterable[typing.Any]$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable[[aursync.mpmc.T_m],typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable[[aursync.mpmc.T_m],typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0