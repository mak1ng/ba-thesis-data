from typing import Union , Tuple [EOL] import typing [EOL] __version__ = [string] [EOL] __version_info__ = tuple ( [ int ( num ) if num . isdigit ( ) else num for num in __version__ . replace ( [string] , [string] , [number] ) . split ( [string] ) ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[typing.Union[builtins.int,builtins.str],...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Union , Dict , Any [EOL] import typing [EOL] gemtown_abi = [ { [string] : True , [string] : [ { [string] : [string] , [string] : [string] } ] , [string] : [string] , [string] : [ { [string] : [string] , [string] : [string] } ] , [string] : False , [string] : [string] , [string] : [string] } , { [string] : True , [string] : [ { [string] : [string] , [string] : [string] } ] , [string] : [string] , [string] : [ { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } ] , [string] : False , [string] : [string] , [string] : [string] } , { [string] : True , [string] : [ ] , [string] : [string] , [string] : [ { [string] : [string] , [string] : [string] } ] , [string] : False , [string] : [string] , [string] : [string] } , { [string] : True , [string] : [ { [string] : [string] , [string] : [string] } ] , [string] : [string] , [string] : [ { [string] : [string] , [string] : [string] } ] , [string] : False , [string] : [string] , [string] : [string] } , { [string] : False , [string] : [ { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } ] , [string] : [string] , [string] : [ ] , [string] : False , [string] : [string] , [string] : [string] } , { [string] : True , [string] : [ ] , [string] : [string] , [string] : [ { [string] : [string] , [string] : [string] } ] , [string] : False , [string] : [string] , [string] : [string] } , { [string] : True , [string] : [ { [string] : [string] , [string] : [string] } ] , [string] : [string] , [string] : [ { [string] : [string] , [string] : [string] } ] , [string] : False , [string] : [string] , [string] : [string] } , { [string] : False , [string] : [ { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } ] , [string] : [string] , [string] : [ ] , [string] : False , [string] : [string] , [string] : [string] } , { [string] : True , [string] : [ { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } ] , [string] : [string] , [string] : [ { [string] : [string] , [string] : [string] } ] , [string] : False , [string] : [string] , [string] : [string] } , { [string] : False , [string] : [ { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } ] , [string] : [string] , [string] : [ ] , [string] : False , [string] : [string] , [string] : [string] } , { [string] : False , [string] : [ { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } ] , [string] : [string] , [string] : [ ] , [string] : False , [string] : [string] , [string] : [string] } , { [string] : True , [string] : [ { [string] : [string] , [string] : [string] } ] , [string] : [string] , [string] : [ { [string] : [string] , [string] : [string] } ] , [string] : False , [string] : [string] , [string] : [string] } , { [string] : True , [string] : [ { [string] : [string] , [string] : [string] } ] , [string] : [string] , [string] : [ { [string] : [string] , [string] : [string] } ] , [string] : False , [string] : [string] , [string] : [string] } , { [string] : True , [string] : [ { [string] : [string] , [string] : [string] } ] , [string] : [string] , [string] : [ { [string] : [string] , [string] : [string] } ] , [string] : False , [string] : [string] , [string] : [string] } , { [string] : False , [string] : [ ] , [string] : [string] , [string] : [ ] , [string] : False , [string] : [string] , [string] : [string] } , { [string] : False , [string] : [ { [string] : [string] , [string] : [string] } ] , [string] : [string] , [string] : [ ] , [string] : False , [string] : [string] , [string] : [string] } , { [string] : True , [string] : [ ] , [string] : [string] , [string] : [ { [string] : [string] , [string] : [string] } ] , [string] : False , [string] : [string] , [string] : [string] } , { [string] : True , [string] : [ ] , [string] : [string] , [string] : [ { [string] : [string] , [string] : [string] } ] , [string] : False , [string] : [string] , [string] : [string] } , { [string] : True , [string] : [ { [string] : [string] , [string] : [string] } ] , [string] : [string] , [string] : [ { [string] : [string] , [string] : [string] } ] , [string] : False , [string] : [string] , [string] : [string] } , { [string] : True , [string] : [ ] , [string] : [string] , [string] : [ { [string] : [string] , [string] : [string] } ] , [string] : False , [string] : [string] , [string] : [string] } , { [string] : True , [string] : [ ] , [string] : [string] , [string] : [ { [string] : [string] , [string] : [string] } ] , [string] : False , [string] : [string] , [string] : [string] } , { [string] : True , [string] : [ { [string] : [string] , [string] : [string] } ] , [string] : [string] , [string] : [ { [string] : [string] , [string] : [string] } ] , [string] : False , [string] : [string] , [string] : [string] } , { [string] : False , [string] : [ { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } ] , [string] : [string] , [string] : [ ] , [string] : False , [string] : [string] , [string] : [string] } , { [string] : False , [string] : [ { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } ] , [string] : [string] , [string] : [ ] , [string] : False , [string] : [string] , [string] : [string] } , { [string] : True , [string] : [ { [string] : [string] , [string] : [string] } ] , [string] : [string] , [string] : [ { [string] : [string] , [string] : [string] } ] , [string] : False , [string] : [string] , [string] : [string] } , { [string] : True , [string] : [ { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } ] , [string] : [string] , [string] : [ { [string] : [string] , [string] : [string] } ] , [string] : False , [string] : [string] , [string] : [string] } , { [string] : False , [string] : [ { [string] : [string] , [string] : [string] } ] , [string] : [string] , [string] : [ ] , [string] : False , [string] : [string] , [string] : [string] } , { [string] : [ { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } ] , [string] : False , [string] : [string] , [string] : [string] } , { [string] : False , [string] : [ { [string] : True , [string] : [string] , [string] : [string] } , { [string] : True , [string] : [string] , [string] : [string] } ] , [string] : [string] , [string] : [string] } , { [string] : False , [string] : [ { [string] : True , [string] : [string] , [string] : [string] } , { [string] : True , [string] : [string] , [string] : [string] } , { [string] : True , [string] : [string] , [string] : [string] } ] , [string] : [string] , [string] : [string] } , { [string] : False , [string] : [ { [string] : True , [string] : [string] , [string] : [string] } , { [string] : True , [string] : [string] , [string] : [string] } , { [string] : True , [string] : [string] , [string] : [string] } ] , [string] : [string] , [string] : [string] } , { [string] : False , [string] : [ { [string] : True , [string] : [string] , [string] : [string] } , { [string] : True , [string] : [string] , [string] : [string] } , { [string] : False , [string] : [string] , [string] : [string] } ] , [string] : [string] , [string] : [string] } ]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import Any [EOL] import typing [EOL] from django . conf import settings [EOL] import base64 [EOL] import hashlib [EOL] from Crypto import Random [EOL] from Crypto . Cipher import AES [EOL] from Crypto . Util . Padding import pad [EOL] [EOL] def encryptData ( data ) : [EOL] data = data + settings . ENCRYPT_SEPERATOR_STR [EOL] BLOCK_SIZE = [number] [EOL] secretkey = hashlib . sha256 ( settings . SECRET_KEY_FOR_FILE_HASH . encode ( [string] ) ) . digest ( ) [EOL] cipher = AES . new ( secretkey , AES . MODE_ECB ) [EOL] return base64 . b64encode ( cipher . encrypt ( pad ( data . encode ( [string] ) , BLOCK_SIZE ) ) ) . decode ( [string] ) [EOL] [EOL] def decryptData ( data ) : [EOL] secretkey = hashlib . sha256 ( settings . SECRET_KEY_FOR_FILE_HASH . encode ( [string] ) ) . digest ( ) [EOL] cipher = AES . new ( secretkey , AES . MODE_ECB ) [EOL] return cipher . decrypt ( base64 . b64decode ( data ) ) . decode ( [string] ) . split ( settings . ENCRYPT_SEPERATOR_STR ) [ [number] ] [EOL] [EOL] [EOL] def string2numeric_hash ( data ) : [EOL] return int ( data [ : ] , [number] ) [EOL] [EOL] def calculateHash ( data ) : [EOL] return hashlib . md5 ( data ) . hexdigest ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import Any [EOL] import typing [EOL] from django . conf import settings [EOL] from web3 import Web3 [EOL] from gemtown . utils . abi import gemtown_abi [EOL] [EOL] from gemtown . copyrights import models as copyright_models [EOL] [EOL] def getWeb3Provider ( network ) : [EOL] if network == settings . CHAIN_ID_MAINNET : [EOL] return [string] + settings . INFURA_API_KEY [EOL] elif network == settings . CHAIN_ID_ROPSTEN : [EOL] return [string] + settings . INFURA_API_KEY [EOL] [EOL] def getWeb3Instance ( ) : [EOL] web3 = Web3 ( Web3 . HTTPProvider ( getWeb3Provider ( settings . CHAIN_ID_ROPSTEN ) ) ) [EOL] return web3 [EOL] [EOL] def registerAccount ( web3 , privatekey ) : [EOL] account = web3 . eth . account . privateKeyToAccount ( privatekey ) [EOL] [comment] [EOL] [comment] [EOL] return account [EOL] [EOL] def getGemtownContract ( web3 ) : [EOL] contract = web3 . eth . contract ( address = settings . GEMTOWN_CONTRACT_ADDR , abi = gemtown_abi ) [EOL] return contract [EOL] [EOL] def getCopyrightId ( ) : [EOL] try : [EOL] found_copyright_id = copyright_models . CopyrightId . objects . get ( name = [string] ) [EOL] new_id = found_copyright_id . copyright_id + [number] [EOL] found_copyright_id . copyright_id = new_id [EOL] found_copyright_id . save ( ) [EOL] except : [EOL] new_copyright_id = copyright_models . CopyrightId . objects . create ( name = [string] , copyright_id = [number] , ) [EOL] new_copyright_id . save ( ) [EOL] new_id = [number] [EOL] return new_id [EOL] [EOL] def registerMusicCopyright ( id , uri_metadata ) : [EOL] try : [EOL] web3 = getWeb3Instance ( ) [EOL] account = registerAccount ( web3 , settings . GEMTOWN_OWNER_PRIVATE_KEY ) [EOL] my_contract = getGemtownContract ( web3 ) [EOL] nonce = web3 . eth . getTransactionCount ( account . address , [string] ) [EOL] txn = my_contract . functions . mint_token ( settings . GEMTOWN_MUSIC_COPYRIGHT_ADDR , id , uri_metadata , [string] , [string] , [string] ) . buildTransaction ( { [string] : [number] , [string] : web3 . toWei ( [string] , [string] ) , [string] : nonce , } ) [EOL] signed_txn = web3 . eth . account . signTransaction ( txn , private_key = account . privateKey ) [EOL] found_hash = web3 . eth . sendRawTransaction ( signed_txn . rawTransaction ) [EOL] return str ( found_hash . hex ( ) ) [EOL] except Exception as e : [EOL] print ( e ) [EOL] return None [EOL] [EOL] def registerModelCopyright ( id , uri_metadata ) : [EOL] try : [EOL] web3 = getWeb3Instance ( ) [EOL] account = registerAccount ( web3 , settings . GEMTOWN_OWNER_PRIVATE_KEY ) [EOL] my_contract = getGemtownContract ( web3 ) [EOL] nonce = web3 . eth . getTransactionCount ( account . address , [string] ) [EOL] txn = my_contract . functions . mint_token ( settings . GEMTOWN_MODEL_COPYRIGHT_ADDR , id , uri_metadata , [string] , [string] , [string] , ) . buildTransaction ( { [string] : [number] , [string] : web3 . toWei ( [string] , [string] ) , [string] : nonce , } ) [EOL] signed_txn = web3 . eth . account . signTransaction ( txn , private_key = account . privateKey ) [EOL] hash = web3 . eth . sendRawTransaction ( signed_txn . rawTransaction ) [EOL] return str ( hash . hex ( ) ) [EOL] except Exception as e : [EOL] print ( e ) [EOL] return None [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ModelphotosConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import List , Any , Set , Tuple , Type [EOL] import gemtown [EOL] import typing [EOL] from django . db import models [EOL] from django . utils . encoding import python_2_unicode_compatible [EOL] from gemtown . users import models as user_models [EOL] from gemtown . modelers import models as modeler_models [EOL] import os [EOL] [EOL] @ python_2_unicode_compatible class TimeStampModel ( models . Model ) : [EOL] created_at = models . DateTimeField ( auto_now_add = True ) [EOL] updated_at = models . DateTimeField ( auto_now = True ) [EOL] class Meta : [EOL] abstract = True [EOL] [EOL] [EOL] @ python_2_unicode_compatible class ModelPhoto ( TimeStampModel ) : [EOL] [docstring] [EOL] [EOL] def upload_file_name ( instance , filename ) : [EOL] ext = filename . split ( [string] ) [ - [number] ] [EOL] filename = [string] % ( instance . creator . username , [string] , instance . photo_type , ext ) [EOL] return os . path . join ( [string] , filename ) [EOL] [EOL] MODEL_PHOTO_CONFIRM_STATUS_CHOICES = { ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , } [EOL] [EOL] MODEL_PHOTO_TYPE_CHOICES = { ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , } [EOL] [EOL] creator = models . ForeignKey ( user_models . User , on_delete = models . PROTECT ) [EOL] modeler = models . ForeignKey ( modeler_models . Modeler , on_delete = models . PROTECT , blank = True , null = True ) [EOL] photo_type = models . CharField ( max_length = [number] , choices = MODEL_PHOTO_TYPE_CHOICES , blank = True , ) [EOL] file = models . ImageField ( upload_to = upload_file_name ) [EOL] confirm_status = models . CharField ( max_length = [number] , choices = MODEL_PHOTO_CONFIRM_STATUS_CHOICES , default = [string] ) [EOL] contents_hash = models . CharField ( max_length = [number] , blank = True ) [EOL] blockchain_id = models . CharField ( max_length = [number] , blank = True ) [EOL] blockchain_txid = models . CharField ( max_length = [number] , blank = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . file , self . modeler , self . creator ) [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.modelphotos.models.TimeStampModel]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.modelphotos.models.TimeStampModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.modelphotos.models.ModelPhoto]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.modelphotos.models.ModelPhoto]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.modelphotos.models.ModelPhoto]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 $typing.Type[gemtown.modelphotos.models.ModelPhoto]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.modelphotos.models.ModelPhoto]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 $typing.Type[gemtown.modelphotos.models.ModelPhoto]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.modelphotos.models.ModelPhoto]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.modelphotos.models.ModelPhoto]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0
	0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class AdvertisingsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import List , Type [EOL] import gemtown [EOL] import typing [EOL] from django . db import models [EOL] from django . utils . encoding import python_2_unicode_compatible [EOL] from gemtown . users import models as user_models [EOL] [EOL] @ python_2_unicode_compatible class TimeStampModel ( models . Model ) : [EOL] created_at = models . DateTimeField ( auto_now_add = True ) [EOL] updated_at = models . DateTimeField ( auto_now = True ) [EOL] class Meta : [EOL] abstract = True [EOL] [EOL] [EOL] @ python_2_unicode_compatible class Advertising ( TimeStampModel ) : [EOL] [docstring] [EOL] [EOL] ADVERTISING_TYPE = { ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , } [EOL] [EOL] creator = models . ForeignKey ( user_models . User , on_delete = models . PROTECT ) [EOL] image = models . ImageField ( blank = True ) [EOL] link = models . URLField ( max_length = [number] , null = True ) [EOL] advertising_type = models . CharField ( max_length = [number] , choices = ADVERTISING_TYPE , null = True , ) [EOL] priority = models . CharField ( max_length = [number] , null = True ) [EOL] activate = models . BooleanField ( default = False ) [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.advertisings.models.Advertising]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.advertisings.models.Advertising]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.advertisings.models.Advertising]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.advertisings.models.Advertising]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.advertisings.models.Advertising]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] from . import views [EOL] [EOL] app_name = [string] [EOL] urlpatterns = [ path ( [string] , view = views . ListAllAdvertisings . as_view ( ) , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
from typing import List , Tuple , Type , Set [EOL] import gemtown [EOL] import typing [EOL] from django . db import models [EOL] from django . utils . encoding import python_2_unicode_compatible [EOL] from multiselectfield import MultiSelectField [EOL] from gemtown . users import models as user_models [EOL] import os [EOL] [EOL] @ python_2_unicode_compatible class TimeStampModel ( models . Model ) : [EOL] created_at = models . DateTimeField ( auto_now_add = True ) [EOL] updated_at = models . DateTimeField ( auto_now = True ) [EOL] class Meta : [EOL] abstract = True [EOL] [EOL] @ python_2_unicode_compatible class Musician ( TimeStampModel ) : [EOL] [docstring] [EOL] [EOL] MUSICIAN_CAREER_CHOICES = { ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , } [EOL] [EOL] creator = models . ForeignKey ( user_models . User , on_delete = models . PROTECT , related_name = [string] ) [EOL] cover_image = models . ImageField ( blank = True ) [EOL] nickname = models . TextField ( max_length = [number] ) [EOL] description = models . TextField ( blank = True ) [EOL] career = models . CharField ( max_length = [number] , choices = MUSICIAN_CAREER_CHOICES , blank = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . nickname , self . gender , self . creator ) [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] [EOL] @ property def country ( self ) : [EOL] return user_models . User . objects . get ( id = self . creator . id ) . country [EOL] [EOL] @ property def gender ( self ) : [EOL] return user_models . User . objects . get ( id = self . creator . id ) . gender [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.musicians.models.TimeStampModel]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.musicians.models.TimeStampModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.musicians.models.Musician]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.musicians.models.Musician]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.musicians.models.Musician]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.musicians.models.Musician]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.musicians.models.Musician]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class MusiciansConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class SongsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import List , Any , Set , Tuple , Type [EOL] import gemtown [EOL] import typing [EOL] from django . db import models [EOL] from django . utils . encoding import python_2_unicode_compatible [EOL] from gemtown . users import models as user_models [EOL] from gemtown . musicians import models as musician_models [EOL] [EOL] import os [EOL] [EOL] @ python_2_unicode_compatible class TimeStampModel ( models . Model ) : [EOL] created_at = models . DateTimeField ( auto_now_add = True ) [EOL] updated_at = models . DateTimeField ( auto_now = True ) [EOL] class Meta : [EOL] abstract = True [EOL] [EOL] @ python_2_unicode_compatible class CoverImage ( TimeStampModel ) : [EOL] def upload_file_name ( instance , filename ) : [EOL] ext = filename . split ( [string] ) [ - [number] ] [EOL] filename = [string] % ( instance . title , [string] , ext ) [EOL] return os . path . join ( [string] , filename ) [EOL] [EOL] [docstring] [EOL] file = models . ImageField ( upload_to = upload_file_name , blank = True ) [EOL] title = models . TextField ( max_length = [number] ) [EOL] price = models . IntegerField ( default = [number] ) [EOL] buyer = models . ManyToManyField ( user_models . User , symmetrical = False , blank = True , related_name = [string] ) [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . title ) [EOL] [EOL] @ python_2_unicode_compatible class Song ( TimeStampModel ) : [EOL] [docstring] [EOL] [EOL] def upload_file_name ( instance , filename ) : [EOL] ext = filename . split ( [string] ) [ - [number] ] [EOL] filename = [string] % ( instance . creator . username , instance . title , [string] , ext ) [EOL] return os . path . join ( [string] , filename ) [EOL] [EOL] SONG_GENRE_CHOICES = { ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , } [EOL] [EOL] SONG_GENRE_DETAIL_CHOICES = { ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , } [EOL] [EOL] SONG_CONFIRM_STATUS_CHOICES = { ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , } [EOL] [EOL] SONG_CAREER_CHOICES = { ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , } [EOL] [EOL] creator = models . ForeignKey ( user_models . User , on_delete = models . PROTECT ) [EOL] musician = models . ForeignKey ( musician_models . Musician , on_delete = models . PROTECT ) [EOL] file = models . FileField ( upload_to = upload_file_name ) [EOL] cover_image_custom = models . ImageField ( blank = True ) [EOL] cover_image = models . ForeignKey ( CoverImage , on_delete = models . PROTECT , null = True , related_name = [string] ) [EOL] album_title = models . TextField ( max_length = [number] , blank = True ) [EOL] title = models . TextField ( max_length = [number] ) [EOL] composer = models . TextField ( max_length = [number] , blank = True ) [EOL] lyricist = models . TextField ( max_length = [number] , blank = True ) [EOL] vocal = models . TextField ( max_length = [number] , blank = True ) [EOL] description = models . TextField ( blank = True ) [EOL] genre = models . CharField ( max_length = [number] , choices = SONG_GENRE_CHOICES ) [EOL] genre_detail = models . CharField ( max_length = [number] , choices = SONG_GENRE_DETAIL_CHOICES ) [EOL] career = models . CharField ( max_length = [number] , choices = SONG_CAREER_CHOICES ) [EOL] duration = models . IntegerField ( ) [EOL] latest_ranking = models . IntegerField ( default = [number] ) [EOL] confirm_status = models . CharField ( max_length = [number] , choices = SONG_CONFIRM_STATUS_CHOICES , default = [string] ) [EOL] contents_hash = models . CharField ( max_length = [number] , blank = True ) [EOL] blockchain_id = models . CharField ( max_length = [number] , blank = True ) [EOL] blockchain_txid = models . CharField ( max_length = [number] , blank = True ) [EOL] price_to_playing = models . IntegerField ( default = [number] ) [EOL] price_to_download = models . IntegerField ( default = [number] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . file , self . title , self . musician , self . creator ) [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] [EOL] @ property def like_count ( self ) : [EOL] return LikeOfSong . objects . filter ( song__id = self . id ) . count ( ) [EOL] [EOL] @ property def comment_count ( self ) : [EOL] return CommentOfSong . objects . filter ( song__id = self . id ) . count ( ) [EOL] [EOL] @ property def play_count ( self ) : [EOL] return PlayOfSong . objects . filter ( song__id = self . id ) . count ( ) [EOL] [EOL] @ property def download_count ( self ) : [EOL] return DownloadOfSong . objects . filter ( song__id = self . id ) . count ( ) [EOL] [EOL] [EOL] @ python_2_unicode_compatible class CommentOfSong ( TimeStampModel ) : [EOL] [docstring] [EOL] creator = models . ForeignKey ( user_models . User , on_delete = models . PROTECT , null = True ) [EOL] comment = models . TextField ( ) [EOL] song = models . ForeignKey ( Song , on_delete = models . PROTECT , null = True , related_name = [string] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . comment [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] [EOL] [EOL] @ python_2_unicode_compatible class LikeOfSong ( TimeStampModel ) : [EOL] [docstring] [EOL] creator = models . ForeignKey ( user_models . User , on_delete = models . PROTECT , null = True ) [EOL] song = models . ForeignKey ( Song , on_delete = models . PROTECT , null = True , related_name = [string] ) [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] [EOL] [EOL] @ python_2_unicode_compatible class PlayOfSong ( TimeStampModel ) : [EOL] [docstring] [EOL] creator = models . ForeignKey ( user_models . User , on_delete = models . PROTECT , null = True ) [EOL] song = models . ForeignKey ( Song , on_delete = models . PROTECT , null = True , related_name = [string] ) [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] [EOL] [EOL] @ python_2_unicode_compatible class DownloadOfSong ( TimeStampModel ) : [EOL] [docstring] [EOL] creator = models . ForeignKey ( user_models . User , on_delete = models . PROTECT , null = True ) [EOL] song = models . ForeignKey ( Song , on_delete = models . PROTECT , null = True , related_name = [string] ) [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.songs.models.TimeStampModel]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.songs.models.TimeStampModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Type[gemtown.songs.models.CoverImage]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.songs.models.CoverImage]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.songs.models.CoverImage]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.songs.models.CoverImage]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.songs.models.Song]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.songs.models.Song]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.songs.models.Song]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.songs.models.Song]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.songs.models.Song]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.songs.models.Song]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.songs.models.Song]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.songs.models.Song]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.songs.models.Song]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.songs.models.Song]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.songs.models.Song]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.songs.models.Song]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 $typing.Type[gemtown.songs.models.Song]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 $typing.Type[gemtown.songs.models.Song]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 $typing.Type[gemtown.songs.models.Song]$ 0 0 0 0 0 0 0 $typing.Type[gemtown.songs.models.Song]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.songs.models.Song]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 $typing.Type[gemtown.songs.models.Song]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.songs.models.Song]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.songs.models.Song]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.songs.models.Song]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.songs.models.Song]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.songs.models.CommentOfSong]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.songs.models.CommentOfSong]$ 0 0 0 0 0 0 0 $typing.Type[gemtown.songs.models.CommentOfSong]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.songs.models.LikeOfSong]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.songs.models.LikeOfSong]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.songs.models.PlayOfSong]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.songs.models.PlayOfSong]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.songs.models.DownloadOfSong]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.songs.models.DownloadOfSong]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class CopyrightsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import List , Tuple , Type , Set [EOL] import gemtown [EOL] import typing [EOL] from django . db import models [EOL] from django . utils . encoding import python_2_unicode_compatible [EOL] from gemtown . users import models as user_models [EOL] from gemtown . songs import models as song_models [EOL] from gemtown . modelphotos import models as modelphoto_models [EOL] [EOL] @ python_2_unicode_compatible class TimeStampModel ( models . Model ) : [EOL] created_at = models . DateTimeField ( auto_now_add = True ) [EOL] updated_at = models . DateTimeField ( auto_now = True ) [EOL] class Meta : [EOL] abstract = True [EOL] [EOL] [EOL] @ python_2_unicode_compatible class MusicCopyright ( TimeStampModel ) : [EOL] [docstring] [EOL] [EOL] CONFIRM_STATUS_CHOICES = { ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , } [EOL] [EOL] creator = models . ForeignKey ( user_models . User , on_delete = models . PROTECT ) [EOL] song = models . ForeignKey ( song_models . Song , on_delete = models . PROTECT ) [EOL] block_chain_id = models . CharField ( max_length = [number] , blank = True ) [EOL] block_chain_txid = models . CharField ( max_length = [number] , blank = True ) [EOL] [EOL] confirm_status = models . CharField ( max_length = [number] , choices = CONFIRM_STATUS_CHOICES , default = [string] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . song , self . creator ) [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] [EOL] [EOL] class ModelPhotoCopyright ( TimeStampModel ) : [EOL] [docstring] [EOL] [EOL] CONFIRM_STATUS_CHOICES = { ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , } [EOL] [EOL] creator = models . ForeignKey ( user_models . User , on_delete = models . PROTECT ) [EOL] modelphoto = models . ForeignKey ( modelphoto_models . ModelPhoto , on_delete = models . PROTECT ) [EOL] block_chain_id = models . CharField ( max_length = [number] , blank = True ) [EOL] block_chain_txid = models . CharField ( max_length = [number] , blank = True ) [EOL] [EOL] confirm_status = models . CharField ( max_length = [number] , choices = CONFIRM_STATUS_CHOICES , default = [string] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . modelphoto , self . creator ) [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] [EOL] class CopyrightId ( TimeStampModel ) : [EOL] [docstring] [EOL] name = models . CharField ( max_length = [number] , default = [string] ) [EOL] copyright_id = models . IntegerField ( default = [number] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.copyrights.models.TimeStampModel]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.copyrights.models.TimeStampModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.copyrights.models.MusicCopyright]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.copyrights.models.MusicCopyright]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.copyrights.models.MusicCopyright]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.copyrights.models.MusicCopyright]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.copyrights.models.MusicCopyright]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.copyrights.models.ModelPhotoCopyright]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.copyrights.models.ModelPhotoCopyright]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.copyrights.models.ModelPhotoCopyright]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.copyrights.models.ModelPhotoCopyright]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.copyrights.models.ModelPhotoCopyright]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.copyrights.models.CopyrightId]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.copyrights.models.CopyrightId]$ 0 0 0 0 0 0 0 0 0
	0
from typing import Tuple , Type [EOL] import gemtown [EOL] import typing [EOL] from rest_framework import serializers [EOL] from gemtown . modelphotos import models as modelphoto_models [EOL] from gemtown . modelers import models as modeler_models [EOL] from gemtown . musicians import models as musician_models [EOL] from . import models [EOL] import time [EOL] [EOL] class TimestampField ( serializers . Field ) : [EOL] def to_representation ( self , value ) : [EOL] return int ( time . mktime ( value . timetuple ( ) ) ) [EOL] [EOL] class UsernameSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = models . User [EOL] fields = ( [string] , ) [EOL] [EOL] class MusicianSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = musician_models . Musician [EOL] fields = ( [string] , [string] , [string] , ) [EOL] [EOL] class ModelPhotoSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = modelphoto_models . ModelPhoto [EOL] fields = ( [string] , [string] , ) [EOL] [EOL] class ModelerSerializer ( serializers . ModelSerializer ) : [EOL] cover_image = ModelPhotoSerializer ( ) [EOL] class Meta : [EOL] model = modeler_models . Modeler [EOL] fields = ( [string] , [string] , [string] , [string] , ) [EOL] [EOL] class UserSerializer ( serializers . ModelSerializer ) : [EOL] created_at = TimestampField ( ) [EOL] updated_at = TimestampField ( ) [EOL] followers = UsernameSerializer ( many = True ) [EOL] followings = UsernameSerializer ( many = True ) [EOL] musician = MusicianSerializer ( ) [EOL] modeler = ModelerSerializer ( ) [EOL] [EOL] class Meta : [EOL] model = models . User [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.users.models.User]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.users.models.User]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.users.models.User]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $gemtown.users.serializers.ModelPhotoSerializer$ 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.users.models.User]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $gemtown.users.serializers.TimestampField$ 0 0 0 0 0 $gemtown.users.serializers.TimestampField$ 0 0 0 0 0 $gemtown.users.serializers.UsernameSerializer$ 0 0 0 0 0 0 0 0 $gemtown.users.serializers.UsernameSerializer$ 0 0 0 0 0 0 0 0 $gemtown.users.serializers.MusicianSerializer$ 0 0 0 0 0 $gemtown.users.serializers.ModelerSerializer$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.users.models.User]$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class UsersAppConfig ( AppConfig ) : [EOL] [EOL] name = [string] [EOL] verbose_name = [string] [EOL] [EOL] def ready ( self ) : [EOL] try : [EOL] import users . signals [comment] [EOL] except ImportError : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Tuple , Type , Set [EOL] import gemtown [EOL] import typing [EOL] from django . contrib . auth . models import AbstractUser [EOL] from django . db . models import Sum [EOL] from django . urls import reverse [EOL] from django . utils . encoding import python_2_unicode_compatible [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from multiselectfield import MultiSelectField [EOL] from django . db import models [EOL] [EOL] @ python_2_unicode_compatible class TimeStampModel ( models . Model ) : [EOL] created_at = models . DateTimeField ( auto_now_add = True ) [EOL] updated_at = models . DateTimeField ( auto_now = True ) [EOL] class Meta : [EOL] abstract = True [EOL] [EOL] [EOL] @ python_2_unicode_compatible class User ( AbstractUser , TimeStampModel ) : [EOL] [docstring] [EOL] [EOL] GENDER_CHOICES = { ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , } [EOL] [EOL] USER_CLASS_CHOICES = { ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , } [EOL] [EOL] COUNTRY_CHOICES = { ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , } [EOL] [EOL] profile_photo = models . ImageField ( blank = True ) [EOL] gender = models . CharField ( max_length = [number] , choices = GENDER_CHOICES , blank = True ) [EOL] country = models . CharField ( max_length = [number] , choices = COUNTRY_CHOICES , default = [string] , blank = True ) [EOL] mobile_number = models . CharField ( max_length = [number] , blank = True ) [EOL] mobile_country = models . CharField ( max_length = [number] , choices = COUNTRY_CHOICES , default = [string] , blank = True ) [EOL] followers = models . ManyToManyField ( [string] , symmetrical = False , blank = True , related_name = [string] ) [EOL] followings = models . ManyToManyField ( [string] , symmetrical = False , blank = True , related_name = [string] ) [EOL] user_class = models . CharField ( max_length = [number] , choices = USER_CLASS_CHOICES , blank = True , default = [string] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . username [EOL] [EOL] def get_absolute_url ( self ) : [EOL] return reverse ( [string] , kwargs = { [string] : self . username } ) [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] [EOL] @ property def musician ( self ) : [EOL] from gemtown . musicians import models as musician_models [EOL] return musician_models . Musician . objects . get ( creator__id = self . id ) [EOL] [EOL] @ property def modeler ( self ) : [EOL] from gemtown . modelers import models as modeler_models [EOL] return modeler_models . Modeler . objects . get ( creator__id = self . id ) [EOL] [EOL] @ property def gem_amount ( self ) : [EOL] from gemtown . gems import models as gem_models [EOL] try : [EOL] found_purchase_amount = gem_models . PurchaseGem . objects . filter ( creator__id = self . id ) . aggregate ( Sum ( [string] ) ) . get ( [string] ) [EOL] if found_purchase_amount == None : [EOL] found_purchase_amount = [number] [EOL] except gem_models . PurchaseGem . DoesNotExist : [EOL] found_purchase_amount = [number] [EOL] [EOL] try : [EOL] found_bonus_amount = gem_models . BonusGem . objects . filter ( creator__id = self . id ) . aggregate ( Sum ( [string] ) ) . get ( [string] ) [EOL] if found_bonus_amount == None : [EOL] found_bonus_amount = [number] [EOL] except gem_models . BonusGem . DoesNotExist : [EOL] found_bonus_amount = [number] [EOL] [EOL] try : [EOL] found_comsumption_amount = gem_models . ConsumptionGem . objects . filter ( creator__id = self . id ) . aggregate ( Sum ( [string] ) ) . get ( [string] ) [EOL] if found_comsumption_amount == None : [EOL] found_comsumption_amount = [number] [EOL] except gem_models . ConsumptionGem . DoesNotExist : [EOL] found_comsumption_amount = [number] [EOL] [EOL] gem_amount = [number] [EOL] gem_amount = found_purchase_amount + found_bonus_amount - found_comsumption_amount [EOL] if gem_amount < [number] : [EOL] gem_amount = [number] [EOL] return gem_amount [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.users.models.TimeStampModel]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.users.models.TimeStampModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 $typing.Type[gemtown.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0
	0
	0
	0
import django [EOL] import pytest [EOL] from django . conf import settings [EOL] [EOL] pytestmark = pytest . mark . django_db [EOL] [EOL] [EOL] def test_user_get_absolute_url ( user ) : [EOL] assert user . get_absolute_url ( ) == f" [string] { user . username } [string] " [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ModelersConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import List , Any , Set , Tuple , Type [EOL] import gemtown [EOL] import typing [EOL] from django . db import models [EOL] from django . utils . encoding import python_2_unicode_compatible [EOL] from multiselectfield import MultiSelectField [EOL] from gemtown . users import models as user_models [EOL] import os [EOL] [EOL] @ python_2_unicode_compatible class TimeStampModel ( models . Model ) : [EOL] created_at = models . DateTimeField ( auto_now_add = True ) [EOL] updated_at = models . DateTimeField ( auto_now = True ) [EOL] class Meta : [EOL] abstract = True [EOL] [EOL] [EOL] @ python_2_unicode_compatible class Modeler ( TimeStampModel ) : [EOL] [docstring] [EOL] [EOL] MODELER_GENDER_CHOICES = { ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , } [EOL] [EOL] MODELER_AGE_CHOICES = { ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , } [EOL] [EOL] MODELER_JOB_CHOICES = { ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , } [EOL] [EOL] MODELER_ENTERTAINMENT_CHOICES = { ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , } [EOL] [EOL] MODELER_STYLE_CHOICES = { ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , } [EOL] [EOL] MODELER_CAREER_CHOICES = { ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , } [EOL] [EOL] MODELER_CONFIRM_STATUS_CHOICES = { ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , } [EOL] [EOL] MODELER_BLOOD_TYPE_CHOICES = { ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , } [EOL] [EOL] creator = models . ForeignKey ( user_models . User , on_delete = models . PROTECT , related_name = [string] ) [EOL] nickname = models . TextField ( max_length = [number] ) [EOL] description = models . TextField ( blank = True , null = True ) [EOL] gender = models . CharField ( max_length = [number] , choices = MODELER_GENDER_CHOICES , blank = True , null = True ) [EOL] age_range = models . CharField ( max_length = [number] , choices = MODELER_AGE_CHOICES , blank = True , null = True ) [EOL] career = models . CharField ( max_length = [number] , choices = MODELER_CAREER_CHOICES , blank = True , null = True ) [EOL] job = MultiSelectField ( max_length = [number] , choices = MODELER_JOB_CHOICES , blank = True , null = True ) [EOL] entertainment = MultiSelectField ( max_length = [number] , choices = MODELER_ENTERTAINMENT_CHOICES , blank = True , null = True ) [EOL] style = MultiSelectField ( max_length = [number] , choices = MODELER_STYLE_CHOICES , blank = True , null = True ) [EOL] height = models . FloatField ( blank = True , null = True ) [EOL] weight = models . FloatField ( blank = True , null = True ) [EOL] blood_type = models . CharField ( max_length = [number] , choices = MODELER_BLOOD_TYPE_CHOICES , blank = True , null = True ) [EOL] age = models . CharField ( max_length = [number] , blank = True , default = [string] ) [EOL] bust = models . CharField ( max_length = [number] , blank = True , default = [string] ) [EOL] wiast = models . CharField ( max_length = [number] , blank = True , default = [string] ) [EOL] hip = models . CharField ( max_length = [number] , blank = True , default = [string] ) [EOL] birth_year = models . CharField ( max_length = [number] , blank = True , null = True ) [EOL] birth_month = models . CharField ( max_length = [number] , blank = True , null = True ) [EOL] birth_day = models . CharField ( max_length = [number] , blank = True , null = True ) [EOL] confirm_status = models . CharField ( max_length = [number] , choices = MODELER_CONFIRM_STATUS_CHOICES , default = [string] , ) [EOL] latest_ranking = models . IntegerField ( default = [number] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . nickname , self . gender , self . creator ) [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] [EOL] @ property def like_count ( self ) : [EOL] return LikeOfModeler . objects . filter ( modeler__id = self . id ) . count ( ) [EOL] [EOL] @ property def comment_count ( self ) : [EOL] return CommentOfModeler . objects . filter ( modeler__id = self . id ) . count ( ) [EOL] [EOL] @ property def cover_image ( self ) : [EOL] from gemtown . modelphotos import models as modelphoto_models [EOL] try : [EOL] found_modelphoto = modelphoto_models . ModelPhoto . objects . filter ( modeler__id = self . id , photo_type = [string] ) [EOL] found_modelphoto = found_modelphoto [ [number] ] [EOL] except : [EOL] found_modelphoto = modelphoto_models . ModelPhoto . objects . get ( modeler__id = self . id , photo_type = [string] ) [EOL] return found_modelphoto [EOL] [EOL] @ property def full_image ( self ) : [EOL] from gemtown . modelphotos import models as modelphoto_models [EOL] try : [EOL] found_modelphoto = modelphoto_models . ModelPhoto . objects . filter ( modeler__id = self . id , photo_type = [string] ) [EOL] found_modelphoto = found_modelphoto [ [number] ] [EOL] except : [EOL] found_modelphoto = modelphoto_models . ModelPhoto . objects . get ( modeler__id = self . id , photo_type = [string] ) [EOL] return found_modelphoto [EOL] [EOL] @ property def half_image ( self ) : [EOL] from gemtown . modelphotos import models as modelphoto_models [EOL] try : [EOL] found_modelphoto = modelphoto_models . ModelPhoto . objects . filter ( modeler__id = self . id , photo_type = [string] ) [EOL] found_modelphoto = found_modelphoto [ [number] ] [EOL] except : [EOL] found_modelphoto = modelphoto_models . ModelPhoto . objects . get ( modeler__id = self . id , photo_type = [string] ) [EOL] return found_modelphoto [EOL] [EOL] @ property def etc_image ( self ) : [EOL] from gemtown . modelphotos import models as modelphoto_models [EOL] try : [EOL] found_modelphoto = modelphoto_models . ModelPhoto . objects . filter ( modeler__id = self . id , photo_type = [string] ) [EOL] found_modelphoto = found_modelphoto [ [number] ] [EOL] except : [EOL] found_modelphoto = modelphoto_models . ModelPhoto . objects . get ( modeler__id = self . id , photo_type = [string] ) [EOL] return found_modelphoto [EOL] [EOL] @ property def country ( self ) : [EOL] return user_models . User . objects . get ( id = self . creator . id ) . country [EOL] [EOL] @ python_2_unicode_compatible class CommentOfModeler ( TimeStampModel ) : [EOL] [docstring] [EOL] creator = models . ForeignKey ( user_models . User , on_delete = models . PROTECT , null = True , related_name = [string] ) [EOL] modeler = models . ForeignKey ( Modeler , on_delete = models . PROTECT , null = True , related_name = [string] ) [EOL] comment = models . TextField ( ) [EOL] def __str__ ( self ) : [EOL] return self . comment [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] [EOL] [EOL] @ python_2_unicode_compatible class LikeOfModeler ( TimeStampModel ) : [EOL] [docstring] [EOL] creator = models . ForeignKey ( user_models . User , on_delete = models . PROTECT , null = True , related_name = [string] ) [EOL] modeler = models . ForeignKey ( Modeler , on_delete = models . PROTECT , null = True , related_name = [string] ) [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.modelers.models.TimeStampModel]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.modelers.models.TimeStampModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.modelers.models.Modeler]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.modelers.models.Modeler]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.modelers.models.Modeler]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.modelers.models.Modeler]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.modelers.models.Modeler]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.modelers.models.Modeler]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.modelers.models.Modeler]$ 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.modelers.models.Modeler]$ 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.modelers.models.Modeler]$ 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.modelers.models.Modeler]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.modelers.models.Modeler]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.modelers.models.Modeler]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.modelers.models.Modeler]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.modelers.models.Modeler]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.modelers.models.Modeler]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.modelers.models.Modeler]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.modelers.models.Modeler]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.modelers.models.Modeler]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.modelers.models.Modeler]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.modelers.models.Modeler]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 $typing.Type[gemtown.modelers.models.Modeler]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.modelers.models.CommentOfModeler]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.modelers.models.CommentOfModeler]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.modelers.models.CommentOfModeler]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.modelers.models.LikeOfModeler]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[gemtown.modelers.models.LikeOfModeler]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class GemsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , migrations . DeleteModel ( name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0