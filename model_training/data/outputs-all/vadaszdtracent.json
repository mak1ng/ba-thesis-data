from . eventmodel import tracent [EOL] from . eventmodel . tracebuilder import TagDict [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import TypeVar , Callable , Optional , Type , Any [EOL] import builtins [EOL] import Tracent [EOL] import tracent [EOL] import reporter [EOL] import typing [EOL] import concurrency_model [EOL] from functools import wraps [EOL] from typing import Optional , Callable , TypeVar , Type , Any , cast [EOL] [EOL] from . eu import ExecutionUnit [EOL] from . tracebuilder import ( AbstractTraceBuilder as _TraceBuilder , SimpleTraceBuilder as _SimpleTraceBuilder ) [EOL] from . reporter import AbstractReporter as _Reporter [EOL] from . concurrency_model import ( ConcurrencyModel , PythonThreads ) [EOL] [EOL] [EOL] FuncType = Callable [ ... , Any ] [EOL] F = TypeVar ( [string] , bound = FuncType ) [EOL] [EOL] [EOL] def delegate_to ( f ) : [EOL] @ wraps ( f ) def _delegate_to_eu ( self , * args , ** kwargs ) : [EOL] if self . _threading_model is None : [EOL] raise ValueError ( [string] [string] ) [EOL] eu_instance = self . _threading_model . get_eu ( ) [EOL] return f ( eu_instance , * args , ** kwargs ) [EOL] [comment] [EOL] return cast ( F , _delegate_to_eu ) [EOL] [EOL] [EOL] class Tracent ( object ) : [EOL] ConcreteThreadingModel = TypeVar ( [string] , bound = ConcurrencyModel ) [EOL] [EOL] ConcreteTraceBuilder = TypeVar ( [string] , bound = _TraceBuilder ) [EOL] [EOL] _reporter = ... [EOL] _traceBuilder = ... [EOL] _concurrency_model_class = ... [EOL] _threading_model = ... [EOL] [EOL] def __init__ ( self ) : [EOL] self . _concurrency_model_class = PythonThreads [EOL] self . _traceBuilder = None [EOL] self . _threading_model = None [EOL] [EOL] @ property def lock_class ( self ) : [EOL] return self . _concurrency_model_class . Lock [EOL] [EOL] @ property def my_eu_id ( self ) : [EOL] if self . _threading_model is None : [EOL] raise ValueError ( [string] ) [EOL] return self . _threading_model . get_eu ( ) . id [EOL] [EOL] def set_threading_model ( self , threading_model_class ) : [EOL] self . _concurrency_model_class = threading_model_class [EOL] return self [EOL] [EOL] def set_reporter ( self , reporter ) : [EOL] self . _reporter = reporter [EOL] return self [EOL] [EOL] def start_tracing ( self , trace_builder_class = _SimpleTraceBuilder ) : [EOL] self . _traceBuilder = trace_builder_class ( self . _reporter ) [EOL] self . _threading_model = self . _concurrency_model_class ( self . _traceBuilder ) [EOL] [EOL] trace_point = delegate_to ( ExecutionUnit . trace_point ) [EOL] get_trace_context = delegate_to ( ExecutionUnit . get_trace_context ) [EOL] peek = delegate_to ( ExecutionUnit . peek ) [EOL] add_tags = delegate_to ( ExecutionUnit . add_tags ) [EOL] finish = delegate_to ( ExecutionUnit . finish ) [EOL] [EOL] [EOL] def tracent ( ) : [EOL] return _tracent [EOL] [EOL] [EOL] _tracent = Tracent ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $reporter.AbstractReporter$ 0 0 0 $typing.Optional[tracebuilder.AbstractTraceBuilder]$ 0 0 0 $typing.Type[concurrency_model.ConcurrencyModel]$ 0 0 0 $typing.Optional[concurrency_model.ConcurrencyModel]$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $typing.Type[tracent.eventmodel.concurrency_model.ConcurrencyModel]$ 0 0 0 0 0 $typing.Optional[tracent.eventmodel.tracebuilder.AbstractTraceBuilder]$ 0 0 0 0 0 $typing.Optional[tracent.eventmodel.concurrency_model.ConcurrencyModel]$ 0 0 0 0 0 0 0 $typing.Type[concurrency_model.ConcurrencyModel.Acquirable]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'Tracent'$ 0 0 0 $typing.Type[Tracent.ConcreteThreadingModel]$ 0 0 0 0 0 $typing.Type[tracent.eventmodel.concurrency_model.ConcurrencyModel]$ 0 $typing.Type[Tracent.ConcreteThreadingModel]$ 0 0 0 0 0 0 $'Tracent'$ 0 0 0 $reporter.AbstractReporter$ 0 0 0 0 0 $tracent.eventmodel.reporter.AbstractReporter$ 0 $reporter.AbstractReporter$ 0 0 0 0 0 0 $None$ 0 0 0 $typing.Type[Tracent.ConcreteTraceBuilder]$ 0 0 0 0 0 0 0 $typing.Optional[tracent.eventmodel.tracebuilder.AbstractTraceBuilder]$ 0 $typing.Type[Tracent.ConcreteTraceBuilder]$ 0 0 0 0 0 0 0 0 $typing.Optional[tracent.eventmodel.concurrency_model.ConcurrencyModel]$ 0 0 0 0 0 0 0 $typing.Optional[tracent.eventmodel.tracebuilder.AbstractTraceBuilder]$ 0 0 0 $typing.Type[tracent.eventmodel.Tracent]$ 0 0 0 0 0 $typing.Type[tracent.eventmodel.Tracent]$ 0 0 $typing.Type[tracent.eventmodel.Tracent]$ 0 0 0 0 0 $typing.Type[tracent.eventmodel.Tracent]$ 0 0 $typing.Type[tracent.eventmodel.Tracent]$ 0 0 0 0 0 $typing.Type[tracent.eventmodel.Tracent]$ 0 0 $typing.Type[tracent.eventmodel.Tracent]$ 0 0 0 0 0 $typing.Type[tracent.eventmodel.Tracent]$ 0 0 $typing.Type[tracent.eventmodel.Tracent]$ 0 0 0 0 0 $typing.Type[tracent.eventmodel.Tracent]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] import builtins [EOL] from abc import ABC , abstractmethod [EOL] [EOL] [EOL] class AbstractReporter ( ABC ) : [EOL] [docstring] [EOL] [EOL] @ abstractmethod def send ( self , routing_key , serialized_tracing_data ) : [EOL] [docstring] [EOL] [EOL] @ abstractmethod def broadcast ( self , serialized_tracing_data ) : [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.bytes$ 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.bytes$ 0 0 0 0 0
from typing import Dict , List [EOL] import builtins [EOL] import context [EOL] import typing [EOL] import uuid [EOL] from __future__ import absolute_import [EOL] [EOL] import uuid [EOL] from typing import Dict , NamedTuple [EOL] from uuid import UUID [EOL] [EOL] from opentracing import SpanContextCorruptedException [EOL] [EOL] from tracent . eventmodel . tracebuilder import EventReference [EOL] from . context import SpanContext [EOL] from . propagator import Propagator [EOL] [EOL] [EOL] class HeaderNames ( NamedTuple ) : [EOL] traceparent = [string] [EOL] tracestate = [string] [EOL] [EOL] [EOL] class W3CPropagator ( Propagator ) : [EOL] [docstring] [EOL] [EOL] field_separator = [string] [EOL] [EOL] def inject ( self , span_context , carrier ) : [EOL] carrier [ HeaderNames . traceparent ] = self . field_separator . join ( [ [string] , span_context . event_reference . trace_id . hex , span_context . event_reference . event_id . hex ( ) , [string] , ] ) [EOL] [EOL] def extract ( self , carrier ) : [comment] [EOL] fields = carrier [ HeaderNames . traceparent ] . split ( self . field_separator ) [EOL] try : [EOL] version_str , trace_id_str , parent_id_str , flags_str = fields [EOL] except ValueError : [EOL] raise SpanContextCorruptedException ( ) [EOL] else : [EOL] try : [EOL] trace_id = UUID ( hex = trace_id_str ) [EOL] except ValueError : [EOL] raise SpanContextCorruptedException ( ) [EOL] if trace_id . variant != uuid . RFC_4122 or trace_id . version != [number] : [EOL] raise SpanContextCorruptedException ( ) [EOL] try : [EOL] parent_id = bytes . fromhex ( parent_id_str ) [EOL] version = ord ( bytes . fromhex ( version_str ) ) [EOL] except ValueError : [EOL] raise SpanContextCorruptedException ( ) [EOL] if version == [number] : [EOL] raise SpanContextCorruptedException ( ) [EOL] [EOL] return SpanContext ( event_reference = EventReference ( trace_id = trace_id , event_id = parent_id , eu_id = None ) , baggage = SpanContext . EMPTY_BAGGAGE , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $context.SpanContext$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $context.SpanContext$ 0 0 0 0 0 0 0 $context.SpanContext$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $context.SpanContext$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $uuid.UUID$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $uuid.UUID$ 0 0 0 0 0 0 0 $uuid.UUID$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $uuid.UUID$ 0 $uuid.UUID$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] import context [EOL] import uuid [EOL] from __future__ import absolute_import [EOL] [EOL] import uuid [EOL] from uuid import UUID [EOL] [EOL] from . context import SpanContext [EOL] from . propagator import Propagator [EOL] [EOL] from opentracing import InvalidCarrierException [EOL] from opentracing import SpanContextCorruptedException [EOL] [EOL] from tracent . eventmodel . tracebuilder import EventReference [EOL] [EOL] _BINARY_FORMAT_LENGTH = [number] [EOL] [EOL] [EOL] class SimpleBinaryPropagator ( Propagator ) : [EOL] [docstring] [EOL] [EOL] def inject ( self , span_context , carrier ) : [EOL] [EOL] if type ( carrier ) is not bytearray : [EOL] raise InvalidCarrierException ( ) [EOL] [EOL] carrier . extend ( [string] ) [comment] [EOL] carrier . extend ( span_context . event_reference . trace_id . bytes ) [EOL] carrier . extend ( span_context . event_reference . event_id ) [EOL] carrier . extend ( [string] ) [comment] [EOL] [EOL] def extract ( self , carrier ) : [EOL] [EOL] if type ( carrier ) is not memoryview : [EOL] raise InvalidCarrierException ( ) [EOL] [EOL] if len ( carrier ) < _BINARY_FORMAT_LENGTH : [EOL] raise SpanContextCorruptedException ( ) [EOL] [EOL] try : [EOL] version = carrier [ [number] ] [EOL] trace_id_bytes = bytes ( carrier [ [number] : [number] ] ) [EOL] parent_id = bytes ( carrier [ [number] : [number] ] ) [EOL] [comment] [EOL] except ( IndexError , ) : [EOL] raise SpanContextCorruptedException ( ) [EOL] else : [EOL] if version == [number] : [EOL] raise SpanContextCorruptedException ( ) [EOL] try : [EOL] trace_id = UUID ( bytes = trace_id_bytes ) [EOL] except ValueError : [EOL] raise SpanContextCorruptedException ( ) [EOL] if trace_id . variant != uuid . RFC_4122 or trace_id . version != [number] : [EOL] raise SpanContextCorruptedException ( ) [EOL] [EOL] return SpanContext ( event_reference = EventReference ( trace_id = trace_id , event_id = parent_id , eu_id = None ) , baggage = SpanContext . EMPTY_BAGGAGE , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $context.SpanContext$ 0 $builtins.bytearray$ 0 0 0 0 0 0 0 $builtins.bytearray$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytearray$ 0 0 0 0 0 0 0 $builtins.bytearray$ 0 0 0 $context.SpanContext$ 0 0 0 0 0 0 0 0 $builtins.bytearray$ 0 0 0 $context.SpanContext$ 0 0 0 0 0 0 $builtins.bytearray$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.memoryview$ 0 0 0 0 0 0 0 $builtins.memoryview$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.memoryview$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.memoryview$ 0 0 0 0 $builtins.bytes$ 0 0 0 $builtins.memoryview$ 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 $builtins.memoryview$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $uuid.UUID$ 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 $uuid.UUID$ 0 0 0 0 0 0 0 $uuid.UUID$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $uuid.UUID$ 0 $uuid.UUID$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict [EOL] import builtins [EOL] import typing [EOL] import tracent [EOL] from __future__ import absolute_import [EOL] [EOL] from typing import Dict [EOL] [EOL] import opentracing [EOL] [EOL] from tracent . eventmodel . tracebuilder import EventReference [EOL] [EOL] [EOL] class SpanContext ( opentracing . SpanContext ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , event_reference , baggage = opentracing . SpanContext . EMPTY_BAGGAGE ) : [EOL] self . event_reference = event_reference [EOL] self . _baggage = baggage [EOL] [EOL] @ property def baggage ( self ) : [EOL] return self . _baggage [EOL] [EOL] def with_baggage_item ( self , key , value ) : [EOL] new_baggage = self . _baggage . copy ( ) [EOL] new_baggage [ key ] = value [EOL] return SpanContext ( event_reference = self . event_reference , baggage = new_baggage ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tracent.eventmodel.tracebuilder.EventReference$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $tracent.eventmodel.tracebuilder.EventReference$ 0 $tracent.eventmodel.tracebuilder.EventReference$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0
[EOL] from typing import Any [EOL] import context [EOL] import typing [EOL] from abc import ABCMeta , abstractmethod [EOL] from typing import Any [EOL] import six [EOL] [EOL] from . context import SpanContext [EOL] [EOL] [EOL] class Propagator ( six . with_metaclass ( ABCMeta , object ) ) : [EOL] [EOL] @ abstractmethod def inject ( self , span_context , carrier ) : [EOL] pass [EOL] [EOL] @ abstractmethod def extract ( self , carrier ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $context.SpanContext$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $context.SpanContext$ 0 0 0 0 0 0 0 0 0
from . tracer import EventBasedTracer as Tracer [comment] [EOL]	0 0 0 0 0 0 0 0 0
	0
from typing import Dict [EOL] import builtins [EOL] import typing [EOL] import tracent_eye [EOL] import trace_diagram [EOL] from typing import Dict [EOL] [EOL] from . trace_diagram import ( DiagramVisitor , Point , TraceDiagram , LifeLine , Head , Foot , Spine , Vertex , Destruction , _BaseEdge , Activation , Edge ) [EOL] [EOL] [EOL] class LayoutGenerator ( DiagramVisitor ) : [EOL] [EOL] life_line_displacement = Point ( [number] , [number] ) [comment] [EOL] origin_displacement = Point ( [number] , [number] ) [EOL] directed_scale = ... [EOL] last_vertex_by_life_line = ... [EOL] [EOL] def __init__ ( self ) : [EOL] self . num_life_lines = [number] [EOL] self . last_vertex_by_life_line = dict ( ) [EOL] [EOL] def visit_trace_diagram ( self , de ) : [EOL] de . position = Point ( [number] , [number] ) [EOL] self . directed_scale = Point ( [number] , de . time_scale ) [EOL] [EOL] def visit_life_line ( self , de ) : [EOL] de . position = ( de . trace_diagram . position + self . origin_displacement + self . life_line_displacement * self . num_life_lines ) [EOL] de . time_axes_origin = self . origin_displacement + de . position [EOL] self . num_life_lines += [number] [EOL] [EOL] def visit_head ( self , de ) : [EOL] de . position = de . life_line . position [EOL] [EOL] def visit_vertex ( self , de ) : [EOL] de . position = ( de . life_line . time_axes_origin + self . directed_scale * de . time_offset ) [EOL] try : [EOL] last_vertex = self . last_vertex_by_life_line [ de . life_line ] [EOL] except KeyError : [EOL] self . last_vertex_by_life_line [ de . life_line ] = de [EOL] else : [EOL] if de . time_offset > last_vertex . time_offset : [EOL] self . last_vertex_by_life_line [ de . life_line ] = de [EOL] [EOL] def visit_destruction ( self , de ) : [EOL] return self . visit_vertex ( de ) [EOL] [EOL] def visit_activation ( self , de ) : [EOL] self . _visit_base_edge ( de ) [EOL] [EOL] def visit_foot ( self , de ) : [EOL] try : [EOL] last_vertex = self . last_vertex_by_life_line [ de . life_line ] [EOL] except KeyError : [EOL] last_vertex_position = de . life_line . time_axes_origin [EOL] else : [EOL] last_vertex_position = last_vertex . position [EOL] de . position = last_vertex_position + self . origin_displacement [EOL] [EOL] def visit_spine ( self , de ) : [EOL] de . position = de . life_line . head . position [EOL] de . end_position = de . life_line . foot . position [EOL] [EOL] def visit_edge ( self , de ) : [EOL] self . _visit_base_edge ( de ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] @ staticmethod def _visit_base_edge ( de ) : [EOL] de . position = de . fro . position [EOL] de . end_position = de . to . position [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $trace_diagram.Point$ 0 0 0 $typing.Dict[trace_diagram.LifeLine,trace_diagram.Vertex]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tracent_eye.trace_diagram.Point$ 0 0 0 0 0 $tracent_eye.trace_diagram.Point$ 0 0 0 $tracent_eye.trace_diagram.Point$ 0 0 0 0 0 $tracent_eye.trace_diagram.Point$ 0 0
from typing import TypeVar , Tuple , List , Type , Any [EOL] import builtins [EOL] import typing [EOL] import svgwrite [EOL] import tracent_eye [EOL] import trace_diagram [EOL] import SVGRenderer [EOL] from abc import ABC , abstractmethod , ABCMeta [EOL] from typing import Dict , Type , TypeVar , Tuple , Callable , List [EOL] [EOL] from svgwrite import Drawing [EOL] from svgwrite . base import BaseElement [EOL] from svgwrite . container import Symbol , Group [EOL] [EOL] from tracent import TagDict [EOL] from . trace_diagram import ( DiagramVisitor , TraceDiagram , LifeLine , Head , Foot , Spine , Vertex , Destruction , Activation , Edge , Point , DiagramElement ) [EOL] [EOL] [EOL] class MockFont ( object ) : [EOL] [EOL] def __init__ ( self , row_distance , glyph_width , horizontal_margin , vertical_margin , vertical_offset ) : [EOL] [docstring] [EOL] self . row_distance , self . glyph_width , self . horizontal_margin = row_distance , glyph_width , horizontal_margin , [EOL] self . vertical_margin , self . vertical_offset = vertical_margin , vertical_offset [EOL] [EOL] def get_bounding_box ( self , lines ) : [EOL] [docstring] [EOL] num_lines = len ( lines ) [EOL] num_glyphs = max ( len ( line ) for line in lines ) if lines else [number] [EOL] width = ( num_glyphs * self . glyph_width + self . horizontal_margin ) * self . row_distance [EOL] height = ( num_lines + self . vertical_margin ) * self . row_distance [EOL] text_offset = Point ( [number] * width , self . vertical_offset * self . row_distance ) [EOL] return ( text_offset , ( int ( width ) , int ( height ) ) , int ( self . row_distance ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] mock_font = MockFont ( row_distance = [number] , glyph_width = [number] , horizontal_margin = [number] , vertical_margin = [number] , vertical_offset = - [number] ) [EOL] [EOL] [EOL] class Shape ( ABC ) : [EOL] [docstring] [EOL] _drawing = ... [EOL] _g = ... [EOL] [EOL] def __init__ ( self , drawing , g ) : [EOL] [docstring] [EOL] self . _drawing = drawing [EOL] self . _g = g [EOL] [EOL] [EOL] class PrebuiltShape ( Shape ) : [EOL] def __init__ ( self , drawing , g ) : [EOL] [docstring] [EOL] super ( ) . __init__ ( drawing , g ) [EOL] self . _drawing . defs . add ( self . _pre_build ( ) ) [EOL] [EOL] @ abstractmethod def _pre_build ( self ) : pass [EOL] [EOL] [EOL] class DotLikeShape ( PrebuiltShape ) : [EOL] [docstring] [EOL] [EOL] def __call__ ( self , de ) : [EOL] [docstring] [EOL] lines = self . _get_text_lines ( de ) [EOL] text_offset , bb_size , row_distance = mock_font . get_bounding_box ( lines ) [EOL] bb_insert = self . _align_bb ( de . position , bb_size ) [EOL] be = self . _build_shape ( lines , bb_insert , bb_size , text_offset , row_distance ) [EOL] self . _g . add ( be ) [EOL] return be [EOL] [EOL] @ staticmethod def _get_text_lines ( de ) : [EOL] [docstring] [EOL] return list ( ) [EOL] [EOL] @ staticmethod @ abstractmethod def _align_bb ( position , size ) : [EOL] pass [EOL] [EOL] @ abstractmethod def _build_shape ( self , lines , bb_insert , bb_size , text_offset , row_distance ) : [EOL] pass [EOL] [EOL] [EOL] class WithTags ( DotLikeShape , ABC ) : [EOL] @ staticmethod def _get_text_lines ( de ) : [EOL] return [ [string] . format ( k , v ) for k , v in de . tags . items ( ) ] [EOL] [EOL] [EOL] class SymbolBasedShapeBuilder ( DotLikeShape , ABC ) : [EOL] _symbol = ... [EOL] [EOL] def _pre_build ( self ) : [EOL] self . _symbol = self . _drawing . symbol ( ) [EOL] self . _build_symbol ( ) [EOL] return self . _symbol [EOL] [EOL] @ abstractmethod def _build_symbol ( self ) : pass [EOL] [EOL] def _build_shape ( self , lines , bb_insert , bb_size , text_offset , row_distance ) : [EOL] width , height = bb_size [EOL] text_insert = bb_insert + text_offset [EOL] g = self . _drawing . g ( ) [EOL] g . add ( self . _drawing . use ( self . _symbol , x = bb_insert . x , y = bb_insert . y , width = width , height = height ) ) [EOL] text = self . _drawing . text ( [string] , insert = text_insert , ** { [string] : [string] } ) [EOL] for line in lines : [EOL] text . add ( self . _drawing . tspan ( line , x = [ text_insert . x ] , dy = [ row_distance ] ) ) [EOL] self . _drawing . add ( text ) [EOL] g . add ( text ) [EOL] return g [EOL] [EOL] [EOL] class Rectangle ( SymbolBasedShapeBuilder , ABC ) : [EOL] def __init__ ( self , drawing , g , size ) : [EOL] self . _size = tuple ( map ( lambda x : int ( x * mock_font . row_distance ) , size ) ) [EOL] super ( ) . __init__ ( drawing , g ) [EOL] [EOL] def _build_symbol ( self ) : [EOL] self . _symbol . add ( self . _drawing . rect ( insert = ( [number] , [number] ) , size = self . _size , ) ) [EOL] self . _symbol . viewbox ( [number] , [number] , * self . _size ) [EOL] self . _symbol . stretch ( ) [EOL] [EOL] [EOL] class Circle ( SymbolBasedShapeBuilder , ABC ) : [EOL] def __init__ ( self , drawing , g , radius ) : [EOL] self . _radius = int ( radius * mock_font . row_distance ) [EOL] super ( ) . __init__ ( drawing , g ) [EOL] [EOL] def _build_symbol ( self ) : [EOL] diameter = [number] * self . _radius [EOL] self . _symbol . add ( self . _drawing . circle ( center = ( self . _radius , self . _radius ) , r = self . _radius , ) ) [EOL] self . _symbol . viewbox ( [number] , [number] , diameter , diameter ) [EOL] [EOL] [EOL] class XCross ( SymbolBasedShapeBuilder , ABC ) : [EOL] def __init__ ( self , drawing , g , size ) : [EOL] self . _size = tuple ( map ( lambda x : int ( x * mock_font . row_distance ) , size ) ) [EOL] super ( ) . __init__ ( drawing , g ) [EOL] [EOL] def _build_symbol ( self ) : [EOL] width , height = self . _size [EOL] self . _symbol . add ( self . _drawing . line ( start = ( [number] , [number] ) , end = self . _size , ) ) [EOL] self . _symbol . add ( self . _drawing . line ( start = ( [number] , height ) , end = ( width , [number] ) , ) ) [EOL] self . _symbol . viewbox ( [number] , [number] , width , height ) [EOL] [EOL] [EOL] [comment] [EOL] class AlignTopMiddle ( DotLikeShape , ABC ) : [EOL] @ staticmethod def _align_bb ( position , size ) : [EOL] [docstring] [EOL] width , height = size [EOL] return Point ( position . x - width / [number] , position . y ) [EOL] [EOL] [EOL] class AlignBottomMiddle ( DotLikeShape , ABC ) : [EOL] @ staticmethod def _align_bb ( position , size ) : [EOL] [EOL] [docstring] [EOL] width , height = size [EOL] return Point ( position . x - width / [number] , position . y - height ) [EOL] [EOL] [EOL] class AlignCenterMiddle ( DotLikeShape , ABC ) : [EOL] @ staticmethod def _align_bb ( position , size ) : [EOL] [docstring] [EOL] width , height = size [EOL] return Point ( position . x - width / [number] , position . y - height / [number] ) [EOL] [EOL] [EOL] class AlignCenterLeft ( DotLikeShape , ABC ) : [EOL] @ staticmethod def _align_bb ( position , size ) : [EOL] [docstring] [EOL] width , height = size [EOL] return Point ( position . x , position . y - height / [number] ) [EOL] [EOL] [EOL] class AlignCenterRight ( DotLikeShape , ABC ) : [EOL] @ staticmethod def _align_bb ( position , size ) : [EOL] [docstring] [EOL] width , height = size [EOL] return Point ( position . x - width , position . y - height / [number] ) [EOL] [EOL] [EOL] class LineLikeShape ( Shape ) : [EOL] [docstring] [EOL] [EOL] def __call__ ( self , start , end ) : [EOL] be = self . _drawing . line ( start = start , end = end ) [EOL] self . _g . add ( be ) [EOL] return be [EOL] [EOL] [EOL] class ArrowLikeShape ( PrebuiltShape ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] _arrow_width = ... [EOL] _arrow_height = ... [EOL] _arrow_color = ... [EOL] [EOL] def _pre_build ( self ) : [EOL] size = self . _arrow_width , self . _arrow_height [EOL] self . _arrow = self . _drawing . marker ( orient = [string] , size = size , markerUnits = [string] , insert = ( [number] , [number] ) , ) [EOL] self . _arrow . viewbox ( [number] , [number] , [number] , [number] ) [EOL] self . _arrow . stretch ( ) [EOL] self . _build_arrow ( ) [EOL] return self . _arrow [EOL] [EOL] [comment] [EOL] def _build_arrow ( self ) : [EOL] self . _arrow . add ( self . _drawing . path ( d = [string] , fill = self . _arrow_color ) ) [EOL] [EOL] def __call__ ( self , start , end ) : [EOL] vector = end - start [EOL] length = abs ( vector ) [EOL] arrow_length = self . _g [ [string] ] * self . _arrow_width [EOL] line_end = start + vector * ( ( length - arrow_length ) / length ) [EOL] be = self . _drawing . line ( start = start , end = line_end , marker_end = self . _arrow . get_funciri ( ) ) [EOL] self . _g . add ( be ) [EOL] return be [EOL] [EOL] [EOL] class ActivationArrow ( ArrowLikeShape ) : [EOL] _arrow_width = [number] [EOL] _arrow_height = [number] [EOL] _arrow_color = [string] [EOL] [EOL] [EOL] class EdgeArrow ( ArrowLikeShape ) : [EOL] _arrow_width = [number] [EOL] _arrow_height = [number] [EOL] _arrow_color = [string] [EOL] [EOL] [EOL] class SymbolSet ( ABC ) : [EOL] [docstring] [EOL] _head = ... [EOL] _foot = ... [EOL] _vertex = ... [EOL] _destruction = ... [EOL] _activation = ... [EOL] _spine = ... [EOL] _edge = ... [EOL] [EOL] _head_attributes = ... [EOL] _foot_attributes = ... [EOL] _vertex_attributes = ... [EOL] _destruction_attributes = ... [EOL] _activation_attributes = ... [EOL] _spine_attributes = ... [EOL] _edge_attributes = ... [EOL] [EOL] def _make_builder ( self , name , bases , group , ** kwargs ) : [EOL] return ABCMeta ( name , bases , { } ) ( self . _drawing , group ( ) , ** kwargs ) [EOL] [EOL] def __init__ ( self , drawing ) : [EOL] self . _drawing = drawing [EOL] self . _vertex = self . _make_builder ( [string] , ( Circle , AlignCenterMiddle ) , self . vertex_group , radius = [number] ) [EOL] self . _destruction = self . _make_builder ( [string] , ( XCross , AlignCenterMiddle ) , self . destruction_group , size = ( [number] , [number] ) ) [EOL] self . _spine = LineLikeShape ( self . _drawing , self . spine_group ( ) ) [EOL] self . _activation = ActivationArrow ( self . _drawing , self . activation_group ( ) ) [EOL] self . _edge = EdgeArrow ( self . _drawing , self . edge_group ( ) ) [EOL] [EOL] @ property def head ( self ) : [EOL] [docstring] [EOL] return self . _head [EOL] [EOL] @ property def foot ( self ) : [EOL] [docstring] [EOL] return self . _foot [EOL] [EOL] @ property def vertex ( self ) : [EOL] [docstring] [EOL] return self . _vertex [EOL] [EOL] @ property def destruction ( self ) : [EOL] [docstring] [EOL] return self . _destruction [EOL] [EOL] @ property def activation ( self ) : [EOL] [docstring] [EOL] return self . _activation [EOL] [EOL] @ property def spine ( self ) : [EOL] [docstring] [EOL] return self . _spine [EOL] [EOL] @ property def edge ( self ) : [EOL] [docstring] [EOL] return self . _edge [EOL] [EOL] def head_group ( self ) : [EOL] g = self . _drawing . g ( ** self . _head_attributes ) [EOL] self . _drawing . add ( g ) [EOL] return g [EOL] [EOL] def foot_group ( self ) : [EOL] g = self . _drawing . g ( ** self . _foot_attributes ) [EOL] self . _drawing . add ( g ) [EOL] return g [EOL] [EOL] def vertex_group ( self ) : [EOL] g = self . _drawing . g ( ** self . _vertex_attributes ) [EOL] self . _drawing . add ( g ) [EOL] return g [EOL] [EOL] def destruction_group ( self ) : [EOL] g = self . _drawing . g ( ** self . _destruction_attributes ) [EOL] self . _drawing . add ( g ) [EOL] return g [EOL] [EOL] def activation_group ( self ) : [EOL] g = self . _drawing . g ( ** self . _activation_attributes ) [EOL] self . _drawing . add ( g ) [EOL] return g [EOL] [EOL] def spine_group ( self ) : [EOL] g = self . _drawing . g ( ** self . _spine_attributes ) [EOL] self . _drawing . add ( g ) [EOL] return g [EOL] [EOL] def edge_group ( self ) : [EOL] g = self . _drawing . g ( ** self . _edge_attributes ) [EOL] self . _drawing . add ( g ) [EOL] return g [EOL] [EOL] [EOL] [comment] [EOL] class VerticalSymbols ( SymbolSet ) : [EOL] [EOL] head_size = ( [number] , [number] ) [EOL] foot_size = ( [number] , [number] ) [EOL] vertex_radius = [number] [EOL] [EOL] def __init__ ( self , drawing ) : [EOL] super ( ) . __init__ ( drawing ) [EOL] self . _head = self . _make_builder ( [string] , ( Rectangle , AlignBottomMiddle , WithTags ) , self . head_group , size = ( [number] , [number] ) ) [EOL] self . _foot = self . _make_builder ( [string] , ( Rectangle , AlignTopMiddle , WithTags ) , self . foot_group , size = ( [number] , [number] ) ) [EOL] [EOL] [EOL] class SimpleVerticalSymbols ( VerticalSymbols ) : [EOL] [EOL] def __init__ ( self , drawing ) : [EOL] self . _head_attributes = dict ( fill = [string] , stroke = [string] , stroke_width = [number] ) [EOL] self . _foot_attributes = dict ( fill = [string] , stroke = [string] , stroke_width = [number] ) [EOL] self . _vertex_attributes = dict ( fill = [string] , stroke = [string] , stroke_width = [number] ) [EOL] self . _destruction_attributes = dict ( stroke = [string] , stroke_width = [number] ) [EOL] self . _activation_attributes = dict ( stroke = [string] , stroke_width = [number] ) [EOL] self . _spine_attributes = dict ( stroke = [string] , stroke_width = [number] ) [EOL] self . _edge_attributes = dict ( stroke = [string] , stroke_width = [number] ) [EOL] super ( ) . __init__ ( drawing ) [EOL] [EOL] [EOL] class SVGRenderer ( DiagramVisitor ) : [EOL] S = TypeVar ( [string] , bound = SymbolSet ) [EOL] [EOL] def __init__ ( self , filename , symbol_set ) : [EOL] self . _drawing = Drawing ( filename = filename , debug = True ) [EOL] self . _symbols = symbol_set ( self . _drawing ) [EOL] [EOL] def visit_trace_diagram ( self , de ) : [EOL] [comment] [EOL] symbols = self . _symbols [EOL] for shape_builder in ( symbols . spine , symbols . head , symbols . foot , symbols . activation , symbols . edge , symbols . vertex , symbols . destruction ) : [EOL] self . _drawing . add ( shape_builder . _g ) [EOL] [EOL] def visit_life_line ( self , de ) : [EOL] pass [EOL] [EOL] def visit_head ( self , head ) : [EOL] self . _symbols . head ( head ) [EOL] [EOL] def visit_vertex ( self , de ) : [EOL] self . _symbols . vertex ( de ) [EOL] [EOL] def visit_destruction ( self , de ) : [EOL] self . _symbols . destruction ( de ) [EOL] [EOL] def visit_activation ( self , de ) : [EOL] self . _symbols . activation ( de . position , de . end_position ) [EOL] [EOL] def visit_foot ( self , de ) : [EOL] self . _symbols . foot ( de ) [EOL] [EOL] def visit_spine ( self , de ) : [EOL] self . _symbols . spine ( de . position , de . end_position ) [EOL] [EOL] def visit_edge ( self , de ) : [EOL] self . _symbols . edge ( de . position , de . end_position ) [EOL] [EOL] @ property def drawing ( self ) : return self . _drawing [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $svgwrite.Drawing$ 0 0 0 $svgwrite.container.Group$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $svgwrite.container.Symbolbuiltins.float$ 0 0 0 $builtins.float$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $DotLikeShape$ 0 0 0 $DotLikeShape$ 0 0 0 $DotLikeShape$ 0 0 0 $DotLikeShape$ 0 0 0 $ArrowLikeShape$ 0 0 0 $LineLikeShape$ 0 0 0 $ArrowLikeShape$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.Dict[builtins.str,builtins.strbuiltins.str$ 0 $typing.Type[SVGRenderer.S]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[SVGRenderer.S]$ 0 0 0 0 0 0 0 0 0 0 0 0 $trace_diagram.TraceDiagram$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $trace_diagram.LifeLine$ 0 0 0 0 0 0 0 0 0 0 0 $trace_diagram.Head$ 0 0 0 0 0 0 0 $trace_diagram.Head$ 0 $trace_diagram.Head$ 0 0 0 0 0 0 0 0 $trace_diagram.Vertex$ 0 0 0 0 0 0 0 0 0 $trace_diagram.Vertex$ 0 0 0 0 0 0 0 0 $trace_diagram.Destruction$ 0 0 0 0 0 0 0 0 0 $trace_diagram.Destruction$ 0 0 0 0 0 0 0 0 $trace_diagram.Activation$ 0 0 0 0 0 0 0 0 0 $trace_diagram.Activation$ 0 0 0 $trace_diagram.Activation$ 0 0 0 0 0 0 0 0 0 0 $trace_diagram.Foot$ 0 0 0 0 0 0 0 0 0 $trace_diagram.Foot$ 0 0 0 0 0 0 0 0 $trace_diagram.Spine$ 0 0 0 0 0 0 0 0 0 $trace_diagram.Spine$ 0 0 0 $trace_diagram.Spine$ 0 0 0 0 0 0 0 0 0 0 $trace_diagram.Edge$ 0 0 0 0 0 0 0 0 0 $trace_diagram.Edge$ 0 0 0 $trace_diagram.Edge$ 0 0 0 0 0 0 0 0 $svgwrite.Drawing$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import tracent_eye [EOL] import unittest [EOL] [EOL] from tracent_eye . layout_generator import LayoutGenerator [EOL] from tracent_eye . svg_renderer import SVGRenderer , SimpleVerticalSymbols , mock_font [EOL] from tracent_eye . trace_diagram import ( TraceDiagram , LifeLine , Vertex , Destruction , Activation , Edge ) [EOL] [EOL] [EOL] class TracentEyeTestCase ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . trace_diagram = TraceDiagram ( [number] , [number] ) [EOL] [EOL] def test_simple_diagram ( self ) : [EOL] ll1 = LifeLine ( self . trace_diagram , dict ( name = [string] , host = [string] ) ) [EOL] ll2 = LifeLine ( self . trace_diagram , dict ( name = [string] ) ) [EOL] v1 = Vertex ( ll1 , [number] , { } ) [EOL] v2 = Vertex ( ll1 , [number] , { } ) [EOL] v3 = Vertex ( ll2 , [number] , { } ) [EOL] v4 = Destruction ( ll2 , [number] , { } ) [EOL] v5 = Vertex ( ll1 , [number] , { } ) [EOL] v6 = Destruction ( ll1 , [number] , { } ) [EOL] Activation ( v1 , v2 ) [EOL] Edge ( v2 , v3 ) [EOL] Activation ( v3 , v4 ) [EOL] Edge ( v4 , v5 ) [EOL] Activation ( v5 , v6 ) [EOL] self . trace_diagram . accept ( LayoutGenerator ( ) ) [EOL] renderer = SVGRenderer ( [string] , SimpleVerticalSymbols ) [EOL] self . trace_diagram . accept ( renderer ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] renderer . _drawing . save ( True ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tracent_eye.trace_diagram.TraceDiagram$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tracent_eye.trace_diagram.LifeLine$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tracent_eye.trace_diagram.LifeLine$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tracent_eye.trace_diagram.Destruction$ 0 0 0 $tracent_eye.trace_diagram.LifeLine$ 0 0 0 0 0 0 0 $tracent_eye.trace_diagram.Destruction$ 0 0 0 $tracent_eye.trace_diagram.LifeLine$ 0 0 0 0 0 0 0 $tracent_eye.trace_diagram.Destruction$ 0 0 0 $tracent_eye.trace_diagram.LifeLine$ 0 0 0 0 0 0 0 $tracent_eye.trace_diagram.Destruction$ 0 0 0 $tracent_eye.trace_diagram.LifeLine$ 0 0 0 0 0 0 0 $tracent_eye.trace_diagram.Destruction$ 0 0 0 $tracent_eye.trace_diagram.LifeLine$ 0 0 0 0 0 0 0 $tracent_eye.trace_diagram.Destruction$ 0 0 0 $tracent_eye.trace_diagram.LifeLine$ 0 0 0 0 0 0 0 0 0 $tracent_eye.trace_diagram.Destruction$ 0 $tracent_eye.trace_diagram.Destruction$ 0 0 0 0 $tracent_eye.trace_diagram.Destruction$ 0 $tracent_eye.trace_diagram.Destruction$ 0 0 0 0 $tracent_eye.trace_diagram.Destruction$ 0 $tracent_eye.trace_diagram.Destruction$ 0 0 0 0 $tracent_eye.trace_diagram.Destruction$ 0 $tracent_eye.trace_diagram.Destruction$ 0 0 0 0 $tracent_eye.trace_diagram.Destruction$ 0 $tracent_eye.trace_diagram.Destruction$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tracent_eye.svg_renderer.SVGRenderer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tracent_eye.svg_renderer.SVGRenderer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tracent_eye.svg_renderer.SVGRenderer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0