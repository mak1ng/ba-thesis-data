import builtins [EOL] from typing import List , Any , Type [EOL] import logger [EOL] import typing [EOL] import logging [EOL] import logging [EOL] import logging . handlers [EOL] import sys [EOL] import curses [EOL] [EOL] __all__ = [ [string] ] [EOL] [EOL] [EOL] def _stderr_supports_color ( ) : [EOL] try : [EOL] if hasattr ( sys . stderr , [string] ) and sys . stderr . isatty ( ) : [EOL] if curses : [EOL] curses . setupterm ( ) [EOL] if curses . tigetnum ( [string] ) > [number] : [EOL] return True [EOL] except Exception : [EOL] [comment] [EOL] [comment] [EOL] pass [EOL] return False [EOL] [EOL] [EOL] class LogFormatter ( logging . Formatter ) : [EOL] [EOL] DEFAULT_FORMAT = ( [string] [string] ) [EOL] DEFAULT_DATE_FORMAT = [string] [EOL] DEFAULT_COLORS = { logging . DEBUG : [number] , logging . INFO : [number] , logging . WARNING : [number] , logging . ERROR : [number] , } [EOL] [EOL] def __init__ ( self , fmt = DEFAULT_FORMAT , datefmt = DEFAULT_DATE_FORMAT , style = [string] , color = True , colors = DEFAULT_COLORS , ) : [EOL] [EOL] logging . Formatter . __init__ ( self , datefmt = datefmt ) [EOL] self . _fmt = fmt [EOL] [EOL] self . _colors = { } [EOL] if color and _stderr_supports_color ( ) : [EOL] if curses is not None : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] fg_color = curses . tigetstr ( [string] ) or curses . tigetstr ( [string] ) or [string] [EOL] if ( [number] , [number] ) < sys . version_info < ( [number] , [number] , [number] ) : [EOL] fg_color = str ( fg_color , [string] ) [EOL] [EOL] for levelno , code in colors . items ( ) : [EOL] self . _colors [ levelno ] = str ( curses . tparm ( fg_color , code ) , [string] ) [EOL] self . _normal = str ( curses . tigetstr ( [string] ) , [string] ) [EOL] else : [EOL] [comment] [EOL] [comment] [EOL] for levelno , code in colors . items ( ) : [EOL] self . _colors [ levelno ] = [string] % code [EOL] self . _normal = [string] [EOL] else : [EOL] self . _normal = [string] [EOL] [EOL] def format ( self , record ) : [EOL] try : [EOL] record . message = record . getMessage ( ) [EOL] except Exception as e : [EOL] record . message = [string] % ( e , record . __dict__ ) [EOL] [EOL] record . asctime = self . formatTime ( record , self . datefmt ) [EOL] [EOL] if record . levelno in self . _colors : [EOL] record . color = self . _colors [ record . levelno ] [EOL] record . end_color = self . _normal [EOL] else : [EOL] record . color = record . end_color = [string] [EOL] [EOL] formatted = self . _fmt % record . __dict__ [EOL] [EOL] if record . exc_info : [EOL] if not record . exc_text : [EOL] record . exc_text = self . formatException ( record . exc_info ) [EOL] if record . exc_text : [EOL] lines = [ formatted . rstrip ( ) ] [EOL] lines . extend ( ln for ln in record . exc_text . split ( [string] ) ) [EOL] formatted = [string] . join ( lines ) [EOL] return formatted . replace ( [string] , [string] ) [EOL] [EOL] [EOL] def get_handler ( ) : [EOL] handler = logging . StreamHandler ( ) [EOL] handler . setFormatter ( LogFormatter ( ) ) [EOL] return handler [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] from flask import jsonify [EOL] from werkzeug . http import HTTP_STATUS_CODES [EOL] [EOL] from app import db [EOL] from app . errors import bp [EOL] [EOL] [EOL] def error_response ( status_code , message = None ) : [EOL] payload = { [string] : HTTP_STATUS_CODES . get ( status_code , [string] ) } [EOL] if message : [EOL] payload [ [string] ] = message [EOL] response = jsonify ( payload ) [EOL] response . status_code = status_code [EOL] return response [EOL] [EOL] [EOL] @ bp . app_errorhandler ( [number] ) def bad_request_error ( error ) : [EOL] return error_response ( [number] ) [EOL] [EOL] [EOL] @ bp . app_errorhandler ( [number] ) def not_found_error ( error ) : [EOL] return error_response ( [number] ) [EOL] [EOL] [EOL] @ bp . app_errorhandler ( [number] ) def internal_error ( error ) : [EOL] db . session . rollback ( ) [EOL] return error_response ( [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import flask [EOL] from flask import Blueprint [EOL] [EOL] bp = Blueprint ( [string] , __name__ ) [EOL] [EOL] from app . errors import handlers [comment] [EOL]	0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from flask import request , abort [EOL] from ecies import encrypt , decrypt [EOL] [EOL] from app . main import bp [EOL] [EOL] [EOL] @ bp . route ( [string] , methods = [ [string] ] ) def index ( ) : [EOL] prv = request . form . get ( [string] , [string] ) [EOL] pub = request . form . get ( [string] , [string] ) [EOL] data = request . form . get ( [string] , [string] ) [EOL] if prv and data : [EOL] decrypted = decrypt ( prv , bytes . fromhex ( data ) ) [EOL] return decrypted [EOL] elif pub and data : [EOL] encrypted = encrypt ( pub , data . encode ( ) ) [EOL] return encrypted . hex ( ) [EOL] else : [EOL] abort ( [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import flask [EOL] from flask import Blueprint [EOL] [EOL] bp = Blueprint ( [string] , __name__ ) [EOL] [EOL] from app . main import routes [comment] [EOL]	0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0