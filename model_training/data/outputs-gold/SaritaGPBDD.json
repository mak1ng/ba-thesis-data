from typing import List , Any [EOL] import typing [EOL] from pymongo import MongoClient [EOL] [EOL] [comment] [EOL] client = MongoClient ( [string] ) [EOL] db = client [ [string] ] [EOL] mensajes = db . mensajes [EOL] [EOL] [comment] [EOL] def set_ids ( ) : [EOL] messages__id = list ( mensajes . find ( { } , { [string] : [number] } ) ) [EOL] id_count = [number] [EOL] for m_id in messages__id : [EOL] id = m_id [ [string] ] [EOL] mensajes . update ( { [string] : id } , { [string] : { [string] : id_count } } ) [EOL] id_count += [number] [EOL] [EOL] if __name__ == [string] : [EOL] set_ids ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Literal , Union , Any , List , Dict [EOL] import flask [EOL] import typing [EOL] import typing_extensions [EOL] from flask import Flask , render_template , request , abort , json [EOL] from pymongo import MongoClient [EOL] import pandas as pd [EOL] import matplotlib . pyplot as plt [EOL] import os [EOL] import atexit [EOL] import subprocess [EOL] [EOL] USER_KEYS = [ [string] , [string] , [string] , [string] , [string] ] [EOL] MESS_KEYS = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] uri = [string] [EOL] client = MongoClient ( uri ) [EOL] [comment] [EOL] db = client . get_database ( ) [EOL] [comment] [EOL] usuarios = db . usuarios [EOL] mensajes = db . mensajes [EOL] [EOL] [comment] [EOL] app = Flask ( __name__ ) [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] @ app . route ( [string] ) def get_message ( mid ) : [EOL] messages = list ( mensajes . find ( { [string] : mid } , { } ) ) [EOL] return json . jsonify ( messages ) [EOL] [EOL] [EOL] [comment] [EOL] @ app . route ( [string] ) def get_usermessages ( uid ) : [EOL] final_search = get_search ( ) [EOL] [comment] [EOL] if final_search == [string] : mensajes_iden = list ( mensajes . find ( { [string] : uid } , { [string] : [number] } ) ) [EOL] else : mensajes_iden = list ( mensajes . find ( { [string] : { [string] : final_search } , [string] : uid } , { [string] : [number] } ) ) [EOL] [EOL] return json . jsonify ( mensajes_iden ) [EOL] [EOL] @ app . route ( [string] ) def get_received ( uid ) : [EOL] messages = list ( mensajes . find ( { [string] : uid } , { [string] : [number] , [string] : [number] , [string] : [number] } ) ) [EOL] return json . jsonify ( messages ) [EOL] [EOL] [comment] [EOL] def date_func ( arr ) : [EOL] return arr [ [string] ] [EOL] [EOL] @ app . route ( [string] ) def get_conversation ( uid1 , uid2 ) : [EOL] messages = list ( mensajes . find ( { [string] : [ { [string] : [ { [string] : uid2 } , { [string] : uid1 } ] } , { [string] : [ { [string] : uid1 } , { [string] : uid2 } ] } ] } , { [string] : [number] } ) ) [EOL] messages . sort ( key = date_func ) [EOL] return json . jsonify ( messages ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] def get_search ( ) : [EOL] si_o_si = request . args . get ( [string] ) [EOL] pueden = request . args . get ( [string] ) [EOL] no = request . args . get ( [string] ) [EOL] [EOL] if si_o_si is not None : si_o_si = si_o_si . split ( [string] ) [EOL] if pueden is not None : pueden = pueden . split ( [string] ) [EOL] if no is not None : no = no . split ( [string] ) [EOL] [EOL] final_search = [string] [EOL] if si_o_si is not None and len ( si_o_si ) != [number] : [EOL] final_search += [string] . format ( [string] . join ( si_o_si ) ) [EOL] [EOL] if pueden is not None and len ( pueden ) != [number] : [EOL] final_search += [string] . format ( [string] . join ( pueden ) ) [EOL] [EOL] if no is not None and len ( no ) != [number] : [EOL] final_search += [string] . format ( [string] . join ( no ) ) [EOL] [EOL] return final_search [EOL] [EOL] [comment] [EOL] @ app . route ( [string] ) def get_mensajeidentico ( ) : [EOL] final_search = get_search ( ) [EOL] [comment] [EOL] if final_search == [string] : mensajes_iden = list ( mensajes . find ( { } , { [string] : [number] , [string] : [number] } ) ) [EOL] else : mensajes_iden = list ( mensajes . find ( { [string] : { [string] : final_search } } , { [string] : [number] , [string] : [number] } ) ) [EOL] [comment] [EOL] return json . jsonify ( mensajes_iden ) [EOL] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def create_conversation ( uid1 , uid2 ) : [EOL] [comment] [EOL] data = { key : request . json [ key ] for key in MESS_KEYS } [EOL] count = mensajes . count_documents ( { } ) [EOL] data [ [string] ] = uid1 [EOL] data [ [string] ] = uid2 [EOL] data [ [string] ] = count + [number] [EOL] [EOL] [EOL] [comment] [EOL] result = mensajes . insert_one ( data ) [EOL] [EOL] [comment] [EOL] if (result) : [EOL] message = [string] . format ( uid1 , uid2 ) [EOL] success = True [EOL] else : [EOL] message = [string] [EOL] success = False [EOL] [EOL] [EOL] [comment] [EOL] return json . jsonify ( { [string] : success , [string] : message } ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def delete_message ( mid ) : [EOL] [EOL] [comment] [EOL] mensajes . delete_one ( { [string] : mid } ) [EOL] [EOL] message = f' [string] { mid } [string] ' [EOL] [EOL] [comment] [EOL] return json . jsonify ( { [string] : [string] , [string] : message } ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] @ app . route ( [string] ) def home ( ) : [EOL] return [string] [EOL] [EOL] [comment] [EOL] @ app . route ( [string] ) def plot ( ) : [EOL] [comment] [EOL] users = usuarios . find ( { } , { [string] : [number] } ) [EOL] [EOL] [comment] [EOL] df = pd . DataFrame ( list ( users ) ) . set_index ( [string] ) [EOL] [EOL] [comment] [EOL] df . plot . pie ( y = [string] ) [EOL] [EOL] [comment] [EOL] pth = os . path . join ( [string] , [string] ) [EOL] plt . savefig ( pth ) [EOL] [EOL] [comment] [EOL] return render_template ( [string] ) [EOL] [EOL] [EOL] @ app . route ( [string] ) def get_users ( ) : [EOL] resultados = [ u for u in usuarios . find ( { } , { [string] : [number] } ) ] [EOL] [comment] [EOL] [EOL] return json . jsonify ( resultados ) [EOL] [EOL] [EOL] @ app . route ( [string] ) def get_user ( uid ) : [EOL] users = list ( usuarios . find ( { [string] : uid } , { [string] : [number] } ) ) [EOL] [EOL] return json . jsonify ( users ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def create_user ( ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] data = { key : request . json [ key ] for key in USER_KEYS } [EOL] [EOL] [comment] [EOL] count = usuarios . count_documents ( { } ) [EOL] data [ [string] ] = count + [number] [EOL] [EOL] [comment] [EOL] result = usuarios . insert_one ( data ) [EOL] [EOL] [comment] [EOL] if (result) : [EOL] message = [string] [EOL] success = True [EOL] else : [EOL] message = [string] [EOL] success = False [EOL] [EOL] [comment] [EOL] return json . jsonify ( { [string] : success , [string] : message } ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def delete_user ( uid ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] usuarios . delete_one ( { [string] : uid } ) [EOL] [EOL] message = f' [string] { uid } [string] ' [EOL] [EOL] [comment] [EOL] return json . jsonify ( { [string] : [string] , [string] : message } ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def delete_many_user ( ) : [EOL] [docstring] [EOL] [EOL] if not request . json : [EOL] [comment] [EOL] abort ( [number] ) [comment] [EOL] [EOL] all_uids = request . json [ [string] ] [EOL] [EOL] if not all_uids : [EOL] [comment] [EOL] abort ( [number] ) [comment] [EOL] [EOL] [comment] [EOL] result = usuarios . delete_many ( { [string] : { [string] : all_uids } } ) [EOL] [EOL] [comment] [EOL] message = f'{ result . deleted_count } [string] ' [EOL] [EOL] [comment] [EOL] return json . jsonify ( { [string] : [string] , [string] : message } ) [EOL] [EOL] [EOL] @ app . route ( [string] ) def test ( ) : [EOL] [comment] [EOL] param = request . args . get ( [string] , False ) [EOL] print ( [string] , param ) [EOL] [EOL] [comment] [EOL] param2 = request . headers . get ( [string] , False ) [EOL] print ( [string] , param2 ) [EOL] [EOL] [comment] [EOL] body = request . data [EOL] print ( [string] , body ) [EOL] [EOL] return [string] [EOL] [EOL] [EOL] if os . name == [string] : [EOL] app . run ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0
import flask [EOL] from flask import Flask [EOL] app = Flask ( __name__ ) [EOL] [EOL] @ app . route ( [string] ) def hello ( ) : [EOL] return [string] [EOL] [EOL] if __name__ == [string] : [EOL] app . run ( ) [EOL]	0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0