from typing import Dict , Union , Any , List [EOL] import logging [EOL] import builtins [EOL] import typing [EOL] [docstring] [EOL] [EOL] import json [EOL] import logging [EOL] import os [EOL] [EOL] from botocore . vendored import requests [EOL] [EOL] log_level = os . environ . get ( [string] , [string] ) [EOL] logging . root . setLevel ( logging . getLevelName ( log_level ) ) [comment] [EOL] _logger = logging . getLogger ( __name__ ) [EOL] [EOL] AWS_IP_RANGES_URL = [string] [EOL] [EOL] def _create_sg_rule ( cidr ) : [EOL] [docstring] [EOL] rule = { [string] : cidr , [string] : - [number] , [string] : - [number] , [string] : [string] } [EOL] [EOL] return rule [EOL] [EOL] [EOL] def _get_aws_cidrs ( region , url = AWS_IP_RANGES_URL ) : [EOL] [docstring] [EOL] r = requests . get ( url ) [EOL] cidr_list = [ ] [EOL] for cidr in r . json ( ) . get ( [string] ) : [EOL] if cidr . get ( [string] ) == region : [EOL] cidr_list . append ( cidr . get ( [string] ) ) [EOL] return cidr_list [EOL] [EOL] [EOL] def _get_region_from_event ( event ) : [EOL] [docstring] [EOL] return event . get ( [string] ) [EOL] [EOL] def _get_vpc_id_from_event ( event ) : [EOL] [docstring] [EOL] return event . get ( [string] ) . get ( [string] ) [EOL] [EOL] [EOL] def _make_sg_resource ( vpc_id , sg_rule_list ) : [EOL] [docstring] [EOL] template = { [string] : [string] , [string] : { [string] : vpc_id , [string] : [string] , [string] : sg_rule_list } } [EOL] [EOL] return template [EOL] [EOL] [EOL] def handler ( event , context ) : [EOL] [docstring] [EOL] _logger . debug ( [string] . format ( json . dumps ( event ) ) ) [EOL] [EOL] try : [EOL] region = _get_region_from_event ( event ) [EOL] vpc_id = _get_vpc_id_from_event ( event ) [EOL] [EOL] cidr_list = _get_aws_cidrs ( region ) [EOL] sg_rule_list = [ ] [EOL] for cidr in cidr_list : [EOL] sg_rule_list . append ( _create_sg_rule ( cidr ) ) [EOL] [EOL] fragment = _make_sg_resource ( vpc_id , sg_rule_list ) [EOL] [EOL] except Exception as e : [EOL] return { [string] : event [ [string] ] , [string] : [string] , [string] : event [ [string] ] , } [EOL] [EOL] resp = { [string] : event [ [string] ] , [string] : [string] , [string] : fragment , } [EOL] _logger . debug ( [string] . format ( json . dumps ( resp ) ) ) [EOL] return resp [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0