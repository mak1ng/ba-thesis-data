	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Any , Type , Tuple [EOL] import typing [EOL] import zaya [EOL] from collections import OrderedDict [EOL] [EOL] from allauth . account . adapter import get_adapter [EOL] from django . contrib . auth import authenticate [EOL] from django . core import exceptions [EOL] from django . core . exceptions import ObjectDoesNotExist [EOL] from django . utils . translation import activate , deactivate [EOL] from drf_dynamic_fields import DynamicFieldsMixin [EOL] from phonenumber_field . serializerfields import PhoneNumberField [EOL] [EOL] from rest_auth . models import TokenModel [EOL] from rest_framework import serializers [EOL] from rest_framework . fields import CurrentUserDefault [EOL] [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from . models import User , UserProfile , Cab , Ride , Route , Location [EOL] [EOL] [EOL] class UserDataSerializer ( serializers . Serializer ) : [EOL] phone_number = PhoneNumberField ( required = True ) [EOL] photo = serializers . ReadOnlyField ( ) [EOL] name = serializers . CharField ( required = True ) [EOL] id = serializers . ReadOnlyField ( ) [EOL] is_staff = serializers . BooleanField ( read_only = True ) [EOL] [EOL] def create ( self , validated_data ) : [EOL] user = User ( phone_number = validated_data [ [string] ] , first_name = validated_data [ [string] ] ) [EOL] user . clean ( ) [EOL] user . save ( ) [EOL] [EOL] return user [EOL] [EOL] def update ( self , instance , validated_data ) : [EOL] instance . first_name = validated_data [ [string] ] [EOL] instance . clean ( ) [EOL] instance . save ( ) [EOL] [EOL] [comment] [EOL] profile , created = UserProfile . objects . get_or_create ( user = instance ) [EOL] profile . save ( ) [EOL] [EOL] [EOL] class UserSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = User [EOL] fields = ( [string] , [string] , [string] ) [EOL] [EOL] [EOL] class PhotoUploadSerializer ( serializers . Serializer ) : [EOL] photo = serializers . ImageField ( ) [EOL] user = serializers . PrimaryKeyRelatedField ( queryset = User . objects . all ( ) ) [EOL] [EOL] def create ( self , validated_data ) : [EOL] profile , c = UserProfile . objects . get_or_create ( user = validated_data [ [string] ] ) [EOL] [EOL] profile . photo = validated_data [ [string] ] [EOL] profile . save ( ) [EOL] return profile [EOL] [EOL] [EOL] class CabSerializer ( serializers . Serializer ) : [EOL] owner = UserDataSerializer ( ) [EOL] cab_type = serializers . CharField ( source = [string] , required = True ) [EOL] status = serializers . CharField ( source = [string] , required = True ) [EOL] id = serializers . ReadOnlyField ( ) [EOL] [EOL] class Meta : [EOL] model = Cab [EOL] fields = [string] [EOL] [EOL] [EOL] class VRCUploadSerializer ( serializers . Serializer ) : [EOL] vrc = serializers . FileField ( ) [EOL] Cab = serializers . StringRelatedField ( ) [EOL] [EOL] def create ( self , validated_data ) : [EOL] c = Cab . objects . get ( id = validated_data [ [string] ] ) [EOL] c . vrc = validated_data [ [string] ] [EOL] c . save ( ) [EOL] return c [EOL] [EOL] [EOL] class LocationSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = Location [EOL] fields = [string] [EOL] [EOL] [EOL] class RouteSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = Route [EOL] fields = [string] [EOL] [EOL] [EOL] class RideSerializer ( serializers . ModelSerializer ) : [EOL] type = serializers . CharField ( source = [string] , required = True ) [EOL] status = serializers . CharField ( source = [string] , required = True ) [EOL] route = RouteSerializer ( ) [EOL] cab = CabSerializer ( ) [EOL] passenger = UserDataSerializer ( many = True , required = True ) [EOL] [EOL] driver = UserDataSerializer ( ) [EOL] [EOL] class Meta : [EOL] model = Ride [EOL] fields = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict , Type , Tuple [EOL] import typing [EOL] import zaya [EOL] from django . db import models [EOL] [EOL] [comment] [EOL] from django . db import models [EOL] from django . contrib . auth . models import AbstractUser , UserManager [EOL] from phonenumber_field . modelfields import PhoneNumberField [EOL] from django . core . exceptions import ValidationError , ObjectDoesNotExist [EOL] [EOL] [EOL] class UserType ( object ) : [EOL] DRIVER = [string] [EOL] OWNER = [string] [EOL] PASSENGER = [string] [EOL] [EOL] CHOICES = [ ( DRIVER , [string] ) , ( OWNER , [string] ) , ( PASSENGER , [string] ) ] [EOL] [EOL] [EOL] class CustomUserManager ( UserManager ) : [EOL] def create_superuser ( self , username , phone_number , password , ** kwargs ) : [EOL] extra_fields = { [string] : True , [string] : phone_number } [EOL] return super ( CustomUserManager , self ) . create_superuser ( username , None , password , ** extra_fields ) [EOL] [EOL] [EOL] class User ( AbstractUser ) : [EOL] phone_number = PhoneNumberField ( unique = True ) [EOL] is_active = models . BooleanField ( default = False ) [EOL] created_by = models . ForeignKey ( [string] , blank = True , null = True , related_name = [string] ) [EOL] edited_by = models . ForeignKey ( [string] , blank = True , null = True ) [EOL] created = models . DateTimeField ( auto_now_add = True ) [EOL] edited = models . DateTimeField ( auto_now = True ) [EOL] [EOL] type = models . CharField ( choices = UserType . CHOICES , default = [string] , max_length = [number] ) [EOL] [EOL] REQUIRED_FIELDS = ( [string] , ) [EOL] objects = CustomUserManager ( ) [EOL] [EOL] def clean ( self ) : [EOL] if not self . username : [EOL] [comment] [EOL] self . username = str ( self . phone_number ) [EOL] [EOL] if not self . password : [EOL] self . set_unusable_password ( ) [EOL] [EOL] @ staticmethod def create_user ( ** kwargs ) : [EOL] user = User ( ** kwargs ) [EOL] user . clean ( ) [EOL] user . save ( ) [EOL] return user [EOL] [EOL] @ property def name_prop ( self ) : [EOL] return self . name ( ) [EOL] [EOL] def name ( self ) : [EOL] return str ( self . first_name + [string] + self . last_name ) . strip ( ) [EOL] [EOL] def photo ( self ) : [EOL] try : [EOL] return self . profile . photo . url [EOL] except Exception as e : [EOL] return None [EOL] [EOL] def __str__ ( self ) : [EOL] return str ( self . name ( ) or self . phone_number . __str__ ( ) ) [EOL] [EOL] [EOL] def photo_file_name ( instance , filename ) : [EOL] return [string] + str ( instance . user . pk ) [EOL] [EOL] [EOL] def pan_card_file_name ( instance , filename ) : [EOL] return [string] + str ( instance . user . pk ) [EOL] [EOL] [EOL] def license_file_name ( instance , filename ) : [EOL] return [string] + str ( instance . user . pk ) [EOL] [EOL] [EOL] class UserProfile ( models . Model ) : [EOL] user = models . OneToOneField ( User , on_delete = models . CASCADE , primary_key = True , related_name = [string] ) [EOL] photo = models . ImageField ( upload_to = photo_file_name , null = True , blank = True ) [EOL] pan_card = models . FileField ( upload_to = pan_card_file_name , blank = True , null = True , max_length = [number] ) [EOL] license = models . FileField ( upload_to = license_file_name , blank = True , null = True , max_length = [number] ) [EOL] [EOL] [EOL] [comment] [EOL] class CabType ( object ) : [EOL] SUV = [string] [EOL] SEDAN = [string] [EOL] MINIVAN = [string] [EOL] OTHER = [string] [EOL] [EOL] CHOICES = [ ( SUV , [string] ) , ( SEDAN , [string] ) , ( MINIVAN , [string] ) , ( OTHER , [string] ) ] [EOL] [EOL] [EOL] class CabStatus ( object ) : [EOL] BOOKED = [string] [EOL] UNAVAILABLE = [string] [EOL] AVAILABLE_FOR_SHARING = [string] [EOL] AVAILABLE_FOR_SINGLE = [string] [EOL] [EOL] CHOICES = [ ( BOOKED , [string] ) , ( UNAVAILABLE , [string] ) , ( AVAILABLE_FOR_SHARING , [string] ) , ( AVAILABLE_FOR_SINGLE , [string] ) , ] [EOL] [EOL] [EOL] def vrc_file_name ( instance , filename ) : [EOL] return [string] + str ( instance . owner . pk ) [EOL] [EOL] [EOL] class Cab ( models . Model ) : [EOL] cab_number = models . CharField ( max_length = [number] , unique = True , blank = False , null = False ) [EOL] [comment] [EOL] vrc = models . FileField ( upload_to = vrc_file_name , max_length = [number] , blank = True , null = True ) [EOL] cab_type = models . CharField ( max_length = [number] , choices = CabType . CHOICES , unique = True , blank = False , null = False ) [EOL] status = models . CharField ( max_length = [number] , choices = CabStatus . CHOICES ) [EOL] owner = models . OneToOneField ( User , related_name = [string] , on_delete = models . CASCADE ) [EOL] [EOL] def __str__ ( self ) : [EOL] return str ( self . cab_number ) [EOL] [EOL] [EOL] class LocationType ( object ) : [EOL] SOURCE = [string] [EOL] DESTINATION = [string] [EOL] [EOL] CHOICES = [ ( SOURCE , [string] ) , ( DESTINATION , [string] ) , ] [EOL] [EOL] [EOL] class Location ( models . Model ) : [EOL] type = models . CharField ( max_length = [number] , choices = LocationType . CHOICES , unique = True , blank = False , null = False ) [EOL] latitude = models . FloatField ( blank = True , null = True ) [EOL] longitude = models . FloatField ( blank = True , null = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] + str ( self . latitude ) + [string] + str ( self . longitude ) + [string] [EOL] [EOL] [EOL] class Route ( models . Model ) : [EOL] source = models . OneToOneField ( Location , related_name = [string] , on_delete = models . CASCADE ) [EOL] [EOL] destination = models . OneToOneField ( Location , related_name = [string] , on_delete = models . CASCADE ) [EOL] [EOL] def __str__ ( self ) : [EOL] return str ( self . source ) + [string] + str ( self . destination ) [EOL] [EOL] [EOL] class RideStatus ( object ) : [EOL] COMPLETED = [string] [EOL] IN_PROGRESS = [string] [EOL] BOOKED = [string] [EOL] CANCELED_BY_USER = [string] [EOL] CANCELED_BY_DRIVER = [string] [EOL] [EOL] CHOICES = [ ( COMPLETED , [string] ) , ( BOOKED , [string] ) , ( CANCELED_BY_USER , [string] ) , ( CANCELED_BY_DRIVER , [string] ) , ( IN_PROGRESS , [string] ) , ] [EOL] [EOL] [EOL] class RideType ( object ) : [EOL] SHARING = [string] [EOL] NO_SHARING = [string] [EOL] [EOL] CHOICES = [ ( SHARING , [string] ) , ( NO_SHARING , [string] ) ] [EOL] [EOL] [EOL] class Ride ( models . Model ) : [EOL] route = models . OneToOneField ( Route , related_name = [string] , on_delete = models . CASCADE ) [EOL] type = models . CharField ( max_length = [number] , choices = RideType . CHOICES , unique = True , blank = False , null = False ) [EOL] status = models . CharField ( max_length = [number] , choices = RideStatus . CHOICES , unique = True , blank = False , null = False ) [EOL] cab = models . OneToOneField ( Cab , related_name = [string] , on_delete = models . CASCADE ) [EOL] passenger = models . ManyToManyField ( [string] , related_name = [string] ) [EOL] [EOL] driver = models . OneToOneField ( User , related_name = [string] , on_delete = models . CASCADE ) [EOL] [EOL] def clean ( self ) : [EOL] if not self . driver . type in [ [string] , [string] ] : [EOL] raise ValidationError ( [string] ) [EOL] [EOL] if self . cab . status in [ [string] , [string] ] : [EOL] raise ValidationError ( self . cab . get_status_display ( ) ) [EOL] if self . cab . status not in [ [string] , [string] ] : [EOL] if self . type == [string] : [EOL] if self . cab . status == [string] : [EOL] pass [EOL] else : [EOL] raise ValidationError ( self . cab . get_status_display ( ) ) [EOL] elif self . type == [string] : [EOL] if self . cab . status == [string] : [EOL] pass [EOL] else : [EOL] raise ValidationError ( self . cab . get_status_display ( ) ) [EOL] [EOL] @ staticmethod def get_user_rides ( user ) : [EOL] return Ride . objects . filter ( passenger = user ) [EOL] [EOL] @ staticmethod def get_driver_rides ( user ) : [EOL] return Ride . objects . filter ( driver = user ) [EOL] [EOL] def __str__ ( self ) : [EOL] return str ( self . cab ) + [string] + str ( self . route . source ) + [string] + str ( self . route . destination ) [EOL]	
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class CabConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . conf . urls import url , include [EOL] from django . views . decorators . csrf import csrf_exempt [EOL] from . import views [EOL] urlpatterns = [ url ( [string] , views . UserView . as_view ( ) ) , url ( [string] , views . PhotoUploadView . as_view ( ) ) , url ( [string] , views . CabView . as_view ( ) ) , url ( [string] , views . VRCUploadView . as_view ( ) ) , url ( [string] , views . RideView . as_view ( ) ) , url ( [string] , views . RouteView . as_view ( ) ) , url ( [string] , views . LocationView . as_view ( ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Type , Tuple [EOL] import typing [EOL] import zaya [EOL] from django . contrib import admin [EOL] from . models import * [EOL] from django . contrib . contenttypes . admin import GenericTabularInline [EOL] from django . forms import TextInput , Textarea [EOL] from django . utils . safestring import mark_safe [EOL] from django . db import models [EOL] from django . contrib . sessions . models import Session [EOL] from django . utils import timezone [EOL] from django . contrib . auth . models import Group [EOL] from xml . dom import ValidationErr [EOL] from django import forms [EOL] from django . http import HttpResponseRedirect , HttpResponse [EOL] from django . contrib . auth . admin import UserAdmin [EOL] from django . utils . translation import ugettext , ugettext_lazy as _ [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] class PlainUserForm ( forms . ModelForm ) : [EOL] class Meta : [EOL] model = User [EOL] exclude = ( [string] , [string] ) [EOL] [EOL] [EOL] class CustomUserAdmin ( UserAdmin ) : [EOL] model = User [EOL] search_fields = [ [string] , [string] , [string] ] [EOL] [comment] [EOL] [EOL] add_fieldsets = ( ( None , { [string] : ( [string] , ) , [string] : ( [string] , [string] , [string] ) , } ) , ) [EOL] fieldsets = ( ( None , { [string] : ( [string] , [string] ) } ) , ( _ ( [string] ) , { [string] : ( [string] , [string] , [string] ) } ) , ( _ ( [string] ) , { [string] : ( [string] , [string] ) } ) , ( [string] , { [string] : ( [string] , [string] , [string] , [string] ) } ) ) [EOL] add_form = PlainUserForm [EOL] [EOL] [EOL] class CabAdmin ( admin . ModelAdmin ) : [EOL] model = Cab [EOL] [EOL] [EOL] class RideAdmin ( admin . ModelAdmin ) : [EOL] model = Ride [EOL] [EOL] [EOL] class RouteAdmin ( admin . ModelAdmin ) : [EOL] model = Route [EOL] [EOL] [EOL] class LocationAdmin ( admin . ModelAdmin ) : [EOL] model = Location [EOL] [EOL] [EOL] admin . site . register ( Cab , CabAdmin ) [EOL] admin . site . register ( User , CustomUserAdmin ) [EOL] admin . site . register ( Route , RouteAdmin ) [EOL] admin . site . register ( Ride , RideAdmin ) [EOL] admin . site . register ( Location , LocationAdmin ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Any , Type , Tuple [EOL] import typing [EOL] import zaya [EOL] from django . shortcuts import render [EOL] from django . core . exceptions import ObjectDoesNotExist , PermissionDenied [EOL] from django . core . files . uploadedfile import InMemoryUploadedFile [EOL] from django . db import transaction [EOL] from django . db . models import DateTimeField , Q , Count [EOL] from django . http . response import HttpResponseBadRequest [EOL] from django . shortcuts import render , get_object_or_404 [EOL] from django . template . loader import render_to_string [EOL] from django . utils import timezone [EOL] from django . utils . decorators import method_decorator [EOL] from django . utils . timezone import localtime [EOL] from django . utils . translation import activate , deactivate [EOL] from django . views . decorators . csrf import csrf_exempt [EOL] from phonenumbers import PhoneNumber [EOL] from rest_framework import permissions , routers , viewsets , generics , mixins [EOL] from rest_framework . decorators import list_route , api_view [EOL] from rest_framework . generics import CreateAPIView , ListAPIView , RetrieveAPIView , GenericAPIView , UpdateAPIView , RetrieveUpdateAPIView [EOL] from rest_framework . parsers import MultiPartParser , FormParser [EOL] from rest_framework . permissions import AllowAny , IsAuthenticated , IsAdminUser , SAFE_METHODS , BasePermission [EOL] from rest_framework . response import Response [EOL] from rest_framework . views import APIView [EOL] from django_filters import rest_framework as filters [EOL] import rest_framework . filters [EOL] from . models import User , UserProfile , Cab , Ride , Route , Location [EOL] from . serializers import UserDataSerializer , UserSerializer , PhotoUploadSerializer , CabSerializer , RideSerializer , VRCUploadSerializer , RouteSerializer , LocationSerializer [EOL] from django . http import HttpResponse , Http404 , JsonResponse [EOL] [EOL] [EOL] class IsAdminUserOrReadOnly ( IsAdminUser ) : [EOL] def has_permission ( self , request , view ) : [EOL] if not request . user . is_authenticated : [EOL] return False [EOL] [EOL] is_admin = super ( IsAdminUserOrReadOnly , self ) . has_permission ( request , view ) [EOL] [EOL] return ( request . user and request . user . is_authenticated and request . method in SAFE_METHODS ) or is_admin [EOL] [EOL] [EOL] def get_object_or_exception ( queryset , model , * args , ** kwargs ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] try : [EOL] return queryset . get ( * args , ** kwargs ) [EOL] except ObjectDoesNotExist : [EOL] [comment] [EOL] try : [EOL] model . objects . get ( * args , ** kwargs ) [EOL] raise PermissionDenied ( ) [EOL] except ObjectDoesNotExist : [EOL] raise Http404 ( ) [EOL] [EOL] [EOL] def user_qs ( user ) : [EOL] if user . is_staff : [EOL] return User . objects . all ( ) [EOL] return User . objects . filter ( id = user . id ) [EOL] [EOL] [EOL] [comment] [EOL] class UserView ( RetrieveAPIView , CreateAPIView , generics . UpdateAPIView , ListAPIView ) : [EOL] permission_classes = ( IsAdminUserOrReadOnly , ) [EOL] [EOL] queryset = User . objects . all ( ) [EOL] serializer_class = UserDataSerializer [EOL] [EOL] def get_queryset ( self ) : [EOL] return user_qs ( self . request . user ) [EOL] [EOL] def get_object ( self ) : [EOL] if self . request . query_params . get ( [string] , None ) : [EOL] return get_object_or_exception ( self . get_queryset ( ) , User , phone_number = [string] + self . request . query_params . get ( [string] ) ) [EOL] [EOL] return get_object_or_exception ( self . get_queryset ( ) , User , id = self . kwargs . get ( [string] ) ) [EOL] [EOL] def get ( self , request , * args , ** kwargs ) : [EOL] if not kwargs . get ( [string] , None ) and not request . query_params . get ( [string] , None ) : [EOL] return self . list ( request , * args , ** kwargs ) [EOL] else : [EOL] return self . retrieve ( request , * args , ** kwargs ) [EOL] [EOL] [EOL] class PhotoUploadView ( CreateAPIView ) : [EOL] permission_classes = ( IsAdminUserOrReadOnly , ) [EOL] [EOL] queryset = UserProfile . objects . all ( ) [EOL] serializer_class = PhotoUploadSerializer [EOL] parser_classes = ( MultiPartParser , FormParser , ) [EOL] [EOL] [EOL] class CabView ( ListAPIView , CreateAPIView , RetrieveAPIView , UpdateAPIView ) : [EOL] [EOL] permission_classes = ( IsAdminUserOrReadOnly , ) [EOL] serializer_class = CabSerializer [EOL] [EOL] def get ( self , request , * args , ** kwargs ) : [EOL] if not kwargs . get ( [string] , None ) : [EOL] return self . list ( request , * args , ** kwargs ) [EOL] else : [EOL] return self . retrieve ( request , * args , ** kwargs ) [EOL] [EOL] def get_queryset ( self ) : [EOL] return Cab . objects . all ( ) [EOL] [EOL] [EOL] class VRCUploadView ( CreateAPIView ) : [EOL] permission_classes = ( IsAdminUserOrReadOnly , ) [EOL] [EOL] queryset = Cab . objects . all ( ) [EOL] serializer_class = VRCUploadSerializer [EOL] parser_classes = ( MultiPartParser , FormParser , ) [EOL] [EOL] [EOL] class LocationView ( ListAPIView , CreateAPIView , RetrieveAPIView , UpdateAPIView ) : [EOL] [EOL] permission_classes = ( IsAdminUserOrReadOnly , ) [EOL] serializer_class = LocationSerializer [EOL] [EOL] def get ( self , request , * args , ** kwargs ) : [EOL] if not kwargs . get ( [string] , None ) : [EOL] return self . list ( request , * args , ** kwargs ) [EOL] else : [EOL] return self . retrieve ( request , * args , ** kwargs ) [EOL] [EOL] def get_queryset ( self ) : [EOL] return Location . objects . all ( ) [EOL] [EOL] [EOL] class RouteView ( ListAPIView , CreateAPIView , RetrieveAPIView , UpdateAPIView ) : [EOL] [EOL] permission_classes = ( IsAdminUserOrReadOnly , ) [EOL] serializer_class = RouteSerializer [EOL] [EOL] def get ( self , request , * args , ** kwargs ) : [EOL] if not kwargs . get ( [string] , None ) : [EOL] return self . list ( request , * args , ** kwargs ) [EOL] else : [EOL] return self . retrieve ( request , * args , ** kwargs ) [EOL] [EOL] def get_queryset ( self ) : [EOL] return Route . objects . all ( ) [EOL] [EOL] [EOL] class RideView ( ListAPIView , CreateAPIView , RetrieveAPIView , UpdateAPIView ) : [EOL] [EOL] permission_classes = ( IsAdminUserOrReadOnly , ) [EOL] serializer_class = RideSerializer [EOL] [EOL] def get ( self , request , * args , ** kwargs ) : [EOL] if not kwargs . get ( [string] , None ) : [EOL] return self . list ( request , * args , ** kwargs ) [EOL] else : [EOL] return self . retrieve ( request , * args , ** kwargs ) [EOL] [EOL] def get_queryset ( self ) : [EOL] if self . request . GET . get ( [string] , None ) : [EOL] user = User . objects . get ( id = self . request . GET . get ( [string] ) ) [EOL] print ( user ) [EOL] return Ride . get_user_rides ( user ) [EOL] elif self . request . GET . get ( [string] , None ) : [EOL] user = User . objects . get ( id = self . request . GET . get ( [string] ) ) [EOL] print ( user ) [EOL] return Ride . get_driver_rides ( user ) [EOL] [EOL] return Ride . objects . all ( ) [EOL] [EOL] [EOL] from django . views . generic import TemplateView [EOL] [EOL] [EOL] class Home ( TemplateView ) : [EOL] template_name = [string]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
	0