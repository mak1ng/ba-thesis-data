from typing import Union , Tuple [EOL] import typing [EOL] __version__ = [string] [EOL] __version_info__ = tuple ( [ int ( num ) if num . isdigit ( ) else num for num in __version__ . replace ( [string] , [string] , [number] ) . split ( [string] ) ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[typing.Union[builtins.int,builtins.str],...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
[EOL] [docstring] [EOL] [EOL] from django . apps import AppConfig [EOL] [EOL] [EOL] class RidesAppConfig ( AppConfig ) : [EOL] [docstring] [EOL] [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
	0
from . rides import Ride [EOL] from . ratings import Rating [EOL]	0 0 0 0 0 0 0 0 0 0 0 0
from . rides import * [EOL] from . ratings import * [EOL]	0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Dict , Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] [comment] [EOL] from django . conf import settings [EOL] from django . core . mail import EmailMultiAlternatives [EOL] from django . template . loader import render_to_string [EOL] from django . utils import timezone [EOL] [EOL] [comment] [EOL] from cride . users . models import User [EOL] from cride . rides . models import Ride [EOL] [EOL] [comment] [EOL] from celery . decorators import task , periodic_task [EOL] [EOL] [comment] [EOL] import jwt [EOL] import time [EOL] from datetime import timedelta [EOL] [EOL] [EOL] def gen_verification_token ( user ) : [EOL] [docstring] [EOL] exp_date = timezone . now ( ) + timedelta ( days = [number] ) [EOL] payload = { [string] : user . username , [string] : int ( exp_date . timestamp ( ) ) , [string] : [string] } [EOL] token = jwt . encode ( payload , settings . SECRET_KEY , algorithm = [string] ) [EOL] return token . decode ( ) [EOL] [EOL] [EOL] @ task ( name = [string] , max_retries = [number] ) def send_confirmation_email ( user_pk ) : [EOL] [docstring] [EOL] user = User . objects . get ( pk = user_pk ) [EOL] verification_token = gen_verification_token ( user ) [EOL] subject = [string] . format ( user . username ) [EOL] from_email = [string] [EOL] content = render_to_string ( [string] , { [string] : verification_token , [string] : user } ) [EOL] msg = EmailMultiAlternatives ( subject , content , from_email , [ user . email ] ) [EOL] msg . attach_alternative ( content , [string] ) [EOL] msg . send ( ) [EOL] [EOL] [EOL] @ periodic_task ( name = [string] , run_every = timedelta ( minutes = [number] ) ) def disable_finished_rides ( ) : [EOL] [docstring] [EOL] now = timezone . now ( ) [EOL] offset = now + timedelta ( minutes = [number] ) [EOL] [EOL] [comment] [EOL] rides = Ride . objects . filter ( arrival_date__gte = now , arrival_date__lte = offset , is_active = True ) [EOL] rides . update ( is_active = False ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
[docstring] [EOL] [EOL] [comment] [EOL] from rest_framework . permissions import BasePermission [EOL] [EOL] [EOL] class IsAccountOwner ( BasePermission ) : [EOL] [docstring] [EOL] [EOL] def has_object_permission ( self , request , view , obj ) : [EOL] [docstring] [EOL] return request . user == obj [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] [EOL] [comment] [EOL] from django . apps import AppConfig [EOL] [EOL] [EOL] class UsersAppConfig ( AppConfig ) : [EOL] [docstring] [EOL] [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from . users import User [EOL] from . profiles import Profile [EOL]	0 0 0 0 0 0 0 0 0 0 0 0
from . users import * [EOL]	0 0 0 0 0 0
	0
from . users import * [EOL]	0 0 0 0 0 0
[docstring] [EOL] [EOL] [comment] [EOL] from django . apps import AppConfig [EOL] [EOL] [EOL] class CirclesAppConfig ( AppConfig ) : [EOL] [docstring] [EOL] [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
	0
	0
from . circles import * [EOL] from . memberships import * [EOL]	0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RenameField ( model_name = [string] , old_name = [string] , new_name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from . invitations import * [EOL]	0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import cride [EOL] [docstring] [EOL] [EOL] [comment] [EOL] from django . db import models [EOL] [EOL] [comment] [EOL] from cride . utils . models import CRideModel [EOL] [EOL] [EOL] class Membership ( CRideModel ) : [EOL] [docstring] [EOL] [EOL] user = models . ForeignKey ( [string] , on_delete = models . CASCADE ) [EOL] profile = models . ForeignKey ( [string] , on_delete = models . CASCADE ) [EOL] circle = models . ForeignKey ( [string] , on_delete = models . CASCADE ) [EOL] [EOL] is_admin = models . BooleanField ( [string] , default = False , help_text = [string] ) [EOL] [EOL] [comment] [EOL] used_invitations = models . PositiveSmallIntegerField ( default = [number] ) [EOL] remaining_invitations = models . PositiveSmallIntegerField ( default = [number] ) [EOL] invited_by = models . ForeignKey ( [string] , null = True , on_delete = models . SET_NULL , related_name = [string] ) [EOL] [EOL] [comment] [EOL] rides_taken = models . PositiveIntegerField ( default = [number] ) [EOL] rides_offered = models . PositiveIntegerField ( default = [number] ) [EOL] [EOL] [comment] [EOL] is_active = models . BooleanField ( [string] , default = True , help_text = [string] ) [EOL] [EOL] def __str__ ( self ) : [EOL] [docstring] [EOL] return [string] . format ( self . user . username , self . circle . slug_name ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[cride.circles.models.memberships.Membership]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[cride.circles.models.memberships.Membership]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[cride.circles.models.memberships.Membership]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[cride.circles.models.memberships.Membership]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[cride.circles.models.memberships.Membership]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[cride.circles.models.memberships.Membership]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[cride.circles.models.memberships.Membership]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[cride.circles.models.memberships.Membership]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[cride.circles.models.memberships.Membership]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[cride.circles.models.memberships.Membership]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . circles import Circle [EOL] from . memberships import Membership [EOL] from . invitations import Invitation [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] [EOL] [comment] [EOL] from rest_framework . permissions import BasePermission [EOL] [EOL] [comment] [EOL] from cride . circles . models import Membership [EOL] [EOL] [EOL] class IsCircleAdmin ( BasePermission ) : [EOL] [docstring] [EOL] [EOL] def has_object_permission ( self , request , view , obj ) : [EOL] [docstring] [EOL] try : [EOL] Membership . objects . get ( user = request . user , circle = obj , is_admin = True , is_active = True ) [EOL] except Membership . DoesNotExist : [EOL] return False [EOL] return True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0