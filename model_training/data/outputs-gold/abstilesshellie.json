[comment] [EOL]	0 0
	0
[comment] [EOL] [EOL] from typing import Any [EOL] import shellie [EOL] import typing [EOL] from subprocess import CalledProcessError [EOL] [EOL] import pytest [EOL] [EOL] from shellie import sh , ShellCommandResult [EOL] [EOL] def test_simple_string_command ( ) : [EOL] sh ( [string] ) [EOL] [EOL] [EOL] def test_list_command ( ) : [EOL] sh ( [ [string] , [string] ] ) [EOL] [EOL] [EOL] def test_operator_syntax ( ) : [EOL] sh % [string] [EOL] [EOL] [EOL] def test_bad_type_command ( ) : [EOL] with pytest . raises ( TypeError ) : [EOL] sh ( [number] ) [EOL] [EOL] [EOL] def test_missing_command ( ) : [EOL] with pytest . raises ( FileNotFoundError ) : [EOL] sh % [string] [EOL] [EOL] [EOL] def test_cli_tool_helper ( ) : [EOL] sh % [string] [EOL] [EOL] [EOL] def test_attribute_access_helper ( ) : [EOL] sh . ls ( [string] ) == sh ( [string] ) [EOL] [EOL] [EOL] def test_item_access_helper ( ) : [EOL] sh [ [string] ] ( [string] , [string] ) == sh ( [string] ) [EOL] [EOL] [EOL] def test_can_run ( ) : [EOL] result = ( sh % [string] ) . run ( ) [EOL] assert result == ShellCommandResult ( ) [EOL] [EOL] [EOL] def test_exit_code ( ) : [EOL] result = ( sh % [string] ) . run ( ) [EOL] assert result == ShellCommandResult ( exit_code = [number] ) [EOL] [EOL] [EOL] def test_stdout_capture ( ) : [EOL] result = ( sh % [string] ) . run ( ) [EOL] assert result == ShellCommandResult ( stdout = [string] ) [EOL] [EOL] [EOL] def test_stderr_capture ( ) : [EOL] result = ( sh % [string] ) . run ( ) [EOL] assert result == ShellCommandResult ( stderr = [string] ) [EOL] [EOL] [EOL] def test_stdin_writing ( ) : [EOL] result = ( sh % [string] << [string] ) . run ( ) [EOL] assert result == ShellCommandResult ( stdout = [string] ) [EOL] [EOL] [EOL] def test_simplified_stdout ( ) : [EOL] assert sh ( [string] ) . stdout == [string] [EOL] [EOL] [EOL] def test_simplified_stderr ( ) : [EOL] assert sh ( [string] ) . stderr == [string] [EOL] [EOL] [EOL] def test_simplified_exit_code ( ) : [EOL] assert sh ( [string] ) . exit_code == [number] [EOL] [EOL] [EOL] def test_raise_for_status_success ( ) : [EOL] assert sh ( [string] ) . raise_for_status ( ) == ShellCommandResult ( ) [EOL] [EOL] [EOL] def test_raise_for_status_failure ( ) : [EOL] with pytest . raises ( CalledProcessError ) : [EOL] sh ( [string] ) . raise_for_status ( ) [EOL] [EOL] [EOL] def test_stdin_file ( ) : [EOL] result = ( sh % [string] < [string] ) . run ( ) [EOL] [comment] [EOL] [comment] [EOL] assert result == ShellCommandResult ( stdout = [string] ) [EOL] [EOL] [EOL] @ pytest . mark . xfail def test_pipes ( ) : [EOL] result = ( sh ( [string] ) | sh ( [string] ) ) . run ( ) [EOL] assert result == ShellCommandResult ( stdout = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0