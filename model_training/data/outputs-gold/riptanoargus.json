from os import path [EOL] [EOL] import src [EOL] from setuptools import find_packages , setup [EOL] [EOL] here = path . abspath ( path . dirname ( __file__ ) ) [EOL] [EOL] with open ( path . join ( here , [string] ) ) as f : [EOL] long_description = f . read ( ) [EOL] [EOL] setup ( name = [string] , version = src . __version__ , description = [string] , long_description = long_description , url = [string] , packages = find_packages ( ) , scripts = [ [string] ] , install_requires = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] , classifiers = [ [string] , [string] , [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
__version__ = [string] [EOL]	$builtins.str$ 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any [EOL] import jira [EOL] import typing [EOL] from typing import List [EOL] [EOL] from jira import Issue [EOL] from jira . client import Project , ResultList [EOL] [EOL] [EOL] class TestWrappedJiraConnectionStub : [EOL] [EOL] [docstring] [EOL] name_prefix = [number] [EOL] [EOL] def __init__ ( self ) : [EOL] self . prefix = TestWrappedJiraConnectionStub . name_prefix [EOL] TestWrappedJiraConnectionStub . name_prefix += [number] [EOL] [EOL] def projects ( self ) : [EOL] result = list ( ) [EOL] for x in range ( [number] , [number] , [number] ) : [EOL] temp_project = Project ( None , None ) [EOL] name = [string] . format ( self . name_prefix , x ) [EOL] temp_project . name = name [EOL] temp_project . key = name [EOL] result . append ( temp_project ) [EOL] return result [EOL] [EOL] @ staticmethod def search_issues ( ) : [EOL] result = ResultList ( ) [EOL] [EOL] for x in range ( [number] , [number] , [number] ) : [EOL] temp_issue = Issue ( None , None ) [EOL] temp_issue . key = [string] . format ( x ) [EOL] temp_issue . updated = [string] [EOL] result . append ( temp_issue ) [EOL] [EOL] return result [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[jira.client.Project]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $jira.client.ResultList$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import dill [EOL] [EOL] with open ( [string] , [string] ) as df : [EOL] builds = dill . load ( df ) [EOL] [EOL] for build in builds : [EOL] output = f' [string] { build . number } [string] { build . status }' [EOL] print ( output ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any [EOL] import typing [EOL] import src [EOL] [docstring] [EOL] import os [EOL] [EOL] import dill [EOL] from jenkinsapi . jenkins import Jenkins [EOL] [EOL] from src . jenkins_interface import download_builds [EOL] from tests . argus_test import Tester [EOL] [EOL] filename = [string] [EOL] url = [string] [EOL] job_name = [string] [EOL] [EOL] jenkins_obj = Jenkins ( url ) [EOL] builds = download_builds ( jenkins_obj , job_name ) [EOL] [EOL] [comment] [EOL] with open ( os . path . join ( Tester . DATA_DIR , filename ) , [string] ) as data_file : [EOL] dill . dump ( builds , data_file ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.List[src.jenkins_interface.JenkinsBuild]$ 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[src.jenkins_interface.JenkinsBuild]$ 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any [EOL] import typing [EOL] import src [EOL] import os [EOL] [EOL] import dill [EOL] from jenkinsapi . jenkins import Jenkins [EOL] [EOL] from src . jenkins_interface import download_builds [EOL] from src . jenkins_job import JenkinsJob [EOL] from tests . argus_test import Tester [EOL] [EOL] [EOL] FILENAME = [string] . format ( [string] ) [EOL] [EOL] url = [string] [EOL] job_name = [string] [EOL] [EOL] jenkins_obj = Jenkins ( url ) [EOL] job_instance = jenkins_obj . get_job ( job_name ) [EOL] builds = download_builds ( jenkins_obj , job_name ) [EOL] [EOL] [comment] [EOL] with open ( os . path . join ( Tester . JOB_INSTANCES_DIR , FILENAME ) , [string] ) as data_file : [EOL] dill . dump ( job_instance , data_file ) [EOL] [EOL] jenkins_job = JenkinsJob ( job_name , builds ) [EOL] [EOL] [comment] [EOL] with open ( os . path . join ( Tester . JENKINS_JOBS_DIR , FILENAME ) , [string] ) as data_file : [EOL] jenkins_job . serialize ( data_file ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $src.jenkins_job.JenkinsJob$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.List[src.jenkins_interface.JenkinsBuild]$ 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $src.jenkins_job.JenkinsJob$ 0 0 0 $builtins.str$ 0 $typing.List[src.jenkins_interface.JenkinsBuild]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $src.jenkins_job.JenkinsJob$ 0 0 0 0 0 0
	0
	0