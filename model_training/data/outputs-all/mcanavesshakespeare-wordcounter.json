from typing import Any , Counter [EOL] import collections [EOL] import _csv [EOL] import logging [EOL] import typing [EOL] import builtins [EOL] import csv [EOL] import logging [EOL] import os [EOL] from collections import Counter [EOL] [EOL] from config import config [EOL] from wordcounter . core . reporters import FileReporter [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class FileNotSupportedException ( Exception ) : [EOL] [docstring] [EOL] [EOL] [EOL] class CSVReporter ( FileReporter ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , filename ) : [EOL] _ , file_extension = os . path . splitext ( filename ) [EOL] if file_extension . lower ( ) != self . extension : [EOL] raise FileNotSupportedException ( f" [string] { self . extension } [string] " ) [EOL] self . filename = filename [EOL] [EOL] @ property def extension ( self ) : [EOL] return [string] [EOL] [EOL] def save ( self , result ) : [EOL] filepath = config [ [string] ] . joinpath ( self . filename ) [EOL] logger . debug ( [string] , filepath ) [EOL] with open ( filepath , [string] ) as file : [EOL] writer = csv . writer ( file ) [EOL] writer . writerow ( [ [string] , [string] ] ) [EOL] for row in result . most_common ( ) : [EOL] writer . writerow ( row ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $collections.Counter$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $_csv._writer$ 0 0 0 $_csv._writer$ 0 0 0 0 $_csv._writer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $collections.Counter$ 0 0 0 0 0 0 $_csv._writer$ 0 0 0 0 0 0
	0
	0
import builtins [EOL] [docstring] [EOL] [EOL] [EOL] class FileRepository : [EOL] [docstring] [EOL] [EOL] @ property def filepath ( self ) : [EOL] raise NotImplementedError [EOL] [EOL] @ property def text ( self ) : [EOL] raise NotImplementedError [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0
from typing import Counter [EOL] import collections [EOL] import builtins [EOL] [docstring] [EOL] [EOL] from collections import Counter [EOL] [EOL] [EOL] class FileReporter : [EOL] [docstring] [EOL] [EOL] @ property def extension ( self ) : [EOL] raise NotImplementedError [EOL] [EOL] def save ( self , result ) : [EOL] raise NotImplementedError [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $collections.Counter$ 0 0 0 0 0 0
from typing import Any , Callable [EOL] import wordcounter [EOL] import typing [EOL] import logging [EOL] import logging [EOL] import os [EOL] from collections import Counter [EOL] from typing import List [EOL] [EOL] from wordcounter . core . gateways import FileRepository [EOL] from wordcounter . core . pipeline . main_steps import ( token_cleaner , token_loader , word_counter , ) [EOL] from wordcounter . core . pipeline . utils import pipeline_composer [EOL] from wordcounter . core . reporters import FileReporter [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def wordcounter ( reporter , * repositories ) : [EOL] [docstring] [EOL] logger . info ( [string] ) [EOL] count_pipeline = pipeline_composer ( token_loader , token_cleaner , word_counter ) [EOL] logger . info ( [string] ) [EOL] result = sum ( [ count_pipeline ( r ) for r in repositories ] , Counter ( ) ) [EOL] logger . info ( [string] ) [EOL] reporter . save ( result ) [EOL] logger . info ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0
from typing import List , Any , Callable , Counter [EOL] import collections [EOL] import logging [EOL] import wordcounter [EOL] import typing [EOL] import builtins [EOL] import logging [EOL] from collections import Counter [EOL] from typing import List [EOL] [EOL] from wordcounter . core . gateways import FileRepository [EOL] from wordcounter . core . pipeline . cleaning_steps import ( filter_not_alphabetic , remove_punctuation , to_lowercase , ) [EOL] from wordcounter . core . pipeline . utils import pipeline_composer [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def token_loader ( repository ) : [EOL] [docstring] [EOL] logging . debug ( [string] , repository . filepath ) [EOL] text = repository . text [EOL] return text . split ( ) [EOL] [EOL] [EOL] def token_cleaner ( tokens ) : [EOL] [docstring] [EOL] logging . debug ( [string] , len ( tokens ) ) [EOL] cleaning_pipeline = pipeline_composer ( remove_punctuation , filter_not_alphabetic , to_lowercase ) [EOL] return list ( cleaning_pipeline ( tokens ) ) [EOL] [EOL] [EOL] def word_counter ( words ) : [EOL] [docstring] [EOL] logging . debug ( [string] , len ( words ) ) [EOL] return Counter ( words ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $collections.Counter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Callable [EOL] import typing [EOL] from functools import reduce [EOL] from typing import Any , Callable [EOL] [EOL] [EOL] def pipeline_composer ( * steps ) : [EOL] [docstring] [EOL] return lambda x : reduce ( lambda f , g : g ( f ) , list ( steps ) , x ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable[[typing.Any],typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Generator , Optional , Iterator , Dict [EOL] import typing [EOL] import builtins [EOL] import logging [EOL] import logging [EOL] import string [EOL] from typing import Generator , Iterator [EOL] [EOL] PUNCTUATION_TABLE = str . maketrans ( [string] , [string] , string . punctuation ) [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def filter_not_alphabetic ( tokens ) : [EOL] [docstring] [EOL] for token in tokens : [EOL] if token . isalpha ( ) : [EOL] yield token [EOL] [EOL] [EOL] def remove_punctuation ( tokens ) : [EOL] [docstring] [EOL] for token in tokens : [EOL] yield token . translate ( PUNCTUATION_TABLE ) [EOL] [EOL] [EOL] def to_lowercase ( tokens ) : [EOL] [docstring] [EOL] for token in tokens : [EOL] yield token . lower ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,typing.Optional[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Generator[builtins.str,None,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Generator[builtins.str,None,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,typing.Optional[builtins.int]]$ 0 0 0 0 0 $typing.Generator[builtins.str,None,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from config import config [EOL] from wordcounter . __main__ import main [EOL] [EOL] [EOL] def test_wordcount ( mocker ) : [EOL] mocker . patch ( [string] , [string] ) [EOL] result_file = config [ [string] ] . joinpath ( [string] ) [EOL] main ( ) [EOL] assert result_file . is_file ( ) [EOL] result_file . unlink ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import wordcounter [EOL] import typing [EOL] from wordcounter . gateways import FileRepository [EOL] [EOL] [EOL] def test_file_repository_filepath ( mocker ) : [EOL] repository = FileRepository ( mocker . Mock ( ) , [string] ) [EOL] assert repository . filepath == [string] [EOL] [EOL] [EOL] def test_file_repository_text ( mocker ) : [EOL] loader_mock = mocker . Mock ( return_value = [string] ) [EOL] repository = FileRepository ( loader_mock , [string] ) [EOL] assert repository . text == [string] [EOL] assert repository . text == [string] [EOL] loader_mock . assert_called_once_with ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import wordcounter [EOL] import pytest [EOL] [EOL] from wordcounter . reporters import CSVReporter , FileNotSupportedException [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] ) , ( [string] ) , ( [string] ) ] ) def test_csv_reporter_bad_extension ( filename ) : [EOL] with pytest . raises ( FileNotSupportedException ) : [EOL] CSVReporter ( filename = filename ) [EOL] [EOL] [EOL] def test_csv_reporter_extension ( ) : [EOL] reporter = CSVReporter ( [string] ) [EOL] assert reporter . extension == [string] [EOL] [EOL] [EOL] def test_csv_reporter_save ( ) : [EOL] reporter = CSVReporter ( [string] ) [EOL] assert reporter . extension == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Counter [EOL] import collections [EOL] import typing [EOL] import pytest [EOL] [EOL] from wordcounter . core . pipeline . main_steps import ( token_cleaner , token_loader , word_counter , ) [EOL] [EOL] [EOL] def test_loader ( mocker ) : [EOL] repository_mock = mocker . Mock ( text = [string] ) [EOL] assert token_loader ( repository_mock ) == [ [string] , [string] , [string] ] [EOL] [EOL] [EOL] def test_loader_file_not_found ( ) : [EOL] with pytest . raises ( Exception ) : [EOL] assert token_loader ( [string] ) [EOL] [EOL] [EOL] def test_cleaner ( ) : [EOL] cleaned_words = token_cleaner ( [ [string] , [string] , [string] , [string] , [string] ] ) [EOL] assert cleaned_words == [ [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] def test_counter ( ) : [EOL] counted_words = word_counter ( [ [string] , [string] , [string] , [string] , [string] ] ) [EOL] assert counted_words == { [string] : [number] , [string] : [number] , [string] : [number] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] from wordcounter . core . pipeline . cleaning_steps import ( filter_not_alphabetic , remove_punctuation , to_lowercase , ) [EOL] [EOL] [EOL] def test_remove_punctuation ( ) : [EOL] dirty_words = [ [string] , [string] , [string] , [string] , [string] ] [EOL] assert { [string] , [string] , [string] } == set ( remove_punctuation ( dirty_words ) ) [EOL] [EOL] [EOL] def test_filter_not_alphabetic ( ) : [EOL] tokens = [ [string] , [string] , [string] , [string] ] [EOL] assert [ [string] ] == list ( filter_not_alphabetic ( tokens ) ) [EOL] [EOL] [EOL] def test_to_lowercase ( ) : [EOL] tokens = [ [string] , [string] , [string] ] [EOL] assert { [string] } == set ( to_lowercase ( tokens ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Callable [EOL] import typing [EOL] from wordcounter . core . pipeline . utils import pipeline_composer [EOL] [EOL] [EOL] def test_pipeline_composer ( ) : [EOL] fnx = pipeline_composer ( * [ lambda x : x * [number] , lambda x : x - [number] ] ) [EOL] assert fnx ( [ [number] , [number] , [number] ] == [ [number] , [number] , [number] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from wordcounter . core . pipeline import wordcounter [EOL] [EOL] [EOL] def test_wordcounter ( mocker ) : [EOL] test_text1 = [string] [EOL] test_text2 = [string] [EOL] repository_mock1 = mocker . Mock ( text = test_text1 ) [EOL] repository_mock2 = mocker . Mock ( text = test_text2 ) [EOL] reporter_mock = mocker . Mock ( ) [EOL] wordcounter ( reporter_mock , repository_mock1 , repository_mock2 ) [EOL] reporter_mock . save . assert_called_once_with ( { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pytest [EOL] [EOL] from wordcounter . gateways import FileNotFoundException , google_storage_file_loader [EOL] [EOL] [EOL] def test_google_loader ( ) : [EOL] text = google_storage_file_loader ( [string] ) [EOL] assert len ( text ) == [number] [EOL] assert [string] in text [EOL] [EOL] [EOL] def test_google_loader_bucket_not_found ( mocker ) : [EOL] mocker . patch . dict ( [string] , { [string] : [string] } ) [EOL] with pytest . raises ( FileNotFoundException ) : [EOL] google_storage_file_loader ( [string] ) [EOL] [EOL] [EOL] def test_google_loader_bucket_bad_permisions ( mocker ) : [EOL] mocker . patch . dict ( [string] , { [string] : [string] } ) [EOL] with pytest . raises ( FileNotFoundException ) : [EOL] google_storage_file_loader ( [string] ) [EOL] [EOL] [EOL] def test_google_loader_blob_not_exists ( ) : [EOL] with pytest . raises ( FileNotFoundException ) : [EOL] google_storage_file_loader ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Counter [EOL] import collections [EOL] import typing [EOL] from collections import Counter [EOL] [EOL] from config import config [EOL] from wordcounter . reporters import CSVReporter [EOL] [EOL] [EOL] def test_save_csv ( ) : [EOL] result = Counter ( [string] ) [EOL] file = config [ [string] ] . joinpath ( [string] ) [EOL] CSVReporter ( [string] ) . save ( result ) [EOL] assert file . is_file ( ) [EOL] assert file . read_bytes ( ) == [string] [EOL] file . unlink ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Any , List , Dict [EOL] import typing [EOL] import _importlib_modulespec [EOL] import importlib [EOL] import os [EOL] import sys [EOL] [EOL] __all__ = [ [string] ] [EOL] [EOL] [EOL] def _get_config ( ) : [EOL] settings_module = os . environ . get ( [string] ) [EOL] try : [EOL] module = importlib . import_module ( f" [string] { settings_module }" ) [EOL] settings = { k : v for k , v in vars ( module ) . items ( ) if not k . startswith ( [string] ) and k . isupper ( ) } [EOL] return settings [EOL] except Exception : [EOL] sys . stderr . write ( [string] % settings_module ) [EOL] sys . stderr . flush ( ) [EOL] raise [EOL] [EOL] [EOL] config = _get_config ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from . base import * [comment] [EOL]	0 0 0 0 0 0 0