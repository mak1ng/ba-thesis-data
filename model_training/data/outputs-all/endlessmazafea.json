[comment] [EOL] [EOL] from setuptools import setup [EOL] [EOL] [EOL] setup ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] from typing import Any , List [EOL] import typing [EOL] project = [string] [EOL] copyright = [string] [EOL] author = [string] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] extensions = [ ] [EOL] [EOL] [comment] [EOL] templates_path = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] exclude_patterns = [ ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_theme = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_static_path = [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Callable [EOL] import typing [EOL] import builtins [EOL] import _importlib_modulespec [EOL] from importlib import import_module [EOL] import os [EOL] import sys [EOL] from typing import Callable [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def get_cpu_count ( ) : [EOL] return os . cpu_count ( ) or [number] [EOL] [EOL] [EOL] def get_fqdn ( f ) : [EOL] return f'{ f . __module__ } [string] { f . __name__ }' [EOL] [EOL] [EOL] def get_callable ( module_name , callable_name ) : [EOL] module = import_module ( module_name ) [EOL] [EOL] return getattr ( module , callable_name ) [EOL] [EOL] [EOL] def progress ( current , total , end = [string] ) : [EOL] bar_length = [number] [EOL] [EOL] if not end . endswith ( [string] ) and not sys . stdout . isatty ( ) : [EOL] end += [string] [EOL] [EOL] if current > total : [EOL] current = total [EOL] [EOL] if total == [number] : [EOL] done = bar_length [EOL] [EOL] else : [EOL] done = bar_length * current // total [EOL] [EOL] remaining = bar_length - done [EOL] [EOL] print ( f' [string] { [string] * done }{ [string] * remaining } [string] { current } [string] { total }' , end = end , flush = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] import sys [EOL] [EOL] from . import cli [EOL] [EOL] [EOL] try : [EOL] cli . run_command ( * sys . argv [ [number] : ] ) [EOL] [EOL] except cli . errors . BaseExit as e : [EOL] sys . exit ( e . status_code ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Dict [EOL] import builtins [EOL] import typing [EOL] MAPPING = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] [EOL] def normalize_vendor ( vendor ) : [EOL] return MAPPING . get ( vendor . lower ( ) , vendor ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.strbuiltins.str$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Any , List [EOL] import typing [EOL] import processor [EOL] import config [EOL] import builtins [EOL] import logging [EOL] import azafea [EOL] import logging [EOL] from signal import SIGINT , SIGTERM , Signals , signal as intercept_signal [EOL] import sys [EOL] import time [EOL] from typing import Any , List [EOL] [EOL] from . config import Config [EOL] from . processor import Processor [EOL] [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class Controller : [EOL] def __init__ ( self , config ) : [EOL] self . config = config [EOL] self . _processors = [ ] [EOL] [EOL] self . _number_of_workers = config . main . number_of_workers [EOL] [EOL] log . debug ( [string] , config ) [EOL] [EOL] intercept_signal ( SIGINT , self . _handle_exit_signals ) [EOL] intercept_signal ( SIGTERM , self . _handle_exit_signals ) [EOL] [EOL] def _exit_cleanly ( self ) : [EOL] for proc in self . _processors : [EOL] proc . join ( ) [EOL] [EOL] log . info ( [string] ) [EOL] sys . exit ( [number] ) [EOL] [EOL] def _handle_exit_signals ( self , signum , _ ) : [EOL] signal_name = Signals ( signum ) . name [EOL] log . info ( [string] , signal_name ) [EOL] [EOL] if signum == SIGTERM : [EOL] [comment] [EOL] for proc in self . _processors : [EOL] proc . terminate ( ) [EOL] [EOL] self . _exit_cleanly ( ) [EOL] [EOL] def start ( self ) : [EOL] log . info ( [string] , self . _number_of_workers , [string] if self . _number_of_workers > [number] else [string] ) [EOL] [EOL] for i in range ( [number] , self . _number_of_workers + [number] ) : [EOL] proc = Processor ( f' [string] { i }' , self . config ) [EOL] proc . start ( ) [EOL] self . _processors . append ( proc ) [EOL] [EOL] def main ( self ) : [EOL] self . start ( ) [EOL] [EOL] while True : [EOL] active_processors = [ p for p in self . _processors if p . is_alive ( ) ] [EOL] [EOL] if not active_processors : [EOL] self . _exit_cleanly ( ) [EOL] [EOL] time . sleep ( [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $azafea.config.Config$ 0 0 0 0 0 $azafea.config.Config$ 0 $azafea.config.Config$ 0 0 0 $typing.List[processor.Processor]$ 0 0 0 0 0 0 0 0 0 $azafea.config.Config$ 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $azafea.config.Config$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $azafea.processor.Processor$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $azafea.processor.Processor$ 0 0 0 0 0 0 0 0 0 0 0 $azafea.processor.Processor$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[azafea.processor.Processor]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[azafea.processor.Processor]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] from alembic import context [EOL] [EOL] [EOL] def run_migrations_online ( ) : [EOL] [docstring] [EOL] config = context . config [EOL] context . configure ( connection = config . attributes [ [string] ] , target_metadata = config . attributes [ [string] ] . metadata ) [EOL] [EOL] with context . begin_transaction ( ) : [EOL] context . run_migrations ( ) [EOL] [EOL] [EOL] run_migrations_online ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Tuple , Any , Generator [EOL] import azafea [EOL] import typing [EOL] import builtins [EOL] import alembic [EOL] import os [EOL] from typing import Tuple [EOL] [EOL] from alembic . config import Config as AlembicConfig [EOL] from alembic . script import Script , ScriptDirectory [EOL] from alembic . util import coerce_resource_to_filename [EOL] [EOL] from azafea . config import Config [EOL] from . . model import Base [EOL] [EOL] [EOL] def get_alembic_config ( config ) : [EOL] config_path = coerce_resource_to_filename ( [string] ) [EOL] alembic_config = AlembicConfig ( config_path ) [EOL] alembic_config . attributes [ [string] ] = Base [EOL] [EOL] migration_dirs = ( get_queue_migrations_path ( queue_config . handler ) for queue_config in config . queues . values ( ) ) [EOL] migration_dirs = ( d for d in migration_dirs if os . path . exists ( d ) ) [EOL] alembic_config . set_main_option ( [string] , [string] . join ( migration_dirs ) ) [EOL] [EOL] return alembic_config [EOL] [EOL] [EOL] def get_migration_heads ( config ) : [EOL] script = ScriptDirectory . from_config ( config ) [EOL] [EOL] return script . get_revisions ( [string] ) [EOL] [EOL] [EOL] def get_queue_migrations_path ( queue_handler ) : [EOL] return coerce_resource_to_filename ( f'{ queue_handler } [string] ' ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $alembic.config.Config$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[alembic.script.Script]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] import logging [EOL] import argparse [EOL] import azafea [EOL] import builtins [EOL] import argparse [EOL] import logging [EOL] [EOL] from . import commands [EOL] from . errors import InvalidConfigExit [EOL] from . . config import Config , InvalidConfigurationError [EOL] from . . logging import setup_logging [EOL] [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def _get_parser ( * , add_help = False ) : [EOL] parser = argparse . ArgumentParser ( prog = [string] , add_help = add_help , formatter_class = argparse . ArgumentDefaultsHelpFormatter ) [EOL] [EOL] parser . add_argument ( [string] , [string] , default = [string] , help = [string] ) [EOL] [EOL] return parser [EOL] [EOL] [EOL] def run_command ( * argv ) : [EOL] parser = _get_parser ( add_help = False ) [EOL] base_args , remainder = parser . parse_known_args ( argv ) [EOL] setup_logging ( verbose = False ) [EOL] [EOL] try : [EOL] config = Config . from_file ( base_args . config ) [EOL] [EOL] except InvalidConfigurationError as e : [EOL] log . error ( e ) [EOL] [EOL] raise InvalidConfigExit ( ) [EOL] [EOL] setup_logging ( verbose = config . main . verbose ) [EOL] [EOL] parser = _get_parser ( add_help = True ) [EOL] subs = parser . add_subparsers ( title = [string] , dest = [string] , required = True ) [EOL] [EOL] [comment] [EOL] commands . register_commands ( subs ) [EOL] [EOL] [comment] [EOL] for queue_name , queue_config in config . queues . items ( ) : [EOL] if queue_config . cli is not None : [EOL] queue_parser = subs . add_parser ( queue_name , help = f' [string] { queue_name } [string] ' ) [EOL] queue_subs = queue_parser . add_subparsers ( title = [string] , dest = [string] , required = True ) [EOL] queue_config . cli ( queue_subs ) [EOL] [EOL] args = parser . parse_args ( argv ) [EOL] args . subcommand ( config , args ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Any [EOL] import argparse [EOL] import typing [EOL] import config [EOL] import logging [EOL] import azafea [EOL] import argparse [EOL] import logging [EOL] [EOL] from alembic . command import revision as make_db_revision , upgrade as upgrade_db [EOL] [EOL] from redis import Redis [EOL] from redis . exceptions import ConnectionError as RedisConnectionError [EOL] from sqlalchemy . exc import ProgrammingError [EOL] [EOL] from . . config import Config [EOL] from . . controller import Controller [EOL] from . . migrations . utils import get_alembic_config , get_migration_heads , get_queue_migrations_path [EOL] from . . model import Db , PostgresqlConnectionError , views [EOL] from . . utils import progress [EOL] from . errors import ConnectionErrorExit , NoEventQueueExit , UnknownErrorExit [EOL] [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def register_commands ( subs ) : [EOL] dropdb = subs . add_parser ( [string] , help = [string] ) [EOL] dropdb . set_defaults ( subcommand = do_dropdb ) [EOL] [EOL] initdb = subs . add_parser ( [string] , help = argparse . SUPPRESS ) [EOL] initdb . set_defaults ( subcommand = do_initdb ) [EOL] [EOL] make_migration = subs . add_parser ( [string] , help = [string] ) [EOL] make_migration . add_argument ( [string] , [string] , default = [string] , help = [string] ) [EOL] make_migration . add_argument ( [string] , help = [string] ) [EOL] make_migration . set_defaults ( subcommand = do_make_migration ) [EOL] [EOL] migratedb = subs . add_parser ( [string] , help = [string] ) [EOL] migratedb . set_defaults ( subcommand = do_migratedb ) [EOL] [EOL] print_config = subs . add_parser ( [string] , help = [string] ) [EOL] print_config . set_defaults ( subcommand = do_print_config ) [EOL] [EOL] replay = subs . add_parser ( [string] , help = [string] [string] ) [EOL] replay . add_argument ( [string] , help = [string] ) [EOL] replay . set_defaults ( subcommand = do_replay ) [EOL] [EOL] refresh = subs . add_parser ( [string] , help = [string] ) [EOL] refresh . set_defaults ( subcommand = do_refresh_views ) [EOL] [EOL] run = subs . add_parser ( [string] , help = [string] ) [EOL] run . set_defaults ( subcommand = do_run ) [EOL] [EOL] [EOL] def do_dropdb ( config , args ) : [EOL] if not config . queues : [EOL] log . error ( [string] ) [EOL] raise NoEventQueueExit ( ) [EOL] [EOL] db = Db ( config . postgresql ) [EOL] db . drop_all ( ) [EOL] [EOL] [EOL] def do_initdb ( config , args ) : [EOL] if not config . queues : [EOL] log . error ( [string] ) [EOL] raise NoEventQueueExit ( ) [EOL] [EOL] db = Db ( config . postgresql ) [EOL] db . create_all ( ) [EOL] [EOL] [EOL] def do_make_migration ( config , args ) : [EOL] if not config . queues : [EOL] log . error ( f' [string] { args . queue } [string] ' ) [EOL] raise NoEventQueueExit ( ) [EOL] [EOL] try : [EOL] queue_handler = config . queues [ args . queue ] . handler [EOL] [EOL] except KeyError : [EOL] log . error ( f' [string] { args . queue } [string] ' [string] ) [EOL] raise NoEventQueueExit ( ) [EOL] [EOL] alembic_config = get_alembic_config ( config ) [EOL] [EOL] if not alembic_config . get_main_option ( [string] ) : [EOL] log . info ( [string] ) [EOL] return None [EOL] [EOL] db = Db ( config . postgresql ) [EOL] [EOL] with db as dbsession : [EOL] alembic_config . attributes [ [string] ] = dbsession . connection ( ) [EOL] [EOL] for h in get_migration_heads ( alembic_config ) : [EOL] if h . branch_labels is not None and args . queue in h . branch_labels : [comment] [EOL] [comment] [EOL] branch_label = None [EOL] head = f'{ args . queue } [string] ' [EOL] break [EOL] [EOL] else : [EOL] [comment] [EOL] branch_label = args . queue [EOL] head = [string] [EOL] [EOL] make_db_revision ( alembic_config , message = args . description , autogenerate = True , version_path = get_queue_migrations_path ( queue_handler ) , branch_label = branch_label , head = head ) [EOL] [EOL] [EOL] def do_migratedb ( config , args ) : [EOL] if not config . queues : [EOL] log . error ( [string] ) [EOL] raise NoEventQueueExit ( ) [EOL] [EOL] alembic_config = get_alembic_config ( config ) [EOL] [EOL] if not alembic_config . get_main_option ( [string] ) : [EOL] log . info ( [string] ) [EOL] return None [EOL] [EOL] db = Db ( config . postgresql ) [EOL] [EOL] with db as dbsession : [EOL] alembic_config . attributes [ [string] ] = dbsession . connection ( ) [EOL] upgrade_db ( alembic_config , [string] ) [EOL] [EOL] log . info ( [string] ) [EOL] [EOL] [EOL] def do_print_config ( config , args ) : [EOL] print ( [string] ) [EOL] print ( config ) [EOL] print ( [string] ) [EOL] [EOL] if not config . queues : [EOL] log . warning ( [string] ) [EOL] raise NoEventQueueExit ( ) [EOL] [EOL] [EOL] def do_replay ( config , args ) : [EOL] if not config . queues : [EOL] log . error ( f' [string] { args . queue } [string] ' ) [EOL] raise NoEventQueueExit ( ) [EOL] [EOL] if args . queue not in config . queues : [EOL] log . error ( f' [string] { args . queue } [string] ' ) [EOL] raise NoEventQueueExit ( ) [EOL] [EOL] redis = Redis ( host = config . redis . host , port = config . redis . port , password = config . redis . password ) [EOL] error_queue = f' [string] { args . queue }' [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] num_errors = redis . llen ( error_queue ) [EOL] [EOL] for i in range ( num_errors ) : [EOL] failed_event = redis . rpop ( error_queue ) [EOL] [EOL] if failed_event is None : [EOL] log . warning ( f' [string] { args . queue } [string] { i } [string] ' f'{ num_errors }' ) [EOL] break [EOL] [EOL] try : [EOL] redis . lpush ( args . queue , failed_event ) [EOL] [EOL] except Exception : [EOL] log . exception ( f' [string] { failed_event } [string] { args . queue } [string] ' ) [EOL] raise UnknownErrorExit ( ) [EOL] [EOL] log . info ( f' [string] { args . queue } [string] ' ) [EOL] [EOL] [EOL] def do_refresh_views ( config , args ) : [EOL] db = Db ( config . postgresql ) [EOL] total_nb_views = nb_views = len ( views ) [EOL] log . info ( f' [string] { nb_views } [string] ' ) [EOL] [EOL] with db as dbsession : [EOL] for i , view in enumerate ( views ) : [EOL] progress ( i , nb_views ) [EOL] try : [EOL] dbsession . connection ( ) . execute ( f' [string] { view } [string] ' ) [EOL] except ProgrammingError as e : [EOL] assert [string] in str ( e ) [EOL] log . debug ( f' [string] { view } [string] ' ) [EOL] total_nb_views -= [number] [EOL] [EOL] progress ( total_nb_views , total_nb_views , end = [string] ) [EOL] log . info ( f' [string] { total_nb_views } [string] ' ) [EOL] [EOL] [EOL] def do_run ( config , args ) : [EOL] if not config . queues : [EOL] log . error ( [string] ) [EOL] raise NoEventQueueExit ( ) [EOL] [EOL] controller = Controller ( config ) [EOL] [EOL] try : [EOL] controller . main ( ) [EOL] [EOL] except PostgresqlConnectionError as e : [EOL] log . error ( [string] , e ) [EOL] raise ConnectionErrorExit ( ) [EOL] [EOL] except RedisConnectionError as e : [EOL] log . error ( [string] , e ) [EOL] raise ConnectionErrorExit ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] import builtins [EOL] class BaseExit ( Exception ) : [EOL] status_code = ... [EOL] [EOL] [EOL] class InvalidConfigExit ( BaseExit ) : [EOL] status_code = - [number] [EOL] [EOL] [EOL] class NoEventQueueExit ( BaseExit ) : [EOL] status_code = - [number] [EOL] [EOL] [EOL] class ConnectionErrorExit ( BaseExit ) : [EOL] status_code = - [number] [EOL] [EOL] [EOL] class UnknownErrorExit ( BaseExit ) : [EOL] status_code = - [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict , List [EOL] import typing [EOL] import builtins [EOL] from typing import List [EOL] [EOL] COUNTRIES = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] [EOL] def transform_alpha_3_into_2 ( tablename ) : [EOL] return [ f" [string] { tablename } [string] { alpha_2 } [string] { alpha_3 } [string] " for alpha_2 , alpha_3 in COUNTRIES . items ( ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.strtyping.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0
	0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] from . cli import register_commands [comment] [EOL] from . handler import process [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] import datetime [EOL] import azafea [EOL] from datetime import datetime , timezone [EOL] import json [EOL] [EOL] [EOL] def test_from_bytes ( ) : [EOL] from azafea . event_processors . endless . activation . v1 . handler import Activation [EOL] [EOL] created_at = datetime . utcnow ( ) . replace ( tzinfo = timezone . utc ) [EOL] activation = Activation . from_serialized ( json . dumps ( { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : created_at . strftime ( [string] ) , } ) . encode ( [string] ) ) [EOL] [EOL] assert activation . image == [string] [EOL] assert activation . vendor == [string] [EOL] assert activation . product == [string] [EOL] assert activation . release == [string] [EOL] assert activation . image_product == [string] [EOL] assert activation . image_branch == [string] [EOL] assert activation . image_arch == [string] [EOL] assert activation . image_platform == [string] [EOL] assert activation . image_timestamp == datetime ( [number] , [number] , [number] , [number] , [number] , [number] , tzinfo = timezone . utc ) [EOL] assert activation . image_personality == [string] [EOL] [EOL] [comment] [EOL] assert activation . created_at == created_at . strftime ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Any [EOL] import datetime [EOL] import typing [EOL] from datetime import datetime , timezone [EOL] [EOL] from azafea . tests . integration import IntegrationTest [EOL] from azafea . vendors import normalize_vendor [EOL] [EOL] [EOL] class TestActivation ( IntegrationTest ) : [EOL] handler_module = [string] [EOL] [EOL] def test_normalize_no_vendors ( self , capfd ) : [EOL] from azafea . event_processors . endless . activation . v1 . handler import Activation [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] ) [EOL] self . ensure_tables ( Activation ) [EOL] [EOL] with self . db as dbsession : [EOL] assert dbsession . query ( Activation ) . count ( ) == [number] [EOL] [EOL] self . run_subcommand ( [string] , [string] ) [EOL] [EOL] with self . db as dbsession : [EOL] assert dbsession . query ( Activation ) . count ( ) == [number] [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . out [EOL] [EOL] def test_normalize_existing_vendor ( self ) : [EOL] from azafea . event_processors . endless . activation . v1 . handler import Activation [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] ) [EOL] self . ensure_tables ( Activation ) [EOL] [EOL] [comment] [EOL] created_at = datetime . utcnow ( ) . replace ( tzinfo = timezone . utc ) [EOL] bad_vendor = [string] [EOL] [EOL] with self . db as dbsession : [EOL] dbsession . add ( Activation ( image = [string] , product = [string] , release = [string] , country = [string] , created_at = created_at , vendor = bad_vendor ) ) [EOL] [EOL] with self . db as dbsession : [EOL] activation = dbsession . query ( Activation ) . one ( ) [EOL] assert activation . vendor == bad_vendor [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] , [string] ) [EOL] good_vendor = normalize_vendor ( bad_vendor ) [EOL] [EOL] with self . db as dbsession : [EOL] activation = dbsession . query ( Activation ) . one ( ) [EOL] assert activation . vendor == good_vendor [EOL] [EOL] def test_normalize_already_normalized_vendor ( self ) : [EOL] from azafea . event_processors . endless . activation . v1 . handler import Activation [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] ) [EOL] self . ensure_tables ( Activation ) [EOL] [EOL] [comment] [EOL] created_at = datetime . utcnow ( ) . replace ( tzinfo = timezone . utc ) [EOL] vendor = [string] [EOL] assert vendor == normalize_vendor ( vendor ) [EOL] [EOL] with self . db as dbsession : [EOL] dbsession . add ( Activation ( image = [string] , product = [string] , release = [string] , country = [string] , created_at = created_at , vendor = vendor ) ) [EOL] [EOL] with self . db as dbsession : [EOL] activation = dbsession . query ( Activation ) . one ( ) [EOL] assert activation . vendor == vendor [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] , [string] ) [EOL] [EOL] with self . db as dbsession : [EOL] activation = dbsession . query ( Activation ) . one ( ) [EOL] assert activation . vendor == vendor [EOL] [EOL] def test_parse_old_images ( self ) : [EOL] from azafea . event_processors . endless . activation . v1 . handler import Activation [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] ) [EOL] self . ensure_tables ( Activation ) [EOL] [EOL] [comment] [EOL] image_id = [string] [EOL] created_at = datetime . utcnow ( ) . replace ( tzinfo = timezone . utc ) [EOL] [EOL] with self . db as dbsession : [EOL] dbsession . add ( Activation ( image = image_id , product = [string] , release = [string] , country = [string] , created_at = created_at , vendor = [string] ) ) [EOL] [EOL] with self . db as dbsession : [EOL] activation = dbsession . query ( Activation ) . one ( ) [EOL] assert activation . image == image_id [EOL] assert activation . image_product is None [EOL] assert activation . image_branch is None [EOL] assert activation . image_arch is None [EOL] assert activation . image_platform is None [EOL] assert activation . image_timestamp is None [EOL] assert activation . image_personality is None [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] , [string] ) [EOL] [EOL] with self . db as dbsession : [EOL] activation = dbsession . query ( Activation ) . one ( ) [EOL] assert activation . image == image_id [EOL] assert activation . image_product == [string] [EOL] assert activation . image_branch == [string] [EOL] assert activation . image_arch == [string] [EOL] assert activation . image_platform == [string] [EOL] assert activation . image_timestamp == datetime ( [number] , [number] , [number] , [number] , [number] , [number] , tzinfo = timezone . utc ) [EOL] assert activation . image_personality == [string] [EOL] [EOL] def test_parse_old_images_skips_already_done ( self , capfd ) : [EOL] from azafea . event_processors . endless . activation . v1 . handler import Activation [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] ) [EOL] self . ensure_tables ( Activation ) [EOL] [EOL] [comment] [EOL] image_id = [string] [EOL] created_at = datetime . utcnow ( ) . replace ( tzinfo = timezone . utc ) [EOL] [EOL] with self . db as dbsession : [EOL] dbsession . add ( Activation ( image = image_id , image_product = [string] , image_branch = [string] , image_arch = [string] , image_platform = [string] , image_timestamp = datetime ( [number] , [number] , [number] , [number] , [number] , [number] , tzinfo = timezone . utc ) , image_personality = [string] , product = [string] , release = [string] , country = [string] , created_at = created_at , vendor = [string] ) ) [EOL] [EOL] with self . db as dbsession : [EOL] activation = dbsession . query ( Activation ) . one ( ) [EOL] assert activation . image == image_id [EOL] assert activation . image_product == [string] [EOL] assert activation . image_branch == [string] [EOL] assert activation . image_arch == [string] [EOL] assert activation . image_platform == [string] [EOL] assert activation . image_timestamp == datetime ( [number] , [number] , [number] , [number] , [number] , [number] , tzinfo = timezone . utc ) [EOL] assert activation . image_personality == [string] [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] , [string] ) [EOL] [EOL] with self . db as dbsession : [EOL] activation = dbsession . query ( Activation ) . one ( ) [EOL] assert activation . image == image_id [EOL] assert activation . image_product == [string] [EOL] assert activation . image_branch == [string] [EOL] assert activation . image_arch == [string] [EOL] assert activation . image_platform == [string] [EOL] assert activation . image_timestamp == datetime ( [number] , [number] , [number] , [number] , [number] , [number] , tzinfo = timezone . utc ) [EOL] assert activation . image_personality == [string] [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . out [EOL] [EOL] def test_parse_old_unknown_images ( self , capfd ) : [EOL] from azafea . event_processors . endless . activation . v1 . handler import Activation [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] ) [EOL] self . ensure_tables ( Activation ) [EOL] [EOL] [comment] [EOL] image_id = [string] [EOL] created_at = datetime . utcnow ( ) . replace ( tzinfo = timezone . utc ) [EOL] [EOL] with self . db as dbsession : [EOL] dbsession . add ( Activation ( image = image_id , product = [string] , release = [string] , country = [string] , created_at = created_at , vendor = [string] ) ) [EOL] [EOL] with self . db as dbsession : [EOL] activation = dbsession . query ( Activation ) . one ( ) [EOL] assert activation . image == image_id [EOL] assert activation . image_product is None [EOL] assert activation . image_branch is None [EOL] assert activation . image_arch is None [EOL] assert activation . image_platform is None [EOL] assert activation . image_timestamp is None [EOL] assert activation . image_personality is None [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] , [string] ) [EOL] [EOL] with self . db as dbsession : [EOL] activation = dbsession . query ( Activation ) . one ( ) [EOL] assert activation . image == image_id [EOL] assert activation . image_product is None [EOL] assert activation . image_branch is None [EOL] assert activation . image_arch is None [EOL] assert activation . image_platform is None [EOL] assert activation . image_timestamp is None [EOL] assert activation . image_personality is None [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . out [EOL] [EOL] def test_transform_countries_alpha_3_to_2 ( self , capfd ) : [EOL] from azafea . event_processors . endless . activation . v1 . handler import Activation [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] ) [EOL] self . ensure_tables ( Activation ) [EOL] [EOL] created_at = datetime . utcnow ( ) . replace ( tzinfo = timezone . utc ) [EOL] [EOL] with self . db as dbsession : [EOL] activation = Activation ( image = [string] , product = [string] , release = [string] , country = [string] , created_at = created_at , vendor = [string] ) [EOL] dbsession . add ( activation ) [EOL] [EOL] with self . db as dbsession : [EOL] [comment] [EOL] dbsession . execute ( [string] ) [EOL] [EOL] with self . db as dbsession : [EOL] activation = dbsession . query ( Activation ) . one ( ) [EOL] assert activation . country == [string] [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] , [string] ) [EOL] [EOL] with self . db as dbsession : [EOL] activation = dbsession . query ( Activation ) . one ( ) [EOL] assert activation . country == [string] [EOL] [EOL] def test_transform_countries_alpha_3_to_2_only_2 ( self , capfd ) : [EOL] from azafea . event_processors . endless . activation . v1 . handler import Activation [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] ) [EOL] self . ensure_tables ( Activation ) [EOL] [EOL] created_at = datetime . utcnow ( ) . replace ( tzinfo = timezone . utc ) [EOL] [EOL] with self . db as dbsession : [EOL] activation = Activation ( image = [string] , product = [string] , release = [string] , country = [string] , created_at = created_at , vendor = [string] ) [EOL] dbsession . add ( activation ) [EOL] [EOL] self . run_subcommand ( [string] , [string] ) [EOL] [EOL] with self . db as dbsession : [EOL] activation = dbsession . query ( Activation ) . one ( ) [EOL] assert activation . country == [string] [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . out [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 $datetime.datetime.datetime$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 $datetime.datetime.datetime$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Any [EOL] import datetime [EOL] import typing [EOL] from datetime import datetime , timezone [EOL] import json [EOL] [EOL] from azafea . tests . integration import IntegrationTest [EOL] [EOL] [EOL] class TestActivation ( IntegrationTest ) : [EOL] handler_module = [string] [EOL] [EOL] def test_activation_v1 ( self ) : [EOL] from azafea . event_processors . endless . activation . v1 . handler import Activation [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] ) [EOL] self . ensure_tables ( Activation ) [EOL] [EOL] [comment] [EOL] created_at = datetime . utcnow ( ) . replace ( tzinfo = timezone . utc ) [EOL] self . redis . lpush ( [string] , json . dumps ( { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : created_at . strftime ( [string] ) , } ) ) [EOL] [EOL] [comment] [EOL] self . run_azafea ( ) [EOL] [EOL] [comment] [EOL] with self . db as dbsession : [EOL] activation = dbsession . query ( Activation ) . one ( ) [EOL] assert activation . image == [string] [EOL] assert activation . vendor == [string] [EOL] assert activation . product == [string] [EOL] assert activation . release == [string] [EOL] assert activation . country == [string] [EOL] assert activation . created_at == created_at [EOL] assert activation . image_product == [string] [EOL] assert activation . image_branch == [string] [EOL] assert activation . image_arch == [string] [EOL] assert activation . image_platform == [string] [EOL] assert activation . image_timestamp == datetime ( [number] , [number] , [number] , [number] , [number] , [number] , tzinfo = timezone . utc ) [EOL] assert activation . image_personality == [string] [EOL] [EOL] def test_activation_v1_unknown_image ( self ) : [EOL] from azafea . event_processors . endless . activation . v1 . handler import Activation [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] ) [EOL] self . ensure_tables ( Activation ) [EOL] [EOL] [comment] [EOL] created_at = datetime . utcnow ( ) . replace ( tzinfo = timezone . utc ) [EOL] self . redis . lpush ( [string] , json . dumps ( { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : created_at . strftime ( [string] ) , } ) ) [EOL] [EOL] [comment] [EOL] self . run_azafea ( ) [EOL] [EOL] [comment] [EOL] with self . db as dbsession : [EOL] activation = dbsession . query ( Activation ) . one ( ) [EOL] assert activation . image == [string] [EOL] assert activation . vendor == [string] [EOL] assert activation . product == [string] [EOL] assert activation . release == [string] [EOL] assert activation . country == [string] [EOL] assert activation . created_at == created_at [EOL] assert activation . image_product is None [EOL] assert activation . image_branch is None [EOL] assert activation . image_arch is None [EOL] assert activation . image_platform is None [EOL] assert activation . image_timestamp is None [EOL] assert activation . image_personality is None [EOL] [EOL] def test_activation_v1_invalid_image ( self , capfd ) : [EOL] from azafea . event_processors . endless . activation . v1 . handler import Activation [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] ) [EOL] self . ensure_tables ( Activation ) [EOL] [EOL] [comment] [EOL] created_at = datetime . utcnow ( ) . replace ( tzinfo = timezone . utc ) [EOL] self . redis . lpush ( [string] , json . dumps ( { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : created_at . strftime ( [string] ) , } ) ) [EOL] [EOL] [comment] [EOL] self . run_azafea ( ) [EOL] [EOL] [comment] [EOL] with self . db as dbsession : [EOL] assert dbsession . query ( Activation ) . count ( ) == [number] [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] f" [string] " in capture . err [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $datetime.datetime.datetime$ 0 $datetime.datetime.datetime$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $datetime.datetime.datetime$ 0 $datetime.datetime.datetime$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from datetime import datetime , timezone [EOL] [EOL] import pytest [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : datetime ( [number] , [number] , [number] , [number] , [number] , [number] , tzinfo = timezone . utc ) , [string] : [string] } ) , ( [string] , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : datetime ( [number] , [number] , [number] , [number] , [number] , [number] , tzinfo = timezone . utc ) , [string] : [string] } ) , ( [string] , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : datetime ( [number] , [number] , [number] , [number] , [number] , [number] , tzinfo = timezone . utc ) , [string] : [string] } ) , ( [string] , { [string] : None , [string] : None , [string] : None , [string] : None , [string] : None , [string] : None } ) , ] ) def test_parse_endless_os_image ( image_id , expected ) : [EOL] from azafea . event_processors . endless . image import parse_endless_os_image [EOL] [EOL] assert parse_endless_os_image ( image_id ) == expected [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] ) def test_parse_endless_os_invalid_image ( invalid_image_id ) : [EOL] from azafea . event_processors . endless . image import ImageParsingError , parse_endless_os_image [EOL] [EOL] with pytest . raises ( ImageParsingError ) as excinfo : [EOL] parse_endless_os_image ( invalid_image_id ) [EOL] [EOL] assert ( f' [string] { invalid_image_id !r} [string] ' ) in str ( excinfo . value ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , ] ) def test_parse_endless_os_image_invalid_date ( invalid_image_id ) : [EOL] from azafea . event_processors . endless . image import ImageParsingError , parse_endless_os_image [EOL] [EOL] with pytest . raises ( ImageParsingError ) as excinfo : [EOL] parse_endless_os_image ( invalid_image_id ) [EOL] [EOL] assert f' [string] { invalid_image_id !r} [string] ' in str ( excinfo . value ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , ] ) def test_parse_endless_os_image_invalid_time ( invalid_image_id ) : [EOL] from azafea . event_processors . endless . image import ImageParsingError , parse_endless_os_image [EOL] [EOL] with pytest . raises ( ImageParsingError ) as excinfo : [EOL] parse_endless_os_image ( invalid_image_id ) [EOL] [EOL] assert f' [string] { invalid_image_id !r} [string] ' in str ( excinfo . value ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Type , Dict , Any [EOL] import builtins [EOL] import typing [EOL] import azafea [EOL] from typing import Any , Dict [EOL] [EOL] from sqlalchemy . dialects . postgresql import insert [EOL] from sqlalchemy . schema import Column [EOL] from sqlalchemy . sql import expression [EOL] from sqlalchemy . types import Boolean , DateTime , Integer , Unicode [EOL] [EOL] from azafea . model import Base , DbSession [EOL] [EOL] from . . image import parse_endless_os_image [EOL] [EOL] [EOL] class Machine ( Base ) : [EOL] __tablename__ = [string] [EOL] [EOL] id = Column ( Integer , primary_key = True ) [EOL] machine_id = Column ( Unicode ( [number] ) , nullable = False , unique = True ) [EOL] image_id = Column ( Unicode ) [EOL] image_product = Column ( Unicode , index = True ) [EOL] image_branch = Column ( Unicode , index = True ) [EOL] image_arch = Column ( Unicode , index = True ) [EOL] image_platform = Column ( Unicode , index = True ) [EOL] image_timestamp = Column ( DateTime ( timezone = True ) , index = True ) [EOL] image_personality = Column ( Unicode , index = True ) [EOL] demo = Column ( Boolean , server_default = expression . false ( ) ) [EOL] dualboot = Column ( Boolean , server_default = expression . false ( ) ) [EOL] live = Column ( Boolean , server_default = expression . false ( ) ) [EOL] [EOL] [EOL] def upsert_machine_demo ( dbsession , machine_id ) : [EOL] stmt = insert ( Machine . __table__ ) . values ( machine_id = machine_id , demo = True ) [EOL] stmt = stmt . on_conflict_do_update ( constraint = [string] , set_ = { [string] : True } ) [EOL] [EOL] dbsession . connection ( ) . execute ( stmt ) [EOL] [EOL] [EOL] def upsert_machine_dualboot ( dbsession , machine_id ) : [EOL] stmt = insert ( Machine . __table__ ) . values ( machine_id = machine_id , dualboot = True ) [EOL] stmt = stmt . on_conflict_do_update ( constraint = [string] , set_ = { [string] : True } ) [EOL] [EOL] dbsession . connection ( ) . execute ( stmt ) [EOL] [EOL] [EOL] def upsert_machine_image ( dbsession , machine_id , image_id ) : [EOL] image_values = { [string] : image_id , ** parse_endless_os_image ( image_id ) } [EOL] [EOL] stmt = insert ( Machine . __table__ ) . values ( machine_id = machine_id , ** image_values ) [EOL] stmt = stmt . on_conflict_do_update ( constraint = [string] , set_ = image_values ) [EOL] [EOL] dbsession . connection ( ) . execute ( stmt ) [EOL] [EOL] [EOL] def upsert_machine_live ( dbsession , machine_id ) : [EOL] stmt = insert ( Machine . __table__ ) . values ( machine_id = machine_id , live = True ) [EOL] stmt = stmt . on_conflict_do_update ( constraint = [string] , set_ = { [string] : True } ) [EOL] [EOL] dbsession . connection ( ) . execute ( stmt ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[azafea.event_processors.endless.metrics.machine.Machine]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[azafea.event_processors.endless.metrics.machine.Machine]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[azafea.event_processors.endless.metrics.machine.Machine]$ 0 0 0 0 0 0 $typing.Type[azafea.event_processors.endless.metrics.machine.Machine]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[azafea.event_processors.endless.metrics.machine.Machine]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[azafea.event_processors.endless.metrics.machine.Machine]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[azafea.event_processors.endless.metrics.machine.Machine]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[azafea.event_processors.endless.metrics.machine.Machine]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[azafea.event_processors.endless.metrics.machine.Machine]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[azafea.event_processors.endless.metrics.machine.Machine]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[azafea.event_processors.endless.metrics.machine.Machine]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[azafea.event_processors.endless.metrics.machine.Machine]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
[comment] [EOL] [EOL] [docstring] [EOL] from alembic import op [EOL] [EOL] [EOL] [comment] [EOL] revision = [string] [EOL] down_revision = [string] [EOL] branch_labels = None [EOL] depends_on = None [EOL] [EOL] [EOL] def upgrade ( ) : [EOL] op . execute ( [string] [string] ) [EOL] [EOL] [EOL] def downgrade ( ) : [EOL] op . execute ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [docstring] [EOL] from alembic import op [EOL] import sqlalchemy as sa [EOL] [EOL] [EOL] [comment] [EOL] revision = [string] [EOL] down_revision = [string] [EOL] branch_labels = None [EOL] depends_on = None [EOL] [EOL] [EOL] def upgrade ( ) : [EOL] op . add_column ( [string] , sa . Column ( [string] , sa . Boolean ( ) , nullable = True , server_default = sa . sql . expression . false ( ) ) ) [EOL] [EOL] [EOL] def downgrade ( ) : [EOL] op . drop_column ( [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [docstring] [EOL] from alembic import op [EOL] import sqlalchemy as sa [EOL] [EOL] [EOL] [comment] [EOL] revision = [string] [EOL] down_revision = [string] [EOL] branch_labels = None [EOL] depends_on = None [EOL] [EOL] [EOL] def upgrade ( ) : [EOL] op . execute ( [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] ) [EOL] op . create_index ( op . f ( [string] ) , [string] , [ sa . text ( [string] ) ] , unique = False ) [EOL] op . execute ( [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] ) [EOL] op . create_index ( op . f ( [string] ) , [string] , [ sa . text ( [string] ) ] , unique = False ) [EOL] [EOL] [EOL] def downgrade ( ) : [EOL] op . execute ( [string] ) [EOL] op . execute ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] from . cli import register_commands [comment] [EOL] from . handler import process [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Type , Dict , Any , Optional [EOL] import logging [EOL] import builtins [EOL] import azafea [EOL] import typing [EOL] import json [EOL] import logging [EOL] from typing import Optional [EOL] [EOL] from sqlalchemy . dialects . postgresql import insert [EOL] from sqlalchemy . inspection import inspect [EOL] from sqlalchemy . orm import relationship , validates [EOL] from sqlalchemy . schema import CheckConstraint , Column , ForeignKey , UniqueConstraint [EOL] from sqlalchemy . types import Boolean , DateTime , Integer , Unicode [EOL] [EOL] from azafea . model import Base , DbSession , NullableBoolean [EOL] from azafea . vendors import normalize_vendor [EOL] [EOL] from . . . image import parse_endless_os_image [EOL] [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class PingConfiguration ( Base ) : [EOL] __tablename__ = [string] [EOL] [EOL] id = Column ( Integer , primary_key = True ) [EOL] image = Column ( Unicode , nullable = False ) [EOL] vendor = Column ( Unicode , nullable = False ) [EOL] product = Column ( Unicode , nullable = False ) [EOL] dualboot = Column ( NullableBoolean , nullable = False , server_default = [string] ) [EOL] created_at = Column ( DateTime ( timezone = True ) , nullable = False , index = True ) [EOL] [EOL] image_product = Column ( Unicode , index = True ) [EOL] image_branch = Column ( Unicode , index = True ) [EOL] image_arch = Column ( Unicode , index = True ) [EOL] image_platform = Column ( Unicode , index = True ) [EOL] image_timestamp = Column ( DateTime ( timezone = True ) , index = True ) [EOL] image_personality = Column ( Unicode , index = True ) [EOL] [EOL] __table_args__ = ( UniqueConstraint ( image , vendor , product , dualboot , name = [string] ) , ) [EOL] [EOL] @ classmethod def id_from_serialized ( cls , serialized , dbsession ) : [EOL] record = json . loads ( serialized . decode ( [string] ) ) [EOL] [EOL] columns = inspect ( cls ) . attrs [EOL] record = { k : v for ( k , v ) in record . items ( ) if k in columns } [EOL] [EOL] record [ [string] ] = normalize_vendor ( record . get ( [string] , [string] ) ) [EOL] [EOL] [comment] [EOL] if [string] in record : [comment] [EOL] record . update ( ** parse_endless_os_image ( record [ [string] ] ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] stmt = insert ( PingConfiguration . __table__ ) . values ( ** record ) [EOL] stmt = stmt . returning ( PingConfiguration . __table__ . c . id ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] stmt = stmt . on_conflict_do_update ( constraint = [string] , set_ = { [string] : record [ [string] ] } ) [EOL] result = dbsession . connection ( ) . execute ( stmt ) [EOL] dbsession . commit ( ) [EOL] [EOL] return result . first ( ) [ [number] ] [EOL] [EOL] [EOL] class Ping ( Base ) : [EOL] __tablename__ = [string] [EOL] [EOL] id = Column ( Integer , primary_key = True ) [EOL] config_id = Column ( Integer , ForeignKey ( [string] ) , nullable = False , index = True ) [EOL] release = Column ( Unicode , nullable = False ) [EOL] count = Column ( Integer , nullable = False ) [EOL] country = Column ( Unicode ( length = [number] ) ) [EOL] metrics_enabled = Column ( Boolean ) [EOL] metrics_environment = Column ( Unicode ) [EOL] created_at = Column ( DateTime ( timezone = True ) , nullable = False , index = True ) [EOL] [EOL] __table_args__ = ( CheckConstraint ( [string] , name = [string] ) , CheckConstraint ( [string] , name = [string] ) , ) [EOL] [EOL] config = relationship ( [string] ) [EOL] [EOL] [comment] [EOL] @ validates ( [string] ) def validate_country ( self , key , country ) : [EOL] [comment] [EOL] if not country : [EOL] return None [EOL] [EOL] if len ( country ) not in ( [number] , [number] ) : [EOL] raise ValueError ( f' [string] { country }' ) [EOL] [EOL] return country [EOL] [EOL] @ classmethod def from_serialized ( cls , serialized ) : [EOL] record = json . loads ( serialized . decode ( [string] ) ) [EOL] [EOL] [comment] [EOL] record . setdefault ( [string] , [number] ) [EOL] [EOL] return cls ( ** record ) [EOL] [EOL] [EOL] def process ( dbsession , record ) : [EOL] log . debug ( [string] , record ) [EOL] [EOL] ping_config_id = PingConfiguration . id_from_serialized ( record , dbsession ) [EOL] [EOL] ping = Ping . from_serialized ( record ) [EOL] ping . config_id = ping_config_id [EOL] dbsession . add ( ping ) [EOL] log . debug ( [string] , ping ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[azafea.event_processors.endless.ping.v1.handler.Ping]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.str$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $'Ping'$ 0 0 0 $builtins.bytes$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] import datetime [EOL] import azafea [EOL] from datetime import datetime , timezone [EOL] import json [EOL] [EOL] [EOL] def test_from_bytes ( ) : [EOL] from azafea . event_processors . endless . ping . v1 . handler import Ping [EOL] [EOL] created_at = datetime . utcnow ( ) . replace ( tzinfo = timezone . utc ) [EOL] ping = Ping . from_serialized ( json . dumps ( { [string] : [string] , [string] : [number] , [string] : created_at . strftime ( [string] ) , } ) . encode ( [string] ) ) [EOL] [EOL] assert ping . release == [string] [EOL] assert ping . count == [number] [EOL] [EOL] [comment] [EOL] assert ping . created_at == created_at . strftime ( [string] ) [EOL] [EOL] [EOL] def test_from_bytes_missing_count ( ) : [EOL] from azafea . event_processors . endless . ping . v1 . handler import Ping [EOL] [EOL] created_at = datetime . utcnow ( ) . replace ( tzinfo = timezone . utc ) [EOL] ping = Ping . from_serialized ( json . dumps ( { [string] : [string] , [string] : created_at . strftime ( [string] ) , } ) . encode ( [string] ) ) [EOL] [EOL] assert ping . release == [string] [EOL] assert ping . count == [number] [EOL] [EOL] [comment] [EOL] assert ping . created_at == created_at . strftime ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import pytest [EOL] [EOL] [EOL] def test_valid_country ( ) : [EOL] from azafea . event_processors . endless . ping . v1 . handler import Ping [EOL] [EOL] ping = Ping ( country = [string] ) [EOL] assert ping . country == [string] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , None ] ) def test_empty_country ( country ) : [EOL] from azafea . event_processors . endless . ping . v1 . handler import Ping [EOL] [EOL] ping = Ping ( country = country ) [EOL] assert ping . country is None [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] ] ) def test_invalid_country ( country ) : [EOL] from azafea . event_processors . endless . ping . v1 . handler import Ping [EOL] [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] Ping ( country = country ) [EOL] [EOL] assert f' [string] { country }' in str ( excinfo . value ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Any [EOL] import datetime [EOL] import typing [EOL] from datetime import datetime , timezone [EOL] import json [EOL] [EOL] from azafea . tests . integration import IntegrationTest [EOL] [EOL] [EOL] class TestPing ( IntegrationTest ) : [EOL] handler_module = [string] [EOL] [EOL] def test_ping_v1 ( self ) : [EOL] from azafea . event_processors . endless . ping . v1 . handler import PingConfiguration , Ping [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] ) [EOL] self . ensure_tables ( Ping , PingConfiguration ) [EOL] [EOL] [comment] [EOL] created_at = datetime . utcnow ( ) . replace ( tzinfo = timezone . utc ) [EOL] self . redis . lpush ( [string] , json . dumps ( { [string] : [string] , [string] : [string] , [string] : [string] , [string] : True , [string] : [string] , [string] : [number] , [string] : created_at . strftime ( [string] ) , } ) ) [EOL] [EOL] [comment] [EOL] self . run_azafea ( ) [EOL] [EOL] [comment] [EOL] with self . db as dbsession : [EOL] config = dbsession . query ( PingConfiguration ) . one ( ) [EOL] assert config . image == [string] [EOL] assert config . vendor == [string] [EOL] assert config . product == [string] [EOL] assert config . dualboot is True [EOL] assert config . created_at == created_at [EOL] assert config . image_product == [string] [EOL] assert config . image_branch == [string] [EOL] assert config . image_arch == [string] [EOL] assert config . image_platform == [string] [EOL] assert config . image_timestamp == datetime ( [number] , [number] , [number] , [number] , [number] , [number] , tzinfo = timezone . utc ) [EOL] assert config . image_personality == [string] [EOL] [EOL] ping = dbsession . query ( Ping ) . one ( ) [EOL] assert ping . release == [string] [EOL] assert ping . count == [number] [EOL] assert ping . created_at == created_at [EOL] [EOL] def test_ping_configuration_v1_dualboot_unicity ( self ) : [EOL] from azafea . event_processors . endless . ping . v1 . handler import PingConfiguration , Ping [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] ) [EOL] self . ensure_tables ( Ping , PingConfiguration ) [EOL] [EOL] [comment] [EOL] created_at = datetime . utcnow ( ) . replace ( tzinfo = timezone . utc ) [EOL] for i in range ( [number] ) : [EOL] self . redis . lpush ( [string] , json . dumps ( { [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( True , False , None ) [ i % [number] ] , [string] : [string] , [string] : [number] , [string] : created_at . strftime ( [string] ) , } ) ) [EOL] [EOL] [comment] [EOL] self . run_azafea ( ) [EOL] [EOL] [comment] [EOL] with self . db as dbsession : [EOL] configs = dbsession . query ( PingConfiguration ) [EOL] assert configs . count ( ) == [number] [EOL] [EOL] configs = configs . order_by ( PingConfiguration . dualboot ) [EOL] [EOL] for i , config in enumerate ( configs ) : [EOL] assert config . image == [string] [EOL] assert config . vendor == [string] [EOL] assert config . product == [string] [EOL] assert config . dualboot == ( True , False , None ) [ i % [number] ] [EOL] assert config . created_at == created_at [EOL] [EOL] pings = dbsession . query ( Ping ) [EOL] assert pings . count ( ) == [number] [EOL] [EOL] def test_ping_v1_unknown_image ( self ) : [EOL] from azafea . event_processors . endless . ping . v1 . handler import PingConfiguration , Ping [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] ) [EOL] self . ensure_tables ( Ping , PingConfiguration ) [EOL] [EOL] [comment] [EOL] created_at = datetime . utcnow ( ) . replace ( tzinfo = timezone . utc ) [EOL] self . redis . lpush ( [string] , json . dumps ( { [string] : [string] , [string] : [string] , [string] : [string] , [string] : True , [string] : [string] , [string] : [number] , [string] : created_at . strftime ( [string] ) , } ) ) [EOL] [EOL] [comment] [EOL] self . run_azafea ( ) [EOL] [EOL] [comment] [EOL] with self . db as dbsession : [EOL] config = dbsession . query ( PingConfiguration ) . one ( ) [EOL] assert config . image == [string] [EOL] assert config . vendor == [string] [EOL] assert config . product == [string] [EOL] assert config . dualboot is True [EOL] assert config . created_at == created_at [EOL] assert config . image_product is None [EOL] assert config . image_branch is None [EOL] assert config . image_arch is None [EOL] assert config . image_platform is None [EOL] assert config . image_timestamp is None [EOL] assert config . image_personality is None [EOL] [EOL] ping = dbsession . query ( Ping ) . one ( ) [EOL] assert ping . release == [string] [EOL] assert ping . count == [number] [EOL] assert ping . created_at == created_at [EOL] [EOL] def test_ping_v1_invalid_image ( self , capfd ) : [EOL] from azafea . event_processors . endless . ping . v1 . handler import PingConfiguration , Ping [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] ) [EOL] self . ensure_tables ( Ping , PingConfiguration ) [EOL] [EOL] [comment] [EOL] created_at = datetime . utcnow ( ) . replace ( tzinfo = timezone . utc ) [EOL] self . redis . lpush ( [string] , json . dumps ( { [string] : [string] , [string] : [string] , [string] : [string] , [string] : True , [string] : [string] , [string] : [number] , [string] : created_at . strftime ( [string] ) , } ) ) [EOL] [EOL] [comment] [EOL] self . run_azafea ( ) [EOL] [EOL] [comment] [EOL] with self . db as dbsession : [EOL] assert dbsession . query ( PingConfiguration ) . count ( ) == [number] [EOL] assert dbsession . query ( Ping ) . count ( ) == [number] [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] f" [string] " in capture . err [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $datetime.datetime.datetime$ 0 $datetime.datetime.datetime$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $datetime.datetime.datetime$ 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 $datetime.datetime.datetime$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $datetime.datetime.datetime$ 0 $datetime.datetime.datetime$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $datetime.datetime.datetime$ 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Any [EOL] import datetime [EOL] import typing [EOL] from datetime import datetime , timezone [EOL] [EOL] from azafea . tests . integration import IntegrationTest [EOL] from azafea . vendors import normalize_vendor [EOL] [EOL] [EOL] class TestPing ( IntegrationTest ) : [EOL] handler_module = [string] [EOL] [EOL] def test_normalize_no_vendors ( self , capfd ) : [EOL] from azafea . event_processors . endless . ping . v1 . handler import PingConfiguration [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] ) [EOL] self . ensure_tables ( PingConfiguration ) [EOL] [EOL] with self . db as dbsession : [EOL] assert dbsession . query ( PingConfiguration ) . count ( ) == [number] [EOL] [EOL] self . run_subcommand ( [string] , [string] ) [EOL] [EOL] with self . db as dbsession : [EOL] assert dbsession . query ( PingConfiguration ) . count ( ) == [number] [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . out [EOL] [EOL] def test_normalize_existing_vendor ( self ) : [EOL] from azafea . event_processors . endless . ping . v1 . handler import PingConfiguration [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] ) [EOL] self . ensure_tables ( PingConfiguration ) [EOL] [EOL] [comment] [EOL] created_at = datetime . utcnow ( ) . replace ( tzinfo = timezone . utc ) [EOL] bad_vendor = [string] [EOL] [EOL] with self . db as dbsession : [EOL] dbsession . add ( PingConfiguration ( image = [string] , product = [string] , dualboot = True , created_at = created_at , vendor = bad_vendor ) ) [EOL] [EOL] with self . db as dbsession : [EOL] ping_config = dbsession . query ( PingConfiguration ) . one ( ) [EOL] assert ping_config . vendor == bad_vendor [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] , [string] ) [EOL] good_vendor = normalize_vendor ( bad_vendor ) [EOL] [EOL] with self . db as dbsession : [EOL] ping_config = dbsession . query ( PingConfiguration ) . one ( ) [EOL] assert ping_config . vendor == good_vendor [EOL] [EOL] def test_normalize_already_normalized_vendor ( self ) : [EOL] from azafea . event_processors . endless . ping . v1 . handler import PingConfiguration [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] ) [EOL] self . ensure_tables ( PingConfiguration ) [EOL] [EOL] [comment] [EOL] created_at = datetime . utcnow ( ) . replace ( tzinfo = timezone . utc ) [EOL] vendor = [string] [EOL] assert vendor == normalize_vendor ( vendor ) [EOL] [EOL] with self . db as dbsession : [EOL] dbsession . add ( PingConfiguration ( image = [string] , product = [string] , dualboot = True , created_at = created_at , vendor = vendor ) ) [EOL] [EOL] with self . db as dbsession : [EOL] ping_config = dbsession . query ( PingConfiguration ) . one ( ) [EOL] assert ping_config . vendor == vendor [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] , [string] ) [EOL] [EOL] with self . db as dbsession : [EOL] ping_config = dbsession . query ( PingConfiguration ) . one ( ) [EOL] assert ping_config . vendor == vendor [EOL] [EOL] def test_normalize_vendors_to_same_new_vendor ( self ) : [EOL] from azafea . event_processors . endless . ping . v1 . handler import Ping , PingConfiguration [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] ) [EOL] self . ensure_tables ( PingConfiguration ) [EOL] [EOL] [comment] [EOL] created_at = datetime . utcnow ( ) . replace ( tzinfo = timezone . utc ) [EOL] [EOL] with self . db as dbsession : [EOL] ping_config = PingConfiguration ( image = [string] , product = [string] , dualboot = True , created_at = created_at , vendor = [string] ) [EOL] dbsession . add ( ping_config ) [EOL] dbsession . add ( Ping ( config = ping_config , release = [string] , count = [number] , created_at = created_at ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] created_at = datetime . utcnow ( ) . replace ( tzinfo = timezone . utc ) [EOL] [EOL] with self . db as dbsession : [EOL] ping_config = PingConfiguration ( image = [string] , product = [string] , dualboot = True , created_at = created_at , vendor = [string] ) [EOL] dbsession . add ( ping_config ) [EOL] dbsession . add ( Ping ( config = ping_config , release = [string] , count = [number] , created_at = created_at ) ) [EOL] [EOL] [comment] [EOL] with self . db as dbsession : [EOL] configs = dbsession . query ( PingConfiguration ) . order_by ( PingConfiguration . created_at ) [EOL] assert configs . count ( ) == [number] [EOL] [EOL] configs = configs . all ( ) [EOL] assert configs [ [number] ] . vendor == [string] [EOL] assert configs [ [number] ] . vendor == [string] [EOL] kept_config_id = configs [ [number] ] . id [EOL] [EOL] pings = dbsession . query ( Ping ) . order_by ( Ping . created_at ) [EOL] assert pings . count ( ) == [number] [EOL] [EOL] pings = pings . all ( ) [EOL] assert pings [ [number] ] . config_id == configs [ [number] ] . id [EOL] assert pings [ [number] ] . count == [number] [EOL] assert pings [ [number] ] . config_id == configs [ [number] ] . id [EOL] assert pings [ [number] ] . count == [number] [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] , [string] ) [EOL] [EOL] with self . db as dbsession : [EOL] config = dbsession . query ( PingConfiguration ) . one ( ) [EOL] assert config . vendor == [string] [EOL] assert config . id == kept_config_id [EOL] [EOL] pings = dbsession . query ( Ping ) . order_by ( Ping . created_at ) [EOL] assert pings . count ( ) == [number] [EOL] [EOL] pings = pings . all ( ) [EOL] assert pings [ [number] ] . config_id == kept_config_id [EOL] assert pings [ [number] ] . config_id == kept_config_id [EOL] [EOL] def test_normalize_vendor_with_conflict_and_pings ( self ) : [EOL] from azafea . event_processors . endless . ping . v1 . handler import Ping , PingConfiguration [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] ) [EOL] self . ensure_tables ( PingConfiguration ) [EOL] [EOL] [comment] [EOL] created_at = datetime . utcnow ( ) . replace ( tzinfo = timezone . utc ) [EOL] bad_vendor = [string] [EOL] [EOL] with self . db as dbsession : [EOL] ping_config = PingConfiguration ( image = [string] , product = [string] , dualboot = True , created_at = created_at , vendor = bad_vendor ) [EOL] dbsession . add ( ping_config ) [EOL] dbsession . add ( Ping ( config = ping_config , release = [string] , count = [number] , created_at = created_at ) ) [EOL] [EOL] [comment] [EOL] created_at = datetime . utcnow ( ) . replace ( tzinfo = timezone . utc ) [EOL] good_vendor = normalize_vendor ( bad_vendor ) [EOL] [EOL] with self . db as dbsession : [EOL] ping_config = PingConfiguration ( image = [string] , product = [string] , dualboot = True , created_at = created_at , vendor = good_vendor ) [EOL] dbsession . add ( ping_config ) [EOL] dbsession . add ( Ping ( config = ping_config , release = [string] , count = [number] , created_at = created_at ) ) [EOL] [EOL] [comment] [EOL] with self . db as dbsession : [EOL] configs = dbsession . query ( PingConfiguration ) . order_by ( PingConfiguration . created_at ) [EOL] assert configs . count ( ) == [number] [EOL] [EOL] configs = configs . all ( ) [EOL] assert configs [ [number] ] . vendor == bad_vendor [EOL] assert configs [ [number] ] . vendor == good_vendor [EOL] kept_config_id = configs [ [number] ] . id [EOL] [EOL] pings = dbsession . query ( Ping ) . order_by ( Ping . created_at ) [EOL] assert pings . count ( ) == [number] [EOL] [EOL] pings = pings . all ( ) [EOL] assert pings [ [number] ] . config_id == configs [ [number] ] . id [EOL] assert pings [ [number] ] . count == [number] [EOL] assert pings [ [number] ] . config_id == configs [ [number] ] . id [EOL] assert pings [ [number] ] . count == [number] [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] , [string] ) [EOL] [EOL] with self . db as dbsession : [EOL] config = dbsession . query ( PingConfiguration ) . one ( ) [EOL] assert config . vendor == good_vendor [EOL] assert config . id == kept_config_id [EOL] [EOL] pings = dbsession . query ( Ping ) . order_by ( Ping . created_at ) [EOL] assert pings . count ( ) == [number] [EOL] [EOL] pings = pings . all ( ) [EOL] assert pings [ [number] ] . config_id == kept_config_id [EOL] assert pings [ [number] ] . count == [number] [EOL] assert pings [ [number] ] . config_id == kept_config_id [EOL] assert pings [ [number] ] . count == [number] [EOL] [EOL] def test_parse_old_images ( self ) : [EOL] from azafea . event_processors . endless . ping . v1 . handler import PingConfiguration [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] ) [EOL] self . ensure_tables ( PingConfiguration ) [EOL] [EOL] [comment] [EOL] image_id = [string] [EOL] created_at = datetime . utcnow ( ) . replace ( tzinfo = timezone . utc ) [EOL] [EOL] with self . db as dbsession : [EOL] dbsession . add ( PingConfiguration ( image = image_id , product = [string] , release = [string] , dualboot = True , created_at = created_at , vendor = [string] ) ) [EOL] [EOL] with self . db as dbsession : [EOL] config = dbsession . query ( PingConfiguration ) . one ( ) [EOL] assert config . image == image_id [EOL] assert config . image_product is None [EOL] assert config . image_branch is None [EOL] assert config . image_arch is None [EOL] assert config . image_platform is None [EOL] assert config . image_timestamp is None [EOL] assert config . image_personality is None [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] , [string] ) [EOL] [EOL] with self . db as dbsession : [EOL] config = dbsession . query ( PingConfiguration ) . one ( ) [EOL] assert config . image == image_id [EOL] assert config . image_product == [string] [EOL] assert config . image_branch == [string] [EOL] assert config . image_arch == [string] [EOL] assert config . image_platform == [string] [EOL] assert config . image_timestamp == datetime ( [number] , [number] , [number] , [number] , [number] , [number] , tzinfo = timezone . utc ) [EOL] assert config . image_personality == [string] [EOL] [EOL] def test_parse_old_images_skips_already_done ( self , capfd ) : [EOL] from azafea . event_processors . endless . ping . v1 . handler import PingConfiguration [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] ) [EOL] self . ensure_tables ( PingConfiguration ) [EOL] [EOL] [comment] [EOL] image_id = [string] [EOL] created_at = datetime . utcnow ( ) . replace ( tzinfo = timezone . utc ) [EOL] [EOL] with self . db as dbsession : [EOL] dbsession . add ( PingConfiguration ( image = image_id , image_product = [string] , image_branch = [string] , image_arch = [string] , image_platform = [string] , image_timestamp = datetime ( [number] , [number] , [number] , [number] , [number] , [number] , tzinfo = timezone . utc ) , image_personality = [string] , product = [string] , release = [string] , dualboot = True , created_at = created_at , vendor = [string] ) ) [EOL] [EOL] with self . db as dbsession : [EOL] config = dbsession . query ( PingConfiguration ) . one ( ) [EOL] assert config . image == image_id [EOL] assert config . image_product == [string] [EOL] assert config . image_branch == [string] [EOL] assert config . image_arch == [string] [EOL] assert config . image_platform == [string] [EOL] assert config . image_timestamp == datetime ( [number] , [number] , [number] , [number] , [number] , [number] , tzinfo = timezone . utc ) [EOL] assert config . image_personality == [string] [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] , [string] ) [EOL] [EOL] with self . db as dbsession : [EOL] config = dbsession . query ( PingConfiguration ) . one ( ) [EOL] assert config . image == image_id [EOL] assert config . image_product == [string] [EOL] assert config . image_branch == [string] [EOL] assert config . image_arch == [string] [EOL] assert config . image_platform == [string] [EOL] assert config . image_timestamp == datetime ( [number] , [number] , [number] , [number] , [number] , [number] , tzinfo = timezone . utc ) [EOL] assert config . image_personality == [string] [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . out [EOL] [EOL] def test_parse_old_unknown_images ( self , capfd ) : [EOL] from azafea . event_processors . endless . ping . v1 . handler import PingConfiguration [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] ) [EOL] self . ensure_tables ( PingConfiguration ) [EOL] [EOL] [comment] [EOL] image_id = [string] [EOL] created_at = datetime . utcnow ( ) . replace ( tzinfo = timezone . utc ) [EOL] [EOL] with self . db as dbsession : [EOL] dbsession . add ( PingConfiguration ( image = image_id , product = [string] , release = [string] , dualboot = True , created_at = created_at , vendor = [string] ) ) [EOL] [EOL] with self . db as dbsession : [EOL] config = dbsession . query ( PingConfiguration ) . one ( ) [EOL] assert config . image == image_id [EOL] assert config . image_product is None [EOL] assert config . image_branch is None [EOL] assert config . image_arch is None [EOL] assert config . image_platform is None [EOL] assert config . image_timestamp is None [EOL] assert config . image_personality is None [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] , [string] ) [EOL] [EOL] with self . db as dbsession : [EOL] config = dbsession . query ( PingConfiguration ) . one ( ) [EOL] assert config . image == image_id [EOL] assert config . image_product is None [EOL] assert config . image_branch is None [EOL] assert config . image_arch is None [EOL] assert config . image_platform is None [EOL] assert config . image_timestamp is None [EOL] assert config . image_personality is None [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . out [EOL] [EOL] def test_transform_countries_alpha_3_to_2 ( self , capfd ) : [EOL] from azafea . event_processors . endless . ping . v1 . handler import Ping , PingConfiguration [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] ) [EOL] self . ensure_tables ( Ping ) [EOL] [EOL] created_at = datetime . utcnow ( ) . replace ( tzinfo = timezone . utc ) [EOL] [EOL] with self . db as dbsession : [EOL] ping_config = PingConfiguration ( image = [string] , product = [string] , dualboot = True , created_at = created_at , vendor = [string] ) [EOL] dbsession . add ( ping_config ) [EOL] dbsession . add ( Ping ( config = ping_config , release = [string] , count = [number] , created_at = created_at , country = [string] ) ) [EOL] [EOL] with self . db as dbsession : [EOL] [comment] [EOL] dbsession . execute ( [string] ) [EOL] [EOL] with self . db as dbsession : [EOL] ping = dbsession . query ( Ping ) . one ( ) [EOL] assert ping . country == [string] [EOL] [EOL] self . run_subcommand ( [string] , [string] ) [EOL] [EOL] with self . db as dbsession : [EOL] ping = dbsession . query ( Ping ) . one ( ) [EOL] assert ping . country == [string] [EOL] [EOL] def test_transform_countries_alpha_3_to_2_only_2 ( self , capfd ) : [EOL] from azafea . event_processors . endless . ping . v1 . handler import Ping , PingConfiguration [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] ) [EOL] self . ensure_tables ( Ping ) [EOL] [EOL] created_at = datetime . utcnow ( ) . replace ( tzinfo = timezone . utc ) [EOL] [EOL] with self . db as dbsession : [EOL] ping_config = PingConfiguration ( image = [string] , product = [string] , dualboot = True , created_at = created_at , vendor = [string] ) [EOL] dbsession . add ( ping_config ) [EOL] dbsession . add ( Ping ( config = ping_config , release = [string] , count = [number] , created_at = created_at , country = [string] ) ) [EOL] [EOL] self . run_subcommand ( [string] , [string] ) [EOL] [EOL] with self . db as dbsession : [EOL] ping = dbsession . query ( Ping ) . one ( ) [EOL] assert ping . country == [string] [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . out [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 $datetime.datetime.datetime$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 $datetime.datetime.datetime$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 $datetime.datetime.datetime$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 $datetime.datetime.datetime$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import logging [EOL] import logging [EOL] [EOL] from azafea . logging import setup_logging [EOL] [EOL] [EOL] def test_default ( capfd ) : [EOL] setup_logging ( verbose = False ) [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] log . debug ( [string] ) [EOL] log . info ( [string] ) [EOL] log . warning ( [string] ) [EOL] log . error ( [string] ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] not in capture . out [EOL] assert [string] in capture . out [EOL] assert [string] in capture . err [EOL] assert [string] in capture . err [EOL] [EOL] [EOL] def test_verbose ( capfd ) : [EOL] setup_logging ( verbose = True ) [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] log . debug ( [string] ) [EOL] log . info ( [string] ) [EOL] log . warning ( [string] ) [EOL] log . error ( [string] ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . out [EOL] assert [string] in capture . out [EOL] assert [string] in capture . err [EOL] assert [string] in capture . err [EOL] [EOL] [EOL] def test_reset_logging ( capfd ) : [EOL] setup_logging ( verbose = False ) [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] log . debug ( [string] ) [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] not in capture . out [EOL] [EOL] setup_logging ( verbose = True ) [EOL] [EOL] log . debug ( [string] ) [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . out [EOL] [EOL] setup_logging ( verbose = False ) [EOL] [EOL] log . debug ( [string] ) [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] not in capture . out [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Any , List , Mapping [EOL] import typing [EOL] import azafea [EOL] import pathlib [EOL] from importlib import import_module [EOL] from pathlib import Path [EOL] from typing import Mapping [EOL] import sys [EOL] [EOL] import pytest [EOL] [EOL] import toml [EOL] [EOL] from azafea . config import Config [EOL] [EOL] [EOL] def pytest_collection_modifyitems ( items ) : [EOL] for item in items : [EOL] markers = [ m for m in item . own_markers if m . name in ( [string] , [string] ) ] [EOL] [EOL] if markers : [EOL] continue [EOL] [EOL] if [string] in item . nodeid : [EOL] item . add_marker ( pytest . mark . integration ) [EOL] [EOL] [EOL] class MockSqlAlchemySession : [EOL] def __init__ ( self ) : [EOL] self . open = True [EOL] self . committed = False [EOL] self . rolled_back = False [EOL] self . is_active = True [EOL] [EOL] def commit ( self ) : [EOL] self . committed = True [EOL] [EOL] def rollback ( self ) : [EOL] self . rolled_back = True [EOL] self . is_active = False [EOL] [EOL] def close ( self ) : [EOL] self . open = False [EOL] [EOL] def connection ( self ) : [EOL] pass [EOL] [EOL] [EOL] @ pytest . fixture ( ) def mock_sessionmaker ( ) : [EOL] def maker ( bind = None , class_ = None ) : [EOL] return MockSqlAlchemySession [EOL] [EOL] return maker [EOL] [EOL] [EOL] @ pytest . fixture ( ) def make_config_file ( tmp_path ) : [EOL] config_file_path = tmp_path . joinpath ( [string] ) [EOL] [EOL] def maker ( d ) : [EOL] with config_file_path . open ( [string] ) as f : [EOL] toml . dump ( d , f ) [EOL] [EOL] return config_file_path [EOL] [EOL] return maker [EOL] [EOL] [EOL] @ pytest . fixture ( ) def make_config ( make_config_file ) : [EOL] def maker ( d ) : [EOL] config_file_path = make_config_file ( d ) [EOL] [EOL] return Config . from_file ( str ( config_file_path ) ) [EOL] [EOL] return maker [EOL] [EOL] [EOL] @ pytest . fixture ( ) def handler_with_migrations ( tmpdir ) : [EOL] [comment] [EOL] ( tmpdir / [string] ) . write_text ( [string] , [string] ) [EOL] ( tmpdir / [string] ) . mkdir ( ) [EOL] [EOL] [comment] [EOL] sys . path . insert ( [number] , tmpdir . dirname ) [EOL] [EOL] [comment] [EOL] import_module ( tmpdir . basename ) [EOL] [EOL] yield tmpdir [EOL] [EOL] [comment] [EOL] sys . path . pop ( [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $azafea.config.Config$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $azafea.config.Config$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $azafea.config.Config$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Any , List [EOL] import azafea [EOL] import typing [EOL] from signal import SIGINT , SIGTERM [EOL] [EOL] import pytest [EOL] [EOL] from azafea . config import Config [EOL] import azafea . controller [EOL] from azafea . logging import setup_logging [EOL] from azafea . utils import get_cpu_count [EOL] [EOL] [EOL] class MockProcessor : [EOL] def __init__ ( self , name , config ) : [EOL] self . name = name [EOL] self . joined = False [EOL] self . terminated = False [EOL] [EOL] def start ( self ) : [EOL] print ( [string] % self . name ) [EOL] [EOL] def join ( self ) : [EOL] self . joined = True [EOL] [EOL] def terminate ( self ) : [EOL] self . terminated = True [EOL] [EOL] [EOL] def test_start ( capfd , monkeypatch ) : [EOL] config = Config ( ) [EOL] setup_logging ( verbose = config . main . verbose ) [EOL] [EOL] with monkeypatch . context ( ) as m : [EOL] m . setattr ( azafea . controller , [string] , MockProcessor ) [EOL] controller = azafea . controller . Controller ( config ) [EOL] controller . start ( ) [EOL] [EOL] number = get_cpu_count ( ) [EOL] assert len ( controller . _processors ) == number [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert f' [string] { number } [string] ' in capture . out [EOL] [EOL] for i in range ( [number] , number + [number] ) : [EOL] assert f' [string] { i } [string] ' in capture . out [EOL] [EOL] [EOL] def test_override_num_workers ( capfd , monkeypatch , make_config ) : [EOL] config = make_config ( { [string] : { [string] : [number] } } ) [EOL] setup_logging ( verbose = config . main . verbose ) [EOL] [EOL] with monkeypatch . context ( ) as m : [EOL] m . setattr ( azafea . controller , [string] , MockProcessor ) [EOL] controller = azafea . controller . Controller ( config ) [EOL] controller . start ( ) [EOL] [EOL] number = get_cpu_count ( ) [EOL] assert len ( controller . _processors ) == [number] [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . out [EOL] assert [string] in capture . out [EOL] [EOL] if number > [number] : [EOL] assert f' [string] { number } [string] ' not in capture . out [EOL] [EOL] [EOL] def test_sigint_handler ( capfd , make_config ) : [EOL] config = make_config ( { [string] : { [string] : [number] } } ) [EOL] setup_logging ( verbose = config . main . verbose ) [EOL] [EOL] with pytest . raises ( SystemExit ) as exc_info : [EOL] controller = azafea . controller . Controller ( config ) [EOL] controller . _processors = [ MockProcessor ( [string] , config ) ] [EOL] controller . _handle_exit_signals ( SIGINT , None ) [EOL] [EOL] for proc in controller . _processors : [EOL] assert proc . joined [EOL] assert not proc . terminated [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . out [EOL] assert [string] in capture . out [EOL] [EOL] assert exc_info . value . args == ( [number] , ) [EOL] [EOL] [EOL] def test_sigterm_handler ( capfd , make_config ) : [EOL] config = make_config ( { [string] : { [string] : [number] } } ) [EOL] setup_logging ( verbose = config . main . verbose ) [EOL] [EOL] with pytest . raises ( SystemExit ) as exc_info : [EOL] controller = azafea . controller . Controller ( config ) [EOL] controller . _processors = [ MockProcessor ( [string] , config ) ] [EOL] controller . _handle_exit_signals ( SIGTERM , None ) [EOL] [EOL] for proc in controller . _processors : [EOL] assert proc . joined [EOL] assert proc . terminated [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . out [EOL] assert [string] in capture . out [EOL] [EOL] assert exc_info . value . args == ( [number] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Any [EOL] import azafea [EOL] import typing [EOL] import pytest [EOL] [EOL] from sqlalchemy . orm import relationship [EOL] from sqlalchemy . schema import Column , ForeignKey [EOL] from sqlalchemy . types import Integer , Text [EOL] [EOL] from azafea . config import Config [EOL] import azafea . model [EOL] [EOL] [EOL] def test_use_db_session ( monkeypatch , mock_sessionmaker ) : [EOL] config = Config ( ) [EOL] [EOL] with monkeypatch . context ( ) as m : [EOL] m . setattr ( azafea . model , [string] , mock_sessionmaker ) [EOL] db = azafea . model . Db ( config . postgresql ) [EOL] [EOL] with db as dbsession : [EOL] assert dbsession . open [EOL] assert not dbsession . committed [EOL] assert not dbsession . rolled_back [EOL] [EOL] assert not dbsession . open [EOL] assert dbsession . committed [EOL] assert not dbsession . rolled_back [EOL] [EOL] [EOL] def test_fail_committing_db_session ( monkeypatch , mock_sessionmaker ) : [EOL] config = Config ( ) [EOL] [EOL] def raise_when_committing ( ) : [EOL] raise ValueError ( [string] ) [EOL] [EOL] with monkeypatch . context ( ) as m : [EOL] m . setattr ( azafea . model , [string] , mock_sessionmaker ) [EOL] db = azafea . model . Db ( config . postgresql ) [EOL] [EOL] with pytest . raises ( ValueError ) as exc_info : [EOL] with db as dbsession : [EOL] dbsession . commit = raise_when_committing [EOL] [EOL] assert [string] in str ( exc_info . value ) [EOL] [EOL] assert not dbsession . open [EOL] assert not dbsession . committed [EOL] assert dbsession . rolled_back [EOL] [EOL] [EOL] def test_exit_from_already_rolled_back_session ( monkeypatch , mock_sessionmaker ) : [EOL] config = Config ( ) [EOL] [EOL] with monkeypatch . context ( ) as m : [EOL] m . setattr ( azafea . model , [string] , mock_sessionmaker ) [EOL] db = azafea . model . Db ( config . postgresql ) [EOL] [EOL] with db as dbsession : [EOL] assert dbsession . open [EOL] assert not dbsession . committed [EOL] assert not dbsession . rolled_back [EOL] assert dbsession . is_active [EOL] [EOL] [comment] [EOL] [comment] [EOL] dbsession . rollback ( ) [EOL] [EOL] assert not dbsession . open [EOL] assert not dbsession . committed [EOL] assert dbsession . rolled_back [EOL] [EOL] [EOL] def test_fail_in_db_session ( monkeypatch , mock_sessionmaker ) : [EOL] config = Config ( ) [EOL] [EOL] with monkeypatch . context ( ) as m : [EOL] m . setattr ( azafea . model , [string] , mock_sessionmaker ) [EOL] db = azafea . model . Db ( config . postgresql ) [EOL] [EOL] with pytest . raises ( ValueError ) as exc_info : [EOL] with db as dbsession : [EOL] raise ValueError ( [string] ) [EOL] [EOL] assert [string] in str ( exc_info . value ) [EOL] [EOL] assert not dbsession . open [EOL] assert not dbsession . committed [EOL] assert dbsession . rolled_back [EOL] [EOL] [EOL] def test_base_model ( ) : [EOL] class Address ( azafea . model . Base ) : [EOL] __tablename__ = [string] [EOL] [EOL] id = Column ( Integer , primary_key = True ) [EOL] street_number = Column ( Text ) [EOL] street_name = Column ( Text ) [EOL] city = Column ( Text ) [EOL] [EOL] class Person ( azafea . model . Base ) : [EOL] __tablename__ = [string] [EOL] [EOL] id = Column ( Integer , primary_key = True ) [EOL] name = Column ( Text ) [EOL] address_id = Column ( Integer , ForeignKey ( [string] ) ) [EOL] [EOL] address = relationship ( Address ) [EOL] [EOL] address = Address ( id = [number] , street_number = [string] , street_name = [string] , city = [string] , ignored = [string] ) [EOL] person = Person ( id = [number] , name = [string] , address = address ) [EOL] [EOL] assert str ( person ) == [string] . join ( [ [string] , [string] , [string] , [string] , ] ) [EOL] assert str ( address ) == [string] . join ( [ [string] , [string] , [string] , [string] , [string] , ] ) [EOL] [EOL] [comment] [EOL] azafea . model . Base . _decl_class_registry . clear ( ) [EOL] azafea . model . Base . metadata . clear ( ) [EOL] azafea . model . Base . metadata . dispatch . _clear ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import azafea [EOL] import pytest [EOL] [EOL] import azafea . config [EOL] from azafea . logging import setup_logging [EOL] from azafea . utils import get_cpu_count [EOL] [EOL] [EOL] def test_defaults ( ) : [EOL] number_of_workers = get_cpu_count ( ) [EOL] config = azafea . config . Config ( ) [EOL] [EOL] assert not config . main . verbose [EOL] assert config . main . number_of_workers == number_of_workers [EOL] assert config . redis . host == [string] [EOL] assert config . redis . port == [number] [EOL] assert config . postgresql . host == [string] [EOL] assert config . postgresql . port == [number] [EOL] assert config . postgresql . user == [string] [EOL] assert config . postgresql . password == [string] [EOL] assert config . postgresql . database == [string] [EOL] [EOL] assert str ( config ) == [string] . join ( [ [string] , [string] , f' [string] { number_of_workers }' , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] ) [EOL] [EOL] [EOL] def test_get_nonexistent_option ( ) : [EOL] config = azafea . config . Config ( ) [EOL] [EOL] with pytest . raises ( azafea . config . NoSuchConfigurationError ) as exc_info : [EOL] config . main . gauche [EOL] [EOL] assert f" [string] " in str ( exc_info . value ) [EOL] [EOL] [EOL] def test_override ( monkeypatch , make_config ) : [EOL] def process ( * args , ** kwargs ) : [EOL] pass [EOL] [EOL] def mock_get_callable ( module_name , callable_name ) : [EOL] return process [EOL] [EOL] with monkeypatch . context ( ) as m : [EOL] m . setattr ( azafea . config , [string] , mock_get_callable ) [EOL] config = make_config ( { [string] : { [string] : [number] } , [string] : { [string] : [number] } , [string] : { [string] : [string] , [string] : { [string] : [string] , [string] : [number] } , } , [string] : { [string] : { [string] : [string] } } , } ) [EOL] [EOL] assert not config . main . verbose [EOL] assert config . main . number_of_workers == [number] [EOL] assert config . redis . host == [string] [EOL] assert config . redis . port == [number] [EOL] assert config . postgresql . host == [string] [EOL] assert config . postgresql . port == [number] [EOL] assert config . postgresql . user == [string] [EOL] assert config . postgresql . password == [string] [EOL] assert config . postgresql . database == [string] [EOL] assert config . postgresql . connect_args == { [string] : [string] , [string] : [string] } [EOL] [EOL] assert str ( config ) == [string] . join ( [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] ) [EOL] [EOL] [EOL] def test_override_with_nonexistent_file ( ) : [EOL] config = azafea . config . Config . from_file ( [string] ) [EOL] [EOL] [comment] [EOL] assert config == azafea . config . Config ( ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [number] , [string] , ] ) def test_override_verbose_invalid ( make_config , value ) : [EOL] with pytest . raises ( azafea . config . InvalidConfigurationError ) as exc_info : [EOL] make_config ( { [string] : { [string] : value } } ) [EOL] [EOL] assert ( [string] f' [string] { value !r} [string] ' ) in str ( exc_info . value ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ False , True , [string] , ] ) def test_override_number_of_workers_invalid ( make_config , value ) : [EOL] with pytest . raises ( azafea . config . InvalidConfigurationError ) as exc_info : [EOL] make_config ( { [string] : { [string] : value } } ) [EOL] [EOL] assert ( [string] f' [string] { value !r} [string] ' ) in str ( exc_info . value ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ - [number] , [number] , ] ) def test_override_number_of_workers_negative_or_zero ( make_config , value ) : [EOL] with pytest . raises ( azafea . config . InvalidConfigurationError ) as exc_info : [EOL] make_config ( { [string] : { [string] : value } } ) [EOL] [EOL] assert ( [string] f' [string] { value !r} [string] ' ) in str ( exc_info . value ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ False , True , [number] , ] ) def test_override_redis_host_invalid ( make_config , value ) : [EOL] with pytest . raises ( azafea . config . InvalidConfigurationError ) as exc_info : [EOL] make_config ( { [string] : { [string] : value } } ) [EOL] [EOL] assert ( [string] f' [string] { value !r} [string] ' ) in str ( exc_info . value ) [EOL] [EOL] [EOL] def test_override_redis_host_empty ( make_config ) : [EOL] with pytest . raises ( azafea . config . InvalidConfigurationError ) as exc_info : [EOL] make_config ( { [string] : { [string] : [string] } } ) [EOL] [EOL] assert ( [string] f" [string] " ) in str ( exc_info . value ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ False , True , [string] , ] ) def test_override_redis_port_invalid ( make_config , value ) : [EOL] with pytest . raises ( azafea . config . InvalidConfigurationError ) as exc_info : [EOL] make_config ( { [string] : { [string] : value } } ) [EOL] [EOL] assert ( [string] f' [string] { value !r} [string] ' ) in str ( exc_info . value ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ - [number] , [number] , ] ) def test_override_redis_port_not_positive ( make_config , value ) : [EOL] with pytest . raises ( azafea . config . InvalidConfigurationError ) as exc_info : [EOL] make_config ( { [string] : { [string] : value } } ) [EOL] [EOL] assert ( [string] f' [string] { value !r} [string] ' ) in str ( exc_info . value ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ False , True , [number] , ] ) def test_override_postgresql_host_invalid ( make_config , value ) : [EOL] with pytest . raises ( azafea . config . InvalidConfigurationError ) as exc_info : [EOL] make_config ( { [string] : { [string] : value } } ) [EOL] [EOL] assert ( [string] f' [string] { value !r} [string] ' ) in str ( exc_info . value ) [EOL] [EOL] [EOL] def test_override_postgresql_host_empty ( make_config ) : [EOL] with pytest . raises ( azafea . config . InvalidConfigurationError ) as exc_info : [EOL] make_config ( { [string] : { [string] : [string] } } ) [EOL] [EOL] assert ( [string] f" [string] " ) in str ( exc_info . value ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ False , True , [string] , ] ) def test_override_postgresql_port_invalid ( make_config , value ) : [EOL] with pytest . raises ( azafea . config . InvalidConfigurationError ) as exc_info : [EOL] make_config ( { [string] : { [string] : value } } ) [EOL] [EOL] assert ( [string] f' [string] { value !r} [string] ' ) in str ( exc_info . value ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ - [number] , [number] , ] ) def test_override_postgresql_port_not_positive ( make_config , value ) : [EOL] with pytest . raises ( azafea . config . InvalidConfigurationError ) as exc_info : [EOL] make_config ( { [string] : { [string] : value } } ) [EOL] [EOL] assert ( [string] f' [string] { value !r} [string] ' ) in str ( exc_info . value ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ False , True , [number] , ] ) def test_override_postgresql_user_invalid ( make_config , value ) : [EOL] with pytest . raises ( azafea . config . InvalidConfigurationError ) as exc_info : [EOL] make_config ( { [string] : { [string] : value } } ) [EOL] [EOL] assert ( [string] f' [string] { value !r} [string] ' ) in str ( exc_info . value ) [EOL] [EOL] [EOL] def test_override_postgresql_user_empty ( make_config ) : [EOL] with pytest . raises ( azafea . config . InvalidConfigurationError ) as exc_info : [EOL] make_config ( { [string] : { [string] : [string] } } ) [EOL] [EOL] assert ( [string] f" [string] " ) in str ( exc_info . value ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ False , True , [number] , ] ) def test_override_postgresql_password_invalid ( make_config , value ) : [EOL] with pytest . raises ( azafea . config . InvalidConfigurationError ) as exc_info : [EOL] make_config ( { [string] : { [string] : value } } ) [EOL] [EOL] assert ( [string] f' [string] { value !r} [string] ' ) in str ( exc_info . value ) [EOL] [EOL] [EOL] def test_override_postgresql_password_empty ( make_config ) : [EOL] with pytest . raises ( azafea . config . InvalidConfigurationError ) as exc_info : [EOL] make_config ( { [string] : { [string] : [string] } } ) [EOL] [EOL] assert ( [string] f" [string] " ) in str ( exc_info . value ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ False , True , [number] , ] ) def test_override_postgresql_database_invalid ( make_config , value ) : [EOL] with pytest . raises ( azafea . config . InvalidConfigurationError ) as exc_info : [EOL] make_config ( { [string] : { [string] : value } } ) [EOL] [EOL] assert ( [string] f' [string] { value !r} [string] ' ) in str ( exc_info . value ) [EOL] [EOL] [EOL] def test_override_postgresql_database_empty ( make_config ) : [EOL] with pytest . raises ( azafea . config . InvalidConfigurationError ) as exc_info : [EOL] make_config ( { [string] : { [string] : [string] } } ) [EOL] [EOL] assert ( [string] f" [string] " ) in str ( exc_info . value ) [EOL] [EOL] [EOL] def test_add_queue_with_nonexistent_handler_module ( make_config ) : [EOL] with pytest . raises ( azafea . config . InvalidConfigurationError ) as exc_info : [EOL] make_config ( { [string] : { [string] : { [string] : [string] } } } ) [EOL] [EOL] assert ( [string] f" [string] " ) in str ( exc_info . value ) [EOL] [EOL] [EOL] def test_add_queue_with_invalid_handler_module ( make_config ) : [EOL] with pytest . raises ( azafea . config . InvalidConfigurationError ) as exc_info : [EOL] make_config ( { [string] : { [string] : { [string] : [string] } } } ) [EOL] [EOL] assert ( [string] f" [string] " ) in str ( exc_info . value ) [EOL] [EOL] [EOL] def test_default_passwords ( capfd ) : [EOL] setup_logging ( verbose = False ) [EOL] azafea . config . Config ( ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . err [EOL] assert [string] in capture . err [EOL] [EOL] [EOL] def test_non_default_passwords ( capfd , make_config ) : [EOL] setup_logging ( verbose = False ) [EOL] make_config ( { [string] : { [string] : [string] } , [string] : { [string] : [string] } , } ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] not in capture . err [EOL] assert [string] not in capture . err [EOL]	
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import azafea [EOL] import pytest [EOL] [EOL] import azafea . cli [EOL] import azafea . config [EOL] [EOL] [EOL] def test_dropdb ( capfd , monkeypatch , make_config_file ) : [EOL] class MockDb : [EOL] def __init__ ( self , * args ) : [EOL] pass [EOL] [EOL] def drop_all ( self ) : [EOL] print ( [string] ) [EOL] [EOL] def mock_get_callable ( module_name , callable_name ) : [EOL] def process ( * args , ** kwargs ) : [EOL] pass [EOL] [EOL] return process [EOL] [EOL] config_file = make_config_file ( { [string] : { [string] : { [string] : [string] } } } ) [EOL] [EOL] with monkeypatch . context ( ) as m : [EOL] m . setattr ( azafea . config , [string] , mock_get_callable ) [EOL] m . setattr ( azafea . cli . commands , [string] , MockDb ) [EOL] azafea . cli . run_command ( [string] , str ( config_file ) , [string] ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . out [EOL] [EOL] [EOL] def test_dropdb_invalid_config ( capfd , make_config_file ) : [EOL] [comment] [EOL] config_file = make_config_file ( { [string] : { [string] : [string] } } ) [EOL] [EOL] with pytest . raises ( azafea . cli . errors . InvalidConfigExit ) : [EOL] azafea . cli . run_command ( [string] , str ( config_file ) , [string] ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . err [EOL] [EOL] [EOL] def test_dropdb_no_event_queue ( capfd , make_config_file ) : [EOL] config_file = make_config_file ( { } ) [EOL] [EOL] with pytest . raises ( azafea . cli . errors . NoEventQueueExit ) : [EOL] azafea . cli . run_command ( [string] , str ( config_file ) , [string] ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . err [EOL] [EOL] [EOL] def test_initdb ( capfd , monkeypatch , make_config_file ) : [EOL] class MockDb : [EOL] def __init__ ( self , * args ) : [EOL] pass [EOL] [EOL] def create_all ( self ) : [EOL] print ( [string] ) [EOL] [EOL] def mock_get_callable ( module_name , callable_name ) : [EOL] def process ( * args , ** kwargs ) : [EOL] pass [EOL] [EOL] return process [EOL] [EOL] config_file = make_config_file ( { [string] : { [string] : { [string] : [string] } } } ) [EOL] [EOL] with monkeypatch . context ( ) as m : [EOL] m . setattr ( azafea . config , [string] , mock_get_callable ) [EOL] m . setattr ( azafea . cli . commands , [string] , MockDb ) [EOL] azafea . cli . run_command ( [string] , str ( config_file ) , [string] ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . out [EOL] [EOL] [EOL] def test_initdb_invalid_config ( capfd , make_config_file ) : [EOL] [comment] [EOL] config_file = make_config_file ( { [string] : { [string] : [string] } } ) [EOL] [EOL] with pytest . raises ( azafea . cli . errors . InvalidConfigExit ) : [EOL] azafea . cli . run_command ( [string] , str ( config_file ) , [string] ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . err [EOL] [EOL] [EOL] def test_initdb_no_event_queue ( capfd , make_config_file ) : [EOL] config_file = make_config_file ( { } ) [EOL] [EOL] with pytest . raises ( azafea . cli . errors . NoEventQueueExit ) : [EOL] azafea . cli . run_command ( [string] , str ( config_file ) , [string] ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . err [EOL] [EOL] [EOL] def test_make_migration_invalid_config ( capfd , make_config_file ) : [EOL] [comment] [EOL] config_file = make_config_file ( { [string] : { [string] : [string] } } ) [EOL] [EOL] with pytest . raises ( azafea . cli . errors . InvalidConfigExit ) : [EOL] azafea . cli . run_command ( [string] , str ( config_file ) , [string] , [string] ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . err [EOL] [EOL] [EOL] def test_make_migration_no_event_queue ( capfd , make_config_file ) : [EOL] config_file = make_config_file ( { } ) [EOL] [EOL] with pytest . raises ( azafea . cli . errors . NoEventQueueExit ) : [EOL] azafea . cli . run_command ( [string] , str ( config_file ) , [string] , [string] ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert ( [string] ) in capture . err [EOL] [EOL] [EOL] def test_make_migration_unknown_queue ( capfd , monkeypatch , make_config_file ) : [EOL] def mock_get_callable ( module_name , callable_name ) : [EOL] def process ( * args , ** kwargs ) : [EOL] pass [EOL] [EOL] return process [EOL] [EOL] config_file = make_config_file ( { [string] : { [string] : { [string] : [string] } } , } ) [EOL] [EOL] with monkeypatch . context ( ) as m : [EOL] m . setattr ( azafea . config , [string] , mock_get_callable ) [EOL] [EOL] with pytest . raises ( azafea . cli . errors . NoEventQueueExit ) : [EOL] azafea . cli . run_command ( [string] , str ( config_file ) , [string] , [string] ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert ( [string] [string] ) in capture . err [EOL] [EOL] [EOL] def test_make_migration_no_migrations ( capfd , monkeypatch , make_config_file ) : [EOL] def mock_get_callable ( module_name , callable_name ) : [EOL] def process ( * args , ** kwargs ) : [EOL] pass [EOL] [EOL] return process [EOL] [EOL] config_file = make_config_file ( { [string] : { [string] : { [string] : [string] } } , } ) [EOL] [EOL] with monkeypatch . context ( ) as m : [EOL] m . setattr ( azafea . config , [string] , mock_get_callable ) [EOL] [EOL] azafea . cli . run_command ( [string] , str ( config_file ) , [string] , [string] ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . out [EOL] [EOL] [EOL] def test_migratedb_invalid_config ( capfd , make_config_file ) : [EOL] [comment] [EOL] config_file = make_config_file ( { [string] : { [string] : [string] } } ) [EOL] [EOL] with pytest . raises ( azafea . cli . errors . InvalidConfigExit ) : [EOL] azafea . cli . run_command ( [string] , str ( config_file ) , [string] ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . err [EOL] [EOL] [EOL] def test_migratedb_no_event_queue ( capfd , make_config_file ) : [EOL] config_file = make_config_file ( { } ) [EOL] [EOL] with pytest . raises ( azafea . cli . errors . NoEventQueueExit ) : [EOL] azafea . cli . run_command ( [string] , str ( config_file ) , [string] ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . err [EOL] [EOL] [EOL] def test_migratedb_no_migrations ( capfd , monkeypatch , make_config_file ) : [EOL] def mock_get_callable ( module_name , callable_name ) : [EOL] def process ( * args , ** kwargs ) : [EOL] pass [EOL] [EOL] return process [EOL] [EOL] config_file = make_config_file ( { [string] : { [string] : { [string] : [string] } } , } ) [EOL] [EOL] with monkeypatch . context ( ) as m : [EOL] m . setattr ( azafea . config , [string] , mock_get_callable ) [EOL] [EOL] azafea . cli . run_command ( [string] , str ( config_file ) , [string] ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . out [EOL] [EOL] [EOL] def test_print_config ( capfd , monkeypatch , make_config_file ) : [EOL] def mock_get_callable ( module_name , callable_name ) : [EOL] def process ( * args , ** kwargs ) : [EOL] pass [EOL] [EOL] return process [EOL] [EOL] config_file = make_config_file ( { [string] : { [string] : [number] } , [string] : { [string] : [string] } , [string] : { [string] : [string] } , [string] : { [string] : { [string] : [string] } } , } ) [EOL] [EOL] with monkeypatch . context ( ) as m : [EOL] m . setattr ( azafea . config , [string] , mock_get_callable ) [EOL] azafea . cli . run_command ( [string] , str ( config_file ) , [string] ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert capture . out . strip ( ) == [string] . join ( [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] ) [EOL] [EOL] [EOL] def test_print_invalid_config ( capfd , make_config_file ) : [EOL] [comment] [EOL] config_file = make_config_file ( { [string] : { [string] : [string] } } ) [EOL] [EOL] with pytest . raises ( azafea . cli . errors . InvalidConfigExit ) : [EOL] azafea . cli . run_command ( [string] , str ( config_file ) , [string] ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . err [EOL] [EOL] [EOL] def test_print_config_no_event_queue ( capfd , make_config_file ) : [EOL] config_file = make_config_file ( { } ) [EOL] [EOL] with pytest . raises ( azafea . cli . errors . NoEventQueueExit ) : [EOL] azafea . cli . run_command ( [string] , str ( config_file ) , [string] ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . err [EOL] [EOL] [EOL] def test_replay_errors ( capfd , monkeypatch , make_config_file ) : [EOL] class MockRedis : [EOL] def __init__ ( self ) : [EOL] self . _queues = { [string] : [ ] , [string] : [ [string] , [string] , [string] ] , } [EOL] [EOL] def llen ( self , queue_name ) : [EOL] return len ( self . _queues [ queue_name ] ) [EOL] [EOL] def lpush ( self , queue_name , value ) : [EOL] self . _queues [ queue_name ] . insert ( [number] , value ) [EOL] [EOL] def rpop ( self , queue_name ) : [EOL] try : [EOL] return self . _queues [ queue_name ] . pop ( - [number] ) [EOL] [EOL] except IndexError : [EOL] return None [EOL] [EOL] redis = MockRedis ( ) [EOL] [EOL] def mock_redis ( * args , ** kwargs ) : [EOL] return redis [EOL] [EOL] def mock_get_callable ( module_name , callable_name ) : [EOL] def process ( * args , ** kwargs ) : [EOL] pass [EOL] [EOL] return process [EOL] [EOL] config_file = make_config_file ( { [string] : { [string] : { [string] : [string] } } , } ) [EOL] [EOL] with monkeypatch . context ( ) as m : [EOL] m . setattr ( azafea . cli . commands , [string] , mock_redis ) [EOL] m . setattr ( azafea . config , [string] , mock_get_callable ) [EOL] azafea . cli . run_command ( [string] , str ( config_file ) , [string] , [string] ) [EOL] [EOL] assert redis . _queues == { [string] : [ [string] , [string] , [string] ] , [string] : [ ] , } [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . out [EOL] [EOL] [EOL] def test_replay_errors_invalid_config ( capfd , make_config_file ) : [EOL] [comment] [EOL] config_file = make_config_file ( { [string] : { [string] : [string] } } ) [EOL] [EOL] with pytest . raises ( azafea . cli . errors . InvalidConfigExit ) : [EOL] azafea . cli . run_command ( [string] , str ( config_file ) , [string] , [string] ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . err [EOL] [EOL] [EOL] def test_replay_errors_no_event_queue ( capfd , make_config_file ) : [EOL] config_file = make_config_file ( { } ) [EOL] [EOL] with pytest . raises ( azafea . cli . errors . NoEventQueueExit ) : [EOL] azafea . cli . run_command ( [string] , str ( config_file ) , [string] , [string] ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . err [EOL] [EOL] [EOL] def test_replay_errors_unknown_queue ( capfd , monkeypatch , make_config_file ) : [EOL] def mock_get_callable ( module_name , callable_name ) : [EOL] def process ( * args , ** kwargs ) : [EOL] pass [EOL] [EOL] return process [EOL] [EOL] config_file = make_config_file ( { [string] : { [string] : { [string] : [string] } } , } ) [EOL] [EOL] with monkeypatch . context ( ) as m : [EOL] m . setattr ( azafea . config , [string] , mock_get_callable ) [EOL] [EOL] with pytest . raises ( azafea . cli . errors . NoEventQueueExit ) : [EOL] azafea . cli . run_command ( [string] , str ( config_file ) , [string] , [string] ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert ( [string] [string] ) in capture . err [EOL] [EOL] [EOL] def test_replay_errors_stopped_early ( capfd , monkeypatch , make_config_file ) : [EOL] class MockRedis : [EOL] def __init__ ( self ) : [EOL] self . _queues = { [string] : [ ] , [string] : [ [string] , [string] , [string] ] , } [EOL] [EOL] def llen ( self , queue_name ) : [EOL] [comment] [EOL] return [number] [EOL] [EOL] def lpush ( self , queue_name , value ) : [EOL] self . _queues [ queue_name ] . insert ( [number] , value ) [EOL] [EOL] def rpop ( self , queue_name ) : [EOL] try : [EOL] return self . _queues [ queue_name ] . pop ( - [number] ) [EOL] [EOL] except IndexError : [EOL] return None [EOL] [EOL] redis = MockRedis ( ) [EOL] [EOL] def mock_redis ( * args , ** kwargs ) : [EOL] return redis [EOL] [EOL] def mock_get_callable ( module_name , callable_name ) : [EOL] def process ( * args , ** kwargs ) : [EOL] pass [EOL] [EOL] return process [EOL] [EOL] config_file = make_config_file ( { [string] : { [string] : { [string] : [string] } } , } ) [EOL] [EOL] with monkeypatch . context ( ) as m : [EOL] m . setattr ( azafea . cli . commands , [string] , mock_redis ) [EOL] m . setattr ( azafea . config , [string] , mock_get_callable ) [EOL] azafea . cli . run_command ( [string] , str ( config_file ) , [string] , [string] ) [EOL] [EOL] assert redis . _queues == { [string] : [ [string] , [string] , [string] ] , [string] : [ ] , } [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . err [EOL] assert [string] in capture . out [EOL] [EOL] [EOL] def test_replay_errors_fail_to_push ( capfd , monkeypatch , make_config_file ) : [EOL] class MockRedis : [EOL] def __init__ ( self ) : [EOL] self . _queues = { [string] : [ ] , [string] : [ [string] , [string] , [string] ] , } [EOL] [EOL] def llen ( self , queue_name ) : [EOL] return len ( self . _queues [ queue_name ] ) [EOL] [EOL] def lpush ( self , queue_name , value ) : [EOL] raise ValueError ( [string] ) [EOL] [EOL] def rpop ( self , queue_name ) : [EOL] try : [EOL] return self . _queues [ queue_name ] . pop ( - [number] ) [EOL] [EOL] except IndexError : [EOL] return None [EOL] [EOL] redis = MockRedis ( ) [EOL] [EOL] def mock_redis ( * args , ** kwargs ) : [EOL] return redis [EOL] [EOL] def mock_get_callable ( module_name , callable_name ) : [EOL] def process ( * args , ** kwargs ) : [EOL] pass [EOL] [EOL] return process [EOL] [EOL] config_file = make_config_file ( { [string] : { [string] : { [string] : [string] } } , } ) [EOL] [EOL] with monkeypatch . context ( ) as m : [EOL] m . setattr ( azafea . cli . commands , [string] , mock_redis ) [EOL] m . setattr ( azafea . config , [string] , mock_get_callable ) [EOL] [EOL] with pytest . raises ( azafea . cli . errors . UnknownErrorExit ) : [EOL] azafea . cli . run_command ( [string] , str ( config_file ) , [string] , [string] ) [EOL] [EOL] assert redis . _queues == { [string] : [ ] , [string] : [ [string] , [string] ] , } [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . err [EOL] [EOL] [EOL] def test_refresh_views ( capfd , make_config_file ) : [EOL] config_file = make_config_file ( { [string] : { [string] : [string] } , [string] : { [string] : { [string] : [string] } } , } ) [EOL] [EOL] azafea . cli . run_command ( [string] , str ( config_file ) , [string] ) [EOL] azafea . cli . run_command ( [string] , str ( config_file ) , [string] ) [EOL] azafea . cli . run_command ( [string] , str ( config_file ) , [string] ) [EOL] [EOL] [EOL] def test_refresh_views_no_view ( capfd , make_config_file ) : [EOL] config_file = make_config_file ( { [string] : { [string] : [string] } } ) [EOL] [EOL] azafea . cli . run_command ( [string] , str ( config_file ) , [string] ) [EOL] [EOL] [EOL] def test_run ( capfd , monkeypatch , make_config_file ) : [EOL] class MockController : [EOL] def __init__ ( self , config ) : [EOL] pass [EOL] [EOL] def main ( self ) : [EOL] print ( [string] ) [EOL] [EOL] def mock_get_callable ( module_name , callable_name ) : [EOL] def process ( * args , ** kwargs ) : [EOL] pass [EOL] [EOL] return process [EOL] [EOL] config_file = make_config_file ( { [string] : { [string] : { [string] : [string] } } } ) [EOL] [EOL] with monkeypatch . context ( ) as m : [EOL] m . setattr ( azafea . config , [string] , mock_get_callable ) [EOL] m . setattr ( azafea . cli . commands , [string] , MockController ) [EOL] azafea . cli . run_command ( [string] , str ( config_file ) , [string] ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . out [EOL] [EOL] [EOL] def test_run_invalid_config ( capfd , make_config_file ) : [EOL] [comment] [EOL] config_file = make_config_file ( { [string] : { [string] : [string] } } ) [EOL] [EOL] with pytest . raises ( azafea . cli . errors . InvalidConfigExit ) : [EOL] azafea . cli . run_command ( [string] , str ( config_file ) , [string] ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . err [EOL] [EOL] [EOL] def test_run_no_event_queue ( capfd , make_config_file ) : [EOL] [comment] [EOL] config_file = make_config_file ( { } ) [EOL] [EOL] with pytest . raises ( azafea . cli . errors . NoEventQueueExit ) : [EOL] azafea . cli . run_command ( [string] , str ( config_file ) , [string] ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . err [EOL] [EOL] [EOL] def test_run_redis_connection_error ( capfd , monkeypatch , make_config_file ) : [EOL] def mock_get_callable ( module_name , callable_name ) : [EOL] def process ( * args , ** kwargs ) : [EOL] pass [EOL] [EOL] return process [EOL] [EOL] [comment] [EOL] config_file = make_config_file ( { [string] : { [string] : [string] , [string] : [number] } , [string] : { [string] : { [string] : [string] } } } ) [EOL] [EOL] with monkeypatch . context ( ) as m : [EOL] m . setattr ( azafea . config , [string] , mock_get_callable ) [EOL] [EOL] with pytest . raises ( azafea . cli . errors . ConnectionErrorExit ) : [EOL] azafea . cli . run_command ( [string] , str ( config_file ) , [string] ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . err [EOL] [EOL] [EOL] def test_run_postgresql_connection_error ( capfd , monkeypatch , make_config_file ) : [EOL] class MockRedis : [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] self . connection_pool = MockRedisConnectionPool ( ) [EOL] [EOL] class MockRedisConnectionPool : [EOL] def make_connection ( self ) : [EOL] return MockRedisConnection ( ) [EOL] [EOL] class MockRedisConnection : [EOL] def connect ( self ) : [EOL] pass [EOL] [EOL] def mock_get_callable ( module_name , callable_name ) : [EOL] def process ( * args , ** kwargs ) : [EOL] pass [EOL] [EOL] return process [EOL] [EOL] [comment] [EOL] config_file = make_config_file ( { [string] : { [string] : [string] , [string] : [number] } , [string] : { [string] : { [string] : [string] } } } ) [EOL] [EOL] with monkeypatch . context ( ) as m : [EOL] m . setattr ( azafea . config , [string] , mock_get_callable ) [EOL] m . setattr ( azafea . processor , [string] , MockRedis ) [EOL] [EOL] with pytest . raises ( azafea . cli . errors . ConnectionErrorExit ) : [EOL] azafea . cli . run_command ( [string] , str ( config_file ) , [string] ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert ( [string] [string] ) in capture . err [EOL] [EOL] [EOL] def test_per_queue_command ( capfd , monkeypatch , make_config_file ) : [EOL] def mock_get_callable ( module_name , callable_name ) : [EOL] def process ( * args , ** kwargs ) : [EOL] pass [EOL] [EOL] def register_commands ( subs ) : [EOL] do_something = subs . add_parser ( [string] ) [EOL] do_something . set_defaults ( subcommand = lambda * _ : print ( [string] ) ) [EOL] [EOL] assert callable_name in ( [string] , [string] ) [EOL] [EOL] if callable_name == [string] : [EOL] return register_commands [EOL] [EOL] if callable_name == [string] : [EOL] return process [EOL] [EOL] config_file = make_config_file ( { [string] : { [string] : { [string] : [string] , } , } } ) [EOL] [EOL] with monkeypatch . context ( ) as m : [EOL] m . setattr ( azafea . config , [string] , mock_get_callable ) [EOL] azafea . cli . run_command ( [string] , str ( config_file ) , [string] , [string] ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . out [EOL] [EOL] [EOL] def test_per_queue_invalid_command ( capfd , monkeypatch , make_config_file ) : [EOL] def mock_get_callable ( module_name , callable_name ) : [EOL] def process ( * args , ** kwargs ) : [EOL] pass [EOL] [EOL] def register_commands ( subs ) : [EOL] do_something = subs . add_parser ( [string] ) [EOL] do_something . set_defaults ( subcommand = lambda * _ : print ( [string] ) ) [EOL] [EOL] assert callable_name in ( [string] , [string] ) [EOL] [EOL] if callable_name == [string] : [EOL] return register_commands [EOL] [EOL] if callable_name == [string] : [EOL] return process [EOL] [EOL] config_file = make_config_file ( { [string] : { [string] : { [string] : [string] , } , } } ) [EOL] [EOL] with monkeypatch . context ( ) as m : [EOL] m . setattr ( azafea . config , [string] , mock_get_callable ) [EOL] [EOL] with pytest . raises ( SystemExit ) : [EOL] azafea . cli . run_command ( [string] , str ( config_file ) , [string] , [string] ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . err [EOL]	one$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import os [EOL] [EOL] import azafea [EOL] from azafea . migrations . utils import get_alembic_config , get_queue_migrations_path [EOL] [EOL] [EOL] def test_get_alembic_config ( monkeypatch , handler_with_migrations , make_config ) : [EOL] def mock_get_callable ( module_name , callable_name ) : [EOL] return lambda * args , ** kwargs : None [EOL] [EOL] with monkeypatch . context ( ) as m : [EOL] m . setattr ( azafea . config , [string] , mock_get_callable ) [EOL] config = make_config ( { [string] : { [string] : { [string] : [string] } , [string] : { [string] : handler_with_migrations . basename } , } , } ) [EOL] [EOL] alembic_config = get_alembic_config ( config ) [EOL] [EOL] assert alembic_config . get_main_option ( [string] ) == [string] . join ( [ os . path . join ( os . getcwd ( ) , [string] , [string] ) , str ( handler_with_migrations / [string] ) , ] ) [EOL] [EOL] [EOL] def test_get_alembic_config_no_queue ( handler_with_migrations , make_config ) : [EOL] config = make_config ( { } ) [EOL] alembic_config = get_alembic_config ( config ) [EOL] [EOL] assert alembic_config . get_main_option ( [string] ) == [string] [EOL] [EOL] [EOL] def test_get_queue_migrations_path ( ) : [EOL] root = os . getcwd ( ) [EOL] [EOL] path = get_queue_migrations_path ( [string] ) [EOL] assert path == os . path . join ( root , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Optional , Tuple , Any , Sequence [EOL] import builtins [EOL] import typing [EOL] import azafea [EOL] import os [EOL] from signal import SIGINT , SIGTERM [EOL] import time [EOL] from typing import Optional , Sequence , Tuple [EOL] [EOL] from redis . exceptions import ConnectionError as RedisConnectionError [EOL] [EOL] import pytest [EOL] [EOL] from azafea . config import Config [EOL] from azafea . logging import setup_logging [EOL] from azafea . model import PostgresqlConnectionError [EOL] import azafea . processor [EOL] [EOL] [EOL] class MockRedis : [EOL] def __init__ ( self , host , port , password ) : [EOL] print ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] self . _next_key = [number] [EOL] self . _next_value = [number] [EOL] [EOL] self . connection_pool = MockRedisConnectionPool ( ) [EOL] [EOL] def brpop ( self , keys , timeout = [number] ) : [EOL] str_keys = [string] . join ( keys ) [EOL] print ( f' [string] { str_keys }' ) [EOL] [EOL] value = ( None , [string] ) [ self . _next_value ] [EOL] self . _next_value = ( self . _next_value + [number] ) % [number] [EOL] [EOL] if value is None : [EOL] return None [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] key = keys [ self . _next_key ] [EOL] self . _next_key = ( self . _next_key + [number] ) % len ( keys ) [EOL] [EOL] return key . encode ( [string] ) , value [EOL] [EOL] def lpush ( self , name , * values ) : [EOL] str_values = [string] . join ( values ) . decode ( [string] ) [EOL] print ( f' [string] { name } [string] { str_values }' ) [EOL] [EOL] return [number] [EOL] [EOL] [EOL] class MockRedisConnectionPool : [EOL] def make_connection ( self ) : [EOL] return MockRedisConnection ( ) [EOL] [EOL] [EOL] class MockRedisConnection : [EOL] def connect ( self ) : [EOL] pass [EOL] [EOL] [EOL] def test_start ( capfd , monkeypatch , mock_sessionmaker ) : [EOL] config = Config ( ) [EOL] setup_logging ( verbose = config . main . verbose ) [EOL] [EOL] with monkeypatch . context ( ) as m : [EOL] m . setattr ( azafea . processor , [string] , MockRedis ) [EOL] m . setattr ( azafea . model , [string] , mock_sessionmaker ) [EOL] proc = azafea . processor . Processor ( [string] , config ) [EOL] [EOL] [comment] [EOL] proc . _continue = False [EOL] [EOL] proc . start ( ) [EOL] proc . join ( ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . out [EOL] [EOL] [EOL] def test_start_then_sigint ( capfd , monkeypatch , make_config , mock_sessionmaker ) : [EOL] def process ( * args , ** kwargs ) : [EOL] pass [EOL] [EOL] def mock_get_callable ( module_name , callable_name ) : [EOL] return process [EOL] [EOL] with monkeypatch . context ( ) as m : [EOL] m . setattr ( azafea . config , [string] , mock_get_callable ) [EOL] config = make_config ( { [string] : { [string] : True } , [string] : { [string] : { [string] : [string] } } , } ) [EOL] [EOL] setup_logging ( verbose = config . main . verbose ) [EOL] [EOL] with monkeypatch . context ( ) as m : [EOL] m . setattr ( azafea . processor , [string] , MockRedis ) [EOL] m . setattr ( azafea . model , [string] , mock_sessionmaker ) [EOL] proc = azafea . processor . Processor ( [string] , config ) [EOL] proc . start ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] time . sleep ( [number] ) [EOL] os . kill ( proc . pid , SIGINT ) [EOL] [EOL] proc . join ( ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . out [EOL] assert [string] in capture . out [EOL] assert [string] in capture . out [EOL] [EOL] [EOL] def test_start_then_sigterm ( capfd , monkeypatch , make_config , mock_sessionmaker ) : [EOL] def process ( * args , ** kwargs ) : [EOL] pass [EOL] [EOL] def mock_get_callable ( module_name , callable_name ) : [EOL] return process [EOL] [EOL] with monkeypatch . context ( ) as m : [EOL] m . setattr ( azafea . config , [string] , mock_get_callable ) [EOL] config = make_config ( { [string] : { [string] : True } , [string] : { [string] : { [string] : [string] } } , } ) [EOL] [EOL] setup_logging ( verbose = config . main . verbose ) [EOL] [EOL] with monkeypatch . context ( ) as m : [EOL] m . setattr ( azafea . processor , [string] , MockRedis ) [EOL] m . setattr ( azafea . model , [string] , mock_sessionmaker ) [EOL] proc = azafea . processor . Processor ( [string] , config ) [EOL] proc . start ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] time . sleep ( [number] ) [EOL] os . kill ( proc . pid , SIGTERM ) [EOL] [EOL] proc . join ( ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . out [EOL] assert [string] in capture . out [EOL] assert [string] in capture . out [EOL] [EOL] [EOL] def test_process_with_error ( capfd , monkeypatch , make_config , mock_sessionmaker ) : [EOL] def failing_process ( * args , ** kwargs ) : [EOL] raise ValueError ( [string] ) [EOL] [EOL] def mock_get_callable ( module_name , callable_name ) : [EOL] return failing_process [EOL] [EOL] with monkeypatch . context ( ) as m : [EOL] m . setattr ( azafea . config , [string] , mock_get_callable ) [EOL] config = make_config ( { [string] : { [string] : True } , [string] : { [string] : { [string] : [string] } } , } ) [EOL] [EOL] setup_logging ( verbose = config . main . verbose ) [EOL] [EOL] with monkeypatch . context ( ) as m : [EOL] m . setattr ( azafea . model , [string] , mock_sessionmaker ) [EOL] m . setattr ( azafea . processor , [string] , MockRedis ) [EOL] proc = azafea . processor . Processor ( [string] , config ) [EOL] proc . start ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] time . sleep ( [number] ) [EOL] os . kill ( proc . pid , SIGTERM ) [EOL] [EOL] proc . join ( ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert [string] in capture . out [EOL] print ( capture . out ) [EOL] assert [string] in capture . out [EOL] assert ( [string] [string] ) in capture . err [EOL] assert [string] in capture . err [EOL] assert [string] in capture . out [EOL] [EOL] [EOL] def test_cannot_connect_to_redis ( monkeypatch , make_config ) : [EOL] [comment] [EOL] config = make_config ( { [string] : { [string] : [string] , [string] : [number] } } ) [EOL] [EOL] [comment] [EOL] with pytest . raises ( RedisConnectionError ) : [EOL] azafea . processor . Processor ( [string] , config ) [EOL] [EOL] [EOL] def test_cannot_connect_to_postgresql ( monkeypatch , make_config ) : [EOL] [comment] [EOL] config = make_config ( { [string] : { [string] : [string] , [string] : [number] } } ) [EOL] [EOL] [comment] [EOL] with monkeypatch . context ( ) as m : [EOL] m . setattr ( azafea . processor , [string] , MockRedis ) [EOL] [EOL] with pytest . raises ( PostgresqlConnectionError ) : [EOL] azafea . processor . Processor ( [string] , config ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $azafea.tests.test_processor.MockRedisConnectionPool$ 0 0 0 0 0 0 0 $typing.Optional[typing.Tuple[builtins.bytes,builtins.bytes]]$ 0 0 0 $typing.Sequence[builtins.str]$ 0 $builtins.int$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Sequence[builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Optional[builtins.bytes]$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.Optional[builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Sequence[builtins.str]$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Sequence[builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Optional[builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Callable , Any [EOL] import typing [EOL] import _importlib_modulespec [EOL] import pytest [EOL] [EOL] import azafea . utils [EOL] [EOL] [EOL] [comment] [EOL] def process ( * args , ** kwargs ) : [EOL] pass [EOL] [EOL] [EOL] def test_get_cpu_count_failed ( monkeypatch ) : [EOL] def mock_cpu_count ( ) : [EOL] [comment] [EOL] return None [EOL] [EOL] with monkeypatch . context ( ) as m : [EOL] m . setattr ( azafea . utils . os , [string] , mock_cpu_count ) [EOL] assert azafea . utils . get_cpu_count ( ) == [number] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ pytest . param ( [string] , [string] , [string] , id = [string] ) , pytest . param ( [string] , [string] , [string] , id = [string] ) , ] ) def test_get_fqdn ( module , name , expected ) : [EOL] from importlib import import_module [EOL] [EOL] module = import_module ( module ) [EOL] f = getattr ( module , name ) [EOL] assert azafea . utils . get_fqdn ( f ) == expected [EOL] [EOL] [EOL] def test_get_callable ( ) : [EOL] handler = azafea . utils . get_callable ( [string] , [string] ) [EOL] [EOL] assert handler == process [EOL] [EOL] [EOL] def test_get_nonexistent_callable_module ( ) : [EOL] with pytest . raises ( ImportError ) : [EOL] azafea . utils . get_callable ( [string] , [string] ) [EOL] [EOL] [EOL] def test_get_invalid_callable_module ( ) : [EOL] with pytest . raises ( AttributeError ) : [EOL] azafea . utils . get_callable ( [string] , [string] ) [EOL] [EOL] [EOL] def test_progress ( capfd ) : [EOL] azafea . utils . progress ( [number] , [number] ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert capture . out == ( [string] ) [EOL] [EOL] azafea . utils . progress ( [number] , [number] ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert capture . out == ( [string] ) [EOL] [EOL] azafea . utils . progress ( [number] , [number] ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert capture . out == ( [string] ) [EOL] [EOL] azafea . utils . progress ( [number] , [number] , end = [string] ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert capture . out == ( [string] ) [EOL] [EOL] [EOL] def test_progress_zero ( capfd ) : [EOL] azafea . utils . progress ( [number] , [number] , end = [string] ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert capture . out == ( [string] ) [EOL] [EOL] [EOL] def test_progress_over ( capfd ) : [EOL] azafea . utils . progress ( [number] , [number] , end = [string] ) [EOL] [EOL] capture = capfd . readouterr ( ) [EOL] assert capture . out == ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] import pytest [EOL] [EOL] from azafea . vendors import normalize_vendor [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] ) def test_normalize_vendor ( vendor , expected ) : [EOL] assert normalize_vendor ( vendor ) == expected [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Any , List [EOL] import multiprocessing [EOL] import typing [EOL] import multiprocessing [EOL] import os [EOL] import sys [EOL] import tempfile [EOL] [EOL] import pytest [EOL] [EOL] from redis import Redis [EOL] [EOL] from sqlalchemy . exc import ProgrammingError [EOL] [EOL] import toml [EOL] [EOL] from azafea import cli [EOL] from azafea . config import Config [EOL] from azafea . model import Base , Db [EOL] [EOL] [EOL] class IntegrationTest : [EOL] def ensure_tables ( self , * models ) : [EOL] for model in models : [EOL] with self . db as dbsession : [EOL] [comment] [EOL] dbsession . query ( model ) . count ( ) [EOL] [EOL] def ensure_no_tables ( self ) : [EOL] for model in Base . _decl_class_registry . values ( ) : [EOL] if not isinstance ( model , type ) or not issubclass ( model , Base ) : [EOL] [comment] [EOL] continue [EOL] [EOL] with pytest . raises ( ProgrammingError ) as exc_info : [EOL] with self . db as dbsession : [EOL] dbsession . query ( model ) . all ( ) [EOL] [EOL] assert model . __tablename__ in str ( exc_info . value ) [EOL] assert [string] in str ( exc_info . value ) [EOL] [EOL] def clear_queues ( self ) : [EOL] queues = self . redis . keys ( ) [EOL] [EOL] if queues : [EOL] self . redis . delete ( * queues ) [EOL] [EOL] def ensure_no_queues ( self ) : [EOL] for queue_name in self . config . queues : [EOL] assert self . redis . llen ( queue_name ) == [number] [EOL] assert self . redis . llen ( f' [string] { queue_name }' ) == [number] [EOL] [EOL] def run_azafea ( self ) : [EOL] proc = multiprocessing . Process ( target = self . run_subcommand , args = ( [string] , ) ) [EOL] proc . start ( ) [EOL] proc . join ( ) [EOL] [EOL] def run_subcommand ( self , * cmd ) : [EOL] cli . run_command ( [string] , self . config_file , * cmd ) [EOL] [EOL] @ pytest . fixture ( autouse = True ) def setup_teardown ( self , request ) : [EOL] [comment] [EOL] _ , config_file = tempfile . mkstemp ( ) [EOL] [EOL] with open ( config_file , [string] ) as f : [EOL] f . write ( toml . dumps ( { [string] : { [string] : True , [string] : [number] , [string] : True , } , [string] : { [string] : [string] , } , [string] : { request . node . name : { [string] : self . handler_module , } , } } ) ) [EOL] [EOL] self . config_file = config_file [EOL] self . config = Config . from_file ( self . config_file ) [EOL] [EOL] self . db = Db ( self . config . postgresql ) [EOL] self . redis = Redis ( host = self . config . redis . host , port = self . config . redis . port , password = self . config . redis . password ) [EOL] [EOL] [comment] [EOL] self . ensure_no_queues ( ) [EOL] self . ensure_no_tables ( ) [EOL] [EOL] [comment] [EOL] yield [EOL] [EOL] [comment] [EOL] self . db . drop_all ( ) [EOL] self . ensure_no_tables ( ) [EOL] [EOL] [comment] [EOL] Base . _decl_class_registry . clear ( ) [EOL] Base . metadata . clear ( ) [EOL] Base . metadata . dispatch . _clear ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] modules_to_deregister = [ ] [EOL] [EOL] for queue_config in self . config . queues . values ( ) : [EOL] handler_root = queue_config . handler . rsplit ( [string] , [number] ) [ [number] ] [EOL] [EOL] for module in sys . modules : [EOL] if module . startswith ( handler_root ) : [EOL] modules_to_deregister . append ( module ) [EOL] [EOL] for module in modules_to_deregister : [EOL] sys . modules . pop ( module ) [EOL] [EOL] [comment] [EOL] self . clear_queues ( ) [EOL] self . ensure_no_queues ( ) [EOL] [EOL] [comment] [EOL] os . unlink ( self . config_file ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $multiprocessing.context.Process$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $multiprocessing.context.Process$ 0 0 0 0 0 $multiprocessing.context.Process$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] from . . import IntegrationTest [EOL] [EOL] [EOL] class TestQuery ( IntegrationTest ) : [EOL] handler_module = [string] [EOL] [EOL] def test_chunked_query ( self ) : [EOL] from . handler_module import Event [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] ) [EOL] self . ensure_tables ( Event ) [EOL] [EOL] [comment] [EOL] with self . db as dbsession : [EOL] for i in range ( [number] , [number] ) : [EOL] dbsession . add ( Event ( name = f' [string] { i }' ) ) [EOL] [EOL] CHUNK_SIZE = [number] [EOL] [EOL] [comment] [EOL] with self . db as dbsession : [EOL] query = dbsession . chunked_query ( Event , chunk_size = CHUNK_SIZE ) [EOL] counted = [number] [EOL] [EOL] for chunk_number , chunk in enumerate ( query ) : [EOL] for event_number , event in enumerate ( chunk , start = [number] ) : [EOL] index = event_number + chunk_number * CHUNK_SIZE [EOL] [EOL] [comment] [EOL] assert event . name == f' [string] { index }' [EOL] [EOL] counted += [number] [EOL] [EOL] [comment] [EOL] assert counted == [number] [EOL] [EOL] def test_chunked_query_descending ( self ) : [EOL] from . handler_module import Event [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] ) [EOL] self . ensure_tables ( Event ) [EOL] [EOL] [comment] [EOL] with self . db as dbsession : [EOL] for i in range ( [number] , [number] ) : [EOL] dbsession . add ( Event ( name = f' [string] { i }' ) ) [EOL] [EOL] CHUNK_SIZE = [number] [EOL] [EOL] [comment] [EOL] with self . db as dbsession : [EOL] query = dbsession . chunked_query ( Event , chunk_size = CHUNK_SIZE ) [EOL] query = query . reverse_chunks ( ) [EOL] counted = [number] [EOL] [EOL] for chunk_number , chunk in enumerate ( query , start = [number] ) : [EOL] for event_number , event in enumerate ( chunk , start = [number] ) : [EOL] index = event_number + ( [number] - chunk_number * CHUNK_SIZE ) [EOL] [EOL] [comment] [EOL] assert event . name == f' [string] { index }' [EOL] [EOL] counted += [number] [EOL] [EOL] [comment] [EOL] assert counted == [number] [EOL] [EOL] def test_filtered_chunked_query ( self ) : [EOL] from . handler_module import Event [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] ) [EOL] self . ensure_tables ( Event ) [EOL] [EOL] [comment] [EOL] with self . db as dbsession : [EOL] for i in range ( [number] , [number] ) : [EOL] dbsession . add ( Event ( name = f' [string] { i % [number] }' ) ) [EOL] [EOL] CHUNK_SIZE = [number] [EOL] [EOL] [comment] [EOL] with self . db as dbsession : [EOL] query = dbsession . chunked_query ( Event , chunk_size = CHUNK_SIZE ) [EOL] query = query . filter ( Event . name == [string] ) [EOL] counted = [number] [EOL] [EOL] for chunk in query : [EOL] for event in chunk : [EOL] assert event . name == f' [string] ' [EOL] counted += [number] [EOL] [EOL] assert counted == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0
	0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Type [EOL] import azafea [EOL] import builtins [EOL] import typing [EOL] from sqlalchemy . schema import Column [EOL] from sqlalchemy . types import Integer , Unicode [EOL] [EOL] from azafea . model import Base , DbSession [EOL] [EOL] [EOL] class Event ( Base ) : [EOL] __tablename__ = [string] [EOL] [EOL] id = Column ( Integer , primary_key = True ) [EOL] name = Column ( Unicode , nullable = False ) [EOL] [EOL] [EOL] def process ( dbsession , record ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[azafea.tests.integration.managedb.handler_module.Event]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[azafea.tests.integration.managedb.handler_module.Event]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] from . . import IntegrationTest [EOL] [EOL] [EOL] class TestManageDb ( IntegrationTest ) : [EOL] handler_module = [string] [EOL] [EOL] def test_initdb ( self ) : [EOL] from . handler_module import Event [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] ) [EOL] self . ensure_tables ( Event ) [EOL] [EOL] def test_reinitdb ( self ) : [EOL] from . handler_module import Event [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] ) [EOL] self . ensure_tables ( Event ) [EOL] [EOL] [comment] [EOL] with self . db as dbsession : [EOL] dbsession . add ( Event ( name = [string] ) ) [EOL] [EOL] [comment] [EOL] with self . db as dbsession : [EOL] event = dbsession . query ( Event ) . one ( ) [EOL] assert event . name == [string] [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] ) [EOL] self . ensure_no_tables ( ) [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] ) [EOL] self . ensure_tables ( Event ) [EOL] [EOL] [comment] [EOL] with self . db as dbsession : [EOL] assert dbsession . query ( Event ) . all ( ) == [ ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import pytest [EOL] [EOL] from sqlalchemy . sql import text [EOL] [EOL] from . . import IntegrationTest [EOL] [EOL] [EOL] class TestNullableBoolean ( IntegrationTest ) : [EOL] handler_module = [string] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ pytest . param ( [string] , True , id = [string] ) , pytest . param ( [string] , False , id = [string] ) , pytest . param ( [string] , None , id = [string] ) , ] ) def test_nullableboolean ( self , name , value ) : [EOL] from . handler_module import Event [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] ) [EOL] self . ensure_tables ( Event ) [EOL] [EOL] [comment] [EOL] with self . db as dbsession : [EOL] dbsession . add ( Event ( name = name , value = value ) ) [EOL] [EOL] [comment] [EOL] with self . db as dbsession : [EOL] event = dbsession . query ( Event ) . one ( ) [EOL] assert event . name == name [EOL] assert event . value == value [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] result = dbsession . execute ( text ( [string] ) ) [EOL] assert result . rowcount == [number] [EOL] assert result . fetchone ( ) [ [number] ] == name [EOL] [EOL] def test_query_filtered_on_none ( self ) : [EOL] from . handler_module import Event [EOL] [EOL] [comment] [EOL] self . run_subcommand ( [string] ) [EOL] self . ensure_tables ( Event ) [EOL] [EOL] [comment] [EOL] with self . db as dbsession : [EOL] dbsession . add ( Event ( name = [string] , value = None ) ) [EOL] [EOL] [comment] [EOL] with self . db as dbsession : [EOL] event = dbsession . query ( Event ) . filter_by ( value = None ) . one ( ) [EOL] assert event . name == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Type [EOL] import azafea [EOL] import builtins [EOL] import typing [EOL] from sqlalchemy . schema import Column [EOL] from sqlalchemy . types import Integer , Unicode [EOL] [EOL] from azafea . model import Base , DbSession , NullableBoolean [EOL] [EOL] [EOL] class Event ( Base ) : [EOL] __tablename__ = [string] [EOL] [EOL] id = Column ( Integer , primary_key = True ) [EOL] name = Column ( Unicode , nullable = False ) [EOL] value = Column ( NullableBoolean , nullable = False ) [EOL] [EOL] [EOL] def process ( dbsession , record ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[azafea.tests.integration.nullableboolean.handler_module.Event]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[azafea.tests.integration.nullableboolean.handler_module.Event]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[azafea.tests.integration.nullableboolean.handler_module.Event]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import os [EOL] [EOL] import pytest [EOL] [EOL] from . . import IntegrationTest [EOL] [EOL] [EOL] class TestEmptyMigrations ( IntegrationTest ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] @ pytest . fixture ( autouse = True ) def set_handler_module ( self , handler_with_migrations ) : [EOL] self . handler_module = handler_with_migrations . basename [EOL] self . _handler_path = handler_with_migrations [EOL] [EOL] def test_make_empty_migration ( self ) : [EOL] self . run_subcommand ( [string] , [string] ) [EOL] [EOL] migrations = ( self . _handler_path / [string] ) . listdir ( ) [EOL] assert len ( migrations ) == [number] [EOL] [EOL] migration = migrations [ [number] ] . read_text ( [string] ) [EOL] assert [string] [EOL] assert [string] in migration [EOL] assert [string] in migration [EOL] assert [string] . join ( [ [string] , [string] , [string] , [string] , ] ) in migration [EOL] assert [string] . join ( [ [string] , [string] , [string] , ] ) in migration [EOL] [EOL] [EOL] class TestMigrations ( IntegrationTest ) : [EOL] handler_module = [string] [EOL] [EOL] @ pytest . fixture ( autouse = True ) def clean_migrations ( self , request ) : [EOL] self . _migrations_dir = os . path . join ( request . fspath . dirname , [string] ) [EOL] os . makedirs ( self . _migrations_dir , exist_ok = True ) [EOL] assert len ( self . _list_migrations ( ) ) == [number] [EOL] [EOL] yield [EOL] [EOL] for migration in self . _list_migrations ( ) : [EOL] os . unlink ( migration ) [EOL] [EOL] def _list_migrations ( self ) : [EOL] return [ os . path . join ( self . _migrations_dir , m ) for m in os . scandir ( self . _migrations_dir ) ] [EOL] [EOL] def test_make_migration ( self , request ) : [EOL] self . run_subcommand ( [string] , [string] ) [EOL] [EOL] generated_migrations = self . _list_migrations ( ) [EOL] assert len ( generated_migrations ) == [number] [EOL] [EOL] with open ( generated_migrations [ [number] ] , [string] ) as f : [EOL] migration = f . read ( ) [EOL] [EOL] assert [string] [EOL] assert [string] in migration [EOL] assert [string] in migration [EOL] assert [string] . join ( [ [string] , [string] , [string] ] ) in migration [EOL] assert [string] . join ( [ [string] , [string] , [string] , [string] , ] ) in migration [EOL] [EOL] def test_migratedb ( self , handler_with_migrations ) : [EOL] from . handler_module import Event [EOL] [EOL] self . run_subcommand ( [string] , [string] ) [EOL] self . ensure_no_tables ( ) [EOL] [EOL] generated_migrations = self . _list_migrations ( ) [EOL] assert len ( generated_migrations ) == [number] [EOL] [EOL] self . run_subcommand ( [string] ) [EOL] self . ensure_tables ( Event ) [EOL] [EOL] def test_one_more_migration ( self , handler_with_migrations ) : [EOL] from . handler_module import Event [EOL] [EOL] self . run_subcommand ( [string] , [string] ) [EOL] self . ensure_no_tables ( ) [EOL] [EOL] generated_migrations = self . _list_migrations ( ) [EOL] assert len ( generated_migrations ) == [number] [EOL] [EOL] first_migration = generated_migrations [ [number] ] [EOL] [EOL] with open ( first_migration , [string] ) as f : [EOL] for line in f : [EOL] if line . startswith ( [string] ) : [EOL] first_rev = line . strip ( ) [ [number] : ] [EOL] [EOL] self . run_subcommand ( [string] ) [EOL] self . ensure_tables ( Event ) [EOL] [EOL] self . run_subcommand ( [string] , [string] ) [EOL] [EOL] generated_migrations = self . _list_migrations ( ) [EOL] assert len ( generated_migrations ) == [number] [EOL] [EOL] new_migrations = [ m for m in generated_migrations if m != first_migration ] [EOL] assert len ( new_migrations ) == [number] [EOL] [EOL] new_migration = new_migrations [ [number] ] [EOL] [EOL] with open ( new_migration , [string] ) as f : [EOL] migration_text = f . read ( ) [EOL] [EOL] assert f" [string] { first_rev } [string] " in migration_text [EOL] assert [string] in migration_text [EOL] assert [string] in migration_text [EOL] assert [string] . join ( [ [string] , [string] , [string] , [string] , ] ) in migration_text [EOL] assert [string] . join ( [ [string] , [string] , [string] , ] ) in migration_text [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Type [EOL] import typing [EOL] import azafea [EOL] from sqlalchemy . schema import Column [EOL] from sqlalchemy . types import Integer , Unicode [EOL] [EOL] from azafea . model import Base [EOL] [EOL] [EOL] class Event ( Base ) : [EOL] __tablename__ = [string] [EOL] [EOL] id = Column ( Integer , primary_key = True ) [EOL] name = Column ( Unicode , nullable = False ) [EOL] [EOL] [EOL] def process ( * args , ** kwargs ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[azafea.tests.integration.migrations.handler_module.Event]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[azafea.tests.integration.migrations.handler_module.Event]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Optional , MutableMapping , Dict , Any , Mapping , List , Callable [EOL] import logging [EOL] import typing [EOL] import builtins [EOL] import copy [EOL] import dataclasses [EOL] import logging [EOL] import os [EOL] from typing import Any , Callable , Dict , List , Mapping , MutableMapping , Optional [EOL] [EOL] from pydantic . class_validators import root_validator , validator [EOL] from pydantic . dataclasses import dataclass [EOL] from pydantic . error_wrappers import ValidationError [EOL] [EOL] import toml [EOL] [EOL] from . _validators import is_boolean , is_non_empty_string , is_strictly_positive_integer [EOL] from . . utils import get_callable , get_cpu_count [EOL] [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] DEFAULT_PASSWORD = [string] [EOL] [EOL] [EOL] class InvalidConfigurationError ( Exception ) : [EOL] def __init__ ( self , errors ) : [EOL] self . errors = errors [EOL] [EOL] def __str__ ( self ) : [EOL] msg = [ [string] ] [EOL] [EOL] for e in self . errors : [EOL] loc = e [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] if loc [ [number] ] == [string] and loc [ - [number] ] == [string] : [EOL] loc = ( * loc [ [number] : - [number] ] , [string] ) [EOL] [EOL] msg . append ( f" [string] { [string] . join ( loc ) } [string] { e [ [string] ] }" ) [EOL] [EOL] return [string] . join ( msg ) [EOL] [EOL] [EOL] class NoSuchConfigurationError ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class _Base : [EOL] def __getattr__ ( self , name ) : [EOL] [comment] [EOL] if name . startswith ( [string] ) and name . endswith ( [string] ) : [EOL] raise AttributeError ( name ) [EOL] [EOL] raise NoSuchConfigurationError ( f' [string] { name !r}' ) [EOL] [EOL] [EOL] def asdict ( obj ) : [comment] [EOL] [comment] [EOL] if isinstance ( obj , _Base ) : [EOL] result = { } [EOL] [EOL] for f in dataclasses . fields ( obj ) : [EOL] if not f . init : [EOL] [comment] [EOL] continue [EOL] [EOL] k = f . name [EOL] if k == [string] : [EOL] result [ k ] = [string] [EOL] else : [EOL] result [ k ] = asdict ( getattr ( obj , k ) ) [EOL] [EOL] return result [EOL] [EOL] elif isinstance ( obj , dict ) : [EOL] return { k : asdict ( v ) for k , v in obj . items ( ) } [EOL] [EOL] else : [EOL] return copy . deepcopy ( obj ) [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class Main ( _Base ) : [EOL] verbose = False [EOL] number_of_workers = dataclasses . field ( default_factory = get_cpu_count ) [EOL] exit_on_empty_queues = False [EOL] [EOL] @ validator ( [string] , pre = True ) def verbose_is_boolean ( cls , value ) : [EOL] return is_boolean ( value ) [EOL] [EOL] @ validator ( [string] , pre = True ) def number_of_workers_is_strictly_positive_integer ( cls , value ) : [EOL] return is_strictly_positive_integer ( value ) [EOL] [EOL] @ validator ( [string] , pre = True ) def exit_on_empty_queues_is_boolean ( cls , value ) : [EOL] return is_boolean ( value ) [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class Redis ( _Base ) : [EOL] host = [string] [EOL] port = [number] [EOL] password = DEFAULT_PASSWORD [EOL] [EOL] @ validator ( [string] , pre = True ) def host_is_non_empty_string ( cls , value ) : [EOL] return is_non_empty_string ( value ) [EOL] [EOL] @ validator ( [string] , pre = True ) def port_is_strictly_positive_integer ( cls , value ) : [EOL] return is_strictly_positive_integer ( value ) [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class PostgreSQL ( _Base ) : [EOL] host = [string] [EOL] port = [number] [EOL] user = [string] [EOL] password = DEFAULT_PASSWORD [EOL] database = [string] [EOL] connect_args = dataclasses . field ( default_factory = dict ) [EOL] [EOL] @ validator ( [string] , pre = True ) def host_is_non_empty_string ( cls , value ) : [EOL] return is_non_empty_string ( value ) [EOL] [EOL] @ validator ( [string] , pre = True ) def port_is_strictly_positive_integer ( cls , value ) : [EOL] return is_strictly_positive_integer ( value ) [EOL] [EOL] @ validator ( [string] , pre = True ) def user_is_non_empty_string ( cls , value ) : [EOL] return is_non_empty_string ( value ) [EOL] [EOL] @ validator ( [string] , pre = True ) def password_is_non_empty_string ( cls , value ) : [EOL] return is_non_empty_string ( value ) [EOL] [EOL] @ validator ( [string] , pre = True ) def database_is_non_empty_string ( cls , value ) : [EOL] return is_non_empty_string ( value ) [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class Queue ( _Base ) : [EOL] handler = ... [EOL] processor = dataclasses . field ( init = False ) [EOL] cli = dataclasses . field ( default = None , init = False ) [EOL] [EOL] @ staticmethod def _validate_callable ( module_name , callable_name ) : [EOL] try : [EOL] return get_callable ( module_name , callable_name ) [EOL] [EOL] except ImportError : [EOL] raise ValueError ( f' [string] { module_name !r}' ) [EOL] [EOL] except AttributeError : [EOL] raise ValueError ( f' [string] { module_name !r} [string] { callable_name !r} [string] ' ) [EOL] [EOL] @ root_validator ( pre = True ) def get_computed_fields ( cls , values ) : [EOL] handler = values [ [string] ] [EOL] values [ [string] ] = cls . _validate_callable ( handler , [string] ) [EOL] [EOL] try : [EOL] values [ [string] ] = cls . _validate_callable ( handler , [string] ) [EOL] [EOL] except ValueError : [EOL] [comment] [EOL] pass [EOL] [EOL] return values [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class Config ( _Base ) : [EOL] main = dataclasses . field ( default_factory = Main ) [EOL] redis = dataclasses . field ( default_factory = Redis ) [EOL] postgresql = dataclasses . field ( default_factory = PostgreSQL ) [EOL] queues = dataclasses . field ( default_factory = dict ) [EOL] [EOL] def __post_init_post_parse__ ( self ) : [EOL] self . warn_about_default_passwords ( ) [EOL] [EOL] @ classmethod def from_file ( cls , config_file_path ) : [EOL] overrides = { } [EOL] [EOL] if os . path . exists ( config_file_path ) : [EOL] overrides = toml . load ( config_file_path ) [EOL] [EOL] try : [EOL] return cls ( ** overrides ) [EOL] [EOL] except ValidationError as e : [EOL] raise InvalidConfigurationError ( e . errors ( ) ) [EOL] [EOL] def warn_about_default_passwords ( self ) : [EOL] if self . postgresql . password == DEFAULT_PASSWORD : [EOL] log . warning ( [string] ) [EOL] [EOL] if self . redis . password == DEFAULT_PASSWORD : [EOL] log . warning ( [string] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return toml . dumps ( asdict ( self ) ) . strip ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Callable$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Callable]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Main$ 0 0 0 0 0 0 0 0 0 0 $Redis$ 0 0 0 0 0 0 0 0 0 0 $PostgreSQL$ 0 0 0 0 0 0 0 0 0 0 $typing.Mapping[builtins.str,Queue]$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'Config'$ 0 0 0 $builtins.str$ 0 0 0 $typing.MutableMapping[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.MutableMapping[builtins.str,typing.Any]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.MutableMapping[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0