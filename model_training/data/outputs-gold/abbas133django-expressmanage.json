	0
	0
from typing import Union , Tuple [EOL] import typing [EOL] __version__ = [string] [EOL] __version_info__ = tuple ( [ int ( num ) if num . isdigit ( ) else num for num in __version__ . replace ( [string] , [string] , [number] ) . split ( [string] ) ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[typing.Union[builtins.int,builtins.str],...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def normalize_string ( pString ) : [EOL] [docstring] [EOL] return pString . strip ( ) . title ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . db . models import Sum [EOL] [EOL] from expressmanage . orders . models import InwardOrder , OutwardOrder [EOL] from expressmanage . invoices . models import Invoice , Payment [EOL] [EOL] [EOL] class CustomerSummary : [EOL] def get_recent_invoices ( customer ) : [EOL] return Invoice . objects . filter ( inward_order__customer = customer . pk ) . order_by ( [string] ) [EOL] [EOL] def get_active_lots ( customer ) : [EOL] return InwardOrder . objects . filter ( customer = customer . pk , status = [string] ) . count ( ) [EOL] [EOL] def get_active_invoices ( customer ) : [EOL] return Invoice . objects . filter ( inward_order__customer = customer . pk , status = [string] ) . count ( ) [EOL] [EOL] def get_pending_amount ( customer ) : [EOL] return Invoice . objects . filter ( inward_order__customer = customer . pk , status = [string] ) . aggregate ( Sum ( [string] ) ) [ [string] ]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import expressmanage [EOL] import typing [EOL] from django . db import models [EOL] [EOL] from django_extensions . db . models import TimeStampedModel [EOL] from author . decorators import with_author [EOL] [EOL] from expressmanage . utils import normalize_string [EOL] [EOL] [EOL] @ with_author class Customer ( TimeStampedModel ) : [EOL] name = models . CharField ( max_length = [number] ) [EOL] firm = models . CharField ( max_length = [number] ) [EOL] address = models . CharField ( max_length = [number] , blank = True , null = True ) [EOL] city = models . CharField ( max_length = [number] , blank = True , null = True ) [EOL] mobile_number = models . IntegerField ( blank = True , null = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] self . name = normalize_string ( self . name ) [EOL] self . firm = normalize_string ( self . firm ) [EOL] self . address = normalize_string ( self . address ) [EOL] self . city = normalize_string ( self . city ) [EOL] super ( Customer , self ) . save ( * args , ** kwargs ) [EOL] [EOL] [comment] [EOL] [comment]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.customers.models.Customer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.customers.models.Customer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.customers.models.Customer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.customers.models.Customer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.customers.models.Customer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class CustomersConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
import builtins [EOL] from typing import Type , Any [EOL] import expressmanage [EOL] import typing [EOL] from django . views import generic [EOL] from django . urls import reverse_lazy [EOL] from django . contrib . auth . mixins import LoginRequiredMixin , PermissionRequiredMixin [EOL] [EOL] from . forms import CustomerForm [EOL] from . models import Customer [EOL] from . helper import CustomerSummary [EOL] [EOL] class Customer_IndexView ( LoginRequiredMixin , generic . ListView ) : [EOL] template_name = [string] [EOL] [EOL] def get_queryset ( self ) : [EOL] return Customer . objects . all ( ) [EOL] [EOL] [EOL] class Customer_DetailView ( LoginRequiredMixin , PermissionRequiredMixin , generic . DetailView ) : [EOL] raise_exception = True [EOL] permission_required = ( [string] ) [EOL] [EOL] model = Customer [EOL] template_name = [string] [EOL] object = None [EOL] [EOL] def get ( self , request , * args , ** kwargs ) : [EOL] self . object = self . get_object ( ) [EOL] [EOL] recent_invoices = CustomerSummary . get_recent_invoices ( self . object ) [ : [number] ] [EOL] active_lots = CustomerSummary . get_active_lots ( self . object ) [EOL] active_invoices = CustomerSummary . get_active_invoices ( self . object ) [EOL] pending_amount = CustomerSummary . get_pending_amount ( self . object ) [EOL] [EOL] return self . render_to_response ( self . get_context_data ( recent_invoices = recent_invoices , active_lots = active_lots , active_invoices = active_invoices , pending_amount = pending_amount ) ) [EOL] [EOL] [EOL] class Customer_CreateView ( LoginRequiredMixin , PermissionRequiredMixin , generic . CreateView ) : [EOL] raise_exception = True [EOL] permission_required = ( [string] ) [EOL] [EOL] model = Customer [EOL] form_class = CustomerForm [EOL] template_name = [string] [EOL] [EOL] def get_success_url ( self ) : [EOL] return reverse_lazy ( [string] , kwargs = { [string] : self . object . pk } ) [EOL] [EOL] [EOL] class Customer_UpdateView ( LoginRequiredMixin , PermissionRequiredMixin , generic . UpdateView ) : [EOL] raise_exception = True [EOL] permission_required = ( [string] ) [EOL] [EOL] model = Customer [EOL] form_class = CustomerForm [EOL] template_name = [string] [EOL] [EOL] def get_success_url ( self ) : [EOL] return reverse_lazy ( [string] , kwargs = { [string] : self . object . pk } ) [EOL] [EOL] [EOL] class Customer_DeleteView ( LoginRequiredMixin , PermissionRequiredMixin , generic . DeleteView ) : [EOL] raise_exception = True [EOL] permission_required = ( [string] ) [EOL] [EOL] model = Customer [EOL] template_name = [string] [EOL] success_url = reverse_lazy ( [string] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Type[expressmanage.customers.models.Customer]$ 0 0 0 $typing.Type[expressmanage.customers.views.Customer_CreateView]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Type[expressmanage.customers.models.Customer]$ 0 0 0 $typing.Type[expressmanage.customers.views.Customer_UpdateView]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Type[expressmanage.customers.models.Customer]$ 0 0 0 $builtins.str$ 0 0 0 $typing.Type[expressmanage.customers.views.Customer_DeleteView]$ 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class InvoicesConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Type , Any [EOL] import expressmanage [EOL] import typing [EOL] from django . db import models [EOL] [EOL] from django_extensions . db . models import TimeStampedModel [EOL] from author . decorators import with_author [EOL] [EOL] from datetime import datetime [EOL] from decimal import Decimal [EOL] [EOL] from expressmanage . orders . models import InwardOrder , OutwardOrder , OutOli [EOL] from expressmanage . customers . models import Customer [EOL] [EOL] [EOL] @ with_author class Invoice ( TimeStampedModel ) : [EOL] [comment] [EOL] ACTIVE = [string] [EOL] INACTIVE = [string] [EOL] STATUS_CHOICES = ( ( ACTIVE , ACTIVE ) , ( INACTIVE , INACTIVE ) , ) [EOL] [EOL] inward_order = models . ForeignKey ( InwardOrder , on_delete = models . CASCADE ) [EOL] outward_order = models . ForeignKey ( OutwardOrder , on_delete = models . CASCADE ) [EOL] total_amount = models . DecimalField ( max_digits = [number] , decimal_places = [number] , default = [number] ) [EOL] received_amount = models . DecimalField ( max_digits = [number] , decimal_places = [number] , default = [number] ) [EOL] pending_amount = models . DecimalField ( max_digits = [number] , decimal_places = [number] , default = [number] ) [EOL] status = models . CharField ( max_length = [number] , choices = STATUS_CHOICES , default = ACTIVE ) [EOL] [EOL] def __str__ ( self ) : [EOL] return str ( self . pk ) [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] self . pending_amount = Decimal ( self . total_amount ) - Decimal ( self . received_amount ) [EOL] self . status = self . ACTIVE if self . pending_amount > [number] else self . INACTIVE [EOL] [EOL] super ( Invoice , self ) . save ( * args , ** kwargs ) [EOL] [EOL] [EOL] @ with_author class InvoiceLineItem ( TimeStampedModel ) : [EOL] invoice = models . ForeignKey ( Invoice , on_delete = models . CASCADE ) [EOL] out_oli = models . ForeignKey ( OutOli , on_delete = models . CASCADE ) [EOL] elapsed_days = models . IntegerField ( ) [EOL] rate = models . DecimalField ( max_digits = [number] , decimal_places = [number] ) [EOL] amount = models . DecimalField ( max_digits = [number] , decimal_places = [number] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return str ( self . invoice . pk ) [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] super ( InvoiceLineItem , self ) . save ( * args , ** kwargs ) [EOL] [EOL] [EOL] @ with_author class Payment ( TimeStampedModel ) : [EOL] customer = models . ForeignKey ( Customer , on_delete = models . CASCADE ) [EOL] invoice = models . ForeignKey ( Invoice , on_delete = models . CASCADE ) [EOL] amount = models . DecimalField ( max_digits = [number] , decimal_places = [number] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return str ( self . pk ) [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] super ( Payment , self ) . save ( * args , ** kwargs ) [EOL] [EOL] invoice = Invoice . objects . get ( pk = self . invoice . pk ) [EOL] invoice . received_amount = invoice . received_amount + self . amount [EOL] invoice . save ( ) [EOL] [EOL] Payment . generate_receipt ( invoice , self ) [EOL] [EOL] def generate_receipt ( invoice , payment ) : [EOL] receipt = Receipt ( invoice = invoice , payment = payment ) [EOL] receipt . save ( ) [EOL] [EOL] [EOL] @ with_author class Receipt ( TimeStampedModel ) : [EOL] invoice = models . ForeignKey ( Invoice , on_delete = models . CASCADE ) [EOL] payment = models . ForeignKey ( Payment , on_delete = models . CASCADE ) [EOL] [EOL] def __str__ ( self ) : [EOL] return str ( self . pk ) [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] super ( Receipt , self ) . save ( * args , ** kwargs )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.invoices.models.Invoice]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.invoices.models.Invoice]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.invoices.models.Invoice]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.invoices.models.Invoice]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.invoices.models.Invoice]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.invoices.models.Invoice]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.invoices.models.InvoiceLineItem]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.invoices.models.InvoiceLineItem]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.invoices.models.InvoiceLineItem]$ 0 0 0 0 0 0 0 $typing.Type[expressmanage.invoices.models.InvoiceLineItem]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.invoices.models.InvoiceLineItem]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.invoices.models.Payment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.invoices.models.Payment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.invoices.models.Payment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $expressmanage.invoices.models.Receipt$ 0 0 0 0 0 0 0 0 0 0 0 0 $expressmanage.invoices.models.Receipt$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.invoices.models.Receipt]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.invoices.models.Receipt]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any [EOL] import expressmanage [EOL] import typing [EOL] from django . views import generic [EOL] from django . urls import reverse_lazy [EOL] from django . contrib . auth . mixins import LoginRequiredMixin , PermissionRequiredMixin [EOL] from django . shortcuts import render [EOL] from django . http import JsonResponse [EOL] from django . db . models import Sum [EOL] from django . http import HttpResponseRedirect [EOL] [EOL] from . models import Invoice , InvoiceLineItem , Payment , Receipt [EOL] from . forms import PaymentForm , LotPaymentForm [EOL] [EOL] from expressmanage . orders . models import InwardOrder [EOL] [EOL] [comment] [EOL] [comment] [EOL] class Invoice_IndexView ( LoginRequiredMixin , PermissionRequiredMixin , generic . ListView ) : [EOL] raise_exception = True [EOL] permission_required = ( [string] ) [EOL] [EOL] template_name = [string] [EOL] [EOL] def get_queryset ( self ) : [EOL] return Invoice . objects . all ( ) [EOL] [EOL] [EOL] class Invoice_DetailView ( LoginRequiredMixin , PermissionRequiredMixin , generic . DetailView ) : [EOL] raise_exception = True [EOL] permission_required = ( [string] ) [EOL] [EOL] model = Invoice [EOL] template_name = [string] [EOL] [EOL] [EOL] class Invoice_PrintView ( LoginRequiredMixin , PermissionRequiredMixin , generic . DetailView ) : [EOL] raise_exception = True [EOL] permission_required = ( [string] ) [EOL] [EOL] model = Invoice [EOL] template_name = [string] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] class Payment_IndexView ( LoginRequiredMixin , PermissionRequiredMixin , generic . ListView ) : [EOL] raise_exception = True [EOL] permission_required = ( [string] ) [EOL] [EOL] template_name = [string] [EOL] [EOL] def get_queryset ( self ) : [EOL] return Payment . objects . all ( ) [EOL] [EOL] [EOL] class Payment_CreateView ( LoginRequiredMixin , PermissionRequiredMixin , generic . CreateView ) : [EOL] raise_exception = True [EOL] permission_required = ( [string] ) [EOL] [EOL] model = Payment [EOL] template_name = [string] [EOL] form_class = PaymentForm [EOL] [EOL] def get_success_url ( self ) : [EOL] return reverse_lazy ( [string] ) [EOL] [EOL] [EOL] class LotPayment_CreateView ( LoginRequiredMixin , PermissionRequiredMixin , generic . FormView ) : [EOL] raise_exception = True [EOL] permission_required = ( [string] ) [EOL] [EOL] template_name = [string] [EOL] form_class = LotPaymentForm [EOL] success_url = reverse_lazy ( [string] ) [EOL] [EOL] def get ( self , request , * args , ** kwargs ) : [EOL] form_class = self . get_form_class ( ) [EOL] form = self . get_form ( form_class ) [EOL] return self . render_to_response ( self . get_context_data ( form = form ) ) [EOL] [EOL] def post ( self , request , * args , ** kwargs ) : [EOL] form_class = self . get_form_class ( ) [EOL] form = self . get_form ( form_class ) [EOL] [EOL] if form . is_valid ( ) : [EOL] return self . form_valid ( form ) [EOL] else : [EOL] return self . form_invalid ( form ) [EOL] [EOL] def form_valid ( self , form ) : [EOL] customer = form . cleaned_data [ [string] ] [EOL] inward_order = form . cleaned_data [ [string] ] [EOL] amount = form . cleaned_data [ [string] ] [EOL] [EOL] order_invoices = Invoice . objects . filter ( inward_order = inward_order ) [EOL] [EOL] for invoice in order_invoices : [EOL] invoice_payment = Payment ( ) [EOL] invoice_payment . customer = customer [EOL] invoice_payment . invoice = invoice [EOL] [EOL] if amount > [number] : [EOL] if amount > invoice . pending_amount : [EOL] invoice_payment . amount = invoice . pending_amount [EOL] amount = amount - invoice . pending_amount [EOL] else : [EOL] invoice_payment . amount = amount [EOL] amount = [number] [EOL] invoice_payment . save ( ) [EOL] return HttpResponseRedirect ( self . get_success_url ( ) ) [EOL] [EOL] def form_invalid ( self , form ) : [EOL] return self . render_to_response ( self . get_context_data ( form = form ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] class Receipt_IndexView ( LoginRequiredMixin , PermissionRequiredMixin , generic . ListView ) : [EOL] raise_exception = True [EOL] permission_required = ( [string] ) [EOL] [EOL] template_name = [string] [EOL] [EOL] def get_queryset ( self ) : [EOL] return Receipt . objects . all ( ) [EOL] [EOL] [EOL] class Receipt_DetailView ( LoginRequiredMixin , PermissionRequiredMixin , generic . DetailView ) : [EOL] raise_exception = True [EOL] permission_required = ( [string] ) [EOL] [EOL] model = Receipt [EOL] template_name = [string] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] def load_customer_invoices ( request ) : [EOL] customer_id = request . GET . get ( [string] ) [EOL] invoices = Invoice . objects . filter ( inward_order__customer = customer_id , status = [string] ) [EOL] return render ( request , [string] , { [string] : invoices } ) [EOL] [EOL] [EOL] def load_customer_inward_orders ( request ) : [EOL] customer_id = request . GET . get ( [string] ) [EOL] inward_orders = InwardOrder . objects . filter ( customer = customer_id , status = [string] ) [EOL] return render ( request , [string] , { [string] : inward_orders } ) [EOL] [EOL] [EOL] def fetch_invoice_details ( request ) : [EOL] invoice_id = request . GET . get ( [string] ) [EOL] invoice = Invoice . objects . get ( pk = invoice_id ) [EOL] return JsonResponse ( { [string] : invoice . pending_amount } ) [EOL] [EOL] [EOL] def load_order_amount_pending ( request ) : [EOL] inward_order_id = request . GET . get ( [string] ) [EOL] return JsonResponse ( { [string] : Invoice . objects . filter ( inward_order = inward_order_id ) . aggregate ( Sum ( [string] ) ) [ [string] ] } )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Type[expressmanage.invoices.models.Invoice]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Type[expressmanage.invoices.models.Invoice]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Type[expressmanage.invoices.models.Payment]$ 0 0 0 $builtins.str$ 0 0 0 $typing.Type[expressmanage.invoices.forms.PaymentForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[expressmanage.invoices.forms.LotPaymentForm]$ 0 0 0 $typing.Type[expressmanage.invoices.views.LotPayment_CreateView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 $expressmanage.invoices.models.Payment$ 0 0 0 0 0 $expressmanage.invoices.models.Payment$ 0 0 0 0 0 $expressmanage.invoices.models.Payment$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $expressmanage.invoices.models.Payment$ 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 $expressmanage.invoices.models.Payment$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $expressmanage.invoices.models.Payment$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Type[expressmanage.invoices.models.Receipt]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any , List [EOL] import expressmanage [EOL] import typing [EOL] from django import forms [EOL] [EOL] from . models import Payment , Invoice [EOL] [EOL] from expressmanage . customers . models import Customer [EOL] from expressmanage . orders . models import InwardOrder [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] class PaymentForm ( forms . ModelForm ) : [EOL] pending_amount = forms . DecimalField ( max_digits = [number] , decimal_places = [number] , required = False ) [EOL] [EOL] class Meta : [EOL] model = Payment [EOL] fields = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( PaymentForm , self ) . __init__ ( * args , ** kwargs ) [EOL] self . fields [ [string] ] . widget . attrs [ [string] ] = True [EOL] [EOL] def clean ( self ) : [EOL] cleaned_data = self . cleaned_data [EOL] amount = cleaned_data [ [string] ] [EOL] invoice = cleaned_data [ [string] ] [EOL] [EOL] if amount > invoice . pending_amount : [EOL] self . add_error ( [string] , [string] ) [EOL] return cleaned_data [EOL] [EOL] [EOL] class LotPaymentForm ( forms . Form ) : [EOL] customer = forms . ModelChoiceField ( queryset = Customer . objects . all ( ) ) [EOL] lot_number = forms . ModelChoiceField ( queryset = InwardOrder . objects . all ( ) ) [EOL] pending_amount = forms . DecimalField ( max_digits = [number] , decimal_places = [number] , required = False ) [EOL] amount = forms . DecimalField ( max_digits = [number] , decimal_places = [number] , required = False ) [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( LotPaymentForm , self ) . __init__ ( * args , ** kwargs ) [EOL] self . fields [ [string] ] . widget . attrs [ [string] ] = True [EOL] [EOL] def clean ( self ) : [EOL] cleaned_data = self . cleaned_data [EOL] amount = cleaned_data [ [string] ] [EOL] pending_amount = cleaned_data [ [string] ] [EOL] [EOL] if amount > pending_amount : [EOL] self . add_error ( [string] , [string] ) [EOL] return cleaned_data	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.invoices.forms.PaymentForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.invoices.models.Payment]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.invoices.forms.LotPaymentForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.invoices.forms.LotPaymentForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.invoices.forms.LotPaymentForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.invoices.forms.LotPaymentForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [comment]	0 0 0 0
	0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Type , Any [EOL] import expressmanage [EOL] import typing [EOL] from django . db import models [EOL] [EOL] from django_extensions . db . models import TimeStampedModel [EOL] from author . decorators import with_author [EOL] [EOL] from expressmanage . customers . models import Customer [EOL] from expressmanage . products . models import Product , ContainerType [EOL] [EOL] from datetime import date [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] @ with_author class InwardOrder ( TimeStampedModel ) : [EOL] [comment] [EOL] ACTIVE = [string] [EOL] INACTIVE = [string] [EOL] STATUS_CHOICES = ( ( ACTIVE , ACTIVE ) , ( INACTIVE , INACTIVE ) , ) [EOL] [EOL] [comment] [EOL] ONE = [string] [EOL] TWO = [string] [EOL] THREE = [string] [EOL] FOUR = [string] [EOL] CHAMBER_CHOICES = ( ( ONE , ONE ) , ( TWO , TWO ) , ( THREE , THREE ) , ( FOUR , FOUR ) , ) [EOL] [EOL] lot_number = models . CharField ( max_length = [number] , blank = True ) [EOL] date = models . DateField ( auto_now_add = False , auto_now = False , default = date . today ) [EOL] customer = models . ForeignKey ( Customer , on_delete = models . CASCADE ) [EOL] status = models . CharField ( max_length = [number] , choices = STATUS_CHOICES , default = ACTIVE ) [EOL] chamber = models . CharField ( max_length = [number] , choices = CHAMBER_CHOICES , default = ONE ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . lot_number [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] [comment] [EOL] super ( InwardOrder , self ) . save ( * args , ** kwargs ) [EOL] [EOL] [comment] [EOL] self . lot_number = self . customer . firm [ [number] ] . upper ( ) + self . customer . name [ [number] ] . upper ( ) + [string] + str ( self . pk ) [EOL] [EOL] super ( InwardOrder , self ) . save ( * args , ** kwargs ) [EOL] [EOL] [EOL] @ with_author class InOli ( TimeStampedModel ) : [EOL] inward_order = models . ForeignKey ( InwardOrder , on_delete = models . CASCADE ) [EOL] product = models . ForeignKey ( Product , on_delete = models . CASCADE ) [EOL] container_type = models . ForeignKey ( ContainerType , on_delete = models . CASCADE ) [EOL] quantity = models . IntegerField ( default = [number] ) [EOL] stock = models . IntegerField ( default = [number] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return str ( self . pk ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] def save ( self , * args , ** kwargs ) : [EOL] [comment] [EOL] if self . _state . adding is True : [EOL] self . stock = self . quantity [EOL] [EOL] super ( InOli , self ) . save ( * args , ** kwargs ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] @ with_author class OutwardOrder ( TimeStampedModel ) : [EOL] [comment] [EOL] ACTIVE = [string] [EOL] INACTIVE = [string] [EOL] STATUS_CHOICES = ( ( ACTIVE , ACTIVE ) , ( INACTIVE , INACTIVE ) , ) [EOL] [EOL] customer = models . ForeignKey ( Customer , on_delete = models . CASCADE ) [EOL] inward_order = models . ForeignKey ( InwardOrder , on_delete = models . CASCADE ) [EOL] date = models . DateField ( auto_now_add = False , auto_now = False , default = date . today ) [EOL] received_by = models . CharField ( max_length = [number] , default = [string] ) [EOL] status = models . CharField ( max_length = [number] , choices = STATUS_CHOICES , default = ACTIVE ) [EOL] [EOL] def __str__ ( self ) : [EOL] return str ( self . pk ) [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] super ( OutwardOrder , self ) . save ( * args , ** kwargs ) [EOL] [EOL] [EOL] @ with_author class OutOli ( TimeStampedModel ) : [EOL] outward_order = models . ForeignKey ( OutwardOrder , on_delete = models . CASCADE ) [EOL] in_oli = models . ForeignKey ( InOli , on_delete = models . CASCADE , blank = True ) [EOL] quantity = models . IntegerField ( default = [number] ) [EOL] in_stock = models . IntegerField ( default = [number] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return str ( self . pk ) [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] in_oli = InOli . objects . get ( pk = self . in_oli . pk ) [EOL] in_oli . stock -= self . quantity [EOL] in_oli . save ( ) [EOL] [EOL] self . in_stock = in_oli . stock [EOL] super ( OutOli , self ) . save ( * args , ** kwargs )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.orders.models.OutwardOrder]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.orders.models.OutwardOrder]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.orders.models.OutwardOrder]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.orders.models.OutwardOrder]$ 0 0 0 0 $typing.Type[expressmanage.orders.models.OutwardOrder]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.orders.models.OutwardOrder]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.orders.models.OutOli]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.orders.models.OutOli]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.orders.models.OutOli]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.orders.models.OutOli]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , List , Dict , Tuple [EOL] import expressmanage [EOL] import typing [EOL] from django . contrib import admin [EOL] [EOL] from . models import InwardOrder , InOli , OutwardOrder , OutOli [EOL] [EOL] [EOL] class InOli_Inline ( admin . TabularInline ) : [EOL] model = InOli [EOL] [EOL] fieldsets = ( ( [string] , { [string] : ( [string] , [string] , [string] , [string] , [string] , ) , } ) , ) [EOL] [EOL] extra = [number] [EOL] [EOL] [EOL] class OutOli_Inline ( admin . TabularInline ) : [EOL] model = OutOli [EOL] [EOL] fieldsets = ( ( [string] , { [string] : ( [string] , [string] , [string] , [string] , ) , } ) , ) [EOL] [EOL] [EOL] class InwardOrderAdmin ( admin . ModelAdmin ) : [EOL] model = InwardOrder [EOL] [EOL] fieldsets = ( ( [string] , { [string] : ( [string] , [string] ) , } ) , ) [EOL] [EOL] inlines = [ InOli_Inline ] [EOL] [EOL] [EOL] class OutwardOrderAdmin ( admin . ModelAdmin ) : [EOL] model = OutwardOrder [EOL] [EOL] fieldsets = ( ( [string] , { [string] : ( [string] , [string] ) , } ) , ) [EOL] [EOL] inlines = [ OutOli_Inline ] [EOL] [EOL] [EOL] admin . site . register ( InwardOrder , InwardOrderAdmin ) [EOL] admin . site . register ( OutwardOrder , OutwardOrderAdmin )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.orders.models.InOli]$ 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,typing.Dict[builtins.str,typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.orders.models.OutOli]$ 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,typing.Dict[builtins.str,typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.orders.models.InwardOrder]$ 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,typing.Dict[builtins.str,typing.Tuple[builtins.str,builtins.str]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Type[expressmanage.orders.admin.InOli_Inline]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.orders.models.OutwardOrder]$ 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,typing.Dict[builtins.str,typing.Tuple[builtins.str,builtins.str]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Type[expressmanage.orders.admin.OutOli_Inline]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type , Tuple , Any , List [EOL] import expressmanage [EOL] import typing [EOL] from django . forms import ModelForm , ValidationError , HiddenInput [EOL] from django . forms . models import inlineformset_factory [EOL] [EOL] from . models import InwardOrder , InOli , OutwardOrder , OutOli [EOL] from . helpers import get_oli_applicable_rate [EOL] [EOL] [comment] [EOL] [comment] [EOL] class InwardOrderForm ( ModelForm ) : [EOL] class Meta : [EOL] model = InwardOrder [EOL] fields = [ [string] , [string] , [string] ] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( InwardOrderForm , self ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] [EOL] class InOliForm ( ModelForm ) : [EOL] class Meta : [EOL] model = InOli [EOL] fields = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( InOliForm , self ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] [EOL] class InOliResultForm ( ModelForm ) : [EOL] class Meta : [EOL] model = InOli [EOL] fields = ( [string] , [string] , [string] ) [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( InOliResultForm , self ) . __init__ ( * args , ** kwargs ) [EOL] self . fields [ [string] ] . widget . attrs [ [string] ] = True [EOL] self . fields [ [string] ] . widget . attrs [ [string] ] = True [EOL] self . fields [ [string] ] . widget . attrs [ [string] ] = True [EOL] [EOL] [EOL] class InOliUpdateForm ( ModelForm ) : [EOL] class Meta : [EOL] model = InOli [EOL] fields = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( InOliUpdateForm , self ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] [EOL] InOliFormSet = inlineformset_factory ( InwardOrder , InOli , can_delete = False , extra = [number] , form = InOliForm , ) [EOL] [EOL] InOliUpdateFormset = inlineformset_factory ( InwardOrder , InOli , can_delete = False , extra = [number] , form = InOliUpdateForm , ) [EOL] [EOL] InOliResultFormSet = inlineformset_factory ( InwardOrder , InOli , can_delete = False , extra = [number] , form = InOliResultForm , ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] class OutwardOrderForm ( ModelForm ) : [EOL] class Meta : [EOL] model = OutwardOrder [EOL] fields = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( OutwardOrderForm , self ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] [EOL] class OutwardOrderUpdateForm ( ModelForm ) : [EOL] class Meta : [EOL] model = OutwardOrder [EOL] fields = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( OutwardOrderUpdateForm , self ) . __init__ ( * args , ** kwargs ) [EOL] self . fields [ [string] ] . widget . attrs [ [string] ] = True [EOL] self . fields [ [string] ] . widget . attrs [ [string] ] = True [EOL] [EOL] [EOL] class OutOliForm ( ModelForm ) : [EOL] class Meta : [EOL] model = OutOli [EOL] fields = [ [string] , [string] , [string] ] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( OutOliForm , self ) . __init__ ( * args , ** kwargs ) [EOL] self . fields [ [string] ] . widget = HiddenInput ( ) [EOL] [EOL] def clean ( self ) : [EOL] cleaned_data = super ( OutOliForm , self ) . clean ( ) [EOL] quantity = cleaned_data [ [string] ] [EOL] stock = cleaned_data [ [string] ] . stock [EOL] [EOL] try : [EOL] oli = self . save ( commit = False ) [EOL] oli . in_oli = cleaned_data [ [string] ] [EOL] oli . outward_order = cleaned_data [ [string] ] [EOL] [EOL] get_oli_applicable_rate ( oli ) [EOL] [EOL] except Exception as e : [EOL] self . add_error ( [string] , [string] ) [EOL] [EOL] [EOL] if quantity > stock : [EOL] self . add_error ( [string] , [string] ) [EOL] return cleaned_data [EOL] [EOL] [EOL] OutOliFormSet = inlineformset_factory ( OutwardOrder , OutOli , can_delete = False , extra = [number] , form = OutOliForm , ) [EOL] [EOL] OutOliResultFormSet = inlineformset_factory ( OutwardOrder , OutOli , can_delete = False , extra = [number] , form = OutOliForm , )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.orders.models.OutOli]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.orders.models.OutOli]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.orders.models.OutOli]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.orders.models.OutOli]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.orders.models.OutOli]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.orders.models.OutOli]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.orders.models.OutOli]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class OrdersConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0
from typing import Any [EOL] import decimal [EOL] import expressmanage [EOL] import typing [EOL] from django . db . models import Sum [EOL] [EOL] from decimal import Decimal [EOL] [EOL] from expressmanage . products . models import RateSlab [EOL] from expressmanage . invoices . models import Invoice , InvoiceLineItem , Payment [EOL] from expressmanage . orders . models import OutwardOrder , OutOli [EOL] [EOL] def get_oli_elapsed_days ( out_oli ) : [EOL] return ( out_oli . outward_order . date - out_oli . in_oli . inward_order . date ) . days [EOL] [EOL] [EOL] def get_oli_applicable_rate ( out_oli , elapsed_days = None ) : [EOL] rate_slabs = RateSlab . objects . filter ( container_type = out_oli . in_oli . container_type ) . order_by ( [string] ) [EOL] elapsed_days = elapsed_days if elapsed_days is not None else get_oli_elapsed_days ( out_oli ) [EOL] [EOL] for rate_slab in rate_slabs : [EOL] if elapsed_days - rate_slab . number_of_days <= [number] : [EOL] return rate_slab . rate [EOL] return rate [EOL] [EOL] [EOL] def get_invoice ( outward_order ) : [EOL] return Invoice ( inward_order = outward_order . inward_order , outward_order = outward_order ) [EOL] [EOL] [EOL] def populate_invoice ( invoice , invoice_lis ) : [EOL] for invoice_li in invoice_lis : [EOL] invoice . total_amount = Decimal ( invoice . total_amount ) + Decimal ( invoice_li . amount ) [EOL] [EOL] return invoice [EOL] [EOL] [EOL] def get_oli_invoice_li ( invoice , out_oli ) : [EOL] elapsed_days = get_oli_elapsed_days ( out_oli ) [EOL] rate = get_oli_applicable_rate ( out_oli , elapsed_days ) [EOL] amount = Decimal ( out_oli . quantity ) * Decimal ( rate ) [EOL] invoice_li = InvoiceLineItem ( invoice = invoice , out_oli = out_oli , elapsed_days = elapsed_days , rate = rate , amount = amount ) [EOL] [EOL] return invoice_li [EOL] [EOL] [EOL] def get_out_olis ( inward_order ) : [EOL] return OutOli . objects . filter ( in_oli__inward_order = inward_order . pk ) [EOL] [EOL] [EOL] def get_order_invoices ( inward_order ) : [EOL] return Invoice . objects . filter ( inward_order = inward_order . pk ) [EOL] [EOL] [EOL] def get_order_amount_total ( inward_order ) : [EOL] return Invoice . objects . filter ( inward_order = inward_order . pk ) . aggregate ( Sum ( [string] ) ) [ [string] ] [EOL] [EOL] [EOL] def get_order_amount_received ( inward_order ) : [EOL] return Invoice . objects . filter ( inward_order = inward_order . pk ) . aggregate ( Sum ( [string] ) ) [ [string] ] [EOL] [EOL] [EOL] def get_order_amount_pending ( inward_order ) : [EOL] return Invoice . objects . filter ( inward_order = inward_order . pk ) . aggregate ( Sum ( [string] ) ) [ [string] ]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django import template [EOL] [EOL] [EOL] register = template . Library ( ) [EOL] [EOL] [EOL] @ register . filter ( name = [string] ) def subtract_value ( value , num ) : [EOL] return int ( value ) - int ( num )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class UsersAppConfig ( AppConfig ) : [EOL] [EOL] name = [string] [EOL] verbose_name = [string] [EOL] [EOL] def ready ( self ) : [EOL] try : [EOL] import users . signals [comment] [EOL] except ImportError : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import django [EOL] import pytest [EOL] from django . conf import settings [EOL] [EOL] pytestmark = pytest . mark . django_db [EOL] [EOL] [EOL] def test_user_get_absolute_url ( user ) : [EOL] assert user . get_absolute_url ( ) == f" [string] { user . username } [string] " [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ProductsConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from typing import Type , List [EOL] import expressmanage [EOL] import typing [EOL] from django . contrib import admin [EOL] [EOL] from . models import Product , ContainerType , RateSlab [EOL] [EOL] [EOL] class RateSlabInline ( admin . TabularInline ) : [EOL] model = RateSlab [EOL] extra = [number] [EOL] [EOL] [EOL] class ContainerTypeAdmin ( admin . ModelAdmin ) : [EOL] inlines = [ RateSlabInline ] [EOL] [EOL] [EOL] [comment] [EOL] admin . site . register ( Product ) [EOL] admin . site . register ( ContainerType , ContainerTypeAdmin ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.products.models.RateSlab]$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Type[expressmanage.products.admin.RateSlabInline]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] from django . urls import path [EOL] [EOL] from . import views [EOL] [EOL] app_name = [string] [EOL] urlpatterns = [ path ( [string] , views . Product_IndexView . as_view ( ) , name = [string] ) , path ( [string] , views . Product_DetailView . as_view ( ) , name = [string] ) , path ( [string] , views . Product_CreateView . as_view ( ) , name = [string] ) , path ( [string] , views . Product_UpdateView . as_view ( ) , name = [string] ) , path ( [string] , views . Product_DeleteView . as_view ( ) , name = [string] ) , path ( [string] , views . ContainerType_IndexView . as_view ( ) , name = [string] ) , path ( [string] , views . ContainerType_DetailView . as_view ( ) , name = [string] ) , path ( [string] , views . ContainerType_CreateView . as_view ( ) , name = [string] ) , path ( [string] , views . ContainerType_UpdateView . as_view ( ) , name = [string] ) , path ( [string] , views . ContainerType_DeleteView . as_view ( ) , name = [string] ) , ]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import expressmanage [EOL] import typing [EOL] from django . db import models [EOL] [EOL] from django_extensions . db . models import TimeStampedModel [EOL] from author . decorators import with_author [EOL] [EOL] from expressmanage . utils import normalize_string [EOL] [EOL] @ with_author class Product ( TimeStampedModel ) : [EOL] name = models . CharField ( max_length = [number] , unique = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] self . name = normalize_string ( self . name ) [EOL] super ( Product , self ) . save ( * args , ** kwargs ) [EOL] [EOL] [EOL] @ with_author class ContainerType ( TimeStampedModel ) : [EOL] name = models . CharField ( max_length = [number] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] self . name = normalize_string ( self . name ) [EOL] super ( ContainerType , self ) . save ( * args , ** kwargs ) [EOL] [EOL] [EOL] @ with_author class RateSlab ( TimeStampedModel ) : [EOL] container_type = models . ForeignKey ( ContainerType , on_delete = models . CASCADE ) [EOL] rate = models . DecimalField ( max_digits = [number] , decimal_places = [number] ) [EOL] number_of_days = models . IntegerField ( ) [EOL] [EOL] def __str__ ( self ) : [EOL] return str ( self . pk ) [EOL] [EOL] [EOL] [comment] [EOL] [comment]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.products.models.Product]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.products.models.ContainerType]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.products.models.RateSlab]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.products.models.RateSlab]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.products.models.RateSlab]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type , Any , List [EOL] import expressmanage [EOL] import typing [EOL] from django . forms . models import inlineformset_factory [EOL] from django . forms import ModelForm , ValidationError [EOL] [EOL] from . models import Product , ContainerType , RateSlab [EOL] [EOL] [EOL] class ProductForm ( ModelForm ) : [EOL] class Meta : [EOL] model = Product [EOL] fields = [ [string] ] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ProductForm , self ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] [EOL] class ContainerTypeForm ( ModelForm ) : [EOL] class Meta : [EOL] model = ContainerType [EOL] fields = [ [string] ] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ContainerTypeForm , self ) . __init__ ( * args , ** kwargs ) [EOL] self . fields [ [string] ] . widget . attrs [ [string] ] = [string] [EOL] [EOL] [EOL] class RateSlabForm ( ModelForm ) : [EOL] class Meta : [EOL] model = RateSlab [EOL] fields = [ [string] , [string] , [string] ] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( RateSlabForm , self ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] [EOL] RateSlabFormSet = inlineformset_factory ( ContainerType , RateSlab , can_delete = False , extra = [number] , form = RateSlabForm , ) [EOL] [EOL] RateSlabUpdateFormSet = inlineformset_factory ( ContainerType , RateSlab , can_delete = False , extra = [number] , form = RateSlabForm , )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.products.models.RateSlab]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.products.models.RateSlab]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[expressmanage.products.models.RateSlab]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL]	0 0