[comment] [EOL] [docstring] [EOL] import os [EOL] [EOL] from setuptools import setup [EOL] [EOL] setup ( name = [string] , version = [string] , description = [string] , long_description = open ( os . path . join ( os . path . abspath ( os . path . dirname ( __file__ ) ) , [string] ) ) . read ( ) , long_description_content_type = [string] , author = [string] , author_email = [string] , url = [string] , packages = [ [string] ] , install_requires = [ [string] , [string] , [string] , [string] ] , setup_requires = [ [string] ] , entry_points = { [string] : [ [string] ] } , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import Tuple , Any , Pattern , List [EOL] import gym [EOL] import builtins [EOL] import typing [EOL] [docstring] [EOL] import re [EOL] from time import sleep [EOL] from typing import List , Text [EOL] [EOL] import gym [EOL] from docopt import docopt [EOL] [EOL] from gym_demo . formatting import list_to_columns , print_error , print_header [EOL] [EOL] [EOL] def get_environment_names ( ) : [EOL] [docstring] [EOL] return sorted ( spec . id for spec in gym . envs . registry . all ( ) ) [EOL] [EOL] [EOL] def group_environments ( env_names ) : [EOL] [docstring] [EOL] names_without_version = [ name . split ( [string] ) [ [number] ] for name in env_names ] [EOL] family_names = [ names_without_version . pop ( [number] ) ] [EOL] for name in names_without_version : [EOL] if not family_names [ - [number] ] in name : [EOL] family_names . append ( name ) [EOL] return family_names [EOL] [EOL] [EOL] def get_space_description ( space ) : [EOL] [docstring] [EOL] description = repr ( space ) [EOL] if isinstance ( space , gym . spaces . Box ) : [EOL] description += [string] . format ( space . low ) [EOL] description += [string] . format ( space . high ) [EOL] return description [EOL] [EOL] [EOL] def print_environment_description ( env ) : [EOL] [docstring] [EOL] print_header ( [string] . format ( env . spec . id ) ) [EOL] print_header ( [string] ) [EOL] print ( get_space_description ( env . observation_space ) ) [EOL] [EOL] print_header ( [string] ) [EOL] print ( get_space_description ( env . action_space ) ) [EOL] if hasattr ( env . unwrapped , [string] ) : [EOL] print ( [string] , env . unwrapped . get_action_meanings ( ) ) [EOL] print ( [string] ) [EOL] [EOL] [EOL] def render_environment ( env ) : [EOL] [docstring] [EOL] try : [EOL] env . render ( ) [EOL] sleep ( [number] ) [EOL] return True [EOL] except NotImplementedError : [EOL] return False [EOL] [EOL] [EOL] def run_environment ( env , steps_count = [number] , render = True , print_observation = False , ) : [EOL] [docstring] [EOL] env . reset ( ) [EOL] print_header ( [string] ) [EOL] print ( [string] ) [EOL] prev_env_output = None [EOL] for step_number in range ( steps_count ) : [EOL] observation , reward , done , info = env . step ( env . action_space . sample ( ) ) [EOL] [EOL] if render : [EOL] render = render_environment ( env ) [EOL] [EOL] if ( reward , done , info ) != prev_env_output : [EOL] print ( [string] . format ( reward , done , info ) ) [EOL] prev_env_output = ( reward , done , info ) [EOL] [EOL] if print_observation : [EOL] print ( [string] . format ( observation ) ) [EOL] [EOL] if done : [EOL] print ( [string] . format ( step_number + [number] ) ) [EOL] break [EOL] [EOL] env . close ( ) [EOL] [EOL] [EOL] def main ( ) : [EOL] [docstring] [EOL] environment_names = get_environment_names ( ) [EOL] environment_families = group_environments ( environment_names ) [EOL] [EOL] help_string = [string] . format ( __doc__ , list_to_columns ( environment_families ) ) [EOL] arguments = docopt ( help_string ) [EOL] [EOL] steps = int ( arguments . get ( [string] ) ) [EOL] render_env = not arguments . get ( [string] ) [EOL] print_observations = arguments . get ( [string] ) [EOL] env_name = arguments . get ( [string] ) [EOL] [EOL] if env_name in environment_names : [EOL] environment = gym . make ( env_name ) [EOL] print_environment_description ( environment ) [EOL] run_environment ( environment , steps , render_env , print_observations ) [EOL] [EOL] else : [EOL] print_error ( [string] ) [EOL] regex = re . compile ( [string] . format ( env_name ) , re . IGNORECASE ) [EOL] environment_names = [ spec . id for spec in gym . envs . registry . all ( ) if regex . match ( spec . id ) ] [EOL] if len ( environment_names ) : [EOL] print_header ( [string] ) [EOL] print ( list_to_columns ( environment_names ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any , List [EOL] import colorful [EOL] import builtins [EOL] import typing [EOL] [docstring] [EOL] [EOL] import math [EOL] import shutil [EOL] from itertools import zip_longest [EOL] from typing import Any , List , Text , Tuple [EOL] [EOL] import colorful [EOL] from colorful import Colorful [EOL] [EOL] colorful . use_style ( [string] ) [EOL] COLUMN_MARGIN = [number] [EOL] [EOL] [EOL] def get_columns_count_and_width ( strings ) : [EOL] [docstring] [EOL] terminal_width = shutil . get_terminal_size ( ( [number] , [number] ) ) . columns [EOL] max_string_width = max ( len ( string ) for string in strings ) [EOL] col_width = max_string_width + COLUMN_MARGIN [EOL] num_cols = int ( terminal_width / col_width ) [EOL] [EOL] if num_cols > len ( strings ) : [EOL] num_cols = len ( strings ) [EOL] [EOL] if num_cols == [number] : [EOL] num_cols = [number] [EOL] [EOL] return num_cols , col_width [EOL] [EOL] [EOL] def list_to_columns ( strings ) : [EOL] [docstring] [EOL] if len ( strings ) == [number] : [EOL] return [string] [EOL] [EOL] num_cols , col_width = get_columns_count_and_width ( strings ) [EOL] col_height = math . ceil ( len ( strings ) / num_cols ) [EOL] cols = [ strings [ i : i + col_height ] for i in range ( [number] , len ( strings ) , col_height ) ] [EOL] num_cols = len ( cols ) [EOL] [EOL] format_string = [string] [comment] [EOL] for _ in range ( num_cols - [number] ) : [EOL] format_string = [string] . format ( col_width , format_string ) [EOL] [EOL] strings_in_columns = [string] [EOL] for col_strings in zip_longest ( * cols , fillvalue = [string] ) : [EOL] strings_in_columns += format_string . format ( * col_strings ) [EOL] return strings_in_columns [EOL] [EOL] [EOL] def _print_colorful ( color , * args ) : [EOL] if len ( args ) > [number] : [EOL] string = [string] . join ( str ( arg ) for arg in args ) [EOL] else : [EOL] string = args [ [number] ] [EOL] print ( color | string ) [EOL] [EOL] [EOL] def print_header ( * args ) : [EOL] [docstring] [EOL] _print_colorful ( colorful . bold & colorful . blue , * args ) [EOL] [EOL] [EOL] def print_error ( * args ) : [EOL] [docstring] [EOL] _print_colorful ( colorful . bold & colorful . red , * args ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List , Type [EOL] import tests [EOL] import typing [EOL] import shutil [EOL] from collections import namedtuple [EOL] [EOL] import pytest [EOL] [EOL] from gym_demo . formatting import ( get_columns_count_and_width , list_to_columns , print_error , ) [EOL] [EOL] TerminalSize = namedtuple ( [string] , [ [string] ] ) [EOL] [EOL] _GROUP_NAMES = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] @ pytest . fixture def env_group_names ( ) : [EOL] return _GROUP_NAMES [EOL] [EOL] [EOL] def test_get_columns_count_and_width ( monkeypatch , env_group_names ) : [EOL] monkeypatch . setattr ( shutil , [string] , lambda x : TerminalSize ( [number] ) ) [EOL] assert get_columns_count_and_width ( env_group_names ) == ( [number] , [number] ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , range ( len ( _GROUP_NAMES ) ) ) @ pytest . mark . parametrize ( [string] , [ [number] , [number] , [number] , [number] , [number] , [number] ] ) def test_list_to_columns ( monkeypatch , env_group_names , list_size , terminal_size ) : [EOL] monkeypatch . setattr ( shutil , [string] , lambda x : TerminalSize ( terminal_size ) ) [EOL] env_group_names = env_group_names [ [number] : list_size ] [EOL] column_output = list_to_columns ( env_group_names ) [EOL] lines = column_output . splitlines ( ) [EOL] [EOL] assert len ( [string] . join ( lines ) . split ( ) ) == len ( env_group_names ) [EOL] [EOL] [EOL] def test_print_error ( capsys ) : [EOL] print_error ( [string] ) [EOL] print_error ( [string] , [number] ) [EOL] captured = capsys . readouterr ( ) [EOL] [EOL] assert [string] in captured . out [EOL] assert [string] in captured . out [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tests.test_formatting.TerminalSize]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tests.test_formatting.TerminalSize]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tests.test_formatting.TerminalSize]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] [docstring] [EOL] import docopt [EOL] import gym [EOL] import pytest [EOL] [EOL] from gym_demo . demo import ( get_environment_names , get_space_description , group_environments , main , print_environment_description , render_environment , run_environment , ) [EOL] [EOL] [EOL] def test_get_environment_names ( ) : [EOL] environments = get_environment_names ( ) [EOL] [EOL] assert len ( environments ) [EOL] assert [string] in environments [EOL] [EOL] [EOL] def test_group_environments ( ) : [EOL] environments = get_environment_names ( ) [EOL] group_names = group_environments ( environments ) [EOL] [EOL] assert len ( group_names ) <= len ( environments ) [EOL] assert [string] in group_names [EOL] [EOL] [EOL] def test_get_space_description ( ) : [EOL] environment = gym . make ( [string] ) [EOL] description = get_space_description ( environment . observation_space ) [EOL] assert [string] in description [EOL] assert [string] in description [EOL] [EOL] [EOL] def test_print_environment_description ( capsys ) : [EOL] environment = gym . make ( [string] ) [EOL] print_environment_description ( environment ) [EOL] [EOL] captured = capsys . readouterr ( ) [EOL] assert [string] in captured . out [EOL] assert [string] in captured . out [EOL] [EOL] [EOL] def test_run_environment ( capsys ) : [EOL] environment = gym . make ( [string] ) [EOL] run_environment ( environment , steps_count = [number] , render = False ) [EOL] captured = capsys . readouterr ( ) [EOL] assert [string] in captured . out [EOL] [EOL] environment = gym . make ( [string] ) [EOL] run_environment ( environment , render = False , print_observation = True ) [EOL] captured = capsys . readouterr ( ) [EOL] assert [string] in captured . out [EOL] assert [string] in captured . out [EOL] [EOL] [EOL] @ pytest . mark . filterwarnings ( [string] ) def test_render_environment ( monkeypatch ) : [EOL] environment = gym . make ( [string] ) [EOL] monkeypatch . setattr ( environment , [string] , lambda : True ) [EOL] success = render_environment ( environment ) [EOL] assert success is True [EOL] [EOL] environment = gym . make ( [string] ) [EOL] success = render_environment ( environment ) [EOL] assert success is False [EOL] [EOL] [EOL] def test_main_no_options ( ) : [EOL] with pytest . raises ( docopt . DocoptExit ) : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0