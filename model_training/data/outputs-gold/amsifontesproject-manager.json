from typing import Type [EOL] import project_manager [EOL] import typing [EOL] from django . db import models [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] class Architect ( models . Model ) : [EOL] [comment] [EOL] username = models . CharField ( max_length = [number] , ) [EOL] [comment] [EOL] [comment] [EOL] email = models . EmailField ( max_length = [number] , ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . username [EOL] [EOL] class Client ( models . Model ) : [EOL] [comment] [EOL] username = models . CharField ( max_length = [number] , ) [EOL] email = models . EmailField ( max_length = [number] , ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . username [EOL] [EOL] [comment] [EOL] [EOL] [EOL] class Project ( models . Model ) : [EOL] [comment] [EOL] architect = models . ForeignKey ( Architect , on_delete = models . CASCADE , ) [EOL] client = models . ForeignKey ( Client , on_delete = models . CASCADE , ) [comment] [EOL] name_proj = models . CharField ( max_length = [number] , default = [string] ) [EOL] address = models . CharField ( max_length = [number] , ) [EOL] start_date = models . DateField ( ) [EOL] end_date = models . DateField ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] class Phase ( models . Model ) : [EOL] [comment] [EOL] project = models . ForeignKey ( Project , related_name = [string] , on_delete = models . CASCADE , ) [EOL] name_phase = models . CharField ( max_length = [number] , default = [string] ) [EOL] start_date = models . DateField ( ) [EOL] end_date = models . DateField ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] class Task ( models . Model ) : [EOL] [comment] [EOL] project = models . ForeignKey ( Project , on_delete = models . CASCADE , ) [EOL] phase = models . ForeignKey ( Phase , on_delete = models . CASCADE , ) [EOL] name_task = models . CharField ( max_length = [number] , default = [string] , ) [EOL] start_date = models . DateField ( ) [EOL] end_date = models . DateField ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project_manager.models.Architect]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project_manager.models.Architect]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project_manager.models.Client]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project_manager.models.Client]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project_manager.models.Project]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project_manager.models.Project]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project_manager.models.Project]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project_manager.models.Project]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project_manager.models.Project]$ 0 0 0 0 0 0 0 $typing.Type[project_manager.models.Project]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project_manager.models.Phase]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project_manager.models.Phase]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project_manager.models.Phase]$ 0 0 0 0 0 0 0 $typing.Type[project_manager.models.Phase]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project_manager.models.Task]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project_manager.models.Task]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project_manager.models.Task]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project_manager.models.Task]$ 0 0 0 0 0 0 0 $typing.Type[project_manager.models.Task]$ 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Dict , Any [EOL] import typing [EOL] from django . shortcuts import render [EOL] [EOL] from . models import Project , Phase [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def hello ( request ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] projects = Project . objects . all ( ) [EOL] phases = Phase . objects . all ( ) [EOL] print ( phases ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] context = { [string] : projects , [string] : phases , } [EOL] return render ( request , [string] , context ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] from project_manager . models import Architect , Client , Project , Phase , Task [EOL] [EOL] [comment] [EOL] admin . site . register ( Architect ) [EOL] admin . site . register ( Client ) [EOL] admin . site . register ( Project ) [EOL] admin . site . register ( Phase ) [EOL] admin . site . register ( Task ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Dict , Type , Any [EOL] import project_manager [EOL] import typing [EOL] from django . shortcuts import render , redirect [EOL] from django . contrib import messages [EOL] [comment] [EOL] from django import forms [EOL] [EOL] from . models import Architect , Client , Project , Phase [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] class ProjectForm ( forms . Form ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] assign_an_architect = forms . ModelChoiceField ( queryset = Architect . objects . all ( ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] assign_a_client = forms . ModelChoiceField ( queryset = Client . objects . all ( ) ) [EOL] [EOL] [comment] [EOL] project_name = forms . CharField ( max_length = [number] ) [EOL] [comment] [EOL] project_address = forms . CharField ( max_length = [number] ) [EOL] [EOL] start_date = forms . DateField ( widget = forms . SelectDateWidget ) [EOL] end_date = forms . DateField ( widget = forms . SelectDateWidget ) [EOL] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] def render_projects ( request ) : [EOL] [comment] [EOL] if str ( request . user ) == [string] : [EOL] projects = Project . objects . all ( ) [EOL] else : [EOL] projects = Project . objects . filter ( client_id = request . user . id ) [EOL] project_list = [ ] [EOL] for project in projects : [EOL] proj_dict = dict ( ) [EOL] proj_dict [ [string] ] = project . name_proj [EOL] proj_dict [ [string] ] = project . address [EOL] proj_dict [ [string] ] = project . start_date [EOL] proj_dict [ [string] ] = project . end_date [EOL] proj_dict [ [string] ] = project . client_id [EOL] proj_dict [ [string] ] = project . phases . all ( ) [EOL] [EOL] print ( [string] , project . name_proj ) [EOL] print ( [string] , project . phases . all ( ) ) [EOL] project_list . append ( proj_dict ) [EOL] context = { [string] : project_list } [EOL] return render ( request , [string] , context ) [EOL] [EOL] def client_projects ( request , client_id ) : [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] projects = Project . objects . filter ( client_id = request . user . id ) [EOL] print ( [string] ) [EOL] print ( request . user ) [EOL] print ( [string] ) [EOL] project_list = [ ] [EOL] for project in projects : [EOL] proj_dict = dict ( ) [EOL] proj_dict [ [string] ] = project . name_proj [EOL] proj_dict [ [string] ] = project . address [EOL] proj_dict [ [string] ] = project . start_date [EOL] proj_dict [ [string] ] = project . end_date [EOL] proj_dict [ [string] ] = project . phases . all ( ) [EOL] print ( [string] , project . name_proj ) [EOL] print ( [string] , project . phases . all ( ) ) [EOL] project_list . append ( proj_dict ) [EOL] [comment] [EOL] [comment] [EOL] context = { [string] : project_list } [EOL] [comment] [EOL] return render ( request , [string] , context ) [EOL] [EOL] [EOL] [EOL] def create_project ( request ) : [EOL] [comment] [EOL] if request . method == [string] : [EOL] [comment] [EOL] form = ProjectForm ( request . POST ) [EOL] [comment] [EOL] [comment] [EOL] if form . is_valid ( ) : [EOL] [comment] [EOL] print ( [string] , form . cleaned_data ) , [EOL] Project . objects . create ( architect = form . cleaned_data [ [string] ] , client = form . cleaned_data [ [string] ] , name_proj = form . cleaned_data [ [string] ] , address = form . cleaned_data [ [string] ] , start_date = form . cleaned_data [ [string] ] , end_date = form . cleaned_data [ [string] ] , ) [EOL] [comment] [EOL] return redirect ( [string] ) [EOL] [EOL] else : [EOL] form = ProjectForm ( ) [EOL] [EOL] context = { [string] : form , } [EOL] return render ( request , [string] , context ) [EOL] [EOL] [EOL] def update_project ( request , project_id ) : [EOL] [comment] [EOL] project = Project . objects . get ( id = project_id ) [EOL] [EOL] [comment] [EOL] if request . method == [string] : [EOL] form = ProjectForm ( request . POST ) [EOL] if form . is_valid ( ) : [EOL] print ( [string] ) [EOL] print ( form . cleaned_data ) [EOL] project . architect = Architect . objects . get ( username = form . cleaned_data [ [string] ] ) [EOL] project . client = Client . objects . get ( username = form . cleaned_data [ [string] ] ) [EOL] project . name_proj = form . cleaned_data [ [string] ] [EOL] project . address = form . cleaned_data [ [string] ] [EOL] project . start_date = form . cleaned_data [ [string] ] [EOL] project . end_date = form . cleaned_data [ [string] ] [EOL] project . save ( ) [EOL] return redirect ( [string] ) [EOL] else : [EOL] print ( [string] ) [EOL] else : [EOL] [comment] [EOL] form = ProjectForm ( initial = { [string] : project . architect , [string] : project . client , [string] : project . name_proj , [string] : project . address , [string] : project . start_date , [string] : project . end_date , } ) [EOL] [EOL] context = { [string] : project , [string] : form } [EOL] return render ( request , [string] , context ) [EOL] [EOL] [EOL] def create_phase ( request ) : [EOL] pass [EOL] [EOL] def update_phase ( request ) : [EOL] pass	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project_manager.views.ProjectForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project_manager.views.ProjectForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project_manager.views.ProjectForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project_manager.views.ProjectForm]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project_manager.views.ProjectForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project_manager.views.ProjectForm
from django . apps import AppConfig [EOL] [EOL] [EOL] class ProjectManagerConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Tuple , Union [EOL] import typing [EOL] __version__ = [string] [EOL] __version_info__ = tuple ( [ int ( num ) if num . isdigit ( ) else num for num in __version__ . replace ( [string] , [string] , [number] ) . split ( [string] ) ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[typing.Union[builtins.int,builtins.str],...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class UsersAppConfig ( AppConfig ) : [EOL] [EOL] name = [string] [EOL] verbose_name = [string] [EOL] [EOL] def ready ( self ) : [EOL] try : [EOL] import users . signals [comment] [EOL] except ImportError : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import django [EOL] import pytest [EOL] from django . conf import settings [EOL] [EOL] pytestmark = pytest . mark . django_db [EOL] [EOL] [EOL] def test_user_get_absolute_url ( user ) : [EOL] assert user . get_absolute_url ( ) == f" [string] { user . username } [string] " [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import List , Any [EOL] import typing [EOL] from django . conf import settings [EOL] from django . urls import include , path [EOL] from django . conf . urls . static import static [EOL] from django . contrib import admin [EOL] from django . views . generic import TemplateView [EOL] from django . views import defaults as default_views [EOL] [EOL] from project_manager import views as project_manager_views [EOL] [comment] [EOL] [EOL] urlpatterns = [ path ( [string] , TemplateView . as_view ( template_name = [string] ) , name = [string] ) , path ( [string] , project_manager_views . render_projects ) , path ( [string] , project_manager_views . client_projects ) , path ( [string] , project_manager_views . create_project , name = [string] ) , path ( [string] , project_manager_views . update_project ) , path ( [string] , TemplateView . as_view ( template_name = [string] ) , name = [string] , ) , path ( settings . ADMIN_URL , admin . site . urls ) , path ( [string] , include ( [string] , namespace = [string] ) , ) , path ( [string] , include ( [string] ) ) , ] + static ( settings . MEDIA_URL , document_root = settings . MEDIA_ROOT ) [EOL] [EOL] if settings . DEBUG : [EOL] [comment] [EOL] [comment] [EOL] urlpatterns += [ path ( [string] , default_views . bad_request , kwargs = { [string] : Exception ( [string] ) } , ) , path ( [string] , default_views . permission_denied , kwargs = { [string] : Exception ( [string] ) } , ) , path ( [string] , default_views . page_not_found , kwargs = { [string] : Exception ( [string] ) } , ) , path ( [string] , default_views . server_error ) , ] [EOL] if [string] in settings . INSTALLED_APPS : [EOL] import debug_toolbar [EOL] [EOL] urlpatterns = [ path ( [string] , include ( debug_toolbar . urls ) ) ] + urlpatterns [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0
	0
[comment] [EOL]	0 0