[comment] [EOL] import os [EOL] import sys [EOL] [EOL] from setuptools import setup [EOL] [EOL] CURDIR = os . path . realpath ( os . path . join ( os . path . dirname ( sys . modules [ [string] ] . __file__ ) ) ) [EOL] sys . path . insert ( [number] , os . path . join ( CURDIR , [string] ) ) [EOL] [EOL] if __name__ == [string] : [EOL] setup ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple [EOL] import typing [EOL] import pkg_resources [EOL] [EOL] from whatsmyip . __version__ import __version__ as app_version [EOL] [EOL] [EOL] def test_version ( ) : [EOL] v = pkg_resources . parse_version ( app_version ) [EOL] assert isinstance ( v , pkg_resources . extern . packaging . version . Version ) [EOL] assert v . is_prerelease is False [EOL] assert v . is_postrelease is False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict , List [EOL] import typing [EOL] import pytest [EOL] import inspect [EOL] import responses [EOL] from unittest import mock [EOL] import whatsmyip . providers as providers [EOL] from dns . rdtypes . IN . A import A [EOL] from dns . rdtypes . ANY . TXT import TXT [EOL] [EOL] [EOL] @ pytest . fixture ( ) def dns_ns_query_response ( ) : [EOL] answer = [ ] [EOL] answer . append ( A ( [number] , [number] , [string] ) ) [EOL] return answer [EOL] [EOL] [EOL] @ pytest . fixture ( ) def dns_ip_query_response ( ) : [EOL] answer = [ ] [EOL] answer . append ( TXT ( [number] , [number] , [ [string] ] ) ) [EOL] return answer [EOL] [EOL] [EOL] def test_base_ip_provider ( ) : [EOL] with pytest . raises ( NotImplementedError ) : [EOL] provider = providers . IpProvider [EOL] provider . fetch ( ) [EOL] [EOL] [EOL] @ mock . patch ( [string] ) @ pytest . mark . parametrize ( [string] , [ ( providers . GoogleDnsProvider ) , ( providers . CloudflareDnsProvider ) ] ) def test_dns_providers ( mock_query , provider , dns_ns_query_response , dns_ip_query_response ) : [EOL] mock_query . side_effect = [ dns_ns_query_response , dns_ip_query_response ] [EOL] ip = provider . fetch ( ) [EOL] assert ip == [string] [EOL] [EOL] [EOL] @ responses . activate def test_cloudflare_provider ( ) : [EOL] responses . add ( responses . GET , [string] , body = [string] , status = [number] ) [EOL] provider = providers . CloudflareHttpProvider [EOL] provider . fetch ( ) [EOL] [EOL] [EOL] @ responses . activate def test_httpbin_provider ( ) : [EOL] responses . add ( responses . GET , [string] , json = { [string] : [string] } , status = [number] ) [EOL] provider = providers . HttpbinProvider [EOL] provider . fetch ( ) [EOL] [EOL] [EOL] def test_all_providers_in_ip_providers_dict ( ) : [EOL] ps = { m [ [number] ] . name : m [ [number] ] for m in inspect . getmembers ( providers , inspect . isclass ) if isinstance ( m [ [number] ] , providers . IpProvider ) } [EOL] assert ps . keys ( ) == providers . ip_providers . keys ( ) [EOL] for name , klass in ps . items ( ) : [EOL] type ( providers . ip_providers [ name ] ) is type ( klass ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from whatsmyip . providers import IpProvider [EOL] from whatsmyip . ip import get_ip [EOL] from unittest import mock [EOL] [EOL] [EOL] @ mock . patch ( [string] , return_value = [string] ) def test_get_ip ( mocked_fetch ) : [EOL] provider = IpProvider [EOL] get_ip ( provider ) [EOL] assert provider . fetch . called is True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import os [EOL] import pytest [EOL] from unittest import mock [EOL] from click . testing import CliRunner [EOL] from whatsmyip . cli . main import main [EOL] from whatsmyip . providers import GoogleDnsProvider , ip_providers [EOL] [EOL] [EOL] @ pytest . fixture def runner ( ) : [EOL] return CliRunner ( ) [EOL] [EOL] [EOL] def test_cli_help ( runner ) : [EOL] with open ( os . path . join ( os . path . dirname ( __file__ ) , [string] , [string] ) , mode = [string] ) as f : [EOL] result = runner . invoke ( main , [ [string] ] ) [EOL] assert result . exit_code == [number] [EOL] assert result . output == f . read ( ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( p_name , p_class ) for p_name , p_class in ip_providers . items ( ) ] + [ ( [string] , GoogleDnsProvider ) ] ) def test_running_with_all_providers ( runner , provider_name , provider_class ) : [EOL] with mock . patch ( [string] ) as get_ip_mock : [EOL] get_ip_mock . return_value = [string] [EOL] [EOL] args = [ [string] , provider_name ] if provider_name else [ ] [EOL] result = runner . invoke ( main , args ) [EOL] [EOL] assert result . exit_code == [number] [EOL] assert result . output == [string] + [string] [EOL] assert str ( provider_class ) == str ( get_ip_mock . call_args [ [number] ] [ [number] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
__version__ = [string] [EOL]	$builtins.str$ 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] import builtins [EOL] import requests [EOL] from typing import Dict [EOL] [EOL] import dns . resolver [comment] [EOL] import requests [EOL] [EOL] [EOL] class IpProvider ( type ) : [EOL] name = ... [EOL] [EOL] @ staticmethod def fetch ( ) : [EOL] raise NotImplementedError [EOL] [EOL] [EOL] def fetch_ip_for_dns_provider ( ns_address , query_address ) : [EOL] resolver = dns . resolver . Resolver ( configure = True ) [EOL] [EOL] resp = resolver . query ( ns_address ) [EOL] [EOL] ns_ip = resp [ [number] ] . to_text ( ) [EOL] resolver . nameservers = [ ns_ip ] [EOL] [EOL] resp_two = resolver . query ( query_address , [string] ) [EOL] ip = resp_two [ [number] ] . to_text ( ) [EOL] ip = ip . replace ( [string] , [string] ) [EOL] return ip [EOL] [EOL] [EOL] class GoogleDnsProvider ( metaclass = IpProvider ) : [EOL] name = [string] [EOL] [EOL] @ staticmethod def fetch ( ) : [EOL] ip = fetch_ip_for_dns_provider ( [string] , [string] ) [EOL] return ip [EOL] [EOL] [EOL] class CloudflareDnsProvider ( metaclass = IpProvider ) : [EOL] name = [string] [EOL] [EOL] @ staticmethod def fetch ( ) : [EOL] ip = fetch_ip_for_dns_provider ( [string] , [string] ) [EOL] return ip [EOL] [EOL] [EOL] class CloudflareHttpProvider ( metaclass = IpProvider ) : [EOL] name = [string] [EOL] [EOL] @ staticmethod def fetch ( ) : [EOL] r = requests . get ( url = [string] ) [EOL] items = dict ( item . split ( [string] ) for item in filter ( None , r . text . split ( [string] ) ) ) [EOL] ip = items [ [string] ] [EOL] return ip [EOL] [EOL] [EOL] class HttpbinProvider ( metaclass = IpProvider ) : [EOL] name = [string] [EOL] [EOL] @ staticmethod def fetch ( ) : [EOL] r = requests . get ( url = [string] , headers = dict ( Accept = [string] ) ) [EOL] ip = r . json ( ) [ [string] ] [EOL] return ip [EOL] [EOL] [EOL] ip_providers = { GoogleDnsProvider . name : GoogleDnsProvider , HttpbinProvider . name : HttpbinProvider , CloudflareDnsProvider . name : CloudflareDnsProvider , CloudflareHttpProvider . name : CloudflareHttpProvider } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,IpProvider]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import builtins [EOL] import whatsmyip [EOL] import typing [EOL] from whatsmyip . providers import IpProvider [EOL] [EOL] [EOL] def get_ip ( provider ) : [EOL] ip = provider . fetch ( ) [EOL] return ip [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0