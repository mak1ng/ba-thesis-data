[comment] [EOL] from typing import List [EOL] import typing [EOL] [docstring] [EOL] from datetime import datetime as dt [EOL] from setuptools import setup , find_packages [EOL] [EOL] from devcenter . const import __version__ [EOL] [EOL] [EOL] REQUIRED_PYTHON_VER = [ [number] , [number] , [number] ] [EOL] [EOL] PROJECT_PACKAGE_NAME = [string] [EOL] PROJECT_AUTHOR = [string] [EOL] PROJECT_EMAIL = [string] [EOL] MIN_PY_VERSION = [string] . join ( map ( str , REQUIRED_PYTHON_VER ) ) [EOL] [EOL] REQUIRES = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] setup ( name = PROJECT_PACKAGE_NAME , version = __version__ , author = PROJECT_AUTHOR , author_email = PROJECT_EMAIL , include_package_data = True , zip_safe = False , install_requires = REQUIRES , python_requires = [string] . format ( MIN_PY_VERSION ) , test_suite = [string] , entry_points = { [string] : [ [string] ] } , )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import devcenter [EOL]	0 0 0
from typing import Dict , Optional , Any , Type [EOL] import typing [EOL] import devcenter [EOL] import builtins [EOL] import logging [EOL] import threading [EOL] [docstring] [EOL] import datetime [EOL] import logging [EOL] import os [EOL] import sys [EOL] import time [EOL] import threading [EOL] [EOL] from . chat . chat import Chat [EOL] from . jira . fields import * [EOL] from . jira . jira import Jira [EOL] from . server_utils import generate_cred_hash [EOL] from . sql . sql import DevCenterSQL [EOL] [EOL] [EOL] _LOGGER = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class AutomationBot ( ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] [docstring] [EOL] self . sql_object = DevCenterSQL ( ) [EOL] self . jira_obj = Jira ( ) [EOL] self . chat_obj = Chat ( ) [EOL] [EOL] self . beta_wait_time = [number] [comment] [EOL] [EOL] [comment] [EOL] self . is_beta_week = int ( os . environ . get ( [string] , [number] ) ) [EOL] beta_stat_ping_now = int ( os . environ . get ( [string] , [number] ) ) [EOL] self . beta_wait_count = [number] if beta_stat_ping_now else self . beta_wait_time [EOL] [EOL] self . cred_hash = generate_cred_hash ( ) [EOL] [EOL] def update_jira ( self ) : [EOL] [docstring] [EOL] try : [EOL] start_get = time . time ( ) [EOL] [EOL] [comment] [EOL] jira_tickets = self . jira_obj . get_jira_tickets ( jql = self . jira_obj . jira_api . all_open_tickets , cred_hash = self . cred_hash , fields = self . jira_obj . jira_api . cron_fields ) [EOL] [EOL] [comment] [EOL] if not jira_tickets [ [string] ] : [EOL] message = [string] + jira_tickets [ [string] ] [EOL] self . sql_object . log_error ( message = message ) [EOL] return { [string] : False , [string] : message } [EOL] [EOL] [comment] [EOL] end_get = time . time ( ) [EOL] start_bot = time . time ( ) [EOL] _LOGGER . info ( [string] + str ( len ( jira_tickets [ [string] ] ) ) + [string] ) [EOL] _LOGGER . info ( [string] . format ( end_get - start_get ) ) [EOL] [EOL] [comment] [EOL] for jira_ticket in jira_tickets [ [string] ] : [EOL] self . sql_object . update_ticket ( jira_ticket = jira_ticket ) [EOL] [EOL] [comment] [EOL] for jira_ticket in jira_tickets [ [string] ] : [EOL] self . check_for_pings ( jira_ticket = jira_ticket ) [EOL] [EOL] end_bot = time . time ( ) [EOL] _LOGGER . info ( [string] . format ( end_bot - start_bot ) ) [EOL] start_commit = time . time ( ) [EOL] [EOL] [comment] [EOL] self . sql_object . set_inactive_tickets ( jira_tickets = jira_tickets ) [EOL] end_inactive = time . time ( ) [EOL] _LOGGER . info ( [string] . format ( end_inactive - start_commit ) ) [EOL] [EOL] [comment] [EOL] if self . is_beta_week : [EOL] self . beta_wait_count = self . beta_wait_count + [number] [EOL] [comment] [EOL] if self . beta_wait_count >= self . beta_wait_time : [EOL] self . beta_wait_count = [number] [EOL] thr = threading . Thread ( target = self . beta_week_stats ) [EOL] thr . start ( ) [EOL] [EOL] [comment] [EOL] end_cron = time . time ( ) [EOL] _LOGGER . info ( [string] . format ( end_cron - start_get ) ) [EOL] [EOL] return jira_tickets [EOL] [EOL] except Exception as err : [EOL] [comment] [EOL] message = sys . exc_info ( ) [ [number] ] [EOL] _LOGGER . exception ( message ) [EOL] return { [string] : False , [string] : str ( err ) } [EOL] [EOL] def beta_week_stats ( self ) : [EOL] [docstring] [EOL] stat_results = { } [EOL] for filter_name , jql in self . jira_obj . jira_api . filters . items ( ) : [EOL] jira_tickets = self . jira_obj . get_jira_tickets ( cred_hash = self . cred_hash , jql = jql ) [EOL] stat_results [ filter_name ] = jira_tickets [ [string] ] [EOL] [EOL] self . chat_obj . beta_statistics ( ** stat_results ) [EOL] [EOL] def check_for_pings ( self , jira_ticket ) : [EOL] [docstring] [EOL] [comment] [EOL] ticket_exists = self . sql_object . get_ping ( field = [string] , key = jira_ticket [ [string] ] ) [EOL] if not ticket_exists : [EOL] self . ping_new_ticket ( jira_ticket = jira_ticket ) [EOL] else : [EOL] [comment] [EOL] self . check_for_status_pings ( jira_ticket = jira_ticket ) [EOL] [EOL] def ping_new_ticket ( self , jira_ticket ) : [EOL] [docstring] [EOL] [comment] [EOL] username = jira_ticket [ [string] ] [EOL] story_point = jira_ticket [ [string] ] [EOL] key = jira_ticket [ [string] ] [EOL] msrp = jira_ticket [ [string] ] [EOL] summary = jira_ticket [ [string] ] [EOL] epic_link = jira_ticket [ [string] ] [EOL] [EOL] [comment] [EOL] wants_ping = self . sql_object . get_user_ping_value ( username = username , field = [string] ) [EOL] [EOL] [comment] [EOL] if ( wants_ping == [number] ) : [EOL] [comment] [EOL] self . sql_object . update_ping ( key = key , field = [string] , value = [number] ) [EOL] [EOL] [comment] [EOL] pcr_estimate = self . jira_obj . get_pcr_estimate ( story_point = story_point ) [EOL] [EOL] [comment] [EOL] thr = threading . Thread ( target = self . chat_obj . send_new_ticket , kwargs = { [string] : key , [string] : msrp , [string] : summary , [string] : story_point , [string] : pcr_estimate , [string] : username , [string] : epic_link } ) [EOL] thr . start ( ) [EOL] [EOL] [comment] [EOL] self . ping_dev_center ( key = key , summary = summary , username = username , pingType = [string] ) [EOL] [EOL] [comment] [EOL] elif ( wants_ping == [number] ) : [EOL] [comment] [EOL] self . sql_object . update_ping ( key = key , field = [string] , value = [number] ) [EOL] dev_center_pinged = self . sql_object . get_ping ( key = key , field = [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] else : [EOL] self . sql_object . update_ping ( key = key , field = [string] , value = [number] ) [EOL] [comment] [EOL] [EOL] def ping_dev_center ( self , key , summary , username , pingType ) : [EOL] [docstring] [EOL] thr = threading . Thread ( target = self . chat_obj . send_dev_center_ticket_info , kwargs = { [string] : key , [string] : summary , [string] : username , [string] : pingType } ) [EOL] thr . start ( ) [EOL] [EOL] [EOL] def check_for_status_pings ( self , jira_ticket ) : [EOL] [docstring] [EOL] [comment] [EOL] username = jira_ticket [ [string] ] [EOL] story_point = jira_ticket [ [string] ] [EOL] key = jira_ticket [ [string] ] [EOL] msrp = jira_ticket [ [string] ] [EOL] key = jira_ticket [ [string] ] [EOL] sprint = jira_ticket [ [string] ] [EOL] label = jira_ticket [ [string] ] [EOL] summary = jira_ticket [ [string] ] [EOL] component = jira_ticket [ [string] ] [EOL] status = jira_ticket [ [string] ] [EOL] epic_link = jira_ticket [ [string] ] [EOL] [EOL] [comment] [EOL] pings = self . sql_object . get_pings ( key = key ) [EOL] [EOL] [comment] [EOL] if not pings : [EOL] return False [EOL] [EOL] [comment] [EOL] if ( [string] in status and not pings . pcr_ping ) : [EOL] [comment] [EOL] pcr_estimate = self . jira_obj . get_pcr_estimate ( story_point = story_point ) [EOL] [comment] [EOL] thr = threading . Thread ( target = self . chat_obj . send_pcr_needed , kwargs = { [string] : key , [string] : msrp , [string] : sprint , [string] : label , [string] : pcr_estimate , [string] : summary } ) [EOL] thr . start ( ) [EOL] [comment] [EOL] self . sql_object . reset_pings ( ping_type = [string] , key = key ) [EOL] [comment] [EOL] self . sql_object . update_ping ( key = key , field = [string] , value = [number] ) [EOL] [EOL] [comment] [EOL] elif ( [string] in status and not pings . qa_ping ) : [EOL] thr = threading . Thread ( target = self . chat_obj . send_qa_needed , kwargs = { [string] : key , [string] : msrp , [string] : sprint , [string] : label , [string] : summary } ) [EOL] thr . start ( ) [EOL] [comment] [EOL] self . sql_object . reset_pings ( ping_type = [string] , key = key ) [EOL] [comment] [EOL] self . sql_object . update_ping ( key = key , field = [string] , value = [number] ) [EOL] [EOL] [comment] [EOL] elif ( [string] in component and not pings . merge_ping ) : [EOL] self . ping_jira_status ( msrp = msrp , ping_type = [string] , username = username , key = key , summary = summary , ping_message = [string] , sprint = sprint , epic_link = epic_link ) [EOL] [EOL] [comment] [EOL] elif ( [string] in component and not pings . conflict_ping ) : [EOL] self . ping_jira_status ( msrp = msrp , ping_type = [string] , username = username , key = key , summary = summary , ping_message = [string] , epic_link = epic_link ) [EOL] [EOL] [comment] [EOL] elif ( [string] in component and not pings . uct_fail_ping ) : [EOL] self . ping_jira_status ( msrp = msrp , ping_type = [string] , username = username , key = key , summary = summary , ping_message = [string] , epic_link = epic_link ) [EOL] [EOL] [comment] [EOL] elif ( [string] in component and not pings . cr_fail_ping ) : [EOL] self . ping_jira_status ( msrp = msrp , ping_type = [string] , username = username , key = key , summary = summary , ping_message = [string] , epic_link = epic_link ) [EOL] [EOL] [comment] [EOL] elif ( [string] in status and [string] not in component and pings . merge_ping and not pings . uct_ping ) : [EOL] self . sql_object . update_ping ( key = key , field = [string] , value = [number] ) [EOL] [EOL] [comment] [EOL] elif ( [string] in status and pings . uct_ping ) : [EOL] self . ping_jira_status ( msrp = msrp , ping_type = [string] , username = username , key = key , summary = summary , ping_message = [string] , epic_link = epic_link ) [EOL] [EOL] [comment] [EOL] elif ( [string] in status and pings . qa_ping ) : [EOL] self . ping_jira_status ( msrp = msrp , ping_type = [string] , username = username , key = key , summary = summary , ping_message = [string] , epic_link = epic_link ) [EOL] [EOL] def ping_jira_status ( self , msrp , ping_type , username , key , summary , ping_message , sprint = [string] , epic_link = [string] ) : [EOL] [docstring] [EOL] [comment] [EOL] wants_ping = self . sql_object . get_user_ping_value ( username = username , field = ping_type ) [EOL] [EOL] [comment] [EOL] if ( wants_ping == [number] ) : [EOL] thr = threading . Thread ( target = self . chat_obj . send_jira_update , kwargs = { [string] : key , [string] : msrp , [string] : summary , [string] : username , [string] : ping_message , [string] : sprint , [string] : epic_link } ) [EOL] thr . start ( ) [EOL] [EOL] [comment] [EOL] self . sql_object . reset_pings ( ping_type = ping_type , key = key ) [EOL] self . sql_object . update_ping ( key = key , field = ping_type , value = [number] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $devcenter.sql.sql.DevCenterSQL$ 0 0 0 0 0 0 0 $devcenter.jira.jira.Jira$ 0 0 0 0 0 0 0 $devcenter.chat.chat.Chat$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Optional[typing.Type[builtins.BaseException]]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Type[builtins.BaseException]]$ 0 $typing.Optional[typing.Type[builtins.BaseException]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Type[builtins.BaseException]]$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $builtins.float$ 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $threading.Thread$ 0 0 0 0 0 0 0 0 0 0 0 0 $threading.Thread$ 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Type[builtins.BaseException]]$ 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 $typing.Optional[typing.Type[builtins.BaseException]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $threading.Thread$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $threading.Thread$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $threading.Thread$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $threading.Thread$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $threading.Thread$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $threading.Thread$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $threading.Thread$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $threading.Thread$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $threading.Thread$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $threading.Thread$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , List , Any [EOL] import typing [EOL] from base64 import b64encode [EOL] from os import environ [EOL] import re [EOL] [EOL] [EOL] DC_USER = environ . get ( [string] , [string] ) [EOL] PASSWORD = environ . get ( [string] , [string] ) [EOL] [EOL] [EOL] def generate_cred_hash ( username = [string] , password = [string] ) : [EOL] [docstring] [EOL] username = username if username else DC_USER [EOL] password = password if password else PASSWORD [EOL] encoded_header_value = f'{ username } [string] { password }' . encode ( ) [EOL] encoded_header = b64encode ( encoded_header_value ) . decode ( [string] ) [EOL] return f' [string] { encoded_header }' [EOL] [EOL] [EOL] def row2dict ( row ) : [EOL] [docstring] [EOL] d = { } [EOL] for column in row . __table__ . columns : [EOL] d [ column . name ] = str ( getattr ( row , column . name ) ) [EOL] return d [EOL] [EOL] [EOL] def get_branch_name ( username = [string] , msrp = [string] , summary = [string] ) : [EOL] [docstring] [EOL] [EOL] if summary : [EOL] branch = re . sub ( [string] , [string] , summary ) [EOL] branch = re . sub ( [string] , [string] , branch ) [EOL] [EOL] [comment] [EOL] if branch . startswith ( [string] ) : [EOL] branch = branch [ [number] : ] [EOL] if branch . endswith ( [string] ) : [EOL] branch = branch [ : - [number] ] [EOL] else : [EOL] branch = [string] [EOL] [EOL] [comment] [EOL] branch_name = f"{ username } [string] { msrp } [string] { branch }" [EOL] if len ( branch_name ) < [number] : [EOL] while len ( branch_name ) < [number] : [EOL] branch_name += f' [string] { msrp }' [EOL] [EOL] return branch_name [EOL] [EOL] [EOL] def build_commit_message ( key = [string] , msrp = [string] , summary = [string] , epic_link = [string] ) : [EOL] [docstring] [EOL] commit = f" [string] { key } [string] { msrp }" [EOL] [EOL] if epic_link : [EOL] commit += f" [string] { epic_link } [string] " [EOL] [EOL] if summary : [EOL] summary = re . sub ( [string] , [string] , summary ) [EOL] summary = re . sub ( [string] , [string] , summary ) [EOL] commit += f" [string] { summary }" [EOL] [EOL] return commit [EOL] [EOL] [EOL] def verify_parameters ( required ) : [EOL] [docstring] [EOL] required = required . split ( [string] ) [EOL] def decorator ( function ) : [EOL] def wrapper ( data ) : [EOL] missing_params = missing_parameters ( params = data , required = required ) [EOL] if missing_params : [EOL] return { [string] : f" [string] { function . __name__ } [string] { missing_params }" , [string] : False } [EOL] else : [EOL] return function ( data ) [EOL] return wrapper [EOL] return decorator [EOL] [EOL] [EOL] def missing_parameters ( params = None , required = None ) : [EOL] [docstring] [EOL] params = [ ] if params is None else params [EOL] required = [ ] if required is None else required [EOL] [EOL] [comment] [EOL] missing_keys = [ x for x in required if not params . get ( x ) ] [EOL] if missing_keys : [EOL] return [string] + [string] . join ( missing_keys )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import flask [EOL] [docstring] [EOL] import os [EOL] [EOL] from flask import Flask [EOL] from flask_socketio import SocketIO [EOL] from flask_cors import CORS [EOL] [EOL] from . devcenter_routes import define_routes [EOL] [EOL] [EOL] def start_server ( ) : [EOL] [docstring] [EOL] app = Flask ( __name__ ) [EOL] cors = CORS ( app ) [EOL] socketio = SocketIO ( app ) [EOL] [EOL] app . config [ [string] ] = [string] [EOL] [EOL] try : [EOL] HOST = os . environ [ [string] ] [EOL] PORT = int ( os . environ [ [string] ] ) [EOL] except : [EOL] HOST = [string] [EOL] PORT = [number] [EOL] [EOL] define_routes ( app = app , socketio = socketio ) [EOL] socketio . run ( app , host = HOST , port = PORT )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] import base64 [EOL] import hashlib [EOL] [EOL] from Crypto import Random [EOL] from Crypto . Cipher import AES [EOL] [EOL] [EOL] class AESCipher ( ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , key ) : [EOL] [docstring] [EOL] self . key = hashlib . sha256 ( key . encode ( ) ) . digest ( ) [EOL] [EOL] @ staticmethod def _unpad ( s ) : [EOL] return s [ : - ord ( s [ len ( s ) - [number] : ] ) ] [EOL] [EOL] @ staticmethod def _pad ( s ) : [EOL] [docstring] [EOL] return s + ( AES . block_size - len ( s ) % AES . block_size ) * chr ( AES . block_size - len ( s ) % AES . block_size ) [EOL] [EOL] def encrypt ( self , raw ) : [EOL] [docstring] [EOL] raw = self . _pad ( raw ) [EOL] iv = Random . new ( ) . read ( AES . block_size ) [EOL] cipher = AES . new ( self . key , AES . MODE_CBC , iv ) [EOL] return base64 . b64encode ( iv + cipher . encrypt ( raw ) ) . decode ( [string] ) [EOL] [EOL] def decrypt ( self , enc ) : [EOL] [docstring] [EOL] enc = base64 . b64decode ( enc ) [EOL] iv = enc [ : AES . block_size ] [EOL] cipher = AES . new ( self . key , AES . MODE_CBC , iv ) [EOL] return self . _unpad ( cipher . decrypt ( enc [ AES . block_size : ] ) ) . decode ( [string] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 $builtins.bytes$ 0 0 $builtins.bytes$ 0 $builtins.bytes$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import datetime [EOL] import typing [EOL] import devcenter [EOL] import logging [EOL] import threading [EOL] [docstring] [EOL] import argparse [EOL] import datetime [EOL] import logging [EOL] import os [EOL] import sys [EOL] import threading [EOL] [EOL] from devcenter . const import __version__ [EOL] from devcenter . automation_bot import AutomationBot [EOL] from devcenter . devcenter_server import start_server [EOL] [EOL] [EOL] _LOGGER = logging . getLogger ( __name__ ) [EOL] TIME_SHIFT = int ( os . environ . get ( [string] , [number] ) ) [EOL] ENABLE_CRON = int ( os . environ . get ( [string] , [number] ) ) [EOL] [EOL] def start_cron ( ) : [EOL] [docstring] [EOL] _LOGGER . info ( [string] ) [EOL] [EOL] automation_bot = AutomationBot ( ) [EOL] [EOL] while True : [EOL] [comment] [EOL] [comment] [EOL] d = datetime . datetime . utcnow ( ) [EOL] if d . hour in range ( [number] + TIME_SHIFT , [number] + TIME_SHIFT ) and d . isoweekday ( ) in range ( [number] , [number] ) : [EOL] response = automation_bot . update_jira ( ) [EOL] [EOL] if not response [ [string] ] : [EOL] _LOGGER . info ( response [ [string] ] ) [EOL] [EOL] [EOL] def main ( ) : [EOL] [docstring] [EOL] if ENABLE_CRON : [EOL] thr = threading . Thread ( target = start_cron ) [EOL] thr . start ( ) [EOL] [EOL] start_server ( ) [EOL] [EOL] main ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Optional , Any , Union [EOL] import typing [EOL] import devcenter [EOL] [docstring] [EOL] import json [EOL] import os [EOL] from base64 import b64encode [EOL] [EOL] from flask import request , Response , g , abort [EOL] from flask_cors import cross_origin [EOL] import requests [EOL] [EOL] from . aes_cipher import AESCipher [EOL] from . routes . jira import define_routes as JiraRoutes_define_routes [EOL] from . routes . chat import define_routes as ChatRoutes_define_routes [EOL] from . routes . user import define_routes as UserRoutes_define_routes [EOL] from . routes . api import define_routes as ApiRoutes_define_routes [EOL] from . routes . codecloud import define_routes as CodeCloudRoutes_define_routes [EOL] from . server_utils import generate_cred_hash [EOL] [EOL] [EOL] def define_routes ( app , socketio ) : [EOL] [docstring] [EOL] key = os . environ . get ( [string] ) [EOL] APP_NAME = os . environ . get ( [string] ) [EOL] print_routes = int ( os . environ . get ( [string] , [number] ) ) [EOL] [EOL] cypher = AESCipher ( key = key ) [EOL] [EOL] JiraRoutes_define_routes ( app = app , g = g ) [EOL] CodeCloudRoutes_define_routes ( app = app , g = g ) [EOL] ChatRoutes_define_routes ( app = app , g = g ) [EOL] UserRoutes_define_routes ( app = app , g = g ) [EOL] ApiRoutes_define_routes ( app = app , g = g ) [EOL] [EOL] [EOL] @ app . route ( f" [string] { APP_NAME } [string] " , methods = [ [string] ] ) @ cross_origin ( ) def socket_tickets ( ) : [EOL] socketio . emit ( [string] , request . get_json ( ) ) [EOL] return Response ( status = [number] ) [EOL] [EOL] [EOL] @ app . route ( f" [string] { APP_NAME } [string] " , methods = [ [string] ] ) @ cross_origin ( ) def encrypt_token ( ) : [EOL] post_data = request . get_json ( ) [EOL] [EOL] if not post_data . get ( [string] , False ) : [EOL] data = { [string] : False , [string] : [string] } [EOL] try : [EOL] encrypted_password = cypher . encrypt ( post_data [ [string] ] ) [EOL] data = { [string] : True , [string] : encrypted_password } [EOL] except Error as err : [EOL] data = { [string] : False , [string] : f' [string] { err } [string] ' } [EOL] [EOL] return Response ( data , mimetype = [string] ) [EOL] [EOL] [EOL] @ app . before_request def get_cred_hash ( ) : [EOL] if print_routes : print ( request . url ) [EOL] [EOL] [comment] [EOL] if ( [string] not in request . url and [string] not in request . url ) : [EOL] cred_hash = request . headers . get ( [string] ) [EOL] [EOL] try : [EOL] username , password = cred_hash . strip ( ) . split ( [string] ) [EOL] decrypted_pasword = cypher . decrypt ( password ) [EOL] g . cred_hash = generate_cred_hash ( username = username , password = decrypted_pasword ) [EOL] except : [EOL] abort ( [number] ) [EOL] [EOL] [EOL] @ app . after_request def check_status ( response ) : [EOL] [comment] [EOL] if request . method == [string] or [string] in request . url : [EOL] return Response ( status = [number] ) [EOL] [EOL] [comment] [EOL] if response . status_code == [number] : [EOL] return Response ( json . dumps ( { [string] : False , [string] : [string] } ) , status = [number] , mimetype = [string] ) [EOL] [EOL] if response . status_code == [number] : [EOL] return Response ( json . dumps ( { [string] : False , [string] : [string] } ) , status = [number] , mimetype = [string] ) [EOL] [EOL] status = [number] [EOL] [EOL] [comment] [EOL] if response and len ( response . response ) : [EOL] data = json . dumps ( response . response ) [EOL] if not response . response [ [string] ] : status = [number] [EOL] return Response ( data , status = status , mimetype = [string] ) [EOL] else : [EOL] return Response ( { [string] : False , [string] : f' [string] { response }' } , status = [number] , mimetype = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] [EOL] [EOL] __version__ = [string]	0 0 0 0 $builtins.str$ 0 0
[docstring]	0
from typing import Any [EOL] import typing [EOL] import devcenter [EOL] [docstring] [EOL] import pytest [EOL] [EOL] from devcenter . aes_cipher import AESCipher [EOL] [EOL] [EOL] def test_aes_cipher ( ) : [EOL] [docstring] [EOL] key = [string] [EOL] password = [string] [EOL] [EOL] cipher = AESCipher ( key = key ) [EOL] assert cipher [EOL] [EOL] encrypted_password = cipher . encrypt ( password ) [EOL] assert encrypted_password != password [EOL] [EOL] decrypted_password = cipher . decrypt ( encrypted_password ) [EOL] assert decrypted_password == password	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Dict , Any [EOL] import typing [EOL] [docstring] [EOL] import pytest [EOL] [EOL] from devcenter . server_utils import ( row2dict , get_branch_name , generate_cred_hash , build_commit_message , missing_parameters , verify_parameters ) [EOL] [EOL] [EOL] def test_generate_cred_hash ( ) : [EOL] [docstring] [EOL] cred_hash = generate_cred_hash ( ) [EOL] assert cred_hash == [string] [EOL] [EOL] cred_hash = generate_cred_hash ( username = [string] , password = [string] ) [EOL] assert cred_hash == [string] [EOL] [EOL] [EOL] def test_get_branch_name ( ) : [EOL] [docstring] [EOL] branch = get_branch_name ( username = [string] , msrp = [string] , summary = [string] ) [EOL] assert branch == [string] * [number] [EOL] [EOL] branch = get_branch_name ( username = [string] , msrp = [string] , summary = [string] ) [EOL] assert branch == [string] [EOL] [EOL] branch = get_branch_name ( username = [string] , msrp = [string] , summary = [string] ) [EOL] assert branch == [string] [EOL] [EOL] branch = get_branch_name ( username = [string] , msrp = [string] , summary = [string] ) [EOL] assert branch == [string] [EOL] [EOL] [EOL] def test_build_commit_message ( ) : [EOL] [docstring] [EOL] commit_message = build_commit_message ( key = [string] , msrp = [string] , summary = [string] , epic_link = [string] ) [EOL] assert commit_message == [string] [EOL] [EOL] commit_message = build_commit_message ( key = [string] , msrp = [string] , summary = [string] , epic_link = [string] ) [EOL] assert commit_message == [string] [EOL] [EOL] commit_message = build_commit_message ( key = [string] , msrp = [string] , summary = [string] , epic_link = [string] ) [EOL] assert commit_message == [string] [EOL] [EOL] [EOL] def test_verify_parameters ( ) : [EOL] [docstring] [EOL] @ verify_parameters ( [string] ) def fake_request ( data ) : [EOL] return [string] [EOL] [EOL] data = { [string] : [string] , [string] : [string] } [EOL] assert [string] == fake_request ( data ) [EOL] [EOL] result = fake_request ( { } ) [EOL] assert not result [ [string] ] [EOL] assert result [ [string] ] == [string] [EOL] [EOL] [EOL] def test_missing_parameters_required ( ) : [EOL] [docstring] [EOL] params = { [string] : [string] } [EOL] missing = missing_parameters ( params = params , required = [ [string] , [string] ] ) [EOL] assert missing == [string] [EOL] [EOL] params = { [string] : [string] } [EOL] missing = missing_parameters ( params = params , required = [ [string] , [string] ] ) [EOL] assert missing == [string] [EOL] [EOL] params = { [string] : [string] , [string] : [string] } [EOL] missing = missing_parameters ( params = params , required = [ [string] , [string] ] ) [EOL] assert not missing	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring]	0
from typing import Any , Type [EOL] import typing [EOL] import devcenter [EOL] [docstring] [EOL] import json [EOL] import os [EOL] [EOL] [EOL] class Order ( ) : [EOL] [docstring] [EOL] dir_path = os . path . dirname ( os . path . realpath ( __file__ ) ) [EOL] [EOL] def get_orders ( self ) : [EOL] [docstring] [EOL] return self . get_json ( file_name = [string] , file_type = [string] ) [EOL] [EOL] def get_atx ( self ) : [EOL] [docstring] [EOL] return self . get_json ( file_name = [string] , file_type = [string] ) [EOL] [EOL] def get_json ( self , file_name , file_type ) : [EOL] [docstring] [EOL] data = [ ] [EOL] [EOL] try : [EOL] with open ( f'{ self . dir_path } [string] { file_name } [string] ' , encoding = [string] ) as data_file : [EOL] data = json . load ( data_file ) [EOL] return { [string] : True , [string] : data } [EOL] [EOL] except Exception as err : [EOL] return { [string] : False , [string] : f' [string] { file_type } [string] { err }' }	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Pattern , List , Any [EOL] import typing [EOL] [docstring] [EOL] import re [EOL] import os [EOL] [EOL] qa_regex_begin = re . compile ( [string] ) [EOL] qa_regex_end = re . compile ( [string] ) [EOL] qa_step_regex = re . compile ( [string] , flags = re . IGNORECASE ) [EOL] code_cloud_api = os . environ . get ( [string] , [string] ) [EOL] [EOL] [EOL] def get_key ( issue ) : [EOL] [docstring] [EOL] return issue . get ( [string] , [string] ) [EOL] [EOL] [EOL] def get_msrp ( issue ) : [EOL] [docstring] [EOL] return issue . get ( [string] , { } ) . get ( [string] , [number] ) [EOL] [EOL] [EOL] def get_full_status ( issue ) : [EOL] [docstring] [EOL] components = issue . get ( [string] , { } ) . get ( [string] , [ ] ) [EOL] [EOL] return { [string] : issue . get ( [string] , { } ) . get ( [string] , { } ) , [string] : [ x for x in components if x . get ( [string] ) . upper ( ) != [string] ] } [EOL] [EOL] [EOL] def get_status ( issue ) : [EOL] [docstring] [EOL] full_status = get_full_status ( issue ) [EOL] status = full_status . get ( [string] ) [EOL] [EOL] if len ( full_status . get ( [string] ) ) : [EOL] status = full_status . get ( [string] ) [ [number] ] [EOL] [EOL] return status . get ( [string] , [string] ) [EOL] [EOL] [EOL] def get_summary ( issue ) : [EOL] [docstring] [EOL] return issue . get ( [string] , { } ) . get ( [string] , [string] ) [EOL] [EOL] [EOL] def get_username ( issue ) : [EOL] [docstring] [EOL] return issue . get ( [string] , { } ) . get ( [string] , { } ) . get ( [string] , [string] ) [EOL] [EOL] [EOL] def get_display_name ( issue ) : [EOL] [docstring] [EOL] return issue . get ( [string] , { } ) . get ( [string] , { } ) . get ( [string] , [string] ) [EOL] [EOL] [EOL] def get_user_details ( issue ) : [EOL] [docstring] [EOL] assignee_data = issue . get ( [string] , { } ) . get ( [string] , { } ) [EOL] return { [string] : assignee_data . get ( [string] , [string] ) , [string] : assignee_data . get ( [string] , [string] ) , [string] : _get_display_name ( assignee_data . get ( [string] , [string] ) ) } [EOL] [EOL] [EOL] def _get_display_name ( display_name ) : [EOL] [docstring] [EOL] name_only = display_name . split ( [string] ) [EOL] if ( len ( name_only ) == [number] ) : [EOL] display_name = name_only [ [number] ] [EOL] return display_name [EOL] [EOL] [EOL] def get_component ( issue ) : [EOL] [docstring] [EOL] all_components = issue . get ( [string] , { } ) . get ( [string] , [ ] ) [EOL] return [string] . join ( [ x [ [string] ] for x in all_components ] ) [EOL] [EOL] [EOL] def get_story_point ( issue ) : [EOL] [docstring] [EOL] if [string] not in issue . get ( [string] , { } ) : return [number] [EOL] [EOL] points = issue [ [string] ] [ [string] ] [EOL] if points is None : return [number] [EOL] [EOL] points = int ( points / [number] / [number] / [number] ) [EOL] if points > [number] : points = [number] [comment] [EOL] return points [EOL] [EOL] [EOL] def get_sprint ( issue ) : [EOL] [docstring] [EOL] [comment] [EOL] sprint = [string] [EOL] if [string] in issue [ [string] ] and len ( issue [ [string] ] [ [string] ] ) : [EOL] sprint = issue [ [string] ] [ [string] ] [ [number] ] [ [string] ] [EOL] return sprint [EOL] [EOL] [EOL] def get_master_branch ( sprint , key ) : [EOL] [docstring] [EOL] key_items = key . split ( [string] ) [EOL] return key_items [ [number] ] + sprint [EOL] [EOL] [EOL] def get_epic_link ( issue , epic_links ) : [EOL] [docstring] [EOL] epic_link_name = issue . get ( [string] , { } ) . get ( [string] , [string] ) [EOL] return epic_links . get ( epic_link_name , [string] ) [EOL] [EOL] [EOL] def get_label ( issue ) : [EOL] [docstring] [EOL] [comment] [EOL] labels = issue . get ( [string] , { } ) . get ( [string] ) [EOL] if labels : [EOL] return [string] . join ( labels ) [EOL] else : [EOL] [docstring] [EOL] [EOL] def get_comments ( issue ) : [EOL] [docstring] [EOL] comments = [ ] [EOL] key = issue . get ( [string] ) [EOL] [EOL] [comment] [EOL] for index , comment in enumerate ( issue . get ( [string] , { } ) . get ( [string] , { } ) . get ( [string] , [ ] ) ) : [EOL] [EOL] [comment] [EOL] raw_comments = issue . get ( [string] , { } ) . get ( [string] , { } ) . get ( [string] , [ ] ) [EOL] if len ( raw_comments ) > index - [number] : [EOL] comment [ [string] ] = raw_comments [ index ] . get ( [string] , [string] ) [EOL] [EOL] comments . append ( format_comment ( comment , key ) ) [EOL] return comments [EOL] [EOL] [EOL] def format_comment ( comment , key ) : [EOL] [docstring] [EOL] raw_comment = comment . get ( [string] , [string] ) [EOL] rendered_comment = comment . get ( [string] , [string] ) [EOL] [EOL] if not raw_comment : [EOL] raw_comment = comment . get ( [string] , [string] ) [EOL] if not rendered_comment : [EOL] rendered_comment = comment . get ( [string] , [string] ) [EOL] [EOL] comment_type = [string] [EOL] if re . match ( qa_step_regex , raw_comment ) : [EOL] comment [ [string] ] = [string] [EOL] [EOL] return { [string] : rendered_comment , [string] : raw_comment , [string] : comment . get ( [string] , [string] ) , [string] : key , [string] : comment . get ( [string] , { } ) . get ( [string] , [string] ) , [string] : comment . get ( [string] , { } ) . get ( [string] , [string] ) , [string] : comment . get ( [string] , { } ) . get ( [string] , [string] ) , [string] : comment_type , [string] : comment . get ( [string] , [string] ) , [string] : comment . get ( [string] , [string] ) , [string] : False , [string] : [string] , [string] : [string] + comment . get ( [string] , [string] ) , [string] : [string] if [string] in comment else [string] } [EOL] [EOL] [EOL] def get_customer_details ( issue ) : [EOL] [docstring] [EOL] return { [string] : issue . get ( [string] , { } ) . get ( [string] , [string] ) , [string] : issue . get ( [string] , { } ) . get ( [string] , [string] ) , [string] : issue . get ( [string] , { } ) . get ( [string] , [string] ) , [string] : issue . get ( [string] , { } ) . get ( [string] , [string] ) } [EOL] [EOL] [EOL] def get_dates ( issue ) : [EOL] [docstring] [EOL] return { [string] : issue . get ( [string] , { } ) . get ( [string] , { } ) . get ( [string] , [string] ) , [string] : issue . get ( [string] , { } ) . get ( [string] , { } ) . get ( [string] , [string] ) , [string] : issue . get ( [string] , { } ) . get ( [string] , { } ) . get ( [string] , [string] ) , [string] : issue . get ( [string] , { } ) . get ( [string] , { } ) . get ( [string] , [number] ) , [string] : issue . get ( [string] , { } ) . get ( [string] , [string] ) , [string] : issue . get ( [string] , { } ) . get ( [string] , [string] ) , [string] : issue . get ( [string] , { } ) . get ( [string] , [string] ) , [string] : issue . get ( [string] , { } ) . get ( [string] , [string] ) } [EOL] [EOL] [EOL] def get_worklog ( issue ) : [EOL] [docstring] [EOL] worklogs = [ ] [EOL] worklog_field = issue . get ( [string] , { } ) . get ( [string] , False ) [EOL] [EOL] if worklog_field : [EOL] worklogs = worklog_field . get ( [string] , [ ] ) [EOL] [EOL] return worklogs [EOL] [EOL] [EOL] def get_attachments ( issue ) : [EOL] [docstring] [EOL] attachments = [ ] [EOL] [EOL] if [string] in issue [ [string] ] : [EOL] for attachment in issue [ [string] ] [ [string] ] : [EOL] attachments . append ( { [string] : attachment [ [string] ] , [string] : attachment [ [string] ] } ) [EOL] [EOL] return attachments [EOL] [EOL] [EOL] def get_watchers ( issue ) : [EOL] [docstring] [EOL] watchers = [ ] [EOL] if [string] in issue [ [string] ] and len ( issue [ [string] ] [ [string] ] ) : [EOL] for watcher in issue [ [string] ] [ [string] ] : [EOL] watchers . append ( { [string] : watcher [ [string] ] , [string] : _get_display_name ( watcher . get ( [string] , [string] ) ) } ) [EOL] return watchers [EOL] [EOL] [EOL] def get_priority ( issue ) : [EOL] [docstring] [EOL] priority = [string] [EOL] if [string] in issue [ [string] ] : [EOL] priority = issue [ [string] ] [ [string] ] . get ( [string] , [string] ) [EOL] return priority [EOL] [EOL] [EOL] def get_severity ( issue ) : [EOL] [docstring] [EOL] severity = [string] [EOL] if [string] in issue [ [string] ] : [EOL] severity = issue [ [string] ] [ [string] ] . get ( [string] , [string] ) [EOL] return severity [EOL] [EOL] [EOL] def get_code_reviewer ( issue ) : [EOL] [docstring] [EOL] code_reviewer = { [string] : [string] , [string] : [string] } [EOL] [EOL] if [string] in issue [ [string] ] and issue [ [string] ] [ [string] ] is not None : [EOL] code_reviewer = { [string] : issue [ [string] ] [ [string] ] . get ( [string] , [string] ) , [string] : _get_display_name ( issue [ [string] ] [ [string] ] . get ( [string] , [string] ) ) } [EOL] return code_reviewer [EOL] [EOL] [EOL] def get_issue_type ( issue ) : [EOL] [docstring] [EOL] issue_type = [string] [EOL] if [string] in issue [ [string] ] and issue [ [string] ] [ [string] ] is not None : [EOL] issue_type = issue [ [string] ] [ [string] ] . get ( [string] , [string] ) [EOL] return issue_type [EOL] [EOL] [EOL] def get_environment ( issue ) : [EOL] [docstring] [EOL] return issue [ [string] ] . get ( [string] , [string] ) [EOL] [EOL] [EOL] def get_dev_changes ( issue ) : [EOL] [docstring] [EOL] return issue [ [string] ] . get ( [string] , [string] ) [EOL] [EOL] [EOL] def get_issue_links ( issue ) : [EOL] [docstring] [EOL] return issue [ [string] ] . get ( [string] , [ ] ) [EOL] [EOL] [EOL] def get_description ( issue ) : [EOL] [docstring] [EOL] return issue [ [string] ] . get ( [string] , [string] ) [EOL] [EOL] [EOL] def get_history ( issue ) : [EOL] [docstring] [EOL] histories = issue . get ( [string] , { } ) . get ( [string] , [ ] ) [EOL] [EOL] formatted_history = { [string] : [ ] } [EOL] for history in histories : [EOL] items = history . get ( [string] ) [EOL] status = items [ [number] ] . get ( [string] ) [EOL] if len ( items ) and status in [ [string] , [string] ] : [EOL] formatted_history [ [string] ] . append ( history ) [EOL] [EOL] [comment] [EOL] formatted_history [ [string] ] = sorted ( formatted_history [ [string] ] , key = lambda k : k [ [string] ] ) [EOL] return formatted_history [EOL] [EOL] [EOL] def get_transitions ( issue ) : [EOL] [docstring] [EOL] transitions = issue . get ( [string] , [ ] ) [EOL] return [ { [string] : transition . get ( [string] , [string] ) , [string] : transition . get ( [string] , [string] ) , } for transition in transitions ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.strtyping.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , List , Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] [EOL] class JiraComponent ( ) : [EOL] [docstring] [EOL] [EOL] def set_component ( self , name , key , cred_hash ) : [EOL] [docstring] [EOL] json_data = { [string] : { [string] : [ { [string] : [ { [string] : name } ] } ] } } [EOL] response = self . jira_api . put_json ( url = f'{ self . jira_api . component_url } [string] { key }' , json_data = json_data , cred_hash = cred_hash ) [EOL] [EOL] if not response . get ( [string] , False ) : [EOL] response [ [string] ] = { } [EOL] return response [EOL] [EOL] def set_component_by_id ( self , id , key , cred_hash ) : [EOL] [docstring] [EOL] json_data = { [string] : { [string] : [ { [string] : [ { [string] : id } ] } ] } } [EOL] response = self . jira_api . put_json ( url = f'{ self . jira_api . component_url } [string] { key }' , json_data = json_data , cred_hash = cred_hash ) [EOL] [EOL] if not response . get ( [string] , False ) : [EOL] response [ [string] ] = { } [EOL] return response [EOL] [EOL] def set_components ( self , names , key , cred_hash ) : [EOL] [docstring] [EOL] components = [ ] [EOL] for name in names : [EOL] components . append ( { [string] : name } ) [EOL] [EOL] json_data = { [string] : { [string] : [ { [string] : components } ] } } [EOL] response = self . jira_api . put_json ( url = f'{ self . jira_api . component_url } [string] { key }' , json_data = json_data , cred_hash = cred_hash ) [EOL] [EOL] if not response . get ( [string] , False ) : [EOL] response [ [string] ] = { } [EOL] return response [EOL] [EOL] def remove_component ( self , name , key , cred_hash ) : [EOL] [docstring] [EOL] json_data = { [string] : { [string] : [ { [string] : { [string] : name } } ] } } [EOL] return self . jira_api . put_json ( url = f'{ self . jira_api . component_url } [string] { key }' , json_data = json_data , cred_hash = cred_hash ) [EOL] [EOL] def remove_component_by_id ( self , id , key , cred_hash ) : [EOL] [docstring] [EOL] json_data = { [string] : { [string] : [ { [string] : { [string] : id } } ] } } [EOL] return self . jira_api . put_json ( url = f'{ self . jira_api . component_url } [string] { key }' , json_data = json_data , cred_hash = cred_hash ) [EOL] [EOL] def remove_components ( self , names , key , cred_hash ) : [EOL] [docstring] [EOL] components = [ ] [EOL] for name in names : [EOL] components . append ( { [string] : name } ) [EOL] [EOL] json_data = { [string] : { [string] : [ { [string] : components } ] } } [EOL] return self . jira_api . put_json ( url = f'{ self . jira_api . component_url } [string] { key }' , json_data = json_data , cred_hash = cred_hash )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.List[typing.Dict[builtins.str,typing.List[typing.Dict[builtins.str,typing.Any]]]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.List[typing.Dict[builtins.str,typing.List[typing.Dict[builtins.str,typing.Any]]]]]]$ 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.List[typing.Dict[builtins.str,typing.List[typing.Dict[builtins.str,typing.Any]]]]]]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.List[typing.Dict[builtins.str,typing.List[typing.Dict[builtins.str,typing.Any]]]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.List[typing.Dict[builtins.str,typing.List[typing.Dict[builtins.str,typing.Any]]]]]]$ 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.List[typing.Dict[builtins.str,typing.List[typing.Dict[builtins.str,typing.Any]]]]]]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.List[typing.Dict[builtins.str,typing.List[typing.Any]]]]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.List[typing.Dict[builtins.str,typing.List[typing.Any]]]]]$ 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.List[typing.Dict[builtins.str,typing.List[typing.Any]]]]]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.List[typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Any]]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.List[typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Any]]]]]$ 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.List[typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Any]]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.List[typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Any]]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.List[typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Any]]]]]$ 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.List[typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Any]]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.List[typing.Dict[builtins.str,typing.List[typing.Any]]]]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.List[typing.Dict[builtins.str,typing.List[typing.Any]]]]]$ 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.List[typing.Dict[builtins.str,typing.List[typing.Any]]]]]$ 0 0 0 0 0
from typing import Dict , Any , Union [EOL] import typing [EOL] import requests [EOL] [docstring] [EOL] from base64 import b64decode [EOL] import json [EOL] import os [EOL] import re [EOL] import urllib . parse [EOL] [EOL] import requests [EOL] from requests . exceptions import ProxyError , SSLError [EOL] [EOL] from . config import fields , cron_fields , filters , all_open_tickets [EOL] from devcenter . atlassian . api import AtlassianApi [EOL] [EOL] [EOL] class JiraApi ( AtlassianApi ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] [docstring] [EOL] [EOL] self . dir_path = os . path . dirname ( os . path . realpath ( __file__ ) ) [EOL] self . jira_url = os . environ . get ( [string] , [string] ) [EOL] [EOL] self . jira_ticket = f'{ self . jira_url } [string] ' [EOL] self . jira_search_url = f'{ self . jira_url } [string] ' [EOL] [EOL] self . api_base = f'{ self . jira_url } [string] ' [EOL] self . api_agile_base = f'{ self . jira_url } [string] ' [EOL] self . component_url = f'{ self . api_base } [string] ' [EOL] [EOL] self . all_open_tickets = urllib . parse . quote ( all_open_tickets ) [EOL] self . fields = fields [EOL] self . cron_fields = cron_fields [EOL] self . filters = filters [EOL] [EOL] def get_session ( self , cred_hash ) : [EOL] [docstring] [EOL] basic , * creds = cred_hash . split ( [string] ) [EOL] if not creds : [EOL] return { [string] : False , [string] : [string] } [EOL] [EOL] creds = creds [ [number] ] [EOL] username = [string] [EOL] password = [string] [EOL] try : [EOL] creds = b64decode ( creds ) . decode ( [string] ) [EOL] username , password = creds . split ( [string] ) [EOL] except : [EOL] return { [string] : False , [string] : [string] } [EOL] [EOL] url = f"{ self . jira_url } [string] " [EOL] data = { [string] : username , [string] : password } [EOL] data = json . dumps ( data ) [EOL] headers = { [string] : [string] } [EOL] session = requests . session ( ) [EOL] session . verify = False [EOL] [EOL] try : [EOL] response = session . post ( url = url , data = data , headers = headers ) [EOL] if response . status_code in [ [number] , [number] , [number] ] : [EOL] return { [string] : True , [string] : session } [EOL] else : [EOL] return { [string] : False , [string] : response . text } [EOL] except ( ProxyError , SSLError , OSError ) as e : [EOL] return { [string] : False , [string] : f" [string] { e }" } [EOL] [EOL] def process_response ( self , response ) : [EOL] [docstring] [EOL] response = super ( JiraApi , self ) . process_response ( response = response ) [EOL] [EOL] if not response [ [string] ] : [EOL] errors = [ ] [EOL] [EOL] if isinstance ( response [ [string] ] , dict ) : [EOL] for error_message in response [ [string] ] . values ( ) : [EOL] [EOL] if isinstance ( error_message , list ) : [EOL] errors = errors + error_message [EOL] [EOL] elif isinstance ( error_message , dict ) : [EOL] for message in error_message . values ( ) : [EOL] errors . append ( message ) [EOL] [EOL] elif isinstance ( response [ [string] ] , list ) : [EOL] errors = response [ [string] ] [EOL] [EOL] [comment] [EOL] response [ [string] ] = re . sub ( [string] , [string] , [string] . join ( errors ) ) [EOL] [EOL] return response	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $requests.sessions.Session$ 0 0 0 $requests.sessions.Session$ 0 0 0 $requests.sessions.Session$ 0 $typing.Union[None,builtins.bool,builtins.str]$ 0 0 0 0 0 0 0 $requests.models.Response$ 0 $requests.sessions.Session$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.sessions.Session$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$
[docstring] [EOL] [EOL] [EOL] class JiraWatchers ( ) : [EOL] [docstring] [EOL] [EOL] def add_watcher ( self , key , cred_hash , username ) : [EOL] [docstring] [EOL] return self . jira_api . post_json ( url = f'{ self . jira_api . api_base } [string] { key } [string] ' , json_data = username , cred_hash = cred_hash ) [EOL] [EOL] def remove_watcher ( self , key , cred_hash , username ) : [EOL] [docstring] [EOL] return self . jira_api . delete ( url = f'{ self . jira_api . api_base } [string] { key } [string] { username }' , cred_hash = cred_hash ) [EOL] [EOL] def get_watchers ( self , key , cred_hash ) : [EOL] [docstring] [EOL] return self . jira_api . get ( url = f'{ self . jira_api . api_base } [string] { key } [string] ' , cred_hash = cred_hash )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring]	0
from typing import Dict , List , Any [EOL] import typing [EOL] [docstring] [EOL] import datetime [EOL] import math [EOL] from time import gmtime , strftime [EOL] [EOL] from . fields import * [EOL] from devcenter . server_utils import generate_cred_hash [EOL] [EOL] [EOL] class JiraMisc ( ) : [EOL] [docstring] [EOL] [EOL] @ classmethod def build_qa_title ( cls , key , msrp , summary ) : [EOL] [docstring] [EOL] return f" [string] { key } [string] { msrp } [string] { summary }" [EOL] [EOL] @ classmethod def get_pcr_estimate ( cls , story_point ) : [EOL] [docstring] [EOL] pcr_estimate = [number] [EOL] if ( story_point > [number] ) : [EOL] pcr_estimate = int ( math . ceil ( story_point / [number] ) ) [EOL] [comment] [EOL] if pcr_estimate > [number] : [EOL] pcr_estimate = [number] [EOL] return pcr_estimate [EOL] [EOL] def find_key_by_msrp ( self , msrp = [string] , cred_hash = [string] ) : [EOL] cred_hash = generate_cred_hash ( ) [EOL] [docstring] [EOL] url = f'{ self . jira_api . api_base } [string] { msrp } [string] ' [EOL] response = self . jira_api . get ( url = url , cred_hash = cred_hash ) [EOL] [EOL] if not response [ [string] ] : [EOL] return response [EOL] elif len ( response [ [string] ] [ [string] ] ) : [EOL] return { [string] : True , [string] : response [ [string] ] [ [string] ] [ [number] ] [ [string] ] } [EOL] else : [EOL] return { [string] : False , [string] : f' [string] { msrp }' } [EOL] [EOL] def add_work_log ( self , time , key , cred_hash , private_log = True ) : [EOL] [docstring] [EOL] json_data = { [string] : [string] , [string] : strftime ( [string] , gmtime ( ) ) , [string] : time , [string] : False } [EOL] [EOL] if private_log : [EOL] json_data [ [string] ] = { [string] : [string] , [string] : [string] } [EOL] return self . jira_api . post_json ( url = f'{ self . jira_api . api_base } [string] { key } [string] ' , json_data = { [string] : time } , cred_hash = cred_hash ) [EOL] [EOL] def get_profile ( self , cred_hash ) : [EOL] [docstring] [EOL] response = self . jira_api . get ( url = f'{ self . jira_api . api_base } [string] ' , cred_hash = cred_hash ) [EOL] [EOL] if not response [ [string] ] : [EOL] return response [EOL] else : [EOL] response [ [string] ] [ [string] ] = response [ [string] ] [ [string] ] [ [string] ] [EOL] del response [ [string] ] [ [string] ] [EOL] del response [ [string] ] [ [string] ] [EOL] del response [ [string] ] [ [string] ] [EOL] del response [ [string] ] [ [string] ] [EOL] del response [ [string] ] [ [string] ] [EOL] del response [ [string] ] [ [string] ] [EOL] return response [EOL] [EOL] def set_dev_changes ( self , dev_changes , key , cred_hash ) : [EOL] [docstring] [EOL] json_data = { [string] : { [string] : dev_changes } } [EOL] response = self . jira_api . put_json ( url = f'{ self . jira_api . component_url } [string] { key }' , json_data = json_data , cred_hash = cred_hash ) [EOL] [EOL] if response [ [string] ] : [EOL] response [ [string] ] = dev_changes [EOL] return response [EOL] [EOL] def set_additional_qa ( self , comment , key , cred_hash ) : [EOL] [docstring] [EOL] json_data = { [string] : { [string] : comment } } [EOL] response = self . jira_api . put_json ( url = f'{ self . jira_api . component_url } [string] { key }' , json_data = json_data , cred_hash = cred_hash ) [EOL] [EOL] if response [ [string] ] : [EOL] response [ [string] ] = comment [EOL] return response [EOL] [EOL] def add_pr_to_dev_changes ( self , pull_response , data ) : [EOL] [docstring] [EOL] dev_changes = [string] [EOL] for request in pull_response [ [string] ] : [EOL] if request . get ( [string] , False ) : [EOL] repo = request [ [string] ] [EOL] link = request [ [string] ] [EOL] dev_changes += f'{ repo } [string] { link } [string] ' [EOL] [EOL] pcr_number = math . ceil ( data [ [string] ] / [number] ) [EOL] dev_changes += f' [string] { pcr_number }' [EOL] [EOL] return self . add_dev_changes ( dev_changes = dev_changes , cred_hash = data [ [string] ] , key = data [ [string] ] ) [EOL] [EOL] def add_dev_changes ( self , dev_changes , cred_hash , key ) : [EOL] [docstring] [EOL] return self . set_dev_changes ( dev_changes = dev_changes , cred_hash = cred_hash , key = key ) [EOL] [EOL] def get_active_sprints ( self , cred_hash = [string] ) : [EOL] [docstring] [EOL] cred_hash = generate_cred_hash ( ) [EOL] url = f'{ self . jira_api . api_agile_base } [string] ' [EOL] response = self . jira_api . get ( url = url , cred_hash = cred_hash ) [EOL] if not response [ [string] ] : [EOL] return response [EOL] [EOL] active_sprints = [ sprint for sprint in response [ [string] ] [ [string] ] if sprint [ [string] ] == [string] ] [EOL] return { [string] : True , [string] : active_sprints }	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Any]]$ 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Any]]$ 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0
from typing import Dict , Any , Type [EOL] import typing [EOL] import devcenter [EOL] [docstring] [EOL] import os [EOL] [EOL] from . fields import * [EOL] from devcenter . sql . sql import DevCenterSQL [EOL] from devcenter . server_utils import generate_cred_hash [EOL] [EOL] class JiraTickets ( ) : [EOL] [docstring] [EOL] [EOL] epic_links = DevCenterSQL ( ) . get_epic_links ( ) [EOL] [EOL] def get_filter_url ( self , filter_number , cred_hash ) : [EOL] [docstring] [EOL] response = self . jira_api . get ( url = f'{ self . jira_api . api_base } [string] { filter_number }' , cred_hash = cred_hash ) [EOL] if not response [ [string] ] : [EOL] return response [EOL] return { [string] : True , [string] : response [ [string] ] [ [string] ] } [EOL] [EOL] def get_raw_jira_tickets ( self , cred_hash , fields = [string] , jql = [string] , filter_number = [string] , get_expanded = True ) : [EOL] [docstring] [EOL] if not jql and not filter_number : [EOL] return { [string] : False , [string] : [string] } [EOL] [EOL] if not jql : [EOL] response = self . get_filter_url ( filter_number = filter_number , cred_hash = cred_hash ) [EOL] if not response [ [string] ] : [EOL] return response [EOL] [EOL] url = response [ [string] ] [EOL] else : [EOL] url = f'{ self . jira_api . jira_search_url } [string] { jql }' [EOL] [EOL] if not fields : [EOL] fields = self . jira_api . fields [EOL] [EOL] full_url = f'{ url } [string] { fields }' [EOL] if get_expanded : [EOL] full_url += [string] [EOL] [EOL] response = self . jira_api . get ( url = full_url , cred_hash = cred_hash ) [EOL] if not response [ [string] ] : [EOL] return response [EOL] [EOL] return { [string] : True , [string] : response [ [string] ] [ [string] ] } [EOL] [EOL] def get_full_ticket ( self , key , cred_hash = [string] ) : [EOL] [docstring] [EOL] cred_hash = generate_cred_hash ( ) [EOL] return self . get_jira_tickets ( cred_hash = cred_hash , jql = f" [string] { key } [string] " , fields = self . jira_api . fields ) [EOL] [EOL] def get_ticket_field_values ( self , key = [string] , cred_hash = [string] , fields = [string] , get_expanded = True ) : [EOL] [docstring] [EOL] cred_hash = generate_cred_hash ( ) [EOL] response = self . get_jira_tickets ( cred_hash = cred_hash , jql = f" [string] { key } [string] " , fields = fields , get_expanded = get_expanded ) [EOL] if not response [ [string] ] : [EOL] return response [EOL] elif len ( response [ [string] ] ) == [number] : [EOL] return { [string] : False , [string] : f' [string] { key }' } [EOL] elif len ( response [ [string] ] ) > [number] : [EOL] return { [string] : False , [string] : f' [string] { key }' } [EOL] [EOL] response [ [string] ] = response [ [string] ] [ [number] ] [EOL] return response [EOL] [EOL] def get_ticket_dev_changes ( self , key , cred_hash = [string] ) : [EOL] [docstring] [EOL] cred_hash = generate_cred_hash ( ) [EOL] return self . get_jira_tickets ( cred_hash = cred_hash , jql = f" [string] { key } [string] " , fields = [string] ) [EOL] [EOL] def get_ticket_fields ( self , issue , fields ) : [EOL] [docstring] [EOL] ticket = { } [EOL] [EOL] ticket [ [string] ] = get_key ( issue ) [EOL] ticket [ [string] ] = get_msrp ( issue ) [EOL] [EOL] ticket [ [string] ] = get_user_details ( issue ) [EOL] ticket [ [string] ] = get_username ( issue ) [EOL] ticket [ [string] ] = get_display_name ( issue ) [EOL] [EOL] ticket [ [string] ] = get_customer_details ( issue ) [EOL] ticket [ [string] ] = get_dates ( issue ) [EOL] ticket [ [string] ] = get_worklog ( issue ) [EOL] [EOL] ticket [ [string] ] = get_summary ( issue ) [EOL] ticket [ [string] ] = get_component ( issue ) [EOL] ticket [ [string] ] = get_status ( issue ) [EOL] ticket [ [string] ] = get_full_status ( issue ) [EOL] ticket [ [string] ] = get_story_point ( issue ) [EOL] [EOL] ticket [ [string] ] = get_sprint ( issue ) [EOL] if ticket [ [string] ] : [EOL] ticket [ [string] ] = get_master_branch ( ticket [ [string] ] , ticket [ [string] ] ) [EOL] [EOL] ticket [ [string] ] = get_epic_link ( issue , self . epic_links ) [EOL] ticket [ [string] ] = get_label ( issue ) [EOL] [EOL] ticket [ [string] ] = get_comments ( issue ) [EOL] ticket [ [string] ] = get_attachments ( issue ) [EOL] [EOL] ticket [ [string] ] = get_watchers ( issue ) [EOL] ticket [ [string] ] = get_priority ( issue ) [EOL] ticket [ [string] ] = get_severity ( issue ) [EOL] [EOL] ticket [ [string] ] = get_code_reviewer ( issue ) [EOL] [EOL] ticket [ [string] ] = get_issue_type ( issue ) [EOL] ticket [ [string] ] = get_environment ( issue ) [EOL] ticket [ [string] ] = get_issue_links ( issue ) [EOL] [EOL] ticket [ [string] ] = get_description ( issue ) [EOL] ticket [ [string] ] = get_history ( issue ) [EOL] ticket [ [string] ] = get_dev_changes ( issue ) [EOL] ticket [ [string] ] = get_transitions ( issue ) [EOL] [EOL] return ticket [EOL] [EOL] def get_jira_tickets ( self , cred_hash , fields = [string] , jql = [string] , filter_number = [string] , get_expanded = True ) : [EOL] [docstring] [EOL] if not fields or fields is None : [EOL] fields = self . jira_api . fields [EOL] [EOL] [comment] [EOL] if [string] not in jql : [EOL] cred_hash = generate_cred_hash ( ) [EOL] [EOL] response = self . get_raw_jira_tickets ( filter_number = filter_number , cred_hash = cred_hash , fields = fields , jql = jql , get_expanded = get_expanded ) [EOL] if not response [ [string] ] : [EOL] return response [EOL] [EOL] return { [string] : len ( response [ [string] ] ) , [string] : [ self . get_ticket_fields ( issue , fields ) for issue in response [ [string] ] ] , [string] : True }	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[devcenter.jira.tickets.JiraTickets]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] [docstring] [EOL] import datetime [EOL] from time import gmtime , strftime [EOL] [EOL] from . fields import format_comment [EOL] [EOL] [EOL] class JiraComments ( ) : [EOL] [docstring] [EOL] [EOL] def add_comment ( self , key , cred_hash , private_comment , comment = [string] ) : [EOL] [docstring] [EOL] json_data = self . _set_json ( comment = comment , private_comment = private_comment ) [EOL] url = f'{ self . jira_api . api_base } [string] { key } [string] ' [EOL] response = self . jira_api . post_json ( url = url , json_data = json_data , cred_hash = cred_hash ) [EOL] [EOL] if not response . get ( [string] , False ) : [EOL] return response [EOL] else : [EOL] return { [string] : True , [string] : format_comment ( comment = response . get ( [string] ) , key = key ) } [EOL] [EOL] def edit_comment ( self , key , comment_id , cred_hash , private_comment , comment = [string] ) : [EOL] [docstring] [EOL] json_data = self . _set_json ( comment = comment , private_comment = private_comment ) [EOL] url = f'{ self . jira_api . api_base } [string] { key } [string] { comment_id } [string] ' [EOL] response = self . jira_api . put_json ( url = url , json_data = json_data , cred_hash = cred_hash ) [EOL] [EOL] if not response . get ( [string] , False ) : [EOL] return response [EOL] else : [EOL] return { [string] : True , [string] : format_comment ( comment = response . get ( [string] ) , key = key ) } [EOL] [EOL] def delete_comment ( self , key , comment_id , cred_hash ) : [EOL] [docstring] [EOL] response = self . jira_api . delete ( url = f'{ self . jira_api . api_base } [string] { key } [string] { comment_id }' , cred_hash = cred_hash ) [EOL] response [ [string] ] = { [string] : key , [string] : comment_id } [EOL] return response [EOL] [EOL] def _set_json ( self , comment , private_comment ) : [EOL] [docstring] [EOL] json_data = { [string] : comment } [EOL] if private_comment : [EOL] json_data [ [string] ] = { [string] : [string] , [string] : [string] } [EOL] else : [EOL] json_data [ [string] ] = { } [EOL] [EOL] return json_data [EOL] [EOL] def parse_comment ( self , cred_hash , comment , key ) : [EOL] [docstring] [EOL] json_data = { [string] : [string] , [string] : comment , [string] : key } [EOL] return self . jira_api . post_json ( url = f'{ self . jira_api . api_base } [string] ' , json_data = json_data , cred_hash = cred_hash )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] [EOL] class JiraStatus ( ) : [EOL] [docstring] [EOL] [EOL] def set_status ( self , key , transition_id , cred_hash ) : [EOL] url = f'{ self . jira_api . api_base } [string] { key } [string] ' [EOL] response = self . jira_api . post_json ( url = url , json_data = { [string] : { [string] : transition_id } } , cred_hash = cred_hash ) [EOL] [EOL] if not response . get ( [string] , False ) : [EOL] response [ [string] ] = { } [EOL] return response	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$
import devcenter [EOL] [docstring] [EOL] from . api import JiraApi [EOL] from . comments import JiraComments [EOL] from . component import JiraComponent [EOL] from . misc import JiraMisc [EOL] from . status import JiraStatus [EOL] from . tickets import JiraTickets [EOL] from . watchers import JiraWatchers [EOL] [EOL] [EOL] class Jira ( JiraComponent , JiraStatus , JiraMisc , JiraTickets , JiraComments , JiraWatchers ) : [EOL] [docstring] [EOL] jira_api = JiraApi ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $devcenter.jira.api.JiraApi$ 0 0 0 0
from typing import Dict [EOL] import typing [EOL] all_open_tickets = [string] [EOL] [EOL] fields = [string] [EOL] [EOL] cron_fields = [string] [EOL] [EOL] projects = [string] [EOL] [EOL] filters = { [string] : projects + [string] , [string] : projects + [string] , [string] : projects + [string] , [string] : projects + [string] , [string] : projects + [string] } [EOL]	0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0
[docstring]	0
from typing import Dict , List , Any , Union [EOL] import typing [EOL] [docstring] [EOL] import copy [EOL] [EOL] from devcenter . jira . fields import ( get_key , get_msrp , get_full_status , get_status , get_summary , get_username , get_display_name , get_user_details , _get_display_name , get_component , get_story_point ) [EOL] [EOL] [EOL] USER_ISSUE = { [string] : { [string] : { [string] : [string] , [string] : [string] , [string] : [string] } } } [EOL] [EOL] STATUS_ISSUE = { [string] : { [string] : [ { [string] : [string] } , { [string] : [string] } ] , [string] : { [string] : [string] , [string] : [number] } } } [EOL] [EOL] [EOL] def test_get_key ( ) : [EOL] extracted_key = get_key ( { [string] : [string] } ) [EOL] assert extracted_key == [string] [EOL] [EOL] extracted_key = get_key ( { } ) [EOL] assert extracted_key == [string] [EOL] [EOL] [EOL] def test_get_msrp ( ) : [EOL] extracted_get_msrp = get_msrp ( { [string] : { [string] : [number] } } ) [EOL] assert extracted_get_msrp == [number] [EOL] [EOL] extracted_get_msrp = get_msrp ( { [string] : { } } ) [EOL] assert extracted_get_msrp == [number] [EOL] [EOL] extracted_get_msrp = get_msrp ( { } ) [EOL] assert extracted_get_msrp == [number] [EOL] [EOL] [EOL] def test_get_full_status ( ) : [EOL] extracted_status = get_full_status ( STATUS_ISSUE ) [EOL] assert extracted_status [ [string] ] == STATUS_ISSUE [ [string] ] [ [string] ] [EOL] assert extracted_status [ [string] ] [ [number] ] [ [string] ] == STATUS_ISSUE [ [string] ] [ [string] ] [ [number] ] [ [string] ] [EOL] assert extracted_status [ [string] ] [ [number] ] [ [string] ] == STATUS_ISSUE [ [string] ] [ [string] ] [ [number] ] [ [string] ] [EOL] [EOL] extracted_status = get_full_status ( { } ) [EOL] assert not len ( extracted_status [ [string] ] ) [EOL] assert extracted_status [ [string] ] == { } [EOL] [EOL] issue_copy = copy . deepcopy ( STATUS_ISSUE ) [EOL] issue_copy [ [string] ] [ [string] ] . append ( { [string] : [string] } ) [EOL] extracted_status = get_full_status ( issue_copy ) [EOL] components = extracted_status [ [string] ] [EOL] non_beta = [ x for x in components if x . get ( [string] ) . upper ( ) != [string] ] [EOL] assert len ( non_beta ) == [number] [EOL] [EOL] [EOL] def test_get_status ( ) : [EOL] extracted_status = get_status ( STATUS_ISSUE ) [EOL] assert extracted_status == STATUS_ISSUE [ [string] ] [ [string] ] [ [number] ] [ [string] ] [EOL] [EOL] issue_copy = copy . deepcopy ( STATUS_ISSUE ) [EOL] del issue_copy [ [string] ] [ [string] ] [EOL] issue_copy [ [string] ] [ [string] ] [ [string] ] = [string] [EOL] extracted_status = get_status ( issue_copy ) [EOL] assert extracted_status == [string] [EOL] [EOL] extracted_status = get_status ( { } ) [EOL] assert extracted_status == [string] [EOL] [EOL] [EOL] def test_get_summary ( ) : [EOL] summary = get_summary ( { [string] : { [string] : [string] } } ) [EOL] assert summary == [string] [EOL] [EOL] summary = get_summary ( { } ) [EOL] assert summary == [string] [EOL] [EOL] [EOL] def test_get_username ( ) : [EOL] username = get_username ( USER_ISSUE ) [EOL] assert username == USER_ISSUE [ [string] ] [ [string] ] [ [string] ] [EOL] [EOL] username = get_username ( { } ) [EOL] assert username == [string] [EOL] [EOL] [EOL] def test_get_display_name ( ) : [EOL] name = get_display_name ( USER_ISSUE ) [EOL] assert name == USER_ISSUE [ [string] ] [ [string] ] [ [string] ] [EOL] [EOL] name = get_display_name ( { } ) [EOL] assert name == [string] [EOL] [EOL] [EOL] def test_get_user_details ( ) : [EOL] user_details = get_user_details ( USER_ISSUE ) [EOL] assert user_details [ [string] ] == USER_ISSUE [ [string] ] [ [string] ] [ [string] ] [EOL] assert user_details [ [string] ] == USER_ISSUE [ [string] ] [ [string] ] [ [string] ] [EOL] assert user_details [ [string] ] == USER_ISSUE [ [string] ] [ [string] ] [ [string] ] [EOL] [EOL] user_details = get_user_details ( { } ) [EOL] assert user_details [ [string] ] == [string] [EOL] assert user_details [ [string] ] == [string] [EOL] assert user_details [ [string] ] == [string] [EOL] [EOL] [EOL] def test_get_display_name ( ) : [EOL] name = _get_display_name ( [string] ) [EOL] assert name == [string] [EOL] [EOL] name = _get_display_name ( [string] ) [EOL] assert name == [string] [EOL] [EOL] name = _get_display_name ( [string] ) [EOL] assert name == [string] [EOL] [EOL] [EOL] def test_get_component ( ) : [EOL] components = get_component ( STATUS_ISSUE ) [EOL] assert components == [string] [EOL] [EOL] components = get_component ( { } ) [EOL] assert components == [string] [EOL] [EOL] [EOL] def test_get_story_point ( ) : [EOL] workday = [number] * [number] * [number] [EOL] points = get_story_point ( { [string] : { [string] : [number] * workday } } ) [EOL] assert points == [number] [EOL] [EOL] points = get_story_point ( { [string] : { [string] : [number] * workday } } ) [EOL] assert points == [number] [EOL] [EOL] points = get_story_point ( { } ) [EOL] assert points == [number]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]],typing.List[typing.Dict[builtins.str,builtins.str]]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]],typing.List[typing.Dict[builtins.str,builtins.str]]]]]$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]],typing.List[typing.Dict[builtins.str,builtins.str]]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]],typing.List[typing.Dict[builtins.str,builtins.str]]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]],typing.List[typing.Dict[builtins.str,builtins.str]]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]],typing.List[typing.Dict[builtins.str,builtins.str]]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]],typing.List[typing.Dict[builtins.str,builtins.str]]]]]$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]],typing.List[typing.Dict[builtins.str,builtins.str]]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]],typing.List[typing.Dict[builtins.str,builtins.str]]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]]$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]]$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]]$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]],typing.List[typing.Dict[builtins.str,builtins.str]]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import devcenter [EOL] import sys [EOL] [EOL] from devcenter . chat . api import ChatAPI [EOL] chat = ChatAPI ( ) [EOL] [EOL] message = [string] [EOL] meeting_room = [string] [EOL] username = [string] [EOL] [EOL] [comment] [EOL] [comment]	0 0 0 0 0 0 0 0 0 0 0 0 $devcenter.chat.api.ChatAPI$ 0 0 0 0 0 $devcenter.chat.api.ChatAPI$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] import devcenter [EOL] import sys [EOL] import base64 [EOL] import os [EOL] import datetime [EOL] [EOL] from devcenter . jira . jira import Jira [EOL] jira_obj = Jira ( ) [EOL] [EOL] [comment] [EOL] [EOL] username = os . environ . get ( [string] , [string] ) [EOL] password = os . environ . get ( [string] , [string] ) [EOL] [EOL] header_value = f'{ username } [string] { password }' [EOL] encoded_header = base64 . b64encode ( header_value . encode ( ) ) . decode ( [string] ) [EOL] cred_hash = f' [string] { encoded_header }' [EOL] [EOL] [comment] [EOL] jql = [string] [EOL] jira_tickets = jira_obj . get_jira_tickets ( jql = jql , cred_hash = cred_hash ) [EOL] [EOL] [EOL] date_now = datetime . datetime . now ( ) . strftime ( [string] ) [EOL] print ( [string] , date_now , [string] ) [EOL] print ( [string] ) [EOL] [EOL] [comment] [EOL] for jira_ticket in jira_tickets [ [string] ] : [EOL] [EOL] [comment] [EOL] component = jira_ticket [ [string] ] [EOL] status = jira_ticket [ [string] ] [EOL] summary = jira_ticket [ [string] ] [EOL] msrp = jira_ticket [ [string] ] [EOL] [comment] [EOL] if [string] in component : [EOL] print ( [string] . format ( msrp , [string] , summary ) ) [EOL] elif [string] in component : [EOL] print ( [string] . format ( msrp , [string] , summary ) ) [EOL] elif [string] in component : [EOL] print ( [string] . format ( msrp , [string] , summary ) ) [EOL] [EOL] elif status in [ [string] ] : [EOL] print ( [string] . format ( msrp , status , summary ) ) [EOL] elif status in [ [string] ] : [EOL] print ( [string] . format ( msrp , status , summary ) ) [EOL] elif status in [ [string] , [string] ] : [EOL] print ( [string] . format ( msrp , status , summary ) ) [EOL] elif status in [ [string] , [string] , [string] ] : [EOL] print ( [string] . format ( msrp , status , summary ) ) [EOL] elif status in [ [string] ] : [EOL] print ( [string] . format ( msrp , status , summary ) ) [EOL] elif status in [ [string] ] : [EOL] print ( [string] . format ( msrp , status , summary ) ) [EOL] else : [EOL] print ( [string] . format ( msrp , status , summary ) ) [EOL] [EOL] print ( [string] ) [EOL] print ( [string] , len ( jira_tickets [ [string] ] ) ) [EOL] [EOL] [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $devcenter.jira.jira.Jira$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 $devcenter.jira.jira.Jira$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] from . models import Repos [EOL] from devcenter . server_utils import row2dict [EOL] [EOL] [EOL] class Misc ( ) : [EOL] [docstring] [EOL] [EOL] def get_repos ( self ) : [EOL] [docstring] [EOL] session = self . login ( ) [EOL] items = session . query ( Repos ) [EOL] response = [ row2dict ( item ) for item in items ] [EOL] [EOL] self . logout ( session ) [EOL] return response	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] from . models import TicketHistory as TicketHistoryModel [EOL] from devcenter . server_utils import row2dict [EOL] [EOL] [EOL] class TicketHistory ( ) : [EOL] [docstring] [EOL] [EOL] def get_ticket_history ( self ) : [EOL] [docstring] [EOL] session = self . login ( ) [EOL] items = session . query ( TicketHistoryModel ) [EOL] [EOL] tickets = [ row2dict ( item ) for item in items ] [EOL] self . logout ( session ) [EOL] return tickets [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0
[docstring]	0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] from . models import Statuses as StatusModel [EOL] from devcenter . server_utils import row2dict [EOL] [EOL] [EOL] class Statuses ( ) : [EOL] [docstring] [EOL] [EOL] def get_statuses ( self ) : [EOL] [docstring] [EOL] session = self . login ( ) [EOL] items = session . query ( StatusModel ) [EOL] statuses = [ row2dict ( item ) for item in items ] [EOL] self . logout ( session ) [EOL] return statuses [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0
from typing import Dict , List , Any , Union [EOL] import typing [EOL] [docstring] [EOL] from sqlalchemy import or_ , and_ [EOL] [EOL] from . models import Tickets , ErrorLogs [EOL] [EOL] [EOL] class SQLTickets ( ) : [EOL] [docstring] [EOL] [EOL] def update_ping ( self , field , key , value = [number] ) : [EOL] [docstring] [EOL] session = self . login ( ) [EOL] response = [string] [EOL] [EOL] row = session . query ( Tickets ) . filter ( Tickets . key == key ) . first ( ) [EOL] if row : [EOL] setattr ( row , field , value ) [EOL] session . commit ( ) [EOL] response = { [string] : True } [EOL] else : [EOL] response = { [string] : False , [string] : f' [string] { key } [string] { field } [string] { value }' } [EOL] [EOL] self . logout ( session ) [EOL] return response [EOL] [EOL] def reset_pings ( self , ping_type , key ) : [EOL] [docstring] [EOL] if ping_type in [ [string] , [string] , [string] , [string] ] : [EOL] session = self . login ( ) [EOL] row = session . query ( Tickets ) . filter ( Tickets . key == key ) . first ( ) [EOL] [EOL] row . pcr_ping = [number] [EOL] row . merge_ping = [number] [EOL] row . conflict_ping = [number] [EOL] row . qa_ping = [number] [EOL] row . uct_fail_ping = [number] [EOL] row . cr_fail_ping = [number] [EOL] row . uct_ping = [number] [EOL] row . qa_fail_ping = [number] [EOL] [EOL] session . commit ( ) [EOL] self . logout ( session ) [EOL] [EOL] def set_inactive_tickets ( self , jira_tickets ) : [EOL] [docstring] [EOL] session = self . login ( ) [EOL] all_inactive_tickets = session . query ( Tickets ) . filter ( Tickets . is_active == [number] ) . all ( ) [EOL] for jira_ticket in jira_tickets [ [string] ] : [EOL] [comment] [EOL] all_inactive_tickets = [ x for x in all_inactive_tickets if x . key != jira_ticket [ [string] ] ] [EOL] [EOL] for jira_ticket in all_inactive_tickets : [EOL] jira_ticket . is_active = [number] [EOL] [EOL] session . commit ( ) [EOL] self . logout ( session ) [EOL] [EOL] def update_ticket ( self , jira_ticket ) : [EOL] [docstring] [EOL] session = self . login ( ) [EOL] jira_ticket = { [string] : jira_ticket [ [string] ] , [string] : jira_ticket [ [string] ] , [string] : jira_ticket [ [string] ] , [string] : [number] } [EOL] [EOL] row = session . query ( Tickets ) . filter ( Tickets . key == jira_ticket [ [string] ] ) . first ( ) [EOL] if row is None : [EOL] row = Tickets ( ** jira_ticket ) [EOL] session . add ( row ) [EOL] else : [EOL] for key , val in jira_ticket . items ( ) : [EOL] setattr ( row , key , val ) [EOL] [EOL] session . commit ( ) [EOL] self . logout ( session ) [EOL] [EOL] def get_ping ( self , field , key ) : [EOL] [docstring] [EOL] session = self . login ( ) [EOL] response = [number] [EOL] [EOL] row = session . query ( Tickets ) . filter ( Tickets . key == key ) . first ( ) [EOL] if row : [EOL] response = getattr ( row , field ) [EOL] [EOL] self . logout ( session ) [EOL] return response [EOL] [EOL] def get_pings ( self , key ) : [EOL] [docstring] [EOL] session = self . login ( ) [EOL] response = session . query ( Tickets ) . filter ( Tickets . key == key ) . first ( ) [EOL] self . logout ( session ) [EOL] return response	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$
from typing import Union , Dict , Optional , Any , List [EOL] import typing [EOL] [docstring] [EOL] import os [EOL] [EOL] from . models import Users , Tickets [EOL] from devcenter . server_utils import row2dict [EOL] [EOL] [EOL] class SQLUsers ( ) : [EOL] [docstring] [EOL] [EOL] try : [EOL] project_managers = os . environ [ [string] ] . split ( [string] ) [EOL] except KeyError : [EOL] project_managers = [ ] [EOL] [EOL] def get_user_ping_value ( self , username , field ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] if ( username in self . project_managers or not username ) : [EOL] return [number] [EOL] [EOL] else : [EOL] response = [number] [EOL] session = self . login ( ) [EOL] [comment] [EOL] row = session . query ( Users ) . filter ( Users . username == username ) . first ( ) [EOL] if row is not None : [EOL] if ( getattr ( row , field ) or row . all_ping ) : [EOL] response = [number] [EOL] else : [EOL] [comment] [EOL] row = Users ( username = username ) [EOL] session . add ( row ) [EOL] session . commit ( ) [EOL] [EOL] self . logout ( session ) [EOL] return response [EOL] [EOL] def get_user_ping_values ( self ) : [EOL] [docstring] [EOL] session = self . login ( ) [EOL] response = [string] [EOL] row = session . query ( Users ) . filter ( Users . username == username ) . first ( ) [EOL] [EOL] if row is not None : [EOL] response = { [string] : True , [string] : row2dict ( row ) } [EOL] else : [EOL] response = { [string] : False , [string] : row } [EOL] [EOL] self . logout ( session ) [EOL] return response [EOL] [EOL] def set_user_ping_value ( self , username , field , value ) : [EOL] [docstring] [EOL] session = self . login ( ) [EOL] fields = [ { [string] : field , [string] : value } ] [EOL] response = self . set_user_pings ( username , fields , session ) [EOL] self . logout ( session ) [EOL] return response [EOL] [EOL] def set_user_pings ( self , username , fields ) : [EOL] [docstring] [EOL] session = self . login ( ) [EOL] response = [string] [EOL] [EOL] row = session . query ( Users ) . filter ( Users . username == username ) . first ( ) [EOL] if row is not None : [EOL] try : [EOL] [comment] [EOL] for field in fields : [EOL] setattr ( row , field [ [string] ] , field [ [string] ] ) [EOL] [comment] [EOL] session . commit ( ) [EOL] response = { [string] : True } [EOL] except Exception as err : [EOL] response = { [string] : False , [string] : f' [string] { err }' } [EOL] else : [EOL] response = { [string] : False , [string] : f' [string] { username } [string] ' } [EOL] [EOL] self . logout ( session ) [EOL] return response	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Optional[builtins.bool]]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Optional[builtins.bool]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Optional[builtins.bool]]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,typing.Optional[builtins.bool]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$
from typing import Dict , Any [EOL] import typing [EOL] [docstring] [EOL] from . models import EpicLinks as EpicLinksModel [EOL] from devcenter . server_utils import row2dict [EOL] [EOL] [EOL] class EpicLinks ( ) : [EOL] [docstring] [EOL] [EOL] def get_epic_links ( self ) : [EOL] [docstring] [EOL] session = self . login ( ) [EOL] items = session . query ( EpicLinksModel ) [EOL] [EOL] epic_links = { } [EOL] for item in items : [EOL] row = row2dict ( item ) [EOL] epic_links [ row [ [string] ] ] = row [ [string] ] [EOL] [EOL] self . logout ( session ) [EOL] return epic_links	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$
from typing import Dict , List , Any , Union [EOL] import typing [EOL] [docstring] [EOL] from . models import NavbarItems , JqlLinks [EOL] from devcenter . server_utils import row2dict [EOL] [EOL] class SQLNavBar ( ) : [EOL] [docstring] [EOL] [EOL] def get_navbar_items ( self ) : [EOL] [docstring] [EOL] session = self . login ( ) [EOL] items = session . query ( NavbarItems ) [EOL] response = [ row2dict ( item ) for item in items ] [EOL] self . logout ( session ) [EOL] return response [EOL] [EOL] def get_jql_links ( self ) : [EOL] [docstring] [EOL] session = self . login ( ) [EOL] items = session . query ( JqlLinks ) [EOL] response = [ row2dict ( item ) for item in items ] [EOL] self . logout ( session ) [EOL] return response [EOL] [EOL] def set_navbar_item ( self , item ) : [EOL] [docstring] [EOL] session = self . login ( ) [EOL] response = { [string] : False , [string] : [string] } [EOL] row = session . query ( NavbarItems ) . filter ( NavbarItems . id == item [ [string] ] ) . first ( ) [EOL] [EOL] if row is None : [EOL] row = NavbarItems ( ** item ) [EOL] session . add ( row ) [EOL] response = { [string] : True , [string] : [string] } [EOL] else : [EOL] [comment] [EOL] for key , val in item . items ( ) : [EOL] setattr ( row , key , val ) [EOL] response = { [string] : True , [string] : [string] } [EOL] [EOL] session . commit ( ) [EOL] self . logout ( session ) [EOL] [EOL] return response	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$
from typing import Literal , Any , Union [EOL] import typing [EOL] import typing_extensions [EOL] [docstring] [EOL] import os [EOL] import datetime [EOL] [EOL] from sqlalchemy . orm import sessionmaker [EOL] from sqlalchemy . exc import SQLAlchemyError [EOL] from sqlalchemy import inspect , create_engine [EOL] [EOL] from . tickets import SQLTickets [EOL] from . users import SQLUsers [EOL] from . navbar import SQLNavBar [EOL] from . statuses import Statuses [EOL] from . history import TicketHistory [EOL] from . models import ErrorLogs [EOL] from . misc import Misc [EOL] from . epic_links import EpicLinks [EOL] [EOL] class DevCenterSQL ( SQLTickets , SQLUsers , SQLNavBar , Misc , Statuses , TicketHistory , EpicLinks ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , ) : [EOL] [docstring] [EOL] SQL_USER = os . environ . get ( [string] , [string] ) [EOL] SQL_PASSWORD = os . environ . get ( [string] , [string] ) [EOL] SQL_HOST = os . environ . get ( [string] , [string] ) [EOL] DB_TABLE = os . environ . get ( [string] , [string] ) [EOL] SQL_ECHO = int ( os . environ . get ( [string] , [number] ) ) [EOL] [EOL] SQL_ECHO = True if SQL_ECHO else False [EOL] [EOL] url = f' [string] { SQL_USER } [string] { SQL_PASSWORD } [string] { SQL_HOST } [string] { DB_TABLE } [string] ' [EOL] self . engine = create_engine ( url , echo = SQL_ECHO , pool_size = [number] ) [EOL] [EOL] def login ( self ) : [EOL] [docstring] [EOL] Session = sessionmaker ( bind = self . engine , autoflush = False ) [EOL] return Session ( ) [EOL] [EOL] def logout ( self , session ) : [EOL] [docstring] [EOL] session . close ( ) [EOL] [EOL] def log_error ( self , message ) : [EOL] [docstring] [EOL] try : [EOL] session = self . login ( ) [EOL] row = session . query ( ErrorLogs ) . filter ( ErrorLogs . message == message ) . first ( ) [EOL] [comment] [EOL] if row is None : [EOL] row = ErrorLogs ( message = message ) [EOL] session . add ( row ) [EOL] else : [EOL] row . timestamp = datetime . datetime . now ( ) [EOL] session . commit ( ) [EOL] [EOL] except SQLAlchemyError as e : [EOL] print ( [string] , message ) [EOL] exit ( [number] ) [EOL] [EOL] self . logout ( session = session )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing_extensions.Literal[False],typing_extensions.Literal[True]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing_extensions.Literal[False],typing_extensions.Literal[True]]$ 0 0 0 $typing.Union[typing_extensions.Literal[False],typing_extensions.Literal[True]]$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Union[typing_extensions.Literal[False],typing_extensions.Literal[True]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0
from typing import Dict , Any , Union [EOL] import typing [EOL] import devcenter [EOL] [docstring] [EOL] from devcenter . codecloud . codecloud import CodeCloud [EOL] from devcenter . jira . jira import Jira [EOL] from devcenter . requests . jira import set_status [EOL] from devcenter . server_utils import missing_parameters , verify_parameters [EOL] [EOL] [EOL] @ verify_parameters ( [string] ) def transition_to_pcr ( data ) : [EOL] [docstring] [EOL] jira = Jira ( ) [EOL] response = { [string] : True , [string] : { } } [EOL] [EOL] [comment] [EOL] if len ( data [ [string] ] ) and not data [ [string] ] : [EOL] response [ [string] ] [ [string] ] = create_pull_requests ( data ) [EOL] missing_params = missing_parameters ( params = data , required = [ [string] ] ) [EOL] if missing_params : [EOL] response [ [string] ] [ [string] ] = { [string] : f" [string] { missing_params }" , [string] : False } [EOL] else : [EOL] response [ [string] ] [ [string] ] = jira . add_pr_to_dev_changes ( pull_response = response [ [string] ] [ [string] ] , data = data ) [EOL] [EOL] if data [ [string] ] : [EOL] data [ [string] ] = response [ [string] ] . get ( [string] ) [EOL] response [ [string] ] [ [string] ] = add_qa_comment ( data = data ) [EOL] response [ [string] ] [ [string] ] = jira . set_additional_qa ( comment = data [ [string] ] , key = data [ [string] ] , cred_hash = data [ [string] ] ) [EOL] [EOL] if data [ [string] ] : [EOL] response [ [string] ] [ [string] ] = jira . add_work_log ( time = data [ [string] ] , key = data [ [string] ] , cred_hash = data [ [string] ] ) [EOL] [EOL] data [ [string] ] = { [string] : [string] , [string] : [number] } [EOL] status_response = set_status ( data = data ) [EOL] response [ [string] ] = { ** response [ [string] ] , ** status_response [ [string] ] } [EOL] [EOL] return response [EOL] [EOL] [EOL] def get_repos ( data ) : [EOL] [docstring] [EOL] return CodeCloud ( ) . get_repos ( ) [EOL] [EOL] [EOL] @ verify_parameters ( [string] ) def create_pull_requests ( data ) : [EOL] [docstring] [EOL] qa_title = Jira ( ) . build_qa_title ( key = data [ [string] ] , msrp = data [ [string] ] , summary = data [ [string] ] ) [EOL] return CodeCloud ( ) . create_pull_requests ( repos = data [ [string] ] , key = data [ [string] ] , qa_title = qa_title , msrp = data [ [string] ] , cred_hash = data [ [string] ] , summary = data [ [string] ] ) [EOL] [EOL] [EOL] @ verify_parameters ( [string] ) def get_branches ( data ) : [EOL] [docstring] [EOL] return CodeCloud ( ) . get_branches ( cred_hash = data [ [string] ] , repo_name = data [ [string] ] ) [EOL] [EOL] [EOL] @ verify_parameters ( [string] ) def ticket_branches ( data ) : [EOL] [docstring] [EOL] return CodeCloud ( ) . ticket_branches ( cred_hash = data [ [string] ] , msrp = data [ [string] ] ) [EOL] [EOL] [EOL] @ verify_parameters ( [string] ) def add_qa_comment ( data ) : [EOL] [docstring] [EOL] qa_step_comment = CodeCloud ( ) . generate_qa_template ( qa_steps = data [ [string] ] , repos = data [ [string] ] , pull_response = data [ [string] ] , ) [EOL] [EOL] return Jira ( ) . add_comment ( key = data [ [string] ] , cred_hash = data [ [string] ] , comment = qa_step_comment , private_comment = True ) [EOL] [EOL] [EOL] @ verify_parameters ( [string] ) def add_reviewer_to_pull_request ( data ) : [EOL] [docstring] [EOL] return CodeCloud ( ) . add_reviewer_to_pull_request ( username = data [ [string] ] , repo_name = data [ [string] ] , pull_request_id = data [ [string] ] , cred_hash = data [ [string] ] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any , Union [EOL] import typing [EOL] import devcenter [EOL] [docstring] [EOL] import os [EOL] [EOL] from devcenter . server_utils import build_commit_message , get_branch_name , missing_parameters [EOL] from devcenter . jira . jira import Jira [EOL] from devcenter . codecloud . codecloud import CodeCloud [EOL] from . jira_status import ( pass_pull_requests , add_reviewer_all_pull_requests , add_cr_pass_comment , add_qa_pass_comment , add_commits_table_comment ) [EOL] [EOL] USER = os . environ . get ( [string] , [string] ) [EOL] [EOL] [EOL] def set_status ( data ) : [EOL] [docstring] [EOL] missing_params = missing_parameters ( params = data , required = [ [string] , [string] , [string] ] ) [EOL] if missing_params : [EOL] return { [string] : f" [string] { missing_params }" , [string] : False } [EOL] [EOL] jira = Jira ( ) [EOL] response = { [string] : True , [string] : { } } [EOL] [EOL] status_name = data . get ( [string] , { } ) . get ( [string] , [string] ) [EOL] status_id = data . get ( [string] , { } ) . get ( [string] , [string] ) [EOL] [EOL] if data . get ( [string] , False ) : [EOL] response [ [string] ] [ [string] ] = jira . remove_component ( name = data . get ( [string] ) , key = data [ [string] ] , cred_hash = data [ [string] ] ) [EOL] [EOL] if data . get ( [string] , False ) : [EOL] response [ [string] ] [ [string] ] = jira . set_component ( name = status_name , key = data [ [string] ] , cred_hash = data [ [string] ] ) [EOL] [EOL] if status_id : [EOL] response [ [string] ] [ [string] ] = jira . set_status ( key = data [ [string] ] , transition_id = status_id , cred_hash = data [ [string] ] ) [EOL] [EOL] [comment] [EOL] if status_name in [ [string] , [string] ] : [EOL] response [ [string] ] [ [string] ] = add_reviewer_all_pull_requests ( data = data ) [EOL] elif status_name in [ [string] , [string] ] : [EOL] response [ [string] ] [ [string] ] = pass_pull_requests ( data = data ) [EOL] elif status_name == [string] : [EOL] response [ [string] ] [ [string] ] = add_cr_pass_comment ( data ) [EOL] elif status_name == [string] : [EOL] response [ [string] ] [ [string] ] = add_qa_pass_comment ( data ) [EOL] jira . set_component ( name = [string] , key = data [ [string] ] , cred_hash = data [ [string] ] ) [EOL] [EOL] [comment] [EOL] if data . get ( [string] , False ) : [EOL] commit_response = add_commits_table_comment ( data ) [EOL] response [ [string] ] = { ** response [ [string] ] , ** commit_response [ [string] ] } [EOL] [EOL] [comment] [EOL] response [ [string] ] [ [string] ] = get_new_component ( key = data [ [string] ] , cred_hash = data [ [string] ] ) [EOL] return response [EOL] [EOL] [EOL] def get_new_component ( key , cred_hash ) : [EOL] [docstring] [EOL] fields = [string] [EOL] new_ticket = Jira ( ) . get_ticket_field_values ( key = key , cred_hash = cred_hash , fields = fields , get_expanded = True ) [EOL] if ( not new_ticket [ [string] ] ) : [EOL] return response [EOL] [EOL] return { [string] : True , [string] : { [string] : new_ticket [ [string] ] . get ( [string] , [string] ) , [string] : new_ticket [ [string] ] . get ( [string] , [ ] ) , [string] : new_ticket [ [string] ] . get ( [string] , { } ) , [string] : new_ticket [ [string] ] . get ( [string] , [string] ) , [string] : key } } [EOL] [EOL] [EOL] def add_comment ( data ) : [EOL] [docstring] [EOL] missing_params = missing_parameters ( params = data , required = [ [string] , [string] , [string] ] ) [EOL] if missing_params : [EOL] return { [string] : missing_params , [string] : False } [EOL] [EOL] response = Jira ( ) . add_comment ( key = data [ [string] ] , comment = data [ [string] ] , cred_hash = data [ [string] ] , private_comment = data . get ( [string] , True ) ) [EOL] return response [EOL] [EOL] [EOL] def edit_comment ( data ) : [EOL] [docstring] [EOL] missing_params = missing_parameters ( params = data , required = [ [string] , [string] , [string] , [string] ] ) [EOL] if missing_params : [EOL] return { [string] : f" [string] { missing_params }" , [string] : False } [EOL] [EOL] return Jira ( ) . edit_comment ( key = data [ [string] ] , comment = data [ [string] ] , cred_hash = data [ [string] ] , comment_id = data [ [string] ] , private_comment = data [ [string] ] ) [EOL] [EOL] [EOL] def delete_comment ( data ) : [EOL] [docstring] [EOL] missing_params = missing_parameters ( params = data , required = [ [string] , [string] , [string] ] ) [EOL] if missing_params : [EOL] return { [string] : f" [string] { missing_params }" , [string] : False } [EOL] [EOL] return Jira ( ) . delete_comment ( key = data [ [string] ] , cred_hash = data [ [string] ] , comment_id = data [ [string] ] ) [EOL] [EOL] [EOL] def add_work_log ( data ) : [EOL] [docstring] [EOL] missing_params = missing_parameters ( params = data , required = [ [string] , [string] , [string] ] ) [EOL] if missing_params : [EOL] return { [string] : f" [string] { missing_params }" , [string] : False } [EOL] [EOL] return Jira ( ) . add_work_log ( key = data [ [string] ] , time = data [ [string] ] , cred_hash = data [ [string] ] ) [EOL] [EOL] [EOL] def get_jira_tickets ( data ) : [EOL] [docstring] [EOL] missing_params = missing_parameters ( params = data , required = [ [string] ] ) [EOL] if missing_params : [EOL] return { [string] : f" [string] { missing_params }" , [string] : False } [EOL] [EOL] filter_number = data . get ( [string] , False ) [EOL] jql = data . get ( [string] , False ) [EOL] if not filter_number and not jql : [EOL] return { [string] : [string] , [string] : False } [EOL] [EOL] jira_data = Jira ( ) . get_jira_tickets ( filter_number = filter_number , cred_hash = data [ [string] ] , fields = data [ [string] ] , jql = data [ [string] ] ) [EOL] [EOL] if not jira_data [ [string] ] : [EOL] return { [string] : False , [string] : f' [string] { filter_number } [string] ' + jira_data [ [string] ] } [EOL] [EOL] for ticket in jira_data [ [string] ] : [EOL] ticket [ [string] ] = build_commit_message ( key = ticket [ [string] ] , msrp = ticket [ [string] ] , summary = ticket [ [string] ] , epic_link = ticket [ [string] ] ) [EOL] ticket [ [string] ] = get_branch_name ( username = ticket [ [string] ] , msrp = ticket [ [string] ] , summary = ticket [ [string] ] ) [EOL] [EOL] return jira_data [EOL] [EOL] [EOL] def find_key_by_msrp ( data ) : [EOL] [docstring] [EOL] missing_params = missing_parameters ( params = data , required = [ [string] , [string] ] ) [EOL] if missing_params : [EOL] return { [string] : f" [string] { missing_params }" , [string] : False } [EOL] [EOL] return Jira ( ) . find_key_by_msrp ( msrp = data [ [string] ] , cred_hash = data [ [string] ] ) [EOL] [EOL] [EOL] def get_profile ( data ) : [EOL] [docstring] [EOL] missing_params = missing_parameters ( params = data , required = [ [string] , [string] ] ) [EOL] if missing_params : [EOL] return { [string] : f" [string] { missing_params }" , [string] : False } [EOL] [EOL] jira_response = Jira ( ) . get_profile ( cred_hash = data [ [string] ] ) [EOL] if not jira_response [ [string] ] : [EOL] return { [string] : False , [string] : f' [string] ' + jira_response . get ( [string] , [string] ) } [EOL] [EOL] jira_response [ [string] ] [ [string] ] = USER == data [ [string] ] [EOL] return jira_response [EOL] [EOL] [EOL] def parse_comment ( data ) : [EOL] [docstring] [EOL] missing_params = missing_parameters ( params = data , required = [ [string] , [string] , [string] ] ) [EOL] if missing_params : [EOL] return { [string] : f" [string] { missing_params }" , [string] : False } [EOL] [EOL] return Jira ( ) . parse_comment ( cred_hash = data [ [string] ] , comment = data [ [string] ] , key = data [ [string] ] ) [EOL] [EOL] [EOL] def modify_watchers ( data ) : [EOL] [docstring] [EOL] missing_params = missing_parameters ( params = data , required = [ [string] , [string] , [string] ] ) [EOL] if missing_params : [EOL] return { [string] : f" [string] { missing_params }" , [string] : False } [EOL] [EOL] type_of_modify = data . get ( [string] , [string] ) [EOL] [EOL] if type_of_modify in [ [string] , [string] ] : [EOL] missing_params = missing_parameters ( params = data , required = [ [string] ] ) [EOL] if missing_params : [EOL] return { [string] : f" [string] { missing_params }" , [string] : False } [EOL] [EOL] jira = Jira ( ) [EOL] if type_of_modify == [string] : [EOL] return jira . add_watcher ( username = data [ [string] ] , cred_hash = data [ [string] ] , key = data [ [string] ] ) [EOL] [EOL] elif type_of_modify == [string] : [EOL] return jira . remove_watcher ( username = data [ [string] ] , cred_hash = data [ [string] ] , key = data [ [string] ] ) [EOL] [EOL] elif type_of_modify == [string] : [EOL] return jira . get_watchers ( cred_hash = data [ [string] ] , key = data [ [string] ] ) [EOL] [EOL] return { [string] : False , [string] : f' [string] { type_of_modify }' } [EOL] [EOL] [EOL] def get_active_sprints ( data ) : [EOL] [docstring] [EOL] missing_params = missing_parameters ( params = data , required = [ [string] ] ) [EOL] if missing_params : [EOL] return { [string] : f" [string] { missing_params }" , [string] : False } [EOL] [EOL] return Jira ( ) . get_active_sprints ( cred_hash = data [ [string] ] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.strbuiltins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring]	0
from typing import Any [EOL] import typing [EOL] import devcenter [EOL] [docstring] [EOL] from devcenter . server_utils import missing_parameters [EOL] from devcenter . jira . jira import Jira [EOL] from devcenter . chat . chat import Chat [EOL] from devcenter . sql . sql import DevCenterSQL [EOL] [EOL] [EOL] def send_ping ( data ) : [EOL] [docstring] [EOL] missing_params = missing_parameters ( params = data , required = [ [string] , [string] , [string] ] ) [EOL] if missing_params : [EOL] return { [string] : f" [string] { missing_params }" , [string] : False } [EOL] [EOL] chat_obj = Chat ( ) [EOL] jira_obj = Jira ( ) [EOL] [EOL] [comment] [EOL] jira_response = jira_obj . get_full_ticket ( cred_hash = data [ [string] ] , key = data [ [string] ] ) [EOL] if not jira_response [ [string] ] or len ( jira_response [ [string] ] ) == [number] : [EOL] return { [string] : f" [string] " + { jira_response [ [string] ] } , [string] : False } [EOL] [EOL] [comment] [EOL] username = data [ [string] ] [comment] [EOL] data = { ** data , ** jira_response [ [string] ] [ [number] ] } [EOL] [EOL] if data [ [string] ] == [string] : [EOL] pcr_estimate = jira_obj . get_pcr_estimate ( story_point = data [ [string] ] ) [EOL] [EOL] return chat_obj . send_new_ticket ( key = data [ [string] ] , msrp = data [ [string] ] , summary = data [ [string] ] , username = username , story_point = data [ [string] ] , pcr_estimate = pcr_estimate , epic_link = data [ [string] ] ) [EOL] [EOL] elif data [ [string] ] == [string] : [EOL] return chat_obj . send_merge_needed ( key = data [ [string] ] , msrp = data [ [string] ] , summary = data [ [string] ] , username = username , sprint = data [ [string] ] , epic_link = data [ [string] ] ) [EOL] [EOL] else : [EOL] return { [string] : [string] , [string] : False } [EOL] [EOL] [EOL] def set_user_pings ( data ) : [EOL] [docstring] [EOL] missing_params = missing_parameters ( params = data , required = [ [string] , [string] ] ) [EOL] if missing_params : [EOL] return { [string] : f" [string] { missing_params }" , [string] : False } [EOL] [EOL] sql_obj = DevCenterSQL ( ) [EOL] response = sql_obj . set_user_pings ( username = data [ [string] ] , fields = data [ [string] ] ) [EOL] [EOL] return response [EOL] [EOL] [EOL] def send_custom_ping ( data ) : [EOL] [docstring] [EOL] missing_params = missing_parameters ( params = data , required = [ [string] , [string] ] ) [EOL] if missing_params : [EOL] return { [string] : f" [string] { missing_params }" , [string] : False } [EOL] [EOL] chat_obj = Chat ( ) [EOL] [EOL] if ( data [ [string] ] == [string] ) : [EOL] missing_params = missing_parameters ( params = data , required = [ [string] , [string] ] ) [EOL] if missing_params : [EOL] return { [string] : f" [string] { missing_params }" , [string] : False } [EOL] chat_obj . send_message ( message = data . get ( [string] ) , username = data ( [string] ) ) [EOL] [EOL] elif ( data [ [string] ] == [string] ) : [EOL] missing_params = missing_parameters ( params = data , required = [ [string] ] ) [EOL] if missing_params : [EOL] return { [string] : f" [string] { missing_params }" , [string] : False } [EOL] [EOL] response = _get_jira_ticket_for_ping ( data = data ) [EOL] if not response [ [string] ] : [EOL] return response [EOL] [EOL] chat_obj . send_pcr_needed ( key = response . get ( [string] ) . get ( [string] ) , msrp = response . get ( [string] ) . get ( [string] ) , sprint = response . get ( [string] ) . get ( [string] , [string] ) , label = response . get ( [string] ) . get ( [string] , [string] ) , pcr_estimate = response . get ( [string] ) . get ( [string] , [string] ) , epic_link = response . get ( [string] ) . get ( [string] , [string] ) , override = True ) [EOL] else : [EOL] chat_obj . send_meeting_message ( message = data [ [string] ] , chatroom = data [ [string] ] ) [EOL] [EOL] return { [string] : True } [EOL] [EOL] [EOL] def _get_jira_ticket_for_ping ( data ) : [EOL] [docstring] [EOL] missing_params = missing_parameters ( params = data , required = [ [string] , [string] ] ) [EOL] if missing_params : [EOL] return { [string] : f" [string] { missing_params }" , [string] : False } [EOL] [EOL] jira_obj = Jira ( ) [EOL] [EOL] jira_response = jira_obj . get_full_ticket ( cred_hash = data [ [string] ] , key = data [ [string] ] ) [EOL] if not jira_response [ [string] ] or len ( jira_response [ [string] ] ) == [number] : [EOL] return { [string] : f" [string] " + { jira_response [ [string] ] } , [string] : False } [EOL] [EOL] data = jira_response [ [string] ] [ [number] ] [EOL] data [ [string] ] = jira_obj . get_pcr_estimate ( story_point = data [ [string] ] ) [EOL] [EOL] return { [string] : data , [string] : True } [EOL] [EOL] [EOL] def send_pcr_comments ( data ) : [EOL] [docstring] [EOL] missing_params = missing_parameters ( params = data , required = [ [string] , [string] , [string] , [string] ] ) [EOL] if missing_params : [EOL] return { [string] : f" [string] { missing_params }" , [string] : False } [EOL] [EOL] chat_obj = Chat ( ) [EOL] [EOL] return chat_obj . send_pcr_comments ( fromName = data [ [string] ] , toUsername = data [ [string] ] , pullLinks = data [ [string] ] , key = data [ [string] ] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] import devcenter [EOL] [docstring] [EOL] from devcenter . sql . sql import DevCenterSQL [EOL] [EOL] [EOL] def get_navbar_items ( ) : [EOL] [docstring] [EOL] sql_obj = DevCenterSQL ( ) [EOL] return { [string] : True , [string] : sql_obj . get_navbar_items ( ) } [EOL] [EOL] [EOL] def get_statuses ( ) : [EOL] [docstring] [EOL] sql_obj = DevCenterSQL ( ) [EOL] return { [string] : True , [string] : sql_obj . get_statuses ( ) } [EOL] [EOL] [EOL] def get_ticket_history ( ) : [EOL] [docstring] [EOL] sql_obj = DevCenterSQL ( ) [EOL] return { [string] : True , [string] : sql_obj . get_ticket_history ( ) } [EOL] [EOL] [EOL] def get_jql_links ( ) : [EOL] [docstring] [EOL] sql_obj = DevCenterSQL ( ) [EOL] return { [string] : True , [string] : sql_obj . get_jql_links ( ) } [EOL] [EOL] [EOL] def set_navbar_item ( data ) : [EOL] [docstring] [EOL] item = { [string] : data . get ( [string] , [string] ) , [string] : data . get ( [string] , [string] ) , [string] : data . get ( [string] , [string] ) , [string] : data . get ( [string] , [string] ) } [EOL] [EOL] missing_params = missing_parameters ( params = item , required = [ [string] , [string] , [string] , [string] ] ) [EOL] if missing_params : [EOL] return { [string] : f" [string] { missing_params }" , [string] : False } [EOL] [EOL] return sql_obj . set_navbar_item ( item = item )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , List , Any , Union [EOL] import typing [EOL] import devcenter [EOL] [docstring] [EOL] from devcenter . server_utils import missing_parameters [EOL] from devcenter . jira . jira import Jira [EOL] from devcenter . codecloud . codecloud import CodeCloud [EOL] [EOL] [EOL] def pass_pull_requests ( data ) : [EOL] [docstring] [EOL] missing_params = missing_parameters ( params = data , required = [ [string] ] ) [EOL] if missing_params : [EOL] return { [string] : f" [string] { missing_params }" , [string] : False } [EOL] [EOL] code_cloud = CodeCloud ( ) [EOL] response = { [string] : True , [string] : [ ] } [EOL] [EOL] for pull_request in data [ [string] ] : [EOL] pass_response = code_cloud . pass_pull_request_review ( username = data [ [string] ] , repo_name = pull_request [ [string] ] , pull_request_id = pull_request [ [string] ] , cred_hash = data [ [string] ] ) [EOL] [EOL] if not pass_response [ [string] ] : response [ [string] ] = False [EOL] response [ [string] ] . append ( pass_response ) [EOL] [EOL] return response [EOL] [EOL] [EOL] def add_reviewer_all_pull_requests ( data ) : [EOL] [docstring] [EOL] missing_params = missing_parameters ( params = data , required = [ [string] ] ) [EOL] if missing_params : [EOL] return { [string] : f" [string] { missing_params }" , [string] : False } [EOL] [EOL] code_cloud = CodeCloud ( ) [EOL] responses = { [string] : True , [string] : [ ] } [EOL] [EOL] for request in data . get ( [string] , [ ] ) : [EOL] pull_response = code_cloud . add_reviewer_to_pull_request ( username = data [ [string] ] , repo_name = request [ [string] ] , pull_request_id = request [ [string] ] , cred_hash = data [ [string] ] ) [EOL] [EOL] if not pull_response [ [string] ] : responses [ [string] ] = False [EOL] responses [ [string] ] . append ( pull_response ) [EOL] [EOL] return responses [EOL] [EOL] [EOL] def add_cr_pass_comment ( data ) : [EOL] [docstring] [EOL] return Jira ( ) . add_comment ( key = data [ [string] ] , cred_hash = data [ [string] ] , comment = [string] , private_comment = True ) [EOL] [EOL] [EOL] def add_qa_pass_comment ( data ) : [EOL] [docstring] [EOL] return Jira ( ) . add_comment ( key = data [ [string] ] , cred_hash = data [ [string] ] , comment = [string] , private_comment = True ) [EOL] [EOL] [EOL] def add_commits_table_comment ( data ) : [EOL] [docstring] [EOL] response = { [string] : True , [string] : { } } [EOL] [EOL] missing_params = missing_parameters ( params = data , required = [ [string] , [string] , [string] , [string] ] ) [EOL] if missing_params : [EOL] return { [string] : missing_params , [string] : False } [EOL] [EOL] commit_ids = CodeCloud ( ) . get_commit_ids ( key = data [ [string] ] , pull_requests = data [ [string] ] , cred_hash = data [ [string] ] , master_branch = data [ [string] ] ) [EOL] response [ [string] ] [ [string] ] = commit_ids [EOL] [EOL] if commit_ids [ [string] ] : [EOL] response [ [string] ] [ [string] ] = _add_commit_comment ( commit_ids = commit_ids , key = data [ [string] ] , cred_hash = data [ [string] ] ) [EOL] [EOL] return response [EOL] [EOL] [EOL] def _add_commit_comment ( commit_ids , key , cred_hash ) : [EOL] [docstring] [EOL] comment = [string] [EOL] for commit in commit_ids . get ( [string] , [ ] ) : [EOL] repo_name = commit . get ( [string] ) [EOL] master_branch = commit . get ( [string] ) [EOL] commit_id = commit . get ( [string] ) [EOL] comment += f" [string] { repo_name } [string] { master_branch } [string] { commit_id } [string] " [EOL] [EOL] return Jira ( ) . add_comment ( key = key , comment = comment , cred_hash = cred_hash , private_comment = True )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] from devcenter . apis . order import Order [EOL] [EOL] [EOL] def get_orders ( ) : [EOL] [docstring] [EOL] return Order ( ) . get_orders ( ) [EOL] [EOL] [EOL] def get_atx ( ) : [EOL] [docstring] [EOL] return Order ( ) . get_atx ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] [EOL] class PullRequests ( ) : [EOL] [docstring] [EOL] [EOL] @ classmethod def _create_qa_td ( cls , repository_name , links ) : [EOL] [docstring] [EOL] matching_link = [ x for x in links [ [string] ] if repository_name in x [ [string] ] ] [EOL] [EOL] if len ( matching_link ) and matching_link [ [number] ] . get ( [string] , False ) : [EOL] link = matching_link [ [number] ] [ [string] ] [EOL] repo = matching_link [ [number] ] [ [string] ] [EOL] return f' [string] { repo } [string] { link } [string] ' [EOL] else : [EOL] return [string] [EOL] [EOL] @ classmethod def get_pull_request_link ( cls , pull_response , repository_name ) : [EOL] [docstring] [EOL] pull_request_link = [string] [EOL] [EOL] if pull_response . get ( [string] , False ) : [EOL] for request in pull_response . get ( [string] ) : [EOL] [EOL] if request . get ( [string] , False ) : [EOL] repo_name = request . get ( [string] , { } ) . get ( [string] , { } ) . get ( [string] , { } ) . get ( [string] , [string] ) [EOL] [EOL] if repo_name . lower ( ) == repository_name . lower ( ) : [EOL] pull_request_link = request . get ( [string] , { } ) . get ( [string] , { } ) . get ( [string] , [ ] ) [ [number] ] . get ( [string] , [string] ) [EOL] [EOL] return pull_request_link [EOL] [EOL] def generate_qa_template ( self , qa_steps , repos , pull_response ) : [EOL] [docstring] [EOL] repo_table = self . generate_repo_table ( repos , pull_response ) [EOL] [EOL] return [string] + repo_table + [string] + qa_steps + [string] [EOL] [EOL] def generate_repo_table ( self , repos , pull_response ) : [EOL] [docstring] [EOL] table_data = [string] [EOL] [EOL] for repo in repos : [EOL] table_data += self . create_qa_table_row ( repo , pull_response ) [EOL] [EOL] return table_data [EOL] [EOL] def create_qa_table_row ( self , repo , pull_response ) : [EOL] base_branch = repo . get ( [string] , [string] ) [EOL] repository_name = repo . get ( [string] , [string] ) [EOL] reviewed_branch = repo . get ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] table_data = [string] + repository_name + [string] + reviewed_branch + [string] + base_branch + [string] [EOL] [EOL] [comment] [EOL] if pull_response : [EOL] table_data += self . _create_qa_td ( repository_name = repository_name , links = pull_response ) [EOL] else : [EOL] table_data += [string] [EOL] [EOL] return table_data	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$
from typing import Union [EOL] import typing [EOL] import requests [EOL] [docstring] [EOL] import os [EOL] [EOL] import requests [EOL] from requests . exceptions import ProxyError [EOL] from requests . packages . urllib3 . exceptions import InsecureRequestWarning [EOL] [EOL] from devcenter . atlassian . api import AtlassianApi [EOL] [EOL] [EOL] requests . packages . urllib3 . disable_warnings ( InsecureRequestWarning ) [EOL] [EOL] [EOL] class CodeCloudApi ( AtlassianApi ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] [docstring] [EOL] self . project_name = [string] [EOL] self . code_cloud_api = os . environ . get ( [string] , [string] ) [EOL] self . branch_api = f'{ self . code_cloud_api } [string] { self . project_name } [string] ' [EOL] self . code_cloud_path = f'{ self . code_cloud_api } [string] { self . project_name } [string] ' [EOL] self . code_cloud_path2 = [string] [EOL] [EOL] @ classmethod def get_session ( cls , cred_hash = [string] ) : [EOL] [docstring] [EOL] session = requests . session ( ) [EOL] session . verify = False [EOL] session . headers . update ( { [string] : cred_hash } ) [EOL] return { [string] : True , [string] : session }	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.sessions.Session$ 0 0 0 $requests.sessions.Session$ 0 0 0 $requests.sessions.Session$ 0 $typing.Union[None,builtins.bool,builtins.str]$ 0 0 0 $requests.sessions.Session$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.sessions.Session$ 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] [EOL] class Comments ( ) : [EOL] [docstring] [EOL] [EOL] def add_comment_to_pull_request ( self , repo_name , pull_request_id , comment , cred_hash ) : [EOL] [docstring] [EOL] url = f'{ self . code_cloud_api . branch_api } [string] { repo_name } [string] { pull_request_id } [string] ' [EOL] response = self . code_cloud_api . post ( url = url , json_data = { [string] : comment } , cred_hash = cred_hash ) [EOL] response [ [string] ] [ [string] ] = repo_name [EOL] return response [EOL] [EOL] def get_activities ( self , repo_name , pull_request_id , cred_hash ) : [EOL] [docstring] [EOL] url = f'{ self . code_cloud_api . branch_api } [string] { repo_name } [string] { pull_request_id } [string] ' [EOL] response = self . code_cloud_api . get ( url = url , cred_hash = cred_hash ) [EOL] response [ [string] ] [ [string] ] = repo_name [EOL] return response	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$
from typing import Dict , Any , Union [EOL] import typing [EOL] [docstring] [EOL] [EOL] [EOL] class Reviewers ( ) : [EOL] [docstring] [EOL] [EOL] def add_reviewer_to_pull_request ( self , username , repo_name , pull_request_id , cred_hash ) : [EOL] [docstring] [EOL] url = f'{ self . code_cloud_api . branch_api } [string] { repo_name } [string] { pull_request_id } [string] ' [EOL] post_data = { [string] : { [string] : username , [string] : username } , [string] : [string] } [EOL] response = self . code_cloud_api . post_json ( url = url , json_data = post_data , cred_hash = cred_hash ) [EOL] if not response [ [string] ] : return response [EOL] response [ [string] ] [ [string] ] = repo_name [EOL] return response [EOL] [EOL] def pass_pull_request_review ( self , username , repo_name , pull_request_id , cred_hash ) : [EOL] [docstring] [EOL] response = self . _change_pull_request_status ( username = username , repo_name = repo_name , pull_request_id = pull_request_id , cred_hash = cred_hash , status = [string] ) [EOL] if not response [ [string] ] : return response [EOL] response [ [string] ] [ [string] ] = repo_name [EOL] return response [EOL] [EOL] def fail_pull_request_review ( self , username , repo_name , pull_request_id , cred_hash ) : [EOL] [docstring] [EOL] response = self . _change_pull_request_status ( username = username , repo_name = repo_name , pull_request_id = pull_request_id , cred_hash = cred_hash , status = [string] ) [EOL] if not response [ [string] ] : return response [EOL] response [ [string] ] [ [string] ] = repo_name [EOL] return response [EOL] [EOL] def _change_pull_request_status ( self , username , repo_name , pull_request_id , cred_hash , status ) : [EOL] [docstring] [EOL] url = f'{ self . code_cloud_api . branch_api } [string] { repo_name } [string] { pull_request_id } [string] { username }' [EOL] post_data = { [string] : status } [EOL] response = self . code_cloud_api . put_json ( url = url , json_data = post_data , cred_hash = cred_hash ) [EOL] if not response [ [string] ] : return response [EOL] response [ [string] ] [ [string] ] = repo_name [EOL] return response	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.Any],builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.Any],builtins.str]]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$
[docstring]	0
import devcenter [EOL] [docstring] [EOL] from . api import CodeCloudApi [EOL] from . git import Git [EOL] from . reviewers import Reviewers [EOL] from . pull_requests import PullRequests [EOL] from . comments import Comments [EOL] [EOL] [EOL] class CodeCloud ( Git , Reviewers , PullRequests , Comments ) : [EOL] [docstring] [EOL] code_cloud_api = CodeCloudApi ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $devcenter.codecloud.api.CodeCloudApi$ 0 0 0 0
from typing import Dict , List , Any , Union [EOL] import typing [EOL] import devcenter [EOL] [docstring] [EOL] from devcenter . sql . sql import DevCenterSQL [EOL] [EOL] [EOL] class Git ( ) : [EOL] [docstring] [EOL] [EOL] @ classmethod def get_repos ( cls ) : [EOL] [docstring] [EOL] dcSql = DevCenterSQL ( ) [EOL] repos = dcSql . get_repos ( ) [EOL] return { [string] : True , [string] : repos } [EOL] [EOL] def find_branch ( self , repo_name , msrp , cred_hash ) : [EOL] [docstring] [EOL] returned_branches = [ ] [EOL] response = self . get_branches ( repo_name = repo_name , cred_hash = cred_hash ) [EOL] if not response [ [string] ] : [EOL] return response [EOL] [EOL] for branch_name in response [ [string] ] : [EOL] if str ( msrp ) in branch_name : [EOL] returned_branches . append ( branch_name ) [EOL] [EOL] if len ( returned_branches ) > [number] : [EOL] return { [string] : True , [string] : returned_branches , [string] : response [ [string] ] } [EOL] else : [EOL] return { [string] : False , [string] : f' [string] { msrp }' } [EOL] [EOL] def ticket_branches ( self , msrp , cred_hash ) : [EOL] [docstring] [EOL] branches = [ ] [EOL] repos = self . get_repos ( ) [EOL] if not repos [ [string] ] : [EOL] return repos [EOL] [EOL] for repo in repos [ [string] ] : [EOL] response = self . find_branch ( repo_name = repo [ [string] ] , msrp = msrp , cred_hash = cred_hash ) [EOL] if response [ [string] ] : [EOL] branches . append ( { [string] : repo [ [string] ] , [string] : response [ [string] ] , [string] : response [ [string] ] } ) [EOL] [EOL] if len ( branches ) > [number] : [EOL] return { [string] : True , [string] : branches } [EOL] else : [EOL] return { [string] : False , [string] : f' [string] { msrp }' } [EOL] [EOL] def get_branches ( self , repo_name , cred_hash ) : [EOL] [docstring] [EOL] branch_names = [ ] [EOL] [EOL] url = f'{ self . code_cloud_api . branch_api } [string] { repo_name } [string] ' [EOL] response = self . code_cloud_api . get ( url = url , cred_hash = cred_hash ) [EOL] if not response [ [string] ] : [EOL] return response [EOL] [EOL] for item in response . get ( [string] , { } ) . get ( [string] , { } ) : [EOL] branch_names . append ( item . get ( [string] , [string] ) ) [EOL] [EOL] return { [string] : True , [string] : branch_names } [EOL] [EOL] def get_commit_ids ( self , key , pull_requests , master_branch , cred_hash ) : [EOL] [docstring] [EOL] commit_ids = [ ] [EOL] status = True [EOL] [EOL] for request in pull_requests : [EOL] commit_response = self . _get_commit_id ( repo_name = request [ [string] ] , key = key , master_branch = master_branch , cred_hash = cred_hash , ) [EOL] [EOL] commit_ids . append ( { [string] : master_branch , [string] : request [ [string] ] , [string] : commit_response [ [string] ] , [string] : commit_response [ [string] ] , } ) [EOL] [EOL] if not commit_response [ [string] ] : [EOL] status = False [EOL] [EOL] return { [string] : status , [string] : commit_ids } [EOL] [EOL] def _get_commit_id ( self , repo_name , key , master_branch , cred_hash ) : [EOL] [docstring] [EOL] commit_id = [string] [EOL] [EOL] url = f'{ self . code_cloud_api . branch_api } [string] { repo_name } [string] { master_branch } [string] ' [EOL] response = self . code_cloud_api . get ( url = url , cred_hash = cred_hash ) [EOL] [EOL] if not response [ [string] ] : [EOL] return response [EOL] [EOL] for item in response . get ( [string] , { } ) . get ( [string] , { } ) : [EOL] message = item . get ( [string] , [string] ) [EOL] if key in message : [EOL] commit_id = item . get ( [string] ) [EOL] [EOL] return { [string] : bool ( commit_id ) , [string] : commit_id } [EOL] [EOL] def create_pull_requests ( self , repos , key , msrp , summary , cred_hash , qa_title ) : [EOL] [docstring] [EOL] response = { [string] : True , [string] : [ ] } [EOL] [EOL] for repo in repos : [EOL] repo_name = repo [ [string] ] [EOL] reviewed_branch = repo [ [string] ] [EOL] base_branch = repo [ [string] ] [EOL] [EOL] json_data = { [string] : qa_title , [string] : summary , [string] : [string] , [string] : True , [string] : False , [string] : { [string] : f" [string] { reviewed_branch }" , [string] : { [string] : repo_name , [string] : None , [string] : { [string] : self . code_cloud_api . project_name } } } , [string] : { [string] : f" [string] { base_branch }" , [string] : { [string] : repo_name , [string] : None , [string] : { [string] : self . code_cloud_api . project_name } } } , [string] : False , [string] : [ ] , [string] : { [string] : [ None ] } } [EOL] [EOL] url = f'{ self . code_cloud_api . branch_api } [string] { repo_name } [string] ' [EOL] pull_response = self . code_cloud_api . post_json ( url = url , json_data = json_data , cred_hash = cred_hash ) [EOL] [EOL] if not pull_response [ [string] ] : [EOL] response [ [string] ] . append ( { [string] : pull_response [ [string] ] [ [string] ] [ [number] ] [ [string] ] , [string] : repo_name } ) [EOL] else : [EOL] response [ [string] ] . append ( { [string] : pull_response [ [string] ] [ [string] ] [ [string] ] [ [number] ] [ [string] ] , [string] : repo_name } ) [EOL] [EOL] return response	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $devcenter.sql.sql.DevCenterSQL$ 0 0 0 0 0 $typing.Any$ 0 $devcenter.sql.sql.DevCenterSQL$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Any],builtins.bool]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Any],builtins.bool]]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Any],builtins.bool]]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[typing.Any],builtins.bool]]$
[docstring] [EOL] import os [EOL] [EOL] [EOL] class ChatPcrQa ( ) : [EOL] [docstring] [EOL] [EOL] try : [EOL] send_pings_to_team = int ( os . environ [ [string] ] ) [EOL] except KeyError : [EOL] send_pings_to_team = [number] [EOL] [EOL] def send_pcr_needed ( self , pcr_estimate , key , msrp , sprint , label , summary , override = False ) : [EOL] [docstring] [EOL] message = f' [string] { pcr_estimate } [string] ' [EOL] return self . send_action_needed_ping ( message = message , sprint = sprint , key = key , msrp = msrp , override = override , label = label , summary = summary ) [EOL] [EOL] def send_qa_needed ( self , key , sprint , msrp , label , summary , override = False ) : [EOL] [docstring] [EOL] message = [string] [EOL] [EOL] if self . send_pings_to_team or override : [EOL] return self . send_action_needed_ping ( message = message , sprint = sprint , key = key , msrp = msrp , override = override , label = label , summary = summary ) [EOL] else : [EOL] return { [string] : True } [EOL] [EOL] def send_action_needed_ping ( self , message , sprint , key , msrp , override , label , summary = [string] ) : [EOL] [docstring] [EOL] [comment] [EOL] if ( [string] in sprint ) or ( [string] in key ) : [EOL] return [EOL] [EOL] if label is not None and [string] in label : [EOL] message += [string] [EOL] [EOL] message += f" [string] { msrp } [string] { self . chat_api . jira_ticket_base } [string] { key } [string] { key } [string] " [EOL] [EOL] if sprint : [EOL] message += f" [string] { sprint }" [EOL] [EOL] message += f" [string] { summary }" [EOL] [EOL] chatroom = self . chat_api . dev_center_chat [EOL] if self . send_pings_to_team or override : [EOL] chatroom = self . chat_api . apex_chat [EOL] [EOL] return self . chat_api . send_meeting_message ( message = message , chatroom = chatroom )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring]	0
import requests [EOL] [docstring] [EOL] import os [EOL] [EOL] import requests [EOL] from requests . auth import HTTPBasicAuth [EOL] [EOL] [EOL] class ChatAPI ( ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] [docstring] [EOL] self . jira_url = os . environ . get ( [string] , [string] ) [EOL] self . jira_ticket_base = f'{ self . jira_url } [string] ' [EOL] [EOL] self . username = os . environ . get ( [string] , [string] ) [EOL] self . debug = int ( os . environ . get ( [string] , [number] ) ) [EOL] self . no_pings = int ( os . environ . get ( [string] , [number] ) ) [EOL] self . bot_name = os . environ . get ( [string] , [string] ) [EOL] self . dev_center_chat = os . environ . get ( [string] , [string] ) [EOL] self . bot_password = os . environ . get ( [string] , [string] ) [EOL] self . apex_chat = os . environ . get ( [string] , [string] ) [EOL] self . dti_chat = os . environ . get ( [string] , [string] ) [EOL] [EOL] self . chat_url = os . environ . get ( [string] , [string] ) [EOL] self . chat_api = f'{ self . chat_url } [string] ' [EOL] self . chat_api_chatroom = f'{ self . chat_api } [string] ' [EOL] self . chat_api_menu = f'{ self . chat_api } [string] ' [EOL] [EOL] self . project_managers = os . environ . get ( [string] , [string] ) . split ( [string] ) [EOL] [EOL] def send_message ( self , message , username ) : [EOL] [docstring] [EOL] if self . debug : [EOL] username = self . username [EOL] message = f" [string] { message }" [EOL] [EOL] if self . no_pings : [EOL] return { [string] : True , [string] : [string] } [EOL] else : [EOL] url = f"{ self . chat_api } [string] { username }" [EOL] auth = HTTPBasicAuth ( self . bot_name , self . bot_password ) [EOL] response = requests . post ( url , data = message . encode ( [string] , [string] ) , auth = auth ) [EOL] return self . _process_response ( response = response ) [EOL] [EOL] def send_meeting_message ( self , message , chatroom ) : [EOL] [docstring] [EOL] if self . debug : [EOL] message = f" [string] { message }" [EOL] [EOL] if self . no_pings : [EOL] return { [string] : True , [string] : [string] } [EOL] else : [EOL] url = f"{ self . chat_api_chatroom }{ chatroom }" [EOL] auth = HTTPBasicAuth ( self . bot_name , self . bot_password ) [EOL] response = requests . post ( url , data = message . encode ( [string] , [string] ) , auth = auth ) [EOL] return self . _process_response ( response = response ) [EOL] [EOL] def _process_response ( self , response ) : [EOL] [docstring] [EOL] return { [string] : response . status_code == [number] , [string] : response . text }	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $requests.auth.HTTPBasicAuth$ 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $requests.auth.HTTPBasicAuth$ 0 $requests.auth.HTTPBasicAuth$ 0 0 0 0 0 0 0 $requests.models.Response$ 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $requests.auth.HTTPBasicAuth$ 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $requests.auth.HTTPBasicAuth$ 0 $requests.auth.HTTPBasicAuth$ 0 0 0 0 0 0 0 $requests.models.Response$ 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] import devcenter [EOL] [docstring] [EOL] [EOL] from . api import ChatAPI [EOL] from . misc import ChatMisc [EOL] from . pcr_qa import ChatPcrQa [EOL] [EOL] [EOL] class Chat ( ChatMisc , ChatPcrQa , ChatAPI ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] [docstring] [EOL] self . chat_api = ChatAPI ( ) [EOL] [EOL] def send_dev_center_ticket_info ( self , key , summary , username , ping_message ) : [EOL] [docstring] [EOL] message = f"{ ping_message } [string] { self . chat_api . jira_ticket_base } [string] { key } [string] { key } [string] { summary } [string] { username }" [EOL] self . chat_api . send_meeting_message ( message = message , chatroom = self . chat_api . dev_center_chat )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $devcenter.chat.api.ChatAPI$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] [docstring] [EOL] import os [EOL] [EOL] from flask import request , Response [EOL] from flask_cors import cross_origin [EOL] [EOL] from devcenter . requests . jira import ( get_jira_tickets , find_key_by_msrp , edit_comment , add_work_log , set_status , add_comment , set_status , modify_watchers , parse_comment , delete_comment , get_active_sprints ) [EOL] [EOL] [EOL] def define_routes ( app , g ) : [EOL] [docstring] [EOL] try : [EOL] APP_NAME = os . environ [ [string] ] [EOL] except KeyError : [EOL] APP_NAME = [string] [EOL] [EOL] @ app . route ( f' [string] { APP_NAME } [string] ' ) @ cross_origin ( ) def jiraTickets ( ) : [EOL] data = get_jira_tickets ( data = { [string] : request . args . get ( [string] ) , [string] : request . args . get ( [string] ) , [string] : request . args . get ( [string] ) , [string] : g . cred_hash } ) [EOL] return Response ( data , mimetype = [string] ) [EOL] [EOL] @ app . route ( f' [string] { APP_NAME } [string] ' ) @ cross_origin ( ) def getKey ( msrp ) : [EOL] data = find_key_by_msrp ( data = { [string] : msrp , [string] : g . cred_hash } ) [EOL] return Response ( data , mimetype = [string] ) [EOL] [EOL] @ app . route ( f' [string] { APP_NAME } [string] ' , methods = [ [string] , [string] , [string] ] ) @ cross_origin ( ) def jira_comment ( ) : [EOL] response = { [string] : True , [string] : { } } [EOL] [EOL] [comment] [EOL] if request . method == [string] : [EOL] data = request . get_json ( ) [EOL] data [ [string] ] = g . cred_hash [EOL] response = edit_comment ( data = data ) [EOL] [EOL] [comment] [EOL] elif request . method == [string] : [EOL] data = request . get_json ( ) [EOL] data [ [string] ] = g . cred_hash [EOL] log_response = { } [EOL] conflict_response = { } [EOL] merge_response = { } [EOL] comment_response = { } [EOL] commit_response = { } [EOL] [EOL] if data . get ( [string] , False ) : [EOL] log_response = add_work_log ( data = data ) [EOL] [EOL] if data . get ( [string] , False ) : [EOL] data [ [string] ] = [string] [EOL] conflict_response = set_status ( data = data ) [EOL] [EOL] if data . get ( [string] , False ) : [EOL] comment_response = add_comment ( data = data ) [EOL] [EOL] response [ [string] ] [ [string] ] = log_response [EOL] response [ [string] ] [ [string] ] = conflict_response [EOL] response [ [string] ] [ [string] ] = merge_response [EOL] response [ [string] ] [ [string] ] = comment_response [EOL] response [ [string] ] [ [string] ] = commit_response [EOL] [EOL] [comment] [EOL] else : [EOL] data = { [string] : request . args . get ( [string] ) , [string] : request . args . get ( [string] ) , [string] : g . cred_hash } [EOL] response = delete_comment ( data = data ) [EOL] [EOL] return Response ( response , mimetype = [string] ) [EOL] [EOL] [EOL] @ app . route ( f' [string] { APP_NAME } [string] ' , methods = [ [string] ] ) @ cross_origin ( ) def change_status ( ) : [EOL] post_data = request . get_json ( ) [EOL] data = { [string] : g . cred_hash , [string] : post_data . get ( [string] , [string] ) , [string] : post_data . get ( [string] , { } ) , [string] : post_data . get ( [string] , { } ) , [string] : post_data . get ( [string] , [string] ) , [string] : post_data . get ( [string] , [string] ) , [string] : post_data . get ( [string] , [string] ) , [string] : post_data . get ( [string] , False ) , [string] : post_data . get ( [string] , [string] ) , [string] : post_data . get ( [string] , [ ] ) , [string] : post_data . get ( [string] , [string] ) , [string] : post_data . get ( [string] , [string] ) } [EOL] [EOL] status_response = set_status ( data = data ) [EOL] return Response ( status_response , mimetype = [string] ) [EOL] [EOL] @ app . route ( f' [string] { APP_NAME } [string] ' , methods = [ [string] ] ) @ cross_origin ( ) def parse_comment_route ( key ) : [EOL] data = request . get_json ( ) [EOL] data [ [string] ] = g . cred_hash [EOL] data = parse_comment ( data = data ) [EOL] return Response ( data , mimetype = [string] ) [EOL] [EOL] @ app . route ( f' [string] { APP_NAME } [string] ' , methods = [ [string] , [string] , [string] ] ) @ cross_origin ( ) def modify_watchers_route ( key , username ) : [EOL] response = { [string] : False , [string] : { } } [EOL] [EOL] [comment] [EOL] if request . method == [string] : [EOL] response = modify_watchers ( data = { [string] : [string] , [string] : g . cred_hash , [string] : key } ) [EOL] [EOL] [comment] [EOL] elif request . method == [string] : [EOL] data = { [string] : g . cred_hash , [string] : [string] , [string] : key , [string] : username } [EOL] response = modify_watchers ( data = data ) [EOL] [EOL] [comment] [EOL] else : [EOL] data = { [string] : username , [string] : key , [string] : g . cred_hash , [string] : [string] } [EOL] response = modify_watchers ( data = data ) [EOL] [EOL] return Response ( response , mimetype = [string] ) [EOL] [EOL] @ app . route ( f' [string] { APP_NAME } [string] ' , methods = [ [string] ] ) @ cross_origin ( ) def active_sprints_route ( ) : [EOL] response = get_active_sprints ( data = { [string] : g . cred_hash } ) [EOL] return Response ( response , mimetype = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring]	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] import os [EOL] [EOL] from flask import Response [EOL] from flask_cors import cross_origin [EOL] [EOL] from devcenter . requests . api import get_orders , get_atx [EOL] [EOL] [EOL] def define_routes ( app , g ) : [EOL] [docstring] [EOL] try : [EOL] APP_NAME = os . environ [ [string] ] [EOL] except KeyError : [EOL] APP_NAME = [string] [EOL] [EOL] @ app . route ( f' [string] { APP_NAME } [string] ' ) @ cross_origin ( ) def get_orders_route ( ) : [EOL] response = get_orders ( ) [EOL] return Response ( response , mimetype = [string] ) [EOL] [EOL] @ app . route ( f' [string] { APP_NAME } [string] ' ) @ cross_origin ( ) def get_atx_route ( ) : [EOL] response = get_atx ( ) [EOL] return Response ( response , mimetype = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import Dict , Any [EOL] import typing [EOL] import os [EOL] [EOL] from flask import Response , request [EOL] from flask_cors import cross_origin [EOL] [EOL] from devcenter . requests . codecloud import ( get_repos , create_pull_requests , get_branches , ticket_branches as CCRequests_ticket_branches , transition_to_pcr , add_reviewer_to_pull_request ) [EOL] from devcenter . requests . jira import ( add_comment , edit_comment , delete_comment , add_work_log , get_jira_tickets , find_key_by_msrp , get_profile , parse_comment , modify_watchers ) [EOL] [EOL] [EOL] def define_routes ( app , g ) : [EOL] [docstring] [EOL] try : [EOL] APP_NAME = os . environ [ [string] ] [EOL] except KeyError : [EOL] APP_NAME = [string] [EOL] [EOL] @ app . route ( f' [string] { APP_NAME } [string] ' ) @ cross_origin ( ) def repos ( ) : [EOL] data = { [string] : g . cred_hash } [EOL] response = get_repos ( data = data ) [EOL] return Response ( response , mimetype = [string] ) [EOL] [EOL] @ app . route ( f' [string] { APP_NAME } [string] ' ) @ cross_origin ( ) def branches ( repo_name ) : [EOL] data = { [string] : repo_name , [string] : g . cred_hash } [EOL] response = get_branches ( data = data ) [EOL] return Response ( response , mimetype = [string] ) [EOL] [EOL] @ app . route ( f' [string] { APP_NAME } [string] ' ) @ cross_origin ( ) def ticket_branches ( msrp ) : [EOL] data = { [string] : msrp , [string] : g . cred_hash } [EOL] response = CCRequests_ticket_branches ( data = data ) [EOL] return Response ( response , mimetype = [string] ) [EOL] [EOL] @ app . route ( f' [string] { APP_NAME } [string] ' , methods = [ [string] ] ) @ cross_origin ( ) def transition_ticket_to_pcr ( ) : [EOL] post_data = request . get_json ( ) [EOL] data = { [string] : g . cred_hash , [string] : post_data . get ( [string] , [string] ) , [string] : post_data . get ( [string] , [ ] ) , [string] : post_data . get ( [string] , [string] ) , [string] : post_data . get ( [string] , [number] ) , [string] : post_data . get ( [string] , [string] ) , [string] : post_data . get ( [string] , [string] ) , [string] : post_data . get ( [string] , [string] ) , [string] : post_data . get ( [string] , [string] ) , [string] : post_data . get ( [string] , [string] ) , [string] : post_data . get ( [string] , False ) } [EOL] response = transition_to_pcr ( data = data ) [EOL] return Response ( response , mimetype = [string] ) [EOL] [EOL] @ app . route ( f' [string] { APP_NAME } [string] ' , methods = [ [string] ] ) @ cross_origin ( ) def add_reviewer ( ) : [EOL] post_data = request . get_json ( ) [EOL] data = { [string] : g . cred_hash , [string] : post_data . get ( [string] , [string] ) , [string] : post_data . get ( [string] , [string] ) , [string] : post_data . get ( [string] , [string] ) } [EOL] response = add_reviewer_to_pull_request ( data ) [EOL] return Response ( response , mimetype = [string] ) [EOL] [EOL] @ app . route ( f' [string] { APP_NAME } [string] ' , methods = [ [string] ] ) @ cross_origin ( ) def add_comment ( ) : [EOL] post_data = request . get_json ( ) [EOL] data = { [string] : g . cred_hash , [string] : post_data . get ( [string] , [string] ) , [string] : post_data . get ( [string] , [string] ) , } [EOL] response = { [string] : False } [EOL] return Response ( response , mimetype = [string] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] import os [EOL] [EOL] from flask import Response , request [EOL] from flask_cors import cross_origin [EOL] [EOL] from devcenter . requests . user import ( set_navbar_item , get_navbar_items , get_jql_links , get_statuses , get_ticket_history ) [EOL] from devcenter . requests . jira import get_profile [EOL] [EOL] [EOL] def define_routes ( app , g ) : [EOL] [docstring] [EOL] try : [EOL] APP_NAME = os . environ [ [string] ] [EOL] except KeyError : [EOL] APP_NAME = [string] [EOL] [EOL] @ app . route ( f' [string] { APP_NAME } [string] ' ) @ cross_origin ( ) def get_profile_route ( username ) : [EOL] data = { [string] : g . cred_hash , [string] : username } [EOL] data = get_profile ( data = data ) [EOL] return Response ( data , mimetype = [string] ) [EOL] [EOL] @ app . route ( f' [string] { APP_NAME } [string] ' , methods = [ [string] , [string] ] ) @ cross_origin ( ) def get_navbar ( ) : [EOL] response = { [string] : False , [string] : [string] } [EOL] [EOL] if request . method == [string] : [EOL] data = request . get_json ( ) [EOL] response = set_navbar_item ( data = data . get ( [string] , { } ) ) [EOL] else : [EOL] response = get_navbar_items ( ) [EOL] [EOL] return Response ( response , mimetype = [string] ) [EOL] [EOL] @ app . route ( f' [string] { APP_NAME } [string] ' , methods = [ [string] ] ) @ cross_origin ( ) def get_jql_links_route ( ) : [EOL] response = get_jql_links ( ) [EOL] return Response ( response , mimetype = [string] ) [EOL] [EOL] @ app . route ( f' [string] { APP_NAME } [string] ' , methods = [ [string] ] ) @ cross_origin ( ) def get_statuses_request ( ) : [EOL] response = get_statuses ( ) [EOL] return Response ( response , mimetype = [string] ) [EOL] [EOL] @ app . route ( f' [string] { APP_NAME } [string] ' , methods = [ [string] ] ) @ cross_origin ( ) def get_ticket_history_request ( ) : [EOL] response = get_ticket_history ( ) [EOL] return Response ( response , mimetype = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] import os [EOL] [EOL] from flask import request , Response [EOL] from flask_cors import cross_origin [EOL] [EOL] from devcenter . requests . chat import send_ping , set_user_pings , send_custom_ping , send_pcr_comments [EOL] [EOL] [EOL] def define_routes ( app , g ) : [EOL] [docstring] [EOL] try : [EOL] APP_NAME = os . environ [ [string] ] [EOL] except KeyError : [EOL] APP_NAME = [string] [EOL] [EOL] @ app . route ( f' [string] { APP_NAME } [string] ' , methods = [ [string] ] ) @ cross_origin ( ) def send_ping_route ( ) : [EOL] post_data = request . get_json ( ) [EOL] post_data [ [string] ] = g . cred_hash [EOL] response = send_ping ( data = post_data ) [EOL] return Response ( response , mimetype = [string] ) [EOL] [EOL] @ app . route ( f' [string] { APP_NAME } [string] ' , methods = [ [string] ] ) @ cross_origin ( ) def user_pings ( ) : [EOL] post_data = request . get_json ( ) [EOL] post_data [ [string] ] = g . cred_hash [EOL] response = set_user_pings ( data = post_data ) [EOL] return Response ( response , mimetype = [string] ) [EOL] [EOL] @ app . route ( f' [string] { APP_NAME } [string] ' , methods = [ [string] ] ) @ cross_origin ( ) def send_custom_ping_route ( ) : [EOL] post_data = request . get_json ( ) [EOL] post_data [ [string] ] = g . cred_hash [EOL] response = send_custom_ping ( data = post_data ) [EOL] return Response ( response , mimetype = [string] ) [EOL] [EOL] @ app . route ( f' [string] { APP_NAME } [string] ' , methods = [ [string] ] ) @ cross_origin ( ) def send_pcr_comments_route ( ) : [EOL] post_data = request . get_json ( ) [EOL] post_data [ [string] ] = g . cred_hash [EOL] response = send_pcr_comments ( data = post_data ) [EOL] return Response ( response , mimetype = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Optional , Any [EOL] import typing [EOL] [docstring] [EOL] import json [EOL] [EOL] import requests [EOL] from requests . exceptions import ProxyError , SSLError [EOL] [EOL] [EOL] class AtlassianApi ( ) : [EOL] [docstring] [EOL] [EOL] def get ( self , url , cred_hash = [string] , cookies = None ) : [EOL] [docstring] [EOL] cookies = cookies if cookies is None else { } [EOL] session_obj = self . get_session ( cred_hash = cred_hash ) [EOL] if not session_obj [ [string] ] : return session_obj [EOL] session_obj = session_obj [ [string] ] [EOL] try : [EOL] response = session_obj . get ( url = url , cookies = cookies ) [EOL] except ( ProxyError , SSLError , OSError ) as e : [EOL] return { [string] : False , [string] : f" [string] { e }" } [EOL] return self . process_response ( response = response ) [EOL] [EOL] def post ( self , url , data = [string] , cred_hash = [string] ) : [EOL] [docstring] [EOL] session_obj = self . get_session ( cred_hash = cred_hash ) [EOL] if not session_obj [ [string] ] : return session_obj [EOL] session_obj = session_obj [ [string] ] [EOL] try : [EOL] if data : [EOL] response = session_obj . post ( url = url , data = data ) [EOL] else : [EOL] response = session_obj . post ( url = url ) [EOL] except ( ProxyError , SSLError , OSError ) as e : [EOL] return { [string] : False , [string] : f" [string] { e }" } [EOL] return self . process_response ( response = response ) [EOL] [EOL] def put ( self , url , data = [string] , cred_hash = [string] ) : [EOL] [docstring] [EOL] session_obj = self . get_session ( cred_hash = cred_hash ) [EOL] if not session_obj [ [string] ] : return session_obj [EOL] session_obj = session_obj [ [string] ] [EOL] try : [EOL] if data : [EOL] response = session_obj . put ( url = url , data = data ) [EOL] else : [EOL] response = session_obj . put ( url = url ) [EOL] except ( ProxyError , SSLError , OSError ) as e : [EOL] return { [string] : False , [string] : f" [string] { e }" } [EOL] return self . process_response ( response = response ) [EOL] [EOL] def delete ( self , url , cred_hash = [string] ) : [EOL] [docstring] [EOL] session_obj = self . get_session ( cred_hash = cred_hash ) [EOL] if not session_obj [ [string] ] : return session_obj [EOL] session_obj = session_obj [ [string] ] [EOL] try : [EOL] response = session_obj . delete ( url ) [EOL] except ( ProxyError , SSLError , OSError ) as e : [EOL] return { [string] : False , [string] : f" [string] { e }" } [EOL] return self . process_response ( response = response ) [EOL] [EOL] def post_json ( self , url , json_data , cred_hash = [string] ) : [EOL] [docstring] [EOL] session_obj = self . get_session ( cred_hash = cred_hash ) [EOL] if not session_obj [ [string] ] : return session_obj [EOL] session_obj = session_obj [ [string] ] [EOL] headers = { [string] : [string] } [EOL] try : [EOL] response = session_obj . post ( url , json = json_data , headers = headers ) [EOL] except ( ProxyError , SSLError , OSError ) as e : [EOL] return { [string] : False , [string] : f" [string] { e }" } [EOL] return self . process_response ( response = response ) [EOL] [EOL] def put_json ( self , url , json_data , cred_hash = [string] ) : [EOL] [docstring] [EOL] session_obj = self . get_session ( cred_hash = cred_hash ) [EOL] if not session_obj [ [string] ] : return session_obj [EOL] session_obj = session_obj [ [string] ] [EOL] headers = { [string] : [string] } [EOL] try : [EOL] response = session_obj . put ( url = url , json = json_data , headers = headers ) [EOL] except ( ProxyError , SSLError , OSError ) as e : [EOL] return { [string] : False , [string] : f" [string] { e }" } [EOL] return self . process_response ( response = response ) [EOL] [EOL] @ classmethod def process_json ( cls , response ) : [EOL] [docstring] [EOL] [comment] [EOL] status = response . status_code in [ [number] , [number] , [number] ] [EOL] try : [EOL] response = { [string] : status , [string] : json . loads ( response . text ) } [EOL] except ValueError : [EOL] response = { [string] : status , [string] : response . text } [EOL] return response [EOL] [EOL] @ classmethod def process_response ( cls , response ) : [EOL] [docstring] [EOL] response = cls . process_json ( response = response ) [EOL] [EOL] if not response . get ( [string] ) : [EOL] if [string] not in response : [EOL] return { [string] : False , [string] : [string] } [EOL] elif isinstance ( response . get ( [string] ) , dict ) and [string] in response . get ( [string] ) : [EOL] return { [string] : False , [string] : response . get ( [string] ) . get ( [string] ) } [EOL] else : [EOL] return { [string] : False , [string] : response . get ( [string] , [string] ) } [EOL] [EOL] return response	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[typing.Any,typing.Any]]$ 0 $typing.Optional[typing.Dict[typing.Any,typing.Any]]$ 0 $typing.Optional[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[typing.Any,typing.Any]]$ 0 $typing.Optional[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 $builtins.bool$ 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$
[docstring]	0