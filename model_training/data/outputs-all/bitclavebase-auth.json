from typing import Any [EOL] import typing [EOL] import subprocess [EOL] from apscheduler . schedulers . blocking import BlockingScheduler [EOL] [EOL] scheduler = BlockingScheduler ( ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] scheduler . start ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import os [EOL] [EOL] from celery import Celery [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] app = Celery ( [string] ) [EOL] app . config_from_object ( [string] ) [EOL] app . autodiscover_tasks ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . conf import settings [EOL] from django . conf . urls import include , url [EOL] from django . conf . urls . static import static [EOL] from django . contrib import admin [EOL] [EOL] urlpatterns = [ url ( [string] , include ( [string] , namespace = [string] ) ) , url ( [string] , admin . site . urls ) , url ( [string] , include ( [string] , [string] ) ) , url ( [string] , include ( [string] , [string] ) ) , url ( [string] , include ( [string] ) ) , ] [EOL] [EOL] urlpatterns += static ( settings . MEDIA_URL , document_root = settings . MEDIA_ROOT ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import base_auth [EOL] import django [EOL] import pytest [EOL] from django . test import Client [EOL] from pytest_factoryboy import register [EOL] [EOL] from base_auth . tests import factories [EOL] from base_auth . users . models import User [EOL] [EOL] register ( factories . UserFactory ) [EOL] [EOL] [EOL] @ pytest . fixture ( ) def auth_client ( client , user ) : [EOL] client . force_login ( user ) [EOL] return client [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.test.Client$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Type [EOL] import base_auth [EOL] import typing [EOL] import factory [EOL] from django . utils import timezone [EOL] [EOL] from base_auth . users . models import User [EOL] [EOL] [EOL] class UserFactory ( factory . DjangoModelFactory ) : [EOL] [EOL] class Meta : [EOL] model = User [EOL] [EOL] first_name = factory . Faker ( [string] ) [EOL] last_name = factory . Faker ( [string] ) [EOL] email = factory . Faker ( [string] ) [EOL] password = factory . PostGenerationMethodCall ( [string] , [string] ) [EOL] email_is_verified = True [EOL] is_staff = False [EOL] is_active = True [EOL] date_joined = factory . LazyFunction ( timezone . now ) [EOL] [EOL] @ factory . lazy_attribute def username ( self ) : [EOL] return self . email [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[base_auth.users.models.User]$ 0 0 0 0 $typing.Type[base_auth.tests.factories.UserFactory]$ 0 0 0 0 0 0 0 0 $typing.Type[base_auth.tests.factories.UserFactory]$ 0 0 0 0 0 0 0 0 $typing.Type[base_auth.tests.factories.UserFactory]$ 0 0 0 0 0 0 0 0 $typing.Type[base_auth.tests.factories.UserFactory]$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $typing.Type[base_auth.tests.factories.UserFactory]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . contrib import admin [EOL] from django_otp . plugins . otp_static . models import StaticDevice [EOL] from django_otp . plugins . otp_totp . models import TOTPDevice [EOL] from two_factor . models import PhoneDevice [EOL] [EOL] admin . site . unregister ( PhoneDevice ) [EOL] admin . site . unregister ( StaticDevice ) [EOL] admin . site . unregister ( TOTPDevice ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple [EOL] import typing [EOL] from django . contrib import admin [EOL] [EOL] from base_auth . users . models import User [EOL] from base_auth . utils . admin import ( GenericAdminMixin , RawIdFieldsAdminMixin , ReadOnlyAdminMixin , RelatedFieldURLMixin ) [EOL] [EOL] [EOL] @ admin . register ( User ) class UserAdmin ( ReadOnlyAdminMixin , RelatedFieldURLMixin , GenericAdminMixin , RawIdFieldsAdminMixin , admin . ModelAdmin ) : [EOL] search_fields = ( [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0
	0
from typing import Type [EOL] import base_auth [EOL] import typing [EOL] import uuid [EOL] [EOL] from django . contrib . auth . models import AbstractUser , UserManager [EOL] from django . db import models [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] [EOL] from base_auth . utils . django_models import ModelDefaultsMixin [EOL] [EOL] [EOL] class User ( ModelDefaultsMixin , AbstractUser ) : [EOL] email = models . EmailField ( _ ( [string] ) , max_length = [number] , blank = True ) [EOL] email_is_verified = models . BooleanField ( default = False ) [EOL] email_verification_code = models . UUIDField ( unique = True , default = uuid . uuid4 ) [EOL] email_verification_at = models . DateTimeField ( null = True , blank = True ) [EOL] [EOL] first_name = models . CharField ( _ ( [string] ) , max_length = [number] , blank = True ) [EOL] last_name = models . CharField ( _ ( [string] ) , max_length = [number] , blank = True ) [EOL] [EOL] objects = UserManager ( ) [EOL] [EOL] class Meta ( AbstractUser . Meta ) : [EOL] swappable = [string] [EOL] [EOL] @ property def has_enabled_2fa ( self ) : [EOL] return self . totpdevice_set . exists ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[base_auth.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[base_auth.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[base_auth.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[base_auth.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[base_auth.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[base_auth.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[base_auth.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import random [EOL] import string [EOL] [EOL] from django . core . management . base import BaseCommand [EOL] [EOL] from base_auth . users . models import User [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , type = str ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] username = options [ [string] ] [EOL] email = f'{ username } [string] ' [EOL] password_chars = string . ascii_letters + [string] . join ( str ( x ) for x in range ( [number] ) ) [EOL] password = [string] . join ( random . sample ( password_chars , [number] ) ) [EOL] [EOL] print ( [string] , username ) [EOL] print ( [string] , password ) [EOL] User . objects . create_user ( is_staff = True , is_email_verified = True , email = email , username = username , password = password ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Any$ 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 0
	0
from typing import Any [EOL] import typing [EOL] from django . contrib . auth . models import Group [EOL] from django . core . management . base import BaseCommand [EOL] [EOL] from base_auth . users . models import User [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , type = str ) [EOL] parser . add_argument ( [string] , type = str , nargs = [string] ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] user = User . objects . get ( is_staff = True , username = options [ [string] ] ) [EOL] user . groups . set ( [ Group . objects . get ( name = group_name ) for group_name in options [ [string] ] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import datetime [EOL] from datetime import timedelta [EOL] [EOL] import waffle [EOL] from django . conf import settings [EOL] from django . core . management . base import BaseCommand [EOL] from django . utils import timezone [EOL] [EOL] from base_auth . users . models import User [EOL] [EOL] ENABLE_2FA_INTERVAL = timedelta ( hours = [number] ) [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] if not waffle . switch_is_active ( settings . SWITCHES . DEACTIVATE_STAFF_WITHOUT_2FA ) : [EOL] return [EOL] [EOL] now = timezone . now ( ) [EOL] staff_without_2fa = User . objects . filter ( is_staff = True , totpdevice__isnull = True ) [EOL] staff_without_2fa . filter ( date_joined__lt = now - ENABLE_2FA_INTERVAL ) . update ( is_active = False ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.timedelta$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $datetime.timedelta$ 0 0 0 0 0 0 0 0 0
	0
	0
from django . conf import settings [EOL] [EOL] [EOL] def site_url ( request ) : [EOL] return { [string] : settings . SITE_URL } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import base_auth [EOL] import typing [EOL] from django . conf import settings [EOL] [EOL] from storages . backends . s3boto3 import S3Boto3Storage [EOL] [EOL] [EOL] class StaticStorage ( S3Boto3Storage ) : [EOL] location = settings . STATICFILES_LOCATION [EOL] [EOL] [EOL] class MediaStorage ( S3Boto3Storage ) : [EOL] location = settings . MEDIAFILES_LOCATION [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[base_auth.site.storages.StaticStorage]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[base_auth.site.storages.MediaStorage]$ 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . conf . urls import url [EOL] from django . conf . urls import url , include [EOL] [EOL] from base_auth . site . views import index , tos [EOL] [EOL] urlpatterns = [ url ( [string] , index . IndexView . as_view ( ) , name = [string] ) , url ( [string] , tos . TosView . as_view ( ) , name = [string] ) , url ( [string] , include ( [string] , namespace = [string] ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . conf . urls import url [EOL] [EOL] from base_auth . site . views import two_factor_auth [EOL] [EOL] urlpatterns = [ url ( regex = [string] , view = two_factor_auth . OverrideProfileView . as_view ( ) , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . conf . urls import url [EOL] [EOL] from base_auth . site . views import widget [EOL] [EOL] urlpatterns = [ url ( [string] , widget . WidgetButtonView . as_view ( ) , name = [string] ) , url ( [string] , widget . ExampleView . as_view ( ) , name = [string] ) , url ( [string] , widget . WidgetPopupView . as_view ( ) , name = [string] ) , url ( [string] , widget . WidgetSDKView . as_view ( ) , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . views . generic import RedirectView [EOL] [EOL] [EOL] class TosView ( RedirectView ) : [EOL] url = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from django . conf import settings [EOL] from django . utils . decorators import method_decorator [EOL] from django . views . decorators . clickjacking import xframe_options_exempt [EOL] from django . views . generic import TemplateView [EOL] [EOL] [EOL] class ExampleView ( TemplateView ) : [EOL] template_name = [string] [EOL] [EOL] [EOL] class WidgetSDKView ( TemplateView ) : [EOL] template_name = [string] [EOL] [EOL] [EOL] @ method_decorator ( xframe_options_exempt , name = [string] ) class WidgetButtonView ( TemplateView ) : [EOL] template_name = [string] [EOL] [EOL] def get_context_data ( self , ** kwargs ) : [EOL] context = super ( ) . get_context_data ( ** kwargs ) [EOL] context [ [string] ] = settings . BASE_NODE_URL [EOL] return context [EOL] [EOL] [EOL] class WidgetPopupView ( TemplateView ) : [EOL] template_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from django . views . generic import TemplateView [EOL] [EOL] [EOL] class IndexView ( TemplateView ) : [EOL] template_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from django . http import HttpResponseNotFound [EOL] from two_factor . views . profile import ProfileView [EOL] [EOL] [EOL] class OverrideProfileView ( ProfileView ) : [EOL] [EOL] def dispatch ( self , request , * args , ** kwargs ) : [EOL] if not request . user . is_staff : [EOL] return HttpResponseNotFound ( ) [EOL] [EOL] return super ( ) . dispatch ( request , * args , ** kwargs ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
class SWITCHES : [EOL] pass [EOL] [EOL] [EOL] class FLAGS : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0
from base_auth . settings . base import * [EOL] from base_auth . settings . base_auth import * [EOL] from base_auth . settings . celery import * [EOL] from base_auth . settings . logging import * [EOL] from base_auth . settings . raven import * [EOL] from base_auth . settings . slack import * [EOL] from base_auth . settings . static import * [EOL] from base_auth . settings . waffle import * [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] import os [EOL] [EOL] BROKER_URL = [string] . format ( redis_dsl = os . environ [ [string] ] ) [EOL] CELERY_ACCEPT_CONTENT = [ [string] ] [EOL] CELERY_TASK_SERIALIZER = [string] [EOL] CELERY_IGNORE_RESULT = True [EOL] CELERY_ALWAYS_EAGER = bool ( int ( os . getenv ( [string] , [number] ) ) ) [EOL] CELERYD_TASK_SOFT_TIME_LIMIT = [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0
import os [EOL] [EOL] if [string] in os . environ : [EOL] SLACK_INCOMING_WEBHOOK_URL = os . environ [ [string] ] [EOL] else : [EOL] SLACK_INCOMING_WEBHOOK_URL = None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0
from typing import Dict [EOL] import typing [EOL] import os [EOL] [EOL] RAVEN_CONFIG = { [string] : os . environ [ [string] ] , [string] : os . environ [ [string] ] , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import os [EOL] [EOL] BASE_NODE_URL = os . environ [ [string] ] [EOL]	0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0
from typing import Tuple [EOL] import typing [EOL] import os [EOL] [EOL] from . base import BASE_DIR , MIDDLEWARE [EOL] [EOL] STATIC_URL = [string] [EOL] [EOL] if [string] in os . environ : [EOL] AWS_STORAGE_BUCKET_NAME = os . environ [ [string] ] [EOL] AWS_LOCATION = os . environ [ [string] ] [EOL] AWS_ACCESS_KEY_ID = os . environ [ [string] ] [EOL] AWS_SECRET_ACCESS_KEY = os . environ [ [string] ] [EOL] AWS_S3_CUSTOM_DOMAIN = os . environ [ [string] ] [EOL] AWS_DEFAULT_ACL = [string] [EOL] AWS_IS_GZIPPED = True [EOL] AWS_S3_FILE_OVERWRITE = True [EOL] [EOL] HEROKU_SLUG_COMMIT = os . environ [ [string] ] [EOL] [EOL] STATICFILES_LOCATION = f'{ AWS_LOCATION } [string] { HEROKU_SLUG_COMMIT }' [EOL] STATICFILES_STORAGE = [string] [EOL] [EOL] MEDIAFILES_LOCATION = f'{ AWS_LOCATION } [string] ' [EOL] DEFAULT_FILE_STORAGE = [string] [EOL] [EOL] STATIC_ROOT = None [EOL] else : [EOL] STATIC_ROOT = os . path . join ( BASE_DIR , [string] ) [EOL] STATICFILES_DIRS = ( os . path . join ( BASE_DIR , [string] ) , ) [EOL] MIDDLEWARE . insert ( [number] , [string] ) [EOL] STATICFILES_STORAGE = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import List , Any , Dict , Set [EOL] import typing [EOL] import django . contrib . admin [EOL] from django . core . exceptions import FieldDoesNotExist [EOL] from django . core . urlresolvers import reverse [EOL] from django . db . models . fields import BooleanField , NullBooleanField [EOL] from django . utils . safestring import mark_safe [EOL] [EOL] import base_auth . utils . django_models [EOL] [EOL] [EOL] def allow_tags ( obj ) : [EOL] obj . allow_tags = True [EOL] return obj [EOL] [EOL] [EOL] def boolean ( obj ) : [EOL] obj . boolean = True [EOL] return obj [EOL] [EOL] [EOL] def short_description ( description ) : [EOL] [EOL] def short_description ( obj ) : [EOL] obj . short_description = description [EOL] return obj [EOL] [EOL] return short_description [EOL] [EOL] [EOL] def order_field ( model_field ) : [EOL] [EOL] def order_field ( obj ) : [EOL] obj . admin_order_field = model_field [EOL] return obj [EOL] [EOL] return order_field [EOL] [EOL] [EOL] class AdminChangePageURLField : [EOL] [EOL] def __init__ ( self , short_description_ , related_field ) : [EOL] self . short_description = short_description_ [EOL] self . admin_order_field = related_field [EOL] self . _related_field = related_field [EOL] [EOL] def __call__ ( self , obj ) : [EOL] related_obj = getattr ( obj , self . _related_field ) [EOL] [EOL] if related_obj is None : [EOL] return [string] [EOL] [EOL] related_obj_app = related_obj . _meta . app_label [EOL] related_obj_model = related_obj . _meta . model_name [EOL] related_obj_url_name = f' [string] { related_obj_app } [string] { related_obj_model } [string] ' [EOL] change_url = reverse ( related_obj_url_name , args = ( related_obj . pk , ) ) [EOL] [EOL] return mark_safe ( [string] . format ( change_url , str ( related_obj ) ) ) [EOL] [EOL] [EOL] class RelatedFieldURLMixin : [EOL] list_display_relation_urls = True [EOL] fields_relation_urls = True [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] if self . fields : [EOL] self . fields = list ( self . fields ) [EOL] self . readonly_fields = list ( self . readonly_fields ) [EOL] self . list_display = list ( self . list_display ) [EOL] [EOL] related_fields = dict ( ) [EOL] all_fields = set ( self . fields or [ ] ) | set ( self . readonly_fields ) | set ( self . list_display ) [EOL] [EOL] for field_name in all_fields : [EOL] try : [EOL] field = self . model . _meta . get_field ( field_name ) [EOL] except FieldDoesNotExist : [EOL] continue [EOL] if field . one_to_many or field . one_to_one or field . many_to_one : [EOL] related_fields [ field_name ] = field [EOL] [EOL] for field_name , field in related_fields . items ( ) : [EOL] method_name = f'{ field_name } [string] ' [EOL] try : [EOL] setattr ( self , method_name , AdminChangePageURLField ( field . verbose_name , field . name ) ) [EOL] except AttributeError : [EOL] continue [EOL] [EOL] if self . list_display_relation_urls and field_name in self . list_display : [EOL] self . list_display [ self . list_display . index ( field_name ) ] = method_name [EOL] [EOL] if self . fields_relation_urls and self . fields and field_name in self . fields : [EOL] self . fields [ self . fields . index ( field_name ) ] = method_name [EOL] [EOL] if field_name in self . readonly_fields : [EOL] self . readonly_fields [ self . readonly_fields . index ( field_name ) ] = method_name [EOL] [EOL] [EOL] class RawIdFieldsAdminMixin ( object ) : [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( RawIdFieldsAdminMixin , self ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] self . raw_id_fields = [ field . name for field in self . model . _meta . get_fields ( ) if field . many_to_many or field . many_to_one ] [EOL] [EOL] [EOL] class GenericAdminMixin ( object ) : [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( GenericAdminMixin , self ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] self . fields = list ( self . fields or [ ] ) [EOL] self . fields . append ( [string] ) [EOL] self . readonly_fields = list ( self . readonly_fields ) [EOL] self . readonly_fields . append ( [string] ) [EOL] self . list_display = list ( self . list_display ) [EOL] self . list_display . append ( [string] ) [EOL] [EOL] self . list_filter = list ( self . list_filter ) [EOL] self . search_fields = list ( self . search_fields ) [EOL] [EOL] if not self . ordering : [EOL] self . ordering = [ [string] ] [EOL] [EOL] for field in self . model . _meta . get_fields ( ) : [EOL] if isinstance ( field , ( BooleanField , NullBooleanField ) ) : [EOL] self . list_filter . append ( ( field . name , django . contrib . admin . BooleanFieldListFilter ) ) [EOL] [EOL] fields = [ field for field in self . model . _meta . get_fields ( ) if not field . one_to_many ] [EOL] [EOL] for field in fields : [EOL] if field . name not in self . fields : [EOL] self . fields . append ( field . name ) [EOL] if not field . many_to_many and field . name not in self . list_display : [EOL] self . list_display . append ( field . name ) [EOL] [EOL] [EOL] class ReadOnlyAdminMixin ( object ) : [EOL] change_form_template = [string] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ReadOnlyAdminMixin , self ) . __init__ ( * args , ** kwargs ) [EOL] self . readonly_fields = list ( self . readonly_fields or [ ] ) [EOL] self . readonly_fields . extend ( list ( base_auth . utils . django_models . get_all_fields_names ( self . model ) ) ) [EOL] [EOL] def get_actions ( self , request ) : [EOL] actions = super ( ReadOnlyAdminMixin , self ) . get_actions ( request ) [EOL] del actions [ [string] ] [EOL] return actions [EOL] [EOL] def has_add_permission ( self , request ) : [EOL] return False [EOL] [EOL] def has_delete_permission ( self , request , obj = None ) : [EOL] return False [EOL] [EOL] def save_model ( self , request , obj , form , change ) : [EOL] pass [EOL] [EOL] def delete_model ( self , request , obj ) : [EOL] pass [EOL] [EOL] def save_related ( self , request , form , formsets , change ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any , Set [EOL] import base_auth [EOL] import typing [EOL] from django . db import models [EOL] from django . db . models import Func [EOL] from django . utils import timezone [EOL] [EOL] [EOL] def get_all_fields_names ( model ) : [EOL] return ( field . name for field in model . _meta . get_fields ( ) ) [EOL] [EOL] [EOL] class ModelDefaultsMixin ( models . Model ) : [EOL] created_at = models . DateTimeField ( default = timezone . now ) [EOL] updated_at = models . DateTimeField ( auto_now = True ) [EOL] [EOL] class Meta : [EOL] abstract = True [EOL] [EOL] def __str__ ( self ) : [EOL] return f'{ self . __class__ . __name__ } [string] { self . id }' [EOL] [EOL] def save ( self , update_fields = None , * args , ** kwargs ) : [EOL] if update_fields : [EOL] update_fields = set ( update_fields ) [EOL] update_fields . add ( [string] ) [EOL] [EOL] super ( ) . save ( update_fields = update_fields , * args , ** kwargs ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[base_auth.utils.django_models.ModelDefaultsMixin]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[base_auth.utils.django_models.ModelDefaultsMixin]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 $typing.Set[typing.Any]$ 0 0 0 $typing.Set[typing.Any]$ 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0
from typing import Tuple , List , Any , Dict [EOL] import typing [EOL] import builtins [EOL] from typing import List , Dict [EOL] [EOL] from django . conf import settings [EOL] from django . core . mail import EmailMultiAlternatives [EOL] from django . template . loader import render_to_string [EOL] [EOL] [EOL] def send_mail ( subject , template , context , to ) : [EOL] template_name = template . split ( [string] ) [ - [number] ] [EOL] [EOL] text_template = [string] . format ( template , template_name ) [EOL] text_body = render_to_string ( text_template , context ) [EOL] [EOL] html_template = [string] . format ( template , template_name ) [EOL] html_body = render_to_string ( html_template , context ) [EOL] [EOL] from_email = settings . DEFAULT_FROM_EMAIL [EOL] reply_to = ( settings . SUPPORT_EMAIL , ) [EOL] [EOL] message = EmailMultiAlternatives ( subject = subject , from_email = from_email , to = to , reply_to = reply_to , body = text_body , alternatives = [ ( html_body , [string] ) ] ) [EOL] message . send ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from collections import namedtuple [EOL] [EOL] UUID_REGEX = [string] [EOL] [EOL] [EOL] class Range ( namedtuple ( [string] , [ [string] , [string] ] ) ) : [EOL] [EOL] def __contains__ ( self , value ) : [EOL] if self . min is None : [EOL] return value <= self . max [EOL] [EOL] if self . max is None : [EOL] return self . min <= value [EOL] [EOL] return self . min <= value <= self . max [EOL] [EOL] def __str__ ( self ) : [EOL] left = [string] if self . min is None else self . min [EOL] right = [string] if self . max is None else self . max [EOL] [EOL] return [string] . format ( left , right ) [EOL] [EOL] def __repr__ ( self ) : [EOL] return [string] . format ( self . min , self . max ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0