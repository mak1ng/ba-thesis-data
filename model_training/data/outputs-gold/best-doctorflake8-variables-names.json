from typing import Any [EOL] import typing [EOL] from conftest import run_validator_for_test_file , get_error_message [EOL] [EOL] [EOL] def test_always_ok_for_empty_file ( ) : [EOL] errors = run_validator_for_test_file ( [string] , use_strict_mode = True ) [EOL] assert not errors [EOL] [EOL] [EOL] def test_ok_good_names ( ) : [EOL] errors = run_validator_for_test_file ( [string] , use_strict_mode = True ) [EOL] assert not errors [EOL] [EOL] [EOL] def test_ok_for_short_names_file ( ) : [EOL] errors = run_validator_for_test_file ( [string] , use_strict_mode = True ) [EOL] assert len ( errors ) == [number] [EOL] errors = run_validator_for_test_file ( [string] , use_strict_mode = False ) [EOL] assert len ( errors ) == [number] [EOL] assert ( get_error_message ( errors [ [number] ] ) == [string] ) [EOL] [EOL] [EOL] def test_ok_for_commented_names_file ( ) : [EOL] errors = run_validator_for_test_file ( [string] , use_strict_mode = True ) [EOL] assert not errors [EOL] [EOL] [EOL] def test_ok_for_blacklisted_names_file ( ) : [EOL] errors = run_validator_for_test_file ( [string] , use_strict_mode = True ) [EOL] assert len ( errors ) == [number] [EOL] assert ( get_error_message ( errors [ [number] ] ) == [string] ) [EOL] [EOL] [EOL] def test_ok_for_strict_names_file ( ) : [EOL] errors = run_validator_for_test_file ( [string] , use_strict_mode = False ) [EOL] assert not errors [EOL] errors = run_validator_for_test_file ( [string] , use_strict_mode = True ) [EOL] assert len ( errors ) == [number] [EOL] [EOL] [EOL] def test_ok_for_builtins_names_file ( ) : [EOL] errors = run_validator_for_test_file ( [string] , use_strict_mode = True ) [EOL] assert len ( errors ) == [number] [EOL] [EOL] [EOL] def test_ok_for_class_level_names_file ( ) : [EOL] errors = run_validator_for_test_file ( [string] , use_strict_mode = True ) [EOL] assert len ( errors ) == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional [EOL] import typing [EOL] import _ast [EOL] import flake8_variables_names [EOL] import builtins [EOL] import ast [EOL] import os [EOL] from typing import Optional [EOL] [EOL] from flake8_variables_names . checker import VariableNamesChecker , ErrorTuple [EOL] [EOL] [EOL] def run_validator_for_test_file ( filename , use_strict_mode = None ) : [EOL] test_file_path = os . path . join ( os . path . dirname ( os . path . abspath ( __file__ ) ) , [string] , filename , ) [EOL] with open ( test_file_path , [string] ) as file_handler : [EOL] raw_content = file_handler . read ( ) [EOL] tree = ast . parse ( raw_content ) [EOL] checker = VariableNamesChecker ( tree = tree , filename = filename ) [EOL] if use_strict_mode is not None : [EOL] checker . use_strict_mode = use_strict_mode [EOL] [EOL] return list ( checker . run ( ) ) [EOL] [EOL] [EOL] def get_error_message ( error ) : [EOL] [docstring] [EOL] return error [ [number] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0
user_id = [number] [EOL] some_email = [string] [EOL]	$builtins.int$ 0 0 0 $builtins.str$ 0 0 0
type = [number] [EOL] ValueError = [string] [EOL]	$builtins.int$ 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [comment] [EOL]	0 0 0 0
i = [number] [EOL] result = [number] [EOL]	$builtins.int$ 0 0 0 $builtins.int$ 0 0 0
a = [number] [EOL] b = [number] [EOL] c = [number] [EOL] i = [number] [EOL]	$builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0
value = [number] [EOL] result = None [EOL]	$builtins.int$ 0 0 0 $None$ 0 0 0
	0
class A : [EOL] type = [number] [EOL] a = [string] [EOL]	0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0
from typing import Any , List , Union , Tuple [EOL] import ast [EOL] import typing [EOL] import _ast [EOL] import builtins [EOL] import ast [EOL] from typing import List , Tuple , Union [EOL] [EOL] from flake8_variables_names . list_helpers import flat [EOL] [EOL] [EOL] def get_var_names_from_assignment ( assignment_node , ) : [EOL] if isinstance ( assignment_node , ast . AnnAssign ) : [EOL] if isinstance ( assignment_node . target , ast . Name ) : [EOL] return [ ( assignment_node . target . id , assignment_node . target ) ] [EOL] elif isinstance ( assignment_node , ast . Assign ) : [EOL] names = [ t for t in assignment_node . targets if isinstance ( t , ast . Name ) ] [EOL] return [ ( n . id , n ) for n in names ] [EOL] return [ ] [EOL] [EOL] [EOL] def get_var_names_from_funcdef ( funcdef_node ) : [EOL] vars_info = [ ] [EOL] for arg in funcdef_node . args . args : [EOL] vars_info . append ( ( arg . arg , arg ) , ) [EOL] return vars_info [EOL] [EOL] [EOL] def get_var_names_from_for ( for_node ) : [EOL] if isinstance ( for_node . target , ast . Name ) : [EOL] return [ ( for_node . target . id , for_node . target ) ] [EOL] elif isinstance ( for_node . target , ast . Tuple ) : [EOL] return [ ( n . id , n ) for n in for_node . target . elts if isinstance ( n , ast . Name ) ] [EOL] return [ ] [EOL] [EOL] [EOL] def extract_all_variable_names ( ast_tree ) : [EOL] var_info = [ ] [EOL] assignments = [ n for n in ast . walk ( ast_tree ) if isinstance ( n , ast . Assign ) ] [EOL] var_info += flat ( [ get_var_names_from_assignment ( a ) for a in assignments ] ) [EOL] ann_assignments = [ n for n in ast . walk ( ast_tree ) if isinstance ( n , ast . AnnAssign ) ] [EOL] var_info += flat ( [ get_var_names_from_assignment ( a ) for a in ann_assignments ] ) [EOL] funcdefs = [ n for n in ast . walk ( ast_tree ) if isinstance ( n , ast . FunctionDef ) ] [EOL] var_info += flat ( [ get_var_names_from_funcdef ( f ) for f in funcdefs ] ) [EOL] fors = [ n for n in ast . walk ( ast_tree ) if isinstance ( n , ast . For ) ] [EOL] var_info += flat ( [ get_var_names_from_for ( f ) for f in fors ] ) [EOL] return var_info [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,ast.AST]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,ast.arg]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,ast.AST]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,ast.AST]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] from typing import List [EOL] [EOL] [EOL] def flat ( some_list ) : [EOL] return [ item for sublist in some_list for item in sublist ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List , Generator , Tuple , Type [EOL] import flake8_variables_names [EOL] import builtins [EOL] import optparse [EOL] import typing [EOL] import _ast [EOL] import builtins [EOL] [EOL] from optparse import OptionParser [EOL] from typing import Generator , Tuple , List [EOL] [EOL] from flake8_variables_names import __version__ as version [EOL] from flake8_variables_names . ast_helpers import extract_all_variable_names [EOL] [EOL] ErrorTuple = Tuple [ int , int , str , type ] [EOL] [EOL] [EOL] class VariableNamesChecker : [EOL] name = [string] [EOL] version = version [EOL] [EOL] use_strict_mode = False [EOL] [EOL] _variable_names_blacklist = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] _variable_names_blacklist_strict_addon = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] _single_letter_names_whitelist = [ [string] , [string] , [string] ] [EOL] _single_letter_names_whitelist_strict = [ [string] , [string] ] [EOL] [EOL] def __init__ ( self , tree , filename ) : [EOL] self . filename = filename [EOL] self . tree = tree [EOL] [EOL] @ property def single_letter_names_whitelist ( self ) : [EOL] return ( self . _single_letter_names_whitelist_strict [EOL] if self . use_strict_mode [EOL] else self . _single_letter_names_whitelist ) [EOL] [EOL] @ property def variable_names_blacklist ( self ) : [EOL] if self . use_strict_mode : [EOL] return self . _variable_names_blacklist + self . _variable_names_blacklist_strict_addon [EOL] else : [EOL] return self . _variable_names_blacklist [EOL] [EOL] @ classmethod def add_options ( cls , parser ) : [EOL] parser . add_option ( [string] , action = [string] , ) [EOL] [EOL] @ classmethod def parse_options ( cls , options ) : [EOL] cls . use_strict_mode = bool ( options . use_varnames_strict_mode ) [EOL] [EOL] def run ( self ) : [EOL] variables_names = extract_all_variable_names ( self . tree ) [EOL] for var_name , var_name_ast_node in variables_names : [EOL] errors = self . get_varname_errors ( var_name , var_name_ast_node ) [EOL] for error in errors : [EOL] yield ( * error , type ( self ) ) [EOL] [EOL] def get_varname_errors ( self , var_name , var_ast_node ) : [EOL] errors = [ ] [EOL] buildin_names = dir ( builtins ) [EOL] if ( len ( var_name ) == [number] [EOL] and var_name not in self . single_letter_names_whitelist ) : [EOL] errors . append ( ( var_ast_node . lineno , var_ast_node . col_offset , [string] . format ( var_name ) , ) ) [EOL] if var_name in self . variable_names_blacklist : [EOL] errors . append ( ( var_ast_node . lineno , var_ast_node . col_offset , [string] . format ( var_name ) , ) ) [EOL] if var_name in buildin_names : [EOL] errors . append ( ( var_ast_node . lineno , var_ast_node . col_offset , [string] , ) ) [EOL] [EOL] return errors [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Generator[ErrorTuple,None,None]$ 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,_ast.AST]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,_ast.AST]]$ 0 0 $typing.List[typing.Tuple[builtins.int,builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,builtins.int,builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 $typing.List[builtins.str]$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0
__version__ = [string] [EOL]	$builtins.str$ 0 0 0