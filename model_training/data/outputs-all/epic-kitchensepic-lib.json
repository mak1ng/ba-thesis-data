[comment] [EOL] [EOL] from typing import Any , Dict [EOL] import typing [EOL] import os [EOL] from setuptools import find_packages , setup [EOL] [EOL] here = os . path . abspath ( os . path . dirname ( __file__ ) ) [EOL] [EOL] about = { } [EOL] with open ( os . path . join ( here , [string] , [string] ) , [string] ) as f : [EOL] exec ( f . read ( ) , about ) [EOL] [EOL] [EOL] setup ( name = about [ [string] ] , description = about [ [string] ] , version = about [ [string] ] , packages = find_packages ( ) , entry_points = { [string] : [ [string] , [string] , ] } , install_requires = [ [string] , [string] , [string] , [string] ] , extras_require = { [string] : [ [string] , [string] , [string] , [string] , [string] ] , [string] : [ [string] , [string] ] , } , classifiers = [ [string] , [string] , [string] , [string] , [string] , ] , keywords = [ [string] , [string] , [string] , [string] , [string] ] , author = about [ [string] ] , author_email = about [ [string] ] , license = about [ [string] ] , url = [string] , project_urls = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pathlib [EOL] from pathlib import Path [EOL] [EOL] _dataset_dir = Path ( __file__ ) . parent / [string] [EOL] SEGMENT_DIR = _dataset_dir / [string] / [string] [EOL] MEDIA_DIR = _dataset_dir / [string] [EOL] ANNOTATIONS_DIR = _dataset_dir / [string] [EOL]	0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0
	0
	0
	0
	0
	0
import pandas as pd [EOL] import pytest [EOL] [EOL] from epic_kitchens import meta [EOL] [EOL] meta . _annotation_repository . http_folder . files [ [string] ] = pd . DataFrame ( { [string] : [ [number] , [number] ] , [string] : [ [string] , [string] ] , [string] : [ [ [string] , [string] ] , [ [string] , [string] , [string] ] ] , } ) [EOL] [EOL] [EOL] meta . _annotation_repository . http_folder . files [ [string] ] = pd . DataFrame ( { [string] : [ [number] , [number] , [number] ] , [string] : [ [string] , [string] , [string] ] , [string] : [ [ [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] ] , ] , } ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) ] ) def test_class_to_verb ( verb_class , verb ) : [EOL] assert meta . class_to_verb ( verb_class ) == verb [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) ] ) def test_class_to_verb ( verb_class , verb ) : [EOL] assert meta . verb_to_class ( verb ) == verb_class [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) ] ) def test_nouns_to_class ( noun_class , noun ) : [EOL] assert meta . noun_to_class ( noun ) == noun_class [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) ] ) def test_class_to_nouns ( noun_class , noun ) : [EOL] assert meta . class_to_noun ( noun_class ) == noun [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from epic_kitchens import meta [EOL] [EOL] [EOL] def test_default_version_is_1_5_0 ( ) : [EOL] assert meta . _annotation_repository . version == [string] [EOL] [EOL] [EOL] def test_changing_annotation_version ( ) : [EOL] version = [string] [EOL] assert meta . _annotation_repository . version != version [EOL] meta . set_version ( version ) [EOL] assert meta . _annotation_repository . version == version [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0