import pathlib [EOL] [docstring] [EOL] [EOL] from pathlib import Path [EOL] [EOL] import pytest [EOL] [EOL] [EOL] @ pytest . fixture ( ) def oss_artifact ( ) : [EOL] [docstring] [EOL] return Path ( [string] ) [EOL] [EOL] [EOL] @ pytest . fixture ( ) def enterprise_artifact ( ) : [EOL] [docstring] [EOL] return Path ( [string] ) [EOL] [EOL] [EOL] @ pytest . fixture ( ) def oss_1_9_artifact ( ) : [EOL] [docstring] [EOL] return Path ( [string] ) [EOL] [EOL] [EOL] @ pytest . fixture ( ) def enterprise_1_9_artifact ( ) : [EOL] [docstring] [EOL] return Path ( [string] ) [EOL] [EOL] [EOL] @ pytest . fixture ( ) def oss_1_10_artifact ( ) : [EOL] [docstring] [EOL] return Path ( [string] ) [EOL] [EOL] [EOL] @ pytest . fixture ( ) def enterprise_1_10_artifact ( ) : [EOL] [docstring] [EOL] return Path ( [string] ) [EOL] [EOL] [EOL] @ pytest . fixture ( ) def oss_1_11_artifact ( ) : [EOL] [docstring] [EOL] return Path ( [string] ) [EOL] [EOL] [EOL] @ pytest . fixture ( ) def enterprise_1_11_artifact ( ) : [EOL] [docstring] [EOL] return Path ( [string] ) [EOL] [EOL] [EOL] @ pytest . fixture ( ) def oss_1_12_artifact ( ) : [EOL] [docstring] [EOL] return Path ( [string] ) [EOL] [EOL] [EOL] @ pytest . fixture ( ) def enterprise_1_12_artifact ( ) : [EOL] [docstring] [EOL] return Path ( [string] ) [EOL] [EOL] [EOL] @ pytest . fixture ( ) def oss_1_13_artifact ( ) : [EOL] [docstring] [EOL] return Path ( [string] ) [EOL] [EOL] [EOL] @ pytest . fixture ( ) def enterprise_1_13_artifact ( ) : [EOL] [docstring] [EOL] return Path ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import py [EOL] import typing [EOL] import pathlib [EOL] [docstring] [EOL] [EOL] import shutil [EOL] from pathlib import Path [EOL] from tempfile import gettempdir [EOL] [EOL] import pytest [EOL] [comment] [EOL] [comment] [EOL] from py . path import local [comment] [EOL] [EOL] from dcos_installer_tools import DCOSVariant , get_dcos_installer_details [EOL] [EOL] [EOL] class TestOSS : [EOL] [docstring] [EOL] [EOL] def test_master ( self , oss_artifact , tmpdir , ) : [EOL] [docstring] [EOL] details = get_dcos_installer_details ( installer = oss_artifact , workspace_dir = Path ( str ( tmpdir ) ) , ) [EOL] [EOL] assert details . variant == DCOSVariant . OSS [EOL] assert details . version . startswith ( [string] ) [EOL] [EOL] def test_1_13 ( self , oss_1_13_artifact , tmpdir , ) : [EOL] [docstring] [EOL] details = get_dcos_installer_details ( installer = oss_1_13_artifact , workspace_dir = Path ( str ( tmpdir ) ) , ) [EOL] [EOL] assert details . variant == DCOSVariant . OSS [EOL] assert details . version . startswith ( [string] ) [EOL] [EOL] def test_1_12 ( self , oss_1_12_artifact , tmpdir , ) : [EOL] [docstring] [EOL] details = get_dcos_installer_details ( installer = oss_1_12_artifact , workspace_dir = Path ( str ( tmpdir ) ) , ) [EOL] [EOL] assert details . variant == DCOSVariant . OSS [EOL] assert details . version . startswith ( [string] ) [EOL] [EOL] def test_1_11 ( self , oss_1_11_artifact , tmpdir , ) : [EOL] [docstring] [EOL] details = get_dcos_installer_details ( installer = oss_1_11_artifact , workspace_dir = Path ( str ( tmpdir ) ) , ) [EOL] [EOL] assert details . variant == DCOSVariant . OSS [EOL] assert details . version . startswith ( [string] ) [EOL] [EOL] def test_1_10 ( self , oss_1_10_artifact , tmpdir , ) : [EOL] [docstring] [EOL] details = get_dcos_installer_details ( installer = oss_1_10_artifact , workspace_dir = Path ( str ( tmpdir ) ) , ) [EOL] [EOL] assert details . variant == DCOSVariant . OSS [EOL] assert details . version . startswith ( [string] ) [EOL] [EOL] def test_1_9 ( self , oss_1_9_artifact , tmpdir , ) : [EOL] [docstring] [EOL] details = get_dcos_installer_details ( installer = oss_1_9_artifact , workspace_dir = Path ( str ( tmpdir ) ) , ) [EOL] [EOL] assert details . variant == DCOSVariant . OSS [EOL] assert details . version . startswith ( [string] ) [EOL] [EOL] [EOL] class TestEnterprise : [EOL] [docstring] [EOL] [EOL] def test_master ( self , enterprise_artifact , tmpdir , ) : [EOL] [docstring] [EOL] details = get_dcos_installer_details ( installer = enterprise_artifact , workspace_dir = Path ( str ( tmpdir ) ) , ) [EOL] [EOL] assert details . variant == DCOSVariant . ENTERPRISE [EOL] assert details . version . startswith ( [string] ) [EOL] [EOL] def test_1_13 ( self , enterprise_1_13_artifact , tmpdir , ) : [EOL] [docstring] [EOL] details = get_dcos_installer_details ( installer = enterprise_1_13_artifact , workspace_dir = Path ( str ( tmpdir ) ) , ) [EOL] [EOL] assert details . variant == DCOSVariant . ENTERPRISE [EOL] assert details . version . startswith ( [string] ) [EOL] [EOL] def test_1_12 ( self , enterprise_1_12_artifact , tmpdir , ) : [EOL] [docstring] [EOL] details = get_dcos_installer_details ( installer = enterprise_1_12_artifact , workspace_dir = Path ( str ( tmpdir ) ) , ) [EOL] [EOL] assert details . variant == DCOSVariant . ENTERPRISE [EOL] assert details . version . startswith ( [string] ) [EOL] [EOL] def test_1_11 ( self , enterprise_1_11_artifact , tmpdir , ) : [EOL] [docstring] [EOL] details = get_dcos_installer_details ( installer = enterprise_1_11_artifact , workspace_dir = Path ( str ( tmpdir ) ) , ) [EOL] [EOL] assert details . variant == DCOSVariant . ENTERPRISE [EOL] assert details . version . startswith ( [string] ) [EOL] [EOL] def test_1_10 ( self , enterprise_1_10_artifact , tmpdir , ) : [EOL] [docstring] [EOL] details = get_dcos_installer_details ( installer = enterprise_1_10_artifact , workspace_dir = Path ( str ( tmpdir ) ) , ) [EOL] [EOL] assert details . variant == DCOSVariant . ENTERPRISE [EOL] assert details . version . startswith ( [string] ) [EOL] [EOL] def test_1_9 ( self , enterprise_1_9_artifact , tmpdir , ) : [EOL] [docstring] [EOL] details = get_dcos_installer_details ( installer = enterprise_1_9_artifact , workspace_dir = Path ( str ( tmpdir ) ) , ) [EOL] [EOL] assert details . variant == DCOSVariant . ENTERPRISE [EOL] assert details . version . startswith ( [string] ) [EOL] [EOL] [EOL] class TestParameters : [EOL] [docstring] [EOL] [EOL] def test_default_keep_extracted ( self , oss_artifact , tmpdir , ) : [EOL] [docstring] [EOL] workspace_dir = Path ( str ( tmpdir ) ) [EOL] get_dcos_installer_details ( installer = oss_artifact , workspace_dir = workspace_dir , ) [EOL] [EOL] assert not list ( workspace_dir . iterdir ( ) ) [EOL] [EOL] def test_keep_extracted_true ( self , oss_artifact , tmpdir , ) : [EOL] [docstring] [EOL] workspace_dir = Path ( str ( tmpdir ) ) [EOL] get_dcos_installer_details ( installer = oss_artifact , workspace_dir = workspace_dir , keep_extracted = True , ) [EOL] [EOL] genconf_dir = workspace_dir / [string] [EOL] assert genconf_dir . exists ( ) [EOL] ( _ , ) = workspace_dir . glob ( [string] ) [EOL] [EOL] def test_default_workspace_dir ( self , oss_artifact ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] workspace_dir = Path ( gettempdir ( ) ) [EOL] genconf_dir = workspace_dir / [string] [EOL] assert not genconf_dir . exists ( ) [EOL] assert not list ( workspace_dir . glob ( [string] ) ) [EOL] [EOL] get_dcos_installer_details ( installer = oss_artifact , keep_extracted = True , ) [EOL] assert genconf_dir . exists ( ) [EOL] shutil . rmtree ( path = str ( genconf_dir ) ) [EOL] [EOL] ( tarfile , ) = workspace_dir . glob ( [string] ) [EOL] tarfile . unlink ( ) [EOL] [EOL] def test_space_installer_path ( self , oss_artifact , tmpdir , ) : [EOL] [docstring] [EOL] tmpdir_path = Path ( str ( tmpdir ) ) [EOL] target_dir = tmpdir_path / [string] [EOL] target_dir . mkdir ( ) [EOL] new_artifact = target_dir / oss_artifact . name [EOL] shutil . copyfile ( src = str ( oss_artifact ) , dst = str ( new_artifact ) ) [EOL] [EOL] with pytest . raises ( ValueError ) as exc : [EOL] get_dcos_installer_details ( installer = new_artifact ) [EOL] [EOL] expected_message = ( [string] [string] ) [EOL] assert str ( exc . value ) == expected_message [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $pathlib.Path$ 0 $py.path.local$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $py.path.local$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $pathlib.Path$ 0 $py.path.local$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $py.path.local$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $pathlib.Path$ 0 $py.path.local$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $py.path.local$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $pathlib.Path$ 0 $py.path.local$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $py.path.local$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $pathlib.Path$ 0 $py.path.local$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $py.path.local$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $pathlib.Path$ 0 $py.path.local$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $py.path.local$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $pathlib.Path$ 0 $py.path.local$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $py.path.local$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $pathlib.Path$ 0 $py.path.local$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $py.path.local$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $pathlib.Path$ 0 $py.path.local$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $py.path.local$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $pathlib.Path$ 0 $py.path.local$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $py.path.local$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $pathlib.Path$ 0 $py.path.local$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $py.path.local$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $pathlib.Path$ 0 $py.path.local$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $py.path.local$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $pathlib.Path$ 0 $py.path.local$ 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 $py.path.local$ 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 $pathlib.Path$ 0 $py.path.local$ 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 $py.path.local$ 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $pathlib.Path$ 0 $py.path.local$ 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 $py.path.local$ 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0
[docstring] [EOL]	0 0
from typing import Any , Optional [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] [EOL] import os [EOL] import subprocess [EOL] import sys [EOL] from typing import Dict [comment] [EOL] [EOL] import pytest [EOL] [EOL] [EOL] def run_test ( test_pattern ) : [EOL] [docstring] [EOL] result = pytest . main ( [ [string] , [string] , [string] , [string] , test_pattern , [string] , [string] , ] , ) [EOL] sys . exit ( result ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] CI_PATTERN = os . environ . get ( [string] ) [EOL] if CI_PATTERN : [EOL] run_test ( test_pattern = CI_PATTERN ) [EOL] else : [EOL] subprocess . check_call ( [ [string] , [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] from . _version import get_versions [EOL] from . artifact_utils import DCOSVariant , get_dcos_installer_details [EOL] [EOL] __version__ = get_versions ( ) [ [string] ] [comment] [EOL] del get_versions [EOL] [EOL] __all__ = [ [string] , [string] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0