from typing import Union [EOL] import typing [EOL] import flask [EOL] from flask import Flask , redirect , render_template , request , session , url_for [EOL] from random import randint [EOL] [EOL] [EOL] app = Flask ( __name__ ) [EOL] app . secret_key = [string] [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] , [string] ] ) def index ( ) : [EOL] if [string] in request . method : [EOL] if [string] not in session : [EOL] session [ [string] ] = randint ( [number] , [number] ) [EOL] return render_template ( [string] ) [EOL] [EOL] elif [string] in request . method : [EOL] session [ [string] ] = int ( request . form [ [string] ] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] else : [EOL] return [string] [EOL] [EOL] [EOL] @ app . route ( [string] ) def reset ( ) : [EOL] session . pop ( [string] ) if [string] in session else ... [EOL] session . pop ( [string] ) if [string] in session else ... [EOL] return redirect ( url_for ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Pattern [EOL] import typing [EOL] import re [EOL] from flask import flash , redirect , url_for [EOL] [EOL] BLANK_VALIDATION = re . compile ( [string] ) [EOL] FIRST_NAME_VALIDATION = re . compile ( [string] ) [EOL] LAST_NAME_VALIDATION = re . compile ( [string] ) [EOL] EMAIL_VALIDATION = re . compile ( [string] ) [EOL] [EOL] [EOL] def validate_registration ( form ) : [EOL] [comment] [EOL] for field in form : [EOL] if BLANK_VALIDATION . match ( form [ field ] ) : [EOL] flash ( [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] [comment] [EOL] if not FIRST_NAME_VALIDATION . match ( form [ [string] ] ) : [EOL] flash ( [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] if not LAST_NAME_VALIDATION . match ( form [ [string] ] ) : [EOL] flash ( [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] [comment] [EOL] if len ( form [ [string] ] ) < [number] : [EOL] flash ( [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] [comment] [EOL] if not EMAIL_VALIDATION . match ( form [ [string] ] ) : [EOL] flash ( [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] [comment] [EOL] if form [ [string] ] != form [ [string] ] : [EOL] flash ( [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] ... [EOL] [EOL] [EOL] [EOL] def validate_login ( form ) : [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] ... [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import builtins [EOL] from typing import Any , Dict , Union [EOL] import typing [EOL] import flask [EOL] import os [EOL] [EOL] from flask import Flask , redirect , render_template , request , session , url_for [EOL] from flask_bcrypt import Bcrypt [EOL] [EOL] from . mysqlconnection import connect_to_mysql [EOL] from . validations import validate_registration [EOL] [EOL] app = Flask ( __name__ ) [EOL] app . secret_key = os . urandom ( [number] ) [EOL] bcrypt = Bcrypt ( app ) [EOL] [EOL] [EOL] @ app . route ( [string] ) def index ( ) : [EOL] return render_template ( [string] ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def login ( ) : [EOL] if request . method == [string] : [EOL] login_email = request . form [ [string] ] [EOL] [EOL] mysql = connect_to_mysql ( [string] ) [EOL] query = [string] [EOL] data = { [string] : login_email } [EOL] [EOL] result = mysql . query_db ( query , data ) [EOL] [EOL] pw_hash_result = result [ [number] ] [ [string] ] [EOL] [EOL] bcrypt . check_password_hash ( pw_hash_result , request . form [ [string] ] ) [EOL] else : [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] [EOL] @ app . route ( [string] ) def logout ( ) : [EOL] ... [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def register ( ) : [EOL] if request . method == [string] : [EOL] validate_registration ( request . form ) [EOL] [EOL] pw_hash = bcrypt . generate_password_hash ( request . form [ [string] ] ) [EOL] [EOL] mysql = connect_to_mysql ( [string] ) [comment] [EOL] query = [string] [string] [string] [EOL] data = { [string] : request . form [ [string] ] , [string] : request . form [ [string] ] , [string] : request . form [ [string] ] , [string] : pw_hash } [EOL] mysql . query_db ( query , data ) [EOL] else : [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] return redirect ( url_for ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] import builtins [EOL] from typing import Any , Dict , Union [EOL] import typing [EOL] import flask [EOL] from flask import ( Flask , flash , redirect , render_template , request , session , url_for ) [EOL] from flask_bcrypt import Bcrypt [EOL] [EOL] from . mysqlconnection import connectToMySQL [EOL] from . validations import validate_registration , validate_login [EOL] [EOL] app = Flask ( __name__ ) [EOL] app . secret_key = [string] [EOL] bcrypt = Bcrypt ( app ) [EOL] [EOL] [EOL] @ app . route ( [string] ) def index ( ) : [EOL] return render_template ( [string] ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def login ( ) : [EOL] if request . method == [string] : [EOL] login_email = request . form [ [string] ] [EOL] [EOL] mysql = connectToMySQL ( [string] ) [EOL] query = [string] [EOL] data = { [string] : login_email } [EOL] [EOL] result = mysql . query_db ( query , data ) [EOL] [EOL] pw_hash = result [ [number] ] [ [string] ] [EOL] [EOL] bcrypt . check_password_hash ( pw_hash , request . form [ [string] ] ) [EOL] else : [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def register ( ) : [EOL] if request . method == [string] : [EOL] validate_registration ( request . form ) [EOL] [EOL] pw_hash = bcrypt . generate_password_hash ( request . form [ [string] ] ) [EOL] [EOL] mysql = connectToMySQL ( [string] ) [comment] [EOL] query = [string] [EOL] data = { [string] : request . form [ [string] ] , [string] : request . form [ [string] ] , [string] : request . form [ [string] ] , [string] : pw_hash } [EOL] mysql . query_db ( query , data ) [EOL] else : [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] return redirect ( url_for ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import flask [EOL] from flask import Flask , render_template [EOL] [EOL] [EOL] app = Flask ( __name__ ) [EOL] [EOL] [EOL] @ app . route ( [string] , defaults = { [string] : [number] , [string] : [string] } ) @ app . route ( [string] , defaults = { [string] : [string] } ) @ app . route ( [string] ) def play ( boxes , color ) : [EOL] return render_template ( [string] , boxes = boxes , color = color ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Union [EOL] import typing [EOL] import flask [EOL] from flask import Flask , render_template , redirect , request , session , url_for [EOL] [EOL] [EOL] app = Flask ( __name__ ) [EOL] app . secret_key = [string] [EOL] [EOL] [EOL] @ app . route ( [string] ) def index ( ) : [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Union [EOL] import typing [EOL] import flask [EOL] from flask import Flask , redirect , render_template , session , url_for [EOL] [EOL] [EOL] app = Flask ( __name__ ) [EOL] app . secret_key = [string] [EOL] [EOL] [EOL] @ app . route ( [string] ) def index ( ) : [EOL] if [string] not in session : [EOL] session [ [string] ] = [number] [EOL] else : [EOL] session [ [string] ] += [number] [EOL] return render_template ( [string] ) [EOL] [EOL] [EOL] @ app . route ( [string] ) def destroy_session ( ) : [EOL] session . clear ( ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] [EOL] @ app . route ( [string] ) def double ( ) : [EOL] session [ [string] ] += [number] [EOL] return redirect ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import Python [EOL] class Node : [EOL] def __init__ ( self , value ) : [EOL] self . value = value [EOL] self . prev = None [EOL] self . next = None [EOL] [EOL] def __str__ ( self ) : [EOL] return f' [string] { self . value } [string] { self . prev } [string] { self . next }' [EOL] [EOL] [EOL] class DList : [EOL] def __init__ ( self ) : [EOL] self . head = None [EOL] [EOL] def add_head ( self , value ) : [EOL] if self . head is None : [EOL] node = Node ( value ) [EOL] node . prev = None [EOL] self . head = node [EOL] else : [EOL] node = Node ( value ) [EOL] self . head . prev = node [EOL] node . prev = None [EOL] node . next = self . head [EOL] self . head = node [EOL] return self [EOL] [EOL] def add_tail ( self , value ) : [EOL] if self . head is None : [EOL] node = Node ( value ) [EOL] node . prev = None [EOL] self . head = node [EOL] else : [EOL] node = Node ( value ) [EOL] runner = self . head [EOL] while runner . next is not None : [EOL] runner = runner . next [EOL] runner . next = node [EOL] node . prev = runner [EOL] node . next = None [EOL] return self [EOL] [EOL] def print_list ( self ) : [EOL] runner = self . head [EOL] while runner : [EOL] print ( runner . value ) [EOL] runner = runner . next [EOL] print ( [string] ) [EOL] return self [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Python.OOP.DLists.main.Node$ 0 0 0 0 0 0 $Python.OOP.DLists.main.Node$ 0 0 0 0 0 0 0 0 0 $Python.OOP.DLists.main.Node$ 0 0 0 0 $Python.OOP.DLists.main.Node$ 0 0 0 0 0 0 0 0 0 0 0 0 $Python.OOP.DLists.main.Node$ 0 $Python.OOP.DLists.main.Node$ 0 0 0 0 0 $Python.OOP.DLists.main.Node$ 0 0 0 0 0 0 0 0 0 0 0 $Python.OOP.DLists.main.Node$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Python.OOP.DLists.main.Node$ 0 0 0 0 0 0 $Python.OOP.DLists.main.Node$ 0 0 0 0 0 0 0 0 0 $Python.OOP.DLists.main.Node$ 0 0 0 0 $Python.OOP.DLists.main.Node$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Python.OOP.DLists.main.Node$ 0 $Python.OOP.DLists.main.Node$ 0 0 0 0 0 $Python.OOP.DLists.main.Node$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import Python [EOL] class MathDojo : [EOL] def __init__ ( self ) : [EOL] self . result = [number] [EOL] [EOL] def add ( self , * args ) : [EOL] for number in args : [EOL] self . result += number [EOL] return self [EOL] [EOL] def sub ( self , * args ) : [EOL] for number in args : [EOL] self . result -= number [EOL] return self [EOL] [EOL] def __str__ ( self ) : [EOL] return f'{ self . result }' [EOL] [EOL] [EOL] def main ( ) : [EOL] x = MathDojo ( ) [EOL] x . add ( [number] ) . add ( [number] , [number] , [number] ) . sub ( [number] , [number] ) [EOL] print ( x ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
[EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] def a ( ) : [EOL] return [number] [EOL] [EOL] [EOL] print ( a ( ) ) [EOL] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def b ( ) : [EOL] return [number] [EOL] [EOL] [EOL] print ( b ( ) + b ( ) ) [EOL] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def c ( ) : [EOL] return [number] [EOL] return [number] [EOL] [EOL] [EOL] print ( c ( ) ) [EOL] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def d ( ) : [EOL] return [number] [EOL] print ( [number] ) [EOL] [EOL] [EOL] print ( d ( ) ) [EOL] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def e ( ) : [EOL] print ( [number] ) [EOL] [EOL] [EOL] z = e ( ) [EOL] print ( z ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def f ( b , c ) : [EOL] print ( b + c ) [EOL] [EOL] [EOL] print ( f ( [number] , [number] ) + f ( [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def g ( b , c ) : [EOL] return str ( b ) + str ( c ) [EOL] [EOL] [EOL] print ( g ( [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def h ( ) : [EOL] b = [number] [EOL] print ( b ) [EOL] if b < [number] : [EOL] return [number] [EOL] else : [EOL] return [number] [EOL] return [number] [EOL] [EOL] [EOL] print ( h ) [EOL] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def i ( b , c ) : [EOL] if b < c : [EOL] return [number] [EOL] else : [EOL] return [number] [EOL] return [number] [EOL] [EOL] [EOL] print ( i ( [number] , [number] ) ) [EOL] print ( i ( [number] , [number] ) ) [EOL] print ( i ( [number] , [number] ) + i ( [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def j ( b , c ) : [EOL] return b + c [EOL] return [number] [EOL] [EOL] [EOL] print ( j ( [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] y = [number] [EOL] print ( y ) [EOL] [EOL] [EOL] def k ( ) : [EOL] y = [number] [EOL] print ( y ) [EOL] [EOL] [EOL] print ( y ) [EOL] k ( ) [EOL] print ( y ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] x = [number] [EOL] print ( x ) [EOL] [EOL] [EOL] def l ( ) : [EOL] x = [number] [EOL] print ( x ) [EOL] return x [EOL] [EOL] [EOL] print ( x ) [EOL] l ( ) [EOL] print ( x ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] w = [number] [EOL] print ( w ) [EOL] [EOL] [EOL] def m ( ) : [EOL] w = [number] [EOL] print ( w ) [EOL] return w [EOL] [EOL] [EOL] print ( w ) [EOL] w = m ( ) [EOL] print ( w ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def n ( ) : [EOL] print ( [number] ) [EOL] o ( ) [EOL] print ( [number] ) [EOL] [EOL] [EOL] def o ( ) : [EOL] print ( [number] ) [EOL] [EOL] [EOL] n ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def p ( ) : [EOL] print ( [number] ) [EOL] x = q ( ) [EOL] print ( x ) [EOL] return [number] [EOL] [EOL] [EOL] def q ( ) : [EOL] print ( [number] ) [EOL] return [number] [EOL] [EOL] [EOL] x = p ( ) [EOL] print ( x ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [EOL] [EOL] def set_prefs ( prefs ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] prefs [ [string] ] = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] prefs [ [string] ] = True [EOL] prefs [ [string] ] = False [EOL] [EOL] [comment] [EOL] prefs [ [string] ] = True [EOL] [comment] [EOL] prefs [ [string] ] = [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] prefs [ [string] ] = True [EOL] [EOL] [comment] [EOL] prefs [ [string] ] = True [EOL] [EOL] [comment] [EOL] prefs [ [string] ] = [number] [EOL] [EOL] [comment] [EOL] prefs [ [string] ] = True [EOL] prefs [ [string] ] = False [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] prefs [ [string] ] = [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] prefs [ [string] ] = [ ] [EOL] [EOL] [comment] [EOL] prefs [ [string] ] = True [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] prefs [ [string] ] = False [EOL] [EOL] [comment] [EOL] [comment] [EOL] prefs [ [string] ] = False [EOL] [EOL] [comment] [EOL] [comment] [EOL] prefs [ [string] ] = False [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] prefs [ [string] ] = False [EOL] [EOL] [comment] [EOL] [comment] [EOL] prefs [ [string] ] = True [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] prefs [ [string] ] = False [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] prefs [ [string] ] = [string] [EOL] [EOL] [EOL] def project_opened ( project ) : [EOL] [docstring] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class MainConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Any , Dict [EOL] import typing [EOL] import Python [EOL] from django . shortcuts import HttpResponseRedirect , redirect , render [EOL] from django . views . decorators . http import require_POST [EOL] from . models import SurveyModel [EOL] from . forms import SurveyForm [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def index ( request ) : [EOL] form = SurveyForm ( ) [EOL] context = { [string] : form } [EOL] return render ( request , [string] , context ) [EOL] [EOL] [EOL] def result ( request ) : [EOL] entry = SurveyModel . objects . get ( pk = request . session [ [string] ] ) [EOL] context = { [string] : entry } [EOL] return render ( request , [string] , context ) [EOL] [EOL] [EOL] @ require_POST def process ( request ) : [EOL] survey_form = SurveyForm ( request . POST ) [EOL] [EOL] if survey_form . is_valid ( ) : [EOL] new_survey = survey_form . save ( ) [EOL] request . session [ [string] ] = new_survey . id [EOL] [EOL] return redirect ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import Python [EOL] from django . db import models [EOL] [EOL] [comment] [EOL] [EOL] [EOL] class SurveyModel ( models . Model ) : [EOL] [comment] [EOL] SILICON_VALLEY = [string] [EOL] SEATTLE = [string] [EOL] LOS_ANGELES = [string] [EOL] DALLAS = [string] [EOL] CHICAGO = [string] [EOL] TULSA = [string] [EOL] TYSONS_CORNER = [string] [EOL] EAST_BAY = [string] [EOL] ONLINE = [string] [EOL] LOCATION_CHOICES = ( ( SILICON_VALLEY , [string] ) , ( SEATTLE , [string] ) , ( LOS_ANGELES , [string] ) , ( DALLAS , [string] ) , ( CHICAGO , [string] ) , ( TULSA , [string] ) , ( TYSONS_CORNER , [string] ) , ( EAST_BAY , [string] ) , ( ONLINE , [string] ) ) [EOL] [EOL] [comment] [EOL] PYTHON = [string] [EOL] RUBY = [string] [EOL] JAVASCRIPT = [string] [EOL] FAVORTIE_LANGUAGE_CHOICES = ( ( PYTHON , [string] ) , ( RUBY , [string] ) , ( JAVASCRIPT , [string] ) ) [EOL] [EOL] [comment] [EOL] your_name = models . CharField ( max_length = [number] ) [EOL] location = models . CharField ( max_length = [number] , choices = LOCATION_CHOICES , default = SILICON_VALLEY ) [EOL] favorite_language = models . CharField ( max_length = [number] , choices = FAVORTIE_LANGUAGE_CHOICES , default = PYTHON ) [EOL] comment = models . CharField ( max_length = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[Python.Django.survey_form.main.models.SurveyModel]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[Python.Django.survey_form.main.models.SurveyModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[Python.Django.survey_form.main.models.SurveyModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[Python.Django.survey_form.main.models.SurveyModel]$ 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] from . import views [EOL] [EOL] urlpatterns = [ path ( [string] , views . index , name = [string] ) , path ( [string] , views . process , name = [string] ) , path ( [string] , views . result , name = [string] ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Type [EOL] import typing [EOL] import Python [EOL] from django import forms [EOL] from . models import SurveyModel [EOL] [EOL] [EOL] class SurveyForm ( forms . ModelForm ) : [EOL] class Meta : [EOL] model = SurveyModel [EOL] fields = ( [string] , [string] , [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[Python.Django.survey_form.main.models.SurveyModel]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] from django . contrib import admin [EOL] from django . urls import include , path [EOL] [EOL] urlpatterns = [ path ( [string] , include ( [string] ) ) , path ( [string] , admin . site . urls ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from django . contrib . auth . models import User [EOL] [EOL] [EOL] class EmailAuthBackend ( object ) : [EOL] [docstring] [EOL] def authenticate ( self , request , username = None , password = None ) : [EOL] try : [EOL] user = User . objects . get ( email = username ) [EOL] if user . check_password ( password ) : [EOL] return user [EOL] return None [EOL] except User . DoesNotExist : [EOL] return None [EOL] [EOL] def get_user ( self , user_id ) : [EOL] try : [EOL] return User . objects . get ( pk = user_id ) [EOL] except User . DoesNotExist : [EOL] return None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class AccountConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
import builtins [EOL] from typing import Tuple , Type [EOL] import typing [EOL] import Python [EOL] import Example [EOL] from django import forms [EOL] from django . contrib . auth . models import User [EOL] from . models import Profile [EOL] [EOL] [EOL] class LoginForm ( forms . Form ) : [EOL] username = forms . CharField ( ) [EOL] password = forms . CharField ( widget = forms . PasswordInput ) [EOL] [EOL] [EOL] class UserRegistrationForm ( forms . ModelForm ) : [EOL] password = forms . CharField ( label = [string] , widget = forms . PasswordInput ) [EOL] password2 = forms . CharField ( label = [string] , widget = forms . PasswordInput ) [EOL] [EOL] class Meta : [EOL] model = User [EOL] fields = ( [string] , [string] , [string] ) [EOL] [EOL] def clean_password2 ( self ) : [EOL] cd = self . cleaned_data [EOL] if cd [ [string] ] != cd [ [string] ] : [EOL] raise forms . ValidationError ( [string] ) [EOL] return cd [ [string] ] [EOL] [EOL] [EOL] class UserEditForm ( forms . ModelForm ) : [EOL] class Meta : [EOL] model = User [EOL] fields = ( [string] , [string] , [string] ) [EOL] [EOL] [EOL] class ProfileEditForm ( forms . ModelForm ) : [EOL] class Meta : [EOL] model = Profile [EOL] fields = ( [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import Python [EOL] import Example [EOL] from django . http import HttpResponse , JsonResponse [EOL] from django . shortcuts import render [EOL] from django . contrib . auth import authenticate , login [EOL] from django . contrib . auth . decorators import login_required [EOL] from django . contrib import messages [EOL] from django . shortcuts import get_object_or_404 [EOL] from django . views . decorators . http import require_POST [EOL] from django . contrib . auth . models import User [EOL] from common . decorators import ajax_required [EOL] from actions . utils import create_action [EOL] from actions . models import Action [EOL] from . forms import LoginForm , UserRegistrationForm , UserEditForm , ProfileEditForm [EOL] from . models import Profile , Contact [EOL] [EOL] [EOL] def user_login ( request ) : [EOL] if request . method == [string] : [EOL] form = LoginForm ( request . POST ) [EOL] if form . is_valid ( ) : [EOL] cd = form . cleaned_data [EOL] user = authenticate ( request , username = cd [ [string] ] , password = cd [ [string] ] ) [EOL] if user is not None : [EOL] if user . is_active : [EOL] login ( request , user ) [EOL] return HttpResponse ( [string] [string] ) [EOL] else : [EOL] return HttpResponse ( [string] ) [EOL] else : [EOL] return HttpResponse ( [string] ) [EOL] else : [EOL] form = LoginForm ( ) [EOL] return render ( request , [string] , { [string] : form } ) [EOL] [EOL] [EOL] @ login_required def dashboard ( request ) : [EOL] [comment] [EOL] actions = Action . objects . exclude ( user = request . user ) [EOL] following_ids = request . user . following . values_list ( [string] , flat = True ) [EOL] if following_ids : [EOL] [comment] [EOL] actions = actions . filter ( user_id__in = following_ids ) [EOL] actions = actions . select_related ( [string] , [string] ) . prefetch_related ( [string] ) [ : [number] ] [EOL] [EOL] return render ( request , [string] , { [string] : [string] , [string] : actions } ) [EOL] [EOL] [EOL] def register ( request ) : [EOL] if request . method == [string] : [EOL] user_form = UserRegistrationForm ( request . POST ) [EOL] if user_form . is_valid ( ) : [EOL] [comment] [EOL] new_user = user_form . save ( commit = False ) [EOL] [comment] [EOL] new_user . set_password ( user_form . cleaned_data [ [string] ] ) [EOL] [comment] [EOL] new_user . save ( ) [EOL] [comment] [EOL] Profile . objects . create ( user = new_user ) [EOL] create_action ( new_user , [string] ) [EOL] return render ( request , [string] , { [string] : new_user } ) [EOL] else : [EOL] user_form = UserRegistrationForm ( ) [EOL] return render ( request , [string] , { [string] : user_form } ) [EOL] [EOL] [EOL] @ login_required def edit ( request ) : [EOL] if request . method == [string] : [EOL] user_form = UserEditForm ( instance = request . user , data = request . POST ) [EOL] profile_form = ProfileEditForm ( instance = request . user . profile , data = request . POST , files = request . FILES ) [EOL] if user_form . is_valid ( ) and profile_form . is_valid ( ) : [EOL] user_form . save ( ) [EOL] profile_form . save ( ) [EOL] messages . success ( request , [string] ) [EOL] else : [EOL] messages . error ( request , [string] ) [EOL] else : [EOL] user_form = UserEditForm ( instance = request . user ) [EOL] profile_form = ProfileEditForm ( instance = request . user . profile ) [EOL] return render ( request , [string] , { [string] : user_form , [string] : profile_form } ) [EOL] [EOL] [EOL] @ login_required def user_list ( request ) : [EOL] users = User . objects . filter ( is_active = True ) [EOL] return render ( request , [string] , { [string] : [string] , [string] : users } ) [EOL] [EOL] [EOL] @ login_required def user_detail ( request , username ) : [EOL] user = get_object_or_404 ( User , username = username , is_active = True ) [EOL] return render ( request , [string] , { [string] : [string] , [string] : user } ) [EOL] [EOL] [EOL] @ ajax_required @ require_POST @ login_required def user_follow ( request ) : [EOL] user_id = request . POST . get ( [string] ) [EOL] action = request . POST . get ( [string] ) [EOL] if user_id and action : [EOL] try : [EOL] user = User . objects . get ( id = user_id ) [EOL] if action == [string] : [EOL] Contact . objects . get_or_create ( user_from = request . user , user_to = user ) [EOL] create_action ( request . user , [string] , user ) [EOL] else : [EOL] Contact . objects . filter ( user_from = request . user , user_to = user ) . delete ( ) [EOL] return JsonResponse ( { [string] : [string] } ) [EOL] except User . DoesNotExist : [EOL] return JsonResponse ( { [string] : [string] } ) [EOL] return JsonResponse ( { [string] : [string] } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] from django . contrib import admin [EOL] from . models import Profile [EOL] [EOL] [EOL] @ admin . register ( Profile ) class ProfileAdmin ( admin . ModelAdmin ) : [EOL] list_display = [ [string] , [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0
from typing import Tuple , Type [EOL] import typing [EOL] import Python [EOL] import Example [EOL] from django . db import models [EOL] from django . conf import settings [EOL] from django . contrib . auth . models import User [EOL] [EOL] [EOL] class Profile ( models . Model ) : [EOL] user = models . OneToOneField ( settings . AUTH_USER_MODEL , on_delete = models . CASCADE ) [EOL] date_of_birth = models . DateField ( blank = True , null = True ) [EOL] photo = models . ImageField ( upload_to = [string] , blank = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . user . username ) [EOL] [EOL] [EOL] class Contact ( models . Model ) : [EOL] user_from = models . ForeignKey ( [string] , related_name = [string] , on_delete = models . CASCADE ) [EOL] user_to = models . ForeignKey ( [string] , related_name = [string] , on_delete = models . CASCADE ) [EOL] created = models . DateTimeField ( auto_now_add = True , db_index = True ) [EOL] [EOL] class Meta : [EOL] ordering = ( [string] , ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . user_from , self . user_to ) [EOL] [EOL] [EOL] [comment] [EOL] User . add_to_class ( [string] , models . ManyToManyField ( [string] , through = Contact , related_name = [string] , symmetrical = False ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ActionsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from django . shortcuts import render [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Type [EOL] import typing [EOL] import Python [EOL] import Example [EOL] from django . db import models [EOL] from django . contrib . contenttypes . models import ContentType [EOL] from django . contrib . contenttypes . fields import GenericForeignKey [EOL] [EOL] [EOL] class Action ( models . Model ) : [EOL] user = models . ForeignKey ( [string] , related_name = [string] , db_index = True , on_delete = models . CASCADE ) [EOL] target_ct = models . ForeignKey ( ContentType , blank = True , null = True , related_name = [string] , on_delete = models . CASCADE ) [EOL] target_id = models . PositiveIntegerField ( null = True , blank = True , db_index = True ) [EOL] target = GenericForeignKey ( [string] , [string] ) [EOL] verb = models . CharField ( max_length = [number] ) [EOL] created = models . DateTimeField ( auto_now_add = True , db_index = True ) [EOL] [EOL] class Meta : [EOL] ordering = ( [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple [EOL] import typing [EOL] from django . contrib import admin [EOL] from . models import Action [EOL] [EOL] [EOL] @ admin . register ( Action ) class ActionAdmin ( admin . ModelAdmin ) : [EOL] list_display = ( [string] , [string] , [string] , [string] ) [EOL] list_filter = ( [string] , ) [EOL] search_fields = ( [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import Python [EOL] import Example [EOL] import datetime [EOL] from django . utils import timezone [EOL] from django . contrib . contenttypes . models import ContentType [EOL] from . models import Action [EOL] [EOL] [EOL] def create_action ( user , verb , target = None ) : [EOL] [comment] [EOL] now = timezone . now ( ) [EOL] last_minute = now - datetime . timedelta ( seconds = [number] ) [EOL] similar_actions = Action . objects . filter ( user_id = user . id , verb = verb , created__gte = last_minute ) [EOL] if target : [EOL] target_ct = ContentType . objects . get_for_model ( target ) [EOL] similar_actions = similar_actions . filter ( target_ct = target_ct , target_id = target . id ) [EOL] if not similar_actions : [EOL] [comment] [EOL] action = Action ( user = user , verb = verb , target = target ) [EOL] action . save ( ) [EOL] return True [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . db . models . signals import m2m_changed [EOL] from django . dispatch import receiver [EOL] from . models import Image [EOL] [EOL] [EOL] @ receiver ( m2m_changed , sender = Image . users_like . through ) def users_like_changed ( sender , instance , ** kwargs ) : [EOL] instance . total_likes = instance . users_like . count ( ) [EOL] instance . save ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] from django . contrib import admin [EOL] from . models import Image [EOL] [EOL] [EOL] @ admin . register ( Image ) class ImageAdmin ( admin . ModelAdmin ) : [EOL] list_display = [ [string] , [string] , [string] , [string] ] [EOL] list_filter = [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ImagesConfig ( AppConfig ) : [EOL] name = [string] [EOL] [EOL] def ready ( self ) : [EOL] [comment] [EOL] import images . signals [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class CoursesConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django import forms [EOL] from django . forms . models import inlineformset_factory [EOL] from . models import Course , Module [EOL] [EOL] [EOL] ModuleFormSet = inlineformset_factory ( Course , Module , fields = [ [string] , [string] ] , extra = [number] , can_delete = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from django import template [EOL] [EOL] [EOL] register = template . Library ( ) [EOL] [EOL] [EOL] @ register . filter def model_name ( obj ) : [EOL] try : [EOL] return obj . _meta . model_name [EOL] except AttributeError : [EOL] return None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import List , Type [EOL] import typing [EOL] import Python [EOL] import Example [EOL] from rest_framework import serializers [EOL] from . . models import Subject , Course , Module [EOL] from . . models import Content [EOL] [EOL] [EOL] class SubjectSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = Subject [EOL] fields = [ [string] , [string] , [string] ] [EOL] [EOL] [EOL] class ModuleSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = Module [EOL] fields = [ [string] , [string] , [string] ] [EOL] [EOL] [EOL] class CourseSerializer ( serializers . ModelSerializer ) : [EOL] modules = ModuleSerializer ( many = True , read_only = True ) [EOL] [EOL] class Meta : [EOL] model = Course [EOL] fields = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] class ItemRelatedField ( serializers . RelatedField ) : [EOL] def to_representation ( self , value ) : [EOL] return value . render ( ) [EOL] [EOL] [EOL] class ContentSerializer ( serializers . ModelSerializer ) : [EOL] item = ItemRelatedField ( read_only = True ) [EOL] [EOL] class Meta : [EOL] model = Content [EOL] fields = [ [string] , [string] ] [EOL] [EOL] [EOL] class ModuleWithContentsSerializer ( serializers . ModelSerializer ) : [EOL] contents = ContentSerializer ( many = True ) [EOL] [EOL] class Meta : [EOL] model = Module [EOL] fields = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] class CourseWithContentsSerializer ( serializers . ModelSerializer ) : [EOL] modules = ModuleWithContentsSerializer ( many = True ) [EOL] [EOL] class Meta : [EOL] model = Course [EOL] fields = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from rest_framework . permissions import BasePermission [EOL] [EOL] [EOL] class IsEnrolled ( BasePermission ) : [EOL] def has_object_permission ( self , request , view , obj ) : [EOL] return obj . students . filter ( id = request . user . id ) . exists ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class StudentsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Type [EOL] import typing [EOL] import Python [EOL] import Example [EOL] from django import forms [EOL] from courses . models import Course [EOL] [EOL] [EOL] class CourseEnrollForm ( forms . Form ) : [EOL] course = forms . ModelChoiceField ( queryset = Course . objects . all ( ) , widget = forms . HiddenInput ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
import builtins [EOL] from typing import Any , Type [EOL] import typing [EOL] import Python [EOL] import Example [EOL] from django . shortcuts import render , get_object_or_404 [EOL] from django . core . paginator import Paginator , EmptyPage , PageNotAnInteger [EOL] from django . views . generic import ListView [EOL] from . models import Post [EOL] [EOL] [EOL] def post_list ( request ) : [EOL] object_list = Post . published . all ( ) [EOL] paginator = Paginator ( object_list , [number] ) [comment] [EOL] page = request . GET . get ( [string] ) [EOL] try : [EOL] posts = paginator . page ( page ) [EOL] except PageNotAnInteger : [EOL] [comment] [EOL] posts = paginator . page ( [number] ) [EOL] except EmptyPage : [EOL] [comment] [EOL] posts = paginator . page ( paginator . num_pages ) [EOL] return render ( request , [string] , { [string] : page , [string] : posts } ) [EOL] [EOL] [EOL] def post_detail ( request , year , month , day , post ) : [EOL] post = get_object_or_404 ( Post , slug = post , status = [string] , publish__year = year , publish__month = month , publish__day = day ) [EOL] return render ( request , [string] , { [string] : post } ) [EOL] [EOL] [EOL] class PostListView ( ListView ) : [EOL] queryset = Post . published . all ( ) [EOL] context_object_name = [string] [EOL] paginate_by = [number] [EOL] template_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] from . import views [EOL] [EOL] [EOL] app_name = [string] [EOL] urlpatterns = [ path ( [string] , views . PostListView . as_view ( ) , name = [string] ) , path ( [string] , views . post_detail , name = [string] ) , ]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class BlogConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
	0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path , include [EOL] from django . contrib import admin [EOL] [EOL] [EOL] urlpatterns = [ path ( [string] , admin . site . urls ) , path ( [string] , include ( [string] , namespace = [string] ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import List [EOL] import typing [EOL] from django . contrib import admin [EOL] from . models import Profile [EOL] [EOL] [EOL] @ admin . register ( Profile ) class ProfileAdmin ( admin . ModelAdmin ) : [EOL] list_display = [ [string] , [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class AccountConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Type [EOL] import typing [EOL] import Python [EOL] import Example [EOL] from django . db import models [EOL] from django . conf import settings [EOL] [EOL] [EOL] class Profile ( models . Model ) : [EOL] user = models . OneToOneField ( settings . AUTH_USER_MODEL , on_delete = models . CASCADE ) [EOL] date_of_birth = models . DateField ( blank = True , null = True ) [EOL] photo = models . ImageField ( upload_to = [string] , blank = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . user . username ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
import builtins [EOL] from typing import List , Any , Dict , Union [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] [comment] [EOL] BASE_DIR = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] SECRET_KEY = [string] [EOL] [EOL] [comment] [EOL] DEBUG = True [EOL] [EOL] ALLOWED_HOSTS = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] INSTALLED_APPS = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] MIDDLEWARE = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] ROOT_URLCONF = [string] [EOL] [EOL] TEMPLATES = [ { [string] : [string] , [string] : [ ] , [string] : True , [string] : { [string] : [ [string] , [string] , [string] , [string] , ] , } , } , ] [EOL] [EOL] WSGI_APPLICATION = [string] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] DATABASES = { [string] : { [string] : [string] , [string] : os . path . join ( BASE_DIR , [string] ) , } } [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] AUTH_PASSWORD_VALIDATORS = [ { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , ] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] LANGUAGE_CODE = [string] [EOL] [EOL] TIME_ZONE = [string] [EOL] [EOL] USE_I18N = True [EOL] [EOL] USE_L10N = True [EOL] [EOL] USE_TZ = True [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] STATIC_URL = [string] [EOL] [EOL] MEDIA_URL = [string] [EOL] MEDIA_ROOT = os . path . join ( BASE_DIR , [string] ) [EOL] [EOL] [EOL] LOGIN_REDIRECT_URL = [string] [EOL] LOGIN_URL = [string] [EOL] LOGOUT_URL = [string] [EOL] [EOL] [EOL] EMAIL_BACKEND = [string] [EOL] [EOL] [EOL] AUTHENTICATION_BACKENDS = [ [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [comment] [EOL] SOCIAL_AUTH_FACEBOOK_KEY = [string] [comment] [EOL] SOCIAL_AUTH_FACEBOOK_SECRET = [string] [comment] [EOL] SOCIAL_AUTH_FACEBOOK_SCOPE = [ [string] ] [EOL] [EOL] SOCIAL_AUTH_TWITTER_KEY = [string] [comment] [EOL] SOCIAL_AUTH_TWITTER_SECRET = [string] [comment] [EOL] [EOL] SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = [string] [comment] [EOL] SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = [string] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ImagesConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] from django . contrib import admin [EOL] from . models import Image [EOL] [EOL] [EOL] @ admin . register ( Image ) class ImageAdmin ( admin . ModelAdmin ) : [EOL] list_display = [ [string] , [string] , [string] , [string] ] [EOL] list_filter = [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . shortcuts import render , redirect , get_object_or_404 [EOL] from django . contrib . auth . decorators import login_required [EOL] from django . contrib import messages [EOL] from django . http import JsonResponse [EOL] from django . views . decorators . http import require_POST [EOL] from django . http import HttpResponse [EOL] from django . core . paginator import Paginator , EmptyPage , PageNotAnInteger [EOL] from . forms import ImageCreateForm [EOL] from . models import Image [EOL] from common . decorators import ajax_required [EOL] [EOL] [EOL] @ login_required def image_create ( request ) : [EOL] if request . method == [string] : [EOL] [comment] [EOL] form = ImageCreateForm ( data = request . POST ) [EOL] if form . is_valid ( ) : [EOL] [comment] [EOL] cd = form . cleaned_data [EOL] new_item = form . save ( commit = False ) [EOL] [EOL] [comment] [EOL] new_item . user = request . user [EOL] new_item . save ( ) [EOL] messages . success ( request , [string] ) [EOL] [EOL] [comment] [EOL] return redirect ( new_item . get_absolute_url ( ) ) [EOL] else : [EOL] [comment] [EOL] form = ImageCreateForm ( data = request . GET ) [EOL] [EOL] return render ( request , [string] , { [string] : [string] , [string] : form } ) [EOL] [EOL] [EOL] def image_detail ( request , id , slug ) : [EOL] image = get_object_or_404 ( Image , id = id , slug = slug ) [EOL] return render ( request , [string] , { [string] : [string] , [string] : image } ) [EOL] [EOL] [EOL] @ ajax_required @ login_required @ require_POST def image_like ( request ) : [EOL] image_id = request . POST . get ( [string] ) [EOL] action = request . POST . get ( [string] ) [EOL] if image_id and action : [EOL] try : [EOL] image = Image . objects . get ( id = image_id ) [EOL] if action == [string] : [EOL] image . users_like . add ( request . user ) [EOL] else : [EOL] image . users_like . remove ( request . user ) [EOL] return JsonResponse ( { [string] : [string] } ) [EOL] except : [EOL] pass [EOL] return JsonResponse ( { [string] : [string] } ) [EOL] [EOL] [EOL] @ login_required def image_list ( request ) : [EOL] images = Image . objects . all ( ) [EOL] paginator = Paginator ( images , [number] ) [EOL] page = request . GET . get ( [string] ) [EOL] try : [EOL] images = paginator . page ( page ) [EOL] except PageNotAnInteger : [EOL] [comment] [EOL] images = paginator . page ( [number] ) [EOL] except EmptyPage : [EOL] if request . is_ajax ( ) : [EOL] [comment] [EOL] [comment] [EOL] return HttpResponse ( [string] ) [EOL] [comment] [EOL] images = paginator . page ( paginator . num_pages ) [EOL] if request . is_ajax ( ) : [EOL] return render ( request , [string] , { [string] : [string] , [string] : images } ) [EOL] return render ( request , [string] , { [string] : [string] , [string] : images } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from django . http import HttpResponseBadRequest [EOL] [EOL] [EOL] def ajax_required ( f ) : [EOL] def wrap ( request , * args , ** kwargs ) : [EOL] if not request . is_ajax ( ) : [EOL] return HttpResponseBadRequest ( ) [EOL] return f ( request , * args , ** kwargs ) [EOL] wrap . __doc__ = f . __doc__ [EOL] wrap . __name__ = f . __name__ [EOL] return wrap [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class CoursesConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import List , Tuple , Type , Dict [EOL] import typing [EOL] import Python [EOL] import Example [EOL] from django . contrib import admin [EOL] from . models import Subject , Course , Module [EOL] [EOL] [EOL] @ admin . register ( Subject ) class SubjectAdmin ( admin . ModelAdmin ) : [EOL] list_display = [ [string] , [string] ] [EOL] prepopulated_fields = { [string] : ( [string] , ) } [EOL] [EOL] [EOL] class ModuleInline ( admin . StackedInline ) : [EOL] model = Module [EOL] [EOL] [EOL] @ admin . register ( Course ) class CourseAdmin ( admin . ModelAdmin ) : [EOL] list_display = [ [string] , [string] , [string] ] [EOL] list_filter = [ [string] , [string] ] [EOL] search_fields = [ [string] , [string] ] [EOL] prepopulated_fields = { [string] : ( [string] , ) } [EOL] inlines = [ ModuleInline ]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] from django . db import models [EOL] from django . core . exceptions import ObjectDoesNotExist [EOL] [EOL] [EOL] class OrderField ( models . PositiveIntegerField ) : [EOL] def __init__ ( self , for_fields = None , * args , ** kwargs ) : [EOL] self . for_fields = for_fields [EOL] super ( OrderField , self ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] def pre_save ( self , model_instance , add ) : [EOL] if getattr ( model_instance , self . attname ) is None : [EOL] [comment] [EOL] try : [EOL] qs = self . model . objects . all ( ) [EOL] if self . for_fields : [EOL] [comment] [EOL] [comment] [EOL] query = { field : getattr ( model_instance , field ) for field in self . for_fields } [EOL] qs = qs . filter ( ** query ) [EOL] [comment] [EOL] last_item = qs . latest ( self . attname ) [EOL] value = last_item . order + [number] [EOL] except ObjectDoesNotExist : [EOL] value = [number] [EOL] setattr ( model_instance , self . attname , value ) [EOL] return value [EOL] else : [EOL] return super ( OrderField , self ) . pre_save ( model_instance , add ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from django import forms [EOL] from django . forms . models import inlineformset_factory [EOL] from . models import Course , Module [EOL] [EOL] [EOL] ModuleFormSet = inlineformset_factory ( Course , Module , fields = [ [string] , [string] ] , extra = [number] , can_delete = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from django import template [EOL] [EOL] [EOL] register = template . Library ( ) [EOL] [EOL] [EOL] @ register . filter def model_name ( obj ) : [EOL] try : [EOL] return obj . _meta . model_name [EOL] except AttributeError : [EOL] return None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import Python [EOL] import Example [EOL] from django import forms [EOL] from courses . models import Course [EOL] [EOL] [EOL] class CourseEnrollForm ( forms . Form ) : [EOL] course = forms . ModelChoiceField ( queryset = Course . objects . all ( ) , widget = forms . HiddenInput ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class StudentsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import List , Tuple , Type [EOL] import typing [EOL] import Python [EOL] import Example [EOL] from django import forms [EOL] [EOL] [EOL] PRODUCT_QUANTITY_CHOICES = [ ( i , str ( i ) ) for i in range ( [number] , [number] ) ] [EOL] [EOL] [EOL] class CartAddProductForm ( forms . Form ) : [EOL] quantity = forms . TypedChoiceField ( choices = PRODUCT_QUANTITY_CHOICES , coerce = int ) [EOL] update = forms . BooleanField ( required = False , initial = False , widget = forms . HiddenInput ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class CartConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] from . import views [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ path ( [string] , views . cart_detail , name = [string] ) , path ( [string] , views . cart_add , name = [string] ) , path ( [string] , views . cart_remove , name = [string] ) , ]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from . cart import Cart [EOL] [EOL] [EOL] def cart ( request ) : [EOL] return { [string] : Cart ( request ) } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import Python [EOL] import Example [EOL] from django . shortcuts import render , redirect , get_object_or_404 [EOL] from django . views . decorators . http import require_POST [EOL] from shop . models import Product [EOL] from . cart import Cart [EOL] from . forms import CartAddProductForm [EOL] [EOL] [EOL] @ require_POST def cart_add ( request , product_id ) : [EOL] cart = Cart ( request ) [EOL] product = get_object_or_404 ( Product , id = product_id ) [EOL] form = CartAddProductForm ( request . POST ) [EOL] if form . is_valid ( ) : [EOL] cd = form . cleaned_data [EOL] cart . add ( product = product , quantity = cd [ [string] ] , update_quantity = cd [ [string] ] ) [EOL] return redirect ( [string] ) [EOL] [EOL] [EOL] def cart_remove ( request , product_id ) : [EOL] cart = Cart ( request ) [EOL] product = get_object_or_404 ( Product , id = product_id ) [EOL] cart . remove ( product ) [EOL] return redirect ( [string] ) [EOL] [EOL] [EOL] def cart_detail ( request ) : [EOL] cart = Cart ( request ) [EOL] for item in cart : [EOL] item [ [string] ] = CartAddProductForm ( initial = { [string] : item [ [string] ] , [string] : True } ) [EOL] return render ( request , [string] , { [string] : cart } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class OrdersConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
import builtins [EOL] from typing import List , Type [EOL] import typing [EOL] import Python [EOL] import Example [EOL] from django import forms [EOL] from . models import Order [EOL] [EOL] [EOL] class OrderCreateForm ( forms . ModelForm ) : [EOL] class Meta : [EOL] model = Order [EOL] fields = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
[comment] [EOL] from . celery import app as celery_app [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
import builtins [EOL] from typing import List , Any , Dict , Union [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] [comment] [EOL] BASE_DIR = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] SECRET_KEY = [string] [EOL] [EOL] [comment] [EOL] DEBUG = True [EOL] [EOL] ALLOWED_HOSTS = [ ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] INSTALLED_APPS = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] MIDDLEWARE = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] ROOT_URLCONF = [string] [EOL] [EOL] TEMPLATES = [ { [string] : [string] , [string] : [ ] , [string] : True , [string] : { [string] : [ [string] , [string] , [string] , [string] , [string] , ] , } , } , ] [EOL] [EOL] WSGI_APPLICATION = [string] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] DATABASES = { [string] : { [string] : [string] , [string] : os . path . join ( BASE_DIR , [string] ) , } } [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] AUTH_PASSWORD_VALIDATORS = [ { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , ] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] LANGUAGE_CODE = [string] [EOL] [EOL] TIME_ZONE = [string] [EOL] [EOL] USE_I18N = True [EOL] [EOL] USE_L10N = True [EOL] [EOL] USE_TZ = True [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] STATIC_URL = [string] [EOL] [EOL] MEDIA_URL = [string] [EOL] MEDIA_ROOT = os . path . join ( BASE_DIR , [string] ) [EOL] [EOL] [EOL] CART_SESSION_ID = [string] [EOL] [EOL] EMAIL_BACKEND = [string] [EOL] [EOL] [EOL] [comment] [EOL] BRAINTREE_MERCHANT_ID = [string] [EOL] BRAINTREE_PUBLIC_KEY = [string] [EOL] BRAINTREE_PRIVATE_KEY = [string] [EOL] [EOL] from braintree import Configuration , Environment [EOL] [EOL] Configuration . configure ( Environment . Sandbox , BRAINTREE_MERCHANT_ID , BRAINTREE_PUBLIC_KEY , BRAINTREE_PRIVATE_KEY ) [EOL] [EOL] STATIC_ROOT = os . path . join ( BASE_DIR , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import os [EOL] from celery import Celery [EOL] [EOL] [comment] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] app = Celery ( [string] ) [EOL] [EOL] app . config_from_object ( [string] , namespace = [string] ) [EOL] app . autodiscover_tasks ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ShopConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
	0
from typing import List , Any [EOL] import typing [EOL] import io [EOL] import braintree [EOL] from django . shortcuts import render , redirect , get_object_or_404 [EOL] from orders . models import Order [EOL] from django . template . loader import render_to_string [EOL] from django . core . mail import EmailMessage [EOL] from django . conf import settings [EOL] import weasyprint [EOL] from io import BytesIO [EOL] [EOL] def payment_process ( request ) : [EOL] order_id = request . session . get ( [string] ) [EOL] order = get_object_or_404 ( Order , id = order_id ) [EOL] [EOL] if request . method == [string] : [EOL] [comment] [EOL] nonce = request . POST . get ( [string] , None ) [EOL] [comment] [EOL] result = braintree . Transaction . sale ( { [string] : [string] . format ( order . get_total_cost ( ) ) , [string] : nonce , [string] : { [string] : True } } ) [EOL] if result . is_success : [EOL] [comment] [EOL] order . paid = True [EOL] [comment] [EOL] order . braintree_id = result . transaction . id [EOL] order . save ( ) [EOL] [EOL] [comment] [EOL] subject = [string] . format ( order . id ) [EOL] message = [string] [EOL] email = EmailMessage ( subject , message , [string] , [ order . email ] ) [EOL] [EOL] [comment] [EOL] html = render_to_string ( [string] , { [string] : order } ) [EOL] out = BytesIO ( ) [EOL] stylesheets = [ weasyprint . CSS ( settings . STATIC_ROOT + [string] ) ] [EOL] weasyprint . HTML ( string = html ) . write_pdf ( out , stylesheets = stylesheets ) [EOL] [comment] [EOL] email . attach ( [string] . format ( order . id ) , out . getvalue ( ) , [string] ) [EOL] [comment] [EOL] email . send ( ) [EOL] [EOL] return redirect ( [string] ) [EOL] else : [EOL] return redirect ( [string] ) [EOL] else : [EOL] [comment] [EOL] client_token = braintree . ClientToken . generate ( ) [EOL] return render ( request , [string] , { [string] : order , [string] : client_token } ) [EOL] [EOL] [EOL] def payment_done ( request ) : [EOL] return render ( request , [string] ) [EOL] [EOL] [EOL] def payment_canceled ( request ) : [EOL] return render ( request , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class PaymentConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] from . import views [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ path ( [string] , views . payment_process , name = [string] ) , path ( [string] , views . payment_done , name = [string] ) , path ( [string] , views . payment_canceled , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class BlogConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path , include [EOL] from django . contrib import admin [EOL] [EOL] [EOL] urlpatterns = [ path ( [string] , admin . site . urls ) , path ( [string] , include ( [string] , namespace = [string] ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] from django . contrib import admin [EOL] from django . urls import path , include [EOL] from django . contrib . auth import views as auth_views [EOL] from courses . views import CourseListView [EOL] from django . conf import settings [EOL] from django . conf . urls . static import static [EOL] [EOL] [EOL] urlpatterns = [ path ( [string] , auth_views . LoginView . as_view ( ) , name = [string] ) , path ( [string] , auth_views . LogoutView . as_view ( ) , name = [string] ) , path ( [string] , admin . site . urls ) , path ( [string] , include ( [string] ) ) , path ( [string] , CourseListView . as_view ( ) , name = [string] ) , path ( [string] , include ( [string] ) ) , path ( [string] , include ( [string] , namespace = [string] ) ) , ] [EOL] [EOL] if settings . DEBUG : [EOL] urlpatterns += static ( settings . MEDIA_URL , document_root = settings . MEDIA_ROOT ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import builtins [EOL] from typing import Dict [EOL] import typing [EOL] from . base import * [EOL] [EOL] DEBUG = True [EOL] [EOL] DATABASES = { [string] : { [string] : [string] , [string] : os . path . join ( BASE_DIR , [string] ) , } } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Tuple , Literal , Dict [EOL] import typing_extensions [EOL] import typing [EOL] from . base import * [EOL] [EOL] DEBUG = True [EOL] [EOL] ADMINS = ( ( [string] , [string] ) , ) [EOL] [EOL] ALLOWED_HOSTS = [ [string] ] [EOL] [EOL] DATABASES = { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } } [EOL] [EOL] SECURE_SSL_REDIRECT = True [EOL] CSRF_COOKIE_SECURE = True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import Python [EOL] import Example [EOL] from django import forms [EOL] from courses . models import Course [EOL] [EOL] [EOL] class CourseEnrollForm ( forms . Form ) : [EOL] course = forms . ModelChoiceField ( queryset = Course . objects . all ( ) , widget = forms . HiddenInput ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class StudentsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
import builtins [EOL] from typing import Any , Type [EOL] import typing [EOL] import Python [EOL] import Example [EOL] from django . urls import reverse_lazy [EOL] from django . views . generic . edit import CreateView [EOL] from django . contrib . auth . forms import UserCreationForm [EOL] from django . contrib . auth import authenticate , login [EOL] from django . views . generic . edit import FormView [EOL] from django . contrib . auth . mixins import LoginRequiredMixin [EOL] from django . views . generic . list import ListView [EOL] from django . views . generic . detail import DetailView [EOL] from courses . models import Course [EOL] from . forms import CourseEnrollForm [EOL] [EOL] [EOL] class StudentRegistrationView ( CreateView ) : [EOL] template_name = [string] [EOL] form_class = UserCreationForm [EOL] success_url = reverse_lazy ( [string] ) [EOL] [EOL] def form_valid ( self , form ) : [EOL] result = super ( StudentRegistrationView , self ) . form_valid ( form ) [EOL] cd = form . cleaned_data [EOL] user = authenticate ( username = cd [ [string] ] , password = cd [ [string] ] ) [EOL] login ( self . request , user ) [EOL] return result [EOL] [EOL] [EOL] class StudentEnrollCourseView ( LoginRequiredMixin , FormView ) : [EOL] course = None [EOL] form_class = CourseEnrollForm [EOL] [EOL] def form_valid ( self , form ) : [EOL] self . course = form . cleaned_data [ [string] ] [EOL] self . course . students . add ( self . request . user ) [EOL] return super ( StudentEnrollCourseView , self ) . form_valid ( form ) [EOL] [EOL] def get_success_url ( self ) : [EOL] return reverse_lazy ( [string] , args = [ self . course . id ] ) [EOL] [EOL] [EOL] class StudentCourseListView ( LoginRequiredMixin , ListView ) : [EOL] model = Course [EOL] template_name = [string] [EOL] [EOL] def get_queryset ( self ) : [EOL] qs = super ( StudentCourseListView , self ) . get_queryset ( ) [EOL] return qs . filter ( students__in = [ self . request . user ] ) [EOL] [EOL] [EOL] class StudentCourseDetailView ( DetailView ) : [EOL] model = Course [EOL] template_name = [string] [EOL] [EOL] def get_queryset ( self ) : [EOL] qs = super ( StudentCourseDetailView , self ) . get_queryset ( ) [EOL] return qs . filter ( students__in = [ self . request . user ] ) [EOL] [EOL] def get_context_data ( self , ** kwargs ) : [EOL] context = super ( StudentCourseDetailView , self ) . get_context_data ( ** kwargs ) [EOL] [comment] [EOL] course = self . get_object ( ) [EOL] if [string] in self . kwargs : [EOL] [comment] [EOL] context [ [string] ] = course . modules . get ( id = self . kwargs [ [string] ] ) [EOL] else : [EOL] [comment] [EOL] context [ [string] ] = course . modules . all ( ) [ [number] ] [EOL] return context [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
	0
	0
from typing import List , Any [EOL] import typing [EOL] import datetime [EOL] import datetime [EOL] from django . conf import settings [EOL] from django . core . management . base import BaseCommand [EOL] from django . core . mail import send_mass_mail [EOL] from django . contrib . auth . models import User [EOL] from django . db . models import Count [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , dest = [string] , type = int ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] emails = [ ] [EOL] subject = [string] [EOL] date_joined = datetime . date . today ( ) - datetime . timedelta ( days = options [ [string] ] ) [EOL] users = User . objects . annotate ( course_count = Count ( [string] ) ) . filter ( course_count = [number] , date_joined__lte = date_joined ) [EOL] for user in users : [EOL] message = [string] . format ( user . first_name ) [EOL] emails . append ( ( subject , message , settings . DEFAULT_FROM_EMAIL , [ user . email ] ) ) [EOL] send_mass_mail ( emails ) [EOL] self . stdout . write ( [string] . format ( len ( emails ) ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $builtins.str$ 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django import forms [EOL] from django . forms . models import inlineformset_factory [EOL] from . models import Course , Module [EOL] [EOL] [EOL] ModuleFormSet = inlineformset_factory ( Course , Module , fields = [ [string] , [string] ] , extra = [number] , can_delete = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . urls import reverse [EOL] from django . shortcuts import get_object_or_404 , redirect [EOL] from . models import Course [EOL] [EOL] [EOL] def subdomain_course_middleware ( get_response ) : [EOL] [docstring] [EOL] def middleware ( request ) : [EOL] host_parts = request . get_host ( ) . split ( [string] ) [EOL] if len ( host_parts ) > [number] and host_parts [ [number] ] != [string] : [EOL] [comment] [EOL] course = get_object_or_404 ( Course , slug = host_parts [ [number] ] ) [EOL] course_url = reverse ( [string] , args = [ course . slug ] ) [EOL] [comment] [EOL] url = [string] . format ( request . scheme , [string] . join ( host_parts [ [number] : ] ) , course_url ) [EOL] return redirect ( url ) [EOL] [EOL] response = get_response ( request ) [EOL] return response [EOL] [EOL] return middleware [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class CoursesConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import List , Type [EOL] import typing [EOL] import Python [EOL] import Example [EOL] from django . db import models [EOL] from django . contrib . auth . models import User [EOL] from django . contrib . contenttypes . models import ContentType [EOL] from django . contrib . contenttypes . fields import GenericForeignKey [EOL] from . fields import OrderField [EOL] from django . template . loader import render_to_string [EOL] from django . utils . safestring import mark_safe [EOL] [EOL] [EOL] class Subject ( models . Model ) : [EOL] title = models . CharField ( max_length = [number] ) [EOL] slug = models . SlugField ( max_length = [number] , unique = True ) [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . title [EOL] [EOL] [EOL] class Course ( models . Model ) : [EOL] owner = models . ForeignKey ( User , related_name = [string] , on_delete = models . CASCADE ) [EOL] subject = models . ForeignKey ( Subject , related_name = [string] , on_delete = models . CASCADE ) [EOL] title = models . CharField ( max_length = [number] ) [EOL] slug = models . SlugField ( max_length = [number] , unique = True ) [EOL] overview = models . TextField ( ) [EOL] created = models . DateTimeField ( auto_now_add = True ) [EOL] students = models . ManyToManyField ( User , related_name = [string] , blank = True ) [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . title [EOL] [EOL] [EOL] class Module ( models . Model ) : [EOL] course = models . ForeignKey ( Course , related_name = [string] , on_delete = models . CASCADE ) [EOL] title = models . CharField ( max_length = [number] ) [EOL] description = models . TextField ( blank = True ) [EOL] order = OrderField ( blank = True , for_fields = [ [string] ] ) [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . order , self . title ) [EOL] [EOL] [EOL] class Content ( models . Model ) : [EOL] module = models . ForeignKey ( Module , related_name = [string] , on_delete = models . CASCADE ) [EOL] content_type = models . ForeignKey ( ContentType , limit_choices_to = { [string] : ( [string] , [string] , [string] , [string] ) } , on_delete = models . CASCADE ) [EOL] object_id = models . PositiveIntegerField ( ) [EOL] item = GenericForeignKey ( [string] , [string] ) [EOL] order = OrderField ( blank = True , for_fields = [ [string] ] ) [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] [EOL] [EOL] class ItemBase ( models . Model ) : [EOL] owner = models . ForeignKey ( User , related_name = [string] , on_delete = models . CASCADE ) [EOL] title = models . CharField ( max_length = [number] ) [EOL] created = models . DateTimeField ( auto_now_add = True ) [EOL] updated = models . DateTimeField ( auto_now = True ) [EOL] [EOL] class Meta : [EOL] abstract = True [EOL] [EOL] def __str__ ( self ) : [EOL] return self . title [EOL] [EOL] def render ( self ) : [EOL] return render_to_string ( [string] . format ( self . _meta . model_name ) , { [string] : self } ) [EOL] [EOL] [EOL] class Text ( ItemBase ) : [EOL] content = models . TextField ( ) [EOL] [EOL] class File ( ItemBase ) : [EOL] file = models . FileField ( upload_to = [string] ) [EOL] [EOL] class Image ( ItemBase ) : [EOL] file = models . FileField ( upload_to = [string] ) [EOL] [EOL] class Video ( ItemBase ) : [EOL] url = models . URLField ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from rest_framework . permissions import BasePermission [EOL] [EOL] [EOL] class IsEnrolled ( BasePermission ) : [EOL] def has_object_permission ( self , request , view , obj ) : [EOL] return obj . students . filter ( id = request . user . id ) . exists ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , Type [EOL] import typing [EOL] import Python [EOL] import Example [EOL] from rest_framework import generics [EOL] from . . models import Subject [EOL] from . serializers import SubjectSerializer [EOL] from django . shortcuts import get_object_or_404 [EOL] from rest_framework . views import APIView [EOL] from rest_framework . response import Response [EOL] from . . models import Course [EOL] from rest_framework . authentication import BasicAuthentication [EOL] from rest_framework . permissions import IsAuthenticated [EOL] from rest_framework import viewsets [EOL] from . serializers import CourseSerializer [EOL] from rest_framework . decorators import detail_route [EOL] from . permissions import IsEnrolled [EOL] from . serializers import CourseWithContentsSerializer [EOL] [EOL] [EOL] class SubjectListView ( generics . ListAPIView ) : [EOL] queryset = Subject . objects . all ( ) [EOL] serializer_class = SubjectSerializer [EOL] [EOL] [EOL] class SubjectDetailView ( generics . RetrieveAPIView ) : [EOL] queryset = Subject . objects . all ( ) [EOL] serializer_class = SubjectSerializer [EOL] [EOL] [EOL] class CourseViewSet ( viewsets . ReadOnlyModelViewSet ) : [EOL] queryset = Course . objects . all ( ) [EOL] serializer_class = CourseSerializer [EOL] [EOL] @ detail_route ( methods = [ [string] ] , authentication_classes = [ BasicAuthentication ] , permission_classes = [ IsAuthenticated ] ) def enroll ( self , request , * args , ** kwargs ) : [EOL] course = self . get_object ( ) [EOL] course . students . add ( request . user ) [EOL] return Response ( { [string] : True } ) [EOL] [EOL] @ detail_route ( methods = [ [string] ] , serializer_class = CourseWithContentsSerializer , authentication_classes = [ BasicAuthentication ] , permission_classes = [ IsAuthenticated , IsEnrolled ] ) def contents ( self , request , * args , ** kwargs ) : [EOL] return self . retrieve ( request , * args , ** kwargs ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django import template [EOL] [EOL] [EOL] register = template . Library ( ) [EOL] [EOL] [EOL] @ register . filter def model_name ( obj ) : [EOL] try : [EOL] return obj . _meta . model_name [EOL] except AttributeError : [EOL] return None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] import courses . fields [EOL] from django . db import migrations , models [EOL] import django . db . models . deletion [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterModelOptions ( name = [string] , options = { [string] : [ [string] ] } , ) , migrations . AlterModelOptions ( name = [string] , options = { [string] : [ [string] ] } , ) , migrations . AddField ( model_name = [string] , name = [string] , field = courses . fields . OrderField ( blank = True , default = [number] ) , preserve_default = False , ) , migrations . AddField ( model_name = [string] , name = [string] , field = courses . fields . OrderField ( blank = True , default = [number] ) , preserve_default = False , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] from . import views [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ path ( [string] , views . product_list , name = [string] ) , path ( [string] , views . product_list , name = [string] ) , path ( [string] , views . product_detail , name = [string] ) , ]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Type [EOL] import typing [EOL] import Python [EOL] import Example [EOL] from django . db import models [EOL] from django . urls import reverse [EOL] [EOL] class Category ( models . Model ) : [EOL] name = models . CharField ( max_length = [number] , db_index = True ) [EOL] slug = models . SlugField ( max_length = [number] , unique = True ) [EOL] [EOL] class Meta : [EOL] ordering = ( [string] , ) [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] def get_absolute_url ( self ) : [EOL] return reverse ( [string] , args = [ self . slug ] ) [EOL] [EOL] [EOL] class Product ( models . Model ) : [EOL] category = models . ForeignKey ( Category , related_name = [string] , on_delete = models . CASCADE ) [EOL] name = models . CharField ( max_length = [number] , db_index = True ) [EOL] slug = models . SlugField ( max_length = [number] , db_index = True ) [EOL] image = models . ImageField ( upload_to = [string] , blank = True ) [EOL] description = models . TextField ( blank = True ) [EOL] price = models . DecimalField ( max_digits = [number] , decimal_places = [number] ) [EOL] available = models . BooleanField ( default = True ) [EOL] created = models . DateTimeField ( auto_now_add = True ) [EOL] updated = models . DateTimeField ( auto_now = True ) [EOL] [EOL] class Meta : [EOL] ordering = ( [string] , ) [EOL] index_together = ( ( [string] , [string] ) , ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] def get_absolute_url ( self ) : [EOL] return reverse ( [string] , args = [ self . id , self . slug ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ShopConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Any [EOL] import typing [EOL] from django . shortcuts import render , get_object_or_404 [EOL] from . models import Category , Product [EOL] from cart . forms import CartAddProductForm [EOL] [EOL] [EOL] def product_list ( request , category_slug = None ) : [EOL] category = None [EOL] categories = Category . objects . all ( ) [EOL] products = Product . objects . filter ( available = True ) [EOL] if category_slug : [EOL] category = get_object_or_404 ( Category , slug = category_slug ) [EOL] products = products . filter ( category = category ) [EOL] return render ( request , [string] , { [string] : category , [string] : categories , [string] : products } ) [EOL] [EOL] [EOL] def product_detail ( request , id , slug ) : [EOL] product = get_object_or_404 ( Product , id = id , slug = slug , available = True ) [EOL] cart_product_form = CartAddProductForm ( ) [EOL] return render ( request , [string] , { [string] : product , [string] : cart_product_form } ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class CartConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from decimal import Decimal [EOL] from django . conf import settings [EOL] from shop . models import Product [EOL] [EOL] [EOL] class Cart ( object ) : [EOL] [EOL] def __init__ ( self , request ) : [EOL] [docstring] [EOL] self . session = request . session [EOL] cart = self . session . get ( settings . CART_SESSION_ID ) [EOL] if not cart : [EOL] [comment] [EOL] cart = self . session [ settings . CART_SESSION_ID ] = { } [EOL] self . cart = cart [EOL] [EOL] def __iter__ ( self ) : [EOL] [docstring] [EOL] product_ids = self . cart . keys ( ) [EOL] [comment] [EOL] products = Product . objects . filter ( id__in = product_ids ) [EOL] [EOL] cart = self . cart . copy ( ) [EOL] for product in products : [EOL] cart [ str ( product . id ) ] [ [string] ] = product [EOL] [EOL] for item in cart . values ( ) : [EOL] item [ [string] ] = Decimal ( item [ [string] ] ) [EOL] item [ [string] ] = item [ [string] ] * item [ [string] ] [EOL] yield item [EOL] [EOL] def __len__ ( self ) : [EOL] [docstring] [EOL] return sum ( item [ [string] ] for item in self . cart . values ( ) ) [EOL] [EOL] def add ( self , product , quantity = [number] , update_quantity = False ) : [EOL] [docstring] [EOL] product_id = str ( product . id ) [EOL] if product_id not in self . cart : [EOL] self . cart [ product_id ] = { [string] : [number] , [string] : str ( product . price ) } [EOL] if update_quantity : [EOL] self . cart [ product_id ] [ [string] ] = quantity [EOL] else : [EOL] self . cart [ product_id ] [ [string] ] += quantity [EOL] self . save ( ) [EOL] [EOL] def save ( self ) : [EOL] [comment] [EOL] self . session . modified = True [EOL] [EOL] def remove ( self , product ) : [EOL] [docstring] [EOL] product_id = str ( product . id ) [EOL] if product_id in self . cart : [EOL] del self . cart [ product_id ] [EOL] self . save ( ) [EOL] [EOL] def get_total_price ( self ) : [EOL] return sum ( Decimal ( item [ [string] ] ) * item [ [string] ] for item in self . cart . values ( ) ) [EOL] [EOL] def clear ( self ) : [EOL] [comment] [EOL] del self . session [ settings . CART_SESSION_ID ] [EOL] self . save ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from . cart import Cart [EOL] [EOL] [EOL] def cart ( request ) : [EOL] return { [string] : Cart ( request ) } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] from . celery import app as celery_app [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import os [EOL] from celery import Celery [EOL] [EOL] [comment] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] app = Celery ( [string] ) [EOL] [EOL] app . config_from_object ( [string] , namespace = [string] ) [EOL] app . autodiscover_tasks ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Type [EOL] import typing [EOL] import Python [EOL] import Example [EOL] from django . contrib import admin [EOL] from . models import Order , OrderItem [EOL] [EOL] [EOL] class OrderItemInline ( admin . TabularInline ) : [EOL] model = OrderItem [EOL] raw_id_fields = [ [string] ] [EOL] [EOL] @ admin . register ( Order ) class OrderAdmin ( admin . ModelAdmin ) : [EOL] list_display = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] list_filter = [ [string] , [string] , [string] ] [EOL] inlines = [ OrderItemInline ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] from . import views [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ path ( [string] , views . order_create , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Type [EOL] import typing [EOL] import Python [EOL] import Example [EOL] from django . db import models [EOL] from shop . models import Product [EOL] [EOL] [EOL] class Order ( models . Model ) : [EOL] first_name = models . CharField ( max_length = [number] ) [EOL] last_name = models . CharField ( max_length = [number] ) [EOL] email = models . EmailField ( ) [EOL] address = models . CharField ( max_length = [number] ) [EOL] postal_code = models . CharField ( max_length = [number] ) [EOL] city = models . CharField ( max_length = [number] ) [EOL] created = models . DateTimeField ( auto_now_add = True ) [EOL] updated = models . DateTimeField ( auto_now = True ) [EOL] paid = models . BooleanField ( default = False ) [EOL] [EOL] class Meta : [EOL] ordering = ( [string] , ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . id ) [EOL] [EOL] def get_total_cost ( self ) : [EOL] return sum ( item . get_cost ( ) for item in self . items . all ( ) ) [EOL] [EOL] [EOL] class OrderItem ( models . Model ) : [EOL] order = models . ForeignKey ( Order , related_name = [string] , on_delete = models . CASCADE ) [EOL] product = models . ForeignKey ( Product , related_name = [string] , on_delete = models . CASCADE ) [EOL] price = models . DecimalField ( max_digits = [number] , decimal_places = [number] ) [EOL] quantity = models . PositiveIntegerField ( default = [number] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . id ) [EOL] [EOL] def get_cost ( self ) : [EOL] return self . price * self . quantity [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import Python [EOL] import Example [EOL] from django . shortcuts import render [EOL] from . models import OrderItem [EOL] from . forms import OrderCreateForm [EOL] from cart . cart import Cart [EOL] from . tasks import order_created [EOL] [EOL] [EOL] def order_create ( request ) : [EOL] cart = Cart ( request ) [EOL] if request . method == [string] : [EOL] form = OrderCreateForm ( request . POST ) [EOL] if form . is_valid ( ) : [EOL] order = form . save ( ) [EOL] for item in cart : [EOL] OrderItem . objects . create ( order = order , product = item [ [string] ] , price = item [ [string] ] , quantity = item [ [string] ] ) [EOL] [comment] [EOL] cart . clear ( ) [EOL] [comment] [EOL] order_created . delay ( order . id ) [EOL] return render ( request , [string] , { [string] : order } ) [EOL] else : [EOL] form = OrderCreateForm ( ) [EOL] return render ( request , [string] , { [string] : cart , [string] : form } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from celery import task [EOL] from django . core . mail import send_mail [EOL] from . models import Order [EOL] [EOL] @ task def order_created ( order_id ) : [EOL] [docstring] [EOL] order = Order . objects . get ( id = order_id ) [EOL] subject = [string] . format ( order . id ) [EOL] message = [string] . format ( order . first_name , order . id ) [EOL] mail_sent = send_mail ( subject , message , [string] , [ order . email ] ) [EOL] return mail_sent [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import List , Type [EOL] import typing [EOL] import Python [EOL] import Example [EOL] from django import forms [EOL] from . models import Order [EOL] [EOL] [EOL] class OrderCreateForm ( forms . ModelForm ) : [EOL] class Meta : [EOL] model = Order [EOL] fields = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class OrdersConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import List , Any , Dict [EOL] import typing [EOL] from django . urls import path , include [EOL] from django . contrib import admin [EOL] from django . contrib . sitemaps . views import sitemap [EOL] from blog . sitemaps import PostSitemap [EOL] [EOL] [EOL] sitemaps = { [string] : PostSitemap , } [EOL] [EOL] [EOL] urlpatterns = [ path ( [string] , admin . site . urls ) , path ( [string] , include ( [string] , namespace = [string] ) ) , path ( [string] , sitemap , { [string] : sitemaps } , name = [string] ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Dict , Union [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] [comment] [EOL] BASE_DIR = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] SECRET_KEY = [string] [EOL] [EOL] [comment] [EOL] DEBUG = True [EOL] [EOL] ALLOWED_HOSTS = [ ] [EOL] [EOL] [EOL] [comment] [EOL] SITE_ID = [number] [EOL] [EOL] [EOL] INSTALLED_APPS = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] MIDDLEWARE = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] ROOT_URLCONF = [string] [EOL] [EOL] TEMPLATES = [ { [string] : [string] , [string] : [ ] , [string] : True , [string] : { [string] : [ [string] , [string] , [string] , [string] , ] , } , } , ] [EOL] [EOL] WSGI_APPLICATION = [string] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] DATABASES = { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } } [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] AUTH_PASSWORD_VALIDATORS = [ { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , ] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] LANGUAGE_CODE = [string] [EOL] [EOL] TIME_ZONE = [string] [EOL] [EOL] USE_I18N = True [EOL] [EOL] USE_L10N = True [EOL] [EOL] USE_TZ = True [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] STATIC_URL = [string] [EOL] [EOL] [EOL] EMAIL_HOST = [string] [EOL] EMAIL_HOST_USER = [string] [EOL] EMAIL_HOST_PASSWORD = [string] [EOL] EMAIL_PORT = [number] [EOL] EMAIL_USE_TLS = True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib . syndication . views import Feed [EOL] from django . template . defaultfilters import truncatewords [EOL] from . models import Post [EOL] [EOL] [EOL] class LatestPostsFeed ( Feed ) : [EOL] title = [string] [EOL] link = [string] [EOL] description = [string] [EOL] [EOL] def items ( self ) : [EOL] return Post . published . all ( ) [ : [number] ] [EOL] [EOL] def item_title ( self , item ) : [EOL] return item . title [EOL] [EOL] def item_description ( self , item ) : [EOL] return truncatewords ( item . body , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class BlogConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Tuple , Type [EOL] import typing [EOL] import Python [EOL] import Example [EOL] from django . db import models [EOL] from django . utils import timezone [EOL] from django . contrib . auth . models import User [EOL] from django . urls import reverse [EOL] from taggit . managers import TaggableManager [EOL] [EOL] [EOL] class PublishedManager ( models . Manager ) : [EOL] def get_queryset ( self ) : [EOL] return super ( PublishedManager , self ) . get_queryset ( ) . filter ( status = [string] ) [EOL] [EOL] [EOL] class Post ( models . Model ) : [EOL] STATUS_CHOICES = ( ( [string] , [string] ) , ( [string] , [string] ) , ) [EOL] title = models . CharField ( max_length = [number] ) [EOL] slug = models . SlugField ( max_length = [number] , unique_for_date = [string] ) [EOL] author = models . ForeignKey ( User , on_delete = models . CASCADE , related_name = [string] ) [EOL] body = models . TextField ( ) [EOL] publish = models . DateTimeField ( default = timezone . now ) [EOL] created = models . DateTimeField ( auto_now_add = True ) [EOL] updated = models . DateTimeField ( auto_now = True ) [EOL] status = models . CharField ( max_length = [number] , choices = STATUS_CHOICES , default = [string] ) [EOL] [EOL] objects = models . Manager ( ) [comment] [EOL] published = PublishedManager ( ) [comment] [EOL] tags = TaggableManager ( ) [EOL] [EOL] class Meta : [EOL] ordering = ( [string] , ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . title [EOL] [EOL] def get_absolute_url ( self ) : [EOL] return reverse ( [string] , args = [ self . publish . year , self . publish . month , self . publish . day , self . slug ] ) [EOL] [EOL] [EOL] class Comment ( models . Model ) : [EOL] post = models . ForeignKey ( Post , on_delete = models . CASCADE , related_name = [string] ) [EOL] name = models . CharField ( max_length = [number] ) [EOL] email = models . EmailField ( ) [EOL] body = models . TextField ( ) [EOL] created = models . DateTimeField ( auto_now_add = True ) [EOL] updated = models . DateTimeField ( auto_now = True ) [EOL] active = models . BooleanField ( default = True ) [EOL] [EOL] class Meta : [EOL] ordering = ( [string] , ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . name , self . post ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Dict [EOL] import typing [EOL] from django . contrib import admin [EOL] from . models import Post , Comment [EOL] [EOL] [EOL] @ admin . register ( Post ) class PostAdmin ( admin . ModelAdmin ) : [EOL] list_display = ( [string] , [string] , [string] , [string] , [string] ) [EOL] list_filter = ( [string] , [string] , [string] , [string] ) [EOL] search_fields = ( [string] , [string] ) [EOL] prepopulated_fields = { [string] : ( [string] , ) } [EOL] raw_id_fields = ( [string] , ) [EOL] date_hierarchy = [string] [EOL] ordering = ( [string] , [string] ) [EOL] [EOL] [EOL] @ admin . register ( Comment ) class CommentAdmin ( admin . ModelAdmin ) : [EOL] list_display = ( [string] , [string] , [string] , [string] , [string] ) [EOL] list_filter = ( [string] , [string] , [string] ) [EOL] search_fields = ( [string] , [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Tuple[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
	0
	0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class CartConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from . cart import Cart [EOL] [EOL] [EOL] def cart ( request ) : [EOL] return { [string] : Cart ( request ) } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Tuple , Type [EOL] import typing [EOL] import Python [EOL] import Example [EOL] from django import forms [EOL] from django . utils . translation import gettext_lazy as _ [EOL] [EOL] [EOL] PRODUCT_QUANTITY_CHOICES = [ ( i , str ( i ) ) for i in range ( [number] , [number] ) ] [EOL] [EOL] [EOL] class CartAddProductForm ( forms . Form ) : [EOL] quantity = forms . TypedChoiceField ( choices = PRODUCT_QUANTITY_CHOICES , coerce = int , label = _ ( [string] ) ) [EOL] update = forms . BooleanField ( required = False , initial = False , widget = forms . HiddenInput ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import Python [EOL] import Example [EOL] from django . shortcuts import render , get_object_or_404 [EOL] from . models import Category , Product [EOL] from cart . forms import CartAddProductForm [EOL] from . recommender import Recommender [EOL] [EOL] [EOL] def product_list ( request , category_slug = None ) : [EOL] category = None [EOL] categories = Category . objects . all ( ) [EOL] products = Product . objects . filter ( available = True ) [EOL] if category_slug : [EOL] language = request . LANGUAGE_CODE [EOL] category = get_object_or_404 ( Category , translations__language_code = language , translations__slug = category_slug ) [EOL] products = products . filter ( category = category ) [EOL] return render ( request , [string] , { [string] : category , [string] : categories , [string] : products } ) [EOL] [EOL] [EOL] def product_detail ( request , id , slug ) : [EOL] language = request . LANGUAGE_CODE [EOL] product = get_object_or_404 ( Product , id = id , translations__language_code = language , translations__slug = slug , available = True ) [EOL] cart_product_form = CartAddProductForm ( ) [EOL] [EOL] r = Recommender ( ) [EOL] recommended_products = r . suggest_products_for ( [ product ] , [number] ) [EOL] [EOL] return render ( request , [string] , { [string] : product , [string] : cart_product_form , [string] : recommended_products } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ShopConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import List , Any [EOL] import typing [EOL] import redis [EOL] from django . conf import settings [EOL] from . models import Product [EOL] [EOL] [EOL] [comment] [EOL] r = redis . StrictRedis ( host = settings . REDIS_HOST , port = settings . REDIS_PORT , db = settings . REDIS_DB ) [EOL] [EOL] [EOL] class Recommender ( object ) : [EOL] [EOL] def get_product_key ( self , id ) : [EOL] return [string] . format ( id ) [EOL] [EOL] def products_bought ( self , products ) : [EOL] product_ids = [ p . id for p in products ] [EOL] for product_id in product_ids : [EOL] for with_id in product_ids : [EOL] [comment] [EOL] if product_id != with_id : [EOL] [comment] [EOL] r . zincrby ( self . get_product_key ( product_id ) , with_id , amount = [number] ) [EOL] [EOL] def suggest_products_for ( self , products , max_results = [number] ) : [EOL] product_ids = [ p . id for p in products ] [EOL] if len ( products ) == [number] : [EOL] [comment] [EOL] suggestions = r . zrange ( self . get_product_key ( product_ids [ [number] ] ) , [number] , - [number] , desc = True ) [ : max_results ] [EOL] else : [EOL] [comment] [EOL] flat_ids = [string] . join ( [ str ( id ) for id in product_ids ] ) [EOL] tmp_key = [string] . format ( flat_ids ) [EOL] [comment] [EOL] [comment] [EOL] keys = [ self . get_product_key ( id ) for id in product_ids ] [EOL] r . zunionstore ( tmp_key , keys ) [EOL] [comment] [EOL] r . zrem ( tmp_key , * product_ids ) [EOL] [comment] [EOL] suggestions = r . zrange ( tmp_key , [number] , - [number] , desc = True ) [ : max_results ] [EOL] [comment] [EOL] r . delete ( tmp_key ) [EOL] suggested_products_ids = [ int ( id ) for id in suggestions ] [EOL] [EOL] [comment] [EOL] suggested_products = list ( Product . objects . filter ( id__in = suggested_products_ids ) ) [EOL] suggested_products . sort ( key = lambda x : suggested_products_ids . index ( x . id ) ) [EOL] return suggested_products [EOL] [EOL] def clear_purchases ( self ) : [EOL] for id in Product . objects . values_list ( [string] , flat = True ) : [EOL] r . delete ( self . get_product_key ( id ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.list$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] from . import views [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ path ( [string] , views . coupon_apply , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import Python [EOL] import Example [EOL] from django import forms [EOL] from django . utils . translation import gettext_lazy as _ [EOL] [EOL] [EOL] class CouponApplyForm ( forms . Form ) : [EOL] code = forms . CharField ( label = _ ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import Python [EOL] import Example [EOL] from django . shortcuts import render , redirect [EOL] from django . utils import timezone [EOL] from django . views . decorators . http import require_POST [EOL] from . models import Coupon [EOL] from . forms import CouponApplyForm [EOL] [EOL] [EOL] @ require_POST def coupon_apply ( request ) : [EOL] now = timezone . now ( ) [EOL] form = CouponApplyForm ( request . POST ) [EOL] if form . is_valid ( ) : [EOL] code = form . cleaned_data [ [string] ] [EOL] try : [EOL] coupon = Coupon . objects . get ( code__iexact = code , valid_from__lte = now , valid_to__gte = now , active = True ) [EOL] request . session [ [string] ] = coupon . id [EOL] except Coupon . DoesNotExist : [EOL] request . session [ [string] ] = None [EOL] return redirect ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import Python [EOL] import Example [EOL] from django . db import models [EOL] from django . core . validators import MinValueValidator , MaxValueValidator [EOL] [EOL] [EOL] class Coupon ( models . Model ) : [EOL] code = models . CharField ( max_length = [number] , unique = True ) [EOL] valid_from = models . DateTimeField ( ) [EOL] valid_to = models . DateTimeField ( ) [EOL] discount = models . IntegerField ( validators = [ MinValueValidator ( [number] ) , MaxValueValidator ( [number] ) ] ) [EOL] active = models . BooleanField ( ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . code [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class CouponsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
[comment] [EOL] [EOL] import django . core . validators [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] initial = True [EOL] [EOL] dependencies = [ ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . CharField ( max_length = [number] , unique = True ) ) , ( [string] , models . DateTimeField ( ) ) , ( [string] , models . DateTimeField ( ) ) , ( [string] , models . IntegerField ( validators = [ django . core . validators . MinValueValidator ( [number] ) , django . core . validators . MaxValueValidator ( [number] ) ] ) ) , ( [string] , models . BooleanField ( ) ) , ] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . contrib import admin [EOL] from django . urls import path , include [EOL] from django . conf import settings [EOL] from django . conf . urls . static import static [EOL] from django . conf . urls . i18n import i18n_patterns [EOL] from django . utils . translation import gettext_lazy as _ [EOL] [EOL] [EOL] urlpatterns = i18n_patterns ( path ( _ ( [string] ) , admin . site . urls ) , path ( _ ( [string] ) , include ( [string] , namespace = [string] ) ) , path ( _ ( [string] ) , include ( [string] , namespace = [string] ) ) , path ( _ ( [string] ) , include ( [string] , namespace = [string] ) ) , path ( _ ( [string] ) , include ( [string] , namespace = [string] ) ) , path ( [string] , include ( [string] ) ) , path ( [string] , include ( [string] , namespace = [string] ) ) , ) [EOL] [EOL] if settings . DEBUG : [EOL] urlpatterns += static ( settings . MEDIA_URL , document_root = settings . MEDIA_ROOT ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
[comment] [EOL] from . celery import app as celery_app [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import os [EOL] from celery import Celery [EOL] [EOL] [comment] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] app = Celery ( [string] ) [EOL] [EOL] app . config_from_object ( [string] , namespace = [string] ) [EOL] app . autodiscover_tasks ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class PaymentConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , Tuple , Type [EOL] import typing [EOL] import Python [EOL] import Example [EOL] from django . db import models [EOL] from shop . models import Product [EOL] from decimal import Decimal [EOL] from django . core . validators import MinValueValidator , MaxValueValidator [EOL] from coupons . models import Coupon [EOL] from django . utils . translation import gettext_lazy as _ [EOL] [EOL] [EOL] class Order ( models . Model ) : [EOL] first_name = models . CharField ( _ ( [string] ) , max_length = [number] ) [EOL] last_name = models . CharField ( _ ( [string] ) , max_length = [number] ) [EOL] email = models . EmailField ( _ ( [string] ) ) [EOL] address = models . CharField ( _ ( [string] ) , max_length = [number] ) [EOL] postal_code = models . CharField ( _ ( [string] ) , max_length = [number] ) [EOL] city = models . CharField ( _ ( [string] ) , max_length = [number] ) [EOL] created = models . DateTimeField ( auto_now_add = True ) [EOL] updated = models . DateTimeField ( auto_now = True ) [EOL] paid = models . BooleanField ( default = False ) [EOL] braintree_id = models . CharField ( max_length = [number] , blank = True ) [EOL] coupon = models . ForeignKey ( Coupon , related_name = [string] , null = True , blank = True , on_delete = models . SET_NULL ) [EOL] discount = models . IntegerField ( default = [number] , validators = [ MinValueValidator ( [number] ) , MaxValueValidator ( [number] ) ] ) [EOL] [EOL] class Meta : [EOL] ordering = ( [string] , ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . id ) [EOL] [EOL] def get_total_cost ( self ) : [EOL] total_cost = sum ( item . get_cost ( ) for item in self . items . all ( ) ) [EOL] return total_cost - total_cost * ( self . discount / Decimal ( [string] ) ) [EOL] [EOL] [EOL] class OrderItem ( models . Model ) : [EOL] order = models . ForeignKey ( Order , related_name = [string] , on_delete = models . CASCADE ) [EOL] product = models . ForeignKey ( Product , related_name = [string] , on_delete = models . CASCADE ) [EOL] price = models . DecimalField ( max_digits = [number] , decimal_places = [number] ) [EOL] quantity = models . PositiveIntegerField ( default = [number] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . id ) [EOL] [EOL] def get_cost ( self ) : [EOL] return self . price * self . quantity [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Type [EOL] import typing [EOL] import Python [EOL] import Example [EOL] from django import forms [EOL] from . models import Order [EOL] from localflavor . us . forms import USZipCodeField [EOL] [EOL] [EOL] class OrderCreateForm ( forms . ModelForm ) : [EOL] postal_code = USZipCodeField ( ) [EOL] class Meta : [EOL] model = Order [EOL] fields = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class OrdersConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] from . import views [EOL] from django . utils . translation import gettext_lazy as _ [EOL] [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ path ( _ ( [string] ) , views . order_create , name = [string] ) , path ( [string] , views . admin_order_detail , name = [string] ) , path ( [string] , views . admin_order_pdf , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import Python [EOL] import Example [EOL] from django . urls import reverse [EOL] from django . shortcuts import render , redirect [EOL] from . models import OrderItem [EOL] from . forms import OrderCreateForm [EOL] from cart . cart import Cart [EOL] from . tasks import order_created [EOL] from django . contrib . admin . views . decorators import staff_member_required [EOL] from django . shortcuts import get_object_or_404 [EOL] from . models import Order [EOL] from django . conf import settings [EOL] from django . http import HttpResponse [EOL] from django . template . loader import render_to_string [EOL] import weasyprint [EOL] [EOL] [EOL] def order_create ( request ) : [EOL] cart = Cart ( request ) [EOL] if request . method == [string] : [EOL] form = OrderCreateForm ( request . POST ) [EOL] [EOL] if form . is_valid ( ) : [EOL] order = form . save ( commit = False ) [EOL] if cart . coupon : [EOL] order . coupon = cart . coupon [EOL] order . discount = cart . coupon . discount [EOL] order . save ( ) [EOL] [EOL] for item in cart : [EOL] OrderItem . objects . create ( order = order , product = item [ [string] ] , price = item [ [string] ] , quantity = item [ [string] ] ) [EOL] [comment] [EOL] cart . clear ( ) [EOL] [comment] [EOL] order_created . delay ( order . id ) [EOL] [comment] [EOL] request . session [ [string] ] = order . id [EOL] [comment] [EOL] return redirect ( reverse ( [string] ) ) [EOL] else : [EOL] form = OrderCreateForm ( ) [EOL] return render ( request , [string] , { [string] : cart , [string] : form } ) [EOL] [EOL] [EOL] @ staff_member_required def admin_order_detail ( request , order_id ) : [EOL] order = get_object_or_404 ( Order , id = order_id ) [EOL] return render ( request , [string] , { [string] : order } ) [EOL] [EOL] [EOL] @ staff_member_required def admin_order_pdf ( request , order_id ) : [EOL] order = get_object_or_404 ( Order , id = order_id ) [EOL] html = render_to_string ( [string] , { [string] : order } ) [EOL] response = HttpResponse ( content_type = [string] ) [EOL] response [ [string] ] = [string] . format ( order . id ) [EOL] weasyprint . HTML ( string = html ) . write_pdf ( response , stylesheets = [ weasyprint . CSS ( settings . STATIC_ROOT + [string] ) ] ) [EOL] return response [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] from django . contrib import admin [EOL] from django . urls import path , include [EOL] from django . contrib . auth import views as auth_views [EOL] [EOL] urlpatterns = [ path ( [string] , auth_views . LoginView . as_view ( ) , name = [string] ) , path ( [string] , auth_views . LogoutView . as_view ( ) , name = [string] ) , path ( [string] , admin . site . urls ) , path ( [string] , include ( [string] ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class CoursesConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
import builtins [EOL] from typing import List , Any , Type [EOL] import typing [EOL] import Python [EOL] import Example [EOL] from django . urls import reverse_lazy [EOL] from django . views . generic . list import ListView [EOL] from django . views . generic . edit import CreateView , UpdateView , DeleteView [EOL] from django . contrib . auth . mixins import LoginRequiredMixin , PermissionRequiredMixin [EOL] from django . shortcuts import redirect , get_object_or_404 [EOL] from django . views . generic . base import TemplateResponseMixin , View [EOL] from django . forms . models import modelform_factory [EOL] from django . apps import apps [EOL] from braces . views import CsrfExemptMixin , JsonRequestResponseMixin [EOL] from . models import Course [EOL] from . models import Module , Content [EOL] from . forms import ModuleFormSet [EOL] [EOL] [EOL] [EOL] class OwnerMixin ( object ) : [EOL] def get_queryset ( self ) : [EOL] qs = super ( OwnerMixin , self ) . get_queryset ( ) [EOL] return qs . filter ( owner = self . request . user ) [EOL] [EOL] [EOL] class OwnerEditMixin ( object ) : [EOL] def form_valid ( self , form ) : [EOL] form . instance . owner = self . request . user [EOL] return super ( OwnerEditMixin , self ) . form_valid ( form ) [EOL] [EOL] [EOL] class OwnerCourseMixin ( OwnerMixin , LoginRequiredMixin ) : [EOL] model = Course [EOL] fields = [ [string] , [string] , [string] , [string] ] [EOL] success_url = reverse_lazy ( [string] ) [EOL] [EOL] [EOL] class OwnerCourseEditMixin ( OwnerCourseMixin , OwnerEditMixin ) : [EOL] fields = [ [string] , [string] , [string] , [string] ] [EOL] success_url = reverse_lazy ( [string] ) [EOL] template_name = [string] [EOL] [EOL] [EOL] class ManageCourseListView ( OwnerCourseMixin , ListView ) : [EOL] template_name = [string] [EOL] [EOL] [EOL] class CourseCreateView ( PermissionRequiredMixin , OwnerCourseEditMixin , CreateView ) : [EOL] permission_required = [string] [EOL] [EOL] [EOL] class CourseUpdateView ( PermissionRequiredMixin , OwnerCourseEditMixin , UpdateView ) : [EOL] permission_required = [string] [EOL] [EOL] [EOL] class CourseDeleteView ( PermissionRequiredMixin , OwnerCourseMixin , DeleteView ) : [EOL] template_name = [string] [EOL] success_url = reverse_lazy ( [string] ) [EOL] permission_required = [string] [EOL] [EOL] [EOL] class CourseModuleUpdateView ( TemplateResponseMixin , View ) : [EOL] template_name = [string] [EOL] course = None [EOL] [EOL] def get_formset ( self , data = None ) : [EOL] return ModuleFormSet ( instance = self . course , data = data ) [EOL] [EOL] def dispatch ( self , request , pk ) : [EOL] self . course = get_object_or_404 ( Course , id = pk , owner = request . user ) [EOL] return super ( CourseModuleUpdateView , self ) . dispatch ( request , pk ) [EOL] [EOL] def get ( self , request , * args , ** kwargs ) : [EOL] formset = self . get_formset ( ) [EOL] return self . render_to_response ( { [string] : self . course , [string] : formset } ) [EOL] [EOL] def post ( self , request , * args , ** kwargs ) : [EOL] formset = self . get_formset ( data = request . POST ) [EOL] if formset . is_valid ( ) : [EOL] formset . save ( ) [EOL] return redirect ( [string] ) [EOL] return self . render_to_response ( { [string] : self . course , [string] : formset } ) [EOL] [EOL] [EOL] class ContentCreateUpdateView ( TemplateResponseMixin , View ) : [EOL] module = None [EOL] model = None [EOL] obj = None [EOL] template_name = [string] [EOL] [EOL] def get_model ( self , model_name ) : [EOL] if model_name in [ [string] , [string] , [string] , [string] ] : [EOL] return apps . get_model ( app_label = [string] , model_name = model_name ) [EOL] return None [EOL] [EOL] def get_form ( self , model , * args , ** kwargs ) : [EOL] Form = modelform_factory ( model , exclude = [ [string] , [string] , [string] , [string] ] ) [EOL] return Form ( * args , ** kwargs ) [EOL] [EOL] def dispatch ( self , request , module_id , model_name , id = None ) : [EOL] self . module = get_object_or_404 ( Module , id = module_id , course__owner = request . user ) [EOL] self . model = self . get_model ( model_name ) [EOL] if id : [EOL] self . obj = get_object_or_404 ( self . model , id = id , owner = request . user ) [EOL] return super ( ContentCreateUpdateView , self ) . dispatch ( request , module_id , model_name , id ) [EOL] [EOL] def get ( self , request , module_id , model_name , id = None ) : [EOL] form = self . get_form ( self . model , instance = self . obj ) [EOL] return self . render_to_response ( { [string] : form , [string] : self . obj } ) [EOL] [EOL] def post ( self , request , module_id , model_name , id = None ) : [EOL] form = self . get_form ( self . model , instance = self . obj , data = request . POST , files = request . FILES ) [EOL] if form . is_valid ( ) : [EOL] obj = form . save ( commit = False ) [EOL] obj . owner = request . user [EOL] obj . save ( ) [EOL] if not id : [EOL] [comment] [EOL] Content . objects . create ( module = self . module , item = obj ) [EOL] return redirect ( [string] , self . module . id ) [EOL] [EOL] return self . render_to_response ( { [string] : form , [string] : self . obj } ) [EOL] [EOL] [EOL] class ContentDeleteView ( View ) : [EOL] [EOL] def post ( self , request , id ) : [EOL] content = get_object_or_404 ( Content , id = id , module__course__owner = request . user ) [EOL] module = content . module [EOL] content . item . delete ( ) [EOL] content . delete ( ) [EOL] return redirect ( [string] , module . id ) [EOL] [EOL] [EOL] class ModuleContentListView ( TemplateResponseMixin , View ) : [EOL] template_name = [string] [EOL] [EOL] def get ( self , request , module_id ) : [EOL] module = get_object_or_404 ( Module , id = module_id , course__owner = request . user ) [EOL] [EOL] return self . render_to_response ( { [string] : module } ) [EOL] [EOL] [EOL] class ModuleOrderView ( CsrfExemptMixin , JsonRequestResponseMixin , View ) : [EOL] def post ( self , request ) : [EOL] for id , order in self . request_json . items ( ) : [EOL] Module . objects . filter ( id = id , course__owner = request . user ) . update ( order = order ) [EOL] return self . render_json_response ( { [string] : [string] } ) [EOL] [EOL] [EOL] class ContentOrderView ( CsrfExemptMixin , JsonRequestResponseMixin , View ) : [EOL] def post ( self , request ) : [EOL] for id , order in self . request_json . items ( ) : [EOL] Content . objects . filter ( id = id , module__course__owner = request . user ) . update ( order = order ) [EOL] return self . render_json_response ( { [string] : [string] } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django import forms [EOL] from django . forms . models import inlineformset_factory [EOL] from . models import Course , Module [EOL] [EOL] [EOL] ModuleFormSet = inlineformset_factory ( Course , Module , fields = [ [string] , [string] ] , extra = [number] , can_delete = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from django import template [EOL] [EOL] [EOL] register = template . Library ( ) [EOL] [EOL] [EOL] @ register . filter def model_name ( obj ) : [EOL] try : [EOL] return obj . _meta . model_name [EOL] except AttributeError : [EOL] return None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class AccountConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Any [EOL] import typing [EOL] from django . http import HttpResponse [EOL] from django . shortcuts import render [EOL] from django . contrib . auth import authenticate , login [EOL] from django . contrib . auth . decorators import login_required [EOL] from django . contrib import messages [EOL] from . forms import LoginForm , UserRegistrationForm , UserEditForm , ProfileEditForm [EOL] from . models import Profile [EOL] [EOL] [EOL] def user_login ( request ) : [EOL] if request . method == [string] : [EOL] form = LoginForm ( request . POST ) [EOL] if form . is_valid ( ) : [EOL] cd = form . cleaned_data [EOL] user = authenticate ( request , username = cd [ [string] ] , password = cd [ [string] ] ) [EOL] if user is not None : [EOL] if user . is_active : [EOL] login ( request , user ) [EOL] return HttpResponse ( [string] [string] ) [EOL] else : [EOL] return HttpResponse ( [string] ) [EOL] else : [EOL] return HttpResponse ( [string] ) [EOL] else : [EOL] form = LoginForm ( ) [EOL] return render ( request , [string] , { [string] : form } ) [EOL] [EOL] [EOL] @ login_required def dashboard ( request ) : [EOL] return render ( request , [string] , { [string] : [string] } ) [EOL] [EOL] [EOL] def register ( request ) : [EOL] if request . method == [string] : [EOL] user_form = UserRegistrationForm ( request . POST ) [EOL] if user_form . is_valid ( ) : [EOL] [comment] [EOL] new_user = user_form . save ( commit = False ) [EOL] [comment] [EOL] new_user . set_password ( user_form . cleaned_data [ [string] ] ) [EOL] [comment] [EOL] new_user . save ( ) [EOL] [comment] [EOL] Profile . objects . create ( user = new_user ) [EOL] return render ( request , [string] , { [string] : new_user } ) [EOL] else : [EOL] user_form = UserRegistrationForm ( ) [EOL] return render ( request , [string] , { [string] : user_form } ) [EOL] [EOL] [EOL] @ login_required def edit ( request ) : [EOL] if request . method == [string] : [EOL] user_form = UserEditForm ( instance = request . user , data = request . POST ) [EOL] profile_form = ProfileEditForm ( instance = request . user . profile , data = request . POST , files = request . FILES ) [EOL] if user_form . is_valid ( ) and profile_form . is_valid ( ) : [EOL] user_form . save ( ) [EOL] profile_form . save ( ) [EOL] messages . success ( request , [string] ) [EOL] else : [EOL] messages . error ( request , [string] ) [EOL] else : [EOL] user_form = UserEditForm ( instance = request . user ) [EOL] profile_form = ProfileEditForm ( instance = request . user . profile ) [EOL] return render ( request , [string] , { [string] : user_form , [string] : profile_form } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] from django . contrib import admin [EOL] from . models import Profile [EOL] [EOL] [EOL] @ admin . register ( Profile ) class ProfileAdmin ( admin . ModelAdmin ) : [EOL] list_display = [ [string] , [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] from django . contrib import admin [EOL] from django . urls import include , path [EOL] [EOL] urlpatterns = [ path ( [string] , include ( [string] ) ) , path ( [string] , admin . site . urls ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] from . import views [EOL] [EOL] urlpatterns = [ path ( [string] , views . index ) , path ( [string] , views . new ) , path ( [string] , views . create ) , path ( [string] , views . show ) , path ( [string] , views . edit ) , path ( [string] , views . delete ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from django . shortcuts import render , redirect [EOL] from django . http import HttpResponse [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def index ( request ) : [EOL] return HttpResponse ( [string] ) [EOL] [EOL] [EOL] def new ( request ) : [EOL] return render ( request , [string] ) [EOL] [EOL] [EOL] def create ( request ) : [EOL] if request . method == [string] : [EOL] print ( [string] * [number] ) [EOL] print ( request . POST ) [EOL] print ( request . POST [ [string] ] ) [EOL] print ( request . POST [ [string] ] ) [EOL] request . session [ [string] ] = [string] [comment] [EOL] print ( [string] * [number] ) [EOL] return redirect ( [string] ) [EOL] else : [EOL] return redirect ( [string] ) [EOL] [EOL] [EOL] def show ( request , number = None ) : [EOL] return HttpResponse ( f' [string] { number }' ) [EOL] [EOL] [EOL] def edit ( request , number = None ) : [EOL] return HttpResponse ( f' [string] { number }' ) [EOL] [EOL] [EOL] def delete ( request , number = None ) : [EOL] return redirect ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class BlogsAppConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
	0
from typing import Any , Dict [EOL] import typing [EOL] from django . shortcuts import render [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def index ( request ) : [EOL] context = { } [EOL] return render ( request , [string] , context ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import Python [EOL] from django . db import models [EOL] [EOL] [comment] [EOL] [EOL] [EOL] class User ( models . Model ) : [EOL] first_name = models . CharField ( max_length = [number] ) [EOL] last_name = models . CharField ( max_length = [number] ) [EOL] email = models . EmailField ( ) [EOL] age = models . IntegerField ( ) [EOL] created_at = models . DateTimeField ( auto_now_add = True ) [EOL] updated_at = models . DateTimeField ( auto_now = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f'{ self . first_name } [string] { self . last_name }' [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[Python.Django.users.main.models.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[Python.Django.users.main.models.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[Python.Django.users.main.models.User]$ 0 0 0 0 0 0 0 $typing.Type[Python.Django.users.main.models.User]$ 0 0 0 0 0 0 0 $typing.Type[Python.Django.users.main.models.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[Python.Django.users.main.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] from . views import * [EOL] [EOL] urlpatterns = [ path ( [string] , index , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class MainConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] from django . contrib import admin [EOL] from django . urls import include , path [EOL] [EOL] urlpatterns = [ path ( [string] , include ( [string] ) ) , path ( [string] , admin . site . urls ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0
	0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] from . views import * [EOL] [EOL] urlpatterns = [ path ( [string] , index , name = [string] ) , path ( [string] , register , name = [string] ) , path ( [string] , success , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . contrib . auth import authenticate , login [EOL] from django . contrib . auth . forms import AuthenticationForm , UserCreationForm [EOL] from django . shortcuts import redirect , render [EOL] from django . views . decorators . http import require_http_methods [EOL] from django . contrib . auth . decorators import login_required [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def index ( request ) : [EOL] return render ( request , [string] ) [EOL] [EOL] [EOL] @ require_http_methods ( [ [string] , [string] ] ) def register ( request ) : [EOL] if request . method == [string] : [EOL] form = UserCreationForm ( request . POST ) [EOL] [EOL] if form . is_valid ( ) : [EOL] form . save ( ) [EOL] username = form . cleaned_data [ [string] ] [EOL] password = form . cleaned_data [ [string] ] [EOL] user = authenticate ( username = username , password = password ) [EOL] login ( request , user ) [EOL] return redirect ( [string] ) [EOL] else : [EOL] return redirect ( [string] ) [EOL] [EOL] form = UserCreationForm ( ) [EOL] [EOL] return render ( request , [string] , { [string] : form } ) [EOL] [EOL] [EOL] @ login_required def success ( request ) : [EOL] return render ( request , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class LoginRegConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class MainConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from typing import Tuple , Type , Literal [EOL] import typing_extensions [EOL] import typing [EOL] import Python [EOL] from django import forms [EOL] [EOL] RED = [string] [EOL] GREEN = [string] [EOL] BLUE = [string] [EOL] COLOR_CHOICES = ( ( RED , [string] ) , ( GREEN , [string] ) , ( BLUE , [string] ) ) [EOL] [EOL] [EOL] class WordForm ( forms . Form ) : [EOL] word = forms . CharField ( label = [string] , max_length = [number] , required = True ) [EOL] color = forms . ChoiceField ( label = [string] , widget = forms . RadioSelect , choices = COLOR_CHOICES , required = True ) [EOL] is_big = forms . BooleanField ( label = [string] , label_suffix = [string] , required = False ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[Python.Django.session_words.main.forms.WordForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[Python.Django.session_words.main.forms.WordForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[Python.Django.session_words.main.forms.WordForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] from django . contrib import admin [EOL] from django . urls import include , path [EOL] [EOL] urlpatterns = [ path ( [string] , include ( [string] ) ) , path ( [string] , admin . site . urls ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] from django . contrib import admin [EOL] from django . urls import include , path [EOL] [EOL] urlpatterns = [ path ( [string] , include ( [string] ) ) , path ( [string] , admin . site . urls ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , Dict [EOL] import typing [EOL] from django . shortcuts import render , redirect [EOL] from django . utils . crypto import get_random_string [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def index ( request ) : [EOL] context = { [string] : get_random_string ( length = [number] ) } [EOL] return render ( request , [string] , context ) [EOL] [EOL] [EOL] def generate ( request ) : [EOL] return redirect ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] from . import views [EOL] [EOL] urlpatterns = [ path ( [string] , views . index , name = [string] ) , path ( [string] , views . generate , name = [string] ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class MainConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Type [EOL] import typing [EOL] import Python [EOL] import builtins [EOL] from django import forms [EOL] from . locations import LOCATIONS [EOL] [EOL] [EOL] class LocationForm ( forms . Form ) : [EOL] location = forms . CharField ( widget = forms . HiddenInput ) [EOL] [EOL] [EOL] location_forms = [ ] [EOL] [EOL] [EOL] def _build_location_forms ( ) : [EOL] for location in LOCATIONS : [EOL] location_form = LocationForm ( data = { [string] : location [ [number] ] } ) [EOL] location_form . fields [ [string] ] . label = location [ [number] ] [EOL] location_forms . append ( location_form ) [EOL] [EOL] [EOL] def get_location_forms ( ) : [EOL] if location_forms is None or location_forms == [ ] : [EOL] _build_location_forms ( ) [EOL] return location_forms [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[Python.Django.ninja_gold_django.main.forms.LocationForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.list$ 0 0 0 $builtins.list$ 0 0 0 0 0 0 0 0 0 0 $builtins.list$ 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] from . views import * [EOL] [EOL] urlpatterns = [ path ( [string] , index , name = [string] ) , path ( [string] , process_gold , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Literal [EOL] import typing_extensions [EOL] import typing [EOL] FARM = [string] [EOL] CAVE = [string] [EOL] HOUSE = [string] [EOL] CASINO = [string] [EOL] LOCATIONS = ( ( FARM , [string] ) , ( CAVE , [string] ) , ( HOUSE , [string] ) , ( CASINO , [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from random import randint [EOL] from . locations import FARM , CAVE , HOUSE , CASINO [EOL] [EOL] [EOL] def _get_gold_range ( location ) : [EOL] return { FARM : ( [number] , [number] ) , CAVE : ( [number] , [number] ) , HOUSE : ( [number] , [number] ) , CASINO : ( - [number] , [number] ) } . get ( location , ( [number] , [number] ) ) [EOL] [EOL] [EOL] def _get_message ( location , gold ) : [EOL] return { FARM : { [string] : [string] , [string] : ( f' [string] { gold } [string] ' ) } , CAVE : { [string] : [string] , [string] : ( f' [string] { gold } [string] ' ) } , HOUSE : { [string] : [string] , [string] : ( f' [string] { gold } [string] ' ) } , CASINO : { [string] : [string] if gold > [number] else [string] , [string] : ( f' [string] { gold } [string] ' if gold > [number] else f' [string] { gold } [string] ' ) } } . get ( location ) [EOL] [EOL] [EOL] def process ( location ) : [EOL] gold_range = _get_gold_range ( location ) [EOL] gold_delta = randint ( gold_range [ [number] ] , gold_range [ [number] ] + [number] ) [EOL] message = _get_message ( location , gold_delta ) [EOL] [EOL] return ( gold_delta , message ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] import Python [EOL] from django . shortcuts import redirect , render [EOL] from django . views . decorators . http import require_POST [EOL] from . forms import LocationForm , get_location_forms [EOL] from . locations import FARM , CAVE , HOUSE , CASINO , LOCATIONS [EOL] from . process import process [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def index ( request ) : [EOL] if [string] not in request . session : [EOL] request . session [ [string] ] = [number] [EOL] [EOL] if [string] not in request . session : [EOL] request . session [ [string] ] = [ ] [EOL] [EOL] forms = get_location_forms ( ) [EOL] [EOL] context = { [string] : forms } [EOL] [EOL] return render ( request , [string] , context ) [EOL] [EOL] [EOL] @ require_POST def process_gold ( request ) : [EOL] form = LocationForm ( request . POST ) [EOL] if form . is_valid ( ) : [EOL] location = form . cleaned_data [ [string] ] [EOL] gold_delta , message = process ( location ) [EOL] request . session [ [string] ] += gold_delta [EOL] request . session [ [string] ] . append ( message ) [EOL] [EOL] return redirect ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class MainConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
	0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] from django . contrib import admin [EOL] from django . urls import include , path [EOL] [EOL] urlpatterns = [ path ( [string] , include ( [string] ) ) , path ( [string] , admin . site . urls ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class MainConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Tuple , Type [EOL] import typing [EOL] import Python [EOL] from django import forms [EOL] from django . contrib . auth . models import User [EOL] [EOL] [EOL] class RegistrationForm ( forms . ModelForm ) : [EOL] class Meta : [EOL] model = User [EOL] fields = ( [string] , [string] , [string] ) [EOL] [EOL] password = forms . CharField ( label = [string] , widget = forms . PasswordInput ) [EOL] [EOL] confirm_password = forms . CharField ( label = [string] , widget = forms . PasswordInput ) [EOL] [EOL] def clean_confirm_password ( self ) : [EOL] if self . cleaned_data [ [string] ] != self . cleaned_data [ [string] ] : [EOL] raise forms . ValidationError ( [string] ) [EOL] [EOL] return self . cleaned_data [ [string] ] [EOL] [EOL] [EOL] class LoginForm ( forms . Form ) : [EOL] email = forms . CharField ( ) [EOL] password = forms . CharField ( widget = forms . PasswordInput ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[Python.Django.login_registration.main.forms.RegistrationForm.Meta]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[Python.Django.login_registration.main.forms.RegistrationForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[Python.Django.login_registration.main.forms.RegistrationForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[Python.Django.login_registration.main.forms.LoginForm]$ 0 0 0 0 0 0 0 $typing.Type[Python.Django.login_registration.main.forms.LoginForm]$ 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] [EOL] from . views import * [EOL] [EOL] [EOL] urlpatterns = [ path ( [string] , index , name = [string] ) , path ( [string] , login , name = [string] ) , path ( [string] , register , name = [string] ) , path ( [string] , success , name = [string] ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Tuple , Dict , Union [EOL] import typing [EOL] import Python [EOL] from django . shortcuts import HttpResponse , redirect , render [EOL] from django . contrib . auth import authenticate , login [EOL] from django . contrib . auth . decorators import login_required [EOL] from django . views . decorators . http import require_POST [EOL] from . forms import * [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def index ( request ) : [EOL] login_form = LoginForm ( ) [EOL] register_form = RegistrationForm ( ) [EOL] [EOL] context = { [string] : login_form , [string] : register_form } [EOL] [EOL] return render ( request , [string] , context ) [EOL] [EOL] [EOL] @ require_POST def login ( request ) : [EOL] login_form = LoginForm ( request . POST ) [EOL] [EOL] if login_form . is_valid ( ) : [EOL] email = login_form . cleaned_data [ [string] ] , [EOL] password = login_form . cleaned_data [ [string] ] [EOL] [EOL] user = authenticate ( request , email = email , password = password ) [EOL] [EOL] if user is not None : [EOL] login ( request , user ) [EOL] return redirect ( [string] ) [EOL] [EOL] else : [EOL] return HttpResponse ( [string] ) [EOL] [EOL] return redirect ( [string] ) [EOL] [EOL] [EOL] @ require_POST def register ( request ) : [EOL] register_form = RegistrationForm ( request . POST ) [EOL] [EOL] if register_form . is_valid ( ) : [EOL] user = register_form . save ( commit = False ) [EOL] user . set_password ( register_form . cleaned_data [ [string] ] ) [EOL] user . save ( ) [EOL] return redirect ( [string] ) [EOL] [EOL] return redirect ( [string] ) [EOL] [EOL] [EOL] @ login_required def success ( request ) : [EOL] return render ( request , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] from django . contrib import admin [EOL] from django . urls import include , path [EOL] [EOL] urlpatterns = [ path ( [string] , include ( [string] ) ) , path ( [string] , admin . site . urls ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class MainConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Dict [EOL] import typing [EOL] from django . shortcuts import render [EOL] from time import gmtime , strftime [EOL] [comment] [EOL] [EOL] [EOL] def index ( request ) : [EOL] context = { [string] : strftime ( [string] , gmtime ( ) ) } [EOL] return render ( request , [string] , context ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] from . import views [EOL] [EOL] urlpatterns = [ path ( [string] , views . index , name = [string] ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] from django . contrib import admin [EOL] from django . urls import include , path [EOL] [EOL] urlpatterns = [ path ( [string] , include ( [string] ) ) , path ( [string] , admin . site . urls ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type [EOL] import typing [EOL] import Python [EOL] from django . db import models [EOL] [EOL] [comment] [EOL] [EOL] [EOL] class User ( models . Model ) : [EOL] first_name = models . CharField ( max_length = [number] ) [EOL] last_name = models . CharField ( max_length = [number] ) [EOL] email = models . EmailField ( max_length = [number] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f'{ self . first_name } [string] { self . last_name } [string] { self . email }' [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[Python.Django.semi_restful_users.main.models.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[Python.Django.semi_restful_users.main.models.User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[Python.Django.semi_restful_users.main.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] import Python [EOL] from django . shortcuts import render , HttpResponseRedirect , redirect [EOL] from django . views . decorators . http import require_POST [EOL] from . models import User [EOL] from . forms import UserForm [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def index ( request ) : [EOL] users = User . objects . all ( ) [EOL] context = { [string] : users } [EOL] return render ( request , [string] , context ) [EOL] [EOL] [EOL] def new ( request ) : [EOL] form = UserForm ( ) [EOL] context = { [string] : form } [EOL] return render ( request , [string] , context ) [EOL] [EOL] [EOL] def show ( request , id ) : [EOL] context = { [string] : User . objects . get ( pk = id ) } [EOL] return render ( request , [string] , context ) [EOL] [EOL] [EOL] def edit ( request , id ) : [EOL] user = User . objects . get ( pk = id ) [EOL] form = UserForm ( request . POST , instance = user ) [EOL] context = { [string] : user , [string] : form } [EOL] return render ( request , [string] , context ) [EOL] [EOL] [EOL] def destroy ( request , id ) : [EOL] user = User . objects . get ( pk = id ) [EOL] user . delete ( ) [EOL] return redirect ( [string] ) [EOL] [EOL] [EOL] @ require_POST def create ( request ) : [EOL] form = UserForm ( request . POST ) [EOL] if form . is_valid ( ) : [EOL] form . save ( ) [EOL] return redirect ( [string] ) [EOL] [EOL] [EOL] @ require_POST def update ( request , id ) : [EOL] user = User . objects . get ( pk = id ) [EOL] form = UserForm ( request . POST , instance = user ) [EOL] if form . is_valid ( ) : [EOL] form . save ( ) [EOL] return redirect ( [string] , id ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] from . views import * [EOL] [EOL] urlpatterns = [ path ( [string] , index , name = [string] ) , path ( [string] , index , name = [string] ) , path ( [string] , new , name = [string] ) , path ( [string] , show , name = [string] ) , path ( [string] , edit , name = [string] ) , path ( [string] , destroy , name = [string] ) , path ( [string] , create , name = [string] ) , path ( [string] , update , name = [string] ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class MainConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Tuple , Type [EOL] import typing [EOL] import Python [EOL] from django . forms import ModelForm [EOL] from . models import User [EOL] [EOL] [EOL] class UserForm ( ModelForm ) : [EOL] [EOL] class Meta : [EOL] model = User [EOL] fields = ( [string] , [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[Python.Django.semi_restful_users.main.models.User]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0
	0
from typing import Type [EOL] import typing [EOL] import Python [EOL] from django . db import models [EOL] from localflavor . us . us_states import STATE_CHOICES [EOL] [EOL] [comment] [EOL] [EOL] [EOL] class Dojo ( models . Model ) : [EOL] name = models . CharField ( max_length = [number] ) [EOL] city = models . CharField ( max_length = [number] , default = [string] ) [EOL] state = models . CharField ( max_length = [number] , choices = STATE_CHOICES , default = [string] ) [EOL] created_at = models . DateTimeField ( auto_now_add = True ) [EOL] updated_at = models . DateTimeField ( auto_now = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f'{ self . name }' [EOL] [EOL] [EOL] class Ninja ( models . Model ) : [EOL] dojo = models . ForeignKey ( Dojo , related_name = [string] , on_delete = models . CASCADE ) [EOL] first_name = models . CharField ( max_length = [number] ) [EOL] last_name = models . CharField ( max_length = [number] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f'{ self . first_name } [string] { self . last_name } [string] { self . dojo }' [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[Python.Django.dojo_hasmany_ninjas.main.models.Dojo]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[Python.Django.dojo_hasmany_ninjas.main.models.Dojo]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[Python.Django.dojo_hasmany_ninjas.main.models.Dojo]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[Python.Django.dojo_hasmany_ninjas.main.models.Dojo]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[Python.Django.dojo_hasmany_ninjas.main.models.Dojo]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[Python.Django.dojo_hasmany_ninjas.main.models.Ninja]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[Python.Django.dojo_hasmany_ninjas.main.models.Ninja]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[Python.Django.dojo_hasmany_ninjas.main.models.Ninja]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] from django . shortcuts import render [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def index ( request ) : [EOL] context = { } [EOL] return render ( request , [string] , context ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] from . views import * [EOL] [EOL] urlpatterns = [ path ( [string] , index , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class MainConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] from django . contrib import admin [EOL] from django . urls import include , path [EOL] [EOL] urlpatterns = [ path ( [string] , include ( [string] ) ) , path ( [string] , admin . site . urls ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0