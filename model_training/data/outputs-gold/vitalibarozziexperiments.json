[EOL] def fix ( f ) : [EOL] f ( fix ( f ) ) [EOL] [EOL] def const ( n ) : [EOL] return [number] [EOL] [EOL] fix ( const ) [comment]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , List [EOL] import typing [EOL] import requests [EOL] import sys [EOL] import requests [EOL] from bs4 import BeautifulSoup [EOL] [EOL] [EOL] [comment] [EOL] filePath = sys . argv [ [number] ] [EOL] [EOL] def main_routine ( ) : [EOL] [EOL] bodies = [ ] [EOL] with open ( filePath , [string] ) as file : [EOL] for url in file : [EOL] print ( url ) [EOL] res = requests . get ( url ) [EOL] if res . status_code == [number] : [EOL] bodies . append ( res . content ) [EOL] with open ( [string] , [string] ) as wfile : [EOL] wfile . write ( res . content ) [EOL] break [EOL] else : [EOL] print ( [string] ) [EOL] [EOL] [comment] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] import builtins [EOL] def _map ( function , _list ) : [EOL] return [ function ( x ) for x in _list ] [EOL]	0 0 0 0 0 0 0 $builtins.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] import builtins [EOL] import os [EOL] import time [EOL] import io [EOL] import subprocess [EOL] [EOL] def main ( ) : [EOL] [EOL] date = time . strftime ( [string] ) + [string] + time . strftime ( [string] ) + [string] + time . strftime ( [string] ) [EOL] hour = time . strftime ( [string] ) [EOL] [EOL] entriesFolder = os . getcwd ( ) + [string] [EOL] entryFile = entriesFolder + [string] + date + [string] [EOL] [EOL] [comment] [EOL] if not os . path . isdir ( entriesFolder ) : [EOL] raise ValueError ( [string] , [string] + entriesFolder + [string] , [string] ) [EOL] [EOL] [comment] [EOL] if not os . path . exists ( entryFile ) : [EOL] [comment] [EOL] with open ( entryFile , [string] ) as openFile : [EOL] openFile . write ( date + [string] ) [EOL] [EOL] [comment] [EOL] with open ( entryFile , [string] ) as openFile : [EOL] openFile . write ( [string] + hour + [string] ) [EOL] [EOL] [comment] [EOL] subprocess . call ( [string] + entryFile , shell = True ) [EOL] print ( [string] ) [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List [EOL] import builtins [EOL] import typing [EOL] [docstring] [EOL] from os import ( chmod , environ , mkdir ) [EOL] from filecmp import ( cmp , clear_cache ) [EOL] from shutil import copy [EOL] from os . path import exists [EOL] from subprocess import ( call , DEVNULL ) [EOL] [EOL] def isEqual ( file1 , file2 ) : [EOL] [docstring] [EOL] equal = cmp ( file1 , file2 ) [comment] [EOL] clear_cache ( ) [comment] [EOL] return equal [EOL] [EOL] def ensureDir ( toDir , dirMode ) : [EOL] [docstring] [EOL] if not exists ( toDir ) : [EOL] mkdir ( toDir , dirMode ) [EOL] [comment] [EOL] [EOL] def transfer ( files , from_ , to , dirMode = [number] , fileMode = [number] , cb = lambda : None ) : [EOL] [docstring] [EOL] for file in files : [EOL] fromFile = from_ + file [EOL] toFile = to + file [EOL] if not exists ( fromFile ) : [EOL] print ( [string] + fromFile ) [EOL] exit ( [number] ) [EOL] if exists ( toFile ) : [EOL] if isEqual ( fromFile , toFile ) : [EOL] continue [EOL] ensureDir ( to , dirMode ) [EOL] print ( [string] + file + [string] + from_ + [string] + to + [string] ) [EOL] copy ( from_ + file , to + file ) [EOL] print ( [string] + file + [string] + str ( fileMode ) + [string] ) [EOL] chmod ( to + file , fileMode ) [EOL] cb ( ) [EOL] [EOL] def isInstalled ( app ) : [EOL] [docstring] [EOL] return call ( [string] + app , stdout = DEVNULL , shell = True ) == [number] [EOL] [EOL] def install ( app , cb ) : [EOL] [docstring] [EOL] if not ( isInstalled ( app ) ) : [EOL] if not ( call ( cb , shell = True ) == [number] ) : [EOL] print ( [string] ) [EOL] exit ( [number] ) [EOL] [EOL] def aptInstall ( app ) : [EOL] [docstring] [EOL] install ( app , [string] + app ) [EOL] [EOL] def main ( ) : [EOL] [comment] [EOL] home = environ [ [string] ] + [string] [EOL] docs = home + [string] [EOL] local = home + [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] apps = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] for app in apps : [EOL] aptInstall ( app ) [EOL] [EOL] [comment] [EOL] install ( [string] , [string] ) [EOL] install ( [string] , [string] ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] transfer ( files = [ [string] , [string] , [string] , [string] ] , from_ = docs + [string] , to = local + [string] ) [EOL] [EOL] [comment] [EOL] transfer ( files = [ [string] , [string] ] , from_ = docs + [string] , to = local + [string] ) [EOL] [EOL] [comment] [EOL] transfer ( files = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] , from_ = docs + [string] , to = home , fileMode = [number] ) [EOL] [EOL] [comment] [EOL] transfer ( files = [ [string] ] , from_ = docs + [string] , to = home + [string] , fileMode = [number] ) [EOL] [EOL] [comment] [EOL] def sshAdd ( ) : [EOL] call ( [string] + home + [string] , shell = True ) [EOL] transfer ( files = [ [string] , [string] ] , from_ = docs + [string] , to = home + [string] , cb = sshAdd , fileMode = [number] ) [EOL] [EOL] if __name__ == [string] : main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import builtins [EOL] _list_ = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] def ask ( optionA , optionB ) : [EOL] print ( [string] ) [EOL] print ( [string] , optionA ) [EOL] print ( [string] , optionB ) [EOL] answer = input ( ) [EOL] if answer == [string] : [EOL] return optionA [EOL] elif answer == [string] : [EOL] return optionB [EOL] else : [EOL] print ( [string] ) [EOL] return ask ( optionA , optionB ) [EOL] [EOL] [EOL] [comment] [EOL] def compare ( string , strList ) : [EOL] if len ( strList ) == [number] : [EOL] return [ ask ( string , strList [ [number] ] ) ] [EOL] else : [EOL] return [ ask ( string , strList [ [number] ] ) ] + compare ( string , strList [ [number] : ] ) [EOL] [EOL] [EOL] [comment] [EOL] def judge ( langList ) : [EOL] if len ( langList ) == [number] : [EOL] return compare ( langList [ [number] ] , langList [ [number] : ] ) [EOL] else : [EOL] return compare ( langList [ [number] ] , langList [ [number] : ] ) + judge ( langList [ [number] : ] ) [EOL] [EOL] [EOL] [comment] [EOL] def showScore ( rawList , judgedList ) : [EOL] if len ( rawList ) == [number] : [EOL] print ( rawList [ [number] ] , [string] , judgedList . count ( rawList [ [number] ] ) ) [EOL] else : [EOL] print ( rawList [ [number] ] , [string] , judgedList . count ( rawList [ [number] ] ) ) [EOL] showScore ( rawList [ [number] : ] , judgedList ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] showScore ( _list_ , judge ( _list_ ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.list$ 0 0 0 $builtins.list$ 0 0 0
[comment] [EOL] from jobhandle . main import main [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Dict , Tuple , List , Any , Optional [EOL] import builtins [EOL] import typing [EOL] import random [EOL] from typing import ( Tuple , Optional , Dict , List ) [EOL] from . lib . menu import ( menu , MenuOptions , giveOptions , ConfigOptions ) [EOL] from . lib . forms import ( form , Form ) [EOL] from . db import ( Query , count , getRow , makeRow , updateRow ) [EOL] from . lib . format import ( formatedTime , ratioBar , prompt , col2 , color , box , terminalBar ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] jobRow = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] jobRules = [ key + [string] + jobRow [ key ] for key in jobRow ] [EOL] jobColumns = [ key for key in jobRow ] [EOL] [EOL] [comment] [EOL] jobGroups = [ [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] fields = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] def menuJobs ( ) : [EOL] [EOL] [comment] [EOL] opts = ... [EOL] cfgs = ... [EOL] r = ... [EOL] heading = ... [EOL] msg = ... [EOL] [EOL] [comment] [EOL] opts = { [string] : { [string] : [string] , [string] : [string] , [string] : addJob } , [string] : { [string] : [string] , [string] : [string] , [string] : listJobs , } , [string] : { [string] : [string] , [string] : [string] , [string] : editJob } , } [EOL] cfgs = { [string] : [ [string] ] } [EOL] [EOL] size = [number] [EOL] [EOL] nC = count ( [string] ) [EOL] oC = count ( [string] , [ ( [string] , [string] ) ] ) [EOL] dC = count ( [string] , [ ( [string] , [string] ) ] ) [EOL] cC = count ( [string] , [ ( [string] , [string] ) ] ) [EOL] [EOL] numJobs = col2 ( size , [string] , str ( nC ) ) + [string] [EOL] openJbs = col2 ( size , [string] , str ( oC ) , c2Color = [string] ) + [string] [EOL] doneJbs = col2 ( size , [string] , str ( dC ) , c2Color = [string] ) + [string] [EOL] closJbs = col2 ( size , [string] , str ( cC ) , c2Color = [string] ) [EOL] [EOL] ratio = ratioBar ( [ ( dC , [string] ) , ( oC , [string] ) , ( cC , [string] ) ] ) + [string] [EOL] [EOL] msg = ratio + numJobs + doneJbs + openJbs + closJbs [EOL] [EOL] [comment] [EOL] [comment] [EOL] while True : [EOL] [EOL] r = menu ( name = [string] , msg = msg , opts = opts , cfgs = cfgs ) [EOL] [EOL] if r is None : [EOL] return None [EOL] else : [EOL] msg = r [EOL] [EOL] [EOL] [comment] [EOL] def newJobId ( ) : [EOL] [EOL] [comment] [EOL] value = ... [EOL] hexxx = ... [EOL] query = ... [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] while True : [EOL] [EOL] [comment] [EOL] value = random . randint ( [number] , [number] ) [EOL] hexxx = format ( value , [string] ) [EOL] [EOL] query = getRow ( table = [string] , row = [string] , where = [ ( [string] , str ( hexxx ) ) ] ) [EOL] [EOL] [comment] [EOL] if query [ [number] ] is not None : [EOL] continue [EOL] else : [EOL] return hexxx [EOL] [EOL] [EOL] [comment] [EOL] def getValidLength ( ) : [EOL] [EOL] [comment] [EOL] msg = ... [EOL] i = ... [EOL] lengths = [ [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] msg = [string] [EOL] i = giveOptions ( msg = msg , c1 = lengths , c2 = [ [string] ] * [number] ) [EOL] return str ( lengths [ i ] ) [EOL] [EOL] [EOL] [comment] [EOL] def getValidLevel ( ) : [EOL] [EOL] [comment] [EOL] msg = ... [EOL] i = ... [EOL] levels = [ [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] msg = [string] [EOL] i = giveOptions ( msg = msg , c1 = levels , c2 = [ [string] ] * [number] ) [EOL] return str ( levels [ i ] ) [EOL] [EOL] [EOL] [comment] [EOL] def getValidGroup ( ) : [EOL] [EOL] [comment] [EOL] msg = ... [EOL] counts = ... [EOL] i = ... [EOL] [EOL] [comment] [EOL] msg = [string] [EOL] counts = [ str ( count ( [string] , [ ( [string] , x ) ] ) ) for x in jobGroups ] [EOL] i = giveOptions ( msg = msg , c1 = jobGroups , c2 = counts ) [EOL] return str ( jobGroups [ i ] ) [EOL] [EOL] [EOL] [comment] [EOL] def getValidSource ( ) : [EOL] [EOL] [comment] [EOL] msg = ... [EOL] query = ... [EOL] names = ... [EOL] i = ... [EOL] [EOL] [comment] [EOL] query = getRow ( table = [string] , row = [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if query [ [number] ] is None : [EOL] print ( color ( [string] , [string] ) ) [EOL] print ( color ( [string] , [string] ) ) [EOL] exit ( ) [EOL] [EOL] [comment] [EOL] names = [ str ( x [ [number] ] ) for x in query ] [EOL] msg = [string] [EOL] i = giveOptions ( msg = msg , c1 = names ) [EOL] return str ( names [ i ] ) [EOL] [EOL] [EOL] [comment] [EOL] def editJob ( ) : [EOL] [EOL] [comment] [EOL] queryId = ... [EOL] query = ... [EOL] m1 = ... [EOL] m2 = ... [EOL] msg = ... [EOL] fieldsMsg = ... [EOL] targetField = ... [EOL] _where = ... [EOL] _field = ... [EOL] _mod = ... [EOL] [EOL] [comment] [EOL] [comment] [EOL] queryId = prompt ( [string] , [string] ) [EOL] query = getRow ( table = [string] , where = [ ( [string] , queryId ) ] ) [EOL] if query == [ None ] : [EOL] m1 = color ( [string] , [string] ) [EOL] m2 = color ( [string] , [string] ) [EOL] return m1 + [string] + m2 [EOL] [EOL] [comment] [EOL] msg = box ( formatedJob ( query [ [number] ] ) + [string] ) [EOL] print ( msg ) [EOL] [EOL] [comment] [EOL] fieldsMsg = [string] [EOL] targetField = fields [ giveOptions ( msg = fieldsMsg , c1 = fields ) ] [EOL] [EOL] [comment] [EOL] if targetField is [string] : [EOL] newValue = getValidGroup ( ) [EOL] elif targetField is [string] : [EOL] newValue = getValidSource ( ) [EOL] elif targetField is [string] : [EOL] newValue = getValidLevel ( ) [EOL] else : [EOL] [comment] [EOL] newValue = prompt ( [string] + targetField + [string] , [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] _where = [ ( [string] , queryId ) ] [EOL] _field = ( targetField , newValue ) [EOL] _mod = ( [string] , formatedTime ( ) ) [EOL] [EOL] [comment] [EOL] updateRow ( table = [string] , field = _field , where = _where ) [EOL] updateRow ( table = [string] , field = _mod , where = _where ) [EOL] [EOL] [comment] [EOL] output = color ( [string] , [string] + targetField + [string] + queryId + [string] ) [EOL] return output [EOL] [EOL] [EOL] [comment] [EOL] def addJob ( ) : [EOL] [EOL] [comment] [EOL] listForm = ... [EOL] valueList = ... [EOL] [EOL] [comment] [EOL] listForm = { [string] : newJobId ( ) , [string] : getValidGroup ( ) , [string] : getValidSource ( ) , [string] : [ [string] ] , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ [string] ] , [string] : getValidLevel ( ) , [string] : getValidLength ( ) , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ [string] ] , [string] : formatedTime ( ) , [string] : formatedTime ( ) } [EOL] valueList = form ( listForm ) [EOL] [EOL] [comment] [EOL] makeRow ( table = [string] , columns = jobColumns , values = valueList ) [EOL] [EOL] [comment] [EOL] return color ( [string] , [string] ) + color ( [string] , valueList [ [number] ] ) [EOL] [EOL] [EOL] [comment] [EOL] def formatedJob ( row ) : [EOL] [EOL] jid = ... [EOL] src = ... [EOL] tlt = ... [EOL] lnk = ... [EOL] pst = ... [EOL] lct = ... [EOL] dpt = ... [EOL] lvl = ... [EOL] lng = ... [EOL] pay = ... [EOL] tag = ... [EOL] ctc = ... [EOL] nts = ... [EOL] cre = ... [EOL] mod = ... [EOL] [EOL] size = ... [EOL] [EOL] r8C = None [EOL] [EOL] size = [number] [EOL] [EOL] [comment] [EOL] if row [ [number] ] == [string] : [EOL] r8C = [string] [EOL] elif row [ [number] ] == [string] : [EOL] r8C = [string] [EOL] elif row [ [number] ] == [string] : [EOL] r8C = [string] [EOL] [EOL] jid = col2 ( size , [string] , row [ [number] ] , c2Color = [string] ) [EOL] src = col2 ( size , [string] , row [ [number] ] , c2Color = [string] ) [EOL] tlt = col2 ( size , [string] , row [ [number] ] , c2Color = [string] ) [EOL] lnk = col2 ( size , [string] , row [ [number] ] ) [EOL] pst = col2 ( size , [string] , row [ [number] ] ) [EOL] lct = col2 ( size , [string] , row [ [number] ] ) [EOL] dpt = col2 ( size , [string] , row [ [number] ] ) [EOL] lvl = col2 ( size , [string] , row [ [number] ] , c2Color = r8C ) [EOL] lng = col2 ( size , [string] , row [ [number] ] ) [EOL] pay = col2 ( size , [string] , row [ [number] ] ) [EOL] tag = col2 ( size , [string] , row [ [number] ] ) [EOL] ctc = col2 ( size , [string] , row [ [number] ] ) [EOL] nts = col2 ( size , [string] , row [ [number] ] ) [EOL] cre = col2 ( size , [string] , row [ [number] ] ) [EOL] mod = col2 ( size , [string] , row [ [number] ] ) [EOL] [EOL] output = [ jid , src , tlt , lnk , pst , lct , dpt , lvl , lng , pay , tag , ctc , nts , cre , mod ] [EOL] [EOL] return [string] . join ( output ) [EOL] [EOL] [EOL] [comment] [EOL] def listJobs ( ) : [EOL] [EOL] [comment] [EOL] group = ... [EOL] query = ... [EOL] acc = [ ] [EOL] [EOL] [comment] [EOL] group = getValidGroup ( ) [EOL] query = getRow ( table = [string] , where = [ ( [string] , group ) ] ) [EOL] [EOL] [comment] [EOL] if query == [ None ] : [EOL] return color ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] acc = [ formatedJob ( row ) for row in query ] [EOL] return ( [string] + terminalBar ( [string] ) ) . join ( acc ) [EOL]	builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] import os [EOL] from typing import Dict [EOL] from . db import ( validTable , makeTable , count ) [EOL] from . config import ( appName , appVersion , license , author , email ) [EOL] from . sources import ( menuSources , sourceRules ) [EOL] from . jobs import ( menuJobs , jobRules ) [EOL] from . lib . menu import ( menu , MenuOptions , ConfigOptions ) [EOL] from . lib . format import ( col2 , columnSize , color ) [EOL] [EOL] [EOL] [comment] [EOL] def printAbout ( ) : [EOL] [EOL] [comment] [EOL] data = ... [EOL] size = ... [EOL] [EOL] [comment] [EOL] data = { [string] : appName , [string] : appVersion , [string] : license , [string] : author , [string] : email , } [EOL] [EOL] [comment] [EOL] size = columnSize ( [ key + [string] for key in data ] ) [EOL] [EOL] [comment] [EOL] print ( ) [EOL] for key in data : [EOL] print ( col2 ( size , key . title ( ) + [string] , data [ key ] ) ) [EOL] [EOL] [comment] [EOL] input ( [string] ) [EOL] [EOL] [EOL] [comment] [EOL] def menuMain ( ) : [EOL] [EOL] [comment] [EOL] opts = ... [EOL] cfgs = ... [EOL] cwd = ... [EOL] l1 = ... [EOL] l2 = ... [EOL] msg = ... [EOL] sCount = ... [EOL] jCount = ... [EOL] [EOL] [comment] [EOL] [comment] [EOL] while True : [EOL] [EOL] [comment] [EOL] sCount = str ( count ( [string] ) ) [EOL] jCount = str ( count ( [string] ) ) [EOL] [EOL] [comment] [EOL] opts = { [string] : { [string] : [string] , [string] : sCount , [string] : menuSources } , [string] : { [string] : [string] , [string] : jCount , [string] : menuJobs } , [string] : { [string] : [string] , [string] : [string] , [string] : printAbout } , } [EOL] cfgs = { [string] : [ [string] ] } [EOL] [EOL] [comment] [EOL] cwd = os . getcwd ( ) [EOL] if len ( cwd ) > [number] : [EOL] while len ( cwd ) > [number] : [EOL] cwd = cwd [ [number] : ] [EOL] cwd = [string] + cwd [EOL] [EOL] [comment] [EOL] l1 = color ( [string] , appName ) + [string] + color ( [string] , [string] + appVersion ) + [string] + license [EOL] l2 = [string] + color ( [string] , cwd ) [EOL] msg = l1 + [string] + l2 [EOL] [EOL] menu ( name = [string] , msg = msg , opts = opts , cfgs = cfgs ) [EOL] [EOL] [EOL] [comment] [EOL] def main ( ) : [EOL] [EOL] [comment] [EOL] if not validTable ( [string] ) : [EOL] makeTable ( table = [string] , rules = sourceRules ) [EOL] [EOL] [comment] [EOL] if not validTable ( [string] ) : [EOL] makeTable ( table = [string] , rules = jobRules ) [EOL] [EOL] [comment] [EOL] return menuMain ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Tuple , List , Any , Optional [EOL] import builtins [EOL] import typing [EOL] from typing import ( Optional , Tuple , List , Dict ) [EOL] from . db import ( Query , makeRow , getRow , count , updateRow ) [EOL] from . lib . menu import ( menu , MenuOptions , ConfigOptions , giveOptions ) [EOL] from . lib . forms import ( form , Form ) [EOL] from . lib . format import ( box , ratioBar , color , prompt , col2 , formatedTime , terminalBar ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] sourceRow = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] sourceRules = [ key + [string] + sourceRow [ key ] for key in sourceRow ] [EOL] sourceColumns = [ key for key in sourceRow ] [EOL] [EOL] [comment] [EOL] fields = [ [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] def menuSources ( ) : [EOL] [EOL] [comment] [EOL] opts = ... [EOL] cfgs = ... [EOL] l1 = ... [EOL] l2 = ... [EOL] msg = ... [EOL] r = ... [EOL] [EOL] [comment] [EOL] opts = { [string] : { [string] : [string] , [string] : [string] , [string] : addSource } , [string] : { [string] : [string] , [string] : [string] , [string] : listSources , } , [string] : { [string] : [string] , [string] : [string] , [string] : editSource } , } [EOL] cfgs = { [string] : [ [string] ] } [EOL] [EOL] [comment] [EOL] l1 = color ( [string] , [string] ) [EOL] l2 = [string] + color ( [string] , str ( count ( [string] ) ) ) [EOL] msg = l1 + [string] + l2 [EOL] [EOL] [comment] [EOL] [comment] [EOL] while True : [EOL] r = menu ( name = [string] , msg = msg , opts = opts , cfgs = cfgs ) [EOL] if r is None : [EOL] return None [EOL] else : [EOL] msg = r [EOL] [EOL] [EOL] [comment] [EOL] def editSource ( ) : [EOL] [EOL] [comment] [EOL] checkEmptyQuery = ... [EOL] names = ... [EOL] namesMsg = ... [EOL] name = ... [EOL] [EOL] sourceQuery = ... [EOL] sourceQueryMsg = ... [EOL] [EOL] fieldsMsg = ... [EOL] field = ... [EOL] newValue = ... [EOL] [EOL] _where = ... [EOL] _field = ... [EOL] _mod = ... [EOL] [EOL] [comment] [EOL] checkEmptyQuery = getRow ( table = [string] , row = [string] ) [EOL] if checkEmptyQuery == [ None ] : [EOL] return color ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] names = [ x [ [number] ] for x in checkEmptyQuery ] [EOL] namesMsg = [string] [EOL] name = checkEmptyQuery [ giveOptions ( msg = namesMsg , c1 = names ) ] [ [number] ] [EOL] [EOL] [comment] [EOL] sourceQuery = getRow ( table = [string] , where = [ ( [string] , name ) ] ) [EOL] sourceQueryMsg = formatedSource ( sourceQuery [ [number] ] ) [EOL] print ( box ( sourceQueryMsg ) ) [EOL] [EOL] [comment] [EOL] fieldsMsg = [string] [EOL] targetField = fields [ giveOptions ( msg = fieldsMsg , c1 = fields ) ] [EOL] newValue = prompt ( [string] + targetField + [string] , [string] ) [EOL] [EOL] [comment] [EOL] _where = [ ( [string] , name ) ] [EOL] _field = ( targetField , newValue ) [EOL] _mod = ( [string] , formatedTime ( ) ) [EOL] [EOL] [comment] [EOL] updateRow ( table = [string] , field = _field , where = _where ) [EOL] updateRow ( table = [string] , field = _mod , where = _where ) [EOL] [EOL] [comment] [EOL] output = color ( [string] , [string] + targetField + [string] + name + [string] ) [EOL] return output [EOL] [EOL] [EOL] [comment] [EOL] def getValidSource ( ) : [EOL] [EOL] [comment] [EOL] listForm = ... [EOL] name = ... [EOL] query = ... [EOL] [EOL] [comment] [EOL] while True : [EOL] [EOL] [comment] [EOL] listForm = { [string] : [ [string] ] } [EOL] name = form ( listForm ) [ [number] ] [EOL] [EOL] [comment] [EOL] query = getRow ( table = [string] , row = [string] , where = [ ( [string] , name ) ] ) [EOL] [EOL] [comment] [EOL] if query != [ None ] : [EOL] print ( color ( [string] , [string] ) ) [EOL] else : [EOL] return name [EOL] [EOL] [EOL] [comment] [EOL] def addSource ( ) : [EOL] [EOL] [comment] [EOL] listForm = ... [EOL] valueList = ... [EOL] [EOL] [comment] [EOL] listForm = { [string] : getValidSource ( ) , [string] : [ ] , [string] : [ ] , [string] : [ ] , [string] : [ [string] ] , [string] : formatedTime ( ) , [string] : formatedTime ( ) } [EOL] valueList = form ( listForm ) [EOL] [EOL] [comment] [EOL] makeRow ( table = [string] , columns = sourceColumns , values = valueList ) [EOL] return color ( [string] , [string] ) [EOL] [EOL] [EOL] [comment] [EOL] def formatedSource ( row ) : [EOL] [EOL] [comment] [EOL] name = ... [EOL] site = ... [EOL] paym = ... [EOL] taxx = ... [EOL] note = ... [EOL] crea = ... [EOL] modi = ... [EOL] [EOL] doneJobsCount = ... [EOL] openJobsCount = ... [EOL] closeJobsCount = ... [EOL] [EOL] size = [number] [EOL] output = ... [EOL] [EOL] [comment] [EOL] doneJobsCount = count ( [string] , [ ( [string] , row [ [number] ] ) , ( [string] , [string] ) ] ) [EOL] [EOL] openJobsCount = count ( [string] , [ ( [string] , row [ [number] ] ) , ( [string] , [string] ) ] ) [EOL] [EOL] closedJobsCount = count ( [string] , [ ( [string] , row [ [number] ] ) , ( [string] , [string] ) ] ) [EOL] [EOL] rati = ratioBar ( [ ( doneJobsCount , [string] ) , ( openJobsCount , [string] ) , ( closedJobsCount , [string] ) ] ) + [string] [EOL] [EOL] name = col2 ( size , [string] , row [ [number] ] , c2Color = [string] ) [EOL] site = col2 ( size , [string] , row [ [number] ] , c2Color = [string] ) [EOL] dJbs = col2 ( size , [string] , str ( doneJobsCount ) , c2Color = [string] ) [EOL] oJbs = col2 ( size , [string] , str ( openJobsCount ) , c2Color = [string] ) [EOL] cJbs = col2 ( size , [string] , str ( closedJobsCount ) , c2Color = [string] ) [EOL] paym = col2 ( size , [string] , row [ [number] ] , c2Color = [string] ) [EOL] taxx = col2 ( size , [string] , row [ [number] ] , c2Color = [string] ) [EOL] note = col2 ( size , [string] , row [ [number] ] , c2Color = [string] ) [EOL] crea = col2 ( size , [string] , row [ [number] ] ) [EOL] modi = col2 ( size , [string] , row [ [number] ] ) [EOL] [EOL] output = [ rati , name , site , dJbs , oJbs , cJbs , paym , taxx , note , crea , modi ] [EOL] [EOL] [comment] [EOL] return [string] . join ( output ) [EOL] [EOL] [EOL] [comment] [EOL] def listSources ( ) : [EOL] [EOL] [comment] [EOL] query = ... [EOL] n = ... [EOL] row = ... [EOL] acc = [ ] [EOL] [EOL] query = getRow ( table = [string] ) [EOL] [EOL] [comment] [EOL] if query == [ None ] : [EOL] return color ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] acc = [ formatedSource ( row ) for row in query ] [EOL] return ( [string] + terminalBar ( [string] ) ) . join ( acc ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List , Any , Optional , Type [EOL] import builtins [EOL] import typing [EOL] import sqlite3 [EOL] import sqlite3 [EOL] from sqlite3 import Error [EOL] from . config import ( dbPath ) [EOL] from . lib . format import ( quoteList , quote ) [EOL] from typing import ( Tuple , List , Optional ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] Query = List [ Optional [ tuple ] ] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] def conn ( path ) : [EOL] [EOL] try : [EOL] sqlite3 . connect ( path ) [EOL] except Error as e : [EOL] raise IOError ( str ( e ) ) [EOL] [EOL] return sqlite3 . connect ( path ) [EOL] [EOL] [EOL] [comment] [EOL] def makeTable ( * , table , rules , db = None ) : [EOL] [EOL] [comment] [EOL] qRules = ... [EOL] command = ... [EOL] [EOL] [comment] [EOL] if db is None : [EOL] db = conn ( dbPath ) [EOL] [EOL] [comment] [EOL] qRules = [string] . join ( rules ) [EOL] [EOL] [comment] [EOL] command = [string] + table + [string] + qRules + [string] [EOL] try : [EOL] db . cursor ( ) . execute ( str ( command ) ) [EOL] db . commit ( ) [EOL] except Error as e : [EOL] raise IOError ( str ( e ) ) [EOL] [EOL] [comment] [EOL] if not validTable ( table , db = db ) : [EOL] raise IOError ( [string] + table + [string] ) [EOL] [EOL] [EOL] [comment] [EOL] def dropTable ( * , table , db = None ) : [EOL] [EOL] [comment] [EOL] command = ... [EOL] [EOL] [comment] [EOL] if db is None : [EOL] db = conn ( dbPath ) [EOL] [EOL] [comment] [EOL] command = [string] + table + [string] [EOL] try : [EOL] db . cursor ( ) . execute ( str ( command ) ) [EOL] db . commit ( ) [EOL] except Error as e : [EOL] raise IOError ( str ( e ) ) [EOL] [EOL] [comment] [EOL] if validTable ( table , db = db ) : [EOL] raise IOError ( [string] + table + [string] ) [EOL] [EOL] [EOL] [comment] [EOL] def makeRow ( * , table , columns , values , db = None ) : [EOL] [EOL] [comment] [EOL] qCols = ... [EOL] qVals = ... [EOL] insert = ... [EOL] fValue = ... [EOL] command = ... [EOL] [EOL] [comment] [EOL] if db is None : [EOL] db = conn ( dbPath ) [EOL] [EOL] [comment] [EOL] qCols = [string] . join ( quoteList ( columns ) ) [EOL] qVals = [string] . join ( quoteList ( values ) ) [EOL] [EOL] [comment] [EOL] insert = [string] + table + [string] + qCols + [string] + [string] [EOL] fValue = [string] + qVals + [string] [EOL] [EOL] [comment] [EOL] command = insert + fValue [EOL] try : [EOL] db . cursor ( ) . execute ( str ( command ) ) [EOL] db . commit ( ) [EOL] except Error as e : [EOL] raise IOError ( str ( e ) ) [EOL] [EOL] [EOL] [comment] [EOL] def validTable ( table , db = None ) : [EOL] [EOL] [comment] [EOL] _select = ... [EOL] _from = ... [EOL] _where = ... [EOL] _and = ... [EOL] command = ... [EOL] [EOL] [comment] [EOL] if db is None : [EOL] db = conn ( dbPath ) [EOL] [EOL] [comment] [EOL] _select = [string] + [string] [EOL] _from = [string] + [string] [EOL] _where = [string] + [string] [EOL] _and = [string] + table + [string] [EOL] [EOL] [comment] [EOL] cursor = db . cursor ( ) [EOL] command = _select + _from + _where + _and [EOL] try : [EOL] cursor . execute ( str ( command ) ) [EOL] except Error as e : [EOL] raise IOError ( str ( e ) ) [EOL] [EOL] [comment] [EOL] if not isinstance ( cursor . fetchone ( ) , tuple ) : [EOL] return False [EOL] else : [EOL] return True [EOL] [EOL] [EOL] [comment] [EOL] def updateRow ( * , table , field , where , db = None ) : [EOL] [EOL] [comment] [EOL] update = ... [EOL] sett = ... [EOL] _where = ... [EOL] command = ... [EOL] [EOL] [comment] [EOL] if db is None : [EOL] db = conn ( dbPath ) [EOL] [EOL] [comment] [EOL] update = [string] + quote ( table ) + [string] [EOL] sett = [string] + quote ( field [ [number] ] ) + [string] + quote ( field [ [number] ] ) + [string] [EOL] [EOL] [comment] [EOL] w = [ [string] + field + [string] + value + [string] for field , value in where ] [EOL] _where = [string] + [string] . join ( w ) + [string] [EOL] [EOL] [comment] [EOL] cursor = db . cursor ( ) [EOL] command = update + sett + _where [EOL] try : [EOL] cursor . execute ( str ( command ) ) [EOL] db . commit ( ) [EOL] except Error as e : [EOL] raise IOError ( str ( e ) ) [EOL] [EOL] [EOL] [comment] [EOL] def getRow ( * , table , row = [string] , where = [ None ] , db = None ) : [EOL] [EOL] [comment] [EOL] _where = ... [EOL] command = ... [EOL] output = ... [EOL] [EOL] [comment] [EOL] if db is None : [EOL] db = conn ( dbPath ) [EOL] [EOL] [comment] [EOL] if where == [ None ] : [EOL] _where = [string] [EOL] else : [EOL] w = [ [string] + field + [string] + value + [string] for field , value in where ] [EOL] _where = [string] + [string] . join ( w ) + [string] [EOL] [EOL] [comment] [EOL] cursor = db . cursor ( ) [EOL] _select = [string] + row + [string] [EOL] _from = [string] + table + [string] [EOL] command = _select + _from + _where + [string] [EOL] try : [EOL] cursor . execute ( str ( command ) ) [EOL] except Error as e : [EOL] raise IOError ( str ( e ) ) [EOL] [EOL] [comment] [EOL] output = cursor . fetchall ( ) [EOL] if output == [ ] : [EOL] return [ None ] [EOL] return output [EOL] [EOL] [EOL] [comment] [EOL] def count ( table , where = [ None ] , db = None ) : [EOL] [EOL] [comment] [EOL] query = ... [EOL] [EOL] [comment] [EOL] if db is None : [EOL] db = conn ( dbPath ) [EOL] [EOL] [comment] [EOL] query = getRow ( table = table , row = [string] , where = where , db = db ) [EOL] [EOL] [comment] [EOL] if query == [ None ] : [EOL] return [number] [EOL] else : [EOL] return query [ [number] ] [ [number] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] appName = [string] [EOL] appVersion = [string] [EOL] author = [string] [EOL] email = [string] [EOL] license = [string] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] dbPath = [string] [EOL]	0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
import unittest [EOL] import jobhandle . lib . format [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import unittest [EOL] import sqlite3 [EOL] import jobhandle . db as db [EOL] import os [EOL] [EOL] [EOL] def cleanDB ( ) : [EOL] filePath = [string] [EOL] with open ( filePath , [string] ) as x : [EOL] x . close ( ) [EOL] os . remove ( filePath ) [EOL] if os . path . isfile ( filePath ) : [EOL] raise [EOL] return db . conn ( filePath ) [EOL] [EOL] [EOL] class TestConn ( unittest . TestCase ) : [EOL] [EOL] def test_if_conn_returns_sqlite3_Connection ( self ) : [EOL] self . assertEqual ( type ( cleanDB ( ) ) , sqlite3 . Connection ) [EOL] [EOL] [EOL] class TestMakeTable ( unittest . TestCase ) : [EOL] [EOL] def test_if_table_is_made ( self ) : [EOL] tdb = cleanDB ( ) [EOL] db . makeTable ( table = [string] , rules = [ [string] ] , db = tdb ) [EOL] self . assertTrue ( db . validTable ( table = [string] , db = tdb ) ) [EOL] [EOL] def test_if_raise_when_duplicating_table ( self ) : [EOL] tdb = cleanDB ( ) [EOL] with self . assertRaises ( IOError ) : [EOL] db . makeTable ( table = [string] , rules = [ [string] ] , db = tdb ) [EOL] db . makeTable ( table = [string] , rules = [ [string] ] , db = tdb ) [EOL] [EOL] [EOL] class TestDropTable ( unittest . TestCase ) : [EOL] [EOL] def test_if_table_is_dropped ( self ) : [EOL] tdb = cleanDB ( ) [EOL] db . makeTable ( table = [string] , rules = [ [string] ] , db = tdb ) [EOL] db . dropTable ( table = [string] , db = tdb ) [EOL] self . assertFalse ( db . validTable ( table = [string] , db = tdb ) ) [EOL] [EOL] def test_if_raise_when_invalid_table ( self ) : [EOL] tdb = cleanDB ( ) [EOL] with self . assertRaises ( IOError ) : [EOL] db . makeTable ( table = [string] , rules = [ [string] ] , db = tdb ) [EOL] db . dropTable ( table = [string] , db = tdb ) [EOL] db . dropTable ( table = [string] , db = tdb ) [EOL] [EOL] [EOL] class TestMakeRow ( unittest . TestCase ) : [EOL] [EOL] def test_if_row_was_made ( self ) : [EOL] tdb = cleanDB ( ) [EOL] db . makeTable ( table = [string] , rules = [ [string] ] , db = tdb ) [EOL] db . makeRow ( table = [string] , columns = [ [string] ] , values = [ [string] ] , db = tdb ) [EOL] count = db . count ( table = [string] , where = [ ( [string] , [string] ) ] , db = tdb ) [EOL] self . assertEqual ( [number] , count ) [EOL] [EOL] def test_if_raise_when_colliding_primary_key ( self ) : [EOL] tdb = cleanDB ( ) [EOL] with self . assertRaises ( IOError ) : [EOL] db . makeTable ( table = [string] , rules = [ [string] ] , db = tdb ) [EOL] db . makeRow ( table = [string] , columns = [ [string] ] , values = [ [string] ] , db = tdb ) [EOL] db . makeRow ( table = [string] , columns = [ [string] ] , values = [ [string] ] , db = tdb ) [EOL] [EOL] [EOL] class TestValidTable ( unittest . TestCase ) : [EOL] [EOL] def test_that_returns_false_when_invalid_table_name ( self ) : [EOL] tdb = cleanDB ( ) [EOL] db . makeTable ( table = [string] , rules = [ [string] , [string] ] , db = tdb ) [EOL] self . assertFalse ( db . validTable ( table = [string] , db = tdb ) ) [EOL] [EOL] def test_that_returns_true_when_valid_table_name ( self ) : [EOL] tdb = cleanDB ( ) [EOL] db . makeTable ( table = [string] , rules = [ [string] , [string] ] , db = tdb ) [EOL] self . assertTrue ( db . validTable ( table = [string] , db = tdb ) ) [EOL] [EOL] [EOL] class TestUpdateRow ( unittest . TestCase ) : [EOL] [EOL] def test_if_row_was_updated ( self ) : [EOL] tdb = cleanDB ( ) [EOL] db . makeTable ( table = [string] , rules = [ [string] ] , db = tdb ) [EOL] db . makeRow ( table = [string] , columns = [ [string] ] , values = [ [string] ] , db = tdb ) [EOL] c = db . getRow ( table = [string] , row = [string] , db = tdb ) [EOL] self . assertEqual ( [string] , c [ [number] ] [ [number] ] ) [EOL] db . updateRow ( table = [string] , field = ( [string] , [string] ) , where = [ ( [string] , [string] ) ] , db = tdb ) [EOL] n = db . getRow ( table = [string] , row = [string] , db = tdb ) [EOL] self . assertEqual ( [string] , n [ [number] ] [ [number] ] ) [EOL] [EOL] [EOL] class TestGetRow ( unittest . TestCase ) : [EOL] [EOL] def test_if_got_right_value ( self ) : [EOL] tdb = cleanDB ( ) [EOL] db . makeTable ( table = [string] , rules = [ [string] , [string] ] , db = tdb ) [EOL] db . makeRow ( table = [string] , columns = [ [string] , [string] ] , values = [ [string] , [string] ] , db = tdb ) [EOL] x = db . getRow ( table = [string] , row = [string] , db = tdb ) [EOL] y = db . getRow ( table = [string] , row = [string] , db = tdb ) [EOL] self . assertEqual ( [string] , x [ [number] ] [ [number] ] ) [EOL] self . assertEqual ( [string] , y [ [number] ] [ [number] ] ) [EOL] [EOL] [EOL] class TestCount ( unittest . TestCase ) : [EOL] [EOL] def test_if_counted_rows ( self ) : [EOL] xLevel = [number] [comment] [EOL] tdb = cleanDB ( ) [EOL] db . makeTable ( table = [string] , rules = [ [string] ] , db = tdb ) [EOL] for _ in range ( xLevel ) : [EOL] db . makeRow ( table = [string] , columns = [ [string] ] , values = [ [string] ] , db = tdb ) [EOL] x = db . count ( table = [string] , db = tdb ) [EOL] self . assertEqual ( xLevel , x ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 0