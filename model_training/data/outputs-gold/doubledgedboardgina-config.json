from typing import List , Dict , Union , Any [EOL] import typing [EOL] settings = { [string] : [string] , [string] : True , [string] : True , [string] : True , [string] : [number] , [string] : [string] , [string] : False , [string] : False , [string] : True , [string] : [string] , [string] : True , [string] : False , [string] : True , [string] : True , [string] : True , [string] : None , [string] : None , [string] : None , [string] : [string] , [string] : [string] , [string] : [number] , [string] : False , [string] : [number] , [string] : [number] , [string] : [string] , [string] : False , [string] : [ ] , [string] : [number] , [string] : [number] , [string] : False , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [ ] , [string] : False } [EOL] [EOL] [EOL] def add_phonetic_transform ( self , actual_word , phonetic_word ) : [EOL] self . _settings [ [string] ] . append ( { [string] : actual_word , [string] : phonetic_word } ) [EOL] [EOL] [EOL] def set_everquest_folder_path ( path ) : [EOL] settings [ [string] ] = path [EOL] [EOL] [EOL] def set_imported_media_file_folder_path ( path ) : [EOL] settings [ [string] ] = path [EOL] [EOL] [EOL] def set_log_archive_folder_path ( path ) : [EOL] settings [ [string] ] = path [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[None,typing.List[typing.Any],builtins.bool,builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[None,typing.List[typing.Any],builtins.bool,builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[None,typing.List[typing.Any],builtins.bool,builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[None,typing.List[typing.Any],builtins.bool,builtins.int,builtins.str]]$ 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import gina_config [EOL] import builtins [EOL] from typing import NamedTuple [EOL] [EOL] [EOL] class Character ( NamedTuple ) : [EOL] name = ... [EOL] class_name = ... [EOL] enabled = ... [EOL] level = ... [EOL] log_file_path = ... [EOL] [EOL] [EOL] def get_character ( characters , character_name ) : [EOL] character = [ character for character in characters if character [ [string] ] == character_name ] [ [number] ] [EOL] return Character ( character [ [string] ] , character [ [string] ] , character [ [string] ] , character [ [string] ] , character [ [string] ] ) [EOL] [EOL] [EOL] def dump_character ( characters , character_name ) : [EOL] character = get_character ( characters , character_name ) [EOL] print ( [string] ) [EOL] print ( f' [string] { character . name }' ) [EOL] print ( f' [string] { character . class_name }' ) [EOL] print ( f' [string] { character . enabled }' ) [EOL] print ( f' [string] { character . level }' ) [EOL] print ( f' [string] { character . log_file_path }' )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $Character$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Dict , Union , Any [EOL] import typing [EOL] import builtins [EOL] from typing import Union [EOL] import json [EOL] [EOL] [comment] [EOL] import gina_config . settings [EOL] import gina_config . overlays [EOL] import gina_config . xml_converter [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def action_step ( description ) : [EOL] def decorator ( func ) : [EOL] def wrapper ( * args , ** kwargs ) : [EOL] print ( f'{ description } [string] ' , end = [string] ) [EOL] func_return_value = func ( * args , ** kwargs ) [EOL] print ( [string] ) [EOL] return func_return_value [EOL] return wrapper [EOL] return decorator [EOL] [EOL] [EOL] def output_step ( description ) : [EOL] def decorator ( func ) : [EOL] def wrapper ( * args , ** kwargs ) : [EOL] print ( f'{ description } [string] ' ) [EOL] func_return_value = func ( * args , ** kwargs ) [EOL] print ( [string] ) [EOL] return func_return_value [EOL] return wrapper [EOL] return decorator [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def _load_json_file_from_disk ( json_file_path ) : [EOL] with open ( json_file_path , [string] ) as json_file : [EOL] json_file_contents = json . load ( json_file ) [EOL] return json_file_contents [EOL] [EOL] [EOL] @ action_step ( [string] ) def load_config_file ( ) : [EOL] return _load_json_file_from_disk ( [string] ) [EOL] [EOL] [EOL] @ action_step ( [string] ) def load_spells_file ( ) : [EOL] return _load_json_file_from_disk ( [string] ) [EOL] [EOL] [EOL] @ action_step ( [string] ) def update_settings ( config ) : [EOL] gina_config . settings . set_everquest_folder_path ( config [ [string] ] [ [string] ] ) [EOL] gina_config . settings . set_imported_media_file_folder_path ( config [ [string] ] [ [string] ] ) [EOL] gina_config . settings . set_log_archive_folder_path ( config [ [string] ] [ [string] ] ) [EOL] [EOL] [EOL] def _update_overlay_font_size_and_position ( overlay , overlay_settings ) : [EOL] gina_config . overlays . set_overlay_font_size ( overlay_settings [ [string] ] , overlay ) [EOL] gina_config . overlays . set_overlay_bottom_position ( overlay_settings [ [string] ] , overlay ) [EOL] gina_config . overlays . set_overlay_left_position ( overlay_settings [ [string] ] , overlay ) [EOL] gina_config . overlays . set_overlay_right_position ( overlay_settings [ [string] ] , overlay ) [EOL] gina_config . overlays . set_overlay_top_position ( overlay_settings [ [string] ] , overlay ) [EOL] [EOL] [EOL] @ action_step ( [string] ) def update_overlays ( config ) : [EOL] for overlay_name , overlay_settings in ( config [ [string] ] [ [string] ] . items ( ) ) : [EOL] overlay = gina_config . overlays . get_text_overlay ( overlay_name ) [EOL] _update_overlay_font_size_and_position ( overlay , overlay_settings ) [EOL] for overlay_name , overlay_settings in ( config [ [string] ] [ [string] ] . items ( ) ) : [EOL] overlay = gina_config . overlays . get_timer_overlay ( overlay_name ) [EOL] _update_overlay_font_size_and_position ( overlay , overlay_settings ) [EOL] [EOL] [EOL] @ action_step ( [string] ) def update_trigger_groups ( config , spells ) : [EOL] spellbook . add_character_levels_to_spells ( config [ [string] ] , spells ) [EOL] spellbook . add_spells_to_trigger_groups ( spells ) [EOL] [EOL] [EOL] @ output_step ( [string] ) def dump_gina_config ( ) : [EOL] print ( gina_config . xml_converter . export_to_string ( ) ) [EOL] [EOL] [EOL] @ action_step ( [string] ) def save_gina_config ( config ) : [EOL] gina_config . xml_converter . export_to_file ( config [ [string] ] [ [string] ] ) [EOL] [EOL] [EOL] @ output_step ( [string] ) def launch_gina ( config ) : [EOL] import os [EOL] os . execvp ( [string] , [ [string] , [string] , config [ [string] ] [ [string] ] ] ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def main ( ) : [EOL] [comment] [EOL] config = load_config_file ( ) [EOL] spells = load_spells_file ( ) [EOL] [EOL] update_settings ( config ) [EOL] update_overlays ( config ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] save_gina_config ( config ) [EOL] [EOL] launch_gina ( config ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import List , Any [EOL] import typing [EOL] import builtins [EOL] import declxml as xml [EOL] [EOL] [comment] [EOL] import gina_config . categories [EOL] import gina_config . overlays [EOL] import gina_config . settings [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] settings_processor = xml . dictionary ( [string] , [ xml . string ( [string] ) , xml . boolean ( [string] ) , xml . boolean ( [string] ) , xml . boolean ( [string] ) , xml . integer ( [string] ) , xml . string ( [string] ) , xml . boolean ( [string] ) , xml . boolean ( [string] ) , xml . boolean ( [string] ) , xml . string ( [string] ) , xml . boolean ( [string] ) , xml . boolean ( [string] ) , xml . boolean ( [string] ) , xml . boolean ( [string] ) , xml . boolean ( [string] ) , xml . string ( [string] ) , xml . string ( [string] ) , xml . string ( [string] ) , xml . string ( [string] ) , xml . string ( [string] ) , xml . integer ( [string] ) , xml . boolean ( [string] ) , xml . integer ( [string] ) , xml . integer ( [string] ) , xml . string ( [string] ) , xml . boolean ( [string] ) , xml . array ( xml . dictionary ( [string] , [ xml . string ( [string] ) , xml . string ( [string] ) ] , required = False ) , nested = [string] ) , xml . integer ( [string] ) , xml . integer ( [string] ) , xml . boolean ( [string] ) , xml . string ( [string] ) , xml . string ( [string] ) , xml . string ( [string] ) , xml . array ( xml . string ( [string] , required = False ) , nested = [string] ) , xml . boolean ( [string] ) ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] behavior_groups_processor = xml . array ( xml . dictionary ( [string] , [ xml . string ( [string] ) , xml . string ( [string] ) , xml . string ( [string] ) , xml . string ( [string] ) , xml . string ( [string] ) , xml . integer ( [string] ) , xml . boolean ( [string] ) , xml . string ( [string] ) , xml . boolean ( [string] ) , xml . string ( [string] ) , xml . boolean ( [string] ) , xml . integer ( [string] ) , xml . array ( xml . dictionary ( [string] , [ xml . integer ( [string] ) , xml . integer ( [string] ) , xml . dictionary ( [string] , [ xml . integer ( [string] ) , xml . integer ( [string] ) ] ) , xml . dictionary ( [string] , [ xml . integer ( [string] ) , xml . integer ( [string] ) ] ) , xml . dictionary ( [string] , [ xml . integer ( [string] ) , xml . integer ( [string] ) , xml . integer ( [string] ) , xml . integer ( [string] ) ] ) , xml . integer ( [string] ) ] ) , nested = [string] ) ] ) , nested = [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] _category_style = [ xml . string ( [string] ) , xml . string ( [string] ) , xml . integer ( [string] ) , xml . string ( [string] ) ] [EOL] [EOL] categories_processor = xml . array ( xml . dictionary ( [string] , [ xml . boolean ( [string] ) , xml . string ( [string] ) , xml . string ( [string] ) , xml . dictionary ( [string] , _category_style ) , xml . string ( [string] ) , xml . string ( [string] ) , xml . dictionary ( [string] , _category_style ) , xml . string ( [string] ) ] ) , nested = [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] _timer_early_ender = xml . dictionary ( [string] , [ xml . string ( [string] ) , xml . boolean ( [string] ) ] ) [EOL] [EOL] _timer_trigger_elements = [ xml . string ( [string] ) , xml . boolean ( [string] ) , xml . boolean ( [string] ) , xml . string ( [string] ) , xml . boolean ( [string] ) , xml . boolean ( [string] ) ] [EOL] [EOL] _trigger = xml . dictionary ( [string] , [ xml . string ( [string] ) , xml . string ( [string] ) , xml . string ( [string] ) , xml . boolean ( [string] ) , xml . integer ( [string] ) , xml . string ( [string] ) , xml . boolean ( [string] ) , xml . boolean ( [string] ) , xml . string ( [string] ) , xml . string ( [string] ) , xml . boolean ( [string] ) , xml . boolean ( [string] ) , xml . string ( [string] ) , xml . integer ( [string] ) , xml . array ( _timer_early_ender , nested = [string] ) , xml . integer ( [string] ) , xml . dictionary ( [string] , _timer_trigger_elements ) , xml . dictionary ( [string] , _timer_trigger_elements ) , xml . integer ( [string] ) , xml . string ( [string] ) , xml . string ( [string] ) , xml . string ( [string] ) , xml . integer ( [string] ) , xml . string ( [string] ) , xml . boolean ( [string] ) , xml . boolean ( [string] ) , xml . boolean ( [string] ) , xml . boolean ( [string] ) , xml . boolean ( [string] ) , xml . boolean ( [string] ) ] , required = False ) [EOL] [EOL] _trigger_group_common = [ xml . string ( [string] ) , xml . boolean ( [string] ) , xml . integer ( [string] ) , xml . string ( [string] ) , xml . string ( [string] ) , xml . array ( _trigger , nested = [string] , omit_empty = True ) ] [EOL] [EOL] _trigger_group_five = xml . dictionary ( [string] , [ * _trigger_group_common ] , required = False ) [EOL] [EOL] _trigger_group_four = xml . dictionary ( [string] , [ * _trigger_group_common , xml . array ( _trigger_group_five , nested = [string] , omit_empty = True ) ] , required = False ) [EOL] [EOL] _trigger_group_three = xml . dictionary ( [string] , [ * _trigger_group_common , xml . array ( _trigger_group_four , nested = [string] , omit_empty = True ) ] , required = False ) [EOL] [EOL] _trigger_group_two = xml . dictionary ( [string] , [ * _trigger_group_common , xml . array ( _trigger_group_three , nested = [string] , omit_empty = True ) ] , required = False ) [EOL] [EOL] _trigger_group_one = xml . dictionary ( [string] , [ * _trigger_group_common , xml . array ( _trigger_group_two , nested = [string] , omit_empty = True ) ] , required = False ) [EOL] [EOL] _trigger_group_zero = xml . dictionary ( [string] , [ * _trigger_group_common , xml . array ( _trigger_group_one , nested = [string] , omit_empty = True ) ] ) [EOL] [EOL] trigger_groups_processor = xml . array ( _trigger_group_zero , nested = [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] _character_style_options = [ xml . string ( [string] ) , xml . string ( [string] ) , xml . integer ( [string] ) , xml . string ( [string] ) ] [EOL] [EOL] characters_processor = xml . array ( xml . dictionary ( [string] , [ xml . boolean ( [string] ) , xml . string ( [string] ) , xml . string ( [string] ) , xml . string ( [string] ) , xml . string ( [string] ) , xml . dictionary ( [string] , _character_style_options ) , xml . dictionary ( [string] , _character_style_options ) , xml . array ( xml . integer ( [string] , attribute = [string] ) , nested = [string] ) , xml . string ( [string] ) , xml . integer ( [string] ) , xml . integer ( [string] ) ] , required = False ) , nested = [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] configuration_processor = xml . dictionary ( [string] , [ settings_processor , behavior_groups_processor , categories_processor , ] ) [EOL] [EOL] [EOL] def export_to_string ( ) : [EOL] return xml . serialize_to_string ( configuration_processor , { [string] : gina_config . settings . settings , [string] : [ * gina_config . overlays . text_overlays , * gina_config . overlays . timer_overlays ] , [string] : gina_config . categories . categories , } , indent = [string] ) [EOL] [EOL] [EOL] def export_to_file ( file_path ) : [EOL] return xml . serialize_to_file ( configuration_processor , { [string] : gina_config . settings . settings , [string] : [ * gina_config . overlays . text_overlays , * gina_config . overlays . timer_overlays ] , [string] : gina_config . categories . categories , } , xml_file_path = file_path , indent = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import List , Dict , Any , Generator [EOL] import typing [EOL] import builtins [EOL] import gina_config . trigger_groups [EOL] import gina_config . triggers [EOL] [EOL] [EOL] [docstring] [EOL] [EOL] def add_spell ( ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] def _collect_spells_for_character ( character , spells ) : [EOL] character_spells = [ ] [EOL] spell_extractor = ( spell for spell in spells if character [ [string] ] in spell [ [string] ] [EOL] and spell [ [string] ] [ character [ [string] ] ] <= character [ [string] ] ) [EOL] for spell in spell_extractor : [EOL] character_spells . append ( spell ) [EOL] return character_spells [EOL] [EOL] [EOL] def add_character_levels_to_spells ( characters , spells ) : [EOL] for character in characters : [EOL] character_spells = _collect_spells_for_character ( character , spells ) [EOL] for spell in character_spells : [EOL] if [string] not in spell : [EOL] spell [ [string] ] = set ( ) [EOL] spell [ [string] ] . add ( character [ [string] ] ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] def _create_parent_trigger_group_for_spell ( spell ) : [EOL] spell_trigger_group_id = gina_config . get_next_available_group_id ( ) [EOL] spell_trigger_group = ( gina_config . generate_trigger_group ( spell_trigger_group_id , spell [ [string] ] ) ) [EOL] spell_trigger_group [ [string] ] = [ ] [EOL] return spell_trigger_group [EOL] [EOL] [EOL] def _add_spell_to_trigger_groups ( spell ) : [EOL] if spell [ [string] ] == [string] : [EOL] [comment] [EOL] parent_spell_trigger_group = ( gina_config . get_buff_trigger_group_by_name ( spell [ [string] ] ) ) [EOL] [comment] [EOL] if not parent_spell_trigger_group : [EOL] parent_spell_trigger_group = ( _create_parent_trigger_group_for_spell ( spell ) ) [EOL] gina_config . add_buff_trigger_group ( parent_spell_trigger_group ) [EOL] [comment] [EOL] current_spell_levels = ( gina_config . get_trigger_group_names ( parent_spell_trigger_group [ [string] ] ) ) [EOL] [comment] [EOL] for spell_level in spell [ [string] ] : [EOL] if spell_level not in current_spell_levels : [EOL] [comment] [EOL] pass [EOL] [EOL] [EOL] def add_spells_to_trigger_groups ( spells ) : [EOL] for spell in spells : [EOL] _add_spell_to_trigger_groups ( spell ) [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import builtins [EOL] from typing import List , Dict , Union , Any [EOL] import typing [EOL] import gina_config [EOL] from gina_config . overlays import CRITICAL_ALERTS_TEXT_OVERLAY , DEFAULT_TEXT_OVERLAY , DEBUFFS_TIMER_OVERLAY , OTHER_BUFFS_TIMER_OVERLAY , SELF_BUFFS_TIMER_OVERLAY , SHORT_DURATION_BUFFS_TIMER_OVERLAY , SHORT_DURATION_DEBUFFS_TIMER_OVERLAY [EOL] from gina_config . colors import ColorPalette , CRITICAL_ALERT_COLOR , DEFAULT_ALERT_COLOR , ABSORB_EFFECT_COLOR , CHARM_EFFECT_COLOR , DAMAGE_SHIELD_EFFECT_COLOR , DETRIMENTAL_EFFECT_COLOR , DOT_EFFECT_COLOR , HASTE_EFFECT_COLOR , HC_AC_EFFECT_COLOR , HEAL_EFFECT_COLOR , ILLUSION_EFFECT_COLOR , LULL_EFFECT_COLOR , MANA_EFFECT_COLOR , MEZ_EFFECT_COLOR , MOVEMENT_SPEED_EFFECT_COLOR , REGEN_EFFECT_COLOR , RESIST_EFFECT_COLOR , ROOT_EFFECT_COLOR , SLOW_EFFECT_COLOR , SNARE_EFFECT_COLOR , STAT_EFFECT_COLOR , VISION_EFFECT_COLOR , EFFECT_WORN_OFF_COLOR [EOL] [EOL] [EOL] [comment] [EOL] CRITICAL_ALERTS_CATEGORY = [string] [EOL] DEFAULT_ALERTS_CATEGORY = [string] [EOL] [EOL] [comment] [EOL] AQUA_ALERTS_CATEGORY = [string] [EOL] GREEN_ALERTS_CATEGORY = [string] [EOL] ORANGE_ALERTS_CATEGORY = [string] [EOL] RED_ALERTS_CATEGORY = [string] [EOL] [EOL] [comment] [EOL] ABSORB_ALERTS_CATEGORY = [string] [EOL] DEBUFF_ALERTS_CATEGORY = [string] [EOL] DS_ALERTS_CATEGORY = [string] [EOL] HEAL_ALERTS_CATEGORY = [string] [EOL] MEZ_ALERTS_CATEGORY = [string] [EOL] ROOT_ALERTS_CATEGORY = [string] [EOL] SLOW_ALERTS_CATEGORY = [string] [EOL] SNARE_ALERTS_CATEGORY = [string] [EOL] [EOL] [comment] [EOL] CHARM_EFFECT_CATEGORY = [string] [EOL] DETRIMENTAL_EFFECT_CATEGORY = [string] [EOL] DOT_EFFECT_CATEGORY = [string] [EOL] LULL_EFFECT_CATEGORY = [string] [EOL] MEZ_EFFECT_CATEGORY = [string] [EOL] ROOT_EFFECT_CATEGORY = [string] [EOL] SLOW_EFFECT_CATEGORY = [string] [EOL] SNARE_EFFECT_CATEGORY = [string] [EOL] [EOL] [comment] [EOL] ABSORB_BUFFS_CATEGORY = [string] [EOL] DS_BUFFS_CATEGORY = [string] [EOL] HASTE_BUFFS_CATEGORY = [string] [EOL] HP_AC_BUFFS_CATEGORY = [string] [EOL] ILLUSION_BUFFS_CATEGORY = [string] [EOL] MANA_BUFFS_CATEGORY = [string] [EOL] REGEN_BUFFS_CATEGORY = [string] [EOL] RESIST_BUFFS_CATEGORY = [string] [EOL] STAT_BUFFS_CATEGORY = [string] [EOL] TRAVEL_BUFFS_CATEGORY = [string] [EOL] VISION_BUFFS_CATEGORY = [string] [EOL] [EOL] [comment] [EOL] SELF_ABSORB_BUFFS_CATEGORY = [string] [EOL] SELF_DS_BUFFS_CATEGORY = [string] [EOL] SELF_HASTE_BUFFS_CATEGORY = [string] [EOL] SELF_HP_AC_BUFFS_CATEGORY = [string] [EOL] SELF_ILLUSION_BUFFS_CATEGORY = [string] [EOL] SELF_MANA_BUFFS_CATEGORY = [string] [EOL] SELF_REGEN_BUFFS_CATEGORY = [string] [EOL] SELF_RESIST_BUFFS_CATEGORY = [string] [EOL] SELF_STAT_BUFFS_CATEGORY = [string] [EOL] SELF_TRAVEL_BUFFS_CATEGORY = [string] [EOL] SELF_VISION_BUFFS_CATEGORY = [string] [EOL] SELF_WORN_OFF_BUFFS_CATEGORY = [string] [EOL] [EOL] [comment] [EOL] SHORT_DURATION_CHARM_CATEGORY = [string] [EOL] SHORT_DURATION_DEBUFFS_CATEGORY = [string] [EOL] SHORT_DURATION_DOT_AOE_CATEGORY = [string] [EOL] SHORT_DURATION_LULL_CATEGORY = [string] [EOL] SHORT_DURATION_MEZ_CATEGORY = [string] [EOL] SHORT_DURATION_SLOW_CATEGORY = [string] [EOL] SHORT_DURATION_SNARE_CATEGORY = [string] [EOL] [EOL] [comment] [EOL] SHORT_DURATION_HASTE_BUFFS_CATEGORY = [string] [EOL] SHORT_DURATION_MANA_BUFFS_CATEGORY = [string] [EOL] SHORT_DURATION_REGEN_BUFFS_CATEGORY = [string] [EOL] SHORT_DURATION_RESIST_BUFFS_CATEGORY = [string] [EOL] SHORT_DURATION_STAT_BUFFS_CATEGORY = [string] [EOL] SHORT_DURATION_TRAVEL_BUFFS_CATEGORY = [string] [EOL] [EOL] [EOL] categories = [ ] [EOL] [EOL] [EOL] def create_category ( name , is_default = False , text_overlay = CRITICAL_ALERTS_TEXT_OVERLAY , text_font_color = DEFAULT_ALERT_COLOR , text_timer_bar_color = ColorPalette . DARK_RED , timer_overlay = SELF_BUFFS_TIMER_OVERLAY , timer_font_color = DEFAULT_ALERT_COLOR , timer_timer_bar_color = ColorPalette . DARK_RED ) : [EOL] new_category = { [string] : is_default , [string] : name , [string] : text_overlay , [string] : { [string] : text_font_color , [string] : ColorPalette . BLACK , [string] : [number] , [string] : text_timer_bar_color } , [string] : [string] , [string] : timer_overlay , [string] : { [string] : timer_font_color , [string] : ColorPalette . BLACK , [string] : [number] , [string] : timer_timer_bar_color } , [string] : [string] } [EOL] categories . append ( new_category ) [EOL] [EOL] [EOL] [comment] [EOL] create_category ( DEFAULT_ALERTS_CATEGORY , is_default = True , text_overlay = DEFAULT_TEXT_OVERLAY ) [EOL] [comment] [EOL] create_category ( CRITICAL_ALERTS_CATEGORY , text_font_color = CRITICAL_ALERT_COLOR , timer_font_color = CRITICAL_ALERT_COLOR ) [EOL] [comment] [EOL] create_category ( DETRIMENTAL_EFFECT_CATEGORY , text_font_color = ColorPalette . BRIGHT_RED , timer_overlay = DEBUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = DETRIMENTAL_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( SELF_WORN_OFF_BUFFS_CATEGORY , text_font_color = ColorPalette . BRIGHT_YELLOW , timer_overlay = SELF_BUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . BRIGHT_YELLOW , timer_timer_bar_color = EFFECT_WORN_OFF_COLOR ) [EOL] [comment] [EOL] create_category ( SHORT_DURATION_MANA_BUFFS_CATEGORY , text_font_color = ColorPalette . BRIGHT_YELLOW , timer_overlay = SHORT_DURATION_BUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = MANA_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( SHORT_DURATION_DEBUFFS_CATEGORY , text_font_color = ColorPalette . BRIGHT_YELLOW , timer_overlay = SHORT_DURATION_DEBUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = DETRIMENTAL_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( SHORT_DURATION_TRAVEL_BUFFS_CATEGORY , text_font_color = ColorPalette . BRIGHT_YELLOW , timer_overlay = SHORT_DURATION_BUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = MOVEMENT_SPEED_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( SHORT_DURATION_REGEN_BUFFS_CATEGORY , text_font_color = ColorPalette . BRIGHT_YELLOW , timer_overlay = SHORT_DURATION_BUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = REGEN_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( SHORT_DURATION_HASTE_BUFFS_CATEGORY , text_font_color = ColorPalette . BRIGHT_YELLOW , timer_overlay = SHORT_DURATION_BUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = HASTE_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( SHORT_DURATION_SLOW_CATEGORY , text_font_color = ColorPalette . BRIGHT_YELLOW , timer_overlay = SHORT_DURATION_DEBUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . LIGHT_GREY , timer_timer_bar_color = SLOW_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( SHORT_DURATION_SNARE_CATEGORY , text_font_color = ColorPalette . BRIGHT_YELLOW , timer_overlay = SHORT_DURATION_DEBUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . LIGHT_GREY , timer_timer_bar_color = SNARE_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( SHORT_DURATION_CHARM_CATEGORY , text_font_color = ColorPalette . BRIGHT_YELLOW , timer_overlay = SHORT_DURATION_DEBUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = CHARM_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( SHORT_DURATION_DOT_AOE_CATEGORY , text_font_color = ColorPalette . BRIGHT_YELLOW , timer_overlay = SHORT_DURATION_DEBUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = DOT_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( SHORT_DURATION_RESIST_BUFFS_CATEGORY , text_font_color = ColorPalette . BRIGHT_YELLOW , timer_overlay = SHORT_DURATION_BUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = RESIST_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( SHORT_DURATION_STAT_BUFFS_CATEGORY , text_font_color = ColorPalette . BRIGHT_YELLOW , timer_overlay = SHORT_DURATION_BUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = STAT_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( CHARM_EFFECT_CATEGORY , text_font_color = ColorPalette . BRIGHT_RED , timer_overlay = DEBUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = CHARM_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( MEZ_EFFECT_CATEGORY , text_font_color = ColorPalette . BRIGHT_RED , timer_overlay = DEBUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = MEZ_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( SELF_HASTE_BUFFS_CATEGORY , text_font_color = ColorPalette . BRIGHT_YELLOW , timer_overlay = SELF_BUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = HASTE_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( SELF_MANA_BUFFS_CATEGORY , text_font_color = ColorPalette . BRIGHT_YELLOW , timer_overlay = SELF_BUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = MANA_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( HASTE_BUFFS_CATEGORY , text_font_color = ColorPalette . BRIGHT_YELLOW , timer_overlay = OTHER_BUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = HASTE_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( SELF_REGEN_BUFFS_CATEGORY , text_font_color = ColorPalette . BRIGHT_YELLOW , timer_overlay = SELF_BUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = REGEN_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( REGEN_BUFFS_CATEGORY , text_font_color = ColorPalette . BRIGHT_YELLOW , timer_overlay = OTHER_BUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = REGEN_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( SELF_STAT_BUFFS_CATEGORY , text_font_color = ColorPalette . BRIGHT_YELLOW , timer_overlay = SELF_BUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = STAT_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( SELF_HP_AC_BUFFS_CATEGORY , text_font_color = ColorPalette . BRIGHT_YELLOW , timer_overlay = SELF_BUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = HC_AC_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( SELF_RESIST_BUFFS_CATEGORY , text_font_color = ColorPalette . BRIGHT_YELLOW , timer_overlay = SELF_BUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = RESIST_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( SELF_TRAVEL_BUFFS_CATEGORY , text_font_color = ColorPalette . BRIGHT_YELLOW , timer_overlay = SELF_BUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = MOVEMENT_SPEED_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( SELF_VISION_BUFFS_CATEGORY , text_font_color = ColorPalette . BRIGHT_YELLOW , timer_overlay = SELF_BUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = VISION_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( SELF_ILLUSION_BUFFS_CATEGORY , text_font_color = ColorPalette . BRIGHT_YELLOW , timer_overlay = SELF_BUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = ILLUSION_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( HP_AC_BUFFS_CATEGORY , text_font_color = ColorPalette . BRIGHT_YELLOW , timer_overlay = OTHER_BUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = HC_AC_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( ILLUSION_BUFFS_CATEGORY , text_font_color = ColorPalette . BRIGHT_YELLOW , timer_overlay = OTHER_BUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = ILLUSION_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( MANA_BUFFS_CATEGORY , text_font_color = ColorPalette . BRIGHT_YELLOW , timer_overlay = OTHER_BUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = MANA_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( RESIST_BUFFS_CATEGORY , text_font_color = ColorPalette . BRIGHT_YELLOW , timer_overlay = OTHER_BUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = RESIST_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( STAT_BUFFS_CATEGORY , text_font_color = ColorPalette . BRIGHT_YELLOW , timer_overlay = OTHER_BUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = STAT_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( TRAVEL_BUFFS_CATEGORY , text_font_color = ColorPalette . BRIGHT_YELLOW , timer_overlay = OTHER_BUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = MOVEMENT_SPEED_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( VISION_BUFFS_CATEGORY , text_font_color = ColorPalette . BRIGHT_YELLOW , timer_overlay = OTHER_BUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = VISION_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( SHORT_DURATION_MEZ_CATEGORY , text_font_color = ColorPalette . BRIGHT_YELLOW , timer_overlay = SHORT_DURATION_DEBUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = MEZ_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( SELF_DS_BUFFS_CATEGORY , text_font_color = ColorPalette . BRIGHT_YELLOW , timer_overlay = SELF_BUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = DAMAGE_SHIELD_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( SELF_ABSORB_BUFFS_CATEGORY , text_font_color = ColorPalette . BRIGHT_YELLOW , timer_overlay = SELF_BUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = ABSORB_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( DS_BUFFS_CATEGORY , text_font_color = ColorPalette . BRIGHT_YELLOW , timer_overlay = OTHER_BUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = DAMAGE_SHIELD_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( ABSORB_BUFFS_CATEGORY , text_font_color = ColorPalette . BRIGHT_YELLOW , timer_overlay = OTHER_BUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = ABSORB_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( DOT_EFFECT_CATEGORY , text_font_color = ColorPalette . BRIGHT_RED , timer_overlay = DEBUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = DOT_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( SLOW_EFFECT_CATEGORY , text_font_color = ColorPalette . BRIGHT_RED , timer_overlay = DEBUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = SLOW_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( SNARE_EFFECT_CATEGORY , text_font_color = ColorPalette . BRIGHT_RED , timer_overlay = DEBUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = SNARE_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( ROOT_EFFECT_CATEGORY , text_font_color = ColorPalette . BRIGHT_RED , timer_overlay = DEBUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = ROOT_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( LULL_EFFECT_CATEGORY , text_font_color = ColorPalette . BRIGHT_RED , timer_overlay = DEBUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = LULL_EFFECT_COLOR ) [EOL] [comment] [EOL] create_category ( SHORT_DURATION_LULL_CATEGORY , text_font_color = ColorPalette . BRIGHT_YELLOW , timer_overlay = SHORT_DURATION_DEBUFFS_TIMER_OVERLAY , timer_font_color = ColorPalette . WHITE , timer_timer_bar_color = LULL_EFFECT_COLOR ) [EOL] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] old_categories = [ { [string] : True , [string] : DEFAULT_ALERTS_CATEGORY , [string] : DEFAULT_TEXT_OVERLAY , [string] : { [string] : DEFAULT_ALERT_COLOR , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : SELF_BUFFS_TIMER_OVERLAY , [string] : { [string] : DEFAULT_ALERT_COLOR , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] } , { [string] : False , [string] : CRITICAL_ALERTS_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : CRITICAL_ALERT_COLOR , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : SELF_BUFFS_TIMER_OVERLAY , [string] : { [string] : CRITICAL_ALERT_COLOR , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] } , { [string] : False , [string] : DETRIMENTAL_EFFECT_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_RED , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : DEBUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : DETRIMENTAL_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : SELF_WORN_OFF_BUFFS_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_YELLOW , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : SELF_BUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_YELLOW , [string] : ColorPalette . BLACK , [string] : [number] , [string] : EFFECT_WORN_OFF_COLOR } , [string] : [string] } , { [string] : False , [string] : SHORT_DURATION_MANA_BUFFS_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_YELLOW , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : SHORT_DURATION_BUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : MANA_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : SHORT_DURATION_DEBUFFS_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_YELLOW , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : SHORT_DURATION_DEBUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : DETRIMENTAL_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : SHORT_DURATION_TRAVEL_BUFFS_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_YELLOW , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : SHORT_DURATION_BUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : MOVEMENT_SPEED_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : SHORT_DURATION_REGEN_BUFFS_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_YELLOW , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : SHORT_DURATION_BUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : REGEN_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : SHORT_DURATION_HASTE_BUFFS_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_YELLOW , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : SHORT_DURATION_BUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : HASTE_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : SHORT_DURATION_SLOW_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_YELLOW , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : SHORT_DURATION_DEBUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . LIGHT_GREY , [string] : ColorPalette . BLACK , [string] : [number] , [string] : SLOW_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : SHORT_DURATION_SNARE_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_YELLOW , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : SHORT_DURATION_DEBUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . LIGHT_GREY , [string] : ColorPalette . BLACK , [string] : [number] , [string] : SNARE_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : SHORT_DURATION_CHARM_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_YELLOW , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : SHORT_DURATION_DEBUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : CHARM_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : SHORT_DURATION_DOT_AOE_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_YELLOW , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : SHORT_DURATION_DEBUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : DOT_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : SHORT_DURATION_RESIST_BUFFS_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_YELLOW , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : SHORT_DURATION_BUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : RESIST_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : SHORT_DURATION_STAT_BUFFS_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_YELLOW , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : SHORT_DURATION_BUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : STAT_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : CHARM_EFFECT_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_RED , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : DEBUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : CHARM_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : MEZ_EFFECT_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_RED , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : DEBUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : MEZ_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : SELF_HASTE_BUFFS_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_YELLOW , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : SELF_BUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : HASTE_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : SELF_MANA_BUFFS_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_YELLOW , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : SELF_BUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : MANA_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : HASTE_BUFFS_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_YELLOW , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : OTHER_BUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : HASTE_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : SELF_REGEN_BUFFS_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_YELLOW , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : SELF_BUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : REGEN_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : REGEN_BUFFS_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_YELLOW , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : OTHER_BUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : REGEN_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : SELF_STAT_BUFFS_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_YELLOW , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : SELF_BUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : STAT_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : SELF_HP_AC_BUFFS_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_YELLOW , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : SELF_BUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : HC_AC_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : SELF_RESIST_BUFFS_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_YELLOW , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : SELF_BUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : RESIST_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : SELF_TRAVEL_BUFFS_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_YELLOW , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : SELF_BUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : MOVEMENT_SPEED_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : SELF_VISION_BUFFS_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_YELLOW , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : SELF_BUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : VISION_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : SELF_ILLUSION_BUFFS_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_YELLOW , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : SELF_BUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ILLUSION_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : HP_AC_BUFFS_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_YELLOW , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : OTHER_BUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : HC_AC_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : ILLUSION_BUFFS_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_YELLOW , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : OTHER_BUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ILLUSION_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : MANA_BUFFS_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_YELLOW , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : OTHER_BUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : MANA_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : RESIST_BUFFS_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_YELLOW , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : OTHER_BUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : RESIST_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : STAT_BUFFS_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_YELLOW , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : OTHER_BUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : STAT_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : TRAVEL_BUFFS_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_YELLOW , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : OTHER_BUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : MOVEMENT_SPEED_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : VISION_BUFFS_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_YELLOW , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : OTHER_BUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : VISION_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : SHORT_DURATION_MEZ_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_YELLOW , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : SHORT_DURATION_DEBUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : MEZ_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : SELF_DS_BUFFS_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_YELLOW , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : SELF_BUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : DAMAGE_SHIELD_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : SELF_ABSORB_BUFFS_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_YELLOW , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : SELF_BUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ABSORB_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : DS_BUFFS_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_YELLOW , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : OTHER_BUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : DAMAGE_SHIELD_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : ABSORB_BUFFS_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_YELLOW , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : OTHER_BUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ABSORB_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : DOT_EFFECT_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_RED , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : DEBUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : DOT_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : SLOW_EFFECT_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_RED , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : DEBUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : SLOW_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : SNARE_EFFECT_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_RED , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : DEBUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : SNARE_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : ROOT_EFFECT_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_RED , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : DEBUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ROOT_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : LULL_EFFECT_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_RED , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : DEBUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : LULL_EFFECT_COLOR } , [string] : [string] } , { [string] : False , [string] : SHORT_DURATION_LULL_CATEGORY , [string] : CRITICAL_ALERTS_TEXT_OVERLAY , [string] : { [string] : ColorPalette . BRIGHT_YELLOW , [string] : ColorPalette . BLACK , [string] : [number] , [string] : ColorPalette . DARK_RED } , [string] : [string] , [string] : SHORT_DURATION_DEBUFFS_TIMER_OVERLAY , [string] : { [string] : ColorPalette . WHITE , [string] : ColorPalette . BLACK , [string] : [number] , [string] : LULL_EFFECT_COLOR } , [string] : [string] } ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.Union[gina_config.colors.ColorPalette,builtins.int]],builtins.bool,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] import builtins [EOL] def create_trigger ( name ) : [EOL] return { [string] : [string] , [string] : [string] , [string] : [string] , [string] : False , [string] : [number] , [string] : [string] , [string] : True , [string] : False , [string] : [string] , [string] : name , [string] : False , [string] : True , [string] : [string] , [string] : [number] , [string] : [ { [string] : [string] , [string] : True } , { [string] : [string] , [string] : True } ] , [string] : [number] , [string] : { [string] : [string] , [string] : False , [string] : False , [string] : [string] , [string] : True , [string] : True } , [string] : { [string] : [string] , [string] : False , [string] : False , [string] : [string] , [string] : True , [string] : True } , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : False , [string] : False , [string] : False , [string] : False , [string] : True , [string] : True }	0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import List , Dict , Any [EOL] import typing [EOL] import builtins [EOL] from gina_config . fonts import OVERLAY_FONT_NAME [EOL] from gina_config . colors import ColorPalette [EOL] [EOL] [comment] [EOL] CRITICAL_ALERTS_TEXT_OVERLAY = [string] [EOL] DEFAULT_TEXT_OVERLAY = [string] [EOL] [comment] [EOL] DEBUFFS_TIMER_OVERLAY = [string] [EOL] OTHER_BUFFS_TIMER_OVERLAY = [string] [EOL] SELF_BUFFS_TIMER_OVERLAY = [string] [EOL] SHORT_DURATION_BUFFS_TIMER_OVERLAY = [string] [EOL] SHORT_DURATION_DEBUFFS_TIMER_OVERLAY = [string] [EOL] [EOL] text_overlays = [ ] [EOL] timer_overlays = [ ] [EOL] [EOL] [EOL] def _create_overlay ( name , ** kwargs ) : [EOL] new_overlay = { [string] : ColorPalette . FULLY_TRANSPARENT , [string] : ColorPalette . FULLY_TRANSPARENT , [string] : [string] , [string] : ColorPalette . TRANSPARENT_BLACK , [string] : OVERLAY_FONT_NAME , [string] : None , [string] : False , [string] : name , [string] : True , [string] : [string] , [string] : False , [string] : [number] , [string] : [ { [string] : [number] , [string] : [number] , [string] : [number] , [string] : { [string] : - [number] , [string] : - [number] } , [string] : { [string] : - [number] , [string] : - [number] } , [string] : { [string] : None , [string] : None , [string] : None , [string] : None } } ] } [EOL] new_overlay . update ( ** kwargs ) [EOL] return new_overlay [EOL] [EOL] [EOL] def create_text_overlay ( name , ** kwargs ) : [EOL] new_overlay = _create_overlay ( name , BehaviorType = [string] , SortMethod = [string] ) [EOL] new_overlay . update ( ** kwargs ) [EOL] text_overlays . append ( new_overlay ) [EOL] [EOL] [EOL] def create_timer_overlay ( name , ** kwargs ) : [EOL] new_overlay = _create_overlay ( name , BehaviorType = [string] , SortMethod = [string] ) [EOL] new_overlay . update ( ** kwargs ) [EOL] timer_overlays . append ( new_overlay ) [EOL] [EOL] [EOL] def _get_overlay ( name , overlays ) : [EOL] return next ( overlay for overlay in overlays if overlay [ [string] ] == name ) [EOL] [EOL] [EOL] def get_text_overlay ( name ) : [EOL] return _get_overlay ( name , text_overlays ) [EOL] [EOL] [EOL] def get_timer_overlay ( name ) : [EOL] return _get_overlay ( name , timer_overlays ) [EOL] [EOL] [EOL] def set_overlay_font_size ( font_size , overlay ) : [EOL] overlay [ [string] ] = font_size [EOL] [EOL] [EOL] def set_overlay_bottom_position ( position , overlay ) : [EOL] overlay [ [string] ] [ [number] ] [ [string] ] [ [string] ] = position [EOL] [EOL] [EOL] def set_overlay_left_position ( position , overlay ) : [EOL] overlay [ [string] ] [ [number] ] [ [string] ] [ [string] ] = position [EOL] [EOL] [EOL] def set_overlay_right_position ( position , overlay ) : [EOL] overlay [ [string] ] [ [number] ] [ [string] ] [ [string] ] = position [EOL] [EOL] [EOL] def set_overlay_top_position ( position , overlay ) : [EOL] overlay [ [string] ] [ [number] ] [ [string] ] [ [string] ] = position [EOL] [EOL] [EOL] [comment] [EOL] create_text_overlay ( CRITICAL_ALERTS_TEXT_OVERLAY ) [EOL] create_text_overlay ( DEFAULT_TEXT_OVERLAY , GroupByCharacter = True ) [EOL] [EOL] [comment] [EOL] create_timer_overlay ( DEBUFFS_TIMER_OVERLAY ) [EOL] create_timer_overlay ( OTHER_BUFFS_TIMER_OVERLAY ) [EOL] create_timer_overlay ( SELF_BUFFS_TIMER_OVERLAY ) [EOL] create_timer_overlay ( SHORT_DURATION_BUFFS_TIMER_OVERLAY , SortMethod = [string] ) [EOL] create_timer_overlay ( SHORT_DURATION_DEBUFFS_TIMER_OVERLAY , SortMethod = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0
from . import main [EOL] [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0
OVERLAY_FONT_NAME = [string] [EOL]	$builtins.str$ 0 0 0
[comment] [EOL] import builtins [EOL] from enum import Enum [EOL] [EOL] [EOL] class ColorPalette ( Enum ) : [EOL] BRIGHT_YELLOW = [string] [EOL] BRIGHT_RED = [string] [EOL] BRIGHT_BLUE = [string] [EOL] DARK_AQUA = [string] [EOL] DARK_PINK = [string] [EOL] DARK_PURPLE = [string] [EOL] DARK_BROWN = [string] [EOL] DARK_BLUE = [string] [EOL] DARK_RED = [string] [EOL] DARK_ORANGE = [string] [EOL] DARK_GREEN = [string] [EOL] DARK_GREY = [string] [EOL] DARK_YELLOW = [string] [EOL] LIGHT_BLUE = [string] [EOL] LIGHT_GREY = [string] [EOL] FULLY_TRANSPARENT = [string] [EOL] TRANSPARENT_BLACK = [string] [EOL] BLACK = [string] [EOL] WHITE = [string] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . value [EOL] [EOL] [EOL] [comment] [EOL] CRITICAL_ALERT_COLOR = ColorPalette . BRIGHT_RED [EOL] DEFAULT_ALERT_COLOR = ColorPalette . BRIGHT_YELLOW [EOL] [EOL] [comment] [EOL] ABSORB_EFFECT_COLOR = ColorPalette . DARK_BROWN [EOL] CHARM_EFFECT_COLOR = ColorPalette . DARK_AQUA [EOL] DAMAGE_SHIELD_EFFECT_COLOR = ColorPalette . DARK_BROWN [EOL] DETRIMENTAL_EFFECT_COLOR = ColorPalette . DARK_RED [EOL] DOT_EFFECT_COLOR = ColorPalette . DARK_ORANGE [EOL] HASTE_EFFECT_COLOR = ColorPalette . DARK_GREEN [EOL] HC_AC_EFFECT_COLOR = ColorPalette . DARK_YELLOW [EOL] HEAL_EFFECT_COLOR = ColorPalette . LIGHT_BLUE [EOL] ILLUSION_EFFECT_COLOR = ColorPalette . DARK_PINK [EOL] LULL_EFFECT_COLOR = ColorPalette . DARK_BLUE [EOL] MANA_EFFECT_COLOR = ColorPalette . DARK_BLUE [EOL] MEZ_EFFECT_COLOR = ColorPalette . DARK_PINK [EOL] MOVEMENT_SPEED_EFFECT_COLOR = ColorPalette . DARK_PURPLE [EOL] REGEN_EFFECT_COLOR = ColorPalette . DARK_AQUA [EOL] RESIST_EFFECT_COLOR = ColorPalette . DARK_RED [EOL] ROOT_EFFECT_COLOR = ColorPalette . DARK_BROWN [EOL] SLOW_EFFECT_COLOR = ColorPalette . DARK_PURPLE [EOL] SNARE_EFFECT_COLOR = ColorPalette . DARK_PURPLE [EOL] STAT_EFFECT_COLOR = ColorPalette . DARK_ORANGE [EOL] VISION_EFFECT_COLOR = ColorPalette . DARK_GREY [EOL] [EOL] [comment] [EOL] EFFECT_WORN_OFF_COLOR = ColorPalette . BRIGHT_BLUE [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import List , Any , Optional [EOL] import typing [EOL] import builtins [EOL] def _find_trigger_group_by_name ( name , trigger_groups ) : [EOL] return next ( ( trigger_group for trigger_group in trigger_groups if [string] in trigger_group [EOL] and trigger_group [ [string] ] == name ) , None ) [EOL] [EOL] [EOL] def _find_trigger_group_by_id ( id , trigger_groups ) : [EOL] return next ( ( trigger_group for trigger_group in trigger_groups if [string] in trigger_group [EOL] and trigger_group [ [string] ] == id ) , None ) [EOL] [EOL] [EOL] def _recursive_find_trigger_group_by_name ( name , trigger_groups ) : [EOL] for trigger_group in trigger_groups : [EOL] if [string] in trigger_group : [EOL] if trigger_group [ [string] ] == name : [EOL] return trigger_group [EOL] if [string] in trigger_group : [EOL] _trigger_group = _recursive_find_trigger_group_by_name ( name , trigger_group [ [string] ] ) [EOL] if _trigger_group is not None : [EOL] return _trigger_group [EOL] return None [EOL] [EOL] [EOL] def _recursive_find_trigger_group_by_id ( id , trigger_groups ) : [EOL] for trigger_group in trigger_groups : [EOL] if [string] in trigger_group : [EOL] if trigger_group [ [string] ] == id : [EOL] return trigger_group [EOL] if [string] in trigger_group : [EOL] _trigger_group = _recursive_find_trigger_group_by_id ( id , trigger_group [ [string] ] ) [EOL] if _trigger_group is not None : [EOL] return _trigger_group [EOL] return None [EOL] [EOL] [EOL] def _recursive_get_trigger_group_ids ( trigger_groups ) : [EOL] trigger_group_ids = [ ] [EOL] for trigger_group in trigger_groups : [EOL] if [string] in trigger_group : [EOL] trigger_group_ids . append ( trigger_group [ [string] ] ) [EOL] if [string] in trigger_group : [EOL] _trigger_group_ids = ( _recursive_get_trigger_group_ids ( trigger_group [ [string] ] ) ) [EOL] trigger_group_ids . extend ( _trigger_group_ids ) [EOL] return trigger_group_ids [EOL] [EOL] [EOL] def get_trigger_group_by_name ( name ) : [EOL] return _recursive_find_trigger_group_by_name ( name , trigger_groups ) [EOL] [EOL] [EOL] def get_trigger_group_by_id ( id ) : [EOL] return _recursive_find_trigger_group_by_id ( id , trigger_groups ) [EOL] [EOL] [EOL] def get_buffs_trigger_group ( ) : [EOL] return get_trigger_group_by_id ( BUFFS_GROUP_ID ) [EOL] [EOL] [EOL] def get_debuffs_trigger_group ( ) : [EOL] return get_trigger_group_by_id ( DEBUFFS_GROUP_ID ) [EOL] [EOL] [EOL] def get_trigger_group_names ( trigger_groups ) : [EOL] trigger_group_names = [ trigger_group [ [string] ] for trigger_group in trigger_groups ] [EOL] return trigger_group_names [EOL] [EOL] [EOL] def get_buff_trigger_group_by_name ( name ) : [EOL] return _find_trigger_group_by_name ( name , get_buffs_trigger_group ( ) [ [string] ] ) [EOL] [EOL] [EOL] def get_debuff_trigger_group_by_name ( name ) : [EOL] return _find_trigger_group_by_name ( name , get_debuffs_trigger_group ( ) [ [string] ] ) [EOL] [EOL] [EOL] def _get_next_available_group_id ( trigger_group_ids ) : [EOL] _trigger_group_ids = trigger_group_ids . copy ( ) [EOL] _trigger_group_ids . sort ( ) [EOL] for trigger_group_id in _trigger_group_ids : [EOL] if trigger_group_id + [number] not in _trigger_group_ids : [EOL] return trigger_group_id + [number] [EOL] return [number] [EOL] [EOL] [EOL] def get_next_available_group_id ( ) : [EOL] return _get_next_available_group_id ( _recursive_get_trigger_group_ids ( trigger_groups ) ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def generate_trigger ( name ) : [EOL] return { [string] : [string] , [string] : [string] , [string] : [string] , [string] : False , [string] : [number] , [string] : [string] , [string] : True , [string] : False , [string] : [string] , [string] : [string] , [string] : False , [string] : True , [string] : [string] , [string] : [number] , [string] : [ { [string] : [string] , [string] : True } , { [string] : [string] , [string] : True } ] , [string] : [number] , [string] : { [string] : [string] , [string] : False , [string] : False , [string] : [string] , [string] : True , [string] : True } , [string] : { [string] : [string] , [string] : False , [string] : False , [string] : [string] , [string] : True , [string] : True } , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : False , [string] : False , [string] : False , [string] : False , [string] : True , [string] : True } [EOL] [EOL] [EOL] def add_buff_trigger_group ( trigger_group ) : [EOL] get_buffs_trigger_group ( ) [ [string] ] . append ( trigger_group ) [EOL] [EOL] [EOL] [EOL] from data import trigger_groups , TRIGGER_GROUPS_KEY_NAME [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def next_available_id ( ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] def generate_empty ( ) : [EOL] [docstring] [EOL] return { [string] : [string] , [string] : False , [string] : None , [string] : None , [string] : False , } [EOL] [EOL] [EOL] def convert_to_parent ( group ) : [EOL] [docstring] [EOL] trigger_groups [ TRIGGER_GROUPS_KEY_NAME ] = [ ] [EOL] [EOL] [EOL] def add_group_to_parent ( parent , group ) : [EOL] [docstring] [EOL] trigger_groups [ TRIGGER_GROUPS_KEY_NAME ] . append ( group ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.dict]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.dict]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[EOL] from typing import List , Dict , Union , Any [EOL] import typing [EOL] SPELLS_GROUP_ID = [number] [EOL] BUFFS_GROUP_ID = [number] [EOL] DEBUFFS_GROUP_ID = [number] [EOL] [EOL] TRIGGER_GROUPS_KEY_NAME = [string] [EOL] [EOL] trigger_groups = [ { [string] : [string] , [string] : False , [string] : SPELLS_GROUP_ID , [string] : [string] , [string] : False , TRIGGER_GROUPS_KEY_NAME : [ { [string] : [string] , [string] : False , [string] : BUFFS_GROUP_ID , [string] : [string] , [string] : False , TRIGGER_GROUPS_KEY_NAME : [ ] } , { [string] : [string] , [string] : False , [string] : DEBUFFS_GROUP_ID , [string] : [string] , [string] : False , TRIGGER_GROUPS_KEY_NAME : [ ] } ] } ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[typing.List[typing.Dict[builtins.str,typing.Union[typing.List[typing.Any],builtins.int,builtins.str]]],builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0
from gina_config . config_data . _behavior_groups import behavior_groups [EOL] from gina_config . config_data . _categories import categories [EOL] from gina_config . config_data . _settings import settings [EOL] from gina_config . config_data . _trigger_groups import trigger_groups [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0