from typing import Any [EOL] import typing [EOL] import io [EOL] from os import remove [EOL] from io import BytesIO [EOL] from unittest import TestCase [EOL] [EOL] from PIL import Image [EOL] [EOL] import numpy as np [EOL] [EOL] from screamshot . bytes_to_file_function import bytes_to_file [EOL] [EOL] [EOL] def _rmsd ( img1 , img2 ) : [EOL] img1 = ( img1 - np . mean ( img1 ) ) / ( np . std ( img1 ) ) [EOL] img2 = ( img2 - np . mean ( img2 ) ) / ( np . std ( img2 ) ) [EOL] return np . sqrt ( np . mean ( ( img1 - img2 ) ** [number] ) ) [EOL] [EOL] [EOL] [comment] [EOL] def _is_same_image ( img1 , img2 ) : [EOL] return ( img1 . size == img2 . size ) and ( abs ( _rmsd ( img1 , img2 ) ) < [number] ) [EOL] [EOL] [EOL] class TestBytesToImgFunction ( TestCase ) : [EOL] def test_bytes_to_img ( self ) : [EOL] img = Image . open ( [string] ) [EOL] buffer = BytesIO ( ) [EOL] img . save ( buffer , format = [string] ) [EOL] b_img = buffer . getvalue ( ) [EOL] self . assertIsInstance ( b_img , bytes ) [EOL] bytes_to_file ( b_img , [string] ) [EOL] [EOL] [comment] [EOL] saved_img = Image . open ( [string] ) [EOL] self . assertTrue ( _is_same_image ( img , saved_img ) ) [EOL] remove ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $io.BytesIO$ 0 0 0 0 0 $typing.Any$ 0 0 0 $io.BytesIO$ 0 0 0 0 0 0 $builtins.bytes$ 0 $io.BytesIO$ 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0
import subprocess [EOL] [docstring] [EOL] from unittest import TestCase [EOL] from subprocess import run , PIPE [EOL] from os import remove [EOL] [EOL] [EOL] TOKEN = [string] [EOL] [EOL] [EOL] class TestScreamshotScript ( TestCase ) : [EOL] [docstring] [EOL] [EOL] def test_simple_screamshot ( self ) : [EOL] [docstring] [EOL] with self . assertRaises ( FileNotFoundError ) : [EOL] open ( [string] , [string] ) [EOL] run ( [ [string] , [string] , [string] , [string] , [string] , ] ) [EOL] open ( [string] , [string] ) [EOL] remove ( [string] ) [EOL] [EOL] def test_screamshot_username_without_password ( self ) : [EOL] res = run ( [ [string] , [string] , [string] , [string] , [string] , [string] ] , stderr = PIPE ) [EOL] self . assertEqual ( res . stderr . decode ( [string] ) , [string] ) [EOL] [EOL] def test_screamshot_password_without_username ( self ) : [EOL] res = run ( [ [string] , [string] , [string] , [string] , [string] , [string] ] , stderr = PIPE ) [EOL] self . assertEqual ( res . stderr . decode ( [string] ) , [string] ) [EOL] [EOL] def test_screamshot_with_username_and_password ( self ) : [EOL] [docstring] [EOL] with self . assertRaises ( FileNotFoundError ) : [EOL] open ( [string] , [string] ) [EOL] run ( [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] ) [EOL] open ( [string] , [string] ) [EOL] remove ( [string] ) [EOL] [EOL] def test_screamshot_with_bad_token ( self ) : [EOL] res = run ( [ [string] , [string] , [string] , [string] , [string] , [string] ] , stderr = PIPE ) [EOL] self . assertEqual ( res . stderr . decode ( [string] ) , [string] ) [EOL] [EOL] def test_screamshot_with_token ( self ) : [EOL] [docstring] [EOL] with self . assertRaises ( FileNotFoundError ) : [EOL] open ( [string] , [string] ) [EOL] run ( [ [string] , [string] , [string] , [string] . format ( TOKEN ) , [string] , [string] ] ) [EOL] open ( [string] , [string] ) [EOL] remove ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $subprocess.CompletedProcess[builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $subprocess.CompletedProcess[builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $subprocess.CompletedProcess[builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $subprocess.CompletedProcess[builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $subprocess.CompletedProcess[builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $subprocess.CompletedProcess[builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Optional [EOL] import typing [EOL] [docstring] [EOL] from unittest import TestCase [EOL] from subprocess import run [EOL] [EOL] from pyppeteer import connect [EOL] from pyppeteer . browser import Browser [EOL] [EOL] from screamshot . utils import to_sync , get_endpoint [EOL] [EOL] [EOL] class TestBrowserManagerScript ( TestCase ) : [EOL] [docstring] [EOL] def test_open_headless_browser ( self ) : [EOL] [docstring] [EOL] run ( [ [string] , [string] , [string] , [string] ] ) [EOL] endpoint = get_endpoint ( ) [EOL] browser = to_sync ( connect ( { [string] : endpoint } ) ) [EOL] self . assertIsInstance ( browser , Browser ) [EOL] run ( [ [string] , [string] , [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , List , Any , Union [EOL] import typing [EOL] import tests [EOL] import asyncio [EOL] [docstring] [EOL] from unittest import TestCase [EOL] from unittest . mock import patch [EOL] from asyncio import get_event_loop , Future , ensure_future [EOL] [EOL] from screamshot . generate_bytes_img_functions import ( _parse_parameters , _page_manager , _selector_manager , generate_bytes_img , generate_bytes_img_prom , ) [EOL] from screamshot . utils import to_sync [EOL] [EOL] [EOL] class FakePage : [EOL] def __init__ ( self , arg_viewport = None , wait_until = None , goto_called = False , url = None , waitForSelector_called = False , wait_for = None , waitForxPath_called = False , wait_for_xpath = None , querySelector_called = False , selector = None , credentials = None , credentials_token_request = None , use_local_token = None , ) : [EOL] self . arg_viewport = arg_viewport [EOL] self . credentials = credentials [EOL] self . credentials_token_request = credentials_token_request [EOL] self . wait_until = wait_until [EOL] self . goto_called = goto_called [EOL] self . url = url [EOL] self . waitForSelector_called = waitForSelector_called [EOL] self . wait_for = wait_for [EOL] self . waitForxPath_called = waitForxPath_called [EOL] self . wait_for_xpath = wait_for_xpath [EOL] self . querySelector_called = querySelector_called [EOL] self . selector = selector [EOL] if use_local_token : [EOL] self . credentials_token_request = { [string] : [string] } [EOL] [EOL] async def setViewport ( self , arg_viewport ) : [EOL] self . arg_viewport = arg_viewport [EOL] [EOL] async def authenticate ( self , credentials ) : [EOL] self . credentials = credentials [EOL] [EOL] async def setExtraHTTPHeaders ( self , credentials ) : [EOL] self . credentials = credentials [EOL] [EOL] async def goto ( self , url , waitUntil = None ) : [EOL] self . goto_called = True [EOL] self . url = url [EOL] self . wait_until = waitUntil [EOL] [EOL] async def waitForSelector ( self , wait_for ) : [EOL] self . waitForSelector_called = True [EOL] self . wait_for = wait_for [EOL] [EOL] async def waitForXPath ( self , wait_for_xpath ) : [EOL] self . waitForxPath_called = True [EOL] self . wait_for_xpath = wait_for_xpath [EOL] [EOL] async def querySelector ( self , selector ) : [EOL] self . querySelector_called = True [EOL] self . selector = selector [EOL] return self [EOL] [EOL] async def screenshot ( self , ** kwargs ) : [EOL] return [string] [EOL] [EOL] async def close ( self ) : [EOL] pass [EOL] [EOL] [EOL] class FakeBrowser : [EOL] async def newPage ( self ) : [EOL] return FakePage ( ) [EOL] [EOL] [EOL] async def get_browser ( ) : [EOL] return FakeBrowser ( ) [EOL] [EOL] [EOL] class TestGenerateBytesImgFunctionUnit ( TestCase ) : [EOL] [docstring] [EOL] [EOL] def test_parse_parameters ( self ) : [EOL] [docstring] [EOL] self . assertEqual ( _parse_parameters ( ) , { [string] : { } , [string] : { [string] : False } , [string] : None , [string] : None , [string] : None , [string] : [ [string] ] , [string] : { } , [string] : { } , [string] : None , } , ) [EOL] self . assertEqual ( _parse_parameters ( width = [number] ) , { [string] : { [string] : [number] } , [string] : { [string] : False } , [string] : None , [string] : None , [string] : None , [string] : [ [string] ] , [string] : { } , [string] : { } , [string] : None , } , ) [EOL] self . assertEqual ( _parse_parameters ( height = [number] ) , { [string] : { [string] : [number] } , [string] : { [string] : False } , [string] : None , [string] : None , [string] : None , [string] : [ [string] ] , [string] : { } , [string] : { } , [string] : None , } , ) [EOL] self . assertEqual ( _parse_parameters ( wait_until = [ [string] ] ) , { [string] : { } , [string] : { [string] : False } , [string] : None , [string] : None , [string] : None , [string] : [ [string] ] , [string] : { } , [string] : { } , [string] : None , } , ) [EOL] self . assertEqual ( _parse_parameters ( wait_until = [string] ) , { [string] : { } , [string] : { [string] : False } , [string] : None , [string] : None , [string] : None , [string] : [ [string] ] , [string] : { } , [string] : { } , [string] : None , } , ) [EOL] self . assertEqual ( _parse_parameters ( full_page = True ) , { [string] : { } , [string] : { [string] : True } , [string] : None , [string] : None , [string] : None , [string] : [ [string] ] , [string] : { } , [string] : { } , [string] : None , } , ) [EOL] self . assertEqual ( _parse_parameters ( selector = [string] ) , { [string] : { } , [string] : { [string] : False } , [string] : [string] , [string] : None , [string] : None , [string] : [ [string] ] , [string] : { } , [string] : { } , [string] : None , } , ) [EOL] self . assertEqual ( _parse_parameters ( wait_for = [string] ) , { [string] : { } , [string] : { [string] : False } , [string] : None , [string] : [string] , [string] : None , [string] : [ [string] ] , [string] : { } , [string] : { } , [string] : None , } , ) [EOL] self . assertEqual ( _parse_parameters ( wait_for_xpath = [string] ) , { [string] : { } , [string] : { [string] : False } , [string] : None , [string] : None , [string] : [string] , [string] : [ [string] ] , [string] : { } , [string] : { } , [string] : None , } , ) [EOL] self . assertEqual ( _parse_parameters ( path = [string] ) , { [string] : { } , [string] : { [string] : False , [string] : [string] } , [string] : None , [string] : None , [string] : None , [string] : [ [string] ] , [string] : { } , [string] : { } , [string] : None , } , ) [EOL] self . assertEqual ( _parse_parameters ( credentials = { [string] : [string] , [string] : [string] } ) , { [string] : { } , [string] : { [string] : False } , [string] : None , [string] : None , [string] : None , [string] : [ [string] ] , [string] : { [string] : True , [string] : { [string] : [string] , [string] : [string] } , } , [string] : { } , [string] : None , } , ) [EOL] self . assertEqual ( _parse_parameters ( credentials = { [string] : True , [string] : [string] } ) , { [string] : { } , [string] : { [string] : False } , [string] : None , [string] : None , [string] : None , [string] : [ [string] ] , [string] : { [string] : True , [string] : { [string] : [string] } , } , [string] : { } , [string] : None , } , ) [EOL] self . assertEqual ( _parse_parameters ( url_token = [string] , username_token = [string] , password_token = [string] ) , { [string] : { } , [string] : { [string] : False } , [string] : None , [string] : None , [string] : None , [string] : [ [string] ] , [string] : { } , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : False , } , [string] : None , } , ) [EOL] [EOL] @ patch ( [string] ) @ patch ( [string] ) def test_page_manager ( self , mock_get_token , mock_get_local_storage_token ) : [EOL] [docstring] [EOL] browser = FakeBrowser ( ) [EOL] url = [string] [EOL] mock_get_token . return_value = { [string] : [string] } [EOL] mock_get_local_storage_token . return_value = { [string] : [string] } [EOL] [EOL] params_page1 = { [string] : { } , [string] : { [string] : False } , [string] : None , [string] : None , [string] : None , [string] : [ [string] ] , [string] : { } , [string] : { } , [string] : None , } [EOL] page1 = to_sync ( _page_manager ( browser , url , params_page1 ) ) [EOL] self . assertEqual ( page1 . arg_viewport , None ) [EOL] self . assertEqual ( page1 . credentials , None ) [EOL] self . assertEqual ( page1 . wait_until , [ [string] ] ) [EOL] self . assertTrue ( page1 . goto_called ) [EOL] self . assertEqual ( page1 . url , url ) [EOL] self . assertFalse ( page1 . waitForSelector_called ) [EOL] self . assertEqual ( page1 . wait_for , None ) [EOL] self . assertFalse ( page1 . querySelector_called ) [EOL] self . assertEqual ( page1 . selector , None ) [EOL] [EOL] params_page2 = { [string] : { [string] : [number] , [string] : [number] } , [string] : { [string] : False } , [string] : None , [string] : None , [string] : None , [string] : [ [string] ] , [string] : { } , [string] : { } , [string] : None , } [EOL] page2 = to_sync ( _page_manager ( browser , url , params_page2 ) ) [EOL] self . assertEqual ( page2 . arg_viewport , { [string] : [number] , [string] : [number] } ) [EOL] self . assertEqual ( page2 . credentials , None ) [EOL] self . assertEqual ( page2 . wait_until , [ [string] ] ) [EOL] self . assertTrue ( page2 . goto_called ) [EOL] self . assertEqual ( page2 . url , url ) [EOL] self . assertFalse ( page2 . waitForSelector_called ) [EOL] self . assertEqual ( page2 . wait_for , None ) [EOL] self . assertFalse ( page2 . querySelector_called ) [EOL] self . assertEqual ( page2 . selector , None ) [EOL] [EOL] params_page3 = { [string] : { } , [string] : { [string] : False } , [string] : None , [string] : None , [string] : None , [string] : [ [string] , [string] ] , [string] : { } , [string] : { } , [string] : None , } [EOL] page3 = to_sync ( _page_manager ( browser , url , params_page3 ) ) [EOL] self . assertEqual ( page3 . arg_viewport , None ) [EOL] self . assertEqual ( page3 . credentials , None ) [EOL] self . assertEqual ( page3 . wait_until , [ [string] , [string] ] ) [EOL] self . assertTrue ( page3 . goto_called ) [EOL] self . assertEqual ( page3 . url , url ) [EOL] self . assertFalse ( page3 . waitForSelector_called ) [EOL] self . assertEqual ( page3 . wait_for , None ) [EOL] self . assertFalse ( page3 . querySelector_called ) [EOL] self . assertEqual ( page3 . selector , None ) [EOL] [EOL] params_page4 = { [string] : { } , [string] : { [string] : False } , [string] : None , [string] : [string] , [string] : [ [string] ] , [string] : { } , [string] : { } , [string] : None , } [EOL] page4 = to_sync ( _page_manager ( browser , url , params_page4 ) ) [EOL] self . assertEqual ( page4 . arg_viewport , None ) [EOL] self . assertEqual ( page4 . credentials , None ) [EOL] self . assertEqual ( page4 . wait_until , [ [string] ] ) [EOL] self . assertTrue ( page4 . goto_called ) [EOL] self . assertEqual ( page4 . url , url ) [EOL] self . assertTrue ( page4 . waitForSelector_called ) [EOL] self . assertEqual ( page4 . wait_for , [string] ) [EOL] self . assertFalse ( page4 . querySelector_called ) [EOL] self . assertEqual ( page4 . selector , None ) [EOL] [EOL] params_page5 = { [string] : { } , [string] : { [string] : False } , [string] : None , [string] : [string] , [string] : [ [string] ] , [string] : { [string] : True , [string] : { [string] : [string] , [string] : [string] } , } , [string] : { } , [string] : None , } [EOL] page5 = to_sync ( _page_manager ( browser , url , params_page5 ) ) [EOL] self . assertEqual ( page5 . arg_viewport , None ) [EOL] self . assertEqual ( page5 . credentials , { [string] : [string] , [string] : [string] } ) [EOL] self . assertEqual ( page5 . wait_until , [ [string] ] ) [EOL] self . assertTrue ( page5 . goto_called ) [EOL] self . assertEqual ( page5 . url , url ) [EOL] self . assertTrue ( page5 . waitForSelector_called ) [EOL] self . assertEqual ( page5 . wait_for , [string] ) [EOL] self . assertFalse ( page5 . querySelector_called ) [EOL] self . assertEqual ( page5 . selector , None ) [EOL] [EOL] params_page6 = { [string] : { } , [string] : { [string] : False } , [string] : None , [string] : [string] , [string] : [ [string] ] , [string] : { [string] : True , [string] : { [string] : [string] } , } , [string] : { } , [string] : None , } [EOL] page6 = to_sync ( _page_manager ( browser , url , params_page6 ) ) [EOL] self . assertEqual ( page6 . arg_viewport , None ) [EOL] self . assertEqual ( page6 . credentials , { [string] : [string] } ) [EOL] self . assertEqual ( page6 . wait_until , [ [string] ] ) [EOL] self . assertTrue ( page6 . goto_called ) [EOL] self . assertEqual ( page6 . url , url ) [EOL] self . assertTrue ( page6 . waitForSelector_called ) [EOL] self . assertEqual ( page6 . wait_for , [string] ) [EOL] self . assertFalse ( page6 . querySelector_called ) [EOL] self . assertEqual ( page6 . selector , None ) [EOL] [EOL] params_page7 = { [string] : { } , [string] : { [string] : False } , [string] : None , [string] : [string] , [string] : [ [string] ] , [string] : { } , [string] : { } , [string] : None , } [EOL] page7 = to_sync ( _page_manager ( browser , url , params_page7 ) ) [EOL] self . assertEqual ( page7 . arg_viewport , None ) [EOL] self . assertEqual ( page7 . credentials , None ) [EOL] self . assertEqual ( page7 . wait_until , [ [string] ] ) [EOL] self . assertTrue ( page7 . goto_called ) [EOL] self . assertEqual ( page7 . url , url ) [EOL] self . assertFalse ( page7 . waitForSelector_called ) [EOL] self . assertEqual ( page7 . wait_for , None ) [EOL] self . assertTrue ( page7 . waitForxPath_called ) [EOL] self . assertEqual ( page7 . wait_for_xpath , [string] ) [EOL] self . assertFalse ( page7 . querySelector_called ) [EOL] self . assertEqual ( page7 . selector , None ) [EOL] [EOL] params_page8 = { [string] : { } , [string] : { [string] : False } , [string] : None , [string] : [string] , [string] : [ [string] ] , [string] : { } , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , [string] : None , } [EOL] page8 = to_sync ( _page_manager ( browser , url , params_page8 ) ) [EOL] self . assertEqual ( page8 . arg_viewport , None ) [EOL] self . assertEqual ( page8 . credentials , { [string] : [string] } ) [EOL] self . assertEqual ( page8 . wait_until , [ [string] ] ) [EOL] self . assertTrue ( page8 . goto_called ) [EOL] self . assertEqual ( page8 . url , url ) [EOL] self . assertFalse ( page8 . waitForSelector_called ) [EOL] self . assertEqual ( page8 . wait_for , None ) [EOL] self . assertTrue ( page8 . waitForxPath_called ) [EOL] self . assertEqual ( page8 . wait_for_xpath , [string] ) [EOL] self . assertFalse ( page8 . querySelector_called ) [EOL] self . assertEqual ( page8 . selector , None ) [EOL] [EOL] params_page9 = { [string] : { } , [string] : { [string] : False } , [string] : None , [string] : [string] , [string] : [ [string] ] , [string] : { } , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : True } , [string] : True , } [EOL] page9 = to_sync ( _page_manager ( browser , url , params_page9 ) ) [EOL] self . assertEqual ( page9 . arg_viewport , None ) [EOL] self . assertEqual ( page9 . credentials , { [string] : [string] } ) [EOL] self . assertEqual ( page9 . wait_until , [ [string] ] ) [EOL] self . assertTrue ( page9 . goto_called ) [EOL] self . assertEqual ( page9 . url , url ) [EOL] self . assertFalse ( page9 . waitForSelector_called ) [EOL] self . assertEqual ( page9 . wait_for , None ) [EOL] self . assertTrue ( page9 . waitForxPath_called ) [EOL] self . assertEqual ( page9 . wait_for_xpath , [string] ) [EOL] self . assertFalse ( page9 . querySelector_called ) [EOL] self . assertEqual ( page9 . selector , None ) [EOL] [EOL] params_page10 = { [string] : { } , [string] : { [string] : False } , [string] : None , [string] : [string] , [string] : [ [string] ] , [string] : { } , [string] : { } , [string] : True , } [EOL] page10 = to_sync ( _page_manager ( browser , url , { [string] : { } , [string] : { [string] : False } , [string] : None , [string] : [string] , [string] : [ [string] ] , [string] : { } , [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : True } , [string] : True , } ) ) [EOL] page10 = to_sync ( _page_manager ( browser , url , params_page10 ) ) [EOL] self . assertEqual ( page10 . arg_viewport , None ) [EOL] self . assertEqual ( page10 . credentials , { [string] : [string] } ) [EOL] self . assertEqual ( page10 . wait_until , [ [string] ] ) [EOL] self . assertTrue ( page10 . goto_called ) [EOL] self . assertEqual ( page10 . url , url ) [EOL] self . assertFalse ( page10 . waitForSelector_called ) [EOL] self . assertEqual ( page10 . wait_for , None ) [EOL] self . assertTrue ( page10 . waitForxPath_called ) [EOL] self . assertEqual ( page10 . wait_for_xpath , [string] ) [EOL] self . assertFalse ( page10 . querySelector_called ) [EOL] self . assertEqual ( page10 . selector , None ) [EOL] [EOL] def test_selector_manager ( self ) : [EOL] [docstring] [EOL] url = [string] [EOL] [EOL] params_page1 = { [string] : { } , [string] : { [string] : False } , [string] : None , [string] : None , [string] : None , [string] : [ [string] ] , } [EOL] page1 = FakePage ( arg_viewport = None , wait_until = [ [string] ] , goto_called = True , url = url , waitForSelector_called = False , wait_for = None , ) [EOL] new_page1 = to_sync ( _selector_manager ( page1 , params_page1 ) ) [EOL] self . assertEqual ( new_page1 . arg_viewport , None ) [EOL] self . assertEqual ( new_page1 . wait_until , [ [string] ] ) [EOL] self . assertTrue ( new_page1 . goto_called ) [EOL] self . assertEqual ( new_page1 . url , url ) [EOL] self . assertFalse ( new_page1 . waitForSelector_called ) [EOL] self . assertEqual ( new_page1 . wait_for , None ) [EOL] self . assertFalse ( new_page1 . querySelector_called ) [EOL] self . assertEqual ( new_page1 . selector , None ) [EOL] [EOL] params_page2 = { [string] : { } , [string] : { [string] : False } , [string] : [string] , [string] : None , [string] : None , [string] : [ [string] ] , } [EOL] page2 = FakePage ( arg_viewport = None , wait_until = [ [string] ] , goto_called = True , url = url , waitForSelector_called = False , wait_for = None , ) [EOL] new_page2 = to_sync ( _selector_manager ( page2 , params_page2 ) ) [EOL] self . assertEqual ( new_page2 . arg_viewport , None ) [EOL] self . assertEqual ( new_page2 . wait_until , [ [string] ] ) [EOL] self . assertTrue ( new_page2 . goto_called ) [EOL] self . assertEqual ( new_page2 . url , url ) [EOL] self . assertFalse ( new_page2 . waitForSelector_called ) [EOL] self . assertEqual ( new_page2 . wait_for , None ) [EOL] self . assertTrue ( new_page2 . querySelector_called ) [EOL] self . assertEqual ( new_page2 . selector , [string] ) [EOL] [EOL] @ patch ( [string] ) def test_generate_bytes_img ( self , mock_get_browser ) : [EOL] [docstring] [EOL] mock_get_browser . side_effect = get_browser [EOL] [EOL] url = [string] [EOL] [EOL] screenshot1 = to_sync ( generate_bytes_img ( url ) ) [EOL] self . assertEqual ( screenshot1 , [string] ) [EOL] [EOL] @ patch ( [string] ) def test_generate_bytes_img_prom ( self , mock_get_browser ) : [EOL] [docstring] [EOL] mock_get_browser . side_effect = get_browser [EOL] [EOL] url = [string] [EOL] [EOL] loop = get_event_loop ( ) [EOL] future = Future ( ) [EOL] ensure_future ( generate_bytes_img_prom ( url , future ) ) [EOL] loop . run_until_complete ( future ) [EOL] screenshot1 = future . result ( ) [EOL] self . assertEqual ( screenshot1 , [string] ) [EOL]	tests.test_generate_bytes_img_function_unit.FakeBrowser$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[None,typing.Dict[typing.Any,typing.Any],typing.Dict[builtins.str,builtins.bool],typing.List[builtins.str],builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $tests.test_generate_bytes_img_function_unit.FakeBrowser$ 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Union[None,typing.Dict[typing.Any,typing.Any],typing.Dict[builtins.str,builtins.bool],typing.List[builtins.str],builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[None,typing.Dict[typing.Any,typing.Any],typing.Dict[builtins.str,builtins.bool],typing.List[builtins.str],builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $tests.test_generate_bytes_img_function_unit.FakeBrowser$ 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Union[None,typing.Dict[typing.Any,typing.Any],typing.Dict[builtins.str,builtins.bool],typing.List[builtins.str],builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[None,typing.Dict[typing.Any,typing.Any],typing.Dict[builtins.str,builtins.bool],typing.List[builtins.str],builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $tests.test_generate_bytes_img_function_unit.FakeBrowser$ 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Union[None,typing.Dict[typing.Any,typing.Any],typing.Dict[builtins.str,builtins.bool],typing.List[builtins.str],builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[None,typing.Dict[typing.Any,typing.Any],typing.Dict[builtins.str,builtins.bool],typing.List[builtins.str],builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $tests.test_generate_bytes_img_function_unit.FakeBrowser$ 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Union[None,typing.Dict[typing.Any,typing.Any],typing.Dict[builtins.str,builtins.bool],typing.List[builtins.str],builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[None,typing.Dict[typing.Any,typing.Any],typing.Dict[builtins.str,builtins.bool],typing.List[builtins.str],builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $tests.test_generate_bytes_img_function_unit.FakeBrowser$ 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Union[None,typing.Dict[typing.Any,typing.Any],typing.Dict[builtins.str,builtins.bool],typing.List[builtins.str],builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[None,typing.Dict[typing.Any,typing.Any],typing.Dict[builtins.str,builtins.bool],typing.List[builtins.str],builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $tests.test_generate_bytes_img_function_unit.FakeBrowser$ 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Union[None,typing.Dict[typing.Any,typing.Any],typing.Dict[builtins.str,builtins.bool],typing.List[builtins.str],builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[None,typing.Dict[typing.Any,typing.Any],typing.Dict[builtins.str,builtins.bool],typing.List[builtins.str],builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $tests.test_generate_bytes_img_function_unit.FakeBrowser$ 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Union[None,typing.Dict[typing.Any,typing.Any],typing.Dict[builtins.str,builtins.bool],typing.List[builtins.str],builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[None,typing.Dict[typing.Any,typing.Any],typing.Dict[builtins.str,builtins.bool],typing.List[builtins.str],builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $tests.test_generate_bytes_img_function_unit.FakeBrowser$ 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Union[None,typing.Dict[typing.Any,typing.Any],typing.Dict[builtins.str,builtins.bool],typing.List[builtins.str],builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[None,typing.Dict[typing.Any,typing.Any],typing.Dict[builtins.str,builtins.bool],typing.List[builtins.str],builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $tests.test_generate_bytes_img_function_unit.FakeBrowser$ 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Union[None,typing.Dict[typing.Any,typing.Any],typing.Dict[builtins.str,builtins.bool],typing.List[builtins.str],builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[None,typing.Dict[typing.Any,typing.Any],typing.Dict[builtins.str,builtins.bool],typing.List[builtins.str],builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $tests.test_generate_bytes_img_function_unit.FakeBrowser$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $tests.test_generate_bytes_img_function_unit.FakeBrowser$ 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Union[None,typing.Dict[typing.Any,typing.Any],typing.Dict[builtins.str,builtins.bool],typing.List[builtins.str],builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[builtins.str,typing.Union[None,typing.Dict[typing.Any,typing.Any],typing.Dict[builtins.str,builtins.bool],typing.List[builtins.str],builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.test_generate_bytes_img_function_unit.FakePage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $tests.test_generate_bytes_img_function_unit.FakePage$ 0 $typing.Dict[builtins.str,typing.Union[None,typing.Dict[typing.Any,typing.Any],typing.Dict[builtins.str,builtins.bool],typing.List[builtins.str],builtins.str]]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[None,typing.Dict[typing.Any,typing.Any],typing.Dict[builtins.str,builtins.bool],typing.List[builtins.str],builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.test_generate_bytes_img_function_unit.FakePage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $tests.test_generate_bytes_img_function_unit.FakePage$ 0 $typing.Dict[builtins.str,typing.Union[None,typing.Dict[typing.Any,typing.Any],typing.Dict[builtins.str,builtins.bool],typing.List[builtins.str],builtins.str]]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 0 0 0 0 $asyncio.futures.Future[typing.Any]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $asyncio.futures.Future[typing.Any]$ 0 0 0 $asyncio.events.AbstractEventLoop$ 0 0 0 $asyncio.futures.Future[typing.Any]$ 0 0 $typing.Any$ 0 $asyncio.futures.Future[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0
from typing import Any [EOL] import typing [EOL] import io [EOL] import asyncio [EOL] [docstring] [EOL] import asyncio [EOL] import unittest [EOL] from os import remove [EOL] from os . path import exists [EOL] from io import BytesIO [EOL] [EOL] import numpy as np [EOL] [EOL] from PIL import Image [EOL] [EOL] from screamshot import ( generate_bytes_img , generate_bytes_img_prom , generate_bytes_img_wrap , ) [EOL] from screamshot . utils import to_sync , get_browser , close_browser [EOL] from screamshot . errors import BadUrl , BadSelector [EOL] [EOL] [EOL] TOKEN = [string] [EOL] [EOL] [EOL] def _rmsd ( img1 , img2 ) : [EOL] img1 = ( img1 - np . mean ( img1 ) ) / ( np . std ( img1 ) ) [EOL] img2 = ( img2 - np . mean ( img2 ) ) / ( np . std ( img2 ) ) [EOL] return np . sqrt ( np . mean ( ( img1 - img2 ) ** [number] ) ) [EOL] [EOL] [EOL] [comment] [EOL] def _is_same_image ( img1 , img2 ) : [EOL] return ( img1 . size == img2 . size ) and ( abs ( _rmsd ( img1 , img2 ) ) < [number] ) [EOL] [EOL] [EOL] class TestGenerateBytesImgFunction ( unittest . TestCase ) : [EOL] [docstring] [EOL] [EOL] def setUp ( self ) : [EOL] to_sync ( get_browser ( launch_args = [ [string] ] ) ) [EOL] [EOL] self . img_dog = Image . open ( [string] ) [EOL] self . img_dog_change = Image . open ( [string] ) [EOL] self . img_kitten = Image . open ( [string] ) [EOL] [EOL] def test_screenshot_bad_url ( self ) : [EOL] with self . assertRaises ( BadUrl ) : [EOL] to_sync ( generate_bytes_img ( [string] ) ) [EOL] [EOL] def test_screenshot_protected_page_no_auth ( self ) : [EOL] with self . assertRaisesRegex ( BadSelector , [string] ) : [EOL] to_sync ( generate_bytes_img ( [string] , selector = [string] ) ) [EOL] [EOL] def test_screenshot_protected_page_bad_auth ( self ) : [EOL] with self . assertRaisesRegex ( BadSelector , [string] ) : [EOL] to_sync ( generate_bytes_img ( [string] , selector = [string] , credentials = { [string] : True , [string] : [string] } , ) ) [EOL] with self . assertRaisesRegex ( BadSelector , [string] ) : [EOL] to_sync ( generate_bytes_img ( [string] , selector = [string] , credentials = { [string] : TOKEN } , ) ) [EOL] [EOL] def test_screenshot_protected_page_with_auth_token ( self ) : [EOL] img_bytes = BytesIO ( to_sync ( generate_bytes_img ( [string] , selector = [string] , credentials = { [string] : True , [string] : TOKEN } , ) ) ) [EOL] img = Image . open ( img_bytes ) [EOL] dog_img = Image . open ( [string] ) . convert ( [string] ) [EOL] kitten_img = Image . open ( [string] ) . convert ( [string] ) [EOL] self . assertTrue ( _is_same_image ( img , dog_img ) ) [EOL] self . assertFalse ( _is_same_image ( img , kitten_img ) ) [EOL] [EOL] def test_screenshot_protected_page_with_auth_login ( self ) : [EOL] img_bytes = BytesIO ( to_sync ( generate_bytes_img ( [string] , selector = [string] , credentials = { [string] : [string] , [string] : [string] } , ) ) ) [EOL] img = Image . open ( img_bytes ) [EOL] dog_img = Image . open ( [string] ) . convert ( [string] ) [EOL] kitten_img = Image . open ( [string] ) . convert ( [string] ) [EOL] self . assertTrue ( _is_same_image ( img , dog_img ) ) [EOL] self . assertFalse ( _is_same_image ( img , kitten_img ) ) [EOL] [EOL] def test_screamshot_same_bytes_write ( self ) : [EOL] [docstring] [EOL] img_bytes = BytesIO ( to_sync ( generate_bytes_img ( [string] , path = [string] , selector = [string] , ) ) ) [EOL] img_bytes = Image . open ( img_bytes ) [EOL] img_file = Image . open ( [string] ) [EOL] [EOL] self . assertTupleEqual ( img_bytes . size , img_file . size ) [EOL] self . assertAlmostEqual ( _rmsd ( img_bytes , img_file ) , [number] , delta = [number] ) [EOL] [EOL] def test_screamshot_same_dog ( self ) : [EOL] [docstring] [EOL] to_sync ( generate_bytes_img ( [string] , selector = [string] , path = [string] , ) ) [EOL] img = Image . open ( [string] ) [EOL] [EOL] self . assertTrue ( _is_same_image ( img , self . img_dog ) ) [EOL] [EOL] def test_screamshot_same_kitten ( self ) : [EOL] [docstring] [EOL] to_sync ( generate_bytes_img ( [string] , selector = [string] , path = [string] , ) ) [EOL] img = Image . open ( [string] ) [EOL] [EOL] self . assertTrue ( _is_same_image ( img , self . img_kitten ) ) [EOL] [EOL] def test_screamshot_different_image ( self ) : [EOL] [docstring] [EOL] to_sync ( generate_bytes_img ( [string] , selector = [string] , path = [string] , ) ) [EOL] img = Image . open ( [string] ) [EOL] [EOL] self . assertEqual ( img . size , self . img_dog . size ) [EOL] self . assertNotAlmostEqual ( _rmsd ( img , self . img_dog_change ) , [number] , delta = [number] ) [EOL] [EOL] def test_screamshot_same_bytes_write_with_promise ( self ) : [EOL] [docstring] [EOL] loop = asyncio . get_event_loop ( ) [EOL] future = asyncio . Future ( ) [EOL] asyncio . ensure_future ( generate_bytes_img_prom ( [string] , future , selector = [string] , path = [string] , ) ) [EOL] loop . run_until_complete ( future ) [EOL] img_bytes = BytesIO ( future . result ( ) ) [comment] [EOL] img_bytes = Image . open ( img_bytes ) [EOL] img_file = Image . open ( [string] ) [EOL] [EOL] self . assertTupleEqual ( img_bytes . size , img_file . size ) [EOL] self . assertAlmostEqual ( _rmsd ( img_bytes , img_file ) , [number] , delta = [number] ) [EOL] [EOL] def test_screamshot_same_dog_with_promise ( self ) : [EOL] [docstring] [EOL] loop = asyncio . get_event_loop ( ) [EOL] future = asyncio . Future ( ) [EOL] asyncio . ensure_future ( generate_bytes_img_prom ( [string] , future , selector = [string] , path = [string] , ) ) [EOL] loop . run_until_complete ( future ) [EOL] img = Image . open ( [string] ) [EOL] [EOL] self . assertTrue ( _is_same_image ( img , self . img_dog ) ) [EOL] [EOL] def test_screamshot_same_kitten_with_promise ( self ) : [EOL] [docstring] [EOL] loop = asyncio . get_event_loop ( ) [EOL] future = asyncio . Future ( ) [EOL] asyncio . ensure_future ( generate_bytes_img_prom ( [string] , future , selector = [string] , path = [string] , ) ) [EOL] loop . run_until_complete ( future ) [EOL] img = Image . open ( [string] ) [EOL] [EOL] self . assertTrue ( _is_same_image ( img , self . img_kitten ) ) [EOL] [EOL] def test_screamshot_different_image_with_promise ( self ) : [EOL] [docstring] [EOL] loop = asyncio . get_event_loop ( ) [EOL] future = asyncio . Future ( ) [EOL] asyncio . ensure_future ( generate_bytes_img_prom ( [string] , future , selector = [string] , path = [string] , ) ) [EOL] loop . run_until_complete ( future ) [EOL] img = Image . open ( [string] ) [EOL] [EOL] self . assertEqual ( img . size , self . img_dog . size ) [EOL] self . assertNotAlmostEqual ( _rmsd ( img , self . img_dog_change ) , [number] , delta = [number] ) [EOL] [EOL] def test_screamshot_same_bytes_write_with_django_wrap ( self ) : [EOL] [docstring] [EOL] img_bytes = generate_bytes_img_wrap ( [string] , selector = [string] , path = [string] , ) [EOL] img_bytes = BytesIO ( img_bytes ) [EOL] img_bytes = Image . open ( img_bytes ) [EOL] img_file = Image . open ( [string] ) [EOL] [EOL] self . assertTupleEqual ( img_bytes . size , img_file . size ) [EOL] self . assertAlmostEqual ( _rmsd ( img_bytes , img_file ) , [number] , delta = [number] ) [EOL] [EOL] def test_screamshot_same_dog_with_django_wrap ( self ) : [EOL] [docstring] [EOL] generate_bytes_img_wrap ( [string] , selector = [string] , path = [string] ) [EOL] img = Image . open ( [string] ) [EOL] [EOL] self . assertTrue ( _is_same_image ( img , self . img_dog ) ) [EOL] [EOL] def test_screamshot_same_kitten_with_django_wrap ( self ) : [EOL] [docstring] [EOL] generate_bytes_img_wrap ( [string] , selector = [string] , path = [string] , ) [EOL] img = Image . open ( [string] ) [EOL] [EOL] self . assertTrue ( _is_same_image ( img , self . img_kitten ) ) [EOL] [EOL] def test_screamshot_different_image_with_django_wrap ( self ) : [EOL] [docstring] [EOL] generate_bytes_img_wrap ( [string] , selector = [string] , path = [string] ) [EOL] img = Image . open ( [string] ) [EOL] [EOL] self . assertEqual ( img . size , self . img_dog . size ) [EOL] self . assertNotAlmostEqual ( _rmsd ( img , self . img_dog_change ) , [number] , delta = [number] ) [EOL] [EOL] def tearDown ( self ) : [EOL] to_sync ( close_browser ( ) ) [EOL] [EOL] if exists ( [string] ) : [EOL] remove ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $io.BytesIO$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $io.BytesIO$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $io.BytesIO$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $io.BytesIO$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 0 0 0 0 0 0 $asyncio.futures.Future[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.futures.Future[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 0 0 $asyncio.futures.Future[typing.Any]$ 0 0 $typing.Any$ 0 0 0 $asyncio.futures.Future[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 0 0 0 0 0 0 $asyncio.futures.Future[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.futures.Future[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 0 0 $asyncio.futures.Future[typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 0 0 0 0 0 0 $asyncio.futures.Future[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.futures.Future[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 0 0 $asyncio.futures.Future[typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 0 0 0 0 0 0 $asyncio.futures.Future[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.futures.Future[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 0 0 $asyncio.futures.Future[typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict , List [EOL] import typing [EOL] import unittest [EOL] import io [EOL] import tests [EOL] [docstring] [EOL] from os import remove [EOL] from unittest import TestCase [EOL] from unittest import mock [EOL] [EOL] from urllib3 . exceptions import MaxRetryError [EOL] [EOL] from requests . exceptions import ConnectionError as RequestsConnectionError [EOL] [EOL] from screamshot . utils import ( to_sync , _check_wait_until_arg , url_match , set_endpoint , FILENAME_ENDPOINT , get_endpoint , open_browser , get_browser , wait_server_start , wait_server_close , get_token , get_local_storage_token , ) [EOL] from screamshot . errors import BadAuth [EOL] [EOL] from _io import TextIOWrapper [EOL] [EOL] [EOL] class FakeBrowser : [EOL] def __init__ ( self , headless , autoClose , args ) : [EOL] self . headless = headless [EOL] self . autoClose = autoClose [EOL] self . args = args [EOL] self . wsEndpoint = [string] [EOL] [EOL] [EOL] async def mocked_launch ( options = None , ** kwargs ) : [EOL] parameters = dict ( ) [EOL] if options : [EOL] parameters . update ( options ) [EOL] parameters . update ( kwargs ) [EOL] [EOL] headless = parameters . get ( [string] ) [EOL] if not headless : [EOL] headless = False [EOL] [EOL] autoClose = parameters . get ( [string] , True ) [EOL] [EOL] args = parameters . get ( [string] ) [EOL] [EOL] browser = FakeBrowser ( headless , autoClose , args ) [EOL] return browser [EOL] [EOL] [EOL] def mocked_set_endpoint ( ws_endpoint ) : [EOL] raise ValueError ( ws_endpoint ) [EOL] [EOL] [EOL] async def mocked_connect ( browserWSEndpoint = None ) : [EOL] raise ValueError ( [string] ) [EOL] [EOL] [EOL] async def mocked_open_browser ( is_headless , launch_args = None , write_websocket = True ) : [EOL] raise ValueError ( [string] ) [EOL] [EOL] [EOL] class UnistTestsUtilsFunctions ( TestCase ) : [EOL] [docstring] [EOL] [EOL] def test_check_wait_until_arg ( self ) : [EOL] [docstring] [EOL] self . assertTrue ( _check_wait_until_arg ( [string] ) ) [EOL] self . assertTrue ( _check_wait_until_arg ( [ [string] ] ) ) [EOL] [EOL] self . assertTrue ( _check_wait_until_arg ( [string] ) ) [EOL] self . assertTrue ( _check_wait_until_arg ( [ [string] ] ) ) [EOL] [EOL] self . assertTrue ( _check_wait_until_arg ( [string] ) ) [EOL] self . assertTrue ( _check_wait_until_arg ( [ [string] ] ) ) [EOL] [EOL] self . assertTrue ( _check_wait_until_arg ( [string] ) ) [EOL] self . assertTrue ( _check_wait_until_arg ( [ [string] ] ) ) [EOL] [EOL] self . assertFalse ( _check_wait_until_arg ( [string] ) ) [EOL] self . assertFalse ( _check_wait_until_arg ( [ [string] ] ) ) [EOL] [EOL] def test_url_match ( self ) : [EOL] [docstring] [EOL] self . assertTrue ( url_match ( [string] , [string] ) ) [EOL] self . assertTrue ( url_match ( [string] , [string] ) ) [EOL] self . assertTrue ( url_match ( [string] , [string] ) ) [EOL] [EOL] self . assertFalse ( url_match ( [string] , [string] ) ) [EOL] self . assertFalse ( url_match ( [string] , [string] ) ) [EOL] self . assertFalse ( url_match ( [string] , [string] ) ) [EOL] [EOL] def test_set_endpoint ( self ) : [EOL] [docstring] [EOL] with self . assertRaises ( FileNotFoundError ) : [EOL] open ( FILENAME_ENDPOINT , [string] ) [EOL] [EOL] set_endpoint ( [string] ) [EOL] endpoint_f = open ( FILENAME_ENDPOINT , [string] ) [EOL] self . assertTrue ( isinstance ( endpoint_f , TextIOWrapper ) ) [EOL] endpoint_fc = endpoint_f . readlines ( ) [EOL] self . assertEqual ( len ( endpoint_fc ) , [number] ) [EOL] endpoint = endpoint_fc [ [number] ] [ : - [number] ] [EOL] self . assertEqual ( [string] , endpoint ) [EOL] [EOL] endpoint_f . close ( ) [EOL] remove ( FILENAME_ENDPOINT ) [EOL] [EOL] def test_get_end_point ( self ) : [EOL] [docstring] [EOL] self . assertEqual ( get_endpoint ( ) , None ) [EOL] [EOL] with self . assertLogs ( ) as logs : [EOL] get_endpoint ( ) [EOL] self . assertEqual ( logs . output , [ [string] . format ( FILENAME_ENDPOINT ) ] ) [EOL] [EOL] endpoint_f = open ( FILENAME_ENDPOINT , [string] ) [EOL] endpoint_f . write ( [string] ) [EOL] endpoint_f . close ( ) [EOL] self . assertEqual ( get_endpoint ( ) , [string] ) [EOL] [EOL] remove ( FILENAME_ENDPOINT ) [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_open_browser ( self , mock_launch , mock_set_endpoint ) : [EOL] mock_launch . side_effect = mocked_launch [EOL] mock_set_endpoint . side_effect = mocked_set_endpoint [EOL] [EOL] browser1 = to_sync ( open_browser ( True , write_websocket = False ) ) [EOL] self . assertTrue ( browser1 . headless ) [EOL] self . assertFalse ( browser1 . autoClose ) [EOL] self . assertEqual ( browser1 . args , None ) [EOL] self . assertEqual ( browser1 . wsEndpoint , [string] ) [EOL] [EOL] browser2 = to_sync ( open_browser ( False , write_websocket = False ) ) [EOL] self . assertFalse ( browser2 . headless ) [EOL] self . assertFalse ( browser2 . autoClose ) [EOL] self . assertEqual ( browser2 . args , None ) [EOL] self . assertEqual ( browser2 . wsEndpoint , [string] ) [EOL] [EOL] browser3 = to_sync ( open_browser ( True , launch_args = [ [string] ] , write_websocket = False ) ) [EOL] self . assertTrue ( browser3 . headless ) [EOL] self . assertFalse ( browser3 . autoClose ) [EOL] self . assertEqual ( browser3 . args , [ [string] ] ) [EOL] self . assertEqual ( browser3 . wsEndpoint , [string] ) [EOL] [EOL] with self . assertRaisesRegex ( ValueError , [string] ) : [EOL] browser4 = to_sync ( open_browser ( True , launch_args = [ [string] ] ) ) [EOL] self . assertTrue ( browser4 . headless ) [EOL] self . assertFalse ( browser4 . autoClose ) [EOL] self . assertEqual ( browser4 . args , [ [string] ] ) [EOL] self . assertEqual ( browser4 . wsEndpoint , [string] ) [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_get_browser ( self , mock_open_browser , mock_connect , mock_get_endpoint ) : [EOL] mock_connect . side_effect = mocked_connect [EOL] mock_open_browser . side_effect = mocked_open_browser [EOL] [EOL] mock_get_endpoint . return_value = [string] [EOL] with self . assertRaisesRegex ( ValueError , [string] ) : [EOL] to_sync ( get_browser ( ) ) [EOL] [EOL] mock_get_endpoint . return_value = None [EOL] with self . assertRaisesRegex ( ValueError , [string] ) : [EOL] to_sync ( get_browser ( ) ) [EOL] [EOL] @ mock . patch ( [string] ) def test_wait_server_start ( self , mock_get ) : [EOL] [docstring] [EOL] mock_get . side_effect = MaxRetryError ( None , [string] ) [EOL] with self . assertRaises ( MaxRetryError ) : [EOL] with self . assertLogs ( ) as logs : [EOL] wait_server_start ( [string] , [string] , [string] ) [EOL] self . assertEqual ( logs . output , [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , ) [EOL] [EOL] mock_response = mock . Mock ( ) [EOL] mock_response . status_code . return_value = [number] [EOL] mock_get . side_effect = [ MaxRetryError ( None , [string] ) , mock_response ] [EOL] with self . assertLogs ( ) as logs : [EOL] wait_server_start ( [string] , [string] , [string] ) [EOL] self . assertEqual ( logs . output , [ [string] , [string] ] ) [EOL] [EOL] mock_get . side_effect = mock_response [EOL] with self . assertLogs ( ) as logs : [EOL] wait_server_start ( [string] , [string] , [string] ) [EOL] self . assertEqual ( logs . output , [ [string] ] ) [EOL] [EOL] @ mock . patch ( [string] ) def test_wait_server_close ( self , mock_get ) : [EOL] [docstring] [EOL] mock_response = mock . Mock ( ) [EOL] mock_response . status_code . return_value = [number] [EOL] mock_get . side_effect = mock_response [EOL] with self . assertRaises ( MaxRetryError ) : [EOL] with self . assertLogs ( ) as logs : [EOL] wait_server_close ( [string] , [string] , [string] ) [EOL] self . assertEqual ( logs . output , [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , ) [EOL] [EOL] mock_response = mock . Mock ( ) [EOL] mock_response . status_code . return_value = [number] [EOL] mock_get . side_effect = [ mock_response , RequestsConnectionError ( ) ] [EOL] with self . assertLogs ( ) as logs : [EOL] wait_server_close ( [string] , [string] , [string] ) [EOL] self . assertEqual ( logs . output , [ [string] , [string] ] ) [EOL] [EOL] mock_get . side_effect = RequestsConnectionError ( ) [EOL] with self . assertLogs ( ) as logs : [EOL] wait_server_close ( [string] , [string] , [string] ) [EOL] self . assertEqual ( logs . output , [ [string] ] ) [EOL] [EOL] @ mock . patch ( [string] ) def test_get_token_200 ( self , mock_post ) : [EOL] mock_post . return_value . status_code = [number] [EOL] mock_post . return_value . content = [string] [EOL] self . assertEqual ( get_token ( [string] , { } ) , [string] ) [EOL] [EOL] @ mock . patch ( [string] ) def test_get_token_400 ( self , mock_post ) : [EOL] mock_post . return_value . status_code = [number] [EOL] mock_post . return_value . content = [string] [EOL] with self . assertRaises ( BadAuth ) : [EOL] get_token ( [string] , { } ) [EOL] [EOL] @ mock . patch ( [string] ) def test_get_token_put_local_storage ( self , mock_post ) : [EOL] mock_post . return_value . status_code = [number] [EOL] mock_post . return_value . content = [string] [EOL] browser = to_sync ( open_browser ( True , write_websocket = False , launch_args = [ [string] ] ) ) [EOL] page = to_sync ( browser . newPage ( ) ) [EOL] to_sync ( page . goto ( [string] ) ) [EOL] get_token ( [string] , { } , True , page ) [EOL] token = to_sync ( page . evaluate ( [string] ) ) [EOL] self . assertEqual ( token , [string] ) [EOL] browser . close ( ) [EOL] [EOL] @ mock . patch ( [string] ) def test_get_token_from_local_storage ( self , mock_post ) : [EOL] mock_post . return_value . status_code = [number] [EOL] mock_post . return_value . content = [string] [EOL] browser = to_sync ( open_browser ( True , write_websocket = False , launch_args = [ [string] ] ) ) [EOL] page = to_sync ( browser . newPage ( ) ) [EOL] to_sync ( page . goto ( [string] ) ) [EOL] get_token ( [string] , { } , True , page ) [EOL] token = get_local_storage_token ( page ) [EOL] self . assertEqual ( token , [string] ) [EOL] browser . close ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Dict , Optional , Any [EOL] import typing [EOL] import werkzeug [EOL] import flask [EOL] import logging [EOL] from functools import wraps [EOL] [EOL] from flask import ( Flask , render_template , request , send_from_directory , url_for , redirect , jsonify , make_response , ) [EOL] from flask . wrappers import Response [EOL] [EOL] from jwt import encode , decode [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] app = Flask ( __name__ , static_url_path = [string] ) [EOL] app . config [ [string] ] = [string] [EOL] app . config [ [string] ] = [string] [EOL] [EOL] [EOL] class OwnResponse ( Response ) : [EOL] def __init__ ( self , response = None , status = None , headers = None , mimetype = None , content_type = None , direct_passthrough = False , ) : [EOL] super ( ) . __init__ ( response , status , { [string] : app . config [ [string] ] } , mimetype , content_type , direct_passthrough , ) [EOL] [EOL] [EOL] @ app . route ( [string] ) def index ( ) : [EOL] return redirect ( url_for ( [string] , filename = [string] ) ) [EOL] [EOL] [EOL] @ app . route ( [string] ) def other_page ( ) : [EOL] return redirect ( url_for ( [string] , filename = [string] ) ) [EOL] [EOL] [EOL] def shutdown_server ( ) : [EOL] func = request . environ . get ( [string] ) [EOL] if func is None : [EOL] raise RuntimeError ( [string] ) [EOL] func ( ) [EOL] [EOL] [EOL] @ app . route ( [string] ) def close ( ) : [EOL] shutdown_server ( ) [EOL] return [string] [EOL] [EOL] [EOL] def token_required ( f ) : [EOL] @ wraps ( f ) def decorated ( * args , ** kwargs ) : [EOL] token = request . headers . get ( [string] ) [EOL] auth = request . authorization [EOL] if not token and ( not auth or auth . username != [string] or auth . password != [string] ) : [EOL] return make_response ( [string] , [number] , { [string] : [string] } , ) [EOL] if not auth : [EOL] try : [EOL] data = decode ( token , app . config [ [string] ] ) [EOL] except : [EOL] return make_response ( [string] , [number] ) [EOL] return f ( * args , ** kwargs ) [EOL] [EOL] return decorated [EOL] [EOL] [EOL] @ app . route ( [string] ) @ token_required def protected_index_page ( ) : [EOL] return redirect ( url_for ( [string] , filename = [string] ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] app . run ( debug = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0
import argparse [EOL] import logging [EOL] import subprocess [EOL] [docstring] [EOL] [comment] [EOL] from logging import getLogger , INFO [EOL] from subprocess import run [EOL] from argparse import ArgumentParser [EOL] [EOL] from screamshot . utils import wait_server_start , wait_server_close [EOL] [EOL] [EOL] logger = getLogger ( ) [EOL] logger . setLevel ( INFO ) [EOL] [EOL] [EOL] def main ( ) : [EOL] parser = ArgumentParser ( description = __doc__ ) [EOL] parser . add_argument ( [string] , help = [string] , type = str , default = [string] ) [EOL] parser . add_argument ( [string] , help = [string] , type = str , default = [string] ) [EOL] args = parser . parse_args ( ) [EOL] [EOL] exit_code = [number] [EOL] [EOL] logger . info ( [string] ) [EOL] wait_server_start ( args . wait_url , [string] , [string] ) [EOL] [EOL] if not exit_code : [EOL] logger . info ( [string] ) [EOL] pytest_res = run ( [ [string] , [string] , [string] , [string] , [string] ] ) [EOL] exit_code = pytest_res . returncode [EOL] [EOL] if not exit_code : [EOL] logger . info ( [string] ) [EOL] pylint_res = run ( [ [string] , [string] ] ) [EOL] exit_code = pylint_res . returncode [EOL] [EOL] if not exit_code : [EOL] logger . info ( [string] ) [EOL] mypy_res = run ( [ [string] , [string] ] ) [EOL] exit_code = mypy_res . returncode [EOL] [EOL] logger . info ( [string] ) [EOL] wait_server_close ( args . close_url , [string] , [string] ) [EOL] [EOL] exit ( exit_code ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] from typing import List [EOL] import typing [EOL] project = [string] [EOL] copyright = [string] [EOL] author = [string] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] extensions = [ [string] ] [EOL] [EOL] [comment] [EOL] templates_path = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] exclude_patterns = [ [string] , [string] , [string] ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_theme = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_static_path = [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0