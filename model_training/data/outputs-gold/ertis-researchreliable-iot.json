	0
from typing import Any [EOL] import typing [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0
from typing import Type [EOL] import IoT_Web [EOL] import typing [EOL] [docstring] [EOL] [EOL] [EOL] class User : [EOL] __instance = None [EOL] [EOL] @ staticmethod def get_instance ( ) : [EOL] [docstring] [EOL] if not User . __instance : [EOL] User ( ) [EOL] [EOL] return User . __instance [EOL] [EOL] def __init__ ( self , us_id = None , us_tok = None , us_em = None ) : [EOL] [docstring] [EOL] if User . __instance : [EOL] raise Exception ( [string] ) [EOL] else : [EOL] self . user_id = us_id [EOL] self . user_token = us_tok [EOL] self . user_email = us_em [EOL] User . __instance = self [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] DB_URL = [string] [comment] [EOL] [EOL] REFRESH_TOKEN = [string] [EOL] ALREADY_REGISTERED = [string] [EOL]	0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Type , Any [EOL] import typing [EOL] import IoT_Recovery [EOL] import requests [EOL] import requests [EOL] import json [EOL] [EOL] [EOL] class URL : [EOL] [comment] [EOL] DB_URL = [string] [comment] [EOL] [EOL] [EOL] class Token : [EOL] [EOL] __instance = None [EOL] [EOL] @ staticmethod def get_instance ( ) : [EOL] [docstring] [EOL] if not Token . __instance : [EOL] Token ( ) [EOL] [EOL] return Token . __instance [EOL] [EOL] def __init__ ( self ) : [EOL] [docstring] [EOL] if Token . __instance : [EOL] raise Exception ( [string] ) [EOL] else : [EOL] req = requests . post ( url = URL . DB_URL + [string] , data = { [string] : [string] } ) [EOL] [EOL] token_id = json . loads ( req . text ) [ [string] ] [comment] [EOL] req_token = requests . get ( url = URL . DB_URL + [string] . format ( token_id ) ) [EOL] token = json . loads ( req_token . text ) [ [string] ] [EOL] [EOL] self . token = token [EOL] [EOL] Token . __instance = self [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] import requests [EOL] [docstring] [EOL] [EOL] from kafka import KafkaProducer , KafkaConsumer [EOL] from singletonClass import Token , URL [EOL] import uuid [EOL] import requests [EOL] import json [EOL] [EOL] [EOL] kafka_producer = KafkaProducer ( bootstrap_servers = [ [string] , [string] ] , value_serializer = lambda v : json . dumps ( v ) . encode ( [string] ) ) [EOL] [EOL] kafka_consumer = KafkaConsumer ( bootstrap_servers = [ [string] , [string] ] , group_id = [string] , auto_offset_reset = [string] , client_id = uuid . uuid4 ( ) . __str__ ( ) , value_deserializer = lambda m : json . loads ( m . decode ( [string] ) ) ) [EOL] [EOL] kafka_consumer . subscribe ( [ [string] ] ) [EOL] [EOL] headers = { [string] : [string] . format ( Token . get_instance ( ) . token ) } [EOL] [EOL] [EOL] def recovery ( app_list , usage_id , shadow_id , resource_accessing , operation , app_old_topic ) : [EOL] [EOL] [comment] [EOL] app_id = app_list [ [number] ] [EOL] app_list . pop ( [number] ) [comment] [EOL] [EOL] [comment] [EOL] url_app = URL . DB_URL + [string] . format ( app_id ) [EOL] resp_app = requests . get ( url = url_app , headers = headers ) [EOL] app_data = json . loads ( resp_app . text ) [ [string] ] [EOL] app_data = json . loads ( app_data ) [comment] [EOL] [EOL] [comment] [EOL] url_delete = URL . DB_URL + [string] . format ( usage_id ) [EOL] requests . delete ( url = url_delete , headers = headers ) [EOL] [EOL] [comment] [EOL] url = [string] [EOL] data = { [string] : app_data [ [string] ] , [string] : shadow_id , [string] : resource_accessing , [string] : operation } [EOL] resp = requests . post ( url = url , data = data , headers = headers ) [EOL] [EOL] kafka_producer . send ( [string] , [string] . format ( resp . text ) ) [EOL] [EOL] if resp . status_code == [number] : [EOL] kafka_producer . send ( [string] , { [string] : [string] } ) [EOL] [EOL] aux_response_json_object = json . loads ( resp . text ) [EOL] new_kafka_topic_for_app = aux_response_json_object [ [string] ] [EOL] new_usage_id = aux_response_json_object [ [string] ] [EOL] [EOL] [comment] [EOL] kafka_producer . send ( app_old_topic , { [string] : new_kafka_topic_for_app } ) [EOL] kafka_producer . send ( [string] , { [string] : [string] } ) [EOL] [EOL] [comment] [EOL] url_update = URL . DB_URL + [string] . format ( new_usage_id ) [EOL] r = requests . post ( url = url_update , data = { [string] : json . dumps ( app_list ) } , headers = headers ) [EOL] kafka_producer . send ( [string] , { [string] : [string] . format ( json . dumps ( app_list ) , r . status_code ) } ) [EOL] [EOL] else : [EOL] [comment] [EOL] kafka_producer . send ( app_old_topic , { [string] : [string] } ) [EOL] kafka_producer . send ( [string] , { [string] : [string] } ) [EOL] [EOL] [EOL] for message in kafka_consumer : [EOL] json_object_message = message . value [EOL] kafka_producer . send ( [string] , { [string] : [string] } ) [EOL] [EOL] [comment] [EOL] request_url = URL . DB_URL + [string] . format ( json_object_message [ [string] ] , json_object_message [ [string] ] ) [EOL] [EOL] response = requests . get ( url = request_url , headers = headers ) [EOL] [EOL] if response . status_code == [number] : [EOL] kafka_producer . send ( [string] , { [string] : [string] } ) [EOL] res_usage_list = json . loads ( response . text ) [ [string] ] [EOL] [EOL] if res_usage_list : [EOL] for res_usage in res_usage_list : [EOL] aux_res_usage = json . loads ( res_usage ) [comment] [EOL] [EOL] applications = aux_res_usage [ [string] ] [comment] [EOL] [EOL] recovery ( applications , aux_res_usage [ [string] ] , aux_res_usage [ [string] ] , aux_res_usage [ [string] ] , aux_res_usage [ [string] ] , aux_res_usage [ [string] ] ) [EOL] else : [EOL] kafka_producer . send ( [string] , { [string] : [string] } ) [EOL] else : [EOL] kafka_producer . send ( [string] , { [string] : [string] } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Any [EOL] import typing [EOL] from my_app import views [EOL] from django . urls import path [EOL] [EOL] urlpatterns = [ path ( [string] , views . interest ) , path ( [string] , views . action ) , ] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0
from typing import Any , Dict [EOL] import typing [EOL] import requests [EOL] from . UsefulData import Token , KfkAdminClient , KfkProducer , URL [EOL] from kafka . admin import NewTopic [EOL] from http import HTTPStatus [EOL] from django import http [EOL] [EOL] import requests [EOL] import json [EOL] [EOL] [EOL] def interest ( request ) : [EOL] [docstring] [EOL] [EOL] token = Token . get_instance ( ) [EOL] [EOL] if request . POST : [EOL] if [string] in request . POST and [string] in request . POST : [EOL] [comment] [EOL] code_to_return , data = request_similar_resource ( token , request . POST ) [EOL] [EOL] [comment] [EOL] x = { [string] : request . POST [ [string] ] , [string] : request . POST [ [string] ] , [string] : code_to_return . name } [EOL] [EOL] if [string] in request . POST : [EOL] x [ [string] ] = request . POST [ [string] ] [EOL] [EOL] store_or_update_app ( token , { [string] : json . dumps ( x ) } , request . POST [ [string] ] ) [EOL] [EOL] else : [EOL] code_to_return = HTTPStatus . BAD_REQUEST [EOL] [EOL] return http . JsonResponse ( data = { [string] : code_to_return . name } , status = code_to_return ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL] [EOL] [EOL] def action ( request ) : [EOL] [docstring] [EOL] [EOL] token = Token . get_instance ( ) [EOL] [EOL] if request . POST : [EOL] if [string] in request . POST and [string] in request . POST and [string] in request . POST : [EOL] producer = KfkProducer . get_instance ( ) [EOL] admin = KfkAdminClient . get_instance ( ) [EOL] [EOL] [comment] [EOL] if request . POST [ [string] ] == [string] : [EOL] code_to_return , data = logic_already_created ( token , request . POST ) [EOL] else : [EOL] data = { [string] : False } [EOL] [EOL] if not data [ [string] ] : [comment] [EOL] producer . send ( [string] , { [string] : [string] } ) [EOL] [EOL] code_to_return , data = request_similar_resource ( token , request . POST ) [EOL] message = { [string] : code_to_return . name } [EOL] [EOL] if data [ [string] ] : [EOL] producer . send ( [string] , { [string] : [string] } ) [EOL] new_topic_name = data [ [string] ] + request . POST [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] try : [EOL] admin . create_topics ( [ NewTopic ( new_topic_name , num_partitions = [number] , replication_factor = [number] ) ] ) [EOL] except : [EOL] pass [EOL] [EOL] store_or_update_app ( token , { } , request . POST [ [string] ] ) [EOL] [EOL] [comment] [EOL] _data = { [string] : request . POST [ [string] ] , [string] : data [ [string] ] , [string] : data [ [string] ] , [string] : data [ [string] ] , [string] : data [ [string] ] , [string] : request . POST [ [string] ] , [string] : request . POST [ [string] ] , [string] : new_topic_name } [EOL] [EOL] usage_id = store_usage_data ( token , _data ) [EOL] [EOL] [comment] [EOL] iot_connector_data = { [string] : request . POST [ [string] ] , [string] : request . POST [ [string] ] , [string] : new_topic_name , [string] : data [ [string] ] } [EOL] [EOL] [comment] [EOL] if [string] in request . POST and request . POST [ [string] ] == [string] : [EOL] iot_connector_data [ [string] ] = request . POST [ [string] ] [EOL] [EOL] producer . send ( data [ [string] ] , iot_connector_data ) [EOL] [EOL] message = { [string] : [string] , [string] : new_topic_name , [string] : usage_id } [EOL] else : [EOL] producer . send ( [string] , { [string] : [string] } ) [EOL] [EOL] else : [comment] [EOL] producer . send ( [string] , { [string] : [string] } ) [EOL] [EOL] store_or_update_app ( token , { } , request . POST [ [string] ] ) [comment] [EOL] message = { [string] : [string] , [string] : data [ [string] ] } [EOL] update_usage_data ( token , { [string] : json . dumps ( [ request . POST [ [string] ] ] ) } , data [ [string] ] ) [EOL] code_to_return = [number] [EOL] else : [EOL] code_to_return = HTTPStatus . BAD_REQUEST [EOL] message = { [string] : code_to_return . name } [EOL] [EOL] return http . JsonResponse ( data = message , status = code_to_return ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] def request_similar_resource ( token , data_ ) : [EOL] [docstring] [EOL] [EOL] headers = { [string] : [string] . format ( token . token ) } [EOL] [EOL] [comment] [EOL] url_check_res = URL . DB_URL + [string] [comment] [EOL] resource_code = data_ [ [string] ] . split ( [string] ) [ [number] ] [EOL] url_check_res += [string] . format ( resource_code ) [EOL] [EOL] if [string] in data_ : [EOL] url_check_res += [string] . format ( data_ [ [string] ] ) [EOL] [EOL] req = requests . get ( url = url_check_res , headers = headers ) [EOL] [EOL] code_to_return = HTTPStatus . NOT_FOUND [EOL] data_to_return = { [string] : False } [EOL] [EOL] if req . status_code == HTTPStatus . OK : [EOL] code_to_return = HTTPStatus . OK [EOL] data_to_return = json . loads ( req . text ) [EOL] [EOL] return code_to_return , data_to_return [EOL] [EOL] [EOL] def logic_already_created ( token , data_ ) : [EOL] [docstring] [EOL] [EOL] resource_code = data_ [ [string] ] . split ( [string] ) [ [number] ] [EOL] [EOL] headers = { [string] : [string] . format ( token . token ) } [EOL] url = URL . DB_URL + [string] . format ( resource_code , data_ [ [string] ] ) [EOL] [EOL] if [string] in data_ : [EOL] url += [string] . format ( data_ [ [string] ] ) [EOL] [EOL] req = requests . get ( url = url , headers = headers ) [EOL] [EOL] code_to_return = HTTPStatus . NOT_FOUND [EOL] data_to_return = { [string] : False } [EOL] [EOL] if req . status_code == HTTPStatus . OK : [EOL] code_to_return = HTTPStatus . OK [EOL] data_to_return [ [string] ] = True [EOL] [EOL] data_to_return . update ( json . loads ( req . text ) ) [comment] [EOL] [EOL] return code_to_return , data_to_return [EOL] [EOL] [EOL] def store_usage_data ( token , data_ ) : [EOL] [docstring] [EOL] headers = { [string] : [string] . format ( token . token ) } [EOL] [EOL] url = URL . DB_URL + [string] [EOL] req = requests . post ( url = url , data = data_ , headers = headers ) [EOL] [EOL] try : [EOL] return json . loads ( req . text ) [ [string] ] [EOL] except : [EOL] return None [EOL] [EOL] [EOL] def update_usage_data ( token , data_ , logic_id ) : [EOL] [docstring] [EOL] headers = { [string] : [string] . format ( token . token ) } [EOL] [EOL] url = URL . DB_URL + [string] . format ( logic_id ) [EOL] requests . post ( url = url , data = data_ , headers = headers ) [EOL] [EOL] [EOL] def store_or_update_app ( token , data_ , appname ) : [EOL] [docstring] [EOL] headers = { [string] : [string] . format ( token . token ) } [EOL] url_store_update = URL . DB_URL + [string] . format ( appname ) [EOL] requests . post ( url = url_store_update , data = data_ , headers = headers ) [EOL]	
from typing import Type , Any [EOL] import IoT_ShadowApplications [EOL] import typing [EOL] import requests [EOL] [docstring] [EOL] [EOL] from kafka import KafkaAdminClient , KafkaProducer [EOL] import requests [EOL] import json [EOL] [EOL] [EOL] class URL : [EOL] [comment] [EOL] DB_URL = [string] [comment] [EOL] [EOL] [EOL] class Token : [EOL] __instance = None [EOL] [EOL] @ staticmethod def get_instance ( ) : [EOL] [docstring] [EOL] if not Token . __instance : [EOL] Token ( ) [EOL] [EOL] return Token . __instance [EOL] [EOL] def __init__ ( self ) : [EOL] [docstring] [EOL] if Token . __instance : [EOL] raise Exception ( [string] ) [EOL] else : [EOL] req = requests . post ( url = URL . DB_URL + [string] , data = { [string] : [string] } ) [EOL] [EOL] token_id = json . loads ( req . text ) [ [string] ] [comment] [EOL] req_token = requests . get ( url = URL . DB_URL + [string] . format ( token_id ) ) [EOL] token = json . loads ( req_token . text ) [ [string] ] [EOL] [EOL] self . token = token [EOL] [EOL] Token . __instance = self [EOL] [EOL] [EOL] class KfkProducer : [EOL] __instance = None [EOL] [EOL] @ staticmethod def get_instance ( ) : [EOL] [docstring] [EOL] if not KfkProducer . __instance : [EOL] KfkProducer ( ) [EOL] [EOL] return KfkProducer . __instance [EOL] [EOL] def __init__ ( self ) : [EOL] [docstring] [EOL] if KfkProducer . __instance : [EOL] raise Exception ( [string] ) [EOL] else : [EOL] KfkProducer . __instance = KafkaProducer ( bootstrap_servers = [ [string] , [string] ] , client_id = [string] , value_serializer = lambda v : json . dumps ( v ) . encode ( [string] ) ) [EOL] [EOL] [EOL] class KfkAdminClient : [EOL] __instance = None [EOL] [EOL] @ staticmethod def get_instance ( ) : [EOL] [docstring] [EOL] if not KfkAdminClient . __instance : [EOL] KfkAdminClient ( ) [EOL] [EOL] return KfkAdminClient . __instance [EOL] [EOL] def __init__ ( self ) : [EOL] [docstring] [EOL] if KfkAdminClient . __instance : [EOL] raise Exception ( [string] ) [EOL] else : [EOL] KfkAdminClient . __instance = KafkaAdminClient ( bootstrap_servers = [ [string] , [string] ] , client_id = [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class MyAppConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] from my_register . register import views [EOL] [EOL] [EOL] urlpatterns = [ path ( [string] , views . register , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0
from typing import List , Any , Dict [EOL] import typing [EOL] from . import auxiliar_methods [EOL] from http import HTTPStatus [EOL] from django import http [EOL] [EOL] import docker [EOL] import json [EOL] [EOL] [EOL] def register ( request ) : [EOL] [docstring] [EOL] [EOL] if request . META . get ( [string] ) : [comment] [EOL] token = request . META . get ( [string] ) . split ( [string] ) [ [number] ] [comment] [EOL] if auxiliar_methods . check_token_validation ( token ) : [EOL] [EOL] [comment] [EOL] device_data_to_store = auxiliar_methods . extract_request_data ( request ) [EOL] [comment] [EOL] store_response = auxiliar_methods . register_store_request ( device_data_to_store , token ) [EOL] [EOL] if store_response [ [string] ] == [number] : [EOL] device_info = json . loads ( store_response [ [string] ] ) [EOL] [EOL] [comment] [EOL] docker_client = docker . from_env ( ) [EOL] docker_environment_variables = [ [string] . format ( device_info [ [string] ] ) , [string] . format ( token ) , [string] . format ( device_data_to_store [ [string] ] ) ] [EOL] [EOL] networks = [ [string] ] [EOL] [EOL] image , status_code , message = auxiliar_methods . get_docker_image ( token , device_info [ [string] ] ) [EOL] [EOL] if status_code == [number] : [EOL] try : [EOL] [comment] [EOL] [comment] [EOL] service = docker_client . services . create ( image = image , env = docker_environment_variables , networks = networks ) [EOL] except Exception as e : [EOL] service = None [EOL] message = [string] + str ( e ) [EOL] [EOL] else : [EOL] service = None [EOL] message = [string] [EOL] [EOL] [comment] [EOL] if not service : [EOL] auxiliar_methods . delete_real_device ( device_info [ [string] ] , token ) [EOL] status_code_to_send = HTTPStatus . INTERNAL_SERVER_ERROR [EOL] info_to_send = { [string] : [string] + message } [EOL] else : [EOL] status_code_to_send = [number] [EOL] info_to_send = { [string] : device_info [ [string] ] , [string] : service . id } [EOL] [EOL] else : [EOL] status_code_to_send = store_response [ [string] ] [comment] [EOL] info_to_send = { [string] : store_response [ [string] ] + [string] } [EOL] [EOL] return http . JsonResponse ( data = info_to_send , status = status_code_to_send ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . FORBIDDEN ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , Any , Dict [EOL] import typing [EOL] import requests [EOL] import requests [EOL] import json [EOL] [EOL] DB_HOSTNAME = [string] [EOL] DB_PORT = [string] [EOL] [EOL] [EOL] def extract_request_data ( request ) : [EOL] [docstring] [EOL] data = { [string] : request . POST [ [string] ] , [string] : request . POST [ [string] ] , [string] : request . POST [ [string] ] , [string] : request . POST [ [string] ] , [string] : request . POST [ [string] ] , [string] : request . POST [ [string] ] } [EOL] [EOL] return data [EOL] [EOL] [EOL] def register_store_request ( device_data_to_store , token ) : [EOL] [docstring] [EOL] url = [string] . format ( DB_HOSTNAME , DB_PORT ) [EOL] headers = { [string] : [string] . format ( token ) } [EOL] req = requests . post ( url = url , data = device_data_to_store , headers = headers ) [EOL] [EOL] if req . status_code == [number] : [EOL] response = { [string] : [number] } [EOL] response . update ( json . loads ( req . text ) ) [EOL] else : [EOL] response = { [string] : req . status_code , [string] : req . text } [EOL] [EOL] return response [EOL] [EOL] [EOL] def get_docker_image ( token , device_type ) : [EOL] [docstring] [EOL] [EOL] if device_type : [EOL] url = [string] . format ( DB_HOSTNAME , DB_PORT , device_type ) [EOL] headers = { [string] : [string] . format ( token ) } [EOL] [EOL] req = requests . get ( url = url , headers = headers ) [EOL] [EOL] if req . status_code == [number] : [EOL] image = json . loads ( req . text ) [ [string] ] [EOL] else : [EOL] image = [string] [EOL] [EOL] status_code = req . status_code [EOL] message = req . text [EOL] [EOL] else : [EOL] image = [string] [EOL] status_code = [number] [EOL] message = [string] [EOL] [EOL] return image , status_code , message [EOL] [EOL] [EOL] def delete_real_device ( device_id , token ) : [EOL] [docstring] [EOL] url = [string] . format ( DB_HOSTNAME , DB_PORT , device_id ) [EOL] headers = { [string] : [string] . format ( token ) } [EOL] requests . delete ( url = url , headers = headers ) [EOL] [EOL] [EOL] def check_token_validation ( token ) : [EOL] [docstring] [EOL] url = [string] . format ( DB_HOSTNAME , DB_PORT ) [EOL] headers = { [string] : [string] . format ( token ) } [EOL] response = requests . get ( url = url , headers = headers ) [EOL] [EOL] if response . status_code == [number] : [EOL] return [number] [EOL] else : [EOL] return [number] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class RegisterConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Any , Dict [EOL] import typing [EOL] import requests [EOL] from kafka import KafkaClient , KafkaProducer , KafkaConsumer [EOL] import time [EOL] import json [EOL] import requests [EOL] [EOL] [comment] [EOL] token = [string] [EOL] headers = { [string] : [string] . format ( token ) } [EOL] [EOL] url = [string] [EOL] [EOL] data = { [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] r = requests . post ( url = url , data = data , headers = headers ) [EOL] [EOL] if r . status_code == [number] : [EOL] kafka_consumer = KafkaConsumer ( bootstrap_servers = [ [string] , [string] ] , auto_offset_reset = [string] , value_deserializer = lambda m : json . loads ( m . decode ( [string] ) ) , ) [EOL] [EOL] kfk = json . loads ( r . text ) [ [string] ] [EOL] kafka_consumer . subscribe ( [ kfk ] ) [EOL] [EOL] print ( [string] . format ( kfk ) ) [EOL] for mes in kafka_consumer : [EOL] print ( mes . value ) [EOL] else : [EOL] print ( r . text ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0
from typing import Any [EOL] import typing [EOL] from kafka import KafkaClient , KafkaProducer , KafkaConsumer [EOL] import time [EOL] import json [EOL] import requests [EOL] [EOL] [comment] [EOL] [EOL] kafka_consumer = KafkaConsumer ( bootstrap_servers = [ [string] , [string] ] , auto_offset_reset = [string] , value_deserializer = lambda m : json . loads ( m . decode ( [string] ) ) , ) [EOL] [EOL] kafka_consumer . subscribe ( [ [string] ] ) [EOL] for msg in kafka_consumer : [EOL] print ( msg . value ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0
from typing import Optional , Any [EOL] import typing [EOL] import leshan_monitor [EOL] import aux_functions [EOL] import os [EOL] [EOL] [EOL] [comment] [EOL] token = os . environ . get ( [string] ) [EOL] real_device_id = os . environ . get ( [string] ) [EOL] shadow_device_id = os . environ . get ( [string] ) [EOL] device_data = aux_functions . get_real_device ( real_device_id , token ) [EOL] [EOL] if device_data : [EOL] NEST_API_URL = [string] . format ( device_data [ [string] ] , device_data [ [string] ] ) [EOL] leshan_monitor . get_data_stream ( token , NEST_API_URL , device_data , shadow_device_id ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 $builtins.str$ 0 $typing.Any$ 0 $typing.Optional[builtins.str]$ 0 0
from shared_buffer import SharedBuffer [EOL] import threading [EOL] import json [EOL] [EOL] [EOL] class KfkConsumer ( threading . Thread ) : [EOL] def __init__ ( self , consumer , producer , * args , ** kwargs ) : [EOL] super ( KfkConsumer , self ) . __init__ ( * args , ** kwargs ) [EOL] self . kafka_consumer = consumer [EOL] self . kafka_producer = producer [EOL] self . shared_buffer_object = SharedBuffer . get_instance ( ) [EOL] [EOL] def run ( self ) : [EOL] [docstring] [EOL] sh_semaphore = self . shared_buffer_object . shared_semaphore [EOL] sh_buffer = self . shared_buffer_object . buffer [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] for msg in self . kafka_consumer : [EOL] sh_semaphore . acquire ( ) [EOL] self . kafka_producer . send ( [string] , { [string] : [string] } ) [EOL] sh_buffer . append ( msg . value ) [comment] [EOL] sh_semaphore . release ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import IoT_Monitor [EOL] import threading [EOL] [EOL] [EOL] class SharedBuffer ( object ) : [EOL] [docstring] [EOL] __instance = None [EOL] [EOL] @ staticmethod def get_instance ( ) : [EOL] [docstring] [EOL] if not SharedBuffer . __instance : [EOL] SharedBuffer ( ) [EOL] [EOL] return SharedBuffer . __instance [EOL] [EOL] def __init__ ( self ) : [EOL] [docstring] [EOL] if SharedBuffer . __instance : [EOL] raise Exception ( [string] ) [EOL] else : [EOL] self . buffer = [ ] [comment] [EOL] self . shared_semaphore = threading . Semaphore ( ) [EOL] SharedBuffer . __instance = self [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] import requests [EOL] from kafka import KafkaProducer , KafkaConsumer , KafkaAdminClient [EOL] from kafka_consumer_thread import KfkConsumer [EOL] from shared_buffer import SharedBuffer [EOL] import aux_functions [EOL] import sseclient [comment] [EOL] import requests [EOL] import urllib3 [EOL] import json [EOL] [EOL] [EOL] kafka_observe_topics = { } [comment] [EOL] [EOL] [EOL] def get_data_stream ( token , api_endpoint , device_data , shadow_device_id ) : [EOL] [docstring] [EOL] [EOL] kafka_producer = KafkaProducer ( bootstrap_servers = [ [string] , [string] ] , client_id = device_data [ [string] ] , value_serializer = lambda v : json . dumps ( v ) . encode ( [string] ) ) [EOL] [EOL] kafka_consumer = KafkaConsumer ( bootstrap_servers = [ [string] , [string] ] , value_deserializer = lambda m : json . loads ( m . decode ( [string] ) ) ) [EOL] [EOL] kafka_admin_client = KafkaAdminClient ( bootstrap_servers = [ [string] , [string] ] , client_id = device_data [ [string] ] ) [EOL] [EOL] [comment] [EOL] kafka_consumer . subscribe ( [ device_data [ [string] ] ] ) [EOL] t = KfkConsumer ( consumer = kafka_consumer , producer = kafka_producer ) [EOL] t . start ( ) [EOL] [comment] [EOL] [EOL] headers = { [string] : [string] } [EOL] [EOL] shared_buffer_object = SharedBuffer . get_instance ( ) [EOL] sh_semaphore = shared_buffer_object . shared_semaphore [EOL] sh_buffer = shared_buffer_object . buffer [EOL] [EOL] http = urllib3 . PoolManager ( ) [EOL] [EOL] [comment] [EOL] response = http . request ( [string] , api_endpoint , headers = headers , preload_content = False , redirect = False ) [EOL] [EOL] [comment] [EOL] endpoints_list = requests . get ( url = [string] . format ( device_data [ [string] ] , device_data [ [string] ] ) ) [EOL] endpoints_list = json . loads ( endpoints_list . text ) [EOL] [EOL] aux_functions . store_endpoints_and_resources ( endpoints_list , device_data [ [string] ] , token ) [EOL] [EOL] if response . status == [number] : [EOL] redirect_url = response . headers . get ( [string] ) [EOL] response = http . request ( [string] , redirect_url , headers = headers , preload_content = False , redirect = False ) [EOL] if response . status != [number] : [EOL] print ( [string] , response . status ) [EOL] [EOL] client = sseclient . SSEClient ( response ) [EOL] [EOL] for event in client . events ( ) : [comment] [EOL] event_type = event . event [EOL] [EOL] [comment] [EOL] try : [EOL] read_and_execute_action_from_buffer ( sh_semaphore , sh_buffer , device_data , kafka_producer ) [EOL] [EOL] except IndexError : [EOL] [comment] [EOL] sh_semaphore . release ( ) [EOL] [EOL] [comment] [EOL] if event_type == [string] : [comment] [EOL] [EOL] data_to_store = aux_functions . purge_update_data ( event . data ) [EOL] data = { [string] : json . dumps ( data_to_store ) } [comment] [EOL] endpoint_id = aux_functions . get_endpoint_id ( data_to_store [ [string] ] , token ) [EOL] [EOL] aux_functions . update_endpoint ( endpoint_id , data , token ) [EOL] [EOL] elif event_type == [string] : [EOL] [docstring] [EOL] kafka_producer . send ( [string] , { [string] : [string] } ) [EOL] endpoint = json . loads ( event . data ) [EOL] aux_functions . store_endpoints_and_resources ( [ endpoint ] , device_data [ [string] ] , token ) [EOL] [EOL] elif event_type == [string] : [comment] [EOL] [EOL] [docstring] [EOL] kafka_producer . send ( [string] , { [string] : [string] } ) [EOL] [EOL] endpoint = json . loads ( event . data ) [EOL] [EOL] [comment] [EOL] aux_functions . remove_old_topics ( kafka_observe_topics , endpoint [ [string] ] , kafka_admin_client ) [EOL] kafka_producer . send ( [string] , { [string] : [string] . format ( kafka_observe_topics ) } ) [EOL] [EOL] endpoint_id = aux_functions . get_endpoint_id ( endpoint [ [string] ] , token ) [EOL] aux_functions . update_endpoint ( endpoint_id , { [string] : [number] } , token ) [EOL] [EOL] failure_data_recovery = { [string] : shadow_device_id , [string] : device_data [ [string] ] , [string] : endpoint_id } [EOL] [comment] [EOL] kafka_producer . send ( [string] , failure_data_recovery ) [EOL] [EOL] elif event_type == [string] : [EOL] [comment] [EOL] data_observed = json . loads ( event . data ) [EOL] [EOL] try : [EOL] topic_key = data_observed [ [string] ] [EOL] kafka_topic = kafka_observe_topics . get ( topic_key ) [EOL] kafka_producer . send ( kafka_topic , data_observed [ [string] ] ) [EOL] except : [EOL] [comment] [EOL] delete_observation ( device_data [ [string] ] , device_data [ [string] ] , data_observed [ [string] ] , data_observed [ [string] ] , kafka_producer ) [EOL] [EOL] [EOL] def read ( device_ip , device_port , endpoint_name , accessing , kafka_topic , kafka_producer ) : [EOL] [docstring] [EOL] [EOL] url = [string] . format ( device_ip , device_port , endpoint_name , accessing ) [EOL] request = requests . get ( url = url ) [EOL] kafka_producer . send ( [string] , { [string] : [string] } ) [EOL] [EOL] if request . status_code == [number] : [EOL] data = json . loads ( request . text ) [EOL] [EOL] if data [ [string] ] : [EOL] [comment] [EOL] data_to_send = { [string] : data [ [string] ] [ [string] ] } [EOL] else : [EOL] [comment] [EOL] data_to_send = { [string] : False } [EOL] else : [EOL] [comment] [EOL] data_to_send = { [string] : False } [EOL] [EOL] kafka_producer . send ( kafka_topic , data_to_send ) [EOL] [EOL] [EOL] def write ( device_ip , device_port , endpoint_name , accessing , data , kafka_producer ) : [EOL] [docstring] [EOL] kafka_producer . send ( [string] , { [string] : [string] } ) [EOL] [EOL] url = [string] . format ( device_ip , device_port , endpoint_name , accessing ) [EOL] [EOL] [comment] [EOL] response = requests . put ( url = url , json = data ) [EOL] [EOL] success = True [EOL] if response . status_code == [number] : [EOL] success = success and json . load ( response . text ) [ [string] ] [EOL] [EOL] return success [EOL] [EOL] [EOL] def execute ( device_ip , device_port , endpoint_name , accessing , kafka_producer ) : [EOL] [docstring] [EOL] kafka_producer . send ( [string] , { [string] : [string] } ) [EOL] [EOL] url = [string] . format ( device_ip , device_port , endpoint_name , accessing ) [EOL] response = requests . post ( url = url ) [EOL] success = True [EOL] [EOL] if response . status_code == [number] : [EOL] success = success and json . load ( response . text ) [ [string] ] [EOL] [EOL] return success [EOL] [EOL] [EOL] def observe ( device_ip , device_port , endpoint_name , accessing , kafka_topic , kafka_producer ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] kafka_observe_topics [ accessing ] = kafka_topic [EOL] [EOL] url = [string] . format ( device_ip , device_port , endpoint_name , accessing ) [EOL] r = requests . post ( url = url ) [EOL] kafka_producer . send ( [string] , { [string] : [string] } ) [EOL] [EOL] [EOL] def delete_observation ( device_ip , device_port , endpoint_name , accessing , kafka_producer ) : [EOL] [docstring] [EOL] [EOL] url = [string] . format ( device_ip , device_port , endpoint_name , accessing ) [EOL] r = requests . delete ( url = url ) [EOL] kafka_producer . send ( [string] , { [string] : [string] . format ( r . status_code ) } ) [EOL] [comment] [EOL] kafka_observe_topics . pop ( accessing , None ) [EOL] [EOL] [EOL] def delete ( device_ip , device_port , endpoint_name , accessing , kafka_producer ) : [EOL] [docstring] [EOL] url = [string] . format ( device_ip , device_port , endpoint_name , accessing ) [EOL] r = requests . delete ( url = url ) [EOL] [EOL] kafka_producer . send ( [string] , { [string] : [string] . format ( r . status_code ) } ) [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def read_and_execute_action_from_buffer ( sh_semaphore , sh_buffer , device_data , kafka_producer ) : [EOL] [docstring] [EOL] acquired = sh_semaphore . acquire ( blocking = False ) [comment] [EOL] [EOL] if acquired : [EOL] message = sh_buffer . pop ( ) [EOL] [docstring] [EOL] [EOL] sh_semaphore . release ( ) [EOL] [EOL] if message [ [string] ] == [string] : [EOL] kafka_producer . send ( [string] , { [string] : [string] } ) [EOL] accessing = message [ [string] ] [EOL] observe ( device_data [ [string] ] , device_data [ [string] ] , message [ [string] ] , accessing , message [ [string] ] , kafka_producer ) [EOL] [EOL] elif message [ [string] ] == [string] : [EOL] kafka_producer . send ( [string] , { [string] : [string] } ) [EOL] read ( device_data [ [string] ] , device_data [ [string] ] , message [ [string] ] , message [ [string] ] , message [ [string] ] , kafka_producer ) [EOL] [EOL] elif message [ [string] ] == [string] : [EOL] kafka_producer . send ( [string] , { [string] : [string] } ) [EOL] write ( device_data [ [string] ] , device_data [ [string] ] , message [ [string] ] , message [ [string] ] , message [ [string] ] , kafka_producer ) [EOL] [EOL] elif message [ [string] ] == [string] : [EOL] kafka_producer . send ( [string] , { [string] : [string] } ) [EOL] execute ( device_data [ [string] ] , device_data [ [string] ] , message [ [string] ] , message [ [string] ] , kafka_producer ) [EOL] [EOL] elif message [ [string] ] == [string] : [EOL] kafka_producer . send ( [string] , { [string] : [string] } ) [EOL] delete ( device_data [ [string] ] , device_data [ [string] ] , message [ [string] ] , message [ [string] ] , kafka_producer ) [EOL] [EOL] elif message [ [string] ] == [string] : [EOL] kafka_producer . send ( [string] , { [string] : [string] } ) [EOL] delete_observation ( device_data [ [string] ] , device_data [ [string] ] , message [ [string] ] , message [ [string] ] , kafka_producer ) [EOL] else : [EOL] raise IndexError ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Dict [EOL] import typing [EOL] import requests [EOL] import requests [EOL] import json [EOL] [EOL] ACCEPTED_TAGS = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] db_url = [string] [EOL] [EOL] [EOL] def get_real_device ( dev_id , token ) : [EOL] [docstring] [EOL] [EOL] url = db_url + [string] . format ( dev_id ) [EOL] headers = { [string] : [string] . format ( token ) } [EOL] r = requests . get ( url = url , headers = headers ) [EOL] [EOL] if r . status_code == [number] : [EOL] x = json . loads ( r . text ) [comment] [EOL] return json . loads ( x [ [string] ] ) [comment] [EOL] else : [EOL] return { } [EOL] [EOL] [EOL] def purge_update_data ( json_string ) : [EOL] [docstring] [EOL] [EOL] x = json . loads ( json_string ) [EOL] ret = { } [EOL] [EOL] for k , v in x . items ( ) : [EOL] if k in ACCEPTED_TAGS : [EOL] ret [ k ] = v [EOL] [EOL] return ret [EOL] [EOL] [EOL] def get_leshan_resources_data ( resources_list ) : [EOL] [docstring] [EOL] [EOL] return_data = [ ] [EOL] [EOL] for y in resources_list : [EOL] resource = { } [EOL] resource [ [string] ] = y [ [string] ] [EOL] [EOL] typee = y [ [string] ] . split ( [string] ) [ [number] ] [comment] [EOL] if typee != [string] : [EOL] resource [ [string] ] = typee [EOL] return_data . append ( resource ) [EOL] [EOL] return return_data [EOL] [EOL] [EOL] def get_ep_register_data ( endpoint ) : [EOL] [docstring] [EOL] [EOL] ep_store_data = { [string] : endpoint [ [string] ] , [string] : endpoint [ [string] ] , [string] : endpoint [ [string] ] } [EOL] [EOL] return ep_store_data [EOL] [EOL] [EOL] def ep_store_request ( data , token ) : [EOL] [docstring] [EOL] [EOL] headers = { [string] : [string] . format ( token ) } [EOL] store_url = db_url + [string] [EOL] response = requests . post ( url = store_url , data = data , headers = headers ) [EOL] ep_id = json . loads ( response . text ) [ [string] ] [EOL] [EOL] return ep_id [EOL] [EOL] [EOL] def ep_get_request ( leshan_id , token ) : [EOL] [docstring] [EOL] [EOL] headers = { [string] : [string] . format ( token ) } [EOL] store_url = db_url + [string] . format ( leshan_id ) [EOL] response = requests . get ( url = store_url , headers = headers ) [EOL] ep_id = json . loads ( response . text ) [ [string] ] [EOL] [EOL] return ep_id [EOL] [EOL] [EOL] def res_store_request ( data , token ) : [EOL] [docstring] [EOL] [EOL] headers = { [string] : [string] . format ( token ) } [EOL] store_url = db_url + [string] [EOL] response = requests . post ( url = store_url , data = data , headers = headers ) [EOL] res_id = json . loads ( response . text ) [ [string] ] [EOL] [EOL] return res_id [EOL] [EOL] [EOL] def store_endpoints_and_resources ( endpoint_list , device_id , token ) : [EOL] [docstring] [EOL] [EOL] headers = { [string] : [string] . format ( token ) } [EOL] url_update_device = db_url + [string] . format ( device_id ) [EOL] [EOL] device_endpoint_ids = [ ] [comment] [EOL] [EOL] for endpoint in endpoint_list : [EOL] register_data = get_ep_register_data ( endpoint ) [EOL] ep_id = ep_store_request ( register_data , token ) [comment] [EOL] device_endpoint_ids . append ( ep_id ) [EOL] [EOL] [comment] [EOL] resources_list = get_leshan_resources_data ( endpoint [ [string] ] ) [EOL] [EOL] endpoint_resources_ids = [ ] [comment] [EOL] [comment] [EOL] for resource in resources_list : [EOL] res_id = res_store_request ( resource , token ) [comment] [EOL] endpoint_resources_ids . append ( res_id ) [EOL] [EOL] [comment] [EOL] update_endpoint ( ep_id , { [string] : json . dumps ( endpoint_resources_ids ) } , token ) [EOL] [EOL] [comment] [EOL] requests . post ( url = url_update_device , data = { [string] : json . dumps ( device_endpoint_ids ) } , headers = headers ) [EOL] [EOL] return device_endpoint_ids [EOL] [EOL] [EOL] def update_endpoint ( endpoint_id , data , token ) : [EOL] [docstring] [EOL] [EOL] headers = { [string] : [string] . format ( token ) } [EOL] update_endpoint_url = db_url + [string] . format ( endpoint_id ) [EOL] requests . post ( url = update_endpoint_url , data = data , headers = headers ) [EOL] [EOL] [EOL] def get_endpoint_id ( leshan_id , token ) : [EOL] [docstring] [EOL] [EOL] headers = { [string] : [string] . format ( token ) } [EOL] request_url = db_url + [string] . format ( leshan_id ) [EOL] r = requests . get ( url = request_url , headers = headers ) [EOL] if r . status_code == [number] : [EOL] return json . loads ( r . text ) [ [string] ] [EOL] [EOL] return None [EOL] [EOL] [EOL] def remove_old_topics ( kafka_observe_topics , accessing_list , kafka_admin_client ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] if kafka_observe_topics : [EOL] [comment] [EOL] url_list = [ acc [ [string] ] for acc in accessing_list if acc [ [string] ] != [string] ] [EOL] [EOL] [comment] [EOL] keys_to_remove = [ key for key in kafka_observe_topics for url in url_list if key . startswith ( url ) ] [EOL] [EOL] kafka_topics_to_delete = [ ] [EOL] [EOL] for key in keys_to_remove : [EOL] kafka_topic = kafka_observe_topics . pop ( key , None ) [EOL] [EOL] if kafka_topic : [comment] [EOL] kafka_topics_to_delete . append ( kafka_topic ) [EOL] [EOL] kafka_admin_client . delete_topics ( kafka_topics_to_delete ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class RestfulApiConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] from my_db . restful_API . auth import core [EOL] from my_db . db_mongo import mongo_setup [EOL] from my_db . db_mongo . model import UserData [EOL] from my_db . db_mongo . model import Shadow [EOL] from http import HTTPStatus [EOL] from django import http [EOL] [EOL] import json [EOL] [EOL] mongo_setup . global_init ( ) [comment] [EOL] [EOL] [EOL] def update_user ( request , usr_id ) : [EOL] [docstring] [EOL] [EOL] if request . META . get ( [string] ) : [EOL] token = request . META . get ( [string] ) . split ( [string] ) [ [number] ] [EOL] if core . validate ( token ) : [EOL] data = request . POST [EOL] usr_l = UserData . objects ( _id = usr_id ) [comment] [EOL] [EOL] if usr_l . count ( ) : [comment] [EOL] usr = usr_l . first ( ) [EOL] if [string] in data : [EOL] usr . username = data [ [string] ] [EOL] [EOL] if [string] in data : [EOL] associated_shadow = Shadow . objects . with_id ( data [ [string] ] ) [comment] [EOL] associated_shadow . save ( ) [comment] [EOL] usr . shadow . append ( associated_shadow . to_dbref ( ) ) [EOL] [EOL] usr . save ( ) [EOL] code_to_return = HTTPStatus . OK [EOL] data_to_return = { [string] : [string] } [EOL] [EOL] return http . HttpResponse ( content = json . dumps ( data_to_return ) , status = code_to_return ) [EOL] else : [comment] [EOL] data_to_return = { [string] : [string] } [EOL] code_to_return = HTTPStatus . NOT_MODIFIED [EOL] return http . HttpResponse ( content = json . dumps ( data_to_return ) , status = code_to_return ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . UNAUTHORIZED ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] from my_db . db_mongo import mongo_setup [EOL] from my_db . db_mongo . model import Token [EOL] from my_db . db_mongo . model import UserData [EOL] from my_db . restful_API . auth import core [EOL] from http import HTTPStatus [EOL] from django import http [EOL] [EOL] import json [EOL] import uuid [EOL] [EOL] mongo_setup . global_init ( ) [comment] [EOL] [EOL] [EOL] def login ( request ) : [EOL] [docstring] [EOL] if request . POST : [EOL] email = request . POST [ [string] ] [EOL] password = request . POST [ [string] ] [EOL] password_hash = core . make_hash ( password ) [comment] [EOL] [EOL] user_db = UserData . objects ( username = email , password = password_hash ) [EOL] [EOL] if user_db . count ( ) : [comment] [EOL] usr = user_db . first ( ) [EOL] [comment] [EOL] token = core . generate ( { [string] : [string] , [string] : request . POST [ [string] ] } ) [EOL] [EOL] tk_ref = Token . objects . with_id ( token ) [EOL] tk_ref . save ( ) [EOL] [EOL] usr . token = tk_ref . to_dbref ( ) [EOL] usr . save ( ) [comment] [EOL] [EOL] data = { [string] : usr . _id , [string] : tk_ref . token , [string] : request . POST [ [string] ] } [EOL] return http . JsonResponse ( data = data , status = HTTPStatus . OK ) [EOL] else : [EOL] return http . HttpResponse ( content = json . dumps ( { [string] : [string] } ) , status = HTTPStatus . NOT_FOUND ) [EOL] [EOL] else : [EOL] return http . HttpResponse ( content = json . dumps ( { [string] : [string] } ) , status = HTTPStatus . BAD_REQUEST ) [EOL] [EOL] [EOL] def register ( request ) : [EOL] [docstring] [EOL] [EOL] if request . POST : [EOL] email = request . POST [ [string] ] [EOL] password = request . POST [ [string] ] [EOL] password_hash = core . make_hash ( password ) [comment] [EOL] [EOL] user_db = UserData . objects ( username = email ) [EOL] [EOL] if not user_db . count ( ) : [EOL] token = core . generate ( { [string] : [string] , [string] : email } ) [EOL] [EOL] tk_ref = Token . objects . with_id ( token ) [EOL] tk_ref . save ( ) [EOL] [EOL] user_db = UserData ( ) [EOL] user_db . _id = uuid . uuid4 ( ) . __str__ ( ) [EOL] user_db . username = email [EOL] user_db . password = password_hash [EOL] user_db . token = tk_ref . to_dbref ( ) [EOL] user_db . save ( ) [EOL] data = { [string] : user_db . _id , [string] : tk_ref . token , [string] : user_db . username } [EOL] return http . JsonResponse ( data = data , status = HTTPStatus . OK ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . NOT_MODIFIED ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Dict [EOL] import typing [EOL] from my_db . db_mongo . model import Application , ResourceUse [EOL] from my_db . restful_API . auth import core [EOL] from my_db . db_mongo import mongo_setup [EOL] from http import HTTPStatus [EOL] from django import http [EOL] import uuid [EOL] import json [EOL] [EOL] mongo_setup . global_init ( ) [comment] [EOL] [EOL] [EOL] def get_app ( request , app_id ) : [EOL] [docstring] [EOL] [EOL] if request . META . get ( [string] ) : [comment] [EOL] token = request . META . get ( [string] ) . split ( [string] ) [ [number] ] [comment] [EOL] [comment] [EOL] if core . validate ( token ) : [EOL] app = Application . objects . with_id ( app_id ) [EOL] [EOL] if app : [EOL] data = { [string] : app . to_json ( ) } [EOL] sts_code = HTTPStatus . OK [EOL] else : [EOL] sts_code = HTTPStatus . NOT_FOUND [EOL] data = { [string] : sts_code . name } [EOL] return http . JsonResponse ( data = data , status = sts_code ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . UNAUTHORIZED ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL] [EOL] [EOL] def get_all ( request ) : [EOL] [docstring] [EOL] [EOL] if request . META . get ( [string] ) : [comment] [EOL] token = request . META . get ( [string] ) . split ( [string] ) [ [number] ] [comment] [EOL] [EOL] [comment] [EOL] if core . validate ( token ) : [EOL] apps = Application . objects ( ) [EOL] apps_list = [ ] [EOL] [EOL] for app in apps : [EOL] apps_list . append ( app . to_json ( ) ) [EOL] [EOL] return http . JsonResponse ( data = { [string] : apps_list } , status = HTTPStatus . OK ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . UNAUTHORIZED ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL] [EOL] [EOL] def store_or_update_app ( request , name ) : [EOL] [docstring] [EOL] [EOL] if request . META . get ( [string] ) : [EOL] token = request . META . get ( [string] ) . split ( [string] ) [ [number] ] [EOL] if core . validate ( token ) : [EOL] data = request . POST [EOL] app = Application . objects ( name = name ) [comment] [EOL] [EOL] if app . count ( ) : [comment] [EOL] app = app . first ( ) [EOL] if [string] in data : [EOL] app . interests . append ( data [ [string] ] ) [EOL] [EOL] try : [EOL] app . save ( ) [EOL] code_to_return = HTTPStatus . OK [EOL] data_to_return = { [string] : [string] } [EOL] except : [EOL] return http . HttpResponseServerError ( content = json . dumps ( { [string] : [string] } ) , status = HTTPStatus . INTERNAL_SERVER_ERROR ) [EOL] [EOL] else : [comment] [EOL] new_app = Application ( ) [EOL] new_app . _id = uuid . uuid4 ( ) . __str__ ( ) [EOL] new_app . name = name [EOL] if [string] in data : [EOL] new_app . interests . append ( data [ [string] ] ) [EOL] [EOL] new_app . save ( ) [EOL] [EOL] data_to_return = { [string] : [string] } [EOL] code_to_return = HTTPStatus . OK [EOL] [EOL] return http . HttpResponse ( content = json . dumps ( data_to_return ) , status = code_to_return ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . UNAUTHORIZED ) [EOL] [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL] [EOL] [EOL] def delete_app ( request , app_id ) : [EOL] [docstring] [EOL] [EOL] if request . META . get ( [string] ) : [EOL] token = request . META . get ( [string] ) . split ( [string] ) [ [number] ] [EOL] if core . validate ( token ) : [EOL] app = Application . objects . with_id ( app_id ) [EOL] [EOL] if app : [EOL] usages = ResourceUse . objects ( applications = app . _id ) [EOL] [EOL] for usage in usages : [EOL] usage . update ( pull__applications = app ) [EOL] [EOL] aux = ResourceUse . objects . with_id ( usage . _id ) [EOL] [comment] [EOL] if not aux . applications : [EOL] aux . delete ( ) [EOL] [EOL] try : [EOL] app . delete ( ) [EOL] code_to_return = HTTPStatus . OK [EOL] data_to_return = { [string] : [string] } [EOL] except : [EOL] return http . HttpResponseServerError ( content = json . dumps ( { [string] : [string] } ) , status = HTTPStatus . INTERNAL_SERVER_ERROR ) [EOL] else : [comment] [EOL] data_to_return = { [string] : [string] } [EOL] code_to_return = HTTPStatus . NOT_MODIFIED [EOL] [EOL] return http . HttpResponse ( content = json . dumps ( data_to_return ) , status = code_to_return ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . UNAUTHORIZED ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from my_db . db_mongo . model import ResourceUse , Shadow , IotConnector , Endpoint , Resource , Application [EOL] from my_db . restful_API . auth import core [EOL] from my_db . db_mongo import mongo_setup [EOL] from http import HTTPStatus [EOL] from django import http [EOL] import uuid [EOL] import json [EOL] [EOL] mongo_setup . global_init ( ) [comment] [EOL] [EOL] [EOL] def get_resource_use_by_epid_shdwid ( request , ep_id , shdw_id ) : [EOL] [docstring] [EOL] [EOL] if request . META . get ( [string] ) : [comment] [EOL] token = request . META . get ( [string] ) . split ( [string] ) [ [number] ] [comment] [EOL] [EOL] [comment] [EOL] if core . validate ( token ) : [EOL] res_usages_fetched = ResourceUse . objects ( endpoint = ep_id , shadow = shdw_id ) [EOL] res_usages_list = [ ] [EOL] [EOL] for res_usage in res_usages_fetched : [EOL] jsn = res_usage . to_json ( ) [EOL] jsn = json . loads ( jsn ) [EOL] jsn [ [string] ] = res_usage . resource . type [comment] [EOL] [EOL] res_usages_list . append ( json . dumps ( jsn ) ) [EOL] [EOL] return http . JsonResponse ( data = { [string] : res_usages_list } , status = HTTPStatus . OK ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . UNAUTHORIZED ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL] [EOL] [EOL] def get_similar_logic ( request , res_code , operation , shdw_id = None ) : [EOL] [docstring] [EOL] if request . META . get ( [string] ) : [comment] [EOL] token = request . META . get ( [string] ) . split ( [string] ) [ [number] ] [comment] [EOL] [EOL] [comment] [EOL] if core . validate ( token ) : [EOL] [EOL] if shdw_id : [comment] [EOL] logic_list = ResourceUse . objects ( shadow = shdw_id , operation = operation ) [EOL] else : [EOL] logic_list = ResourceUse . objects ( operation = operation ) [EOL] [EOL] for logic in logic_list : [EOL] if logic . resource . type == int ( res_code ) : [EOL] kafka_topic = logic . kafka_topic [EOL] return http . JsonResponse ( data = { [string] : kafka_topic , [string] : logic . _id } , status = HTTPStatus . OK ) [EOL] [EOL] [comment] [EOL] return http . JsonResponse ( data = { [string] : HTTPStatus . NOT_FOUND . name } , status = HTTPStatus . NOT_FOUND ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . UNAUTHORIZED ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL] [EOL] [EOL] def create ( request ) : [EOL] [docstring] [EOL] [EOL] if request . META . get ( [string] ) : [comment] [EOL] token = request . META . get ( [string] ) . split ( [string] ) [ [number] ] [comment] [EOL] [EOL] [comment] [EOL] if core . validate ( token ) : [EOL] data = request . POST [EOL] [EOL] connector = IotConnector . objects . with_id ( data [ [string] ] ) ; connector . save ( ) [EOL] app = Application . objects ( name = data [ [string] ] ) . first ( ) ; app . save ( ) [EOL] res = Resource . objects . with_id ( data [ [string] ] ) ; res . save ( ) [EOL] shdw = Shadow . objects . with_id ( data [ [string] ] ) ; shdw . save ( ) [EOL] ep = Endpoint . objects . with_id ( data [ [string] ] ) ; ep . save ( ) [EOL] [EOL] new_usage = ResourceUse ( ) [EOL] new_usage . _id = uuid . uuid4 ( ) . __str__ ( ) [EOL] new_usage . applications . append ( app . to_dbref ( ) ) [EOL] new_usage . shadow = shdw . to_dbref ( ) [EOL] new_usage . iot_connector = connector . to_dbref ( ) [EOL] new_usage . endpoint = ep . to_dbref ( ) [EOL] new_usage . resource = res . to_dbref ( ) [EOL] new_usage . accessing = data [ [string] ] [EOL] new_usage . kafka_topic = data [ [string] ] [EOL] new_usage . operation = data [ [string] ] [EOL] new_usage . save ( ) [EOL] [EOL] return http . JsonResponse ( data = { [string] : new_usage . _id } , status = HTTPStatus . OK ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . UNAUTHORIZED ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL] [EOL] [EOL] def update ( request , usage_id ) : [EOL] [docstring] [EOL] [EOL] if request . META . get ( [string] ) : [comment] [EOL] token = request . META . get ( [string] ) . split ( [string] ) [ [number] ] [comment] [EOL] [EOL] [comment] [EOL] if core . validate ( token ) : [EOL] [EOL] data = request . POST [EOL] usage = ResourceUse . objects . with_id ( usage_id ) [comment] [EOL] [EOL] if usage : [EOL] if [string] in data : [EOL] for app in json . loads ( data [ [string] ] ) : [EOL] [EOL] db_app = Application . objects ( name = app ) [EOL] if db_app . count ( ) : [EOL] db_app = db_app . first ( ) [EOL] db_app . save ( ) [EOL] usage . applications . append ( db_app . to_dbref ( ) ) [EOL] [EOL] if [string] in data : [EOL] new_shadow = data [ [string] ] [EOL] [EOL] if new_shadow != usage . shadow : [comment] [EOL] shadow = Shadow . objects . with_id ( new_shadow ) [EOL] shadow . save ( ) [EOL] usage . shadow = shadow . to_dbref ( ) [EOL] [EOL] if [string] in data : [EOL] new_connector = data [ [string] ] [EOL] [EOL] if new_connector != usage . iot_connector : [comment] [EOL] connector = IotConnector . objects . with_id ( new_connector ) [EOL] connector . save ( ) [EOL] usage . iot_connector = connector . to_dbref ( ) [EOL] [EOL] if [string] in data : [EOL] new_endpoint = data [ [string] ] [EOL] [EOL] if new_endpoint != usage . endpoint : [comment] [EOL] endpoint = Endpoint . objects . with_id ( new_endpoint ) [EOL] endpoint . save ( ) [EOL] usage . endpoint = endpoint . to_dbref ( ) [EOL] [EOL] if [string] in data : [comment] [EOL] new_resource = Resource . objects . with_id ( data [ [string] ] ) [EOL] new_resource . save ( ) [EOL] usage . resource = new_resource . to_dbref ( ) [EOL] [EOL] if [string] in data : [EOL] if usage . accessing != data [ [string] ] : [EOL] usage . accessing = data [ [string] ] [EOL] [EOL] if [string] in data : [comment] [EOL] usage . kafka_topic = data [ [string] ] [EOL] [EOL] usage . save ( ) [EOL] message = [string] [EOL] else : [EOL] message = [string] [EOL] [EOL] return http . JsonResponse ( data = { [string] : message } , status = HTTPStatus . OK ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . UNAUTHORIZED ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL] [EOL] [EOL] def delete ( request , usage_id ) : [EOL] [docstring] [EOL] [EOL] if request . META . get ( [string] ) : [comment] [EOL] token = request . META . get ( [string] ) . split ( [string] ) [ [number] ] [comment] [EOL] [EOL] [comment] [EOL] if core . validate ( token ) : [EOL] usage = ResourceUse . objects . with_id ( usage_id ) [EOL] if usage : [EOL] usage . delete ( ) [EOL] message = [string] [EOL] status = HTTPStatus . OK [EOL] else : [EOL] message = HTTPStatus . NOT_FOUND . name [EOL] status = HTTPStatus . NOT_FOUND [EOL] [EOL] return http . JsonResponse ( data = { [string] : message } , status = status ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . UNAUTHORIZED ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL]	
	0
from typing import List , Any , Dict [EOL] import typing [EOL] from my_db . db_mongo . model import Endpoint , Resource , IotConnector , Shadow , ResourceUse [EOL] from my_db . db_mongo import mongo_setup [EOL] from my_db . restful_API . auth import core [EOL] from http import HTTPStatus [EOL] from django import http [EOL] [EOL] import uuid [EOL] mongo_setup . global_init ( ) [comment] [EOL] [EOL] [EOL] def get_resource ( request , res_id ) : [EOL] [docstring] [EOL] if request . META . get ( [string] ) : [EOL] token = request . META . get ( [string] ) . split ( [string] ) [ [number] ] [EOL] [comment] [EOL] if core . validate ( token ) : [EOL] resource = Resource . objects . with_id ( res_id ) [EOL] if resource : [EOL] return http . JsonResponse ( data = { [string] : resource . to_json ( ) } , status = [number] ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . NOT_FOUND ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . UNAUTHORIZED ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL] [EOL] [EOL] def get_similar_resource ( request , res_code , shdw_id = None ) : [EOL] [docstring] [EOL] if request . META . get ( [string] ) : [EOL] token = request . META . get ( [string] ) . split ( [string] ) [ [number] ] [EOL] [comment] [EOL] if core . validate ( token ) : [EOL] [EOL] [comment] [EOL] data_to_return = { [string] : False } [EOL] code_to_return = HTTPStatus . NOT_FOUND [EOL] [EOL] if shdw_id : [comment] [EOL] shadow = Shadow . objects . with_id ( shdw_id ) [EOL] if shadow : [EOL] data_result , code_to_return = search_res_in_shadow ( shadow , int ( res_code ) ) [EOL] [EOL] data_to_return . update ( data_result ) [EOL] [EOL] else : [comment] [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL] [EOL] else : [comment] [EOL] shadows = Shadow . objects ( ) [EOL] for shadow in shadows : [EOL] data_result , code_to_return = search_res_in_shadow ( shadow , int ( res_code ) ) [EOL] [EOL] if data_result [ [string] ] : [comment] [EOL] data_to_return . update ( data_result ) [EOL] break [EOL] [EOL] return http . JsonResponse ( data = data_to_return , status = code_to_return ) [EOL] [EOL] [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . UNAUTHORIZED ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL] [EOL] [EOL] def store_resource ( request ) : [EOL] [docstring] [EOL] [EOL] if request . META . get ( [string] ) : [EOL] token = request . META . get ( [string] ) . split ( [string] ) [ [number] ] [EOL] [comment] [EOL] if core . validate ( token ) : [EOL] [EOL] new_resource = Resource ( ) [EOL] new_resource . _id = uuid . uuid4 ( ) . __str__ ( ) [EOL] new_resource . type = request . POST [ [string] ] [EOL] new_resource . accessing = request . POST [ [string] ] [EOL] [EOL] try : [EOL] new_resource . save ( ) [EOL] status_to_return = HTTPStatus . OK [EOL] data = { [string] : new_resource . _id } [EOL] except : [comment] [EOL] return http . JsonResponse ( { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL] [EOL] return http . JsonResponse ( data = data , status = status_to_return ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . UNAUTHORIZED ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL] [EOL] [EOL] def update_resource ( request , endpoint_id ) : [EOL] [docstring] [EOL] [EOL] if request . META . get ( [string] ) : [EOL] token = request . META . get ( [string] ) . split ( [string] ) [ [number] ] [EOL] [comment] [EOL] if core . validate ( token ) : [EOL] data = request . POST [EOL] associated_endpoint = Endpoint . objects . with_id ( endpoint_id ) [comment] [EOL] [EOL] if associated_endpoint : [EOL] resources_list = associated_endpoint . resources [EOL] [EOL] for r in resources_list : [EOL] if [string] in data : [EOL] r . status = bool ( int ( data [ [string] ] ) ) [EOL] r . save ( ) [EOL] [EOL] data_to_return = { [string] : [string] } [EOL] code_to_return = HTTPStatus . OK [EOL] else : [EOL] data_to_return = { [string] : [string] } [EOL] code_to_return = HTTPStatus . BAD_REQUEST [EOL] [EOL] return http . JsonResponse ( data = data_to_return , status = code_to_return ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . UNAUTHORIZED ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL] [EOL] [EOL] def delete_resource ( request , res_id ) : [EOL] [docstring] [EOL] [EOL] if request . META . get ( [string] ) : [EOL] token = request . META . get ( [string] ) . split ( [string] ) [ [number] ] [EOL] [EOL] if core . validate ( token ) : [EOL] resource = Resource . objects . with_id ( res_id ) [EOL] if resource : [EOL] [EOL] endpoint = Endpoint . objects ( resources = res_id ) [EOL] if endpoint : [EOL] endpoint . update ( pull__resources = resource ) [EOL] [EOL] resource . delete ( ) [EOL] data = { [string] : [string] } [EOL] sts = HTTPStatus . OK [EOL] [EOL] else : [EOL] data = { [string] : HTTPStatus . NOT_FOUND . name } [EOL] sts = HTTPStatus . NOT_FOUND [EOL] [EOL] return http . JsonResponse ( data = data , status = sts ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . UNAUTHORIZED ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL] [EOL] [EOL] def resource_status ( request , res_id ) : [EOL] [docstring] [EOL] [EOL] if request . META . get ( [string] ) : [EOL] token = request . META . get ( [string] ) . split ( [string] ) [ [number] ] [EOL] [comment] [EOL] if core . validate ( token ) : [EOL] resource = Resource . objects . with_id ( res_id ) [EOL] [EOL] if resource : [EOL] if resource . status : [EOL] data = { [string] : [string] } [EOL] if ResourceUse . objects ( resource = resource . _id ) . count ( ) : [EOL] data = { [string] : [string] } [EOL] else : [EOL] data = { [string] : [string] } [EOL] [EOL] sts = HTTPStatus . OK [EOL] else : [EOL] sts = HTTPStatus . BAD_REQUEST [EOL] data = { [string] : [string] } [EOL] [EOL] return http . JsonResponse ( data = data , status = sts ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . UNAUTHORIZED ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL] [EOL] [EOL] def get_shadow_resources ( request , shdw_id ) : [EOL] [docstring] [EOL] if request . META . get ( [string] ) : [EOL] token = request . META . get ( [string] ) . split ( [string] ) [ [number] ] [EOL] if core . validate ( token ) : [EOL] shadow = Shadow . objects . with_id ( shdw_id ) [EOL] res_list = [ ] [EOL] [EOL] if shadow : [EOL] shdw_devices = shadow . devices [EOL] [EOL] for device in shdw_devices : [comment] [EOL] dev_endpoints = device . endpoints [EOL] [EOL] for endpoint in dev_endpoints : [comment] [EOL] resources = endpoint . resources [EOL] for res in resources : [comment] [EOL] res_list . append ( res . to_json ( ) ) [EOL] [EOL] return http . JsonResponse ( data = { [string] : res_list } , status = HTTPStatus . OK ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . UNAUTHORIZED ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL] [EOL] [EOL] def get_device_resources ( request , dev_id ) : [EOL] [docstring] [EOL] if request . META . get ( [string] ) : [EOL] token = request . META . get ( [string] ) . split ( [string] ) [ [number] ] [EOL] if core . validate ( token ) : [EOL] device = IotConnector . objects . with_id ( dev_id ) [EOL] res_dict = { } [EOL] [EOL] if device : [EOL] dev_endpoints = device . endpoints [EOL] [EOL] for endpoint in dev_endpoints : [comment] [EOL] resources = endpoint . resources [EOL] res_dict [ endpoint . name ] = [ ] [EOL] for res in resources : [comment] [EOL] res_dict [ endpoint . name ] . append ( res . to_json ( ) ) [EOL] [EOL] return http . JsonResponse ( data = res_dict , status = HTTPStatus . OK ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . UNAUTHORIZED ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def search_res_in_shadow ( shadow , res_type ) : [EOL] [docstring] [EOL] [EOL] data_to_return = { [string] : False } [EOL] code_to_return = HTTPStatus . NOT_FOUND [EOL] [EOL] for device in shadow . devices : [comment] [EOL] endpoint_list = device . endpoints [EOL] [EOL] for endpoint in endpoint_list : [comment] [EOL] resources_list = endpoint . resources [EOL] [EOL] for resource in resources_list : [comment] [EOL] if resource . type == res_type and resource . status : [EOL] data_to_return . update ( { [string] : True , [string] : device . _id , [string] : endpoint . _id , [string] : endpoint . name , [string] : resource . _id , [string] : shadow . _id } ) [EOL] code_to_return = HTTPStatus . OK [EOL] return data_to_return , code_to_return [EOL] [EOL] return data_to_return , code_to_return [comment] [EOL]	
from typing import List , Any , Dict [EOL] import typing [EOL] import json [EOL] import uuid [EOL] [EOL] from my_db . restful_API . auth . core import validate , generate , revoke [EOL] from my_db . db_mongo import mongo_setup [EOL] from my_db . db_mongo . model import Token [EOL] from my_db . db_mongo . model import UserData [EOL] from my_db . db_mongo . model import Shadow [EOL] from my_db . restful_API . auth import core [EOL] from http import HTTPStatus [EOL] from django import http [EOL] mongo_setup . global_init ( ) [comment] [EOL] [EOL] [EOL] def generate_token ( request ) : [EOL] [docstring] [EOL] [EOL] if request . POST : [EOL] token_info = { } [EOL] for key in request . POST : [EOL] token_info [ key ] = request . POST [ key ] [EOL] [EOL] try : [EOL] token = generate ( token_info ) [EOL] [EOL] return http . JsonResponse ( data = { [string] : token } , status = HTTPStatus . OK ) [EOL] except : [EOL] return http . HttpResponse ( content = json . dumps ( { [string] : [string] } ) , status = HTTPStatus . INTERNAL_SERVER_ERROR ) [EOL] else : [EOL] return http . HttpResponse ( content = json . dumps ( { [string] : [string] } ) , status = HTTPStatus . BAD_REQUEST ) [EOL] [EOL] [EOL] def get_token_by_id ( request , token_id ) : [EOL] [docstring] [EOL] token_object = Token . objects . with_id ( token_id ) [EOL] if token_object : [EOL] token = token_object . token [EOL] status = HTTPStatus . OK [EOL] else : [EOL] status = HTTPStatus . NOT_FOUND [EOL] token = None [EOL] [EOL] return http . JsonResponse ( data = { [string] : token } , status = status ) [EOL] [EOL] [EOL] def get_tokens_by_user_id ( request , user_id ) : [comment] [EOL] [docstring] [EOL] if request . META . get ( [string] ) : [EOL] token = request . META . get ( [string] ) . split ( [string] ) [ [number] ] [EOL] if core . validate ( token ) : [EOL] user = UserData . objects ( _id = user_id ) [EOL] if user . count ( ) : [EOL] user = user . first ( ) [EOL] token_ref = user . token [EOL] token = Token . objects ( _id = token_ref ) . first ( ) [EOL] token = token . token [EOL] [EOL] status = HTTPStatus . OK [EOL] else : [EOL] token = None [EOL] status = HTTPStatus . NOT_FOUND [EOL] return http . JsonResponse ( { [string] : token } , status = status ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . UNAUTHORIZED ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL] [EOL] [EOL] def get_tokens_by_shadow ( request , shadow_id ) : [EOL] [docstring] [EOL] [EOL] if request . META . get ( [string] ) : [EOL] token = request . META . get ( [string] ) . split ( [string] ) [ [number] ] [EOL] if core . validate ( token ) : [EOL] shadow = Shadow . objects ( _id = shadow_id ) [EOL] if shadow . count ( ) : [EOL] shadow = shadow . first ( ) [EOL] token_ids_list = shadow . tokens [EOL] token_list = [ ] [EOL] status = HTTPStatus . OK [EOL] [EOL] for tok in token_ids_list : [EOL] token_list . append ( tok . _id ) [EOL] else : [EOL] token_list = [ ] [EOL] status = HTTPStatus . NOT_FOUND [EOL] return http . JsonResponse ( { [string] : token_list } , status = status ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . UNAUTHORIZED ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL] [EOL] [EOL] def revoke_token ( request ) : [comment] [EOL] [docstring] [EOL] [EOL] if request . META . get ( [string] ) : [EOL] token = request . META . get ( [string] ) . split ( [string] ) [ [number] ] [EOL] revoke ( token ) [EOL] return http . JsonResponse ( status = HTTPStatus . OK , data = { [string] : [string] } ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL] [EOL] [EOL] def validate_token ( request ) : [comment] [EOL] [docstring] [EOL] [EOL] if request . META . get ( [string] ) : [EOL] token = request . META . get ( [string] ) . split ( [string] ) [ [number] ] [EOL] if validate ( token ) : [EOL] return http . JsonResponse ( status = HTTPStatus . OK , data = { [string] : [string] } ) [EOL] else : [EOL] revoke ( token ) [comment] [EOL] return http . JsonResponse ( status = HTTPStatus . UNAUTHORIZED , data = { [string] : [string] } ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] from my_db . db_mongo . model import Endpoint , Resource [EOL] from my_db . db_mongo import mongo_setup [EOL] from my_db . restful_API . auth import core [EOL] from django import http [EOL] from http import HTTPStatus [EOL] [EOL] import json [EOL] import uuid [EOL] [EOL] mongo_setup . global_init ( ) [comment] [EOL] [EOL] [EOL] def get_endpoint_by_id ( request , ep_id ) : [EOL] [docstring] [EOL] [EOL] if request . META . get ( [string] ) : [EOL] token = request . META . get ( [string] ) . split ( [string] ) [ [number] ] [EOL] [comment] [EOL] if core . validate ( token ) : [EOL] endpoint = Endpoint . objects . with_id ( ep_id ) [EOL] [EOL] if endpoint : [EOL] return http . JsonResponse ( data = { [string] : endpoint . to_json ( ) } , status = HTTPStatus . OK ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . NOT_FOUND ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . UNAUTHORIZED ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL] [EOL] [EOL] def get_endpoint_by_leshanid ( request , leshan_id ) : [EOL] [docstring] [EOL] [EOL] if request . META . get ( [string] ) : [EOL] token = request . META . get ( [string] ) . split ( [string] ) [ [number] ] [EOL] [comment] [EOL] if core . validate ( token ) : [EOL] endpoint = Endpoint . objects ( leshan_id = leshan_id ) [EOL] [EOL] if endpoint . count ( ) : [EOL] endpoint = endpoint . first ( ) [EOL] return http . JsonResponse ( data = { [string] : endpoint . _id } , status = HTTPStatus . OK ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . NOT_FOUND ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . UNAUTHORIZED ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL] [EOL] [EOL] def store_endpoint ( request ) : [EOL] [docstring] [EOL] [EOL] if request . META . get ( [string] ) : [EOL] token = request . META . get ( [string] ) . split ( [string] ) [ [number] ] [EOL] [comment] [EOL] if core . validate ( token ) : [EOL] new_endpoint = Endpoint ( ) [EOL] new_endpoint . _id = uuid . uuid4 ( ) . __str__ ( ) [EOL] new_endpoint . leshan_id = request . POST [ [string] ] [EOL] new_endpoint . address = request . POST [ [string] ] [EOL] new_endpoint . name = request . POST [ [string] ] [EOL] [EOL] try : [EOL] new_endpoint . save ( ) [EOL] status_to_return = HTTPStatus . OK [EOL] data = { [string] : new_endpoint . pk } [EOL] except : [comment] [EOL] return http . JsonResponse ( { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL] [EOL] return http . JsonResponse ( data = data , status = status_to_return ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . UNAUTHORIZED ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL] [EOL] [EOL] def update_endpoint ( request , ep_id ) : [EOL] [docstring] [EOL] [EOL] if request . META . get ( [string] ) : [EOL] token = request . META . get ( [string] ) . split ( [string] ) [ [number] ] [EOL] [comment] [EOL] if core . validate ( token ) : [EOL] data = request . POST [EOL] endpoint = Endpoint . objects . with_id ( ep_id ) [comment] [EOL] [EOL] if endpoint : [comment] [EOL] if [string] in data : [EOL] endpoint . events . append ( data [ [string] ] ) [EOL] [EOL] if [string] in data : [EOL] endpoint . available = bool ( int ( data [ [string] ] ) ) [EOL] [EOL] for res in endpoint . resources : [EOL] res . status = bool ( int ( data [ [string] ] ) ) [EOL] res . save ( ) [EOL] [EOL] if [string] in data : [EOL] for res in json . loads ( data [ [string] ] ) : [comment] [EOL] associated_res = Resource . objects . with_id ( res ) [EOL] associated_res . save ( ) [EOL] endpoint . resources . append ( associated_res . to_dbref ( ) ) [comment] [EOL] [EOL] endpoint . save ( ) [EOL] data_to_return = { [string] : [string] } [EOL] code_to_return = HTTPStatus . OK [EOL] [EOL] else : [comment] [EOL] data_to_return = { [string] : [string] } [EOL] code_to_return = HTTPStatus . NOT_MODIFIED [EOL] [EOL] return http . JsonResponse ( data = data_to_return , status = code_to_return ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . UNAUTHORIZED ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from my_db . db_mongo . model import DeviceTypeDockerCommand [EOL] from my_db . restful_API . auth import core [EOL] from my_db . db_mongo import mongo_setup [EOL] from http import HTTPStatus [EOL] from django import http [EOL] import uuid [EOL] [EOL] mongo_setup . global_init ( ) [comment] [EOL] [EOL] [EOL] def get_connector_by_type ( request , d_type ) : [EOL] [docstring] [EOL] if request . META . get ( [string] ) : [comment] [EOL] token = request . META . get ( [string] ) . split ( [string] ) [ [number] ] [comment] [EOL] [comment] [EOL] if core . validate ( token ) : [EOL] docker_images = DeviceTypeDockerCommand . objects ( type = d_type ) [EOL] if docker_images . count ( ) : [EOL] d_image = docker_images . first ( ) [EOL] return http . JsonResponse ( status = HTTPStatus . OK , data = { [string] : d_image . image } ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . NOT_IMPLEMENTED ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . UNAUTHORIZED ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL] [EOL] [EOL] def get_all ( request ) : [EOL] [docstring] [EOL] [EOL] if request . META . get ( [string] ) : [comment] [EOL] token = request . META . get ( [string] ) . split ( [string] ) [ [number] ] [comment] [EOL] [EOL] [comment] [EOL] if core . validate ( token ) : [EOL] docker_images = DeviceTypeDockerCommand . objects ( ) [EOL] images_list = [ ] [EOL] [EOL] for img in docker_images : [EOL] images_list . append ( img . to_json ( ) ) [EOL] [EOL] return http . JsonResponse ( data = { [string] : images_list } , status = HTTPStatus . OK ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . UNAUTHORIZED ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL] [EOL] [EOL] def store_type ( request ) : [EOL] [docstring] [EOL] [EOL] if request . META . get ( [string] ) : [EOL] token = request . META . get ( [string] ) . split ( [string] ) [ [number] ] [EOL] [comment] [EOL] if core . validate ( token ) : [EOL] new_connector = DeviceTypeDockerCommand ( ) [EOL] [EOL] if [string] in request . POST : [EOL] new_connector . type = request . POST [ [string] ] [EOL] [EOL] [comment] [EOL] if DeviceTypeDockerCommand . objects ( type = request . POST [ [string] ] ) . count ( ) : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . NOT_MODIFIED ) [EOL] [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL] [EOL] if [string] in request . POST : [EOL] new_connector . image = request . POST [ [string] ] [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL] new_connector . _id = uuid . uuid4 ( ) . __str__ ( ) [EOL] new_connector . save ( ) [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . OK ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . UNAUTHORIZED ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Dict [EOL] import typing [EOL] from my_db . db_mongo . model import IotConnector , Token , Endpoint , Shadow , ResourceUse [EOL] from my_db . db_mongo import mongo_setup [EOL] from my_db . restful_API . auth import core [EOL] from http import HTTPStatus [EOL] from django import http [EOL] [EOL] import json [EOL] import uuid [EOL] [EOL] mongo_setup . global_init ( ) [comment] [EOL] [EOL] [EOL] def get_physical_device ( request , dev_id ) : [EOL] [docstring] [EOL] if request . META . get ( [string] ) : [EOL] token = request . META . get ( [string] ) . split ( [string] ) [ [number] ] [EOL] [comment] [EOL] if core . validate ( token ) : [EOL] device = IotConnector . objects . with_id ( dev_id ) [EOL] if device : [EOL] [EOL] return http . JsonResponse ( data = { [string] : device . to_json ( ) } , status = [number] ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = [number] ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . UNAUTHORIZED ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL] [EOL] [EOL] def device_status ( request , dev_id ) : [EOL] [docstring] [EOL] [EOL] if request . META . get ( [string] ) : [EOL] token = request . META . get ( [string] ) . split ( [string] ) [ [number] ] [EOL] [comment] [EOL] if core . validate ( token ) : [EOL] device = IotConnector . objects . with_id ( dev_id ) [EOL] [EOL] if device : [EOL] [EOL] [comment] [EOL] up_endpoints_list = [ endpoint for endpoint in device . endpoints if endpoint . available ] [EOL] [EOL] if up_endpoints_list : [EOL] resources_list = [ ] [EOL] for endpoint in up_endpoints_list : [EOL] resources_list . extend ( endpoint . resources ) [EOL] [EOL] data = { [string] : [string] } [EOL] [EOL] for resource in resources_list : [EOL] if ResourceUse . objects ( resource = resource . _id ) . count ( ) : [EOL] data = { [string] : [string] } [EOL] break [EOL] [EOL] else : [EOL] data = { [string] : [string] } [EOL] [EOL] sts = HTTPStatus . OK [EOL] else : [EOL] sts = HTTPStatus . BAD_REQUEST [EOL] data = { [string] : [string] } [EOL] [EOL] return http . JsonResponse ( data = data , status = sts ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . UNAUTHORIZED ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL] [EOL] [EOL] def register_device ( request ) : [EOL] [docstring] [EOL] if request . META . get ( [string] ) : [EOL] token = request . META . get ( [string] ) . split ( [string] ) [ [number] ] [EOL] [comment] [EOL] if core . validate ( token ) : [EOL] [comment] [EOL] iot_device_info = request . POST [EOL] new_real_device = IotConnector ( ) [EOL] [EOL] new_real_device . _id = uuid . uuid4 ( ) . __str__ ( ) [EOL] new_real_device . type = iot_device_info [ [string] ] [EOL] new_real_device . port = iot_device_info [ [string] ] [EOL] new_real_device . ip = iot_device_info [ [string] ] [EOL] new_real_device . mac = iot_device_info [ [string] ] [EOL] [EOL] [comment] [EOL] if not IotConnector . objects ( mac = iot_device_info [ [string] ] ) . count ( ) : [EOL] [EOL] ref_token = Token . objects ( token = iot_device_info [ [string] ] ) [EOL] if ref_token . count ( ) : [EOL] ref_token = ref_token . first ( ) [EOL] ref_token . save ( ) [EOL] new_real_device . token = ref_token . to_dbref ( ) [EOL] [EOL] new_real_device . save ( ) [EOL] [EOL] [comment] [EOL] sh_device = Shadow . objects . with_id ( iot_device_info [ [string] ] ) [EOL] [EOL] if sh_device : [EOL] sh_device . devices . append ( new_real_device . to_dbref ( ) ) [EOL] sh_device . save ( ) [EOL] [EOL] status_to_return = HTTPStatus . OK [EOL] data = { [string] : new_real_device . to_json ( ) } [EOL] else : [EOL] data = { [string] : [string] } [EOL] status_to_return = HTTPStatus . BAD_REQUEST [EOL] else : [EOL] data = { [string] : [string] } [EOL] status_to_return = HTTPStatus . BAD_REQUEST [EOL] [EOL] else : [comment] [EOL] status_to_return = HTTPStatus . BAD_REQUEST [EOL] data = { [string] : [string] } [EOL] [EOL] return http . JsonResponse ( data = data , status = status_to_return ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . UNAUTHORIZED ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL] [EOL] [EOL] def update_device ( request , dev_id ) : [EOL] [docstring] [EOL] if request . META . get ( [string] ) : [EOL] token = request . META . get ( [string] ) . split ( [string] ) [ [number] ] [EOL] [comment] [EOL] if core . validate ( token ) : [EOL] device = IotConnector . objects . with_id ( dev_id ) [EOL] if device : [EOL] data = request . POST [EOL] [EOL] if [string] in data : [EOL] device . update ( set__ip = data [ [string] ] ) [EOL] if [string] in data : [EOL] device . update ( set__port = data [ [string] ] ) [EOL] if [string] in data : [EOL] ref_token = Token . objects ( token = data [ [string] ] ) [EOL] if ref_token . count ( ) : [EOL] ref_token = ref_token . first ( ) [EOL] ref_token . save ( ) [EOL] device . update ( set__token = ref_token . to_dbref ( ) ) [EOL] [EOL] if [string] in data : [EOL] device . update ( set__mac = data [ [string] ] ) [EOL] [EOL] if [string] in data : [EOL] device . update ( set__type = data [ [string] ] ) [EOL] [EOL] code_to_return = HTTPStatus . OK [EOL] data_to_return = { [string] : [string] } [EOL] [EOL] if [string] in data : [EOL] for ep in json . loads ( data [ [string] ] ) : [comment] [EOL] associated_ep = Endpoint . objects . with_id ( ep ) [EOL] associated_ep . save ( ) [EOL] device . endpoints . append ( associated_ep . to_dbref ( ) ) [comment] [EOL] [EOL] try : [EOL] device . save ( ) [EOL] code_to_return = HTTPStatus . OK [EOL] data_to_return = { [string] : [string] } [EOL] except : [EOL] code_to_return = HTTPStatus . INTERNAL_SERVER_ERROR [EOL] data_to_return = { [string] : [string] } [EOL] [EOL] return http . JsonResponse ( data = data_to_return , status = code_to_return ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = [number] ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . UNAUTHORIZED ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL] [EOL] [EOL] def delete_device ( request , dev_id ) : [EOL] [docstring] [EOL] if request . META . get ( [string] ) : [EOL] token = request . META . get ( [string] ) . split ( [string] ) [ [number] ] [EOL] [comment] [EOL] if core . validate ( token ) : [EOL] device = IotConnector . objects . with_id ( dev_id ) [EOL] [EOL] if device : [EOL] [comment] [EOL] device . token . revoked = True [EOL] device . token . save ( ) [EOL] [EOL] shadow = Shadow . objects ( devices = dev_id ) [EOL] if shadow : [EOL] shadow . update ( pull__devices = device ) [comment] [EOL] [EOL] [comment] [EOL] endpoints = device . endpoints [EOL] for ep in endpoints : [EOL] resources = ep . resources [EOL] [EOL] [comment] [EOL] for res in resources : [EOL] res . delete ( ) [EOL] [EOL] ep . delete ( ) [EOL] [EOL] [comment] [EOL] device . delete ( ) [EOL] [EOL] return http . JsonResponse ( status = [number] , data = { [string] : [string] } ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . NOT_MODIFIED ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . UNAUTHORIZED ) [EOL] else : [EOL] return http . JsonResponse ( data = { [string] : [string] } , status = HTTPStatus . BAD_REQUEST ) [EOL] [EOL]	
from typing import List , Any , Dict [EOL] import typing [EOL] from passlib . utils import rounds_cost_values [EOL] [EOL] from my_db . db_mongo . model import Token [EOL] from passlib . hash import pbkdf2_sha256 [EOL] from my_db . settings import SECRET_KEY [EOL] import datetime [EOL] import jwt [EOL] import uuid [EOL] [EOL] ALGORITHM = [string] [EOL] TYPES = [ [string] , [string] , [string] ] [EOL] [EOL] [EOL] def generate ( info ) : [EOL] payload = { [string] : int ( datetime . datetime . utcnow ( ) . timestamp ( ) ) } [EOL] [EOL] if info [ [string] ] == [string] : [comment] [EOL] payload [ [string] ] = int ( ( datetime . datetime . utcnow ( ) + datetime . timedelta ( hours = [number] ) ) . timestamp ( ) ) [comment] [EOL] [EOL] payload . update ( info ) [EOL] token = jwt . encode ( payload , SECRET_KEY , algorithm = ALGORITHM ) [EOL] [EOL] new_tk = Token ( ) [EOL] new_tk . _id = uuid . uuid4 ( ) . __str__ ( ) [EOL] new_tk . token = token . decode ( [string] ) [EOL] new_tk . type = info [ [string] ] [EOL] new_tk . save ( ) [EOL] [EOL] return new_tk . _id [EOL] [EOL] [EOL] def validate ( token ) : [EOL] try : [EOL] valid = [number] [comment] [EOL] [EOL] payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ] ) [EOL] tk = Token . objects ( token = token ) [comment] [EOL] [EOL] if tk . count ( ) : [comment] [EOL] valid = not tk . first ( ) . revoked [EOL] if valid and payload [ [string] ] == [string] : [comment] [EOL] now = int ( datetime . datetime . utcnow ( ) . timestamp ( ) ) [EOL] valid = payload [ [string] ] > now [EOL] return valid [EOL] except : [EOL] return False [EOL] [EOL] [EOL] def revoke ( token ) : [EOL] tk = Token . objects ( token = token , revoked = False ) [EOL] if tk . count ( ) : [EOL] tk = tk . first ( ) [EOL] tk . revoked = True [EOL] tk . save ( ) [EOL] [EOL] [EOL] def make_hash ( pwd ) : [EOL] return pbkdf2_sha256 . encrypt ( pwd , rounds = [number] , salt_size = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Type [EOL] import IoT_Database [EOL] import typing [EOL] import mongoengine [EOL] [EOL] [EOL] class Resource ( mongoengine . Document ) : [EOL] _id = mongoengine . StringField ( required = True , primary_key = True ) [EOL] [comment] [EOL] type = mongoengine . IntField ( required = True ) [EOL] status = mongoengine . BooleanField ( default = True ) [EOL] [comment] [EOL] accessing = mongoengine . StringField ( required = True ) [EOL] [EOL] [EOL] class Endpoint ( mongoengine . Document ) : [EOL] _id = mongoengine . StringField ( required = True , primary_key = True ) [EOL] name = mongoengine . StringField ( required = True ) [EOL] leshan_id = mongoengine . StringField ( unique = True ) [comment] [EOL] available = mongoengine . BooleanField ( default = True ) [EOL] address = mongoengine . StringField ( required = True ) [EOL] resources = mongoengine . ListField ( mongoengine . ReferenceField ( Resource ) , default = [ ] ) [EOL] events = mongoengine . ListField ( default = [ ] ) [comment] [EOL] [EOL] [EOL] class Token ( mongoengine . Document ) : [EOL] _id = mongoengine . StringField ( required = True , primary_key = True ) [EOL] token = mongoengine . StringField ( required = True ) [EOL] type = mongoengine . StringField ( required = True , choices = [ [string] , [string] , [string] ] ) [EOL] revoked = mongoengine . BooleanField ( default = False ) [EOL] [EOL] [EOL] class IotConnector ( mongoengine . Document ) : [EOL] _id = mongoengine . StringField ( required = True , primary_key = True ) [EOL] ip = mongoengine . StringField ( required = True ) [EOL] port = mongoengine . IntField ( required = True ) [EOL] token = mongoengine . ReferenceField ( Token , required = True ) [EOL] mac = mongoengine . StringField ( required = True ) [EOL] type = mongoengine . StringField ( required = True ) [EOL] endpoints = mongoengine . ListField ( mongoengine . ReferenceField ( Endpoint ) , default = [ ] ) [EOL] [EOL] [EOL] class Shadow ( mongoengine . Document ) : [EOL] _id = mongoengine . StringField ( required = True , primary_key = True ) [EOL] tokens = mongoengine . ListField ( mongoengine . ReferenceField ( Token ) , default = [ ] ) [EOL] devices = mongoengine . ListField ( mongoengine . ReferenceField ( IotConnector ) , default = [ ] ) [EOL] name = mongoengine . StringField ( required = True ) [EOL] description = mongoengine . StringField ( required = True ) [EOL] [EOL] [EOL] class UserData ( mongoengine . Document ) : [EOL] _id = mongoengine . StringField ( required = True , primary_key = True ) [EOL] username = mongoengine . EmailField ( required = True ) [EOL] password = mongoengine . StringField ( required = True ) [EOL] token = mongoengine . ReferenceField ( Token , required = True ) [EOL] shadow = mongoengine . ListField ( mongoengine . ReferenceField ( Shadow ) , default = [ ] ) [EOL] [EOL] [EOL] class Application ( mongoengine . Document ) : [EOL] _id = mongoengine . StringField ( required = True , primary_key = True ) [EOL] name = mongoengine . StringField ( required = True , unique = True ) [EOL] interests = mongoengine . ListField ( default = [ ] ) [EOL] [EOL] [EOL] [comment] [EOL] class ResourceUse ( mongoengine . Document ) : [EOL] _id = mongoengine . StringField ( required = True , primary_key = True ) [EOL] applications = mongoengine . ListField ( mongoengine . ReferenceField ( Application ) , required = True ) [EOL] [comment] [EOL] shadow = mongoengine . ReferenceField ( Shadow , reverse_delete_rule = mongoengine . CASCADE , required = True ) [EOL] iot_connector = mongoengine . ReferenceField ( IotConnector , reverse_delete_rule = mongoengine . CASCADE , required = True ) [EOL] endpoint = mongoengine . ReferenceField ( Endpoint , reverse_delete_rule = mongoengine . CASCADE , required = True ) [EOL] resource = mongoengine . ReferenceField ( Resource , reverse_delete_rule = mongoengine . CASCADE , required = True ) [EOL] accessing = mongoengine . StringField ( required = True ) [EOL] operation = mongoengine . StringField ( required = True ) [EOL] kafka_topic = mongoengine . StringField ( required = True ) [EOL] [EOL] [EOL] [comment] [EOL] class DeviceTypeDockerCommand ( mongoengine . Document ) : [EOL] _id = mongoengine . StringField ( required = True , primary_key = True ) [EOL] type = mongoengine . StringField ( required = True ) [EOL] image = mongoengine . StringField ( required = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.Resource]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.Resource]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.Resource]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.Resource]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.Endpoint]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.Endpoint]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.Endpoint]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.Endpoint]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.Endpoint]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.Endpoint]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.Endpoint]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.Token]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.Token]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.Token]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.Token]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.IotConnector]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.IotConnector]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.IotConnector]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.IotConnector]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.IotConnector]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.IotConnector]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.IotConnector]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.Shadow]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.Shadow]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.Shadow]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.Shadow]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.Shadow]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.UserData]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.UserData]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.UserData]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.UserData]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.UserData]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.Application]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.Application]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.Application]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.ResourceUse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.ResourceUse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.ResourceUse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.ResourceUse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.ResourceUse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.ResourceUse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.ResourceUse]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.ResourceUse]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.ResourceUse]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.DeviceTypeDockerCommand]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.DeviceTypeDockerCommand]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[IoT_Database.my_db.db_mongo.model.DeviceTypeDockerCommand]$ 0 0 0 0 0 0 0 0 0 0
import mongoengine [EOL] [EOL] [EOL] def global_init ( ) : [EOL] return mongoengine . connect ( [string] , host = [ [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0