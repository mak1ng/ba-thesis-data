from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] from mpl_toolkits . mplot3d import Axes3D [EOL] import matplotlib . pyplot as plt [EOL] import numpy as np [EOL] [EOL] [EOL] n_radii = [number] [EOL] n_angles = [number] [EOL] [EOL] [comment] [EOL] radii = np . linspace ( [number] , [number] , n_radii ) [EOL] angles = np . linspace ( [number] , [number] * np . pi , n_angles , endpoint = False ) [EOL] [EOL] [comment] [EOL] angles = np . repeat ( angles [ ... , np . newaxis ] , n_radii , axis = [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] x = np . append ( [number] , ( radii * np . cos ( angles ) ) . flatten ( ) ) [EOL] y = np . append ( [number] , ( radii * np . sin ( angles ) ) . flatten ( ) ) [EOL] [EOL] [comment] [EOL] z = np . sin ( - x * y ) [EOL] [EOL] print ( z ) [EOL] [EOL] fig = plt . figure ( ) [EOL] ax = fig . gca ( projection = [string] ) [EOL] [EOL] ax . plot_trisurf ( x , y , z , linewidth = [number] , antialiased = True ) [EOL] [EOL] plt . show ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from mpl_toolkits . mplot3d import axes3d [EOL] import matplotlib . pyplot as plt [EOL] from matplotlib import cm [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] [EOL] from mpl_toolkits . mplot3d import axes3d [EOL] import matplotlib . pyplot as plt [EOL] from matplotlib import cm [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] from mpl_toolkits . mplot3d import Axes3D [EOL] import matplotlib . pyplot as plt [EOL] import numpy as np [EOL] [EOL] [EOL] fig = plt . figure ( ) [EOL] ax = fig . add_subplot ( [number] , projection = [string] ) [EOL] [EOL] [comment] [EOL] u = np . linspace ( [number] , [number] * np . pi , [number] ) [EOL] v = np . linspace ( [number] , np . pi , [number] ) [EOL] x = [number] * np . outer ( np . cos ( u ) , np . sin ( v ) ) [EOL] y = [number] * np . outer ( np . sin ( u ) , np . sin ( v ) ) [EOL] z = [number] * np . outer ( np . ones ( np . size ( u ) ) , np . cos ( v ) ) [EOL] [EOL] [comment] [EOL] ax . plot_surface ( x , y , z , color = [string] ) [EOL] [EOL] plt . show ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] [docstring] [EOL] [EOL] from mpl_toolkits . mplot3d import Axes3D [EOL] from matplotlib . collections import PolyCollection [EOL] import matplotlib . pyplot as plt [EOL] from matplotlib import colors as mcolors [EOL] import numpy as np [EOL] [EOL] [EOL] fig = plt . figure ( ) [EOL] ax = fig . gca ( projection = [string] ) [EOL] [EOL] [EOL] def cc ( arg ) : [EOL] return mcolors . to_rgba ( arg , alpha = [number] ) [EOL] [EOL] xs = np . arange ( [number] , [number] , [number] ) [EOL] verts = [ ] [EOL] zs = [ [number] , [number] , [number] , [number] ] [EOL] for z in zs : [EOL] ys = np . random . rand ( len ( xs ) ) [EOL] ys [ [number] ] , ys [ - [number] ] = [number] , [number] [EOL] verts . append ( list ( zip ( xs , ys ) ) ) [EOL] [EOL] poly = PolyCollection ( verts , facecolors = [ cc ( [string] ) , cc ( [string] ) , cc ( [string] ) , cc ( [string] ) ] ) [EOL] poly . set_alpha ( [number] ) [EOL] ax . add_collection3d ( poly , zs = zs , zdir = [string] ) [EOL] [EOL] ax . set_xlabel ( [string] ) [EOL] ax . set_xlim3d ( [number] , [number] ) [EOL] ax . set_ylabel ( [string] ) [EOL] ax . set_ylim3d ( - [number] , [number] ) [EOL] ax . set_zlabel ( [string] ) [EOL] ax . set_zlim3d ( [number] , [number] ) [EOL] [EOL] plt . show ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.float]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.List[builtins.float]$ 0 $typing.List[builtins.float]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] import time [EOL] [EOL] def Main ( ) : [EOL] while True : [EOL] print ( [string] ) [EOL] time . sleep ( [number] ) [EOL] [EOL] if __name__ == [string] : [EOL] Main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] from mpl_toolkits . mplot3d import axes3d [EOL] import matplotlib . pyplot as plt [EOL] [EOL] [EOL] fig = plt . figure ( ) [EOL] ax = fig . add_subplot ( [number] , projection = [string] ) [EOL] [EOL] [comment] [EOL] X , Y , Z = axes3d . get_test_data ( [number] ) [EOL] [EOL] [comment] [EOL] ax . plot_wireframe ( X , Y , Z , rstride = [number] , cstride = [number] ) [EOL] [EOL] plt . show ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] [EOL] from typing import Any [EOL] import typing [EOL] import numpy as np [EOL] import matplotlib . pyplot as plt [EOL] from mpl_toolkits . mplot3d import Axes3D [EOL] from matplotlib import cm [EOL] from matplotlib . ticker import LinearLocator , FormatStrFormatter [EOL] [EOL] def Main ( ) : [EOL] phi = np . linspace ( [number] , [number] * np . pi ) [EOL] theta = np . linspace ( - np . pi / [number] , np . pi / [number] ) [EOL] phi , theta = np . meshgrid ( phi , theta ) [EOL] [EOL] x = np . cos ( theta ) * np . sin ( phi ) * [number] [EOL] y = np . cos ( theta ) * np . cos ( phi ) * [number] [EOL] z = np . sin ( theta ) [EOL] [EOL] fig = plt . figure ( [number] ) [EOL] ax = fig . gca ( projection = [string] ) [EOL] surf = ax . plot_surface ( x , y , z ) [EOL] plt . show ( ) [EOL] [EOL] if __name__ == [string] : [EOL] [EOL] Main ( ) [EOL] [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from mpl_toolkits import mplot3d [EOL] [EOL] import numpy as np [EOL] import matplotlib . pyplot as plt [EOL] [EOL] [EOL] [EOL] [EOL] def f ( x , y ) : [EOL] return np . sin ( np . sqrt ( x ** [number] + y ** [number] ) ) [EOL] [EOL] x = np . linspace ( - [number] , [number] , [number] ) [EOL] y = np . linspace ( - [number] , [number] , [number] ) [EOL] [EOL] X , Y = np . meshgrid ( x , y ) [EOL] Z = f ( X , Y ) [EOL] [EOL] fig = plt . figure ( ) [EOL] ax = plt . axes ( projection = [string] ) [EOL] ax . contour3D ( X , Y , Z , [number] , cmap = [string] ) [EOL] ax . set_xlabel ( [string] ) [EOL] ax . set_ylabel ( [string] ) [EOL] ax . set_zlabel ( [string] ) [EOL] plt . show ( ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import sys , os [EOL] qualified_name = sys . argv [ - [number] ] [EOL] path = qualified_name . split ( [string] ) [EOL] [EOL] try : [EOL] module = __import__ ( qualified_name , globals ( ) , locals ( ) , [ path [ - [number] ] ] ) [EOL] try : [EOL] p = module . __path__ [EOL] sys . stdout . write ( os . sep . join ( p . split ( os . sep ) [ : - [number] ] ) ) [EOL] sys . stdout . flush ( ) [EOL] except AttributeError : [EOL] pass [EOL] except ImportError : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import sys [EOL] import os . path [EOL] for x in sys . path : [EOL] if x != os . path . dirname ( sys . argv [ [number] ] ) and x != [string] : sys . stdout . write ( x + chr ( [number] ) )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [docstring] [EOL] [EOL] __import__ ( [string] ) . declare_namespace ( __name__ ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] __version__ = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
__author__ = [string] [EOL]	$builtins.str$ 0 0 0
[docstring]	0
[docstring] [EOL] NAMES = [string]	0 0 $builtins.str$ 0 0
[comment] [EOL]	0 0
import sys [EOL] from . main import main [EOL] [EOL] sys . exit ( main ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL]	0 0
[comment] [EOL] [comment] [EOL] [EOL] [docstring] [EOL]	0 0 0 0 0 0 0
	0
import unittest [EOL] [EOL] class StillYetAnotherSampleTest ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] return [EOL] [EOL] def tearDown ( self ) : [EOL] return [EOL] [EOL] def test_non_unique_name ( self ) : [EOL] pass [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import unittest [EOL] [EOL] class YetAnotherSampleTest ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] return [EOL] [EOL] def tearDown ( self ) : [EOL] return [EOL] [EOL] def test_abc ( self ) : [EOL] pass [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] [docstring] [EOL] pass [EOL]	0 0 0 0 0
import unittest [EOL] [EOL] class SetUpClassTest ( unittest . TestCase ) : [EOL] [EOL] @ classmethod def setUpClass ( cls ) : [EOL] raise ValueError ( [string] ) [EOL] [EOL] def test_blank ( self ) : [EOL] pass [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import unittest [EOL] [EOL] def setUpModule ( ) : [EOL] raise ValueError ( [string] ) [EOL] [EOL] class SetUpModuleTest ( unittest . TestCase ) : [EOL] [EOL] def setUp ( cls ) : [EOL] pass [EOL] [EOL] def test_blank ( self ) : [EOL] pass [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL]	0
[EOL] [docstring] [EOL] pass [EOL]	0 0 0 0 0
import unittest [EOL] [EOL] class NestedSampleTest ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] return [EOL] [EOL] def tearDown ( self ) : [EOL] return [EOL] [EOL] def test_non_unique_name ( self ) : [EOL] pass [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import unittest [EOL] [EOL] class SampleTest ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] return [EOL] [EOL] def tearDown ( self ) : [EOL] return [EOL] [EOL] def test_non_unique_name ( self ) : [EOL] pass [EOL] [EOL] def test_asdf2 ( self ) : [EOL] pass [EOL] [EOL] def test_i_am_a_unique_test_name ( self ) : [EOL] pass [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] [docstring] [EOL] pass [EOL]	0 0 0 0 0
[EOL]	0
[EOL]	0
[EOL] [docstring] [EOL] pass [EOL]	0 0 0 0 0
	0
[comment] [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from distutils . version import LooseVersion [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def check_version ( v , check ) : [EOL] [docstring] [EOL] try : [EOL] return LooseVersion ( v ) >= LooseVersion ( check ) [EOL] except TypeError : [EOL] return True [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from pydev_ipython . inputhook import stdin_ready [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] TCL_DONT_WAIT = [number] << [number] [EOL] [EOL] def create_inputhook_tk ( app ) : [EOL] def inputhook_tk ( ) : [EOL] while app . dooneevent ( TCL_DONT_WAIT ) == [number] : [EOL] if stdin_ready ( ) : [EOL] break [EOL] return [number] [EOL] return inputhook_tk [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import gtk , gobject [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def _main_quit ( * args , ** kwargs ) : [EOL] gtk . main_quit ( ) [EOL] return False [EOL] [EOL] def create_inputhook_gtk ( stdin_file ) : [EOL] def inputhook_gtk ( ) : [EOL] gobject . io_add_watch ( stdin_file , gobject . IO_IN , _main_quit ) [EOL] gtk . main ( ) [EOL] return [number] [EOL] return inputhook_gtk [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import sys [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] class PydevdVmType : [EOL] [EOL] PYTHON = [string] [EOL] JYTHON = [string] [EOL] vm_type = None [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def set_vm_type ( vm_type ) : [EOL] PydevdVmType . vm_type = vm_type [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def get_vm_type ( ) : [EOL] if PydevdVmType . vm_type is None : [EOL] setup_type ( ) [EOL] return PydevdVmType . vm_type [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def setup_type ( str = None ) : [EOL] if str is not None : [EOL] PydevdVmType . vm_type = str [EOL] return [EOL] [EOL] if sys . platform . startswith ( [string] ) : [EOL] PydevdVmType . vm_type = PydevdVmType . JYTHON [EOL] else : [EOL] PydevdVmType . vm_type = PydevdVmType . PYTHON [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
def Exec ( exp , global_vars , local_vars = None ) : [EOL] if local_vars is not None : [EOL] exec ( exp , global_vars , local_vars ) [EOL] else : [EOL] exec ( exp , global_vars )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from _pydevd_bundle . pydevd_comm import PyDBDaemonThread [EOL] from _pydevd_bundle . pydevd_constants import dict_keys [EOL] [EOL] def kill_all_pydev_threads ( ) : [EOL] threads = dict_keys ( PyDBDaemonThread . created_pydb_daemon_threads ) [EOL] for t in threads : [EOL] if hasattr ( t , [string] ) : [EOL] t . do_kill_pydev_thread ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] from _pydevd_bundle . pydevd_constants import IS_PY3K [EOL] [EOL] class Frame ( object ) : [EOL] def __init__ ( self , f_back , f_fileno , f_code , f_locals , f_globals = None , f_trace = None ) : [EOL] self . f_back = f_back [EOL] self . f_lineno = f_fileno [EOL] self . f_code = f_code [EOL] self . f_locals = f_locals [EOL] self . f_globals = f_globals [EOL] self . f_trace = f_trace [EOL] [EOL] if self . f_globals is None : [EOL] self . f_globals = { } [EOL] [EOL] [EOL] class FCode ( object ) : [EOL] def __init__ ( self , name , filename ) : [EOL] self . co_name = name [EOL] self . co_filename = filename [EOL] [EOL] [EOL] def add_exception_to_frame ( frame , exception_info ) : [EOL] frame . f_locals [ [string] ] = exception_info [EOL] [EOL] FILES_WITH_IMPORT_HOOKS = [ [string] , [string] ] [EOL] [EOL] def just_raised ( trace ) : [EOL] if trace is None : [EOL] return False [EOL] if trace . tb_next is None : [EOL] if IS_PY3K : [EOL] if trace . tb_frame . f_code . co_filename != [string] : [EOL] [comment] [EOL] return True [EOL] else : [EOL] return True [EOL] if trace . tb_next is not None : [EOL] filename = trace . tb_next . tb_frame . f_code . co_filename [EOL] [comment] [EOL] for file in FILES_WITH_IMPORT_HOOKS : [EOL] if filename . endswith ( file ) : [EOL] return True [EOL] return False [EOL] [EOL] def cached_call ( obj , func , * args ) : [EOL] cached_name = [string] + func . __name__ [EOL] if not hasattr ( obj , cached_name ) : [EOL] setattr ( obj , cached_name , func ( * args ) ) [EOL] [EOL] return getattr ( obj , cached_name ) [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import sys [EOL] [EOL] def versionok_for_gui ( ) : [EOL] [docstring] [EOL] [comment] [EOL] if sys . hexversion < [number] : [EOL] return False [EOL] [comment] [EOL] if sys . hexversion >= [number] and sys . hexversion < [number] : [EOL] return False [EOL] [comment] [EOL] if sys . platform . startswith ( [string] ) or sys . platform . startswith ( [string] ) : [EOL] return False [EOL] [EOL] return True [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def overrides ( method ) : [EOL] [docstring] [EOL] return [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def implements ( method ) : [EOL] return [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from _pydev_imps . _pydev_saved_modules import threading [EOL] [EOL] [comment] [EOL] [comment] [EOL] _temp = threading . Thread ( ) [EOL] if hasattr ( _temp , [string] ) : [comment] [EOL] def is_thread_alive ( t ) : [EOL] try : [EOL] return not t . _is_stopped [EOL] except : [EOL] return t . isAlive ( ) [EOL] [EOL] elif hasattr ( _temp , [string] ) : [comment] [EOL] def is_thread_alive ( t ) : [EOL] try : [EOL] return not t . _Thread__stopped [EOL] except : [EOL] return t . isAlive ( ) [EOL] [EOL] else : [comment] [EOL] def is_thread_alive ( t ) : [EOL] return t . isAlive ( ) [EOL] del _temp [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0
	0
import time [EOL] if __name__ == [string] : [EOL] for i in range ( [number] ) : [EOL] print ( [string] ) [EOL] time . sleep ( [number] ) [EOL] [EOL] print ( [string] ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] import numpy [EOL] [EOL] def main ( ) : [EOL] smallarray = numpy . arange ( [number] ) * [number] + [number] [EOL] bigarray = numpy . arange ( [number] ) . reshape ( ( [number] , [number] ) ) [comment] [EOL] hugearray = numpy . arange ( [number] ) [comment] [EOL] [EOL] pass [comment] [EOL] [EOL] main ( ) [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def get_here ( ) : [EOL] a = [number] [EOL] [EOL] def foo ( func ) : [EOL] return func [EOL] [EOL] def m1 ( ) : [comment] [EOL] get_here ( ) [EOL] [EOL] [comment] [EOL] def m2 ( ) : [EOL] get_here ( ) [EOL] [EOL] [comment] [EOL] @ foo def m3 ( ) : [EOL] get_here ( ) [EOL] [EOL] @ foo @ foo def m4 ( ) : [comment] [EOL] get_here ( ) [EOL] [EOL] [EOL] def main ( ) : [EOL] [EOL] m1 ( ) [EOL] [EOL] m2 ( ) [EOL] [EOL] m3 ( ) [EOL] [EOL] m4 ( ) [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL] [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
class ClassToBeImported ( object ) : [EOL] pass	0 0 0 0 0 0 0 0
import time [EOL] if __name__ == [string] : [EOL] for i in range ( [number] ) : [EOL] print ( [string] % i ) [EOL] time . sleep ( [number] ) [EOL] [EOL] print ( [string] ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
def Call ( ) : [EOL] variable_for_test_1 = [number] [EOL] variable_for_test_2 = [number] [EOL] variable_for_test_3 = [number] [EOL] [EOL] if __name__ == [string] : [EOL] Call ( ) [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def m1 ( ) : [EOL] print ( [string] ) [EOL] [EOL] def m2 ( ) : [comment] [EOL] m1 ( ) [EOL] print ( [string] ) [EOL] [EOL] def m3 ( ) : [EOL] m2 ( ) [EOL] print ( [string] ) [EOL] [EOL] if __name__ == [string] : [EOL] m3 ( ) [EOL] [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def method ( ) : [EOL] a = [number] [EOL] print ( [string] % ( a , ) ) [EOL] a = [number] [EOL] print ( [string] % ( a , ) ) [EOL] a = [number] [EOL] [EOL] if __name__ == [string] : [EOL] method ( ) [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def Method1 ( ) : [EOL] print ( [string] ) [EOL] [EOL] def Method2 ( ) : [EOL] print ( [string] ) [EOL] Method1 ( ) [EOL] print ( [string] ) [EOL] [EOL] def Method3 ( ) : [EOL] print ( [string] ) [EOL] Method2 ( ) [EOL] print ( [string] ) [EOL] [EOL] if __name__ == [string] : [EOL] Method3 ( ) [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def Call2 ( ) : [EOL] print ( [string] ) [EOL] [EOL] def Call1 ( a ) : [EOL] print ( [string] ) [EOL] [EOL] if __name__ == [string] : [EOL] Call1 ( Call2 ( ) ) [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import re [EOL] [EOL] en_lang_symbols = [string] [EOL] en_words_basic = [ ] [EOL] en_words = [ ] [EOL] [EOL] TRACE_MESSAGE = [string] [EOL] [EOL] [EOL] def tracing ( ) : [EOL] print ( TRACE_MESSAGE ) [EOL] [EOL] [EOL] def call_tracing ( ) : [EOL] tracing ( ) [EOL] [EOL] [EOL] class Dummy : [EOL] non_en_words_limit = [number] [EOL] [EOL] @ staticmethod def fun ( text ) : [EOL] words = tuple ( w [ [number] ] . lower ( ) for w in re . finditer ( [string] , text ) ) [EOL] non_en_pass = [ ] [EOL] for i , word in enumerate ( words ) : [EOL] non_en = [ ] [EOL] if not ( word in en_words_basic or ( word . endswith ( [string] ) and word [ : - [number] ] in en_words_basic ) or ( word . endswith ( [string] ) and word [ : - [number] ] in en_words_basic ) or ( word . endswith ( [string] ) and word [ : - [number] ] in en_words_basic ) or word in en_words or ( word . endswith ( [string] ) and word [ : - [number] ] in en_words ) or ( word . endswith ( [string] ) and word [ : - [number] ] in en_words ) or ( word . endswith ( [string] ) and word [ : - [number] ] in en_words ) ) : [EOL] [EOL] non_en . append ( word ) [EOL] non_en_pass . append ( word ) [EOL] for j in range ( [number] , Dummy . non_en_words_limit ) : [EOL] if i + j >= len ( words ) : [EOL] break [EOL] word = words [ i + j ] [EOL] [EOL] if ( word in en_words_basic or ( word . endswith ( [string] ) and word [ : - [number] ] in en_words_basic ) or ( word . endswith ( [string] ) and word [ : - [number] ] in en_words_basic ) or ( word . endswith ( [string] ) and word [ : - [number] ] in en_words_basic ) or word in en_words or ( word . endswith ( [string] ) and word [ : - [number] ] in en_words ) or ( word . endswith ( [string] ) and word [ : - [number] ] in en_words ) or ( word . endswith ( [string] ) and word [ : - [number] ] in en_words ) ) : [EOL] break [EOL] else : [EOL] non_en . append ( word ) [EOL] non_en_pass . append ( word ) [EOL] [EOL] [EOL] class DummyTracing : [EOL] non_en_words_limit = [number] [EOL] [EOL] @ staticmethod def fun ( text ) : [EOL] words = tuple ( w [ [number] ] . lower ( ) for w in re . finditer ( [string] , text ) ) [EOL] tracing ( ) [EOL] non_en_pass = [ ] [EOL] for i , word in enumerate ( words ) : [EOL] non_en = [ ] [EOL] if not ( word in en_words_basic or ( word . endswith ( [string] ) and word [ : - [number] ] in en_words_basic ) or ( word . endswith ( [string] ) and word [ : - [number] ] in en_words_basic ) or ( word . endswith ( [string] ) and word [ : - [number] ] in en_words_basic ) or word in en_words or ( word . endswith ( [string] ) and word [ : - [number] ] in en_words ) or ( word . endswith ( [string] ) and word [ : - [number] ] in en_words ) or ( word . endswith ( [string] ) and word [ : - [number] ] in en_words ) ) : [EOL] [EOL] non_en . append ( word ) [EOL] non_en_pass . append ( word ) [EOL] for j in range ( [number] , Dummy . non_en_words_limit ) : [EOL] if i + j >= len ( words ) : [EOL] break [EOL] word = words [ i + j ] [EOL] if ( word in en_words_basic or ( word . endswith ( [string] ) and word [ : - [number] ] in en_words_basic ) or ( word . endswith ( [string] ) and word [ : - [number] ] in en_words_basic ) or ( word . endswith ( [string] ) and word [ : - [number] ] in en_words_basic ) or word in en_words or ( word . endswith ( [string] ) and word [ : - [number] ] in en_words ) or ( word . endswith ( [string] ) and word [ : - [number] ] in en_words ) or ( word . endswith ( [string] ) and word [ : - [number] ] in en_words ) ) : [EOL] break [EOL] else : [EOL] non_en . append ( word ) [EOL] non_en_pass . append ( word ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.List[typing.Any]$ 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $builtins.str$ 0 $typing.List[typing.Any]$ 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.List[typing.Any]$ 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $builtins.str$ 0 $typing.List[typing.Any]$ 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.List[typing.Any]$ 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $builtins.str$ 0 $typing.List[typing.Any]$ 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.List[typing.Any]$ 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $builtins.str$ 0 $typing.List[typing.Any]$ 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0
from . import _debugger_case_m_switch_2 [EOL] print ( _debugger_case_m_switch_2 . ClassToBeImported ) [EOL] print ( [string] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import os [EOL] import sys [EOL] [EOL] if __name__ == [string] : [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] from django . core . management import execute_from_command_line [EOL] [EOL] execute_from_command_line ( sys . argv ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
	0
	0
	0
	0
from typing import Any [EOL] import typing [EOL] try : [EOL] from _pydevd_frame_eval . pydevd_frame_evaluator import frame_eval_func , stop_frame_eval , enable_cache_frames_without_breaks , dummy_trace_dispatch [EOL] except ImportError : [EOL] try : [EOL] import struct [EOL] import sys [EOL] try : [EOL] is_64bits = sys . maxsize > [number] ** [number] [EOL] except : [EOL] [comment] [EOL] raise ImportError [EOL] plat = [string] [EOL] if is_64bits : [EOL] plat = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] mod_name = [string] % ( sys . platform , sys . version_info [ [number] ] , sys . version_info [ [number] ] , plat ) [EOL] check_name = [string] % ( mod_name , ) [EOL] mod = __import__ ( check_name ) [EOL] mod = getattr ( mod , mod_name ) [EOL] frame_eval_func , stop_frame_eval , enable_cache_frames_without_breaks , dummy_trace_dispatch = mod . frame_eval_func , mod . stop_frame_eval , mod . enable_cache_frames_without_breaks , mod . dummy_trace_dispatch [EOL] except ImportError : [EOL] raise	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
	0
import builtins [EOL] from typing import Dict , List [EOL] import typing [EOL] [docstring] [EOL] [EOL] import subprocess [EOL] import sys [EOL] import os [EOL] import time [EOL] [EOL] if __name__ == [string] : [EOL] [EOL] linux_dir = os . path . join ( os . path . dirname ( __file__ ) , [string] ) [EOL] os . chdir ( linux_dir ) [EOL] so_location = os . path . join ( linux_dir , [string] ) [EOL] try : [EOL] os . remove ( so_location ) [EOL] except : [EOL] pass [EOL] subprocess . call ( [string] . split ( ) ) [EOL] print ( [string] ) [EOL] assert os . path . exists ( [string] ) [EOL] os . chdir ( os . path . dirname ( linux_dir ) ) [EOL] [comment] [EOL] [comment] [EOL] p = subprocess . Popen ( [ sys . executable , [string] , [string] ] ) [EOL] print ( [string] % ( os . stat ( so_location ) . st_size ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] cmd = [ [string] , [string] , str ( p . pid ) , [string] , ] [EOL] [EOL] arch = [string] [EOL] if arch : [EOL] cmd . extend ( [ [string] % arch ] ) [EOL] [EOL] cmd . extend ( [ [string] , [string] , [string] , ] ) [EOL] [EOL] cmd . extend ( [ [string] ] ) [EOL] [EOL] [EOL] print ( [string] . join ( cmd ) ) [EOL] time . sleep ( [number] ) [EOL] env = os . environ . copy ( ) [EOL] env . pop ( [string] , None ) [EOL] env . pop ( [string] , None ) [EOL] p2 = subprocess . call ( [string] . join ( cmd ) , env = env , shell = True ) [EOL] [EOL] time . sleep ( [number] ) [EOL] p . kill ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def attach ( port , host ) : [EOL] try : [EOL] import pydevd [EOL] pydevd . stoptrace ( ) [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] pydevd . settrace ( port = port , host = host , stdoutToServer = True , stderrToServer = True , overwrite_prev_trace = True , suspend = False , trace_only_current_thread = False , patch_multiprocessing = False , ) [EOL] except : [EOL] import traceback ; traceback . print_exc ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Optional , Type , Any , List [EOL] from collections import deque [EOL] import typing [EOL] import collections [EOL] [docstring] [EOL] [EOL] from __future__ import with_statement [EOL] [EOL] __revision__ = [string] [EOL] [EOL] __all__ = [ [string] ] [EOL] [EOL] import sys [EOL] from winappdbg import win32 [EOL] from winappdbg import compat [EOL] import collections [EOL] import warnings [EOL] [EOL] [comment] [EOL] [EOL] class _RegistryContainer ( object ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] class __EmptyArgument : [EOL] pass [EOL] __emptyArgument = __EmptyArgument ( ) [EOL] [EOL] def __init__ ( self ) : [EOL] self . __default = None [EOL] [EOL] def has_key ( self , name ) : [EOL] return name in self [EOL] [EOL] def get ( self , name , default = __emptyArgument ) : [EOL] try : [EOL] return self [ name ] [EOL] except KeyError : [EOL] if default is RegistryKey . __emptyArgument : [EOL] return self . __default [EOL] return default [EOL] [EOL] def setdefault ( self , default ) : [EOL] self . __default = default [EOL] [EOL] def __iter__ ( self ) : [EOL] return compat . iterkeys ( self ) [EOL] [EOL] [comment] [EOL] [EOL] class RegistryKey ( _RegistryContainer ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , path , handle ) : [EOL] [docstring] [EOL] super ( RegistryKey , self ) . __init__ ( ) [EOL] if path . endswith ( [string] ) : [EOL] path = path [ : - [number] ] [EOL] self . _path = path [EOL] self . _handle = handle [EOL] [EOL] @ property def path ( self ) : [EOL] return self . _path [EOL] [EOL] @ property def handle ( self ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] return self . _handle [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def __contains__ ( self , name ) : [EOL] try : [EOL] win32 . RegQueryValueEx ( self . handle , name , False ) [EOL] return True [EOL] except WindowsError : [EOL] e = sys . exc_info ( ) [ [number] ] [EOL] if e . winerror == win32 . ERROR_FILE_NOT_FOUND : [EOL] return False [EOL] raise [EOL] [EOL] def __getitem__ ( self , name ) : [EOL] try : [EOL] return win32 . RegQueryValueEx ( self . handle , name ) [ [number] ] [EOL] except WindowsError : [EOL] e = sys . exc_info ( ) [ [number] ] [EOL] if e . winerror == win32 . ERROR_FILE_NOT_FOUND : [EOL] raise KeyError ( name ) [EOL] raise [EOL] [EOL] def __setitem__ ( self , name , value ) : [EOL] win32 . RegSetValueEx ( self . handle , name , value ) [EOL] [EOL] def __delitem__ ( self , name ) : [EOL] win32 . RegDeleteValue ( self . handle , name ) [EOL] [EOL] def iterkeys ( self ) : [EOL] handle = self . handle [EOL] index = [number] [EOL] while [number] : [EOL] resp = win32 . RegEnumValue ( handle , index , False ) [EOL] if resp is None : [EOL] break [EOL] yield resp [ [number] ] [EOL] index += [number] [EOL] [EOL] def itervalues ( self ) : [EOL] handle = self . handle [EOL] index = [number] [EOL] while [number] : [EOL] resp = win32 . RegEnumValue ( handle , index ) [EOL] if resp is None : [EOL] break [EOL] yield resp [ [number] ] [EOL] index += [number] [EOL] [EOL] def iteritems ( self ) : [EOL] handle = self . handle [EOL] index = [number] [EOL] while [number] : [EOL] resp = win32 . RegEnumValue ( handle , index ) [EOL] if resp is None : [EOL] break [EOL] yield resp [ [number] ] , resp [ [number] ] [EOL] index += [number] [EOL] [EOL] def keys ( self ) : [EOL] [comment] [EOL] handle = self . handle [EOL] keys = list ( ) [EOL] index = [number] [EOL] while [number] : [EOL] resp = win32 . RegEnumValue ( handle , index , False ) [EOL] if resp is None : [EOL] break [EOL] keys . append ( resp [ [number] ] ) [EOL] index += [number] [EOL] return keys [EOL] [EOL] def values ( self ) : [EOL] [comment] [EOL] handle = self . handle [EOL] values = list ( ) [EOL] index = [number] [EOL] while [number] : [EOL] resp = win32 . RegEnumValue ( handle , index ) [EOL] if resp is None : [EOL] break [EOL] values . append ( resp [ [number] ] ) [EOL] index += [number] [EOL] return values [EOL] [EOL] def items ( self ) : [EOL] [comment] [EOL] handle = self . handle [EOL] items = list ( ) [EOL] index = [number] [EOL] while [number] : [EOL] resp = win32 . RegEnumValue ( handle , index ) [EOL] if resp is None : [EOL] break [EOL] items . append ( ( resp [ [number] ] , resp [ [number] ] ) ) [EOL] index += [number] [EOL] return items [EOL] [EOL] def get_value_type ( self , name ) : [EOL] [docstring] [EOL] try : [EOL] return win32 . RegQueryValueEx ( self . handle , name ) [ [number] ] [EOL] except WindowsError : [EOL] e = sys . exc_info ( ) [ [number] ] [EOL] if e . winerror == win32 . ERROR_FILE_NOT_FOUND : [EOL] raise KeyError ( name ) [EOL] raise [EOL] [EOL] def clear ( self ) : [EOL] handle = self . handle [EOL] while [number] : [EOL] resp = win32 . RegEnumValue ( handle , [number] , False ) [EOL] if resp is None : [EOL] break [EOL] win32 . RegDeleteValue ( handle , resp [ [number] ] ) [EOL] [EOL] def __str__ ( self ) : [EOL] default = self [ [string] ] [EOL] return str ( default ) [EOL] [EOL] def __unicode__ ( self ) : [EOL] default = self [ [string] ] [EOL] return compat . unicode ( default ) [EOL] [EOL] def __repr__ ( self ) : [EOL] return [string] % self . _path [EOL] [EOL] def iterchildren ( self ) : [EOL] [docstring] [EOL] handle = self . handle [EOL] index = [number] [EOL] while [number] : [EOL] subkey = win32 . RegEnumKey ( handle , index ) [EOL] if subkey is None : [EOL] break [EOL] yield self . child ( subkey ) [EOL] index += [number] [EOL] [EOL] def children ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] handle = self . handle [EOL] result = [ ] [EOL] index = [number] [EOL] while [number] : [EOL] subkey = win32 . RegEnumKey ( handle , index ) [EOL] if subkey is None : [EOL] break [EOL] result . append ( self . child ( subkey ) ) [EOL] index += [number] [EOL] return result [EOL] [EOL] def child ( self , subkey ) : [EOL] [docstring] [EOL] path = self . _path + [string] + subkey [EOL] handle = win32 . RegOpenKey ( self . handle , subkey ) [EOL] return RegistryKey ( path , handle ) [EOL] [EOL] def flush ( self ) : [EOL] [docstring] [EOL] win32 . RegFlushKey ( self . handle ) [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] class Registry ( _RegistryContainer ) : [EOL] [docstring] [EOL] [EOL] _hives_by_name = { [string] : win32 . HKEY_CLASSES_ROOT , [string] : win32 . HKEY_CURRENT_USER , [string] : win32 . HKEY_LOCAL_MACHINE , [string] : win32 . HKEY_USERS , [string] : win32 . HKEY_PERFORMANCE_DATA , [string] : win32 . HKEY_CURRENT_CONFIG , [string] : win32 . HKEY_CLASSES_ROOT , [string] : win32 . HKEY_CURRENT_USER , [string] : win32 . HKEY_LOCAL_MACHINE , [string] : win32 . HKEY_USERS , [string] : win32 . HKEY_PERFORMANCE_DATA , [string] : win32 . HKEY_CURRENT_CONFIG , } [EOL] [EOL] _hives_by_value = { win32 . HKEY_CLASSES_ROOT : [string] , win32 . HKEY_CURRENT_USER : [string] , win32 . HKEY_LOCAL_MACHINE : [string] , win32 . HKEY_USERS : [string] , win32 . HKEY_PERFORMANCE_DATA : [string] , win32 . HKEY_CURRENT_CONFIG : [string] , } [EOL] [EOL] _hives = sorted ( compat . itervalues ( _hives_by_value ) ) [EOL] [EOL] def __init__ ( self , machine = None ) : [EOL] [docstring] [EOL] self . _machine = machine [EOL] self . _remote_hives = { } [EOL] [EOL] @ property def machine ( self ) : [EOL] return self . _machine [EOL] [EOL] def _split_path ( self , path ) : [EOL] [docstring] [EOL] if [string] in path : [EOL] p = path . find ( [string] ) [EOL] hive = path [ : p ] [EOL] path = path [ p + [number] : ] [EOL] else : [EOL] hive = path [EOL] path = None [EOL] handle = self . _hives_by_name [ hive . upper ( ) ] [EOL] return handle , path [EOL] [EOL] def _parse_path ( self , path ) : [EOL] [docstring] [EOL] handle , path = self . _split_path ( path ) [EOL] if self . _machine is not None : [EOL] handle = self . _connect_hive ( handle ) [EOL] return handle , path [EOL] [EOL] def _join_path ( self , hive , subkey ) : [EOL] [docstring] [EOL] path = self . _hives_by_value [ hive ] [EOL] if subkey : [EOL] path = path + [string] + subkey [EOL] return path [EOL] [EOL] def _sanitize_path ( self , path ) : [EOL] [docstring] [EOL] return self . _join_path ( * self . _split_path ( path ) ) [EOL] [EOL] def _connect_hive ( self , hive ) : [EOL] [docstring] [EOL] try : [EOL] handle = self . _remote_hives [ hive ] [EOL] except KeyError : [EOL] handle = win32 . RegConnectRegistry ( self . _machine , hive ) [EOL] self . _remote_hives [ hive ] = handle [EOL] return handle [EOL] [EOL] def close ( self ) : [EOL] [docstring] [EOL] while self . _remote_hives : [EOL] hive = self . _remote_hives . popitem ( ) [ [number] ] [EOL] try : [EOL] hive . close ( ) [EOL] except Exception : [EOL] try : [EOL] e = sys . exc_info ( ) [ [number] ] [EOL] msg = [string] [EOL] msg %= ( hive . value , str ( e ) ) [EOL] warnings . warn ( msg ) [EOL] except Exception : [EOL] pass [EOL] [EOL] def __enter__ ( self ) : [EOL] return self [EOL] [EOL] def __exit__ ( self , exc_type , exc_value , traceback ) : [EOL] self . close ( ) [EOL] [EOL] def __repr__ ( self ) : [EOL] if self . _machine : [EOL] return [string] % self . _machine [EOL] return [string] [EOL] [EOL] def __contains__ ( self , path ) : [EOL] hive , subpath = self . _parse_path ( path ) [EOL] try : [EOL] with win32 . RegOpenKey ( hive , subpath ) : [EOL] return True [EOL] except WindowsError : [EOL] e = sys . exc_info ( ) [ [number] ] [EOL] if e . winerror == win32 . ERROR_FILE_NOT_FOUND : [EOL] return False [EOL] raise [EOL] [EOL] def __getitem__ ( self , path ) : [EOL] path = self . _sanitize_path ( path ) [EOL] hive , subpath = self . _parse_path ( path ) [EOL] try : [EOL] handle = win32 . RegOpenKey ( hive , subpath ) [EOL] except WindowsError : [EOL] e = sys . exc_info ( ) [ [number] ] [EOL] if e . winerror == win32 . ERROR_FILE_NOT_FOUND : [EOL] raise KeyError ( path ) [EOL] raise [EOL] return RegistryKey ( path , handle ) [EOL] [EOL] def __setitem__ ( self , path , value ) : [EOL] do_copy = isinstance ( value , RegistryKey ) [EOL] if not do_copy and not isinstance ( value , str ) \ [EOL] and not isinstance ( value , compat . unicode ) : [EOL] if isinstance ( value , object ) : [EOL] t = value . __class__ . __name__ [EOL] else : [EOL] t = type ( value ) [EOL] raise TypeError ( [string] % t ) [EOL] hive , subpath = self . _parse_path ( path ) [EOL] with win32 . RegCreateKey ( hive , subpath ) as handle : [EOL] if do_copy : [EOL] win32 . RegCopyTree ( value . handle , None , handle ) [EOL] else : [EOL] win32 . RegSetValueEx ( handle , None , value ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] def __delitem__ ( self , path ) : [EOL] hive , subpath = self . _parse_path ( path ) [EOL] if not subpath : [EOL] raise TypeError ( [string] [string] ) [EOL] try : [EOL] win32 . RegDeleteTree ( hive , subpath ) [EOL] except WindowsError : [EOL] e = sys . exc_info ( ) [ [number] ] [EOL] if e . winerror == win32 . ERROR_FILE_NOT_FOUND : [EOL] raise KeyError ( path ) [EOL] raise [EOL] [EOL] def create ( self , path ) : [EOL] [docstring] [EOL] path = self . _sanitize_path ( path ) [EOL] hive , subpath = self . _parse_path ( path ) [EOL] handle = win32 . RegCreateKey ( hive , subpath ) [EOL] return RegistryKey ( path , handle ) [EOL] [EOL] def subkeys ( self , path ) : [EOL] [docstring] [EOL] result = list ( ) [EOL] hive , subpath = self . _parse_path ( path ) [EOL] with win32 . RegOpenKey ( hive , subpath ) as handle : [EOL] index = [number] [EOL] while [number] : [EOL] name = win32 . RegEnumKey ( handle , index ) [EOL] if name is None : [EOL] break [EOL] result . append ( name ) [EOL] index += [number] [EOL] return result [EOL] [EOL] def iterate ( self , path ) : [EOL] [docstring] [EOL] if path . endswith ( [string] ) : [EOL] path = path [ : - [number] ] [EOL] if not self . has_key ( path ) : [EOL] raise KeyError ( path ) [EOL] stack = collections . deque ( ) [EOL] stack . appendleft ( path ) [EOL] return self . __iterate ( stack ) [EOL] [EOL] def iterkeys ( self ) : [EOL] [docstring] [EOL] stack = collections . deque ( self . _hives ) [EOL] stack . reverse ( ) [EOL] return self . __iterate ( stack ) [EOL] [EOL] def __iterate ( self , stack ) : [EOL] while stack : [EOL] path = stack . popleft ( ) [EOL] yield path [EOL] try : [EOL] subkeys = self . subkeys ( path ) [EOL] except WindowsError : [EOL] continue [EOL] prefix = path + [string] [EOL] subkeys = [ prefix + name for name in subkeys ] [EOL] stack . extendleft ( subkeys ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.BaseException]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.BaseException]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.BaseException]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.BaseException]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.BaseException]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.BaseException]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 $None$ 0 0 $typing.Any$ 0 $None$ 0 0 0 0 0 0 $typing.Any$ 0 $None$ 0 0 $typing.Any$ 0 0 $None$ 0 $None$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $None$ 0 $None$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.BaseException]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Optional[builtins.BaseException]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.BaseException]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.BaseException]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.BaseException]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.BaseException]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.BaseException]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.BaseException]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 $collections.deque[typing.Any]$ 0 0 0 0 0 0 0 $collections.deque[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $collections.deque[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $collections.deque[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $collections.deque[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $collections.deque[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0
[comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Optional , Any , List [EOL] import typing [EOL] import io [EOL] [docstring] [EOL] [EOL] __revision__ = [string] [EOL] [EOL] __all__ = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] import sys [EOL] from winappdbg import win32 [EOL] from winappdbg import compat [EOL] from winappdbg . util import StaticClass [EOL] [EOL] import re [EOL] import time [EOL] import struct [EOL] import traceback [EOL] [EOL] [comment] [EOL] [EOL] class HexInput ( StaticClass ) : [EOL] [docstring] [EOL] [EOL] @ staticmethod def integer ( token ) : [EOL] [docstring] [EOL] token = token . strip ( ) [EOL] neg = False [EOL] if token . startswith ( compat . b ( [string] ) ) : [EOL] token = token [ [number] : ] [EOL] neg = True [EOL] if token . startswith ( compat . b ( [string] ) ) : [EOL] result = int ( token , [number] ) [comment] [EOL] elif token . startswith ( compat . b ( [string] ) ) : [EOL] result = int ( token [ [number] : ] , [number] ) [comment] [EOL] elif token . startswith ( compat . b ( [string] ) ) : [EOL] result = int ( token , [number] ) [comment] [EOL] else : [EOL] try : [EOL] result = int ( token ) [comment] [EOL] except ValueError : [EOL] result = int ( token , [number] ) [comment] [EOL] if neg : [EOL] result = - result [EOL] return result [EOL] [EOL] @ staticmethod def address ( token ) : [EOL] [docstring] [EOL] return int ( token , [number] ) [EOL] [EOL] @ staticmethod def hexadecimal ( token ) : [EOL] [docstring] [EOL] token = [string] . join ( [ c for c in token if c . isalnum ( ) ] ) [EOL] if len ( token ) % [number] != [number] : [EOL] raise ValueError ( [string] ) [EOL] data = [string] [EOL] for i in compat . xrange ( [number] , len ( token ) , [number] ) : [EOL] x = token [ i : i + [number] ] [EOL] d = int ( x , [number] ) [EOL] s = struct . pack ( [string] , d ) [EOL] data += s [EOL] return data [EOL] [EOL] @ staticmethod def pattern ( token ) : [EOL] [docstring] [EOL] token = [string] . join ( [ c for c in token if c == [string] or c . isalnum ( ) ] ) [EOL] if len ( token ) % [number] != [number] : [EOL] raise ValueError ( [string] ) [EOL] regexp = [string] [EOL] for i in compat . xrange ( [number] , len ( token ) , [number] ) : [EOL] x = token [ i : i + [number] ] [EOL] if x == [string] : [EOL] regexp += [string] [EOL] elif x [ [number] ] == [string] : [EOL] f = [string] % x [ [number] ] [EOL] x = [string] . join ( [ f % c for c in compat . xrange ( [number] , [number] ) ] ) [EOL] regexp = [string] % ( regexp , x ) [EOL] elif x [ [number] ] == [string] : [EOL] f = [string] % x [ [number] ] [EOL] x = [string] . join ( [ f % c for c in compat . xrange ( [number] , [number] ) ] ) [EOL] regexp = [string] % ( regexp , x ) [EOL] else : [EOL] regexp = [string] % ( regexp , x ) [EOL] return regexp [EOL] [EOL] @ staticmethod def is_pattern ( token ) : [EOL] [docstring] [EOL] return re . match ( [string] , token ) [EOL] [EOL] @ classmethod def integer_list_file ( cls , filename ) : [EOL] [docstring] [EOL] count = [number] [EOL] result = list ( ) [EOL] fd = open ( filename , [string] ) [EOL] for line in fd : [EOL] count = count + [number] [EOL] if [string] in line : [EOL] line = line [ : line . find ( [string] ) ] [EOL] line = line . strip ( ) [EOL] if line : [EOL] try : [EOL] value = cls . integer ( line ) [EOL] except ValueError : [EOL] e = sys . exc_info ( ) [ [number] ] [EOL] msg = [string] [EOL] msg = msg % ( count , filename , str ( e ) ) [EOL] raise ValueError ( msg ) [EOL] result . append ( value ) [EOL] return result [EOL] [EOL] @ classmethod def string_list_file ( cls , filename ) : [EOL] [docstring] [EOL] count = [number] [EOL] result = list ( ) [EOL] fd = open ( filename , [string] ) [EOL] for line in fd : [EOL] count = count + [number] [EOL] if [string] in line : [EOL] line = line [ : line . find ( [string] ) ] [EOL] line = line . strip ( ) [EOL] if line : [EOL] result . append ( line ) [EOL] return result [EOL] [EOL] @ classmethod def mixed_list_file ( cls , filename ) : [EOL] [docstring] [EOL] count = [number] [EOL] result = list ( ) [EOL] fd = open ( filename , [string] ) [EOL] for line in fd : [EOL] count = count + [number] [EOL] if [string] in line : [EOL] line = line [ : line . find ( [string] ) ] [EOL] line = line . strip ( ) [EOL] if line : [EOL] try : [EOL] value = cls . integer ( line ) [EOL] except ValueError : [EOL] value = line [EOL] result . append ( value ) [EOL] return result [EOL] [EOL] [comment] [EOL] [EOL] class HexOutput ( StaticClass ) : [EOL] [docstring] [EOL] [EOL] integer_size = ( win32 . SIZEOF ( win32 . DWORD ) * [number] ) + [number] [EOL] address_size = ( win32 . SIZEOF ( win32 . SIZE_T ) * [number] ) + [number] [EOL] [EOL] @ classmethod def integer ( cls , integer , bits = None ) : [EOL] [docstring] [EOL] if bits is None : [EOL] integer_size = cls . integer_size [EOL] else : [EOL] integer_size = ( bits / [number] ) + [number] [EOL] if integer >= [number] : [EOL] return ( [string] % ( integer_size - [number] ) ) % integer [EOL] return ( [string] % ( integer_size - [number] ) ) % - integer [EOL] [EOL] @ classmethod def address ( cls , address , bits = None ) : [EOL] [docstring] [EOL] if bits is None : [EOL] address_size = cls . address_size [EOL] bits = win32 . bits [EOL] else : [EOL] address_size = ( bits / [number] ) + [number] [EOL] if address < [number] : [EOL] address = ( ( [number] ** bits ) - [number] ) ^ ~ address [EOL] return ( [string] % ( address_size - [number] ) ) % address [EOL] [EOL] @ staticmethod def hexadecimal ( data ) : [EOL] [docstring] [EOL] return HexDump . hexadecimal ( data , separator = [string] ) [EOL] [EOL] @ classmethod def integer_list_file ( cls , filename , values , bits = None ) : [EOL] [docstring] [EOL] fd = open ( filename , [string] ) [EOL] for integer in values : [EOL] print >> fd , cls . integer ( integer , bits ) [EOL] fd . close ( ) [EOL] [EOL] @ classmethod def string_list_file ( cls , filename , values ) : [EOL] [docstring] [EOL] fd = open ( filename , [string] ) [EOL] for string in values : [EOL] print >> fd , string [EOL] fd . close ( ) [EOL] [EOL] @ classmethod def mixed_list_file ( cls , filename , values , bits ) : [EOL] [docstring] [EOL] fd = open ( filename , [string] ) [EOL] for original in values : [EOL] try : [EOL] parsed = cls . integer ( original , bits ) [EOL] except TypeError : [EOL] parsed = repr ( original ) [EOL] print >> fd , parsed [EOL] fd . close ( ) [EOL] [EOL] [comment] [EOL] [EOL] class HexDump ( StaticClass ) : [EOL] [docstring] [EOL] [EOL] integer_size = ( win32 . SIZEOF ( win32 . DWORD ) * [number] ) [EOL] address_size = ( win32 . SIZEOF ( win32 . SIZE_T ) * [number] ) [EOL] [EOL] @ classmethod def integer ( cls , integer , bits = None ) : [EOL] [docstring] [EOL] if bits is None : [EOL] integer_size = cls . integer_size [EOL] else : [EOL] integer_size = bits / [number] [EOL] return ( [string] % integer_size ) % integer [EOL] [EOL] @ classmethod def address ( cls , address , bits = None ) : [EOL] [docstring] [EOL] if bits is None : [EOL] address_size = cls . address_size [EOL] bits = win32 . bits [EOL] else : [EOL] address_size = bits / [number] [EOL] if address < [number] : [EOL] address = ( ( [number] ** bits ) - [number] ) ^ ~ address [EOL] return ( [string] % address_size ) % address [EOL] [EOL] @ staticmethod def printable ( data ) : [EOL] [docstring] [EOL] result = [string] [EOL] for c in data : [EOL] if [number] < ord ( c ) < [number] : [EOL] result += c [EOL] else : [EOL] result += [string] [EOL] return result [EOL] [EOL] @ staticmethod def hexadecimal ( data , separator = [string] ) : [EOL] [docstring] [EOL] return separator . join ( [ [string] % ord ( c ) for c in data ] ) [EOL] [EOL] @ staticmethod def hexa_word ( data , separator = [string] ) : [EOL] [docstring] [EOL] if len ( data ) & [number] != [number] : [EOL] data += [string] [EOL] return separator . join ( [ [string] % struct . unpack ( [string] , data [ i : i + [number] ] ) [ [number] ] for i in compat . xrange ( [number] , len ( data ) , [number] ) ] ) [EOL] [EOL] @ staticmethod def hexa_dword ( data , separator = [string] ) : [EOL] [docstring] [EOL] if len ( data ) & [number] != [number] : [EOL] data += [string] * ( [number] - ( len ( data ) & [number] ) ) [EOL] return separator . join ( [ [string] % struct . unpack ( [string] , data [ i : i + [number] ] ) [ [number] ] for i in compat . xrange ( [number] , len ( data ) , [number] ) ] ) [EOL] [EOL] @ staticmethod def hexa_qword ( data , separator = [string] ) : [EOL] [docstring] [EOL] if len ( data ) & [number] != [number] : [EOL] data += [string] * ( [number] - ( len ( data ) & [number] ) ) [EOL] return separator . join ( [ [string] % struct . unpack ( [string] , data [ i : i + [number] ] ) [ [number] ] for i in compat . xrange ( [number] , len ( data ) , [number] ) ] ) [EOL] [EOL] @ classmethod def hexline ( cls , data , separator = [string] , width = None ) : [EOL] [docstring] [EOL] if width is None : [EOL] fmt = [string] [EOL] else : [EOL] fmt = [string] % ( ( len ( separator ) + [number] ) * width - [number] , width ) [EOL] return fmt % ( cls . hexadecimal ( data , separator ) , cls . printable ( data ) ) [EOL] [EOL] @ classmethod def hexblock ( cls , data , address = None , bits = None , separator = [string] , width = [number] ) : [EOL] [docstring] [EOL] return cls . hexblock_cb ( cls . hexline , data , address , bits , width , cb_kwargs = { [string] : width , [string] : separator } ) [EOL] [EOL] @ classmethod def hexblock_cb ( cls , callback , data , address = None , bits = None , width = [number] , cb_args = ( ) , cb_kwargs = { } ) : [EOL] [docstring] [EOL] result = [string] [EOL] if address is None : [EOL] for i in compat . xrange ( [number] , len ( data ) , width ) : [EOL] result = [string] % ( result , callback ( data [ i : i + width ] , * cb_args , ** cb_kwargs ) ) [EOL] else : [EOL] for i in compat . xrange ( [number] , len ( data ) , width ) : [EOL] result = [string] % ( result , cls . address ( address , bits ) , callback ( data [ i : i + width ] , * cb_args , ** cb_kwargs ) ) [EOL] address += width [EOL] return result [EOL] [EOL] @ classmethod def hexblock_byte ( cls , data , address = None , bits = None , separator = [string] , width = [number] ) : [EOL] [docstring] [EOL] return cls . hexblock_cb ( cls . hexadecimal , data , address , bits , width , cb_kwargs = { [string] : separator } ) [EOL] [EOL] @ classmethod def hexblock_word ( cls , data , address = None , bits = None , separator = [string] , width = [number] ) : [EOL] [docstring] [EOL] return cls . hexblock_cb ( cls . hexa_word , data , address , bits , width * [number] , cb_kwargs = { [string] : separator } ) [EOL] [EOL] @ classmethod def hexblock_dword ( cls , data , address = None , bits = None , separator = [string] , width = [number] ) : [EOL] [docstring] [EOL] return cls . hexblock_cb ( cls . hexa_dword , data , address , bits , width * [number] , cb_kwargs = { [string] : separator } ) [EOL] [EOL] @ classmethod def hexblock_qword ( cls , data , address = None , bits = None , separator = [string] , width = [number] ) : [EOL] [docstring] [EOL] return cls . hexblock_cb ( cls . hexa_qword , data , address , bits , width * [number] , cb_kwargs = { [string] : separator } ) [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] class Color ( object ) : [EOL] [docstring] [EOL] [EOL] @ staticmethod def _get_text_attributes ( ) : [EOL] return win32 . GetConsoleScreenBufferInfo ( ) . wAttributes [EOL] [EOL] @ staticmethod def _set_text_attributes ( wAttributes ) : [EOL] win32 . SetConsoleTextAttribute ( wAttributes = wAttributes ) [EOL] [EOL] [comment] [EOL] [EOL] @ classmethod def can_use_colors ( cls ) : [EOL] [docstring] [EOL] try : [EOL] cls . _get_text_attributes ( ) [EOL] return True [EOL] except Exception : [EOL] return False [EOL] [EOL] @ classmethod def reset ( cls ) : [EOL] [docstring] [EOL] cls . _set_text_attributes ( win32 . FOREGROUND_GREY ) [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] @ classmethod def default ( cls ) : [EOL] [docstring] [EOL] wAttributes = cls . _get_text_attributes ( ) [EOL] wAttributes &= ~ win32 . FOREGROUND_MASK [EOL] wAttributes |= win32 . FOREGROUND_GREY [EOL] wAttributes &= ~ win32 . FOREGROUND_INTENSITY [EOL] cls . _set_text_attributes ( wAttributes ) [EOL] [EOL] @ classmethod def light ( cls ) : [EOL] [docstring] [EOL] wAttributes = cls . _get_text_attributes ( ) [EOL] wAttributes |= win32 . FOREGROUND_INTENSITY [EOL] cls . _set_text_attributes ( wAttributes ) [EOL] [EOL] @ classmethod def dark ( cls ) : [EOL] [docstring] [EOL] wAttributes = cls . _get_text_attributes ( ) [EOL] wAttributes &= ~ win32 . FOREGROUND_INTENSITY [EOL] cls . _set_text_attributes ( wAttributes ) [EOL] [EOL] @ classmethod def black ( cls ) : [EOL] [docstring] [EOL] wAttributes = cls . _get_text_attributes ( ) [EOL] wAttributes &= ~ win32 . FOREGROUND_MASK [EOL] [comment] [EOL] cls . _set_text_attributes ( wAttributes ) [EOL] [EOL] @ classmethod def white ( cls ) : [EOL] [docstring] [EOL] wAttributes = cls . _get_text_attributes ( ) [EOL] wAttributes &= ~ win32 . FOREGROUND_MASK [EOL] wAttributes |= win32 . FOREGROUND_GREY [EOL] cls . _set_text_attributes ( wAttributes ) [EOL] [EOL] @ classmethod def red ( cls ) : [EOL] [docstring] [EOL] wAttributes = cls . _get_text_attributes ( ) [EOL] wAttributes &= ~ win32 . FOREGROUND_MASK [EOL] wAttributes |= win32 . FOREGROUND_RED [EOL] cls . _set_text_attributes ( wAttributes ) [EOL] [EOL] @ classmethod def green ( cls ) : [EOL] [docstring] [EOL] wAttributes = cls . _get_text_attributes ( ) [EOL] wAttributes &= ~ win32 . FOREGROUND_MASK [EOL] wAttributes |= win32 . FOREGROUND_GREEN [EOL] cls . _set_text_attributes ( wAttributes ) [EOL] [EOL] @ classmethod def blue ( cls ) : [EOL] [docstring] [EOL] wAttributes = cls . _get_text_attributes ( ) [EOL] wAttributes &= ~ win32 . FOREGROUND_MASK [EOL] wAttributes |= win32 . FOREGROUND_BLUE [EOL] cls . _set_text_attributes ( wAttributes ) [EOL] [EOL] @ classmethod def cyan ( cls ) : [EOL] [docstring] [EOL] wAttributes = cls . _get_text_attributes ( ) [EOL] wAttributes &= ~ win32 . FOREGROUND_MASK [EOL] wAttributes |= win32 . FOREGROUND_CYAN [EOL] cls . _set_text_attributes ( wAttributes ) [EOL] [EOL] @ classmethod def magenta ( cls ) : [EOL] [docstring] [EOL] wAttributes = cls . _get_text_attributes ( ) [EOL] wAttributes &= ~ win32 . FOREGROUND_MASK [EOL] wAttributes |= win32 . FOREGROUND_MAGENTA [EOL] cls . _set_text_attributes ( wAttributes ) [EOL] [EOL] @ classmethod def yellow ( cls ) : [EOL] [docstring] [EOL] wAttributes = cls . _get_text_attributes ( ) [EOL] wAttributes &= ~ win32 . FOREGROUND_MASK [EOL] wAttributes |= win32 . FOREGROUND_YELLOW [EOL] cls . _set_text_attributes ( wAttributes ) [EOL] [EOL] [comment] [EOL] [EOL] @ classmethod def bk_default ( cls ) : [EOL] [docstring] [EOL] wAttributes = cls . _get_text_attributes ( ) [EOL] wAttributes &= ~ win32 . BACKGROUND_MASK [EOL] [comment] [EOL] wAttributes &= ~ win32 . BACKGROUND_INTENSITY [EOL] cls . _set_text_attributes ( wAttributes ) [EOL] [EOL] @ classmethod def bk_light ( cls ) : [EOL] [docstring] [EOL] wAttributes = cls . _get_text_attributes ( ) [EOL] wAttributes |= win32 . BACKGROUND_INTENSITY [EOL] cls . _set_text_attributes ( wAttributes ) [EOL] [EOL] @ classmethod def bk_dark ( cls ) : [EOL] [docstring] [EOL] wAttributes = cls . _get_text_attributes ( ) [EOL] wAttributes &= ~ win32 . BACKGROUND_INTENSITY [EOL] cls . _set_text_attributes ( wAttributes ) [EOL] [EOL] @ classmethod def bk_black ( cls ) : [EOL] [docstring] [EOL] wAttributes = cls . _get_text_attributes ( ) [EOL] wAttributes &= ~ win32 . BACKGROUND_MASK [EOL] [comment] [EOL] cls . _set_text_attributes ( wAttributes ) [EOL] [EOL] @ classmethod def bk_white ( cls ) : [EOL] [docstring] [EOL] wAttributes = cls . _get_text_attributes ( ) [EOL] wAttributes &= ~ win32 . BACKGROUND_MASK [EOL] wAttributes |= win32 . BACKGROUND_GREY [EOL] cls . _set_text_attributes ( wAttributes ) [EOL] [EOL] @ classmethod def bk_red ( cls ) : [EOL] [docstring] [EOL] wAttributes = cls . _get_text_attributes ( ) [EOL] wAttributes &= ~ win32 . BACKGROUND_MASK [EOL] wAttributes |= win32 . BACKGROUND_RED [EOL] cls . _set_text_attributes ( wAttributes ) [EOL] [EOL] @ classmethod def bk_green ( cls ) : [EOL] [docstring] [EOL] wAttributes = cls . _get_text_attributes ( ) [EOL] wAttributes &= ~ win32 . BACKGROUND_MASK [EOL] wAttributes |= win32 . BACKGROUND_GREEN [EOL] cls . _set_text_attributes ( wAttributes ) [EOL] [EOL] @ classmethod def bk_blue ( cls ) : [EOL] [docstring] [EOL] wAttributes = cls . _get_text_attributes ( ) [EOL] wAttributes &= ~ win32 . BACKGROUND_MASK [EOL] wAttributes |= win32 . BACKGROUND_BLUE [EOL] cls . _set_text_attributes ( wAttributes ) [EOL] [EOL] @ classmethod def bk_cyan ( cls ) : [EOL] [docstring] [EOL] wAttributes = cls . _get_text_attributes ( ) [EOL] wAttributes &= ~ win32 . BACKGROUND_MASK [EOL] wAttributes |= win32 . BACKGROUND_CYAN [EOL] cls . _set_text_attributes ( wAttributes ) [EOL] [EOL] @ classmethod def bk_magenta ( cls ) : [EOL] [docstring] [EOL] wAttributes = cls . _get_text_attributes ( ) [EOL] wAttributes &= ~ win32 . BACKGROUND_MASK [EOL] wAttributes |= win32 . BACKGROUND_MAGENTA [EOL] cls . _set_text_attributes ( wAttributes ) [EOL] [EOL] @ classmethod def bk_yellow ( cls ) : [EOL] [docstring] [EOL] wAttributes = cls . _get_text_attributes ( ) [EOL] wAttributes &= ~ win32 . BACKGROUND_MASK [EOL] wAttributes |= win32 . BACKGROUND_YELLOW [EOL] cls . _set_text_attributes ( wAttributes ) [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] class Table ( object ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , sep = [string] ) : [EOL] [docstring] [EOL] self . __cols = list ( ) [EOL] self . __width = list ( ) [EOL] self . __sep = sep [EOL] [EOL] def addRow ( self , * row ) : [EOL] [docstring] [EOL] row = [ str ( item ) for item in row ] [EOL] len_row = [ len ( item ) for item in row ] [EOL] width = self . __width [EOL] len_old = len ( width ) [EOL] len_new = len ( row ) [EOL] known = min ( len_old , len_new ) [EOL] missing = len_new - len_old [EOL] if missing > [number] : [EOL] width . extend ( len_row [ - missing : ] ) [EOL] elif missing < [number] : [EOL] len_row . extend ( [ [number] ] * ( - missing ) ) [EOL] self . __width = [ max ( width [ i ] , len_row [ i ] ) for i in compat . xrange ( len ( len_row ) ) ] [EOL] self . __cols . append ( row ) [EOL] [EOL] def justify ( self , column , direction ) : [EOL] [docstring] [EOL] if direction == - [number] : [EOL] self . __width [ column ] = abs ( self . __width [ column ] ) [EOL] elif direction == [number] : [EOL] self . __width [ column ] = - abs ( self . __width [ column ] ) [EOL] else : [EOL] raise ValueError ( [string] ) [EOL] [EOL] def getWidth ( self ) : [EOL] [docstring] [EOL] width = [number] [EOL] if self . __width : [EOL] width = sum ( abs ( x ) for x in self . __width ) [EOL] width = width + len ( self . __width ) * len ( self . __sep ) + [number] [EOL] return width [EOL] [EOL] def getOutput ( self ) : [EOL] [docstring] [EOL] return [string] % [string] . join ( self . yieldOutput ( ) ) [EOL] [EOL] def yieldOutput ( self ) : [EOL] [docstring] [EOL] width = self . __width [EOL] if width : [EOL] num_cols = len ( width ) [EOL] fmt = [ [string] % - w for w in width ] [EOL] if width [ - [number] ] > [number] : [EOL] fmt [ - [number] ] = [string] [EOL] fmt = self . __sep . join ( fmt ) [EOL] for row in self . __cols : [EOL] row . extend ( [ [string] ] * ( num_cols - len ( row ) ) ) [EOL] yield fmt % tuple ( row ) [EOL] [EOL] def show ( self ) : [EOL] [docstring] [EOL] print ( self . getOutput ( ) ) [EOL] [EOL] [comment] [EOL] [EOL] class CrashDump ( StaticClass ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] reg_template = { win32 . ARCH_I386 : ( [string] [string] [string] ) , win32 . ARCH_AMD64 : ( [string] [string] [string] [string] [string] [string] [string] [string] ) , } [EOL] [EOL] @ staticmethod def dump_flags ( efl ) : [EOL] [docstring] [EOL] if efl is None : [EOL] return [string] [EOL] efl_dump = [string] % ( ( efl & [number] ) >> [number] ) [EOL] if efl & [number] : [EOL] efl_dump += [string] [EOL] else : [EOL] efl_dump += [string] [EOL] if efl & [number] : [EOL] efl_dump += [string] [EOL] else : [EOL] efl_dump += [string] [EOL] [comment] [EOL] if efl & [number] : [EOL] efl_dump += [string] [comment] [EOL] else : [EOL] efl_dump += [string] [comment] [EOL] if efl & [number] : [EOL] efl_dump += [string] [comment] [EOL] else : [EOL] efl_dump += [string] [comment] [EOL] if efl & [number] : [EOL] efl_dump += [string] [comment] [EOL] else : [EOL] efl_dump += [string] [comment] [EOL] [comment] [EOL] if efl & [number] : [EOL] efl_dump += [string] [comment] [EOL] else : [EOL] efl_dump += [string] [comment] [EOL] if efl & [number] : [EOL] efl_dump += [string] [comment] [EOL] else : [EOL] efl_dump += [string] [comment] [EOL] if efl & [number] : [EOL] efl_dump += [string] [comment] [EOL] else : [EOL] efl_dump += [string] [comment] [EOL] [comment] [EOL] if efl & [number] : [EOL] efl_dump += [string] [comment] [EOL] else : [EOL] efl_dump += [string] [comment] [EOL] [comment] [EOL] if efl & [number] : [EOL] efl_dump += [string] [comment] [EOL] else : [EOL] efl_dump += [string] [comment] [EOL] return efl_dump [EOL] [EOL] @ classmethod def dump_registers ( cls , registers , arch = None ) : [EOL] [docstring] [EOL] if registers is None : [EOL] return [string] [EOL] if arch is None : [EOL] if [string] in registers : [EOL] arch = win32 . ARCH_I386 [EOL] elif [string] in registers : [EOL] arch = win32 . ARCH_AMD64 [EOL] else : [EOL] arch = [string] [EOL] if arch not in cls . reg_template : [EOL] msg = [string] [EOL] raise NotImplementedError ( msg % arch ) [EOL] registers = registers . copy ( ) [EOL] registers [ [string] ] = cls . dump_flags ( registers [ [string] ] ) [EOL] return cls . reg_template [ arch ] % registers [EOL] [EOL] @ staticmethod def dump_registers_peek ( registers , data , separator = [string] , width = [number] ) : [EOL] [docstring] [EOL] if None in ( registers , data ) : [EOL] return [string] [EOL] names = compat . keys ( data ) [EOL] names . sort ( ) [EOL] result = [string] [EOL] for reg_name in names : [EOL] tag = reg_name . lower ( ) [EOL] dumped = HexDump . hexline ( data [ reg_name ] , separator , width ) [EOL] result += [string] % ( tag , dumped ) [EOL] return result [EOL] [EOL] @ staticmethod def dump_data_peek ( data , base = [number] , separator = [string] , width = [number] , bits = None ) : [EOL] [docstring] [EOL] if data is None : [EOL] return [string] [EOL] pointers = compat . keys ( data ) [EOL] pointers . sort ( ) [EOL] result = [string] [EOL] for offset in pointers : [EOL] dumped = HexDump . hexline ( data [ offset ] , separator , width ) [EOL] address = HexDump . address ( base + offset , bits ) [EOL] result += [string] % ( address , dumped ) [EOL] return result [EOL] [EOL] @ staticmethod def dump_stack_peek ( data , separator = [string] , width = [number] , arch = None ) : [EOL] [docstring] [EOL] if data is None : [EOL] return [string] [EOL] if arch is None : [EOL] arch = win32 . arch [EOL] pointers = compat . keys ( data ) [EOL] pointers . sort ( ) [EOL] result = [string] [EOL] if pointers : [EOL] if arch == win32 . ARCH_I386 : [EOL] spreg = [string] [EOL] elif arch == win32 . ARCH_AMD64 : [EOL] spreg = [string] [EOL] else : [EOL] spreg = [string] [comment] [EOL] tag_fmt = [string] % ( spreg , len ( [string] % pointers [ - [number] ] ) ) [EOL] for offset in pointers : [EOL] dumped = HexDump . hexline ( data [ offset ] , separator , width ) [EOL] tag = tag_fmt % offset [EOL] result += [string] % ( tag , dumped ) [EOL] return result [EOL] [EOL] @ staticmethod def dump_stack_trace ( stack_trace , bits = None ) : [EOL] [docstring] [EOL] if not stack_trace : [EOL] return [string] [EOL] table = Table ( ) [EOL] table . addRow ( [string] , [string] , [string] ) [EOL] for ( fp , ra , mod ) in stack_trace : [EOL] fp_d = HexDump . address ( fp , bits ) [EOL] ra_d = HexDump . address ( ra , bits ) [EOL] table . addRow ( fp_d , ra_d , mod ) [EOL] return table . getOutput ( ) [EOL] [EOL] @ staticmethod def dump_stack_trace_with_labels ( stack_trace , bits = None ) : [EOL] [docstring] [EOL] if not stack_trace : [EOL] return [string] [EOL] table = Table ( ) [EOL] table . addRow ( [string] , [string] ) [EOL] for ( fp , label ) in stack_trace : [EOL] table . addRow ( HexDump . address ( fp , bits ) , label ) [EOL] return table . getOutput ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] @ staticmethod def dump_code ( disassembly , pc = None , bLowercase = True , bits = None ) : [EOL] [docstring] [EOL] if not disassembly : [EOL] return [string] [EOL] table = Table ( sep = [string] ) [EOL] for ( addr , size , code , dump ) in disassembly : [EOL] if bLowercase : [EOL] code = code . lower ( ) [EOL] if addr == pc : [EOL] addr = [string] % HexDump . address ( addr , bits ) [EOL] else : [EOL] addr = [string] % HexDump . address ( addr , bits ) [EOL] table . addRow ( addr , dump , code ) [EOL] table . justify ( [number] , [number] ) [EOL] return table . getOutput ( ) [EOL] [EOL] @ staticmethod def dump_code_line ( disassembly_line , bShowAddress = True , bShowDump = True , bLowercase = True , dwDumpWidth = None , dwCodeWidth = None , bits = None ) : [EOL] [docstring] [EOL] if bits is None : [EOL] address_size = HexDump . address_size [EOL] else : [EOL] address_size = bits / [number] [EOL] ( addr , size , code , dump ) = disassembly_line [EOL] dump = dump . replace ( [string] , [string] ) [EOL] result = list ( ) [EOL] fmt = [string] [EOL] if bShowAddress : [EOL] result . append ( HexDump . address ( addr , bits ) ) [EOL] fmt += [string] % address_size [EOL] if bShowDump : [EOL] result . append ( dump ) [EOL] if dwDumpWidth : [EOL] fmt += [string] % dwDumpWidth [EOL] else : [EOL] fmt += [string] [EOL] if bLowercase : [EOL] code = code . lower ( ) [EOL] result . append ( code ) [EOL] if dwCodeWidth : [EOL] fmt += [string] % dwCodeWidth [EOL] else : [EOL] fmt += [string] [EOL] return fmt % tuple ( result ) [EOL] [EOL] @ staticmethod def dump_memory_map ( memoryMap , mappedFilenames = None , bits = None ) : [EOL] [docstring] [EOL] if not memoryMap : [EOL] return [string] [EOL] [EOL] table = Table ( ) [EOL] if mappedFilenames : [EOL] table . addRow ( [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] else : [EOL] table . addRow ( [string] , [string] , [string] , [string] , [string] ) [EOL] [EOL] [comment] [EOL] for mbi in memoryMap : [EOL] [EOL] [comment] [EOL] BaseAddress = HexDump . address ( mbi . BaseAddress , bits ) [EOL] RegionSize = HexDump . address ( mbi . RegionSize , bits ) [EOL] [EOL] [comment] [EOL] mbiState = mbi . State [EOL] if mbiState == win32 . MEM_RESERVE : [EOL] State = [string] [EOL] elif mbiState == win32 . MEM_COMMIT : [EOL] State = [string] [EOL] elif mbiState == win32 . MEM_FREE : [EOL] State = [string] [EOL] else : [EOL] State = [string] [EOL] [EOL] [comment] [EOL] if mbiState != win32 . MEM_COMMIT : [EOL] Protect = [string] [EOL] else : [EOL] mbiProtect = mbi . Protect [EOL] if mbiProtect & win32 . PAGE_NOACCESS : [EOL] Protect = [string] [EOL] elif mbiProtect & win32 . PAGE_READONLY : [EOL] Protect = [string] [EOL] elif mbiProtect & win32 . PAGE_READWRITE : [EOL] Protect = [string] [EOL] elif mbiProtect & win32 . PAGE_WRITECOPY : [EOL] Protect = [string] [EOL] elif mbiProtect & win32 . PAGE_EXECUTE : [EOL] Protect = [string] [EOL] elif mbiProtect & win32 . PAGE_EXECUTE_READ : [EOL] Protect = [string] [EOL] elif mbiProtect & win32 . PAGE_EXECUTE_READWRITE : [EOL] Protect = [string] [EOL] elif mbiProtect & win32 . PAGE_EXECUTE_WRITECOPY : [EOL] Protect = [string] [EOL] else : [EOL] Protect = [string] [EOL] if mbiProtect & win32 . PAGE_GUARD : [EOL] Protect += [string] [EOL] else : [EOL] Protect += [string] [EOL] if mbiProtect & win32 . PAGE_NOCACHE : [EOL] Protect += [string] [EOL] else : [EOL] Protect += [string] [EOL] if mbiProtect & win32 . PAGE_WRITECOMBINE : [EOL] Protect += [string] [EOL] else : [EOL] Protect += [string] [EOL] [EOL] [comment] [EOL] mbiType = mbi . Type [EOL] if mbiType == win32 . MEM_IMAGE : [EOL] Type = [string] [EOL] elif mbiType == win32 . MEM_MAPPED : [EOL] Type = [string] [EOL] elif mbiType == win32 . MEM_PRIVATE : [EOL] Type = [string] [EOL] elif mbiType == [number] : [EOL] Type = [string] [EOL] else : [EOL] Type = [string] [EOL] [EOL] [comment] [EOL] if mappedFilenames : [EOL] FileName = mappedFilenames . get ( mbi . BaseAddress , [string] ) [EOL] table . addRow ( BaseAddress , RegionSize , State , Protect , Type , FileName ) [EOL] else : [EOL] table . addRow ( BaseAddress , RegionSize , State , Protect , Type ) [EOL] [EOL] [comment] [EOL] return table . getOutput ( ) [EOL] [EOL] [comment] [EOL] [EOL] class DebugLog ( StaticClass ) : [EOL] [docstring] [EOL] [EOL] @ staticmethod def log_text ( text ) : [EOL] [docstring] [EOL] if text . endswith ( [string] ) : [EOL] text = text [ : - len ( [string] ) ] [EOL] [comment] [EOL] ltime = time . strftime ( [string] ) [EOL] msecs = ( time . time ( ) % [number] ) * [number] [EOL] return [string] % ( ltime , msecs , text ) [EOL] [comment] [EOL] [EOL] @ classmethod def log_event ( cls , event , text = None ) : [EOL] [docstring] [EOL] if not text : [EOL] if event . get_event_code ( ) == win32 . EXCEPTION_DEBUG_EVENT : [EOL] what = event . get_exception_description ( ) [EOL] if event . is_first_chance ( ) : [EOL] what = [string] % what [EOL] else : [EOL] what = [string] % what [EOL] try : [EOL] address = event . get_fault_address ( ) [EOL] except NotImplementedError : [EOL] address = event . get_exception_address ( ) [EOL] else : [EOL] what = event . get_event_name ( ) [EOL] address = event . get_thread ( ) . get_pc ( ) [EOL] process = event . get_process ( ) [EOL] label = process . get_label_at_address ( address ) [EOL] address = HexDump . address ( address , process . get_bits ( ) ) [EOL] if label : [EOL] where = [string] % ( address , label ) [EOL] else : [EOL] where = address [EOL] text = [string] % ( what , where ) [EOL] text = [string] % ( event . get_pid ( ) , event . get_tid ( ) , text ) [EOL] [comment] [EOL] return cls . log_text ( text ) [EOL] [EOL] [comment] [EOL] [EOL] class Logger ( object ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , logfile = None , verbose = True ) : [EOL] [docstring] [EOL] self . verbose = verbose [EOL] self . logfile = logfile [EOL] if self . logfile : [EOL] self . fd = open ( self . logfile , [string] ) [EOL] [EOL] def __logfile_error ( self , e ) : [EOL] [docstring] [EOL] from sys import stderr [EOL] msg = [string] [EOL] msg = msg % ( self . logfile , str ( e ) ) [EOL] stderr . write ( DebugLog . log_text ( msg ) ) [EOL] self . logfile = None [EOL] self . fd = None [EOL] [EOL] def __do_log ( self , text ) : [EOL] [docstring] [EOL] if isinstance ( text , compat . unicode ) : [EOL] text = text . encode ( [string] ) [EOL] if self . verbose : [EOL] print ( text ) [EOL] if self . logfile : [EOL] try : [EOL] self . fd . writelines ( [string] % text ) [EOL] except IOError : [EOL] e = sys . exc_info ( ) [ [number] ] [EOL] self . __logfile_error ( e ) [EOL] [EOL] def log_text ( self , text ) : [EOL] [docstring] [EOL] self . __do_log ( DebugLog . log_text ( text ) ) [EOL] [EOL] def log_event ( self , event , text = None ) : [EOL] [docstring] [EOL] self . __do_log ( DebugLog . log_event ( event , text ) ) [EOL] [EOL] def log_exc ( self ) : [EOL] [docstring] [EOL] self . __do_log ( [string] % traceback . format_exc ( ) ) [EOL] [EOL] def is_enabled ( self ) : [EOL] [docstring] [EOL] return self . verbose or self . logfile [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 $builtins.str$ 0 $builtins.bytes$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $io.TextIOWrapper$ 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Optional[builtins.BaseException]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 $builtins.int$ 0 0 0 0 0 $typing.Optional[builtins.BaseException]$ 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $io.TextIOWrapper$ 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $io.TextIOWrapper$ 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 $typing.Any$ 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Optional[builtins.BaseException]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.BaseException]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [docstring] [EOL] [EOL] __revision__ = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] __revision__ = [string] [EOL] [EOL] def do ( self , arg ) : [EOL] [docstring] [EOL] self . debug . system . fix_symbol_store_path ( remote = True , force = False ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [docstring] [EOL] __docformat__ = [string] [EOL] [EOL] __version__ = [string] [EOL] [docstring] [EOL] [EOL] __author__ = [string] [EOL] [docstring] [EOL] [EOL] __url__ = [string] [EOL] [docstring] [EOL] [EOL] __license__ = [string] [EOL] [docstring] [EOL] [EOL] [comment] [EOL] DEBUG = False [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [docstring] [EOL] __docformat__ = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [docstring] [EOL] __docformat__ = [string] [EOL] [EOL] [comment] [EOL] HTML_HELP = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0
[docstring] [EOL] [EOL] [EOL] import sys [EOL] import os [EOL] [EOL] [EOL] def abspath ( path ) : [EOL] [docstring] [EOL] return path [EOL] [EOL] [EOL] def basename ( path ) : [EOL] [docstring] [EOL] return path [EOL] [EOL] [EOL] def commonprefix ( list ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] def dirname ( path ) : [EOL] [docstring] [EOL] return path [EOL] [EOL] [EOL] def exists ( path ) : [EOL] [docstring] [EOL] return False [EOL] [EOL] [EOL] def lexists ( path ) : [EOL] [docstring] [EOL] return False [EOL] [EOL] [EOL] def expanduser ( path ) : [EOL] [docstring] [EOL] return path [EOL] [EOL] [EOL] def expandvars ( path ) : [EOL] [docstring] [EOL] return path [EOL] [EOL] [EOL] def getatime ( path ) : [EOL] [docstring] [EOL] return [number] [EOL] [EOL] [EOL] def getmtime ( path ) : [EOL] [docstring] [EOL] return [number] [EOL] [EOL] [EOL] def getctime ( path ) : [EOL] [docstring] [EOL] return [number] [EOL] [EOL] [EOL] def getsize ( path ) : [EOL] [docstring] [EOL] return [number] [EOL] [EOL] [EOL] def isabs ( path ) : [EOL] [docstring] [EOL] return False [EOL] [EOL] [EOL] def isfile ( path ) : [EOL] [docstring] [EOL] return False [EOL] [EOL] [EOL] def isdir ( path ) : [EOL] [docstring] [EOL] return False [EOL] [EOL] [EOL] def islink ( path ) : [EOL] [docstring] [EOL] return False [EOL] [EOL] [EOL] def ismount ( path ) : [EOL] [docstring] [EOL] return False [EOL] [EOL] [EOL] def join ( path , * paths ) : [EOL] [docstring] [EOL] return path [EOL] [EOL] [EOL] def normcase ( path ) : [EOL] [docstring] [EOL] return path [EOL] [EOL] [EOL] def normpath ( path ) : [EOL] [docstring] [EOL] return path [EOL] [EOL] [EOL] def realpath ( path ) : [EOL] [docstring] [EOL] return path [EOL] [EOL] [EOL] def relpath ( path , start = os . curdir ) : [EOL] [docstring] [EOL] return path [EOL] [EOL] [EOL] def samefile ( path1 , path2 ) : [EOL] [docstring] [EOL] return False [EOL] [EOL] [EOL] def sameopenfile ( fp1 , fp2 ) : [EOL] [docstring] [EOL] return False [EOL] [EOL] [EOL] def samestat ( stat1 , stat2 ) : [EOL] [docstring] [EOL] return False [EOL] [EOL] [EOL] def split ( path ) : [EOL] [docstring] [EOL] return path , path [EOL] [EOL] [EOL] def splitdrive ( path ) : [EOL] [docstring] [EOL] return path , path [EOL] [EOL] [EOL] def splitext ( path ) : [EOL] [docstring] [EOL] return path , path [EOL] [EOL] [EOL] def splitunc ( path ) : [EOL] [docstring] [EOL] return path , path [EOL] [EOL] [EOL] if sys . version_info < ( [number] , [number] ) : [EOL] def walk ( path , visit , arg ) : [EOL] [docstring] [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict , List [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] labels = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] bibliographic_fields = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] author_separators = [ [string] , [string] ] [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict , List [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] labels = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] bibliographic_fields = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] author_separators = [ [string] , [string] ] [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Tuple [EOL] import typing [EOL] [docstring] [EOL] [EOL] from docutils import writers [EOL] [EOL] [EOL] class Writer ( writers . UnfilteredWriter ) : [EOL] [EOL] supported = ( [string] , ) [EOL] [docstring] [EOL] [EOL] config_section = [string] [EOL] config_section_dependencies = ( [string] , ) [EOL] [EOL] def translate ( self ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Tuple [EOL] import typing [EOL] [docstring] [EOL] [EOL] from docutils import parsers [EOL] [EOL] [EOL] class Parser ( parsers . Parser ) : [EOL] [EOL] [docstring] [EOL] [EOL] supported = ( [string] , ) [EOL] [EOL] config_section = [string] [EOL] config_section_dependencies = ( [string] , ) [EOL] [EOL] def parse ( self , inputstring , document ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [EOL] schemes = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] [string] ) , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] ) , [string] : ( [string] [string] ) , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
__author__ = [string] [EOL]	$builtins.str$ 0 0 0
[comment] [EOL] [EOL] from typing import List [EOL] import sys [EOL] import typing [EOL] import sys [EOL] [EOL] from . hook import install_import_hook , remove_import_hook [EOL] from . parser import load , load_module , load_fp [EOL] [EOL] __version__ = [string] [EOL] __python__ = sys . version_info [EOL] __all__ = [ [string] , [string] , [string] , [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $sys._version_info$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any , List [EOL] import typing [EOL] from __future__ import absolute_import [EOL] [EOL] from thriftpy . _compat import CYTHON [EOL] [EOL] from . . thrift import TType , TException [EOL] [EOL] [EOL] def readall ( read_fn , sz ) : [EOL] buff = [string] [EOL] have = [number] [EOL] while have < sz : [EOL] chunk = read_fn ( sz - have ) [EOL] have += len ( chunk ) [EOL] buff += chunk [EOL] [EOL] if len ( chunk ) == [number] : [EOL] raise TTransportException ( TTransportException . END_OF_FILE , [string] ) [EOL] [EOL] return buff [EOL] [EOL] [EOL] class TTransportBase ( object ) : [EOL] [docstring] [EOL] [EOL] def _read ( self , sz ) : [EOL] raise NotImplementedError [EOL] [EOL] def read ( self , sz ) : [EOL] return readall ( self . _read , sz ) [EOL] [EOL] [EOL] class TTransportException ( TException ) : [EOL] [docstring] [EOL] [EOL] thrift_spec = { [number] : ( TType . STRING , [string] ) , [number] : ( TType . I32 , [string] ) , } [EOL] [EOL] UNKNOWN = [number] [EOL] NOT_OPEN = [number] [EOL] ALREADY_OPEN = [number] [EOL] TIMED_OUT = [number] [EOL] END_OF_FILE = [number] [EOL] [EOL] def __init__ ( self , type = UNKNOWN , message = None ) : [EOL] super ( TTransportException , self ) . __init__ ( ) [EOL] self . type = type [EOL] self . message = message [EOL] [EOL] [EOL] [comment] [EOL] from . socket import TSocket , TServerSocket [comment] [EOL] from . sslsocket import TSSLSocket , TSSLServerSocket [comment] [EOL] from . _ssl import create_thriftpy_context [comment] [EOL] from . buffered import TBufferedTransport , TBufferedTransportFactory [comment] [EOL] from . framed import TFramedTransport , TFramedTransportFactory [comment] [EOL] from . memory import TMemoryBuffer [comment] [EOL] [EOL] if CYTHON : [EOL] from . buffered import TCyBufferedTransport , TCyBufferedTransportFactory [EOL] from . framed import TCyFramedTransport , TCyFramedTransportFactory [EOL] from . memory import TCyMemoryBuffer [EOL] [EOL] [comment] [EOL] TMemoryBuffer = TCyMemoryBuffer [comment] [EOL] TBufferedTransport = TCyBufferedTransport [comment] [EOL] TBufferedTransportFactory = TCyBufferedTransportFactory [comment] [EOL] TFramedTransport = TCyFramedTransport [comment] [EOL] TFramedTransportFactory = TCyFramedTransportFactory [comment] [EOL] else : [EOL] [comment] [EOL] TCyMemoryBuffer = TMemoryBuffer [EOL] TCyBufferedTransport = TBufferedTransport [EOL] TCyBufferedTransportFactory = TBufferedTransportFactory [EOL] TCyFramedTransport = TFramedTransport [EOL] TCyFramedTransportFactory = TFramedTransportFactory [EOL] [EOL] __all__ = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from __future__ import absolute_import [EOL] [EOL] [EOL] class ThriftParserError ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class ThriftLexerError ( ThriftParserError ) : [EOL] pass [EOL] [EOL] [EOL] class ThriftGrammerError ( ThriftParserError ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [EOL] from typing import List [EOL] import typing [EOL] __version__ = [string] [EOL] __all__ = [ [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] __version__ = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] from typing import Any , Set , List [EOL] import typing [EOL] [docstring] [EOL] import functools [EOL] import glob [EOL] import sys [EOL] import os [EOL] import traceback [EOL] [EOL] from behave . formatter . base import Formatter [EOL] from behave . model import Step , ScenarioOutline , Feature , Scenario [EOL] from behave . tag_expression import TagExpression [EOL] import re [EOL] [EOL] import _bdd_utils [EOL] from distutils import version [EOL] from behave import __version__ as behave_version [EOL] from _jb_utils import VersionAgnosticUtils [EOL] _MAX_STEPS_SEARCH_FEATURES = [number] [comment] [EOL] _FEATURES_FOLDER = [string] [comment] [EOL] [EOL] __author__ = [string] [EOL] [EOL] from behave import configuration , runner [EOL] [EOL] [EOL] def _get_dirs_to_run ( base_dir_to_search ) : [EOL] [docstring] [EOL] result = set ( ) [EOL] for ( step , ( folder , sub_folders , files ) ) in enumerate ( os . walk ( base_dir_to_search ) ) : [EOL] if os . path . basename ( folder ) == _FEATURES_FOLDER and os . path . isdir ( folder ) : [EOL] result . add ( os . path . abspath ( folder ) ) [EOL] if step == _MAX_STEPS_SEARCH_FEATURES : [comment] [EOL] err = [string] . format ( base_dir_to_search ) [EOL] raise Exception ( err ) [EOL] return list ( result ) [EOL] [EOL] [EOL] def _merge_hooks_wrapper ( * hooks ) : [EOL] [docstring] [EOL] [comment] [EOL] def wrapper ( * args , ** kwargs ) : [EOL] for hook in hooks : [EOL] hook ( * args , ** kwargs ) [EOL] [EOL] return wrapper [EOL] [EOL] [EOL] class _RunnerWrapper ( runner . Runner ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , config , hooks ) : [EOL] [docstring] [EOL] super ( _RunnerWrapper , self ) . __init__ ( config ) [EOL] self . dry_run = False [EOL] [docstring] [EOL] self . __hooks = hooks [EOL] [EOL] def load_hooks ( self , filename = [string] ) : [EOL] [docstring] [EOL] super ( _RunnerWrapper , self ) . load_hooks ( filename ) [EOL] for ( hook_name , hook ) in self . __hooks . items ( ) : [EOL] hook_to_add = hook [EOL] if hook_name in self . hooks : [EOL] user_hook = self . hooks [ hook_name ] [EOL] if hook_name . startswith ( [string] ) : [EOL] user_and_custom_hook = [ user_hook , hook ] [EOL] else : [EOL] user_and_custom_hook = [ hook , user_hook ] [EOL] hook_to_add = _merge_hooks_wrapper ( * user_and_custom_hook ) [EOL] self . hooks [ hook_name ] = hook_to_add [EOL] [EOL] def run_model ( self , features = None ) : [EOL] [docstring] [EOL] if self . dry_run : [comment] [EOL] return [EOL] return super ( _RunnerWrapper , self ) . run_model ( features ) [EOL] [EOL] def clean ( self ) : [EOL] [docstring] [EOL] self . dry_run = False [EOL] self . hooks . clear ( ) [EOL] self . features = [ ] [EOL] [EOL] [EOL] class _BehaveRunner ( _bdd_utils . BddRunner ) : [EOL] [docstring] [EOL] [EOL] [EOL] def __process_hook ( self , is_started , context , element ) : [EOL] [docstring] [EOL] element . location . file = element . location . filename [comment] [EOL] utils = VersionAgnosticUtils ( ) [EOL] if isinstance ( element , Step ) : [EOL] [comment] [EOL] step_name = [string] . format ( utils . to_unicode ( element . keyword ) , utils . to_unicode ( element . name ) ) [EOL] duration_ms = element . duration * [number] [EOL] if is_started : [EOL] self . _test_started ( step_name , element . location ) [EOL] elif element . status == [string] : [EOL] self . _test_passed ( step_name , duration_ms ) [EOL] elif element . status == [string] : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] error_message = element . error_message [EOL] fetch_log = not error_message [comment] [EOL] trace = [string] [EOL] if isinstance ( element . exception , AssertionError ) : [EOL] trace = self . _collect_trace ( element , utils ) [EOL] [EOL] [comment] [EOL] if not trace and not error_message : [EOL] try : [EOL] error_message = traceback . format_exc ( ) [EOL] except AttributeError : [EOL] [comment] [EOL] [comment] [EOL] trace = self . _collect_trace ( element , utils ) [EOL] if not error_message : [EOL] [comment] [EOL] error_message = element . exception [EOL] message_as_string = utils . to_unicode ( error_message ) [EOL] if fetch_log and self . __real_runner . config . log_capture : [EOL] message_as_string += [string] + utils . to_unicode ( self . __real_runner . log_capture . getvalue ( ) ) [EOL] self . _test_failed ( step_name , message_as_string , trace , duration = duration_ms ) [EOL] elif element . status == [string] : [EOL] self . _test_undefined ( step_name , element . location ) [EOL] else : [EOL] self . _test_skipped ( step_name , element . status , element . location ) [EOL] elif not is_started and isinstance ( element , Scenario ) and element . status == [string] : [EOL] [comment] [EOL] for step in element . steps : [EOL] assert isinstance ( step , Step ) , step [EOL] if step . status not in [ [string] , [string] ] : [comment] [EOL] self . __process_hook ( False , context , step ) [EOL] self . _feature_or_scenario ( is_started , element . name , element . location ) [EOL] elif isinstance ( element , ScenarioOutline ) : [EOL] self . _feature_or_scenario ( is_started , str ( element . examples ) , element . location ) [EOL] else : [EOL] self . _feature_or_scenario ( is_started , element . name , element . location ) [EOL] [EOL] def _collect_trace ( self , element , utils ) : [EOL] return [string] . join ( [ utils . to_unicode ( l ) for l in traceback . format_tb ( element . exc_traceback ) ] ) [EOL] [EOL] def __init__ ( self , config , base_dir ) : [EOL] [docstring] [EOL] super ( _BehaveRunner , self ) . __init__ ( base_dir ) [EOL] self . __config = config [EOL] [comment] [EOL] self . __real_runner = _RunnerWrapper ( config , { [string] : functools . partial ( self . __process_hook , True ) , [string] : functools . partial ( self . __process_hook , False ) , [string] : functools . partial ( self . __process_hook , True ) , [string] : functools . partial ( self . __process_hook , False ) , [string] : functools . partial ( self . __process_hook , True ) , [string] : functools . partial ( self . __process_hook , False ) } ) [EOL] [EOL] def _run_tests ( self ) : [EOL] self . __real_runner . run ( ) [EOL] [EOL] [EOL] def __filter_scenarios_by_args ( self , scenario ) : [EOL] [docstring] [EOL] assert isinstance ( scenario , Scenario ) , scenario [EOL] [comment] [EOL] expected_tags = self . __config . tags [EOL] scenario_name_re = self . __config . name_re [EOL] if scenario_name_re and not scenario_name_re . match ( scenario . name ) : [EOL] return False [EOL] if not expected_tags : [EOL] return True [comment] [EOL] return isinstance ( expected_tags , TagExpression ) and expected_tags . check ( scenario . tags ) [EOL] [EOL] [EOL] def _get_features_to_run ( self ) : [EOL] self . __real_runner . dry_run = True [EOL] self . __real_runner . run ( ) [EOL] features_to_run = self . __real_runner . features [EOL] self . __real_runner . clean ( ) [comment] [EOL] [EOL] [comment] [EOL] for feature in features_to_run : [EOL] assert isinstance ( feature , Feature ) , feature [EOL] scenarios = [ ] [EOL] for scenario in feature . scenarios : [EOL] if isinstance ( scenario , ScenarioOutline ) : [EOL] scenarios . extend ( scenario . scenarios ) [EOL] else : [EOL] scenarios . append ( scenario ) [EOL] feature . scenarios = filter ( self . __filter_scenarios_by_args , scenarios ) [EOL] [EOL] return features_to_run [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] [comment] [EOL] [EOL] class _Null ( Formatter ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] command_args = list ( filter ( None , sys . argv [ [number] : ] ) ) [EOL] if command_args : [EOL] if [string] in command_args : [EOL] raise Exception ( [string] [string] ) [EOL] _bdd_utils . fix_win_drive ( command_args [ [number] ] ) [EOL] ( base_dir , scenario_names , what_to_run ) = _bdd_utils . get_what_to_run_by_env ( os . environ ) [EOL] [EOL] for scenario_name in scenario_names : [EOL] command_args += [ [string] , re . escape ( scenario_name ) ] [comment] [EOL] [EOL] my_config = configuration . Configuration ( command_args = command_args ) [EOL] [EOL] [comment] [EOL] if version . LooseVersion ( behave_version ) >= version . LooseVersion ( [string] ) : [EOL] from behave . formatter import _registry [EOL] _registry . register_as ( [string] , _Null ) [EOL] else : [EOL] from behave . formatter import formatters [EOL] formatters . register_as ( _Null , [string] ) [EOL] [EOL] [EOL] my_config . format = [ [string] ] [comment] [EOL] my_config . reporters = [ ] [comment] [EOL] my_config . stdout_capture = False [comment] [EOL] my_config . stderr_capture = False [comment] [EOL] features = set ( ) [EOL] for feature in what_to_run : [EOL] if os . path . isfile ( feature ) or glob . glob ( os . path . join ( feature , [string] ) ) : [comment] [EOL] features . add ( feature ) [EOL] elif os . path . isdir ( feature ) : [EOL] features |= set ( _get_dirs_to_run ( feature ) ) [comment] [EOL] my_config . paths = list ( features ) [EOL] if what_to_run and not my_config . paths : [EOL] raise Exception ( [string] . format ( what_to_run ) ) [EOL] _BehaveRunner ( my_config , base_dir ) . run ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Set , Any , List [EOL] import typing [EOL] import optparse [EOL] [docstring] [EOL] import inspect [EOL] import optparse [EOL] import os [EOL] import _bdd_utils [EOL] [EOL] __author__ = [string] [EOL] from lettuce . exceptions import ReasonToFail [EOL] import lettuce [EOL] from lettuce import core [EOL] [EOL] [EOL] class _LettuceRunner ( _bdd_utils . BddRunner ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , base_dir , what_to_run , scenarios , options ) : [EOL] [docstring] [EOL] super ( _LettuceRunner , self ) . __init__ ( base_dir ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] args_to_pass = options . __dict__ [EOL] runner_args = inspect . getargspec ( lettuce . Runner . __init__ ) [ [number] ] [EOL] unknown_args = set ( args_to_pass . keys ( ) ) - set ( runner_args ) [EOL] map ( args_to_pass . __delitem__ , unknown_args ) [EOL] [EOL] [comment] [EOL] self . __tags = None [comment] [EOL] if [string] in args_to_pass . keys ( ) and args_to_pass [ [string] ] : [EOL] args_to_pass [ [string] ] = [ tag . strip ( [string] ) for tag in args_to_pass [ [string] ] ] [EOL] self . __tags = set ( args_to_pass [ [string] ] ) [EOL] [EOL] [comment] [EOL] args_to_pass [ [string] ] = what_to_run [EOL] args_to_pass [ [string] ] = [string] . join ( scenarios ) [EOL] [EOL] self . __runner = lettuce . Runner ( ** args_to_pass ) [EOL] [EOL] def _get_features_to_run ( self ) : [EOL] super ( _LettuceRunner , self ) . _get_features_to_run ( ) [EOL] features = [ ] [EOL] if self . __runner . single_feature : [comment] [EOL] features = [ core . Feature . from_file ( self . __runner . single_feature ) ] [EOL] else : [EOL] [comment] [EOL] for feature_file in self . __runner . loader . find_feature_files ( ) : [EOL] feature = core . Feature . from_file ( feature_file ) [EOL] assert isinstance ( feature , core . Feature ) , feature [EOL] if feature . scenarios : [EOL] features . append ( feature ) [EOL] [EOL] [comment] [EOL] if self . __runner . scenarios : [EOL] for feature in features : [EOL] filtered_feature_scenarios = [ ] [EOL] for index in [ i - [number] for i in self . __runner . scenarios ] : [comment] [EOL] if index < len ( feature . scenarios ) : [EOL] filtered_feature_scenarios . append ( feature . scenarios [ index ] ) [EOL] feature . scenarios = filtered_feature_scenarios [EOL] [EOL] [comment] [EOL] if self . __tags : [EOL] for feature in features : [EOL] feature . scenarios = filter ( lambda s : set ( s . tags ) & self . __tags , feature . scenarios ) [EOL] return features [EOL] [EOL] def _run_tests ( self ) : [EOL] super ( _LettuceRunner , self ) . _run_tests ( ) [EOL] self . __install_hooks ( ) [EOL] self . __runner . run ( ) [EOL] [EOL] def __step ( self , is_started , step ) : [EOL] [docstring] [EOL] test_name = step . sentence [EOL] if is_started : [EOL] self . _test_started ( test_name , step . described_at ) [EOL] elif step . passed : [EOL] self . _test_passed ( test_name ) [EOL] elif step . failed : [EOL] reason = step . why [EOL] assert isinstance ( reason , ReasonToFail ) , reason [EOL] self . _test_failed ( test_name , message = reason . exception . message , details = reason . traceback ) [EOL] elif step . has_definition : [EOL] self . _test_skipped ( test_name , [string] , step . described_at ) [EOL] else : [EOL] self . _test_undefined ( test_name , step . described_at ) [EOL] [EOL] def __install_hooks ( self ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] lettuce . before . each_feature ( lambda f : self . _feature_or_scenario ( True , f . name , f . described_at ) ) [EOL] lettuce . after . each_feature ( lambda f : self . _feature_or_scenario ( False , f . name , f . described_at ) ) [EOL] [EOL] try : [EOL] lettuce . before . each_outline ( lambda s , o : self . __outline ( True , s , o ) ) [EOL] lettuce . after . each_outline ( lambda s , o : self . __outline ( False , s , o ) ) [EOL] except AttributeError : [EOL] import sys [EOL] sys . stderr . write ( [string] [string] ) [EOL] [EOL] lettuce . before . each_scenario ( lambda s : self . __scenario ( True , s ) ) [EOL] lettuce . after . each_scenario ( lambda s : self . __scenario ( False , s ) ) [EOL] [EOL] lettuce . before . each_background ( lambda b , * args : self . _background ( True , b . feature . described_at ) ) [EOL] lettuce . after . each_background ( lambda b , * args : self . _background ( False , b . feature . described_at ) ) [EOL] [EOL] lettuce . before . each_step ( lambda s : self . __step ( True , s ) ) [EOL] lettuce . after . each_step ( lambda s : self . __step ( False , s ) ) [EOL] [EOL] def __outline ( self , is_started , scenario , outline ) : [EOL] [docstring] [EOL] outline_description = [ [string] . format ( k , v ) for k , v in outline . items ( ) ] [EOL] self . _feature_or_scenario ( is_started , [string] . format ( outline_description ) , scenario . described_at ) [EOL] [EOL] def __scenario ( self , is_started , scenario ) : [EOL] [docstring] [EOL] self . _feature_or_scenario ( is_started , scenario . name , scenario . described_at ) [EOL] [EOL] [EOL] def _get_args ( ) : [EOL] [docstring] [EOL] [comment] [EOL] parser = optparse . OptionParser ( ) [EOL] parser . add_option ( [string] , [string] , dest = [string] , default = [number] , help = [string] ) [EOL] [EOL] parser . add_option ( [string] , [string] , dest = [string] , default = None , help = [string] ) [EOL] [EOL] parser . add_option ( [string] , [string] , dest = [string] , default = None , action = [string] , help = [string] [string] [string] [string] ) [EOL] [EOL] parser . add_option ( [string] , [string] , dest = [string] , action = [string] , default = False , help = [string] ) [EOL] [EOL] parser . add_option ( [string] , dest = [string] , action = [string] , default = False , help = [string] ) [EOL] [EOL] parser . add_option ( [string] , dest = [string] , default = None , type = [string] , help = [string] [string] ) [EOL] [EOL] parser . add_option ( [string] , dest = [string] , action = [string] , default = False , help = [string] ) [EOL] [EOL] parser . add_option ( [string] , dest = [string] , default = None , help = [string] [string] ) [EOL] [EOL] parser . add_option ( [string] , dest = [string] , default = False , action = [string] , help = [string] ) [EOL] [EOL] parser . add_option ( [string] , dest = [string] , default = False , action = [string] , help = [string] ) [EOL] return parser . parse_args ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] options , args = _get_args ( ) [EOL] ( base_dir , scenarios , what_to_run ) = _bdd_utils . get_what_to_run_by_env ( os . environ ) [EOL] if len ( what_to_run ) > [number] : [EOL] raise Exception ( [string] ) [EOL] _bdd_utils . fix_win_drive ( what_to_run [ [number] ] ) [EOL] _LettuceRunner ( base_dir , what_to_run [ [number] ] , scenarios , options ) . run ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[docstring] [EOL] import sys , os [EOL] from django . core import management [EOL] [EOL] project_name = sys . argv [ [number] ] [EOL] path = sys . argv [ [number] ] [EOL] if not os . path . exists ( path ) : [EOL] os . mkdir ( path ) [EOL] [EOL] management . execute_from_command_line ( argv = [ [string] , [string] , project_name , path ] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0
from nose_helper . suite import ContextSuite [EOL] from nose_helper . loader import TestLoader [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import inspect [EOL] [docstring] [EOL] import unittest [EOL] from nose_helper . config import Config [EOL] [EOL] class Selector ( object ) : [EOL] [docstring] [EOL] def __init__ ( self , config ) : [EOL] if config is None : [EOL] config = Config ( ) [EOL] self . configure ( config ) [EOL] [EOL] def configure ( self , config ) : [EOL] self . config = config [EOL] self . match = config . testMatch [EOL] [EOL] def matches ( self , name ) : [EOL] return self . match . search ( name ) [EOL] [EOL] def wantClass ( self , cls ) : [EOL] [docstring] [EOL] declared = getattr ( cls , [string] , None ) [EOL] if declared is not None : [EOL] wanted = declared [EOL] else : [EOL] wanted = ( not cls . __name__ . startswith ( [string] ) [EOL] and ( issubclass ( cls , unittest . TestCase ) or self . matches ( cls . __name__ ) ) ) [EOL] [EOL] return wanted [EOL] [EOL] def wantFunction ( self , function ) : [EOL] [docstring] [EOL] try : [EOL] if hasattr ( function , [string] ) : [EOL] funcname = function . compat_func_name [EOL] else : [EOL] funcname = function . __name__ [EOL] except AttributeError : [EOL] [comment] [EOL] return False [EOL] import inspect [EOL] arguments = inspect . getargspec ( function ) [EOL] if len ( arguments [ [number] ] ) or arguments [ [number] ] or arguments [ [number] ] : [EOL] return False [EOL] declared = getattr ( function , [string] , None ) [EOL] if declared is not None : [EOL] wanted = declared [EOL] else : [EOL] wanted = not funcname . startswith ( [string] ) and self . matches ( funcname ) [EOL] [EOL] return wanted [EOL] [EOL] def wantMethod ( self , method ) : [EOL] [docstring] [EOL] try : [EOL] method_name = method . __name__ [EOL] except AttributeError : [EOL] [comment] [EOL] return False [EOL] if method_name . startswith ( [string] ) : [EOL] [comment] [EOL] return False [EOL] declared = getattr ( method , [string] , None ) [EOL] if declared is not None : [EOL] wanted = declared [EOL] else : [EOL] wanted = self . matches ( method_name ) [EOL] return wanted [EOL] [EOL] def wantModule ( self , module ) : [EOL] [docstring] [EOL] declared = getattr ( module , [string] , None ) [EOL] if declared is not None : [EOL] wanted = declared [EOL] else : [EOL] wanted = self . matches ( module . __name__ . split ( [string] ) [ - [number] ] ) or module . __name__ == [string] [EOL] return wanted [EOL] [EOL] defaultSelector = Selector [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $inspect.ArgSpec$ 0 0 0 0 0 0 0 0 0 0 0 $inspect.ArgSpec$ 0 0 0 0 0 $inspect.ArgSpec$ 0 0 0 0 $inspect.ArgSpec$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
def reraise ( exc_class , exc_val , tb ) : [EOL] raise exc_class ( exc_val ) . with_traceback ( tb ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
try : [EOL] from nose_helper . _2 import * [EOL] except ( ImportError , SyntaxError ) : [EOL] from nose_helper . _3 import * [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
try : [EOL] from flake8 . formatting import base [comment] [EOL] except ImportError : [EOL] from teamcity . flake8_v2_plugin import * [comment] [EOL] else : [EOL] from teamcity . flake8_v3_plugin import * [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import List [EOL] import typing [EOL] import os [EOL] [EOL] __all__ = [ [string] ] [EOL] [EOL] __version__ = [string] [EOL] [EOL] teamcity_presence_env_var = [string] [EOL] [EOL] [EOL] def is_running_under_teamcity ( ) : [EOL] return os . getenv ( teamcity_presence_env_var ) is not None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0
from __future__ import absolute_import [EOL] from django . test . runner import DiscoverRunner [EOL] from teamcity . unittestpy import TeamcityTestRunner [EOL] [EOL] [EOL] class TeamcityDjangoRunner ( DiscoverRunner ) : [EOL] def run_suite ( self , suite , ** kwargs ) : [EOL] return TeamcityTestRunner ( ) . run ( suite ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any , TextIO , Tuple [EOL] import typing [EOL] import datetime [EOL] import os [EOL] import sys [EOL] import datetime [EOL] import inspect [EOL] [EOL] from teamcity import is_running_under_teamcity [EOL] from teamcity . common import is_string , split_output , limit_output , get_class_fullname , convert_error_to_string [EOL] from teamcity . messages import TeamcityServiceMessages [EOL] [EOL] import nose [EOL] [comment] [EOL] from nose . exc import SkipTest , DeprecatedTest [EOL] [comment] [EOL] from nose . plugins import Plugin [EOL] [EOL] [EOL] CONTEXT_SUITE_FQN = [string] [EOL] [EOL] [EOL] [comment] [EOL] def _ln ( label ) : [EOL] label_len = len ( label ) + [number] [EOL] chunk = ( [number] - label_len ) // [number] [EOL] out = [string] % ( [string] * chunk , label , [string] * chunk ) [EOL] pad = [number] - len ( out ) [EOL] if pad > [number] : [EOL] out += [string] * pad [EOL] return out [EOL] [EOL] [EOL] _captured_output_start_marker = _ln ( [string] ) + [string] [EOL] _captured_output_end_marker = [string] + _ln ( [string] ) [EOL] [EOL] _real_stdout = sys . stdout [EOL] [EOL] [EOL] [comment] [EOL] class TeamcityReport ( Plugin ) : [EOL] name = [string] [EOL] score = [number] [EOL] [EOL] def __init__ ( self ) : [EOL] super ( TeamcityReport , self ) . __init__ ( ) [EOL] [EOL] self . messages = TeamcityServiceMessages ( _real_stdout ) [EOL] self . test_started_datetime_map = { } [EOL] self . config = None [EOL] self . total_tests = [number] [EOL] self . enabled = False [EOL] [EOL] def get_test_id ( self , test ) : [EOL] if is_string ( test ) : [EOL] return test [EOL] [EOL] [comment] [EOL] test_class_name = get_class_fullname ( test ) [EOL] if test_class_name == CONTEXT_SUITE_FQN : [EOL] if inspect . ismodule ( test . context ) : [EOL] module_name = test . context . __name__ [EOL] return module_name + [string] + test . error_context [EOL] elif inspect . isclass ( test . context ) : [EOL] class_name = get_class_fullname ( test . context ) [EOL] return class_name + [string] + test . error_context [EOL] [EOL] test_id = test . id ( ) [EOL] [EOL] real_test = getattr ( test , [string] , test ) [EOL] real_test_class_name = get_class_fullname ( real_test ) [EOL] [EOL] test_arg = getattr ( real_test , [string] , tuple ( ) ) [EOL] if ( type ( test_arg ) is tuple or type ( test_arg ) is list ) and len ( test_arg ) > [number] : [EOL] [comment] [EOL] test_arg_str = [string] % ( test_arg , ) [EOL] if test_id . endswith ( test_arg_str ) : [EOL] [comment] [EOL] test_id = test_id [ : len ( test_id ) - len ( test_arg_str ) ] + test_arg_str . replace ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] if real_test_class_name != [string] and real_test_class_name != [string] : [EOL] desc = test . shortDescription ( ) [EOL] if desc and desc != test . id ( ) : [EOL] return [string] % ( test_id , desc . replace ( [string] , [string] ) ) [EOL] [EOL] return test_id [EOL] [EOL] def configure ( self , options , conf ) : [EOL] self . enabled = is_running_under_teamcity ( ) [EOL] self . config = conf [EOL] [EOL] def options ( self , parser , env = os . environ ) : [EOL] pass [EOL] [EOL] def _get_capture_plugin ( self ) : [EOL] [docstring] [EOL] for plugin in self . config . plugins . plugins : [EOL] if plugin . name == [string] : [EOL] return plugin [EOL] return None [EOL] [EOL] def _capture_plugin_enabled ( self ) : [EOL] plugin = self . _get_capture_plugin ( ) [EOL] return plugin is not None and plugin . enabled [EOL] [EOL] def _capture_plugin_buffer ( self ) : [EOL] plugin = self . _get_capture_plugin ( ) [EOL] if plugin is None : [EOL] return None [EOL] return getattr ( plugin , [string] , None ) [EOL] [EOL] def _captureStandardOutput_value ( self ) : [EOL] if self . _capture_plugin_enabled ( ) : [EOL] return [string] [EOL] else : [EOL] return [string] [EOL] [EOL] def report_fail ( self , test , fail_type , err ) : [EOL] [comment] [EOL] if is_string ( err [ [number] ] ) : [EOL] err = ( err [ [number] ] , Exception ( err [ [number] ] ) , err [ [number] ] ) [EOL] [EOL] test_id = self . get_test_id ( test ) [EOL] [EOL] details = convert_error_to_string ( err ) [EOL] [EOL] start_index = details . find ( _captured_output_start_marker ) [EOL] end_index = details . find ( _captured_output_end_marker ) [EOL] [EOL] if [number] <= start_index < end_index : [EOL] [comment] [EOL] details = details [ : start_index ] + details [ end_index + len ( _captured_output_end_marker ) : ] [EOL] [EOL] self . messages . testFailed ( test_id , message = fail_type , details = details , flowId = test_id ) [EOL] [EOL] def report_finish ( self , test ) : [EOL] test_id = self . get_test_id ( test ) [EOL] [EOL] captured_output = getattr ( test , [string] , None ) [EOL] if captured_output is None and self . _capture_plugin_enabled ( ) : [EOL] [comment] [EOL] captured_output = self . _capture_plugin_buffer ( ) [EOL] if captured_output : [EOL] for chunk in split_output ( limit_output ( captured_output ) ) : [EOL] self . messages . testStdOut ( test_id , chunk , flowId = test_id ) [EOL] [EOL] if test_id in self . test_started_datetime_map : [EOL] time_diff = datetime . datetime . now ( ) - self . test_started_datetime_map [ test_id ] [EOL] self . messages . testFinished ( test_id , testDuration = time_diff , flowId = test_id ) [EOL] else : [EOL] self . messages . testFinished ( test_id , flowId = test_id ) [EOL] [EOL] def prepareTestLoader ( self , loader ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if hasattr ( loader , [string] ) and nose . __versioninfo__ >= ( [number] , [number] , [number] ) : [EOL] old_loadTestsFromNames = loader . loadTestsFromNames [EOL] [EOL] def _loadTestsFromNames ( * args , ** kwargs ) : [EOL] suite = old_loadTestsFromNames ( * args , ** kwargs ) [EOL] self . total_tests += suite . countTestCases ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] loader . _visitedPaths = set ( ) [EOL] [EOL] return old_loadTestsFromNames ( * args , ** kwargs ) [EOL] loader . loadTestsFromNames = _loadTestsFromNames [EOL] [EOL] [comment] [EOL] def prepareTestRunner ( self , runner ) : [EOL] if self . total_tests : [EOL] self . messages . testCount ( self . total_tests ) [EOL] [EOL] def addError ( self , test , err ) : [EOL] test_class_name = get_class_fullname ( test ) [EOL] test_id = self . get_test_id ( test ) [EOL] [EOL] if issubclass ( err [ [number] ] , SkipTest ) : [EOL] self . messages . testIgnored ( test_id , message = ( [string] % str ( err [ [number] ] ) ) , flowId = test_id ) [EOL] self . report_finish ( test ) [EOL] elif issubclass ( err [ [number] ] , DeprecatedTest ) : [EOL] self . messages . testIgnored ( test_id , message = [string] , flowId = test_id ) [EOL] self . report_finish ( test ) [EOL] elif test_class_name == CONTEXT_SUITE_FQN : [EOL] self . messages . testStarted ( test_id , captureStandardOutput = self . _captureStandardOutput_value ( ) , flowId = test_id ) [EOL] self . report_fail ( test , [string] + test . error_context + [string] , err ) [EOL] self . messages . testFinished ( test_id , flowId = test_id ) [EOL] else : [EOL] self . report_fail ( test , [string] , err ) [EOL] self . report_finish ( test ) [EOL] [EOL] def addFailure ( self , test , err ) : [EOL] self . report_fail ( test , [string] , err ) [EOL] self . report_finish ( test ) [EOL] [EOL] def startTest ( self , test ) : [EOL] test_id = self . get_test_id ( test ) [EOL] [EOL] self . test_started_datetime_map [ test_id ] = datetime . datetime . now ( ) [EOL] self . messages . testStarted ( test_id , captureStandardOutput = self . _captureStandardOutput_value ( ) , flowId = test_id ) [EOL] [EOL] def addSuccess ( self , test ) : [EOL] self . report_finish ( test ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.TextIO$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.TextIO$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,builtins.Exception,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,builtins.Exception,typing.Any]$ 0 0 0 0 0 0 $typing.Tuple[typing.Any,builtins.Exception,typing.Any]$ 0 0 $typing.Tuple[typing.Any,builtins.Exception,typing.Any]$ 0 0 0 0 0 0 $typing.Tuple[typing.Any,builtins.Exception,typing.Any]$ 0 0 0 0 0 $typing.Tuple[typing.Any,builtins.Exception,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Tuple[typing.Any,builtins.Exception,typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $datetime.timedelta$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $datetime.timedelta$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
__author__ = [string] [EOL]	$builtins.str$ 0 0 0
[comment] [EOL] [docstring] [EOL] __author__ = [string] [EOL]	0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [docstring] [EOL] __author__ = [string] [EOL] [EOL] [EOL] def get_opt_type ( opt ) : [EOL] [docstring] [EOL] if opt . type in [ [string] , [string] ] : [EOL] return [string] [EOL] elif opt . choices : [EOL] assert isinstance ( opt . choices , list ) , [string] [EOL] return opt . choices [EOL] return [string] [EOL]	0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] [docstring] [EOL] import sys [EOL] import threading [EOL] from _jb_utils import VersionAgnosticUtils [EOL] from django . core . management import ManagementUtility , get_commands [EOL] from django_manage_commands_provider . _parser import _optparse , _argparse [EOL] import os [EOL] [EOL] __author__ = [string] [EOL] [EOL] [EOL] class _Fetcher ( threading . Thread ) : [EOL] def __init__ ( self , utility , command_name ) : [EOL] super ( _Fetcher , self ) . __init__ ( ) [EOL] self . result = None [EOL] self . __utility = utility [EOL] self . __command_name = command_name [EOL] self . command_lead_to_exception = False [EOL] [EOL] def run ( self ) : [EOL] try : [EOL] self . result = self . __utility . fetch_command ( self . __command_name ) [EOL] except Exception as e : [EOL] sys . stderr . write ( [string] . format ( self . __command_name , e ) ) [EOL] self . command_lead_to_exception = True [EOL] [EOL] [EOL] def report_data ( dumper , commands_to_skip ) : [EOL] [docstring] [EOL] utility = ManagementUtility ( ) [EOL] for command_name in get_commands ( ) . keys ( ) : [EOL] [EOL] if command_name in commands_to_skip : [EOL] sys . stderr . write ( [string] . format ( command_name ) ) [EOL] continue [EOL] [EOL] fetcher = _Fetcher ( utility , command_name ) [EOL] fetcher . daemon = True [EOL] fetcher . start ( ) [EOL] fetcher . join ( int ( os . getenv ( [string] , [string] ) ) ) [EOL] command = fetcher . result [EOL] if not command : [EOL] if fetcher . command_lead_to_exception : [EOL] sys . stderr . write ( [string] . format ( command_name ) ) [EOL] continue [EOL] else : [EOL] sys . stderr . write ( [string] . format ( command_name ) ) [EOL] sys . exit ( [number] ) [EOL] [EOL] use_argparse = False [EOL] [comment] [EOL] if _is_django_10 ( ) : [EOL] use_argparse = True [EOL] else : [EOL] try : [EOL] use_argparse = command . use_argparse [EOL] except AttributeError : [EOL] pass [EOL] [EOL] try : [EOL] parser = command . create_parser ( [string] , command_name ) [EOL] except Exception as e : [EOL] sys . stderr . write ( [string] . format ( command_name , e ) ) [EOL] continue [EOL] [EOL] try : [comment] [EOL] usage = command . usage ( [string] ) [EOL] except AttributeError : [EOL] usage = command . help [EOL] [EOL] dumper . start_command ( command_name = command_name , command_help_text = VersionAgnosticUtils ( ) . to_unicode ( usage ) . replace ( [string] , command_name ) ) [EOL] module_to_use = _argparse if use_argparse else _optparse [comment] [EOL] module_to_use . process_command ( dumper , command , parser ) [EOL] dumper . close_command ( ) [EOL] [EOL] [EOL] def _is_django_10 ( ) : [EOL] [docstring] [EOL] try : [EOL] from distutils . version import StrictVersion [EOL] import django [EOL] return StrictVersion ( django . get_version ( ) ) >= StrictVersion ( [string] ) [EOL] except ( ImportError , AttributeError ) : [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment]	0
__author__ = [string] [EOL]	$builtins.str$ 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] import sys [EOL] [docstring] [EOL] [EOL] import os [EOL] import sys [EOL] [EOL] [comment] [EOL] WINDOWS = sys . platform == [string] [EOL] LINUX = sys . platform == [string] [EOL] [EOL] [comment] [EOL] PYPY = [string] in sys . builtin_module_names [EOL] [EOL] [comment] [EOL] PYVERSION = sys . version_info [EOL] PY2 = PYVERSION < ( [number] , [number] ) [EOL] PY3 = PYVERSION >= ( [number] , [number] ) [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] C_TRACER = os . getenv ( [string] , [string] ) == [string] [EOL] [EOL] [comment] [EOL] METACOV = os . getenv ( [string] , [string] ) != [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] TESTING = os . getenv ( [string] , [string] ) == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $sys._version_info$ 0 0 0 0 0 $builtins.bool$ 0 $sys._version_info$ 0 0 0 0 0 0 0 $builtins.bool$ 0 $sys._version_info$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] [docstring] [EOL] [EOL] import sys [EOL] from coverage . cmdline import main [EOL] sys . exit ( main ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
__author__ = [string] [EOL] [EOL] if __name__ == [string] : [EOL] try : [EOL] from sphinx import cmdline [EOL] except : [EOL] raise NameError ( [string] ) [EOL] [EOL] import sys [EOL] cmdline . main ( sys . argv )	$builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
__author__ = [string] [EOL]	$builtins.str$ 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Tuple [EOL] import typing [EOL] [docstring] [EOL] [EOL] from docutils import writers [EOL] [EOL] [EOL] class Writer ( writers . UnfilteredWriter ) : [EOL] [EOL] supported = ( [string] , ) [EOL] [docstring] [EOL] [EOL] config_section = [string] [EOL] config_section_dependencies = ( [string] , ) [EOL] [EOL] def translate ( self ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Tuple [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] from docutils import writers [EOL] [EOL] [EOL] class Writer ( writers . Writer ) : [EOL] [EOL] supported = ( [string] , [string] , [string] ) [EOL] [docstring] [EOL] [EOL] config_section = [string] [EOL] config_section_dependencies = ( [string] , ) [EOL] [EOL] output = None [EOL] [docstring] [EOL] [EOL] def translate ( self ) : [EOL] self . output = self . document . pformat ( ) [EOL] [EOL] def supports ( self , format ) : [EOL] [docstring] [EOL] return True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Tuple [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] import os [EOL] import os . path [EOL] [EOL] from docutils import frontend , nodes , utils [EOL] from docutils . writers import html4css1 [EOL] [EOL] [EOL] class Writer ( html4css1 . Writer ) : [EOL] [EOL] default_stylesheet = [string] [EOL] [EOL] default_stylesheet_path = utils . relative_path ( os . path . join ( os . getcwd ( ) , [string] ) , os . path . join ( os . path . dirname ( __file__ ) , default_stylesheet ) ) [EOL] [EOL] default_template = [string] [EOL] [EOL] default_template_path = utils . relative_path ( os . path . join ( os . getcwd ( ) , [string] ) , os . path . join ( os . path . dirname ( __file__ ) , default_template ) ) [EOL] [EOL] settings_spec = html4css1 . Writer . settings_spec + ( [string] , [string] [string] [string] % ( default_stylesheet_path , default_template_path ) , ( ( [string] , [ [string] ] , { [string] : [string] , [string] : [string] } ) , ( [string] , [ [string] ] , { [string] : [string] , [string] : [string] } ) , ( frontend . SUPPRESS_HELP , [ [string] ] , { [string] : [string] , [string] : frontend . validate_boolean } ) , ) ) [EOL] [EOL] settings_default_overrides = { [string] : default_stylesheet_path , [string] : default_template_path , } [EOL] [EOL] relative_path_settings = ( [string] , ) [EOL] [EOL] config_section = [string] [EOL] config_section_dependencies = ( [string] , [string] ) [EOL] [EOL] def __init__ ( self ) : [EOL] html4css1 . Writer . __init__ ( self ) [EOL] self . translator_class = HTMLTranslator [EOL] [EOL] def interpolation_dict ( self ) : [EOL] subs = html4css1 . Writer . interpolation_dict ( self ) [EOL] settings = self . document . settings [EOL] pyhome = settings . python_home [EOL] subs [ [string] ] = pyhome [EOL] subs [ [string] ] = settings . pep_home [EOL] if pyhome == [string] : [EOL] subs [ [string] ] = [string] [EOL] else : [EOL] subs [ [string] ] = pyhome + [string] [EOL] index = self . document . first_child_matching_class ( nodes . field_list ) [EOL] header = self . document [ index ] [EOL] self . pepnum = header [ [number] ] [ [number] ] . astext ( ) [EOL] subs [ [string] ] = self . pepnum [EOL] if settings . no_random : [EOL] subs [ [string] ] = [number] [EOL] else : [EOL] import random [EOL] subs [ [string] ] = random . randrange ( [number] ) [EOL] try : [EOL] subs [ [string] ] = [string] % int ( self . pepnum ) [EOL] except ValueError : [EOL] subs [ [string] ] = self . pepnum [EOL] self . title = header [ [number] ] [ [number] ] . astext ( ) [EOL] subs [ [string] ] = self . title [EOL] subs [ [string] ] = [string] . join ( self . body_pre_docinfo + self . docinfo + self . body ) [EOL] return subs [EOL] [EOL] def assemble_parts ( self ) : [EOL] html4css1 . Writer . assemble_parts ( self ) [EOL] self . parts [ [string] ] = [ self . title ] [EOL] self . parts [ [string] ] = self . pepnum [EOL] [EOL] [EOL] class HTMLTranslator ( html4css1 . HTMLTranslator ) : [EOL] [EOL] def depart_field_list ( self , node ) : [EOL] html4css1 . HTMLTranslator . depart_field_list ( self , node ) [EOL] if [string] in node [ [string] ] : [EOL] self . body . append ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] from docutils import frontend [EOL] from docutils . writers import latex2e [EOL] [EOL] class Writer ( latex2e . Writer ) : [EOL] [docstring] [EOL] [EOL] supported = ( [string] , [string] , [string] ) [EOL] [docstring] [EOL] [EOL] default_template = [string] [EOL] default_preamble = [string] . join ( [ [string] , [string] , [string] , [string] , ] ) [EOL] [EOL] config_section = [string] [EOL] config_section_dependencies = ( [string] , [string] ) [EOL] [EOL] settings_spec = frontend . filter_settings_spec ( latex2e . Writer . settings_spec , [string] , template = ( [string] % default_template , [ [string] ] , { [string] : default_template , [string] : [string] } ) , latex_preamble = ( [string] [string] , [ [string] ] , { [string] : default_preamble } ) , ) [EOL] [EOL] def __init__ ( self ) : [EOL] latex2e . Writer . __init__ ( self ) [EOL] self . settings_defaults . update ( { [string] : [string] } ) [comment] [EOL] self . translator_class = XeLaTeXTranslator [EOL] [EOL] [EOL] class Babel ( latex2e . Babel ) : [EOL] [docstring] [EOL] language_codes = latex2e . Babel . language_codes . copy ( ) [EOL] [comment] [EOL] language_codes . update ( { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } ) [EOL] [comment] [EOL] language_codes = dict ( [ ( k . lower ( ) , v ) for ( k , v ) in list ( language_codes . items ( ) ) ] ) [EOL] [EOL] [comment] [EOL] for key in ( [string] , [string] , [string] , [string] , [string] , [string] , ) : [EOL] del ( language_codes [ key . lower ( ) ] ) [EOL] [EOL] def __init__ ( self , language_code , reporter ) : [EOL] self . language_code = language_code [EOL] self . reporter = reporter [EOL] self . language = self . language_name ( language_code ) [EOL] self . otherlanguages = { } [EOL] self . warn_msg = [string] [EOL] self . quote_index = [number] [EOL] self . quotes = ( [string] , [string] ) [EOL] [comment] [EOL] [comment] [EOL] self . literal_double_quote = [string] [comment] [EOL] [EOL] def __call__ ( self ) : [EOL] setup = [ [string] , [string] % self . language ] [EOL] if self . otherlanguages : [EOL] setup . append ( [string] % [string] . join ( sorted ( self . otherlanguages . keys ( ) ) ) ) [EOL] return [string] . join ( setup ) [EOL] [EOL] [EOL] class XeLaTeXTranslator ( latex2e . LaTeXTranslator ) : [EOL] [EOL] def __init__ ( self , document ) : [EOL] self . is_xetex = True [comment] [EOL] latex2e . LaTeXTranslator . __init__ ( self , document , Babel ) [EOL] if self . latex_encoding == [string] : [EOL] self . requirements . pop ( [string] , None ) [EOL] else : [EOL] self . requirements [ [string] ] = ( [string] % self . latex_encoding ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Tuple [EOL] import typing [EOL] [docstring] [EOL] [EOL] from docutils import parsers [EOL] [EOL] [EOL] class Parser ( parsers . Parser ) : [EOL] [EOL] [docstring] [EOL] [EOL] supported = ( [string] , ) [EOL] [EOL] config_section = [string] [EOL] config_section_dependencies = ( [string] , ) [EOL] [EOL] def parse ( self , inputstring , document ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [EOL] schemes = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] [string] ) , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] ) , [string] : ( [string] [string] ) , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Dict , List [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] import os [EOL] import os . path [EOL] import re [EOL] import sys [EOL] import unicodedata [EOL] import warnings [EOL] [EOL] import docutils . io [EOL] from docutils import ApplicationError , DataError [EOL] from docutils import nodes [EOL] from docutils . utils . error_reporting import ErrorOutput , SafeString [EOL] [EOL] [EOL] class SystemMessage ( ApplicationError ) : [EOL] [EOL] def __init__ ( self , system_message , level ) : [EOL] Exception . __init__ ( self , system_message . astext ( ) ) [EOL] self . level = level [EOL] [EOL] [EOL] class SystemMessagePropagation ( ApplicationError ) : pass [EOL] [EOL] [EOL] class Reporter : [EOL] [EOL] [docstring] [EOL] [EOL] levels = [string] . split ( ) [EOL] [docstring] [EOL] [EOL] [comment] [EOL] ( DEBUG_LEVEL , INFO_LEVEL , WARNING_LEVEL , ERROR_LEVEL , SEVERE_LEVEL ) = list ( range ( [number] ) ) [EOL] [EOL] def __init__ ( self , source , report_level , halt_level , stream = None , debug = False , encoding = None , error_handler = [string] ) : [EOL] [docstring] [EOL] [EOL] self . source = source [EOL] [docstring] [EOL] [EOL] self . error_handler = error_handler [EOL] [docstring] [EOL] [EOL] self . debug_flag = debug [EOL] [docstring] [EOL] [EOL] self . report_level = report_level [EOL] [docstring] [EOL] [EOL] self . halt_level = halt_level [EOL] [docstring] [EOL] [EOL] if not isinstance ( stream , ErrorOutput ) : [EOL] stream = ErrorOutput ( stream , encoding , error_handler ) [EOL] [EOL] self . stream = stream [EOL] [docstring] [EOL] [EOL] self . encoding = encoding or getattr ( stream , [string] , [string] ) [EOL] [docstring] [EOL] [EOL] self . observers = [ ] [EOL] [docstring] [EOL] [EOL] self . max_level = - [number] [EOL] [docstring] [EOL] [EOL] def set_conditions ( self , category , report_level , halt_level , stream = None , debug = False ) : [EOL] warnings . warn ( [string] [string] , DeprecationWarning , stacklevel = [number] ) [EOL] self . report_level = report_level [EOL] self . halt_level = halt_level [EOL] if not isinstance ( stream , ErrorOutput ) : [EOL] stream = ErrorOutput ( stream , self . encoding , self . error_handler ) [EOL] self . stream = stream [EOL] self . debug_flag = debug [EOL] [EOL] def attach_observer ( self , observer ) : [EOL] [docstring] [EOL] self . observers . append ( observer ) [EOL] [EOL] def detach_observer ( self , observer ) : [EOL] self . observers . remove ( observer ) [EOL] [EOL] def notify_observers ( self , message ) : [EOL] for observer in self . observers : [EOL] observer ( message ) [EOL] [EOL] def system_message ( self , level , message , * children , ** kwargs ) : [EOL] [docstring] [EOL] [comment] [EOL] if isinstance ( message , Exception ) : [EOL] message = SafeString ( message ) [EOL] [EOL] attributes = kwargs . copy ( ) [EOL] if [string] in kwargs : [EOL] source , line = get_source_line ( kwargs [ [string] ] ) [EOL] del attributes [ [string] ] [EOL] if source is not None : [EOL] attributes . setdefault ( [string] , source ) [EOL] if line is not None : [EOL] attributes . setdefault ( [string] , line ) [EOL] [comment] [EOL] if not [string] in attributes : [comment] [EOL] try : [comment] [EOL] source , line = self . get_source_and_line ( attributes . get ( [string] ) ) [EOL] [comment] [EOL] except AttributeError : [EOL] source , line = None , None [EOL] if source is not None : [EOL] attributes [ [string] ] = source [EOL] if line is not None : [EOL] attributes [ [string] ] = line [EOL] [comment] [EOL] [comment] [EOL] attributes . setdefault ( [string] , self . source ) [EOL] [EOL] msg = nodes . system_message ( message , level = level , type = self . levels [ level ] , * children , ** attributes ) [EOL] if self . stream and ( level >= self . report_level or self . debug_flag and level == self . DEBUG_LEVEL or level >= self . halt_level ) : [EOL] self . stream . write ( msg . astext ( ) + [string] ) [EOL] if level >= self . halt_level : [EOL] raise SystemMessage ( msg , level ) [EOL] if level > self . DEBUG_LEVEL or self . debug_flag : [EOL] self . notify_observers ( msg ) [EOL] self . max_level = max ( level , self . max_level ) [EOL] return msg [EOL] [EOL] def debug ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] if self . debug_flag : [EOL] return self . system_message ( self . DEBUG_LEVEL , * args , ** kwargs ) [EOL] [EOL] def info ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] return self . system_message ( self . INFO_LEVEL , * args , ** kwargs ) [EOL] [EOL] def warning ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] return self . system_message ( self . WARNING_LEVEL , * args , ** kwargs ) [EOL] [EOL] def error ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] return self . system_message ( self . ERROR_LEVEL , * args , ** kwargs ) [EOL] [EOL] def severe ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] return self . system_message ( self . SEVERE_LEVEL , * args , ** kwargs ) [EOL] [EOL] [EOL] class ExtensionOptionError ( DataError ) : pass [EOL] class BadOptionError ( ExtensionOptionError ) : pass [EOL] class BadOptionDataError ( ExtensionOptionError ) : pass [EOL] class DuplicateOptionError ( ExtensionOptionError ) : pass [EOL] [EOL] [EOL] def extract_extension_options ( field_list , options_spec ) : [EOL] [docstring] [EOL] option_list = extract_options ( field_list ) [EOL] option_dict = assemble_option_dict ( option_list , options_spec ) [EOL] return option_dict [EOL] [EOL] def extract_options ( field_list ) : [EOL] [docstring] [EOL] option_list = [ ] [EOL] for field in field_list : [EOL] if len ( field [ [number] ] . astext ( ) . split ( ) ) != [number] : [EOL] raise BadOptionError ( [string] ) [EOL] name = str ( field [ [number] ] . astext ( ) . lower ( ) ) [EOL] body = field [ [number] ] [EOL] if len ( body ) == [number] : [EOL] data = None [EOL] elif len ( body ) > [number] or not isinstance ( body [ [number] ] , nodes . paragraph ) or len ( body [ [number] ] ) != [number] or not isinstance ( body [ [number] ] [ [number] ] , nodes . Text ) : [EOL] raise BadOptionDataError ( [string] [string] % name ) [EOL] else : [EOL] data = body [ [number] ] [ [number] ] . astext ( ) [EOL] option_list . append ( ( name , data ) ) [EOL] return option_list [EOL] [EOL] def assemble_option_dict ( option_list , options_spec ) : [EOL] [docstring] [EOL] options = { } [EOL] for name , value in option_list : [EOL] convertor = options_spec [ name ] [comment] [EOL] if convertor is None : [EOL] raise KeyError ( name ) [comment] [EOL] if name in options : [EOL] raise DuplicateOptionError ( [string] % name ) [EOL] try : [EOL] options [ name ] = convertor ( value ) [EOL] except ( ValueError , TypeError ) as detail : [EOL] raise detail . __class__ ( [string] % ( name , value , [string] . join ( detail . args ) ) ) [EOL] return options [EOL] [EOL] [EOL] class NameValueError ( DataError ) : pass [EOL] [EOL] [EOL] def decode_path ( path ) : [EOL] [docstring] [EOL] [comment] [EOL] if isinstance ( path , str ) : [EOL] return path [EOL] try : [EOL] path = path . decode ( sys . getfilesystemencoding ( ) , [string] ) [EOL] except AttributeError : [comment] [EOL] return nodes . reprunicode ( path ) [EOL] except UnicodeDecodeError : [EOL] try : [EOL] path = path . decode ( [string] , [string] ) [EOL] except UnicodeDecodeError : [EOL] path = path . decode ( [string] , [string] ) [EOL] return nodes . reprunicode ( path ) [EOL] [EOL] [EOL] def extract_name_value ( line ) : [EOL] [docstring] [EOL] attlist = [ ] [EOL] while line : [EOL] equals = line . find ( [string] ) [EOL] if equals == - [number] : [EOL] raise NameValueError ( [string] ) [EOL] attname = line [ : equals ] . strip ( ) [EOL] if equals == [number] or not attname : [EOL] raise NameValueError ( [string] ) [EOL] line = line [ equals + [number] : ] . lstrip ( ) [EOL] if not line : [EOL] raise NameValueError ( [string] % attname ) [EOL] if line [ [number] ] in [string] : [EOL] endquote = line . find ( line [ [number] ] , [number] ) [EOL] if endquote == - [number] : [EOL] raise NameValueError ( [string] % ( attname , line [ [number] ] ) ) [EOL] if len ( line ) > endquote + [number] and line [ endquote + [number] ] . strip ( ) : [EOL] raise NameValueError ( [string] [string] % ( attname , line [ [number] ] ) ) [EOL] data = line [ [number] : endquote ] [EOL] line = line [ endquote + [number] : ] . lstrip ( ) [EOL] else : [EOL] space = line . find ( [string] ) [EOL] if space == - [number] : [EOL] data = line [EOL] line = [string] [EOL] else : [EOL] data = line [ : space ] [EOL] line = line [ space + [number] : ] . lstrip ( ) [EOL] attlist . append ( ( attname . lower ( ) , data ) ) [EOL] return attlist [EOL] [EOL] def new_reporter ( source_path , settings ) : [EOL] [docstring] [EOL] reporter = Reporter ( source_path , settings . report_level , settings . halt_level , stream = settings . warning_stream , debug = settings . debug , encoding = settings . error_encoding , error_handler = settings . error_encoding_error_handler ) [EOL] return reporter [EOL] [EOL] def new_document ( source_path , settings = None ) : [EOL] [docstring] [EOL] from docutils import frontend [EOL] if settings is None : [EOL] settings = frontend . OptionParser ( ) . get_default_values ( ) [EOL] source_path = decode_path ( source_path ) [EOL] reporter = new_reporter ( source_path , settings ) [EOL] document = nodes . document ( settings , reporter , source = source_path ) [EOL] document . note_source ( source_path , - [number] ) [EOL] return document [EOL] [EOL] def clean_rcs_keywords ( paragraph , keyword_substitutions ) : [EOL] if len ( paragraph ) == [number] and isinstance ( paragraph [ [number] ] , nodes . Text ) : [EOL] textnode = paragraph [ [number] ] [EOL] for pattern , substitution in keyword_substitutions : [EOL] match = pattern . search ( textnode ) [EOL] if match : [EOL] paragraph [ [number] ] = nodes . Text ( pattern . sub ( substitution , textnode ) ) [EOL] return [EOL] [EOL] def relative_path ( source , target ) : [EOL] [docstring] [EOL] source_parts = os . path . abspath ( source or type ( target ) ( [string] ) ) . split ( os . sep ) [EOL] target_parts = os . path . abspath ( target ) . split ( os . sep ) [EOL] [comment] [EOL] if source_parts [ : [number] ] != target_parts [ : [number] ] : [EOL] [comment] [EOL] [comment] [EOL] return [string] . join ( target_parts ) [EOL] source_parts . reverse ( ) [EOL] target_parts . reverse ( ) [EOL] while ( source_parts and target_parts [EOL] and source_parts [ - [number] ] == target_parts [ - [number] ] ) : [EOL] [comment] [EOL] source_parts . pop ( ) [EOL] target_parts . pop ( ) [EOL] target_parts . reverse ( ) [EOL] parts = [ [string] ] * ( len ( source_parts ) - [number] ) + target_parts [EOL] return [string] . join ( parts ) [EOL] [EOL] def get_stylesheet_reference ( settings , relative_to = None ) : [EOL] [docstring] [EOL] if settings . stylesheet_path : [EOL] assert not settings . stylesheet , ( [string] ) [EOL] if relative_to == None : [EOL] relative_to = settings . _destination [EOL] return relative_path ( relative_to , settings . stylesheet_path ) [EOL] else : [EOL] return settings . stylesheet [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def get_stylesheet_list ( settings ) : [EOL] [docstring] [EOL] assert not ( settings . stylesheet and settings . stylesheet_path ) , ( [string] ) [EOL] stylesheets = settings . stylesheet_path or settings . stylesheet or [ ] [EOL] [comment] [EOL] if not isinstance ( stylesheets , list ) : [EOL] stylesheets = [ path . strip ( ) for path in stylesheets . split ( [string] ) ] [EOL] [comment] [EOL] return [ find_file_in_dirs ( path , settings . stylesheet_dirs ) for path in stylesheets ] [EOL] [EOL] def find_file_in_dirs ( path , dirs ) : [EOL] [docstring] [EOL] if os . path . isabs ( path ) : [EOL] return path [EOL] for d in dirs : [EOL] if d == [string] : [EOL] f = path [EOL] else : [EOL] d = os . path . expanduser ( d ) [EOL] f = os . path . join ( d , path ) [EOL] if os . path . exists ( f ) : [EOL] return f [EOL] return path [EOL] [EOL] def get_trim_footnote_ref_space ( settings ) : [EOL] [docstring] [EOL] if settings . trim_footnote_reference_space is None : [EOL] return hasattr ( settings , [string] ) and settings . footnote_references == [string] [EOL] else : [EOL] return settings . trim_footnote_reference_space [EOL] [EOL] def get_source_line ( node ) : [EOL] [docstring] [EOL] while node : [EOL] if node . source or node . line : [EOL] return node . source , node . line [EOL] node = node . parent [EOL] return None , None [EOL] [EOL] def escape2null ( text ) : [EOL] [docstring] [EOL] parts = [ ] [EOL] start = [number] [EOL] while True : [EOL] found = text . find ( [string] , start ) [EOL] if found == - [number] : [EOL] parts . append ( text [ start : ] ) [EOL] return [string] . join ( parts ) [EOL] parts . append ( text [ start : found ] ) [EOL] parts . append ( [string] + text [ found + [number] : found + [number] ] ) [EOL] start = found + [number] [comment] [EOL] [EOL] def unescape ( text , restore_backslashes = False ) : [EOL] [docstring] [EOL] if restore_backslashes : [EOL] return text . replace ( [string] , [string] ) [EOL] else : [EOL] for sep in [ [string] , [string] , [string] ] : [EOL] text = [string] . join ( text . split ( sep ) ) [EOL] return text [EOL] [EOL] def strip_combining_chars ( text ) : [EOL] if isinstance ( text , str ) and sys . version_info < ( [number] , [number] ) : [EOL] return text [EOL] return [string] . join ( [ c for c in text if not unicodedata . combining ( c ) ] ) [EOL] [EOL] def find_combining_chars ( text ) : [EOL] [docstring] [EOL] if isinstance ( text , str ) and sys . version_info < ( [number] , [number] ) : [EOL] return [ ] [EOL] return [ i for i , c in enumerate ( text ) if unicodedata . combining ( c ) ] [EOL] [EOL] def column_indices ( text ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] string_indices = list ( range ( len ( text ) ) ) [EOL] for index in find_combining_chars ( text ) : [EOL] string_indices [ index ] = None [EOL] return [ i for i in string_indices if i is not None ] [EOL] [EOL] east_asian_widths = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] } [comment] [EOL] [comment] [EOL] [docstring] [EOL] [EOL] def column_width ( text ) : [EOL] [docstring] [EOL] if isinstance ( text , str ) and sys . version_info < ( [number] , [number] ) : [EOL] return len ( text ) [EOL] try : [EOL] width = sum ( [ east_asian_widths [ unicodedata . east_asian_width ( c ) ] for c in text ] ) [EOL] except AttributeError : [comment] [EOL] width = len ( text ) [EOL] [comment] [EOL] width -= len ( find_combining_chars ( text ) ) [EOL] return width [EOL] [EOL] def uniq ( L ) : [EOL] r = [ ] [EOL] for item in L : [EOL] if not item in r : [EOL] r . append ( item ) [EOL] return r [EOL] [EOL] [comment] [EOL] [comment] [EOL] def unique_combinations ( items , n ) : [EOL] [docstring] [EOL] if n == [number] : yield [ ] [EOL] else : [EOL] for i in range ( len ( items ) - n + [number] ) : [EOL] for cc in unique_combinations ( items [ i + [number] : ] , n - [number] ) : [EOL] yield [ items [ i ] ] + cc [EOL] [EOL] def normalize_language_tag ( tag ) : [EOL] [docstring] [EOL] [comment] [EOL] tag = tag . lower ( ) . replace ( [string] , [string] ) [EOL] [comment] [EOL] tag = re . sub ( [string] , [string] , tag ) [EOL] taglist = [ ] [EOL] subtags = [ subtag . replace ( [string] , [string] ) for subtag in tag . split ( [string] ) ] [EOL] base_tag = [ subtags . pop ( [number] ) ] [EOL] [comment] [EOL] for n in range ( len ( subtags ) , [number] , - [number] ) : [EOL] for tags in unique_combinations ( subtags , n ) : [EOL] taglist . append ( [string] . join ( base_tag + tags ) ) [EOL] taglist += base_tag [EOL] return taglist [EOL] [EOL] [EOL] class DependencyList ( object ) : [EOL] [EOL] [docstring] [EOL] [EOL] def __init__ ( self , output_file = None , dependencies = [ ] ) : [EOL] [docstring] [EOL] self . set_output ( output_file ) [EOL] for i in dependencies : [EOL] self . add ( i ) [EOL] [EOL] def set_output ( self , output_file ) : [EOL] [docstring] [EOL] self . list = [ ] [EOL] if output_file : [EOL] if output_file == [string] : [EOL] of = None [EOL] else : [EOL] of = output_file [EOL] self . file = docutils . io . FileOutput ( destination_path = of , encoding = [string] , autoclose = False ) [EOL] else : [EOL] self . file = None [EOL] [EOL] def add ( self , * filenames ) : [EOL] [docstring] [EOL] for filename in filenames : [EOL] if not filename in self . list : [EOL] self . list . append ( filename ) [EOL] if self . file is not None : [EOL] self . file . write ( filename + [string] ) [EOL] [EOL] def close ( self ) : [EOL] [docstring] [EOL] self . file . close ( ) [EOL] self . file = None [EOL] [EOL] def __repr__ ( self ) : [EOL] try : [EOL] output_file = self . file . name [EOL] except AttributeError : [EOL] output_file = None [EOL] return [string] % ( self . __class__ . __name__ , output_file , self . list ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Anytyping.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0
from typing import Literal , Tuple [EOL] import typing [EOL] import socket [EOL] import typing_extensions [EOL] [docstring] [EOL] [EOL] import socket [EOL] [EOL] def Main ( ) : [EOL] host = [string] [EOL] [EOL] port = [number] [EOL] [EOL] s = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) [EOL] [EOL] server = ( [string] , [number] ) [EOL] [EOL] s . bind ( ( host , port ) ) [EOL] [EOL] message = input ( [string] ) [EOL] [EOL] while message != [string] : [EOL] s . sendto ( message . encode ( [string] ) , server ) [EOL] data , addr = s . recvfrom ( [number] ) [EOL] data = data . decode ( [string] ) [EOL] print ( [string] + data ) [EOL] message = input ( [string] ) [EOL] s . close ( ) [EOL] [EOL] if __name__ == [string] : [EOL] Main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import time [EOL] import datetime [EOL] import pytz [EOL] [EOL] [comment] [EOL] [EOL] start_time = time . time ( ) [EOL] [EOL] def decorator_func ( original_func ) : [EOL] def wrapper_func ( * args , ** kwargs ) : [EOL] print ( [string] . format ( original_func . __name__ ) ) [EOL] return original_func ( * args , ** kwargs ) [EOL] return wrapper_func [EOL] [EOL] [EOL] [EOL] class decorator_class ( object ) : [EOL] def __init__ ( self , original_func ) : [EOL] self . original_func = original_func [EOL] [EOL] def __call__ ( self , * args , ** kwargs ) : [EOL] print ( [string] . format ( self . original_func . __name__ ) ) [EOL] return self . original_func ( * args , ** kwargs ) [EOL] [EOL] [EOL] [EOL] [comment] [EOL] @ decorator_class def display ( ) : [EOL] print ( [string] ) [EOL] [EOL] [EOL] [EOL] [EOL] [comment] [EOL] @ decorator_class def amaran ( ) : [EOL] print ( [string] ) [EOL] [EOL] [EOL] [EOL] [EOL] [comment] [EOL] @ decorator_class def displayInfo ( name , age = [number] ) : [EOL] print ( [string] . format ( name , age ) ) [EOL] [EOL] [EOL] [EOL] display ( ) [EOL] [comment] [EOL] displayInfo ( [string] , [number] ) [EOL] [EOL] end_time = time . time ( ) - start_time [EOL] [EOL] print ( str ( end_time ) + [string] ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0
import new_trial [EOL] import io [EOL] [docstring] [EOL] [EOL] import threading [EOL] import time [EOL] [EOL] class AsyncWrite ( threading . Thread ) : [EOL] def __init__ ( self , text , out ) : [EOL] threading . Thread . __init__ ( self ) [EOL] self . text = text [EOL] self . out = out [EOL] [EOL] [EOL] def run ( self ) : [EOL] fname = open ( self . out , [string] ) [EOL] fname . write ( self . text + [string] ) [EOL] fname . close ( ) [EOL] time . sleep ( [number] ) [EOL] print ( [string] + self . out ) [EOL] [EOL] def Main ( ) : [EOL] message = input ( [string] ) [EOL] background = AsyncWrite ( message , [string] ) [EOL] background . start ( ) [EOL] [EOL] i = [number] [EOL] [EOL] while i > [number] : [EOL] print ( [string] ) [EOL] time . sleep ( [number] ) [EOL] i -= [number] [EOL] [EOL] background . join ( ) [EOL] print ( [string] ) [EOL] [EOL] if __name__ == [string] : [EOL] Main ( ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Match [EOL] import typing [EOL] import re [EOL] [EOL] def Main ( ) : [EOL] [EOL] line = [string] [EOL] line2 = [string] [EOL] [EOL] matchResult = re . match ( [string] , line2 , re . M | re . I ) [EOL] [EOL] if matchResult : [EOL] print ( [string] + matchResult . group ( ) ) [EOL] else : [EOL] print ( [string] ) [EOL] [EOL] searchResult = re . search ( [string] , line , re . M | re . I ) [EOL] [EOL] if searchResult : [EOL] print ( [string] + searchResult . group ( ) ) [EOL] else : [EOL] print ( [string] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] Main ( ) [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] import resource [EOL] import os [EOL] import sys [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def memory_usage_resource ( ) : [EOL] rusage_denom = [number] [EOL] if sys . platform == [string] : [EOL] [comment] [EOL] rusage_denom = rusage_denom * rusage_denom [EOL] mem = resource . getrusage ( resource . RUSAGE_SELF ) . ru_maxrss / rusage_denom [EOL] return mem	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import Union , Dict , List [EOL] import new_trial [EOL] import io [EOL] import typing [EOL] class Duck : [EOL] def quack ( self ) : [EOL] print ( [string] ) [EOL] [EOL] def fly ( self ) : [EOL] print ( [string] ) [EOL] [EOL] class Person : [EOL] def quack ( self ) : [EOL] print ( [string] ) [EOL] [EOL] def fly ( self ) : [EOL] print ( [string] ) [EOL] [EOL] def quack_and_fly ( thing ) : [EOL] try : [EOL] thing . quack ( ) [EOL] thing . fly ( ) [EOL] thing . bark ( ) [EOL] except AttributeError as e : [EOL] print ( e ) [EOL] [EOL] d = Duck ( ) [EOL] p = Person ( ) [EOL] [EOL] quack_and_fly ( d ) [EOL] [comment] [EOL] [EOL] [docstring] [EOL] [EOL] amar = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] [EOL] try : [EOL] print ( amar [ [number] ] ) [EOL] except IndexError : [EOL] print ( [string] ) [EOL] [EOL] [docstring] [EOL] [EOL] dict1 = { [string] : [string] , [string] : [number] , [string] : [number] , [string] : [number] } [EOL] [EOL] try : [EOL] print ( [string] . format ( ** dict1 ) ) [EOL] except KeyError as e : [EOL] print ( [string] . format ( e ) ) [EOL] [EOL] [docstring] [EOL] [EOL] try : [EOL] f = open ( [string] ) [EOL] except IOError as e : [EOL] print ( e ) [EOL] else : [EOL] print ( f . read ( ) ) [EOL] f . close ( ) [EOL] [EOL] [docstring] [EOL] [EOL] [EOL] try : [EOL] f = open ( [string] ) [EOL] if f . name == [string] : [EOL] raise Exception [EOL] [comment] [EOL] [EOL] except FileNotFoundError : [EOL] print ( [string] ) [EOL] [EOL] except Exception : [EOL] print ( [string] ) [EOL] [EOL] else : [EOL] print ( f . read ( ) ) [EOL] f . close ( ) [EOL] [EOL] finally : [EOL] print ( [string] ) [EOL] [EOL] [EOL] [EOL] [docstring]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $new_trial.tryexcept.Duck$ 0 0 0 0 0 $new_trial.tryexcept.Person$ 0 0 0 0 0 0 0 0 $new_trial.tryexcept.Duck$ 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 $io.TextIOWrapper$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import new_trial [EOL] import logging [EOL] import logging [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] file_handler = logging . FileHandler ( [string] ) [EOL] [EOL] formatter = logging . Formatter ( [string] ) [EOL] [EOL] file_handler . setFormatter ( formatter ) [EOL] [EOL] logger . addHandler ( file_handler ) [EOL] [EOL] logger . setLevel ( logging . INFO ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] class Employee : [EOL] usage_nr = [number] [EOL] def __init__ ( self , first , last ) : [EOL] self . first = first [EOL] self . last = last [EOL] [comment] [EOL] Employee . usage_nr += [number] [EOL] logger . info ( [string] . format ( self . fullname , self . email ) ) [EOL] [EOL] @ property def email ( self ) : [EOL] return [string] . format ( self . first , self . last ) [EOL] [EOL] @ property def fullname ( self ) : [EOL] return [string] . format ( self . first , self . last ) [EOL] [EOL] @ fullname . setter def fullname ( self , name ) : [EOL] first , last = name . split ( [string] ) [EOL] self . first = first [EOL] self . last = last [EOL] [EOL] @ fullname . deleter def fullname ( self ) : [EOL] print ( [string] ) [EOL] self . first = None [EOL] self . last = None [EOL] [EOL] [EOL] [EOL] emp1 = Employee ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] [EOL] print ( emp1 . first ) [EOL] print ( emp1 . fullname ) [EOL] print ( emp1 . email ) [EOL] [EOL] emp1 . fullname = [string] [EOL] [EOL] print ( emp1 . first ) [EOL] print ( emp1 . fullname ) [EOL] print ( emp1 . email ) [EOL] [EOL] emp1 . first = [string] [EOL] [EOL] print ( emp1 . first ) [EOL] print ( emp1 . fullname ) [EOL] print ( emp1 . email ) [EOL] [EOL] del emp1 . fullname [EOL] [EOL] print ( emp1 . first ) [EOL] print ( emp1 . last ) [EOL] print ( emp1 . email ) [EOL] print ( emp1 . fullname ) [EOL] [EOL] del emp1 [EOL] [EOL] try : [EOL] print ( emp1 . first ) [EOL] print ( emp1 . last ) [EOL] except NameError as e : [EOL] print ( e ) [EOL] [EOL] [comment] [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $logging.FileHandler$ 0 0 0 0 0 0 0 0 0 $logging.Formatter$ 0 0 0 0 0 0 0 0 0 $logging.FileHandler$ 0 0 0 $logging.Formatter$ 0 0 0 $logging.Logger$ 0 0 0 $logging.FileHandler$ 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $new_trial.class_complete_addendum.Employee$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $new_trial.class_complete_addendum.Employee$ 0 0 0 0 0 0 $new_trial.class_complete_addendum.Employee$ 0 0 0 0 0 0 $new_trial.class_complete_addendum.Employee$ 0 0 0 0 0 $new_trial.class_complete_addendum.Employee$ 0 0 0 0 0 0 0 0 $new_trial.class_complete_addendum.Employee$ 0 0 0 0 0 0 $new_trial.class_complete_addendum.Employee$ 0 0 0 0 0 0 $new_trial.class_complete_addendum.Employee$ 0 0 0 0 0 $new_trial.class_complete_addendum.Employee$ 0 0 0 0 0 0 0 0 $new_trial.class_complete_addendum.Employee$ 0 0 0 0 0 0 $new_trial.class_complete_addendum.Employee$ 0 0 0 0 0 0 $new_trial.class_complete_addendum.Employee$ 0 0 0 0 0 0 $new_trial.class_complete_addendum.Employee$ 0 0 0 0 0 0 $new_trial.class_complete_addendum.Employee$ 0 0 0 0 0 0 $new_trial.class_complete_addendum.Employee$ 0 0 0 0 0 0 $new_trial.class_complete_addendum.Employee$ 0 0 0 0 0 0 $new_trial.class_complete_addendum.Employee$ 0 0 0 0 0 0 $new_trial.class_complete_addendum.Employee$ 0 0 0 0 0 0 0 $new_trial.class_complete_addendum.Employee$ 0 0 0 0 0 0 $new_trial.class_complete_addendum.Employee$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import socket [EOL] [docstring] [EOL] [EOL] import socket [EOL] [EOL] def Main ( ) : [EOL] host = [string] [EOL] port = [number] [EOL] [EOL] s = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) [EOL] [EOL] s . bind ( ( host , port ) ) [EOL] [EOL] print ( [string] ) [EOL] [EOL] while True : [EOL] data , addr = s . recvfrom ( [number] ) [EOL] data = data . decode ( [string] ) [EOL] [EOL] print ( [string] + str ( addr ) ) [EOL] print ( [string] + data ) [EOL] [EOL] data = data . upper ( ) [EOL] s . sendto ( data . encode ( [string] ) , addr ) [EOL] s . close [EOL] [EOL] if __name__ == [string] : [EOL] Main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] [EOL] class Player : [EOL] def __init__ ( self , ID , name , price , items ) : [EOL] self . ID = ID [EOL] self . name = name [EOL] self . price = price [EOL] self . items = items [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] + str ( self . ID ) + [string] + str ( self . name ) + [string] + str ( self . price ) + [string] + str ( self . items ) [EOL] [EOL] [EOL] class Player2 : [EOL] def __init__ ( self , ID2 , name2 , price2 , items2 ) : [EOL] self . ID2 = ID2 [EOL] self . name2 = name2 [EOL] self . price2 = price2 [EOL] self . items2 = items2 [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] + str ( self . ID2 ) + [string] + str ( self . name2 ) + [string] + str ( self . price2 ) + [string] + str ( self . items2 )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import pickle [EOL] from pickling2_classfile import Player [EOL] from pickling2_classfile import Player2 [EOL] [EOL] items = [ [string] , [string] , [string] ] [EOL] items2 = [ [string] , [string] , [string] ] [EOL] student1 = Player ( [number] , [string] , [number] , items ) [EOL] Teacher = Player2 ( [number] , [string] , [number] , items2 ) [EOL] [EOL] print ( student1 ) [EOL] print ( Teacher ) [EOL] [EOL] with open ( [string] , [string] ) as outputFile : [EOL] pickle . dump ( student1 , outputFile , pickle . HIGHEST_PROTOCOL ) [EOL] pickle . dump ( Teacher , outputFile , pickle . HIGHEST_PROTOCOL ) [EOL] [EOL] outputFile . close ( ) [EOL] [EOL] print ( [string] ) [EOL] [EOL] student2 = None [EOL] teacher2 = None [EOL] [EOL] with open ( [string] , [string] ) as inputFile : [EOL] student2 = pickle . load ( inputFile ) [EOL] teacher2 = pickle . load ( inputFile ) [EOL] [EOL] print ( student2 ) [EOL] print ( teacher2 ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0
[EOL] from typing import Any [EOL] import typing [EOL] import logging [EOL] import logging [EOL] [EOL] [comment] [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] logger . setLevel ( logging . DEBUG ) [EOL] [EOL] file_handler = logging . FileHandler ( [string] ) [EOL] file_handler . setLevel ( logging . ERROR ) [EOL] [EOL] file_handler . setFormatter ( logging . Formatter ( [string] ) ) [EOL] [EOL] stream_handler = logging . StreamHandler ( ) [EOL] stream_handler . setFormatter ( logging . Formatter ( [string] ) ) [EOL] [EOL] logger . addHandler ( file_handler ) [EOL] logger . addHandler ( stream_handler ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] num1 = [number] [EOL] [EOL] num2 = [number] [EOL] [EOL] def add ( x , y ) : [EOL] return x + y [EOL] [EOL] def sub ( x , y ) : [EOL] return x - y [EOL] [EOL] def div ( x , y ) : [EOL] try : [EOL] result = x / y [EOL] except ZeroDivisionError : [EOL] [comment] [EOL] logger . error ( [string] ) [EOL] [comment] [EOL] else : [EOL] return result [EOL] [EOL] def multi ( x , y ) : [EOL] return x * y [EOL] [EOL] [EOL] [EOL] add_result = add ( num1 , num2 ) [EOL] logger . debug ( [string] . format ( num1 , num2 , add_result ) ) [EOL] [EOL] sub_result = sub ( num1 , num2 ) [EOL] logger . debug ( [string] . format ( num1 , num2 , sub_result ) ) [EOL] [EOL] div_result = div ( num1 , num2 ) [EOL] logger . debug ( [string] . format ( num1 , num2 , div_result ) ) [EOL] [EOL] mul_result = multi ( num1 , num2 ) [EOL] logger . debug ( [string] . format ( num1 , num2 , add_result ) )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $logging.FileHandler$ 0 0 0 0 0 0 0 0 $logging.FileHandler$ 0 0 0 0 0 0 0 0 0 $logging.FileHandler$ 0 0 0 0 0 0 0 0 0 0 0 0 $logging.StreamHandler$ 0 0 0 0 0 0 0 $logging.StreamHandler$ 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 $logging.FileHandler$ 0 0 $logging.Logger$ 0 0 0 $logging.StreamHandler$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 $logging.Logger$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 $logging.Logger$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 $logging.Logger$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 $logging.Logger$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $typing.Any$ 0 0
import socket [EOL] [docstring] [EOL] [EOL] import socket [EOL] [EOL] def Main ( ) : [EOL] host = [string] [EOL] port = [number] [EOL] [EOL] s = socket . socket ( ) [EOL] s . connect ( ( host , port ) ) [EOL] [EOL] message = input ( [string] ) [EOL] [EOL] while message != [string] : [EOL] s . send ( message . encode ( [string] ) ) [EOL] data = s . recv ( [number] ) . decode ( [string] ) [EOL] [EOL] print ( [string] + data ) [EOL] message = input ( [string] ) [EOL] s . close ( ) [EOL] [EOL] if __name__ == [string] : [EOL] Main ( ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict , List [EOL] import typing [EOL] import io [EOL] import pickle [EOL] [EOL] dict1 = { [string] : [number] , [string] : [number] , [string] : [number] } [EOL] [EOL] list1 = [ [number] , [number] , [number] ] [EOL] [EOL] print ( dict1 ) [EOL] print ( list1 ) [EOL] [EOL] output = open ( [string] , [string] ) [EOL] [EOL] pickle . dump ( dict1 , output , pickle . HIGHEST_PROTOCOL ) [EOL] pickle . dump ( list1 , output , pickle . HIGHEST_PROTOCOL ) [EOL] [EOL] output . close ( ) [EOL] [EOL] print ( [string] ) [EOL] [EOL] inputFile = open ( [string] , [string] ) [EOL] [EOL] amar_dict2 = pickle . load ( inputFile ) [EOL] amar_list2 = pickle . load ( inputFile ) [EOL] [EOL] print ( amar_dict2 ) [EOL] print ( amar_list2 )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0
import socket [EOL] [docstring] [EOL] [EOL] import socket [EOL] [EOL] def Main ( ) : [EOL] host = [string] [EOL] port = [number] [EOL] [EOL] s = socket . socket ( ) [EOL] [EOL] s . bind ( ( host , port ) ) [EOL] s . listen ( [number] ) [EOL] [EOL] c , addr = s . accept ( ) [EOL] [EOL] print ( [string] + str ( addr ) ) [EOL] [EOL] while True : [EOL] data = c . recv ( [number] ) . decode ( [string] ) [EOL] if not data : [EOL] break [EOL] [EOL] data = data . upper ( ) [EOL] c . send ( data . encode ( [string] ) ) [EOL] [EOL] c . close ( ) [EOL] [EOL] if __name__ == [string] : [EOL] Main ( ) [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import datetime [EOL] import new_trial [EOL] import datetime [EOL] [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [docstring] [EOL] [EOL] class Employee : [EOL] [EOL] usage_nr = [number] [EOL] [comment] [EOL] [EOL] def __init__ ( self , fname , lname , age , job , pay ) : [EOL] self . fname = fname [EOL] self . lname = lname [EOL] self . age = age [EOL] self . job = job [EOL] self . pay = pay [EOL] self . email = fname + [string] + lname + [string] [EOL] [EOL] Employee . usage_nr += [number] [EOL] [EOL] def fullname ( self ) : [EOL] return [string] . format ( self . fname , self . lname ) [EOL] [EOL] def raise_pay ( self ) : [EOL] self . pay = int ( self . pay * self . raise_amt ) [EOL] [EOL] @ classmethod def set_raise_amt ( cls , amount ) : [EOL] cls . raise_amt = amount [EOL] [EOL] @ classmethod def from_string ( cls , emp_str ) : [EOL] fname_str , lname_str , age_str , job_str , pay_str = emp_str . split ( [string] ) [EOL] return cls ( fname_str , lname_str , age_str , job_str , pay_str ) [EOL] [EOL] @ staticmethod def isweekday ( day ) : [EOL] if day . weekday ( ) == [number] or day . weekday ( ) == [number] : [EOL] return False [EOL] return True [EOL] [EOL] def __repr__ ( self ) : [EOL] return [string] . format ( self . fname , self . lname , self . pay ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . fullname ( ) , self . email ) [EOL] [comment] [EOL] def __add__ ( self , other ) : [EOL] return self . pay + other . pay [EOL] [EOL] def __len__ ( self ) : [EOL] return len ( self . fullname ( ) ) [EOL] [EOL] [EOL] emp1 = Employee ( [string] , [string] , [number] , [string] , [number] ) [EOL] emp2 = Employee ( [string] , [string] , [number] , [string] , [number] ) [EOL] [EOL] Employee . set_raise_amt ( [number] ) [EOL] [EOL] print ( emp1 . raise_amt ) [EOL] print ( emp2 . raise_amt ) [EOL] print ( emp1 . __str__ ( ) ) [EOL] print ( emp1 . __repr__ ( ) ) [EOL] print ( emp1 + emp2 ) [EOL] print ( len ( emp1 ) ) [EOL] [EOL] emp3_str = [string] [EOL] emp4_str = [string] [EOL] [EOL] emp3 = Employee . from_string ( emp3_str ) [EOL] emp4 = Employee . from_string ( emp4_str ) [EOL] [EOL] print ( emp3 . email ) [EOL] print ( emp4 . email ) [EOL] [EOL] mydate = datetime . date ( [number] , [number] , [number] ) [EOL] [EOL] print ( mydate . weekday ( ) ) [EOL] [EOL] print ( emp3 . isweekday ( mydate ) ) [EOL] [EOL] employees = [ emp1 , emp2 , emp3 , emp4 ] [EOL] [EOL] print ( employees ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [docstring] [EOL] [EOL] class Developer ( Employee ) : [EOL] def __init__ ( self , fname , lname , age , job , pay , program ) : [EOL] super ( ) . __init__ ( fname , lname , age , job , pay ) [EOL] self . program = program [EOL] [EOL] @ classmethod def from_string_mod ( cls , emp_str ) : [EOL] fname_str , lname_str , age_str , job_str , pay_str , program_str = emp_str . split ( [string] ) [EOL] return cls ( fname_str , lname_str , age_str , job_str , pay_str , program_str ) [EOL] [EOL] [EOL] emp5_str = [string] [EOL] emp5 = Developer . from_string_mod ( emp5_str ) [EOL] [EOL] [EOL] print ( emp5 . email ) [EOL] [EOL] class Manager ( Employee ) : [EOL] def __init__ ( self , fname , lname , age , job , pay , employee = None ) : [EOL] super ( ) . __init__ ( fname , lname , age , job , pay ) [EOL] if employee == None : [EOL] self . employee = [ ] [EOL] else : [EOL] self . employee = employee [EOL] [EOL] def add_emp ( self , emp_add ) : [EOL] if emp_add not in self . employee : [EOL] return self . employee . append ( emp_add ) [EOL] [EOL] def remove_emp ( self , emp_rm ) : [EOL] try : [EOL] self . employee . remove ( emp_rm ) [EOL] except ValueError : [EOL] print ( [string] . format ( emp_rm . fullname ( ) ) ) [EOL] [EOL] def show_emp ( self ) : [EOL] for emp in self . employee : [EOL] print ( [string] , emp . fullname ( ) ) [EOL] [EOL] mgr1 = Manager ( [string] , [string] , [number] , [string] , [string] , [ emp1 ] ) [EOL] [EOL] print ( mgr1 . email ) [EOL] [EOL] mgr1 . show_emp ( ) [EOL] [EOL] mgr1 . add_emp ( emp2 ) [EOL] mgr1 . add_emp ( emp3 ) [EOL] mgr1 . add_emp ( emp4 ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] mgr1 . remove_emp ( emp2 ) [EOL] [EOL] [comment] [EOL] [EOL] mgr1 . remove_emp ( emp5 ) [EOL] [EOL] [EOL] class hierarchy_check : [EOL] [EOL] @ staticmethod def instancecheck ( a , b ) : [EOL] if isinstance ( a , b ) == True : [EOL] print ( [string] . format ( a . fullname ( ) , b . __name__ ) ) [EOL] else : [EOL] print ( [string] . format ( a . fullname ( ) , b . __name__ ) ) [EOL] [EOL] @ staticmethod def subclasscheck ( c , d ) : [EOL] if issubclass ( c , d ) == True : [EOL] print ( [string] . format ( c . __name__ , d . __name__ ) ) [EOL] else : [EOL] print ( [string] . format ( c . __name__ , d . __name__ ) ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] hierarchy_check . instancecheck ( mgr1 , Developer ) [EOL] [EOL] hierarchy_check . subclasscheck ( Manager , Employee ) [EOL] [EOL] [comment] [EOL] [EOL] [comment]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $datetime.date$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $new_trial.class_complete.Manager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $new_trial.class_complete.Manager$ 0 0 0 0 0 $new_trial.class_complete.Manager$ 0 0 0 0 0 0 $new_trial.class_complete.Manager$ 0 0 0 $typing.Any$ 0 0 $new_trial.class_complete.Manager$ 0 0 0 $typing.Any$ 0 0 $new_trial.class_complete.Manager$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $new_trial.class_complete.Manager$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $new_trial.class_complete.Manager$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $new_trial.class_complete.Manager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import threading [EOL] [docstring] [EOL] [EOL] import threading [EOL] import time [EOL] [EOL] [comment] [EOL] [EOL] def timer ( name , delay , repeat ) : [EOL] print ( [string] + name + [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] while repeat > [number] : [EOL] time . sleep ( delay ) [EOL] print ( name + [string] + str ( time . ctime ( time . time ( ) ) ) ) [EOL] repeat -= [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] print ( name + [string] ) [EOL] [EOL] [EOL] def Main ( ) : [EOL] t1 = threading . Thread ( target = timer , args = ( [string] , [number] , [number] ) ) [EOL] t2 = threading . Thread ( target = timer , args = ( [string] , [number] , [number] ) ) [EOL] [EOL] t1 . start ( ) [EOL] t2 . start ( ) [EOL] [EOL] print ( [string] ) [EOL] [EOL] if __name__ == [string] : [EOL] Main ( ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Any , Match , List [EOL] import typing [EOL] import io [EOL] import argparse [EOL] import re [EOL] import argparse [EOL] [EOL] def Main ( ) : [EOL] parser = argparse . ArgumentParser ( ) [EOL] [EOL] group = parser . add_mutually_exclusive_group ( ) [EOL] group . add_argument ( [string] , [string] , action = [string] ) [EOL] group . add_argument ( [string] , [string] , action = [string] ) [EOL] [EOL] parser . add_argument ( [string] , help = [string] ) [EOL] parser . add_argument ( [string] , help = [string] ) [EOL] parser . add_argument ( [string] , [string] , help = [string] , action = [string] ) [EOL] [EOL] args = parser . parse_args ( ) [EOL] [EOL] file = open ( args . fname ) [EOL] lineNum = [number] [EOL] result = [ ] [EOL] [EOL] for line in file . readlines ( ) : [EOL] line = line . strip ( [string] ) [EOL] lineNum += [number] [EOL] searchResult = re . search ( args . word , line , re . M | re . I ) [EOL] if searchResult : [EOL] if args . verbose : [EOL] result . append ( str ( [string] + str ( lineNum ) + [string] + str ( line ) ) ) [EOL] print ( [string] + str ( lineNum ) + [string] + str ( line ) ) [EOL] elif args . quiet : [EOL] result . append ( [string] + str ( lineNum ) ) [EOL] print ( str ( lineNum ) ) [EOL] else : [EOL] result . append ( [string] + str ( lineNum ) + [string] + str ( line ) ) [EOL] print ( str ( lineNum ) + [string] + str ( line ) ) [EOL] [EOL] if args . output : [EOL] fname2 = open ( [string] , [string] ) [EOL] for k in range ( len ( result ) ) : [EOL] fname2 . write ( str ( result [ k ] ) ) [EOL] fname2 . close [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] Main ( ) [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import List [EOL] import typing [EOL] import datetime [EOL] import datetime [EOL] import pytz [EOL] import builtins [EOL] [EOL] tday = datetime . date . today ( ) [EOL] tdelta = datetime . timedelta ( days = [number] ) [EOL] [EOL] print ( tday ) [EOL] print ( tday . weekday ( ) ) [EOL] print ( tday + tdelta ) [EOL] [EOL] bday = datetime . date ( [number] , [number] , [number] ) [EOL] [EOL] till_bday = bday - tday [EOL] [EOL] print ( till_bday ) [EOL] [EOL] t = datetime . time ( [number] , [number] , [number] , [number] ) [EOL] [EOL] print ( t ) [EOL] [EOL] total_t = datetime . datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] [EOL] print ( total_t ) [EOL] [EOL] tdelta2 = datetime . timedelta ( hours = [number] ) [EOL] [EOL] total_t2 = tdelta2 + total_t [EOL] [EOL] print ( total_t2 ) [EOL] [EOL] dt_now = datetime . datetime . now ( ) [EOL] dt_utcnow = datetime . datetime . utcnow ( ) [EOL] [EOL] print ( dt_now ) [EOL] [EOL] dt = datetime . datetime ( [number] , [number] , [number] , [number] , [number] , [number] , tzinfo = pytz . UTC ) [EOL] [EOL] print ( dt ) [EOL] [EOL] dt_now_pytz = datetime . datetime . now ( tz = pytz . UTC ) [EOL] [EOL] print ( dt_now_pytz ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] li = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] [EOL] li . sort ( reverse = True ) [EOL] [EOL] print ( li )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 $datetime.timedelta$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 $datetime.date$ 0 $datetime.timedelta$ 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.timedelta$ 0 $datetime.date$ 0 $datetime.date$ 0 0 0 0 $datetime.timedelta$ 0 0 0 $datetime.time$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.time$ 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 $datetime.timedelta$ 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 $datetime.timedelta$ 0 $datetime.datetime$ 0 0 0 0 $datetime.datetime$ 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0
def func ( ) : [EOL] print ( [string] ) [EOL] [EOL] print ( [string] ) [EOL] [EOL] if __name__ == [string] : [EOL] print ( [string] ) [EOL] else : [EOL] print ( [string] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import tut_sample1 [EOL] [EOL] print ( [string] ) [EOL] [EOL] tut_sample1 . func ( ) [EOL] [EOL] if __name__ == [string] : [EOL] print ( [string] ) [EOL] else : [EOL] print ( [string] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import io [EOL] import os [EOL] [EOL] [comment] [EOL] newfile = open ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [docstring] [EOL] newfile . seek ( [number] ) [EOL] print ( newfile . read ( ) ) [EOL] [EOL] [docstring] [EOL] print ( newfile . tell ( ) ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import os [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] for i in os . walk ( [string] ) : [EOL] print ( i ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] [EOL] [EOL] class Error ( Exception ) : [EOL] pass [EOL] [EOL] class ValueLargeError ( Error ) : [EOL] pass [EOL] [EOL] class ValueSmallError ( Error ) : [EOL] pass [EOL] [EOL] [EOL] value = [number] [EOL] [EOL] try : [EOL] my_value = int ( input ( [string] ) ) [EOL] if my_value < value : [EOL] raise ValueSmallError [EOL] elif my_value > value : [EOL] raise ValueLargeError [EOL] [EOL] print ( [string] ) [EOL] [EOL] except ValueSmallError : [EOL] print ( [string] . format ( value - my_value ) ) [EOL] [EOL] except ValueLargeError : [EOL] print ( [string] . format ( my_value - value ) ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import folium [EOL] import pandas as pd [EOL] import sys [EOL] [EOL] [EOL] data = pd . read_csv ( [string] ) [EOL] [EOL] [comment] [EOL] [EOL] lon = list ( data [ [string] ] ) [EOL] lat = list ( data [ [string] ] ) [EOL] elev = list ( data [ [string] ] ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] def color_elev ( eleva ) : [EOL] if ( eleva < [number] ) : [EOL] return [string] [EOL] elif ( [number] <= eleva <= [number] ) : [EOL] return [string] [EOL] else : [EOL] return [string] [EOL] [EOL] map = folium . Map ( location = [ [number] , - [number] ] , zoom_start = [number] , tiles = [string] ) [EOL] [EOL] fg = folium . FeatureGroup ( name = [string] ) [EOL] [EOL] for lt , ln , el in zip ( lat , lon , elev ) : [EOL] [comment] [EOL] fg . add_child ( folium . Marker ( location = [ lt , ln ] , popup = str ( el ) + [string] , icon = folium . Icon ( color = color_elev ( el ) ) ) ) [EOL] [EOL] map . add_child ( fg ) [EOL] [comment] [EOL] [EOL] map . save ( [string] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Any , List , Tuple [EOL] import typing [EOL] import pandas as pd [EOL] import numpy as np [EOL] import sys [EOL] import matplotlib . pyplot as plt [EOL] [EOL] pd . set_option ( [string] , [number] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] data = pd . read_csv ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] age_wrangled = data [ pd . notnull ( data [ [string] ] ) ] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] gender_data = data . groupby ( [string] , as_index = False ) [EOL] [EOL] [EOL] gender_mean_data = gender_data . mean ( ) [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] [EOL] total_nos = gender_data [ [string] ] . count ( ) [EOL] total_nos . columns = [ [string] , [string] ] [comment] [EOL] [EOL] [comment] [EOL] [EOL] del total_nos [ [string] ] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] total_survived = gender_data [ [string] ] . sum ( ) [EOL] [EOL] [comment] [EOL] [EOL] del total_survived [ [string] ] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] compare_survival_rate = total_nos . add ( total_survived , fill_value = [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] compare_survival_rate . plot . bar ( color = [ [string] , [string] ] ) [EOL] plt . title ( [string] , fontweight = [string] ) [EOL] plt . xlabel ( [string] , fontweight = [string] ) [EOL] plt . ylabel ( [string] , fontweight = [string] ) [EOL] plt . xticks ( [ [number] , [number] ] , [ [string] , [string] ] ) [EOL] [EOL] survived_labels = compare_survival_rate . loc [ [number] ] [ [string] ] , compare_survival_rate . loc [ [number] ] [ [string] ] [EOL] total_labels = compare_survival_rate . loc [ [number] ] [ [string] ] , compare_survival_rate . loc [ [number] ] [ [string] ] [EOL] [EOL] plt . text ( - [number] , [number] , compare_survival_rate . loc [ [number] ] [ [string] ] , horizontalalignment = [string] , verticalalignment = [string] , fontweight = [string] , color = [string] ) [EOL] [EOL] plt . text ( [number] , [number] , compare_survival_rate . loc [ [number] ] [ [string] ] , horizontalalignment = [string] , verticalalignment = [string] , fontweight = [string] , color = [string] ) [EOL] [EOL] plt . text ( [number] , [number] , compare_survival_rate . loc [ [number] ] [ [string] ] , horizontalalignment = [string] , verticalalignment = [string] , fontweight = [string] , color = [string] ) [EOL] [EOL] plt . text ( [number] , [number] , compare_survival_rate . loc [ [number] ] [ [string] ] , horizontalalignment = [string] , verticalalignment = [string] , fontweight = [string] , color = [string] ) [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] survival_data = data . groupby ( [string] , as_index = False ) [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] children_data = data [ data [ [string] ] <= [number] ] [EOL] adult_data = data [ data [ [string] ] > [number] ] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] children_list = [ children_data [ [string] ] . count ( ) , children_data [ [string] ] . sum ( ) ] [EOL] adult_list = [ adult_data [ [string] ] . count ( ) , adult_data [ [string] ] . sum ( ) ] [EOL] total_list = [ children_list , adult_list ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] Age_stats = pd . DataFrame ( [ children_list , adult_list ] , columns = [ [string] , [string] ] , index = [ [string] , [string] ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] Age_stats . plot . bar ( color = [ [string] , [string] ] ) [EOL] plt . xlabel ( [string] , fontweight = [string] ) [EOL] plt . ylabel ( [string] , fontweight = [string] ) [EOL] plt . title ( [string] , fontweight = [string] ) [EOL] [EOL] plt . text ( - [number] , [number] , children_list [ [number] ] , horizontalalignment = [string] , verticalalignment = [string] , fontweight = [string] , color = [string] ) [EOL] [EOL] plt . text ( [number] , [number] , children_list [ [number] ] , horizontalalignment = [string] , verticalalignment = [string] , fontweight = [string] , color = [string] ) [EOL] [EOL] plt . text ( [number] , [number] , adult_list [ [number] ] , horizontalalignment = [string] , verticalalignment = [string] , fontweight = [string] , color = [string] ) [EOL] [EOL] plt . text ( [number] , [number] , adult_list [ [number] ] , horizontalalignment = [string] , verticalalignment = [string] , fontweight = [string] , color = [string] ) [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] Survival_age = [ children_data . mean ( ) [ [string] ] , adult_data . mean ( ) [ [string] ] ] [EOL] [EOL] plt . figure ( [number] ) [EOL] plt . bar ( [ [number] , [number] ] , Survival_age , align = [string] , color = [ [string] , [string] ] ) [EOL] plt . xlabel ( [string] , fontweight = [string] ) [EOL] plt . ylabel ( [string] , fontweight = [string] ) [EOL] plt . title ( [string] , fontweight = [string] ) [EOL] plt . xticks ( [ [number] , [number] ] , [ [string] , [string] ] ) [EOL] [EOL] plt . text ( [number] , Survival_age [ [number] ] - [number] , round ( Survival_age [ [number] ] , [number] ) , horizontalalignment = [string] , verticalalignment = [string] , fontweight = [string] , color = [string] ) [EOL] [EOL] plt . text ( [number] , Survival_age [ [number] ] - [number] , round ( Survival_age [ [number] ] , [number] ) , horizontalalignment = [string] , verticalalignment = [string] , fontweight = [string] , color = [string] ) [EOL] [EOL] [comment] [EOL] [EOL] plt . figure ( [number] ) [EOL] data [ [string] ] . plot . hist ( bins = range ( [number] ) , color = [string] , edgecolor = [string] , linewidth = [number] , alpha = [number] ) [EOL] plt . axvline ( data [ [string] ] . mean ( ) , color = [string] , linestyle = [string] , linewidth = [number] ) [EOL] plt . xlabel ( [string] , fontweight = [string] ) [EOL] plt . ylabel ( [string] , fontweight = [string] ) [EOL] plt . title ( [string] , fontweight = [string] ) [EOL] plt . text ( data [ [string] ] . mean ( ) + [number] , [number] , [string] . format ( round ( data [ [string] ] . mean ( ) , [number] ) ) , horizontalalignment = [string] , verticalalignment = [string] , color = [string] ) [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] plt . figure ( [number] ) [EOL] survival_data [ [string] ] . plot . hist ( bins = range ( [number] ) , color = [string] , edgecolor = [string] , linewidth = [number] , alpha = [number] ) [EOL] [comment] [EOL] plt . xlabel ( [string] , fontweight = [string] ) [EOL] plt . ylabel ( [string] , fontweight = [string] ) [EOL] plt . ylim ( [ [number] , [number] ] ) [EOL] plt . title ( [string] , fontweight = [string] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] survived_stats = survival_data [ [string] ] . describe ( ) [EOL] [EOL] [comment] [EOL] [EOL] alive_data = data [ data [ [string] ] == [number] ] [EOL] died_data = data [ data [ [string] ] == [number] ] [EOL] [EOL] [EOL] plt . figure ( [number] ) [EOL] alive_data [ [string] ] . plot . hist ( bins = range ( [number] ) , color = [string] , edgecolor = [string] , linewidth = [number] , alpha = [number] ) [EOL] plt . xlabel ( [string] , fontweight = [string] ) [EOL] plt . ylabel ( [string] , fontweight = [string] ) [EOL] plt . ylim ( [ [number] , [number] ] ) [EOL] plt . title ( [string] , fontweight = [string] ) [EOL] [comment] [EOL] [EOL] plt . figure ( [number] ) [EOL] died_data [ [string] ] . plot . hist ( bins = range ( [number] ) , color = [string] , edgecolor = [string] , linewidth = [number] , alpha = [number] ) [EOL] plt . xlabel ( [string] , fontweight = [string] ) [EOL] plt . ylabel ( [string] , fontweight = [string] ) [EOL] plt . ylim ( [ [number] , [number] ] ) [EOL] plt . title ( [string] , fontweight = [string] ) [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] age_data = data . groupby ( [string] , as_index = False ) [EOL] [EOL] age_mean_data = age_data . mean ( ) [EOL] [EOL] [comment] [EOL] [EOL] age_list = age_mean_data [ [string] ] . tolist ( ) [EOL] [EOL] no_passengers = age_data . count ( ) [ [string] ] [EOL] print ( no_passengers ) [EOL] [EOL] [comment] [EOL] [EOL] plt . figure ( [number] ) [EOL] scatter_ex = plt . scatter ( age_mean_data [ [string] ] , age_mean_data [ [string] ] , s = [number] , alpha = [number] , c = no_passengers , cmap = [string] , edgecolors = [string] , vmin = [number] , vmax = [number] ) [EOL] plt . colorbar ( scatter_ex , label = [string] ) [EOL] plt . title ( [string] ) [EOL] plt . xlabel ( [string] ) [EOL] plt . ylabel ( [string] ) [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[typing.Any]]$ 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Union , Dict , List [EOL] import typing [EOL] import numpy as np [EOL] import pandas as pd [EOL] [EOL] amar = pd . Series ( np . arange ( [number] , [number] ) ) [EOL] deep = pd . Series ( np . arange ( [number] , [number] ) ) [EOL] [EOL] amar1 = pd . DataFrame ( { [string] : amar , [string] : deep } ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] odd_even = pd . DataFrame ( { [string] : pd . Series ( np . arange ( [number] , [number] , [number] ) ) , [string] : pd . Series ( np . arange ( [number] , [number] , [number] ) ) } ) [EOL] [EOL] [comment] [EOL] [EOL] sample1 = pd . DataFrame ( np . random . rand ( [number] , [number] ) , columns = [ [string] , [string] , [string] , [string] , [string] ] , index = [ [string] , [string] , [string] , [string] ] ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] world_cup = { [string] : [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] , [string] : [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [string] : [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [string] : [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] } [EOL] [EOL] chokers = { [string] : [ [string] , [string] , [string] ] , [string] : [ [number] , [number] , [number] ] , [string] : [ [number] , [number] , [number] ] , [string] : [ [number] , [number] , [number] ] , [string] : [ [number] , [number] , [number] ] } [EOL] [EOL] wc = pd . DataFrame ( world_cup ) [EOL] chok = pd . DataFrame ( chokers ) [EOL] [EOL] print ( wc . groupby ( [ [string] , [string] ] ) . groups ) [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] a = pd . DataFrame ( { [string] : [ [string] , [string] , [string] , [string] , [string] ] , [string] : [ [string] , [string] , [string] , [string] , [string] ] , [string] : [ [string] , [string] , [string] , [string] , [string] ] } ) [EOL] [EOL] [EOL] b = pd . DataFrame ( { [string] : [ [string] , [string] , [string] , [string] , [string] ] , [string] : [ [string] , [string] , [string] , [string] , [string] ] , [string] : [ [string] , [string] , [string] , [string] , [string] ] } ) [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[builtins.int],typing.List[builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[builtins.int],typing.List[builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[builtins.int],typing.List[builtins.str]]]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[builtins.int],typing.List[builtins.str]]]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict , List [EOL] import typing [EOL] import matplotlib . pyplot as plt [EOL] import numpy as np [EOL] [EOL] [comment] [EOL] x = range ( [number] ) [EOL] [comment] [EOL] [EOL] y = [ i ** [number] for i in x ] [EOL] [EOL] plt . figure ( [number] ) [EOL] plt . plot ( x , [ i * [number] for i in x ] , [string] ) [EOL] plt . plot ( x , [ i * [number] for i in x ] , [string] ) [EOL] plt . plot ( x , [ i * [number] for i in x ] , [string] ) [EOL] plt . grid ( True ) [EOL] plt . xlim ( [ - [number] , [number] ] ) [EOL] plt . ylim ( [ - [number] , [number] ] ) [EOL] [comment] [EOL] plt . xlabel ( [string] , fontweight = [string] ) [EOL] plt . ylabel ( [string] , fontweight = [string] ) [EOL] plt . title ( [string] , fontweight = [string] ) [EOL] plt . legend ( [ [string] , [string] , [string] ] ) [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] histy = np . random . rand ( [number] , [number] ) [EOL] [EOL] plt . figure ( [number] ) [EOL] plt . hist ( histy , [number] ) [EOL] plt . grid ( True ) [EOL] [comment] [EOL] [EOL] plt . figure ( [number] ) [EOL] plt . bar ( [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ) [EOL] plt . grid ( True ) [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] amar_dict = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] } [EOL] print ( amar_dict . keys ( ) ) [EOL] [EOL] plt . figure ( [number] ) [EOL] for i , keys in enumerate ( amar_dict ) : [EOL] plt . bar ( i + [number] , amar_dict [ keys ] ) [EOL] plt . xticks ( [ [number] , [number] , [number] , [number] , [number] ] , amar_dict . keys ( ) ) [EOL] plt . grid ( True ) [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] x = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] labels = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] plt . figure ( [number] ) [EOL] plt . figure ( figsize = ( [number] , [number] ) ) [EOL] plt . pie ( x , labels = labels ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] plt . figure ( [number] ) [EOL] x1 = np . random . rand ( [number] ) [EOL] y1 = np . random . rand ( [number] ) [EOL] plt . scatter ( x1 , y1 ) [EOL] plt . grid ( True ) [EOL] plt . show ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from bokeh . plotting import output_file , show , figure [EOL] import pandas as pd [EOL] [EOL] dataset = pd . read_excel ( [string] , sheet_name = [number] ) [EOL] [EOL] dataset [ [string] ] = dataset [ [string] ] / [number] [EOL] dataset [ [string] ] = dataset [ [string] ] / [number] [EOL] [EOL] p = figure ( plot_width = [number] , plot_height = [number] ) [EOL] [EOL] p . title . text = [string] [EOL] p . title . text_color = [string] [EOL] p . title . text_font = [string] [EOL] p . title . text_font_style = [string] [EOL] p . xaxis . axis_label = [string] [EOL] p . yaxis . axis_label = [string] [EOL] [EOL] [EOL] p . circle ( dataset [ [string] ] , dataset [ [string] ] , size = [number] ) [EOL] output_file ( [string] ) [EOL] show ( p ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict , List [EOL] import typing [EOL] import numpy as np [EOL] import pandas as pd [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [EOL] [comment] [EOL] n = np . array ( [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] ) [EOL] data_dict = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] } [EOL] [EOL] o = pd . Series ( n ) [EOL] o_dict = pd . Series ( data_dict ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] listx = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] listx2 = [ { [string] : [number] , [string] : [number] } , { [string] : [number] , [string] : [number] } , { [string] : [number] , [string] : [number] } ] [EOL] listx3 = [ { [string] : [number] , [string] : [number] } , { [string] : [number] , [string] : [number] } , { [string] : [number] , [string] : [number] } , { [string] : [number] , [string] : [number] , [string] : [number] } ] [EOL] [EOL] table = pd . DataFrame ( listx ) [EOL] table2 = pd . DataFrame ( listx2 , index = [ [string] , [string] , [string] ] ) [EOL] table3 = pd . DataFrame ( listx3 , index = [ [string] , [string] , [string] , [string] ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] series1 = pd . Series ( [ [number] , [number] , [number] , [number] , [number] ] , index = [ [string] , [string] , [string] , [string] , [string] ] ) [EOL] series2 = pd . Series ( [ [number] , [number] , [number] , [number] , [number] ] , index = [ [string] , [string] , [string] , [string] , [string] ] ) [EOL] table4 = pd . DataFrame ( { [string] : series1 , [string] : series2 , [string] : pd . Series ( [ [number] , [number] , [number] , [number] ] , index = [ [string] , [string] , [string] , [string] ] ) } ) [EOL] [EOL] print ( table4 ) [EOL] print ( table4 . loc [ [string] ] ) [EOL] print ( table4 . iloc [ [number] ] ) [EOL] [comment] [EOL] jim_series = table4 . pop ( [string] ) [EOL] print ( table4 ) [EOL] print ( jim_series ) [EOL] [EOL] table5 = pd . DataFrame ( { [string] : pd . Series ( [ [number] , [number] , [number] ] , index = [ [string] , [string] , [string] ] ) , [string] : pd . Series ( [ [number] , [number] , [number] ] , index = [ [string] , [string] , [string] ] ) } ) [EOL] [EOL] table5 [ [string] ] = pd . Series ( [ [number] , [number] , [number] ] , index = [ [string] , [string] , [string] ] ) [EOL] table5 [ [string] ] = pd . Series ( [ [number] , [number] , [number] ] , index = [ [string] , [string] , [string] ] ) [EOL] [EOL] row = pd . DataFrame ( [ [ [number] , [number] , [number] , [number] ] ] , index = [ [string] ] , columns = [ [string] , [string] , [string] , [string] ] ) [EOL] table5 = table5 . append ( row ) [EOL] [EOL] [comment] [EOL] [EOL] print ( table5 ) [EOL] [EOL] [comment] [EOL] [EOL] table6 = pd . read_csv ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] print ( table6 ) [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] import numpy as np [EOL] import matplotlib . pyplot as plt [EOL] from mpl_toolkits . mplot3d import Axes3D [EOL] [EOL] [EOL] def f ( x , y ) : [EOL] return ( [number] / [number] ) * ( ( [number] / y ) - ( [number] * x ) ) [EOL] [EOL] x = np . linspace ( [number] , [number] , [number] ) [EOL] y = np . linspace ( [number] , [number] , [number] ) [EOL] z = np . linspace ( [number] , [number] , [number] ) [EOL] [EOL] X , Y = np . meshgrid ( x , y ) [EOL] Z = f ( X , Y ) [EOL] [EOL] X2 , Y2 , Z2 = np . meshgrid ( x , y , z ) [EOL] [EOL] fig = plt . figure ( ) [EOL] ax = Axes3D ( fig ) [EOL] ax . contour3D ( X2 , Y2 , Z2 , [number] , cmap = [string] ) [EOL] [comment] [EOL] [comment] [EOL] ax . set_xlabel ( [string] ) [EOL] ax . set_ylabel ( [string] ) [EOL] ax . set_zlabel ( [string] ) ; [EOL] plt . show ( ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] [EOL] from typing import Any [EOL] import typing [EOL] import numpy as np [EOL] import matplotlib . pyplot as plt [EOL] from scipy . integrate import odeint [EOL] from mpl_toolkits . mplot3d import Axes3D [EOL] [EOL] rho = [number] [EOL] sigma = [number] [EOL] beta = [number] / [number] [EOL] [EOL] def f ( state , t ) : [EOL] x , y , z = state [comment] [EOL] return sigma * ( y - x ) , x * ( rho - z ) - y , x * y - beta * z [comment] [EOL] [EOL] state0 = [ [number] , [number] , [number] ] [EOL] t = np . arange ( [number] , [number] , [number] ) [EOL] [EOL] states = odeint ( f , state0 , t ) [EOL] [EOL] fig = plt . figure ( ) [EOL] ax = fig . gca ( projection = [string] ) [EOL] ax . plot ( states [ : , [number] ] , states [ : , [number] ] , states [ : , [number] ] , [string] ) [EOL] plt . show ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import numpy as np [EOL] [EOL] [EOL] amar = [ ] [EOL] [EOL] F0 = [number] [EOL] [EOL] F1 = [number] [EOL] [EOL] amar . append ( F0 ) [EOL] [EOL] amar . append ( F1 ) [EOL] [EOL] [EOL] n = int ( input ( [string] ) ) [EOL] [EOL] amar2 = np . zeros ( n + [number] , dtype = np . int32 ) [EOL] amar2 [ [number] ] = F0 [EOL] amar2 [ [number] ] = F1 [EOL] [EOL] for i in range ( [number] , n ) : [EOL] [EOL] a = amar [ i - [number] ] + amar [ i - [number] ] [EOL] [EOL] amar . append ( a ) [EOL] [EOL] amar2 [ i + [number] ] = a [EOL] [EOL] [EOL] print ( amar ) [EOL] print ( amar2 ) [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0
from typing import Any [EOL] import typing [EOL] import numpy as np [EOL] [EOL] A = np . array ( [ [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , - [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , - [number] , [number] , [number] ] , [ [number] , [number] , - [number] , - [number] , [number] ] ] ) [EOL] [EOL] b = np . array ( [ [number] , - [number] , [number] , - [number] , [number] ] ) [EOL] [EOL] Ainv = np . linalg . inv ( A ) [EOL] [EOL] x = np . linalg . solve ( A , b ) [EOL] [EOL] print ( x ) [EOL] [EOL] print ( np . allclose ( np . dot ( A , x ) , b ) ) [comment] [EOL] [EOL] print ( np . dot ( A , Ainv ) ) [comment] [EOL] [EOL] Eigval , Eigvec = np . linalg . eig ( A ) [EOL] [EOL] print ( [string] , Eigval ) [EOL] [EOL] print ( [string] , Eigvec ) [EOL] [EOL] print ( [string] , np . linalg . det ( A ) )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0
from typing import Any [EOL] import typing [EOL] import numpy as np [EOL] import matplotlib . pyplot as plt [EOL] [EOL] x = np . linspace ( [number] , [number] * np . pi , [number] ) [EOL] [EOL] y = [number] + np . sin ( x ) [EOL] [EOL] y2 = [number] + np . cos ( x ) [EOL] [EOL] a = np . mean ( y ) [EOL] b = np . std ( y ) [EOL] c = np . var ( y ) [EOL] [EOL] print ( a , b , c ) [EOL] [EOL] d = np . cov ( y ) [EOL] e = np . cov ( y2 ) [EOL] f = np . cov ( y , y2 ) [EOL] [EOL] print ( d , e , f ) [EOL] [EOL] plt . plot ( x , y ) [EOL] plt . plot ( x , y2 ) [EOL] plt . show ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 0 0
[EOL] [EOL] from typing import Any , List [EOL] import typing [EOL] import numpy as np [EOL] from scipy . integrate import odeint [EOL] import matplotlib . pyplot as plt [EOL] [EOL] def dampfunc ( x , t ) : [EOL] F0 = [number] [EOL] w = [number] [EOL] m = [number] [EOL] c = [number] [EOL] k = [number] [EOL] x0 , x1 = x [EOL] x2 = ( F0 * np . sin ( w * t ) ) / m - c * x1 / m - k * x0 / m [EOL] return x1 , x2 [EOL] [EOL] F0 = [number] [EOL] w = [number] [EOL] m = [number] [EOL] c = [number] [EOL] k = [number] [EOL] [EOL] init = [ [number] , [number] ] [EOL] [EOL] t = np . linspace ( [number] , [number] , [number] ) [EOL] [EOL] x = odeint ( dampfunc , init , t ) [EOL] [EOL] acc = ( F0 * np . sin ( w * t ) ) / m - c * x [ : , [number] ] / m - k * x [ : , [number] ] / m [EOL] [EOL] plt . plot ( t , x [ : , [number] ] , [string] , label = [string] ) [EOL] plt . plot ( t , x [ : , [number] ] , [string] , label = [string] ) [EOL] plt . plot ( t , acc , [string] , label = [string] ) [EOL] plt . xlabel ( [string] , fontweight = [string] , fontsize = [number] ) [EOL] plt . ylabel ( [string] , fontweight = [string] , fontsize = [number] ) [EOL] plt . legend ( framealpha = [number] ) [EOL] plt . grid ( [string] ) [EOL] plt . title ( [string] , fontweight = [string] ) [EOL] plt . show ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 $typing.List[builtins.float]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[builtins.float]$ 0 $typing.Any$ 0 0 0 $builtins.float$ 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 $builtins.float$ 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import numpy as np [EOL] from scipy . integrate . quadpack import quad [EOL] from scipy . optimize . minpack import fsolve [EOL] import matplotlib . pyplot as plt [EOL] [EOL] [EOL] [comment] [EOL] [EOL] x = np . linspace ( [number] , [number] , [number] ) [EOL] [EOL] def func ( x ) : [EOL] return np . array ( x ** [number] ) [EOL] [EOL] integral , err = quad ( func , [number] , [number] ) [EOL] [EOL] print ( [string] , integral ) [EOL] print ( [string] , err ) [EOL] [EOL] section = np . linspace ( [number] , [number] , [number] ) [EOL] [EOL] plt . plot ( x , func ( x ) ) [EOL] plt . fill_between ( section , func ( section ) , facecolor = [string] ) [EOL] plt . show ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import numpy as np [EOL] from scipy import interpolate [EOL] from matplotlib import pyplot as plt [EOL] [EOL] x = np . linspace ( - [number] , [number] , [number] ) [EOL] y = np . linspace ( - [number] , [number] , [number] ) [EOL] [EOL] x1 , y1 = np . meshgrid ( x , y ) [EOL] [EOL] z1 = x1 ** [number] + y1 ** [number] [EOL] [EOL] xi = np . linspace ( - [number] , [number] , [number] ) [EOL] yi = np . linspace ( - [number] , [number] , [number] ) [EOL] [EOL] x2 , y2 = np . meshgrid ( xi , yi ) [EOL] [EOL] tck = interpolate . bisplrep ( x1 , y1 , z1 , s = [number] ) [EOL] [EOL] z2 = interpolate . bisplev ( xi , yi , tck ) [EOL] [EOL] plt . figure ( [number] ) [EOL] plt . subplot ( [number] ) [EOL] plt . contourf ( x1 , y1 , z1 ) [EOL] plt . title ( [string] ) [EOL] plt . subplot ( [number] ) [EOL] plt . contourf ( x2 , y2 , z2 ) [EOL] plt . title ( [string] ) [EOL] plt . show ( ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Any , List [EOL] import typing [EOL] import io [EOL] import numpy as np [EOL] [EOL] [EOL] file = open ( [string] , [string] ) [EOL] [EOL] contents = file . readlines ( ) [EOL] [EOL] y = np . zeros ( [number] , dtype = np . int16 ) [EOL] sec = np . zeros ( [number] ) [EOL] rain = np . zeros ( [number] ) [EOL] [EOL] i = [number] [EOL] [EOL] for line in contents : [EOL] y [ i ] , sec [ i ] , rain [ i ] = line . split ( ) [EOL] i += [number] [EOL] [EOL] file . close ( ) [EOL] [EOL] file2 = open ( [string] , [string] ) [EOL] [EOL] for i in range ( [number] , [number] ) : [EOL] val = str ( y [ i ] ) + [string] + str ( sec [ i ] ) + [string] + str ( rain [ i ] ) + [string] [EOL] file2 . write ( val ) [EOL] [EOL] file2 . close ( ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $typing.Any$ 0 $builtins.int$ 0 0 $typing.Any$ 0 $builtins.int$ 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from netCDF4 import Dataset as dt [EOL] import numpy as np [EOL] import matplotlib . pyplot as plt [EOL] import matplotlib [EOL] [EOL] file = [string] [EOL] [EOL] ncfile = dt ( file , [string] ) [EOL] [EOL] [comment] [EOL] [EOL] lat = np . array ( ncfile . variables [ [string] ] [ : ] , dtype = np . float32 ) [EOL] lon = np . array ( ncfile . variables [ [string] ] [ : ] , dtype = np . float32 ) [EOL] time = np . array ( ncfile . variables [ [string] ] [ : ] , dtype = np . int32 ) [EOL] u10 = np . array ( ncfile . variables [ [string] ] [ : ] , dtype = np . float32 ) [EOL] v10 = np . array ( ncfile . variables [ [string] ] [ : ] , dtype = np . float32 ) [EOL] t2m = np . array ( ncfile . variables [ [string] ] [ : ] , dtype = np . float32 ) [EOL] al = np . array ( ncfile . variables [ [string] ] [ : ] , dtype = np . float32 ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] um = np . mean ( u10 , axis = [number] ) [EOL] vm = np . mean ( v10 , axis = [number] ) [EOL] uv = ( um ** [number] + vm ** [number] ) ** [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] plt . figure ( [number] ) [EOL] [comment] [EOL] Q = plt . quiver ( lon , lat , um , vm , pivot = [string] , color = [string] , units = [string] , scale = [number] ) [EOL] plt . xlabel ( [string] , fontweight = [string] ) [EOL] plt . ylabel ( [string] , fontweight = [string] ) [EOL] plt . quiverkey ( Q , [number] , - [number] , U = [number] , label = [string] ) [EOL] [comment] [EOL] plt . show ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import numpy as np [EOL] import matplotlib . pyplot as plt [EOL] [EOL] [EOL] x = np . linspace ( [number] , [number] * np . pi , [number] ) [EOL] [EOL] y = np . sin ( [number] * x ) [EOL] y1 = np . gradient ( y , x [ [number] ] - x [ [number] ] ) [EOL] y2 = np . gradient ( y1 , x [ [number] ] - x [ [number] ] ) [EOL] [EOL] [EOL] plt . plot ( x , y , [string] , label = [string] ) [EOL] plt . plot ( x , y1 , [string] , label = [string] ) [EOL] plt . plot ( x , y2 , [string] , label = [string] ) [EOL] plt . grid ( [string] ) [EOL] plt . legend ( framealpha = [number] ) [EOL] plt . show ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import numpy as np [EOL] import matplotlib . pyplot as plt [EOL] [EOL] Z = np . array ( ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) [EOL] [EOL] RH100 = np . array ( ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) [EOL] [EOL] Z = Z * [number] [comment] [EOL] RH = RH100 * [number] [comment] [EOL] [EOL] Ts = [number] [comment] [EOL] g = [number] [comment] [EOL] Cp = [number] [comment] [EOL] A = [number] * ( [number] ** [number] ) [comment] [EOL] B = [number] [comment] [EOL] Ps = [number] ** [number] [comment] [EOL] R = [number] [comment] [EOL] L = [number] * ( [number] ** [number] ) [comment] [EOL] v0 = [number] [comment] [EOL] [EOL] Zs = R * ( Ts + [number] ) / g [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] T = np . zeros ( len ( Z ) ) [EOL] es = np . array ( T ) [EOL] P = np . array ( T ) [EOL] rho = np . array ( T ) [EOL] e = np . array ( T ) [EOL] q = np . array ( T ) [EOL] W = np . array ( T ) [EOL] h = np . array ( T ) [EOL] MSE = np . array ( T ) [EOL] v = np . array ( T ) [EOL] E = np . array ( T ) [EOL] Tk = np . array ( T ) [EOL] [EOL] [EOL] T = Ts - g * Z / Cp [EOL] Tk = T + [number] [EOL] es = A * np . exp ( - B / Tk ) [EOL] e = RH100 * es / [number] [EOL] P = Ps * np . exp ( - g * Z / ( R * Tk ) ) [EOL] rho = P / ( R * Tk ) [EOL] q = [number] * ( e / P ) [EOL] W = q * rho [EOL] h = q * L + Cp * Tk [EOL] MSE = h + g * Z [EOL] v = v0 * ( ( np . exp ( Z / Zs ) ) - [number] ) [EOL] E = MSE + [number] * v ** [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] fig , ax1 = plt . subplots ( ) [EOL] ax2 = ax1 . twinx ( ) [EOL] ax1 . plot ( Z , P , [string] ) [EOL] ax2 . plot ( Z , es , [string] ) [EOL] [EOL] [EOL] [comment] [EOL] plt . figure ( [number] ) [EOL] plt . plot ( es , Z , [string] ) [EOL] plt . plot ( e , Z , [string] ) [EOL] plt . xlabel ( [string] ) [EOL] plt . ylabel ( [string] ) [EOL] plt . xticks ( np . linspace ( [number] , [number] , [number] ) ) [EOL] plt . yticks ( np . linspace ( [number] , [number] , [number] ) ) [EOL] plt . axis ( [ [number] , [number] , [number] , [number] ] ) [EOL] plt . title ( [string] ) [EOL] plt . suptitle ( [string] ) [EOL] plt . grid ( [string] ) [EOL] plt . legend ( [ [string] , [string] ] ) [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] plt . figure ( [number] ) [EOL] plt . scatter ( es , Z ) [EOL] plt . scatter ( e , Z ) [EOL] plt . xlabel ( [string] ) [EOL] plt . ylabel ( [string] ) [EOL] plt . xticks ( np . linspace ( [number] , [number] , [number] ) ) [EOL] plt . yticks ( np . linspace ( [number] , [number] , [number] ) ) [EOL] plt . axis ( [ [number] , [number] , [number] , [number] ] ) [EOL] plt . title ( [string] ) [EOL] plt . suptitle ( [string] ) [EOL] plt . grid ( [string] ) [EOL] plt . legend ( [ [string] , [string] ] ) [EOL] [comment] [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] import matplotlib . mlab as mlab [EOL] [EOL] m , s = [number] , [number] [EOL] iq = np . random . normal ( m , s , [number] ) [EOL] [comment] [EOL] num_bins = [number] [comment] [EOL] [EOL] [EOL] plt . figure ( [number] ) [EOL] [EOL] n , bins , patches = plt . hist ( iq , num_bins , normed = [number] , facecolor = [string] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] l = mlab . normpdf ( bins , m , s ) [EOL] [comment] [EOL] [EOL] plt . plot ( bins , l , [string] , label = [string] ) [EOL] plt . xlabel ( [string] ) [EOL] plt . ylabel ( [string] ) [EOL] plt . title ( [string] ) [EOL] plt . grid ( [string] ) [EOL] plt . savefig ( [string] , format = [string] , dpi = [number] ) [EOL] plt . show ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 0 $typing.Any$ 0 0 0 0 0 $builtins.float$ 0 0 $typing.Any$ 0 0 0 0 0 $builtins.float$ 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 $builtins.float$ 0 $typing.Any$ 0 $builtins.float$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $builtins.float$ 0 $builtins.float$ 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 $builtins.float$ 0 $builtins.float$ 0 $typing.Any$ 0 $builtins.float$ 0 $builtins.float$ 0 $typing.Any$ 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] import numpy as np [EOL] from scipy import interpolate [EOL] import matplotlib . pyplot as plt [EOL] [EOL] mat1 = { } [EOL] [EOL] x = np . arange ( [number] , [number] ) [EOL] y = np . exp ( - x / [number] ) [EOL] [EOL] f = interpolate . interp1d ( x , y ) [EOL] [EOL] x1 = np . linspace ( [number] , [number] , [number] ) [EOL] y1 = f ( x1 ) [EOL] [EOL] mat1 [ [string] ] = x [EOL] mat1 [ [string] ] = y [EOL] [EOL] [comment] [EOL] [EOL] [EOL] x2 = np . arange ( - [number] , [number] , [number] ) [EOL] y2 = np . arange ( - [number] , [number] , [number] ) [EOL] [EOL] xx , yy = np . meshgrid ( x2 , y2 ) [comment] [EOL] [EOL] zz = xx ** [number] + yy ** [number] [EOL] [EOL] f2 = interpolate . interp2d ( xx , yy , zz , kind = [string] ) [comment] [EOL] [EOL] x3 = np . arange ( - [number] , [number] , [number] ) [EOL] y3 = np . arange ( - [number] , [number] , [number] ) [EOL] [EOL] z3 = f2 ( x3 , y3 ) [EOL] [EOL] mat1 [ [string] ] = x3 [EOL] mat1 [ [string] ] = y3 [EOL] mat1 [ [string] ] = z3 [EOL] [EOL] plt . figure ( [number] ) [EOL] plt . contourf ( xx , yy , zz ) [EOL] [EOL] plt . figure ( [number] ) [EOL] plt . contourf ( x3 , y3 , z3 ) [EOL] plt . show ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import sympy as sym [EOL] [EOL] x = sym . Symbol ( [string] ) [EOL] y = sym . Symbol ( [string] ) [EOL] [EOL] print ( sym . integrate ( x ** [number] + x + [number] ) ) [EOL] print ( sym . integrate ( x ** [number] + sym . sin ( x ) ) ) [EOL] print ( sym . expand ( ( x + y ) ** [number] ) ) [EOL] print ( sym . solve ( x ** [number] - [number] , x ) ) [EOL] print ( sym . factor ( x ** [number] - [number] * x ** [number] + [number] ) ) [EOL] [EOL] l = sym . Symbol ( [string] ) [EOL] T = sym . Symbol ( [string] ) [EOL] [EOL] print ( sym . integrate ( sym . sin ( [number] * sym . pi * l / T ) , l ) ) [EOL] [EOL] from sympy . integrals import laplace_transform as lt [EOL] from sympy . abc import t , s [EOL] [EOL] a = lt ( t ** [number] + t + [number] , t , s ) [EOL] [EOL] print ( a ) [EOL] [EOL] from sympy . integrals import inverse_laplace_transform as ilt [EOL] [EOL] b = ilt ( ( s ** [number] + s + [number] ) / ( s ** [number] ) , s , t ) [EOL] print ( b )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0
[EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import numpy as np [EOL] import matplotlib . pyplot as plt [EOL] [EOL] analysis = [number] [comment] [EOL] [EOL] [comment] [EOL] kappa = [number] [comment] [EOL] lambda1 = [number] [comment] [EOL] nu = [number] [comment] [EOL] M = [number] [comment] [EOL] N = [number] [comment] [EOL] pc = [number] [comment] [EOL] p0 = [number] [comment] [EOL] [EOL] [EOL] [comment] [EOL] v = N - lambda1 * np . log ( pc ) - kappa * np . log ( pc / p0 ) [comment] [EOL] e0 = v - [number] [comment] [EOL] OCR = pc / p0 [comment] [EOL] [EOL] K0_nc = ( [number] - [number] * M ) / ( [number] + M ) [comment] [EOL] eta_K0nc = [number] * ( [number] - K0_nc ) / ( [number] + [number] * K0_nc ) [comment] [EOL] [EOL] [EOL] [comment] [EOL] itr = [number] [comment] [EOL] strain_inc = [number] / [number] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] p = np . zeros ( ( itr , [number] ) ) [comment] [EOL] q = np . zeros ( ( itr , [number] ) ) [comment] [EOL] u = np . zeros ( ( itr , [number] ) ) [comment] [EOL] void = np . zeros ( ( itr , [number] ) ) [comment] [EOL] epsV = np . zeros ( ( itr , [number] ) ) [comment] [EOL] epsD = np . zeros ( ( itr , [number] ) ) [comment] [EOL] [EOL] [EOL] [comment] [EOL] D = np . zeros ( ( [number] , [number] ) ) [comment] [EOL] dfds = np . zeros ( ( [number] , [number] ) ) [comment] [EOL] dfdep = np . zeros ( ( [number] , [number] ) ) [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] p_ys = np . linspace ( [number] , pc , [number] ) [EOL] [EOL] q_ys_c = ( ( M ** [number] ) * p_ys * pc - ( M ** [number] ) * p_ys * p_ys ) ** [number] [EOL] q_ys_e = - ( ( M ** [number] ) * p_ys * pc - ( M ** [number] ) * p_ys * p_ys ) ** [number] [EOL] [EOL] [comment] [EOL] [EOL] i = [number] [EOL] [EOL] stress = np . array ( [ [ p0 ] , [ p0 ] , [ p0 ] , [ [number] ] , [ [number] ] , [ [number] ] ] ) [EOL] strain = np . array ( [ [ [number] ] , [ [number] ] , [ [number] ] , [ [number] ] , [ [number] ] , [ [number] ] ] ) [EOL] [EOL] p [ i ] = ( stress [ [number] ] + stress [ [number] ] + stress [ [number] ] ) / [number] [EOL] q [ i ] = ( stress [ [number] ] - stress [ [number] ] ) [EOL] [EOL] [EOL] yield_s = q [ i ] ** [number] - ( M ** [number] ) * p [ i ] * pc + ( M ** [number] ) * ( p [ i ] ** [number] ) [comment] [EOL] [EOL] void [ i ] = e0 [EOL] [EOL] [comment] [EOL] [EOL] [EOL] while i < itr - [number] : [EOL] K = v * p [ i ] / kappa [comment] [EOL] G = ( [number] * K * ( [number] - [number] * nu ) ) / ( [number] * ( [number] + nu ) ) [comment] [EOL] if yield_s == [number] : [EOL] pc = ( q [ i ] ** [number] / M ** [number] + p [ i ] ** [number] ) / p [ i ] [EOL] else : [EOL] pc = pc [EOL] [EOL] print ( [string] , i , [string] , yield_s , [string] , pc ) [EOL] [EOL] [comment] [EOL] [EOL] D [ [number] , [number] ] = D [ [number] , [number] ] = D [ [number] , [number] ] = K + ( [number] / [number] ) * G [EOL] D [ [number] , [number] ] = D [ [number] , [number] ] = D [ [number] , [number] ] = D [ [number] , [number] ] = D [ [number] , [number] ] = D [ [number] , [number] ] = K - ( [number] / [number] ) * G [EOL] D [ [number] , [number] ] = D [ [number] , [number] ] = D [ [number] , [number] ] = G [EOL] [EOL] dfds [ [number] , [number] ] = ( [number] * p [ i ] - pc ) / [number] + [number] * ( stress [ [number] ] - p [ i ] ) / M ** [number] [EOL] dfds [ [number] , [number] ] = ( [number] * p [ i ] - pc ) / [number] + [number] * ( stress [ [number] ] - p [ i ] ) / M ** [number] [EOL] dfds [ [number] , [number] ] = ( [number] * p [ i ] - pc ) / [number] + [number] * ( stress [ [number] ] - p [ i ] ) / M ** [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] dfds [ [number] , [number] ] = dfds [ [number] , [number] ] = dfds [ [number] , [number] ] = [number] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] dfdep [ [number] , [number] ] = ( - [number] ) * ( [number] ** [number] ) * ( p [ i ] * pc * ( [number] + e0 ) ) / ( lambda1 - kappa ) [EOL] dfdep [ [number] , [number] ] = ( - [number] ) * ( [number] ** [number] ) * ( p [ i ] * pc * ( [number] + e0 ) ) / ( lambda1 - kappa ) [EOL] dfdep [ [number] , [number] ] = ( - [number] ) * ( [number] ** [number] ) * ( p [ i ] * pc * ( [number] + e0 ) ) / ( lambda1 - kappa ) [EOL] [EOL] [EOL] dfdep [ [number] , [number] ] = dfdep [ [number] , [number] ] = dfdep [ [number] , [number] ] = [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [EOL] if yield_s < [number] : [EOL] Dep = D [EOL] else : [EOL] Dep = D - ( np . dot ( np . dot ( D , dfds ) , np . dot ( np . transpose ( dfds ) , D ) ) / ( ( - [number] * np . dot ( np . transpose ( dfdep ) , dfds ) ) + ( np . dot ( np . transpose ( dfds ) , np . dot ( D , dfds ) ) ) ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] if analysis == [number] : [comment] [EOL] dstrain = np . array ( [ [ strain_inc ] , [ - Dep [ [number] , [number] ] / ( Dep [ [number] , [number] ] + Dep [ [number] , [number] ] ) * strain_inc ] , [ - Dep [ [number] , [number] ] / ( Dep [ [number] , [number] ] + Dep [ [number] , [number] ] ) * strain_inc ] , [ [number] ] , [ [number] ] , [ [number] ] ] ) [EOL] [EOL] elif analysis == [number] : [comment] [EOL] dstrain = np . array ( [ [ strain_inc ] , [ - strain_inc * [number] ] , [ - strain_inc * [number] ] , [ [number] ] , [ [number] ] , [ [number] ] ] ) [EOL] elif analysis == [number] : [EOL] dstrain = np . array ( [ [ strain_inc ] , [ [number] ] , [ [number] ] , [ [number] ] , [ [number] ] , [ [number] ] ] ) [EOL] [EOL] dS = np . dot ( Dep , dstrain ) [EOL] [EOL] stress += dS [EOL] [EOL] strain += dstrain [EOL] [EOL] depsV = dstrain [ [number] ] + dstrain [ [number] ] + dstrain [ [number] ] [EOL] depsD = ( [number] / [number] ) * ( dstrain [ [number] ] - dstrain [ [number] ] ) [EOL] [EOL] V = N - ( lambda1 * np . log ( pc ) ) + ( kappa * np . log ( pc / p [ i ] ) ) [EOL] [EOL] i += [number] [EOL] [EOL] p [ i ] = ( stress [ [number] ] + stress [ [number] ] + stress [ [number] ] ) / [number] [EOL] q [ i ] = ( stress [ [number] ] - stress [ [number] ] ) [EOL] u [ i ] = p0 + ( q [ i ] / [number] ) - p [ i ] [EOL] [EOL] [EOL] yield_s = q [ i ] ** [number] - ( M ** [number] ) * p [ i ] * pc + ( M ** [number] ) * ( p [ i ] ** [number] ) [comment] [EOL] [EOL] print ( [string] , yield_s ) [EOL] [EOL] void [ i ] = V - [number] [EOL] [EOL] epsV [ i ] = epsV [ i - [number] ] + depsV [EOL] epsD [ i ] = epsD [ i - [number] ] + depsD [EOL] [EOL] if yield_s < [number] : [EOL] yield_s = q [ i ] ** [number] - ( M ** [number] ) * p [ i ] * pc + ( M ** [number] ) * p [ i ] ** [number] [EOL] else : [EOL] yield_s = [number] [EOL] [EOL] [EOL] p_ys_final = np . linspace ( [number] , pc , [number] ) [EOL] q_ys_c_final = ( ( M ** [number] ) * p_ys_final * pc - ( M ** [number] ) * p_ys_final * p_ys_final ) ** [number] [EOL] q_ys_e_final = - ( ( M ** [number] ) * p_ys_final * pc - ( M ** [number] ) * p_ys_final * p_ys_final ) ** [number] [EOL] [EOL] [EOL] plt . figure ( [number] ) [EOL] plt . plot ( p_ys_final , q_ys_c_final , [string] ) [EOL] plt . plot ( p , q , [string] , label = [string] ) [EOL] plt . plot ( [ p [ [number] ] , p [ - [number] ] ] , [ q [ [number] ] , q [ - [number] ] ] , [string] ) [EOL] plt . plot ( p_ys_final , q_ys_e_final , [string] ) [EOL] plt . plot ( [ [number] , pc + [number] ] , [ [number] , ( pc + [number] ) * M ] , [string] ) [EOL] plt . plot ( [ [number] , pc + [number] ] , [ [number] , - ( pc + [number] ) * M ] , [string] ) [EOL] plt . plot ( [ [number] , ( pc + [number] ) ] , [ [number] , ( pc + [number] ) * eta_K0nc ] , [string] ) [EOL] plt . plot ( p_ys , q_ys_c , [string] ) [EOL] plt . plot ( p_ys , q_ys_e , [string] ) [EOL] plt . grid ( True ) [EOL] plt . xlabel ( [string] ) [EOL] plt . ylabel ( [string] ) [EOL] plt . title ( [string] ) [EOL] plt . legend ( ) [EOL] [comment] [EOL] [EOL] [EOL] [EOL] [EOL] plt . figure ( [number] ) [EOL] plt . plot ( epsD , q , [string] , label = [string] ) [EOL] plt . xlabel ( [string] ) [EOL] plt . ylabel ( [string] ) [EOL] [comment] [EOL] plt . grid ( True ) [EOL] [comment] [EOL] [EOL] plt . figure ( [number] ) [EOL] plt . semilogx ( p , epsV , [string] , label = [string] ) [EOL] plt . ylabel ( [string] ) [EOL] plt . gca ( ) . invert_yaxis ( ) [EOL] plt . xlabel ( [string] ) [EOL] plt . title ( [string] , fontweight = [string] ) [EOL] [comment] [EOL] plt . grid ( True ) [EOL] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] plt . show ( ) [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 $typing.Any$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 $builtins.float$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 $builtins.float$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 $builtins.float$ 0 0 $builtins.float$ 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 $typing.Any$ 0 $builtins.int$ 0 0 $builtins.float$ 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.float$ 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 $builtins.float$ 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.float$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 $builtins.float$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 $builtins.float$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 $builtins.float$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 $builtins.float$ 0 0 $builtins.float$ 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 $builtins.float$ 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $builtins.int$ 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 $builtins.float$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 $builtins.float$ 0 0 $builtins.float$ 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 $builtins.float$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 $builtins.float$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import numpy as np [EOL] import matplotlib . pyplot as plt [EOL] from mpl_toolkits . mplot3d import Axes3D [EOL] from matplotlib import cm [EOL] from matplotlib . ticker import LinearLocator , FormatStrFormatter [EOL] [EOL] [EOL] M = [number] [EOL] [EOL] pc = [number] [EOL] [EOL] x1 = np . linspace ( [number] , [number] , [number] ) [EOL] y1 = np . linspace ( [number] , [number] , [number] ) [EOL] z1 = np . linspace ( [number] , [number] , [number] ) [EOL] [EOL] [EOL] x_yield = [ ] [EOL] y_yield = [ ] [EOL] z_yield = [ ] [EOL] [EOL] [EOL] for x in x1 : [EOL] for y in y1 : [EOL] for z in z1 : [EOL] qsquare = x ** [number] + y ** [number] + z ** [number] - x * y - y * z - z * x [EOL] p = ( x + y + z ) / [number] [EOL] F = qsquare - M * M * p * ( pc - p ) [EOL] if F == [number] : [EOL] x_yield . append ( x ) [EOL] y_yield . append ( y ) [EOL] z_yield . append ( z ) [EOL] [EOL] [EOL] [EOL] fig = plt . figure ( [number] ) [EOL] ax = fig . gca ( projection = [string] ) [EOL] surf = ax . plot ( x_yield , y_yield , z_yield , [string] ) [EOL] ax . plot ( [ [number] , pc + [number] ] , [ [number] , pc + [number] ] , [ [number] , pc + [number] ] , [string] , linewidth = [number] ) [EOL] plt . show ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $builtins.float$ 0 $builtins.float$ 0 $typing.Any$ 0 0 $builtins.int$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import Any [EOL] import typing [EOL] import numpy as np [EOL] [EOL] [EOL] a = np . array ( [ [ [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] ] ] ) [EOL] [EOL] b = np . array ( [ [ [number] ] , [ [number] ] , [ [number] ] , [ [number] ] , [ [number] ] , [ [number] ] ] ) [EOL] [EOL] c = np . dot ( a , b ) [EOL] d = b . transpose ( ) [EOL] [EOL] e = np . dot ( d , a ) [EOL] [EOL] NR = np . dot ( c , e ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] f = np . array ( [ [ - [number] ] , [ - [number] ] , [ - [number] ] , [ [number] ] , [ [number] ] , [ [number] ] ] ) [EOL] f_trans = f . transpose ( ) [EOL] g = np . dot ( d , b ) [EOL] [EOL] h = ( - [number] ) * np . dot ( f_trans , b ) [EOL] [EOL] DR = h + g [EOL] [EOL] i = NR / DR [EOL] [EOL] FINAL = a - i [EOL] [EOL] print ( FINAL )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.float$ 0 $builtins.float$ 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 $builtins.float$ 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0
[EOL] import os [EOL] [EOL] print ( [string] ) [EOL] [EOL] print ( os . getcwd ( ) ) [EOL] [EOL] path = [string] [EOL] [EOL] os . chdir ( path ) [EOL] [EOL] print ( os . getcwd ( ) ) [EOL] [EOL] print ( [string] ) [EOL] [comment] [EOL] [EOL] for fname in os . listdir ( ) : [EOL] realname , fext = os . path . splitext ( fname ) [EOL] [EOL] word1 , word2 , word3 = realname . split ( [string] ) [EOL] word1 = word1 . strip ( ) [EOL] word2 = word2 . strip ( ) [EOL] word3 = word3 . strip ( ) [ [number] : ] . zfill ( [number] ) [EOL] [EOL] newfname = [string] . format ( word3 , word2 , word1 , fext ) [EOL] print ( newfname ) [EOL] [EOL] os . rename ( fname , newfname )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0
[EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] import io [EOL] try : [EOL] f2 = open ( [string] ) [EOL] print ( f2 . name ) [EOL] if f2 . name == [string] : [EOL] raise Exception [EOL] except FileNotFoundError as e : [EOL] print ( e ) [EOL] except Exception as e : [EOL] print ( e ) [EOL] else : [EOL] print ( f2 . read ( ) ) [EOL] f2 . close ( ) [EOL] finally : [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] [EOL] from typing import Any [EOL] import typing [EOL] import tutorial2_revamp [EOL] import datetime [EOL] class Employee ( object ) : [EOL] [EOL] raise_amount = [number] [comment] [EOL] num_of_employees = [number] [comment] [EOL] [EOL] def __init__ ( self , firstname , lastname , salary ) : [EOL] self . firstname = firstname [EOL] self . lastname = lastname [EOL] self . salary = salary [EOL] [comment] [EOL] [EOL] Employee . num_of_employees += [number] [comment] [EOL] [EOL] @ property def email ( self ) : [EOL] return [string] . format ( self . firstname , self . lastname ) [EOL] [EOL] @ property def fullname ( self ) : [EOL] return [string] . format ( self . firstname , self . lastname ) [EOL] [EOL] @ fullname . setter def fullname ( self , name ) : [EOL] first , last = name . split ( [string] ) [EOL] print ( [string] ) [EOL] self . firstname = first [EOL] self . lastname = last [EOL] [EOL] @ fullname . deleter def fullname ( self ) : [EOL] print ( [string] ) [EOL] self . firstname = None [EOL] self . lastname = None [EOL] [EOL] @ property def apply_raise ( self ) : [EOL] self . salary = self . salary * float ( self . raise_amount ) [EOL] return self . salary [EOL] [EOL] @ classmethod def set_raise_amount ( cls , amount ) : [EOL] cls . raise_amount = amount [EOL] [EOL] @ classmethod def from_string ( cls , var ) : [EOL] firstname , lastname , salary = var . split ( [string] ) [EOL] return cls ( firstname , lastname , salary ) [EOL] [EOL] @ staticmethod def is_present ( day ) : [EOL] if day . weekday ( ) == [number] or day . weekday ( ) == [number] : [EOL] return False [EOL] return True [EOL] [EOL] def __add__ ( self , other ) : [EOL] if isinstance ( other , Employee ) : [EOL] return self . salary + other . salary [EOL] [EOL] [EOL] def __repr__ ( self ) : [EOL] return [string] . format ( self . firstname , self . lastname , self . salary ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . fullname , self . email ) [EOL] [EOL] def __len__ ( self ) : [EOL] return len ( self . fullname ) [EOL] [EOL] [EOL] [EOL] class Developer ( Employee ) : [EOL] [EOL] raise_amount = [number] [comment] [EOL] [EOL] def __init__ ( self , firstname , lastname , salary , prog_language ) : [EOL] super ( ) . __init__ ( firstname , lastname , salary ) [EOL] self . prog_language = prog_language [EOL] [EOL] [EOL] [EOL] class Manager ( Employee ) : [EOL] [EOL] raise_amount = [number] [EOL] [EOL] def __init__ ( self , firstname , lastname , salary , employees = None ) : [EOL] super ( ) . __init__ ( firstname , lastname , salary ) [EOL] if employees is None : [EOL] self . employees = [ ] [EOL] else : [EOL] self . employees = employees [EOL] [EOL] def list_of_emp ( self ) : [EOL] for emp in self . employees : [EOL] print ( [string] , emp . fullname ) [EOL] [EOL] def add_emp ( self , emp ) : [EOL] if emp not in self . employees : [EOL] self . employees . append ( emp ) [EOL] [EOL] def remove_emp ( self , emp ) : [EOL] if emp in self . employees : [EOL] self . employees . remove ( emp ) [EOL] [EOL] [EOL] [EOL] emp1 = Employee ( [string] , [string] , [number] ) [EOL] emp2 = Employee ( [string] , [string] , [number] ) [EOL] emp3_string = [string] [EOL] emp3 = Employee . from_string ( emp3_string ) [EOL] [EOL] dev1 = Developer ( [string] , [string] , [number] , [string] ) [EOL] dev2 = Developer ( [string] , [string] , [number] , [string] ) [EOL] [EOL] [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] [EOL] [comment] [EOL] emp1 . fullname = [string] [EOL] print ( emp1 . fullname ) [EOL] print ( emp1 . email ) [EOL] [EOL] [EOL] del emp1 . fullname [EOL] [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] [EOL] print ( emp1 ) [EOL] print ( emp1 . __repr__ ( ) ) [EOL] print ( emp1 . __str__ ( ) ) [EOL] [EOL] print ( emp1 + emp2 ) [EOL] [EOL] print ( len ( emp1 ) ) [EOL] [EOL] [EOL] [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] [EOL] [EOL] print ( dev1 . email ) [EOL] print ( dev2 . email ) [EOL] print ( dev1 . prog_language ) [EOL] print ( dev2 . prog_language ) [EOL] [EOL] print ( ) [EOL] [EOL] print ( dev1 . salary ) [EOL] [comment] [EOL] [EOL] dev1 . apply_raise [EOL] print ( dev1 . salary ) [EOL] Developer . set_raise_amount ( [number] ) [EOL] dev1 . apply_raise [EOL] print ( dev1 . salary ) [EOL] [EOL] print ( ) [EOL] [EOL] print ( emp1 . salary ) [EOL] emp1 . apply_raise [EOL] print ( emp1 . salary ) [EOL] print ( ) [EOL] [EOL] [comment] [EOL] [EOL] mgr1 = Manager ( [string] , [string] , [number] , [ emp1 , emp2 ] ) [EOL] [EOL] print ( mgr1 . email ) [EOL] print ( mgr1 . list_of_emp ( ) ) [EOL] [EOL] mgr1 . add_emp ( emp3 ) [EOL] mgr1 . remove_emp ( emp1 ) [EOL] mgr1 . remove_emp ( emp1 ) [EOL] [EOL] print ( mgr1 . list_of_emp ( ) ) [EOL] [EOL] print ( isinstance ( mgr1 , Employee ) ) [EOL] print ( isinstance ( emp1 , Manager ) ) [EOL] print ( issubclass ( Manager , Employee ) ) [EOL] print ( issubclass ( Manager , Developer ) ) [EOL] [EOL] [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] [EOL] [EOL] emp3 = Employee . from_string ( emp3_string ) [EOL] [EOL] import datetime [EOL] today = datetime . date ( [number] , [number] , [number] ) [EOL] [EOL] print ( emp3 . salary ) [EOL] print ( emp3 . is_present ( today ) ) [EOL] [EOL] [EOL] print ( emp1 . fullname ) [comment] [EOL] print ( emp1 . email ) [comment] [EOL] [EOL] [EOL] print ( emp1 . salary ) [EOL] [EOL] print ( Employee . raise_amount ) [EOL] print ( emp1 . apply_raise ) [EOL] [EOL] Employee . set_raise_amount ( [number] ) [EOL] [EOL] print ( Employee . raise_amount ) [EOL] [EOL] print ( emp1 . apply_raise ) [EOL] [EOL] print ( Employee . num_of_employees ) [EOL] [EOL] [EOL] [comment]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $tutorial2_revamp.tut18_OOP_FULL.Developer$ 0 0 0 0 0 0 0 0 0 0 0 0 $tutorial2_revamp.tut18_OOP_FULL.Developer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tutorial2_revamp.tut18_OOP_FULL.Developer$ 0 0 0 0 0 0 $tutorial2_revamp.tut18_OOP_FULL.Developer$ 0 0 0 0 0 0 $tutorial2_revamp.tut18_OOP_FULL.Developer$ 0 0 0 0 0 0 $tutorial2_revamp.tut18_OOP_FULL.Developer$ 0 0 0 0 0 0 0 0 0 0 0 0 $tutorial2_revamp.tut18_OOP_FULL.Developer$ 0 0 0 0 0 0 0 $tutorial2_revamp.tut18_OOP_FULL.Developer$ 0 0 0 0 0 $tutorial2_revamp.tut18_OOP_FULL.Developer$ 0 0 0 0 0 0 0 0 0 0 0 $tutorial2_revamp.tut18_OOP_FULL.Developer$ 0 0 0 0 0 $tutorial2_revamp.tut18_OOP_FULL.Developer$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $tutorial2_revamp.tut18_OOP_FULL.Manager$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $tutorial2_revamp.tut18_OOP_FULL.Manager$ 0 0 0 0 0 0 $tutorial2_revamp.tut18_OOP_FULL.Manager$ 0 0 0 0 0 0 0 $tutorial2_revamp.tut18_OOP_FULL.Manager$ 0 0 0 $typing.Any$ 0 0 $tutorial2_revamp.tut18_OOP_FULL.Manager$ 0 0 0 $typing.Any$ 0 0 $tutorial2_revamp.tut18_OOP_FULL.Manager$ 0 0 0 $typing.Any$ 0 0 0 0 0 $tutorial2_revamp.tut18_OOP_FULL.Manager$ 0 0 0 0 0 0 0 0 0 0 0 $tutorial2_revamp.tut18_OOP_FULL.Manager$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import Union , Dict , List [EOL] import typing [EOL] import tutorial2_revamp [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] [EOL] class duck : [EOL] [EOL] def quack ( self ) : [EOL] print ( [string] ) [EOL] [EOL] def fly ( self ) : [EOL] print ( [string] ) [EOL] [EOL] [EOL] class person : [EOL] [EOL] def quack ( self ) : [EOL] print ( [string] ) [EOL] [EOL] def fly ( self ) : [EOL] print ( [string] ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def quack_and_fly ( thing ) : [EOL] try : [EOL] thing . quack ( ) [EOL] thing . fly ( ) [EOL] thing . bark ( ) [EOL] except AttributeError as e : [EOL] print ( e ) [EOL] [EOL] print ( ) [EOL] [EOL] donald = duck ( ) [EOL] quack_and_fly ( donald ) [EOL] [EOL] Amar = person ( ) [EOL] quack_and_fly ( Amar ) [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] [EOL] [comment] [EOL] dict1 = { [string] : [string] , [string] : [number] } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if [string] in dict1 and [string] in dict1 and [string] in dict1 : [EOL] print ( [string] . format ( dict1 [ [string] ] , dict1 [ [string] ] , dict1 [ [string] ] ) ) [EOL] else : [EOL] print ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] try : [EOL] print ( [string] . format ( dict1 [ [string] ] , dict1 [ [string] ] , dict1 [ [string] ] ) ) [EOL] except KeyError as e : [EOL] print ( [string] . format ( e ) ) [EOL] [EOL] [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] [EOL] li = [ [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] [EOL] if len ( li ) <= [number] : [EOL] li [ [number] ] [EOL] else : [EOL] print ( [string] ) [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tutorial2_revamp.tut14_EAFP.duck$ 0 0 0 0 0 0 0 $tutorial2_revamp.tut14_EAFP.duck$ 0 0 0 $tutorial2_revamp.tut14_EAFP.person$ 0 0 0 0 0 0 0 $tutorial2_revamp.tut14_EAFP.person$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] class Employee ( object ) : [EOL] [EOL] def __init__ ( self , first , last , pay ) : [EOL] self . first = first [EOL] self . last = last [EOL] self . pay = pay [EOL] [EOL] @ property def email ( self ) : [EOL] return [string] . format ( self . first , self . last ) [EOL] [EOL] @ property def fullname ( self ) : [EOL] return [string] . format ( self . first , self . last ) [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] [comment] [EOL] [EOL] from typing import Any , List [EOL] import typing [EOL] import datetime [EOL] import sys [EOL] sys . path . append ( [string] ) [EOL] [EOL] [EOL] import my_module [EOL] import os [EOL] import random [EOL] import datetime [EOL] import antigravity [EOL] [EOL] today = datetime . date . today ( ) [comment] [EOL] [EOL] print ( today ) [EOL] [EOL] courses_info = [ [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] index = my_module . find_index ( courses_info , [string] ) [comment] [EOL] [EOL] print ( random . choice ( courses_info ) ) [comment] [EOL] [EOL] print ( os . getcwd ( ) ) [comment] [EOL] print ( index ) [EOL] [comment] [EOL] print ( os . __file__ ) [comment]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 $datetime.date$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] [EOL] [EOL] language = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if language is [string] : [EOL] print ( [string] ) [EOL] elif language is [string] : [EOL] print ( [string] ) [EOL] else : [EOL] print ( [string] ) [EOL] [EOL] [EOL] user = [string] [EOL] logged_in = False [EOL] [EOL] [comment] [EOL] [comment] [EOL] if user is [string] or logged_in : [EOL] print ( [string] ) [EOL] else : [EOL] print ( [string] ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] if not logged_in : [EOL] print ( [string] ) [EOL] else : [EOL] print ( [string] ) [EOL] [EOL] [EOL] [comment] [EOL] a = [ [number] , [number] , [number] ] [EOL] b = [ [number] , [number] , [number] ] [EOL] b2 = a [EOL] [EOL] print ( id ( a ) ) [EOL] print ( id ( b ) ) [EOL] print ( id ( b2 ) ) [EOL] [EOL] print ( a is b ) [comment] [EOL] print ( a == b ) [comment] [EOL] [EOL] print ( a is b2 ) [comment] [EOL] print ( id ( a ) == id ( b2 ) ) [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] condition = None [EOL] [EOL] if condition : [EOL] print ( [string] ) [EOL] else : [EOL] print ( [string] ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 $typing.List[builtins.int]$ 0 0 0 0 0 $typing.List[builtins.int]$ 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] [comment] [EOL] from typing import Union , Dict , List [EOL] import typing [EOL] def hello_func ( greeting , name = [string] ) : [EOL] [comment] [EOL] return [string] . format ( greeting , name ) [EOL] [EOL] [EOL] [comment] [EOL] print ( hello_func ( [string] , name = [string] ) ) [EOL] [EOL] print ( hello_func ( [string] ) . upper ( ) ) [EOL] [EOL] [comment] [EOL] def student_info ( * args , ** kwargs ) : [EOL] print ( args ) [EOL] print ( kwargs ) [EOL] [EOL] courses = [ [string] , [string] ] [comment] [EOL] info = { [string] : [string] , [string] : [number] } [comment] [EOL] [EOL] student_info ( courses , info ) [comment] [EOL] student_info ( * courses , ** info ) [comment] [EOL] student_info ( [string] , [string] , name = [string] , age = [number] ) [comment] [EOL] [EOL] [EOL] [docstring] [EOL] [EOL] month_days = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] [EOL] def isleap ( year ) : [EOL] [EOL] return year % [number] == [number] and ( year % [number] == [number] or year % [number] != [number] ) [EOL] [EOL] def days_month ( year , month ) : [EOL] [EOL] if not [number] <= month <= [number] : [EOL] return [string] [EOL] [EOL] if month == [number] and isleap ( year ) : [EOL] return [number] [EOL] else : [EOL] return month_days [ month ] [EOL] [EOL] print ( [string] ) [EOL] print ( days_month ( [number] , [number] ) ) [comment] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import List [EOL] import typing [EOL] nums = [ [number] , [number] , [number] , [number] , [number] ] [EOL] [EOL] [comment] [EOL] for num in nums : [EOL] if num == [number] : [EOL] print ( [string] ) [EOL] continue [EOL] print ( num ) [EOL] [EOL] print ( [string] ) [EOL] [EOL] [comment] [EOL] for letter in [string] : [EOL] for num in nums : [EOL] print ( num , letter ) [EOL] [EOL] print ( [string] ) [EOL] [EOL] [EOL] for i in range ( [number] , [number] ) : [EOL] print ( i ) [EOL] [EOL] print ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] x = [number] [EOL] while x < [number] : [EOL] if x == [number] : [EOL] print ( [string] ) [EOL] break [EOL] print ( x ) [EOL] x += [number]	0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0
from typing import Any [EOL] import typing [EOL] from mpl_toolkits . mplot3d import Axes3D [EOL] from matplotlib . collections import PolyCollection [EOL] import matplotlib . pyplot as plt [EOL] from matplotlib import colors as mcolors [EOL] import numpy as np [EOL] [EOL] [EOL] L = [number] [EOL] T = [number] [EOL] [EOL] nx = [number] [EOL] nt = [number] [EOL] [EOL] t = np . linspace ( [number] , T , nt ) [EOL] x = np . linspace ( [number] , L , nx ) [EOL] [EOL] dx = x [ [number] ] - x [ [number] ] [EOL] dt = t [ [number] ] - t [ [number] ] [EOL] [EOL] print ( dx , dt ) [EOL] [EOL] alpha = [number] [EOL] [EOL] F = alpha * dt / dx ** [number] [EOL] [EOL] u = np . zeros ( ( nt , nx ) ) [EOL] [EOL] print ( len ( u [ [number] , : ] ) ) [EOL] print ( len ( x ) ) [EOL] [EOL] u [ [number] , : ] = np . sin ( [number] * np . pi * x / L ) [EOL] [EOL] [EOL] for i in range ( [number] , nt - [number] ) : [EOL] u [ i + [number] , [number] : - [number] ] = ( [number] - [number] * F ) * u [ i , [number] : - [number] ] + F * ( u [ i , [number] : - [number] ] + u [ i , [number] : ] ) [EOL] [EOL] [EOL] plt . figure ( [number] ) [EOL] plt . plot ( x , u [ [number] , : ] ) [EOL] plt . plot ( x , u [ [number] , : ] ) [EOL] plt . plot ( x , u [ [number] , : ] ) [EOL] plt . plot ( x , u [ [number] , : ] ) [EOL] plt . plot ( x , u [ [number] , : ] ) [EOL] plt . plot ( x , u [ [number] , : ] ) [EOL] plt . grid ( True ) [EOL] plt . show ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import Any , List [EOL] import typing [EOL] import logging [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] [EOL] [EOL] def decorator_func ( original_function ) : [EOL] def wrapper_func ( * args , ** kwargs ) : [EOL] print ( [string] . format ( original_function . __name__ ) ) [EOL] return original_function ( * args , ** kwargs ) [EOL] return wrapper_func [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] @ decorator_func def display ( ) : [EOL] print ( [string] ) [EOL] [EOL] [EOL] @ decorator_func def display2 ( name , age ) : [EOL] print ( [string] . format ( name , age ) ) [EOL] [EOL] [EOL] [comment] [EOL] display2 ( [string] , [number] ) [EOL] [EOL] [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] [EOL] [EOL] from functools import wraps [EOL] [EOL] [EOL] def my_logger ( original_func ) : [EOL] [EOL] import logging [EOL] [EOL] formatter = logging . Formatter ( [string] ) [comment] [EOL] filehandler = logging . FileHandler ( filename = [string] . format ( original_func . __name__ ) ) [comment] [EOL] filehandler . setFormatter ( formatter ) [comment] [EOL] [EOL] logger = logging . getLogger ( __name__ ) [comment] [EOL] [EOL] logger . setLevel ( logging . INFO ) [comment] [EOL] logger . addHandler ( filehandler ) [comment] [EOL] [EOL] @ wraps ( original_func ) def wrapper_func2 ( * args , ** kwargs ) : [EOL] logger . info ( [string] . format ( args , kwargs ) ) [EOL] return original_func ( * args , ** kwargs ) [EOL] [EOL] return wrapper_func2 [EOL] [EOL] [EOL] name = [ [string] , [string] , [string] , [string] , [string] ] [EOL] job = [ [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] @ my_logger def display3 ( name2 , job2 ) : [EOL] print ( [string] . format ( name2 , job2 ) ) [EOL] [EOL] import random [EOL] display3 ( random . choice ( name ) , random . choice ( job ) ) [EOL] [EOL] [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] [EOL] def my_timer ( original_func ) : [EOL] [EOL] import time [EOL] [EOL] @ wraps ( original_func ) def wrapper_func3 ( * args , ** kwargs ) : [EOL] [EOL] t1 = time . time ( ) [EOL] amar = original_func ( * args , ** kwargs ) [EOL] t2 = time . time ( ) - t1 [EOL] [EOL] print ( [string] . format ( original_func . __name__ , t2 ) ) [EOL] [EOL] return amar [EOL] [EOL] return wrapper_func3 [EOL] [EOL] [EOL] @ my_logger def display4 ( name , age ) : [EOL] [comment] [EOL] [comment] [EOL] print ( [string] . format ( name , age ) ) [EOL] [EOL] display4 ( [string] , [number] ) [EOL] [EOL] [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] [EOL] [EOL] [EOL] @ my_timer @ my_logger def multiple_dec ( name , job ) : [EOL] print ( [string] . format ( name , job ) ) [EOL] [EOL] multiple_dec ( random . choice ( name ) , random . choice ( job ) ) [EOL] [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] [EOL] [EOL] def decorator_prefix ( prefix ) : [EOL] def decorator_function ( original_function ) : [EOL] def wrapper_func ( * args , ** kwargs ) : [EOL] print ( prefix , [string] . format ( original_function . __name__ ) ) [EOL] result = original_function ( * args , ** kwargs ) [EOL] print ( prefix , [string] . format ( original_function . __name__ ) ) [EOL] return result [EOL] return wrapper_func [EOL] return decorator_function [EOL] [EOL] [EOL] @ decorator_prefix ( [string] ) def display_info6 ( name , job ) : [EOL] print ( [string] . format ( name , job ) ) [EOL] [EOL] [EOL] display_info6 ( random . choice ( name ) , random . choice ( job ) ) [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0
[EOL] import builtins [EOL] from typing import Union , Dict , List , Tuple [EOL] import typing [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] [EOL] nums2 = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] nums2_sorted = sorted ( nums2 , reverse = True ) [EOL] [EOL] nums3 = [ - [number] , - [number] , - [number] , - [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , - [number] , - [number] , - [number] , - [number] ] [EOL] nums3_sorted1 = sorted ( nums3 ) [EOL] nums3_sorted2 = sorted ( nums3 , key = abs ) [EOL] nums3_sorted3 = nums3 . sort ( ) [EOL] [EOL] print ( nums2_sorted ) [comment] [EOL] [EOL] print ( nums3_sorted1 ) [comment] [EOL] print ( nums3_sorted2 ) [comment] [EOL] print ( nums3_sorted3 ) [comment] [EOL] [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] [EOL] tuple1 = ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] [EOL] [comment] [EOL] [EOL] tuple1_sorted = sorted ( tuple1 ) [EOL] [EOL] print ( tuple1_sorted ) [EOL] [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] [EOL] name = [ [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] job = [ [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] zipped = list ( zip ( name , job ) ) [EOL] [EOL] print ( zipped ) [EOL] [EOL] mydict4 = { name : job for name , job in zipped if name != [string] } [EOL] [EOL] print ( sorted ( mydict4 ) ) [comment] [EOL] [EOL] [EOL] [comment] [EOL] Dict2 = { [string] : [string] , [string] : [number] } [EOL] [EOL] sentence = [string] . format ( Dict2 [ [string] ] , Dict2 [ [string] ] ) [EOL] [EOL] print ( sentence ) [EOL] print ( [string] ) [EOL] for i in range ( [number] ) : [EOL] sentence2 = [string] . format ( i ) [EOL] print ( sentence2 ) [EOL] [EOL] print ( [string] ) [EOL] sentence3 = [string] . format ( [number] ** [number] ) [EOL] [EOL] print ( sentence3 )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 $typing.Tuple[builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int,builtins.int]$ 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0
[EOL] x = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] print ( x ) [EOL] [EOL] def outer ( ) : [EOL] global x [EOL] x = [string] [EOL] [EOL] def inner ( ) : [EOL] [comment] [EOL] [comment] [EOL] print ( x ) [EOL] inner ( ) [EOL] print ( x ) [EOL] [EOL] outer ( ) [EOL] [EOL] print ( x )	0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0
[EOL] import tut21_employee [EOL] import unittest [EOL] [EOL] class TestEmployee ( unittest . TestCase ) : [EOL] [EOL] @ classmethod def setUpClass ( cls ) : [EOL] print ( [string] ) [EOL] [EOL] @ classmethod def tearDownClass ( cls ) : [EOL] print ( [string] ) [EOL] [EOL] def setUp ( self ) : [EOL] print ( [string] ) [EOL] self . emp1 = tut21_employee . Employee ( [string] , [string] , [number] ) [EOL] self . emp2 = tut21_employee . Employee ( [string] , [string] , [number] ) [EOL] [EOL] def tearDown ( self ) : [EOL] print ( [string] ) [EOL] [EOL] def test_email ( self ) : [EOL] print ( [string] ) [EOL] self . assertEqual ( self . emp1 . email , [string] ) [EOL] self . assertEqual ( self . emp2 . email , [string] ) [EOL] [EOL] self . emp1 . first = [string] [EOL] self . emp2 . first = [string] [EOL] [EOL] self . assertEqual ( self . emp1 . email , [string] ) [EOL] self . assertEqual ( self . emp2 . email , [string] ) [EOL] [EOL] def test_fullname ( self ) : [EOL] print ( [string] ) [EOL] self . assertEqual ( self . emp1 . fullname , [string] ) [EOL] self . assertEqual ( self . emp2 . fullname , [string] ) [EOL] [EOL] self . emp1 . first = [string] [EOL] self . emp2 . first = [string] [EOL] [EOL] self . assertEqual ( self . emp1 . fullname , [string] ) [EOL] self . assertEqual ( self . emp2 . fullname , [string] ) [EOL] [EOL] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import Any , List [EOL] import typing [EOL] import matplotlib . pyplot as plt [EOL] import numpy as np [EOL] [EOL] import matplotlib as mpl [EOL] [EOL] a = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] i = [number] [comment] [EOL] [EOL] mpl . style . use ( a [ i ] ) [EOL] [EOL] radii = np . linspace ( [number] , [number] , [number] ) [EOL] thetas = np . linspace ( [number] , [number] * np . pi , [number] ) [EOL] theta , r = np . meshgrid ( thetas , radii ) [EOL] [EOL] dr = [number] [EOL] dt = [number] [EOL] [EOL] f = plt . figure ( [number] ) [EOL] ax = f . add_subplot ( [number] , polar = True ) [EOL] ax . quiver ( theta , r , dr * np . cos ( theta ) - dt * np . sin ( theta ) , dr * np . sin ( theta ) + dt * np . cos ( theta ) ) [EOL] [EOL] [EOL] [EOL] plt . figure ( [number] ) [EOL] [EOL] plt . plot ( theta , r ) [EOL] [EOL] [EOL] f2 = plt . figure ( [number] ) [EOL] [EOL] ax2 = f2 . add_subplot ( [number] , polar = True ) [EOL] ax2 . plot ( theta , r ) [EOL] plt . show ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import matplotlib . pyplot as plt [EOL] import numpy as np [EOL] import matplotlib . gridspec as gs [EOL] import matplotlib as mpl [EOL] a = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] i = [number] [comment] [EOL] [EOL] mpl . style . use ( a [ i ] ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] fig = plt . figure ( [number] ) [EOL] [EOL] ax1 = plt . subplot2grid ( ( [number] , [number] ) , ( [number] , [number] ) , rowspan = [number] , colspan = [number] ) [EOL] ax2 = plt . subplot2grid ( ( [number] , [number] ) , ( [number] , [number] ) , rowspan = [number] , colspan = [number] ) [EOL] ax3 = plt . subplot2grid ( ( [number] , [number] ) , ( [number] , [number] ) , rowspan = [number] , colspan = [number] ) [EOL] ax4 = plt . subplot2grid ( ( [number] , [number] ) , ( [number] , [number] ) , rowspan = [number] , colspan = [number] ) [EOL] ax5 = plt . subplot2grid ( ( [number] , [number] ) , ( [number] , [number] ) , rowspan = [number] , colspan = [number] ) [EOL] [EOL] ax1 . text ( [number] , [number] , [string] , ha = [string] , va = [string] ) [EOL] ax2 . text ( [number] , [number] , [string] , ha = [string] , va = [string] ) [EOL] ax3 . text ( [number] , [number] , [string] , ha = [string] , va = [string] ) [EOL] ax4 . text ( [number] , [number] , [string] , ha = [string] , va = [string] ) [EOL] ax5 . text ( [number] , [number] , [string] , ha = [string] , va = [string] ) [EOL] [EOL] plt . suptitle ( [string] ) [EOL] plt . tight_layout ( ) [EOL] [comment] [EOL] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] fig2 = plt . figure ( [number] ) [EOL] [EOL] gs1 = gs . GridSpec ( [number] , [number] ) [EOL] [EOL] ax6 = fig2 . add_subplot ( gs1 [ [number] , [number] : [number] ] ) [EOL] ax7 = fig2 . add_subplot ( gs1 [ [number] , [number] : [number] ] ) [EOL] ax8 = fig2 . add_subplot ( gs1 [ [number] : [number] , [number] ] ) [EOL] ax9 = fig2 . add_subplot ( gs1 [ [number] , [number] ] ) [EOL] ax10 = fig2 . add_subplot ( gs1 [ [number] , [number] ] ) [EOL] [EOL] [EOL] ax6 . text ( [number] , [number] , [string] , ha = [string] , va = [string] ) [EOL] ax7 . text ( [number] , [number] , [string] , ha = [string] , va = [string] ) [EOL] ax8 . text ( [number] , [number] , [string] , ha = [string] , va = [string] ) [EOL] ax9 . text ( [number] , [number] , [string] , ha = [string] , va = [string] ) [EOL] ax10 . text ( [number] , [number] , [string] , ha = [string] , va = [string] ) [EOL] [EOL] plt . suptitle ( [string] ) [EOL] plt . tight_layout ( ) [EOL] [comment] [EOL] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] fig3 = plt . figure ( [number] ) [EOL] [EOL] gs2 = gs . GridSpec ( [number] , [number] ) [EOL] gs2 . update ( left = [number] , right = [number] , hspace = [number] ) [EOL] [EOL] ax11 = fig3 . add_subplot ( gs2 [ [number] : [number] , [number] : [number] ] ) [EOL] ax12 = fig3 . add_subplot ( gs2 [ [number] , [number] : [number] ] ) [EOL] ax13 = fig3 . add_subplot ( gs2 [ [number] , [number] ] ) [EOL] [EOL] ax11 . text ( [number] , [number] , [string] , ha = [string] , va = [string] ) [EOL] ax12 . text ( [number] , [number] , [string] , ha = [string] , va = [string] ) [EOL] ax13 . text ( [number] , [number] , [string] , ha = [string] , va = [string] ) [EOL] [EOL] gs3 = gs . GridSpec ( [number] , [number] ) [EOL] gs3 . update ( left = [number] , right = [number] , hspace = [number] ) [EOL] [EOL] ax14 = fig3 . add_subplot ( gs3 [ [number] : [number] , [number] : [number] ] ) [EOL] ax15 = fig3 . add_subplot ( gs3 [ [number] , [number] : [number] ] ) [EOL] ax16 = fig3 . add_subplot ( gs3 [ [number] , [number] ] ) [EOL] [EOL] ax14 . text ( [number] , [number] , [string] , ha = [string] , va = [string] ) [EOL] ax15 . text ( [number] , [number] , [string] , ha = [string] , va = [string] ) [EOL] ax16 . text ( [number] , [number] , [string] , ha = [string] , va = [string] ) [EOL] [EOL] plt . tight_layout ( ) [EOL] plt . suptitle ( [string] ) [EOL] [EOL] plt . show ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import Any [EOL] import typing [EOL] import matplotlib . pyplot as plt [EOL] import numpy as np [EOL] import matplotlib as mpl [EOL] [EOL] [comment] [EOL] [comment] [EOL] mpl . style . use ( [string] ) [EOL] [comment] [EOL] [EOL] print ( mpl . style . available ) [EOL] [EOL] x = np . linspace ( [number] , [number] * np . pi , [number] ) [EOL] y = np . sin ( x ) [EOL] z = np . cos ( x ) [EOL] [EOL] xnum = np . linspace ( [number] , [number] , [number] ) [EOL] ynum = np . linspace ( - [number] , [number] , [number] ) [EOL] [EOL] plt . figure ( [number] ) [EOL] plt . plot ( x , y , [string] , x , z , [string] ) [EOL] plt . title ( [string] ) [EOL] plt . xlabel ( [string] ) [EOL] plt . ylabel ( [string] ) [EOL] plt . xticks ( xnum ) [EOL] plt . yticks ( ynum ) [EOL] plt . legend ( [ [string] , [string] ] ) [EOL] plt . grid ( [string] ) [EOL] plt . axis ( [ [number] , [number] , - [number] , [number] ] ) [EOL] plt . show ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import Any , List [EOL] import typing [EOL] import matplotlib . pyplot as plt [EOL] import numpy as np [EOL] [EOL] import matplotlib as mpl [EOL] [EOL] a = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] i = [number] [comment] [EOL] [EOL] mpl . style . use ( a [ i ] ) [EOL] [EOL] x = np . linspace ( [number] , [number] * np . pi , [number] ) [EOL] x2 = np . linspace ( - [number] * np . pi , [number] * np . pi , [number] ) [EOL] y2 = np . sin ( x2 ) [EOL] z2 = np . cos ( x2 ) [EOL] y = np . sin ( x ) [EOL] z = np . cos ( x ) [EOL] [EOL] plt . figure ( [number] ) [EOL] plt . plot ( x , y , [string] , x , z , [string] ) [EOL] plt . plot ( np . pi * [number] , np . sin ( np . pi * [number] ) , [string] ) [EOL] plt . plot ( np . pi * [number] , np . sin ( np . pi * [number] ) , [string] ) [EOL] [EOL] plt . annotate ( [string] , xy = ( np . pi * [number] , np . sin ( np . pi * [number] ) ) , xytext = ( [number] , [number] ) , arrowprops = dict ( arrowstyle = [string] ) ) [EOL] plt . annotate ( [string] , xy = ( np . pi * [number] , np . sin ( np . pi * [number] ) ) , xytext = ( [number] , - [number] ) , arrowprops = dict ( arrowstyle = [string] ) ) [EOL] [EOL] plt . title ( [string] ) [EOL] plt . xlabel ( [string] ) [EOL] plt . ylabel ( [string] ) [EOL] plt . legend ( [ [string] , [string] ] ) [EOL] plt . grid ( [string] ) [EOL] plt . axis ( [ [number] , [number] , - [number] , [number] ] ) [EOL] [EOL] [EOL] plt . figure ( [number] ) [EOL] plt . plot ( x2 , y2 , [string] ) [EOL] plt . fill_between ( x2 , [number] , y2 ) [EOL] plt . legend ( [ [string] ] ) [EOL] plt . title ( [string] ) [EOL] plt . xlabel ( [string] ) [EOL] plt . ylabel ( [string] ) [EOL] plt . grid ( [string] ) [EOL] [EOL] [EOL] plt . figure ( [number] ) [EOL] plt . plot ( x2 , y2 , [string] , x2 , z2 , [string] ) [EOL] [comment] [EOL] [comment] [EOL] plt . fill_between ( x2 , y2 , z2 , where = ( y2 >= z2 ) , color = [string] , interpolate = True , alpha = [number] ) [EOL] plt . fill_between ( x2 , y2 , z2 , where = ( y2 <= z2 ) , color = [string] , interpolate = True , alpha = [number] ) [EOL] plt . legend ( [ [string] ] ) [EOL] plt . title ( [string] ) [EOL] plt . xlabel ( [string] ) [EOL] plt . ylabel ( [string] ) [EOL] plt . grid ( [string] ) [EOL] plt . show ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import matplotlib . pyplot as plt [EOL] import numpy as np [EOL] [EOL] import matplotlib as mpl [EOL] [EOL] a = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] i = [number] [comment] [EOL] [EOL] mpl . style . use ( a [ i ] ) [EOL] [EOL] distro = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] colors = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] values = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] [EOL] Explodes = np . zeros ( [number] ) [EOL] Explodes [ [number] ] = [number] [EOL] Explodes [ [number] ] = [number] [EOL] Explodes [ [number] ] = [number] [EOL] [EOL] def make_autopct ( values ) : [EOL] def my_autopct ( pct ) : [EOL] total = sum ( values ) [EOL] val = int ( round ( pct * total / [number] ) ) [EOL] return [string] . format ( p = pct , v = val ) [EOL] return my_autopct [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] plt . figure ( [number] ) [EOL] [comment] [EOL] plt . axis ( [ - [number] , [number] , - [number] , [number] ] ) [EOL] [EOL] plt . pie ( values , labels = distro , colors = colors , radius = [number] , autopct = make_autopct ( values ) , pctdistance = [number] , startangle = [number] , labeldistance = [number] , counterclock = False , explode = Explodes , shadow = True , frame = True ) [EOL] [EOL] plt . title ( [string] ) [EOL] plt . axis ( [string] ) [comment] [EOL] plt . show ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $builtins.int$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import Any , List [EOL] import typing [EOL] import matplotlib . pyplot as plt [EOL] import numpy as np [EOL] [EOL] import matplotlib as mpl [EOL] [EOL] [EOL] a = [ [string] , [string] ] [EOL] [EOL] i = [number] [comment] [EOL] [EOL] mpl . style . use ( a [ i ] ) [EOL] [EOL] [EOL] [EOL] [EOL] lim1 = [number] [EOL] lim2 = [number] [EOL] N = [number] [EOL] [EOL] x = np . linspace ( [number] , [number] , N ) [EOL] [EOL] [comment] [EOL] [EOL] expense1 = np . random . randint ( lim1 , lim2 , N ) [EOL] expense2 = np . random . randint ( lim1 , lim2 , N ) [EOL] expense3 = np . random . randint ( lim1 , lim2 , N ) [EOL] expense4 = np . random . randint ( lim1 , lim2 , N ) [EOL] expense5 = np . random . randint ( lim1 , lim2 , N ) [EOL] expense6 = np . random . randint ( lim1 , lim2 , N ) [EOL] [EOL] print ( expense1 ) [EOL] [EOL] expenses = [ expense1 , expense2 , expense3 , expense4 , expense5 , expense6 ] [EOL] [EOL] colors = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] labels = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] plt . figure ( [number] ) [EOL] plt . stackplot ( x , expenses , colors = colors , labels = labels ) [EOL] plt . xlabel ( [string] ) [EOL] plt . ylabel ( [string] ) [EOL] plt . legend ( ) [EOL] plt . grid ( True ) [EOL] plt . show ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import Any , List [EOL] import typing [EOL] import matplotlib . pyplot as plt [EOL] import numpy as np [EOL] [EOL] import matplotlib as mpl [EOL] [EOL] [EOL] range_vals = np . linspace ( [number] , [number] , [number] ) [EOL] [EOL] count1 = np . random . rand ( [number] ) * [number] [EOL] count2 = - np . random . rand ( [number] ) * [number] [EOL] count3 = np . random . rand ( [number] ) * [number] [EOL] count4 = np . random . rand ( [number] ) * [number] [EOL] errors = np . ones ( [number] ) * [number] [EOL] bar_width = [number] [EOL] [EOL] [EOL] [EOL] a = [ [string] , [string] ] [EOL] [EOL] i = [number] [comment] [EOL] [EOL] [EOL] mpl . style . use ( a [ i ] ) [EOL] [EOL] [EOL] [EOL] groups = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] [EOL] if i == [number] : [EOL] mid_vals = ( range_vals [ [number] : - [number] ] + range_vals [ [number] : ] ) * [number] - bar_width * [number] [comment] [EOL] plt . barh ( mid_vals - bar_width * [number] , count1 , left = count3 , height = bar_width - [number] , facecolor = [string] , align = [string] , label = [string] , xerr = errors ) [EOL] plt . barh ( mid_vals - bar_width * [number] , count3 , height = bar_width , facecolor = [string] , align = [string] , label = [string] , xerr = errors ) [EOL] plt . barh ( mid_vals + bar_width * [number] , count4 , left = count3 + count1 , height = bar_width - [number] , facecolor = [string] , align = [string] , label = [string] , xerr = errors ) [EOL] [comment] [EOL] plt . grid ( True ) [EOL] plt . xlabel ( [string] ) [EOL] plt . ylabel ( [string] ) [EOL] plt . legend ( ) [EOL] plt . show ( ) [EOL] [EOL] else : [EOL] mid_vals = ( range_vals [ [number] : - [number] ] + range_vals [ [number] : ] ) * [number] [EOL] plt . barh ( mid_vals - bar_width * [number] , count1 , left = count3 , height = bar_width - [number] , facecolor = [string] , align = [string] , label = [string] , xerr = errors ) [EOL] plt . barh ( mid_vals - bar_width * [number] , count2 , height = bar_width , facecolor = [string] , align = [string] , label = [string] , xerr = errors ) [EOL] plt . barh ( mid_vals - bar_width * [number] , count3 , height = bar_width , facecolor = [string] , align = [string] , label = [string] , xerr = errors ) [EOL] plt . barh ( mid_vals + bar_width * [number] , count4 , left = count3 + count1 , height = bar_width - [number] , facecolor = [string] , align = [string] , label = [string] , xerr = errors ) [EOL] [EOL] plt . yticks ( mid_vals , groups , rotation = [string] ) [EOL] [EOL] [comment] [EOL] plt . ylabel ( [string] ) [EOL] plt . xlabel ( [string] ) [EOL] plt . legend ( ) [EOL] plt . show ( ) [EOL] [EOL] [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $builtins.int$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import Any , List [EOL] import typing [EOL] import matplotlib . pyplot as plt [EOL] import numpy as np [EOL] [EOL] [EOL] y = np . linspace ( [number] , [number] * np . pi , [number] ) [EOL] x1 = np . sin ( y ) [EOL] x2 = np . sinh ( y ) [EOL] [EOL] ynum = np . linspace ( [number] , [number] , [number] ) [EOL] x1num = np . linspace ( - [number] , [number] , [number] ) [EOL] x2num = np . linspace ( [number] , [number] , [number] ) [EOL] [EOL] [EOL] fig , ax1 = plt . subplots ( ) [EOL] [EOL] ax2 = ax1 . twiny ( ) [EOL] [EOL] curve1 , = ax1 . plot ( x1 , y , [string] , label = [string] ) [EOL] [EOL] curve2 , = ax2 . plot ( x2 , y , [string] , label = [string] ) [EOL] [EOL] curves = [ curve1 , curve2 ] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] ax2 . legend ( curves , [ amar . get_label ( ) for amar in curves ] ) [EOL] [EOL] ax1 . set_ylabel ( [string] , color = curve1 . get_color ( ) ) [EOL] [comment] [EOL] [EOL] ax1 . set_xlabel ( [string] , color = curve1 . get_color ( ) ) [EOL] ax2 . set_xlabel ( [string] , color = curve2 . get_color ( ) ) [EOL] [EOL] ax1 . tick_params ( axis = [string] , colors = curve1 . get_color ( ) ) [EOL] ax1 . tick_params ( axis = [string] , colors = curve1 . get_color ( ) ) [EOL] ax2 . tick_params ( axis = [string] , colors = curve2 . get_color ( ) ) [EOL] [comment] [EOL] [EOL] ax1 . set_yticks ( ynum ) [EOL] ax1 . set_xticks ( x1num ) [EOL] ax2 . set_xticks ( x2num ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] ax1 . grid ( color = curve1 . get_color ( ) ) [EOL] ax2 . grid ( color = curve2 . get_color ( ) ) [EOL] ax1 . xaxis . grid ( False ) [EOL] [EOL] [EOL] [EOL] [comment] [EOL] plt . xlabel ( [string] ) [EOL] plt . ylabel ( [string] ) [EOL] [comment] [EOL] [EOL] plt . show ( ) [EOL] [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import matplotlib . pyplot as plt [EOL] import numpy as np [EOL] [EOL] import matplotlib as mpl [EOL] a = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] i = [number] [comment] [EOL] [EOL] mpl . style . use ( a [ i ] ) [EOL] [EOL] n = [number] [EOL] [EOL] x = np . linspace ( [number] , [number] * np . pi , n ) [EOL] [EOL] y1 = np . sin ( x ) [EOL] y2 = np . cos ( x ) [EOL] [EOL] y = y1 + y2 [EOL] [EOL] [comment] [EOL] [EOL] plt . figure ( ) [EOL] plt . subplot ( [number] ) [EOL] plt . plot ( x , y1 , [string] , label = [string] ) [EOL] plt . title ( [string] ) [EOL] [comment] [EOL] plt . ylabel ( [string] ) [EOL] plt . legend ( ) [EOL] [EOL] plt . subplot ( [number] ) [EOL] plt . plot ( x , y2 , [string] , label = [string] ) [EOL] [comment] [EOL] [comment] [EOL] plt . ylabel ( [string] ) [EOL] plt . legend ( ) [EOL] [EOL] plt . subplot ( [number] ) [EOL] plt . plot ( x , y , [string] , label = [string] ) [EOL] [comment] [EOL] plt . xlabel ( [string] ) [EOL] plt . ylabel ( [string] ) [EOL] plt . legend ( ) [EOL] [EOL] plt . tight_layout ( ) [EOL] [EOL] plt . show ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import numpy as np [EOL] import matplotlib . pyplot as plt [EOL] from mpl_toolkits . mplot3d import Axes3D [EOL] from matplotlib import cm [EOL] from matplotlib . ticker import LinearLocator , FormatStrFormatter [EOL] [EOL] n1 = [number] [EOL] n2 = [number] [EOL] [EOL] x1 = np . linspace ( [number] , [number] * np . pi , n1 ) [EOL] x2 = np . linspace ( [number] , [number] * np . pi , n2 ) [EOL] [EOL] X1 , X2 = np . meshgrid ( x1 , x2 ) [EOL] [EOL] Z = np . sin ( X1 ) * np . cos ( X2 ) [EOL] [EOL] breaks = np . linspace ( - [number] , [number] , [number] ) [comment] [EOL] [EOL] plt . rcParams [ [string] ] = [string] [comment] [EOL] [EOL] plt . figure ( [number] ) [EOL] CS1 = plt . contour ( x1 , x2 , Z , breaks , colors = [string] , ) [EOL] CS2 = plt . contourf ( x1 , x2 , Z , breaks , cmap = [string] , extend = [string] , vmin = - [number] , vmax = [number] , ) [EOL] plt . colorbar ( ticks = breaks , orientation = [string] ) [EOL] plt . clabel ( CS1 , inline = [number] , fontsize = [number] ) [EOL] [EOL] plt . xlabel ( [string] ) [EOL] plt . ylabel ( [string] ) [EOL] plt . title ( [string] ) [EOL] plt . grid ( True ) [EOL] [comment] [EOL] [EOL] [EOL] [EOL] [EOL] fig = plt . figure ( [number] ) [EOL] ax = fig . gca ( projection = [string] ) [EOL] surf = ax . plot_surface ( X1 , X2 , Z , cmap = [string] , linewidth = [number] , antialiased = False ) [EOL] [comment] [EOL] ax . zaxis . set_major_locator ( LinearLocator ( [number] ) ) [EOL] ax . zaxis . set_major_formatter ( FormatStrFormatter ( [string] ) ) [EOL] fig . colorbar ( surf , shrink = [number] , aspect = [number] ) [EOL] [comment] [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] fig = plt . figure ( [number] ) [EOL] ax2 = fig . gca ( projection = [string] ) [EOL] cset = ax2 . contourf ( X1 , X2 , Z , cmap = cm . coolwarm ) [EOL] ax2 . clabel ( cset , fontsize = [number] , inline = [number] ) [EOL] [EOL] [EOL] [EOL] fig = plt . figure ( [number] ) [EOL] ax3 = fig . gca ( projection = [string] ) [EOL] cset = ax3 . contour ( X1 , X2 , Z , extend3d = True , cmap = cm . coolwarm ) [EOL] ax3 . clabel ( cset , fontsize = [number] , inline = [number] ) [EOL] [EOL] plt . show ( ) [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import Any [EOL] import typing [EOL] import matplotlib . pyplot as plt [EOL] import numpy as np [EOL] [EOL] [EOL] x = np . linspace ( - [number] * np . pi , [number] * np . pi , [number] ) [EOL] y = np . sin ( x ) [EOL] z = np . cos ( x ) [EOL] [EOL] xnum = np . linspace ( - [number] , [number] , [number] ) [EOL] ynum = np . linspace ( - [number] , [number] , [number] ) [EOL] [EOL] [EOL] plt . figure ( [number] ) [EOL] plt . plot ( x , y , color = ( [number] , [number] , [number] , [number] ) ) [comment] [EOL] plt . plot ( x , z , color = ( [number] / [number] , [number] / [number] , [number] / [number] , [number] ) ) [comment] [EOL] [EOL] plt . axes ( ) . spines [ [string] ] . set_position ( ( [string] , [number] ) ) [comment] [EOL] plt . axes ( ) . spines [ [string] ] . set_position ( ( [string] , [number] ) ) [comment] [EOL] [EOL] [comment] [EOL] plt . axhline ( y = plt . ylim ( ) [ [number] ] , color = [string] ) [comment] [EOL] plt . axvline ( x = plt . xlim ( ) [ [number] ] , color = [string] ) [comment] [EOL] [EOL] plt . title ( [string] ) [EOL] plt . xlabel ( [string] ) [EOL] plt . ylabel ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] plt . legend ( [ [string] , [string] ] ) [EOL] plt . grid ( ) [EOL] plt . show ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import numpy as np [EOL] import matplotlib . pyplot as plt [EOL] import matplotlib as mpl [EOL] a = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] i = [number] [comment] [EOL] [EOL] mpl . style . use ( a [ i ] ) [EOL] [EOL] n = [number] [EOL] n_bar = [number] [EOL] [EOL] theta = np . linspace ( [number] , [number] * np . pi , n ) [EOL] theta2 = np . linspace ( [number] , [number] * np . pi , n_bar ) [EOL] [EOL] curve1 = np . linspace ( [number] , [number] , n ) [EOL] curve2 = curve1 + [number] * np . random . uniform ( - [number] , [number] , n ) [EOL] curve3 = np . random . random ( n ) [EOL] curve4 = np . random . rand ( n_bar ) [EOL] [EOL] [EOL] plt . figure ( [number] ) [EOL] ax1 = plt . subplot ( [number] , polar = True ) [EOL] [comment] [EOL] [comment] [EOL] ax1 . scatter ( theta , curve3 , c = curve3 , label = [string] , alpha = [number] , edgecolor = [string] , s = [number] * np . abs ( curve3 ) , cmap = plt . cm . seismic ) [EOL] ax1 . set_title ( [string] ) [EOL] [comment] [EOL] ax1 . set_ylim ( [number] , [number] ) [EOL] ax1 . set_yticks ( np . linspace ( [number] , [number] , [number] ) ) [EOL] ax1 . set_xticks ( np . linspace ( [number] , [number] * np . pi , [number] ) [ : - [number] ] ) [EOL] [EOL] [EOL] plt . figure ( [number] ) [EOL] plt . plot ( theta , curve1 ) [EOL] plt . scatter ( theta , curve2 ) [EOL] plt . scatter ( theta , curve2 + [number] ) [EOL] [EOL] [EOL] [EOL] [EOL] plt . figure ( [number] ) [EOL] ax2 = plt . subplot ( [number] , polar = True ) [EOL] [EOL] ax2 . bar ( theta2 , curve4 , width = curve4 , bottom = [number] , label = [string] , alpha = [number] , edgecolor = [string] , color = plt . cm . jet ( curve4 ) ) [EOL] plt . title ( [string] ) [EOL] plt . grid ( True ) [EOL] plt . show ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import matplotlib . pyplot as plt [EOL] import numpy as np [EOL] [EOL] import matplotlib as mpl [EOL] a = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] i = [number] [comment] [EOL] [EOL] mpl . style . use ( a [ i ] ) [EOL] [EOL] n = [number] [EOL] [EOL] x = np . linspace ( [number] , [number] * np . pi , n ) [EOL] [EOL] y1 = np . sin ( x ) [EOL] y2 = np . cos ( x ) [EOL] r = np . random . random ( n ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] fig = plt . figure ( ) [EOL] [EOL] [comment] [EOL] ax1 = fig . add_subplot ( [number] ) [EOL] ax1 . scatter ( x , r , edgecolor = [string] , facecolor = [string] , s = [number] , alpha = [number] , label = [string] ) [EOL] ax1 . set_title ( [string] ) [EOL] ax1 . set_xlabel ( [string] , color = [string] ) [EOL] ax1 . set_ylabel ( [string] , color = [string] ) [EOL] ax1 . tick_params ( axis = [string] , colors = [string] ) [EOL] ax1 . tick_params ( axis = [string] , colors = [string] ) [EOL] ax1 . grid ( True ) [EOL] ax1 . legend ( ) [EOL] [EOL] ax2 = fig . add_subplot ( [number] ) [EOL] ax2 . plot ( x , y1 , [string] , alpha = [number] , label = [string] ) [EOL] ax2 . set_title ( [string] ) [EOL] ax2 . set_xlabel ( [string] , color = [string] ) [EOL] ax2 . set_ylabel ( [string] , color = [string] ) [EOL] ax2 . grid ( True ) [EOL] ax2 . legend ( ) [EOL] [EOL] ax3 = fig . add_subplot ( [number] ) [EOL] ax3 . plot ( x , y2 , [string] , alpha = [number] , label = [string] ) [EOL] ax3 . set_title ( [string] ) [EOL] ax3 . set_xlabel ( [string] , color = [string] ) [EOL] ax3 . set_ylabel ( [string] , color = [string] ) [EOL] ax3 . grid ( True ) [EOL] ax3 . legend ( ) [EOL] [EOL] ax4 = fig . add_subplot ( [number] ) [EOL] ax4 . plot ( x , y1 + y2 , [string] , alpha = [number] , label = [string] ) [EOL] ax4 . set_title ( [string] ) [EOL] ax4 . set_xlabel ( [string] , color = [string] ) [EOL] ax4 . set_ylabel ( [string] , color = [string] ) [EOL] ax4 . grid ( True ) [EOL] ax4 . legend ( ) [EOL] [EOL] plt . tight_layout ( ) [EOL] [EOL] plt . suptitle ( [string] , fontweight = [string] , fontsize = [number] ) [EOL] plt . savefig ( [string] , format = [string] , dpi = [number] , bbox_inches = [string] ) [EOL] plt . show ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import Any , Tuple [EOL] import typing [EOL] import numpy as np [EOL] import matplotlib . pyplot as plt [EOL] [EOL] [EOL] def vanderpol ( x , y , mu ) : [EOL] u = mu * ( x - ( x ** [number] / [number] ) - y ) [EOL] v = x / mu [EOL] return u , v [EOL] [EOL] [EOL] [EOL] mu = [number] [EOL] [EOL] l = [number] [EOL] n = [number] [EOL] [EOL] X1 , X2 = np . meshgrid ( np . linspace ( - l , l , n ) , np . linspace ( - l , l , n ) ) [EOL] [EOL] U , V = vanderpol ( X1 , X2 , mu ) [EOL] [EOL] resultant_vel = ( U ** [number] + V ** [number] ) ** [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] plt . figure ( [number] ) [EOL] strm = plt . streamplot ( X1 , X2 , U , V , color = [string] , density = [number] , arrowsize = [number] , arrowstyle = [string] , linewidth = [number] , cmap = plt . cm . jet ) [EOL] [EOL] [comment] [EOL] plt . title ( [string] ) [EOL] plt . xlabel ( [string] ) [EOL] plt . ylabel ( [string] ) [EOL] plt . grid ( True ) [EOL] [EOL] [comment] [EOL] [EOL] [EOL] slice_interval = [number] [EOL] [EOL] skip = ( slice ( None , None , slice_interval ) , slice ( None , None , slice_interval ) ) [EOL] [EOL] [EOL] plt . figure ( [number] ) [EOL] QUIVER = plt . quiver ( X1 [ skip ] , X2 [ skip ] , U [ skip ] , V [ skip ] , resultant_vel [ skip ] , units = [string] , angles = [string] , scale = [number] , pivot = [string] , color = [string] , cmap = plt . cm . seismic ) [EOL] [EOL] plt . quiverkey ( QUIVER , [number] , [number] , [number] , label = [string] , labelcolor = [string] , labelpos = [string] , coordinates = [string] ) [EOL] plt . colorbar ( QUIVER ) [EOL] plt . title ( [string] ) [EOL] plt . xlabel ( [string] ) [EOL] plt . ylabel ( [string] ) [EOL] plt . grid ( True ) [EOL] [EOL] [comment] [EOL] [EOL] [EOL] plt . figure ( [number] ) [EOL] BARB = plt . barbs ( X1 [ skip ] , X2 [ skip ] , U [ skip ] , V [ skip ] , resultant_vel [ skip ] , pivot = [string] , cmap = plt . cm . jet , barb_increments = { [string] : [number] , [string] : [number] , [string] : [number] } ) [EOL] [comment] [EOL] plt . title ( [string] ) [EOL] plt . xlabel ( [string] ) [EOL] plt . ylabel ( [string] ) [EOL] plt . grid ( True ) [EOL] [EOL] plt . show ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Tuple[builtins.slice,builtins.slice]$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.slice,builtins.slice]$ 0 0 0 0 $typing.Tuple[builtins.slice,builtins.slice]$ 0 0 0 0 $typing.Tuple[builtins.slice,builtins.slice]$ 0 0 0 0 $typing.Tuple[builtins.slice,builtins.slice]$ 0 0 $typing.Any$ 0 $typing.Tuple[builtins.slice,builtins.slice]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.slice,builtins.slice]$ 0 0 0 0 $typing.Tuple[builtins.slice,builtins.slice]$ 0 0 0 0 $typing.Tuple[builtins.slice,builtins.slice]$ 0 0 0 0 $typing.Tuple[builtins.slice,builtins.slice]$ 0 0 $typing.Any$ 0 $typing.Tuple[builtins.slice,builtins.slice]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import matplotlib . pyplot as plt [EOL] import numpy as np [EOL] [EOL] import matplotlib as mpl [EOL] [EOL] a = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] i = [number] [comment] [EOL] [EOL] mpl . style . use ( a [ i ] ) [EOL] [EOL] Rmin = [number] [EOL] Rmax = [number] [EOL] [EOL] Theta_min = [number] [EOL] Theta_max = [number] * np . pi [EOL] [EOL] n = [number] [EOL] [EOL] radius = np . linspace ( Rmin , Rmax , n ) [EOL] Theta = np . linspace ( Theta_min , Theta_max , n ) [EOL] [EOL] theta_matrix , radius_matrix = np . meshgrid ( Theta , radius ) [EOL] [EOL] U , V = np . ones ( ( n , n ) ) , np . ones ( ( n , n ) ) [EOL] [comment] [EOL] [EOL] resultant_vel = ( U ** [number] + ( V * radius_matrix ) ** [number] ) ** [number] [EOL] [EOL] [comment] [EOL] [EOL] lw = [number] * resultant_vel / np . max ( resultant_vel ) [EOL] [EOL] plt . figure ( [number] ) [EOL] [EOL] ax1 = plt . subplot ( [number] , polar = True ) [EOL] [EOL] [comment] [EOL] stream = ax1 . streamplot ( theta_matrix , radius_matrix , V , U , color = [string] , arrowsize = [number] , arrowstyle = [string] , density = [number] , ) [EOL] [comment] [EOL] ax1 . set_ylim ( Rmin , Rmax ) [EOL] ax1 . set_rlabel_position ( [number] ) [EOL] ax1 . legend ( [ [string] ] ) [EOL] [EOL] [EOL] [EOL] plt . figure ( [number] ) [EOL] ax2 = plt . subplot ( [number] , polar = True ) [EOL] quiver = ax2 . quiver ( theta_matrix , radius_matrix , U * np . cos ( theta_matrix ) - V * np . sin ( theta_matrix ) , U * np . sin ( theta_matrix ) + V * np . cos ( theta_matrix ) ) [EOL] [EOL] [EOL] [EOL] plt . figure ( [number] ) [EOL] plt . quiver ( theta_matrix , radius_matrix , V , U ) [EOL] plt . show ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $builtins.int$ 0 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import Any , List [EOL] import typing [EOL] import matplotlib . pyplot as plt [EOL] import numpy as np [EOL] [EOL] import matplotlib as mpl [EOL] [EOL] a = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] i = [number] [comment] [EOL] [EOL] mpl . style . use ( a [ i ] ) [EOL] [EOL] n = [number] [EOL] no_of_cycles = [number] [EOL] f = np . pi [EOL] r = [number] [EOL] [EOL] theta = np . linspace ( [number] , [number] * no_of_cycles * np . pi , n ) [EOL] func = r * np . cos ( f * theta ) [EOL] func2 = r * np . sin ( f * theta ) [EOL] [EOL] plt . figure ( [number] ) [EOL] plt . plot ( theta * [number] / np . pi , func , [string] , lw = [number] , label = [string] ) [EOL] plt . plot ( theta * [number] / np . pi , func2 , [string] , lw = [number] , label = [string] ) [EOL] plt . title ( [string] . format ( f , r ) ) [EOL] plt . xlabel ( [string] ) [EOL] plt . ylabel ( [string] ) [EOL] [comment] [EOL] plt . grid ( True ) [EOL] [EOL] [EOL] plt . figure ( [number] ) [EOL] ax2 = plt . subplot ( [number] , polar = True ) [EOL] ax2 . plot ( theta , func , [string] , label = [string] ) [EOL] ax2 . plot ( theta , func2 , [string] , label = [string] ) [EOL] ax2 . set_yticks ( np . linspace ( - [number] , [number] , [number] ) ) [EOL] ax2 . set_xticks ( np . linspace ( [number] , [number] * np . pi , [number] ) [ : - [number] ] ) [EOL] plt . title ( [string] ) [EOL] plt . grid ( True ) [EOL] plt . legend ( ) [EOL] plt . show ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import Any , List [EOL] import typing [EOL] import matplotlib . pyplot as plt [EOL] import numpy as np [EOL] [EOL] import matplotlib as mpl [EOL] [EOL] [EOL] [EOL] [EOL] range_vals = np . linspace ( [number] , [number] , [number] ) [EOL] [EOL] count1 = np . random . rand ( [number] ) * [number] [EOL] count2 = - np . random . rand ( [number] ) * [number] [EOL] count3 = np . random . rand ( [number] ) * [number] [EOL] count4 = np . random . rand ( [number] ) * [number] [EOL] errors = np . ones ( [number] ) * [number] [EOL] bar_width = [number] [EOL] [EOL] a = [ [string] , [string] ] [EOL] [EOL] i = [number] [comment] [EOL] [EOL] mpl . style . use ( a [ i ] ) [EOL] [EOL] groups = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] if i == [number] : [EOL] mid_vals = ( range_vals [ [number] : - [number] ] + range_vals [ [number] : ] ) * [number] - bar_width * [number] [comment] [EOL] plt . bar ( mid_vals - bar_width * [number] , count1 , width = bar_width , facecolor = [string] , label = [string] , yerr = errors ) [EOL] plt . bar ( mid_vals - bar_width * [number] , count2 , width = bar_width , facecolor = [string] , label = [string] , yerr = errors ) [EOL] plt . bar ( mid_vals - bar_width * [number] , count3 , width = bar_width , facecolor = [string] , label = [string] , yerr = errors ) [EOL] plt . bar ( mid_vals + bar_width * [number] , count4 , width = bar_width , facecolor = [string] , label = [string] , yerr = errors ) [EOL] plt . xticks ( mid_vals + bar_width * [number] , groups , rotation = [string] ) [EOL] plt . grid ( True ) [EOL] plt . xlabel ( [string] ) [EOL] plt . ylabel ( [string] ) [EOL] plt . legend ( ) [EOL] plt . show ( ) [EOL] [EOL] else : [EOL] mid_vals = ( range_vals [ [number] : - [number] ] + range_vals [ [number] : ] ) * [number] [EOL] plt . bar ( mid_vals - bar_width * [number] , count1 , width = bar_width , facecolor = [string] , label = [string] , yerr = errors ) [EOL] plt . bar ( mid_vals - bar_width * [number] , count2 , width = bar_width , facecolor = [string] , label = [string] , yerr = errors ) [EOL] plt . bar ( mid_vals - bar_width * [number] , count3 , width = bar_width , facecolor = [string] , label = [string] , yerr = errors ) [EOL] plt . bar ( mid_vals + bar_width * [number] , count3 , width = bar_width , facecolor = [string] , label = [string] , yerr = errors ) [EOL] plt . xticks ( mid_vals , groups , rotation = [string] ) [EOL] [EOL] plt . grid ( True ) [EOL] plt . xlabel ( [string] ) [EOL] plt . ylabel ( [string] ) [EOL] plt . legend ( ) [EOL] plt . show ( ) [EOL] [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $builtins.int$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import Any , List [EOL] import typing [EOL] import matplotlib . pyplot as plt [EOL] import numpy as np [EOL] [EOL] import matplotlib as mpl [EOL] [EOL] [EOL] a = [ [string] , [string] ] [EOL] [EOL] i = [number] [comment] [EOL] [EOL] [EOL] mpl . style . use ( a [ i ] ) [EOL] [EOL] N = [number] [EOL] x = np . linspace ( - [number] * np . pi , [number] * np . pi , N ) [EOL] [EOL] [EOL] y = np . random . normal ( [number] , [number] , N ) + np . sin ( x ) [EOL] [EOL] plt . figure ( [number] ) [EOL] plt . scatter ( x , y , edgecolor = [string] , facecolor = [string] , s = [number] , alpha = [number] , marker = [string] , label = [string] , linewidth = [number] ) [EOL] plt . legend ( ) [EOL] plt . xlabel ( [string] ) [EOL] plt . ylabel ( [string] ) [EOL] plt . title ( [string] ) [EOL] plt . show ( ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import numpy as np [EOL] import matplotlib . pyplot as plt [EOL] [EOL] a = [number] [EOL] b = [number] [EOL] n = [number] [EOL] [EOL] x = np . linspace ( a , b , n ) [EOL] y = x [ : : - [number] ] [EOL] [EOL] xerr = np . random . rand ( n ) [EOL] yerr = np . random . rand ( n ) [EOL] [EOL] [EOL] plt . errorbar ( x , y , xerr = xerr , yerr = yerr , label = [string] , fmt = [string] , color = [string] , ecolor = [string] , elinewidth = [number] , capsize = [number] , capthick = [number] , barsabove = True , errorevery = [number] ) [EOL] plt . xlabel ( [string] ) [EOL] plt . ylabel ( [string] ) [EOL] plt . title ( [string] ) [EOL] plt . xticks ( ) [EOL] plt . yticks ( ) [EOL] plt . legend ( ) [EOL] plt . show ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import Any [EOL] import typing [EOL] import numpy as np [EOL] import matplotlib . pyplot as plt [EOL] import matplotlib as mpl [EOL] [EOL] mpl . style . use ( [string] ) [EOL] [EOL] mean = [number] [EOL] sd = [number] [EOL] N = [number] [EOL] binsize = [number] [EOL] [EOL] IQ = np . random . normal ( mean , sd , N ) [EOL] [EOL] count , bin , extra = plt . hist ( IQ , binsize , facecolor = [string] , normed = False , label = [string] ) [EOL] plt . plot ( bin [ [number] : ] , count , label = [string] , color = [string] ) [EOL] plt . xlabel ( [string] ) [EOL] plt . ylabel ( [string] ) [EOL] plt . title ( [string] ) [EOL] [comment] [EOL] plt . grid ( True ) [EOL] plt . legend ( ) [EOL] plt . show ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import Any , List [EOL] import typing [EOL] import matplotlib . pyplot as plt [EOL] import numpy as np [EOL] [EOL] import matplotlib as mpl [EOL] a = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] i = [number] [comment] [EOL] [EOL] mpl . style . use ( a [ i ] ) [EOL] [EOL] n = [number] [EOL] no_of_cycles = [number] [EOL] f = [number] [EOL] r = [number] [EOL] [EOL] theta = np . linspace ( [number] , [number] * no_of_cycles * np . pi , n ) [EOL] func2 = theta ** [number] + [number] * theta + [number] [EOL] [EOL] [EOL] plt . figure ( [number] ) [EOL] plt . plot ( theta * [number] / np . pi , func2 , [string] , lw = [number] , label = [string] ) [EOL] plt . title ( [string] . format ( f , r ) ) [EOL] plt . xlabel ( [string] ) [EOL] plt . ylabel ( [string] ) [EOL] [comment] [EOL] plt . grid ( True ) [EOL] [EOL] [EOL] [EOL] [EOL] plt . figure ( [number] ) [EOL] ax2 = plt . subplot ( [number] , polar = True ) [EOL] ax2 . plot ( theta , func2 , [string] , label = [string] ) [EOL] ax2 . plot ( [number] , [number] ) [EOL] ax2 . plot ( ) [EOL] [comment] [EOL] [comment] [EOL] plt . title ( [string] ) [EOL] plt . grid ( True ) [EOL] plt . legend ( ) [EOL] plt . show ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] [EOL] import tut21_calc [EOL] import unittest [EOL] [EOL] class TestCalc ( unittest . TestCase ) : [EOL] [EOL] def test_add ( self ) : [EOL] self . assertEqual ( tut21_calc . add ( [number] , [number] ) , [number] ) [EOL] self . assertEqual ( tut21_calc . add ( - [number] , [number] ) , [number] ) [EOL] self . assertEqual ( tut21_calc . add ( - [number] , - [number] ) , - [number] ) [EOL] self . assertEqual ( tut21_calc . add ( [number] , [number] ) , [number] ) [EOL] [EOL] def test_sub ( self ) : [EOL] self . assertEqual ( tut21_calc . sub ( [number] , [number] ) , - [number] ) [EOL] self . assertEqual ( tut21_calc . sub ( [number] , - [number] ) , [number] ) [EOL] self . assertEqual ( tut21_calc . sub ( - [number] , [number] ) , - [number] ) [EOL] self . assertEqual ( tut21_calc . sub ( [number] , [number] ) , [number] ) [EOL] [EOL] def test_mul ( self ) : [EOL] self . assertEqual ( tut21_calc . mul ( [number] , [number] ) , [number] ) [EOL] self . assertEqual ( tut21_calc . mul ( [number] , - [number] ) , - [number] ) [EOL] self . assertEqual ( tut21_calc . mul ( - [number] , - [number] ) , [number] ) [EOL] self . assertEqual ( tut21_calc . mul ( - [number] , - [number] ) , [number] ) [EOL] [EOL] def test_div ( self ) : [EOL] self . assertEqual ( tut21_calc . div ( [number] , [number] ) , [number] ) [EOL] [EOL] with self . assertRaises ( ValueError ) : [EOL] tut21_calc . div ( [number] , [number] ) [EOL] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] [EOL] print ( [string] ) [EOL] [EOL] def find_index ( to_search , target ) : [EOL] for index , value in enumerate ( to_search ) : [EOL] if value == target : [EOL] return index [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] import logging [EOL] import logging [EOL] [EOL] formatter = logging . Formatter ( [string] ) [EOL] [EOL] filehandler = logging . FileHandler ( [string] ) [EOL] filehandler . setFormatter ( formatter ) [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] logger . setLevel ( logging . INFO ) [EOL] logger . addHandler ( filehandler ) [EOL] [EOL] [comment] [EOL] [EOL] [EOL] class Employee ( object ) : [EOL] [EOL] def __init__ ( self , first , last , pay ) : [EOL] self . first = first [EOL] self . last = last [EOL] self . pay = pay [EOL] [EOL] logger . info ( [string] . format ( self . first , self . last , self . pay ) ) [EOL] [EOL] @ property def email ( self ) : [EOL] return [string] . format ( self . first , self . last ) [EOL] [EOL] @ property def fullname ( self ) : [EOL] return [string] . format ( self . first , self . last ) [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 $logging.Formatter$ 0 0 0 0 0 0 0 0 0 $logging.FileHandler$ 0 0 0 0 0 0 0 0 $logging.FileHandler$ 0 0 0 $logging.Formatter$ 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 $logging.FileHandler$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import logging [EOL] import typing [EOL] import logging [EOL] from employee_tut20 import Employee , logger [EOL] [EOL] formatter = logging . Formatter ( [string] ) [comment] [EOL] [EOL] filehandler = logging . FileHandler ( [string] ) [comment] [EOL] filehandler . setFormatter ( formatter ) [comment] [EOL] [EOL] streamhandler = logging . StreamHandler ( ) [comment] [EOL] streamhandler . setFormatter ( formatter ) [comment] [EOL] [EOL] logger2 = logging . getLogger ( __name__ ) [comment] [EOL] logger2 . setLevel ( logging . DEBUG ) [comment] [EOL] logger2 . addHandler ( filehandler ) [comment] [EOL] logger2 . addHandler ( streamhandler ) [comment] [EOL] [EOL] filehandler . setLevel ( logging . ERROR ) [comment] [EOL] [EOL] [comment] [EOL] [EOL] num1 = [number] [EOL] [EOL] num2 = [number] [EOL] [EOL] add_result = num1 + num2 [EOL] logger2 . debug ( [string] . format ( num1 , num2 , add_result ) ) [EOL] [EOL] sub_result = num1 - num2 [EOL] logger2 . debug ( [string] . format ( num1 , num2 , sub_result ) ) [EOL] [EOL] mul_result = num1 * num2 [EOL] logger2 . debug ( [string] . format ( num1 , num2 , mul_result ) ) [EOL] [EOL] try : [EOL] div_result = num1 / num2 [EOL] except ZeroDivisionError : [EOL] logger2 . exception ( [string] ) [comment] [EOL] [comment] [EOL] [EOL] [EOL] [EOL] emp1 = Employee ( [string] , [string] , [number] ) [EOL] emp2 = Employee ( [string] , [string] , [number] ) [EOL] [EOL] logger . info ( [string] . format ( emp1 . fullname ) ) [EOL] logger . info ( [string] . format ( emp2 . fullname ) )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Formatter$ 0 0 0 0 0 0 0 0 0 0 $logging.FileHandler$ 0 0 0 0 0 0 0 0 0 $logging.FileHandler$ 0 0 0 $logging.Formatter$ 0 0 0 0 $logging.StreamHandler$ 0 0 0 0 0 0 0 0 $logging.StreamHandler$ 0 0 0 $logging.Formatter$ 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 $logging.FileHandler$ 0 0 0 $logging.Logger$ 0 0 0 $logging.StreamHandler$ 0 0 0 0 $logging.FileHandler$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $logging.Logger$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $logging.Logger$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $logging.Logger$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0
from typing import Any [EOL] import typing [EOL] import numpy as np [EOL] [EOL] A = np . random . randint ( [number] , [number] , ( [number] , [number] ) ) [EOL] [EOL] print ( A ) [EOL] [EOL] print ( A . max ( ) , A . min ( ) ) [EOL] [EOL] print ( A . argmax ( ) ) [comment] [EOL] [EOL] print ( A . max ( axis = [number] ) , A . max ( axis = [number] ) ) [comment] [EOL] [EOL] B = A . flatten ( ) [EOL] [EOL] print ( ) [EOL] print ( B ) [comment] [EOL] print ( A . cumsum ( ) ) [comment] [EOL] print ( np . sort ( B ) ) [comment] [EOL] print ( np . argsort ( B ) ) [comment] [EOL] [EOL] print ( ) [EOL] print ( A . mean ( ) ) [comment] [EOL] print ( A . sum ( ) / [number] ) [EOL] print ( ) [EOL] print ( A . mean ( axis = [number] ) ) [comment] [EOL] print ( A . mean ( axis = [number] ) ) [comment] [EOL] print ( ) [EOL] print ( A . sum ( axis = [number] ) / [number] ) [comment] [EOL] print ( A . sum ( axis = [number] ) / [number] ) [comment] [EOL] print ( ) [EOL] print ( A . var ( ) ) [comment] [EOL] print ( A . std ( ) ) [comment] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import matplotlib . pyplot as plt [EOL] [EOL] import numpy as np [EOL] [EOL] [EOL] Z1 = np . random . random ( ( [number] , [number] ) ) [EOL] [EOL] Z2 = np . random . uniform ( - [number] , [number] , ( [number] , [number] ) ) [EOL] [EOL] print ( Z1 ) [EOL] print ( ) [EOL] print ( Z2 ) [EOL] print ( ) [EOL] [EOL] [EOL] x = np . arange ( - [number] , [number] , [number] ) [EOL] [EOL] def norm_func ( x , mean , var ) : [EOL] return ( [number] / ( np . sqrt ( [number] * np . pi * var ) ) ) * np . exp ( - ( ( x - mean ) ** [number] ) / ( [number] * var ) ) [EOL] [EOL] [EOL] [EOL] plt . figure ( [number] ) [EOL] plt . plot ( x , norm_func ( x , [number] , [number] ) , [string] , label = [string] . format ( [number] , [number] ) ) [EOL] plt . plot ( x , norm_func ( x , [number] , [number] ) , [string] , label = [string] . format ( [number] , [number] ) ) [EOL] plt . plot ( x , norm_func ( x , [number] , [number] ) , [string] , label = [string] . format ( [number] , [number] ) ) [EOL] plt . plot ( x , norm_func ( x , - [number] , [number] ) , [string] , label = [string] . format ( - [number] , [number] ) ) [EOL] plt . legend ( ) [EOL] plt . show ( ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import Any , List [EOL] import typing [EOL] import numpy as np [EOL] [EOL] [EOL] list = [ [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] [EOL] array = np . array ( list , dtype = [string] ) [EOL] [EOL] print ( array ) [EOL] [EOL] list2 = [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] [EOL] [EOL] array2 = np . array ( list2 ) [EOL] [EOL] print ( ) [EOL] print ( array2 ) [EOL] print ( array2 . itemsize ) [EOL] print ( array2 . ndim ) [EOL] print ( array2 . shape ) [EOL] print ( array2 . size ) [EOL] print ( array2 . dtype . name ) [EOL] print ( type ( array2 ) ) [EOL] [EOL] print ( ) [EOL] array3 = np . zeros ( ( [number] , [number] ) , dtype = [string] ) [EOL] array4 = np . ones ( ( [number] , [number] ) , dtype = [string] ) [EOL] array5 = np . empty ( ( [number] , [number] ) , dtype = [string] ) [EOL] [EOL] print ( array3 ) [EOL] print ( ) [EOL] print ( array4 ) [EOL] print ( ) [EOL] print ( array5 ) [EOL] [EOL] ind = np . indices ( ( [number] , [number] ) , dtype = [string] ) [EOL] [EOL] print ( ind ) [EOL] print ( ) [EOL] [EOL] iden = np . eye ( [number] ) [EOL] [EOL] print ( iden ) [EOL] print ( ) [EOL] [EOL] iden2 = np . identity ( [number] , dtype = [string] ) [EOL] [EOL] print ( iden2 ) [EOL] print ( ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
[EOL] from typing import Any [EOL] import typing [EOL] import numpy as np [EOL] [EOL] A = np . ones ( ( [number] , [number] ) , dtype = [string] ) [EOL] [EOL] B = [number] * np . ones ( ( [number] , [number] ) , dtype = [string] ) [EOL] [EOL] C = np . random . randint ( - [number] , [number] , ( [number] , [number] ) ) [EOL] [EOL] print ( A + B ) [EOL] print ( A * B ) [EOL] print ( A / B ) [EOL] print ( A - B ) [EOL] print ( [number] * A ) [EOL] [EOL] print ( ( [number] * A ) ** B ) [EOL] print ( [number] ** [number] ) [EOL] [EOL] print ( np . dot ( A , B . T ) ) [EOL] [EOL] print ( C ) [EOL] print ( ) [EOL] print ( np . linalg . inv ( C ) ) [EOL] print ( ) [EOL] print ( np . dot ( C , np . linalg . inv ( C ) ) ) [EOL] [EOL] eigval , eigvec = np . linalg . eig ( C ) [EOL] print ( ) [EOL] print ( eigval ) [EOL] print ( ) [EOL] print ( eigvec ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import matplotlib . pyplot as plt [EOL] [EOL] import numpy as np [EOL] [EOL] [EOL] x = np . arange ( - [number] , [number] , [number] ) [EOL] y = np . arange ( - [number] , [number] , [number] ) [EOL] [EOL] print ( x ) [EOL] print ( y ) [EOL] [EOL] xx , yy = np . meshgrid ( x , y ) [EOL] xx1 , yy1 = np . meshgrid ( x , y , indexing = [string] ) [EOL] [EOL] print ( xx ) [EOL] print ( xx . shape ) [EOL] [EOL] print ( np . all ( xx == xx1 . T ) ) [comment] [EOL] [EOL] Z1 = xx ** [number] + [number] * yy ** [number] [EOL] [EOL] Z2 = np . random . random ( ( [number] , [number] ) ) [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] plt . figure ( [number] ) [EOL] plt . contourf ( xx , yy , Z1 , cmap = [string] ) [EOL] plt . colorbar ( ) [EOL] [comment] [EOL] [EOL] [EOL] plt . figure ( [number] ) [EOL] plt . contourf ( xx , yy , Z2 , cmap = [string] ) [EOL] plt . colorbar ( ) [EOL] plt . show ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] from typing import Any [EOL] import typing [EOL] import numpy as np [EOL] import matplotlib . pyplot as plt [EOL] [EOL] from numpy . fft import fft , fftfreq , ifft [EOL] [EOL] lx = [number] [comment] [EOL] n = [number] [comment] [EOL] [EOL] x = np . linspace ( [number] , lx , n ) [comment] [EOL] [EOL] omg = [number] * np . pi / lx [EOL] [EOL] y1 = [number] * np . cos ( [number] * omg * x ) [EOL] y2 = [number] * np . sin ( [number] * omg * x ) [EOL] y3 = [number] * np . sin ( [number] * omg * x ) [EOL] [EOL] y = y3 + y2 + y1 [EOL] [EOL] plt . figure ( [number] ) [EOL] plt . plot ( x , y , [string] ) [EOL] [comment] [EOL] [EOL] ffts = fftfreq ( n ) [EOL] fftvals = fft ( y ) [EOL] [EOL] [comment] [EOL] mask = ffts > [number] [EOL] ffttheo = [number] * abs ( fftvals / n ) [EOL] [EOL] [EOL] plt . figure ( [number] ) [EOL] plt . plot ( ffts , fftvals , [string] ) [EOL] [comment] [EOL] plt . show ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 $builtins.float$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.float$ 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import numpy as np [EOL] import matplotlib . pyplot as plt [EOL] from mpl_toolkits . mplot3d import Axes3D [EOL] from matplotlib import cm [EOL] from matplotlib . ticker import LinearLocator , FormatStrFormatter [EOL] [EOL] [EOL] M = [number] [EOL] alpha0 = [number] [EOL] [EOL] alpha3 = [number] + ( [number] * alpha0 / [number] ) [EOL] alpha1 = [number] - ( alpha0 / [number] ) [EOL] alpha2 = [number] - ( alpha0 / [number] ) [EOL] [EOL] pc = [number] [EOL] [EOL] x1 = np . linspace ( [number] , [number] , [number] ) [EOL] y1 = np . linspace ( [number] , [number] , [number] ) [EOL] z1 = np . linspace ( [number] , [number] , [number] ) [EOL] [EOL] x_yield = [ ] [EOL] y_yield = [ ] [EOL] z_yield = [ ] [EOL] [EOL] for x in x1 : [EOL] for y in y1 : [EOL] for z in z1 : [EOL] p = ( x + y + z ) / [number] [EOL] qsquare = ( [number] / [number] ) * ( ( x - alpha1 * p ) ** [number] + ( y - alpha2 * p ) ** [number] + ( z - alpha3 * p ) ** [number] ) [EOL] F = ( qsquare / ( M ** [number] - alpha0 ** [number] ) ) + ( p - [number] * pc ) ** [number] - ( pc / [number] ) ** [number] [EOL] if F == [number] : [EOL] x_yield . append ( x ) [EOL] y_yield . append ( y ) [EOL] z_yield . append ( z ) [EOL] [EOL] [EOL] fig = plt . figure ( [number] ) [EOL] ax = fig . gca ( projection = [string] ) [EOL] surf = ax . plot ( x_yield , y_yield , z_yield , [string] ) [EOL] ax . plot ( [ [number] , pc + [number] ] , [ [number] , pc + [number] ] , [ [number] , pc + [number] ] , [string] , linewidth = [number] ) [EOL] [comment] [EOL] plt . show ( ) [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 $builtins.float$ 0 0 $builtins.float$ 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import numpy as np [EOL] import matplotlib . pyplot as plt [EOL] import statsmodels . api as sm [EOL] [EOL] x = np . linspace ( [number] , [number] * np . pi , [number] ) [EOL] y = np . sin ( x ) + np . random . random ( [number] ) * [number] [EOL] lowess = sm . nonparametric . lowess ( y , x , frac = [number] ) [EOL] [EOL] plt . plot ( x , y , [string] , label = [string] ) [EOL] plt . plot ( lowess [ : , [number] ] , lowess [ : , [number] ] , label = [string] ) [EOL] plt . xlabel ( [string] , fontweight = [string] ) [EOL] plt . ylabel ( [string] , fontweight = [string] ) [EOL] plt . legend ( ) [EOL] plt . savefig ( [string] , format = [string] , dpi = [number] ) [EOL] [comment]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0