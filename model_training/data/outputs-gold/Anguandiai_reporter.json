from app . routes import app [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] app . run ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import builtins [EOL] from typing import Dict , Union , Type [EOL] import typing [EOL] import config [EOL] class Config : [EOL] DEBUG = False [EOL] CSRF_ENABLED = True [EOL] [EOL] [EOL] class Development ( Config ) : [EOL] DEBUG = True [EOL] red_flags = { } [EOL] [EOL] [EOL] class Testing ( Config ) : [EOL] DEBUG = True [EOL] TESTING = True [EOL] red_flags = { } [EOL] [EOL] [EOL] class Production ( Config ) : [EOL] DEBUG = False [EOL] TESTING = False [EOL] [EOL] app_config = { [string] : Development , [string] : Testing , [string] : Production } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import os [EOL] import pytest [EOL] import json [EOL] from tests . test_data import dat [EOL] from app import implementation , routes [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def client ( ) : [EOL] red_flags = implementation . red_flags [EOL] app = routes . app [EOL] test_client = app . test_client ( ) [EOL] red_flags . clear ( ) [EOL] cxt = app . app_context ( ) [EOL] cxt . push ( ) [EOL] yield test_client [EOL] cxt . pop ( ) [EOL] [EOL] [EOL] [comment] [EOL] def post_json ( client , url , json_dict ) : [EOL] return client . post ( url , data = json . dumps ( json_dict ) , content_type = [string] ) [EOL] [EOL] [EOL] [comment] [EOL] def json_of_response ( response ) : [EOL] return json . loads ( response . data . decode ( ) ) [EOL] [EOL] [EOL] [comment] [EOL] def patch_json ( client , url , json_dict ) : [EOL] return client . patch ( url , data = json . dumps ( json_dict ) , content_type = [string] ) [EOL] [EOL] [EOL] [comment] [EOL] def test_red_flag_creation ( client ) : [EOL] response = post_json ( client , [string] , dat [ [string] ] ) [EOL] assert response . status_code == [number] [EOL] assert json_of_response ( response ) [ [string] ] [ [number] ] [ [string] ] == [string] [EOL] [EOL] [EOL] [comment] [EOL] def test_generate_unique_and_sequential_flag_ids ( client ) : [EOL] [comment] [EOL] [ post_json ( client , [string] , dat [ [string] ] ) for i in range ( [number] ) ] [EOL] response = client . get ( [string] ) [EOL] [comment] [EOL] message = json_of_response ( response ) [ [string] ] [EOL] [comment] [EOL] ids = [ flag [ [string] ] for flag in message ] [EOL] [comment] [EOL] assert len ( set ( ids ) ) == len ( ids ) [EOL] [comment] [EOL] assert ids == list ( range ( [number] , [number] ) ) [EOL] [EOL] [EOL] [comment] [EOL] def test_optional_flag_properties_set_in_creation ( client ) : [EOL] post_json ( client , [string] , dat [ [string] ] ) [EOL] response = client . get ( [string] ) [EOL] assert json_of_response ( response ) [ [string] ] [ [number] ] [ [string] ] == [string] [EOL] [EOL] [EOL] [comment] [EOL] def test_get_flags ( client ) : [EOL] post_json ( client , [string] , dat [ [string] ] ) [EOL] post_json ( client , [string] , dat [ [string] ] ) [EOL] post_json ( client , [string] , dat [ [string] ] ) [EOL] post_json ( client , [string] , dat [ [string] ] ) [EOL] response = client . get ( [string] ) [EOL] assert len ( json_of_response ( response ) [ [string] ] ) == [number] [EOL] [EOL] [EOL] [comment] [EOL] def test_get_all_fails_when_none ( client ) : [EOL] response = client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] assert json_of_response ( response ) == { [string] : [number] , [string] : [string] } [EOL] [EOL] [EOL] [comment] [EOL] def test_get_single_flag_by_id ( client ) : [EOL] flag = post_json ( client , [string] , { [string] : [string] , [string] : [number] , [string] : [string] } ) [EOL] assert json_of_response ( flag ) [ [string] ] == [number] [EOL] resp = client . get ( [string] ) [EOL] assert json_of_response ( resp ) [ [string] ] [ [number] ] [ [string] ] == [string] [EOL] [EOL] [EOL] [comment] [EOL] def test_get_single_flag_by_non_existent_id_fails ( client ) : [EOL] resp = client . get ( [string] ) [EOL] assert resp . status_code == [number] [EOL] assert [string] in json_of_response ( resp ) [EOL] assert json_of_response ( resp ) [ [string] ] == [string] [EOL] [EOL] [EOL] [comment] [EOL] def test_can_edit_comment ( client ) : [EOL] post_json ( client , [string] , dat [ [string] ] ) [EOL] response = patch_json ( client , [string] , { [string] : [string] } ) [EOL] assert json_of_response ( response ) [ [string] ] [ [number] ] [ [string] ] == [string] [EOL] [EOL] [EOL] [comment] [EOL] def test_cant_edit_resolved_flag ( client ) : [EOL] post_json ( client , [string] , dat [ [string] ] ) [EOL] response = patch_json ( client , [string] , { [string] : [string] } ) [EOL] assert json_of_response ( response ) [ [string] ] == [string] [EOL] [EOL] [EOL] [comment] [EOL] def test_add_goeloc ( client ) : [EOL] [comment] [EOL] post_json ( client , [string] , dat [ [string] ] ) [EOL] [comment] [EOL] resp = patch_json ( client , [string] , { [string] : [string] } ) [EOL] [comment] [EOL] assert json_of_response ( resp ) [ [string] ] [ [number] ] [ [string] ] == [string] [EOL] [comment] [EOL] patch_json ( client , [string] , { [string] : [string] } ) [EOL] resp1 = client . get ( [string] ) [EOL] [comment] [EOL] assert [string] in json_of_response ( resp1 ) [ [string] ] [ [number] ] [ [string] ] [EOL] [EOL] [EOL] [comment] [EOL] def test_correct_response_if_flag_tobe_edited_not_exist ( client ) : [EOL] response = patch_json ( client , [string] , { [string] : [string] } ) [EOL] assert json_of_response ( response ) [ [string] ] == [string] [EOL] [EOL] [EOL] [comment] [EOL] def test_delete_flag ( client ) : [EOL] post_json ( client , [string] , dat [ [string] ] ) [EOL] response = client . delete ( [string] ) [EOL] assert json_of_response ( response ) [ [string] ] [ [number] ] [ [string] ] == [string] [EOL] [EOL] [EOL] [comment] [EOL] def test_cant_delete_non_exitent_flag ( client ) : [EOL] response = client . delete ( [string] ) [EOL] assert json_of_response ( response ) [ [string] ] == [string] [EOL] [EOL] [EOL] [docstring] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] def test_incomplete_red_flag_not_created ( client ) : [EOL] response = post_json ( client , [string] , dat [ [string] ] ) [EOL] assert response . status_code == [number] [EOL] assert json_of_response ( response ) [ [string] ] == [string] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] def test_validat_empty_required_fields_flag_not_created ( client ) : [EOL] response = post_json ( client , [string] , dat [ [string] ] ) [EOL] assert response . status_code == [number] [EOL] assert json_of_response ( response ) [ [string] ] == [string] [EOL] [EOL] [EOL] [comment] [EOL] def test_validate_data_types ( client ) : [EOL] response = post_json ( client , [string] , dat [ [string] ] ) [EOL] assert response . status_code == [number] [EOL] assert json_of_response ( response ) [ [string] ] == [string] [EOL] [EOL] [EOL] [comment] [EOL] def test_cant_change_editable_field_value_to_null ( client ) : [EOL] post_json ( client , [string] , dat [ [string] ] ) [EOL] response = patch_json ( client , [string] , { [string] : [string] } ) [EOL] assert json_of_response ( response ) [ [string] ] == [string] [EOL] [EOL] [EOL] [comment] [EOL] def test_correct_response_if_key_for_field_missing ( client ) : [EOL] post_json ( client , [string] , dat [ [string] ] ) [EOL] response = patch_json ( client , [string] , { [string] : [string] } ) [EOL] assert json_of_response ( response ) [ [string] ] == [string] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def test_send_empty_request_where_data_required ( client ) : [EOL] result = post_json ( client , [string] , [string] ) [EOL] assert result . status_code == [number] [EOL] assert json_of_response ( result ) [ [string] ] == [string] [EOL] [EOL] [EOL] [comment] [EOL] def test_wrong_endpoint ( client ) : [EOL] result = patch_json ( client , [string] , { [string] : [string] } ) [EOL] assert result . status_code == [number] [EOL] assert json_of_response ( result ) [ [string] ] == [string] [EOL] [EOL] [EOL] [comment] [EOL] def test_wrong_method ( client ) : [EOL] res = patch_json ( client , [string] , dat [ [string] ] ) [EOL] assert res . status_code == [number] [EOL] assert [string] in json_of_response ( res ) [ [string] ] [EOL] [EOL] [EOL] def test_geolocation_format_checked ( client ) : [EOL] post_json ( client , [string] , dat [ [string] ] ) [EOL] res = patch_json ( client , [string] , { [string] : [string] } ) [EOL] assert res . status_code == [number] [EOL] assert [string] in json_of_response ( res ) [ [string] ] [EOL] [EOL] [EOL] [comment] [EOL] def test_wrong_base_url ( client ) : [EOL] res = client . get ( [string] ) [EOL] assert [string] in json_of_response ( res ) [ [string] ] [EOL] [EOL] [EOL] [comment] [EOL] def test_no_end_point_for_patch ( client ) : [EOL] post_json ( client , [string] , dat [ [string] ] ) [EOL] res = patch_json ( client , [string] , { [string] : [string] } ) [EOL] assert json_of_response ( res ) [ [string] ] == [string] [EOL] [EOL] [EOL] [comment] [EOL] def test_wrong_method_post ( client ) : [EOL] res = post_json ( client , [string] , dat [ [string] ] ) [EOL] assert res . status_code == [number] [EOL] assert json_of_response ( res ) [ [string] ] == [string] [EOL] [EOL] [EOL] [comment] [EOL] def test_wrong_method_for_post_and_get ( client ) : [EOL] res = client . delete ( [string] ) [EOL] assert json_of_response ( res ) [ [string] ] == [string] [EOL] [EOL] [EOL] [comment] [EOL] def test_validate_id_type ( client ) : [EOL] res = client . get ( [string] ) [EOL] assert json_of_response ( res ) [ [string] ] == [string] [EOL] [EOL] [EOL] [comment] [EOL] def test_default_route ( client ) : [EOL] res = client . get ( [string] ) [EOL] assert [string] in json_of_response ( res ) [EOL] [EOL] [EOL] [comment] [EOL] def test_correct_response_wrong_method_for_update ( client ) : [EOL] response = post_json ( client , [string] , { [string] : [string] } ) [EOL] assert json_of_response ( response ) [ [string] ] == [string] [EOL]	
from typing import Dict , Union [EOL] import typing [EOL] dat = { [string] : { [string] : [string] , [string] : [number] , [string] : [string] } , [string] : { [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] } , [string] : { [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] } , [string] : { [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] } , [string] : { [string] : [string] , [string] : [string] , [string] : [string] } , [string] : { [string] : [string] , [string] : [number] } , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import datetime [EOL] [EOL] [EOL] class RedFlag : [EOL] def __init__ ( self , id , location , createdBy , comment ) : [EOL] self . id = id [EOL] self . location = location [EOL] self . createdBy = createdBy [EOL] self . comment = comment [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Any [EOL] import typing [EOL] import os [EOL] from flask import request , jsonify [EOL] from app import create_app [EOL] from . validation import Validation [EOL] from . implementation import Implementation [EOL] from app . wrappers import json_required [EOL] [EOL] [EOL] config_name = os . getenv ( [string] ) [EOL] app = create_app ( [string] ) [EOL] [EOL] [EOL] @ app . route ( [string] ) @ app . route ( [string] ) @ app . route ( [string] ) def home ( ) : [EOL] return jsonify ( { [string] : [string] , [string] : [string] , [string] : [string] } ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) @ json_required def create_flag ( ) : [EOL] data = request . json [EOL] res = Validation ( ) . validateNew ( data ) [EOL] return jsonify ( { [string] : res [ [number] ] , res [ [number] ] : res [ [number] ] } ) , res [ [number] ] [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def get_flags ( ) : [EOL] res = Implementation ( ) . get_flags ( ) [EOL] return jsonify ( { [string] : res [ [number] ] , res [ [number] ] : res [ [number] ] } ) , res [ [number] ] [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] , [string] ] ) def single_flag ( red_flag_id ) : [EOL] if Validation ( ) . validateId ( red_flag_id ) : [EOL] res = [ [number] , [string] , Validation ( ) . validateId ( red_flag_id ) ] [EOL] elif request . method == [string] : [EOL] res = Implementation ( ) . get_flag ( red_flag_id ) [EOL] elif request . method == [string] : [EOL] res = Implementation ( ) . delete ( red_flag_id ) [EOL] return jsonify ( { [string] : res [ [number] ] , res [ [number] ] : res [ [number] ] } ) , res [ [number] ] [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) @ json_required def edit ( red_flag_id , key ) : [EOL] data = request . json [EOL] res = Validation ( ) . validateEdit ( data , red_flag_id , key ) [EOL] return jsonify ( { [string] : res [ [number] ] , res [ [number] ] : res [ [number] ] } ) , res [ [number] ] [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] , [string] , [string] , [string] ] ) @ app . route ( [string] , methods = [ [string] , [string] , [string] , [string] ] ) @ app . route ( [string] , methods = [ [string] , [string] , [string] , [string] ] ) def wrongURL ( resource , methods = [ [string] ] , id = None , action = None ) : [EOL] if resource != [string] : [EOL] return jsonify ( { [string] : [number] , [string] : f' [string] { resource } [string] ' } ) , [number] [EOL] elif request . method not in methods : [EOL] return jsonify ( { [string] : [number] , [string] : [string] } ) , [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Union , Type , Any [EOL] import typing [EOL] import datetime [EOL] from . models import RedFlag [EOL] import datetime [EOL] from app . implementation import Implementation [EOL] [EOL] [EOL] class Validation : [EOL] data_types = { [string] : int , [string] : datetime . datetime , [string] : int , [string] : str , [string] : str , [string] : str , [string] : str , [string] : str , [string] : str } [EOL] [EOL] def bad_type ( self , data ) : [EOL] for field in data : [EOL] if field in self . data_types and not isinstance ( data [ field ] , self . data_types [ field ] ) : [EOL] return [ [number] , [string] , f'{ field } [string] { self . data_types [ field ] }' ] [EOL] [comment] [EOL] elif field not in self . data_types : [EOL] return [ [number] , [string] , f' [string] { field }' ] [EOL] [EOL] def validateNew ( self , data ) : [EOL] for field in [ [string] , [string] , [string] ] : [EOL] if field not in data : [EOL] return [ [number] , [string] , f'{ field } [string] ' ] [EOL] elif not data [ field ] : [EOL] return [ [number] , [string] , [string] . format ( field ) ] [EOL] if self . bad_type ( data ) : [EOL] result = self . bad_type ( data ) [EOL] else : [EOL] result = Implementation ( ) . create ( data ) [EOL] return result [EOL] [EOL] def validateId ( self , id ) : [EOL] try : [EOL] int ( id ) [EOL] except Exception : [EOL] return [string] [EOL] [EOL] def validateEdit ( self , data , red_flag_id , field ) : [EOL] if field not in [ [string] , [string] , [string] ] : [EOL] result = [ [number] , [string] , f' [string] { field } [string] ' ] [EOL] [comment] [EOL] elif field not in data : [EOL] result = [ [number] , [string] , f'{ field } [string] ' ] [EOL] [comment] [EOL] elif not data [ field ] : [EOL] result = [ [number] , [string] , f' [string] { field }' ] [EOL] else : [EOL] result = Implementation ( ) . edit ( red_flag_id , data , field ) [EOL] return result [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Type[typing.Union[datetime.datetime,builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0
from typing import Any [EOL] import typing [EOL] from flask_api import FlaskAPI [EOL] from config . config import app_config [EOL] [EOL] [EOL] def create_app ( config_name ) : [EOL] app = FlaskAPI ( __name__ ) [EOL] app . config . from_object ( [string] ) [EOL] app . config . from_object ( app_config [ config_name ] ) [EOL] [EOL] return app [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from flask import jsonify , make_response [EOL] from app . routes import app [EOL] [EOL] [EOL] @ app . errorhandler ( [number] ) def bad_request ( error ) : [EOL] return make_response ( jsonify ( { [string] : [number] , [string] : [string] } ) , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Union , Any , List [EOL] import typing [EOL] import app [EOL] from . models import RedFlag [EOL] import datetime [EOL] [EOL] red_flags = { } [EOL] [EOL] [EOL] class Implementation : [EOL] def create ( self , data ) : [EOL] others = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] red_flag = RedFlag ( ( len ( red_flags ) + [number] ) , data [ [string] ] , data [ [string] ] , data [ [string] ] ) [EOL] red_flag . __setattr__ ( [string] , datetime . datetime . now ( ) ) [EOL] for key in others : [EOL] if key in data : [EOL] red_flag . __setattr__ ( key , data [ key ] ) [EOL] else : [EOL] red_flag . __setattr__ ( key , others [ key ] ) [EOL] red_flags [ str ( red_flag . id ) ] = red_flag . __dict__ [EOL] return [ [number] , [string] , [ { [string] : red_flag . id , [string] : [string] } ] ] [EOL] [EOL] def get_flags ( self ) : [EOL] if not red_flags . keys ( ) : [EOL] res = [ [number] , [string] , [string] ] [EOL] else : [EOL] res = [ [number] , [string] , [ red_flags [ key ] for key in red_flags . keys ( ) ] ] [EOL] return res [EOL] [EOL] def get_flag ( self , red_flag_id ) : [EOL] try : [EOL] red_flag = red_flags [ str ( red_flag_id ) ] [EOL] res = [ [number] , [string] , [ red_flag ] ] [EOL] except Exception as e : [EOL] print ( e ) [EOL] res = [ [number] , [string] , [string] ] [EOL] return res [EOL] [EOL] def delete ( self , red_flag_id ) : [EOL] try : [EOL] red_flags . pop ( str ( red_flag_id ) ) [EOL] res = [ [number] , [string] , [ { [string] : int ( red_flag_id ) , [string] : [string] } ] ] [EOL] except Exception : [EOL] res = [ [number] , [string] , [string] ] [EOL] return res [EOL] [EOL] def edit ( self , red_flag_id , data , field ) : [EOL] try : [EOL] red_flag = red_flags [ str ( red_flag_id ) ] [EOL] if red_flag [ [string] ] in [ [string] , [string] ] : [EOL] return [ [number] , [string] , f' [string] { red_flag [ [string] ] }' ] [EOL] elif field == [string] and [string] in data [ [string] ] : [EOL] d = data [ [string] ] . split ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if [string] not in red_flag [ [string] ] : [EOL] red_flag [ [string] ] += [string] + [string] + f' [string] { d [ [number] ] } [string] { d [ [number] ] }' [EOL] res = [string] [EOL] [comment] [EOL] else : [EOL] red_flag [ [string] ] = red_flag [ [string] ] [ : red_flag [ [string] ] . index ( [string] ) ] + [string] + f' [string] { d [ [number] ] } [string] { d [ [number] ] }' [EOL] res = [string] [EOL] [comment] [EOL] elif field == [string] and [string] not in data [ [string] ] : [EOL] [EOL] res = [ [number] , [string] , [string] ] [EOL] else : [EOL] red_flag [ field ] = data [ field ] [EOL] res = [string] [EOL] if isinstance ( res , str ) : [EOL] result = [ [number] , [string] , [ { [string] : int ( red_flag_id ) , [string] : f'{ res } [string] { field }' } ] ] [EOL] else : [EOL] result = res [EOL] except Exception : [EOL] result = self . get_flag ( red_flag_id ) [EOL] return result [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $app.models.RedFlag$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $app.models.RedFlag$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 $app.models.RedFlag$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $app.models.RedFlag$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $app.models.RedFlag$ 0 0 0 0 0 $app.models.RedFlag$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $app.models.RedFlag$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Union[typing.List[typing.Any],builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Union[typing.List[typing.Any],builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Union[typing.List[typing.Any],builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0
from typing import NoReturn [EOL] import typing [EOL] from functools import wraps [EOL] from flask import request , abort , json [EOL] [EOL] [EOL] def json_required ( f ) : [EOL] from app import errors [EOL] [EOL] @ wraps ( f ) def decorated_function ( * args , ** kwargs ) : [EOL] if request . json : [EOL] v = f ( * args , ** kwargs ) [EOL] else : [EOL] v = abort ( [number] ) [EOL] return v [EOL] return decorated_function [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0