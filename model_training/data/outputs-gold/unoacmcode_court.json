import builtins [EOL] from typing import Callable , Any [EOL] import typing [EOL] import threading [EOL] import os [EOL] import threading [EOL] [EOL] from sqlalchemy import create_engine [EOL] from sqlalchemy . orm import scoped_session , sessionmaker [EOL] from sqlalchemy . ext . declarative import declarative_base [EOL] [EOL] db_uri = os . getenv ( [string] ) or [string] [EOL] engine = create_engine ( db_uri , convert_unicode = True ) [EOL] [EOL] try : [EOL] import uwsgi [EOL] [EOL] scopefunc = uwsgi . worker_id [EOL] except ImportError : [EOL] scopefunc = threading . get_ident [EOL] [EOL] db_session = scoped_session ( sessionmaker ( autocommit = False , autoflush = False , bind = engine ) , scopefunc = scopefunc ) [EOL] Base = declarative_base ( ) [EOL] Base . query = db_session . query_property ( ) [EOL] [EOL] [EOL] def init_db ( ) : [EOL] import model [EOL] [EOL] Base . metadata . create_all ( bind = engine ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable[[],builtins.int]$ 0 0 0 0 0 0 0 0 0 $typing.Callable[[],builtins.int]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Callable[[],builtins.int]$ 0 $typing.Callable[[],builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0
from typing import Any [EOL] import typing [EOL] import datetime [EOL] [EOL] from functools import wraps [EOL] [EOL] import bcrypt [EOL] [EOL] from flask_login import current_user [EOL] from flask_sqlalchemy import BaseQuery [EOL] from flask import current_app , request , redirect [EOL] [EOL] import model [EOL] [EOL] import json [EOL] [EOL] from database import db_session [EOL] [EOL] [EOL] RUN_CACHE_NAME = [string] [EOL] SCORE_CACHE_NAME = [string] [EOL] [EOL] [EOL] class ModelMissingException ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] def hash_password ( plaintext_password ) : [EOL] [docstring] [EOL] num_rounds = [number] [EOL] [EOL] hashed_password = bcrypt . hashpw ( plaintext_password . encode ( [string] ) , bcrypt . gensalt ( num_rounds ) ) [EOL] return hashed_password . decode ( [string] ) [EOL] [EOL] [EOL] def is_password_matching ( plaintext_password , hashed_password ) : [EOL] [docstring] [EOL] return bcrypt . hashpw ( plaintext_password . encode ( ) , hashed_password . encode ( ) ) . decode ( [string] ) == hashed_password [EOL] [EOL] [EOL] def login_required ( role = [string] ) : [EOL] [EOL] def wrapper ( fn ) : [EOL] [EOL] @ wraps ( fn ) def decorated_view ( * args , ** kwargs ) : [EOL] if not current_user . is_authenticated : [EOL] return current_app . login_manager . unauthorized ( ) [EOL] [EOL] role_ids = [ x . name for x in current_user . user_roles ] [EOL] if ( role not in role_ids ) and ( role != [string] ) : [EOL] return current_app . login_manager . unauthorized ( ) [EOL] [EOL] return fn ( * args , ** kwargs ) [EOL] [EOL] return decorated_view [EOL] [EOL] return wrapper [EOL] [EOL] [EOL] def checkbox_result_to_bool ( res ) : [EOL] [docstring] [EOL] if res == [string] : [EOL] return True [EOL] elif res == [string] or res is None : [EOL] return False [EOL] return None [EOL] [EOL] [EOL] def jwt_identity ( payload ) : [EOL] user_id = payload [ [string] ] [EOL] [EOL] return model . User . query . filter_by ( id = user_id ) . first ( ) [EOL] [EOL] [EOL] def set_configuration ( key , val ) : [EOL] config = model . Configuration . query . filter_by ( key = key ) . scalar ( ) [EOL] if not config : [EOL] raise Exception ( [string] . format ( key ) ) [EOL] config . val = str ( val ) [EOL] db_session . commit ( ) [EOL] [EOL] [EOL] def get_configuration ( key ) : [EOL] return model . Configuration . query . filter_by ( key = key ) . scalar ( ) . convertedVal [EOL] [EOL] [EOL] def ssl_required ( fn ) : [EOL] [EOL] @ wraps ( fn ) def decorated_view ( * args , ** kwargs ) : [EOL] if current_app . config . get ( [string] ) : [EOL] if request . is_secure : [EOL] return fn ( * args , ** kwargs ) [EOL] else : [EOL] return redirect ( request . url . replace ( [string] , [string] ) ) [EOL] [EOL] return fn ( * args , ** kwargs ) [EOL] [EOL] return decorated_view [EOL] [EOL] [EOL] def i ( num ) : [EOL] try : [EOL] return int ( num ) [EOL] except Exception : [EOL] return None [EOL] [EOL] [EOL] def paginate ( sa_query , page , per_page = [number] , error_out = True ) : [EOL] sa_query . __class__ = BaseQuery [EOL] return sa_query . paginate ( page , per_page , error_out ) [EOL] [EOL] [EOL] def invalidate_cache_item ( cache_name , key ) : [EOL] [docstring] [EOL] try : [EOL] import uwsgi [EOL] [EOL] uwsgi . cache_del ( str ( key ) , cache_name ) [EOL] except ImportError : [EOL] pass [EOL] [EOL] [EOL] def invalidate_cache ( cache_name ) : [EOL] [docstring] [EOL] try : [EOL] import uwsgi [EOL] [EOL] uwsgi . cache_clear ( cache_name ) [EOL] except ImportError : [EOL] pass [EOL] [EOL] [EOL] def str_to_dt ( s ) : [EOL] [docstring] [EOL] return datetime . datetime . strptime ( s , [string] ) [EOL] [EOL] [EOL] def strs_to_dt ( date_string , time_string ) : [EOL] [docstring] [EOL] return str_to_dt ( date_string + [string] + time_string + [string] ) [EOL] [EOL] [EOL] def time_str_to_dt ( s ) : [EOL] [docstring] [EOL] return datetime . datetime . strptime ( s , [string] ) [EOL] [EOL] [EOL] def dt_to_str ( dt ) : [EOL] [docstring] [EOL] if dt is None : [EOL] return None [EOL] return datetime . datetime . strftime ( dt , [string] ) [EOL] [EOL] [EOL] def dt_to_date_str ( dt ) : [EOL] [docstring] [EOL] if dt is None : [EOL] return None [EOL] return datetime . datetime . strftime ( dt , [string] ) [EOL] [EOL] [EOL] def dt_to_time_str ( dt ) : [EOL] [docstring] [EOL] if dt is None : [EOL] return None [EOL] return datetime . datetime . strftime ( dt , [string] ) [EOL] [EOL] [EOL] def add_versions ( run_output ) : [EOL] versions = json . loads ( run_output ) [EOL] for lang in versions : [EOL] language = model . Language . query . filter_by ( name = lang ) . first ( ) [EOL] language . version = versions [ lang ] [EOL] db_session . commit ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] from setuptools import setup , find_packages [EOL] [EOL] from os import path [EOL] [EOL] SCRIPT_DIR = path . dirname ( path . realpath ( __file__ ) ) [EOL] [EOL] with open ( path . join ( SCRIPT_DIR , [string] ) ) as f : [EOL] requirements = f . read ( ) . splitlines ( ) [EOL] [EOL] setup ( name = [string] , version = [string] , packages = find_packages ( ) , include_package_data = True , zip_safe = False , install_requires = requirements , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0
from typing import Any [EOL] import typing [EOL] import flask [EOL] [docstring] [EOL] import datetime [EOL] import os [EOL] [EOL] import uwsgidecorators [EOL] [EOL] from flask import Flask [EOL] [EOL] import model [EOL] from database import db_session [EOL] [EOL] EXECUTOR_TIMEOUT_MINS = [number] [EOL] [EOL] [EOL] @ uwsgidecorators . timer ( [number] , target = [string] ) def reset_overdue_runs ( signum ) : [EOL] app = Flask ( __name__ ) [EOL] app . config [ [string] ] = os . getenv ( [string] ) or [string] [EOL] app . config [ [string] ] = False [EOL] [EOL] [comment] [EOL] overdue_runs = model . Run . query . filter ( model . Run . finished_execing_time == None ) . filter ( model . Run . started_execing_time != None ) . filter ( ( datetime . datetime . utcnow ( ) - datetime . timedelta ( minutes = EXECUTOR_TIMEOUT_MINS ) ) > model . Run . started_execing_time ) . all ( ) [EOL] [EOL] for run in overdue_runs : [EOL] run . started_execing_time = None [EOL] [EOL] db_session . commit ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import flask [EOL] import sys [EOL] import os [EOL] [EOL] sys . path . append ( os . path . join ( os . path . dirname ( __file__ ) , [string] ) ) [EOL] [EOL] import datetime [EOL] [EOL] import IPython [EOL] [EOL] from flask import Flask [EOL] [EOL] import model [EOL] from database import db_session [EOL] [EOL] app = Flask ( __name__ ) [EOL] [EOL] app . config [ [string] ] = os . getenv ( [string] ) or [string] [EOL] app . config [ [string] ] = False [EOL] app . config [ [string] ] = model [EOL] [EOL] [EOL] def _main ( ) : [EOL] with app . app_context ( ) : [EOL] IPython . embed ( ) [EOL] [EOL] [EOL] def submit_fake_run ( username ) : [EOL] lang = model . Language . query . filter_by ( name = [string] ) . scalar ( ) [EOL] problem = model . Problem . query . first ( ) [EOL] contest = model . Contest . query . first ( ) [EOL] user = model . User . query . filter_by ( username = username ) . scalar ( ) [EOL] [EOL] run_input = problem . secret_input [EOL] run_output = problem . secret_output [EOL] is_submission = True [EOL] source_code = [string] [EOL] [EOL] run = model . Run ( user , contest , lang , problem , datetime . datetime . utcnow ( ) , source_code , run_input , run_output , is_submission , ) [EOL] [EOL] model . db . session . add ( run ) [EOL] model . db . session . commit ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] _main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Dict , Union , Any , List [EOL] import code_court [EOL] import typing [EOL] import requests [EOL] import logging [EOL] import random [EOL] import sys [EOL] import threading [EOL] import time [EOL] [EOL] from urllib . parse import urljoin [EOL] [EOL] import requests [EOL] [EOL] BASE_URL = [string] [EOL] ADMIN_PASSWORD = [string] [EOL] [EOL] logging . basicConfig ( level = logging . INFO ) [EOL] [EOL] class LoadTester : [EOL] def run_clients ( self , n = [number] ) : [EOL] for i in range ( n ) : [EOL] print ( [string] . format ( i ) ) [EOL] FakeUser ( ) . start ( ) [EOL] time . sleep ( [number] ) [EOL] [EOL] while True : [EOL] time . sleep ( [number] ) [EOL] [EOL] [EOL] class FakeUser : [EOL] PROBLEMS_INTERVAL = [number] [EOL] SCORES_INTERVAL = [number] [EOL] CONTEST_INTERVAL = [number] [EOL] SUBMIT_RUN_INTERVAL = [number] [EOL] [EOL] def __init__ ( self ) : [EOL] self . username , self . password = self . create_user ( ) [EOL] self . login_token = self . get_login_token ( self . username , self . password ) [EOL] self . user_info = self . get_user_info ( ) [EOL] self . contest_info = self . get_contest_info ( ) [EOL] [EOL] def start ( self ) : [EOL] def _scores ( ) : [EOL] time . sleep ( random . uniform ( [number] , self . SCORES_INTERVAL ) ) [EOL] while True : [EOL] self . get_scores ( ) [EOL] time . sleep ( self . SCORES_INTERVAL ) [EOL] threading . Thread ( target = _scores ) . start ( ) [EOL] [EOL] def _problems ( ) : [EOL] time . sleep ( random . uniform ( [number] , self . PROBLEMS_INTERVAL ) ) [EOL] while True : [EOL] self . get_problems ( ) [EOL] time . sleep ( self . PROBLEMS_INTERVAL ) [EOL] threading . Thread ( target = _problems ) . start ( ) [EOL] [EOL] def _contest ( ) : [EOL] time . sleep ( random . uniform ( [number] , self . CONTEST_INTERVAL ) ) [EOL] while True : [EOL] self . get_contest_info ( ) [EOL] time . sleep ( self . CONTEST_INTERVAL ) [EOL] threading . Thread ( target = _contest ) . start ( ) [EOL] [EOL] def _runs ( ) : [EOL] time . sleep ( random . uniform ( [number] , self . SUBMIT_RUN_INTERVAL ) ) [EOL] while True : [EOL] self . submit_run ( ) [EOL] time . sleep ( self . SUBMIT_RUN_INTERVAL ) [EOL] threading . Thread ( target = _runs ) . start ( ) [EOL] [EOL] def _get ( self , url ) : [EOL] start_time = millis ( ) [EOL] headers = { [string] : [string] . format ( self . login_token ) } [EOL] try : [EOL] r = requests . get ( url , headers = headers ) [EOL] except requests . exceptions . ConnectionError : [EOL] logging . error ( [string] , url ) [EOL] return None [EOL] [EOL] if r . status_code != [number] : [EOL] logging . error ( [string] , r . status_code , url , r . text ) [EOL] [EOL] _log_timing ( url , start_time ) [EOL] [EOL] return r [EOL] [EOL] def _post ( self , url , json , login_token = None ) : [EOL] start_time = millis ( ) [EOL] chosen_login_token = login_token if login_token else self . login_token [EOL] headers = { [string] : [string] . format ( chosen_login_token ) } [EOL] [EOL] try : [EOL] r = requests . post ( url , json = json , headers = headers ) [EOL] except requests . exceptions . ConnectionError : [EOL] logging . error ( [string] , url ) [EOL] return None [EOL] [EOL] if r . status_code != [number] : [EOL] logging . error ( [string] , r . status_code , url , r . text ) [EOL] [EOL] _log_timing ( url , start_time ) [EOL] [EOL] return r [EOL] [EOL] def _get_api ( self , part ) : [EOL] url = urljoin ( BASE_URL , part ) [EOL] r = self . _get ( url ) [EOL] if r : [EOL] return r . json ( ) [EOL] else : [EOL] return None [EOL] [EOL] def _post_api ( self , part , json , login_token = None ) : [EOL] url = urljoin ( BASE_URL , part ) [EOL] r = self . _post ( url , json , login_token ) [EOL] if r : [EOL] return r . json ( ) [EOL] else : [EOL] return None [EOL] [EOL] def loop ( self ) : [EOL] while True : [EOL] self . get_scores ( ) [EOL] self . get_problems ( ) [EOL] self . submit_run ( ) [EOL] time . sleep ( [number] ) [EOL] [EOL] def submit_run ( self ) : [EOL] programs = [ [string] , [string] , [string] , ] [EOL] data = dict ( lang = [string] , problem_slug = [string] , source_code = random . choice ( programs ) , is_submission = True , user_test_input = [string] , ) [EOL] self . _post_api ( [string] , data ) [EOL] [EOL] def get_scores ( self ) : [EOL] contest_id = self . contest_info [ [string] ] [EOL] return self . _get_api ( [string] . format ( contest_id ) ) [EOL] [EOL] def get_problems ( self ) : [EOL] user_id = self . user_info [ [string] ] [EOL] return self . _get_api ( [string] . format ( user_id ) ) [EOL] [EOL] def get_contest_info ( self ) : [EOL] return self . _get_api ( [string] ) [EOL] [EOL] def get_user_info ( self ) : [EOL] return self . _get_api ( [string] ) [EOL] [EOL] def create_user ( self ) : [EOL] admin_login_token = self . get_login_token ( [string] , ADMIN_PASSWORD ) [EOL] user_id = random . randint ( [number] , [number] ) [EOL] data = dict ( username = str ( user_id ) , name = user_id , password = [string] , contest_name = [string] , ) [EOL] self . _post_api ( [string] , data , login_token = admin_login_token ) [EOL] return ( data [ [string] ] , data [ [string] ] ) [EOL] [EOL] def get_login_token ( self , username , password ) : [EOL] url = urljoin ( BASE_URL , [string] ) [EOL] data = dict ( username = username , password = password , ) [EOL] [EOL] r = requests . post ( url , json = data ) [EOL] if r . status_code != [number] : [EOL] raise Exception ( [string] ) [EOL] [EOL] return r . json ( ) . get ( [string] ) [EOL] [EOL] [EOL] def millis ( ) : [EOL] return int ( round ( time . time ( ) * [number] ) ) [EOL] [EOL] [EOL] class bcolors : [EOL] HEADER = [string] [EOL] OKBLUE = [string] [EOL] OKGREEN = [string] [EOL] WARNING = [string] [EOL] FAIL = [string] [EOL] ENDC = [string] [EOL] BOLD = [string] [EOL] UNDERLINE = [string] [EOL] [EOL] [EOL] def _log_timing ( url , start_time ) : [EOL] time_taken = millis ( ) - start_time [EOL] time_taken_str = [string] . format ( time_taken ) [EOL] if time_taken > [number] : [EOL] time_taken_str = bcolors . FAIL + time_taken_str + bcolors . ENDC [EOL] elif time_taken > [number] : [EOL] time_taken_str = bcolors . WARNING + time_taken_str + bcolors . ENDC [EOL] logging . info ( [string] , url , time_taken_str ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] try : [EOL] load_tester = LoadTester ( ) [EOL] load_tester . run_clients ( int ( sys . argv [ [number] ] ) ) [EOL] except KeyboardInterrupt : [EOL] sys . exit ( [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $code_court.courthouse.utils.load_test.LoadTester$ 0 0 0 0 0 $code_court.courthouse.utils.load_test.LoadTester$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any , List [EOL] import typing [EOL] [docstring] [EOL] [EOL] import json [EOL] import subprocess [EOL] [EOL] [EOL] def main ( ) : [EOL] version_commands = { [string] : [ [string] , [string] ] , [string] : [ [string] , [string] ] , [string] : [ [string] , [string] ] , [string] : [ [string] , [string] ] , [string] : [ [string] , [string] ] , [string] : [ [string] , [string] ] , [string] : [ [string] , [string] ] , [string] : [ [string] , [string] ] , [string] : [ [string] , [string] ] , [string] : [ [string] , [string] ] , [string] : [ [string] , [string] ] , [string] : [ [string] , [string] ] , } [EOL] [EOL] versions = { } [EOL] [EOL] for lang , command in version_commands . items ( ) : [EOL] if ( lang == [string] or lang == [string] or lang == [string] or lang == [string] or lang == [string] ) : [EOL] versions [ lang ] = get_version ( subprocess . check_output ( command , stderr = subprocess . STDOUT ) . decode ( [string] ) . strip ( ) ) [EOL] else : [EOL] versions [ lang ] = subprocess . check_output ( command , stderr = subprocess . STDOUT ) . decode ( [string] ) . strip ( ) [EOL] [EOL] print ( json . dumps ( versions ) ) [EOL] [EOL] [EOL] def get_version ( string ) : [EOL] i = [number] [EOL] while string [ i ] . isdigit ( ) == False : [EOL] i += [number] [EOL] for j in range ( i , len ( string ) ) : [EOL] if ( string [ j ] == [string] or string [ j ] == [string] or string [ j ] == [string] or string [ j ] == [string] ) : [EOL] break [EOL] return string [ i : j ] . strip ( ) [EOL] [EOL] [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import enum [EOL] import datetime [EOL] import markupsafe [EOL] import flask [EOL] import collections [EOL] [EOL] from markdown import markdown [EOL] from enum import Enum [EOL] [EOL] import util [EOL] [EOL] import datetime [EOL] [EOL] import model [EOL] from database import db_session [EOL] [EOL] from flask_login import current_user [EOL] from flask import abort , Blueprint , current_app , render_template , request , Markup [EOL] [EOL] defendant = Blueprint ( [string] , __name__ , template_folder = [string] ) [EOL] [EOL] [EOL] @ defendant . route ( [string] , methods = [ [string] ] ) def index ( ) : [EOL] [docstring] [EOL] problems = model . Problem . query . all ( ) [EOL] [EOL] return render_template ( [string] , problems = problems ) [EOL] [EOL] [EOL] RunState = Enum ( [string] , [string] ) [EOL] [EOL] [EOL] @ defendant . route ( [string] , methods = [ [string] ] ) @ defendant . route ( [string] , methods = [ [string] ] ) def problem ( problem_id ) : [EOL] problems = model . Problem . query . filter_by ( id = problem_id ) . all ( ) [EOL] if len ( problems ) == [number] : [EOL] current_app . logger . info ( [string] , problem_id ) [EOL] abort ( [number] ) [EOL] problem = problems [ [number] ] [EOL] [EOL] markdown_statement = Markup ( markdown ( problem . problem_statement ) ) [EOL] [EOL] source_code = None [EOL] if request . method == [string] : [EOL] source_code = submit_code ( problem ) [EOL] [EOL] return render_template ( [string] , problem = problem , markdown_statement = markdown_statement , source_code = source_code , ) [EOL] [EOL] [EOL] @ defendant . route ( [string] , methods = [ [string] ] ) def submissions ( ) : [EOL] submissions = model . Run . query . filter_by ( user = current_user , is_submission = True ) . order_by ( model . Run . submit_time . desc ( ) ) . all ( ) [EOL] [EOL] return render_template ( [string] , submissions = submissions ) [EOL] [EOL] [EOL] def submit_code ( problem ) : [EOL] [docstring] [EOL] source_code = request . form . get ( [string] ) [EOL] if source_code is None : [EOL] [comment] [EOL] current_app . logger . info ( [string] ) [EOL] abort ( [number] ) [EOL] [EOL] current_time = datetime . datetime . utcnow ( ) [EOL] [EOL] [comment] [EOL] test_user = model . User . query . filter_by ( username = [string] ) . one ( ) [EOL] test_contest = model . Contest . query . filter_by ( name = [string] ) . one ( ) [EOL] python = model . Language . query . filter_by ( name = [string] ) . one ( ) [EOL] [EOL] button_action = request . form . get ( [string] ) [EOL] is_submission = button_action == [string] and not button_action == [string] [EOL] [EOL] run = model . Run ( test_user , test_contest , python , problem , current_time , source_code , problem . secret_input , problem . secret_output , is_submission , ) [EOL] [EOL] db_session . add ( run ) [EOL] db_session . commit ( ) [EOL] [EOL] return source_code [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $enum.Enum$ 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint
from typing import Any [EOL] import typing [EOL] import flask [EOL] [docstring] [EOL] import util [EOL] [EOL] from flask_login import login_user , logout_user [EOL] from sqlalchemy . orm . exc import NoResultFound [EOL] [EOL] import model [EOL] [EOL] from flask import abort , Blueprint , redirect , render_template , request , flash [EOL] [EOL] auth = Blueprint ( [string] , __name__ , template_folder = [string] ) [EOL] [EOL] [EOL] @ auth . route ( [string] , methods = [ [string] ] ) @ util . ssl_required def login_view ( ) : [EOL] [docstring] [EOL] return render_template ( [string] ) [EOL] [EOL] [EOL] @ auth . route ( [string] , methods = [ [string] ] ) @ util . ssl_required def login_submit ( ) : [EOL] [docstring] [EOL] if [string] not in request . form : [EOL] flash ( [string] , [string] ) [EOL] abort ( [number] ) [EOL] [EOL] if [string] not in request . form : [EOL] flash ( [string] , [string] ) [EOL] abort ( [number] ) [EOL] [EOL] username = request . form . get ( [string] ) [EOL] password = request . form . get ( [string] ) [EOL] [EOL] try : [EOL] user = model . User . query . filter_by ( username = username ) . one ( ) [EOL] except NoResultFound as e : [EOL] flash ( [string] , [string] ) [EOL] abort ( [number] ) [EOL] [EOL] is_matching = user . verify_password ( password ) [EOL] if is_matching : [EOL] flash ( [string] , [string] ) [EOL] login_user ( user ) [EOL] return redirect ( [string] ) [EOL] else : [EOL] flash ( [string] , [string] ) [EOL] abort ( [number] ) [EOL] [EOL] [EOL] @ auth . route ( [string] , methods = [ [string] ] ) def profile ( ) : [EOL] return render_template ( [string] ) [EOL] [EOL] [EOL] @ auth . route ( [string] , methods = [ [string] ] ) def logout_submit ( ) : [EOL] [docstring] [EOL] logout_user ( ) [EOL] return redirect ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import flask [EOL] from flask import Blueprint , send_from_directory [EOL] [EOL] main = Blueprint ( [string] , __name__ , template_folder = [string] ) [EOL] [EOL] [EOL] @ main . route ( [string] ) def send_flask_static ( path ) : [EOL] return send_from_directory ( [string] , path ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Match , Dict , Any , Optional [EOL] import typing [EOL] import zipfile [EOL] import flask [EOL] import re [EOL] import zipfile [EOL] [EOL] import util [EOL] [EOL] from sqlalchemy . exc import IntegrityError [EOL] [EOL] from flask import ( abort , Blueprint , current_app , render_template , redirect , request , url_for , flash , ) [EOL] [EOL] import model [EOL] from database import db_session [EOL] [EOL] problems = Blueprint ( [string] , __name__ , template_folder = [string] ) [EOL] [EOL] [EOL] @ problems . route ( [string] , methods = [ [string] ] , defaults = { [string] : [number] } ) @ problems . route ( [string] , methods = [ [string] ] ) @ util . login_required ( [string] ) def problems_view ( page ) : [EOL] [docstring] [EOL] problems = util . paginate ( model . Problem . query , page , [number] ) [EOL] [EOL] return render_template ( [string] , problems = problems ) [EOL] [EOL] [EOL] def ini_to_dict ( raw_ini ) : [EOL] ini = { } [EOL] for line in raw_ini . split ( [string] ) : [EOL] if line . strip ( ) == [string] : [EOL] continue [EOL] [EOL] keyval = re . match ( [string] , line ) [EOL] if keyval is None : [EOL] keyval = re . match ( [string] , line ) [EOL] [EOL] key , val = keyval . groups ( ) [EOL] [EOL] ini [ key ] = val [EOL] return ini [EOL] [EOL] [EOL] def extract_problem_data ( problem_zip_file ) : [EOL] problem_zip_file = zipfile . ZipFile ( problem_zip_file ) [EOL] raw_ini = problem_zip_file . read ( [string] ) . decode ( [string] ) [EOL] ini = ini_to_dict ( raw_ini ) [EOL] data = { [string] : ini [ [string] ] , [string] : ini [ [string] ] , [string] : problem_zip_file . read ( [string] ) . decode ( [string] ) , [string] : problem_zip_file . read ( [string] ) . decode ( [string] ) , [string] : problem_zip_file . read ( [string] ) . decode ( [string] ) , [string] : problem_zip_file . read ( [string] ) . decode ( [string] ) , [string] : problem_zip_file . read ( [string] ) . decode ( [string] ) , } [EOL] return data [EOL] [EOL] [EOL] @ problems . route ( [string] , methods = [ [string] ] ) @ util . login_required ( [string] ) def problems_batch_upload ( ) : [EOL] [docstring] [EOL] if request . method == [string] : [comment] [EOL] input_output = model . ProblemType . query . filter_by ( name = [string] ) . one ( ) [EOL] [EOL] problem_zip_files = request . files . getlist ( [string] ) [EOL] [EOL] for problem_zip_file in problem_zip_files : [EOL] data = extract_problem_data ( problem_zip_file ) [EOL] [EOL] if is_dup_problem_slug ( data [ [string] ] ) : [comment] [EOL] problem = model . Problem . query . filter_by ( slug = data [ [string] ] ) . one ( ) [EOL] problem . problem_type = input_output [EOL] problem . name = data [ [string] ] [EOL] problem . problem_statement = data [ [string] ] [EOL] problem . sample_input = data [ [string] ] [EOL] problem . sample_output = data [ [string] ] [EOL] problem . secret_input = data [ [string] ] [EOL] problem . secret_output = data [ [string] ] [EOL] else : [comment] [EOL] problem = model . Problem ( problem_type = input_output , slug = data [ [string] ] , name = data [ [string] ] , problem_statement = data [ [string] ] , sample_input = data [ [string] ] , sample_output = data [ [string] ] , secret_input = data [ [string] ] , secret_output = data [ [string] ] , ) [EOL] db_session . add ( problem ) [EOL] [EOL] db_session . commit ( ) [EOL] [EOL] return redirect ( url_for ( [string] ) ) [EOL] else : [EOL] current_app . logger . info ( [string] , request . method ) [EOL] abort ( [number] ) [EOL] [EOL] [EOL] @ problems . route ( [string] , methods = [ [string] , [string] ] , defaults = { [string] : None } ) @ problems . route ( [string] , methods = [ [string] ] ) @ util . login_required ( [string] ) def problems_add ( problem_id ) : [EOL] [docstring] [EOL] if request . method == [string] : [comment] [EOL] return display_problem_add_form ( problem_id ) [EOL] elif request . method == [string] : [comment] [EOL] return add_problem ( ) [EOL] else : [EOL] current_app . logger . info ( [string] , request . method ) [EOL] abort ( [number] ) [EOL] [EOL] [EOL] @ problems . route ( [string] , methods = [ [string] ] ) @ util . login_required ( [string] ) def problems_del ( problem_id ) : [EOL] [docstring] [EOL] problem = model . Problem . query . filter_by ( id = int ( problem_id ) ) . scalar ( ) [EOL] if problem is None : [EOL] error = [string] . format ( problem . slug ) [EOL] current_app . logger . info ( error ) [EOL] flash ( error , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] try : [EOL] db_session . delete ( problem ) [EOL] db_session . commit ( ) [EOL] flash ( [string] . format ( problem . slug ) , [string] ) [EOL] except IntegrityError : [EOL] db_session . rollback ( ) [EOL] error = [string] . format ( problem . slug ) [EOL] current_app . logger . info ( error ) [EOL] flash ( error , [string] ) [EOL] [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] [EOL] def add_problem ( ) : [EOL] [docstring] [EOL] problem_type_id = request . form . get ( [string] ) [EOL] problem_type = model . ProblemType . query . filter_by ( id = int ( problem_type_id ) ) . one ( ) [EOL] slug = request . form . get ( [string] ) [EOL] name = request . form . get ( [string] ) [EOL] is_enabled = request . form . get ( [string] ) [EOL] problem_statement = request . form . get ( [string] ) [EOL] sample_input = request . form . get ( [string] ) [EOL] sample_output = request . form . get ( [string] ) [EOL] secret_input = request . form . get ( [string] ) [EOL] secret_output = request . form . get ( [string] ) [EOL] [EOL] if problem_type is None : [EOL] error = [string] [EOL] current_app . logger . info ( error ) [EOL] flash ( error , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] if name is None : [EOL] error = [string] [EOL] current_app . logger . info ( error ) [EOL] flash ( error , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] is_enabled_bool = util . checkbox_result_to_bool ( is_enabled ) [EOL] if is_enabled_bool is None : [EOL] error = [string] . format ( name ) [EOL] current_app . logger . info ( error ) [EOL] flash ( error , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] if slug is None : [EOL] error = [string] [EOL] current_app . logger . info ( error ) [EOL] flash ( error , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] problem_id = request . form . get ( [string] ) [EOL] if problem_id : [comment] [EOL] problem = model . Problem . query . filter_by ( id = int ( problem_id ) ) . one ( ) [EOL] problem . problem_type = problem_type [EOL] problem . slug = slug [EOL] problem . name = name [EOL] problem . is_enabled = is_enabled_bool [EOL] problem . problem_statement = problem_statement [EOL] problem . sample_input = sample_input [EOL] problem . sample_output = sample_output [EOL] problem . secret_input = secret_input [EOL] problem . secret_output = secret_output [EOL] else : [comment] [EOL] [comment] [EOL] if is_dup_problem_slug ( slug ) : [EOL] error = [string] . format ( slug ) [EOL] current_app . logger . info ( error ) [EOL] flash ( error , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] problem = model . Problem ( problem_type , slug , name , problem_statement , sample_input , sample_output , secret_input , secret_output , ) [EOL] problem . is_enabled = is_enabled_bool [EOL] db_session . add ( problem ) [EOL] [EOL] db_session . commit ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] util . invalidate_cache ( util . RUN_CACHE_NAME ) [EOL] [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] [EOL] def display_problem_add_form ( problem_id ) : [EOL] [docstring] [EOL] problemtypes = model . ProblemType . query . all ( ) [EOL] [EOL] if problem_id is None : [comment] [EOL] return render_template ( [string] , action_label = [string] , problem = None , problemtypes = problemtypes , ) [EOL] else : [comment] [EOL] problem = model . Problem . query . filter_by ( id = int ( problem_id ) ) . scalar ( ) [EOL] if problem is None : [EOL] error = [string] . format ( problem_id ) [EOL] current_app . logger . info ( error ) [EOL] flash ( error , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] return render_template ( [string] , action_label = [string] , problem = problem , problemtypes = problemtypes , ) [EOL] [EOL] [EOL] [comment] [EOL] def is_dup_problem_slug ( slug ) : [EOL] [docstring] [EOL] dup_problem = model . Problem . query . filter_by ( slug = slug ) . scalar ( ) [EOL] if dup_problem : [EOL] return True [EOL] else : [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint
from typing import Any [EOL] import typing [EOL] import flask [EOL] import util [EOL] [EOL] from flask import ( abort , Blueprint , current_app , render_template , redirect , request , url_for , flash , ) [EOL] [EOL] import model [EOL] from database import db_session [EOL] [EOL] configurations = Blueprint ( [string] , __name__ , template_folder = [string] ) [EOL] [EOL] [EOL] @ configurations . route ( [string] , methods = [ [string] , [string] ] , defaults = { [string] : [number] } ) @ configurations . route ( [string] , methods = [ [string] , [string] ] ) @ util . login_required ( [string] ) def configurations_view ( page ) : [EOL] [docstring] [EOL] config_query = model . Configuration . query [EOL] [EOL] configs = util . paginate ( config_query . order_by ( model . Configuration . category . asc ( ) ) , page , [number] ) [EOL] [EOL] return render_template ( [string] , configs = configs ) [EOL] [EOL] [EOL] @ configurations . route ( [string] , methods = [ [string] , [string] ] , defaults = { [string] : None } ) @ configurations . route ( [string] , methods = [ [string] ] ) @ util . login_required ( [string] ) def configurations_add ( config_id ) : [EOL] [docstring] [EOL] if request . method == [string] : [comment] [EOL] return display_config_add_form ( config_id ) [EOL] elif request . method == [string] : [comment] [EOL] return add_config ( ) [EOL] else : [EOL] current_app . logger . info ( [string] , request . method ) [EOL] abort ( [number] ) [EOL] [EOL] [EOL] @ configurations . route ( [string] , methods = [ [string] ] ) @ util . login_required ( [string] ) def configurations_del ( config_id ) : [EOL] [docstring] [EOL] config = model . Configuration . query . filter_by ( id = int ( config_id ) ) . scalar ( ) [EOL] [EOL] if config is None : [EOL] error = [string] . format ( config_id ) [EOL] current_app . logger . info ( error ) [EOL] flash ( error , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] db_session . delete ( config ) [EOL] db_session . commit ( ) [EOL] [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] [EOL] def add_config ( ) : [EOL] [docstring] [EOL] config_id = request . form . get ( [string] ) [EOL] key = request . form . get ( [string] ) [EOL] val = request . form . get ( [string] ) [EOL] valType = request . form . get ( [string] ) [EOL] category = request . form . get ( [string] ) [EOL] [EOL] if config_id : [comment] [EOL] config = model . Configuration . query . filter_by ( id = int ( config_id ) ) . one ( ) [EOL] config . key = key [EOL] config . val = val [EOL] config . valType = valType [EOL] config . category = category [EOL] else : [comment] [EOL] if is_dup_config_key ( key ) : [EOL] error = [string] . format ( key ) [EOL] current_app . logger . info ( error ) [EOL] flash ( error , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] config = model . Configuration ( key = key , val = val , valType = valType , category = category ) [EOL] db_session . add ( config ) [EOL] [EOL] db_session . commit ( ) [EOL] [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] [EOL] def display_config_add_form ( config_id ) : [EOL] [docstring] [EOL] if config_id is None : [comment] [EOL] return render_template ( [string] , action_label = [string] , config = None ) [EOL] else : [comment] [EOL] config = model . Configuration . query . filter_by ( id = int ( config_id ) ) . scalar ( ) [EOL] if config is None : [EOL] error = [string] . format ( config_id ) [EOL] current_app . logger . info ( error ) [EOL] flash ( error , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] return render_template ( [string] , action_label = [string] , config = config ) [EOL] [EOL] [EOL] [comment] [EOL] def is_dup_config_key ( key ) : [EOL] [docstring] [EOL] dup_config = model . Configuration . query . filter_by ( key = key ) . scalar ( ) [EOL] if dup_config : [EOL] return True [EOL] else : [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import flask [EOL] import util [EOL] [EOL] from sqlalchemy . exc import IntegrityError [EOL] [EOL] from flask import ( abort , Blueprint , current_app , redirect , render_template , request , url_for , flash , ) [EOL] [EOL] import model [EOL] from database import db_session [EOL] [EOL] languages = Blueprint ( [string] , __name__ , template_folder = [string] ) [EOL] [EOL] [EOL] class ModelMissingException ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] @ languages . route ( [string] , methods = [ [string] ] , defaults = { [string] : [number] } ) @ languages . route ( [string] , methods = [ [string] ] ) @ util . login_required ( [string] ) def languages_view ( page ) : [EOL] [docstring] [EOL] languages = util . paginate ( model . Language . query , page , [number] ) [EOL] [EOL] return render_template ( [string] , languages = languages ) [EOL] [EOL] [EOL] @ languages . route ( [string] , methods = [ [string] , [string] ] , defaults = { [string] : None } ) @ languages . route ( [string] , methods = [ [string] ] ) @ util . login_required ( [string] ) def languages_add ( lang_id ) : [EOL] [docstring] [EOL] if request . method == [string] : [comment] [EOL] return display_lang_add_form ( lang_id ) [EOL] elif request . method == [string] : [comment] [EOL] return add_lang ( ) [EOL] else : [EOL] current_app . logger . info ( [string] , request . method ) [EOL] abort ( [number] ) [EOL] [EOL] [EOL] @ languages . route ( [string] , methods = [ [string] ] ) @ util . login_required ( [string] ) def languages_del ( lang_id ) : [EOL] [docstring] [EOL] lang = model . Language . query . filter_by ( id = util . i ( lang_id ) ) . scalar ( ) [EOL] if lang is None : [EOL] error = [string] . format ( lang_id ) [EOL] current_app . logger . info ( error ) [EOL] flash ( error , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] try : [EOL] db_session . delete ( lang ) [EOL] db_session . commit ( ) [EOL] flash ( [string] . format ( lang . name ) , [string] ) [EOL] except IntegrityError : [EOL] db_session . rollback ( ) [EOL] error = [string] . format ( lang_id ) [EOL] current_app . logger . info ( error ) [EOL] flash ( error , [string] ) [EOL] [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] [EOL] def add_lang ( ) : [EOL] [docstring] [EOL] name = request . form . get ( [string] ) [EOL] syntax_mode = request . form . get ( [string] ) [EOL] is_enabled = request . form . get ( [string] ) [EOL] run_script = request . form . get ( [string] , [string] ) . replace ( [string] , [string] ) [EOL] default_template = request . form . get ( [string] , [string] ) . replace ( [string] , [string] ) [EOL] [EOL] if name is None : [EOL] error = [string] [EOL] current_app . logger . info ( error ) [EOL] flash ( error , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] if syntax_mode is None : [EOL] error = [string] [EOL] current_app . logger . info ( error ) [EOL] flash ( error , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] [comment] [EOL] is_enabled_bool = util . checkbox_result_to_bool ( is_enabled ) [EOL] if is_enabled_bool is None : [EOL] error = [string] . format ( name ) [EOL] current_app . logger . info ( error ) [EOL] flash ( error , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] lang_id = util . i ( request . form . get ( [string] ) ) [EOL] if lang_id : [comment] [EOL] lang = model . Language . query . filter_by ( id = lang_id ) . one ( ) [EOL] lang . name = name [EOL] lang . syntax_mode = syntax_mode [EOL] lang . is_enabled = is_enabled_bool [EOL] lang . run_script = run_script [EOL] lang . default_template = default_template [EOL] else : [comment] [EOL] if is_dup_lang_name ( name ) : [EOL] error = [string] . format ( name ) [EOL] current_app . logger . info ( error ) [EOL] flash ( error , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] lang = model . Language ( name , syntax_mode , is_enabled_bool , run_script , default_template ) [EOL] db_session . add ( lang ) [EOL] [EOL] db_session . commit ( ) [EOL] [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] [EOL] def display_lang_add_form ( lang_id ) : [EOL] [docstring] [EOL] if lang_id is None : [comment] [EOL] return render_template ( [string] , action_label = [string] ) [EOL] else : [comment] [EOL] lang = model . Language . query . filter_by ( id = lang_id ) . scalar ( ) [EOL] if lang is None : [EOL] error = [string] . format ( lang_id ) [EOL] current_app . logger . info ( error ) [EOL] flash ( error , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] return render_template ( [string] , action_label = [string] , lang_id = lang_id , name = lang . name , syntax_mode = lang . syntax_mode , is_enabled = lang . is_enabled , run_script = lang . run_script , default_template = lang . default_template , ) [EOL] [EOL] [EOL] [comment] [EOL] def is_dup_lang_name ( name ) : [EOL] [docstring] [EOL] dup_lang = model . Language . query . filter_by ( name = name ) . scalar ( ) [EOL] if dup_lang : [EOL] return True [EOL] else : [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import flask [EOL] import util [EOL] [EOL] from sqlalchemy . exc import IntegrityError [EOL] [EOL] from flask import ( abort , Blueprint , current_app , render_template , redirect , request , url_for , flash , ) [EOL] [EOL] import model [EOL] from database import db_session [EOL] [EOL] contests = Blueprint ( [string] , __name__ , template_folder = [string] ) [EOL] [EOL] [EOL] @ contests . route ( [string] , methods = [ [string] ] , defaults = { [string] : [number] } ) @ contests . route ( [string] , methods = [ [string] ] ) @ util . login_required ( [string] ) def contests_view ( page ) : [EOL] [docstring] [EOL] contests = util . paginate ( model . Contest . query , page , [number] ) [EOL] [EOL] return render_template ( [string] , contests = contests ) [EOL] [EOL] [EOL] @ contests . route ( [string] , methods = [ [string] , [string] ] , defaults = { [string] : None } ) @ contests . route ( [string] , methods = [ [string] ] ) @ util . login_required ( [string] ) def contests_add ( contest_id ) : [EOL] [docstring] [EOL] if request . method == [string] : [comment] [EOL] return display_contest_add_form ( contest_id ) [EOL] elif request . method == [string] : [comment] [EOL] return add_contest ( ) [EOL] else : [EOL] current_app . logger . info ( [string] , request . method ) [EOL] abort ( [number] ) [EOL] [EOL] [EOL] @ contests . route ( [string] , methods = [ [string] ] ) @ util . login_required ( [string] ) def contests_del ( contest_id ) : [EOL] [docstring] [EOL] contest = model . Contest . query . filter_by ( id = int ( contest_id ) ) . scalar ( ) [EOL] if contest is None : [EOL] error = [string] . format ( contest . name ) [EOL] current_app . logger . info ( error ) [EOL] flash ( error , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] try : [EOL] db_session . delete ( contest ) [EOL] db_session . commit ( ) [EOL] flash ( [string] . format ( contest . name ) , [string] ) [EOL] except IntegrityError : [EOL] db_session . rollback ( ) [EOL] error = [string] . format ( contest . name ) [EOL] current_app . logger . info ( error ) [EOL] flash ( error , [string] ) [EOL] [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] [EOL] def users_from_usernames ( usernames , model ) : [EOL] users = [ ] [EOL] [EOL] for username in usernames : [EOL] db_user = model . User . query . filter_by ( username = username ) . scalar ( ) [EOL] if db_user : [EOL] users . append ( db_user ) [EOL] return users [EOL] [EOL] [EOL] def problems_from_slugs ( problem_slugs , model ) : [EOL] problems = [ ] [EOL] [EOL] for slug in problem_slugs : [EOL] db_problem = model . Problem . query . filter_by ( slug = slug ) . scalar ( ) [EOL] if db_problem : [EOL] problems . append ( db_problem ) [EOL] return problems [EOL] [EOL] [EOL] def add_contest ( ) : [EOL] [docstring] [EOL] name = request . form . get ( [string] ) [EOL] start_date = request . form . get ( [string] ) [EOL] start_time = request . form . get ( [string] ) [EOL] end_date = request . form . get ( [string] ) [EOL] end_time = request . form . get ( [string] ) [EOL] is_public = request . form . get ( [string] ) [EOL] user_usernames = request . form . get ( [string] ) [EOL] problem_slugs = request . form . get ( [string] ) [EOL] [EOL] if name is None : [EOL] error = [string] [EOL] current_app . logger . info ( error ) [EOL] flash ( error , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] [comment] [EOL] is_public_bool = util . checkbox_result_to_bool ( is_public ) [EOL] if is_public_bool is None : [EOL] error = [string] . format ( name ) [EOL] current_app . logger . info ( error ) [EOL] flash ( error , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] contest_id = util . i ( request . form . get ( [string] ) ) [EOL] if contest_id : [comment] [EOL] contest = model . Contest . query . filter_by ( id = int ( contest_id ) ) . one ( ) [EOL] contest . name = name [EOL] contest . is_public = is_public_bool [EOL] [EOL] contest . start_time = util . strs_to_dt ( start_date , start_time ) [EOL] contest . end_time = util . strs_to_dt ( end_date , end_time ) [EOL] [EOL] contest . users = users_from_usernames ( user_usernames . split ( ) , model ) [EOL] contest . problems = problems_from_slugs ( problem_slugs . split ( ) , model ) [EOL] else : [comment] [EOL] if is_dup_contest_name ( name ) : [EOL] error = [string] . format ( name ) [EOL] current_app . logger . info ( error ) [EOL] flash ( error , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] contest = model . Contest ( name = name , is_public = is_public_bool , start_time = util . strs_to_dt ( start_date , start_time ) , end_time = util . strs_to_dt ( end_date , end_time ) , users = users_from_usernames ( user_usernames . split ( ) , model ) , problems = problems_from_slugs ( problem_slugs . split ( ) , model ) , ) [EOL] db_session . add ( contest ) [EOL] [EOL] db_session . commit ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] util . invalidate_cache ( util . RUN_CACHE_NAME ) [EOL] [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] [EOL] def display_contest_add_form ( contest_id ) : [EOL] [docstring] [EOL] if contest_id is None : [comment] [EOL] return render_template ( [string] , action_label = [string] , contest = None , user_usernames = [ user . username for user in model . User . query . all ( ) ] , problem_slugs = [ a . slug for a in model . Problem . query . all ( ) ] , ) [EOL] else : [comment] [EOL] contest = model . Contest . query . filter_by ( id = util . i ( contest_id ) ) . scalar ( ) [EOL] if contest is None : [EOL] error = [string] . format ( contest_id ) [EOL] current_app . logger . info ( error ) [EOL] flash ( error , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] return render_template ( [string] , action_label = [string] , contest = contest , user_usernames = [ user . username for user in model . User . query . all ( ) ] , problem_slugs = [ a . slug for a in model . Problem . query . all ( ) ] , ) [EOL] [EOL] [EOL] [comment] [EOL] def is_dup_contest_name ( name ) : [EOL] [docstring] [EOL] dup_contest = model . Contest . query . filter_by ( name = name ) . scalar ( ) [EOL] if dup_contest : [EOL] return True [EOL] else : [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint
from typing import Any [EOL] import typing [EOL] import flask [EOL] import json [EOL] import re [EOL] import datetime [EOL] import util [EOL] [EOL] import uuid [EOL] [EOL] from sqlalchemy . exc import IntegrityError [EOL] [EOL] from flask_login import login_required [EOL] from flask_login import current_user [EOL] [EOL] [EOL] from flask import ( abort , Blueprint , current_app , flash , redirect , render_template , request , url_for , flash , ) [EOL] [EOL] import model [EOL] from database import db_session [EOL] [EOL] clarifications = Blueprint ( [string] , __name__ , template_folder = [string] ) [EOL] [EOL] [EOL] class ModelMissingException ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] @ clarifications . route ( [string] , methods = [ [string] ] ) @ util . login_required ( [string] ) def clarifications_view ( ) : [EOL] [docstring] [EOL] clarifications = model . Clarification . query . all ( ) [EOL] [EOL] return render_template ( [string] , clarifications = clarifications ) [EOL] [EOL] [EOL] @ clarifications . route ( [string] , methods = [ [string] , [string] ] ) @ util . login_required ( [string] ) def clarifications_add ( ) : [EOL] [docstring] [EOL] if request . method == [string] : [comment] [EOL] problems = [ x . name for x in model . Problem . query . all ( ) ] [EOL] return render_template ( [string] , action_label = [string] , problems = problems ) [EOL] elif request . method == [string] : [comment] [EOL] return add_clar ( ) [EOL] else : [EOL] current_app . logger . info ( [string] , request . method ) [EOL] abort ( [number] ) [EOL] [EOL] [EOL] @ clarifications . route ( [string] , methods = [ [string] ] ) @ util . login_required ( [string] ) def clarifications_del ( clar_id ) : [EOL] [docstring] [EOL] clar = model . Clarification . query . filter_by ( id = clar_id ) . scalar ( ) [EOL] if clar is None : [EOL] error = [string] . format ( clar_id ) [EOL] current_app . logger . info ( error ) [EOL] flash ( error , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] try : [EOL] db_session . delete ( clar ) [EOL] db_session . commit ( ) [EOL] flash ( [string] . format ( clar_id ) , [string] ) [EOL] except IntegrityError : [EOL] db_session . rollback ( ) [EOL] error = [string] . format ( clar_id ) [EOL] current_app . logger . info ( error ) [EOL] flash ( error , [string] ) [EOL] [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] [EOL] @ clarifications . route ( [string] , methods = [ [string] , [string] ] ) @ util . login_required ( [string] ) def clarifications_answer ( clar_id ) : [EOL] [docstring] [EOL] if request . method == [string] : [comment] [EOL] clarification = model . Clarification . query . filter_by ( id = clar_id ) . first ( ) [EOL] return render_template ( [string] , action_label = [string] , clarification = clarification , ) [EOL] elif request . method == [string] : [comment] [EOL] return answer_clar ( ) [EOL] else : [EOL] current_app . logger . info ( [string] , request . method ) [EOL] abort ( [number] ) [EOL] [EOL] [EOL] def add_clar ( ) : [EOL] [docstring] [EOL] [EOL] problem_input = request . form . get ( [string] ) [EOL] subject = request . form . get ( [string] ) [EOL] contents = request . form . get ( [string] ) [EOL] [EOL] if subject is None : [EOL] error = [string] [EOL] current_app . logger . info ( error ) [EOL] flash ( error , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] if contents is None : [EOL] error = [string] [EOL] current_app . logger . info ( error ) [EOL] flash ( error , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] if ( problem_input is None ) : [comment] [EOL] error = [string] [EOL] current_app . logger . info ( error ) [EOL] flash ( error , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] problem = model . Problem . query . filter_by ( name = problem_input ) . first ( ) [EOL] clar = model . Clarification ( problem , current_user , subject , contents , False ) [EOL] db_session . add ( clar ) [EOL] db_session . commit ( ) [EOL] [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] [EOL] def answer_clar ( ) : [EOL] [docstring] [EOL] [EOL] problem_name = request . form . get ( [string] ) [EOL] problem = model . Problem . query . filter_by ( name = problem_name ) . first ( ) [EOL] subject = request . form . get ( [string] ) [EOL] contents = request . form . get ( [string] ) [EOL] answer = request . form . get ( [string] ) [EOL] is_public = request . form . get ( [string] ) [EOL] publicity = False [EOL] [EOL] if subject is None : [EOL] error = [string] [EOL] current_app . logger . info ( error ) [EOL] flash ( error , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] if contents is None : [EOL] error = [string] [EOL] current_app . logger . info ( error ) [EOL] flash ( error , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] if problem is None : [EOL] error = [string] [EOL] current_app . logger . info ( error ) [EOL] flash ( error , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] if answer is None : [EOL] error = [string] [EOL] current_app . logger . info ( error ) [EOL] flash ( error , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] if is_public is not None : [EOL] publicity = True [EOL] [EOL] clar = model . Clarification . query . filter_by ( problem = problem , subject = subject , contents = contents ) . first ( ) [EOL] clar . answer = answer [EOL] clar . is_public = publicity [EOL] db_session . commit ( ) [EOL] [EOL] return redirect ( url_for ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import flask [EOL] import util [EOL] [EOL] [EOL] from flask import Blueprint , current_app , redirect , render_template , request , url_for [EOL] [EOL] import model [EOL] from database import db_session [EOL] [EOL] runs = Blueprint ( [string] , __name__ , template_folder = [string] ) [EOL] [EOL] [EOL] class ModelMissingException ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] @ runs . route ( [string] , methods = [ [string] ] , defaults = { [string] : [number] } ) @ runs . route ( [string] , methods = [ [string] ] ) @ util . login_required ( [string] ) def runs_view ( page ) : [EOL] [docstring] [EOL] run_type = request . args . get ( [string] ) [EOL] run_status = request . args . get ( [string] ) [EOL] [EOL] num_pending = model . Run . query . filter_by ( finished_execing_time = None ) . count ( ) [EOL] [EOL] if run_type == [string] : [EOL] run_query = model . Run . query . filter_by ( is_submission = True ) [EOL] elif run_type == [string] : [EOL] run_query = model . Run . query . filter_by ( is_submission = False ) [EOL] else : [EOL] run_query = model . Run . query [EOL] [EOL] if run_status == [string] : [EOL] run_query = run_query . filter ( model . Run . finished_execing_time is not None ) [EOL] elif run_status == [string] : [EOL] run_query = run_query . filter_by ( finished_execing_time = None ) [EOL] [EOL] runs = util . paginate ( run_query . order_by ( model . Run . submit_time . desc ( ) ) , page , [number] ) [EOL] [EOL] return render_template ( [string] , runs = runs , run_type = run_type , run_status = run_status , num_pending = num_pending , ) [EOL] [EOL] [EOL] @ runs . route ( [string] , methods = [ [string] ] ) @ util . login_required ( [string] ) def runs_run ( run_id ) : [EOL] [docstring] [EOL] run = model . Run . query . filter_by ( id = run_id ) . scalar ( ) [EOL] [EOL] return render_template ( [string] , run = run ) [EOL] [EOL] [EOL] @ runs . route ( [string] , methods = [ [string] ] ) def priority ( run_id ) : [EOL] run = model . Run . query . get ( run_id ) [EOL] run . is_priority = not run . is_priority [EOL] [EOL] db_session . add ( run ) [EOL] db_session . commit ( ) [EOL] [EOL] return redirect ( url_for ( [string] , run_id = run_id ) ) [EOL] [EOL] [EOL] @ runs . route ( [string] , methods = [ [string] ] ) def rejudge ( run_id ) : [EOL] run = model . Run . query . get ( run_id ) [EOL] [EOL] run . started_execing_time = None [EOL] run . finished_execing_time = None [EOL] run . run_output = None [EOL] if run . is_submission : [EOL] run . run_input = run . problem . secret_input [EOL] run . correct_output = run . problem . secret_output [EOL] [EOL] db_session . commit ( ) [EOL] [EOL] return redirect ( url_for ( [string] , run_id = run_id ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict [EOL] import typing [EOL] import flask [EOL] from flask import current_app , Blueprint , render_template [EOL] [EOL] import util [EOL] [EOL] from database import db_uri [EOL] [EOL] admin = Blueprint ( [string] , __name__ , template_folder = [string] ) [EOL] [EOL] [EOL] @ admin . route ( [string] , methods = [ [string] ] ) @ util . login_required ( [string] ) def index ( ) : [EOL] [docstring] [EOL] info = { [string] : db_uri , [string] : current_app . config [ [string] ] } [EOL] return render_template ( [string] , info = info ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , List [EOL] import typing [EOL] import flask [EOL] import util [EOL] from flask import ( Blueprint , render_template , request , ) [EOL] [EOL] import random [EOL] import model [EOL] from database import db_session [EOL] [EOL] utils = Blueprint ( [string] , __name__ , template_folder = [string] ) [EOL] [EOL] @ utils . route ( [string] , methods = [ [string] ] ) @ util . login_required ( [string] ) def random_contestants ( ) : [EOL] [docstring] [EOL] contestants = model . User . query . filter ( model . User . user_roles . any ( name = [string] ) ) . all ( ) [EOL] [EOL] num = int ( request . args . get ( [string] ) ) or len ( contestants ) [EOL] if num > len ( contestants ) : [EOL] num = len ( contestants ) [EOL] [EOL] shuffled_contestants = random . sample ( contestants , k = num ) [EOL] return render_template ( [string] , contestants = shuffled_contestants ) [EOL] [EOL] @ utils . route ( [string] , methods = [ [string] ] ) @ util . login_required ( [string] ) def invalidate_caches ( ) : [EOL] [docstring] [EOL] util . invalidate_cache ( util . RUN_CACHE_NAME ) [EOL] util . invalidate_cache ( util . SCORE_CACHE_NAME ) [EOL] return render_template ( [string] , message = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] import flask [EOL] import util [EOL] [EOL] from sqlalchemy import or_ [EOL] from sqlalchemy . exc import IntegrityError [EOL] [EOL] import paginate_sqlalchemy [EOL] [EOL] from flask_login import current_user [EOL] [EOL] from flask import ( abort , Blueprint , current_app , render_template , redirect , request , url_for , flash , ) [EOL] [EOL] import model [EOL] from database import db_session [EOL] [EOL] users = Blueprint ( [string] , __name__ , template_folder = [string] ) [EOL] [EOL] [EOL] @ users . route ( [string] , methods = [ [string] ] , defaults = { [string] : [number] } ) @ users . route ( [string] , methods = [ [string] ] ) @ util . login_required ( [string] ) def users_view ( page ) : [EOL] [docstring] [EOL] user_search = request . args . get ( [string] ) [EOL] user_role = request . args . get ( [string] ) [EOL] [EOL] users_query = model . User . query [EOL] [EOL] if user_search : [EOL] term = [string] + user_search + [string] [EOL] users_query = users_query . filter ( or_ ( model . User . name . ilike ( term ) , model . User . username . ilike ( term ) ) ) [EOL] if user_role and user_role != [string] : [EOL] users_query = users_query . join ( model . User . user_roles ) . filter ( model . UserRole . name == user_role ) [EOL] [EOL] users_pagination = util . paginate ( users_query , page , [number] ) [EOL] users = users_pagination . items [EOL] [EOL] metrics = { } [EOL] for user in users : [EOL] user_metrics = { } [EOL] [EOL] run_query = model . Run . query . filter_by ( user_id = user . id ) [EOL] [EOL] user_metrics [ [string] ] = run_query . count ( ) [EOL] user_metrics [ [string] ] = run_query . order_by ( model . Run . submit_time . desc ( ) ) . limit ( [number] ) . first ( ) [EOL] [EOL] metrics [ user . id ] = user_metrics [EOL] [EOL] return render_template ( [string] , users_pagination = users_pagination , users = users , metrics = metrics , user_role = user_role , search = user_search , ) [EOL] [EOL] [EOL] @ users . route ( [string] , methods = [ [string] , [string] ] , defaults = { [string] : None } ) @ users . route ( [string] , methods = [ [string] ] ) @ util . login_required ( [string] ) def users_add ( user_id ) : [EOL] [docstring] [EOL] if request . method == [string] : [comment] [EOL] return display_user_add_form ( user_id ) [EOL] elif request . method == [string] : [comment] [EOL] return add_user ( ) [EOL] else : [EOL] current_app . logger . info ( [string] , request . method ) [EOL] abort ( [number] ) [EOL] [EOL] [EOL] @ users . route ( [string] , methods = [ [string] ] ) @ util . login_required ( [string] ) def users_del ( user_id ) : [EOL] [docstring] [EOL] user = model . User . query . filter_by ( id = util . i ( user_id ) ) . scalar ( ) [EOL] [EOL] if user is None : [EOL] error = [string] . format ( user_id ) [EOL] current_app . logger . info ( error ) [EOL] flash ( error , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] if current_user . id == user . id : [EOL] error = [string] . format ( user_id ) [EOL] current_app . logger . info ( error ) [EOL] flash ( error , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] try : [EOL] db_session . delete ( user ) [EOL] db_session . commit ( ) [EOL] flash ( [string] . format ( user . username ) , [string] ) [EOL] except IntegrityError : [EOL] db_session . rollback ( ) [EOL] error = [string] . format ( user_id ) [EOL] current_app . logger . info ( error ) [EOL] flash ( error , [string] ) [EOL] [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] [EOL] def add_user ( ) : [EOL] [docstring] [EOL] user_id = request . form . get ( [string] ) [EOL] name = request . form . get ( [string] ) [EOL] username = request . form . get ( [string] ) [EOL] password = request . form . get ( [string] ) [EOL] confirm_password = request . form . get ( [string] ) [EOL] misc_data = request . form . get ( [string] ) [EOL] contest_names = request . form . get ( [string] ) [EOL] user_roles = request . form . get ( [string] ) [EOL] [EOL] if password != confirm_password : [EOL] error = [string] . format ( username ) [EOL] current_app . logger . info ( error ) [EOL] flash ( error , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] if user_id : [comment] [EOL] user = model . User . query . filter_by ( id = util . i ( user_id ) ) . one ( ) [EOL] user . name = name [EOL] user . username = username [EOL] if password != [string] : [EOL] user . hashed_password = util . hash_password ( password ) [EOL] user . misc_data = misc_data [EOL] user . contests = retrieve_by_names ( contest_names . split ( ) , model . Contest ) [EOL] user . user_roles = retrieve_by_names ( user_roles . split ( ) , model . UserRole ) [EOL] else : [comment] [EOL] if is_dup_user_username ( username ) : [EOL] error = [string] . format ( username ) [EOL] current_app . logger . info ( error ) [EOL] flash ( error , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] user = model . User ( username = username , name = name , password = password , misc_data = misc_data , contests = retrieve_by_names ( contest_names . split ( ) , model . Contest ) , user_roles = retrieve_by_names ( user_roles . split ( ) , model . UserRole ) , ) [EOL] db_session . add ( user ) [EOL] [EOL] db_session . commit ( ) [EOL] [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] [EOL] def display_user_add_form ( user_id ) : [EOL] [docstring] [EOL] if user_id is None : [comment] [EOL] return render_template ( [string] , action_label = [string] , user = None ) [EOL] else : [comment] [EOL] user = model . User . query . filter_by ( id = util . i ( user_id ) ) . scalar ( ) [EOL] if user is None : [EOL] error = [string] . format ( user_id ) [EOL] current_app . logger . info ( error ) [EOL] flash ( error , [string] ) [EOL] return redirect ( url_for ( [string] ) ) [EOL] return render_template ( [string] , action_label = [string] , user = user ) [EOL] [EOL] @ users . route ( [string] , methods = [ [string] ] ) @ util . login_required ( [string] ) def users_profile ( username ) : [EOL] [docstring] [EOL] [EOL] user = model . User . query . filter_by ( username = username ) . scalar ( ) [EOL] runs = model . Run . query . filter_by ( user_id = user . id ) . all ( ) [EOL] return render_template ( [string] , user = user , runs = runs ) [EOL] [EOL] [comment] [EOL] def is_dup_user_username ( username ) : [EOL] [docstring] [EOL] return bool ( model . User . query . filter_by ( username = username ) . scalar ( ) ) [EOL] [EOL] [EOL] def retrieve_by_ids ( ids , table ) : [EOL] [docstring] [EOL] rows = [ ] [EOL] [EOL] for id in ids : [EOL] row = table . query . filter_by ( id = util . i ( id ) ) . scalar ( ) [EOL] if row : [EOL] rows . append ( row ) [EOL] return rows [EOL] [EOL] [EOL] def retrieve_by_names ( names , table ) : [EOL] rows = [ ] [EOL] [EOL] for name in names : [EOL] row = table . query . filter_by ( name = name ) . scalar ( ) [EOL] if row : [EOL] rows . append ( row ) [EOL] return rows [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprintflask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from lxml import html [EOL] [EOL] from base_test import BaseTest [EOL] [EOL] import model [EOL] from database import db_session [EOL] [EOL] [EOL] class LanguagesTestCase ( BaseTest ) : [EOL] [docstring] [EOL] [EOL] def _lang_add ( self , init_lang_name ) : [EOL] rv = self . app . post ( [string] , data = { [string] : init_lang_name , [string] : [string] , [string] : [string] , [string] : [string] , } , follow_redirects = True , ) [EOL] self . assertEqual ( rv . status_code , [number] , [string] ) [EOL] [EOL] rv = self . app . get ( [string] ) [EOL] root = html . fromstring ( rv . data ) [EOL] page_lang_names = [ x . text for x in root . cssselect ( [string] ) ] [EOL] self . assertIn ( init_lang_name , page_lang_names , [string] ) [EOL] [EOL] def _lang_edit ( self , old_name , new_name ) : [EOL] lang_id = model . Language . query . filter_by ( name = old_name ) . one ( ) . id [EOL] [EOL] rv = self . app . post ( [string] , data = { [string] : lang_id , [string] : new_name , [string] : [string] , [string] : [string] , [string] : [string] , } , follow_redirects = True , ) [EOL] self . assertEqual ( rv . status_code , [number] , [string] ) [EOL] [EOL] rv = self . app . get ( [string] ) [EOL] root = html . fromstring ( rv . data ) [EOL] page_lang_names = [ x . text for x in root . cssselect ( [string] ) ] [EOL] self . assertIn ( new_name , page_lang_names , [string] ) [EOL] [EOL] def _lang_del ( self , name ) : [EOL] lang_id = model . Language . query . filter_by ( name = name ) . one ( ) . id [EOL] [EOL] rv = self . app . get ( [string] . format ( lang_id ) , follow_redirects = True ) [EOL] self . assertEqual ( rv . status_code , [number] , [string] ) [EOL] [EOL] rv = self . app . get ( [string] ) [EOL] root = html . fromstring ( rv . data ) [EOL] page_lang_names = [ x . text for x in root . cssselect ( [string] ) ] [EOL] self . assertNotIn ( name , page_lang_names , [string] ) [EOL] [EOL] def test_language_crud ( self ) : [EOL] init_lang_name = [string] [EOL] edit_lang_name = [string] [EOL] [EOL] self . login ( [string] , [string] ) [EOL] [EOL] self . _lang_add ( init_lang_name ) [EOL] self . _lang_edit ( init_lang_name , edit_lang_name ) [EOL] self . _lang_del ( edit_lang_name ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0
from typing import Any [EOL] import datetime [EOL] import typing [EOL] import util [EOL] from base_test import BaseTest [EOL] import model [EOL] import json [EOL] import bcrypt [EOL] from database import db_session [EOL] import datetime [EOL] from flask import request [EOL] [EOL] [EOL] class UtilTestCase ( BaseTest ) : [EOL] [docstring] [EOL] [EOL] def test_hash_password ( self ) : [EOL] [docstring] [EOL] [EOL] password = [string] [EOL] hashed_password = util . hash_password ( password ) [EOL] self . assertEqual ( bcrypt . checkpw ( password . encode ( [string] ) , hashed_password . encode ( [string] ) ) , True , ) [EOL] [EOL] def test_is_password_matching ( self ) : [EOL] [docstring] [EOL] [EOL] password = [string] [EOL] hashed_password = bcrypt . hashpw ( password . encode ( [string] ) , bcrypt . gensalt ( ) ) [EOL] self . assertEqual ( util . is_password_matching ( password , hashed_password . decode ( [string] ) ) , True ) [EOL] [EOL] def test_checkbox_result_to_bool ( self ) : [EOL] [docstring] [EOL] [EOL] self . assertEqual ( util . checkbox_result_to_bool ( [string] ) , True ) [EOL] self . assertEqual ( util . checkbox_result_to_bool ( [string] ) , False ) [EOL] [EOL] def test_get_configuration ( self ) : [EOL] [docstring] [EOL] [EOL] string_config = model . Configuration ( [string] , [string] , [string] , [string] ) [EOL] bool_config = model . Configuration ( [string] , [string] , [string] , [string] ) [EOL] integer_config = model . Configuration ( [string] , [string] , [string] , [string] ) [EOL] [EOL] db_session . add_all ( [ string_config , bool_config , integer_config ] ) [EOL] db_session . commit ( ) [EOL] [EOL] self . assertEqual ( util . get_configuration ( [string] ) , [string] ) [EOL] self . assertEqual ( util . get_configuration ( [string] ) , True ) [EOL] self . assertEqual ( util . get_configuration ( [string] ) , [number] ) [EOL] [EOL] def test_i ( self ) : [EOL] [docstring] [EOL] [EOL] x = [string] [EOL] value = util . i ( x ) [EOL] self . assertEqual ( int ( x ) , value ) [EOL] [EOL] def test_str_to_dt ( self ) : [EOL] [docstring] [EOL] [EOL] time = [string] [EOL] dt = util . str_to_dt ( time ) [EOL] [EOL] self . assertEqual ( dt , datetime . datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) ) [EOL] [EOL] def test_strs_to_dt ( self ) : [EOL] [docstring] [EOL] [EOL] date_string = [string] [EOL] time_string = [string] [EOL] dt = util . strs_to_dt ( date_string , time_string ) [EOL] [EOL] self . assertEqual ( dt , datetime . datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) ) [EOL] [EOL] def test_time_str_to_dt ( self ) : [EOL] [docstring] [EOL] [EOL] time = [string] [EOL] dt = util . time_str_to_dt ( time ) [EOL] [EOL] [comment] [EOL] self . assertEqual ( dt , datetime . datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) ) [EOL] [EOL] def test_dt_to_str ( self ) : [EOL] [docstring] [EOL] [EOL] dt = datetime . datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] [EOL] self . assertEqual ( util . dt_to_str ( dt ) , [string] ) [EOL] [EOL] def test_dt_to_date_str ( self ) : [EOL] [docstring] [EOL] [EOL] dt = datetime . datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] [EOL] self . assertEqual ( util . dt_to_date_str ( dt ) , [string] ) [EOL] [EOL] def test_dt_to_time_str ( self ) : [EOL] [docstring] [EOL] [EOL] dt = datetime . datetime ( [number] , [number] , [number] , [number] , [number] , [number] ) [EOL] [EOL] self . assertEqual ( util . dt_to_time_str ( dt ) , [string] ) [EOL] [EOL] def test_add_versions ( self ) : [EOL] [docstring] [EOL] [EOL] LANG_VER = [string] [EOL] [EOL] util . add_versions ( LANG_VER ) [EOL] [EOL] lang_list = json . loads ( LANG_VER ) [EOL] [EOL] for lang in lang_list : [EOL] results = model . Language . query . filter_by ( name = lang ) . scalar ( ) [EOL] self . assertIsNotNone ( results . version ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0
from typing import Any [EOL] import typing [EOL] from lxml import html [EOL] [EOL] from base_test import BaseTest [EOL] [EOL] import model [EOL] from database import db_session [EOL] [EOL] [EOL] class ProblemsTestCase ( BaseTest ) : [EOL] [docstring] [EOL] [EOL] def _problem_add ( self , init_problem_name ) : [EOL] rv = self . app . post ( [string] , data = { [string] : model . ProblemType . query . filter_by ( name = [string] ) . one ( ) . id , [string] : [string] , [string] : init_problem_name , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , follow_redirects = True , ) [EOL] self . assertEqual ( rv . status_code , [number] , [string] ) [EOL] [EOL] rv = self . app . get ( [string] ) [EOL] root = html . fromstring ( rv . data ) [EOL] page_problem_names = [ x . text for x in root . cssselect ( [string] ) ] [EOL] self . assertIn ( init_problem_name , page_problem_names , [string] ) [EOL] [EOL] def _problem_edit ( self , old_name , new_name ) : [EOL] problem_id = model . Problem . query . filter_by ( name = old_name ) . one ( ) . id [EOL] [EOL] rv = self . app . post ( [string] , data = { [string] : problem_id , [string] : model . ProblemType . query . filter_by ( name = [string] ) . one ( ) . id , [string] : [string] , [string] : new_name , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , follow_redirects = True , ) [EOL] self . assertEqual ( rv . status_code , [number] , [string] ) [EOL] [EOL] rv = self . app . get ( [string] ) [EOL] root = html . fromstring ( rv . data ) [EOL] page_problem_names = [ x . text for x in root . cssselect ( [string] ) ] [EOL] self . assertIn ( new_name , page_problem_names , [string] ) [EOL] [EOL] def _problem_del ( self , name ) : [EOL] problem_id = model . Problem . query . filter_by ( name = name ) . one ( ) . id [EOL] [EOL] rv = self . app . get ( [string] . format ( problem_id ) , follow_redirects = True ) [EOL] self . assertEqual ( rv . status_code , [number] , [string] ) [EOL] [EOL] rv = self . app . get ( [string] ) [EOL] root = html . fromstring ( rv . data ) [EOL] page_problem_names = [ x . text for x in root . cssselect ( [string] ) ] [EOL] self . assertNotIn ( name , page_problem_names , [string] ) [EOL] [EOL] def test_problem_crud ( self ) : [EOL] init_problem_name = [string] [EOL] edit_problem_name = [string] [EOL] [EOL] self . login ( [string] , [string] ) [EOL] [EOL] self . _problem_add ( init_problem_name ) [EOL] self . _problem_edit ( init_problem_name , edit_problem_name ) [EOL] self . _problem_del ( edit_problem_name ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0
from typing import Dict , Any [EOL] import typing [EOL] import json [EOL] import logging [EOL] import unittest [EOL] [EOL] from flask_login import current_user [EOL] [EOL] import sqlalchemy [EOL] [EOL] from web import app , setup_database [EOL] [EOL] import model [EOL] from database import db_session , engine , Base [EOL] [EOL] [EOL] class BaseTest ( unittest . TestCase ) : [EOL] [docstring] [EOL] [EOL] def setUp ( self ) : [EOL] logging . disable ( logging . CRITICAL ) [EOL] [EOL] app . config [ [string] ] = True [EOL] app . app_context ( ) . push ( ) [EOL] self . app = app . test_client ( ) [EOL] [EOL] db_session . commit ( ) [EOL] Base . metadata . drop_all ( engine ) [EOL] db_session . commit ( ) [EOL] Base . metadata . create_all ( engine ) [EOL] db_session . commit ( ) [EOL] [EOL] logging . info ( [string] ) [EOL] setup_database ( app ) [EOL] [EOL] def login ( self , username , password ) : [EOL] with self . app : [EOL] rv = self . app . post ( [string] , data = dict ( username = username , password = password ) , follow_redirects = True , ) [EOL] [EOL] self . assertEqual ( rv . status_code , [number] , [string] ) [EOL] self . assertNotEqual ( current_user , None , [string] ) [EOL] self . assertFalse ( current_user . is_anonymous , [string] ) [EOL] self . assertEqual ( current_user . username , username , [string] ) [EOL] [EOL] return rv [EOL] [EOL] def logout ( self ) : [EOL] with self . app : [EOL] rv = self . app . get ( [string] , follow_redirects = True ) [EOL] self . assertNotEqual ( current_user , None , [string] ) [EOL] self . assertTrue ( current_user . is_anonymous , [string] ) [EOL] [EOL] return rv [EOL] [EOL] def get_jwt_token ( self , username , password ) : [EOL] rv = self . app . post ( [string] , data = json . dumps ( { [string] : username , [string] : password } ) , content_type = [string] , ) [EOL] j = json . loads ( rv . data . decode ( [string] ) ) [EOL] return j [ [string] ] [EOL] [EOL] def jwt_get ( self , url , auth_token = None , headers = None ) : [EOL] if not headers : [EOL] h = { } [EOL] [EOL] if auth_token : [EOL] h [ [string] ] = [string] + auth_token [EOL] [EOL] return self . app . get ( url , headers = h , content_type = [string] , follow_redirects = True ) [EOL] [EOL] def post_json ( self , url , data , auth_token = None , headers = None ) : [EOL] if not headers : [EOL] h = { } [EOL] [EOL] if auth_token : [EOL] h [ [string] ] = [string] + auth_token [EOL] [EOL] return self . app . post ( url , data = json . dumps ( data ) , headers = h , content_type = [string] , follow_redirects = True , ) [EOL] [EOL] def tearDown ( self ) : [EOL] try : [EOL] self . logout ( ) [EOL] except Exception : [EOL] self . fail ( [string] ) [EOL] finally : [EOL] db_session . commit ( ) [EOL] Base . metadata . drop_all ( engine ) [EOL] db_session . commit ( ) [EOL] Base . metadata . create_all ( engine ) [EOL] db_session . commit ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Union , Any [EOL] import typing [EOL] from base_test import BaseTest [EOL] [EOL] import model [EOL] import util [EOL] from database import db_session [EOL] [EOL] [EOL] class ModelsTestCase ( BaseTest ) : [EOL] [docstring] [EOL] [EOL] def test_language ( self ) : [EOL] [docstring] [EOL] LANG_ARGS = { [string] : [string] , [string] : [string] , [string] : True , [string] : [string] , } [EOL] [EOL] [comment] [EOL] lang = model . Language ( ** LANG_ARGS ) [EOL] db_session . add ( lang ) [EOL] db_session . commit ( ) [EOL] [EOL] [comment] [EOL] results = model . Language . query . filter_by ( name = LANG_ARGS [ [string] ] ) . all ( ) [EOL] [EOL] self . assertEqual ( len ( results ) , [number] ) [EOL] [EOL] def test_user ( self ) : [EOL] [docstring] [EOL] USER_ARGS = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : util . str_to_dt ( [string] ) , [string] : [string] , } [EOL] [EOL] [comment] [EOL] user = model . User ( ** USER_ARGS ) [EOL] db_session . add ( user ) [EOL] db_session . commit ( ) [EOL] [EOL] [comment] [EOL] results = model . User . query . filter_by ( username = USER_ARGS [ [string] ] ) . all ( ) [EOL] [EOL] self . assertEqual ( len ( results ) , [number] ) [EOL] [EOL] def test_contest ( self ) : [EOL] [docstring] [EOL] CONTEST_ARGS = { [string] : [string] , [string] : util . str_to_dt ( [string] ) , [string] : util . str_to_dt ( [string] ) , [string] : True , } [EOL] user_args , user = get_user ( ) [EOL] problem_args , problem = get_problem ( ) [EOL] [EOL] [comment] [EOL] contest = model . Contest ( ** CONTEST_ARGS ) [EOL] contest . users . append ( user ) [EOL] contest . problems . append ( problem ) [EOL] [EOL] db_session . add ( contest ) [EOL] db_session . commit ( ) [EOL] [EOL] [comment] [EOL] results = model . Contest . query . filter_by ( name = CONTEST_ARGS [ [string] ] ) . all ( ) [EOL] [EOL] self . assertEqual ( len ( results ) , [number] ) [EOL] [EOL] def test_configuration ( self ) : [EOL] [docstring] [EOL] CONF_ARGS = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] [comment] [EOL] conf_type = model . Configuration ( ** CONF_ARGS ) [EOL] db_session . add ( conf_type ) [EOL] db_session . commit ( ) [EOL] [EOL] [comment] [EOL] results = model . Configuration . query . filter_by ( key = CONF_ARGS [ [string] ] ) . all ( ) [EOL] [EOL] self . assertEqual ( len ( results ) , [number] ) [EOL] [EOL] def test_problem_type ( self ) : [EOL] [docstring] [EOL] PROBLEM_TYPE_ARGS = { [string] : [string] , [string] : [string] , } [EOL] [EOL] [comment] [EOL] problem_type = model . ProblemType ( ** PROBLEM_TYPE_ARGS ) [EOL] db_session . add ( problem_type ) [EOL] db_session . commit ( ) [EOL] [EOL] [comment] [EOL] results = model . ProblemType . query . filter_by ( name = PROBLEM_TYPE_ARGS [ [string] ] ) . all ( ) [EOL] [EOL] self . assertEqual ( len ( results ) , [number] ) [EOL] [EOL] def test_problem ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] PROBLEM_TYPE_ARGS = { [string] : [string] , [string] : [string] , } [EOL] problem_type = model . ProblemType ( ** PROBLEM_TYPE_ARGS ) [EOL] db_session . add ( problem_type ) [EOL] db_session . commit ( ) [EOL] [EOL] PROBLEM_ARGS = { [string] : problem_type , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] [comment] [EOL] problem = model . Problem ( ** PROBLEM_ARGS ) [EOL] db_session . add ( problem ) [EOL] db_session . commit ( ) [EOL] [EOL] [comment] [EOL] results = model . Problem . query . filter_by ( name = PROBLEM_ARGS [ [string] ] ) . all ( ) [EOL] [EOL] self . assertEqual ( len ( results ) , [number] ) [EOL] [EOL] def test_saved_code ( self ) : [EOL] [docstring] [EOL] contest_args , contest = get_contest ( ) [EOL] problem_args , problem = get_problem ( ) [EOL] user_args , user = get_user ( ) [EOL] language_args , language = get_language ( ) [EOL] [EOL] SAVED_CODE_ARGS = { [string] : contest , [string] : problem , [string] : user , [string] : language , [string] : [string] , [string] : util . str_to_dt ( [string] ) , } [EOL] saved_code = model . SavedCode ( ** SAVED_CODE_ARGS ) [EOL] db_session . add ( saved_code ) [EOL] db_session . commit ( ) [EOL] [EOL] def test_run ( self ) : [EOL] [docstring] [EOL] contest_args , contest = get_contest ( ) [EOL] problem_args , problem = get_problem ( ) [EOL] user_args , user = get_user ( ) [EOL] language_args , language = get_language ( ) [EOL] [EOL] RUN_ARGS = { [string] : user , [string] : contest , [string] : language , [string] : problem , [string] : util . str_to_dt ( [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : True , } [EOL] run = model . Run ( ** RUN_ARGS ) [EOL] db_session . add ( run ) [EOL] db_session . commit ( ) [EOL] [EOL] def test_clarification ( self ) : [EOL] [docstring] [EOL] contest_args , contest = get_contest ( ) [EOL] problem_args , problem = get_problem ( ) [EOL] user_args , user = get_user ( ) [EOL] [EOL] CLARIFICATION_ARGS = { [string] : problem , [string] : user , [string] : [string] , [string] : [string] , [string] : False , } [EOL] clarification = model . Clarification ( ** CLARIFICATION_ARGS ) [EOL] db_session . add ( clarification ) [EOL] db_session . commit ( ) [EOL] [EOL] results = model . Clarification . query . filter_by ( subject = CLARIFICATION_ARGS [ [string] ] ) . all ( ) [EOL] [EOL] self . assertEqual ( len ( results ) , [number] ) [EOL] [EOL] def test_user_role ( self ) : [EOL] [docstring] [EOL] USER_ROLE_ARGS = { [string] : [string] } [EOL] user_role = model . UserRole ( ** USER_ROLE_ARGS ) [EOL] db_session . add ( user_role ) [EOL] db_session . commit ( ) [EOL] [EOL] [EOL] def get_problem_type ( ) : [EOL] [docstring] [EOL] PROBLEM_TYPE_ARGS = { [string] : [string] , [string] : [string] } [EOL] problem_type = model . ProblemType ( ** PROBLEM_TYPE_ARGS ) [EOL] db_session . add ( problem_type ) [EOL] db_session . commit ( ) [EOL] [EOL] return PROBLEM_TYPE_ARGS , problem_type [EOL] [EOL] [EOL] def get_problem ( ) : [EOL] [docstring] [EOL] problem_type_args , problem_type = get_problem_type ( ) [EOL] PROBLEM_ARGS = { [string] : problem_type , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] problem = model . Problem ( ** PROBLEM_ARGS ) [EOL] db_session . add ( problem ) [EOL] db_session . commit ( ) [EOL] [EOL] return PROBLEM_ARGS , problem [EOL] [EOL] [EOL] def get_language ( ) : [EOL] [docstring] [EOL] LANG_ARGS = { [string] : [string] , [string] : [string] , [string] : True , [string] : [string] , } [EOL] [EOL] [comment] [EOL] lang = model . Language ( ** LANG_ARGS ) [EOL] db_session . add ( lang ) [EOL] db_session . commit ( ) [EOL] [EOL] return LANG_ARGS , lang [EOL] [EOL] [EOL] def get_user ( ) : [EOL] [docstring] [EOL] USER_ARGS = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : util . str_to_dt ( [string] ) , [string] : [string] , } [EOL] [EOL] [comment] [EOL] user = model . User ( ** USER_ARGS ) [EOL] db_session . add ( user ) [EOL] db_session . commit ( ) [EOL] [EOL] return USER_ARGS , user [EOL] [EOL] [EOL] def get_contest ( ) : [EOL] [docstring] [EOL] CONTEST_ARGS = { [string] : [string] , [string] : util . str_to_dt ( [string] ) , [string] : util . str_to_dt ( [string] ) , [string] : True , } [EOL] [EOL] [comment] [EOL] contest = model . Contest ( ** CONTEST_ARGS ) [EOL] db_session . add ( contest ) [EOL] db_session . commit ( ) [EOL] [EOL] return CONTEST_ARGS , contest [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from lxml import html [EOL] [EOL] from base_test import BaseTest [EOL] [EOL] import model [EOL] from database import db_session [EOL] [EOL] [EOL] class ClarificationsTestCase ( BaseTest ) : [EOL] [docstring] [EOL] [EOL] def _clar_add ( self , init_clar_problem , init_clar_subject , init_clar_user ) : [EOL] rv = self . app . post ( [string] , data = { [string] : init_clar_problem , [string] : init_clar_subject , [string] : [string] , } , follow_redirects = True , ) [EOL] self . assertEqual ( rv . status_code , [number] , [string] ) [EOL] [EOL] rv = self . app . get ( [string] ) [EOL] root = html . fromstring ( rv . data ) [EOL] page_clar_subjects = [ x . text for x in root . cssselect ( [string] ) ] [EOL] self . assertIn ( init_clar_subject , page_clar_subjects , [string] ) [EOL] [EOL] def _clar_answer ( self , init_clar_problem , init_clar_subject ) : [EOL] clar_id = ( model . Clarification . query . filter_by ( subject = init_clar_subject ) . one ( ) . id ) [EOL] rv = self . app . post ( [string] . format ( clar_id ) , data = { [string] : init_clar_problem , [string] : init_clar_subject , [string] : [string] , [string] : [string] , [string] : [string] , } , follow_redirects = True , ) [EOL] self . assertEqual ( rv . status_code , [number] , [string] ) [EOL] [EOL] rv = self . app . get ( [string] ) [EOL] root = html . fromstring ( rv . data ) [EOL] page_clar_answereds = [ x . text for x in root . cssselect ( [string] ) ] [EOL] self . assertIn ( [string] , page_clar_answereds , [string] , ) [EOL] [EOL] def _clar_del ( self , init_clar_subject ) : [EOL] clar_id = ( model . Clarification . query . filter_by ( subject = init_clar_subject ) . one ( ) . id ) [EOL] rv = self . app . get ( [string] . format ( clar_id ) , follow_redirects = True ) [EOL] self . assertEqual ( rv . status_code , [number] , [string] ) [EOL] [EOL] rv = self . app . get ( [string] ) [EOL] root = html . fromstring ( rv . data ) [EOL] page_clar_subjects = [ x . text for x in root . cssselect ( [string] ) ] [EOL] self . assertFalse ( page_clar_subjects ) [EOL] [EOL] def test_clar_crud ( self ) : [EOL] test_prob = model . Problem ( model . ProblemType . query . filter_by ( name = [string] ) . one ( ) , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] db_session . add ( test_prob ) [EOL] db_session . commit ( ) [EOL] [EOL] init_clar_problem = model . Problem . query . first ( ) . name [EOL] init_clar_subject = [string] [EOL] init_clar_user = model . User . query . first ( ) [EOL] [EOL] self . login ( [string] , [string] ) [EOL] [EOL] self . _clar_add ( init_clar_problem , init_clar_subject , init_clar_user ) [EOL] self . _clar_answer ( init_clar_problem , init_clar_subject ) [EOL] self . _clar_del ( init_clar_subject ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0
from typing import Any [EOL] import typing [EOL] from lxml import html [EOL] [EOL] from base_test import BaseTest [EOL] [EOL] import model [EOL] from database import db_session [EOL] [EOL] [EOL] class ConfigurationsTestCase ( BaseTest ) : [EOL] [docstring] [EOL] [EOL] def _config_add ( self , init_config_key ) : [EOL] rv = self . app . post ( [string] , data = { [string] : init_config_key , [string] : [string] , [string] : [string] , [string] : [string] , } , follow_redirects = True , ) [EOL] self . assertEqual ( rv . status_code , [number] , [string] ) [EOL] [EOL] rv = self . app . get ( [string] ) [EOL] root = html . fromstring ( rv . data ) [EOL] page_config_keys = [ x . text for x in root . cssselect ( [string] ) ] [EOL] self . assertIn ( init_config_key , page_config_keys , [string] ) [EOL] [EOL] def _config_edit ( self , old_key , new_key ) : [EOL] config_id = model . Configuration . query . filter_by ( key = old_key ) . one ( ) . id [EOL] [EOL] rv = self . app . post ( [string] , data = { [string] : config_id , [string] : new_key , [string] : [string] , [string] : [string] , [string] : [string] , } , follow_redirects = True , ) [EOL] self . assertEqual ( rv . status_code , [number] , [string] ) [EOL] [EOL] rv = self . app . get ( [string] ) [EOL] root = html . fromstring ( rv . data ) [EOL] page_config_keys = [ x . text for x in root . cssselect ( [string] ) ] [EOL] self . assertIn ( new_key , page_config_keys , [string] ) [EOL] [EOL] def _config_del ( self , key ) : [EOL] config_id = model . Configuration . query . filter_by ( key = key ) . one ( ) . id [EOL] [EOL] rv = self . app . get ( [string] . format ( config_id ) , follow_redirects = True ) [EOL] self . assertEqual ( rv . status_code , [number] , [string] ) [EOL] [EOL] rv = self . app . get ( [string] ) [EOL] root = html . fromstring ( rv . data ) [EOL] page_config_keys = [ x . text for x in root . cssselect ( [string] ) ] [EOL] self . assertNotIn ( key , page_config_keys , [string] ) [EOL] [EOL] def test_configuration_crud ( self ) : [EOL] init_config_key = [string] [EOL] edit_config_key = [string] [EOL] [EOL] self . login ( [string] , [string] ) [EOL] [EOL] self . _config_add ( init_config_key ) [EOL] self . _config_edit ( init_config_key , edit_config_key ) [EOL] self . _config_del ( edit_config_key ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0
from typing import Any [EOL] import typing [EOL] from lxml import html [EOL] [EOL] from base_test import BaseTest [EOL] [EOL] import model [EOL] from database import db_session [EOL] [EOL] [EOL] class UsersTestCase ( BaseTest ) : [EOL] [docstring] [EOL] [EOL] def _user_add ( self , init_user_username ) : [EOL] rv = self . app . post ( [string] , data = { [string] : [string] , [string] : init_user_username , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , follow_redirects = True , ) [EOL] self . assertEqual ( rv . status_code , [number] , [string] ) [EOL] [EOL] rv = self . app . get ( [string] ) [EOL] root = html . fromstring ( rv . data ) [EOL] page_user_usernames = [ x . text for x in root . cssselect ( [string] ) ] [EOL] self . assertIn ( init_user_username , page_user_usernames , [string] ) [EOL] [EOL] def _user_edit ( self , old_username , new_username ) : [EOL] user_id = model . User . query . filter_by ( username = old_username ) . one ( ) . id [EOL] [EOL] rv = self . app . post ( [string] , data = { [string] : user_id , [string] : [string] , [string] : new_username , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } , follow_redirects = True , ) [EOL] self . assertEqual ( rv . status_code , [number] , [string] ) [EOL] [EOL] rv = self . app . get ( [string] ) [EOL] root = html . fromstring ( rv . data ) [EOL] page_user_usernames = [ x . text for x in root . cssselect ( [string] ) ] [EOL] self . assertIn ( new_username , page_user_usernames , [string] ) [EOL] [EOL] def _user_del ( self , username ) : [EOL] user_id = model . User . query . filter_by ( username = username ) . one ( ) . id [EOL] [EOL] rv = self . app . get ( [string] . format ( user_id ) , follow_redirects = True ) [EOL] self . assertEqual ( rv . status_code , [number] , [string] ) [EOL] [EOL] rv = self . app . get ( [string] ) [EOL] root = html . fromstring ( rv . data ) [EOL] page_user_usernames = [ x . text for x in root . cssselect ( [string] ) ] [EOL] self . assertNotIn ( username , page_user_usernames , [string] ) [EOL] [EOL] def test_user_crud ( self ) : [EOL] init_user_username = [string] [EOL] edit_user_username = [string] [EOL] [EOL] self . login ( [string] , [string] ) [EOL] [EOL] self . _user_add ( init_user_username ) [EOL] self . _user_edit ( init_user_username , edit_user_username ) [EOL] self . _user_del ( edit_user_username ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0
from typing import Dict , Union , Any [EOL] import typing [EOL] import json [EOL] [EOL] from base64 import b64encode [EOL] [EOL] from base_test import BaseTest [EOL] [EOL] import model [EOL] import util [EOL] from database import db_session [EOL] [EOL] [EOL] class APITestCase ( BaseTest ) : [EOL] [docstring] [EOL] [EOL] def test_executioner_deny ( self ) : [EOL] [docstring] [EOL] setup_contest ( ) [EOL] [EOL] [comment] [EOL] rv = self . app . get ( [string] ) [EOL] self . assertEqual ( rv . status_code , [number] ) [EOL] [EOL] wrong_auth_headers = { [string] : [string] % b64encode ( [string] ) . decode ( [string] ) } [EOL] rv = self . app . get ( [string] , headers = wrong_auth_headers ) [EOL] self . assertEqual ( rv . status_code , [number] ) [EOL] [EOL] def test_executioner_api ( self ) : [EOL] [docstring] [EOL] setup_contest ( ) [EOL] [EOL] auth_headers = { [string] : [string] % b64encode ( [string] ) . decode ( [string] ) } [EOL] [EOL] [comment] [EOL] rv = self . app . get ( [string] , headers = auth_headers ) [EOL] self . assertEqual ( rv . status_code , [number] ) [EOL] writ_data = json . loads ( rv . data . decode ( [string] ) ) [EOL] [EOL] self . assertIn ( [string] , writ_data ) [EOL] self . assertIn ( [string] , writ_data ) [EOL] self . assertIn ( [string] , writ_data ) [EOL] self . assertIn ( [string] , writ_data ) [EOL] self . assertIn ( [string] , writ_data ) [EOL] self . assertEqual ( writ_data [ [string] ] , [string] ) [EOL] [EOL] [comment] [EOL] run = model . Run . query . filter_by ( id = writ_data [ [string] ] ) . one ( ) [EOL] self . assertNotEqual ( run . started_execing_time , None ) [EOL] self . assertEqual ( run . finished_execing_time , None ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] self . app . get ( [string] , headers = auth_headers ) [EOL] rv = self . app . get ( [string] , headers = auth_headers ) [EOL] self . assertEqual ( rv . status_code , [number] ) [EOL] self . assertEqual ( json . loads ( rv . data . decode ( [string] ) ) [ [string] ] , [string] ) [EOL] [EOL] [comment] [EOL] rv = self . app . post ( [string] . format ( writ_data [ [string] ] ) , headers = auth_headers , ) [EOL] self . assertEqual ( rv . status_code , [number] ) [EOL] [EOL] [comment] [EOL] rv = self . app . get ( [string] , headers = auth_headers ) [EOL] self . assertEqual ( rv . status_code , [number] ) [EOL] writ_data = json . loads ( rv . data . decode ( [string] ) ) [EOL] [EOL] [comment] [EOL] submit_data = { [string] : [string] } [EOL] rv = self . app . post ( [string] . format ( writ_data [ [string] ] ) , headers = auth_headers , data = json . dumps ( submit_data ) , content_type = [string] , ) [EOL] self . assertEqual ( rv . status_code , [number] ) [EOL] [EOL] [comment] [EOL] rv = self . app . get ( [string] , headers = auth_headers ) [EOL] self . assertEqual ( rv . status_code , [number] ) [EOL] self . assertEqual ( json . loads ( rv . data . decode ( [string] ) ) [ [string] ] , [string] ) [EOL] [EOL] def test_rejudging ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] for run in model . Run . query . all ( ) : [EOL] db_session . delete ( run ) [EOL] db_session . commit ( ) [EOL] [EOL] setup_contest ( ) [EOL] self . login ( [string] , [string] ) [EOL] [EOL] test_run = model . Run . query . first ( ) [EOL] [EOL] self . _judge_writ ( ) [EOL] [EOL] self . assertIsNotNone ( test_run . started_execing_time ) [EOL] self . assertIsNotNone ( test_run . finished_execing_time ) [EOL] self . assertIsNotNone ( test_run . run_output ) [EOL] [EOL] rv = self . app . get ( [string] . format ( test_run . id ) , follow_redirects = True ) [EOL] self . assertEqual ( rv . status_code , [number] ) [EOL] [EOL] self . assertIsNone ( test_run . started_execing_time ) [EOL] self . assertIsNone ( test_run . finished_execing_time ) [EOL] self . assertIsNone ( test_run . run_output ) [EOL] [EOL] def _judge_writ ( self ) : [EOL] auth_headers = { [string] : [string] % b64encode ( [string] ) . decode ( [string] ) } [EOL] [EOL] rv = self . app . get ( [string] , headers = auth_headers ) [EOL] writ_data = json . loads ( rv . data . decode ( [string] ) ) [EOL] [EOL] self . app . post ( [string] . format ( writ_data [ [string] ] ) , headers = auth_headers , data = json . dumps ( { [string] : [string] } ) , content_type = [string] , ) [EOL] [EOL] def test_submit_run ( self ) : [EOL] [docstring] [EOL] setup_contest ( ) [EOL] token = self . get_jwt_token ( [string] , [string] ) [EOL] [EOL] data = dict ( lang = [string] , problem_slug = [string] , source_code = [string] , is_submission = True , user_test_input = None , ) [EOL] [EOL] rv = self . post_json ( [string] , data , auth_token = token ) [EOL] self . assertEqual ( rv . status_code , [number] ) [EOL] [EOL] def test_get_problems ( self ) : [EOL] [docstring] [EOL] setup_contest ( ) [EOL] token = self . get_jwt_token ( [string] , [string] ) [EOL] [EOL] rv = self . jwt_get ( [string] , auth_token = token ) [EOL] self . assertEqual ( rv . status_code , [number] ) [EOL] [EOL] problems = json . loads ( rv . data . decode ( [string] ) ) [EOL] self . assertIn ( [string] , problems ) [EOL] [EOL] self . assertEqual ( [number] , len ( problems [ [string] ] [ [string] ] ) ) [EOL] [EOL] def test_get_current_user ( self ) : [EOL] [docstring] [EOL] setup_contest ( ) [EOL] token = self . get_jwt_token ( [string] , [string] ) [EOL] [EOL] rv = self . jwt_get ( [string] , auth_token = token ) [EOL] self . assertEqual ( rv . status_code , [number] ) [EOL] [EOL] user = json . loads ( rv . data . decode ( [string] ) ) [EOL] self . assertEqual ( user . get ( [string] ) , [string] ) [EOL] [EOL] def test_get_contest_info ( self ) : [EOL] [docstring] [EOL] setup_contest ( ) [EOL] token = self . get_jwt_token ( [string] , [string] ) [EOL] [EOL] rv = self . jwt_get ( [string] , auth_token = token ) [EOL] self . assertEqual ( rv . status_code , [number] ) [EOL] [EOL] contest = json . loads ( rv . data . decode ( [string] ) ) [EOL] self . assertEqual ( contest . get ( [string] ) , [string] ) [EOL] [EOL] def test_signup ( self ) : [EOL] [docstring] [EOL] setup_contest ( ) [EOL] [EOL] data = dict ( username = [string] , name = [string] , password = [string] , password2 = [string] , contest_name = [string] , ) [EOL] [EOL] rv = self . post_json ( [string] , data ) [EOL] self . assertEqual ( rv . status_code , [number] , rv . data ) [EOL] [EOL] token = self . get_jwt_token ( data [ [string] ] , data [ [string] ] ) [EOL] self . assertIsNotNone ( token ) [EOL] [EOL] def test_signup_with_extra_signup_fields ( self ) : [EOL] [docstring] [EOL] setup_contest ( ) [EOL] util . set_configuration ( [string] , json . dumps ( [ [string] ] ) ) [EOL] [EOL] data = dict ( username = [string] , name = [string] , password = [string] , password2 = [string] , contest_name = [string] , example_extra_field = [string] , ) [EOL] [EOL] rv = self . post_json ( [string] , data ) [EOL] self . assertEqual ( rv . status_code , [number] , rv . data ) [EOL] [EOL] token = self . get_jwt_token ( data [ [string] ] , data [ [string] ] ) [EOL] self . assertIsNotNone ( token ) [EOL] [EOL] user = model . User . query . filter_by ( username = data [ [string] ] ) . scalar ( ) [EOL] self . assertEqual ( user . get_metadata_item ( [string] ) , data [ [string] ] ) [EOL] [EOL] def test_get_languages ( self ) : [EOL] [docstring] [EOL] setup_contest ( ) [EOL] [EOL] num_langs = model . Language . query . count ( ) [EOL] [EOL] rv = self . jwt_get ( [string] ) [EOL] self . assertEqual ( rv . status_code , [number] ) [EOL] [EOL] langs = json . loads ( rv . data . decode ( [string] ) ) [EOL] self . assertEqual ( len ( langs ) , num_langs ) [EOL] [EOL] def test_get_clarifications ( self ) : [EOL] [docstring] [EOL] setup_contest ( ) [EOL] [EOL] num_clars = model . Clarification . query . count ( ) [EOL] [EOL] rv = self . jwt_get ( [string] ) [EOL] self . assertEqual ( rv . status_code , [number] ) [EOL] [EOL] clars = json . loads ( rv . data . decode ( [string] ) ) [EOL] self . assertEqual ( len ( clars ) , num_clars ) [EOL] [EOL] [EOL] def setup_contest ( ) : [EOL] roles = { x . name : x for x in model . UserRole . query . all ( ) } [EOL] test_contestant = model . User ( [string] , [string] , [string] , user_roles = [ roles [ [string] ] ] ) [EOL] test_executioner = model . User ( [string] , [string] , [string] , user_roles = [ roles [ [string] ] ] ) [EOL] test_contest = model . Contest ( [string] , util . str_to_dt ( [string] ) , util . str_to_dt ( [string] ) , True , ) [EOL] io_problem_type = model . ProblemType . query . filter_by ( name = [string] ) . one ( ) [EOL] test_problem = model . Problem ( io_problem_type , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] test_contest . problems . append ( test_problem ) [EOL] test_contest . users . append ( test_contestant ) [EOL] [EOL] python = model . Language . query . filter_by ( name = [string] ) . one ( ) [EOL] test_run = model . Run ( test_contestant , test_contest , python , test_problem , util . str_to_dt ( [string] ) , [string] , test_problem . secret_input , test_problem . secret_output , True , ) [EOL] [EOL] db_session . add_all ( [ test_executioner , test_contestant , test_contest , test_problem , test_run ] ) [EOL] db_session . commit ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[None,builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[None,builtins.bool,builtins.str]]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Dict , Any [EOL] import subprocess [EOL] import typing [EOL] import logging [EOL] import os [EOL] import signal [EOL] import subprocess [EOL] import sys [EOL] import time [EOL] [EOL] from selenium import webdriver [EOL] from docker . errors import ImageNotFound , ContainerError , APIError [EOL] from docker . api import exec_api [EOL] import docker [EOL] [EOL] logging . basicConfig ( level = logging . INFO ) [EOL] [EOL] [comment] [EOL] POSTGRES_PORT = [number] [EOL] POSTGRES_ENVIRON = { [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] client = docker . from_env ( ) [EOL] [EOL] def main ( ) : [EOL] postgres_container = None [EOL] courthouse_pid = None [EOL] try : [EOL] logging . info ( [string] ) [EOL] ports = { [string] : POSTGRES_PORT } [EOL] postgres_container = client . containers . run ( [string] , detach = True , environment = POSTGRES_ENVIRON , ports = ports ) [EOL] [EOL] [comment] [EOL] iterations = [number] [EOL] while not is_postgres_up ( postgres_container ) : [EOL] logging . info ( [string] ) [EOL] time . sleep ( [number] ) [EOL] iterations += [number] [EOL] [EOL] if iterations == [number] : [EOL] logging . fatal ( [string] ) [EOL] sys . exit ( [number] ) [EOL] time . sleep ( [number] ) [EOL] [EOL] courthouse_pid = start_courthouse ( ) [EOL] [EOL] run_tests ( ) [EOL] except ImageNotFound : [EOL] logging . error ( [string] ) [EOL] raise [EOL] except ContainerError : [EOL] logging . error ( [string] ) [EOL] raise [EOL] except APIError : [EOL] logging . error ( [string] ) [EOL] raise [EOL] except Exception : [EOL] logging . exception ( [string] ) [EOL] finally : [EOL] if postgres_container : [EOL] postgres_container . remove ( force = True ) [EOL] [EOL] if courthouse_pid : [EOL] os . kill ( courthouse_pid , signal . SIGINT ) [EOL] [EOL] [EOL] def start_courthouse ( ) : [EOL] os . chdir ( [string] ) [EOL] proc = subprocess . Popen ( [ [string] , str ( POSTGRES_PORT ) ] ) [EOL] [EOL] time . sleep ( [number] ) [EOL] [EOL] with open ( [string] ) as f : [EOL] courthouse_master_pid = int ( f . read ( ) ) [EOL] [EOL] return courthouse_master_pid [EOL] [EOL] [EOL] def is_postgres_up ( container ) : [EOL] cmd = [string] [EOL] exec_job = client . api . exec_create ( container . id , cmd ) [EOL] [EOL] client . api . exec_start ( exec_job [ [string] ] ) [EOL] status = client . api . exec_inspect ( exec_job [ [string] ] ) [EOL] [EOL] return status [ [string] ] == [number] [EOL] [EOL] [EOL] def run_tests ( ) : [EOL] driver = webdriver . Chrome ( ) [EOL] driver . get ( [string] ) [EOL] [EOL] driver . find_element_by_css_selector [EOL] [EOL] driver . implicitly_wait ( [number] ) [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Dict , Any , List [EOL] import os [EOL] import argparse [EOL] import typing [EOL] import requests [EOL] import argparse [EOL] import logging [EOL] import os [EOL] import shutil [EOL] import signal [EOL] import stat [EOL] import subprocess [EOL] import sys [EOL] import time [EOL] import traceback [EOL] import uuid [EOL] [EOL] from os import path [EOL] [EOL] import docker [EOL] import requests [EOL] [EOL] from requests . auth import HTTPBasicAuth [EOL] [EOL] logging . basicConfig ( level = logging . INFO , format = [string] , datefmt = [string] ) [EOL] [EOL] SCRIPT_DIR = path . dirname ( path . realpath ( __file__ ) ) [EOL] [EOL] EXECUTOR_IMAGE_NAME = [string] [EOL] SHARED_DATA_DIR = path . join ( SCRIPT_DIR , [string] ) [EOL] [EOL] CPU_PERIOD = [number] [EOL] MEM_LIMIT = [string] [EOL] PID_LIMIT = [number] [EOL] MEM_SWAPPINESS = [number] [EOL] CONTAINER_USER = [string] [EOL] WAIT_SECONDS = [number] [EOL] [EOL] [EOL] class Executor : [EOL] def __init__ ( self , conf ) : [EOL] self . writ = None [EOL] self . conf = conf [EOL] self . client = docker . from_env ( ) [EOL] self . container = None [EOL] [EOL] def start ( self ) : [EOL] while True : [EOL] self . _run ( ) [EOL] [EOL] def _run ( self ) : [EOL] try : [EOL] self . writ = self . get_writ ( ) [EOL] if not self . writ : [EOL] time . sleep ( WAIT_SECONDS ) [EOL] else : [EOL] self . handle_writ ( ) [EOL] except KeyboardInterrupt : [EOL] logging . info ( [string] ) [EOL] if self . writ : [EOL] self . return_writ_without_output ( ) [EOL] sys . exit ( [number] ) [EOL] except Exception : [EOL] logging . exception ( [string] ) [EOL] sys . exit ( [number] ) [EOL] [EOL] def handle_writ ( self ) : [EOL] logging . info ( [string] , self . writ . run_id , self . writ . language ) [EOL] [EOL] signal . signal ( signal . SIGALRM , raise_timeout ) [EOL] signal . alarm ( self . conf [ [string] ] ) [EOL] [EOL] try : [EOL] if self . conf [ [string] ] : [EOL] out = self . insecure_run_program ( ) [EOL] else : [EOL] out = self . docker_run_program ( ) [EOL] [EOL] signal . alarm ( [number] ) [EOL] except TimedOutException : [EOL] logging . info ( [string] , self . writ . run_id ) [EOL] self . submit_writ ( [string] , RunState . TIMED_OUT ) [EOL] except OutputLimitExceeded : [EOL] logging . info ( [string] , self . writ . run_id ) [EOL] self . submit_writ ( [string] , RunState . OUTPUT_LIMIT_EXCEEDED ) [EOL] except NoOutputException : [EOL] logging . info ( [string] , self . writ . run_id ) [EOL] self . submit_writ ( [string] , RunState . NO_OUTPUT ) [EOL] except docker . errors . APIError : [EOL] self . return_writ_without_output ( ) [EOL] traceback . print_exc ( ) [EOL] else : [EOL] self . submit_writ ( self . clean_output ( out ) , RunState . EXECUTED ) [EOL] finally : [EOL] signal . alarm ( [number] ) [EOL] if self . container : [EOL] self . container . remove ( force = True ) [EOL] self . container = None [EOL] try : [EOL] shutil . rmtree ( self . writ . shared_data_dir ) [EOL] except FileNotFoundError : [EOL] pass [EOL] [EOL] self . writ = None [EOL] [EOL] def clean_output ( self , s ) : [EOL] [comment] [EOL] [comment] [EOL] if [string] in s : [EOL] logging . info ( [string] , self . writ . run_id ) [EOL] s = s . replace ( [string] , [string] ) [EOL] return s [EOL] [EOL] def create_share_files ( self , share_folder , runner_str , input_str , program_str ) : [EOL] files = { [string] : runner_str , [string] : input_str , [string] : program_str } [EOL] [EOL] for fname , contents in files . items ( ) : [EOL] loc = path . join ( share_folder , fname ) [EOL] with open ( loc , [string] ) as f : [EOL] f . write ( contents . replace ( [string] , [string] ) ) [EOL] [EOL] st = os . stat ( loc ) [EOL] os . chmod ( loc , st . st_mode | stat . S_IEXEC ) [EOL] [EOL] def get_writ ( self ) : [EOL] try : [EOL] r = requests . get ( self . conf [ [string] ] , auth = HTTPBasicAuth ( self . conf [ [string] ] , self . conf [ [string] ] ) ) [EOL] except Exception : [EOL] logging . warn ( [string] , self . conf [ [string] ] ) [EOL] return None [EOL] [EOL] if r . status_code != [number] : [EOL] return None [EOL] [EOL] try : [EOL] if r . json ( ) . get ( [string] ) != [string] : [EOL] return None [EOL] except ValueError : [EOL] logging . warn ( [string] ) [EOL] return None [EOL] [EOL] return Writ . from_dict ( r . json ( ) ) [EOL] [EOL] def submit_writ ( self , out , state ) : [EOL] logging . info ( [string] , self . writ . run_id , state ) [EOL] try : [EOL] r = requests . post ( self . conf [ [string] ] . format ( self . writ . run_id ) , json = { [string] : out , [string] : state } , auth = HTTPBasicAuth ( self . conf [ [string] ] , self . conf [ [string] ] ) ) [EOL] [EOL] if r . status_code != [number] : [EOL] logging . error ( [string] , r . status_code , r . text ) [EOL] [EOL] except requests . exceptions . ConnectionError : [EOL] logging . error ( [string] , self . writ . run_id ) [EOL] [EOL] self . current_writ = None [EOL] [EOL] def return_writ_without_output ( self ) : [EOL] logging . info ( [string] , self . writ . run_id ) [EOL] [EOL] url = self . conf [ [string] ] + [string] + str ( self . writ . run_id ) [EOL] try : [EOL] requests . post ( url , auth = HTTPBasicAuth ( self . conf [ [string] ] , self . conf [ [string] ] ) ) [EOL] except requests . exceptions . ConnectionError : [EOL] logging . warn ( [string] , self . writ . run_id ) [EOL] [EOL] def insecure_run_program ( self ) : [EOL] container_shared_data_dir = self . writ . shared_data_dir [EOL] [EOL] runner_str = self . writ . run_script [EOL] runner_str = runner_str . replace ( [string] , path . join ( container_shared_data_dir , [string] ) ) [EOL] runner_str = runner_str . replace ( [string] , path . join ( container_shared_data_dir , [string] ) ) [EOL] runner_str = runner_str . replace ( [string] , container_shared_data_dir ) [EOL] [EOL] os . makedirs ( container_shared_data_dir ) [EOL] self . create_share_files ( container_shared_data_dir , runner_str , self . writ . input , self . writ . source_code , ) [EOL] [EOL] runner_file = path . join ( container_shared_data_dir , [string] ) [EOL] try : [EOL] out = subprocess . check_output ( [ runner_file ] , shell = True , stderr = subprocess . STDOUT ) . decode ( [string] ) [EOL] except subprocess . CalledProcessError as e : [EOL] out = e . output . decode ( [string] ) [EOL] [EOL] if len ( out ) > self . conf [ [string] ] : [EOL] raise OutputLimitExceeded ( ) [EOL] [EOL] if len ( out ) == [number] : [EOL] raise NoOutputException ( ) [EOL] [EOL] return out [EOL] [EOL] def docker_run_program ( self ) : [EOL] container_shared_data_dir = self . writ . shared_data_dir [EOL] [EOL] runner_str = self . writ . run_script [EOL] runner_str = runner_str . replace ( [string] , [string] ) [EOL] runner_str = runner_str . replace ( [string] , [string] ) [EOL] runner_str = runner_str . replace ( [string] , [string] ) [EOL] [EOL] os . makedirs ( container_shared_data_dir ) [EOL] self . create_share_files ( container_shared_data_dir , runner_str , self . writ . input , self . writ . source_code ) [EOL] shared_volumes = { container_shared_data_dir : { [string] : [string] , [string] : [string] } } [EOL] self . container = self . client . containers . run ( EXECUTOR_IMAGE_NAME , [string] , detach = True , working_dir = [string] , volumes = shared_volumes , user = CONTAINER_USER , network_disabled = True , read_only = False , mem_swappiness = MEM_SWAPPINESS , pids_limit = PID_LIMIT , cpu_period = CPU_PERIOD , mem_limit = MEM_LIMIT ) [EOL] [EOL] out = [ ] [EOL] rolling_size = [number] [EOL] for line in self . container . logs ( stream = True ) : [EOL] chunk = line . decode ( [string] ) [EOL] rolling_size += len ( chunk ) [EOL] [EOL] if rolling_size > self . conf [ [string] ] : [EOL] raise OutputLimitExceeded ( ) [EOL] [EOL] out . append ( chunk ) [EOL] [EOL] if rolling_size == [number] : [EOL] raise NoOutputException ( ) [EOL] [EOL] return [string] . join ( out ) [EOL] [EOL] [EOL] class Writ : [EOL] def __init__ ( self , source_code , run_script , input , run_id , return_url , language ) : [EOL] self . source_code = source_code [EOL] self . run_script = run_script [EOL] self . input = input [EOL] self . run_id = run_id [EOL] self . return_url = return_url [EOL] self . language = language [EOL] [EOL] self . container_ident = [string] . format ( self . run_id , self . language , str ( uuid . uuid4 ( ) ) ) [EOL] self . shared_data_dir = path . join ( SHARED_DATA_DIR , self . container_ident ) [EOL] [EOL] @ staticmethod def from_dict ( writ_json ) : [EOL] if writ_json . get ( [string] ) == [string] : [EOL] return None [EOL] [EOL] source_code = writ_json . get ( [string] ) [EOL] run_script = writ_json . get ( [string] ) [EOL] input = writ_json . get ( [string] ) [EOL] run_id = writ_json . get ( [string] ) [EOL] return_url = writ_json . get ( [string] ) [EOL] language = writ_json . get ( [string] ) [EOL] [EOL] if ( source_code is None or run_script is None or input is None or run_id is None or return_url is None or language is None ) : [EOL] logging . error ( [string] , writ_json ) [EOL] return None [EOL] [EOL] return Writ ( source_code = source_code , run_script = run_script , input = input , run_id = run_id , return_url = return_url , language = language , ) [EOL] [EOL] [EOL] def get_conf ( ) : [EOL] parser = argparse . ArgumentParser ( description = __doc__ ) [EOL] parser . add_argument ( [string] , [string] , action = [string] , help = [string] , ) [EOL] parser . add_argument ( [string] , default = [string] , help = [string] , ) [EOL] parser . add_argument ( [string] , [string] , default = [string] , help = [string] , ) [EOL] parser . add_argument ( [string] , [string] , default = [string] , help = [string] , ) [EOL] parser . add_argument ( [string] , [string] , default = [number] , type = int , help = [string] , ) [EOL] parser . add_argument ( [string] , [string] , default = [number] , type = int , help = [string] , ) [EOL] [EOL] args = parser . parse_args ( ) [EOL] [EOL] conf = vars ( args ) [comment] [EOL] conf [ [string] ] = [string] . format ( conf [ [string] ] ) [EOL] conf [ [string] ] = [string] . format ( conf [ [string] ] ) [EOL] conf [ [string] ] = [string] . format ( conf [ [string] ] ) [EOL] return conf [EOL] [EOL] [EOL] class OutputLimitExceeded ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class NoOutputException ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class TimedOutException ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] def raise_timeout ( signum , frame ) : [EOL] raise TimedOutException ( ) [EOL] [EOL] [EOL] class RunState : [EOL] CONTEST_HAS_NOT_BEGUN = [string] [EOL] CONTEST_ENDED = [string] [EOL] SUCCESSFUL = [string] [EOL] FAILED = [string] [EOL] EXECUTED = [string] [EOL] JUDGING = [string] [EOL] NO_OUTPUT = [string] [EOL] TIMED_OUT = [string] [EOL] OUTPUT_LIMIT_EXCEEDED = [string] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] Executor ( get_conf ( ) ) . start ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $os.stat_result$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 $os.stat_result$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import json [EOL] import re [EOL] import unittest [EOL] [EOL] import responses [EOL] [EOL] from executor import Executor , get_conf [EOL] [EOL] [EOL] def get_test_conf ( ) : [EOL] conf = get_conf ( ) [EOL] conf [ [string] ] = True [EOL] conf [ [string] ] = [number] [EOL] conf [ [string] ] = [number] [EOL] return conf [EOL] [EOL] [EOL] def get_test_writ ( ) : [EOL] return { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] } [EOL] [EOL] [EOL] def setup_get_writ_resp ( writ ) : [EOL] responses . add ( responses . GET , re . compile ( [string] ) , json = writ , status = [number] ) [EOL] [EOL] [EOL] def setup_submit_writ_resp ( callback ) : [EOL] responses . add_callback ( responses . POST , re . compile ( [string] ) , callback = callback ) [EOL] [EOL] [EOL] def setup_return_writ_resp ( ) : [EOL] responses . add ( responses . POST , re . compile ( [string] ) , json = [string] , status = [number] ) [EOL] [EOL] [EOL] class ExecutorTest ( unittest . TestCase ) : [EOL] @ responses . activate def test_normal_run ( self ) : [EOL] def submit_callback ( request ) : [EOL] resp = json . loads ( request . body . decode ( [string] ) ) [EOL] self . assertEqual ( resp [ [string] ] , [string] ) [EOL] self . assertEqual ( resp [ [string] ] , [string] ) [EOL] return ( [number] , { } , [string] ) [EOL] [EOL] setup_get_writ_resp ( get_test_writ ( ) ) [EOL] setup_submit_writ_resp ( submit_callback ) [EOL] Executor ( get_test_conf ( ) ) . _run ( ) [EOL] [EOL] @ responses . activate def test_return_writ ( self ) : [EOL] setup_get_writ_resp ( get_test_writ ( ) ) [EOL] setup_return_writ_resp ( ) [EOL] Executor ( get_test_conf ( ) ) . _run ( ) [EOL] [EOL] @ responses . activate def test_run_timelimit ( self ) : [EOL] def submit_callback ( request ) : [EOL] resp = json . loads ( request . body . decode ( [string] ) ) [EOL] self . assertEqual ( resp [ [string] ] , [string] ) [EOL] self . assertEqual ( resp [ [string] ] , [string] ) [EOL] return ( [number] , { } , [string] ) [EOL] [EOL] test_writ = get_test_writ ( ) [EOL] test_writ [ [string] ] = [string] [EOL] setup_get_writ_resp ( test_writ ) [EOL] setup_submit_writ_resp ( submit_callback ) [EOL] Executor ( get_test_conf ( ) ) . _run ( ) [EOL] [EOL] @ responses . activate def test_run_outputlimit ( self ) : [EOL] def submit_callback ( request ) : [EOL] resp = json . loads ( request . body . decode ( [string] ) ) [EOL] self . assertEqual ( resp [ [string] ] , [string] ) [EOL] self . assertEqual ( resp [ [string] ] , [string] ) [EOL] return ( [number] , { } , [string] ) [EOL] [EOL] test_writ = get_test_writ ( ) [EOL] test_writ [ [string] ] = [string] [EOL] setup_get_writ_resp ( test_writ ) [EOL] setup_submit_writ_resp ( submit_callback ) [EOL] Executor ( get_test_conf ( ) ) . _run ( ) [EOL] [EOL] @ responses . activate def test_run_with_compile_error ( self ) : [EOL] def submit_callback ( request ) : [EOL] resp = json . loads ( request . body . decode ( [string] ) ) [EOL] self . assertIn ( [string] , resp [ [string] ] ) [EOL] self . assertEqual ( resp [ [string] ] , [string] ) [EOL] return ( [number] , { } , [string] ) [EOL] [EOL] test_writ = get_test_writ ( ) [EOL] test_writ [ [string] ] = [string] [EOL] setup_get_writ_resp ( test_writ ) [EOL] setup_submit_writ_resp ( submit_callback ) [EOL] Executor ( get_test_conf ( ) ) . _run ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0