from typing import List , Any [EOL] import typing [EOL] import os [EOL] from dotenv import load_dotenv [EOL] [EOL] dotenv_path = os . path . join ( os . path . dirname ( __file__ ) , [string] ) [EOL] load_dotenv ( dotenv_path ) [EOL] [EOL] from config . settings import settings [EOL] import django [EOL] [EOL] django . setup ( ) [EOL] [EOL] from apistar import Component , Include , Route [EOL] from apistar . backends import django_orm [EOL] from apistar . frameworks . wsgi import WSGIApp as App [EOL] from apistar_jwt . authentication import get_jwt [EOL] from apistar_jwt . token import JWT [EOL] [EOL] from envelopes import views [EOL] [EOL] [EOL] account_routes = [ Route ( [string] , [string] , views . list_accounts ) , Route ( [string] , [string] , views . create_account ) , Route ( [string] , [string] , views . get_account ) , Route ( [string] , [string] , views . update_account ) , Route ( [string] , [string] , views . delete_account ) , ] [EOL] [EOL] envelope_routes = [ ] [EOL] [EOL] routes = [ Include ( [string] , account_routes ) , ] [EOL] [EOL] [EOL] components = [ Component ( JWT , init = get_jwt ) ] [EOL] [EOL] components = components + django_orm . components [EOL] [EOL] app = App ( routes = routes , components = components , settings = settings , commands = django_orm . commands , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Type [EOL] import typing [EOL] import envelopes [EOL] from apistar import typesystem [EOL] [EOL] [comment] [EOL] from . import models [EOL] [EOL] [EOL] class Account ( typesystem . Object ) : [EOL] properties = { [string] : typesystem . integer ( minimum = [number] ) , [string] : typesystem . string ( ) , [string] : typesystem . number ( ) , [string] : typesystem . integer ( minimum = [number] ) , [string] : typesystem . string ( ) , [string] : typesystem . string ( ) , } [EOL] [EOL] [EOL] class Category ( typesystem . Object ) : [EOL] properties = { [string] : typesystem . string ( min_length = [number] , max_length = [number] ) , } [EOL] [EOL] [EOL] class Envelope ( typesystem . Object ) : [EOL] properties = { [string] : typesystem . integer ( minimum = [number] ) , [string] : typesystem . string ( min_length = [number] ) , [string] : typesystem . integer ( minimum = [number] ) , [string] : typesystem . string ( min_length = [number] , max_length = [number] ) , [string] : typesystem . string ( max_length = [number] ) , [string] : typesystem . number ( ) , [string] : typesystem . number ( ) , [string] : typesystem . integer ( minimum = [number] ) , [string] : typesystem . string ( format = [string] ) , [string] : typesystem . string ( format = [string] ) , } [EOL] [EOL] [EOL] class ActionTypeEnum ( typesystem . Enum ) : [EOL] enum = [ models . Transaction . ACTION_TYPE_CREATED , models . Transaction . ACTION_TYPE_DEPOSITED , models . Transaction . ACTION_TYPE_WITHDRAWN , ] [EOL] [EOL] [EOL] class Transaction ( typesystem . Object ) : [EOL] properties = { [string] : typesystem . integer ( minimum = [number] ) , [string] : typesystem . string ( max_length = [number] ) , [string] : typesystem . integer ( minimum = [number] ) , [string] : typesystem . string ( format = [string] ) , [string] : typesystem . integer ( minimum = [number] ) , [string] : ActionTypeEnum , [string] : typesystem . number ( ) , [string] : typesystem . string ( max_length = [number] ) , [string] : typesystem . integer ( minimum = [number] ) , [string] : typesystem . string ( ) , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from django . apps import AppConfig [EOL] [EOL] [EOL] class EnvelopesConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
[comment] [EOL] from typing import Tuple , Type [EOL] import typing [EOL] import envelopes [EOL] from django import forms [EOL] [EOL] [comment] [EOL] from . models import Account , Category , Envelope , Transaction [EOL] [EOL] [EOL] class AccountForm ( forms . ModelForm ) : [EOL] balance = forms . DecimalField ( max_digits = [number] , decimal_places = [number] ) [EOL] [EOL] class Meta : [EOL] model = Account [EOL] fields = ( [string] , [string] ) [EOL] [EOL] [EOL] class EnvelopeForm ( forms . ModelForm ) : [EOL] balance = forms . DecimalField ( max_digits = [number] , decimal_places = [number] ) [EOL] budget = forms . DecimalField ( max_digits = [number] , decimal_places = [number] ) [EOL] [EOL] class Meta : [EOL] model = Envelope [EOL] fields = ( [string] , [string] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] class CategoryForm ( forms . ModelForm ) : [EOL] class Meta : [EOL] model = Category [EOL] fields = ( [string] , ) [EOL] [EOL] [EOL] class TransactionForm ( forms . ModelForm ) : [EOL] delta = forms . DecimalField ( max_digits = [number] , decimal_places = [number] ) [EOL] [EOL] class Meta : [EOL] model = Transaction [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[envelopes.forms.AccountForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[envelopes.models.Transaction]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[envelopes.forms.EnvelopeForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[envelopes.forms.EnvelopeForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[envelopes.models.Transaction]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[envelopes.models.Transaction]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[envelopes.forms.TransactionForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[envelopes.models.Transaction]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] import envelopes [EOL] import apistar [EOL] from apistar import Response , http [EOL] from apistar . backends . django_orm import Session [EOL] from apistar . interfaces import Auth [EOL] from django . core . exceptions import ObjectDoesNotExist [EOL] [EOL] [comment] [EOL] from . import schemas [EOL] from . forms import AccountForm , CategoryForm , EnvelopeForm , TransactionForm [EOL] [EOL] account_schema = schemas . Account ( exclude = ( [string] , ) ) [EOL] category_schema = schemas . Category ( exclude = ( [string] , ) ) [EOL] envelope_schema = schemas . Envelope ( exclude = ( [string] , ) ) [EOL] transaction_schema = schemas . Envelope ( exclude = ( [string] , ) ) [EOL] [EOL] [EOL] def retrieve ( queryset ) : [EOL] try : [EOL] if queryset . exists ( ) : [EOL] return { [string] : queryset . get ( ) , [string] : False , [string] : None } [EOL] except ObjectDoesNotExist as e : [EOL] return { [string] : None , [string] : True , [string] : e } [EOL] except Exception as f : [EOL] return { [string] : None , [string] : True , [string] : f } [EOL] return { [string] : queryset , [string] : True , [string] : None } [EOL] [EOL] [EOL] def handle_error ( props ) : [EOL] if props [ [string] ] : [EOL] return Response ( { [string] : [string] } , status = [number] ) [EOL] return Response ( { [string] : [string] } , status = [number] ) [EOL] [EOL] [EOL] def list_accounts ( request , auth , session ) : [EOL] queryset = session . Account . objects . filter ( owner = auth . user [ [string] ] ) [EOL] accounts = account_schema . dump ( queryset , many = True ) [EOL] return accounts . data [EOL] [EOL] [EOL] def get_account ( request , auth , session , uuid ) : [EOL] queryset = session . Account . objects . filter ( uuid = uuid ) . filter ( owner = auth . user [ [string] ] ) [EOL] props = retrieve ( queryset ) [EOL] if props [ [string] ] : [EOL] return handle_error ( props ) [EOL] account , errors = account_schema . dump ( props [ [string] ] ) [EOL] if errors : [EOL] return Response ( errors , status = [number] ) [EOL] return account [EOL] [EOL] [EOL] def create_account ( request , auth , session , data ) : [EOL] account_schema . context [ [string] ] = session [EOL] if hasattr ( data , [string] ) and not data . get ( [string] ) : [EOL] data [ [string] ] = auth . user [ [string] ] [EOL] account , errors = account_schema . load ( data ) [EOL] if errors : [EOL] return Response ( errors , status = [number] ) [EOL] account . save ( ) [EOL] return Response ( account_schema . dump ( account ) . data , status = [number] ) [EOL] [EOL] [EOL] def update_account ( request , auth , session , data , uuid ) : [comment] [EOL] queryset = session . Account . objects . filter ( uuid = uuid ) . filter ( owner = auth . user [ [string] ] ) [EOL] props = retrieve ( queryset ) [EOL] if props [ [string] ] : [EOL] return handle_error ( props ) [EOL] form = AccountForm ( data , instance = props [ [string] ] ) [EOL] if form . is_valid ( ) : [EOL] account = form . save ( ) [EOL] return account_schema . dump ( account ) . data [EOL] return Response ( form . errors , status = [number] ) [EOL] [EOL] [EOL] def delete_account ( request , auth , session , uuid ) : [EOL] queryset = session . Account . objects . filter ( uuid = uuid ) . filter ( owner = auth . user [ [string] ] ) [EOL] props = retrieve ( queryset ) [EOL] if props [ [string] ] : [EOL] return handle_error ( props ) [EOL] props [ [string] ] . delete ( ) [EOL] return Response ( None , status = [number] ) [EOL] [EOL] [EOL] def list_envelopes ( request , auth , session ) : [EOL] queryset = session . Envelope . objects . filter ( account__owner_id = auth . user [ [string] ] ) [EOL] envelopes = envelope_schema . dump ( queryset , many = True ) [EOL] return envelopes . data [EOL] [EOL] [EOL] def get_envelope ( request , auth , session , uuid ) : [EOL] queryset = session . Envelope . objects . filter ( uuid = uuid ) . filter ( account__owner_id = auth . user [ [string] ] ) [EOL] props = retrieve ( queryset ) [EOL] if props [ [string] ] : [EOL] return handle_error ( props ) [EOL] envelope , errors = envelope_schema . dump ( props [ [string] ] ) [EOL] if errors : [EOL] return Response ( errors , status = [number] ) [EOL] return envelope [EOL] [EOL] [EOL] def create_envelope ( request , auth , session , data ) : [EOL] envelope_schema . context [ [string] ] = session [EOL] if hasattr ( data , [string] ) and not data . get ( [string] ) : [EOL] data [ [string] ] = auth . user [ [string] ] [EOL] envelope , errors = envelope_schema . load ( data ) [EOL] if errors : [EOL] return Response ( errors , status = [number] ) [EOL] envelope . save ( ) [EOL] return Response ( envelope_schema . dump ( envelope ) . data , status = [number] ) [EOL] [EOL] [EOL] def update_envelope ( request , auth , session , data , uuid ) : [comment] [EOL] queryset = session . Envelope . objects . filter ( uuid = uuid ) . filter ( account__owner_id = auth . user [ [string] ] ) [EOL] props = retrieve ( queryset ) [EOL] if props [ [string] ] : [EOL] return handle_error ( props ) [EOL] form = EnvelopeForm ( data , instance = props [ [string] ] ) [EOL] if form . is_valid ( ) : [EOL] envelope = form . save ( ) [EOL] return envelope_schema . dump ( envelope ) . data [EOL] return Response ( form . errors , status = [number] ) [EOL] [EOL] [EOL] def delete_envelope ( request , auth , session , uuid ) : [EOL] queryset = session . Envelope . objects . filter ( uuid = uuid ) . filter ( account__owner = auth . user [ [string] ] ) [EOL] props = retrieve ( queryset ) [EOL] if props [ [string] ] : [EOL] return handle_error ( props ) [EOL] props [ [string] ] . delete ( ) [EOL] return Response ( None , status = [number] ) [EOL] [EOL] [EOL] def list_categories ( request , auth , session ) : [EOL] queryset = session . Category . objects . all ( ) [EOL] categories = category_schema . dump ( queryset , many = True ) [EOL] return categories . data [EOL] [EOL] [EOL] def get_category ( request , auth , session , name ) : [EOL] queryset = session . Category . objects . filter ( name = name ) [EOL] props = retrieve ( queryset ) [EOL] if props [ [string] ] : [EOL] return handle_error ( props ) [EOL] category , errors = category_schema . dump ( props [ [string] ] ) [EOL] if errors : [EOL] return Response ( errors , status = [number] ) [EOL] return category [EOL] [EOL] [EOL] def create_category ( request , auth , session , data ) : [EOL] category_schema . context [ [string] ] = session [EOL] category , errors = category_schema . load ( data ) [EOL] if errors : [EOL] return Response ( errors , status = [number] ) [EOL] category . save ( ) [EOL] return Response ( category_schema . dump ( category ) . data , status = [number] ) [EOL] [EOL] [EOL] def update_category ( request , auth , session , data , name ) : [comment] [EOL] queryset = session . Category . objects . filter ( name = name ) [EOL] props = retrieve ( queryset ) [EOL] if props [ [string] ] : [EOL] return handle_error ( props ) [EOL] form = CategoryForm ( data , instance = props [ [string] ] ) [EOL] if form . is_valid ( ) : [EOL] category = form . save ( ) [EOL] return category_schema . dump ( category ) . data [EOL] return Response ( form . errors , status = [number] ) [EOL] [EOL] [EOL] def delete_category ( request , auth , session , name ) : [EOL] queryset = session . Category . objects . filter ( name = name ) [EOL] props = retrieve ( queryset ) [EOL] if props [ [string] ] : [EOL] return handle_error ( props ) [EOL] props [ [string] ] . delete ( ) [EOL] return Response ( None , status = [number] ) [EOL] [EOL] [EOL] def list_transactions ( request , auth , session ) : [EOL] queryset = session . Transaction . objects . all ( ) [EOL] transactions = transaction_schema . dump ( queryset , many = True ) [EOL] return transactions . data [EOL] [EOL] [EOL] def get_transaction ( request , auth , session , friendly_id ) : [EOL] queryset = session . Transaction . objects . filter ( friendly_id = friendly_id ) [EOL] props = retrieve ( queryset ) [EOL] if props [ [string] ] : [EOL] return handle_error ( props ) [EOL] transaction , errors = transaction_schema . dump ( props [ [string] ] ) [EOL] if errors : [EOL] return Response ( errors , status = [number] ) [EOL] return transaction [EOL] [EOL] [EOL] def create_transaction ( request , auth , session , data ) : [comment] [EOL] transaction_schema . context [ [string] ] = session [EOL] transaction , errors = transaction_schema . load ( data ) [EOL] if errors : [EOL] return Response ( errors , status = [number] ) [EOL] transaction . save ( ) [EOL] return Response ( transaction_schema . dump ( transaction ) . data , status = [number] ) [EOL] [EOL] [EOL] def update_transaction ( request , auth , session , data , friendly_id ) : [comment] [EOL] queryset = session . Transaction . objects . filter ( friendly_id = friendly_id ) [EOL] props = retrieve ( queryset ) [EOL] if props [ [string] ] : [EOL] return handle_error ( props ) [EOL] form = TransactionForm ( data , instance = props [ [string] ] ) [EOL] if form . is_valid ( ) : [EOL] transaction = form . save ( ) [EOL] return transaction_schema . dump ( transaction ) . data [EOL] return Response ( form . errors , status = [number] ) [EOL] [EOL] [EOL] def delete_transaction ( request , auth , session , friendly_id ) : [EOL] queryset = session . Transaction . objects . filter ( friendly_id = friendly_id ) [EOL] props = retrieve ( queryset ) [EOL] if props [ [string] ] : [EOL] return handle_error ( props ) [EOL] props [ [string] ] . delete ( ) [EOL] return Response ( None , status = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $envelopes.schemas.Account$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $envelopes.schemas.Category$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $envelopes.schemas.Envelope$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $envelopes.schemas.Envelope$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $envelopes.schemas.Account$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $envelopes.schemas.Account$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $envelopes.schemas.Account$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $envelopes.schemas.Account$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $envelopes.schemas.Account$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $envelopes.schemas.Account$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $envelopes.schemas.Envelope$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $envelopes.schemas.Envelope$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $envelopes.schemas.Envelope$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $envelopes.schemas.Envelope$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $envelopes.schemas.Envelope$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $envelopes.schemas.Envelope$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $envelopes.schemas.Category$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $envelopes.schemas.Category$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $envelopes.schemas.Category$ 0 0 0 0 0 0 0 0 0 0 0 0 $envelopes.schemas.Category$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $envelopes.schemas.Category$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $envelopes.schemas.Category$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $envelopes.schemas.Envelope$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $envelopes.schemas.Envelope$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $envelopes.schemas.Envelope$ 0 0 0 0 0 0 0 0 0 0 0 0 $envelopes.schemas.Envelope$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $envelopes.schemas.Envelope$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $envelopes.schemas.Envelope$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] from django . conf import settings [EOL] from hashids import Hashids [EOL] [EOL] hashid = Hashids ( min_length = [number] , salt = getattr ( settings , [string] , [string] ) , alphabet = [string] , ) [EOL] [EOL] [EOL] def encode ( num ) : [EOL] return hashid . encode ( num ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . conf import settings [EOL] from django . db import migrations , models [EOL] import django . db . models . deletion [EOL] import uuid [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] initial = True [EOL] [EOL] dependencies = [ migrations . swappable_dependency ( settings . AUTH_USER_MODEL ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . DateTimeField ( auto_now_add = True , db_index = True ) ) , ( [string] , models . DateTimeField ( blank = True , null = True ) ) , ( [string] , models . AutoField ( primary_key = True , serialize = False ) ) , ( [string] , models . UUIDField ( default = uuid . uuid4 , editable = False , unique = True , verbose_name = [string] ) ) , ( [string] , models . DecimalField ( decimal_places = [number] , max_digits = [number] ) ) , ( [string] , models . OneToOneField ( on_delete = django . db . models . deletion . CASCADE , to = settings . AUTH_USER_MODEL ) ) , ] , options = { [string] : False , } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
[comment] [EOL] from typing import Any , List , Dict [EOL] import typing [EOL] import os [EOL] [EOL] [comment] [EOL] import pytest [EOL] from apistar import TestClient [EOL] from apistar_jwt . token import JWT [EOL] from django . contrib . auth import get_user_model [EOL] [EOL] [comment] [EOL] from app import app [EOL] from envelopes . models import Account [EOL] [EOL] User = get_user_model ( ) [EOL] [EOL] [EOL] def create_auth ( user ) : [EOL] payload = { [string] : user . id , [string] : user . email } [EOL] jwt = JWT . encode ( payload , os . environ . get ( [string] ) , algorithm = [string] ) [EOL] auth_header = { [string] : [string] . format ( jwt ) } [EOL] return { [string] : user , [string] : jwt , [string] : auth_header } [EOL] [EOL] [EOL] @ pytest . fixture ( ) def auth ( ) : [EOL] user , _ = User . objects . get_or_create ( email = [string] , password = [string] , ) [EOL] return create_auth ( user ) [EOL] [EOL] [EOL] @ pytest . fixture ( ) def accounts ( ) : [EOL] emails = [ [string] , [string] , [string] , ] [EOL] users = [ ] [EOL] for email in emails : [EOL] user , _ = User . objects . get_or_create ( email = email , password = [string] , ) [EOL] users . append ( user ) [EOL] accounts = [ ] [EOL] for u in users : [EOL] account , _ = Account . objects . get_or_create ( balance = [number] , owner = u , ) [EOL] accounts . append ( account ) [EOL] return accounts [EOL] [EOL] [EOL] def test_list_accounts ( auth , accounts ) : [EOL] client = TestClient ( app ) [EOL] res = client . get ( [string] , headers = auth [ [string] ] ) [EOL] assert res . status_code == [number] [EOL] for item in res . json ( ) : [EOL] assert item [ [string] ] == auth [ [string] ] . id [EOL] [EOL] auth = create_auth ( accounts [ [number] ] . owner ) [EOL] res = client . get ( [string] , headers = auth [ [string] ] ) [EOL] assert res . status_code == [number] [EOL] assert len ( res . json ( ) ) == [number] [EOL] assert res . json ( ) [ [number] ] [ [string] ] == str ( accounts [ [number] ] . uuid ) [EOL] [EOL] res = client . get ( [string] ) [EOL] assert res . status_code == [number] [EOL] [EOL] [EOL] def test_get_account ( auth , accounts ) : [EOL] client = TestClient ( app ) [EOL] url = [string] . format ( accounts [ [number] ] . uuid ) [EOL] res = client . get ( url , headers = auth [ [string] ] ) [EOL] assert res . status_code == [number] [EOL] assert res . json ( ) == { [string] : [string] } [EOL] [EOL] auth = create_auth ( accounts [ [number] ] . owner ) [EOL] res = client . get ( url , headers = auth [ [string] ] ) [EOL] assert res . status_code == [number] [EOL] assert res . json ( ) [ [string] ] == str ( accounts [ [number] ] . uuid ) [EOL] with pytest . raises ( KeyError ) : [EOL] res . json ( ) [ [string] ] [EOL] [EOL] res = client . get ( url ) [EOL] assert res . status_code == [number] [EOL] [EOL] [EOL] def test_create_account ( auth ) : [EOL] client = TestClient ( app ) [EOL] data = { [string] : [string] , [string] : auth [ [string] ] . id } [EOL] res = client . post ( [string] , headers = auth [ [string] ] , data = data ) [EOL] assert res . status_code == [number] [EOL] assert res . json ( ) [ [string] ] == data [ [string] ] [EOL] assert res . json ( ) [ [string] ] == data [ [string] ] [EOL] Account . objects . get ( uuid = res . json ( ) [ [string] ] ) . delete ( ) [EOL] [EOL] res = client . post ( [string] , data = data ) [EOL] assert res . status_code == [number] [EOL] [EOL] res = client . post ( [string] , headers = auth [ [string] ] , data = { [string] : data [ [string] ] } ) [EOL] assert res . status_code == [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def test_update_account ( accounts ) : [EOL] client = TestClient ( app ) [EOL] url = [string] . format ( accounts [ [number] ] . uuid ) [EOL] auth = create_auth ( accounts [ [number] ] . owner ) [EOL] data = { [string] : accounts [ [number] ] . balance + [number] , [string] : accounts [ [number] ] . owner . id } [EOL] res = client . patch ( url , headers = auth [ [string] ] , data = data ) [EOL] assert res . status_code == [number] [EOL] assert float ( res . json ( ) [ [string] ] ) == float ( accounts [ [number] ] . balance ) + [number] [EOL] uuid = res . json ( ) [ [string] ] [EOL] [EOL] res = client . patch ( url , { [string] : [number] } ) [EOL] assert res . status_code == [number] [EOL] [EOL] res = client . patch ( url , headers = auth [ [string] ] , data = { [string] : [number] } ) [EOL] assert res . status_code == [number] [EOL] [EOL] account = Account . objects . get ( uuid = uuid ) [EOL] account . balance = [number] [EOL] account . save ( ) [EOL] [EOL] [EOL] def test_delete_account ( accounts ) : [EOL] client = TestClient ( app ) [EOL] url = [string] . format ( accounts [ [number] ] . uuid ) [EOL] auth = create_auth ( accounts [ [number] ] . owner ) [EOL] uuid = accounts [ [number] ] . uuid [EOL] res = client . delete ( url , headers = auth [ [string] ] ) [EOL] assert res . status_code == [number] [EOL] assert not Account . objects . filter ( uuid = uuid ) . exists ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any