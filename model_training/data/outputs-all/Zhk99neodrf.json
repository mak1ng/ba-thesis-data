from typing import Type , Tuple , Any , List [EOL] import typing [EOL] import users [EOL] from rest_framework import serializers [EOL] from . models import User , Roles [EOL] from django . contrib . auth import authenticate [EOL] [EOL] [EOL] class UserSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = User [EOL] fields = ( [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class RolesSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = Roles [EOL] fields = ( [string] , [string] , ) [EOL] [EOL] [EOL] class RegistrationSerializer ( serializers . ModelSerializer ) : [EOL] password = serializers . CharField ( max_length = [number] , min_length = [number] , write_only = True ) [EOL] token = serializers . CharField ( max_length = [number] , read_only = True ) [EOL] [EOL] class Meta : [EOL] model = User [EOL] fields = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] def create ( self , validated_data ) : [EOL] return User . objects . create_user ( ** validated_data ) [EOL] [EOL] [EOL] class LoginSerializer ( serializers . Serializer ) : [EOL] login = serializers . CharField ( max_length = [number] ) [EOL] email = serializers . CharField ( max_length = [number] , read_only = True ) [EOL] password = serializers . CharField ( max_length = [number] , write_only = True ) [EOL] token = serializers . CharField ( max_length = [number] , read_only = True ) [EOL] [EOL] def validate ( self , data ) : [EOL] login = data . get ( ) [EOL] password = data . get ( ) [EOL] if login is None : [EOL] raise serializers . ValidationError ( [string] ) [EOL] if password is None : [EOL] raise serializers . ValidationError ( [string] ) [EOL] user = authenticate ( username = login , password = password ) [EOL] if user is None : [EOL] raise serializers . ValidationError ( [string] ) [EOL] if not user . is_active : [EOL] raise serializers . ValidationError ( [string] ) [EOL] return { [string] : user . login , [string] : user . email , [string] : user . token } [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.serializers.RegistrationSerializer.Meta]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.serializers.RegistrationSerializer.Meta]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.serializers.RegistrationSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.serializers.RegistrationSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.serializers.RegistrationSerializer.Meta]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.serializers.LoginSerializer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.serializers.LoginSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.serializers.LoginSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.serializers.LoginSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class UsersConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Any , List [EOL] import typing [EOL] from django . urls import path [EOL] [EOL] from . views import RegistrationAPIView , LoginAPIView , login , UserLogin [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ path ( [string] , RegistrationAPIView . as_view ( ) ) , path ( [string] , UserLogin . as_view ( ) ) , ]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any [EOL] import typing [EOL] import users [EOL] from rest_framework import status , generics [EOL] from rest_framework . authtoken . views import ObtainAuthToken [EOL] from rest_framework . generics import CreateAPIView [EOL] from rest_framework . response import Response [EOL] [EOL] from . serializers import * [EOL] from users . models import * [EOL] from rest_framework . authtoken . models import Token [EOL] from rest_framework . permissions import AllowAny [EOL] from rest_framework . status import ( HTTP_400_BAD_REQUEST , HTTP_404_NOT_FOUND , HTTP_200_OK ) [EOL] from rest_framework . decorators import api_view , permission_classes [EOL] from django . views . decorators . csrf import csrf_exempt [EOL] from django . contrib . auth import authenticate [EOL] [EOL] [EOL] class RegistrationAPIView ( CreateAPIView ) : [EOL] permission_classes = ( AllowAny , ) [EOL] serializer_class = RegistrationSerializer [EOL] [EOL] def post ( self , request , ** kwargs ) : [EOL] user = request . data [EOL] serializer = self . serializer_class ( data = user ) [EOL] serializer . is_valid ( raise_exception = True ) [EOL] serializer . save ( ) [EOL] return Response ( serializer . data , status = status . HTTP_201_CREATED ) [EOL] [EOL] [EOL] class LoginAPIView ( CreateAPIView ) : [EOL] permission_classes = ( AllowAny , ) [EOL] serializer_class = LoginSerializer [EOL] [EOL] def post ( self , request , ** kwargs ) : [EOL] user = request . data [EOL] serializer = self . serializer_class ( data = user ) [EOL] serializer . is_valid ( raise_exception = True ) [EOL] [EOL] return Response ( serializer . data , status = status . HTTP_200_OK ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] class UserLogin ( ObtainAuthToken ) : [EOL] permission_classes = ( AllowAny , ) [EOL] serializers_class = LoginSerializer [EOL] [EOL] def get ( self , request , format = None ) : [EOL] allquery = User . objects . all ( ) [EOL] serializer = LoginSerializer ( allquery , many = True ) [EOL] return Response ( serializer . data ) [EOL] [EOL] def post ( self , request , * args , ** kwargs ) : [EOL] serializer = self . serializer_class ( data = request . data , context = { [string] : request } ) [EOL] serializer . is_valid ( raise_exception = True ) [EOL] user = serializer . validated_data [ [string] ] [EOL] token , created = Token . objects . get_or_create ( user = user ) [EOL] return Response ( { [string] : user . pk , [string] : token . key , } ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] @ csrf_exempt @ api_view ( [ [string] ] ) @ permission_classes ( ( AllowAny , ) ) def login ( request ) : [EOL] username = request . data . get ( [string] ) [EOL] password = request . data . get ( [string] ) [EOL] if username is None or password is None : [EOL] return Response ( { [string] : [string] } , status = HTTP_400_BAD_REQUEST ) [EOL] user = authenticate ( username = username , password = password ) [EOL] if not user : [EOL] return Response ( { [string] : [string] } , status = HTTP_404_NOT_FOUND ) [EOL] token , _ = Token . objects . get_or_create ( user = user ) [EOL] return Response ( { [string] : token . key } , status = HTTP_200_OK ) [EOL] [EOL] [EOL] class RolesViewSet ( generics . ListCreateAPIView ) : [EOL] queryset = Roles . objects . all ( ) [EOL] serializer_class = RolesSerializer [EOL] [EOL] [EOL] class RolesDetailView ( generics . RetrieveUpdateDestroyAPIView ) : [EOL] queryset = Roles . objects . all ( ) [EOL] serializer_class = RolesSerializer [EOL] [EOL] [EOL] class UserViewSet ( generics . ListCreateAPIView ) : [EOL] queryset = User . objects . all ( ) [EOL] serializer_class = UserSerializer [EOL] [EOL] [EOL] class UserDetailView ( generics . RetrieveUpdateDestroyAPIView ) : [EOL] queryset = User . objects . all ( ) [EOL] serializer_class = UserSerializer [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.serializers.LoginSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $users.serializers.LoginSerializer$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $users.serializers.LoginSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.views.RolesViewSet]$ 0 0 0 0 0 0 0 0 0 $typing.Type[users.serializers.RolesSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.views.RolesDetailView]$ 0 0 0 0 0 0 0 0 0 $typing.Type[users.serializers.RolesSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.views.UserViewSet]$ 0 0 0 0 0 0 0 0 0 $typing.Type[users.serializers.UserSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.views.UserDetailView]$ 0 0 0 0 0 0 0 0 0 $typing.Type[users.serializers.UserSerializer]$ 0 0 0 0
	0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class FoodConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Type [EOL] import food [EOL] import typing [EOL] from django . db import models [EOL] from users . models import User [EOL] [EOL] [EOL] class Tables ( models . Model ) : [EOL] name = models . CharField ( max_length = [number] , verbose_name = [string] ) [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] [EOL] class Departments ( models . Model ) : [EOL] name = models . CharField ( max_length = [number] , verbose_name = [string] ) [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] [EOL] class Category ( models . Model ) : [EOL] name = models . CharField ( max_length = [number] , verbose_name = [string] ) [EOL] departmentsid = models . ForeignKey ( Departments , on_delete = models . CASCADE , verbose_name = [string] , null = True ) [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] [EOL] class Statuses ( models . Model ) : [EOL] name = models . CharField ( max_length = [number] , verbose_name = [string] , default = [string] ) [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] [EOL] class ServicePercentage ( models . Model ) : [EOL] name = models . IntegerField ( verbose_name = [string] , default = [number] , ) [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL] [EOL] [EOL] class Meals ( models . Model ) : [EOL] name = models . CharField ( max_length = [number] , verbose_name = [string] ) [EOL] categoryid = models . ForeignKey ( Category , on_delete = models . CASCADE , verbose_name = [string] , null = True , ) [EOL] description = models . CharField ( max_length = [number] , verbose_name = [string] ) [EOL] price = models . DecimalField ( max_digits = [number] , decimal_places = [number] , verbose_name = [string] ) [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] [EOL] class Orders ( models . Model ) : [EOL] waiterid = models . ForeignKey ( User , on_delete = models . CASCADE , verbose_name = [string] , null = True , ) [EOL] tablesid = models . ForeignKey ( Tables , on_delete = models . CASCADE , verbose_name = [string] , null = True , ) [EOL] statusid = models . ForeignKey ( Statuses , on_delete = models . CASCADE , verbose_name = [string] , null = True , ) [EOL] mealsid = models . ForeignKey ( Meals , on_delete = models . CASCADE , verbose_name = [string] , null = True , ) [EOL] tablesname = models . CharField ( max_length = [number] , verbose_name = [string] ) [EOL] date = models . DateTimeField ( blank = True , null = True , verbose_name = [string] , ) [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . tablesname [EOL] [EOL] [EOL] class MealsToOrders ( models . Model ) : [EOL] count = models . IntegerField ( default = [number] , verbose_name = [string] , null = True , ) [EOL] orderid = models . ForeignKey ( Orders , on_delete = models . CASCADE , verbose_name = [string] , null = True , ) [EOL] mealsid = models . ForeignKey ( Meals , on_delete = models . CASCADE , verbose_name = [string] , null = True , ) [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL] [EOL] [EOL] class Checks ( models . Model ) : [EOL] orderid = models . ForeignKey ( Orders , on_delete = models . CASCADE , verbose_name = [string] , null = True ) [EOL] percentage = models . ForeignKey ( ServicePercentage , on_delete = models . CASCADE , verbose_name = [string] , null = True ) [EOL] date = models . DateTimeField ( blank = True , null = True , verbose_name = [string] ) [EOL] mealsid = models . ForeignKey ( Meals , on_delete = models . CASCADE , verbose_name = [string] , null = True ) [EOL] totalsum = models . CharField ( max_length = [number] , verbose_name = [string] ) [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[food.models.Tables]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[food.models.Departments]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[food.models.Category]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[food.models.Category]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[food.models.Statuses]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[food.models.ServicePercentage]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[food.models.Meals]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[food.models.Meals]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[food.models.Meals]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[food.models.Meals]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[food.models.Orders]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[food.models.Orders]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[food.models.Orders]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[food.models.Orders]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[food.models.Orders]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[food.models.Orders]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[food.models.MealsToOrders]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[food.models.MealsToOrders]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[food.models.MealsToOrders]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[food.models.Checks]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[food.models.Checks]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[food.models.Checks]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[food.models.Checks]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[food.models.Checks]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
	0
	0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Type , Tuple , Any , List [EOL] import task [EOL] import typing [EOL] from rest_framework import serializers [EOL] from . models import * [EOL] [EOL] [EOL] class CategorySerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = Category [EOL] fields = ( [string] , [string] ) [EOL] [EOL] [EOL] class BranchSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = Branch [EOL] fields = ( [string] , [string] , [string] ) [EOL] [EOL] [EOL] class ContactSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = Contact [EOL] fields = ( [string] , [string] ) [EOL] [EOL] [EOL] class CourseSerializer ( serializers . ModelSerializer ) : [EOL] branches = BranchSerializer ( many = True , required = False ) [EOL] contacts = ContactSerializer ( many = True , required = False ) [EOL] [EOL] class Meta : [EOL] model = Course [EOL] fields = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] def create ( self , validated_data ) : [EOL] branches_data = validated_data . pop ( [string] ) [EOL] contacts_data = validated_data . pop ( [string] ) [EOL] course = Course . objects . create ( ** validated_data ) [EOL] branches_list = [ ] [EOL] contacts_list = [ ] [EOL] print ( branches_data ) [EOL] print ( contacts_data ) [EOL] for branches_details in branches_data : [EOL] branches_list . append ( Branch . objects . create ( course_id = course . id , ** branches_details ) ) [EOL] for contacts_details in contacts_data : [EOL] contacts_list . append ( Contact . objects . create ( course_id = course . id , ** contacts_details ) ) [EOL] course . save ( ) [EOL] return course [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[task.models.Course]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[task.models.Course]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[task.models.Course]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $task.serializers.BranchSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 $task.serializers.ContactSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[task.models.Course]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0
from typing import Dict , Any [EOL] import task [EOL] import typing [EOL] from django . test import TestCase [EOL] [EOL] [comment] [EOL] [EOL] [EOL] import json [EOL] import random [EOL] from django . test import TestCase , Client [EOL] from django . urls import reverse [EOL] from rest_framework . test import APIClient [EOL] from task . models import * [EOL] from task . serializers import * [EOL] [EOL] client = Client ( ) [EOL] [EOL] [EOL] class CategoryTestCase ( TestCase ) : [EOL] def setUp ( self ) : [EOL] pass [EOL] [EOL] [EOL] class ContactTestCase ( TestCase ) : [EOL] def setUp ( self ) : [EOL] self . course = Course . objects . create ( name = [string] , description = [string] , logo = [string] ) [EOL] self . contacts = Contact . objects . create ( type = [string] , value = [string] , course = self . course ) [EOL] [EOL] def test_contact ( self ) : [EOL] get_contact = Contact . objects . get ( type = [string] , value = [string] , course = self . course ) [EOL] self . assertEqual ( get_contact , self . contacts ) [EOL] [EOL] [EOL] class BranchTestCase ( TestCase ) : [EOL] def setUp ( self ) : [EOL] self . course = Course . objects . create ( name = [string] , description = [string] , logo = [string] ) [EOL] self . branches = Branch . objects . create ( address = [string] , latitude = [number] , longitude = [number] , course = self . course ) [EOL] [EOL] def test_branch ( self ) : [EOL] get_branch = Branch . objects . get ( address = [string] , latitude = [number] , longitude = [number] , course = self . course ) [EOL] self . assertEqual ( get_branch , self . branches ) [EOL] [EOL] [EOL] class CourseTestCase ( TestCase ) : [EOL] def setUp ( self ) : [EOL] self . courses = Course . objects . create ( name = [string] , description = [string] , logo = [string] ) [EOL] [EOL] def test_course ( self ) : [EOL] get_course = Course . objects . get ( name = [string] , description = [string] , logo = [string] ) [EOL] [EOL] [EOL] class SerializerTestCase ( TestCase ) : [EOL] def setUp ( self ) : [EOL] self . types = [ [string] , [string] , [string] ] [EOL] self . values = [ [string] , [string] , [string] ] [EOL] self . value = random . randint ( [number] , len ( self . values ) ) [EOL] self . contact = [number] [EOL] self . val = self . values [ self . value - [number] ] [EOL] self . type = self . types [ self . value - [number] ] [EOL] self . category = [number] [EOL] self . id = None [EOL] self . latitude = [string] [EOL] self . longitude = [string] [EOL] self . address = [string] [EOL] self . name = [string] [EOL] self . description = [string] [EOL] self . logo = [string] [EOL] [EOL] name = self . name [EOL] description = self . description [EOL] logo = self . logo [EOL] [EOL] self . course = Course . objects . create ( name = name , description = description , logo = logo ) [EOL] [EOL] def test_contact_serializer ( self ) : [EOL] values = { [string] : self . type , [string] : self . value } [EOL] contact = Contact ( type = self . type , value = self . value ) [EOL] serializer = ContactSerializer ( contact ) [EOL] self . assertEqual ( values , serializer . data ) [EOL] [EOL] def test_branch_serializer ( self ) : [EOL] values = { [string] : self . id , [string] : self . address , [string] : self . latitude , [string] : self . longitude } [EOL] branch = Branch ( course = self . course , address = self . address , latitude = self . latitude , longitude = self . longitude ) [EOL] serializer = BranchSerializer ( branch ) [EOL] self . assertEqual ( values , serializer . data ) [EOL] [EOL] def test_courses ( self ) : [EOL] values = { [string] : None , [string] : [ ] , [string] : self . name , [string] : self . description , [string] : self . logo , [string] : [ ] , [string] : [ ] , } [EOL] print ( values ) [EOL] course = Course ( name = self . name , description = self . description , logo = self . logo ) [EOL] serializer = CourseSerializer ( course ) [EOL] self . assertEqual ( values , serializer . data ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $task.models.Contact$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $task.serializers.ContactSerializer$ 0 0 0 $task.models.Contact$ 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 $task.serializers.ContactSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $task.models.Branch$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $task.serializers.BranchSerializer$ 0 0 0 $task.models.Branch$ 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 $task.serializers.BranchSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 $task.models.Course$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $task.serializers.CourseSerializer$ 0 0 0 $task.models.Course$ 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 $task.serializers.CourseSerializer$ 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] from django . urls import path , include [EOL] from . import views [EOL] from rest_framework import routers [EOL] [EOL] [EOL] router = routers . DefaultRouter ( ) [EOL] router . register ( [string] , views . CourseView ) [EOL] router . register ( [string] , views . ContactView ) [EOL] router . register ( [string] , views . CategoryView ) [EOL] [EOL] urlpatterns = [ path ( [string] , include ( router . urls ) ) , ]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
	0
from typing import Type [EOL] import task [EOL] import typing [EOL] from django . shortcuts import render [EOL] [EOL] [comment] [EOL] [EOL] from rest_framework import viewsets [EOL] [EOL] [EOL] class ContactView ( viewsets . ModelViewSet ) : [EOL] from . import models [EOL] queryset = models . Contact . objects . all ( ) [EOL] from . import serializers [EOL] serializer_class = serializers . ContactSerializer [EOL] [EOL] [EOL] class CategoryView ( viewsets . ModelViewSet ) : [EOL] from . import models [EOL] queryset = models . Category . objects . all ( ) [EOL] from . import serializers [EOL] serializer_class = serializers . CategorySerializer [EOL] [EOL] [EOL] class CourseView ( viewsets . ModelViewSet ) : [EOL] from . import models [EOL] queryset = models . Course . objects . all ( ) [EOL] from . import serializers [EOL] serializer_class = serializers . CourseSerializer [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[task.views.ContactView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[task.serializers.ContactSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[task.views.CategoryView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[task.serializers.CategorySerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[task.views.CourseView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[task.serializers.CourseSerializer]$ 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class TaskConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0