[docstring] [EOL] [EOL] [comment] [EOL] [EOL] from lolaml . tests . conftest import pytest_configure [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , ItemsView , List , Any [EOL] import builtins [EOL] import typing [EOL] import pathlib [EOL] import json [EOL] from pathlib import Path [EOL] from typing import Dict [EOL] [EOL] import pytest [EOL] [EOL] import lolaml as lola [EOL] from lolaml . utils import ls_files [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] @ pytest . fixture def basic_run ( tmpdir ) : [EOL] with lola . Run ( path_prefix = str ( tmpdir ) , ignore_config = True ) as run : [EOL] [EOL] run . log_metric ( [string] , [number] , step = [number] ) [EOL] run . log_metric ( [string] , [number] , step = [number] ) [EOL] run . log_metric ( [string] , [number] , step = [number] ) [EOL] run . log_metric ( [string] , [number] , step = [number] ) [EOL] [EOL] run . log_metric ( [string] , [number] ) [EOL] [EOL] run . log_param ( [string] , [number] ) [EOL] run . log_param ( [string] , [number] ) [EOL] [EOL] run . log_tag ( [string] ) [EOL] return run [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] def is_subset_dict ( subset_dict , superset_dict ) : [EOL] [docstring] [EOL] superset = superset_dict . items ( ) [EOL] return all ( key_value in superset for key_value in subset_dict . items ( ) ) [EOL] [EOL] [EOL] [comment] [EOL] def test_high_level_run ( tmpdir ) : [EOL] with lola . run ( path_prefix = str ( tmpdir ) , ignore_config = True ) as run : [EOL] [EOL] assert run . data . status == [string] [EOL] assert isinstance ( run . data . git [ [string] ] , str ) [EOL] assert isinstance ( run . data . git [ [string] ] , str ) [EOL] assert isinstance ( run . data . git [ [string] ] , str ) [EOL] [EOL] assert len ( run . data . metrics ) == [number] [EOL] run . log_metric ( [string] , [number] , step = [number] ) [EOL] run . log_metric ( [string] , [number] , step = [number] ) [EOL] run . log_metric ( [string] , [number] , step = [number] ) [EOL] run . log_metric ( [string] , [number] , step = [number] ) [EOL] assert len ( run . data . metrics ) == [number] [EOL] [EOL] run . log_param ( [string] , [number] ) [EOL] assert run . data . params [ [string] ] == [number] [EOL] [EOL] run . log_tag ( [string] ) [EOL] assert run . data . tags == [ [string] ] [EOL] [EOL] assert run . data . status == [string] [EOL] assert run . data . status == [string] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] def test_log_param ( ) : [EOL] with lola . run ( ignore_config = True ) as run : [EOL] run . log_param ( [string] , [number] ) [EOL] assert run . data . params [ [string] ] == [number] [EOL] [EOL] [EOL] def test_log_params ( ) : [EOL] with lola . run ( ignore_config = True ) as run : [EOL] run . log_params ( { [string] : [number] , [string] : [number] } ) [EOL] assert run . data . params [ [string] ] == [number] [EOL] assert run . data . params [ [string] ] == [number] [EOL] [EOL] [EOL] def test_log_metrics ( ) : [EOL] with lola . run ( ignore_config = True ) as run : [EOL] run . log_metric ( [string] , [number] , step = [number] ) [EOL] run . log_metric ( [string] , [number] , step = [number] ) [EOL] run . log_metric ( [string] , [number] ) [EOL] [EOL] data = run . data [EOL] assert len ( data . metrics ) == [number] [EOL] assert is_subset_dict ( { [string] : [string] , [string] : [number] , [string] : [number] } , data . metrics [ [number] ] ) [EOL] assert is_subset_dict ( { [string] : [string] , [string] : [number] , [string] : [number] } , data . metrics [ [number] ] ) [EOL] assert is_subset_dict ( { [string] : [string] , [string] : [number] , [string] : None } , data . metrics [ [number] ] ) [EOL] [EOL] [EOL] def test_log_metric ( ) : [EOL] with lola . run ( ignore_config = True ) as run : [EOL] run . log_metrics ( { [string] : [number] , [string] : [number] } , step = [number] ) [EOL] [EOL] data = run . data [EOL] assert len ( data . metrics ) == [number] [EOL] assert is_subset_dict ( { [string] : [string] , [string] : [number] , [string] : [number] } , data . metrics [ [number] ] ) [EOL] assert is_subset_dict ( { [string] : [string] , [string] : [number] , [string] : [number] } , data . metrics [ [number] ] ) [EOL] [EOL] [EOL] def test_log_tag ( ) : [EOL] with lola . run ( ignore_config = True ) as run : [EOL] assert len ( run . data . tags ) == [number] [EOL] run . log_tag ( [string] ) [EOL] assert len ( run . data . tags ) == [number] [EOL] assert [string] in run . data . tags [EOL] [EOL] run . log_tag ( [string] ) [EOL] assert len ( run . data . tags ) == [number] [EOL] [EOL] run . log_tag ( [string] ) [EOL] assert [string] in run . data . tags [EOL] assert len ( run . data . tags ) == [number] [EOL] [EOL] [EOL] def test_log_call_info ( ) : [EOL] with lola . Run ( log_call_info = True , ignore_config = True ) as run : [EOL] assert isinstance ( run . data . call_info , dict ) [EOL] assert run . data . call_info [ [string] ] . endswith ( [string] ) [EOL] assert [string] in run . data . call_info [EOL] [EOL] [EOL] def test_dont_log_call_info ( ) : [EOL] with lola . Run ( log_call_info = False , ignore_config = True ) as run : [EOL] assert run . data . call_info is None [EOL] [EOL] [EOL] def test_log_artifact_that_does_not_exist ( ) : [EOL] with lola . Run ( ignore_config = True ) as run : [EOL] run . _log_artifact ( [string] ) [EOL] [EOL] assert [string] in run . data . artifacts [EOL] [EOL] [EOL] def test_log_artifact_that_is_a_file ( tmpdir ) : [EOL] with lola . Run ( path_prefix = tmpdir , ignore_config = True ) as run : [EOL] dummy_path = Path ( run . path ) / [string] [EOL] with dummy_path . open ( [string] ) as f : [EOL] f . write ( [string] ) [EOL] run . _log_artifact ( str ( dummy_path ) ) [EOL] [EOL] p = str ( dummy_path ) [EOL] assert p in run . data . artifacts [EOL] for k in [ [string] , [string] , [string] , [string] , [string] ] : [EOL] assert k in run . data . artifacts [ p ] [EOL] assert run . data . artifacts [ p ] [ [string] ] == [string] [EOL] [EOL] [EOL] def test_log_all_artifacts ( tmpdir ) : [EOL] with lola . Run ( path_prefix = tmpdir , ignore_config = True ) as run : [EOL] p = Path ( run . path ) [EOL] files = [ p / [string] , p / [string] , p / [string] / [string] ] [EOL] for file in files : [EOL] file . parent . mkdir ( exist_ok = True , parents = True ) [EOL] with file . open ( [string] ) as f : [EOL] f . write ( [string] ) [EOL] run . _log_all_artifacts ( ) [EOL] [EOL] assert len ( run . data . artifacts ) == len ( files ) + [number] [comment] [EOL] [EOL] [EOL] def test_summary ( basic_run ) : [EOL] [comment] [EOL] assert isinstance ( basic_run . summary ( ) , str ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] def test_remote_storage_with_local_destination ( tmpdir ) : [EOL] path_prefix = tmpdir / [string] [EOL] path_prefix . mkdir ( ) [EOL] remote_path = tmpdir / [string] [EOL] remote_path . mkdir ( ) [EOL] [EOL] with lola . Run ( path_prefix = path_prefix , remote_location = str ( remote_path ) , ignore_config = True ) as run : [EOL] dummy_path = Path ( run . path ) / [string] [EOL] with dummy_path . open ( [string] ) as f : [EOL] f . write ( [string] ) [EOL] [EOL] files = ls_files ( remote_path ) [EOL] assert any ( f . name == [string] for f in files ) [EOL] assert any ( f . name == [string] for f in files ) [EOL] assert len ( files ) == [number] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] def test_write_log_if_path_is_set ( tmpdir ) : [EOL] run = lola . run ( path_prefix = str ( tmpdir ) , ignore_config = True ) [EOL] run . close ( ) [EOL] run_logs = list ( Path ( tmpdir ) . rglob ( [string] ) ) [EOL] assert len ( run_logs ) == [number] [EOL] [EOL] [EOL] def test_write_log_if_path_prefix_is_set ( tmpdir ) : [EOL] with lola . Run ( path_prefix = str ( tmpdir ) , ignore_config = True ) as run : [EOL] assert isinstance ( run . path , str ) [EOL] run_logs = list ( Path ( tmpdir ) . rglob ( [string] ) ) [EOL] assert len ( run_logs ) == [number] [EOL] [EOL] [EOL] def test_write_log_without_path_prefix_set ( tmpdir ) : [EOL] [comment] [EOL] with lola . Run ( path_prefix = None , ignore_config = True ) as run : [EOL] assert isinstance ( run . path , str ) [EOL] run_logs = list ( Path ( run . path ) . rglob ( [string] ) ) [EOL] assert len ( run_logs ) == [number] [EOL] [EOL] [EOL] def test_write_log_with_context_manager_class ( tmpdir ) : [EOL] with lola . Run ( path_prefix = str ( tmpdir ) , ignore_config = True ) as _ : [EOL] pass [EOL] run_logs = list ( Path ( tmpdir ) . rglob ( [string] ) ) [EOL] assert len ( run_logs ) == [number] [EOL] [EOL] [EOL] def test_write_log_with_context_manager_function ( tmpdir ) : [EOL] with lola . run ( path_prefix = str ( tmpdir ) , ignore_config = True ) as _ : [EOL] pass [EOL] run_logs = list ( Path ( tmpdir ) . rglob ( [string] ) ) [EOL] assert len ( run_logs ) == [number] [EOL] [EOL] [EOL] def test_context_manager_with_exception ( tmpdir ) : [EOL] with pytest . raises ( ValueError ) : [EOL] with lola . run ( path_prefix = str ( tmpdir ) , ignore_config = True ) as _ : [EOL] [comment] [EOL] raise ValueError [EOL] [EOL] run_logs = list ( Path ( tmpdir ) . rglob ( [string] ) ) [EOL] assert len ( run_logs ) == [number] [EOL] with run_logs [ [number] ] . open ( ) as f : [EOL] data = json . load ( f ) [EOL] print ( list ( data . keys ( ) ) ) [EOL] [EOL] assert data [ [string] ] == [string] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] def test_json_storage_read_write ( basic_run ) : [EOL] data = basic_run . data [EOL] data2 = basic_run . _storage . read ( data . run_file ) [EOL] [EOL] assert data . project == data2 . project [EOL] assert data . run_id == data2 . run_id [EOL] assert data == data2 [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool
[docstring] [EOL] [EOL] try : [EOL] from IPython . terminal . debugger import TerminalPdb as Debugger [EOL] except ImportError : [EOL] from pdb import Pdb as Debugger [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List , Union , Tuple , Callable [EOL] import typing [EOL] import builtins [EOL] import pandas [EOL] import pathlib [EOL] [docstring] [EOL] import json [EOL] from pathlib import Path [EOL] from typing import Callable , Tuple , Union [EOL] [EOL] import log [EOL] [EOL] [EOL] try : [EOL] import pandas as pd [EOL] except ImportError : [EOL] print ( [string] ) [EOL] [EOL] try : [EOL] import altair as alt [EOL] except ImportError : [EOL] print ( [string] ) [EOL] [EOL] [EOL] def read_json_runs ( glob_pattern ) : [EOL] [docstring] [EOL] lola_jsons = sorted ( list ( Path ( ) . glob ( glob_pattern ) ) ) [EOL] log . info ( f" [string] { len ( lola_jsons ) } [string] " ) [EOL] if len ( lola_jsons ) == [number] : [EOL] return None , None [EOL] lola_runs = [ json . load ( file . open ( ) ) for file in lola_jsons ] [EOL] [EOL] [comment] [EOL] df_metrics = pd . io . json . json_normalize ( lola_runs , record_path = [string] , meta = [string] ) [ [ [string] , [string] , [string] , [string] , [string] ] ] [EOL] [EOL] [comment] [EOL] df_overview = pd . io . json . json_normalize ( lola_runs ) [EOL] col_order = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , * sorted ( [ col for col in df_overview . columns . tolist ( ) if col . startswith ( [string] ) ] ) , ] [EOL] df_overview = df_overview [ col_order ] [EOL] [EOL] def _aggregate_metrics ( df_metrics , agg_fn = [string] , agg_name = [string] , ) : [EOL] [docstring] [EOL] [comment] [EOL] df_agg = ( df_metrics . groupby ( [ [string] , [string] ] ) . agg ( { [string] : agg_fn } ) . reset_index ( ) . pivot_table ( values = [string] , index = [string] , columns = [string] ) . reset_index ( ) ) [EOL] columns = df_agg . columns . to_list ( ) [EOL] df_agg = df_agg . rename ( columns = { col : f" [string] { col } [string] { agg_name }" for col in columns if col != [string] } ) [EOL] return df_agg [EOL] [EOL] metrics_max = _aggregate_metrics ( df_metrics , agg_fn = [string] , agg_name = [string] ) [EOL] df_overview = df_overview . merge ( metrics_max , on = [string] ) [EOL] [EOL] metrics_min = _aggregate_metrics ( df_metrics , agg_fn = [string] , agg_name = [string] ) [EOL] df_overview = df_overview . merge ( metrics_min , on = [string] ) [EOL] [EOL] return df_overview , df_metrics [EOL] [EOL] [EOL] def _esc ( name ) : [EOL] [docstring] [EOL] return name . replace ( [string] , [string] ) [EOL] [EOL] [EOL] def plot_overview ( df_overview ) : [EOL] plot_max = ( alt . Chart ( df_overview ) . mark_bar ( ) . encode ( x = alt . X ( [string] ) , y = alt . Y ( _esc ( [string] ) ) ) ) [EOL] plot_min = ( alt . Chart ( df_overview ) . mark_bar ( ) . encode ( x = alt . X ( [string] ) , y = alt . Y ( _esc ( [string] ) ) ) ) [EOL] return plot_min | plot_max [EOL] [EOL] [EOL] def plot_metrics_siple ( df_metrics ) : [EOL] plot = ( alt . Chart ( df_metrics ) . mark_line ( ) . encode ( x = [string] , y = [string] , column = [string] , color = alt . Color ( [string] ) ) . interactive ( ) ) [EOL] return plot [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pandas.DataFrame$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import builtins [EOL] import typing [EOL] import pathlib [EOL] from pathlib import Path [EOL] from typing import List [EOL] [EOL] [EOL] def lprint ( text ) : [EOL] print ( f" [string] { text }" ) [EOL] [EOL] [EOL] def ls ( path ) : [EOL] [docstring] [EOL] return [ p for p in Path ( path ) . rglob ( [string] ) ] [EOL] [EOL] [EOL] def ls_files ( path ) : [EOL] [docstring] [EOL] return [ p for p in Path ( path ) . rglob ( [string] ) if p . is_file ( ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pathlib.Path]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pathlib.Path]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] from pkg_resources import DistributionNotFound , get_distribution [EOL] [EOL] from . core import Run , run [EOL] [EOL] [EOL] try : [EOL] __version__ = get_distribution ( [string] ) . version [EOL] except DistributionNotFound : [EOL] __version__ = [string] [EOL] [EOL] [EOL] __all__ = [ [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] import pathlib [EOL] import random [EOL] from pathlib import Path [EOL] [EOL] import click [EOL] import log [EOL] [EOL] import lolaml as lola [EOL] [EOL] [EOL] @ click . group ( ) def cli ( ) : [EOL] log . init ( ) [EOL] [docstring] [EOL] [EOL] [EOL] @ cli . command ( ) def ui_flask ( ) : [EOL] [docstring] [EOL] print ( [string] ) [EOL] [EOL] [EOL] @ cli . command ( ) @ click . option ( [string] , help = [string] , default = [number] ) def mkdata ( n ) : [EOL] [docstring] [EOL] path = Path ( [string] ) [EOL] path . mkdir ( exist_ok = True ) [EOL] print ( f" [string] { path }" ) [EOL] print ( ) [EOL] [EOL] archs = [ [string] , [string] , [string] , [string] ] [EOL] for i in range ( n ) : [EOL] with lola . run ( path_prefix = path ) as run : [EOL] print ( run . data . path ) [EOL] [EOL] run . log_param ( [string] , random . choice ( archs ) ) [EOL] lr = random . random ( ) [EOL] run . log_param ( [string] , lr ) [EOL] epochs = random . randint ( [number] , [number] ) [EOL] run . log_param ( [string] , epochs ) [EOL] [EOL] for i in range ( [number] , epochs + [number] ) : [EOL] run . log_metric ( [string] , [number] / i + random . random ( ) / i , step = i ) [EOL] run . log_metric ( [string] , [number] / i + random . random ( ) / i , step = i ) [EOL] [EOL] [EOL] @ cli . command ( ) @ click . argument ( [string] ) def push ( path ) : [EOL] [docstring] [EOL] print ( [string] ) [EOL] [EOL] [EOL] if __name__ == [string] : [comment] [EOL] cli ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [docstring] [EOL] [EOL] [EOL] from lolaml . cli import cli [EOL] [EOL] [EOL] if __name__ == [string] : [comment] [EOL] cli ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Optional , Dict , Type [EOL] import lolaml [EOL] import os [EOL] import builtins [EOL] import typing [EOL] import pathlib [EOL] [docstring] [EOL] import getpass [EOL] import os [EOL] import subprocess [EOL] import sys [EOL] import tempfile [EOL] import uuid [EOL] from datetime import datetime [EOL] from pathlib import Path [EOL] from typing import Any , Dict , Optional [EOL] [EOL] import log [EOL] [EOL] from lolaml . config import load_lola_config [EOL] from lolaml . data import RunData [EOL] from lolaml . remotes import RemoteStorage [EOL] from lolaml . storage import JSONStorage [EOL] from lolaml . utils import ls_files [EOL] [EOL] [EOL] class Run : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , project = [string] , path_prefix = None , log_git = True , log_call_info = True , remote_location = [string] , remote_credentials = [string] , ignore_config = False , wip_mode = False , ) : [EOL] assert isinstance ( remote_location , str ) [EOL] [EOL] run_id = str ( uuid . uuid4 ( ) ) [EOL] log . info ( f" [string] { run_id } [string] " ) [EOL] [EOL] _user_config = { } [EOL] if remote_credentials : [EOL] _user_config [ [string] ] = remote_credentials [EOL] if remote_location : [EOL] _user_config [ [string] ] = remote_location [EOL] config = load_lola_config ( _user_config , ignore_config = ignore_config ) [EOL] [EOL] self . _storage = JSONStorage [EOL] self . _remote_storage = RemoteStorage . from_spec ( config [ [string] ] , config [ [string] ] ) [EOL] [EOL] if path_prefix is None : [EOL] path_prefix = tempfile . mktemp ( prefix = f" [string] { project } [string] " ) [EOL] _path = Path ( path_prefix ) / project / str ( run_id ) [EOL] _run_file = _path / [string] [EOL] _path . mkdir ( parents = True , exist_ok = True ) [EOL] path = str ( _path ) [EOL] run_file = str ( _run_file ) [EOL] log . info ( f" [string] { path } [string] " ) [EOL] [EOL] data = RunData ( project = project , run_id = run_id , status = [string] , start_time = _now ( ) , path = path , run_file = run_file , user = getpass . getuser ( ) , remote_location = config [ [string] ] , ) [EOL] [EOL] if log_git : [EOL] data . git = { [string] : get_git_sha ( ) , [string] : get_git_status ( ) , [string] : get_git_diff ( ) , } [EOL] [EOL] if log_call_info : [EOL] data . call_info = { [string] : os . getcwd ( ) , [string] : __file__ , [string] : list ( sys . argv ) , } [EOL] [EOL] self . data = data [EOL] [EOL] self . wip_mode = wip_mode [EOL] if self . wip_mode : [EOL] self . log_tag ( [string] ) [EOL] [EOL] @ property def path ( self ) : [EOL] return self . data . path [EOL] [EOL] @ property def project ( self ) : [EOL] return self . data . project [EOL] [EOL] @ property def run_id ( self ) : [EOL] return self . data . run_id [EOL] [EOL] @ property def run_file ( self ) : [EOL] return self . data . run_file [EOL] [EOL] def summary ( self ) : [EOL] [docstring] [EOL] return self . data . summary ( ) [EOL] [EOL] def log_metric ( self , name , value , * , step = None ) : [EOL] [docstring] [EOL] self . data . metrics . append ( { [string] : name , [string] : value , [string] : step , [string] : _now ( ) } ) [EOL] [EOL] def log_metrics ( self , metric_dict , * , step = None ) : [EOL] [docstring] [EOL] now = _now ( ) [EOL] for name , value in metric_dict . items ( ) : [EOL] self . data . metrics . append ( { [string] : name , [string] : value , [string] : step , [string] : now } ) [EOL] [EOL] def log_tag ( self , tag ) : [EOL] [docstring] [EOL] self . data . tags = list ( set ( [ * self . data . tags , tag ] ) ) [EOL] [EOL] def log_tags ( self , * tags ) : [EOL] [docstring] [EOL] for tag in tags : [EOL] self . log_tag ( tag ) [EOL] [EOL] def log_param ( self , name , value ) : [EOL] [docstring] [EOL] self . data . params [ name ] = value [EOL] [EOL] def log_params ( self , params ) : [EOL] [docstring] [EOL] for k , v in params . items ( ) : [EOL] self . log_param ( k , v ) [EOL] [EOL] def _log_artifact ( self , path ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] _path = Path ( path ) [EOL] artifact_info = { } [EOL] if _path . is_file ( ) : [EOL] stat = _path . stat ( ) [EOL] artifact_info = { [string] : [string] , [string] : stat . st_size , [string] : stat . st_atime_ns , [string] : stat . st_mtime_ns , [string] : stat . st_ctime_ns , } [EOL] self . data . artifacts [ str ( path ) ] = artifact_info [EOL] elif _path . is_dir ( ) : [EOL] log . debug ( f" [string] { path }" ) [EOL] else : [EOL] self . data . artifacts [ str ( path ) ] = { } [EOL] [EOL] def _log_all_artifacts ( self ) : [EOL] [docstring] [EOL] for p in ls_files ( self . path ) : [EOL] self . _log_artifact ( str ( p ) ) [EOL] [EOL] def close ( self , status = [string] ) : [EOL] [docstring] [EOL] assert status in [ [string] , [string] , [string] ] , f" [string] { status } [string] " [EOL] self . data . status = status [EOL] self . data . end_time = _now ( ) [EOL] [EOL] self . _log_all_artifacts ( ) [EOL] self . _log_artifact ( self . data . run_file ) [EOL] [EOL] self . _storage . write ( self . data ) [EOL] if self . _remote_storage and not self . wip_mode : [EOL] self . _remote_storage . upload ( self . data ) [EOL] [EOL] [comment] [EOL] def __enter__ ( self ) : [EOL] return self [EOL] [EOL] def __exit__ ( self , exc_type , exc_value , traceback ) : [EOL] if exc_type : [EOL] [comment] [EOL] self . close ( status = [string] ) [EOL] else : [EOL] self . close ( ) [EOL] [EOL] [EOL] def run ( ** kwargs ) : [EOL] return Run ( ** kwargs ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] def _now ( ) : [EOL] return str ( datetime . now ( ) ) [EOL] [EOL] [EOL] def _git_cmd ( * args ) : [EOL] try : [EOL] return subprocess . check_output ( args ) . strip ( ) . decode ( [string] ) [EOL] except subprocess . CalledProcessError as e : [EOL] log . warning ( [string] , e ) [EOL] return str ( e ) [EOL] except FileNotFoundError as e : [EOL] log . warning ( [string] , e ) [EOL] return str ( e ) [EOL] [EOL] [EOL] def get_git_sha ( ) : [EOL] return _git_cmd ( [string] , [string] , [string] ) [EOL] [EOL] [EOL] def get_git_status ( ) : [EOL] return _git_cmd ( [string] , [string] ) [EOL] [EOL] [EOL] def get_git_diff ( ) : [EOL] return _git_cmd ( [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Type[lolaml.storage.JSONStorage]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Dict$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 $None$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 $builtins.str$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $os.stat_result$ 0 $pathlib.Path$ 0 $os.stat_result$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $os.stat_result$ 0 0 0 0 0 $os.stat_result$ 0 0 0 0 0 $os.stat_result$ 0 0 0 0 0 $os.stat_result$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $None
import lolaml [EOL] import builtins [EOL] import json [EOL] from dataclasses import asdict [EOL] from pathlib import Path [EOL] [EOL] import log [EOL] [EOL] from lolaml . data import RunData [EOL] [EOL] [EOL] class Storage : [EOL] @ staticmethod def write ( data ) : [EOL] raise NotADirectoryError ( ) [EOL] [EOL] @ staticmethod def read ( path ) : [EOL] raise NotADirectoryError ( ) [EOL] [EOL] [EOL] class JSONStorage ( Storage ) : [EOL] [docstring] [EOL] [EOL] @ staticmethod def write ( data ) : [EOL] dst = data . run_file [EOL] Path ( dst ) . parent . mkdir ( parents = True , exist_ok = True ) [EOL] log . info ( f" [string] { dst } [string] " ) [EOL] [EOL] with open ( dst , [string] ) as f : [EOL] f . write ( json . dumps ( asdict ( data ) ) ) [EOL] [EOL] @ staticmethod def read ( path ) : [EOL] with open ( path , [string] ) as f : [EOL] return RunData ( ** json . loads ( f . read ( ) ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 $lolaml.data.RunData$ 0 0 0 0 0 0 0 0 0 0 0 0 $lolaml.data.RunData$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 $lolaml.data.RunData$ 0 0 0 $builtins.str$ 0 $lolaml.data.RunData$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lolaml.data.RunData$ 0 0 0 0 0 0 0 0 $lolaml.data.RunData$ 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import lolaml [EOL] import builtins [EOL] import typing [EOL] import pathlib [EOL] from dataclasses import dataclass [EOL] from pathlib import Path [EOL] [EOL] import log [EOL] [EOL] from lolaml . data import RunData [EOL] [EOL] [EOL] @ dataclass class RemoteStorage : [EOL] [docstring] [EOL] [EOL] remote_location = ... [EOL] remote_credentials = ... [EOL] [EOL] @ staticmethod def from_spec ( remote , remote_credentials ) : [EOL] if not remote : [EOL] return None [EOL] [EOL] remote = str ( remote ) [EOL] if remote . startswith ( [string] ) : [EOL] if remote_credentials : [EOL] return RemoteStorage ( remote , remote_credentials ) [EOL] else : [EOL] raise ValueError ( [string] ) [EOL] else : [EOL] return RemoteStorage ( remote , remote_credentials ) [EOL] [EOL] log . debug ( [string] ) [EOL] return None [EOL] [EOL] def _get_container ( self ) : [EOL] if self . remote_location . startswith ( [string] ) : [EOL] from cloudstorage . drivers . google import GoogleStorageDriver [EOL] [EOL] _protocol , container_name = self . remote_location . split ( [string] ) [EOL] container_name = container_name . strip ( [string] ) [EOL] storage = GoogleStorageDriver ( self . remote_credentials ) [EOL] container = storage . get_container ( container_name ) [EOL] [EOL] else : [EOL] from cloudstorage . drivers . local import LocalDriver [EOL] [EOL] tmp = Path ( self . remote_location ) [EOL] loc , name = str ( tmp . parent ) , str ( tmp . name ) [EOL] container = LocalDriver ( loc ) . get_container ( name ) [EOL] [EOL] return container [EOL] [EOL] def upload ( self , data ) : [EOL] container = self . _get_container ( ) [EOL] artifacts = list ( data . artifacts . keys ( ) ) [EOL] n = len ( artifacts ) [EOL] log . info ( f" [string] { n } [string] " ) [EOL] for i , artifact_path in enumerate ( artifacts , start = [number] ) : [EOL] log . info ( f" [string] { i } [string] { n } [string] { artifact_path }" ) [EOL] dst = self . artifact_destination ( artifact_path , data . run_id , data . project ) [EOL] container . upload_blob ( artifact_path , blob_name = dst ) [EOL] [EOL] @ staticmethod def artifact_destination ( artifact_path , run_id , project ) : [EOL] [docstring] [EOL] return str ( Path ( project ) / artifact_path [ artifact_path . find ( run_id ) : ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $lolaml.data.RunData$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $lolaml.data.RunData$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $lolaml.data.RunData$ 0 0 0 $lolaml.data.RunData$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0
from typing import Dict , Any [EOL] import builtins [EOL] import typing [EOL] import pathlib [EOL] [docstring] [EOL] from pathlib import Path [EOL] from typing import Any , Dict [EOL] [EOL] import log [EOL] import tomlkit [EOL] [EOL] [EOL] def load_lola_config ( user_params , ignore_config = False ) : [EOL] default_config = { [string] : [string] , [string] : [string] } [EOL] [EOL] user_config = { } [EOL] user_config_file = Path . cwd ( ) / [string] [EOL] if user_config_file . is_file ( ) and not ignore_config : [EOL] log . info ( f" [string] { user_config_file } [string] " ) [EOL] with user_config_file . open ( ) as f : [EOL] user_config = tomlkit . parse ( f . read ( ) ) [ [string] ] [EOL] [EOL] config = { ** default_config , ** user_config , ** user_params } [EOL] return config [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Optional , List , Any [EOL] import builtins [EOL] import typing [EOL] from dataclasses import dataclass , field [EOL] from typing import Any , Dict , List , Optional [EOL] [EOL] [EOL] @ dataclass class RunData : [EOL] project = ... [comment] [EOL] run_id = ... [comment] [EOL] status = ... [comment] [EOL] path = ... [comment] [EOL] run_file = ... [comment] [EOL] user = ... [comment] [EOL] [EOL] start_time = ... [comment] [EOL] end_time = None [comment] [EOL] [EOL] metrics = field ( default_factory = list ) [EOL] params = field ( default_factory = dict ) [EOL] tags = field ( default_factory = list ) [EOL] artifacts = field ( default_factory = dict ) [EOL] [EOL] git = None [EOL] call_info = None [EOL] [EOL] remote_location = [string] [EOL] [EOL] def summary ( self ) : [EOL] [docstring] [EOL] return f"""{ [string] * [number] } [string] { self . run_id } [string] { self . run_id } [string] { self . project } [string] { self . path } [string] { self . status } [string] { self . remote_location } [string] { self . start_time } [string] { self . end_time } [string] { len ( self . metrics ) } [string] { len ( self . params ) } [string] { len ( self . artifacts ) } [string] { [string] * [number] } [string] """ [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $typing.List[typing.Dict]$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL]	0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import log [EOL] [EOL] [EOL] def pytest_configure ( config ) : [EOL] [docstring] [EOL] log . init ( debug = True ) [EOL] [EOL] terminal = config . pluginmanager . getplugin ( [string] ) [EOL] [EOL] class QuietReporter ( terminal . TerminalReporter ) : [comment] [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] self . verbosity = [number] [EOL] self . showlongtestinfo = False [EOL] self . showfspath = False [EOL] [EOL] terminal . TerminalReporter = QuietReporter [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0