[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import List [EOL] import typing [EOL] from setuptools import find_packages , setup [EOL] [EOL] import newstler_site as module [EOL] [EOL] requires = [ [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] [comment] [EOL] def next_version ( version ) : [EOL] return version . format_with ( [string] ) if version . exact else version . format_with ( [string] ) [EOL] [EOL] [EOL] setup ( setup_requires = [ [string] ] , version = [string] , name = module . __name__ . replace ( [string] , [string] ) , author = module . __author__ , author_email = module . __team_email__ , license = module . __package_license__ , description = module . __package_info__ , platforms = [ [string] ] , classifiers = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , long_description = open ( [string] ) . read ( ) , packages = find_packages ( exclude = ( [string] , ) ) , include_package_data = True , install_requires = requires , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0
import logging [EOL] import configparser [EOL] [docstring] [EOL] from configparser import ConfigParser [EOL] import os [EOL] [EOL] import logging [EOL] [EOL] from django . conf import settings [EOL] [EOL] LOG = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] def define_options ( ) : [EOL] options = ConfigParser ( ) [EOL] config_file = os . path . join ( settings . BASE_DIR , [string] ) [EOL] options . read ( config_file ) [EOL] return options [EOL] [EOL] options = define_options ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 $configparser.ConfigParser$ 0 0 0 0 0
[comment] [EOL] from typing import List , Tuple , Any [EOL] import typing [EOL] [docstring] [EOL] import os [EOL] [EOL] __author_info__ = [ ( [string] , [string] ) , ] [EOL] __author__ = [string] . join ( [string] . format ( * info ) for info in __author_info__ ) [EOL] __package_info__ = [string] [EOL] __package_license__ = [string] [EOL] __team_email__ = [string] [EOL] [EOL] [EOL] def _version ( ) : [EOL] [docstring] [EOL] try : [EOL] with open ( os . path . join ( os . path . abspath ( os . path . dirname ( __file__ ) ) , [string] ) , [string] ) as versions_file : [EOL] return versions_file . readline ( ) [EOL] except ( OSError , IOError ) : [EOL] return [string] [EOL] [EOL] [EOL] __version__ = _version ( ) [EOL] __all__ = ( [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Type , Any [EOL] import typing [EOL] import newstler_site [EOL] [docstring] [EOL] from django import forms [EOL] from django . contrib . auth import password_validation [EOL] from django . contrib . auth . models import User [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from django . contrib . auth . forms import UserCreationForm [EOL] [EOL] [EOL] class SimpleLoginForm ( forms . Form ) : [EOL] [docstring] [EOL] email = forms . EmailField ( label = [string] , max_length = [number] , widget = forms . TextInput ( attrs = { [string] : True } ) ) [EOL] password = forms . CharField ( label = _ ( [string] ) , strip = False , widget = forms . PasswordInput , ) [EOL] [EOL] [EOL] class RegistrationForm ( UserCreationForm ) : [EOL] [docstring] [EOL] class Meta : [EOL] model = User [EOL] fields = ( [string] , ) [EOL] field_classes = { [string] : forms . EmailField } [EOL] [EOL] def clean_email ( self ) : [EOL] email = self . cleaned_data [ [string] ] [EOL] [comment] [EOL] exists = User . objects . filter ( email = email ) [comment] [EOL] if exists : [EOL] raise forms . ValidationError ( [string] ) [EOL] return email [EOL] [EOL] def clean_password2 ( self ) : [EOL] password1 = self . cleaned_data . get ( [string] ) [EOL] password2 = self . cleaned_data . get ( [string] ) [EOL] if password1 and password2 and password1 != password2 : [EOL] raise forms . ValidationError ( self . error_messages [ [string] ] , code = [string] , ) [EOL] self . instance . username = self . cleaned_data . get ( [string] ) [EOL] password_validation . validate_password ( self . cleaned_data . get ( [string] ) , self . instance ) [EOL] return password2 [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] from whitenoise . django import DjangoWhiteNoise [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL] application = DjangoWhiteNoise ( application ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0
	0
from typing import Any [EOL] import typing [EOL] import django [EOL] import builtins [EOL] [docstring] [EOL] from django . contrib . auth . backends import ModelBackend [EOL] from django . contrib . auth . models import User [EOL] from django . http . request import HttpRequest [EOL] [EOL] [EOL] class EmailBackend ( ModelBackend ) : [EOL] [docstring] [EOL] def authenticate ( self , request , email = None , password = None , ** kwargs ) : [EOL] try : [EOL] user = User . objects . get ( email = email ) [EOL] except ( User . MultipleObjectsReturned , User . DoesNotExist ) : [EOL] return None [EOL] else : [EOL] if user . check_password ( password ) : [EOL] return user [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.http.request.HttpRequest$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0
	0
def test_get_news_by_user_data_python ( ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import django_app [EOL] from django . db import models [EOL] from django . contrib . auth . models import User [EOL] [EOL] [EOL] class UserMetaInformationModel ( models . Model ) : [EOL] user = models . OneToOneField ( to = User , on_delete = models . CASCADE , related_name = [string] ) [EOL] access_token = models . TextField ( verbose_name = [string] , null = True , blank = True ) [EOL] expiration = models . DateTimeField ( verbose_name = [string] , null = True , blank = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . user . username [EOL] [EOL] [EOL] class NewsTag ( models . Model ) : [EOL] name = models . CharField ( max_length = [number] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] [EOL] class NewsItem ( models . Model ) : [EOL] title = models . CharField ( max_length = [number] ) [EOL] link = models . URLField ( max_length = [number] ) [EOL] tag = models . ForeignKey ( to = NewsTag , related_name = [string] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . title [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[django_app.models.UserMetaInformationModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[django_app.models.UserMetaInformationModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[django_app.models.UserMetaInformationModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[django_app.models.NewsTag]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[django_app.models.NewsItem]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[django_app.models.NewsItem]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[django_app.models.NewsItem]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . contrib import admin [EOL] from django_app . models import UserMetaInformationModel , NewsItem , NewsTag [EOL] [EOL] [comment] [EOL] [EOL] admin . site . register ( UserMetaInformationModel ) [EOL] admin . site . register ( NewsItem ) [EOL] admin . site . register ( NewsTag ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class DjangoAppConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0