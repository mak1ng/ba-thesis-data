from typing import Type [EOL] import service [EOL] import typing [EOL] from peewee import ( Model , TextField , BooleanField , DateTimeField , IntegerField , FloatField , ForeignKeyField ) [EOL] [EOL] from webapi . database import database [EOL] [EOL] class BaseModel ( Model ) : [EOL] class Meta : [EOL] database = database [EOL] [EOL] class User ( BaseModel ) : [EOL] class Meta : [EOL] db_table = [string] [EOL] [EOL] id = IntegerField ( ) [EOL] user_name = TextField ( ) [EOL] password_hash = TextField ( ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[service.webapi.models.BaseModel.Meta]$ 0 $typing.Type[service.webapi.models.BaseModel.Meta]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[service.webapi.models.User]$ 0 0 0 0 0 $typing.Type[service.webapi.models.User]$ 0 0 0 0 0 $typing.Type[service.webapi.models.User]$ 0 0 0 0 0 0
import falcon [EOL] import peewee [EOL] [EOL] from webapi . database import database [EOL] [EOL] [EOL] class CatchAllHandler ( Exception ) : [EOL] @ staticmethod def handle ( ex , request , response , params ) : [EOL] [docstring] [EOL] if isinstance ( ex , falcon . HTTPStatus ) : [EOL] [comment] [EOL] raise ex [EOL] [EOL] if isinstance ( ex , falcon . HTTPError ) : [EOL] [comment] [EOL] raise ex [EOL] [EOL] database . rollback ( ) [EOL] raise falcon . HTTPInternalServerError ( type ( ex ) . __name__ , str ( ex ) ) [EOL] [EOL] [EOL] class DoesNotExistHandler ( Exception ) : [EOL] @ staticmethod def handle ( ex , request , response , params ) : [EOL] [docstring] [EOL] raise falcon . HTTPNotFound ( ) [EOL] [EOL] [EOL] def register_error_handlers ( app ) : [EOL] [docstring] [EOL] app . add_error_handler ( Exception , CatchAllHandler . handle ) [EOL] app . add_error_handler ( peewee . DoesNotExist , DoesNotExistHandler . handle )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import yaml [EOL] [EOL] [comment] [EOL] with open ( [string] , [string] ) as f : [EOL] config = yaml . load ( f )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
from typing import List , Tuple [EOL] import typing [EOL] import json [EOL] from webapi . resources . compute import ComputeResource [EOL] [EOL] class RootResource ( object ) : [EOL] def on_get ( self , request , response ) : [EOL] [docstring] [EOL] response . body = json . dumps ( { [string] : True , [string] : [string] } ) [EOL] [EOL] routes = [ ( [string] , RootResource ) , ( [string] , ComputeResource ) ] [EOL] [EOL] def register_routes ( app ) : [EOL] [docstring] [EOL] for path , resource in routes : [EOL] app . add_route ( path , resource ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import falcon [EOL] import falcon_cors [EOL] import falcon_multipart . middleware [EOL] [EOL] from webapi . config import config [EOL] from webapi . database import init_database [EOL] from webapi . middleware . cors import CorsMiddleware [EOL] from webapi . middleware . empty_resource import EmptyResponseMiddleware [EOL] from webapi . middleware . database_connection import DatabaseConnectionMiddleware [EOL] from webapi . error_handlers import register_error_handlers [EOL] from webapi . media_handlers import register_media_handlers [EOL] from webapi . routes import register_routes [EOL] [EOL] init_database ( ) [EOL] [EOL] def create_middleware ( ) : [EOL] return [ CorsMiddleware ( ) , EmptyResponseMiddleware ( ) , falcon_multipart . middleware . MultipartMiddleware ( ) ] [EOL] [EOL] def create_app ( middleware = None ) : [EOL] if middleware is None : [EOL] middleware = create_middleware ( ) [EOL] [EOL] app = falcon . API ( middleware = middleware ) [EOL] [EOL] [comment] [EOL] app . resp_options . secure_cookies_by_default = False [EOL] [EOL] register_error_handlers ( app ) [EOL] register_media_handlers ( app ) [EOL] register_routes ( app ) [EOL] [EOL] return app [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import builtins [EOL] import falcon [EOL] import json [EOL] [EOL] class ComputeRepository : [EOL] def compute ( self , user_id ) : [EOL] return user_id [EOL] [EOL] class ComputeResource ( object ) : [EOL] [EOL] def __init__ ( self , ComputeRepository = ComputeRepository ( ) ) : [EOL] self . _compute_repo = ComputeRepository [EOL] [EOL] def on_get ( self , request , response ) : [EOL] [docstring] [EOL] [EOL] try : [EOL] user_id = request . params [ [string] ] [EOL] except KeyError as e : [EOL] raise falcon . HTTPMissingParam ( [string] ) [EOL] [EOL] response . body = json . dumps ( { [string] : self . _compute_repo . compute ( user_id ) } ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0
from webapi . database import database [EOL] [EOL] class DatabaseConnectionMiddleware ( ) : [EOL] [docstring] [EOL] [EOL] def process_resource ( self , request , response , resource , params ) : [EOL] if database . is_closed ( ) : [EOL] database . connect ( ) [EOL] database . begin ( ) [EOL] [EOL] def process_response ( self , request , response , resource , req_succeeded ) : [EOL] database . commit ( ) [EOL] database . close ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0