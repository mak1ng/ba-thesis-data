[comment] [EOL] [EOL] import pathlib [EOL] [docstring] [EOL] [EOL] import sys [EOL] from setuptools import setup [EOL] from pathlib import Path [EOL] [EOL] assert sys . version_info >= ( [number] , [number] , [number] ) [EOL] [EOL] [EOL] def get_long_description ( ) : [EOL] readme_md = Path ( __file__ ) . parent / [string] [EOL] with open ( readme_md , encoding = [string] ) as ld_file : [EOL] return ld_file . read ( ) [EOL] [EOL] [EOL] setup ( name = [string] , version = [string] , packages = [ [string] ] , python_requires = [string] , install_requires = [ [string] , [string] , [string] ] , entry_points = { [string] : [ [string] ] } , license = [string] , description = [string] , long_description = get_long_description ( ) , long_description_content_type = [string] , author = [string] , author_email = [string] , url = [string] , keywords = [string] , classifiers = [ [string] , [string] , [string] , [string] , [string] , ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] import builtins [EOL] import click [EOL] import os . path [EOL] [EOL] from sharefileqr . core import share_file [EOL] [EOL] [EOL] @ click . command ( ) @ click . argument ( [string] ) @ click . option ( [string] , type = click . INT , default = [number] , help = [string] ) @ click . option ( [string] , [string] , is_flag = True , help = [string] [string] ) def cli ( file_to_share , port , browser_display ) : [EOL] [docstring] [EOL] if not os . path . isfile ( file_to_share ) : [EOL] print ( f" [string] { file_to_share }" ) [EOL] [EOL] share_file ( os . path . abspath ( file_to_share ) , port , browser_display ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] cli ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import tornado . web [EOL] [EOL] [EOL] class ImageHandler ( tornado . web . RequestHandler ) : [EOL] def initialize ( self , qrcode_svg_utf8 ) : [EOL] self . qrcode_svg_utf8 = qrcode_svg_utf8 [EOL] [EOL] def get ( self ) : [EOL] self . write ( self . qrcode_svg_utf8 ) [EOL] self . set_header ( [string] , [string] ) [EOL] [EOL] [EOL] class MimedStaticFileHandler ( tornado . web . StaticFileHandler ) : [EOL] def initialize ( self , path , mime_type ) : [EOL] super ( ) . initialize ( path ) [EOL] self . mime_type = mime_type [EOL] [EOL] def set_extra_headers ( self , path ) : [EOL] self . set_header ( [string] , self . mime_type ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import builtins [EOL] import typing [EOL] import qrcode [EOL] import io [EOL] from io import BytesIO , StringIO [EOL] import qrcode as qr [EOL] from qrcode . image . svg import SvgImage [EOL] [EOL] [EOL] def generate_utf8_svg ( file_url ) : [EOL] bytes_handle = BytesIO ( ) [EOL] svg_image = qr . make ( file_url , image_factory = SvgImage ) [EOL] svg_image . save ( bytes_handle ) [EOL] return bytes_handle . getvalue ( ) [EOL] [EOL] [EOL] def generate_ascii ( file_url ) : [EOL] qr_code = qr . QRCode ( ) [EOL] qr_code . add_data ( file_url ) [EOL] [EOL] string_handle = StringIO ( ) [EOL] qr_code . print_ascii ( string_handle ) [EOL] return string_handle . getvalue ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import socket [EOL] import builtins [EOL] import socket [EOL] from click import ClickException [EOL] [EOL] LOCALHOST_IP_ADDRESS = [string] [EOL] [EOL] [EOL] class LocalNetworkError ( ClickException ) : [EOL] pass [EOL] [EOL] [EOL] def get_local_ip_address ( ) : [EOL] [docstring] [EOL] [EOL] local_socket = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) [EOL] try : [EOL] [comment] [EOL] local_socket . connect ( ( [string] , [number] ) ) [EOL] ip_address = local_socket . getsockname ( ) [ [number] ] [EOL] except : [comment] [EOL] ip_address = LOCALHOST_IP_ADDRESS [EOL] finally : [EOL] local_socket . close ( ) [EOL] [EOL] if ip_address == LOCALHOST_IP_ADDRESS : [EOL] raise LocalNetworkError ( [string] [string] ) [EOL] [EOL] return ip_address [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0