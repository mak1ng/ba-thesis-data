from typing import List , TextIO [EOL] import typing [EOL] import io [EOL] import diskutils [EOL] import sys [EOL] import io [EOL] import unittest [EOL] from unittest . mock import patch [EOL] from diskutils import Device , Partition , WindowsDiskUtils , LinuxDiskUtils , pretty_print [EOL] [EOL] [EOL] class TestDiskUtils ( unittest . TestCase ) : [EOL] [EOL] def test_convert_size ( self ) : [EOL] disk_utils = WindowsDiskUtils ( ) [EOL] size = disk_utils . _convert_size ( [string] ) [EOL] self . assertEqual ( size , [string] ) [EOL] [EOL] def test_pretty_print ( self ) : [EOL] items = [ Partition ( name = [string] , size = [string] ) , Partition ( name = [string] , size = [string] ) ] [EOL] expected = [string] [EOL] capturedOutput = io . StringIO ( ) [EOL] sys . stdout = capturedOutput [EOL] pretty_print ( items , [string] ) [EOL] sys . stdout = sys . __stdout__ [EOL] self . assertEqual ( capturedOutput . getvalue ( ) , expected ) [EOL] [EOL] [EOL] class TestWindowsDiskUtils ( unittest . TestCase ) : [EOL] [EOL] disk_utils = WindowsDiskUtils ( ) [EOL] [EOL] @ patch ( [string] ) def test_get_devices ( self , m ) : [EOL] m . return_value . stdout = [string] [EOL] expected = [ Device ( index = [string] , name = [string] , alias = [string] , size = [string] ) , Device ( index = [string] , name = [string] , alias = [string] , size = [string] ) ] [EOL] devices = self . disk_utils . get_devices ( ) [EOL] self . assertEqual ( devices , expected ) [EOL] [EOL] @ patch ( [string] ) def test_get_device_partitions ( self , m ) : [EOL] m . return_value . stdout = [string] [EOL] device = Device ( index = [string] , name = [string] , alias = [string] , size = [string] ) [EOL] expected = [ Partition ( name = [string] , size = [string] ) , Partition ( name = [string] , size = [string] ) , Partition ( name = [string] , size = [string] ) ] [EOL] partitions = self . disk_utils . get_device_partitions ( device ) [EOL] self . assertEqual ( partitions , expected ) [EOL] [EOL] [EOL] class TestLinuxDiskUtils ( unittest . TestCase ) : [EOL] [EOL] disk_utils = LinuxDiskUtils ( ) [EOL] [EOL] @ patch ( [string] ) def test_get_devices ( self , m ) : [EOL] m . return_value . stdout = [string] [EOL] expected = [ Device ( index = [string] , name = [string] , alias = [string] , size = [string] ) ] [EOL] devices = self . disk_utils . get_devices ( ) [EOL] self . assertEqual ( devices , expected ) [EOL] [EOL] @ patch ( [string] ) def test_get_device_partitions ( self , m ) : [EOL] m . return_value . stdout = [string] [EOL] device = Device ( index = [string] , name = [string] , alias = [string] , size = [string] ) [EOL] expected = [ Partition ( name = [string] , size = [string] ) , Partition ( name = [string] , size = [string] ) , Partition ( name = [string] , size = [string] ) , Partition ( name = [string] , size = [string] ) ] [EOL] partitions = self . disk_utils . get_device_partitions ( device ) [EOL] self . assertEqual ( partitions , expected ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $diskutils.WindowsDiskUtils$ 0 0 0 0 0 $builtins.str$ 0 $diskutils.WindowsDiskUtils$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[diskutils.Partition]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $io.StringIO$ 0 0 0 0 0 0 0 0 0 $typing.TextIO$ 0 $io.StringIO$ 0 0 0 $typing.List[diskutils.Partition]$ 0 0 0 0 0 0 $typing.TextIO$ 0 0 0 0 0 0 0 0 0 $io.StringIO$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $diskutils.WindowsDiskUtils$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[diskutils.Device]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[diskutils.Device]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[diskutils.Device]$ 0 $typing.List[diskutils.Device]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $diskutils.Device$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[diskutils.Partition]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[diskutils.Partition]$ 0 0 0 0 0 0 0 $diskutils.Device$ 0 0 0 0 0 0 $typing.List[diskutils.Partition]$ 0 $typing.List[diskutils.Partition]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $diskutils.LinuxDiskUtils$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[diskutils.Device]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[diskutils.Device]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[diskutils.Device]$ 0 $typing.List[diskutils.Device]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $diskutils.Device$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[diskutils.Partition]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[diskutils.Partition]$ 0 0 0 0 0 0 0 $diskutils.Device$ 0 0 0 0 0 0 $typing.List[diskutils.Partition]$ 0 $typing.List[diskutils.Partition]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0