[comment] [EOL] [comment] [EOL] [EOL] import os [EOL] import sys [EOL] [EOL] [EOL] def main ( ) : [EOL] [docstring] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] try : [EOL] from django . core . management import execute_from_command_line [EOL] except ImportError : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] try : [EOL] import django [comment] [EOL] except ImportError : [EOL] raise ImportError ( [string] [string] [string] , ) [EOL] raise [EOL] [EOL] execute_from_command_line ( sys . argv ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any , List [EOL] import typing [EOL] [docstring] [EOL] [EOL] from django . conf import settings [EOL] from django . conf . urls import include , url [EOL] from django . contrib import admin [EOL] from django . views . generic import TemplateView [EOL] [EOL] admin . autodiscover ( ) [EOL] [EOL] [EOL] urlpatterns = [ url ( [string] , include ( [string] ) ) , url ( [string] , admin . site . urls ) , url ( [string] , include ( [string] , namespace = [string] ) ) , url ( [string] , include ( [string] , namespace = [string] ) ) , url ( [string] , TemplateView . as_view ( template_name = [string] , content_type = [string] , ) ) , url ( [string] , TemplateView . as_view ( template_name = [string] , content_type = [string] , ) ) , url ( [string] , TemplateView . as_view ( template_name = [string] , content_type = [string] , ) ) , ] [EOL] [EOL] if settings . DEBUG : [EOL] import debug_toolbar [EOL] urlpatterns = [ url ( [string] , include ( debug_toolbar . urls ) ) , ] + urlpatterns [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] __version__ = [string] [EOL]	0 0 0 $builtins.str$ 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Any , Type [EOL] import typing [EOL] import server [EOL] from django . contrib . auth import get_user_model [EOL] from rest_framework . mixins import ( CreateModelMixin , RetrieveModelMixin , UpdateModelMixin , ) [EOL] from rest_framework . permissions import AllowAny [EOL] from rest_framework . viewsets import GenericViewSet [EOL] [EOL] from server . users . serializers import UserSerializer [EOL] [EOL] User = get_user_model ( ) [EOL] [EOL] [EOL] class UserViewSet ( CreateModelMixin , UpdateModelMixin , RetrieveModelMixin , GenericViewSet , ) : [EOL] serializer_class = UserSerializer [EOL] queryset = User . objects . all ( ) [EOL] permission_classes = [ AllowAny ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class AuthConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Any , List [EOL] import typing [EOL] from django . conf . urls import url [EOL] from rest_framework import routers [EOL] from rest_framework_jwt . views import obtain_jwt_token [EOL] [EOL] from server . users . views import UserViewSet [EOL] [EOL] router = routers . SimpleRouter ( ) [EOL] [EOL] router . register ( [string] , UserViewSet , base_name = [string] , ) [EOL] [EOL] urlpatterns = [ url ( [string] , obtain_jwt_token , name = [string] ) , ] [EOL] [EOL] urlpatterns += router . urls [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0
	0
from typing import Any , Type , Tuple [EOL] import typing [EOL] import server [EOL] from django . contrib . auth import get_user_model [EOL] from rest_framework . serializers import CharField , EmailField , ModelSerializer [EOL] from rest_framework . validators import UniqueValidator [EOL] [EOL] User = get_user_model ( ) [EOL] [EOL] [EOL] class UserSerializer ( ModelSerializer ) : [EOL] email = EmailField ( required = True , validators = [ UniqueValidator ( queryset = User . objects . all ( ) ) ] , ) [EOL] username = CharField ( max_length = [number] , validators = [ UniqueValidator ( queryset = User . objects . all ( ) ) ] , ) [EOL] password = CharField ( min_length = [number] , max_length = [number] , write_only = True , ) [EOL] [EOL] def create ( self , validated_data ) : [EOL] user = User ( email = validated_data [ [string] ] , username = validated_data [ [string] ] , ) [EOL] user . set_password ( validated_data [ [string] ] ) [EOL] user . save ( ) [EOL] [EOL] return user [EOL] [EOL] class Meta : [EOL] model = User [EOL] fields = ( [string] , [string] , [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.users.serializers.UserSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.users.serializers.UserSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.users.serializers.UserSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Type[server.users.serializers.UserSerializer.Meta]$ 0 $typing.Any$ 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0
[comment] [EOL] [EOL] from django . contrib import admin [comment] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from django . apps import AppConfig [EOL] [EOL] [EOL] class MainAppConfig ( AppConfig ) : [EOL] [docstring] [EOL] [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [EOL] from django . db import models [comment] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , List [EOL] import typing [EOL] from rest_framework import routers [EOL] [EOL] from server . notes . views import CategoryViewSet , NoteViewSet , PublicNoteViewSet [EOL] [EOL] router = routers . SimpleRouter ( ) [EOL] [EOL] router . register ( [string] , CategoryViewSet , base_name = [string] , ) [EOL] router . register ( [string] , NoteViewSet , base_name = [string] , ) [EOL] router . register ( [string] , PublicNoteViewSet , base_name = [string] , ) [EOL] [EOL] urlpatterns = [ ] [EOL] urlpatterns += router . urls [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0
import builtins [EOL] from typing import Tuple , Type , List [EOL] import typing [EOL] import server [EOL] from rest_framework . mixins import ( CreateModelMixin , DestroyModelMixin , ListModelMixin , RetrieveModelMixin , UpdateModelMixin , ) [EOL] from rest_framework . permissions import AllowAny [EOL] from rest_framework . viewsets import GenericViewSet [EOL] [EOL] from server . notes . permissions import NotePermission [EOL] [EOL] from . models import Category , Note [EOL] from . serializers import CategorySerializer , NoteSerializer [EOL] [EOL] [EOL] class CategoryViewSet ( CreateModelMixin , UpdateModelMixin , DestroyModelMixin , RetrieveModelMixin , ListModelMixin , GenericViewSet , ) : [EOL] serializer_class = CategorySerializer [EOL] queryset = Category . objects . all ( ) [EOL] [EOL] [EOL] class NoteViewSet ( CreateModelMixin , UpdateModelMixin , RetrieveModelMixin , DestroyModelMixin , ListModelMixin , GenericViewSet , ) : [EOL] serializer_class = NoteSerializer [EOL] queryset = Note . objects . all ( ) [EOL] permission_classes = [ NotePermission ] [EOL] search_fields = ( [string] , [string] ) [EOL] filter_fields = ( [string] , [string] , [string] ) [EOL] [EOL] def perform_create ( self , serializer ) : [EOL] serializer . save ( user = self . request . user , ) [EOL] [EOL] [EOL] class PublicNoteViewSet ( RetrieveModelMixin , GenericViewSet , ) : [EOL] serializer_class = NoteSerializer [EOL] queryset = Note . objects . all ( ) [EOL] permission_classes = [ AllowAny ] [EOL] lookup_field = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Any , Type , Tuple [EOL] import typing [EOL] import server [EOL] import uuid [EOL] [EOL] from django . contrib . auth import get_user_model [EOL] from django . db import models [EOL] [EOL] User = get_user_model ( ) [EOL] [EOL] [EOL] class Category ( models . Model ) : [EOL] name = models . CharField ( verbose_name = [string] , max_length = [number] , ) [EOL] description = models . CharField ( verbose_name = [string] , max_length = [number] , blank = True , ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f'{ self . name }' [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL] ordering = ( [string] , ) [EOL] [EOL] [EOL] class Note ( models . Model ) : [EOL] title = models . CharField ( verbose_name = [string] , max_length = [number] , ) [EOL] body = models . TextField ( verbose_name = [string] , max_length = [number] , ) [EOL] created = models . DateTimeField ( verbose_name = [string] , auto_now_add = True , ) [EOL] category = models . ForeignKey ( to = Category , verbose_name = [string] , blank = True , null = True , ) [EOL] is_favourite = models . BooleanField ( verbose_name = [string] , default = False , ) [EOL] uuid = models . UUIDField ( verbose_name = [string] , default = uuid . uuid4 , editable = False , ) [EOL] user = models . ForeignKey ( to = User , verbose_name = [string] , ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f'{ self . title } [string] { self . uuid }' [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = [string] [EOL] ordering = ( [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.notes.models.Category]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.notes.models.Category]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.notes.models.Note]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.notes.models.Note]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.notes.models.Note]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.notes.models.Note]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.notes.models.Note]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.notes.models.Note]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.notes.models.Note]$ 0 0 0 0 0 0 0 0 0 $typing.Type[server.notes.models.Note]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0
from rest_framework . permissions import BasePermission [EOL] [EOL] [EOL] class NotePermission ( BasePermission ) : [EOL] [EOL] def has_object_permission ( self , request , view , obj ) : [EOL] if request . user == obj . user : [EOL] return True [EOL] [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class NotesConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from django . contrib import admin [EOL] [EOL] from . models import Category , Note [EOL] [EOL] admin . site . register ( Category ) [EOL] admin . site . register ( Note ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type , Dict , Union [EOL] import typing [EOL] import server [EOL] from django . contrib . auth import get_user_model [EOL] from django . urls import reverse [EOL] from rest_framework import status [EOL] from rest_framework . test import APITestCase [EOL] [EOL] from server . notes . models import Note [EOL] [EOL] User = get_user_model ( ) [EOL] [EOL] [EOL] class NoteListTestCase ( APITestCase ) : [EOL] url = reverse ( [string] ) [EOL] queryset = Note . objects . all ( ) [EOL] [EOL] def setUp ( self ) : [EOL] self . user = User . objects . create ( username = [string] ) [EOL] self . initial_objects_count = Note . objects . count ( ) [EOL] self . client . force_authenticate ( user = self . user ) [EOL] [EOL] def test_note_get ( self ) : [EOL] response = self . client . get ( self . url ) [EOL] self . assertEqual ( response . status_code , status . HTTP_200_OK ) [EOL] [EOL] def test_note_create ( self ) : [EOL] data = { [string] : [string] , [string] : [string] , [string] : self . user . id , } [EOL] response = self . client . post ( self . url , data ) [EOL] self . assertEqual ( response . status_code , status . HTTP_201_CREATED ) [EOL] self . assertEqual ( self . initial_objects_count + [number] , Note . objects . count ( ) , ) [EOL] [EOL] [EOL] class NoteDetailTestCase ( APITestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . user = User . objects . create ( username = [string] ) [EOL] data = { [string] : [string] , [string] : [string] , [string] : self . user , } [EOL] self . note = Note . objects . create ( ** data ) [EOL] self . url = reverse ( [string] , kwargs = { [string] : self . note . id , } ) [EOL] self . client . force_authenticate ( user = self . user ) [EOL] [EOL] def test_note_get ( self ) : [EOL] response = self . client . get ( self . url ) [EOL] self . assertEqual ( response . status_code , status . HTTP_200_OK ) [EOL] [EOL] def test_note_put ( self ) : [EOL] data = { [string] : [string] , [string] : [string] , [string] : True , } [EOL] response = self . client . put ( self . url , data ) [EOL] note = Note . objects . get ( pk = self . note . id ) [EOL] self . assertEqual ( response . status_code , status . HTTP_200_OK ) [EOL] [EOL] for key in data . keys ( ) : [EOL] self . assertEqual ( response . data . get ( key ) , getattr ( note , key ) ) [EOL] [EOL] def test_note_patch ( self ) : [EOL] data = { [string] : [string] , } [EOL] response = self . client . patch ( self . url , data ) [EOL] note = Note . objects . get ( pk = self . note . id ) [EOL] self . assertEqual ( response . status_code , status . HTTP_200_OK ) [EOL] self . assertEqual ( response . data . get ( [string] ) , note . title ) [EOL] [EOL] def test_note_delete ( self ) : [EOL] response = self . client . delete ( self . url ) [EOL] self . assertEqual ( response . status_code , status . HTTP_204_NO_CONTENT ) [EOL] objects_count = Note . objects . filter ( id = self . note . id ) . count ( ) [EOL] self . assertEqual ( [number] , objects_count ) [EOL] [EOL] def test_note_access ( self ) : [EOL] [docstring] [EOL] another_user = User . objects . create ( username = [string] ) [EOL] self . client . force_authenticate ( user = another_user ) [EOL] response = self . client . get ( self . url ) [EOL] self . assertEqual ( response . status_code , status . HTTP_403_FORBIDDEN ) [EOL] [EOL] [EOL] class NoteReadOnlyFieldsTestCase ( APITestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] self . user = User . objects . create ( username = [string] ) [EOL] data = { [string] : [string] , [string] : [string] , [string] : self . user , } [EOL] self . note = Note . objects . create ( ** data ) [EOL] self . url = reverse ( [string] , kwargs = { [string] : self . note . id , } ) [EOL] self . client . force_authenticate ( user = self . user ) [EOL] [EOL] def test_uuid_field ( self ) : [EOL] data = { [string] : [number] , } [EOL] note = Note . objects . get ( pk = self . note . id ) [EOL] self . client . patch ( self . url , data ) [EOL] self . assertEqual ( note . uuid , self . note . uuid ) [EOL] [EOL] def test_user_field ( self ) : [EOL] data = { [string] : [number] , } [EOL] note = Note . objects . get ( pk = self . note . id ) [EOL] self . client . patch ( self . url , data ) [EOL] self . assertEqual ( note . user , self . note . user ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.notes.tests.test_note_api.NoteListTestCase]$ 0 0 0 0 0 0 $typing.Type[server.notes.tests.test_note_api.NoteListTestCase]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0
	0
from typing import Any , Type , Dict [EOL] import typing [EOL] import server [EOL] from django . contrib . auth import get_user_model [EOL] from django . urls import reverse [EOL] from rest_framework import status [EOL] from rest_framework . test import APITestCase [EOL] [EOL] from server . notes . models import Category [EOL] [EOL] User = get_user_model ( ) [EOL] [EOL] [EOL] class CategoryListTestCase ( APITestCase ) : [EOL] url = reverse ( [string] ) [EOL] queryset = Category . objects . all ( ) [EOL] [EOL] def setUp ( self ) : [EOL] user = User . objects . create ( username = [string] ) [EOL] self . initial_objects_count = Category . objects . count ( ) [EOL] self . client . force_authenticate ( user = user ) [EOL] [EOL] def test_category_get ( self ) : [EOL] response = self . client . get ( self . url ) [EOL] self . assertEqual ( response . status_code , status . HTTP_200_OK ) [EOL] [EOL] def test_category_create ( self ) : [EOL] data = { [string] : [string] , [string] : [string] , } [EOL] response = self . client . post ( self . url , data ) [EOL] self . assertEqual ( response . status_code , status . HTTP_201_CREATED ) [EOL] self . assertEqual ( self . initial_objects_count + [number] , Category . objects . count ( ) , ) [EOL] [EOL] [EOL] class CategoryDetailTestCase ( APITestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] user = User . objects . create ( username = [string] ) [EOL] category_object_data = { [string] : [string] , [string] : [string] , } [EOL] self . test_object = Category . objects . create ( ** category_object_data ) [EOL] self . url = reverse ( [string] , kwargs = { [string] : self . test_object . id , } ) [EOL] self . client . force_authenticate ( user = user ) [EOL] [EOL] def test_category_get ( self ) : [EOL] response = self . client . get ( self . url ) [EOL] self . assertEqual ( response . status_code , status . HTTP_200_OK ) [EOL] [EOL] def test_category_put ( self ) : [EOL] data = { [string] : [string] , [string] : [string] , } [EOL] response = self . client . put ( self . url , data ) [EOL] category = Category . objects . get ( pk = self . test_object . id ) [EOL] self . assertEqual ( response . status_code , status . HTTP_200_OK ) [EOL] [EOL] for key in data . keys ( ) : [EOL] self . assertEqual ( response . data . get ( key ) , getattr ( category , key ) ) [EOL] [EOL] def test_category_patch ( self ) : [EOL] data = { [string] : [string] , } [EOL] response = self . client . patch ( self . url , data ) [EOL] category = Category . objects . get ( pk = self . test_object . id ) [EOL] self . assertEqual ( response . status_code , status . HTTP_200_OK ) [EOL] self . assertEqual ( response . data . get ( [string] ) , category . name ) [EOL] [EOL] def test_category_delete ( self ) : [EOL] response = self . client . delete ( self . url ) [EOL] self . assertEqual ( response . status_code , status . HTTP_204_NO_CONTENT ) [EOL] objects_count = Category . objects . filter ( id = self . test_object . id ) . count ( ) [EOL] self . assertEqual ( [number] , objects_count ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.notes.tests.test_category_api.CategoryListTestCase]$ 0 0 0 0 0 0 $typing.Type[server.notes.tests.test_category_api.CategoryListTestCase]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0
	0
[comment] [EOL] [EOL] from typing import Any , Dict , Tuple , Union , List [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] [EOL] import os [EOL] from typing import Tuple [EOL] [EOL] from server . settings . components import BASE_DIR , config [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] SECRET_KEY = config ( [string] ) [EOL] [EOL] [comment] [EOL] [EOL] INSTALLED_APPS = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] MIDDLEWARE = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] ROOT_URLCONF = [string] [EOL] [EOL] WSGI_APPLICATION = [string] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] DATABASES = { [string] : { [string] : [string] , [string] : config ( [string] ) , [string] : config ( [string] ) , [string] : config ( [string] ) , [string] : config ( [string] ) , [string] : config ( [string] , cast = int ) , } , } [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] CSRF_COOKIE_HTTPONLY = True [EOL] SESSION_COOKIE_HTTPONLY = True [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] LANGUAGE_CODE = [string] [EOL] [EOL] USE_I18N = True [EOL] USE_L10N = True [EOL] [EOL] LANGUAGES = ( ( [string] , [string] ) , ) [EOL] [EOL] LOCALE_PATHS = ( [string] , ) [EOL] [EOL] USE_TZ = True [EOL] TIME_ZONE = [string] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] STATIC_URL = [string] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] TEMPLATES = [ { [string] : [string] , [string] : [ os . path . join ( BASE_DIR , [string] , [string] ) , ] , [string] : { [string] : [ [string] , [string] , [string] , [string] , [string] , [string] , ] , [string] : [ [string] , [string] , ] , } , } ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] MEDIA_URL = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] AUTHENTICATION_BACKENDS = ( [string] , ) [EOL] [EOL] LOGIN_URL = [string] [EOL] LOGIN_REDIRECT_URL = [string] [EOL] LOGIN_ERROR_URL = [string] [EOL] [EOL] [comment] [EOL] [EOL] REST_FRAMEWORK = { [string] : ( [string] , ) , [string] : ( [string] , [string] , [string] , ) , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.List[builtins.str]],typing.List[builtins.str],builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Tuple[builtins.str],typing.Tuple[builtins.str,builtins.str,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple [EOL] import typing [EOL] [docstring] [EOL] [EOL] CSP_SCRIPT_SRC = ( [string] , ) [EOL] CSP_IMG_SRC = ( [string] , ) [EOL] CSP_FONT_SRC = ( [string] , ) [EOL] CSP_STYLE_SRC = ( [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import builtins [EOL] import os [EOL] [EOL] from fnmatch import fnmatch [EOL] [EOL] from decouple import AutoConfig [EOL] from unipath import Path [EOL] [EOL] [EOL] [comment] [EOL] BASE_DIR = Path ( __file__ ) . parent . parent . parent . parent [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] class GlobalIPList ( list ) : [EOL] [docstring] [EOL] [EOL] def __contains__ ( self , key ) : [EOL] [docstring] [EOL] return any ( fnmatch ( key , elt ) for elt in self ) [EOL] [EOL] [EOL] config = AutoConfig ( search_path = os . path . join ( BASE_DIR , [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [docstring] [EOL]	0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , Dict , List [EOL] import typing [EOL] [docstring] [EOL] [EOL] from server . settings . components . common import TEMPLATES [EOL] [EOL] [comment] [EOL] [EOL] DEBUG = False [EOL] [EOL] ALLOWED_HOSTS = [ [string] , ] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] STATIC_ROOT = [string] [EOL] [EOL] STATICFILES_STORAGE = ( [string] ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] _PASS = [string] [EOL] AUTH_PASSWORD_VALIDATORS = [ { [string] : [string] . format ( _PASS ) , } , { [string] : [string] . format ( _PASS ) , } , { [string] : [string] . format ( _PASS ) , } , { [string] : [string] . format ( _PASS ) , } , ] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] for template in TEMPLATES : [EOL] template [ [string] ] [ [string] ] = ( [string] , [ [string] , [string] , ] , ) , [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] SECURE_HSTS_SECONDS = [number] [EOL] SECURE_HSTS_INCLUDE_SUBDOMAINS = True [EOL] SECURE_HSTS_PRELOAD = True [EOL] SECURE_CONTENT_TYPE_NOSNIFF = True [EOL] SECURE_BROWSER_XSS_FILTER = True [EOL] [EOL] SECURE_PROXY_SSL_HEADER = ( [string] , [string] ) [EOL] SECURE_SSL_REDIRECT = True [EOL] [EOL] SESSION_COOKIE_SECURE = True [EOL] SESSION_COOKIE_HTTPONLY = True [EOL] [EOL] CSRF_COOKIE_SECURE = True [EOL] CSRF_COOKIE_HTTPONLY = True [EOL] [EOL] X_FRAME_OPTIONS = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] import builtins [EOL] import server [EOL] [docstring] [EOL] [EOL] from typing import List [EOL] [EOL] from server . settings . components import GlobalIPList [EOL] from server . settings . components . common import INSTALLED_APPS , MIDDLEWARE [EOL] [EOL] [comment] [EOL] [EOL] DEBUG = True [EOL] [EOL] SESSION_COOKIE_SECURE = False [EOL] CSRF_COOKIE_SECURE = False [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] STATICFILES_DIRS = [ ] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] INSTALLED_APPS += ( [string] , ) [EOL] [EOL] MIDDLEWARE += ( [string] , [string] , ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] CSP_SCRIPT_SRC = ( [string] , [string] ) [EOL] CSP_IMG_SRC = ( [string] , [string] ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] INTERNAL_IPS = GlobalIPList ( [ [string] , [string] , ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $server.settings.components.GlobalIPList$ 0 0 0 0 0 0 0 0 0 0 0