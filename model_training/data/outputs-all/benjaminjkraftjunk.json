from typing import Any , List [EOL] import typing [EOL] def caller ( cb ) : [EOL] while True : [EOL] try : [EOL] yield cb ( ) [EOL] except StopIteration : [EOL] break [EOL] [EOL] [EOL] sentinel = object ( ) [EOL] [EOL] [EOL] def interleaving ( * iterfuncs ) : [EOL] def iterfunc ( iterator ) : [EOL] outbuffers = [ [ [ ] ] for _ in iterfuncs ] [EOL] inbuffers = [ [ ] for _ in iterfuncs ] [EOL] done = [number] [EOL] [EOL] def cb ( outb , inb ) : [EOL] def callback ( ) : [EOL] nonlocal done [EOL] outb . append ( [ ] ) [EOL] if not inb : [EOL] if done : [EOL] raise StopIteration [EOL] try : [EOL] item = next ( iterator ) [EOL] except StopIteration : [EOL] done = [number] [EOL] raise [EOL] for b in inbuffers : [EOL] b . append ( item ) [EOL] return inb . pop ( [number] ) [EOL] return callback [EOL] [EOL] iters = [ f ( caller ( cb ( outb , inb ) ) ) for outb , inb , f in zip ( outbuffers , inbuffers , iterfuncs ) ] [EOL] while done < [number] : [EOL] if done : [EOL] done += [number] [EOL] for b , it in zip ( outbuffers , iters ) : [EOL] if b and b [ [number] ] is None : [comment] [EOL] continue [EOL] while len ( b ) < [number] : [EOL] try : [EOL] elem = next ( it ) [EOL] except StopIteration : [EOL] b . append ( None ) [EOL] else : [EOL] b [ - [number] ] . append ( elem ) [EOL] yield from b . pop ( [number] ) [EOL] [EOL] return iterfunc [EOL] [EOL] [EOL] def mapping ( f ) : [EOL] def iterfunc ( iterator ) : [EOL] for i in iterator : [EOL] yield f ( i ) [EOL] return iterfunc [EOL] [EOL] [EOL] def filtering ( pred ) : [EOL] def iterfunc ( iterator ) : [EOL] for i in iterator : [EOL] if pred ( i ) : [EOL] yield i [EOL] return iterfunc [EOL] [EOL] [EOL] def main ( ) : [EOL] expected = [ [number] , [number] , - [number] , - [number] , [number] , - [number] , - [number] , [number] , - [number] , - [number] , [number] , - [number] , - [number] , [number] , - [number] ] [EOL] actual = list ( interleaving ( mapping ( lambda x : - x ) , filtering ( lambda x : x % [number] == [number] ) ) ( iter ( range ( [number] ) ) ) ) [EOL] if actual == expected : [EOL] print ( [string] ) [EOL] else : [EOL] print ( [string] % actual ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import itertools [EOL] [EOL] [EOL] def calling ( cb ) : [EOL] [docstring] [EOL] def iterfunc ( iterator ) : [EOL] for item in iterator : [EOL] cb ( ) [EOL] yield item [EOL] return iterfunc [EOL] [EOL] [EOL] def coalescing ( iterfunc ) : [EOL] [docstring] [EOL] def coalesced ( iterator ) : [EOL] buf = [ [ ] ] [EOL] def cb ( ) : [EOL] buf . append ( [ ] ) [EOL] [EOL] for item in iterfunc ( calling ( cb ) ( iterator ) ) : [EOL] buf [ - [number] ] . append ( item ) [EOL] while len ( buf ) > [number] : [EOL] yield buf . pop ( [number] ) [EOL] [EOL] yield from buf [EOL] return coalesced [EOL] [EOL] [EOL] def interleaving ( * iterfuncs ) : [EOL] [docstring] [EOL] n = len ( iterfuncs ) [EOL] def interleaved ( iterator ) : [EOL] wrapped_iters = [ coalescing ( f ) ( itercopy ) for f , itercopy in zip ( iterfuncs , itertools . tee ( iterator , n ) ) ] [EOL] while wrapped_iters : [EOL] for i , it in enumerate ( wrapped_iters ) : [EOL] try : [EOL] yield from next ( it ) [EOL] except StopIteration : [EOL] wrapped_iters [ i ] = None [EOL] wrapped_iters = list ( filter ( None , wrapped_iters ) ) [EOL] return interleaved [EOL] [EOL] [EOL] def mapping ( f ) : [EOL] def iterfunc ( iterator ) : [EOL] for i in iterator : [EOL] yield f ( i ) [EOL] return iterfunc [EOL] [EOL] [EOL] def filtering ( pred ) : [EOL] def iterfunc ( iterator ) : [EOL] for i in iterator : [EOL] if pred ( i ) : [EOL] yield i [EOL] return iterfunc [EOL] [EOL] [EOL] def main ( ) : [EOL] expected = [ [number] , [number] , - [number] , - [number] , [number] , - [number] , - [number] , [number] , - [number] , - [number] , [number] , - [number] , - [number] , [number] , - [number] ] [EOL] actual = list ( interleaving ( mapping ( lambda x : - x ) , filtering ( lambda x : x % [number] == [number] ) ) ( iter ( range ( [number] ) ) ) ) [EOL] if actual == expected : [EOL] print ( [string] ) [EOL] else : [EOL] print ( [string] % actual ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict , Any [EOL] import typing [EOL] import subprocess [EOL] import os [EOL] import subprocess [EOL] import sys [EOL] [EOL] def escape ( s , level ) : [EOL] [docstring] [EOL] if not level : [EOL] return s [EOL] out = [string] [EOL] for c in s : [EOL] if c in [string] : [EOL] out += f" [string] { c }" [EOL] else : [EOL] out += c [EOL] return escape ( out , level - [number] ) [EOL] [EOL] [EOL] def comp ( s , level = [number] ) : [EOL] [docstring] [EOL] if level < [number] : [EOL] raise Exception ( [string] ) [EOL] out = [string] [EOL] while s : [EOL] c = s [ [number] ] [EOL] if s [ : [number] ] == [string] : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] out += escape ( f' [string] { comp ( [string] ) } [string] { comp ( [string] ) } [string] ' , level ) [EOL] s = s [ [number] : ] [EOL] continue [EOL] elif c == [string] : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] out += escape ( [string] , level ) [EOL] elif c == [string] : [EOL] [comment] [EOL] out += escape ( f' [string] { comp ( [string] ) } [string] ' , level ) [EOL] elif c == [string] : [EOL] [comment] [EOL] out += escape ( f' [string] { comp ( [string] ) } [string] { comp ( [string] ) } [string] ' , level ) [EOL] elif c == [string] : [EOL] [comment] [EOL] out += escape ( f' [string] { comp ( [string] ) }' , level ) + comp ( [string] , level - [number] ) + escape ( f'{ comp ( [string] ) } [string] ' , level ) [EOL] elif c == [string] : [EOL] [comment] [EOL] out += escape ( f' [string] { comp ( [string] ) } [string] { comp ( [string] ) } [string] ' , level ) [EOL] elif c == [string] : [EOL] out += escape ( f' [string] { comp ( [string] ) }' , level ) + comp ( [string] , level - [number] ) + escape ( f'{ comp ( [string] ) } [string] ' , level ) [EOL] elif c == [string] : [EOL] [comment] [EOL] out += escape ( f' [string] { comp ( [string] ) }' , level ) + comp ( [string] , level - [number] ) + escape ( f'{ comp ( [string] ) } [string] ' , level ) [EOL] elif c == [string] : [EOL] [comment] [EOL] out += escape ( f' [string] { comp ( [string] ) }' , level ) + comp ( [string] , level - [number] ) + escape ( f'{ comp ( [string] ) }' , level ) + comp ( [string] , level - [number] ) + escape ( f'{ comp ( [string] ) } [string] ' , level ) [EOL] elif c in [string] : [EOL] [comment] [EOL] out += escape ( c , level ) [EOL] else : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] out += escape ( [string] , level ) + comp ( f"{ ord ( c ) : [string] }" , level - [number] ) + escape ( [string] , level ) [EOL] s = s [ [number] : ] [EOL] return out [EOL] [EOL] def check ( ) : [EOL] [comment] [EOL] [comment] [EOL] level = [number] [EOL] [comment] [EOL] compiled = ( [string] . join ( [string] + escape ( [string] , i ) for i in range ( level ) ) + comp ( [string] , level ) + comp ( [string] , level - [number] ) + comp ( [string] , level ) + comp ( [string] , level - [number] ) + comp ( [string] , level ) + comp ( [string] , level - [number] ) + comp ( [string] , level ) + comp ( [string] , level - [number] ) + comp ( [string] , level ) + comp ( [string] , level - [number] ) + comp ( [string] , level - [number] ) ) [EOL] [EOL] [comment] [EOL] print ( [string] , compiled ) [EOL] compiled += [string] [EOL] env = os . environ . copy ( ) [EOL] proc = subprocess . Popen ( [string] . split ( ) , stdin = subprocess . PIPE , env = env ) [EOL] [comment] [EOL] proc . communicate ( compiled . encode ( ) ) [EOL] [EOL] if __name__ == [string] : [EOL] check ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0