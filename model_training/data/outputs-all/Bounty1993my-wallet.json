	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Tuple [EOL] import typing [EOL] from __future__ import absolute_import , unicode_literals [EOL] [EOL] [comment] [EOL] [comment] [EOL] from . celery import app as celery_app [EOL] [EOL] __all__ = ( [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class StocksConfig ( AppConfig ) : [comment] [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterField ( model_name = [string] , name = [string] , field = models . DateField ( ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , migrations . DeleteModel ( name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from rest_framework . pagination import ( LimitOffsetPagination , PageNumberPagination , ) [EOL] [EOL] [EOL] class StandardPagePagination ( PageNumberPagination ) : [EOL] page_size = [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ApiConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from rest_framework . permissions import BasePermission [EOL] [EOL] [EOL] class IsOwnerOrReadOnly ( BasePermission ) : [EOL] message = [string] [EOL] [EOL] def has_object_permission ( self , request , view , obj ) : [EOL] return obj . profile == request . user [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ProfilesConfig ( AppConfig ) : [comment] [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Literal , Tuple , Type , Any [EOL] import typing_extensions [EOL] import typing [EOL] import my_wallet [EOL] from django . contrib . auth . models import AbstractUser [EOL] from django . db import models [EOL] from django . urls import reverse [EOL] [EOL] from PIL import Image [EOL] [EOL] [EOL] class Profile ( AbstractUser ) : [EOL] [EOL] address = models . CharField ( [string] , max_length = [number] , blank = True ) [EOL] city = models . CharField ( [string] , max_length = [number] , blank = True ) [EOL] zip_code = models . CharField ( [string] , max_length = [number] , blank = True ) [EOL] description = models . CharField ( [string] , max_length = [number] , blank = True ) [EOL] image = models . ImageField ( [string] , upload_to = [string] , default = [string] , blank = True ) [EOL] [EOL] @ property def full_name ( self ) : [EOL] if self . first_name or self . last_name : [EOL] return self . first_name + [string] + self . last_name [EOL] return self . username [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] super ( ) . save ( * args , ** kwargs ) [EOL] img = Image . open ( self . image . path ) [EOL] output_size = ( [number] , [number] ) [EOL] img . thumbnail ( output_size ) [EOL] img . save ( self . image . path ) [EOL] [EOL] def get_absolute_url ( self ) : [EOL] return reverse ( [string] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . username [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[my_wallet.profiles.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[my_wallet.profiles.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[my_wallet.profiles.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[my_wallet.profiles.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[my_wallet.profiles.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Dict , Tuple , Type , Any [EOL] import typing [EOL] import my_wallet [EOL] from django import forms [EOL] from django . contrib . auth . forms import PasswordChangeForm , UserCreationForm [EOL] [EOL] from crispy_forms . bootstrap import PrependedText [EOL] from crispy_forms . helper import FormHelper [EOL] from crispy_forms . layout import ( HTML , Button , Column , Div , Field , Fieldset , Layout , Reset , Row , Submit , ) [EOL] [EOL] from . models import Profile [EOL] [EOL] [EOL] class ProfileCreationForm ( UserCreationForm ) : [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] self . fields [ [string] ] . help_text = [string] [EOL] self . fields [ [string] ] . help_text = [string] [EOL] [EOL] class Meta : [EOL] model = Profile [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] [EOL] help_texts = { [string] : None , [string] : None , } [EOL] labels = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] def clean_email ( self ) : [EOL] email = self . cleaned_data [ [string] ] [EOL] if email and Profile . objects . filter ( email = email ) . exists ( ) : [EOL] raise forms . ValidationError ( [string] ) [EOL] return email [EOL] [EOL] [EOL] class ProfileUpdateForm ( forms . ModelForm ) : [EOL] class Meta : [EOL] model = Profile [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] widgets = { [string] : forms . Textarea ( attrs = { [string] : [string] , [string] : [number] , [string] : [number] } ) } [EOL] labels = { [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] def clean_email ( self ) : [EOL] email = self . cleaned_data [ [string] ] [EOL] id = self . instance . id [EOL] if email : [EOL] is_taken = Profile . objects . exclude ( id = id ) . filter ( email = email ) [EOL] if is_taken : [EOL] msg = [string] [EOL] raise forms . ValidationError ( msg ) [EOL] return email [EOL] [EOL] [EOL] class MyPasswordChangeForm ( PasswordChangeForm ) : [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] self . fields [ [string] ] . help_text = None [EOL] [EOL] [EOL] class ContactForm ( forms . Form ) : [EOL] subject = forms . CharField ( max_length = [number] , required = True ) [EOL] content = forms . CharField ( widget = forms . Textarea ( attrs = { [string] : [number] , [string] : [number] } ) , required = True ) [EOL] email = forms . EmailField ( label = [string] , required = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[my_wallet.profiles.forms.ContactForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[my_wallet.profiles.forms.ContactForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[my_wallet.profiles.forms.ContactForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL]	0 0 0 0 0 0 0 0
	0
	0
	0
from typing import Any [EOL] import typing [EOL] from django . test import TestCase [EOL] from django . urls import reverse [EOL] [EOL] [EOL] class CoreViewTest ( TestCase ) : [EOL] def test_status_code ( self ) : [EOL] url = reverse ( [string] ) [EOL] response = self . client . get ( url ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class CoreConfig ( AppConfig ) : [comment] [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
import logging [EOL] import logging [EOL] [EOL] from django . views . generic import TemplateView [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class HomeView ( TemplateView ) : [EOL] template_name = [string] [EOL] [EOL] def get ( self , * args ) : [EOL] logger . debug ( [string] ) [EOL] return super ( ) . get ( * args ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import include , path [EOL] [EOL] from . views import HomeView [EOL] [EOL] app_name = [string] [EOL] urlpatterns = [ path ( [string] , HomeView . as_view ( ) , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class CoreConfig ( AppConfig ) : [comment] [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from django . test import TestCase [EOL] from unittest import mock	0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] from django import template [EOL] from django . utils . html import format_html [EOL] [EOL] register = template . Library ( ) [EOL] [EOL] [EOL] @ register . filter def color_field ( value ) : [EOL] if value : [EOL] value = round ( value , [number] ) [EOL] if value < [number] : [EOL] return format_html ( f' [string] { value } [string] ' ) [EOL] elif value > [number] : [EOL] return format_html ( f' [string] { value } [string] ' ) [EOL] return value [EOL] [EOL] [EOL] @ register . filter def color_percent ( value , digits ) : [EOL] value = round ( value , digits ) if value else value [EOL] if value : [EOL] if value < [number] : [EOL] return format_html ( f' [string] { value } [string] ' ) [EOL] elif value > [number] : [EOL] return format_html ( f' [string] { value } [string] ' ) [EOL] return value [EOL] [EOL] [EOL] @ register . filter def change_kind ( value ) : [EOL] if value == [string] : [EOL] return [string] [EOL] elif value == [string] : [EOL] return [string] [EOL] else : [EOL] return value	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0