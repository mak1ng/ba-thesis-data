from typing import List [EOL] import typing [EOL] from setuptools import setup [EOL] [EOL] [comment] [EOL] version = [string] [EOL] [EOL] [EOL] requirements = [ [string] , ] [EOL] [EOL] [EOL] setup ( name = [string] , version = version , description = [string] , long_description = open ( [string] ) . read ( ) , license = [string] , author = [string] , author_email = [string] , url = [string] , classifiers = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , python_requires = [string] , keywords = [string] , packages = ( [string] , ) , package_dir = { [string] : [string] } , package_data = { [string] : [ [string] ] } , install_requires = requirements , entry_points = { [string] : [ [string] , ] , } , project_urls = { [string] : [string] , } , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import builtins [EOL] from typing import Type , Tuple , List , Dict , Any , Set , Generator [EOL] import typing [EOL] import subprocess [EOL] import pathlib [EOL] import src [EOL] [docstring] [EOL] [EOL] from collections import namedtuple [EOL] [EOL] import os [EOL] import shlex [EOL] import shutil [EOL] import pytest [EOL] import pathlib [EOL] import tempfile [EOL] import textwrap [EOL] import subprocess [EOL] [EOL] from unittest import mock [EOL] [EOL] from pydocstyle import checker , violations [EOL] [EOL] [EOL] __all__ = ( ) [EOL] [EOL] [EOL] class SandboxEnv : [EOL] [docstring] [EOL] [EOL] Result = namedtuple ( [string] , ( [string] , [string] , [string] ) ) [EOL] [EOL] def __init__ ( self , script_name = [string] ) : [EOL] [docstring] [EOL] self . tempdir = None [EOL] self . script_name = script_name [EOL] [EOL] def write_config ( self , prefix = [string] , name = [string] , ** kwargs ) : [EOL] [docstring] [EOL] base = os . path . join ( self . tempdir , prefix ) if prefix else self . tempdir [EOL] if not os . path . isdir ( base ) : [EOL] self . makedirs ( base ) [EOL] [EOL] with open ( os . path . join ( base , name ) , [string] ) as conf : [EOL] conf . write ( f" [string] { self . script_name } [string] " ) [EOL] for k , v in kwargs . items ( ) : [EOL] conf . write ( [string] . format ( k . replace ( [string] , [string] ) , v ) ) [EOL] [EOL] def open ( self , path , * args , ** kwargs ) : [EOL] [docstring] [EOL] return open ( os . path . join ( self . tempdir , path ) , * args , ** kwargs ) [EOL] [EOL] def get_path ( self , name , prefix = [string] ) : [EOL] return os . path . join ( self . tempdir , prefix , name ) [EOL] [EOL] def makedirs ( self , path , * args , ** kwargs ) : [EOL] [docstring] [EOL] os . makedirs ( os . path . join ( self . tempdir , path ) , * args , ** kwargs ) [EOL] [EOL] def invoke ( self , args = [string] , target = None ) : [EOL] [docstring] [EOL] run_target = self . tempdir if target is None else \ [EOL] os . path . join ( self . tempdir , target ) [EOL] [EOL] cmd = shlex . split ( [string] . format ( self . script_name , run_target , args ) , posix = False ) [EOL] p = subprocess . Popen ( cmd , stdout = subprocess . PIPE , stderr = subprocess . PIPE ) [EOL] out , err = p . communicate ( ) [EOL] return self . Result ( out = out . decode ( [string] ) , err = err . decode ( [string] ) , code = p . returncode ) [EOL] [EOL] def __enter__ ( self ) : [EOL] self . tempdir = tempfile . mkdtemp ( ) [EOL] [comment] [EOL] self . write_config ( ) [EOL] return self [EOL] [EOL] def __exit__ ( self , * args , ** kwargs ) : [EOL] shutil . rmtree ( self . tempdir ) [EOL] pass [EOL] [EOL] [EOL] @ pytest . yield_fixture ( scope = [string] ) def install_package ( request ) : [EOL] [docstring] [EOL] cwd = os . path . join ( os . path . dirname ( __file__ ) , [string] , [string] ) [EOL] subprocess . check_call ( shlex . split ( [string] ) , cwd = cwd ) [EOL] yield [EOL] subprocess . check_call ( shlex . split ( [string] ) , cwd = cwd ) [EOL] [EOL] [EOL] @ pytest . yield_fixture ( scope = [string] ) def env ( request ) : [EOL] [docstring] [EOL] with SandboxEnv ( ) as test_env : [EOL] yield test_env [EOL] [EOL] [EOL] pytestmark = pytest . mark . usefixtures ( [string] ) [EOL] [EOL] [EOL] def parse_errors ( err ) : [EOL] [docstring] [EOL] result = { } [EOL] py_ext = [string] [EOL] lines = err . split ( [string] ) [EOL] while lines : [EOL] curr_line = lines . pop ( [number] ) [EOL] filename = curr_line [ : curr_line . find ( py_ext ) + len ( py_ext ) ] [EOL] if lines : [EOL] err_line = lines . pop ( [number] ) . strip ( ) [EOL] err_code = err_line . split ( [string] ) [ [number] ] [EOL] basename = os . path . basename ( filename ) [EOL] result . setdefault ( basename , set ( ) ) . add ( err_code ) [EOL] [EOL] return result [EOL] [EOL] [EOL] def test_pep257_conformance ( ) : [EOL] [docstring] [EOL] base_dir = ( pathlib . Path ( __file__ ) . parent / [string] ) . resolve ( ) [EOL] excluded = base_dir / [string] / [string] [EOL] src_files = ( str ( path ) for path in base_dir . glob ( [string] ) if excluded not in path . parents ) [EOL] [EOL] ignored = { [string] , [string] } [EOL] select = violations . conventions . pep257 - ignored [EOL] errors = list ( checker . check ( src_files , select = select ) ) [EOL] assert errors == [ ] , errors [EOL] [EOL] [EOL] def test_ignore_list ( ) : [EOL] [docstring] [EOL] function_to_check = textwrap . dedent ( [string] ) [EOL] expected_error_codes = { [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] } [EOL] mock_open = mock . mock_open ( read_data = function_to_check ) [EOL] from pydocstyle import checker [EOL] with mock . patch . object ( checker . tk , [string] , mock_open , create = True ) : [EOL] [comment] [EOL] [comment] [EOL] errors = tuple ( checker . check ( [ [string] ] , ignore = { } ) ) [EOL] error_codes = { error . code for error in errors } [EOL] assert error_codes == expected_error_codes [EOL] [EOL] [comment] [EOL] mock_open = mock . mock_open ( read_data = function_to_check ) [EOL] with mock . patch . object ( checker . tk , [string] , mock_open , create = True ) : [EOL] ignored = { [string] , [string] , [string] } [EOL] errors = tuple ( checker . check ( [ [string] ] , ignore = ignored ) ) [EOL] error_codes = { error . code for error in errors } [EOL] assert error_codes == expected_error_codes - ignored [EOL] [EOL] [EOL] def test_skip_errors ( ) : [EOL] [docstring] [EOL] function_to_check = textwrap . dedent ( [string] ) [EOL] expected_error_codes = { [string] , [string] , [string] , [string] , [string] } [EOL] mock_open = mock . mock_open ( read_data = function_to_check ) [EOL] from pydocstyle import checker [EOL] with mock . patch . object ( checker . tk , [string] , mock_open , create = True ) : [EOL] [comment] [EOL] [comment] [EOL] errors = tuple ( checker . check ( [ [string] ] , ignore = { } ) ) [EOL] error_codes = { error . code for error in errors } [EOL] assert error_codes == expected_error_codes [EOL] [EOL] skipped_error_codes = { [string] , [string] , [string] , [string] } [EOL] [comment] [EOL] mock_open = mock . mock_open ( read_data = function_to_check ) [EOL] with mock . patch . object ( checker . tk , [string] , mock_open , create = True ) : [EOL] errors = tuple ( checker . check ( [ [string] ] , ignore = { } , ignore_inline_noqa = True ) ) [EOL] error_codes = { error . code for error in errors } [EOL] assert error_codes == expected_error_codes | skipped_error_codes [EOL] [EOL] [EOL] def test_run_as_named_module ( ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] cmd = shlex . split ( [string] ) [EOL] p = subprocess . Popen ( cmd , stdout = subprocess . PIPE , stderr = subprocess . PIPE ) [EOL] out , err = p . communicate ( ) [EOL] assert p . returncode == [number] , out . decode ( [string] ) + err . decode ( [string] ) [EOL] [EOL] [EOL] def test_config_file ( env ) : [EOL] [docstring] [EOL] with env . open ( [string] , [string] ) as example : [EOL] example . write ( textwrap . dedent ( [string] ) ) [EOL] [EOL] env . write_config ( ignore = [string] ) [EOL] out , err , code = env . invoke ( ) [EOL] assert code == [number] [EOL] assert [string] not in out [EOL] assert [string] in out [EOL] [EOL] env . write_config ( ignore = [string] ) [EOL] out , err , code = env . invoke ( ) [EOL] assert code == [number] [EOL] assert [string] in out [EOL] assert [string] in out [EOL] [EOL] env . write_config ( ignore = [string] ) [EOL] out , err , code = env . invoke ( ) [EOL] assert code == [number] [EOL] assert [string] not in out [EOL] assert [string] not in out [EOL] [EOL] env . write_config ( ignore = [string] ) [EOL] _ , err , code = env . invoke ( ) [EOL] assert code == [number] [EOL] assert [string] not in err [EOL] assert [string] not in err [EOL] [EOL] [EOL] def test_sectionless_config_file ( env ) : [EOL] [docstring] [EOL] with env . open ( [string] , [string] ) as conf : [EOL] conf . write ( [string] ) [EOL] config_path = conf . name [EOL] [EOL] _ , err , code = env . invoke ( f' [string] { config_path }' ) [EOL] assert code == [number] [EOL] assert [string] in err [EOL] [EOL] with env . open ( [string] , [string] ) as example : [EOL] example . write ( textwrap . dedent ( [string] ) ) [EOL] [EOL] with env . open ( [string] , [string] ) as conf : [EOL] conf . write ( [string] ) [EOL] conf . write ( [string] ) [EOL] [EOL] out , err , code = env . invoke ( ) [EOL] assert code == [number] [EOL] assert [string] in out [EOL] assert [string] not in err [EOL] [EOL] [EOL] def test_multiple_lined_config_file ( env ) : [EOL] [docstring] [EOL] with env . open ( [string] , [string] ) as example : [EOL] example . write ( textwrap . dedent ( [string] ) ) [EOL] [EOL] select_string = ( [string] [string] [string] ) [EOL] env . write_config ( select = select_string ) [EOL] [EOL] out , err , code = env . invoke ( ) [EOL] assert code == [number] [EOL] assert [string] in out [EOL] assert [string] in out [EOL] assert [string] in out [EOL] assert [string] not in out [EOL] [EOL] [EOL] def test_config_path ( env ) : [EOL] [docstring] [EOL] with env . open ( [string] , [string] ) as example : [EOL] example . write ( textwrap . dedent ( [string] ) ) [EOL] [EOL] env . write_config ( ignore = [string] ) [EOL] env . write_config ( name = [string] , ignore = [string] ) [EOL] [EOL] out , err , code = env . invoke ( ) [EOL] assert code == [number] [EOL] assert [string] not in out [EOL] assert [string] in out [EOL] [EOL] out , err , code = env . invoke ( [string] . format ( env . get_path ( [string] ) ) ) [EOL] assert code == [number] , out + err [EOL] assert [string] in out [EOL] assert [string] not in out [EOL] [EOL] [EOL] def test_non_existent_config ( env ) : [EOL] out , err , code = env . invoke ( [string] ) [EOL] assert code == [number] [EOL] [EOL] [EOL] def test_verbose ( env ) : [EOL] [docstring] [EOL] with env . open ( [string] , [string] ) as example : [EOL] example . write ( [string] ) [EOL] [EOL] out , _ , code = env . invoke ( ) [EOL] assert code == [number] [EOL] assert [string] not in out [EOL] [EOL] out , _ , code = env . invoke ( args = [string] ) [EOL] assert code == [number] [EOL] assert [string] in out [EOL] [EOL] [EOL] def test_count ( env ) : [EOL] [docstring] [EOL] with env . open ( [string] , [string] ) as example : [EOL] example . write ( textwrap . dedent ( [string] ) ) [EOL] [EOL] out , err , code = env . invoke ( args = [string] ) [EOL] assert code == [number] [EOL] assert [string] in out [EOL] [comment] [EOL] [comment] [EOL] assert [string] == out . split ( [string] ) [ - [number] ] . strip ( ) [EOL] [EOL] [EOL] def test_select_cli ( env ) : [EOL] [docstring] [EOL] with env . open ( [string] , [string] ) as example : [EOL] example . write ( textwrap . dedent ( [string] ) ) [EOL] [EOL] out , err , code = env . invoke ( args = [string] ) [EOL] assert code == [number] [EOL] assert [string] in out [EOL] assert [string] not in out [EOL] [EOL] [EOL] def test_select_config ( env ) : [EOL] [docstring] [EOL] with env . open ( [string] , [string] ) as example : [EOL] example . write ( textwrap . dedent ( [string] ) ) [EOL] [EOL] env . write_config ( select = [string] ) [EOL] out , err , code = env . invoke ( ) [EOL] assert code == [number] [EOL] assert [string] in out [EOL] assert [string] in out [EOL] assert [string] not in out [EOL] [EOL] [EOL] def test_add_select_cli ( env ) : [EOL] [docstring] [EOL] with env . open ( [string] , [string] ) as example : [EOL] example . write ( textwrap . dedent ( [string] ) ) [EOL] [EOL] env . write_config ( select = [string] ) [EOL] out , err , code = env . invoke ( args = [string] ) [EOL] assert code == [number] [EOL] assert [string] in out [EOL] assert [string] in out [EOL] assert [string] in out [EOL] assert [string] not in out [EOL] [EOL] [EOL] def test_add_ignore_cli ( env ) : [EOL] [docstring] [EOL] with env . open ( [string] , [string] ) as example : [EOL] example . write ( textwrap . dedent ( [string] ) ) [EOL] [EOL] env . write_config ( select = [string] ) [EOL] out , err , code = env . invoke ( args = [string] ) [EOL] assert code == [number] [EOL] assert [string] in out [EOL] assert [string] not in out [EOL] assert [string] not in out [EOL] [EOL] [EOL] def test_wildcard_add_ignore_cli ( env ) : [EOL] [docstring] [EOL] with env . open ( [string] , [string] ) as example : [EOL] example . write ( textwrap . dedent ( [string] ) ) [EOL] [EOL] env . write_config ( select = [string] ) [EOL] out , err , code = env . invoke ( args = [string] ) [EOL] assert code == [number] [EOL] assert [string] in out [EOL] assert [string] not in out [EOL] [EOL] [EOL] def test_ignores_whitespace_in_fixed_option_set ( env ) : [EOL] with env . open ( [string] , [string] ) as example : [EOL] example . write ( [string] ) [EOL] env . write_config ( ignore = [string] ) [EOL] out , err , code = env . invoke ( ) [EOL] assert code == [number] [EOL] assert [string] not in out [EOL] assert err == [string] [EOL] [EOL] [EOL] def test_bad_wildcard_add_ignore_cli ( env ) : [EOL] [docstring] [EOL] with env . open ( [string] , [string] ) as example : [EOL] example . write ( textwrap . dedent ( [string] ) ) [EOL] [EOL] env . write_config ( select = [string] ) [EOL] out , err , code = env . invoke ( args = [string] ) [EOL] assert code == [number] [EOL] assert [string] in out [EOL] assert [string] in out [EOL] assert [string] not in out [EOL] assert ( [string] in err ) [EOL] [EOL] [EOL] def test_overload_function ( env ) : [EOL] [docstring] [EOL] with env . open ( [string] , [string] ) as example : [EOL] example . write ( textwrap . dedent ( [string] ) ) [EOL] env . write_config ( ignore = [string] ) [EOL] out , err , code = env . invoke ( ) [EOL] assert code == [number] [EOL] assert [string] in out [EOL] assert [string] not in out [EOL] [EOL] [EOL] def test_overload_method ( env ) : [EOL] [docstring] [EOL] with env . open ( [string] , [string] ) as example : [EOL] example . write ( textwrap . dedent ( [string] ) ) [EOL] env . write_config ( ignore = [string] ) [EOL] out , err , code = env . invoke ( ) [EOL] assert code == [number] [EOL] assert [string] in out [EOL] assert [string] not in out [EOL] assert [string] not in out [EOL] [EOL] [EOL] def test_overload_method_valid ( env ) : [EOL] [docstring] [EOL] with env . open ( [string] , [string] ) as example : [EOL] example . write ( textwrap . dedent ( [string] ) ) [EOL] env . write_config ( ignore = [string] ) [EOL] out , err , code = env . invoke ( ) [EOL] assert code == [number] [EOL] [EOL] [EOL] def test_overload_function_valid ( env ) : [EOL] [docstring] [EOL] with env . open ( [string] , [string] ) as example : [EOL] example . write ( textwrap . dedent ( [string] ) ) [EOL] env . write_config ( ignore = [string] ) [EOL] out , err , code = env . invoke ( ) [EOL] assert code == [number] [EOL] [EOL] [EOL] def test_overload_nested_function ( env ) : [EOL] [docstring] [EOL] with env . open ( [string] , [string] ) as example : [EOL] example . write ( textwrap . dedent ( [string] ) ) [EOL] env . write_config ( ignore = [string] ) [EOL] out , err , code = env . invoke ( ) [EOL] assert code == [number] [EOL] assert [string] in out [EOL] assert [string] not in out [EOL] [EOL] [EOL] def test_overload_nested_function_valid ( env ) : [EOL] [docstring] [EOL] with env . open ( [string] , [string] ) as example : [EOL] example . write ( textwrap . dedent ( [string] ) ) [EOL] env . write_config ( ignore = [string] ) [EOL] out , err , code = env . invoke ( ) [EOL] assert code == [number] [EOL] [EOL] [EOL] def test_conflicting_select_ignore_config ( env ) : [EOL] [docstring] [EOL] env . write_config ( select = [string] , ignore = [string] ) [EOL] _ , err , code = env . invoke ( ) [EOL] assert code == [number] [EOL] assert [string] in err [EOL] [EOL] [EOL] def test_conflicting_select_convention_config ( env ) : [EOL] [docstring] [EOL] env . write_config ( select = [string] , convention = [string] ) [EOL] _ , err , code = env . invoke ( ) [EOL] assert code == [number] [EOL] assert [string] in err [EOL] [EOL] [EOL] def test_conflicting_ignore_convention_config ( env ) : [EOL] [docstring] [EOL] env . write_config ( ignore = [string] , convention = [string] ) [EOL] _ , err , code = env . invoke ( ) [EOL] assert code == [number] [EOL] assert [string] in err [EOL] [EOL] [EOL] def test_missing_docstring_in_package ( env ) : [EOL] [docstring] [EOL] with env . open ( [string] , [string] ) as init : [EOL] pass [comment] [EOL] out , err , code = env . invoke ( ) [EOL] assert code == [number] [EOL] assert [string] not in out [comment] [EOL] assert [string] in out [comment] [EOL] [EOL] [EOL] def test_illegal_convention ( env ) : [EOL] [docstring] [EOL] _ , err , code = env . invoke ( [string] ) [EOL] assert code == [number] , err [EOL] assert [string] in err [EOL] assert [string] in err [EOL] assert [string] in err [EOL] assert [string] in err [EOL] [EOL] [EOL] def test_empty_select_cli ( env ) : [EOL] [docstring] [EOL] with env . open ( [string] , [string] ) as example : [EOL] example . write ( textwrap . dedent ( [string] ) ) [EOL] [EOL] _ , _ , code = env . invoke ( args = [string] ) [EOL] assert code == [number] [EOL] [EOL] [EOL] def test_empty_select_config ( env ) : [EOL] [docstring] [EOL] with env . open ( [string] , [string] ) as example : [EOL] example . write ( textwrap . dedent ( [string] ) ) [EOL] [EOL] env . write_config ( select = [string] ) [EOL] _ , _ , code = env . invoke ( ) [EOL] assert code == [number] [EOL] [EOL] [EOL] def test_empty_select_with_added_error ( env ) : [EOL] [docstring] [EOL] with env . open ( [string] , [string] ) as example : [EOL] example . write ( textwrap . dedent ( [string] ) ) [EOL] [EOL] env . write_config ( select = [string] ) [EOL] out , err , code = env . invoke ( args = [string] ) [EOL] assert code == [number] [EOL] assert [string] in out [EOL] assert [string] not in out [EOL] assert [string] not in out [EOL] [EOL] [EOL] def test_pep257_convention ( env ) : [EOL] [docstring] [EOL] with env . open ( [string] , [string] ) as example : [EOL] example . write ( textwrap . dedent ( [string] ) ) [EOL] [EOL] env . write_config ( convention = [string] ) [EOL] out , err , code = env . invoke ( ) [EOL] assert code == [number] [EOL] assert [string] in out [EOL] assert [string] in out [EOL] assert [string] not in out [EOL] assert [string] not in out [EOL] assert [string] not in out [EOL] assert [string] not in out [EOL] [EOL] [EOL] def test_numpy_convention ( env ) : [EOL] [docstring] [EOL] with env . open ( [string] , [string] ) as example : [EOL] example . write ( textwrap . dedent ( [string] ) ) [EOL] [EOL] env . write_config ( convention = [string] ) [EOL] out , err , code = env . invoke ( ) [EOL] assert code == [number] [EOL] assert [string] not in out [EOL] assert [string] not in out [EOL] assert [string] in out [EOL] assert [string] in out [EOL] assert [string] in out [EOL] assert [string] in out [EOL] assert [string] not in out [EOL] assert [string] not in out [EOL] [EOL] [EOL] def test_google_convention ( env ) : [EOL] [docstring] [EOL] with env . open ( [string] , [string] ) as example : [EOL] example . write ( textwrap . dedent ( [string] ) ) [EOL] [EOL] env . write_config ( convention = [string] ) [EOL] out , err , code = env . invoke ( ) [EOL] assert code == [number] [EOL] assert [string] in out [EOL] assert [string] not in out [EOL] assert [string] not in out [EOL] assert [string] in out [EOL] assert [string] not in out [EOL] assert [string] not in out [EOL] assert [string] in out [EOL] assert [string] not in out [EOL] assert [string] in out [EOL] assert [string] in out [EOL] [EOL] [EOL] def test_config_file_inheritance ( env ) : [EOL] [docstring] [EOL] env . write_config ( select = [string] ) [EOL] env . write_config ( prefix = [string] , inherit = False ) [EOL] [EOL] with env . open ( os . path . join ( [string] , [string] ) , [string] ) as test : [EOL] test . write ( textwrap . dedent ( [string] ) ) [EOL] [EOL] out , err , code = env . invoke ( ) [EOL] [EOL] assert code == [number] [EOL] assert [string] in out [EOL] assert [string] in out [EOL] [EOL] [EOL] def test_config_file_cumulative_add_ignores ( env ) : [EOL] [docstring] [EOL] env . write_config ( select = [string] , add_ignore = [string] ) [EOL] env . write_config ( prefix = [string] , add_ignore = [string] ) [EOL] [EOL] test_content = textwrap . dedent ( [string] ) [EOL] [EOL] with env . open ( [string] , [string] ) as test : [EOL] test . write ( test_content ) [EOL] [EOL] with env . open ( os . path . join ( [string] , [string] ) , [string] ) as test : [EOL] test . write ( test_content ) [EOL] [EOL] out , err , code = env . invoke ( ) [EOL] [EOL] err = parse_errors ( out ) [EOL] [EOL] assert code == [number] [EOL] assert [string] in err , err [EOL] assert [string] not in err , err [EOL] assert [string] not in err [ [string] ] , err [EOL] assert [string] in err [ [string] ] , err [EOL] [EOL] [EOL] def test_config_file_cumulative_add_select ( env ) : [EOL] [docstring] [EOL] env . write_config ( select = [string] , add_select = [string] ) [EOL] env . write_config ( prefix = [string] , add_select = [string] ) [EOL] [EOL] test_content = textwrap . dedent ( [string] ) [EOL] [EOL] with env . open ( [string] , [string] ) as test : [EOL] test . write ( test_content ) [EOL] [EOL] with env . open ( os . path . join ( [string] , [string] ) , [string] ) as test : [EOL] test . write ( test_content ) [EOL] [EOL] out , err , code = env . invoke ( ) [EOL] [EOL] err = parse_errors ( out ) [EOL] [EOL] assert code == [number] [EOL] assert [string] in err , err [EOL] assert [string] in err , err [EOL] assert err [ [string] ] == { [string] } , err [EOL] assert err [ [string] ] == { [string] , [string] } , err [EOL] [EOL] [EOL] def test_config_file_convention_overrides_select ( env ) : [EOL] [docstring] [EOL] env . write_config ( select = [string] ) [EOL] env . write_config ( prefix = [string] , convention = [string] ) [EOL] [EOL] test_content = [string] [EOL] [EOL] with env . open ( [string] , [string] ) as test : [EOL] test . write ( test_content ) [EOL] [EOL] with env . open ( os . path . join ( [string] , [string] ) , [string] ) as test : [EOL] test . write ( test_content ) [EOL] [EOL] out , err , code = env . invoke ( ) [EOL] [EOL] assert code == [number] [EOL] assert [string] in out , out [EOL] assert [string] not in out , out [EOL] assert [string] in out , out [EOL] [EOL] [EOL] def test_cli_overrides_config_file ( env ) : [EOL] [docstring] [EOL] env . write_config ( select = [string] , match_dir = [string] ) [EOL] [EOL] with env . open ( [string] , [string] ) as test : [EOL] test . write ( [string] ) [EOL] [EOL] env . makedirs ( [string] ) [EOL] with env . open ( os . path . join ( [string] , [string] ) , [string] ) as test : [EOL] test . write ( textwrap . dedent ( [string] ) ) [EOL] [EOL] out , err , code = env . invoke ( args = [string] ) [EOL] [EOL] assert code == [number] [EOL] assert [string] in out , out [EOL] assert [string] not in out , out [EOL] assert [string] in out , out [EOL] assert [string] not in out , out [EOL] [EOL] [EOL] def test_cli_match_overrides_config_file ( env ) : [EOL] [docstring] [EOL] env . write_config ( match_dir = [string] ) [EOL] env . write_config ( prefix = [string] , match = [string] ) [EOL] [EOL] with env . open ( [string] , [string] ) as test : [EOL] test . write ( textwrap . dedent ( [string] ) ) [EOL] [EOL] with env . open ( os . path . join ( [string] , [string] ) , [string] ) as test : [EOL] test . write ( [string] ) [EOL] [EOL] out , err , code = env . invoke ( args = [string] ) [EOL] [EOL] assert code == [number] [EOL] assert [string] in out , out [EOL] assert [string] not in out , out [EOL] assert [string] not in out , out [EOL] assert [string] in out , out [EOL] [EOL] [EOL] def test_config_file_convention_overrides_ignore ( env ) : [EOL] [docstring] [EOL] env . write_config ( ignore = [string] ) [EOL] env . write_config ( prefix = [string] , convention = [string] ) [EOL] [EOL] test_content = textwrap . dedent ( [string] ) [EOL] [EOL] with env . open ( [string] , [string] ) as test : [EOL] test . write ( test_content ) [EOL] [EOL] with env . open ( os . path . join ( [string] , [string] ) , [string] ) as test : [EOL] test . write ( test_content ) [EOL] [EOL] out , err , code = env . invoke ( ) [EOL] [EOL] assert code == [number] [EOL] assert [string] in out , out [EOL] assert [string] in out , out [EOL] assert [string] not in out , out [EOL] assert [string] in out , out [EOL] [EOL] [EOL] def test_config_file_ignore_overrides_select ( env ) : [EOL] [docstring] [EOL] env . write_config ( select = [string] ) [EOL] env . write_config ( prefix = [string] , ignore = [string] ) [EOL] [EOL] test_content = textwrap . dedent ( [string] ) [EOL] [EOL] with env . open ( [string] , [string] ) as test : [EOL] test . write ( test_content ) [EOL] [EOL] with env . open ( os . path . join ( [string] , [string] ) , [string] ) as test : [EOL] test . write ( test_content ) [EOL] [EOL] out , err , code = env . invoke ( ) [EOL] [EOL] err = parse_errors ( out ) [EOL] [EOL] assert code == [number] [EOL] assert [string] in err , err [EOL] assert [string] in err , err [EOL] assert err [ [string] ] == { [string] } , err [EOL] assert err [ [string] ] == { [string] , [string] } , err [EOL] [EOL] [EOL] def test_config_file_nearest_to_checked_file ( env ) : [EOL] [docstring] [EOL] env . write_config ( convention = [string] , add_ignore = [string] ) [EOL] env . write_config ( prefix = [string] , add_ignore = [string] ) [EOL] [EOL] test_content = textwrap . dedent ( [string] ) [EOL] [EOL] with env . open ( [string] , [string] ) as test : [EOL] test . write ( test_content ) [EOL] [EOL] env . makedirs ( [string] ) [EOL] with env . open ( os . path . join ( [string] , [string] ) , [string] ) as test : [EOL] test . write ( test_content ) [EOL] [EOL] with env . open ( os . path . join ( [string] , [string] ) , [string] ) as test : [EOL] test . write ( test_content ) [EOL] [EOL] out , err , code = env . invoke ( ) [EOL] [EOL] err = parse_errors ( out ) [EOL] [EOL] assert code == [number] [EOL] assert [string] in err , err [EOL] assert [string] in err , err [EOL] assert [string] in err , err [EOL] assert err [ [string] ] == { [string] , [string] } , err [EOL] assert err [ [string] ] == { [string] , [string] } , err [EOL] assert err [ [string] ] == { [string] } , err [EOL] [EOL] [EOL] def test_config_file_nearest_match_re ( env ) : [EOL] [docstring] [EOL] env . write_config ( convention = [string] , add_ignore = [string] ) [EOL] env . write_config ( prefix = [string] , match_dir = [string] ) [EOL] env . write_config ( prefix = os . path . join ( [string] , [string] ) , match = [string] ) [EOL] [EOL] content = textwrap . dedent ( [string] ) [EOL] [EOL] env . makedirs ( os . path . join ( [string] , [string] ) ) [EOL] with env . open ( os . path . join ( [string] , [string] , [string] ) , [string] ) as test : [EOL] test . write ( content ) [EOL] [EOL] with env . open ( os . path . join ( [string] , [string] , [string] ) , [string] ) as test : [EOL] test . write ( content ) [EOL] [EOL] with env . open ( os . path . join ( [string] , [string] , [string] ) , [string] ) as test : [EOL] test . write ( [string] ) [EOL] [EOL] _ , _ , code = env . invoke ( ) [EOL] [EOL] assert code == [number] [EOL] [EOL] [EOL] def test_syntax_error_multiple_files ( env ) : [EOL] [docstring] [EOL] for filename in ( [string] , [string] ) : [EOL] with env . open ( filename , [string] ) as fobj : [EOL] fobj . write ( [string] ) [EOL] [EOL] out , err , code = env . invoke ( args = [string] ) [EOL] assert code == [number] [EOL] assert [string] in err [EOL] assert [string] in err [EOL] [EOL] [EOL] def test_indented_function ( env ) : [EOL] [docstring] [EOL] env . write_config ( ignore = [string] ) [EOL] with env . open ( [string] , [string] ) as fobj : [EOL] fobj . write ( textwrap . dedent ( [string] ) ) [EOL] out , err , code = env . invoke ( args = [string] ) [EOL] assert code == [number] [EOL] assert [string] not in err [EOL] [EOL] [EOL] def test_only_comment_file ( env ) : [EOL] [docstring] [EOL] with env . open ( [string] , [string] ) as comments : [EOL] comments . write ( [string] [string] [string] [string] ) [EOL] [EOL] out , _ , code = env . invoke ( ) [EOL] assert [string] in out [EOL] out = out . replace ( [string] , [string] ) [EOL] for err in { [string] , [string] , [string] , [string] } : [EOL] assert err not in out [EOL] assert code == [number] [EOL] [EOL] [EOL] def test_comment_plus_docstring_file ( env ) : [EOL] [docstring] [EOL] with env . open ( [string] , [string] ) as comments_plus : [EOL] comments_plus . write ( [string] [string] [string] [string] [string] ) [EOL] [EOL] out , _ , code = env . invoke ( ) [EOL] assert [string] == out [EOL] assert code == [number] [EOL] [EOL] [EOL] def test_only_comment_with_noqa_file ( env ) : [EOL] [docstring] [EOL] with env . open ( [string] , [string] ) as comments : [EOL] comments . write ( [string] [string] [string] [string] [string] ) [EOL] [EOL] out , _ , code = env . invoke ( ) [EOL] assert [string] not in out [EOL] assert code == [number] [EOL] [EOL] [EOL] def test_comment_with_noqa_plus_docstring_file ( env ) : [EOL] [docstring] [EOL] with env . open ( [string] , [string] ) as comments_plus : [EOL] comments_plus . write ( [string] [string] [string] [string] [string] [string] ) [EOL] [EOL] out , _ , code = env . invoke ( ) [EOL] assert [string] == out [EOL] assert code == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.tests.test_integration.SandboxEnv.Result]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $subprocess.Popen[typing.Any]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $subprocess.Popen[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $subprocess.Popen[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any
	0
from typing import Type , Any [EOL] import typing [EOL] import src [EOL] [docstring] [EOL] [EOL] import pytest [EOL] import collections [EOL] import textwrap [EOL] from pydocstyle . violations import Error [EOL] [EOL] [EOL] MockDefinition = collections . namedtuple ( [string] , [ [string] , [string] ] ) [EOL] [EOL] [EOL] def test_message_without_context ( ) : [EOL] [docstring] [EOL] error = Error ( [string] , [string] , None ) [EOL] assert error . message == [string] [EOL] [EOL] [EOL] def test_message_with_context ( ) : [EOL] [docstring] [EOL] error = Error ( [string] , [string] , [string] , [number] ) [EOL] assert error . message == [string] [EOL] [EOL] [EOL] def test_message_with_insufficient_parameters ( ) : [EOL] [docstring] [EOL] error = Error ( [string] , [string] , [string] ) [EOL] with pytest . raises ( IndexError ) : [EOL] assert error . message [EOL] [EOL] [EOL] def test_lines ( ) : [EOL] [docstring] [EOL] error = Error ( [string] , [string] , None ) [EOL] definition = MockDefinition ( source = [ [string] , [string] , [string] , [string] , [string] , [string] ] , start = [number] ) [EOL] error . set_context ( definition , None ) [EOL] print ( error . lines ) [EOL] assert error . lines == textwrap . dedent ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.tests.error_tests.MockDefinition]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[src.tests.error_tests.MockDefinition]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import pathlib [EOL] import src [EOL] [docstring] [EOL] [EOL] import io [EOL] import sys [EOL] import pytest [EOL] import textwrap [EOL] from pathlib import Path [EOL] [EOL] from pydocstyle . parser import Parser , ParseError [EOL] [EOL] [EOL] class CodeSnippet ( io . StringIO ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , code_string ) : [EOL] [docstring] [EOL] io . StringIO . __init__ ( self , textwrap . dedent ( code_string ) ) [EOL] [EOL] [EOL] def test_function ( ) : [EOL] [docstring] [EOL] parser = Parser ( ) [EOL] code = CodeSnippet ( [string] ) [EOL] module = parser . parse ( code , [string] ) [EOL] assert module . is_public [EOL] assert module . dunder_all is None [EOL] [EOL] function , = module . children [EOL] assert function . name == [string] [EOL] assert function . decorators == [ ] [EOL] assert function . children == [ ] [EOL] assert function . docstring == [string] [EOL] assert function . docstring . start == [number] [EOL] assert function . docstring . end == [number] [EOL] assert function . kind == [string] [EOL] assert function . parent == module [EOL] assert function . start == [number] [EOL] assert function . end == [number] [EOL] assert function . error_lineno == [number] [EOL] assert function . source == code . getvalue ( ) [EOL] assert function . is_public [EOL] assert str ( function ) == [string] [EOL] [EOL] [EOL] def test_simple_fstring ( ) : [EOL] [docstring] [EOL] parser = Parser ( ) [EOL] code = CodeSnippet ( [string] ) [EOL] module = parser . parse ( code , [string] ) [EOL] assert module . is_public [EOL] assert module . dunder_all is None [EOL] [EOL] function , = module . children [EOL] assert function . name == [string] [EOL] assert function . decorators == [ ] [EOL] assert function . children == [ ] [EOL] assert function . docstring == [string] [EOL] assert function . docstring . start == [number] [EOL] assert function . docstring . end == [number] [EOL] assert function . kind == [string] [EOL] assert function . parent == module [EOL] assert function . start == [number] [EOL] assert function . end == [number] [EOL] assert function . error_lineno == [number] [EOL] assert function . source == code . getvalue ( ) [EOL] assert function . is_public [EOL] assert str ( function ) == [string] [EOL] [EOL] [EOL] def test_fstring_with_args ( ) : [EOL] [docstring] [EOL] parser = Parser ( ) [EOL] code = CodeSnippet ( [string] ) [EOL] module = parser . parse ( code , [string] ) [EOL] assert module . is_public [EOL] assert module . dunder_all is None [EOL] [EOL] function , = module . children [EOL] assert function . name == [string] [EOL] assert function . decorators == [ ] [EOL] assert function . children == [ ] [EOL] assert function . docstring == [string] [EOL] assert function . docstring . start == [number] [EOL] assert function . docstring . end == [number] [EOL] assert function . kind == [string] [EOL] assert function . parent == module [EOL] assert function . start == [number] [EOL] assert function . end == [number] [EOL] assert function . error_lineno == [number] [EOL] assert function . source == textwrap . dedent ( [string] ) [EOL] assert function . is_public [EOL] assert str ( function ) == [string] [EOL] [EOL] [EOL] def test_decorated_function ( ) : [EOL] [docstring] [EOL] parser = Parser ( ) [EOL] code = CodeSnippet ( [string] ) [EOL] module = parser . parse ( code , [string] ) [EOL] function , = module . children [EOL] assert function . name == [string] [EOL] assert len ( function . decorators ) == [number] [EOL] assert function . decorators [ [number] ] . name == [string] [EOL] assert function . children == [ ] [EOL] assert function . docstring == [string] [EOL] assert function . kind == [string] [EOL] assert function . parent == module [EOL] assert function . start == [number] [EOL] assert function . end == [number] [EOL] assert function . source == textwrap . dedent ( [string] ) [EOL] assert function . is_public [EOL] assert str ( function ) == [string] [EOL] [EOL] [EOL] def test_nested_function ( ) : [EOL] [docstring] [EOL] parser = Parser ( ) [EOL] code = CodeSnippet ( [string] ) [EOL] module = parser . parse ( code , [string] ) [EOL] [EOL] outer_function , = module . children [EOL] assert outer_function . name == [string] [EOL] assert outer_function . decorators == [ ] [EOL] assert outer_function . docstring == [string] [EOL] assert outer_function . kind == [string] [EOL] assert outer_function . parent == module [EOL] assert outer_function . start == [number] [EOL] assert outer_function . end == [number] [EOL] assert outer_function . error_lineno == [number] [EOL] assert outer_function . source == code . getvalue ( ) [EOL] assert outer_function . is_public [EOL] assert str ( outer_function ) == [string] [EOL] [EOL] inner_function , = outer_function . children [EOL] assert inner_function . name == [string] [EOL] assert inner_function . decorators == [ ] [EOL] assert inner_function . docstring == [string] [EOL] assert inner_function . kind == [string] [EOL] assert inner_function . parent == outer_function [EOL] assert inner_function . start == [number] [EOL] assert inner_function . end == [number] [EOL] assert inner_function . error_lineno == [number] [EOL] assert textwrap . dedent ( inner_function . source ) == textwrap . dedent ( [string] ) [EOL] assert not inner_function . is_public [EOL] assert str ( inner_function ) == [string] [EOL] [EOL] [EOL] def test_conditional_nested_function ( ) : [EOL] [docstring] [EOL] parser = Parser ( ) [EOL] code = CodeSnippet ( [string] ) [EOL] module = parser . parse ( code , [string] ) [EOL] [EOL] outer_function , = module . children [EOL] assert outer_function . name == [string] [EOL] assert outer_function . decorators == [ ] [EOL] assert outer_function . docstring == [string] [EOL] assert outer_function . kind == [string] [EOL] assert outer_function . parent == module [EOL] assert outer_function . start == [number] [EOL] assert outer_function . end == [number] [EOL] assert outer_function . source == code . getvalue ( ) [EOL] assert outer_function . is_public [EOL] assert str ( outer_function ) == [string] [EOL] [EOL] inner_function , = outer_function . children [EOL] assert inner_function . name == [string] [EOL] assert inner_function . decorators == [ ] [EOL] assert inner_function . docstring == [string] [EOL] assert inner_function . kind == [string] [EOL] assert inner_function . parent == outer_function [EOL] assert inner_function . start == [number] [EOL] assert inner_function . end == [number] [EOL] assert textwrap . dedent ( inner_function . source ) == textwrap . dedent ( [string] ) [EOL] assert not inner_function . is_public [EOL] assert str ( inner_function ) == [string] [EOL] [EOL] [EOL] def test_doubly_nested_function ( ) : [EOL] [docstring] [EOL] parser = Parser ( ) [EOL] code = CodeSnippet ( [string] ) [EOL] module = parser . parse ( code , [string] ) [EOL] [EOL] outer_function , = module . children [EOL] assert outer_function . name == [string] [EOL] assert outer_function . decorators == [ ] [EOL] assert outer_function . docstring == [string] [EOL] assert outer_function . kind == [string] [EOL] assert outer_function . parent == module [EOL] assert outer_function . start == [number] [EOL] assert outer_function . end == [number] [EOL] assert outer_function . source == code . getvalue ( ) [EOL] assert outer_function . is_public [EOL] assert str ( outer_function ) == [string] [EOL] [EOL] middle_function , = outer_function . children [EOL] assert middle_function . name == [string] [EOL] assert middle_function . decorators == [ ] [EOL] assert middle_function . docstring is None [EOL] assert middle_function . kind == [string] [EOL] assert middle_function . parent == outer_function [EOL] assert middle_function . start == [number] [EOL] assert middle_function . end == [number] [EOL] assert textwrap . dedent ( middle_function . source ) == textwrap . dedent ( [string] ) [EOL] assert not middle_function . is_public [EOL] assert ( str ( middle_function ) == [string] ) [EOL] [EOL] inner_function , = middle_function . children [EOL] assert inner_function . name == [string] [EOL] assert inner_function . decorators == [ ] [EOL] assert inner_function . docstring == [string] [EOL] assert inner_function . kind == [string] [EOL] assert inner_function . parent == middle_function [EOL] assert inner_function . start == [number] [EOL] assert inner_function . end == [number] [EOL] assert textwrap . dedent ( inner_function . source ) == textwrap . dedent ( [string] ) [EOL] assert not inner_function . is_public [EOL] assert str ( inner_function ) == [string] [EOL] [EOL] [EOL] def test_class ( ) : [EOL] [docstring] [EOL] parser = Parser ( ) [EOL] code = CodeSnippet ( [string] ) [EOL] module = parser . parse ( code , [string] ) [EOL] [EOL] klass , = module . children [EOL] assert klass . name == [string] [EOL] assert klass . decorators == [ ] [EOL] assert klass . children == [ ] [EOL] assert klass . docstring == [string] [EOL] assert klass . kind == [string] [EOL] assert klass . parent == module [EOL] assert klass . start == [number] [EOL] assert klass . end == [number] [EOL] assert klass . error_lineno == [number] [EOL] assert klass . source == code . getvalue ( ) [EOL] assert klass . is_public [EOL] assert str ( klass ) == [string] [EOL] [EOL] [EOL] def test_public_method ( ) : [EOL] [docstring] [EOL] parser = Parser ( ) [EOL] code = CodeSnippet ( [string] ) [EOL] module = parser . parse ( code , [string] ) [EOL] [EOL] klass , = module . children [EOL] assert klass . name == [string] [EOL] assert klass . decorators == [ ] [EOL] assert klass . docstring is None [EOL] assert klass . kind == [string] [EOL] assert klass . parent == module [EOL] assert klass . start == [number] [EOL] assert klass . end == [number] [EOL] assert klass . error_lineno == [number] [EOL] assert klass . source == code . getvalue ( ) [EOL] assert klass . is_public [EOL] assert str ( klass ) == [string] [EOL] [EOL] method , = klass . children [EOL] assert method . name == [string] [EOL] assert method . decorators == [ ] [EOL] assert method . docstring == [string] [EOL] assert method . kind == [string] [EOL] assert method . parent == klass [EOL] assert method . start == [number] [EOL] assert method . end == [number] [EOL] assert method . error_lineno == [number] [EOL] assert textwrap . dedent ( method . source ) == textwrap . dedent ( [string] ) [EOL] assert method . is_public [EOL] assert not method . is_magic [EOL] assert str ( method ) == [string] [EOL] [EOL] [EOL] def test_private_method ( ) : [EOL] [docstring] [EOL] parser = Parser ( ) [EOL] code = CodeSnippet ( [string] ) [EOL] module = parser . parse ( code , [string] ) [EOL] [EOL] klass , = module . children [EOL] assert klass . name == [string] [EOL] assert klass . decorators == [ ] [EOL] assert klass . docstring is None [EOL] assert klass . kind == [string] [EOL] assert klass . parent == module [EOL] assert klass . start == [number] [EOL] assert klass . end == [number] [EOL] assert klass . error_lineno == [number] [EOL] assert klass . source == code . getvalue ( ) [EOL] assert klass . is_public [EOL] assert str ( klass ) == [string] [EOL] [EOL] method , = klass . children [EOL] assert method . name == [string] [EOL] assert method . decorators == [ ] [EOL] assert method . docstring == [string] [EOL] assert method . kind == [string] [EOL] assert method . parent == klass [EOL] assert method . start == [number] [EOL] assert method . end == [number] [EOL] assert method . error_lineno == [number] [EOL] assert textwrap . dedent ( method . source ) == textwrap . dedent ( [string] ) [EOL] assert not method . is_public [EOL] assert not method . is_magic [EOL] assert str ( method ) == [string] [EOL] [EOL] [EOL] def test_magic_method ( ) : [EOL] [docstring] [EOL] parser = Parser ( ) [EOL] code = CodeSnippet ( [string] ) [EOL] module = parser . parse ( code , [string] ) [EOL] [EOL] klass , = module . children [EOL] assert klass . name == [string] [EOL] assert klass . decorators == [ ] [EOL] assert klass . docstring is None [EOL] assert klass . kind == [string] [EOL] assert klass . parent == module [EOL] assert klass . start == [number] [EOL] assert klass . end == [number] [EOL] assert klass . error_lineno == [number] [EOL] assert klass . source == code . getvalue ( ) [EOL] assert klass . is_public [EOL] assert str ( klass ) == [string] [EOL] [EOL] method , = klass . children [ [number] ] [EOL] assert method . name == [string] [EOL] assert method . decorators == [ ] [EOL] assert method . docstring is None [EOL] assert method . kind == [string] [EOL] assert method . parent == klass [EOL] assert method . start == [number] [EOL] assert method . end == [number] [EOL] assert method . error_lineno == [number] [EOL] assert textwrap . dedent ( method . source ) == textwrap . dedent ( [string] ) [EOL] assert method . is_public [EOL] assert method . is_magic [EOL] assert str ( method ) == [string] [EOL] [EOL] [EOL] def test_nested_class ( ) : [EOL] [docstring] [EOL] parser = Parser ( ) [EOL] code = CodeSnippet ( [string] ) [EOL] module = parser . parse ( code , [string] ) [EOL] [EOL] outer_class , = module . children [EOL] assert outer_class . name == [string] [EOL] assert outer_class . decorators == [ ] [EOL] assert outer_class . docstring == [string] [EOL] assert outer_class . kind == [string] [EOL] assert outer_class . parent == module [EOL] assert outer_class . start == [number] [EOL] assert outer_class . end == [number] [EOL] assert outer_class . error_lineno == [number] [EOL] assert outer_class . source == code . getvalue ( ) [EOL] assert outer_class . is_public [EOL] assert str ( outer_class ) == [string] [EOL] [EOL] inner_class , = outer_class . children [EOL] assert inner_class . name == [string] [EOL] assert inner_class . decorators == [ ] [EOL] assert inner_class . children == [ ] [EOL] assert inner_class . docstring == [string] [EOL] assert inner_class . kind == [string] [EOL] assert inner_class . parent == outer_class [EOL] assert inner_class . start == [number] [EOL] assert inner_class . end == [number] [EOL] assert inner_class . error_lineno == [number] [EOL] assert textwrap . dedent ( inner_class . source ) == textwrap . dedent ( [string] ) [EOL] assert inner_class . is_public [EOL] assert str ( inner_class ) == [string] [EOL] [EOL] [EOL] def test_raise_from ( ) : [EOL] [docstring] [EOL] parser = Parser ( ) [EOL] code = CodeSnippet ( [string] ) [EOL] parser . parse ( code , [string] ) [EOL] [EOL] [EOL] def test_simple_matrix_multiplication ( ) : [EOL] [docstring] [EOL] parser = Parser ( ) [EOL] code = CodeSnippet ( [string] ) [EOL] parser . parse ( code , [string] ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( CodeSnippet ( [string] ) , CodeSnippet ( [string] ) , CodeSnippet ( [string] ) , ) ) def test_matrix_multiplication_with_decorators ( code ) : [EOL] [docstring] [EOL] parser = Parser ( ) [EOL] module = parser . parse ( code , [string] ) [EOL] [EOL] outer_function , = module . children [EOL] assert outer_function . name == [string] [EOL] [EOL] inner_function , = outer_function . children [EOL] assert len ( inner_function . decorators ) == [number] [EOL] assert inner_function . decorators [ [number] ] . name == [string] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( Path ( [string] ) , Path ( [string] ) , Path ( [string] ) / [string] , Path ( [string] ) / [string] , Path ( [string] ) / [string] / [string] , Path ( [string] ) / [string] / [string] / [string] ) ) def test_module_publicity_with_public_path ( public_path ) : [EOL] [docstring] [EOL] parser = Parser ( ) [EOL] code = CodeSnippet ( [string] ) [EOL] module = parser . parse ( code , str ( public_path ) ) [EOL] assert module . is_public [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( Path ( [string] ) , Path ( [string] ) / [string] , Path ( [string] ) / [string] / [string] , Path ( [string] ) / [string] / [string] / [string] , Path ( [string] ) , Path ( [string] ) / [string] , Path ( [string] ) / [string] / [string] , Path ( [string] ) / [string] / [string] / [string] ) ) def test_module_publicity_with_private_paths ( private_path ) : [EOL] [docstring] [EOL] parser = Parser ( ) [EOL] code = CodeSnippet ( [string] ) [EOL] module = parser . parse ( code , str ( private_path ) ) [EOL] assert not module . is_public [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( ( [string] , False ) , ( [string] , True ) , ) ) def test_module_publicity_with_different_sys_path ( syspath , is_public , monkeypatch ) : [EOL] [docstring] [EOL] parser = Parser ( ) [EOL] code = CodeSnippet ( [string] ) [EOL] [EOL] monkeypatch . syspath_prepend ( syspath ) [EOL] [EOL] path = Path ( [string] ) / [string] / [string] [EOL] module = parser . parse ( code , str ( path ) ) [EOL] assert module . is_public == is_public [EOL] [EOL] [EOL] def test_complex_module ( ) : [EOL] [docstring] [EOL] parser = Parser ( ) [EOL] code = CodeSnippet ( [string] ) [EOL] [EOL] module = parser . parse ( code , [string] ) [EOL] assert list ( module ) [ [number] ] == module [EOL] assert len ( list ( module ) ) == [number] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( CodeSnippet ( [string] ) , CodeSnippet ( [string] ) , CodeSnippet ( [string] ) , CodeSnippet ( [string] ) , CodeSnippet ( [string] ) , CodeSnippet ( [string] ) , CodeSnippet ( [string] ) , CodeSnippet ( [string] ) , CodeSnippet ( [string] ) , CodeSnippet ( [string] ) , CodeSnippet ( [string] ) , ) ) def test_dunder_all ( code ) : [EOL] [docstring] [EOL] parser = Parser ( ) [EOL] module = parser . parse ( code , [string] ) [EOL] assert module . dunder_all == ( [string] , [string] ) [EOL] [EOL] [EOL] def test_single_value_dunder_all ( ) : [EOL] [docstring] [EOL] parser = Parser ( ) [EOL] code = CodeSnippet ( [string] ) [EOL] module = parser . parse ( code , [string] ) [EOL] assert module . dunder_all == ( [string] , ) [EOL] [EOL] code = CodeSnippet ( [string] ) [EOL] module = parser . parse ( code , [string] ) [EOL] assert module . dunder_all is None [EOL] assert module . dunder_all_error [EOL] [EOL] code = CodeSnippet ( [string] ) [EOL] module = parser . parse ( code , [string] ) [EOL] assert module . dunder_all == ( [string] , ) [EOL] [EOL] [EOL] indeterminable_dunder_all_test_cases = [ CodeSnippet ( [string] ) , CodeSnippet ( [string] ) , CodeSnippet ( [string] ) , CodeSnippet ( [string] ) , CodeSnippet ( [string] ) , CodeSnippet ( [string] ) , CodeSnippet ( [string] ) , ] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , indeterminable_dunder_all_test_cases ) def test_indeterminable_dunder_all ( code ) : [EOL] [docstring] [EOL] parser = Parser ( ) [EOL] module = parser . parse ( code , [string] ) [EOL] assert module . dunder_all is None [EOL] assert module . dunder_all_error [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( CodeSnippet ( [string] ) , CodeSnippet ( [string] ) , CodeSnippet ( [string] ) , CodeSnippet ( [string] ) , CodeSnippet ( [string] ) , CodeSnippet ( [string] ) , CodeSnippet ( [string] ) , ) ) def test_future_import ( code ) : [EOL] [docstring] [EOL] parser = Parser ( ) [EOL] module = parser . parse ( code , [string] ) [EOL] assert module . future_imports == { [string] , [string] } [EOL] [EOL] [EOL] def test_noqa_function ( ) : [EOL] [docstring] [EOL] code = CodeSnippet ( [string] ) [EOL] parser = Parser ( ) [EOL] module = parser . parse ( code , [string] ) [EOL] function , = module . children [EOL] assert function . skipped_error_codes == [string] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( CodeSnippet ( [string] ) , CodeSnippet ( [string] ) , CodeSnippet ( [string] ) , ) ) def test_invalid_syntax ( code ) : [EOL] [docstring] [EOL] parser = Parser ( ) [EOL] with pytest . raises ( ParseError ) : [EOL] module = parser . parse ( code , [string] ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( CodeSnippet ( [string] ) , CodeSnippet ( [string] ) , CodeSnippet ( [string] ) , CodeSnippet ( [string] ) , CodeSnippet ( [string] ) , CodeSnippet ( [string] ) , CodeSnippet ( [string] ) , ) ) def test_parsing_function_decorators ( code ) : [EOL] [docstring] [EOL] parser = Parser ( ) [EOL] module = parser . parse ( code , [string] ) [EOL] function , = module . children [EOL] decorator_names = { dec . name for dec in function . decorators } [EOL] assert [string] in decorator_names [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( CodeSnippet ( [string] ) , CodeSnippet ( [string] ) , CodeSnippet ( [string] ) , CodeSnippet ( [string] ) , CodeSnippet ( [string] ) , ) ) def test_parsing_method_decorators ( code ) : [EOL] [docstring] [EOL] parser = Parser ( ) [EOL] module = parser . parse ( code , [string] ) [EOL] function , = module . children [ [number] ] . children [EOL] decorator_names = { dec . name for dec in function . decorators } [EOL] assert [string] in decorator_names [EOL]	typing.List[src.tests.parser_test.CodeSnippet]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[src.tests.parser_test.CodeSnippet]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Set , Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] import re [EOL] import pytest [EOL] from pydocstyle . violations import Error , ErrorRegistry [EOL] from pydocstyle . checker import check [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] ) def test_complex_file ( test_case ) : [EOL] [docstring] [EOL] case_module = __import__ ( f' [string] { test_case }' , globals = globals ( ) , locals = locals ( ) , fromlist = [ [string] ] , level = [number] ) [EOL] test_case_dir = os . path . normcase ( os . path . dirname ( __file__ ) ) [EOL] test_case_file = os . path . join ( test_case_dir , [string] , test_case + [string] ) [EOL] results = list ( check ( [ test_case_file ] , select = set ( ErrorRegistry . get_error_codes ( ) ) , ignore_decorators = re . compile ( [string] ) ) ) [EOL] for error in results : [EOL] assert isinstance ( error , Error ) [EOL] results = { ( e . definition . name , e . message ) for e in results } [EOL] assert case_module . expectation . expected == results [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import io [EOL] import textwrap [EOL] [EOL] from pydocstyle import parser , checker [EOL] [EOL] [EOL] __all__ = ( ) [EOL] [EOL] [EOL] class TestParser : [EOL] [docstring] [EOL] [EOL] def test_parse_class_single_decorator ( self ) : [EOL] [docstring] [EOL] code = textwrap . dedent ( [string] ) [EOL] module = checker . parse ( io . StringIO ( code ) , [string] ) [EOL] decorators = module . children [ [number] ] . decorators [EOL] [EOL] assert [number] == len ( decorators ) [EOL] assert [string] == decorators [ [number] ] . name [EOL] assert [string] == decorators [ [number] ] . arguments [EOL] [EOL] def test_parse_class_decorators ( self ) : [EOL] [docstring] [EOL] code = textwrap . dedent ( [string] ) [EOL] [EOL] module = checker . parse ( io . StringIO ( code ) , [string] ) [EOL] defined_class = module . children [ [number] ] [EOL] decorators = defined_class . decorators [EOL] [EOL] assert [number] == len ( decorators ) [EOL] assert [string] == decorators [ [number] ] . name [EOL] assert [string] == decorators [ [number] ] . arguments [EOL] assert [string] == decorators [ [number] ] . name [EOL] assert [string] == decorators [ [number] ] . arguments [EOL] assert [string] == decorators [ [number] ] . name [EOL] assert [string] == decorators [ [number] ] . arguments [EOL] [EOL] def test_parse_class_nested_decorator ( self ) : [EOL] [docstring] [EOL] code = textwrap . dedent ( [string] ) [EOL] module = checker . parse ( io . StringIO ( code ) , [string] ) [EOL] nested_class = module . children [ [number] ] . children [ [number] ] [EOL] decorators = nested_class . decorators [EOL] [EOL] assert [number] == len ( decorators ) [EOL] assert [string] == decorators [ [number] ] . name [EOL] assert [string] == decorators [ [number] ] . arguments [EOL] [EOL] def test_parse_method_single_decorator ( self ) : [EOL] [docstring] [EOL] code = textwrap . dedent ( [string] ) [EOL] [EOL] module = checker . parse ( io . StringIO ( code ) , [string] ) [EOL] defined_class = module . children [ [number] ] [EOL] decorators = defined_class . children [ [number] ] . decorators [EOL] [EOL] assert [number] == len ( decorators ) [EOL] assert [string] == decorators [ [number] ] . name [EOL] assert [string] == decorators [ [number] ] . arguments [EOL] [EOL] def test_parse_method_decorators ( self ) : [EOL] [docstring] [EOL] code = textwrap . dedent ( [string] ) [EOL] [EOL] module = checker . parse ( io . StringIO ( code ) , [string] ) [EOL] defined_class = module . children [ [number] ] [EOL] decorators = defined_class . children [ [number] ] . decorators [EOL] [EOL] assert [number] == len ( decorators ) [EOL] assert [string] == decorators [ [number] ] . name [EOL] assert [string] == decorators [ [number] ] . arguments [EOL] assert [string] == decorators [ [number] ] . name [EOL] assert [string] == decorators [ [number] ] . arguments [EOL] assert [string] == decorators [ [number] ] . name [EOL] assert [string] == decorators [ [number] ] . arguments [EOL] [EOL] def test_parse_function_decorator ( self ) : [EOL] [docstring] [EOL] code = textwrap . dedent ( [string] ) [EOL] [EOL] module = checker . parse ( io . StringIO ( code ) , [string] ) [EOL] decorators = module . children [ [number] ] . decorators [EOL] [EOL] assert [number] == len ( decorators ) [EOL] assert [string] == decorators [ [number] ] . name [EOL] assert [string] == decorators [ [number] ] . arguments [EOL] [EOL] def test_parse_method_nested_decorator ( self ) : [EOL] [docstring] [EOL] code = textwrap . dedent ( [string] ) [EOL] [EOL] module = checker . parse ( io . StringIO ( code ) , [string] ) [EOL] defined_class = module . children [ [number] ] [EOL] decorators = defined_class . children [ [number] ] . children [ [number] ] . decorators [EOL] [EOL] assert [number] == len ( decorators ) [EOL] assert [string] == decorators [ [number] ] . name [EOL] assert [string] == decorators [ [number] ] . arguments [EOL] [EOL] [EOL] class TestMethod : [EOL] [docstring] [EOL] [EOL] def makeMethod ( self , name = [string] ) : [EOL] [docstring] [EOL] children = [ ] [EOL] dunder_all = [ [string] ] [EOL] source = textwrap . dedent ( [string] % (name) ) [EOL] [EOL] module = parser . Module ( [string] , source , [number] , [number] , [ ] , [string] , [ ] , None , dunder_all , None , None , [string] ) [EOL] [EOL] cls = parser . Class ( [string] , source , [number] , [number] , [ ] , [string] , children , module , [string] ) [EOL] [EOL] return parser . Method ( name , source , [number] , [number] , [ ] , [string] , children , cls , [string] ) [EOL] [EOL] def test_is_public_normal ( self ) : [EOL] [docstring] [EOL] method = self . makeMethod ( [string] ) [EOL] method . decorators = [ parser . Decorator ( [string] , [ ] ) ] [EOL] [EOL] assert method . is_public [EOL] [EOL] def test_is_public_setter ( self ) : [EOL] [docstring] [EOL] method = self . makeMethod ( [string] ) [EOL] method . decorators = [ parser . Decorator ( [string] , [ ] ) , parser . Decorator ( [string] , [ ] ) , ] [EOL] [EOL] assert not method . is_public [EOL] [EOL] def test_is_public_deleter ( self ) : [EOL] [docstring] [EOL] method = self . makeMethod ( [string] ) [EOL] method . decorators = [ parser . Decorator ( [string] , [ ] ) , parser . Decorator ( [string] , [ ] ) , ] [EOL] [EOL] assert not method . is_public [EOL] [EOL] def test_is_public_trick ( self ) : [EOL] [docstring] [EOL] method = self . makeMethod ( [string] ) [EOL] method . decorators = [ parser . Decorator ( [string] , [ ] ) , parser . Decorator ( [string] , [ ] ) , ] [EOL] [EOL] assert method . is_public [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0
import typing [EOL] [docstring] [EOL] from pydocstyle import utils [EOL] [EOL] [EOL] __all__ = ( ) [EOL] [EOL] [EOL] def test_common_prefix ( ) : [EOL] [docstring] [EOL] assert utils . common_prefix_length ( [string] , [string] ) == [number] [EOL] [EOL] [EOL] def test_no_common_prefix ( ) : [EOL] [docstring] [EOL] assert utils . common_prefix_length ( [string] , [string] ) == [number] [EOL] [EOL] [EOL] def test_differ_length ( ) : [EOL] [docstring] [EOL] assert utils . common_prefix_length ( [string] , [string] ) == [number] [EOL] [EOL] [EOL] def test_empty_string ( ) : [EOL] [docstring] [EOL] assert utils . common_prefix_length ( [string] , [string] ) == [number] [EOL] [EOL] [EOL] def test_strip_non_alphanumeric ( ) : [EOL] [docstring] [EOL] assert utils . strip_non_alphanumeric ( [string] ) == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
class Expectation : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] self . expected = set ( ) [EOL] [EOL] def expect ( self , * args , arg_count = [number] , func_name = [string] ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] if len ( args ) == [number] : [EOL] def decorate ( f ) : [EOL] self . expected . add ( ( func_name or f . __name__ , args [ [number] ] ) ) [EOL] f ( * [ None ] * arg_count ) [EOL] return f [EOL] return decorate [EOL] self . expected . add ( args ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple [EOL] import typing [EOL] __all__ = ( [string] , [string] , [string] , [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import typing [EOL] [docstring] [EOL] [EOL] [EOL] __all__ = ( ) [EOL] [EOL] [EOL] def main ( ) : [EOL] from pydocstyle import cli [EOL] [EOL] cli . main ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from . checker import ConventionChecker , check [EOL] from . parser import AllError [EOL] from . utils import __version__ [EOL] from . violations import Error , conventions [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Pattern , Iterable , Any [EOL] import logging [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] import ast [EOL] import logging [EOL] import re [EOL] from itertools import tee , zip_longest [EOL] from typing import Any , Iterable , Tuple [EOL] [EOL] [comment] [EOL] __version__ = [string] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [comment] [EOL] NON_ALPHANUMERIC_STRIP_RE = re . compile ( [string] ) [EOL] [EOL] [EOL] def is_blank ( string ) : [EOL] [docstring] [EOL] return not string . strip ( ) [EOL] [EOL] [EOL] def pairwise ( iterable , default_value , ) : [EOL] [docstring] [EOL] a , b = tee ( iterable ) [EOL] _ = next ( b , default_value ) [EOL] return zip_longest ( a , b , fillvalue = default_value ) [EOL] [EOL] [EOL] def common_prefix_length ( a , b ) : [EOL] [docstring] [EOL] for common , ( ca , cb ) in enumerate ( zip ( a , b ) ) : [EOL] if ca != cb : [EOL] return common [EOL] return min ( len ( a ) , len ( b ) ) [EOL] [EOL] [EOL] def strip_non_alphanumeric ( string ) : [EOL] [docstring] [EOL] return NON_ALPHANUMERIC_STRIP_RE . sub ( [string] , string ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[typing.Tuple[typing.Any,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Tuple , List , Dict , Any [EOL] import typing [EOL] import sys [EOL] import os [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] sys . path . insert ( [number] , os . path . join ( os . path . dirname ( __file__ ) , [string] , [string] ) ) [EOL] import pydocstyle [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] extensions = [ [string] , [string] , [string] , ] [EOL] [EOL] [comment] [EOL] templates_path = [ [string] ] [EOL] [EOL] [comment] [EOL] source_suffix = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] master_doc = [string] [EOL] [EOL] [comment] [EOL] project = [string] [EOL] copyright = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] version = pydocstyle . __version__ [EOL] [comment] [EOL] release = pydocstyle . __version__ [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] exclude_patterns = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] pygments_style = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] try : [EOL] import sphinx_rtd_theme [EOL] except ImportError : [EOL] html_theme = [string] [EOL] else : [EOL] html_theme = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_static_path = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] htmlhelp_basename = [string] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] latex_elements = { } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] latex_documents = [ ( [string] , [string] , [string] , [string] , [string] ) , ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] man_pages = [ ( [string] , [string] , [string] , [ [string] ] , [number] ) ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] texinfo_documents = [ ( [string] , [string] , [string] , [string] , [string] , [string] , [string] ) , ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def generate_error_code_table ( ) : [EOL] from pydocstyle . violations import ErrorRegistry [EOL] with open ( os . path . join ( [string] , [string] ) , [string] ) as outf : [EOL] outf . write ( ErrorRegistry . to_rst ( ) ) [EOL] [EOL] generate_error_code_table ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,typing.List[builtins.str],builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0