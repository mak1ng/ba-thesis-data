import jwt [EOL] from jwt . exceptions import InvalidSignatureError [EOL] from django . conf import settings [EOL] [EOL] [EOL] def is_valid_token ( token ) : [EOL] try : [EOL] jwt . decode ( token , settings . JWT_AUTH [ [string] ] , algorithms = [ [string] ] ) [EOL] except InvalidSignatureError : [EOL] return False [EOL] else : [EOL] return True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Type [EOL] import project [EOL] import typing [EOL] import uuid [EOL] from django . db import models [EOL] [EOL] [EOL] class BaseModel ( models . Model ) : [EOL] [docstring] [EOL] [EOL] id = models . UUIDField ( primary_key = True , default = uuid . uuid4 ) [EOL] created = models . DateTimeField ( [string] , auto_now_add = True , help_text = [string] , ) [EOL] modified = models . DateTimeField ( [string] , auto_now = True , help_text = [string] , ) [EOL] [EOL] class Meta : [EOL] abstract = True [EOL] get_latest_by = [string] [EOL] ordering = [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project.models.BaseModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project.models.BaseModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project.models.BaseModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0
from typing import Tuple , Union [EOL] import typing [EOL] __version__ = [string] [EOL] __version_info__ = tuple ( [ int ( num ) if num . isdigit ( ) else num for num in __version__ . replace ( [string] , [string] , [number] ) . split ( [string] ) ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[typing.Union[builtins.int,builtins.str],...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from rest_framework . views import exception_handler [EOL] [EOL] [EOL] def custom_exception_handler ( exc , context ) : [comment] [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] response = exception_handler ( exc , context ) [EOL] [EOL] if response is not None : [EOL] return response [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class UsersAppConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from . users import User [comment] [EOL] from . profiles import Profile [comment]	0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import project [EOL] import typing [EOL] from django . db import models [EOL] from project . models import BaseModel [EOL] [EOL] [EOL] class Profile ( BaseModel ) : [EOL] user = models . OneToOneField ( [string] , on_delete = models . CASCADE ) [EOL] picture = models . ImageField ( [string] , upload_to = [string] , blank = True , null = True ) [EOL] biography = models . TextField ( max_length = [number] , blank = True ) [EOL] [EOL] class Meta : [EOL] db_table = [string] [EOL] [EOL] def __str__ ( self ) : [EOL] return str ( self . user ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project.users.models.profiles.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project.users.models.profiles.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project.users.models.profiles.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from . users import * [comment] [EOL]	0 0 0 0 0 0 0
from typing import Any , Type , Tuple , Dict [EOL] import project [EOL] import typing [EOL] import jwt [EOL] from django . conf import settings [EOL] from django . contrib . auth import password_validation , authenticate [EOL] from django . core . validators import RegexValidator [EOL] from rest_framework import serializers [EOL] from rest_framework . validators import UniqueValidator [EOL] from rest_framework_jwt . settings import api_settings [EOL] from project . users . models import User , Profile [EOL] from project . users . serializers . profiles import ProfileModelSerializer [EOL] [EOL] jwt_payload_handler = api_settings . JWT_PAYLOAD_HANDLER [EOL] jwt_encode_handler = api_settings . JWT_ENCODE_HANDLER [EOL] [EOL] [EOL] class UserModelSerializer ( serializers . ModelSerializer ) : [EOL] profile = ProfileModelSerializer ( read_only = True ) [EOL] [EOL] class Meta : [EOL] model = User [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class UserSignUpSerializer ( serializers . Serializer ) : [EOL] id = serializers . IntegerField ( read_only = True ) [EOL] email = serializers . EmailField ( validators = [ UniqueValidator ( queryset = User . objects . all ( ) ) ] ) [EOL] username = serializers . CharField ( validators = [ UniqueValidator ( queryset = User . objects . all ( ) ) ] ) [EOL] [EOL] phone_regex = RegexValidator ( regex = [string] , message = [string] , ) [EOL] phone_number = serializers . CharField ( validators = [ phone_regex ] , required = False ) [EOL] password = serializers . CharField ( min_length = [number] , max_length = [number] ) [EOL] password_confirmation = serializers . CharField ( min_length = [number] , max_length = [number] ) [EOL] first_name = serializers . CharField ( min_length = [number] , max_length = [number] , required = False ) [EOL] last_name = serializers . CharField ( min_length = [number] , max_length = [number] , required = False ) [EOL] [EOL] def validate ( self , data ) : [EOL] [docstring] [EOL] passwd = data [ [string] ] [EOL] passwd_conf = data [ [string] ] [EOL] if passwd != passwd_conf : [EOL] raise serializers . ValidationError ( [string] ) [EOL] password_validation . validate_password ( passwd ) [EOL] return data [EOL] [EOL] def create ( self , data ) : [EOL] [docstring] [EOL] data . pop ( [string] ) [EOL] user = User . objects . create_user ( ** data , is_verified = False , is_client = True ) [EOL] Profile . objects . create ( user = user ) [EOL] return user [EOL] [EOL] [EOL] class UserLoginSerializer ( serializers . Serializer ) : [EOL] [docstring] [EOL] [EOL] email = serializers . EmailField ( ) [EOL] password = serializers . CharField ( min_length = [number] , max_length = [number] ) [EOL] [EOL] def validate ( self , data ) : [EOL] [docstring] [EOL] user = authenticate ( email = data [ [string] ] , password = data [ [string] ] ) [EOL] [EOL] if not user : [EOL] raise serializers . ValidationError ( [string] ) [EOL] [EOL] if not user . is_active : [EOL] raise serializers . ValidationError ( [string] ) [EOL] [EOL] self . context [ [string] ] = user [EOL] [EOL] return data [EOL] [EOL] def create ( self , data ) : [EOL] [docstring] [EOL] user = self . context [ [string] ] [EOL] payload = jwt_payload_handler ( user ) [EOL] return jwt_encode_handler ( payload ) [EOL] [EOL] [EOL] class TokenSerialiser ( serializers . Serializer ) : [EOL] token = serializers . CharField ( ) [EOL] [EOL] def validate_token ( self , data ) : [EOL] try : [EOL] payload = jwt . decode ( data , settings . SECRET_KEY , algorithms = [ [string] ] ) [EOL] except jwt . ExpiredSignatureError : [EOL] raise serializers . ValidationError ( [string] ) [EOL] except jwt . PyJWTError : [EOL] raise serializers . ValidationError ( [string] ) [EOL] [EOL] self . context [ [string] ] = payload [EOL] return data [EOL] [EOL] def save ( self ) : [EOL] payload = self . context [ [string] ] [EOL] user = User . objects . get ( email = payload [ [string] ] ) [EOL] return jwt_encode_handler ( jwt_payload_handler ( user ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $project.users.serializers.profiles.ProfileModelSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project.users.serializers.users.UserModelSerializer.Meta]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project.users.serializers.users.UserSignUpSerializer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[project.users.serializers.users.UserSignUpSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project.users.serializers.users.UserSignUpSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project.users.serializers.users.UserSignUpSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project.users.serializers.users.UserSignUpSerializer]$ 0 0 0 0 0 0 0 0 $typing.Type[project.users.serializers.users.UserSignUpSerializer]$ 0 0 0 0 0 0 0 $typing.Type[project.users.serializers.users.UserSignUpSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project.users.serializers.users.UserSignUpSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project.users.serializers.users.UserSignUpSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project.users.serializers.users.UserSignUpSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project.users.serializers.users.UserLoginSerializer]$ 0 0 0 0 0 0 0 $typing.Type[project.users.serializers.users.UserLoginSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project.users.serializers.users.TokenSerialiser]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0
from typing import Type , Tuple [EOL] import project [EOL] import typing [EOL] [docstring] [EOL] [EOL] [comment] [EOL] from rest_framework import serializers [EOL] [EOL] [comment] [EOL] from project . users . models import Profile [EOL] [EOL] [EOL] class ProfileModelSerializer ( serializers . ModelSerializer ) : [EOL] [docstring] [EOL] [EOL] class Meta : [EOL] [docstring] [EOL] [EOL] model = Profile [EOL] fields = ( [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project.users.models.profiles.Profile]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0
from . users import * [comment] [EOL]	0 0 0 0 0 0 0
[docstring] [EOL] USERNAME = [string] [EOL] EMAIL = [string] [EOL] PASSWORD = [string] [EOL] FIRST_NAME = [string] [EOL] LAST_NAME = [string] [EOL] [EOL] USERNAME_SECONDARY = [string] [EOL] EMAIL_SECONDARY = [string] [EOL] PASSWORD_SECONDARY = [string] [EOL] FIRST_NAME_SECONDARY = [string] [EOL] LAST_NAME_SECONDARY = [string] [EOL]	0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] from rest_framework_jwt . settings import api_settings [EOL] from project . functions import is_valid_token [EOL] from project . users . models . users import User [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_is_valid_token ( create_user ) : [EOL] user = User . objects . first ( ) [EOL] [EOL] jwt_payload_handler = api_settings . JWT_PAYLOAD_HANDLER [EOL] jwt_encode_handler = api_settings . JWT_ENCODE_HANDLER [EOL] [EOL] payload = jwt_payload_handler ( user ) [EOL] token = jwt_encode_handler ( payload ) [EOL] [EOL] assert is_valid_token ( token ) is True [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_is_valid_token__invalid ( create_user ) : [EOL] invalid_token_1 = ( [string] [string] [string] ) [EOL] [EOL] invalid_token_2 = ( [string] [string] [string] [string] ) [EOL] [EOL] assert is_valid_token ( invalid_token_1 ) is False [EOL] assert is_valid_token ( invalid_token_2 ) is False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0