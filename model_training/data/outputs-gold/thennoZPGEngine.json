[comment] [EOL] [EOL] from typing import Any , List [EOL] import typing [EOL] import logging [EOL] [EOL] from core . components import ( Manager , Position , Visible , Name , Movable , AI , Vision , Viewer , UnderUserControl , EntityBuilder , ) [EOL] from core . systems import ( World , AISystem , ViewSystem , CleanupSystem , AllowActionSystem , FOVSystem , UserControlSystem , ) [EOL] [EOL] [EOL] logging . basicConfig ( filename = [string] , level = logging . DEBUG ) [EOL] [EOL] [EOL] def main ( ) : [EOL] entities = [ EntityBuilder ( name = Name ( [string] ) , position = Position ( [number] , [number] ) , visible = Visible ( [string] ) , movable = Movable ( ) , under_user_control = UnderUserControl ( ) , vision = Vision ( ) , viewer = Viewer ( ) , ) , EntityBuilder ( name = Name ( [string] ) , position = Position ( [number] , [number] ) , visible = Visible ( [string] ) , movable = Movable ( ) , ai = AI ( ) , vision = Vision ( ) , ) , EntityBuilder ( name = Name ( [string] ) , position = Position ( [number] , [number] ) , visible = Visible ( [string] ) , ) , EntityBuilder ( name = Name ( [string] ) , position = Position ( [number] , [number] ) , visible = Visible ( [string] ) , ) , EntityBuilder ( name = Name ( [string] ) , position = Position ( [number] , [number] ) , visible = Visible ( [string] ) , ) , EntityBuilder ( name = Name ( [string] ) , position = Position ( [number] , [number] ) , visible = Visible ( [string] ) , movable = Movable ( ) , ai = AI ( ) , vision = Vision ( ) , ) , ] [EOL] cm = Manager ( ) [EOL] for entity in entities : [EOL] cm . add ( entity ) [EOL] systems = [ CleanupSystem , FOVSystem , AllowActionSystem , AISystem , FOVSystem , ViewSystem , UserControlSystem , ] [EOL] world = World ( cm , systems ) [EOL] for i in range ( [number] ) : [EOL] world = world . step ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from setuptools import setup [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] setup ( name = [string] , packages = [ [string] ] , package_dir = { [string] : [string] } , version = [string] , author = [string] , include_package_data = True , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Optional , Set , Any , Dict , List , Type , Tuple , FrozenSet [EOL] import typing [EOL] import src [EOL] from dataclasses import dataclass [EOL] from typing import Tuple , FrozenSet , Dict , Optional , Type , List [EOL] from collections import defaultdict [EOL] [EOL] [EOL] class Component : [EOL] pass [EOL] [EOL] [EOL] class AutoClean : [EOL] pass [EOL] [EOL] [EOL] class Entities : [EOL] def __init__ ( self , entities ) : [EOL] self . _entities = entities [EOL] [EOL] def filter ( self , component_classes ) : [EOL] result = None [EOL] for component_class in component_classes : [EOL] entities = { entity for entity , _ in enumerate ( self . _entities [ component_class ] ) if self . _entities [ component_class ] [ entity ] is not None } [EOL] result = entities if result is None else result & entities [EOL] yield from result or [ ] [EOL] [EOL] def get ( self , entity , component_class ) : [EOL] return self . _entities [ component_class ] [ entity ] [EOL] [EOL] def set ( self , entity , component_class , value ) : [EOL] self . _entities [ component_class ] [ entity ] = value [EOL] [EOL] @ property def count ( self ) : [EOL] for entities in self . _entities . values ( ) : [EOL] return len ( entities ) [EOL] [EOL] [EOL] class Components : [EOL] def __init__ ( self , entities ) : [EOL] self . _entities = entities [EOL] self . _components = defaultdict ( list ) [EOL] for cs , components in entities . items ( ) : [EOL] for entity , component in enumerate ( components ) : [EOL] self . _components [ component ] . append ( entity ) [EOL] [EOL] def get ( self , component ) : [EOL] return self . _components [ component ] [EOL] [EOL] def get_need_clean ( self ) : [EOL] for component_class in self . _entities : [EOL] if issubclass ( component_class , AutoClean ) : [EOL] yield component_class [EOL] [EOL] [EOL] class Manager : [EOL] def __init__ ( self , components = None ) : [EOL] if components is None : [EOL] components = defaultdict ( list ) [EOL] self . _components = components [EOL] self . components = None [EOL] self . entities = None [EOL] self . _components_classes = [ ] [EOL] self . reinit ( ) [EOL] [EOL] def reinit ( self ) : [EOL] self . components = Components ( self . _components ) [EOL] self . entities = Entities ( self . _components ) [EOL] self . _components_classes = list ( self . _components . keys ( ) ) [EOL] [EOL] def serialize ( self ) : [EOL] return self . _components [EOL] [EOL] def add ( self , entity ) : [EOL] for cls , component in entity . to_dict ( ) . items ( ) : [EOL] self . _components [ cls ] . append ( component ) [EOL] self . reinit ( ) [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class Position ( Component ) : [EOL] x = ... [EOL] y = ... [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class NextPosition ( Component ) : [EOL] x = ... [EOL] y = ... [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class PositionX ( Component ) : [EOL] coord = ... [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class PositionY ( Component ) : [EOL] coord = ... [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class Visible ( Component ) : [EOL] char = ... [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class Name ( Component ) : [EOL] name = ... [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class Movable ( Component ) : [EOL] pass [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class AI ( Component ) : [EOL] pass [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class Vision ( Component ) : [EOL] pass [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class FOV ( Component , AutoClean ) : [EOL] fov = frozenset ( ) [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class Actions ( Component , AutoClean ) : [EOL] actions = tuple ( ) [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class Viewer ( Component ) : [EOL] pass [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class UnderUserControl ( Component ) : [EOL] pass [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class EntityBuilder : [EOL] name = ... [EOL] actions = Actions ( ) [EOL] fov = FOV ( ) [EOL] visible = None [EOL] ai = None [EOL] under_user_control = None [EOL] vision = None [EOL] viewer = None [EOL] position = None [EOL] movable = None [EOL] next_position = None [EOL] [EOL] def to_dict ( self ) : [EOL] return { Name : self . name , Actions : self . actions , FOV : self . fov , Visible : self . visible , AI : self . ai , UnderUserControl : self . under_user_control , Vision : self . vision , Viewer : self . viewer , Position : self . position , Movable : self . movable , NextPosition : self . next_position , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'EntityBuilder'$ 0 0 0 0 0 0 0 0 $'EntityBuilder'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.FrozenSet[Position]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Name$ 0 0 0 $Actions$ 0 0 0 0 0 $FOV$ 0 0 0 0 0 $typing.Optional[Visible]$ 0 0 0 $typing.Optional[AI]$ 0 0 0 $typing.Optional[UnderUserControl]$ 0 0 0 $typing.Optional[Vision]$ 0 0 0 $typing.Optional[Viewer]$ 0 0 0 $typing.Optional[Position]$ 0 0 0 $typing.Optional[Movable]$ 0 0 0 $typing.Optional[NextPosition]$ 0 0 0 0 0 $typing.Dict[typing.Type,typing.Optional[Component]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Set , Any , Callable , List , Iterable [EOL] import builtins [EOL] import typing [EOL] import core [EOL] from typing import NewType , Iterable , Callable [EOL] [EOL] from core . components import Position [EOL] [EOL] [EOL] Distance = NewType ( [string] , int ) [EOL] [EOL] [EOL] def generate_movements ( pos , distance ) : [EOL] for mx in range ( - distance , distance + [number] ) : [EOL] for my in range ( - distance , distance + [number] ) : [EOL] new_pos = Position ( mx + pos . x , my + pos . y ) [EOL] yield new_pos [EOL] [EOL] [EOL] def get_fov_mask ( position , fow_size , board_size , is_full ) : [EOL] def is_visible ( pos_to ) : [EOL] line = list ( get_line_of_view ( position , pos_to ) ) [EOL] for i , pos_for_check in enumerate ( line ) : [EOL] if i not in ( [number] , len ( line ) - [number] ) and is_full ( pos_for_check ) : [EOL] return False [EOL] return True [EOL] [EOL] positions = generate_movements ( position , distance = Distance ( fow_size ) ) [EOL] result = set ( ) [EOL] for pos in positions : [EOL] if not ( [number] <= pos . x < board_size and [number] <= pos . y < board_size ) : [EOL] continue [EOL] if not is_visible ( pos ) : [EOL] continue [EOL] result . add ( pos ) [EOL] return result [EOL] [EOL] [EOL] def get_distance ( pos1 , pos2 ) : [EOL] return Distance ( max ( abs ( pos1 . x - pos2 . x ) , abs ( pos1 . y - pos2 . y ) ) , ) [EOL] [EOL] [EOL] def get_line_of_view ( pos1 , pos2 ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] delta_x = abs ( pos2 . x - pos1 . x ) [EOL] delta_y = abs ( pos2 . y - pos1 . y ) [EOL] if delta_x > delta_y : [EOL] a1 , b1 , a2 , b2 = pos1 . x , pos1 . y , pos2 . x , pos2 . y [EOL] else : [EOL] a1 , b1 , a2 , b2 = pos1 . y , pos1 . x , pos2 . y , pos2 . x [EOL] delta_a = abs ( a2 - a1 ) [EOL] delta_b = abs ( b2 - b1 ) [EOL] error = [number] [EOL] delta_err = delta_b / delta_a if delta_a != [number] else [number] [EOL] b = b1 [EOL] direction = b2 - b1 [EOL] if direction > [number] : [EOL] direction = [number] [EOL] if direction < [number] : [EOL] direction = - [number] [EOL] if a1 < a2 : [EOL] range_a = range ( a1 , a2 + [number] ) [EOL] else : [EOL] range_a = range ( a2 , a1 + [number] ) [ : : - [number] ] [EOL] for a in range_a : [EOL] if delta_x > delta_y : [EOL] yield Position ( a , b ) [EOL] else : [EOL] yield Position ( b , a ) [EOL] error = error + delta_err [EOL] if error >= [number] : [EOL] b = b + direction [EOL] error = error - [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[core.components.Position]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Distance$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[core.components.Position]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
BOARD_SIZE = [number] [EOL]	$builtins.int$ 0 0 0
from typing import Any [EOL] import typing [EOL] import core [EOL] from dataclasses import dataclass [EOL] from typing import Type [EOL] [EOL] from core . constants import BOARD_SIZE [EOL] from core . components import ( Manager , Position , Component , Actions , FOV , ) [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class Event : [EOL] entity = ... [EOL] component_class = ... [EOL] [EOL] def __call__ ( self , prev_state ) : [EOL] pass [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class Move ( Event ) : [EOL] dx = ... [EOL] dy = ... [EOL] manager = ... [EOL] [EOL] def _is_valid ( self , position ) : [EOL] if not ( [number] <= position . x < BOARD_SIZE and [number] <= position . y < BOARD_SIZE ) : [EOL] return False [EOL] if self . manager . components . get ( position ) : [EOL] return False [EOL] return True [EOL] [EOL] def __call__ ( self , position ) : [EOL] x = position . x + self . dx [EOL] y = position . y + self . dy [EOL] new_position = Position ( x , y ) [EOL] if self . _is_valid ( new_position ) : [EOL] return new_position [EOL] return position [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class SetActions ( Event ) : [EOL] event = ... [EOL] [EOL] def __call__ ( self , actions ) : [EOL] return Actions ( actions . actions + ( self . event , ) ) [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class SetFOV ( Event ) : [EOL] fov = ... [EOL] [EOL] def __call__ ( self , fov ) : [EOL] return FOV ( fov . fov | self . fov ) [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class Clean ( Event ) : [EOL] [EOL] def __call__ ( self , _ ) : [EOL] return self . component_class ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Type[core.components.Component]$ 0 0 0 0 0 0 0 0 0 $core.components.Component$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $core.components.Manager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Event$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $core.components.FOV$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from pytest import mark [EOL] [EOL] from core . components import ( Position , ) [EOL] from core . board import ( Distance , generate_movements , get_line_of_view , get_distance , ) [EOL] [EOL] [EOL] @ mark . parametrize ( [string] , [ ( Position ( [number] , [number] ) , Position ( [number] , [number] ) , [ Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , ] , ) , ( Position ( [number] , [number] ) , Position ( [number] , [number] ) , [ Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , ] , ) , ( Position ( [number] , [number] ) , Position ( [number] , [number] ) , [ Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , ] , ) , ( Position ( [number] , [number] ) , Position ( [number] , [number] ) , [ Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , ] , ) , ] , ) def test_line_of_view ( p1 , p2 , expected ) : [EOL] assert list ( get_line_of_view ( p1 , p2 ) ) == expected [EOL] [EOL] [EOL] @ mark . parametrize ( [string] , [ ( Position ( [number] , [number] ) , Position ( [number] , [number] ) , Distance ( [number] ) , ) , ( Position ( [number] , [number] ) , Position ( [number] , [number] ) , Distance ( [number] ) , ) , ( Position ( [number] , [number] ) , Position ( [number] , [number] ) , Distance ( [number] ) , ) , ( Position ( [number] , [number] ) , Position ( [number] , [number] ) , Distance ( [number] ) , ) , ( Position ( [number] , [number] ) , Position ( [number] , [number] ) , Distance ( [number] ) , ) , ] , ) def test_get_distance ( p1 , p2 , expected ) : [EOL] assert get_distance ( p1 , p2 ) == expected [EOL] [EOL] [EOL] @ mark . parametrize ( [string] , [ ( Position ( [number] , [number] ) , Distance ( [number] ) , [ Position ( [number] , [number] ) , Position ( [number] , [number] ) , Position ( [number] , [number] ) , Position ( [number] , [number] ) , Position ( [number] , [number] ) , Position ( [number] , [number] ) , Position ( [number] , [number] ) , Position ( [number] , [number] ) , Position ( [number] , [number] ) , ] ) , ( Position ( [number] , [number] ) , Distance ( [number] ) , [ Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , Position ( x = [number] , y = [number] ) , ] ) , ] , ) def test_generate_movements ( p , distance , expected ) : [EOL] assert list ( generate_movements ( p , distance ) ) == expected [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0