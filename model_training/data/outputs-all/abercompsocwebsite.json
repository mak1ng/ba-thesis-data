[comment] [EOL]	0 0
	0
	0
from typing import Union , Tuple [EOL] import typing [EOL] __version__ = [string] [EOL] __version_info__ = tuple ( [ int ( num ) if num . isdigit ( ) else num for num in __version__ . replace ( [string] , [string] , [number] ) . split ( [string] ) ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[typing.Union[builtins.int,builtins.str],...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type [EOL] import typing [EOL] import abercompsoc [EOL] from django . contrib . auth . models import AbstractUser [EOL] from django . db . models import CharField , Model , ManyToManyField [EOL] from django . urls import reverse [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] [EOL] [EOL] class User ( AbstractUser ) : [EOL] [EOL] [comment] [EOL] [comment] [EOL] roles = ManyToManyField ( [string] ) [EOL] [EOL] def get_absolute_url ( self ) : [EOL] return reverse ( [string] , kwargs = { [string] : self . username } ) [EOL] [EOL] def __str__ ( self ) : [EOL] if self . get_full_name ( ) != [string] : [EOL] return self . get_full_name ( ) [EOL] return super ( User , self ) . __str__ ( ) [EOL] [EOL] def is_aber_student ( self ) : [EOL] return self . emailaddress_set . filter ( verified = True , email__endswith = [string] ) . exists ( ) [EOL] [EOL] [EOL] class Role ( Model ) : [EOL] name = CharField ( [string] , max_length = [number] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name . title ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.users.models.Role]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class UsersAppConfig ( AppConfig ) : [EOL] [EOL] name = [string] [EOL] verbose_name = [string] [EOL] [EOL] def ready ( self ) : [EOL] try : [EOL] import users . signals [comment] [EOL] except ImportError : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import django [EOL] import pytest [EOL] from django . conf import settings [EOL] [EOL] pytestmark = pytest . mark . django_db [EOL] [EOL] [EOL] def test_user_get_absolute_url ( user ) : [EOL] assert user . get_absolute_url ( ) == f" [string] { user . username } [string] " [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
from typing import Any , Tuple [EOL] import typing [EOL] from django . contrib . postgres . forms import RangeWidget [EOL] from django . forms import MultiWidget [EOL] [EOL] [EOL] class DateTimeRangeWidget ( MultiWidget ) : [EOL] def __init__ ( self , base_widget , attrs = None ) : [EOL] widgets = ( base_widget , base_widget ) [EOL] super ( ) . __init__ ( widgets , attrs ) [EOL] [EOL] def decompress ( self , value ) : [EOL] if value : [EOL] return ( value . lower , value . upper ) [EOL] return ( None , None ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] from django import template [EOL] from django . template . defaultfilters import stringfilter [EOL] [EOL] import markdown as md [EOL] from django . utils . safestring import mark_safe [EOL] from markupsafe import escape [EOL] [EOL] register = template . Library ( ) [EOL] extensions = [ [string] , [string] , [string] , [string] , ] [EOL] [EOL] @ register . filter ( ) @ stringfilter def unsafe_markdown ( value ) : [EOL] return md . markdown ( value , extensions = extensions ) [EOL] [EOL] [EOL] @ register . filter ( ) @ stringfilter def markdown ( value ) : [EOL] return mark_safe ( md . markdown ( escape ( value ) , extensions = extensions ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0
	0
	0
from typing import Any , List [EOL] import typing [EOL] from django . urls import path [EOL] from django . views . generic import RedirectView [EOL] [EOL] from abercompsoc . blog . views import BlogDetailView , BlogTableView [EOL] from abercompsoc . events . views import EventList , EventDetail [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ path ( [string] , BlogTableView . as_view ( ) , name = [string] ) , path ( [string] , BlogDetailView . as_view ( ) , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Dict [EOL] import typing [EOL] import abercompsoc [EOL] from django . conf import settings [EOL] from django . db import models [EOL] from django . urls import reverse [EOL] from markdownx . models import MarkdownxField [EOL] [EOL] [EOL] class Post ( models . Model ) : [EOL] title = models . CharField ( max_length = [number] , verbose_name = [string] ) [EOL] slug = models . SlugField ( ) [EOL] body = MarkdownxField ( ) [EOL] post_date = models . DateTimeField ( auto_now_add = True , verbose_name = [string] ) [EOL] modified = models . DateTimeField ( null = True , verbose_name = [string] ) [EOL] posted_by = models . ForeignKey ( settings . AUTH_USER_MODEL , null = True , verbose_name = [string] , on_delete = models . SET_NULL ) [EOL] allow_comments = models . BooleanField ( default = True , verbose_name = [string] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . title [EOL] [EOL] def get_absolute_url ( self ) : [EOL] kwargs = { [string] : self . slug , [string] : [string] % self . post_date . year , [string] : [string] % self . post_date . month , [string] : [string] % self . post_date . day , } [EOL] [EOL] return reverse ( [string] , kwargs = kwargs ) [EOL] [EOL] [EOL] class Comment ( models . Model ) : [EOL] post = models . ForeignKey ( Post , related_name = [string] , verbose_name = [string] , on_delete = models . CASCADE ) [EOL] [EOL] bodytext = models . TextField ( verbose_name = [string] ) [EOL] [EOL] post_date = models . DateTimeField ( auto_now_add = True , verbose_name = [string] ) [EOL] [EOL] user = models . ForeignKey ( settings . AUTH_USER_MODEL , verbose_name = [string] , related_name = [string] , on_delete = models . CASCADE ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . bodytext [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.blog.models.Post]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.blog.models.Post]$ 0 0 0 0 0 0 0 $typing.Type[abercompsoc.blog.models.Post]$ 0 0 0 0 0 $typing.Type[abercompsoc.blog.models.Post]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.blog.models.Post]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.blog.models.Post]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.blog.models.Post]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.blog.models.Comment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.blog.models.Comment]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.blog.models.Comment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.blog.models.Comment]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Type [EOL] import typing [EOL] import abercompsoc [EOL] from django import forms [EOL] from markdownx . fields import MarkdownxFormField [EOL] [EOL] from abercompsoc . blog . models import Comment [EOL] [EOL] [EOL] class UserCommentForm ( forms . ModelForm ) : [EOL] [EOL] bodytext = MarkdownxFormField ( ) [EOL] [EOL] class Meta : [EOL] model = Comment [EOL] fields = [ [string] ] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.blog.forms.UserCommentForm]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.blog.models.Comment]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import abercompsoc [EOL] from django_tables2 import tables [EOL] [EOL] [EOL] class BlogTable ( tables . Table ) : [EOL] title = tables . columns . LinkColumn ( ) [EOL] post_date = tables . columns . DateTimeColumn ( verbose_name = [string] ) [EOL] posted_by = tables . columns . RelatedLinkColumn ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.blog.tables.BlogTable]$ 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.blog.tables.BlogTable]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.blog.tables.BlogTable]$ 0 0 0 0 0 0 0 0 0
from typing import Any , Type , Dict [EOL] import typing [EOL] import abercompsoc [EOL] from django . http import HttpResponseForbidden [EOL] from django . shortcuts import render , redirect [EOL] [EOL] [comment] [EOL] from django . views . generic import DetailView , DateDetailView [EOL] from django_tables2 import SingleTableView [EOL] [EOL] from abercompsoc . blog . forms import UserCommentForm [EOL] from abercompsoc . blog . models import Post , Comment [EOL] from abercompsoc . blog . tables import BlogTable [EOL] [EOL] [EOL] class BlogDetailView ( DateDetailView ) : [EOL] model = Post [EOL] date_field = [string] [EOL] month_format = [string] [EOL] [EOL] def get_queryset ( self ) : [EOL] queryset = super ( BlogDetailView , self ) . get_queryset ( ) [EOL] return queryset . select_related ( ) [EOL] [EOL] def post ( self , request , * args , ** kwargs ) : [EOL] self . object = post = self . get_object ( ) [EOL] if request . user . is_authenticated : [EOL] form = UserCommentForm ( request . POST ) [EOL] else : [EOL] return HttpResponseForbidden ( ) [EOL] if form . is_valid ( ) : [EOL] comment = form . save ( commit = False ) [EOL] comment . post = post [EOL] comment . user = request . user [EOL] comment . save ( ) [EOL] return redirect ( post . get_absolute_url ( ) ) [EOL] context = self . get_context_data ( object = post ) [EOL] context [ [string] ] = form [EOL] return self . render_to_response ( context ) [EOL] [EOL] def get_context_data ( self , ** kwargs ) : [EOL] form = UserCommentForm ( ) [EOL] [EOL] context = { [string] : form , [string] : Comment . objects . filter ( post = self . object . id ) . select_related ( ) } [EOL] return super ( BlogDetailView , self ) . get_context_data ( ** context ) [EOL] [EOL] [EOL] class BlogTableView ( SingleTableView ) : [EOL] table_class = BlogTable [EOL] model = Post [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.blog.models.Post]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $abercompsoc.blog.forms.UserCommentForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $abercompsoc.blog.forms.UserCommentForm$ 0 0 0 0 0 0 $typing.Any$ 0 $abercompsoc.blog.forms.UserCommentForm$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $abercompsoc.blog.forms.UserCommentForm$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $abercompsoc.blog.forms.UserCommentForm$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $abercompsoc.blog.forms.UserCommentForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.blog.tables.BlogTable]$ 0 0 0 $typing.Type[abercompsoc.blog.models.Post]$ 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from django . contrib import admin [EOL] [EOL] [comment] [EOL] from . models import Event , EventTiming , UserEventAssociation [EOL] [EOL] admin . site . register ( Event ) [EOL] admin . site . register ( EventTiming ) [EOL] admin . site . register ( UserEventAssociation ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import abercompsoc [EOL] from django_tables2 import tables [EOL] [EOL] [EOL] class EventTable ( tables . Table ) : [EOL] event_name = tables . columns . LinkColumn ( ) [EOL] start = tables . columns . DateTimeColumn ( verbose_name = [string] , accessor = [string] ) [EOL] end = tables . columns . DateTimeColumn ( verbose_name = [string] , accessor = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.events.tables.EventTable]$ 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.events.tables.EventTable]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.events.tables.EventTable]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type [EOL] import typing [EOL] import abercompsoc [EOL] from enum import Enum [EOL] [EOL] from django . contrib . auth import get_user_model [EOL] from django . contrib . postgres . fields import DateTimeRangeField [EOL] from django . db . models import Model , CharField , ManyToManyField , ForeignKey , CASCADE , IntegerField , TextField , DateTimeField [EOL] from django . urls import reverse [EOL] [EOL] User = get_user_model ( ) [EOL] [EOL] [EOL] class Event ( Model ) : [EOL] [EOL] event_name = CharField ( max_length = [number] ) [EOL] date = DateTimeRangeField ( ) [EOL] attendees = ManyToManyField ( User , through = [string] ) [EOL] max_attendees = IntegerField ( null = True ) [EOL] description = TextField ( ) [EOL] created = DateTimeField ( auto_now_add = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . event_name [EOL] [EOL] def get_absolute_url ( self ) : [EOL] return reverse ( [string] , kwargs = { [string] : self . id } ) [EOL] [EOL] [EOL] class EventTiming ( Model ) : [EOL] event = ForeignKey ( Event , on_delete = CASCADE ) [EOL] details = TextField ( ) [EOL] time = DateTimeField ( ) [EOL] [EOL] [EOL] class UserEventAssociationType ( Enum ) : [EOL] NA = [string] [EOL] IN = [string] [EOL] WA = [string] [EOL] WL = [string] [EOL] AT = [string] [EOL] [EOL] [EOL] class UserEventAssociation ( Model ) : [EOL] [docstring] [EOL] [EOL] event = ForeignKey ( Event , on_delete = CASCADE ) [EOL] user = ForeignKey ( User , on_delete = CASCADE ) [EOL] info = CharField ( max_length = [number] , choices = [ ( i , i . value ) for i in UserEventAssociationType ] , default = [string] ) [EOL] created = DateTimeField ( auto_now_add = True ) [EOL] updated = DateTimeField ( auto_now = True ) [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.events.models.Event]$ 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.events.models.Event]$ 0 0 0 0 0 $typing.Type[abercompsoc.events.models.Event]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Type[abercompsoc.events.models.Event]$ 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.events.models.Event]$ 0 0 0 0 0 $typing.Type[abercompsoc.events.models.Event]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.events.models.EventTiming]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.events.models.EventTiming]$ 0 0 0 0 0 $typing.Type[abercompsoc.events.models.EventTiming]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.events.models.UserEventAssociation]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.events.models.UserEventAssociation]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Type[abercompsoc.events.models.UserEventAssociation]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.events.models.UserEventAssociation]$ 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.events.models.UserEventAssociation]$ 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import abercompsoc [EOL] from django . shortcuts import render [EOL] [EOL] [comment] [EOL] from django . views . generic import DetailView [EOL] from django_tables2 import SingleTableView [EOL] [EOL] from abercompsoc . events . models import Event [EOL] from abercompsoc . events . tables import EventTable [EOL] [EOL] [EOL] class EventList ( SingleTableView ) : [EOL] model = Event [EOL] table_class = EventTable [EOL] template_name = [string] [EOL] [EOL] [EOL] class EventDetail ( DetailView ) : [EOL] model = Event [EOL] pk_url_kwarg = [string] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.events.models.Event]$ 0 0 0 $typing.Type[abercompsoc.events.tables.EventTable]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.events.models.Event]$ 0 0 0 $builtins.str$ 0 0 0 0
	0
from typing import Any , List [EOL] import typing [EOL] from django . urls import path [EOL] from django . views . generic import RedirectView [EOL] [EOL] from abercompsoc . events . views import EventList , EventDetail [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ path ( [string] , view = RedirectView . as_view ( pattern_name = [string] , permanent = True ) , name = [string] ) , path ( [string] , view = EventList . as_view ( ) , name = [string] ) , path ( [string] , view = EventDetail . as_view ( ) , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] import abercompsoc . events . models [EOL] from django . conf import settings [EOL] import django . contrib . postgres . fields . ranges [EOL] from django . db import migrations , models [EOL] import django . db . models . deletion [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] initial = True [EOL] [EOL] dependencies = [ migrations . swappable_dependency ( settings . AUTH_USER_MODEL ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . CharField ( max_length = [number] ) ) , ( [string] , django . contrib . postgres . fields . ranges . DateTimeRangeField ( ) ) , ( [string] , models . IntegerField ( null = True ) ) , ( [string] , models . TextField ( ) ) , ( [string] , models . DateTimeField ( auto_now_add = True ) ) , ] , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . TextField ( ) ) , ( [string] , models . DateTimeField ( ) ) , ( [string] , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = [string] ) ) , ] , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . CharField ( choices = [ ( abercompsoc . events . models . UserEventAssociationType ( [string] ) , [string] ) , ( abercompsoc . events . models . UserEventAssociationType ( [string] ) , [string] ) , ( abercompsoc . events . models . UserEventAssociationType ( [string] ) , [string] ) , ( abercompsoc . events . models . UserEventAssociationType ( [string] ) , [string] ) , ( abercompsoc . events . models . UserEventAssociationType ( [string] ) , [string] ) ] , default = [string] , max_length = [number] ) ) , ( [string] , models . DateTimeField ( auto_now_add = True ) ) , ( [string] , models . DateTimeField ( auto_now = True ) ) , ( [string] , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = [string] ) ) , ( [string] , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = settings . AUTH_USER_MODEL ) ) , ] , ) , migrations . AddField ( model_name = [string] , name = [string] , field = models . ManyToManyField ( through = [string] , to = settings . AUTH_USER_MODEL ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class VotingConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Any , List , Type [EOL] import typing [EOL] import abercompsoc [EOL] from django . contrib import messages [EOL] from django . contrib . auth . mixins import LoginRequiredMixin [EOL] from django . contrib . messages . views import SuccessMessageMixin [EOL] from django . shortcuts import get_object_or_404 , redirect [EOL] from django . urls import reverse [EOL] from django . views import View [EOL] from django . views . generic import DetailView , UpdateView , DeleteView [EOL] from django_tables2 import SingleTableView , SingleTableMixin [EOL] [EOL] from abercompsoc . voting . models import Election , UserElectionOption [EOL] from abercompsoc . voting . tables import ElectionTable , UserElectionOptionTable [EOL] [EOL] [EOL] class ElectionList ( SingleTableView ) : [EOL] model = Election [EOL] table_class = ElectionTable [EOL] template_name = [string] [EOL] [EOL] def get_table_kwargs ( self ) : [EOL] kwargs = super ( ElectionList , self ) . get_table_kwargs ( ) [EOL] kwargs . update ( { [string] : self . request . user } ) [EOL] return kwargs [EOL] [EOL] [EOL] class UserElectionDetails ( SingleTableMixin , DetailView ) : [EOL] model = Election [EOL] table_class = UserElectionOptionTable [EOL] template_name = [string] [EOL] pk_url_kwarg = [string] [EOL] [EOL] def get_table_data ( self ) : [EOL] return self . get_object ( ) . userelectionoption_set . all ( ) [EOL] [EOL] [EOL] class UserElectionOptionUpdate ( SuccessMessageMixin , LoginRequiredMixin , UpdateView ) : [EOL] model = UserElectionOption [EOL] template_name = [string] [EOL] fields = [ [string] ] [EOL] success_message = [string] [EOL] [EOL] def get_object ( self , queryset = None ) : [EOL] instance , _ = self . model . objects . get_or_create ( runner = self . request . user , election_id = self . kwargs . get ( [string] ) ) [EOL] return instance [EOL] [EOL] def get_success_url ( self ) : [EOL] return self . get_object ( ) . get_absolute_url ( ) [EOL] [EOL] [EOL] class UserElectionOptionDelete ( SuccessMessageMixin , LoginRequiredMixin , DeleteView ) : [EOL] model = UserElectionOption [EOL] template_name = [string] [EOL] success_message = [string] [EOL] [EOL] def get_object ( self , queryset = None ) : [EOL] return get_object_or_404 ( self . model , runner = self . request . user , election_id = self . kwargs . get ( [string] ) ) [EOL] [EOL] def get_success_url ( self ) : [EOL] return reverse ( [string] , kwargs = { [string] : self . kwargs . get ( [string] ) } ) [EOL] [EOL] [EOL] class UserElectionOptionVote ( LoginRequiredMixin , View ) : [EOL] [EOL] def post ( self , * args , ** kwargs ) : [EOL] election_id = self . kwargs . get ( [string] ) [EOL] option = get_object_or_404 ( UserElectionOption , id = self . kwargs . get ( [string] ) , election__id = election_id ) [EOL] election = get_object_or_404 ( Election , id = election_id ) [EOL] [EOL] [comment] [EOL] if election . can_vote ( self . request . user ) : [EOL] self . vote_for_election_option ( election , option ) [EOL] else : [EOL] if self . request . user . election_set . filter ( id = election_id ) . exists ( ) : [EOL] messages . add_message ( self . request , messages . ERROR , [string] ) [EOL] elif not election . is_open ( ) : [EOL] messages . add_message ( self . request , messages . ERROR , [string] ) [EOL] elif not self . request . user . is_aber_student ( ) and election . aber_only : [EOL] messages . add_message ( self . request , messages . ERROR , [string] [string] ) [EOL] else : [comment] [EOL] messages . add_message ( self . request , messages . ERROR , [string] ) [EOL] from sentry_sdk import capture_message [EOL] capture_message ( [string] , level = [string] ) [EOL] return redirect ( election . get_absolute_url ( ) ) [EOL] [EOL] def vote_for_election_option ( self , election , option ) : [EOL] [docstring] [EOL] election . voters . add ( self . request . user ) [EOL] option . votes = option . votes + [number] [EOL] messages . add_message ( self . request , messages . SUCCESS , [string] ) [EOL] option . save ( ) [EOL] election . save ( ) [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.voting.models.Election]$ 0 0 0 $typing.Type[abercompsoc.voting.tables.ElectionTable]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.voting.models.Election]$ 0 0 0 $typing.Type[abercompsoc.voting.tables.UserElectionOptionTable]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.voting.models.UserElectionOption]$ 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.voting.models.UserElectionOption]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL] from django . contrib . admin . widgets import AdminDateWidget , AdminSplitDateTime [EOL] from django . contrib . postgres . fields import DateTimeRangeField [EOL] from django . contrib . postgres . forms import RangeWidget [EOL] from django . forms import DateTimeField [EOL] [EOL] from abercompsoc . voting . models import Election , UserElectionOption [EOL] [EOL] [EOL] [EOL] class ElectionAdmin ( admin . ModelAdmin ) : [EOL] pass [EOL] [EOL] [EOL] admin . site . register ( Election , ElectionAdmin ) [EOL] [EOL] admin . site . register ( UserElectionOption ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] from django . urls import path [EOL] [EOL] from abercompsoc . voting . views import ElectionList , UserElectionDetails , UserElectionOptionVote , UserElectionOptionUpdate , UserElectionOptionDelete [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ path ( [string] , view = ElectionList . as_view ( ) , name = [string] ) , path ( [string] , view = UserElectionDetails . as_view ( ) , name = [string] ) , path ( [string] , view = UserElectionOptionVote . as_view ( ) , name = [string] ) , path ( [string] , view = UserElectionOptionUpdate . as_view ( ) , name = [string] ) , path ( [string] , view = UserElectionOptionDelete . as_view ( ) , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type [EOL] import typing [EOL] import abercompsoc [EOL] import datetime [EOL] import pytz [EOL] [EOL] from django . contrib . admin . widgets import AdminDateWidget [EOL] from django . contrib . auth import get_user_model [EOL] from django . contrib . postgres . fields import DateTimeRangeField [EOL] from django . contrib . postgres . forms import RangeWidget [EOL] from django . db import models [EOL] [EOL] [comment] [EOL] from django . urls import reverse [EOL] from markdownx . models import MarkdownxField [EOL] [EOL] User = get_user_model ( ) [EOL] [EOL] [EOL] class Election ( models . Model ) : [EOL] [docstring] [EOL] title = models . CharField ( max_length = [number] , default = [string] ) [EOL] description = MarkdownxField ( default = [string] ) [EOL] created = models . DateTimeField ( auto_now_add = True ) [EOL] voters = models . ManyToManyField ( User , blank = True ) [EOL] open_time = DateTimeRangeField ( ) [EOL] aber_only = models . BooleanField ( default = False ) [EOL] [EOL] def get_absolute_url ( self ) : [EOL] return reverse ( [string] , kwargs = { [string] : self . id } ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . title [EOL] [EOL] def is_open ( self ) : [EOL] [docstring] [EOL] return pytz . utc . localize ( datetime . datetime . now ( ) ) in self . open_time [EOL] [EOL] def can_vote ( self , user ) : [EOL] [docstring] [EOL] return self . is_open ( ) \ [EOL] and user not in self . voters \ [EOL] and user . is_aber_student ( ) if self . aber_only else True [EOL] [EOL] [EOL] [EOL] class ElectionOption ( models . Model ) : [EOL] [docstring] [EOL] votes = models . IntegerField ( default = [number] ) [EOL] election = models . ForeignKey ( Election , on_delete = models . CASCADE ) [EOL] [EOL] class Meta : [EOL] abstract = True [EOL] [EOL] [EOL] class UserElectionOption ( ElectionOption ) : [EOL] [docstring] [EOL] runner = models . ForeignKey ( User , on_delete = models . CASCADE ) [EOL] manifesto = MarkdownxField ( default = [string] ) [EOL] [EOL] def get_absolute_url ( self ) : [EOL] return reverse ( [string] , kwargs = { [string] : self . election_id } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.voting.models.Election]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.voting.models.Election]$ 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.voting.models.Election]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.voting.models.Election]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Type[abercompsoc.voting.models.Election]$ 0 0 0 0 0 $typing.Type[abercompsoc.voting.models.Election]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.voting.models.ElectionOption]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.voting.models.ElectionOption]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.voting.models.UserElectionOption]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.voting.models.UserElectionOption]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Type [EOL] import typing [EOL] import abercompsoc [EOL] import django_tables2 as tables [EOL] [EOL] from . models import Election , UserElectionOption [EOL] [EOL] [EOL] class ElectionTable ( tables . Table ) : [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] self . user = kwargs . pop ( [string] ) [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] [EOL] class Meta : [EOL] model = Election [EOL] fields = [ [string] , [string] , ] [EOL] [EOL] title = tables . columns . LinkColumn ( ) [EOL] start = tables . columns . DateTimeColumn ( verbose_name = [string] , accessor = [string] ) [EOL] end = tables . columns . DateTimeColumn ( verbose_name = [string] , accessor = [string] ) [EOL] voted = tables . columns . BooleanColumn ( ) [EOL] [EOL] def value_voted ( self , record ) : [EOL] return not record . voters . filter ( pk = self . user . pk ) . exists ( ) [EOL] [EOL] [EOL] class UserElectionOptionTable ( tables . Table ) : [EOL] class Meta : [EOL] model = UserElectionOption [EOL] [EOL] fields = [ [string] , [string] , [string] , ] [EOL] [EOL] runner = tables . columns . RelatedLinkColumn ( ) [EOL] manifesto = tables . columns . TemplateColumn ( template_name = [string] ) [EOL] vote = tables . columns . TemplateColumn ( template_name = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.voting.models.UserElectionOption]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.voting.tables.ElectionTable]$ 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.voting.tables.ElectionTable]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.voting.tables.ElectionTable]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.voting.tables.ElectionTable]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.voting.models.UserElectionOption]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.voting.tables.UserElectionOptionTable]$ 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.voting.tables.UserElectionOptionTable]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[abercompsoc.voting.tables.UserElectionOptionTable]$ 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0