from typing import Optional [EOL] import typing [EOL] import discord [EOL] import builtins [EOL] from typing import Optional [EOL] [EOL] from discord import Message [EOL] from munch import Munch [EOL] [EOL] __all__ = ( [string] ) [EOL] [EOL] class MessageData ( Munch ) : [EOL] def __init__ ( self ) : [EOL] self . response_message = None [EOL] self . response_text = None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $discord.Message$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0
	0
	0
from munch import Munch [EOL] [EOL] [EOL] [comment] [EOL] class Container ( Munch ) : [EOL] [comment] [EOL] def __getattr__ ( self , k ) : [EOL] try : [EOL] return self [ k ] [EOL] except KeyError : [EOL] try : [EOL] return object . __getattribute__ ( self , k ) [EOL] except AttributeError : [EOL] raise AttributeError ( k ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from collections import OrderedDict [EOL] from typing import Any [EOL] [EOL] [EOL] [comment] [EOL] class LimitedSizeDict ( OrderedDict ) : [EOL] def __init__ ( self , * args , ** kwds ) : [EOL] self . size_limit = kwds . pop ( [string] , None ) [EOL] OrderedDict . __init__ ( self , * args , ** kwds ) [EOL] self . _check_size_limit ( ) [EOL] [EOL] def __setitem__ ( self , key , value ) : [EOL] OrderedDict . __setitem__ ( self , key , value ) [EOL] self . _check_size_limit ( ) [EOL] [EOL] def _check_size_limit ( self ) : [EOL] if self . size_limit is not None : [EOL] while len ( self ) > self . size_limit : [EOL] self . popitem ( last = False ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
class PDException ( Exception ) : [EOL] pass [EOL] [EOL] class OperationalException ( PDException ) : [EOL] pass [EOL] [EOL] class ParseException ( PDException ) : [EOL] pass [EOL] [EOL] class InvalidDataException ( PDException ) : [EOL] pass [EOL] [EOL] class DatabaseException ( PDException ) : [EOL] pass [EOL] [EOL] class DoesNotExistException ( PDException ) : [EOL] pass [EOL] [EOL] class TooManyItemsException ( PDException ) : [EOL] pass [EOL] [EOL] class TooFewItemsException ( PDException ) : [EOL] pass [EOL] [EOL] class InvalidArgumentException ( PDException ) : [EOL] pass [EOL] [EOL] class LockNotAcquiredException ( DatabaseException ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0