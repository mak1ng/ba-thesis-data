import pymysql [EOL] [EOL] pymysql . install_as_MySQLdb ( )	0 0 0 0 0 0 0 0 0
from typing import Tuple , Any , List , Union , Dict [EOL] import typing [EOL] import datetime [EOL] [docstring] [EOL] [EOL] import os [EOL] import sys [EOL] import datetime [EOL] [EOL] [comment] [EOL] BASE_DIR = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) [EOL] sys . path . insert ( [number] , BASE_DIR ) [EOL] sys . path . insert ( [number] , os . path . join ( BASE_DIR , [string] ) ) [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] SECRET_KEY = [string] [EOL] [EOL] [comment] [EOL] DEBUG = True [EOL] [EOL] ALLOWED_HOSTS = [ ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] INSTALLED_APPS = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] MIDDLEWARE = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] ROOT_URLCONF = [string] [EOL] [EOL] TEMPLATES = [ { [string] : [string] , [string] : [ os . path . join ( BASE_DIR , [string] ) ] , [string] : True , [string] : { [string] : [ [string] , [string] , [string] , [string] , ] , } , } , ] [EOL] [EOL] WSGI_APPLICATION = [string] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] DATABASES = { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : { [string] : [string] } } } [EOL] [comment] [EOL] [comment] [EOL] [EOL] AUTH_PASSWORD_VALIDATORS = [ { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , ] [EOL] [EOL] [comment] [EOL] AUTH_USER_MODEL = [string] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] LANGUAGE_CODE = [string] [EOL] [EOL] [comment] [EOL] TIME_ZONE = [string] [EOL] [EOL] USE_I18N = True [EOL] USE_L10N = True [EOL] [EOL] USE_TZ = False [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] STATIC_URL = [string] [EOL] [EOL] REST_FRAMEWORK = { [string] : ( [string] , [string] , ) } [EOL] [EOL] AUTHENTICATION_BACKENDS = ( [string] , ) [EOL] [EOL] [comment] [EOL] JWT_AUTH = { [string] : datetime . timedelta ( days = [number] ) , [string] : [string] , } [EOL] [EOL] [EOL] CRONJOBS = [ ( [string] , [string] ) ]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.List[builtins.str]],typing.List[builtins.str],builtins.bool,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,builtins.str],builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[builtins.str,typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[datetime.timedelta,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] [docstring] [EOL] import xadmin [EOL] from django . urls import path , include , re_path [EOL] [EOL] from users . views import UserViewSet [EOL] from movie . views import MovieViewSet , GenreViewSet [EOL] from user_operation . views import UserFavorMovieViewSet , UserFavorActorViewSet , UserFavorGenreViewSet [EOL] from recommendation . views import RecommendationViewSet [EOL] [EOL] from rest_framework . documentation import include_docs_urls [EOL] from rest_framework . routers import SimpleRouter [EOL] from rest_framework . authtoken import views [EOL] from rest_framework_jwt . views import obtain_jwt_token [EOL] [EOL] router = SimpleRouter ( ) [EOL] [EOL] router . register ( [string] , MovieViewSet , base_name = [string] ) [EOL] router . register ( [string] , UserViewSet , base_name = [string] ) [EOL] router . register ( [string] , GenreViewSet , base_name = [string] ) [EOL] router . register ( [string] , UserFavorMovieViewSet , base_name = [string] ) [EOL] router . register ( [string] , UserFavorActorViewSet , base_name = [string] ) [EOL] router . register ( [string] , UserFavorGenreViewSet , base_name = [string] ) [EOL] router . register ( [string] , RecommendationViewSet , base_name = [string] ) [EOL] [EOL] urlpatterns = [ path ( [string] , xadmin . site . urls ) , path ( [string] , include_docs_urls ( title = [string] ) ) , path ( [string] , include ( [string] ) ) , path ( [string] , views . obtain_auth_token ) , path ( [string] , obtain_jwt_token ) , re_path ( [string] , include ( router . urls ) ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class UserOperationConfig ( AppConfig ) : [EOL] name = [string] [EOL] [comment] [EOL] verbose_name = [string] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import server [EOL] from django . shortcuts import render [EOL] [EOL] [comment] [EOL] [EOL] from rest_framework import viewsets [EOL] from rest_framework import mixins [EOL] from . models import UserFavorMovie , UserFavorActor , UserFavorGenre [EOL] from . serializers import UserFavorMovieSerializer , UserFavorMovieDetailSerializer , UserFavorActorDetailSerializer , UserFavorActorSerializer , UserFavorGenreSerializer [EOL] from rest_framework . permissions import IsAuthenticated [EOL] from utils . permissions import IsOwnerOrReadOnly [EOL] from rest_framework_jwt . authentication import JSONWebTokenAuthentication [EOL] from rest_framework . authentication import SessionAuthentication [EOL] [EOL] [EOL] class UserFavorMovieViewSet ( viewsets . GenericViewSet , mixins . RetrieveModelMixin , mixins . ListModelMixin , mixins . CreateModelMixin , mixins . DestroyModelMixin ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] permission_classes = ( IsAuthenticated , IsOwnerOrReadOnly ) [EOL] [comment] [EOL] authentication_classes = ( JSONWebTokenAuthentication , SessionAuthentication ) [EOL] [comment] [EOL] lookup_field = [string] [EOL] [EOL] [comment] [EOL] def get_serializer_class ( self ) : [EOL] if self . action == [string] : [EOL] return UserFavorMovieDetailSerializer [EOL] elif self . action == [string] : [EOL] return UserFavorMovieSerializer [EOL] return UserFavorMovieSerializer [EOL] [EOL] def get_queryset ( self ) : [EOL] [comment] [EOL] return UserFavorMovie . objects . filter ( user = self . request . user ) [EOL] [EOL] [EOL] class UserFavorActorViewSet ( viewsets . GenericViewSet , mixins . RetrieveModelMixin , mixins . ListModelMixin , mixins . CreateModelMixin , mixins . DestroyModelMixin ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] permission_classes = ( IsAuthenticated , IsOwnerOrReadOnly ) [EOL] [comment] [EOL] authentication_classes = ( JSONWebTokenAuthentication , SessionAuthentication ) [EOL] [comment] [EOL] lookup_field = [string] [EOL] [EOL] [comment] [EOL] def get_serializer_class ( self ) : [EOL] if self . action == [string] : [EOL] return UserFavorActorDetailSerializer [EOL] elif self . action == [string] : [EOL] return UserFavorActorSerializer [EOL] return UserFavorActorSerializer [EOL] [EOL] def get_queryset ( self ) : [EOL] [comment] [EOL] return UserFavorActor . objects . filter ( user = self . request . user ) [EOL] [EOL] [EOL] class UserFavorGenreViewSet ( viewsets . GenericViewSet , mixins . ListModelMixin , mixins . CreateModelMixin ) : [EOL] [comment] [EOL] permission_classes = ( IsAuthenticated , IsOwnerOrReadOnly ) [EOL] [comment] [EOL] authentication_classes = ( JSONWebTokenAuthentication , SessionAuthentication ) [EOL] serializer_class = UserFavorGenreSerializer [EOL] [EOL] def get_queryset ( self ) : [EOL] [comment] [EOL] return UserFavorGenre . objects . filter ( user = self . request . user ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.apps.user_operation.views.UserFavorGenreViewSet]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List [EOL] import typing [EOL] import xadmin [EOL] from . models import UserFavorMovie , UserFavorActor , UserFavorGenre [EOL] [EOL] [EOL] class UserFavorMovieAdmin ( object ) : [EOL] list_display = [ [string] , [string] ] [EOL] model_icon = [string] [EOL] [EOL] [EOL] class UserFavorActorAdmin ( object ) : [EOL] list_display = [ [string] , [string] ] [EOL] model_icon = [string] [EOL] [EOL] [EOL] class UserFavorGenreAdmin ( object ) : [EOL] list_display = [ [string] , [string] ] [EOL] model_icon = [string] [EOL] [EOL] [EOL] [EOL] xadmin . site . register ( UserFavorMovie , UserFavorMovieAdmin ) [EOL] xadmin . site . register ( UserFavorActor , UserFavorActorAdmin ) [EOL] xadmin . site . register ( UserFavorGenre , UserFavorGenreAdmin )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
default_app_config = [string]	$builtins.str$ 0 0
	0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RenameField ( model_name = [string] , old_name = [string] , new_name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] [comment] [EOL] [EOL] [EOL] import builtins [EOL] from typing import Type , Tuple [EOL] import typing [EOL] import server [EOL] from datetime import datetime [EOL] from django . db import models [EOL] from django . contrib . auth . models import AbstractUser [EOL] [EOL] [EOL] class UserProfile ( AbstractUser ) : [EOL] [docstring] [EOL] GENDER_CHOICES = ( ( [string] , [string] ) , ( [string] , [string] ) ) [EOL] [comment] [EOL] name = models . CharField ( [string] , max_length = [number] , null = True , blank = True ) [EOL] birthday = models . DateField ( [string] , null = True , blank = True ) [EOL] gender = models . CharField ( [string] , max_length = [number] , choices = GENDER_CHOICES , default = [string] ) [EOL] mobile = models . CharField ( [string] , max_length = [number] ) [EOL] email = models . EmailField ( [string] , max_length = [number] , null = True , blank = True ) [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = verbose_name [EOL] [EOL] def __str__ ( self ) : [EOL] return self . username [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.apps.users.models.UserProfile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.apps.users.models.UserProfile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.apps.users.models.UserProfile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 $typing.Type[server.apps.users.models.UserProfile]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.apps.users.models.UserProfile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
default_app_config = [string]	$builtins.str$ 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List [EOL] import typing [EOL] import xadmin [EOL] from xadmin import views [EOL] [EOL] [EOL] class BaseSetting ( object ) : [EOL] [comment] [EOL] enable_themes = True [EOL] use_bootswatch = True [EOL] [EOL] [EOL] class GlobalSettings ( object ) : [EOL] [comment] [EOL] site_title = [string] [EOL] site_footer = [string] [EOL] [EOL] [comment] [EOL] menu_style = [string] [EOL] [EOL] [EOL] class VerifyCodeAdmin ( object ) : [EOL] list_display = [ [string] , [string] , [string] ] [EOL] [EOL] [EOL] xadmin . site . register ( views . BaseAdminView , BaseSetting ) [EOL] xadmin . site . register ( views . CommAdminView , GlobalSettings )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any [EOL] import typing [EOL] import server [EOL] from django . shortcuts import render [EOL] [EOL] [comment] [EOL] [EOL] from django . contrib . auth . backends import ModelBackend [EOL] from django . contrib . auth import get_user_model [EOL] from django . db . models import Q [EOL] from rest_framework . mixins import CreateModelMixin [EOL] from rest_framework import viewsets [EOL] from users . serializers import UserRegSerializer , UserDetailSerializer [EOL] [EOL] from rest_framework_jwt . authentication import JSONWebTokenAuthentication [EOL] from rest_framework import mixins [EOL] from rest_framework_jwt . serializers import jwt_encode_handler , jwt_payload_handler [EOL] from rest_framework import authentication [EOL] from rest_framework . response import Response [EOL] from rest_framework import permissions [EOL] from rest_framework import status [EOL] [EOL] User = get_user_model ( ) [EOL] [EOL] [EOL] [EOL] class CustomBackend ( ModelBackend ) : [EOL] [EOL] def authenticate ( self , request , username = None , password = None , ** kwargs ) : [EOL] try : [EOL] [comment] [EOL] user = User . objects . get ( Q ( username = username ) | Q ( mobile = username ) ) [EOL] if user . check_password ( password ) : [EOL] return user [EOL] except Exception as e : [EOL] return None [EOL] [EOL] [EOL] class UserViewSet ( CreateModelMixin , mixins . RetrieveModelMixin , mixins . UpdateModelMixin , viewsets . GenericViewSet ) : [EOL] [docstring] [EOL] serializer_class = UserRegSerializer [EOL] queryset = User . objects . all ( ) [EOL] authentication_classes = ( JSONWebTokenAuthentication , authentication . SessionAuthentication ) [EOL] [EOL] def create ( self , request , * args , ** kwargs ) : [EOL] serializer = self . get_serializer ( data = request . data ) [EOL] serializer . is_valid ( raise_exception = True ) [EOL] user = self . perform_create ( serializer ) [EOL] re_dict = serializer . data [EOL] payload = jwt_payload_handler ( user ) [EOL] re_dict [ [string] ] = jwt_encode_handler ( payload ) [EOL] re_dict [ [string] ] = user . name if user . name else user . username [EOL] headers = self . get_success_headers ( serializer . data ) [EOL] return Response ( re_dict , status = status . HTTP_201_CREATED , headers = headers ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def get_permissions ( self ) : [EOL] if self . action == [string] : [EOL] return [ permissions . IsAuthenticated ( ) ] [EOL] elif self . action == [string] : [EOL] return [ ] [EOL] return [ ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def get_serializer_class ( self ) : [EOL] if self . action == [string] : [EOL] return UserDetailSerializer [EOL] elif self . action == [string] : [EOL] return UserRegSerializer [EOL] [EOL] return UserDetailSerializer [EOL] [EOL] [comment] [EOL] [comment] [EOL] def get_object ( self ) : [EOL] return self . request . user [EOL] [EOL] def perform_create ( self , serializer ) : [EOL] return serializer . save ( ) [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Type , Tuple , Any [EOL] import typing [EOL] import server [EOL] from rest_framework import serializers [EOL] from rest_framework . validators import UniqueValidator [EOL] from django . contrib . auth import get_user_model [EOL] [EOL] [EOL] User = get_user_model ( ) [EOL] [EOL] [EOL] class UserDetailSerializer ( serializers . ModelSerializer ) : [EOL] [docstring] [EOL] class Meta : [EOL] model = User [EOL] fields = ( [string] , [string] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] class UserRegSerializer ( serializers . ModelSerializer ) : [EOL] [comment] [EOL] username = serializers . CharField ( allow_blank = False , validators = [ UniqueValidator ( queryset = User . objects . all ( ) , message = [string] ) ] ) [EOL] [EOL] password = serializers . CharField ( write_only = True ) [EOL] [EOL] class Meta : [EOL] model = User [EOL] fields = ( [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.apps.users.serializers.UserRegSerializer.Meta]$ 0 $typing.Any$ 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.apps.users.serializers.UserRegSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.apps.users.serializers.UserRegSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.apps.users.serializers.UserRegSerializer.Meta]$ 0 $typing.Any$ 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class UsersConfig ( AppConfig ) : [EOL] name = [string] [EOL] [comment] [EOL] verbose_name = [string] [EOL] [EOL] def ready ( self ) : [EOL] import users . signals [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
default_app_config = [string]	$builtins.str$ 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import List [EOL] import typing [EOL] import xadmin [EOL] from . models import Recommendation [EOL] [EOL] [EOL] class RecommendationAdmin ( object ) : [EOL] list_display = [ [string] , [string] , [string] ] [EOL] model_icon = [string] [EOL] [EOL] [EOL] [EOL] xadmin . site . register ( Recommendation , RecommendationAdmin )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] from users . models import UserProfile [EOL] from movie . models import Genre , Movie [EOL] from user_operation . models import UserFavorGenre , UserFavorActor , UserFavorMovie [EOL] from recommendation . models import Recommendation [EOL] [EOL] import random [EOL] [EOL] [EOL] def recommend_genre_sim_movie ( user ) : [EOL] genres = UserFavorGenre . objects . get ( user = user ) . genre . split ( [string] ) [EOL] [EOL] for id in genres : [EOL] genre_item = Genre . objects . get ( id = id ) [EOL] description = [string] % ( genre_item . genre ) [EOL] relate_movies = genre_item . doubanIds . split ( [string] ) [EOL] print ( relate_movies ) [EOL] for id in relate_movies : [EOL] try : [EOL] Recommendation . objects . create ( user = user , description = description , doubanId = id , random_rank = random . random ( ) ) [EOL] except : [EOL] continue [EOL] [EOL] [EOL] def recommend_actor_sim_movie ( user ) : [EOL] actors = UserFavorActor . objects . filter ( user = user ) [EOL] [EOL] for actor in actors : [EOL] description = [string] % ( actor . name ) [EOL] works = actor . works . split ( [string] ) [EOL] print ( works ) [EOL] for id in works : [EOL] try : [EOL] Recommendation . objects . create ( user = user , description = description , doubanId = id , random_rank = random . random ( ) ) [EOL] except : [EOL] continue [EOL] [EOL] [EOL] def recommend_movie_sim_movie ( user ) : [EOL] movies = UserFavorMovie . objects . filter ( user = user ) [EOL] [EOL] for movie in movies : [EOL] doubanId = movie . doubanId [EOL] sim_movie = Movie . objects . get ( doubanId = doubanId ) . closest_movie . split ( [string] ) [EOL] description = [string] % ( movie . title ) [EOL] for id in sim_movie : [EOL] try : [EOL] Recommendation . objects . create ( user = user , description = description , doubanId = id , random_rank = random . random ( ) ) [EOL] except : [EOL] continue [EOL] [EOL] [EOL] def generate_recommendation ( ) : [EOL] [EOL] [comment] [EOL] Recommendation . objects . all ( ) . delete ( ) [EOL] [EOL] users = UserProfile . objects . filter ( is_staff = [number] , is_superuser = [number] ) [EOL] [EOL] for user in users : [EOL] recommend_genre_sim_movie ( user ) [EOL] recommend_actor_sim_movie ( user ) [EOL] recommend_movie_sim_movie ( user ) [EOL] [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class RecommendationConfig ( AppConfig ) : [EOL] name = [string] [EOL] [comment] [EOL] verbose_name = [string] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Any , List [EOL] import typing [EOL] import os ; [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [comment] [EOL] import django ; [EOL] [EOL] django . setup ( ) [comment] [EOL] [EOL] import pandas as pd [EOL] import numpy as np [EOL] from scipy . sparse import csr_matrix [EOL] from sklearn . neighbors import NearestNeighbors [EOL] from sklearn . decomposition import TruncatedSVD [EOL] [EOL] from movie . models import Movie [EOL] [EOL] [comment] [EOL] path = [string] [EOL] [EOL] [EOL] movies = pd . read_csv ( path + [string] ) [EOL] print ( [string] % movies [ ~ pd . isnull ( movies . title ) ] . shape [ [number] ] ) [EOL] print ( [string] % movies [ pd . isnull ( movies . title ) ] . shape [ [number] ] ) [EOL] print ( [string] % movies . shape [ [number] ] ) [EOL] [EOL] [EOL] ratings = pd . read_csv ( path + [string] ) [EOL] print ( [string] % ratings . userId . unique ( ) . shape [ [number] ] ) [EOL] print ( [string] % ratings . shape [ [number] ] ) [EOL] [EOL] links = pd . read_csv ( path + [string] ) [EOL] [EOL] combine_movie_rating = pd . merge ( ratings , movies , on = [string] ) [EOL] combine_movie_rating = combine_movie_rating . drop ( [ [string] ] , axis = [number] ) [EOL] print ( len ( combine_movie_rating ) ) [EOL] [EOL] movie_rating_count = pd . DataFrame ( combine_movie_rating . groupby ( [ [string] ] ) [ [string] ] . count ( ) . reset_index ( ) . rename ( columns = { [string] : [string] } ) ) [EOL] [EOL] rating_with_totalRatingCount = combine_movie_rating . merge ( movie_rating_count , left_on = [string] , right_on = [string] ) [EOL] [EOL] popular_threshold = [number] [EOL] rating_popular_movies = rating_with_totalRatingCount . query ( [string] ) [EOL] [EOL] [EOL] [comment] [EOL] ratings_pivot = rating_popular_movies . pivot ( index = [string] , columns = [string] , values = [string] ) . fillna ( [number] ) [EOL] ratings_pivot_sparse = csr_matrix ( ratings_pivot . values ) [EOL] print ( ratings_pivot . shape ) [EOL] ratings_pivot . head ( ) [EOL] [EOL] X = ratings_pivot . values . T [EOL] [EOL] svd = TruncatedSVD ( n_components = [number] , random_state = [number] ) [EOL] matrix = svd . fit_transform ( X ) [EOL] matrix . shape [EOL] [EOL] corr = np . corrcoef ( matrix ) [EOL] [EOL] movieIds = ratings_pivot . columns [EOL] movieIds_list = list ( movieIds ) [EOL] [EOL] [EOL] movie_items = Movie . objects . all ( ) [EOL] [EOL] for movie in movie_items : [EOL] movieId_index = movieIds_list . index ( int ( movie . movieId ) ) [EOL] movieId_vec = corr [ movieId_index ] [EOL] argsort_idx = np . argsort ( - movieId_vec ) [ : [number] ] [EOL] coff = movieId_vec [ argsort_idx ] [EOL] similar_movie_Ids = movieIds [ argsort_idx ] [EOL] closest_movies = [ ] [EOL] for index in range ( len ( similar_movie_Ids ) ) : [EOL] if index == [number] : [EOL] continue [EOL] id = similar_movie_Ids [ index ] [EOL] doubanId = Movie . objects . get ( movieId = id ) . doubanId [EOL] closest_movies . append ( doubanId ) [EOL] print ( closest_movies ) [EOL] divide_tag = [string] [EOL] ids = divide_tag . join ( closest_movies ) [EOL] Movie . objects . filter ( movieId = movie . movieId ) . update ( closest_movie = ids ) [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.int$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0
import builtins [EOL] from typing import Type , Tuple , Any [EOL] import typing [EOL] import server [EOL] from django . db import models [EOL] from django . contrib . auth import get_user_model [EOL] User = get_user_model ( ) [EOL] [EOL] [EOL] [comment] [EOL] class Recommendation ( models . Model ) : [EOL] [EOL] user = models . ForeignKey ( User , on_delete = models . CASCADE , verbose_name = [string] ) [EOL] doubanId = models . CharField ( [string] , max_length = [number] , null = False , blank = False ) [EOL] description = models . CharField ( [string] , max_length = [number] , null = False , blank = False ) [EOL] random_rank = models . FloatField ( [string] , max_length = [number] , null = False , blank = False ) [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = verbose_name [EOL] unique_together = ( [string] , [string] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . user . username [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.apps.recommendation.models.Recommendation]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.apps.recommendation.models.Recommendation]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.apps.recommendation.models.Recommendation]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.apps.recommendation.models.Recommendation]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import server [EOL] from rest_framework import viewsets [EOL] from rest_framework import mixins [EOL] from . models import Recommendation [EOL] from . serializers import RecommendationSerializer [EOL] from rest_framework . permissions import IsAuthenticated [EOL] from utils . permissions import IsOwnerOrReadOnly [EOL] from rest_framework_jwt . authentication import JSONWebTokenAuthentication [EOL] from rest_framework . authentication import SessionAuthentication [EOL] from rest_framework . pagination import PageNumberPagination [EOL] [EOL] [EOL] class RecommendationPagination ( PageNumberPagination ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] page_size = [number] [EOL] [comment] [EOL] page_size_query_param = [string] [EOL] [comment] [EOL] page_query_param = [string] [EOL] [comment] [EOL] max_page_size = [number] [EOL] [EOL] [EOL] class RecommendationViewSet ( viewsets . GenericViewSet , mixins . ListModelMixin ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] permission_classes = ( IsAuthenticated , IsOwnerOrReadOnly ) [EOL] [comment] [EOL] authentication_classes = ( JSONWebTokenAuthentication , SessionAuthentication ) [EOL] pagination_class = RecommendationPagination [EOL] serializer_class = RecommendationSerializer [EOL] [EOL] def get_queryset ( self ) : [EOL] [comment] [EOL] return Recommendation . objects . filter ( user = self . request . user ) . order_by ( [string] ) [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.apps.recommendation.views.RecommendationPagination]$ 0 0 0 $typing.Type[server.apps.recommendation.serializers.RecommendationSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] import builtins [EOL] from typing import Type , Tuple , List [EOL] import typing [EOL] import server [EOL] from rest_framework import serializers [EOL] from recommendation . models import Recommendation [EOL] from rest_framework . validators import UniqueTogetherValidator [EOL] [EOL] [EOL] class RecommendationDetailSerializer ( serializers . ModelSerializer ) : [EOL] [docstring] [EOL] [EOL] class Meta : [EOL] model = Recommendation [EOL] fields = [ [string] , [string] ] [EOL] [EOL] [EOL] class RecommendationSerializer ( serializers . ModelSerializer ) : [EOL] [comment] [EOL] user = serializers . HiddenField ( default = serializers . CurrentUserDefault ( ) ) [EOL] [EOL] class Meta : [EOL] [comment] [EOL] validators = [ UniqueTogetherValidator ( queryset = Recommendation . objects . all ( ) , fields = ( [string] , [string] ) , message = [string] ) ] [EOL] model = Recommendation [EOL] fields = ( [string] , [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.apps.recommendation.serializers.RecommendationSerializer.Meta]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.apps.recommendation.serializers.RecommendationSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.apps.recommendation.serializers.RecommendationSerializer.Meta]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from django . conf import settings [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ migrations . swappable_dependency ( settings . AUTH_USER_MODEL ) , ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AddField ( model_name = [string] , name = [string] , field = models . CharField ( default = [string] , max_length = [number] , verbose_name = [string] ) , ) , migrations . RemoveField ( model_name = [string] , name = [string] , ) , migrations . AlterUniqueTogether ( name = [string] , unique_together = { ( [string] , [string] ) } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from rest_framework import permissions [EOL] [EOL] class IsOwnerOrReadOnly ( permissions . BasePermission ) : [EOL] [docstring] [EOL] [EOL] def has_object_permission ( self , request , view , obj ) : [EOL] [comment] [EOL] [comment] [EOL] if request . method in permissions . SAFE_METHODS : [EOL] return True [EOL] [EOL] [comment] [EOL] return obj . user == request . user [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment]	0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import server [EOL] from django . shortcuts import render [EOL] [EOL] [comment] [EOL] [EOL] [EOL] from movie . serializers import MovieSerializer , GenreSerializer [EOL] from . models import Movie , Genre [EOL] from rest_framework import mixins , viewsets [EOL] from rest_framework . pagination import PageNumberPagination [EOL] [EOL] [EOL] class MoviePagination ( PageNumberPagination ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] page_size = [number] [EOL] [comment] [EOL] page_size_query_param = [string] [EOL] [comment] [EOL] page_query_param = [string] [EOL] [comment] [EOL] max_page_size = [number] [EOL] [EOL] [EOL] class MovieViewSet ( mixins . ListModelMixin , mixins . RetrieveModelMixin , mixins . UpdateModelMixin , mixins . DestroyModelMixin , mixins . CreateModelMixin , viewsets . GenericViewSet ) : [EOL] [docstring] [EOL] pagination_class = MoviePagination [EOL] queryset = Movie . objects . all ( ) . order_by ( [string] ) [EOL] serializer_class = MovieSerializer [EOL] [EOL] [EOL] class GenreViewSet ( mixins . ListModelMixin , viewsets . GenericViewSet ) : [EOL] queryset = Genre . objects . all ( ) . order_by ( [string] ) [EOL] serializer_class = GenreSerializer [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.apps.movie.views.MoviePagination]$ 0 0 0 $typing.Type[server.apps.movie.views.MovieViewSet]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.apps.movie.views.MovieViewSet]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.apps.movie.views.GenreViewSet]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[server.apps.movie.views.GenreViewSet]$ 0 0 0 0
[EOL] [EOL] default_app_config = [string]	0 0 $builtins.str$ 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class MovieConfig ( AppConfig ) : [EOL] name = [string] [EOL] [comment] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Dict , List [EOL] import typing [EOL] from django . views . generic import View [EOL] from . models import Movie [EOL] from django . http import HttpResponse [EOL] import json [EOL] [EOL] [EOL] class MovieList ( View ) : [EOL] def get ( self , request ) : [EOL] [comment] [EOL] json_list = [ ] [EOL] [comment] [EOL] movies = Movie . objects . all ( ) [EOL] for movie in movies : [EOL] json_dic = { } [EOL] [comment] [EOL] json_dic [ [string] ] = movie . title [EOL] json_dic [ [string] ] = movie . id [EOL] json_list . append ( json_dic ) [EOL] [EOL] return HttpResponse ( json . dumps ( json_list ) , content_type = [string] , charset = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List [EOL] import typing [EOL] import xadmin [EOL] from . models import Movie , Genre [EOL] [EOL] [EOL] class MovieAdmin ( object ) : [EOL] list_display = [ [string] , [string] , [string] ] [EOL] model_icon = [string] [EOL] [EOL] [EOL] [EOL] class GenreAdmin ( object ) : [EOL] list_display = [ [string] , [string] ] [EOL] model_icon = [string] [EOL] [EOL] [EOL] [EOL] xadmin . site . register ( Movie , MovieAdmin ) [EOL] xadmin . site . register ( Genre , GenreAdmin ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , List [EOL] import typing [EOL] import requests [EOL] from . models import Genre [EOL] import requests [EOL] [EOL] [EOL] [comment] [EOL] def update_genre_movie ( ) : [EOL] genres = Genre . objects . all ( ) . values_list ( [string] , [string] ) [EOL] url = [string] [EOL] [EOL] doubanIds = [ ] [EOL] [EOL] for genre in genres : [EOL] print ( genre [ [number] ] ) [EOL] r = requests . get ( url , params = { [string] : genre [ [number] ] } ) [EOL] movie_list = r . json ( ) [ [string] ] [EOL] print ( movie_list ) [EOL] for movie in movie_list : [EOL] doubanIds . append ( movie [ [string] ] ) [EOL] [EOL] divide_tag = [string] [EOL] ids = divide_tag . join ( doubanIds ) [EOL] print ( ids ) [EOL] Genre . objects . filter ( id = genre [ [number] ] ) . update ( doubanIds = ids ) [EOL] doubanIds = [ ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RenameField ( model_name = [string] , old_name = [string] , new_name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0