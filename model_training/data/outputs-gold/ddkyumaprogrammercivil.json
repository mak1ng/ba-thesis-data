	0
	0
	0
import builtins [EOL] from typing import Pattern , Dict , Tuple , Any , Type , List [EOL] import typing [EOL] import jdatetime [EOL] import django_jalali [EOL] import datetime [EOL] import re [EOL] import time [EOL] from distutils . version import StrictVersion [EOL] [EOL] import django [EOL] import jdatetime [EOL] from django . core import exceptions [EOL] from django . db import models [EOL] from django . conf import settings [EOL] import warnings [EOL] from django . utils import timezone [EOL] from django . utils . encoding import smart_str , smart_text [EOL] from django . utils . functional import curry [EOL] from django . utils . translation import ugettext as _ [EOL] [EOL] from django_jalali import forms [EOL] [EOL] ansi_date_re = re . compile ( [string] ) [EOL] [EOL] [EOL] class jManager ( models . Manager ) : [EOL] [docstring] [EOL] [EOL] def filter ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] new_kwargs = { } [EOL] for k in kwargs : [EOL] if [string] in k : [EOL] filed_name = k . split ( [string] ) [EOL] first_year = jdatetime . datetime ( int ( kwargs [ k ] ) , [number] , [number] ) [EOL] new_kwargs [ [string] % filed_name [ [number] ] ] = jdatetime . datetime ( int ( kwargs [ k ] ) , [number] , [number] ) [EOL] last_day = [number] [EOL] if first_year . isleap ( ) : [EOL] last_day = [number] [EOL] new_kwargs [ [string] % filed_name [ [number] ] ] = jdatetime . datetime ( int ( kwargs [ k ] ) , [number] , last_day , [number] , [number] , [number] ) [EOL] else : [EOL] new_kwargs [ k ] = kwargs [ k ] [EOL] return models . Manager . filter ( self , * args , ** new_kwargs ) [EOL] [EOL] [EOL] class jDateField ( models . DateField ) : [EOL] description = _ ( [string] ) [EOL] empty_strings_allowed = False [EOL] default_error_messages = { [string] : _ ( [string] ) , [string] : _ ( [string] ) , } [EOL] [EOL] def __init__ ( self , verbose_name = None , name = None , auto_now = False , auto_now_add = False , ** kwargs ) : [EOL] [EOL] self . auto_now , self . auto_now_add = auto_now , auto_now_add [EOL] [comment] [EOL] [comment] [EOL] if auto_now or auto_now_add : [EOL] kwargs [ [string] ] = False [EOL] kwargs [ [string] ] = True [EOL] models . Field . __init__ ( self , verbose_name , name , ** kwargs ) [EOL] [EOL] def get_internal_type ( self ) : [EOL] return [string] [EOL] [EOL] def parse_date ( self , date_obj ) : [EOL] [docstring] [EOL] [EOL] if isinstance ( date_obj , datetime . datetime ) : [EOL] return jdatetime . date . fromgregorian ( date = date_obj . date ( ) ) [EOL] if isinstance ( date_obj , datetime . date ) : [EOL] return jdatetime . date . fromgregorian ( date = date_obj ) [EOL] [EOL] if not ansi_date_re . search ( date_obj ) : [EOL] raise exceptions . ValidationError ( self . error_messages [ [string] ] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] year , month , day = map ( int , date_obj . split ( [string] ) ) [EOL] try : [EOL] if year > [number] : [EOL] return jdatetime . date . fromgregorian ( date = datetime . date ( year , month , day ) ) [EOL] else : [EOL] return jdatetime . date ( year , month , day ) [EOL] except ValueError as e : [EOL] msg = self . error_messages [ [string] ] % _ ( str ( e ) ) [EOL] raise exceptions . ValidationError ( msg ) [EOL] [EOL] def from_db_value ( self , value , expression , connection , context ) : [EOL] if value is None : [EOL] return value [EOL] return self . parse_date ( value ) [EOL] [EOL] def to_python ( self , value ) : [EOL] if value is None : [EOL] return value [EOL] [EOL] if isinstance ( value , jdatetime . datetime ) : [EOL] return value . date ( ) [EOL] if isinstance ( value , jdatetime . date ) : [EOL] return value [EOL] return self . parse_date ( value ) [EOL] [EOL] def pre_save ( self , model_instance , add ) : [EOL] if self . auto_now or ( self . auto_now_add and add ) : [EOL] value = jdatetime . date . today ( ) [EOL] setattr ( model_instance , self . attname , value ) [EOL] return value [EOL] else : [EOL] return super ( jDateField , self ) . pre_save ( model_instance , add ) [EOL] [EOL] def contribute_to_class ( self , cls , name ) : [EOL] super ( jDateField , self ) . contribute_to_class ( cls , name ) [EOL] if not self . null : [EOL] setattr ( cls , [string] % self . name , curry ( cls . _get_next_or_previous_by_FIELD , field = self , is_next = True ) ) [EOL] setattr ( cls , [string] % self . name , curry ( cls . _get_next_or_previous_by_FIELD , field = self , is_next = False ) ) [EOL] [EOL] def get_prep_lookup ( self , lookup_type , value ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [EOL] if lookup_type in ( [string] , [string] , [string] , [string] , [string] ) : [EOL] prep = self . get_prep_value ( value ) [EOL] if type ( prep ) == datetime . datetime or type ( prep ) == datetime . date : [EOL] return prep [EOL] return prep . togregorian ( ) [EOL] [EOL] elif lookup_type in ( [string] , [string] ) : [EOL] return [ self . get_prep_value ( v ) for v in value ] [EOL] elif lookup_type == [string] : [EOL] [comment] [EOL] try : [EOL] return int ( value ) [EOL] except ValueError : [EOL] raise ValueError ( [string] ) [EOL] [EOL] if lookup_type in ( [string] , [string] , [string] ) : [EOL] raise ValueError ( [string] ) [EOL] [EOL] return super ( jDateField , self ) . get_prep_lookup ( lookup_type , value ) [EOL] [EOL] def get_prep_value ( self , value ) : [EOL] return self . to_python ( value ) [EOL] [EOL] def get_db_prep_value ( self , value , connection , prepared = False ) : [EOL] [comment] [EOL] if not prepared : [EOL] value = self . get_prep_value ( value ) [EOL] [EOL] if isinstance ( value , jdatetime . datetime ) : [EOL] value = value . togregorian ( ) . date ( ) [EOL] if isinstance ( value , jdatetime . date ) : [EOL] value = value . togregorian ( ) [EOL] [EOL] if StrictVersion ( django . get_version ( ) ) >= StrictVersion ( [string] ) : [EOL] return connection . ops . adapt_datefield_value ( value ) [EOL] else : [EOL] return connection . ops . value_to_db_date ( value ) [EOL] [EOL] def value_to_string ( self , obj ) : [EOL] value = self . value_from_object ( obj ) [EOL] if value is None : [EOL] date_string = [string] [EOL] else : [EOL] date_string = smart_text ( value ) [EOL] return date_string [EOL] [EOL] def formfield ( self , ** kwargs ) : [EOL] defaults = { [string] : forms . jDateField } [EOL] kwargs . update ( defaults ) [EOL] return super ( jDateField , self ) . formfield ( ** kwargs ) [EOL] [EOL] [EOL] class jDateTimeField ( models . DateTimeField ) : [EOL] default_error_messages = { [string] : _ ( [string] [string] ) , } [EOL] description = _ ( [string] ) [EOL] [EOL] def __init__ ( self , verbose_name = None , name = None , auto_now = False , auto_now_add = False , ** kwargs ) : [EOL] [EOL] self . auto_now , self . auto_now_add = auto_now , auto_now_add [EOL] [comment] [EOL] [comment] [EOL] if auto_now or auto_now_add : [EOL] kwargs [ [string] ] = False [EOL] kwargs [ [string] ] = True [EOL] models . Field . __init__ ( self , verbose_name , name , ** kwargs ) [EOL] [EOL] def get_internal_type ( self ) : [EOL] return [string] [EOL] [EOL] def parse_date ( self , datetime_obj ) : [EOL] [docstring] [EOL] [EOL] if isinstance ( datetime_obj , datetime . datetime ) : [EOL] try : [EOL] if datetime_obj . year < [number] : [EOL] return jdatetime . datetime ( datetime_obj . year , datetime_obj . month , datetime_obj . day , datetime_obj . hour , datetime_obj . minute , datetime_obj . second , datetime_obj . microsecond , datetime_obj . tzinfo ) [EOL] else : [EOL] return jdatetime . datetime . fromgregorian ( datetime = datetime_obj ) [EOL] except ValueError : [EOL] raise exceptions . ValidationError ( self . error_messages [ [string] ] ) [EOL] if isinstance ( datetime_obj , datetime . date ) : [EOL] try : [EOL] if datetime_obj . year < [number] : [EOL] return jdatetime . datetime ( datetime_obj . year , datetime_obj . month , datetime_obj . day ) [EOL] else : [EOL] return jdatetime . datetime . fromgregorian ( date = datetime_obj ) [EOL] except ValueError : [EOL] raise exceptions . ValidationError ( self . error_messages [ [string] ] ) [EOL] [EOL] [comment] [EOL] datetime_obj = smart_str ( datetime_obj ) [EOL] if not datetime_obj : [EOL] return None [EOL] [comment] [EOL] if [string] in datetime_obj : [EOL] try : [EOL] datetime_obj , usecs = datetime_obj . split ( [string] ) [EOL] if [string] in usecs : [EOL] usecs , tz = usecs . split ( [string] ) [EOL] usecs = int ( usecs ) [EOL] except ValueError : [EOL] raise exceptions . ValidationError ( self . error_messages [ [string] ] ) [EOL] else : [EOL] usecs = [number] [EOL] kwargs = { [string] : usecs } [EOL] try : [comment] [EOL] t = time . strptime ( datetime_obj , [string] ) [EOL] if t . tm_year > [number] : [EOL] return datetime . datetime ( * time . strptime ( datetime_obj , [string] ) [ : [number] ] , ** kwargs ) [EOL] else : [EOL] return jdatetime . datetime ( * time . strptime ( datetime_obj , [string] ) [ : [number] ] , ** kwargs ) [EOL] [EOL] except ValueError : [EOL] try : [comment] [EOL] t = time . strptime ( datetime_obj , [string] ) [EOL] if t . tm_year > [number] : [EOL] return datetime . datetime ( * time . strptime ( datetime_obj , [string] ) [ : [number] ] , ** kwargs ) [EOL] else : [EOL] return jdatetime . datetime ( * time . strptime ( datetime_obj , [string] ) [ : [number] ] , ** kwargs ) [EOL] [EOL] except ValueError : [comment] [EOL] try : [EOL] t = time . strptime ( datetime_obj , [string] ) [ : [number] ] [EOL] if t [ [number] ] > [number] : [EOL] return datetime . datetime ( * time . strptime ( datetime_obj , [string] ) [ : [number] ] , ** kwargs ) [EOL] else : [EOL] return jdatetime . datetime ( * time . strptime ( datetime_obj , [string] ) [ : [number] ] , ** kwargs ) [EOL] except ValueError : [EOL] raise exceptions . ValidationError ( self . error_messages [ [string] ] ) [EOL] [EOL] def from_db_value ( self , value , expression , connection , context ) : [EOL] if value is None : [EOL] return value [EOL] return self . parse_date ( value ) [EOL] [EOL] def to_python ( self , value ) : [EOL] if value is None : [EOL] return value [EOL] [EOL] if isinstance ( value , jdatetime . datetime ) : [EOL] return value [EOL] if isinstance ( value , jdatetime . date ) : [EOL] try : [EOL] return jdatetime . datetime ( value . year , value . month , value . day ) [EOL] except ValueError : [EOL] raise exceptions . ValidationError ( self . error_messages [ [string] ] ) [EOL] return self . parse_date ( value ) [EOL] [EOL] def pre_save ( self , model_instance , add ) : [EOL] if self . auto_now or ( self . auto_now_add and add ) : [EOL] value = jdatetime . datetime . fromgregorian ( datetime = timezone . now ( ) ) [EOL] setattr ( model_instance , self . attname , value ) [EOL] return value [EOL] else : [EOL] return super ( jDateTimeField , self ) . pre_save ( model_instance , add ) [EOL] [EOL] def get_prep_value ( self , value ) : [EOL] value = self . to_python ( value ) [EOL] if value is not None and settings . USE_TZ and timezone . is_naive ( value ) : [EOL] try : [EOL] name = [string] % ( self . model . __name__ , self . name ) [EOL] except AttributeError : [EOL] name = [string] [EOL] warnings . warn ( [string] [string] % ( name , value ) , RuntimeWarning ) [EOL] default_timezone = timezone . get_default_timezone ( ) [EOL] value = timezone . make_aware ( value , default_timezone ) [EOL] return value [EOL] [EOL] def get_db_prep_value ( self , value , connection , prepared = False ) : [EOL] [comment] [EOL] if not prepared : [EOL] value = self . get_prep_value ( value ) [EOL] [EOL] if isinstance ( value , jdatetime . datetime ) : [EOL] value = value . togregorian ( ) [EOL] [EOL] if StrictVersion ( django . get_version ( ) ) >= StrictVersion ( [string] ) : [EOL] return connection . ops . adapt_datefield_value ( value ) [EOL] else : [EOL] return connection . ops . value_to_db_datetime ( value ) [EOL] [EOL] def value_to_string ( self , obj ) : [EOL] value = self . value_from_object ( obj ) [EOL] if value is None : [EOL] dat_string = [string] [EOL] else : [EOL] date_string = smart_text ( value ) [EOL] return date_string [EOL] [EOL] def contribute_to_class ( self , cls , name ) : [EOL] super ( jDateTimeField , self ) . contribute_to_class ( cls , name ) [EOL] if not self . null : [EOL] setattr ( cls , [string] % self . name , curry ( cls . _get_next_or_previous_by_FIELD , field = self , is_next = True ) ) [EOL] setattr ( cls , [string] % self . name , curry ( cls . _get_next_or_previous_by_FIELD , field = self , is_next = False ) ) [EOL] [EOL] def get_prep_lookup ( self , lookup_type , value ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [EOL] if lookup_type in ( [string] , [string] , [string] , [string] , [string] ) : [EOL] prep = self . get_prep_value ( value ) [EOL] if type ( prep ) == datetime . datetime or type ( prep ) == datetime . date : [EOL] return prep [EOL] return prep . togregorian ( ) [EOL] [EOL] elif lookup_type in ( [string] , [string] ) : [EOL] return [ self . get_prep_value ( v ) for v in value ] [EOL] elif lookup_type == [string] : [EOL] [comment] [EOL] try : [EOL] return int ( value ) [EOL] except ValueError : [EOL] raise ValueError ( [string] ) [EOL] [EOL] if lookup_type in ( [string] , [string] , [string] ) : [EOL] raise ValueError ( [string] ) [EOL] [EOL] return super ( jDateTimeField , self ) . get_prep_lookup ( lookup_type , value ) [EOL] [EOL] def formfield ( self , ** kwargs ) : [EOL] defaults = { [string] : forms . jDateTimeField } [EOL] kwargs . update ( defaults ) [EOL] return super ( jDateTimeField , self ) . formfield ( ** kwargs ) [EOL]	typing.Type[django_jalali.db.models.jDateTimeField]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Tuple[typing.Any,...]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,...]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Type[django_jalali.forms.jDateTimeField]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Type[django_jalali.forms.jDateTimeField]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Optional , Any , Type , Match [EOL] import typing [EOL] import jdatetime [EOL] import django_jalali [EOL] import re [EOL] [EOL] from django import forms [EOL] import jdatetime [EOL] from django . core import validators , exceptions [EOL] from django . utils . translation import ugettext as _ [EOL] from . widgets import jDateInput , jDateTimeInput [EOL] from django . forms . utils import from_current_timezone , to_current_timezone [EOL] [EOL] [EOL] class jDateField ( forms . Field ) : [EOL] widget = jDateInput [EOL] default_error_messages = { [string] : _ ( [string] ) , } [EOL] [EOL] def __init__ ( self , input_formats = None , * args , ** kwargs ) : [EOL] super ( jDateField , self ) . __init__ ( * args , ** kwargs ) [EOL] self . input_formats = input_formats [EOL] [EOL] def to_python ( self , value ) : [EOL] [docstring] [EOL] if value in validators . EMPTY_VALUES : [EOL] return None [EOL] if isinstance ( value , jdatetime . datetime ) : [EOL] return value . date ( ) [EOL] if isinstance ( value , jdatetime . date ) : [EOL] return value [EOL] [EOL] groups = re . search ( [string] , value ) [EOL] try : [EOL] return jdatetime . date ( year = int ( groups . group ( [number] ) ) , month = int ( groups . group ( [number] ) ) , day = int ( groups . group ( [number] ) ) ) [EOL] [EOL] except ( ValueError , AttributeError ) : [EOL] pass [EOL] [EOL] raise exceptions . ValidationError ( self . error_messages [ [string] ] ) [EOL] [EOL] [EOL] class jDateTimeField ( forms . Field ) : [EOL] widget = jDateTimeInput [EOL] default_error_messages = { [string] : _ ( [string] ) , } [EOL] [EOL] def __init__ ( self , input_formats = None , * args , ** kwargs ) : [EOL] super ( jDateTimeField , self ) . __init__ ( * args , ** kwargs ) [EOL] self . input_formats = input_formats [EOL] [EOL] def prepare_value ( self , value ) : [EOL] if isinstance ( value , jdatetime . datetime ) : [EOL] value = to_current_timezone ( value ) [EOL] return value [EOL] [EOL] def to_python ( self , value ) : [EOL] [docstring] [EOL] if value in validators . EMPTY_VALUES : [EOL] return None [EOL] if isinstance ( value , jdatetime . datetime ) : [EOL] return from_current_timezone ( value ) [EOL] if isinstance ( value , jdatetime . date ) : [EOL] result = jdatetime . datetime ( value . year , value . month , value . day ) [EOL] return from_current_timezone ( result ) [EOL] if isinstance ( value , list ) : [EOL] [comment] [EOL] [comment] [EOL] if len ( value ) != [number] : [EOL] raise exceptions . ValidationError ( self . error_messages [ [string] ] ) [EOL] if value [ [number] ] in validators . EMPTY_VALUES and value [ [number] ] in validators . EMPTY_VALUES : [EOL] return None [EOL] value = [string] % tuple ( value ) [EOL] [EOL] groups = re . search ( [string] [string] [string] , value ) [EOL] try : [EOL] microsecond = int ( groups . group ( [string] ) or [number] ) [EOL] second = int ( groups . group ( [string] ) or [number] ) [EOL] result = jdatetime . datetime ( year = int ( groups . group ( [string] ) ) , month = int ( groups . group ( [string] ) ) , day = int ( groups . group ( [string] ) ) , hour = int ( groups . group ( [string] ) ) , minute = int ( groups . group ( [string] ) ) , second = second , microsecond = microsecond ) [EOL] return from_current_timezone ( result ) [EOL] [EOL] except ( ValueError , AttributeError ) : [EOL] pass [EOL] [EOL] raise exceptions . ValidationError ( self . error_messages [ [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $jdatetime.datetime$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $jdatetime.datetime$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 $jdatetime.datetime$ 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 $jdatetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Any , Type [EOL] import typing [EOL] import jdatetime [EOL] import datetime [EOL] import django_jalali [EOL] from django . forms import widgets [EOL] from django . utils . encoding import smart_str [EOL] from django . utils import formats , datetime_safe [EOL] import time [EOL] import datetime [EOL] import jdatetime [EOL] [EOL] class jDateInput ( widgets . Input ) : [EOL] input_type = [string] [EOL] format = None [EOL] [EOL] def __init__ ( self , attrs = None , format = None ) : [EOL] super ( jDateInput , self ) . __init__ ( attrs ) [EOL] if format : [EOL] self . format = format [EOL] [EOL] def _format_value ( self , value ) : [EOL] if value is None : [EOL] return [string] [EOL] elif hasattr ( value , [string] ) : [EOL] f = smart_str ( self . format or formats . get_format ( [string] ) [ [number] ] ) [EOL] return value . strftime ( f ) [EOL] [EOL] return value [EOL] [EOL] def render ( self , name , value , attrs = None , renderer = None ) : [EOL] value = self . _format_value ( value ) [EOL] return super ( jDateInput , self ) . render ( name , value , attrs ) [EOL] [EOL] def _has_changed ( self , initial , data ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] try : [EOL] input_format = formats . get_format ( [string] ) [ [number] ] [EOL] initial = jdatetime . date ( * time . strptime ( initial , input_format ) [ : [number] ] ) [EOL] except ( TypeError , ValueError ) : [EOL] pass [EOL] return super ( jDateInput , self ) . _has_changed ( self . _format_value ( initial ) , data ) [EOL] [EOL] class jDateTimeInput ( widgets . Input ) : [EOL] input_type = [string] [EOL] format = [string] [comment] [EOL] [EOL] def __init__ ( self , attrs = None , format = None ) : [EOL] super ( jDateTimeInput , self ) . __init__ ( attrs ) [EOL] if format : [EOL] self . format = format [EOL] self . manual_format = True [EOL] else : [EOL] self . format = formats . get_format ( [string] ) [ [number] ] [EOL] self . manual_format = False [EOL] [EOL] def _format_value ( self , value ) : [EOL] if self . is_localized and not self . manual_format : [EOL] return formats . localize_input ( value ) [EOL] elif hasattr ( value , [string] ) : [EOL] value = datetime_safe . new_datetime ( value ) [EOL] return value . strftime ( self . format ) [EOL] return value [EOL] [EOL] def _has_changed ( self , initial , data ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] try : [EOL] input_format = formats . get_format ( [string] ) [ [number] ] [EOL] initial = datetime . datetime ( * time . strptime ( initial , input_format ) [ : [number] ] ) [EOL] except ( TypeError , ValueError ) : [EOL] pass [EOL] return super ( jDateTimeInput , self ) . _has_changed ( self . _format_value ( initial ) , data ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $jdatetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $jdatetime.date$ 0 0 0 0 0 0 0 0 0 0 $jdatetime.date$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jdatetime.date$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] from django . contrib . admin . filterspecs import FilterSpec [EOL] from django . utils . translation import ugettext as _ [EOL] import jdatetime [EOL] from django_jalali . db . models import jDateField [EOL] class jDateFieldFilterSpec ( FilterSpec ) : [EOL] def __init__ ( self , f , request , params , model , model_admin , field_path = None ) : [EOL] super ( jDateFieldFilterSpec , self ) . __init__ ( f , request , params , model , model_admin , field_path = field_path ) [EOL] self . field_generic = [string] % self . field_path [EOL] [EOL] self . date_params = dict ( [ ( k , v ) for k , v in params . items ( ) if k . startswith ( self . field_generic ) ] ) [EOL] [EOL] today = jdatetime . date . today ( ) [EOL] one_week_ago = today - jdatetime . timedelta ( days = [number] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] today_str = today . strftime ( [string] ) [EOL] [EOL] last_day_this_month = [number] [EOL] if today . month == [number] and today . isleap ( ) : [EOL] last_day_this_month = [number] [EOL] else : [EOL] last_day_this_month = jdatetime . j_days_in_month [ today . month - [number] ] [EOL] [EOL] last_day_this_year = [number] [EOL] if today . isleap ( ) : [EOL] last_day_this_year = [number] [EOL] [EOL] self . links = ( ( _ ( [string] ) , { } ) , ( _ ( [string] ) , { [string] % self . field_path : today . strftime ( [string] ) } ) , ( _ ( [string] ) , { [string] % self . field_path : one_week_ago . strftime ( [string] ) , [string] % self . field_path : today_str } ) , ( _ ( [string] ) , { [string] % self . field_path : today . replace ( day = [number] ) . strftime ( [string] ) , [string] % self . field_path : today . replace ( day = last_day_this_month ) . strftime ( [string] ) } ) , ( _ ( [string] ) , { [string] % self . field_path : today . replace ( day = [number] , month = [number] ) . strftime ( [string] ) , [string] % self . field_path : today . replace ( day = last_day_this_year , month = [number] ) . strftime ( [string] ) } ) ) [EOL] [EOL] def title ( self ) : [EOL] return self . field . verbose_name [EOL] [EOL] def choices ( self , cl ) : [EOL] for title , param_dict in self . links : [EOL] yield { [string] : self . date_params == param_dict , [string] : cl . get_query_string ( param_dict , [ self . field_generic ] ) , [string] : title } [EOL] [EOL] [EOL] [EOL] [EOL] register_jdate = True [EOL] register_jdatetime = False [EOL] for f in FilterSpec . filter_specs : [EOL] if f [ [number] ] == type ( jDateFieldFilterSpec ) : [EOL] register_jdate = False [EOL] [EOL] [EOL] if register_jdate == True : [EOL] FilterSpec . filter_specs . insert ( [number] , ( lambda f : isinstance ( f , jDateField ) , jDateFieldFilterSpec ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . contrib import admin [EOL] from django . utils import timezone [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from django . contrib . admin . utils import prepare_lookup_value [EOL] from django . core . exceptions import ValidationError [EOL] from django . contrib . admin . options import IncorrectLookupParameters [EOL] [EOL] from django_jalali . db import models [EOL] [EOL] import jdatetime [EOL] [EOL] class JDateFieldListFilter ( admin . FieldListFilter ) : [EOL] [EOL] def __init__ ( self , field , request , params , model , model_admin , field_path ) : [EOL] self . field_generic = [string] % field_path [EOL] self . date_params = { k : v for k , v in params . items ( ) if k . startswith ( self . field_generic ) } [EOL] [EOL] now = jdatetime . datetime . fromgregorian ( datetime = timezone . now ( ) ) [EOL] if timezone . is_aware ( now ) : [EOL] now = timezone . localtime ( now ) [EOL] [EOL] if isinstance ( field , models . jDateTimeField ) : [EOL] today = now . replace ( hour = [number] , minute = [number] , second = [number] , microsecond = [number] ) [EOL] else : [EOL] today = now . date ( ) [EOL] [EOL] tomorrow = today + jdatetime . timedelta ( days = [number] ) [EOL] [EOL] if today . month == [number] : [EOL] next_month = today . replace ( year = today . year + [number] , month = [number] , day = [number] ) [EOL] else : [EOL] next_month = today . replace ( month = today . month + [number] , day = [number] ) [EOL] next_year = today . replace ( year = today . year + [number] , month = [number] , day = [number] ) [EOL] [EOL] self . lookup_kwarg_since = [string] % field_path [EOL] self . lookup_kwarg_until = [string] % field_path [EOL] self . links = ( ( _ ( [string] ) , { } ) , ( _ ( [string] ) , { self . lookup_kwarg_since : today . strftime ( [string] ) , self . lookup_kwarg_until : tomorrow . strftime ( [string] ) , } ) , ( _ ( [string] ) , { self . lookup_kwarg_since : ( today - jdatetime . timedelta ( days = [number] ) ) . strftime ( [string] ) , self . lookup_kwarg_until : tomorrow . strftime ( [string] ) , } ) , ( _ ( [string] ) , { self . lookup_kwarg_since : ( today . replace ( day = [number] ) ) . strftime ( [string] ) , self . lookup_kwarg_until : next_month . strftime ( [string] ) , } ) , ( _ ( [string] ) , { self . lookup_kwarg_since : ( today . replace ( month = [number] , day = [number] ) ) . strftime ( [string] ) , self . lookup_kwarg_until : next_year . strftime ( [string] ) , } ) , ) [EOL] [EOL] super ( JDateFieldListFilter , self ) . __init__ ( field , request , params , model , model_admin , field_path ) [EOL] [EOL] def queryset ( self , request , queryset ) : [EOL] try : [EOL] return queryset . filter ( ** self . used_parameters ) [EOL] except ValidationError as e : [EOL] raise IncorrectLookupParameters ( e ) [EOL] [EOL] def expected_parameters ( self ) : [EOL] return [ self . lookup_kwarg_since , self . lookup_kwarg_until ] [EOL] [EOL] def choices ( self , cl ) : [EOL] for title , param_dict in self . links : [EOL] yield { [string] : self . date_params == param_dict , [string] : cl . get_query_string ( param_dict , [ self . field_generic ] ) , [string] : title , } [EOL] [EOL] def has_output ( self ) : [EOL] return True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Dict [EOL] import typing [EOL] from django_jalali import forms as jforms [EOL] from django . utils . translation import ugettext as _ [EOL] from django import forms [EOL] from django . contrib . admin . widgets import AdminTimeWidget [EOL] from django . contrib . admin . templatetags . admin_static import static [EOL] from django . utils . safestring import mark_safe [EOL] [EOL] class AdminjDateWidget ( jforms . jDateInput ) : [EOL] @ property def media ( self ) : [EOL] js = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] css = { [string] : [ [string] , [string] ] } [EOL] [EOL] return forms . Media ( js = [ static ( [string] % path ) for path in js ] , css = css ) [EOL] [EOL] def __init__ ( self , attrs = None , format = None ) : [EOL] final_attrs = { [string] : [string] , [string] : [string] } [EOL] if attrs is not None : [EOL] final_attrs . update ( attrs ) [EOL] super ( AdminjDateWidget , self ) . __init__ ( attrs = final_attrs , format = format ) [EOL] [EOL] [EOL] [EOL] class AdminSplitjDateTime ( forms . SplitDateTimeWidget ) : [EOL] [docstring] [EOL] def __init__ ( self , attrs = None ) : [EOL] widgets = [ AdminjDateWidget , AdminTimeWidget ] [EOL] [comment] [EOL] [comment] [EOL] forms . MultiWidget . __init__ ( self , widgets , attrs ) [EOL] [EOL] def format_output ( self , rendered_widgets ) : [EOL] return mark_safe ( [string] % ( _ ( [string] ) , rendered_widgets [ [number] ] , _ ( [string] ) , rendered_widgets [ [number] ] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django_jalali . db . models import jDateField , jDateTimeField [EOL] from django . contrib . admin import options [EOL] from django_jalali . admin import widgets [EOL] from django import forms [EOL] [EOL] from . filters import JDateFieldListFilter [EOL] [EOL] options . FORMFIELD_FOR_DBFIELD_DEFAULTS [ jDateField ] = { [string] : widgets . AdminjDateWidget } [EOL] options . FORMFIELD_FOR_DBFIELD_DEFAULTS [ jDateTimeField ] = { [string] : forms . SplitDateTimeField , [string] : widgets . AdminSplitjDateTime } [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from distutils . version import StrictVersion [EOL] import django [EOL] import sys [EOL] from datetime import datetime , date [EOL] import jdatetime [EOL] [EOL] django_version = django . get_version ( ) [EOL] if StrictVersion ( django_version ) >= StrictVersion ( [string] ) : [EOL] from django . template import Library [EOL] else : [EOL] from django . template . base import Library [EOL] [EOL] register = Library ( ) [EOL] [EOL] [EOL] @ register . filter ( expects_localtime = True , is_safe = False ) def jformat ( value , arg = None ) : [EOL] [docstring] [EOL] if value in ( None , [string] ) : [EOL] return [string] [EOL] if arg is None : [EOL] arg = [string] [EOL] try : [EOL] if isinstance ( value , datetime ) : [EOL] value = jdatetime . datetime . fromgregorian ( datetime = value ) [EOL] elif isinstance ( value , date ) : [EOL] value = jdatetime . date . fromgregorian ( date = value ) [EOL] return value . strftime ( arg ) [EOL] except AttributeError : [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import os [EOL] import sys [EOL] [EOL] if __name__ == [string] : [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] from django . core . management import execute_from_command_line [EOL] [EOL] execute_from_command_line ( sys . argv ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Match , Union , Any , Literal , List , Optional [EOL] import typing [EOL] import typing_extensions [EOL] import re [EOL] import datetime [EOL] [EOL] [EOL] class Gregorian : [EOL] [EOL] def __init__ ( self , * date ) : [EOL] [comment] [EOL] if len ( date ) == [number] : [EOL] date = date [ [number] ] [EOL] if type ( date ) is str : [EOL] m = re . match ( [string] , date ) [EOL] if m : [EOL] [ year , month , day ] = [ int ( m . group ( [number] ) ) , int ( m . group ( [number] ) ) , int ( m . group ( [number] ) ) ] [EOL] else : [EOL] raise Exception ( [string] ) [EOL] elif type ( date ) is datetime . date : [EOL] [ year , month , day ] = [ date . year , date . month , date . day ] [EOL] elif type ( date ) is tuple : [EOL] year , month , day = date [EOL] year = int ( year ) [EOL] month = int ( month ) [EOL] day = int ( day ) [EOL] else : [EOL] raise Exception ( [string] ) [EOL] elif len ( date ) == [number] : [EOL] year = int ( date [ [number] ] ) [EOL] month = int ( date [ [number] ] ) [EOL] day = int ( date [ [number] ] ) [EOL] else : [EOL] raise Exception ( [string] ) [EOL] [EOL] [comment] [EOL] try : [EOL] datetime . datetime ( year , month , day ) [EOL] except : [EOL] raise Exception ( [string] ) [EOL] [EOL] self . gregorian_year = year [EOL] self . gregorian_month = month [EOL] self . gregorian_day = day [EOL] [EOL] [comment] [EOL] d_4 = year % [number] [EOL] g_a = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] doy_g = g_a [ month ] + day [EOL] if d_4 == [number] and month > [number] : [EOL] doy_g += [number] [EOL] d_33 = int ( ( ( year - [number] ) % [number] ) * [number] ) [EOL] a = [number] if ( d_33 == [number] or d_33 < ( d_4 - [number] ) or d_4 == [number] ) else [number] [EOL] if ( d_33 == [number] or d_33 == [number] ) and ( d_33 == d_4 or d_4 == [number] ) : [EOL] b = [number] [EOL] else : [EOL] b = [number] if ( d_33 == [number] and d_4 == [number] ) else [number] [EOL] if int ( ( year - [number] ) / [number] ) == [number] : [EOL] a -= [number] [EOL] b += [number] [EOL] if doy_g > b : [EOL] jy = year - [number] [EOL] doy_j = doy_g - b [EOL] else : [EOL] jy = year - [number] [EOL] doy_j = doy_g + a [EOL] if doy_j < [number] : [EOL] jm = int ( ( doy_j - [number] ) / [number] ) [EOL] jd = doy_j - ( [number] * jm ) [EOL] jm += [number] [EOL] else : [EOL] jm = int ( ( doy_j - [number] ) / [number] ) [EOL] jd = doy_j - [number] - ( jm * [number] ) [EOL] jm += [number] [EOL] self . persian_year = jy [EOL] self . persian_month = jm [EOL] self . persian_day = jd [EOL] [EOL] def persian_tuple ( self ) : [EOL] return self . persian_year , self . persian_month , self . persian_day [EOL] [EOL] def persian_string ( self , date_format = [string] ) : [EOL] return date_format . format ( self . persian_year , self . persian_month , self . persian_day ) [EOL] [EOL] [EOL] class Persian : [EOL] [EOL] def __init__ ( self , * date ) : [EOL] [comment] [EOL] if len ( date ) == [number] : [EOL] date = date [ [number] ] [EOL] if type ( date ) is str : [EOL] m = re . match ( [string] , date ) [EOL] if m : [EOL] [ year , month , day ] = [ int ( m . group ( [number] ) ) , int ( m . group ( [number] ) ) , int ( m . group ( [number] ) ) ] [EOL] else : [EOL] raise Exception ( [string] ) [EOL] elif type ( date ) is tuple : [EOL] year , month , day = date [EOL] year = int ( year ) [EOL] month = int ( month ) [EOL] day = int ( day ) [EOL] else : [EOL] raise Exception ( [string] ) [EOL] elif len ( date ) == [number] : [EOL] year = int ( date [ [number] ] ) [EOL] month = int ( date [ [number] ] ) [EOL] day = int ( date [ [number] ] ) [EOL] else : [EOL] raise Exception ( [string] ) [EOL] [EOL] [comment] [EOL] if year < [number] or month < [number] or month > [number] or day < [number] or day > [number] or ( month > [number] and day == [number] ) : [EOL] raise Exception ( [string] ) [EOL] [EOL] self . persian_year = year [EOL] self . persian_month = month [EOL] self . persian_day = day [EOL] [EOL] [comment] [EOL] d_4 = ( year + [number] ) % [number] [EOL] if month < [number] : [EOL] doy_j = ( ( month - [number] ) * [number] ) + day [EOL] else : [EOL] doy_j = ( ( month - [number] ) * [number] ) + day + [number] [EOL] d_33 = int ( ( ( year - [number] ) % [number] ) * [number] ) [EOL] a = [number] if ( d_33 != [number] and d_4 <= d_33 ) else [number] [EOL] if ( d_33 == [number] or d_33 == [number] ) and ( d_33 == d_4 or d_4 == [number] ) : [EOL] b = [number] [EOL] else : [EOL] b = [number] if ( d_33 == [number] and d_4 == [number] ) else [number] [EOL] if int ( ( year - [number] ) / [number] ) == [number] : [EOL] a -= [number] [EOL] b += [number] [EOL] if doy_j <= a : [EOL] gy = year + [number] [EOL] gd = doy_j + b [EOL] else : [EOL] gy = year + [number] [EOL] gd = doy_j - a [EOL] for gm , v in enumerate ( [ [number] , [number] , [number] if ( gy % [number] == [number] ) else [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] ) : [EOL] if gd <= v : [EOL] break [EOL] gd -= v [EOL] [EOL] self . gregorian_year = gy [EOL] self . gregorian_month = gm [EOL] self . gregorian_day = gd [EOL] [EOL] def gregorian_tuple ( self ) : [EOL] return self . gregorian_year , self . gregorian_month , self . gregorian_day [EOL] [EOL] def gregorian_string ( self , date_format = [string] ) : [EOL] return date_format . format ( self . gregorian_year , self . gregorian_month , self . gregorian_day ) [EOL] [EOL] def gregorian_datetime ( self ) : [EOL] return datetime . date ( self . gregorian_year , self . gregorian_month , self . gregorian_day )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $typing.Any$ 0 $builtins.int$ 0 $typing.Any$ 0 $builtins.int$ 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $typing.Any$ 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.List[builtins.int]$ 0 $builtins.int$ 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 $builtins.int$ 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $typing.Any$ 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 $builtins.int$ 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $typing.Union[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] from django . http . response import HttpResponse [EOL] from django . shortcuts import render [EOL] from celery_sandbox . tasks import refresh_sms_token [EOL] [EOL] [EOL] def my_request ( request ) : [EOL] [EOL] return render ( request , [string] ) [EOL] [EOL] [EOL] def my_response ( request ) : [EOL] [EOL] try : [EOL] [comment] [EOL] ee = refresh_sms_token ( ) [EOL] return render ( request , [string] ) [EOL] except Exception as e : [EOL] return HttpResponse ( status = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] import requests [EOL] import logging [EOL] import traceback [EOL] [EOL] from civil . celery import app [EOL] from django . conf import settings [EOL] from constance import config [EOL] from json import loads , dumps [EOL] from requests import post [EOL] from jdatetime import datetime [EOL] import logging [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] @ app . task def refresh_sms_token ( ) : [EOL] [EOL] token_headers = { [string] : [string] } [EOL] token_data = { [string] : settings . SMS_IR [ [string] ] , [string] : settings . SMS_IR [ [string] ] } [EOL] try : [EOL] r = post ( settings . SMS_IR [ [string] ] , dumps ( token_data ) , headers = token_headers ) [EOL] response = loads ( r . text ) [EOL] if response [ [string] ] is True : [EOL] config . ACTIVE_TOKEN_KEY = response [ [string] ] [EOL] config . LAST_UPDATE = datetime . now ( ) [EOL] return [string] . format ( response [ [string] ] ) [EOL] else : [EOL] print ( [string] . format ( response [ [string] ] ) ) [EOL] return False [EOL] except Exception as e : [EOL] trace_back = traceback . format_exc ( ) [EOL] message = str ( e ) + [string] + str ( trace_back ) [EOL] logger . debug ( [string] % message ) [EOL] print ( [string] . format ( e ) ) [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . conf . urls import url [EOL] from celery_sandbox . views import my_request , my_response [EOL] [EOL] urlpatterns = [ url ( [string] , my_request , name = [string] ) , url ( [string] , my_response , name = [string] ) , ]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class CelerySandboxConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import List [EOL] import typing [EOL] g_days_in_month = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] j_days_in_month = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] [EOL] [EOL] class GregorianToJalali : [EOL] [EOL] def __init__ ( self , gyear , gmonth , gday ) : [EOL] [docstring] [EOL] self . gyear = gyear [EOL] self . gmonth = gmonth [EOL] self . gday = gday [EOL] self . __gregorianToJalali ( ) [EOL] [EOL] def getJalaliList ( self ) : [EOL] return ( self . jyear , self . jmonth , self . jday ) [EOL] [EOL] def __gregorianToJalali ( self ) : [EOL] [docstring] [EOL] global g_days_in_month , j_days_in_month [EOL] [EOL] gy = self . gyear - [number] [EOL] gm = self . gmonth - [number] [EOL] gd = self . gday - [number] [EOL] [EOL] g_day_no = [number] * gy + ( gy + [number] ) // [number] - ( gy + [number] ) // [number] + ( gy + [number] ) // [number] [EOL] [EOL] for i in range ( gm ) : [EOL] g_day_no += g_days_in_month [ i ] [EOL] if gm > [number] and ( ( gy % [number] == [number] and gy % [number] != [number] ) or ( gy % [number] == [number] ) ) : [EOL] [comment] [EOL] g_day_no += [number] [EOL] g_day_no += gd [EOL] [EOL] j_day_no = g_day_no - [number] [EOL] [EOL] j_np = j_day_no // [number] [EOL] j_day_no %= [number] [EOL] jy = [number] + [number] * j_np + [number] * int ( j_day_no // [number] ) [EOL] [EOL] j_day_no %= [number] [EOL] [EOL] if j_day_no >= [number] : [EOL] jy += ( j_day_no - [number] ) // [number] [EOL] j_day_no = ( j_day_no - [number] ) % [number] [EOL] [EOL] for i in range ( [number] ) : [EOL] if not j_day_no >= j_days_in_month [ i ] : [EOL] i -= [number] [EOL] break [EOL] j_day_no -= j_days_in_month [ i ] [EOL] [EOL] jm = i + [number] [EOL] jd = j_day_no + [number] [EOL] [EOL] [EOL] self . jyear = jy [EOL] self . jmonth = jm [EOL] self . jday = jd [EOL] [EOL] [EOL] [EOL] class JalaliToGregorian : [EOL] def __init__ ( self , jyear , jmonth , jday ) : [EOL] [docstring] [EOL] self . jyear = jyear [EOL] self . jmonth = jmonth [EOL] self . jday = jday [EOL] self . __jalaliToGregorian ( ) [EOL] [EOL] def getGregorianList ( self ) : [EOL] return ( self . gyear , self . gmonth , self . gday ) [EOL] [EOL] [EOL] def __jalaliToGregorian ( self ) : [EOL] global g_days_in_month , j_days_in_month [EOL] jy = self . jyear - [number] [EOL] jm = self . jmonth - [number] [EOL] jd = self . jday - [number] [EOL] [EOL] [EOL] j_day_no = [number] * jy + int ( jy // [number] ) * [number] + ( jy % [number] + [number] ) // [number] [EOL] for i in range ( jm ) : [EOL] j_day_no += j_days_in_month [ i ] [EOL] [EOL] j_day_no += jd [EOL] [EOL] g_day_no = j_day_no + [number] [EOL] [EOL] gy = [number] + [number] * int ( g_day_no // [number] ) [comment] [EOL] g_day_no = g_day_no % [number] [EOL] [EOL] leap = [number] [EOL] if g_day_no >= [number] : [comment] [EOL] g_day_no -= [number] [EOL] gy += [number] * int ( g_day_no // [number] ) [comment] [EOL] g_day_no = g_day_no % [number] [EOL] [EOL] if g_day_no >= [number] : [EOL] g_day_no += [number] [EOL] else : [EOL] leap = [number] [EOL] [EOL] [EOL] gy += [number] * int ( g_day_no // [number] ) [comment] [EOL] g_day_no %= [number] [EOL] [EOL] if g_day_no >= [number] : [EOL] leap = [number] [EOL] g_day_no -= [number] [EOL] gy += g_day_no // [number] [EOL] g_day_no = g_day_no % [number] [EOL] [EOL] i = [number] [EOL] while g_day_no >= g_days_in_month [ i ] + ( i == [number] and leap ) : [EOL] g_day_no -= g_days_in_month [ i ] + ( i == [number] and leap ) [EOL] i += [number] [EOL] self . gmonth = i + [number] [EOL] self . gday = g_day_no + [number] [EOL] self . gyear = gy [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 $typing.List[builtins.int]$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 $typing.List[builtins.int]$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.List[builtins.int]$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 $typing.List[builtins.int]$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 $typing.List[builtins.int]$ 0 $builtins.int$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 $typing.List[builtins.int]$ 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 $typing.List[builtins.int]$ 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class MeetingConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from django . views . generic . base import TemplateView [EOL] [EOL] [EOL] [EOL] [EOL] class HomePageView ( TemplateView ) : [EOL] [EOL] template_name = [string]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
	0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Dict , Any [EOL] import typing [EOL] import requests [EOL] import os [EOL] [EOL] import jdatetime [EOL] from django . utils . text import slugify [EOL] from json import loads , dumps [EOL] from requests import post [EOL] from django . conf import settings [EOL] from constance import config [EOL] [EOL] [EOL] def send_ultrafast_sms ( ** kwargs ) : [EOL] data = { } [EOL] params = [ ] [EOL] for key , value in kwargs . items ( ) : [EOL] if key == [string] : [EOL] data [ [string] ] = kwargs [ [string] ] [EOL] elif key == [string] : [EOL] data [ [string] ] = kwargs [ [string] ] [EOL] else : [EOL] params . append ( { [string] : key , [string] : value } ) [EOL] if params : [EOL] data [ [string] ] = params [EOL] print ( data ) [EOL] [EOL] headers = { [string] : [string] , [string] : config . ACTIVE_TOKEN_KEY } [EOL] try : [EOL] r = post ( settings . SMS_IR [ [string] ] , dumps ( data ) , headers = headers ) [EOL] [EOL] [EOL] response = loads ( r . text ) [EOL] if response [ [string] ] is True : [EOL] print ( [string] . format ( response [ [string] ] ) ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] return True [EOL] elif response [ [string] ] == [string] : [EOL] print ( [string] . format ( response [ [string] ] ) ) [EOL] else : [EOL] print ( response ) [EOL] except Exception as e : [EOL] print ( e ) [EOL] return False [EOL] [EOL] [EOL] def get_image_path ( instance , filename ) : [EOL] title = instance . id [EOL] slug = slugify ( title ) [EOL] basename , file_extension = filename . split ( [string] ) [EOL] date = jdatetime . datetime . now ( ) . date ( ) [EOL] new_filename = [string] % ( slug , file_extension ) [EOL] [comment] [EOL] return [string] % new_filename [EOL] [comment] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations , models [EOL] import meeting . utils [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterField ( model_name = [string] , name = [string] , field = models . ImageField ( blank = True , null = True , upload_to = meeting . utils . get_image_path ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] __title__ = [string] [EOL] __version__ = [string] [EOL] __author__ = [string] [EOL] __license__ = [string] [EOL] __copyright__ = [string] [EOL] [EOL] [comment] [EOL] VERSION = __version__ [EOL] [EOL] default_app_config = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0
from typing import Any , Type [EOL] import typing [EOL] import logging [EOL] import drfpasswordless [EOL] import logging [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from django . contrib . auth import get_user_model [EOL] from django . core . exceptions import PermissionDenied [EOL] from django . core . validators import RegexValidator [EOL] from rest_framework import serializers [EOL] from drfpasswordless . models import CallbackToken [EOL] from drfpasswordless . settings import api_settings [EOL] from drfpasswordless . utils import authenticate_by_token , verify_user_alias , validate_token_age [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] User = get_user_model ( ) [EOL] [EOL] [EOL] class TokenField ( serializers . CharField ) : [EOL] default_error_messages = { [string] : _ ( [string] ) , [string] : _ ( [string] ) , [string] : _ ( [string] ) , [string] : _ ( [string] ) , [string] : _ ( [string] ) } [EOL] [EOL] [EOL] class AbstractBaseAliasAuthenticationSerializer ( serializers . Serializer ) : [EOL] [docstring] [EOL] [EOL] @ property def alias_type ( self ) : [EOL] [comment] [EOL] raise NotImplementedError [EOL] [EOL] def validate ( self , attrs ) : [EOL] alias = attrs . get ( self . alias_type ) [EOL] [EOL] if alias : [EOL] [comment] [EOL] [comment] [EOL] if api_settings . PASSWORDLESS_REGISTER_NEW_USERS is True : [EOL] [comment] [EOL] user , created = User . objects . get_or_create ( ** { [string] : alias , self . alias_type : alias } ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] else : [EOL] [comment] [EOL] try : [EOL] user = User . objects . get ( ** { self . alias_type : alias } ) [EOL] except User . DoesNotExist : [EOL] user = None [EOL] [EOL] if user : [EOL] if not user . is_active : [EOL] [comment] [EOL] msg = _ ( [string] ) [EOL] raise serializers . ValidationError ( msg ) [EOL] else : [EOL] msg = _ ( [string] ) [EOL] raise serializers . ValidationError ( msg ) [EOL] else : [EOL] msg = _ ( [string] ) % self . alias_type [EOL] raise serializers . ValidationError ( msg ) [EOL] [EOL] attrs [ [string] ] = user [EOL] return attrs [EOL] [EOL] [EOL] class EmailAuthSerializer ( AbstractBaseAliasAuthenticationSerializer ) : [EOL] @ property def alias_type ( self ) : [EOL] return [string] [EOL] [EOL] email = serializers . EmailField ( ) [EOL] [EOL] [EOL] class MobileAuthSerializer ( AbstractBaseAliasAuthenticationSerializer ) : [EOL] @ property def alias_type ( self ) : [EOL] return [string] [EOL] [EOL] phone_regex = RegexValidator ( regex = [string] , message = [string] [string] ) [EOL] mobile = serializers . CharField ( validators = [ phone_regex ] , max_length = [number] ) [EOL] [EOL] [EOL] [docstring] [EOL] [EOL] [EOL] class AbstractBaseAliasVerificationSerializer ( serializers . Serializer ) : [EOL] [docstring] [EOL] @ property def alias_type ( self ) : [EOL] [comment] [EOL] raise NotImplementedError [EOL] [EOL] def validate ( self , attrs ) : [EOL] [EOL] msg = _ ( [string] ) [EOL] [EOL] if self . alias_type : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] request = self . context [ [string] ] [EOL] if request and hasattr ( request , [string] ) : [EOL] user = request . user [EOL] if user : [EOL] if not user . is_active : [EOL] [comment] [EOL] msg = _ ( [string] ) [EOL] [EOL] else : [EOL] if hasattr ( user , self . alias_type ) : [EOL] [comment] [EOL] attrs [ [string] ] = user [EOL] return attrs [EOL] else : [EOL] msg = _ ( [string] % self . alias_type ) [EOL] raise serializers . ValidationError ( msg ) [EOL] else : [EOL] msg = _ ( [string] ) % self . alias_type [EOL] raise serializers . ValidationError ( msg ) [EOL] [EOL] [EOL] class EmailVerificationSerializer ( AbstractBaseAliasVerificationSerializer ) : [EOL] @ property def alias_type ( self ) : [EOL] return [string] [EOL] [EOL] [EOL] class MobileVerificationSerializer ( AbstractBaseAliasVerificationSerializer ) : [EOL] @ property def alias_type ( self ) : [EOL] return [string] [EOL] [EOL] [EOL] [docstring] [EOL] [EOL] [EOL] def token_age_validator ( value ) : [EOL] [docstring] [EOL] valid_token = validate_token_age ( value ) [EOL] if not valid_token : [EOL] raise serializers . ValidationError ( [string] ) [EOL] return value [EOL] [EOL] [EOL] class AbstractBaseCallbackTokenSerializer ( serializers . Serializer ) : [EOL] [docstring] [EOL] token = TokenField ( min_length = [number] , max_length = [number] , validators = [ token_age_validator ] ) [EOL] [EOL] [EOL] class CallbackTokenAuthSerializer ( AbstractBaseCallbackTokenSerializer ) : [EOL] [EOL] def validate ( self , attrs ) : [EOL] callback_token = attrs . get ( [string] , None ) [EOL] [EOL] token = CallbackToken . objects . get ( key = callback_token , is_active = True ) [EOL] [EOL] if token : [EOL] [comment] [EOL] [comment] [EOL] user = authenticate_by_token ( token ) [EOL] if user : [EOL] if not user . is_active : [EOL] msg = _ ( [string] ) [EOL] raise serializers . ValidationError ( msg ) [EOL] [EOL] if api_settings . PASSWORDLESS_USER_MARK_EMAIL_VERIFIED or api_settings . PASSWORDLESS_USER_MARK_MOBILE_VERIFIED : [EOL] [comment] [EOL] user = User . objects . get ( pk = token . user . pk ) [EOL] success = verify_user_alias ( user , token ) [EOL] [EOL] if success is False : [EOL] msg = _ ( [string] ) [EOL] raise serializers . ValidationError ( msg ) [EOL] [EOL] attrs [ [string] ] = user [EOL] return attrs [EOL] [EOL] else : [EOL] msg = _ ( [string] ) [EOL] raise serializers . ValidationError ( msg ) [EOL] else : [EOL] msg = _ ( [string] ) [EOL] raise serializers . ValidationError ( msg ) [EOL] [EOL] [EOL] class CallbackTokenVerificationSerializer ( AbstractBaseCallbackTokenSerializer ) : [EOL] [docstring] [EOL] [EOL] def validate ( self , attrs ) : [EOL] try : [EOL] user_id = self . context . get ( [string] ) [EOL] callback_token = attrs . get ( [string] , None ) [EOL] [EOL] token = CallbackToken . objects . get ( key = callback_token , is_active = True ) [EOL] user = User . objects . get ( pk = user_id ) [EOL] [EOL] if token . user == user : [EOL] [comment] [EOL] [EOL] [comment] [EOL] success = verify_user_alias ( user , token ) [EOL] if success is False : [EOL] logger . debug ( [string] ) [EOL] [EOL] attrs [ [string] ] = user [EOL] return attrs [EOL] else : [EOL] msg = _ ( [string] ) [EOL] logger . debug ( [string] ) [EOL] [EOL] except CallbackToken . DoesNotExist : [EOL] msg = _ ( [string] ) [EOL] logger . debug ( [string] ) [EOL] pass [EOL] except User . DoesNotExist : [EOL] msg = _ ( [string] ) [EOL] logger . debug ( [string] ) [EOL] pass [EOL] except PermissionDenied : [EOL] msg = _ ( [string] ) [EOL] logger . debug ( [string] ) [EOL] pass [EOL] [EOL] raise serializers . ValidationError ( msg ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $None$ 0 0 0 0 $None$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[drfpasswordless.serializers.EmailAuthSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[drfpasswordless.serializers.MobileAuthSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[drfpasswordless.serializers.MobileAuthSerializer]$ 0 0 0 0 0 0 0 0 $typing.Type[drfpasswordless.serializers.MobileAuthSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $drfpasswordless.serializers.TokenField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0
from typing import Dict , Tuple , Union , Any , List [EOL] import typing [EOL] from django . conf import settings [EOL] from rest_framework . settings import APISettings [EOL] [EOL] USER_SETTINGS = getattr ( settings , [string] , None ) [EOL] [EOL] DEFAULTS = { [string] : [ [string] ] , [string] : [number] * [number] , [string] : [string] , [string] : [string] , [string] : False , [string] : [string] , [string] : False , [string] : [string] , [string] : None , [string] : [string] , [string] : [string] , [string] : [string] , [string] : None , [string] : [string] , [string] : True , [string] : False , [string] : [ ] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False , } [EOL] [EOL] [comment] [EOL] IMPORT_STRINGS = ( [string] , [string] , ) [EOL] [EOL] api_settings = APISettings ( USER_SETTINGS , DEFAULTS , IMPORT_STRINGS ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[None,typing.List[typing.Any],typing.List[builtins.str],builtins.bool,builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Union[None,typing.List[typing.Any],typing.List[builtins.str],builtins.bool,builtins.int,builtins.str]]$ 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0
VERSION = ( [number] , [number] , [number] ) [EOL] [EOL] __version__ = [string] . join ( map ( str , VERSION ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Type , List [EOL] import typing [EOL] import drfpasswordless [EOL] import uuid [EOL] from random import randint [EOL] from django . db import models [EOL] from django . conf import settings [EOL] [EOL] [EOL] def generate_hex_token ( ) : [EOL] return uuid . uuid1 ( ) . hex [EOL] [EOL] [EOL] def generate_numeric_token ( ) : [EOL] [docstring] [EOL] return str ( [string] % randint ( [number] , [number] ) ) [EOL] [EOL] [EOL] class CallbackTokenManger ( models . Manager ) : [EOL] def active ( self ) : [EOL] return self . get_queryset ( ) . filter ( is_active = True ) [EOL] [EOL] def inactive ( self ) : [EOL] return self . get_queryset ( ) . filter ( is_active = False ) [EOL] [EOL] [EOL] class AbstractBaseCallbackToken ( models . Model ) : [EOL] [docstring] [EOL] id = models . UUIDField ( primary_key = True , default = uuid . uuid4 , editable = False , unique = True ) [EOL] created_at = models . DateTimeField ( auto_now_add = True ) [EOL] user = models . ForeignKey ( settings . AUTH_USER_MODEL , related_name = None , on_delete = models . CASCADE ) [EOL] is_active = models . BooleanField ( default = True ) [EOL] to_alias = models . CharField ( blank = True , max_length = [number] ) [EOL] to_alias_type = models . CharField ( blank = True , max_length = [number] ) [EOL] [EOL] objects = CallbackTokenManger ( ) [EOL] [EOL] class Meta : [EOL] abstract = True [EOL] get_latest_by = [string] [EOL] ordering = [ [string] ] [EOL] unique_together = ( ( [string] , [string] ) , ) [EOL] [EOL] def __str__ ( self ) : [EOL] return str ( self . key ) [EOL] [EOL] [EOL] class CallbackToken ( AbstractBaseCallbackToken ) : [EOL] [docstring] [EOL] key = models . CharField ( default = generate_numeric_token , max_length = [number] , unique = True ) [EOL] [EOL] class Meta ( AbstractBaseCallbackToken . Meta ) : [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[drfpasswordless.models.AbstractBaseCallbackToken]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[drfpasswordless.models.AbstractBaseCallbackToken]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[drfpasswordless.models.AbstractBaseCallbackToken]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[drfpasswordless.models.AbstractBaseCallbackToken]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[drfpasswordless.models.AbstractBaseCallbackToken]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[drfpasswordless.models.AbstractBaseCallbackToken]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $drfpasswordless.models.CallbackTokenManger$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[drfpasswordless.models.CallbackToken]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import List , Dict , Any [EOL] import typing [EOL] import requests [EOL] import logging [EOL] import logging [EOL] import os [EOL] import traceback [EOL] from json import loads , dumps [EOL] from constance import config [EOL] from django . contrib . auth import get_user_model [EOL] from django . core . exceptions import PermissionDenied [EOL] from django . core . mail import send_mail [EOL] from django . template import loader [EOL] from django . utils import timezone [EOL] from requests import post [EOL] from celery_sandbox . tasks import refresh_sms_token [EOL] from civil import settings [EOL] from drfpasswordless . models import CallbackToken [EOL] from drfpasswordless . settings import api_settings [EOL] [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] User = get_user_model ( ) [EOL] [EOL] [EOL] def authenticate_by_token ( callback_token ) : [EOL] try : [EOL] token = CallbackToken . objects . get ( key = callback_token , is_active = True ) [EOL] [EOL] [comment] [EOL] token . user = User . objects . get ( pk = token . user . pk ) [EOL] token . is_active = False [comment] [EOL] token . save ( ) [EOL] [EOL] return token . user [EOL] [EOL] except CallbackToken . DoesNotExist : [EOL] logger . debug ( [string] ) [EOL] except User . DoesNotExist : [EOL] logger . debug ( [string] ) [EOL] except PermissionDenied : [EOL] logger . debug ( [string] ) [EOL] [EOL] return None [EOL] [EOL] [EOL] def create_callback_token_for_user ( user , token_type ) : [EOL] [EOL] token = None [EOL] token_type = token_type . upper ( ) [EOL] [EOL] if token_type == [string] : [EOL] token = CallbackToken . objects . create ( user = user , to_alias_type = token_type , to_alias = getattr ( user , api_settings . PASSWORDLESS_USER_EMAIL_FIELD_NAME ) ) [EOL] [EOL] elif token_type == [string] : [EOL] token = CallbackToken . objects . create ( user = user , to_alias_type = token_type , to_alias = getattr ( user , api_settings . PASSWORDLESS_USER_MOBILE_FIELD_NAME ) ) [EOL] [EOL] if token is not None : [EOL] return token [EOL] [EOL] return None [EOL] [EOL] [EOL] def validate_token_age ( callback_token ) : [EOL] [docstring] [EOL] try : [EOL] token = CallbackToken . objects . get ( key = callback_token , is_active = True ) [EOL] seconds = ( timezone . now ( ) - token . created_at ) . total_seconds ( ) [EOL] token_expiry_time = api_settings . PASSWORDLESS_TOKEN_EXPIRE_TIME [EOL] [EOL] if seconds <= token_expiry_time : [EOL] return True [EOL] else : [EOL] [comment] [EOL] token . is_active = False [EOL] token . save ( ) [EOL] return False [EOL] [EOL] except CallbackToken . DoesNotExist : [EOL] [comment] [EOL] return False [EOL] [EOL] [EOL] def verify_user_alias ( user , token ) : [EOL] [docstring] [EOL] if token . to_alias_type == [string] : [EOL] if token . to_alias == getattr ( user , api_settings . PASSWORDLESS_USER_EMAIL_FIELD_NAME ) : [EOL] setattr ( user , api_settings . PASSWORDLESS_USER_EMAIL_VERIFIED_FIELD_NAME , True ) [EOL] elif token . to_alias_type == [string] : [EOL] if token . to_alias == getattr ( user , api_settings . PASSWORDLESS_USER_MOBILE_FIELD_NAME ) : [EOL] setattr ( user , api_settings . PASSWORDLESS_USER_MOBILE_VERIFIED_FIELD_NAME , True ) [EOL] else : [EOL] return False [EOL] user . save ( ) [EOL] return True [EOL] [EOL] [EOL] def inject_template_context ( context ) : [EOL] [docstring] [EOL] for processor in api_settings . PASSWORDLESS_CONTEXT_PROCESSORS : [EOL] context . update ( processor ( ) ) [EOL] return context [EOL] [EOL] [EOL] def send_email_with_callback_token ( user , email_token , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] try : [EOL] if api_settings . PASSWORDLESS_EMAIL_NOREPLY_ADDRESS : [EOL] [comment] [EOL] [EOL] [comment] [EOL] email_subject = kwargs . get ( [string] , api_settings . PASSWORDLESS_EMAIL_SUBJECT ) [EOL] email_plaintext = kwargs . get ( [string] , api_settings . PASSWORDLESS_EMAIL_PLAINTEXT_MESSAGE ) [EOL] email_html = kwargs . get ( [string] , api_settings . PASSWORDLESS_EMAIL_TOKEN_HTML_TEMPLATE_NAME ) [EOL] [EOL] [comment] [EOL] context = inject_template_context ( { [string] : email_token . key , } ) [EOL] html_message = loader . render_to_string ( email_html , context , ) [EOL] send_mail ( email_subject , email_plaintext % email_token . key , api_settings . PASSWORDLESS_EMAIL_NOREPLY_ADDRESS , [ getattr ( user , api_settings . PASSWORDLESS_USER_EMAIL_FIELD_NAME ) ] , fail_silently = False , html_message = html_message , ) [EOL] [EOL] else : [EOL] logger . debug ( [string] ) [EOL] return False [EOL] return True [EOL] [EOL] except Exception as e : [EOL] logger . debug ( [string] [string] % ( user . id , getattr ( user , api_settings . PASSWORDLESS_USER_EMAIL_FIELD_NAME ) ) ) [EOL] logger . debug ( e ) [EOL] return False [EOL] [EOL] [EOL] def send_sms_with_callback_token ( user , mobile_token , ** kwargs ) : [EOL] [docstring] [EOL] base_string = kwargs . get ( [string] , api_settings . PASSWORDLESS_MOBILE_MESSAGE ) [EOL] [EOL] try : [EOL] [EOL] if api_settings . PASSWORDLESS_MOBILE_NOREPLY_NUMBER : [EOL] [comment] [EOL] if api_settings . PASSWORDLESS_TEST_SUPPRESSION is True : [EOL] [comment] [EOL] return True [EOL] [EOL] from twilio . rest import Client [EOL] twilio_client = Client ( os . environ [ [string] ] , os . environ [ [string] ] ) [EOL] twilio_client . messages . create ( body = base_string % mobile_token . key , to = getattr ( user , api_settings . PASSWORDLESS_USER_MOBILE_FIELD_NAME ) , from_ = api_settings . PASSWORDLESS_MOBILE_NOREPLY_NUMBER ) [EOL] return True [EOL] else : [EOL] logger . debug ( [string] ) [EOL] return False [EOL] except ImportError : [EOL] logger . debug ( [string] ) [EOL] return False [EOL] except KeyError : [EOL] logger . debug ( [string] [string] ) [EOL] except Exception as e : [EOL] logger . debug ( [string] [string] [string] . format ( user . id , getattr ( user , api_settings . PASSWORDLESS_USER_MOBILE_FIELD_NAME ) ) ) [EOL] logger . debug ( e ) [EOL] return False [EOL] [EOL] [EOL] [EOL] [EOL] def custom_send_sms_with_callback_token ( user , mobile_token , ** kwargs ) : [EOL] if kwargs . get ( [string] ) : [EOL] token_headers = { [string] : [string] } [EOL] token_data = { [string] : settings . SMS_IR [ [string] ] , [string] : settings . SMS_IR [ [string] ] } [EOL] try : [EOL] r = post ( settings . SMS_IR [ [string] ] , dumps ( token_data ) , headers = token_headers ) [EOL] response = loads ( r . text ) [EOL] if response [ [string] ] is True : [EOL] config . ACTIVE_TOKEN_KEY = response [ [string] ] [EOL] else : [EOL] print ( [string] . format ( response [ [string] ] ) ) [EOL] return False [EOL] except Exception as e : [EOL] print ( [string] . format ( e ) ) [EOL] return False [EOL] params = [ ] [EOL] data = { [string] : [number] , [string] : getattr ( user , api_settings . PASSWORDLESS_USER_MOBILE_FIELD_NAME ) } [EOL] params . append ( { [string] : [string] , [string] : mobile_token . key } ) [EOL] data [ [string] ] = params [EOL] headers = { [string] : [string] , [string] : config . ACTIVE_TOKEN_KEY } [EOL] print ( data ) [EOL] print ( headers ) [EOL] try : [EOL] if api_settings . PASSWORDLESS_TEST_SUPPRESSION is True : [EOL] return True [EOL] r = post ( settings . SMS_IR [ [string] ] , dumps ( data ) , headers = headers ) [EOL] response = loads ( r . text ) [EOL] [comment] [EOL] print ( response ) [EOL] if response [ [string] ] is True : [EOL] print ( [string] . format ( response [ [string] ] ) ) [EOL] return True [EOL] elif response [ [string] ] == [string] : [EOL] print ( [string] . format ( response [ [string] ] ) ) [EOL] custom_send_sms_with_callback_token ( user , mobile_token , token_expired = True ) [EOL] except Exception as e : [EOL] trace_back = traceback . format_exc ( ) [EOL] message = str ( e ) + [string] + str ( trace_back ) [EOL] logger . debug ( [string] % message ) [EOL] return False [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def send_ultrafast_sms ( ** kwargs ) : [EOL] data = { } [EOL] params = [ ] [EOL] for key , value in kwargs . items ( ) : [EOL] if key == [string] : [EOL] data [ [string] ] = kwargs [ [string] ] [EOL] elif key == [string] : [EOL] data [ [string] ] = kwargs [ [string] ] [EOL] else : [EOL] params . append ( { [string] : key , [string] : value } ) [EOL] data [ [string] ] = params [EOL] headers = { [string] : [string] , [string] : config . ACTIVE_TOKEN_KEY } [EOL] try : [EOL] r = post ( settings . SMS_IR [ [string] ] , dumps ( data ) , headers = headers ) [EOL] response = loads ( r . text ) [EOL] if response [ [string] ] is True : [EOL] print ( [string] . format ( response [ [string] ] ) ) [EOL] return True [EOL] elif response [ [string] ] == [string] : [EOL] print ( [string] . format ( response [ [string] ] ) ) [EOL] except Exception as e : [EOL] print ( e ) [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . conf import settings [EOL] from django . db import migrations , models [EOL] import django . db . models . deletion [EOL] import drfpasswordless . models [EOL] import uuid [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] initial = True [EOL] [EOL] dependencies = [ migrations . swappable_dependency ( settings . AUTH_USER_MODEL ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . UUIDField ( default = uuid . uuid4 , editable = False , primary_key = True , serialize = False , unique = True ) ) , ( [string] , models . DateTimeField ( auto_now_add = True ) ) , ( [string] , models . BooleanField ( default = True ) ) , ( [string] , models . CharField ( blank = True , max_length = [number] ) ) , ( [string] , models . CharField ( blank = True , max_length = [number] ) ) , ( [string] , models . CharField ( default = drfpasswordless . models . generate_numeric_token , max_length = [number] , unique = True ) ) , ( [string] , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = settings . AUTH_USER_MODEL ) ) , ] , options = { [string] : [string] , [string] : False , [string] : [ [string] ] , [string] : [string] , } , ) , migrations . AlterUniqueTogether ( name = [string] , unique_together = set ( [ ( [string] , [string] ) ] ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ApiConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
import builtins [EOL] from typing import Dict , Union , Tuple , Any , List [EOL] import typing [EOL] [docstring] [EOL] import locale [EOL] import os [EOL] from celery . schedules import crontab [EOL] [EOL] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] BASE_DIR = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] SECRET_KEY = [string] [EOL] [EOL] [comment] [EOL] DEBUG = True [EOL] LOGGING = { [string] : [number] , [string] : False , [string] : { [string] : { [string] : [string] , } , [string] : { [string] : [string] } , } , [string] : { [string] : { [string] : [string] , } , } , [string] : { [string] : { [string] : [string] , [string] : [string] , [string] : os . path . join ( BASE_DIR , [string] ) , [string] : [string] , } , [string] : { [string] : [string] , [string] : [string] , [string] : os . path . join ( BASE_DIR , [string] ) , [string] : [string] , } , [string] : { [string] : [string] , [string] : [string] , [string] : os . path . join ( BASE_DIR , [string] ) , [string] : [string] , } , [string] : { [string] : [string] , [string] : [string] , [string] : os . path . join ( BASE_DIR , [string] ) , [string] : [string] , } , [string] : { [string] : [string] , [string] : [ [string] ] , [string] : [string] , [string] : [string] } , [string] : { [string] : [string] , [string] : [string] , } } , [string] : { [string] : { [string] : [ [string] , [string] ] , [string] : True , [string] : [string] , } , [string] : { [string] : [ [string] , [string] ] , [string] : [string] , [string] : True , } , [string] : { [string] : [ [string] , [string] , [string] ] , [string] : [string] , [string] : True } , [string] : { [string] : [ [string] , [string] , [string] ] , [string] : [string] , [string] : False , } , [string] : { [string] : [ [string] , [string] , [string] ] , [string] : [string] , [string] : False , } , [string] : { [string] : [ [string] , [string] , [string] ] , [string] : [string] , [string] : False , } , } } [EOL] [EOL] ALLOWED_HOSTS = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] AUTH_USER_MODEL = [string] [EOL] [EOL] [comment] [EOL] [EOL] INSTALLED_APPS = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] MIDDLEWARE = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] ROOT_URLCONF = [string] [EOL] [EOL] TEMPLATES = [ { [string] : [string] , [string] : [ os . path . join ( BASE_DIR , [string] ) ] , [string] : True , [string] : { [string] : [ [string] , [string] , [string] , [string] , ] , } , } , ] [EOL] [EOL] WSGI_APPLICATION = [string] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] DATABASES = { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } } [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] AUTH_PASSWORD_VALIDATORS = [ { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , ] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] LANGUAGE_CODE = [string] [EOL] locale . setlocale ( locale . LC_ALL , [string] ) [EOL] [EOL] TIME_ZONE = [string] [EOL] [EOL] USE_I18N = True [EOL] [EOL] USE_L10N = True [EOL] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] MEDIA_URL = [string] [EOL] MEDIA_ROOT = os . path . join ( BASE_DIR , [string] ) [EOL] [EOL] STATIC_URL = [string] [EOL] [comment] [EOL] STATICFILES_DIRS = ( os . path . join ( BASE_DIR , [string] ) , ) [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] REST_FRAMEWORK = { [string] : [string] , [string] : [number] , [string] : ( [string] , ) , [string] : ( [string] , [string] , [string] , ) } [EOL] [EOL] PASSWORDLESS_AUTH = { [string] : [ [string] ] , [string] : [string] , [string] : [number] * [number] , [string] : True , [string] : True , [string] : False } [EOL] [EOL] [EOL] SMS_IR = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] [EOL] CONSTANCE_BACKEND = [string] [EOL] [EOL] CONSTANCE_CONFIG_FIELDSETS = { [string] : ( [string] , [string] , ) , } [EOL] [EOL] CONSTANCE_CONFIG = { [string] : ( [string] , [string] ) , [string] : ( [string] , [string] ) , } [EOL] [EOL] CONSTANCE_REDIS_CONNECTION = { [string] : [string] , [string] : [number] , [string] : [number] , } [EOL] [EOL] [EOL] [EOL] INTERNAL_IPS = [ [string] , [string] ] [EOL] [EOL] [comment] [EOL] REDIS_HOST = [string] [EOL] REDIS_PORT = [string] [EOL] BROKER_URL = [string] + REDIS_HOST + [string] + REDIS_PORT + [string] [EOL] BROKER_TRANSPORT_OPTIONS = { [string] : [number] } [EOL] CACHES = { [string] : { [string] : [string] , [string] : [string] + REDIS_HOST + [string] + REDIS_PORT + [string] , [string] : { [string] : [string] } , [string] : [string] } } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] CELERY_BROKER_URL = [string] + REDIS_HOST + [string] + REDIS_PORT + [string] [EOL] CELERY_RESULT_BACKEND = [string] + REDIS_HOST + [string] + REDIS_PORT + [string] [EOL] CELERY_ACCEPT_CONTENT = [ [string] ] [EOL] CELERY_RESULT_SERIALIZER = [string] [EOL] CELERY_TASK_SERIALIZER = [string] [EOL] CELERY_TIMEZONE = [string] [EOL] [EOL] CELERY_BEAT_SCHEDULE = { [string] : { [string] : [string] , [string] : crontab ( minute = [string] ) } , } [EOL] CELERY_IMPORTS = [ [string] ] [EOL] [EOL] CELERY_RESULT_BACKEND = [string] [EOL] CELERY_CACHE_BACKEND = [string]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.List[builtins.str]],typing.List[builtins.str],builtins.bool,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str,typing.Tuple[builtins.str],typing.Tuple[builtins.str,builtins.str,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[builtins.str],builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[builtins.str,typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,builtins.str],builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0
from typing import Tuple [EOL] import typing [EOL] from __future__ import absolute_import , unicode_literals [EOL] [EOL] [comment] [EOL] [comment] [EOL] from . celery import app as celery_app [EOL] [EOL] __all__ = ( [string] , )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0