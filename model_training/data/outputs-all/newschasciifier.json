[comment] [EOL] from typing import List , Any [EOL] import typing [EOL] import argparse [EOL] [docstring] [EOL] import argparse [EOL] import os [EOL] from typing import List [EOL] [EOL] [EOL] parser = argparse . ArgumentParser ( [string] ) [EOL] parser . add_argument ( [string] , [string] , type = int , default = [number] , help = [string] ) [EOL] parser . add_argument ( [string] , type = argparse . FileType ( [string] ) ) [EOL] parser . add_argument ( [string] , type = str ) [EOL] [EOL] args = parser . parse_args ( ) [EOL] [EOL] outs = [ ] [EOL] chunk_size = args . width [EOL] name , ext = os . path . splitext ( args . output ) [EOL] for ind , l in enumerate ( args . input ) : [EOL] inline = l . rstrip ( [string] ) [EOL] chunk_range = range ( [number] , len ( inline ) , chunk_size ) [EOL] num_chunks = len ( chunk_range ) [EOL] for fnum , i in enumerate ( chunk_range ) : [EOL] if fnum >= len ( outs ) : [EOL] outs . append ( open ( name + [string] + str ( fnum + [number] ) + ext , [string] ) ) [EOL] if ind > [number] : [EOL] outs [ fnum ] . write ( [string] * ind ) [comment] [EOL] outs [ fnum ] . write ( inline [ i : i + chunk_size ] + [string] ) [EOL] if num_chunks < len ( outs ) : [comment] [EOL] for i in range ( num_chunks , len ( outs ) ) : [EOL] outs [ i ] . write ( [string] ) [EOL] [ f . close ( ) for f in outs ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.range$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 $builtins.int$ 0 0 0 $builtins.range$ 0 0 0 0 0 0 0 0 0 $builtins.range$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0