import os [EOL] import re [EOL] from setuptools import setup , find_packages [EOL] [EOL] [EOL] def read_version ( filename ) : [EOL] return re . search ( [string] , read ( filename ) , re . MULTILINE ) . group ( [number] ) [EOL] [EOL] [EOL] def read ( filename ) : [EOL] with open ( os . path . join ( os . path . dirname ( __file__ ) , filename ) ) as infile : [EOL] text = infile . read ( ) [EOL] return text [EOL] [EOL] [EOL] setup ( name = [string] , version = read_version ( [string] ) , author = [string] , author_email = [string] , description = [string] , long_description = read ( [string] ) , long_description_content_type = [string] , license = [string] , url = [string] , packages = find_packages ( ) , package_data = { [string] : [ [string] ] } , install_requires = [ [string] , [string] ] , setup_requires = [ [string] ] , tests_require = [ [string] , ] , classifiers = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] , zip_safe = False ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Tuple , Any , List , Dict , Union [EOL] import typing [EOL] import os [EOL] import sys [EOL] import packaging . version [EOL] [EOL] [EOL] [comment] [EOL] [EOL] project = [string] [EOL] copyright = [string] [EOL] author = [string] [EOL] [EOL] [EOL] sys . path . insert ( [number] , os . path . abspath ( [string] ) ) [EOL] from fortran_format_converter import __version__ [EOL] _version = packaging . version . parse ( __version__ ) [EOL] [comment] [EOL] version = _version . base_version [EOL] [comment] [EOL] release = _version . public [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] extensions = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] templates_path = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] source_suffix = [string] [EOL] [EOL] [comment] [EOL] master_doc = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] language = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] exclude_patterns = [ [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] pygments_style = None [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_theme = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_theme_options = { [string] : [string] , [string] : [string] , [string] : True } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_static_path = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] htmlhelp_basename = [string] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] latex_elements = { } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] latex_documents = [ ( master_doc , [string] , [string] , [string] , [string] ) , ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] man_pages = [ ( master_doc , [string] , [string] , [ author ] , [number] ) ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] texinfo_documents = [ ( master_doc , [string] , [string] , author , [string] , [string] , [string] ) , ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] epub_title = project [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] epub_exclude_files = [ [string] ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] intersphinx_mapping = { [string] : None } [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] todo_include_todos = True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,typing.List[builtins.str],builtins.int]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0
import pytest [comment] [EOL] from fortran_format_converter import convert [EOL] [EOL] [EOL] def test_integer_format ( ) : [EOL] for w in range ( [number] , [number] ) : [EOL] assert convert ( [string] . format ( w ) ) == [string] . format ( w ) [EOL] for d in range ( [number] , [number] ) : [EOL] assert convert ( [string] . format ( d ) ) == [string] [EOL] for d in range ( [number] , [number] ) : [EOL] assert convert ( [string] . format ( d ) ) == [string] [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] ) [EOL] [EOL] [EOL] def test_integer_format_uppercase ( ) : [EOL] for w in range ( [number] , [number] ) : [EOL] assert convert ( [string] . format ( w ) , uppercase = True ) == [string] . format ( w ) [EOL] for d in range ( [number] , [number] ) : [EOL] assert convert ( [string] . format ( d ) , uppercase = True ) == [string] [EOL] for d in range ( [number] , [number] ) : [EOL] assert convert ( [string] . format ( d ) , uppercase = True ) == [string] [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] , uppercase = True ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] , uppercase = True ) [EOL] [EOL] [EOL] def test_binary_format ( ) : [EOL] for w in range ( [number] , [number] ) : [EOL] assert convert ( [string] . format ( w ) ) == [string] . format ( w ) [EOL] for d in range ( [number] , [number] ) : [EOL] assert convert ( [string] . format ( d ) ) == [string] [EOL] for d in range ( [number] , [number] ) : [EOL] assert convert ( [string] . format ( d ) ) == [string] [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] ) [EOL] [EOL] [EOL] def test_binary_format_uppercase ( ) : [EOL] for w in range ( [number] , [number] ) : [EOL] assert convert ( [string] . format ( w ) , uppercase = True ) == [string] . format ( w ) [EOL] for d in range ( [number] , [number] ) : [EOL] assert convert ( [string] . format ( d ) , uppercase = True ) == [string] [EOL] for d in range ( [number] , [number] ) : [EOL] assert convert ( [string] . format ( d ) , uppercase = True ) == [string] [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] , uppercase = True ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] , uppercase = True ) [EOL] [EOL] [EOL] def test_octal_format ( ) : [EOL] for w in range ( [number] , [number] ) : [EOL] assert convert ( [string] . format ( w ) ) == [string] . format ( w ) [EOL] for d in range ( [number] , [number] ) : [EOL] assert convert ( [string] . format ( d ) ) == [string] [EOL] for d in range ( [number] , [number] ) : [EOL] assert convert ( [string] . format ( d ) ) == [string] [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] ) [EOL] [EOL] [EOL] def test_octal_format_uppercase ( ) : [EOL] for w in range ( [number] , [number] ) : [EOL] assert convert ( [string] . format ( w ) , uppercase = True ) == [string] . format ( w ) [EOL] for d in range ( [number] , [number] ) : [EOL] assert convert ( [string] . format ( d ) , uppercase = True ) == [string] [EOL] for d in range ( [number] , [number] ) : [EOL] assert convert ( [string] . format ( d ) , uppercase = True ) == [string] [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] , uppercase = True ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] , uppercase = True ) [EOL] [EOL] [EOL] def test_hexadecimal_format ( ) : [EOL] for w in range ( [number] , [number] ) : [EOL] assert convert ( [string] . format ( w ) ) == [string] . format ( w ) [EOL] for d in range ( [number] , [number] ) : [EOL] assert convert ( [string] . format ( d ) ) == [string] [EOL] for d in range ( [number] , [number] ) : [EOL] assert convert ( [string] . format ( d ) ) == [string] [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] ) [EOL] [EOL] [EOL] def test_hexadecimal_format_uppercase ( ) : [EOL] for w in range ( [number] , [number] ) : [EOL] assert convert ( [string] . format ( w ) , uppercase = True ) == [string] . format ( w ) [EOL] for d in range ( [number] , [number] ) : [EOL] assert convert ( [string] . format ( d ) , uppercase = True ) == [string] [EOL] for d in range ( [number] , [number] ) : [EOL] assert convert ( [string] . format ( d ) , uppercase = True ) == [string] [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] , uppercase = True ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] , uppercase = True ) [EOL] [EOL] [EOL] def test_real_format ( ) : [EOL] for d in range ( [number] , [number] ) : [EOL] for w in range ( d + [number] , [number] ) : [EOL] assert convert ( [string] . format ( w , d ) ) == [string] . format ( w , d ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] ) [EOL] [EOL] [EOL] def test_real_format_uppercase ( ) : [EOL] for d in range ( [number] , [number] ) : [EOL] for w in range ( d + [number] , [number] ) : [EOL] assert ( convert ( [string] . format ( w , d ) , uppercase = True ) == [string] . format ( w , d ) ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] , uppercase = True ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] , uppercase = True ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] , uppercase = True ) [EOL] [EOL] [EOL] def test_double_format ( ) : [EOL] for d in range ( [number] , [number] ) : [EOL] for w in range ( d + [number] , [number] ) : [EOL] assert convert ( [string] . format ( w , d ) ) == [string] . format ( w , d ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] ) [EOL] [EOL] [EOL] def test_double_format_uppercase ( ) : [EOL] for d in range ( [number] , [number] ) : [EOL] for w in range ( d + [number] , [number] ) : [EOL] assert ( convert ( [string] . format ( w , d ) , uppercase = True ) == [string] . format ( w , d ) ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] , uppercase = True ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] , uppercase = True ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] , uppercase = True ) [EOL] [EOL] [EOL] def test_exponent_format ( ) : [EOL] for d in range ( [number] , [number] ) : [EOL] for w in range ( d + [number] , [number] ) : [EOL] assert convert ( [string] . format ( w , d ) ) == [string] . format ( w , d ) [EOL] for d in range ( [number] , [number] ) : [EOL] for w in range ( d + [number] , [number] ) : [EOL] for e in range ( [number] , [number] ) : [EOL] assert ( convert ( [string] . format ( w , d , e ) ) == [string] . format ( w , d ) ) [EOL] for d in range ( [number] , [number] ) : [EOL] for w in range ( d + [number] , [number] ) : [EOL] for e in range ( [number] , [number] ) : [EOL] assert convert ( [string] . format ( w , d , e ) ) == [string] . format ( w , d ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] ) [EOL] [EOL] [EOL] def test_exponent_format_uppercase ( ) : [EOL] for d in range ( [number] , [number] ) : [EOL] for w in range ( d + [number] , [number] ) : [EOL] assert ( convert ( [string] . format ( w , d ) , uppercase = True ) == [string] . format ( w , d ) ) [EOL] for d in range ( [number] , [number] ) : [EOL] for w in range ( d + [number] , [number] ) : [EOL] for e in range ( [number] , [number] ) : [EOL] assert ( convert ( [string] . format ( w , d , e ) , uppercase = True ) == [string] . format ( w , d ) ) [EOL] for d in range ( [number] , [number] ) : [EOL] for w in range ( d + [number] , [number] ) : [EOL] for e in range ( [number] , [number] ) : [EOL] assert ( convert ( [string] . format ( w , d , e ) , uppercase = True ) == [string] . format ( w , d ) ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] , uppercase = True ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] , uppercase = True ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] , uppercase = True ) [EOL] [EOL] [EOL] def test_engineering_format ( ) : [EOL] for d in range ( [number] , [number] ) : [EOL] for w in range ( d + [number] , [number] ) : [EOL] assert convert ( [string] . format ( w , d ) ) == [string] . format ( w , d ) [EOL] for d in range ( [number] , [number] ) : [EOL] for w in range ( d + [number] , [number] ) : [EOL] for e in range ( [number] , [number] ) : [EOL] assert ( convert ( [string] . format ( w , d , e ) ) == [string] . format ( w , d ) ) [EOL] for d in range ( [number] , [number] ) : [EOL] for w in range ( d + [number] , [number] ) : [EOL] for e in range ( [number] , [number] ) : [EOL] assert ( convert ( [string] . format ( w , d , e ) ) == [string] . format ( w , d ) ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] ) [EOL] [EOL] [EOL] def test_engineering_format_uppercase ( ) : [EOL] for d in range ( [number] , [number] ) : [EOL] for w in range ( d + [number] , [number] ) : [EOL] assert ( convert ( [string] . format ( w , d ) , uppercase = True ) == [string] . format ( w , d ) ) [EOL] for d in range ( [number] , [number] ) : [EOL] for w in range ( d + [number] , [number] ) : [EOL] for e in range ( [number] , [number] ) : [EOL] assert ( convert ( [string] . format ( w , d , e ) , uppercase = True ) == [string] . format ( w , d ) ) [EOL] for d in range ( [number] , [number] ) : [EOL] for w in range ( d + [number] , [number] ) : [EOL] for e in range ( [number] , [number] ) : [EOL] assert ( convert ( [string] . format ( w , d , e ) , uppercase = True ) == [string] . format ( w , d ) ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] , uppercase = True ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] , uppercase = True ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] , uppercase = True ) [EOL] [EOL] [EOL] def test_scientific_format ( ) : [EOL] for d in range ( [number] , [number] ) : [EOL] for w in range ( d + [number] , [number] ) : [EOL] assert convert ( [string] . format ( w , d ) ) == [string] . format ( w , d ) [EOL] for d in range ( [number] , [number] ) : [EOL] for w in range ( d + [number] , [number] ) : [EOL] for e in range ( [number] , [number] ) : [EOL] assert ( convert ( [string] . format ( w , d , e ) ) == [string] . format ( w , d ) ) [EOL] for d in range ( [number] , [number] ) : [EOL] for w in range ( d + [number] , [number] ) : [EOL] for e in range ( [number] , [number] ) : [EOL] assert ( convert ( [string] . format ( w , d , e ) ) == [string] . format ( w , d ) ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] ) [EOL] [EOL] [EOL] def test_scientific_format_uppercase ( ) : [EOL] for d in range ( [number] , [number] ) : [EOL] for w in range ( d + [number] , [number] ) : [EOL] assert ( convert ( [string] . format ( w , d ) , uppercase = True ) == [string] . format ( w , d ) ) [EOL] for d in range ( [number] , [number] ) : [EOL] for w in range ( d + [number] , [number] ) : [EOL] for e in range ( [number] , [number] ) : [EOL] assert ( convert ( [string] . format ( w , d , e ) , uppercase = True ) == [string] . format ( w , d ) ) [EOL] for d in range ( [number] , [number] ) : [EOL] for w in range ( d + [number] , [number] ) : [EOL] for e in range ( [number] , [number] ) : [EOL] assert ( convert ( [string] . format ( w , d , e ) , uppercase = True ) == [string] . format ( w , d ) ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] , uppercase = True ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] , uppercase = True ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] , uppercase = True ) [EOL] [EOL] [EOL] def test_logical_format ( ) : [EOL] for w in range ( [number] , [number] ) : [EOL] assert convert ( [string] . format ( w ) ) == [string] . format ( w ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] ) [EOL] [EOL] [EOL] def test_logical_format_uppercase ( ) : [EOL] for w in range ( [number] , [number] ) : [EOL] assert convert ( [string] . format ( w ) , uppercase = True ) == [string] . format ( w ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] , uppercase = True ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] , uppercase = True ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] , uppercase = True ) [EOL] [EOL] [EOL] def test_string_format ( ) : [EOL] assert convert ( [string] ) == [string] [EOL] for w in range ( [number] , [number] ) : [EOL] assert convert ( [string] . format ( w ) ) == [string] . format ( w ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] ) [EOL] [EOL] [EOL] def test_string_format_uppercase ( ) : [EOL] assert convert ( [string] , uppercase = True ) == [string] [EOL] for w in range ( [number] , [number] ) : [EOL] assert convert ( [string] . format ( w ) , uppercase = True ) == [string] . format ( w ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] , uppercase = True ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] , uppercase = True ) [EOL] [EOL] [EOL] def test_general_format ( ) : [EOL] for d in range ( [number] , [number] ) : [EOL] for w in range ( d + [number] , [number] ) : [EOL] assert convert ( [string] . format ( w , d ) ) == [string] . format ( w , d ) [EOL] for d in range ( [number] , [number] ) : [EOL] for w in range ( d + [number] , [number] ) : [EOL] for e in range ( [number] , [number] ) : [EOL] assert ( convert ( [string] . format ( w , d , e ) ) == [string] . format ( w , d ) ) [EOL] for d in range ( [number] , [number] ) : [EOL] for w in range ( d + [number] , [number] ) : [EOL] for e in range ( [number] , [number] ) : [EOL] assert ( convert ( [string] . format ( w , d , e ) ) == [string] . format ( w , d ) ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] ) [EOL] [EOL] [EOL] def test_general_format_uppercase ( ) : [EOL] for d in range ( [number] , [number] ) : [EOL] for w in range ( d + [number] , [number] ) : [EOL] assert ( convert ( [string] . format ( w , d ) , uppercase = True ) == [string] . format ( w , d ) ) [EOL] for d in range ( [number] , [number] ) : [EOL] for w in range ( d + [number] , [number] ) : [EOL] for e in range ( [number] , [number] ) : [EOL] assert ( convert ( [string] . format ( w , d , e ) , uppercase = True ) == [string] . format ( w , d ) ) [EOL] for d in range ( [number] , [number] ) : [EOL] for w in range ( d + [number] , [number] ) : [EOL] for e in range ( [number] , [number] ) : [EOL] assert ( convert ( [string] . format ( w , d , e ) , uppercase = True ) == [string] . format ( w , d ) ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] , uppercase = True ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] , uppercase = True ) [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] , uppercase = True ) [EOL] [EOL] [EOL] def test_invalid_type ( ) : [EOL] with pytest . raises ( ValueError ) : [EOL] convert ( [string] ) [EOL]	
	0