from typing import Dict , Any [EOL] import argparse [EOL] import builtins [EOL] import typing [EOL] import argparse [EOL] import json [EOL] import os [EOL] [EOL] from vyper import compiler [EOL] [EOL] [EOL] def generate_compiled_json ( file_path ) : [EOL] vmc_code = open ( file_path ) . read ( ) [EOL] abi = compiler . mk_full_signature ( vmc_code ) [EOL] bytecode = compiler . compile ( vmc_code ) [EOL] bytecode_hex = [string] + bytecode . hex ( ) [EOL] contract_json = { [string] : abi , [string] : bytecode_hex , } [EOL] [comment] [EOL] basename = os . path . basename ( file_path ) [EOL] dirname = os . path . dirname ( file_path ) [EOL] contract_name = basename . split ( [string] ) [ [number] ] [EOL] with open ( dirname + [string] . format ( contract_name ) , [string] ) as f_write : [EOL] json . dump ( contract_json , f_write ) [EOL] [EOL] [EOL] def main ( ) : [EOL] parser = argparse . ArgumentParser ( ) [EOL] parser . add_argument ( [string] , type = str , help = [string] ) [EOL] args = parser . parse_args ( ) [EOL] path = args . path [EOL] generate_compiled_json ( path ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Dict , Any [EOL] import builtins [EOL] import typing [EOL] import json [EOL] import os [EOL] [EOL] from typing import ( Any , Dict , ) [EOL] [EOL] [EOL] DIR = os . path . dirname ( __file__ ) [EOL] [EOL] [EOL] def get_smc_source_code ( ) : [EOL] file_path = os . path . join ( DIR , [string] ) [EOL] smc_source_code = open ( file_path ) . read ( ) [EOL] return smc_source_code [EOL] [EOL] [EOL] def get_smc_json ( ) : [EOL] file_path = os . path . join ( DIR , [string] ) [EOL] smc_json_str = open ( file_path ) . read ( ) [EOL] return json . loads ( smc_json_str ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
class LogParsingError ( Exception ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0
from typing import Any , List , Tuple [EOL] import builtins [EOL] import web3 [EOL] import typing [EOL] import eth_typing [EOL] import evm [EOL] import rlp [EOL] [EOL] from evm . rlp . transactions import ( BaseTransaction , ) [EOL] from web3 import ( Web3 , ) [EOL] [EOL] from eth_utils import ( to_checksum_address , ) [EOL] [EOL] from typing import ( List , Tuple , ) [EOL] from eth_typing import ( Address , Hash32 , ) [EOL] [EOL] [EOL] def get_code ( w3 , address ) : [EOL] return w3 . eth . getCode ( to_checksum_address ( address ) ) [EOL] [EOL] [EOL] def get_nonce ( w3 , address ) : [EOL] return w3 . eth . getTransactionCount ( to_checksum_address ( address ) ) [EOL] [EOL] [EOL] def take_snapshot ( w3 ) : [EOL] return w3 . testing . snapshot ( ) [EOL] [EOL] [EOL] def revert_to_snapshot ( w3 , snapshot_id ) : [EOL] w3 . testing . revert ( snapshot_id ) [EOL] [EOL] [EOL] def mine ( w3 , num_blocks ) : [EOL] w3 . testing . mine ( num_blocks ) [EOL] [EOL] [EOL] def send_raw_transaction ( w3 , raw_transaction ) : [EOL] raw_transaction_bytes = rlp . encode ( raw_transaction ) [EOL] raw_transaction_hex = w3 . toHex ( raw_transaction_bytes ) [EOL] transaction_hash = w3 . eth . sendRawTransaction ( raw_transaction_hex ) [EOL] return transaction_hash [EOL] [EOL] [EOL] def get_recent_block_hashes ( w3 , history_size ) : [EOL] block = w3 . eth . getBlock ( [string] ) [EOL] recent_hashes = [ ] [EOL] [EOL] for _ in range ( history_size ) : [EOL] recent_hashes . append ( block [ [string] ] ) [EOL] [comment] [EOL] if block [ [string] ] == [number] : [EOL] break [EOL] block = w3 . eth . getBlock ( block [ [string] ] ) [EOL] [EOL] return tuple ( reversed ( recent_hashes ) ) [EOL] [EOL] [EOL] def get_canonical_chain ( w3 , recent_block_hashes , history_size ) : [EOL] block = w3 . eth . getBlock ( [string] ) [EOL] [EOL] new_block_hashes = [ ] [EOL] [EOL] for _ in range ( history_size ) : [EOL] if block [ [string] ] in recent_block_hashes : [EOL] break [EOL] new_block_hashes . append ( block [ [string] ] ) [EOL] block = w3 . eth . getBlock ( block [ [string] ] ) [EOL] else : [EOL] raise Exception ( [string] ) [EOL] [EOL] first_common_ancestor_idx = recent_block_hashes . index ( block [ [string] ] ) [EOL] [EOL] revoked_hashes = recent_block_hashes [ first_common_ancestor_idx + [number] : ] [EOL] [EOL] [comment] [EOL] reversed_new_block_hashes = tuple ( reversed ( new_block_hashes ) ) [EOL] [EOL] return revoked_hashes , reversed_new_block_hashes [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $eth_typing.Hash32$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[eth_typing.Hash32,...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.List[eth_typing.Hash32],typing.Tuple[eth_typing.Hash32,...]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
from typing import Any , List [EOL] import typing [EOL] from sharding . handler . utils . web3_utils import ( mine , ) [EOL] [EOL] from tests . contract . utils . common_utils import ( update_notary_sample_size , batch_register , fast_forward , ) [EOL] from tests . contract . utils . notary_account import ( NotaryAccount , ) [EOL] from tests . contract . utils . sample_helper import ( get_notary_pool_list , get_committee_list , get_sample_result , ) [EOL] [EOL] [EOL] def test_normal_update_notary_sample_size ( smc_handler ) : [comment] [EOL] w3 = smc_handler . web3 [EOL] [EOL] notary_0 = NotaryAccount ( [number] ) [EOL] [EOL] [comment] [EOL] smc_handler . register_notary ( private_key = notary_0 . private_key ) [EOL] mine ( w3 , [number] ) [EOL] _ , notary_0_pool_index = smc_handler . get_notary_info ( notary_0 . checksum_address ) [EOL] assert notary_0_pool_index == [number] [EOL] next_period_notary_sample_size = smc_handler . next_period_notary_sample_size ( ) [EOL] assert ( notary_0_pool_index + [number] ) == next_period_notary_sample_size [EOL] [EOL] notary_1 = NotaryAccount ( [number] ) [EOL] [EOL] [comment] [EOL] smc_handler . register_notary ( private_key = notary_1 . private_key ) [EOL] mine ( w3 , [number] ) [EOL] [EOL] _ , notary_1_pool_index = smc_handler . get_notary_info ( notary_1 . checksum_address ) [EOL] assert notary_1_pool_index == [number] [EOL] next_period_notary_sample_size = smc_handler . next_period_notary_sample_size ( ) [EOL] assert ( notary_1_pool_index + [number] ) == next_period_notary_sample_size [EOL] [EOL] [comment] [EOL] [comment] [EOL] current_period = w3 . eth . blockNumber // smc_handler . config [ [string] ] [EOL] notary_sample_size_updated_period = smc_handler . notary_sample_size_updated_period ( ) [EOL] assert current_period == notary_sample_size_updated_period [EOL] [EOL] [comment] [EOL] current_period_notary_sample_size = smc_handler . current_period_notary_sample_size ( ) [EOL] assert [number] == current_period_notary_sample_size [EOL] [EOL] [comment] [EOL] update_notary_sample_size ( smc_handler ) [EOL] [comment] [EOL] [comment] [EOL] assert [number] == current_period_notary_sample_size [EOL] [EOL] [comment] [EOL] fast_forward ( smc_handler , [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] notary_2 = NotaryAccount ( [number] ) [EOL] smc_handler . register_notary ( private_key = notary_2 . private_key ) [EOL] mine ( w3 , [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] current_period_notary_sample_size = smc_handler . current_period_notary_sample_size ( ) [EOL] assert next_period_notary_sample_size == current_period_notary_sample_size [EOL] [EOL] [comment] [EOL] current_period = w3 . eth . blockNumber // smc_handler . config [ [string] ] [EOL] notary_sample_size_updated_period = smc_handler . notary_sample_size_updated_period ( ) [EOL] assert current_period == notary_sample_size_updated_period [EOL] [EOL] [EOL] def test_register_then_deregister ( smc_handler ) : [comment] [EOL] w3 = smc_handler . web3 [EOL] [EOL] notary_0 = NotaryAccount ( [number] ) [EOL] [EOL] [comment] [EOL] smc_handler . register_notary ( private_key = notary_0 . private_key ) [EOL] mine ( w3 , [number] ) [EOL] _ , notary_0_pool_index = smc_handler . get_notary_info ( notary_0 . checksum_address ) [EOL] assert notary_0_pool_index == [number] [EOL] next_period_notary_sample_size = smc_handler . next_period_notary_sample_size ( ) [EOL] assert ( notary_0_pool_index + [number] ) == next_period_notary_sample_size [EOL] [EOL] [comment] [EOL] smc_handler . deregister_notary ( private_key = notary_0 . private_key ) [EOL] mine ( w3 , [number] ) [EOL] [comment] [EOL] next_period_notary_sample_size = smc_handler . next_period_notary_sample_size ( ) [EOL] assert ( notary_0_pool_index + [number] ) == next_period_notary_sample_size [EOL] [EOL] [EOL] def test_deregister_then_register ( smc_handler ) : [comment] [EOL] w3 = smc_handler . web3 [EOL] [EOL] notary_0 = NotaryAccount ( [number] ) [EOL] [EOL] [comment] [EOL] smc_handler . register_notary ( private_key = notary_0 . private_key ) [EOL] fast_forward ( smc_handler , [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] smc_handler . deregister_notary ( private_key = notary_0 . private_key ) [EOL] mine ( w3 , [number] ) [EOL] [comment] [EOL] current_period_notary_sample_size = smc_handler . current_period_notary_sample_size ( ) [EOL] assert current_period_notary_sample_size == [number] [EOL] [EOL] notary_1 = NotaryAccount ( [number] ) [EOL] [EOL] [comment] [EOL] smc_handler . register_notary ( private_key = notary_1 . private_key ) [EOL] mine ( w3 , [number] ) [EOL] [EOL] _ , notary_1_pool_index = smc_handler . get_notary_info ( notary_1 . checksum_address ) [EOL] assert notary_1_pool_index == [number] [EOL] [comment] [EOL] next_period_notary_sample_size = smc_handler . next_period_notary_sample_size ( ) [EOL] assert ( notary_1_pool_index + [number] ) == next_period_notary_sample_size [EOL] [EOL] [EOL] def test_series_of_deregister_starting_from_top_of_the_stack ( smc_handler ) : [comment] [EOL] w3 = smc_handler . web3 [EOL] [EOL] notary_0 = NotaryAccount ( [number] ) [EOL] notary_1 = NotaryAccount ( [number] ) [EOL] notary_2 = NotaryAccount ( [number] ) [EOL] [EOL] [comment] [EOL] batch_register ( smc_handler , [number] , [number] ) [EOL] next_period_notary_sample_size = smc_handler . next_period_notary_sample_size ( ) [EOL] assert next_period_notary_sample_size == [number] [EOL] [EOL] [comment] [EOL] fast_forward ( smc_handler , [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] smc_handler . deregister_notary ( private_key = notary_2 . private_key ) [EOL] mine ( w3 , [number] ) [EOL] [comment] [EOL] current_period_notary_sample_size = smc_handler . current_period_notary_sample_size ( ) [EOL] assert current_period_notary_sample_size == [number] [EOL] [comment] [EOL] next_period_notary_sample_size = smc_handler . next_period_notary_sample_size ( ) [EOL] assert next_period_notary_sample_size == [number] [EOL] [comment] [EOL] smc_handler . deregister_notary ( private_key = notary_1 . private_key ) [EOL] mine ( w3 , [number] ) [EOL] [comment] [EOL] next_period_notary_sample_size = smc_handler . next_period_notary_sample_size ( ) [EOL] assert next_period_notary_sample_size == [number] [EOL] [comment] [EOL] smc_handler . deregister_notary ( private_key = notary_0 . private_key ) [EOL] mine ( w3 , [number] ) [EOL] [comment] [EOL] next_period_notary_sample_size = smc_handler . next_period_notary_sample_size ( ) [EOL] assert next_period_notary_sample_size == [number] [EOL] [EOL] [comment] [EOL] fast_forward ( smc_handler , [number] ) [EOL] [EOL] [comment] [EOL] update_notary_sample_size ( smc_handler ) [EOL] current_period_notary_sample_size = smc_handler . current_period_notary_sample_size ( ) [EOL] assert current_period_notary_sample_size == next_period_notary_sample_size [EOL] [EOL] [EOL] def test_series_of_deregister_starting_from_bottom_of_the_stack ( smc_handler ) : [comment] [EOL] w3 = smc_handler . web3 [EOL] [EOL] notary_0 = NotaryAccount ( [number] ) [EOL] notary_1 = NotaryAccount ( [number] ) [EOL] notary_2 = NotaryAccount ( [number] ) [EOL] [EOL] [comment] [EOL] batch_register ( smc_handler , [number] , [number] ) [EOL] [EOL] [comment] [EOL] fast_forward ( smc_handler , [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] smc_handler . deregister_notary ( private_key = notary_0 . private_key ) [EOL] mine ( w3 , [number] ) [EOL] _ , notary_0_pool_index = smc_handler . get_notary_info ( notary_0 . checksum_address ) [EOL] next_period_notary_sample_size = smc_handler . next_period_notary_sample_size ( ) [EOL] [comment] [EOL] assert next_period_notary_sample_size == [number] [EOL] [comment] [EOL] smc_handler . deregister_notary ( private_key = notary_1 . private_key ) [EOL] mine ( w3 , [number] ) [EOL] _ , notary_1_pool_index = smc_handler . get_notary_info ( notary_1 . checksum_address ) [EOL] next_period_notary_sample_size = smc_handler . next_period_notary_sample_size ( ) [EOL] [comment] [EOL] assert next_period_notary_sample_size == [number] [EOL] [comment] [EOL] smc_handler . deregister_notary ( private_key = notary_2 . private_key ) [EOL] mine ( w3 , [number] ) [EOL] [comment] [EOL] current_period_notary_sample_size = smc_handler . current_period_notary_sample_size ( ) [EOL] assert current_period_notary_sample_size == [number] [EOL] _ , notary_2_pool_index = smc_handler . get_notary_info ( notary_2 . checksum_address ) [EOL] next_period_notary_sample_size = smc_handler . next_period_notary_sample_size ( ) [EOL] assert next_period_notary_sample_size == [number] [EOL] [EOL] [comment] [EOL] fast_forward ( smc_handler , [number] ) [EOL] [EOL] [comment] [EOL] update_notary_sample_size ( smc_handler ) [EOL] current_period_notary_sample_size = smc_handler . current_period_notary_sample_size ( ) [EOL] assert current_period_notary_sample_size == next_period_notary_sample_size [EOL] [EOL] [EOL] def test_get_member_of_committee_without_updating_sample_size ( smc_handler ) : [comment] [EOL] w3 = smc_handler . web3 [EOL] [EOL] [comment] [EOL] batch_register ( smc_handler , [number] , [number] ) [EOL] fast_forward ( smc_handler , [number] ) [EOL] [EOL] [comment] [EOL] batch_register ( smc_handler , [number] , [number] ) [EOL] [EOL] [comment] [EOL] current_period = w3 . eth . blockNumber // smc_handler . config [ [string] ] [EOL] notary_sample_size_updated_period = smc_handler . notary_sample_size_updated_period ( ) [EOL] assert notary_sample_size_updated_period == current_period [EOL] current_period_notary_sample_size = smc_handler . current_period_notary_sample_size ( ) [EOL] assert current_period_notary_sample_size == [number] [EOL] next_period_notary_sample_size = smc_handler . next_period_notary_sample_size ( ) [EOL] assert next_period_notary_sample_size == [number] [EOL] [EOL] [comment] [EOL] fast_forward ( smc_handler , [number] ) [EOL] current_period = w3 . eth . blockNumber // smc_handler . config [ [string] ] [EOL] notary_sample_size_updated_period = smc_handler . notary_sample_size_updated_period ( ) [EOL] assert notary_sample_size_updated_period == current_period - [number] [EOL] [EOL] shard_0_committee_list = get_committee_list ( smc_handler , [number] ) [EOL] [comment] [EOL] assert len ( shard_0_committee_list ) > [number] [EOL] for ( i , notary ) in enumerate ( shard_0_committee_list ) : [EOL] assert smc_handler . get_member_of_committee ( [number] , i ) == notary [EOL] [EOL] [EOL] def test_get_member_of_committee_with_updated_sample_size ( smc_handler ) : [comment] [EOL] w3 = smc_handler . web3 [EOL] [EOL] [comment] [EOL] batch_register ( smc_handler , [number] , [number] ) [EOL] fast_forward ( smc_handler , [number] ) [EOL] [EOL] [comment] [EOL] update_notary_sample_size ( smc_handler ) [EOL] [comment] [EOL] current_period = w3 . eth . blockNumber // smc_handler . config [ [string] ] [EOL] notary_sample_size_updated_period = smc_handler . notary_sample_size_updated_period ( ) [EOL] assert notary_sample_size_updated_period == current_period [EOL] current_period_notary_sample_size = smc_handler . current_period_notary_sample_size ( ) [EOL] assert current_period_notary_sample_size == [number] [EOL] next_period_notary_sample_size = smc_handler . next_period_notary_sample_size ( ) [EOL] assert next_period_notary_sample_size == [number] [EOL] [EOL] shard_0_committee_list = get_committee_list ( smc_handler , [number] ) [EOL] for ( i , notary ) in enumerate ( shard_0_committee_list ) : [EOL] assert smc_handler . get_member_of_committee ( [number] , i ) == notary [EOL] [EOL] [EOL] def test_committee_lists_generated_are_different ( smc_handler ) : [comment] [EOL] [comment] [EOL] batch_register ( smc_handler , [number] , [number] ) [EOL] fast_forward ( smc_handler , [number] ) [EOL] [EOL] [comment] [EOL] update_notary_sample_size ( smc_handler ) [EOL] [EOL] shard_0_committee_list = get_committee_list ( smc_handler , [number] ) [EOL] shard_1_committee_list = get_committee_list ( smc_handler , [number] ) [EOL] assert shard_0_committee_list != shard_1_committee_list [EOL] [EOL] [comment] [EOL] fast_forward ( smc_handler , [number] ) [EOL] [EOL] [comment] [EOL] update_notary_sample_size ( smc_handler ) [EOL] [EOL] new_shard_0_committee_list = get_committee_list ( smc_handler , [number] ) [EOL] assert new_shard_0_committee_list != shard_0_committee_list [EOL] [EOL] [EOL] def test_get_member_of_committee_with_non_member ( smc_handler ) : [comment] [EOL] [comment] [EOL] batch_register ( smc_handler , [number] , [number] ) [EOL] fast_forward ( smc_handler , [number] ) [EOL] [EOL] [comment] [EOL] update_notary_sample_size ( smc_handler ) [EOL] [EOL] notary_pool_list = get_notary_pool_list ( smc_handler ) [EOL] shard_0_committee_list = get_committee_list ( smc_handler , [number] ) [EOL] for ( i , notary ) in enumerate ( shard_0_committee_list ) : [EOL] notary_index = notary_pool_list . index ( notary ) [EOL] next_notary_index = notary_index + [number] \ [EOL] if notary_index < len ( notary_pool_list ) - [number] else [number] [EOL] next_notary = notary_pool_list [ next_notary_index ] [EOL] assert not ( smc_handler . get_member_of_committee ( [number] , i ) == next_notary ) [EOL] [EOL] [EOL] def test_committee_change_with_deregister_then_register ( smc_handler ) : [comment] [EOL] w3 = smc_handler . web3 [EOL] [EOL] [comment] [EOL] batch_register ( smc_handler , [number] , [number] ) [EOL] fast_forward ( smc_handler , [number] ) [EOL] [EOL] [comment] [EOL] update_notary_sample_size ( smc_handler ) [EOL] [EOL] notary_pool_list = get_notary_pool_list ( smc_handler ) [EOL] [comment] [EOL] notary = get_committee_list ( smc_handler , [number] ) [ [number] ] [EOL] notary_index = notary_pool_list . index ( notary ) [EOL] smc_handler . deregister_notary ( private_key = NotaryAccount ( notary_index ) . private_key ) [EOL] mine ( w3 , [number] ) [EOL] [comment] [EOL] assert smc_handler . get_member_of_committee ( [number] , [number] ) == [string] * [number] [EOL] [EOL] [comment] [EOL] smc_handler . register_notary ( private_key = NotaryAccount ( [number] ) . private_key ) [EOL] mine ( w3 , [number] ) [EOL] [comment] [EOL] assert smc_handler . get_member_of_committee ( [number] , [number] ) == NotaryAccount ( [number] ) . canonical_address [EOL] [EOL] [EOL] def test_get_sample_result ( smc_handler ) : [comment] [EOL] w3 = smc_handler . web3 [EOL] [EOL] [comment] [EOL] batch_register ( smc_handler , [number] , [number] ) [EOL] fast_forward ( smc_handler , [number] ) [EOL] [EOL] [comment] [EOL] current_period = w3 . eth . blockNumber // smc_handler . config [ [string] ] [EOL] update_notary_sample_size ( smc_handler ) [EOL] [EOL] [comment] [EOL] committee_group = [ ] [EOL] for shard_id in range ( smc_handler . config [ [string] ] ) : [EOL] committee_group . append ( get_committee_list ( smc_handler , shard_id ) ) [EOL] [EOL] [comment] [EOL] notary_0 = NotaryAccount ( [number] ) [EOL] _ , notary_0_pool_index = smc_handler . get_notary_info ( notary_0 . checksum_address ) [EOL] notary_0_sampling_result = get_sample_result ( smc_handler , notary_0_pool_index ) [EOL] [EOL] for ( period , shard_id , sampling_index ) in notary_0_sampling_result : [EOL] assert period == current_period [EOL] [comment] [EOL] assert committee_group [ shard_id ] [ sampling_index ] == notary_0 . canonical_address [EOL] [comment] [EOL] assert smc_handler . get_member_of_committee ( shard_id , sampling_index ) == notary_0 . canonical_address [EOL]	
from typing import Dict , Any [EOL] import typing [EOL] from vyper import compiler [EOL] [EOL] from sharding . contracts . utils . smc_utils import ( get_smc_json , get_smc_source_code , ) [EOL] [EOL] [EOL] def test_compile_smc ( ) : [EOL] compiled_smc_json = get_smc_json ( ) [EOL] [EOL] vmc_code = get_smc_source_code ( ) [EOL] abi = compiler . mk_full_signature ( vmc_code ) [EOL] bytecode = compiler . compile ( vmc_code ) [EOL] bytecode_hex = [string] + bytecode . hex ( ) [EOL] [EOL] assert abi == compiled_smc_json [ [string] ] [EOL] assert bytecode_hex == compiled_smc_json [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from sharding . handler . utils . web3_utils import ( mine , ) [EOL] [EOL] from tests . contract . utils . common_utils import ( batch_register , fast_forward , ) [EOL] from tests . contract . utils . notary_account import ( NotaryAccount , ) [EOL] [EOL] [EOL] def test_normal_add_header ( smc_handler ) : [comment] [EOL] w3 = smc_handler . web3 [EOL] [EOL] [comment] [EOL] batch_register ( smc_handler , [number] , [number] ) [EOL] fast_forward ( smc_handler , [number] ) [EOL] current_period = w3 . eth . blockNumber // smc_handler . config [ [string] ] [EOL] assert current_period == [number] [EOL] [comment] [EOL] assert smc_handler . records_updated_period ( [number] ) == [number] [EOL] assert smc_handler . records_updated_period ( [number] ) == [number] [EOL] [EOL] CHUNK_ROOT_1_0 = [string] * [number] [EOL] smc_handler . add_header ( shard_id = [number] , period = [number] , chunk_root = CHUNK_ROOT_1_0 , private_key = NotaryAccount ( index = [number] ) . private_key , ) [EOL] mine ( w3 = w3 , num_blocks = [number] ) [EOL] [comment] [EOL] assert smc_handler . records_updated_period ( [number] ) == [number] [EOL] assert smc_handler . get_collation_chunk_root ( shard_id = [number] , period = [number] ) == CHUNK_ROOT_1_0 [EOL] [EOL] fast_forward ( smc_handler , [number] ) [EOL] current_period = w3 . eth . blockNumber // smc_handler . config [ [string] ] [EOL] assert current_period == [number] [EOL] [EOL] CHUNK_ROOT_2_0 = [string] * [number] [EOL] smc_handler . add_header ( shard_id = [number] , period = [number] , chunk_root = CHUNK_ROOT_2_0 , private_key = NotaryAccount ( index = [number] ) . private_key , ) [EOL] mine ( w3 = w3 , num_blocks = [number] ) [EOL] [comment] [EOL] assert smc_handler . records_updated_period ( [number] ) == [number] [EOL] assert smc_handler . get_collation_chunk_root ( shard_id = [number] , period = [number] ) == CHUNK_ROOT_2_0 [EOL] [comment] [EOL] assert smc_handler . records_updated_period ( [number] ) == [number] [EOL] [EOL] CHUNK_ROOT_2_1 = [string] * [number] [EOL] smc_handler . add_header ( shard_id = [number] , period = [number] , chunk_root = CHUNK_ROOT_2_1 , private_key = NotaryAccount ( index = [number] ) . private_key , ) [EOL] mine ( w3 = w3 , num_blocks = [number] ) [EOL] [comment] [EOL] assert smc_handler . records_updated_period ( [number] ) == [number] [EOL] assert smc_handler . get_collation_chunk_root ( shard_id = [number] , period = [number] ) == CHUNK_ROOT_2_1 [EOL] [EOL] [EOL] def test_add_header_wrong_period ( smc_handler ) : [comment] [EOL] w3 = smc_handler . web3 [EOL] [EOL] [comment] [EOL] batch_register ( smc_handler , [number] , [number] ) [EOL] fast_forward ( smc_handler , [number] ) [EOL] current_period = w3 . eth . blockNumber // smc_handler . config [ [string] ] [EOL] assert current_period == [number] [EOL] [EOL] BLANK_CHUNK_ROOT = [string] * [number] [EOL] CHUNK_ROOT_1_0 = [string] * [number] [EOL] [comment] [EOL] tx_hash = smc_handler . add_header ( shard_id = [number] , period = [number] , chunk_root = CHUNK_ROOT_1_0 , private_key = NotaryAccount ( index = [number] ) . private_key , ) [EOL] mine ( w3 , [number] ) [EOL] [comment] [EOL] [comment] [EOL] assert smc_handler . records_updated_period ( [number] ) == [number] [EOL] assert smc_handler . get_collation_chunk_root ( shard_id = [number] , period = [number] ) == BLANK_CHUNK_ROOT [EOL] assert len ( w3 . eth . getTransactionReceipt ( tx_hash ) [ [string] ] ) == [number] [EOL] [EOL] [comment] [EOL] tx_hash = smc_handler . add_header ( shard_id = [number] , period = [number] , chunk_root = CHUNK_ROOT_1_0 , private_key = NotaryAccount ( index = [number] ) . private_key , ) [EOL] mine ( w3 , [number] ) [EOL] [comment] [EOL] [comment] [EOL] assert smc_handler . records_updated_period ( [number] ) == [number] [EOL] assert smc_handler . get_collation_chunk_root ( shard_id = [number] , period = [number] ) == BLANK_CHUNK_ROOT [EOL] assert len ( w3 . eth . getTransactionReceipt ( tx_hash ) [ [string] ] ) == [number] [EOL] [EOL] [comment] [EOL] smc_handler . add_header ( shard_id = [number] , period = [number] , chunk_root = CHUNK_ROOT_1_0 , private_key = NotaryAccount ( index = [number] ) . private_key , ) [EOL] mine ( w3 = w3 , num_blocks = [number] ) [EOL] [comment] [EOL] assert smc_handler . records_updated_period ( [number] ) == [number] [EOL] assert smc_handler . get_collation_chunk_root ( shard_id = [number] , period = [number] ) == CHUNK_ROOT_1_0 [EOL] [EOL] [EOL] def test_add_header_wrong_shard ( smc_handler ) : [comment] [EOL] w3 = smc_handler . web3 [EOL] shard_count = smc_handler . config [ [string] ] [EOL] [EOL] [comment] [EOL] batch_register ( smc_handler , [number] , [number] ) [EOL] fast_forward ( smc_handler , [number] ) [EOL] current_period = w3 . eth . blockNumber // smc_handler . config [ [string] ] [EOL] assert current_period == [number] [EOL] [EOL] BLANK_CHUNK_ROOT = [string] * [number] [EOL] CHUNK_ROOT_1_0 = [string] * [number] [EOL] [comment] [EOL] tx_hash = smc_handler . add_header ( shard_id = shard_count + [number] , period = [number] , chunk_root = CHUNK_ROOT_1_0 , private_key = NotaryAccount ( index = [number] ) . private_key , ) [EOL] mine ( w3 , [number] ) [EOL] [comment] [EOL] [comment] [EOL] assert smc_handler . records_updated_period ( [number] ) == [number] [EOL] assert smc_handler . get_collation_chunk_root ( shard_id = [number] , period = [number] ) == BLANK_CHUNK_ROOT [EOL] assert len ( w3 . eth . getTransactionReceipt ( tx_hash ) [ [string] ] ) == [number] [EOL] [EOL] [comment] [EOL] tx_hash = smc_handler . add_header ( shard_id = - [number] , period = [number] , chunk_root = CHUNK_ROOT_1_0 , private_key = NotaryAccount ( index = [number] ) . private_key , ) [EOL] mine ( w3 , [number] ) [EOL] [comment] [EOL] [comment] [EOL] assert smc_handler . records_updated_period ( [number] ) == [number] [EOL] assert smc_handler . get_collation_chunk_root ( shard_id = [number] , period = [number] ) == BLANK_CHUNK_ROOT [EOL] assert len ( w3 . eth . getTransactionReceipt ( tx_hash ) [ [string] ] ) == [number] [EOL] [EOL] [comment] [EOL] smc_handler . add_header ( shard_id = [number] , period = [number] , chunk_root = CHUNK_ROOT_1_0 , private_key = NotaryAccount ( index = [number] ) . private_key , ) [EOL] mine ( w3 = w3 , num_blocks = [number] ) [EOL] [comment] [EOL] assert smc_handler . records_updated_period ( [number] ) == [number] [EOL] assert smc_handler . get_collation_chunk_root ( shard_id = [number] , period = [number] ) == CHUNK_ROOT_1_0 [EOL] [EOL] [EOL] def test_double_add_header ( smc_handler ) : [comment] [EOL] w3 = smc_handler . web3 [EOL] [EOL] [comment] [EOL] batch_register ( smc_handler , [number] , [number] ) [EOL] fast_forward ( smc_handler , [number] ) [EOL] current_period = w3 . eth . blockNumber // smc_handler . config [ [string] ] [EOL] assert current_period == [number] [EOL] [EOL] CHUNK_ROOT_1_0 = [string] * [number] [EOL] smc_handler . add_header ( shard_id = [number] , period = [number] , chunk_root = CHUNK_ROOT_1_0 , private_key = NotaryAccount ( index = [number] ) . private_key , ) [EOL] mine ( w3 = w3 , num_blocks = [number] ) [EOL] [comment] [EOL] assert smc_handler . records_updated_period ( [number] ) == [number] [EOL] assert smc_handler . get_collation_chunk_root ( shard_id = [number] , period = [number] ) == CHUNK_ROOT_1_0 [EOL] [EOL] [comment] [EOL] tx_hash = smc_handler . add_header ( shard_id = [number] , period = [number] , chunk_root = CHUNK_ROOT_1_0 , private_key = NotaryAccount ( index = [number] ) . private_key , ) [EOL] mine ( w3 , [number] ) [EOL] [comment] [EOL] assert len ( w3 . eth . getTransactionReceipt ( tx_hash ) [ [string] ] ) == [number] [EOL] [EOL] [comment] [EOL] tx_hash = smc_handler . add_header ( shard_id = [number] , period = [number] , chunk_root = [string] * [number] , private_key = NotaryAccount ( index = [number] ) . private_key , ) [EOL] mine ( w3 , [number] ) [EOL] [comment] [EOL] [comment] [EOL] assert smc_handler . records_updated_period ( [number] ) == [number] [EOL] assert smc_handler . get_collation_chunk_root ( shard_id = [number] , period = [number] ) == CHUNK_ROOT_1_0 [EOL] assert len ( w3 . eth . getTransactionReceipt ( tx_hash ) [ [string] ] ) == [number] [EOL]	
from typing import Any [EOL] import typing [EOL] from sharding . handler . shard_tracker import ( ShardTracker , ) [EOL] from sharding . handler . utils . web3_utils import ( mine , ) [EOL] [EOL] from tests . contract . utils . common_utils import ( fast_forward , ) [EOL] from tests . contract . utils . notary_account import ( NotaryAccount , ) [EOL] from tests . contract . utils . sample_helper import ( sampling , ) [EOL] [EOL] [EOL] def test_log_emission ( smc_handler ) : [comment] [EOL] w3 = smc_handler . web3 [EOL] shard_tracker = ShardTracker ( w3 = w3 , config = smc_handler . config , shard_id = [number] , smc_handler_address = smc_handler . address , ) [EOL] notary = NotaryAccount ( [number] ) [EOL] [EOL] [comment] [EOL] smc_handler . register_notary ( private_key = notary . private_key ) [EOL] mine ( w3 , [number] ) [EOL] [comment] [EOL] log = shard_tracker . get_register_notary_logs ( ) [ [number] ] [EOL] assert log . index_in_notary_pool == [number] and log . notary == notary . canonical_address [EOL] fast_forward ( smc_handler , [number] ) [EOL] [EOL] [comment] [EOL] CHUNK_ROOT_1_0 = [string] * [number] [EOL] smc_handler . add_header ( shard_id = [number] , period = [number] , chunk_root = CHUNK_ROOT_1_0 , private_key = notary . private_key , ) [EOL] mine ( w3 , [number] ) [EOL] [comment] [EOL] log = shard_tracker . get_add_header_logs ( ) [ [number] ] [EOL] assert log . period == [number] and log . shard_id == [number] and log . chunk_root == CHUNK_ROOT_1_0 [EOL] [EOL] [comment] [EOL] sample_index = [number] [EOL] pool_index = sampling ( smc_handler , [number] ) [ sample_index ] [EOL] smc_handler . submit_vote ( shard_id = [number] , period = [number] , chunk_root = CHUNK_ROOT_1_0 , index = sample_index , private_key = NotaryAccount ( pool_index ) . private_key , ) [EOL] mine ( w3 , [number] ) [EOL] [comment] [EOL] log = shard_tracker . get_submit_vote_logs ( ) [ [number] ] [EOL] assert log . period == [number] and log . shard_id == [number] and log . chunk_root == CHUNK_ROOT_1_0 and log . notary == NotaryAccount ( pool_index ) . canonical_address [EOL] fast_forward ( smc_handler , [number] ) [EOL] [EOL] [comment] [EOL] smc_handler . deregister_notary ( private_key = notary . private_key ) [EOL] mine ( w3 , [number] ) [EOL] [comment] [EOL] log = shard_tracker . get_deregister_notary_logs ( ) [ [number] ] [EOL] assert log . index_in_notary_pool == [number] and log . notary == notary . canonical_address and log . deregistered_period == [number] [EOL] [comment] [EOL] fast_forward ( smc_handler , smc_handler . config [ [string] ] + [number] ) [EOL] [EOL] [comment] [EOL] smc_handler . release_notary ( private_key = notary . private_key ) [EOL] mine ( w3 , [number] ) [EOL] [comment] [EOL] log = shard_tracker . get_release_notary_logs ( ) [ [number] ] [EOL] assert log . index_in_notary_pool == [number] and log . notary == notary . canonical_address [EOL] [EOL] [comment] [EOL] assert shard_tracker . get_register_notary_logs ( from_period = [number] , to_period = [number] ) [EOL] assert shard_tracker . get_add_header_logs ( from_period = [number] , to_period = [number] ) [EOL] assert shard_tracker . get_submit_vote_logs ( from_period = [number] , to_period = [number] ) [EOL] assert shard_tracker . get_deregister_notary_logs ( from_period = [number] , to_period = [number] ) [EOL] assert shard_tracker . get_release_notary_logs ( from_period = ( [number] + smc_handler . config [ [string] ] ) , to_period = ( [number] + smc_handler . config [ [string] ] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Dict [EOL] import typing [EOL] from cytoolz import ( merge , ) [EOL] [EOL] from sharding . contracts . utils . config import ( get_sharding_config , ) [EOL] [EOL] [EOL] def get_sharding_testing_config ( ) : [EOL] REPLACED_PARAMETERS = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , } [EOL] return merge ( get_sharding_config ( ) , REPLACED_PARAMETERS , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0