import unittest [EOL] [EOL] from selenium import webdriver [EOL] [EOL] [EOL] class NewVisitorTest ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . browser = webdriver . Firefox ( ) [EOL] [EOL] def tearDown ( self ) : [EOL] self . browser . quit ( ) [EOL] [EOL] def test_get_browser_title ( self ) : [EOL] self . browser . get ( [string] ) [EOL] self . assertIn ( [string] , self . browser . title ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( warnings = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class CoreConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] [EOL] urlpatterns = [ ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] from django . apps import apps [EOL] from django . contrib . admin import AdminSite [EOL] from django . urls import NoReverseMatch , reverse [EOL] from django . utils . text import capfirst [EOL] [EOL] [EOL] class ExcursionAdmin ( AdminSite ) : [EOL] index_template = [string] [EOL] [EOL] site_header = [string] [EOL] site_title = [string] [EOL] index_title = [string] [EOL] [EOL] def _build_app_dict ( self , request , label = None ) : [EOL] [docstring] [EOL] app_dict = { } [EOL] [EOL] [comment] [EOL] if label : [EOL] models = { } [EOL] for model , model_admin in self . _registry . items ( ) : [EOL] if model . _meta . app_label == label : [EOL] models [ model ] = model_admin [EOL] else : [EOL] models = self . _registry [EOL] [EOL] [comment] [EOL] for model , model_admin in models . items ( ) : [EOL] meta_data = model . _meta [EOL] app_label = meta_data . app_label [EOL] model_name = meta_data . model_name [EOL] [EOL] [comment] [EOL] has_module_perms = model_admin . has_module_permission ( request ) [EOL] if not has_module_perms : [EOL] continue [EOL] [EOL] perms = model_admin . get_model_perms ( request ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if True not in perms . values ( ) : [EOL] continue [EOL] [EOL] model_dict = { [string] : capfirst ( meta_data . verbose_name_plural ) , [string] : meta_data . object_name , [string] : perms , } [EOL] [comment] [EOL] if perms . get ( [string] ) or perms . get ( [string] ) : [EOL] try : [EOL] model_dict [ [string] ] = reverse ( f" [string] { app_label } [string] { model_name } [string] " , current_app = self . name , ) [EOL] except NoReverseMatch : [EOL] pass [EOL] [EOL] if perms . get ( [string] ) : [EOL] try : [EOL] model_dict [ [string] ] = reverse ( f" [string] { app_label } [string] { model_name } [string] " , current_app = self . name ) [EOL] except NoReverseMatch : [EOL] pass [EOL] [EOL] [comment] [EOL] if app_label in app_dict : [EOL] app_dict [ app_label ] [ [string] ] . append ( model_dict ) [EOL] [EOL] [comment] [EOL] else : [EOL] app_dict [ app_label ] = { [string] : apps . get_app_config ( app_label ) . verbose_name , [string] : app_label , [string] : reverse ( [string] , kwargs = { [string] : app_label } , current_app = self . name , ) , [string] : has_module_perms , [string] : [ model_dict ] , } [EOL] [EOL] [comment] [EOL] if label : [EOL] return app_dict . get ( label ) [EOL] [EOL] return app_dict [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0
from typing import Tuple , Type [EOL] import core [EOL] import typing [EOL] [docstring] [EOL] [EOL] from core . admin . ViewableAdmin import ViewableModelAdmin [EOL] from core . views . OtherModelViews import CertificationDetailView , DepartmentDetailView [EOL] from django . contrib . admin import ModelAdmin [EOL] [EOL] [EOL] class CertificationAdmin ( ViewableModelAdmin ) : [EOL] [EOL] [comment] [EOL] list_display = ( [string] , [string] ) [EOL] detail_view_class = CertificationDetailView [EOL] [EOL] [EOL] class DepartmentAdmin ( ViewableModelAdmin ) : [EOL] [EOL] [comment] [EOL] list_display = ( [string] , [string] , [string] ) [EOL] detail_view_class = DepartmentDetailView [EOL] [EOL] [EOL] class AlreadyUploadedImageAdmin ( ModelAdmin ) : [EOL] [EOL] list_display = ( [string] , [string] , [string] , [string] , [string] ) [EOL] list_filter = ( [string] , [string] ) [EOL] readonly_fields = ( [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Type[core.views.OtherModelViews.CertificationDetailView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Type[core.views.OtherModelViews.DepartmentDetailView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0
from typing import OrderedDict , Any , Dict , List , Union , Tuple , Type [EOL] import collections [EOL] import core [EOL] import typing [EOL] import json [EOL] from collections import OrderedDict [EOL] [EOL] from core . admin . ViewableAdmin import ViewableModelAdmin [EOL] from core . forms . GearForms import GearAddForm , GearChangeForm [EOL] from core . views . GearViews import GearDetailView , GearTypeDetailView , GearViewList [EOL] from django . contrib . admin import ModelAdmin [EOL] from django . contrib . admin . utils import quote [EOL] from django . http import HttpResponseRedirect [EOL] from django . urls import reverse [EOL] [EOL] [EOL] class GearAdmin ( ViewableModelAdmin ) : [EOL] [comment] [EOL] list_display = ( [string] , [string] , [string] , [string] , [string] ) [EOL] [EOL] [comment] [EOL] list_filter = ( [string] , [string] , [string] ) [EOL] [EOL] [comment] [EOL] search_fields = ( [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] fieldsets = [ ( [string] , { [string] : ( [string] , ) , [string] : ( [string] , [string] , [string] ) } ) , ( [string] , { [string] : ( [string] , ) , [string] : ( [string] , [string] , [string] ) } , ) , ] [EOL] [EOL] form = GearChangeForm [EOL] add_form = GearAddForm [EOL] [EOL] list_view = GearViewList [EOL] detail_view_class = GearDetailView [EOL] [EOL] def get_fieldsets ( self , request , obj = None ) : [EOL] [docstring] [EOL] fieldsets = super ( GearAdmin , self ) . get_fieldsets ( request , obj = obj ) [EOL] [EOL] [comment] [EOL] if obj : [EOL] fieldsets = fieldsets + [ obj . get_extra_fieldset ( ) ] [comment] [EOL] [EOL] return tuple ( fieldsets ) [EOL] [EOL] def get_form ( self , request , obj = None , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] if obj : [EOL] [comment] [EOL] new_attrs = OrderedDict ( ) [EOL] extended_form = type ( self . form . __name__ , ( self . form , ) , new_attrs ) [EOL] extended_form . authorizer_rfid = request . user . rfid [EOL] [EOL] [comment] [EOL] gear_data = json . loads ( obj . gear_data ) [EOL] extra_fields = obj . geartype . data_fields . all ( ) [EOL] [EOL] [comment] [EOL] for field in extra_fields : [EOL] field_data = gear_data [ field . name ] [EOL] form_field = field . get_field ( ** field_data ) [EOL] extended_form . declared_fields . update ( { field . name : form_field } ) [EOL] return super ( GearAdmin , self ) . get_form ( request , obj = obj , form = extended_form , ** kwargs ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] else : [EOL] [comment] [EOL] new_attrs = OrderedDict ( ) [EOL] add_form = type ( self . add_form . __name__ , ( self . add_form , ) , new_attrs ) [EOL] add_form . authorizer_rfid = request . user . rfid [EOL] return super ( GearAdmin , self ) . get_form ( request , obj = None , form = add_form , ** kwargs ) [EOL] [EOL] def response_add ( self , request , obj , post_url_continue = None ) : [EOL] [docstring] [EOL] change_url = reverse ( f" [string] { obj . _meta . app_label } [string] { obj . _meta . model_name } [string] " , args = ( quote ( obj . pk ) , ) , current_app = self . admin_site . name , ) [EOL] return HttpResponseRedirect ( change_url ) [EOL] [EOL] [EOL] class GearTypeAdmin ( ViewableModelAdmin ) : [EOL] [docstring] [EOL] [EOL] detail_view_class = GearTypeDetailView [EOL] [EOL] def has_change_permission ( self , request , obj = None ) : [EOL] [docstring] [EOL] return False [EOL] [EOL] [EOL] class CustomDataFieldAdmin ( ModelAdmin ) : [EOL] [docstring] [EOL] [EOL] def has_change_permission ( self , request , obj = None ) : [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,typing.Dict[builtins.str,typing.Union[typing.Tuple[builtins.str],typing.Tuple[builtins.str,builtins.str,builtins.str]]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[core.forms.GearForms.GearChangeForm]$ 0 0 0 $typing.Type[core.forms.GearForms.GearAddForm]$ 0 0 0 0 $typing.Type[core.views.GearViews.GearViewList]$ 0 0 0 $typing.Type[core.views.GearViews.GearDetailView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $collections.OrderedDict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Type[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $collections.OrderedDict[typing.Any,typing.Any]$ 0 0 $typing.Type[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Type[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $collections.OrderedDict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Type[typing.Any]$ 0 0 0 0 0 $typing.Type[typing.Any]$ 0 0 0 0 0 0 $typing.Type[typing.Any]$ 0 0 0 $collections.OrderedDict[typing.Any,typing.Any]$ 0 0 $typing.Type[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[core.views.GearViews.GearTypeDetailView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Type , Any , Dict [EOL] import core [EOL] import typing [EOL] from functools import update_wrapper [EOL] from core . views . common import ModelDetailView [EOL] from core . views . ViewList import RestrictedViewList [EOL] from django . contrib . admin import ModelAdmin [EOL] from django . contrib . admin . options import IncorrectLookupParameters , csrf_protect_m [EOL] from django . contrib . admin . views . main import ERROR_FLAG [EOL] from django . contrib . auth import get_permission_codename [EOL] from django . core . exceptions import PermissionDenied [EOL] from django . http import HttpResponseRedirect [EOL] from django . template . response import SimpleTemplateResponse , TemplateResponse [EOL] from django . urls import path [EOL] from django . utils . translation import gettext as _ [EOL] from django . utils . translation import ngettext [EOL] [EOL] [EOL] class ViewableModelAdmin ( ModelAdmin ) : [EOL] [docstring] [EOL] [EOL] list_view = RestrictedViewList [EOL] detail_view_class = ModelDetailView [EOL] [EOL] show_full_result_count = False [EOL] [EOL] def get_detail_view ( self ) : [EOL] [docstring] [EOL] [EOL] def wrap ( view ) : [EOL] def wrapper ( * args , ** kwargs ) : [EOL] return self . admin_site . admin_view ( view ) ( * args , ** kwargs ) [EOL] [EOL] wrapper . model_admin = self [EOL] return update_wrapper ( wrapper , view ) [EOL] [EOL] detail = self . detail_view_class [EOL] detail . field_sets = self . fieldsets [EOL] detail_view = detail . as_view ( ) [EOL] return wrap ( detail_view ) [EOL] [EOL] def has_view_permission ( self , request , obj = None ) : [EOL] opts = self . opts [EOL] codename = get_permission_codename ( [string] , opts ) [EOL] return request . user . has_perm ( f"{ opts . app_label } [string] { codename }" ) [EOL] [EOL] def get_model_perms ( self , request ) : [EOL] [docstring] [EOL] return { [string] : self . has_add_permission ( request ) , [string] : self . has_change_permission ( request ) , [string] : self . has_delete_permission ( request ) , [string] : self . has_view_permission ( request ) , } [EOL] [EOL] def get_changelist ( self , request , ** kwargs ) : [EOL] return self . list_view [EOL] [EOL] @ csrf_protect_m def viewlist_view ( self , request ) : [EOL] [docstring] [EOL] [EOL] opts = self . model . _meta [EOL] app_label = opts . app_label [EOL] if not self . has_view_permission ( request ) : [EOL] raise PermissionDenied [EOL] [EOL] try : [EOL] cl = self . get_changelist_instance ( request ) [EOL] except IncorrectLookupParameters : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if ERROR_FLAG in request . GET : [EOL] return SimpleTemplateResponse ( [string] , { [string] : _ ( [string] ) } ) [EOL] return HttpResponseRedirect ( f"{ request . path } [string] " ) [EOL] [EOL] [comment] [EOL] FormSet = self . get_changelist_formset ( request ) [EOL] formset = cl . formset = FormSet ( queryset = cl . result_list ) [EOL] [EOL] selection_note_all = ngettext ( [string] , [string] , cl . result_count ) [EOL] [EOL] context = dict ( self . admin_site . each_context ( request ) , module_name = str ( opts . verbose_name_plural ) , selection_note = _ ( f" [string] { len ( cl . result_list ) } [string] " ) , selection_note_all = selection_note_all % { [string] : cl . result_count } , title = cl . title , is_popup = cl . is_popup , to_field = cl . to_field , cl = cl , has_add_permission = self . has_add_permission ( request ) , opts = cl . opts , actions_on_top = self . actions_on_top , actions_on_bottom = self . actions_on_bottom , actions_selection_counter = self . actions_selection_counter , preserved_filters = self . get_preserved_filters ( request ) , ) [EOL] [EOL] request . current_app = self . admin_site . name [EOL] [EOL] return TemplateResponse ( request , self . change_list_template or [ f" [string] { app_label } [string] { opts . model_name } [string] " , f" [string] { app_label } [string] " , [string] , ] , context , ) [EOL] [EOL] @ csrf_protect_m def changelist_view ( self , request , extra_context = None ) : [EOL] [docstring] [EOL] if self . has_change_permission ( request ) : [EOL] return super ( ViewableModelAdmin , self ) . changelist_view ( request , extra_context = extra_context ) [EOL] else : [EOL] return self . viewlist_view ( request ) [EOL] [EOL] def get_urls ( self ) : [EOL] [docstring] [EOL] [EOL] app = self . model . _meta . app_label [EOL] model = self . model . _meta . model_name [EOL] [EOL] [comment] [EOL] view_url = [ path ( [string] , self . get_detail_view ( ) , name = f"{ app } [string] { model } [string] " ) ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] urlpatterns = super ( ViewableModelAdmin , self ) . get_urls ( ) [EOL] return view_url + urlpatterns [EOL] [EOL] def response_change ( self , request , obj ) : [EOL] [docstring] [EOL] [EOL] request . path = request . path . replace ( [string] , [string] ) [EOL] return super ( ViewableModelAdmin , self ) . response_change ( request , obj ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[core.views.ViewList.RestrictedViewList]$ 0 0 0 $typing.Type[core.views.common.ModelDetailView]$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[core.views.common.ModelDetailView]$ 0 0 0 0 0 $typing.Type[core.views.common.ModelDetailView]$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Type[core.views.common.ModelDetailView]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Type [EOL] import core [EOL] import typing [EOL] from core . admin . ViewableAdmin import ViewableModelAdmin [EOL] from core . views . TransactionViews import TransactionDetailView , TransactionListView [EOL] [EOL] [EOL] class TransactionAdmin ( ViewableModelAdmin ) : [EOL] list_display = ( [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] list_filter = ( [string] , ) [EOL] search_fields = ( [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] list_view = TransactionListView [EOL] detail_view_class = TransactionDetailView [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( TransactionAdmin , self ) . __init__ ( * args , ** kwargs ) [EOL] self . list_display_links = [ ] [EOL] [EOL] def has_add_permission ( self , request ) : [EOL] [docstring] [EOL] return False [EOL] [EOL] def has_delete_permission ( self , request , obj = None ) : [EOL] [docstring] [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[core.views.TransactionViews.TransactionListView]$ 0 0 0 $typing.Type[core.views.TransactionViews.TransactionDetailView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Any , Dict , List , Union , Tuple , Type [EOL] import core [EOL] import typing [EOL] from functools import update_wrapper [EOL] [EOL] from core . admin . ViewableAdmin import ViewableModelAdmin [EOL] from core . forms . MemberForms import MemberChangeForm , MemberCreationForm , StafferCreateForm , StafferChangeForm [EOL] from core . views . MemberViews import ( MemberDetailView , MemberFinishView , MemberListView , StafferDetailView , ResendIntroEmailView ) [EOL] from core . models . MemberModels import Member [EOL] from django . contrib . auth . admin import UserAdmin as BaseUserAdmin [EOL] from django . core . exceptions import PermissionDenied [EOL] from django . http import HttpResponseRedirect [EOL] from django . urls import path , reverse [EOL] [EOL] [EOL] [comment] [EOL] class MemberAdmin ( ViewableModelAdmin , BaseUserAdmin ) : [EOL] [comment] [EOL] form = MemberChangeForm [EOL] add_form = MemberCreationForm [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] list_display = ( [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] list_filter = ( [string] , ) [EOL] [EOL] add_fieldsets = ( ( None , { [string] : ( [string] , ) , [string] : ( [string] , [string] , [string] ) } , ) , ( [string] , { [string] : ( [string] , ) , [string] : ( [string] , [string] ) } ) , ) [EOL] fieldsets = ( ( [string] , { [string] : ( [string] , ) , [string] : ( [string] , [string] ) } ) , ( [string] , { [string] : ( [string] , ) , [string] : ( [string] , [string] , [string] ) } , ) , ( [string] , { [string] : ( [string] , ) , [string] : ( [string] , [string] , [string] ) } , ) , ) [EOL] editable_profile_fieldsets = ( ( [string] , { [string] : ( [string] , ) , [string] : ( [string] , [string] , [string] , [string] ) , } , ) , ) [EOL] search_fields = ( [string] , [string] , [string] , [string] , [string] ) [EOL] ordering = ( [string] , ) [EOL] filter_horizontal = ( ) [EOL] list_view = MemberListView [EOL] detail_view_class = MemberDetailView [EOL] [EOL] def get_urls ( self ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] urls = super ( ) . get_urls ( ) [EOL] [EOL] [comment] [EOL] my_urls = [ path ( [string] , self . wrap ( MemberFinishView . as_view ( ) ) , name = [string] , ) , path ( [string] , self . wrap ( ResendIntroEmailView . as_view ( ) ) , name = [string] , ) ] [EOL] [EOL] [comment] [EOL] return my_urls + urls [EOL] [EOL] [comment] [EOL] def wrap ( self , view ) : [EOL] def wrapper ( * args , ** kwargs ) : [EOL] return self . admin_site . admin_view ( view ) ( * args , ** kwargs ) [EOL] [EOL] wrapper . model_admin = self [EOL] return update_wrapper ( wrapper , view ) [EOL] [EOL] def response_add ( self , request , obj , post_url_continue = None ) : [EOL] [docstring] [EOL] if [string] not in request . POST and [string] not in request . POST : [EOL] return HttpResponseRedirect ( reverse ( [string] , kwargs = { [string] : obj . pk } ) ) [EOL] else : [EOL] return super ( MemberAdmin , self ) . response_add ( request , obj , post_url_continue ) [EOL] [EOL] @ staticmethod def can_edit_profile ( request , member = None ) : [EOL] [docstring] [EOL] if not member : [EOL] return False [comment] [EOL] else : [EOL] current_user = request . user [EOL] is_self = current_user . primary_key == member . primary_key [EOL] return is_self or current_user . has_permission ( [string] ) [EOL] [EOL] @ staticmethod def can_edit_all_data ( request ) : [EOL] return request . user . has_permission ( [string] ) [EOL] [EOL] def has_view_or_change_permission ( self , request , obj = None ) : [EOL] return self . has_change_permission ( request , obj = obj ) or self . has_view_permission ( request , obj = obj ) [EOL] [EOL] def has_change_permission ( self , request , obj = None ) : [EOL] if obj and obj . _meta . model_name == [string] : [EOL] return self . can_edit_profile ( request , obj ) [EOL] else : [EOL] return super ( MemberAdmin , self ) . has_change_permission ( request , obj = obj ) [EOL] [EOL] def change_view ( self , request , object_id , form_url = [string] , extra_context = None ) : [EOL] [docstring] [EOL] if request . method == [string] and not self . can_edit_all_data ( request ) : [EOL] [comment] [EOL] [comment] [EOL] pass [EOL] [EOL] return super ( MemberAdmin , self ) . change_view ( request , object_id , form_url = form_url , extra_context = extra_context ) [EOL] [EOL] def get_fieldsets ( self , request , obj = None ) : [EOL] [docstring] [EOL] [EOL] can_edit_all_data = self . can_edit_all_data ( request ) [EOL] can_edit_profile = self . can_edit_profile ( request , obj ) [EOL] [EOL] if not obj : [EOL] [comment] [EOL] fieldsets = self . add_fieldsets [EOL] elif can_edit_all_data : [EOL] [comment] [EOL] fieldsets = self . fieldsets [EOL] elif can_edit_profile : [EOL] [comment] [EOL] fieldsets = self . editable_profile_fieldsets [EOL] else : [EOL] raise PermissionDenied [EOL] [EOL] return fieldsets [EOL] [EOL] def get_readonly_fields ( self , request , obj = None ) : [EOL] [docstring] [EOL] if not request . user . has_permission ( [string] ) : [EOL] return ( [string] , ) [EOL] else : [EOL] return ( ) [EOL] [EOL] [EOL] class StafferAdmin ( ViewableModelAdmin ) : [EOL] detail_view_class = StafferDetailView [EOL] [EOL] form = StafferChangeForm [EOL] add_form = StafferCreateForm [EOL] [EOL] ordering = ( [string] , ) [EOL] staffer_readonly = ( [string] , [string] , [string] , [string] , [string] ) [EOL] search_fields = ( [string] , [string] , [string] , [string] , [string] ) [EOL] list_display = ( [string] , [string] , [string] , [string] , [string] ) [EOL] [EOL] def get_form ( self , request , obj = None , ** kwargs ) : [EOL] [docstring] [EOL] defaults = { } [EOL] if obj is None : [EOL] defaults [ [string] ] = self . add_form [EOL] defaults . update ( kwargs ) [EOL] return super ( ) . get_form ( request , obj , ** defaults ) [EOL] [EOL] def get_readonly_fields ( self , request , obj = None ) : [EOL] if not request . user . has_permission ( [string] ) : [EOL] return self . staffer_readonly [EOL] else : [EOL] return ( ) [EOL] [EOL] def has_change_permission ( self , request , obj = None ) : [EOL] can_change = request . user . has_permission ( [string] ) [EOL] is_self = obj is not None and request . user . primary_key == obj . member . primary_key [EOL] return is_self or can_change [EOL] [EOL] def delete_model ( self , request , obj ) : [EOL] obj . member . promote_to_active ( ) [comment] [EOL] super ( StafferAdmin , self ) . delete_model ( request , obj )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[core.views.MemberViews.MemberListView]$ 0 0 0 $typing.Type[core.views.MemberViews.MemberDetailView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,typing.Dict[builtins.str,typing.Union[typing.Tuple[builtins.str],typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]]]]]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,typing.Dict[builtins.str,typing.Union[typing.Tuple[builtins.str],typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]]]]]$ 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,typing.Dict[builtins.str,typing.Union[typing.Tuple[builtins.str],typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]]]]]$ 0 0 $typing.Any$ 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,typing.Dict[builtins.str,typing.Union[typing.Tuple[builtins.str],typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,typing.Dict[builtins.str,typing.Union[typing.Tuple[builtins.str],typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[core.views.MemberViews.StafferDetailView]$ 0 0 0 0 $typing.Type[core.forms.MemberForms.StafferChangeForm]$ 0 0 0 $typing.Type[core.forms.MemberForms.StafferCreateForm]$ 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import List , Type , Any [EOL] import core [EOL] import typing [EOL] from core . models . DocumentModel import Document [EOL] from django . contrib . auth . decorators import login_required [EOL] from django . urls import reverse_lazy [EOL] from django . views . generic . edit import CreateView [EOL] [EOL] [EOL] class DocumentCreateView ( CreateView ) : [EOL] model = Document [EOL] fields = [ [string] ] [EOL] success_url = reverse_lazy ( [string] ) [EOL] [EOL] def get_context_data ( self , ** kwargs ) : [EOL] context = super ( ) . get_context_data ( ** kwargs ) [EOL] documents = Document . objects . all ( ) [EOL] context [ [string] ] = documents [EOL] return context [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[core.views.DocumentCreateView.DocumentCreateView]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.Type[core.views.DocumentCreateView.DocumentCreateView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0
	0
from typing import Type , Any [EOL] import core [EOL] import typing [EOL] from django . contrib . admin . utils import quote [EOL] from django . contrib . admin . views . main import ChangeList [EOL] from django . contrib . auth . mixins import UserPassesTestMixin [EOL] from django . urls import reverse [EOL] [EOL] [EOL] class ViewList ( ChangeList ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ViewList , self ) . __init__ ( * args , ** kwargs ) [EOL] self . title = f" [string] { self . opts . verbose_name } [string] " [EOL] [EOL] def url_for_result ( self , result ) : [EOL] pk = getattr ( result , self . pk_attname ) [EOL] return reverse ( [string] . format ( self . opts . app_label , self . opts . model_name ) , args = ( quote ( pk ) , ) , current_app = self . model_admin . admin_site . name , ) [EOL] [EOL] [EOL] class RestrictedViewList ( UserPassesTestMixin , ViewList ) : [EOL] [docstring] [EOL] [EOL] raise_exception = True [EOL] permission_denied_message = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] restriction_filters = { } [EOL] [EOL] def __init__ ( self , request , * args , ** kwargs ) : [EOL] [docstring] [EOL] self . request = request [EOL] super ( RestrictedViewList , self ) . __init__ ( request , * args , ** kwargs ) [EOL] [EOL] def test_func ( self ) : [EOL] [docstring] [EOL] return True [EOL] [EOL] def can_view_all ( self ) : [EOL] [docstring] [EOL] return True [EOL] [EOL] def set_restriction_filters ( self ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] def get_queryset ( self , request ) : [EOL] [EOL] [comment] [EOL] self . restriction_filters = { } [EOL] queryset = super ( RestrictedViewList , self ) . get_queryset ( request ) [EOL] [EOL] [comment] [EOL] if not self . can_view_all ( ) : [EOL] self . set_restriction_filters ( ) [EOL] queryset = queryset . filter ( ** self . restriction_filters ) [EOL] [EOL] return queryset [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0
import builtins [EOL] from typing import Literal , Any , List , Union , Type [EOL] import core [EOL] import typing [EOL] import typing_extensions [EOL] from django . urls import reverse [EOL] from django . urls . exceptions import NoReverseMatch [EOL] from django . utils import timezone [EOL] from django . utils . safestring import mark_safe [EOL] from django . views . generic import DetailView [EOL] from excsystem . settings import WEB_BASE [EOL] [EOL] [EOL] def get_default_context ( view , context ) : [EOL] [docstring] [EOL] [EOL] is_add = True if view . object else False [EOL] [EOL] user = view . request . user [EOL] obj_name = view . model . _meta . model_name [EOL] [EOL] context [ [string] ] = timezone . now ( ) [EOL] context [ [string] ] = view . model . _meta [EOL] context [ [string] ] = view . model . _meta . app_label [EOL] context [ [string] ] = False [EOL] context [ [string] ] = is_add [EOL] context [ [string] ] = user . has_permission ( f" [string] { obj_name }" ) [EOL] context [ [string] ] = user . has_permission ( f" [string] { obj_name }" ) [EOL] context [ [string] ] = user . has_permission ( f" [string] { obj_name }" ) [EOL] context [ [string] ] = user . has_permission ( f" [string] { obj_name }" ) [EOL] [EOL] [comment] [EOL] context [ [string] ] = False [EOL] context [ [string] ] = False [EOL] [EOL] return context [EOL] [EOL] [EOL] class ModelDetailView ( DetailView ) : [EOL] [EOL] template_name = [string] [EOL] field_sets = None [EOL] [EOL] def get_html_repr ( self , obj ) : [EOL] [docstring] [EOL] [EOL] if self . field_sets : [EOL] field_sets = self . field_sets [EOL] else : [EOL] field_sets = self . get_field_sets ( obj ) [EOL] [EOL] lines = [ ] [EOL] lines . append ( [string] ) [EOL] for set in field_sets : [EOL] set_name = set [ [number] ] [EOL] lines . append ( f" [string] { set_name } [string] " ) [EOL] lines . append ( [string] ) [EOL] fields = set [ [number] ] [ [string] ] [EOL] for field_name in fields : [EOL] lines . append ( [string] ) [EOL] lines . append ( [string] ) [EOL] lines . append ( f" [string] { field_name } [string] " ) [EOL] value = getattr ( obj , field_name ) [EOL] simple_line = f" [string] { str ( value ) } [string] " [EOL] if hasattr ( value , [string] ) : [comment] [EOL] app = value . _meta . app_label [EOL] model = value . _meta . model_name [EOL] try : [EOL] link = WEB_BASE + reverse ( f" [string] { app } [string] { model } [string] " , kwargs = { [string] : value . pk } ) [EOL] except NoReverseMatch : [EOL] lines . append ( simple_line ) [EOL] else : [EOL] lines . append ( f' [string] { link } [string] { str ( value ) } [string] ' ) [EOL] else : [EOL] lines . append ( simple_line ) [EOL] lines . append ( [string] ) [EOL] lines . append ( [string] ) [EOL] [EOL] lines . append ( [string] ) [EOL] [EOL] html = mark_safe ( [string] . join ( lines ) ) [EOL] return html [EOL] [EOL] @ staticmethod def get_field_sets ( obj ) : [EOL] field_names = [ ] [EOL] for field in obj . _meta . fields : [EOL] field_names . append ( field . name ) [EOL] return ( ( f" [string] { obj . _meta . model_name } [string] " , { [string] : field_names } ) , ) [EOL] [EOL] def get_context_data ( self , ** kwargs ) : [EOL] context = super ( ) . get_context_data ( ** kwargs ) [EOL] context = get_default_context ( self , context ) [EOL] context [ [string] ] = self . get_html_repr ( kwargs [ [string] ] ) [EOL] return context [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from django . test import TestCase [EOL] from django . urls import reverse [EOL] [EOL] [EOL] class ViewTestCase ( TestCase ) : [EOL] def assertStatusCode ( self , response , code = [number] ) : [EOL] self . assertEqual ( response . status_code , code ) [EOL] [EOL] [EOL] class SmokeTest ( ViewTestCase ) : [EOL] [docstring] [EOL] [EOL] def test_home_page_status_code ( self ) : [EOL] response = self . client . get ( [string] , follow = True ) [EOL] self . assertStatusCode ( response ) [EOL] [EOL] def test_view_url_by_name ( self ) : [EOL] response = self . client . get ( reverse ( [string] ) , follow = True ) [EOL] self . assertStatusCode ( response ) [EOL] [EOL] def test_view_uses_correct_template ( self ) : [EOL] response = self . client . get ( reverse ( [string] ) , follow = True ) [EOL] self . assertTemplateUsed ( response , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0
	0
from storages . backends . s3boto3 import S3Boto3Storage [EOL] [EOL] [EOL] class MediaStorage ( S3Boto3Storage ) : [EOL] location = [string] [EOL] default_acl = [string] [EOL] file_overwrite = False [EOL] custom_domain = False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0
from typing import Optional , List , Union , Dict [EOL] import typing [EOL] import datetime [EOL] import os [EOL] from datetime import timedelta [EOL] [EOL] [comment] [EOL] BASE_DIR = os . path . dirname ( os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) ) [EOL] [EOL] [EOL] MEDIA_URL = [string] [EOL] DEFAULT_IMG = [string] [EOL] [EOL] [comment] [EOL] SECRET_KEY = os . environ . get ( [string] , [string] ) [EOL] [EOL] SITE_ID = [number] [EOL] SITE_NAME = [string] [EOL] EXC_EMAIL = [string] [EOL] [EOL] GEAR_EXPIRE_TIME = timedelta ( days = [number] ) [EOL] [EOL] ALLOWED_HOSTS = [ [string] ] [EOL] [EOL] STATICFILES_DIRS = [ os . path . join ( BASE_DIR , [string] ) ] [EOL] [EOL] INSTALLED_APPS = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] MIDDLEWARE = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] ROOT_URLCONF = [string] [EOL] [EOL] TEMPLATES = [ { [string] : [string] , [string] : [ os . path . join ( BASE_DIR , [string] ) , os . path . join ( BASE_DIR , [string] ) , os . path . join ( BASE_DIR , [string] ) , os . path . join ( BASE_DIR , [string] ) , ] , [string] : True , [string] : { [string] : [ [string] , [string] , [string] , [string] , ] } , } ] [EOL] [EOL] WSGI_APPLICATION = [string] [EOL] [EOL] AUTH_USER_MODEL = [string] [EOL] [EOL] AUTH_PASSWORD_VALIDATORS = [ { [string] : [string] } , { [string] : [string] } , { [string] : [string] } , ] [EOL] [EOL] SESSION_EXPIRE_AT_BROWSER_CLOSE = True [EOL] [EOL] PHONENUMBER_DB_FORMAT = [string] [EOL] PHONENUMBER_DEFAULT_FORMAT = [string] [EOL] PHONENUMBER_DEFAULT_REGION = [string] [EOL] [EOL] LANGUAGE_CODE = [string] [EOL] [EOL] TIME_ZONE = [string] [EOL] [EOL] USE_I18N = True [EOL] [EOL] USE_L10N = True [EOL] [EOL] USE_TZ = True [EOL] [EOL] LOGIN_URL = [string] [EOL] LOGIN_REDIRECT_URL = [string] [EOL] LOGOUT_REDIRECT_URL = [string] [EOL] [EOL] LISTSERV_USERNAME = os . environ . get ( [string] ) [EOL] LISTSERV_PASSWORD = os . environ . get ( [string] ) [EOL] LISTSERV_FORM_ADDRESS = os . environ . get ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $datetime.timedelta$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.List[builtins.str]],typing.List[builtins.str],builtins.bool,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ApiConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class KioskConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL]	0 0
[docstring] [EOL]	0 0
[comment] [EOL]	0 0
	0
	0
	0
	0
	0
[docstring] [EOL] [EOL] import os [EOL] import shutil [EOL] [EOL] import django [EOL] [EOL] [comment] [EOL] from django . core . management import call_command [EOL] [EOL] [comment] [EOL] basepath = os . getcwd ( ) [EOL] [EOL] [comment] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] django . setup ( ) [EOL] try : [EOL] os . remove ( os . path . join ( basepath , [string] ) ) [EOL] except FileNotFoundError : [EOL] print ( [string] ) [EOL] [EOL] [EOL] [comment] [EOL] call_command ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] import os [EOL] import django [EOL] [EOL] print ( f" [string] { os . environ . get ( [string] ) } [string] " ) [EOL] if os . environ . get ( [string] ) == [string] : [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] elif os . environ . get ( [string] ) == [string] : [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] elif os . environ . get ( [string] ) == [string] : [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] elif os . environ . get ( [string] ) == [string] : [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] else : [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] django . setup ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] [EOL] from . import views [EOL] [EOL] app_name = [string] [EOL] urlpatterns = [ path ( [string] , views . index , name = [string] ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class FrontPageConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from django . shortcuts import render [EOL] [EOL] [EOL] def index ( request ) : [EOL] return render ( request , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . test import SimpleTestCase [EOL] [EOL] [EOL] class HomePageTests ( SimpleTestCase ) : [EOL] def test_home_page_status_code ( self ) : [EOL] response = self . client . get ( [string] ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] [EOL] def test_home_contains_correct_html ( self ) : [EOL] response = self . client . get ( [string] ) [EOL] self . assertContains ( response , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0
	0