[comment] [EOL] [EOL] from typing import Tuple , List , Type [EOL] import typing [EOL] import locustfile [EOL] import logging [EOL] import json [EOL] import logging [EOL] import random [EOL] import uuid [EOL] from datetime import datetime [EOL] from locust import HttpLocust , TaskSet , task [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] SENTENCES = [ ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ( [string] , [string] , [string] , [string] , [string] ) , ] [EOL] [EOL] [EOL] def get_sample_message ( ) : [EOL] created_at = int ( datetime . now ( ) . timestamp ( ) ) [EOL] return { [string] : [ ] , [string] : [string] , [string] : created_at , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : str ( uuid . uuid4 ( ) ) , [string] : False , [string] : [string] . join ( [ random . choice ( i ) for i in SENTENCES ] ) , [string] : [string] } [EOL] [EOL] [EOL] class SaucerbotTaskSet ( TaskSet ) : [EOL] @ task ( [number] ) def groume_message ( self ) : [EOL] self . client . post ( [string] , json . dumps ( get_sample_message ( ) ) ) [EOL] [EOL] [EOL] class SaucerbotLocust ( HttpLocust ) : [EOL] task_set = SaucerbotTaskSet [EOL] min_wait = [number] [EOL] max_wait = [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[locustfile.SaucerbotTaskSet]$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import logging [EOL] import logging [EOL] [EOL] from django . core . management import execute_from_command_line [EOL] [EOL] from saucerbot . groupme . management . commands . remind import LIKE_IF_POST [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def test_like_if ( bot ) : [EOL] execute_from_command_line ( [ [string] , [string] , [string] , [string] , [string] ] ) [EOL] [EOL] messages = bot . group . messages . all ( ) [EOL] assert len ( messages ) <= [number] [EOL] assert messages [ [number] ] . text == LIKE_IF_POST [EOL] if len ( messages ) == [number] : [EOL] assert [string] in messages [ [number] ] . text [EOL] [EOL] [EOL] def test_whos_coming ( bot , gmi ) : [EOL] from lowerpines . endpoints . member import Member [EOL] [EOL] test_user1 = Member ( gmi , bot . group . group_id , [string] , [string] ) [EOL] test_user2 = Member ( gmi , bot . group . group_id , [string] , [string] ) [EOL] test_user3 = Member ( gmi , bot . group . group_id , [string] , [string] ) [EOL] [EOL] bot . group . add_member ( test_user1 ) [EOL] bot . group . add_member ( test_user2 ) [EOL] bot . group . add_member ( test_user3 ) [EOL] [EOL] [comment] [EOL] bot . post_message ( LIKE_IF_POST ) [EOL] bot . group . messages . all ( ) [ [number] ] . like_as ( [string] ) [EOL] bot . group . messages . all ( ) [ [number] ] . like_as ( [string] ) [EOL] bot . group . messages . all ( ) [ [number] ] . like_as ( [string] ) [EOL] [EOL] execute_from_command_line ( [ [string] , [string] , [string] , [string] , [string] ] ) [EOL] [EOL] assert bot . group . messages . count == [number] [EOL] assert bot . group . messages . all ( ) [ [number] ] . text == LIKE_IF_POST [EOL] assert bot . group . messages . all ( ) [ [number] ] . text == [string] [EOL] assert bot . group . messages . all ( ) [ [number] ] . text == [string] [EOL] [EOL] [EOL] def test_whos_coming_no_users ( bot ) : [EOL] [comment] [EOL] bot . post_message ( LIKE_IF_POST ) [EOL] [EOL] execute_from_command_line ( [ [string] , [string] , [string] , [string] , [string] ] ) [EOL] [EOL] assert bot . group . messages . count == [number] [EOL] assert bot . group . messages . all ( ) [ [number] ] . text == LIKE_IF_POST [EOL] assert bot . group . messages . all ( ) [ [number] ] . text . startswith ( [string] ) [EOL] [EOL] [EOL] def test_whos_coming_single_user ( bot , gmi ) : [EOL] from lowerpines . endpoints . member import Member [EOL] [EOL] test_user1 = Member ( gmi , bot . group . group_id , [string] , [string] ) [EOL] [EOL] bot . group . add_member ( test_user1 ) [EOL] [EOL] [comment] [EOL] bot . post_message ( LIKE_IF_POST ) [EOL] bot . group . messages . all ( ) [ [number] ] . like_as ( [string] ) [EOL] [EOL] execute_from_command_line ( [ [string] , [string] , [string] , [string] , [string] ] ) [EOL] [EOL] assert bot . group . messages . count == [number] [EOL] assert bot . group . messages . all ( ) [ [number] ] . text == LIKE_IF_POST [EOL] assert bot . group . messages . all ( ) [ [number] ] . text . startswith ( [string] ) [EOL] assert bot . group . messages . all ( ) [ [number] ] . text == [string] [EOL] [EOL] [EOL] def test_whos_coming_missing_users ( bot ) : [EOL] [comment] [EOL] bot . post_message ( LIKE_IF_POST ) [EOL] bot . group . messages . all ( ) [ [number] ] . like_as ( [string] ) [EOL] bot . group . messages . all ( ) [ [number] ] . like_as ( [string] ) [EOL] bot . group . messages . all ( ) [ [number] ] . like_as ( [string] ) [EOL] [EOL] execute_from_command_line ( [ [string] , [string] , [string] , [string] , [string] ] ) [EOL] [EOL] assert bot . group . messages . count == [number] [EOL] assert bot . group . messages . all ( ) [ [number] ] . text == LIKE_IF_POST [EOL] assert bot . group . messages . all ( ) [ [number] ] . text == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict , Optional , List [EOL] import saucerbot [EOL] import builtins [EOL] import bs4 [EOL] import tests [EOL] import typing [EOL] from saucerbot . utils . parsers import HtmlContentProvider , NewArrivalsParser [EOL] from saucerbot . utils . bridgestone import get_event_time_helper , get_all_events , get_events_for_date , get_event_time [EOL] from saucerbot . utils . bridgestone import bridgestone_events_url [EOL] from saucerbot . utils . base import get_new_arrivals [EOL] from typing import Dict , Any [EOL] from bs4 import BeautifulSoup [EOL] import arrow [EOL] [EOL] [EOL] class LocalFileContentProvider ( HtmlContentProvider ) : [EOL] [EOL] def __init__ ( self , file_path ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] self . file_path = file_path [EOL] [EOL] def get_content ( self ) : [EOL] with open ( self . file_path , [string] ) as fp : [EOL] content = [string] . join ( fp . readlines ( ) ) [EOL] return BeautifulSoup ( content , [string] ) [EOL] [EOL] [EOL] def create_event ( name , month , date ) : [EOL] return { [string] : name , [string] : arrow . get ( [number] , month , date ) } [EOL] [EOL] [EOL] def event_equals ( expected , actual ) : [EOL] if expected [ [string] ] == actual [ [string] ] : [EOL] date0 = expected [ [string] ] [EOL] date1 = actual [ [string] ] [EOL] return date0 . day == date1 . day and date0 . month == date1 . month [EOL] return False [EOL] [EOL] [EOL] expected_events = [ create_event ( [string] , [number] , [number] ) , create_event ( [string] , [number] , [number] ) , create_event ( [string] , [number] , [number] ) , create_event ( [string] , [number] , [number] ) , create_event ( [string] , [number] , [number] ) , create_event ( [string] , [number] , [number] ) , create_event ( [string] , [number] , [number] ) , create_event ( [string] , [number] , [number] ) , create_event ( [string] , [number] , [number] ) , create_event ( [string] , [number] , [number] ) , create_event ( [string] , [number] , [number] ) , create_event ( [string] , [number] , [number] ) ] [EOL] [EOL] [EOL] def test_event_list_parsing ( ) : [EOL] provider = LocalFileContentProvider ( [string] ) [EOL] events_list = get_all_events ( provider ) [EOL] [EOL] assert len ( expected_events ) == len ( events_list ) [EOL] for i in range ( [number] , len ( expected_events ) ) : [EOL] assert event_equals ( expected_events [ i ] , events_list [ i ] ) [EOL] [EOL] assert all ( [ ev [ [string] ] for ev in events_list ] ) [EOL] [EOL] sample_date = arrow . get ( [number] , [number] , [number] ) [EOL] dated_events = get_events_for_date ( events_list , sample_date ) [EOL] assert len ( dated_events ) == [number] [EOL] assert event_equals ( expected_events [ [number] ] , dated_events [ [number] ] ) [EOL] [EOL] [EOL] def test_event_time_parsing ( ) : [EOL] provider = LocalFileContentProvider ( [string] ) [EOL] event_name = [string] [comment] [EOL] extracted = get_event_time_helper ( provider , event_name ) [EOL] [EOL] assert extracted == [string] [EOL] [EOL] [EOL] def test_bridgestone_site_structure ( ) : [EOL] [docstring] [EOL] all_events = get_all_events ( HtmlContentProvider ( bridgestone_events_url ) ) [EOL] assert len ( all_events ) > [number] [EOL] assert all ( [ ev [ [string] ] for ev in all_events ] ) [EOL] assert all ( [ ev [ [string] ] for ev in all_events ] ) [EOL] assert all ( [ ev [ [string] ] for ev in all_events ] ) [EOL] [EOL] [comment] [EOL] selected_event = all_events [ [number] ] [EOL] retrieved_time = get_event_time ( selected_event ) [EOL] assert retrieved_time [EOL] [EOL] [EOL] expected_beers = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] def test_new_arrival_parser ( ) : [EOL] provider = LocalFileContentProvider ( [string] ) [EOL] parser = NewArrivalsParser ( provider ) [EOL] beers = [ b [ [string] ] for b in parser . parse ( ) ] [EOL] assert beers == expected_beers [EOL] [EOL] [EOL] def test_saucer_site_structure ( ) : [EOL] [docstring] [EOL] arrivals = get_new_arrivals ( [string] ) . split ( [string] ) [comment] [EOL] assert len ( arrivals ) > [number] [EOL] assert all ( arrivals ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $bs4.BeautifulSoup$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any , Dict , Set [EOL] import saucerbot [EOL] import typing [EOL] import pytest [EOL] from django . http import HttpRequest [EOL] from rest_framework . request import Request [EOL] [EOL] from saucerbot . groupme . handlers import registry [EOL] from saucerbot . groupme . serializers import BotSerializer [EOL] [EOL] [EOL] @ registry . handler ( ) def handler_test1 ( bot ) : [EOL] return False [EOL] [EOL] [EOL] @ registry . handler ( ) def handler_test2 ( bot ) : [EOL] return False [EOL] [EOL] [EOL] @ registry . handler ( ) def handler_test3 ( bot ) : [EOL] return False [EOL] [EOL] [EOL] @ registry . handler ( ) def handler_test4 ( bot ) : [EOL] return False [EOL] [EOL] [EOL] def ensure_post ( data , ret ) : [EOL] def callback ( request , context ) : [EOL] assert request . json ( ) == data [EOL] [EOL] return ret [EOL] [EOL] return callback [EOL] [EOL] [EOL] def test_bot_create_invalid ( bot , gmi ) : [EOL] from lowerpines . endpoints . group import Group [EOL] [EOL] group = Group ( gmi , name = [string] ) [EOL] group . save ( ) [EOL] [EOL] fake_request = Request ( HttpRequest ( ) ) [EOL] fake_request . user = bot . owner [EOL] [EOL] serializer = BotSerializer ( data = { } , context = { [string] : fake_request } ) [EOL] [EOL] assert not serializer . is_valid ( ) [EOL] assert set ( serializer . errors . keys ( ) ) == { [string] , [string] } [EOL] [EOL] serializer = BotSerializer ( data = { [string] : [string] } , context = { [string] : fake_request } ) [EOL] [EOL] assert not serializer . is_valid ( ) [EOL] assert set ( serializer . errors . keys ( ) ) == { [string] } [EOL] [EOL] serializer = BotSerializer ( data = { [string] : [string] } , context = { [string] : fake_request } ) [EOL] [EOL] assert not serializer . is_valid ( ) [EOL] assert set ( serializer . errors . keys ( ) ) == { [string] , [string] } [EOL] [EOL] serializer = BotSerializer ( data = { [string] : group . group_id } , context = { [string] : fake_request } ) [EOL] [EOL] print ( Group . get_all ( gmi ) ) [EOL] [EOL] assert not serializer . is_valid ( ) [EOL] assert set ( serializer . errors . keys ( ) ) == { [string] } [EOL] [EOL] serializer = BotSerializer ( data = { [string] : [string] , [string] : [string] } , context = { [string] : fake_request } ) [EOL] [EOL] assert not serializer . is_valid ( ) [EOL] assert set ( serializer . errors . keys ( ) ) == { [string] } [EOL] [EOL] serializer = BotSerializer ( data = { [string] : [string] , [string] : group . group_id } , context = { [string] : fake_request } ) [EOL] [EOL] assert not serializer . is_valid ( ) [EOL] assert set ( serializer . errors . keys ( ) ) == { [string] } [EOL] [EOL] [EOL] def test_invalid_group ( bot ) : [EOL] fake_request = Request ( HttpRequest ( ) ) [EOL] fake_request . user = bot . owner [EOL] [EOL] data = { [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] serializer = BotSerializer ( data = data , context = { [string] : fake_request } ) [EOL] [EOL] assert not serializer . is_valid ( ) [EOL] assert set ( serializer . errors . keys ( ) ) == { [string] } [EOL] assert [string] in serializer . errors [ [string] ] [ [number] ] [EOL] [EOL] [EOL] def test_bot_create_empty ( bot , gmi ) : [EOL] from lowerpines . endpoints . group import Group [EOL] [EOL] group = Group ( gmi , name = [string] ) [EOL] group . save ( ) [EOL] [EOL] fake_request = Request ( HttpRequest ( ) ) [EOL] fake_request . user = bot . owner [EOL] [EOL] data = { [string] : [string] , [string] : [string] , [string] : group . group_id , } [EOL] [EOL] serializer = BotSerializer ( data = data , context = { [string] : fake_request } ) [EOL] [EOL] assert serializer . is_valid ( ) [EOL] [EOL] new_bot = serializer . save ( owner = bot . owner ) [EOL] gmi_bot = gmi . bots . get ( name = [string] ) [EOL] [EOL] assert new_bot . name == [string] [EOL] assert new_bot . slug == [string] [EOL] assert new_bot . bot_id == gmi_bot . bot_id [EOL] assert new_bot . group_id == group . group_id [EOL] assert new_bot . handlers . count ( ) == [number] [EOL] assert gmi_bot . callback_url == [string] [EOL] assert gmi_bot . name == [string] [EOL] [EOL] [EOL] def test_bot_create ( bot , gmi ) : [EOL] from lowerpines . endpoints . group import Group [EOL] [EOL] group = Group ( gmi , name = [string] ) [EOL] group . save ( ) [EOL] [EOL] fake_request = Request ( HttpRequest ( ) ) [EOL] fake_request . user = bot . owner [EOL] [EOL] data = { [string] : [string] , [string] : [string] , [string] : group . group_id , [string] : None } [EOL] [EOL] serializer = BotSerializer ( data = data , context = { [string] : fake_request } ) [EOL] [EOL] assert not serializer . is_valid ( ) [EOL] assert set ( serializer . errors . keys ( ) ) == { [string] } [EOL] [EOL] data = { [string] : [string] , [string] : [string] , [string] : group . group_id , [string] : [ [string] ] } [EOL] [EOL] serializer = BotSerializer ( data = data , context = { [string] : fake_request } ) [EOL] [EOL] assert not serializer . is_valid ( ) [EOL] assert set ( serializer . errors . keys ( ) ) == { [string] } [EOL] [EOL] data = { [string] : [string] , [string] : [string] , [string] : group . group_id , [string] : [ [string] ] } [EOL] [EOL] serializer = BotSerializer ( data = data , context = { [string] : fake_request } ) [EOL] assert serializer . is_valid ( ) [EOL] [EOL] new_bot = serializer . save ( owner = bot . owner ) [EOL] gmi_bot = gmi . bots . get ( name = [string] ) [EOL] [EOL] assert new_bot . name == [string] [EOL] assert new_bot . slug == [string] [EOL] assert new_bot . bot_id == gmi_bot . bot_id [EOL] assert new_bot . group_id == group . group_id [EOL] assert new_bot . handlers . count ( ) == [number] [EOL] assert gmi_bot . callback_url == [string] [EOL] assert gmi_bot . name == [string] [EOL] [EOL] data = { [string] : [string] , [string] : group . group_id , [string] : [ [string] ] } [EOL] [EOL] serializer = BotSerializer ( data = data , context = { [string] : fake_request } ) [EOL] assert serializer . is_valid ( ) [EOL] [EOL] new_bot = serializer . save ( owner = bot . owner ) [EOL] gmi_bot = gmi . bots . get ( name = [string] ) [EOL] [EOL] assert new_bot . name == [string] [EOL] assert new_bot . slug == [string] [EOL] assert new_bot . bot_id == gmi_bot . bot_id [EOL] assert new_bot . group_id == group . group_id [EOL] assert new_bot . handlers . count ( ) == [number] [EOL] assert gmi_bot . callback_url == [string] [EOL] assert gmi_bot . name == [string] [EOL] [EOL] [EOL] def test_bot_update ( bot , gmi ) : [EOL] from lowerpines . endpoints . group import Group [EOL] from lowerpines . exceptions import NoneFoundException [EOL] [EOL] group = Group ( gmi , name = [string] ) [EOL] group . save ( ) [EOL] [EOL] fake_request = Request ( HttpRequest ( ) ) [EOL] fake_request . user = bot . owner [EOL] [EOL] data = { [string] : [string] , [string] : [string] , [string] : group . group_id , [string] : [ [string] , [string] ] } [EOL] [EOL] serializer = BotSerializer ( data = data , context = { [string] : fake_request } ) [EOL] assert serializer . is_valid ( ) [EOL] [EOL] new_bot = serializer . save ( owner = bot . owner ) [EOL] gmi_bot = gmi . bots . get ( name = [string] ) [EOL] [EOL] new_bot_handlers = set ( h . handler_name for h in new_bot . handlers . all ( ) ) [EOL] [EOL] assert new_bot . name == [string] [EOL] assert new_bot . slug == [string] [EOL] assert new_bot . bot_id == gmi_bot . bot_id [EOL] assert new_bot . group_id == group . group_id [EOL] assert new_bot . handlers . count ( ) == [number] [EOL] assert new_bot_handlers == { [string] , [string] } [EOL] assert gmi_bot . callback_url == [string] [EOL] assert gmi_bot . name == [string] [EOL] [EOL] data = { [string] : [string] , [string] : [string] , [string] : group . group_id , [string] : [ [string] , [string] , [string] ] } [EOL] [EOL] serializer = BotSerializer ( new_bot , data = data , partial = False , context = { [string] : fake_request } ) [EOL] assert serializer . is_valid ( ) [EOL] [EOL] updated_bot = serializer . save ( ) [EOL] [EOL] updated_bot_handlers = set ( h . handler_name for h in updated_bot . handlers . all ( ) ) [EOL] [EOL] assert updated_bot . name == [string] [EOL] assert updated_bot . slug == [string] [EOL] assert updated_bot . bot_id == gmi_bot . bot_id [EOL] assert updated_bot . group_id == group . group_id [EOL] assert updated_bot . handlers . count ( ) == [number] [EOL] assert updated_bot_handlers == { [string] , [string] , [string] } [EOL] [EOL] [comment] [EOL] gmi_bot = gmi . bots . get ( name = [string] ) [EOL] assert gmi_bot . callback_url == [string] [EOL] assert gmi_bot . name == [string] [EOL] [EOL] [comment] [EOL] with pytest . raises ( NoneFoundException ) : [EOL] gmi . bots . get ( name = [string] ) [EOL] [EOL] [EOL] def test_bot_failed_update ( bot , gmi ) : [EOL] from lowerpines . endpoints . group import Group [EOL] [EOL] group = Group ( gmi , name = [string] ) [EOL] group . save ( ) [EOL] [EOL] group2 = Group ( gmi , name = [string] ) [EOL] group2 . save ( ) [EOL] [EOL] fake_request = Request ( HttpRequest ( ) ) [EOL] fake_request . user = bot . owner [EOL] [EOL] data = { [string] : [string] , [string] : [string] , [string] : group . group_id , [string] : [ [string] , [string] ] } [EOL] [EOL] serializer = BotSerializer ( data = data , context = { [string] : fake_request } ) [EOL] assert serializer . is_valid ( ) [EOL] [EOL] new_bot = serializer . save ( owner = bot . owner ) [EOL] gmi_bot = gmi . bots . get ( name = [string] ) [EOL] [EOL] new_bot_handlers = set ( h . handler_name for h in new_bot . handlers . all ( ) ) [EOL] [EOL] assert new_bot . name == [string] [EOL] assert new_bot . slug == [string] [EOL] assert new_bot . bot_id == gmi_bot . bot_id [EOL] assert new_bot . group_id == group . group_id [EOL] assert new_bot . handlers . count ( ) == [number] [EOL] assert new_bot_handlers == { [string] , [string] } [EOL] assert gmi_bot . callback_url == [string] [EOL] assert gmi_bot . name == [string] [EOL] [EOL] data = { [string] : [string] , [string] : [string] , [string] : group2 . group_id , [string] : [ [string] , [string] , [string] ] } [EOL] [EOL] serializer = BotSerializer ( new_bot , data = data , partial = False , context = { [string] : fake_request } ) [EOL] [EOL] assert not serializer . is_valid ( ) [EOL] assert set ( serializer . errors . keys ( ) ) == { [string] } [EOL] assert [string] in serializer . errors [ [string] ] [ [number] ] [EOL]	
[comment] [EOL] [EOL] from typing import Any [EOL] import saucerbot [EOL] import typing [EOL] import logging [EOL] import logging [EOL] [EOL] import time [EOL] import arrow [EOL] from django . conf import settings [EOL] from django . core . management import execute_from_command_line [EOL] from elasticsearch import Elasticsearch [EOL] [EOL] from saucerbot . utils . base import BrewsLoaderUtil , brew_searcher , BREWS_ALIAS_NAME [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def es_assertions ( es ) : [EOL] assert es . indices . exists_template ( [string] ) [EOL] [EOL] assert es . indices . exists_alias ( name = BREWS_ALIAS_NAME ) [EOL] alias = es . indices . get_alias ( name = BREWS_ALIAS_NAME ) [EOL] assert len ( alias . keys ( ) ) == [number] [EOL] [EOL] indices = es . indices . get ( f'{ BREWS_ALIAS_NAME } [string] ' ) [EOL] assert len ( indices . keys ( ) ) == [number] [EOL] [EOL] return list ( indices . keys ( ) ) [ [number] ] [EOL] [EOL] [EOL] def test_loadbrews ( ) : [EOL] loader = BrewsLoaderUtil ( ) [EOL] loader . load_all_brews ( ) [EOL] [EOL] es = Elasticsearch ( settings . ELASTICSEARCH_URL ) [EOL] [EOL] original_index = es_assertions ( es ) [EOL] [EOL] [comment] [EOL] loader = BrewsLoaderUtil ( ) [EOL] loader . load_all_brews ( ) [EOL] [EOL] new_index = es_assertions ( es ) [EOL] [EOL] assert new_index != original_index [EOL] [EOL] [EOL] def test_cleanup_old ( ) : [EOL] es = Elasticsearch ( settings . ELASTICSEARCH_URL ) [EOL] timestamp = arrow . now ( [string] ) . format ( [string] ) [EOL] [EOL] [comment] [EOL] es . indices . create ( f'{ BREWS_ALIAS_NAME } [string] { timestamp }' ) [EOL] [EOL] loader = BrewsLoaderUtil ( ) [EOL] loader . load_all_brews ( ) [EOL] [EOL] es_assertions ( es ) [EOL] [EOL] [EOL] def test_load_command ( ) : [EOL] execute_from_command_line ( [ [string] , [string] ] ) [EOL] [EOL] es = Elasticsearch ( settings . ELASTICSEARCH_URL ) [EOL] [EOL] [comment] [EOL] es_assertions ( es ) [EOL] [EOL] [EOL] def test_searchbrews ( ) : [EOL] [comment] [EOL] brew_searcher . es . indices . flush ( [string] ) [EOL] time . sleep ( [number] ) [EOL] [EOL] [comment] [EOL] fake_brews = brew_searcher . brew_info ( [string] ) [EOL] assert fake_brews == [string] [EOL] [EOL] fake_brews = brew_searcher . brew_info ( [string] ) [EOL] assert fake_brews == [string] [EOL] [EOL] fake_brews = brew_searcher . brew_info ( [string] ) [EOL] assert fake_brews == [string] [EOL] [EOL] fake_brews = brew_searcher . brew_info ( [string] ) [EOL] assert fake_brews == [string] [EOL] [EOL] [comment] [EOL] nash_brews = brew_searcher . brew_info ( [string] ) [EOL] assert [string] in nash_brews [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import pathlib [EOL] import typing [EOL] import logging [EOL] import json [EOL] import logging [EOL] import os [EOL] import tempfile [EOL] import uuid [EOL] from datetime import timedelta [EOL] from pathlib import Path [EOL] [EOL] import arrow [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def get_sample_message ( bot , text , attachments = None , system = False , name = [string] , timestamp = None ) : [EOL] timestamp = timestamp or arrow . utcnow ( ) [EOL] return { [string] : attachments or [ ] , [string] : [string] , [string] : int ( timestamp . datetime . timestamp ( ) ) , [string] : bot . group . group_id , [string] : [string] , [string] : name , [string] : [string] , [string] : [string] , [string] : str ( uuid . uuid4 ( ) ) , [string] : system , [string] : text , [string] : [string] } [EOL] [EOL] [EOL] def test_mars ( bot , gmi ) : [EOL] from lowerpines . endpoints . message import Message [EOL] from saucerbot . groupme . handlers import general [EOL] [EOL] raw_message = get_sample_message ( bot . bot , [string] , [ { [string] : [string] } ] ) [EOL] [EOL] ret = general . mars ( bot . bot , Message . from_json ( gmi , raw_message ) , [number] ) [EOL] [EOL] assert ret [EOL] assert bot . group . messages . count == [number] [EOL] [EOL] posted = bot . group . messages . all ( ) [ [number] ] [EOL] [EOL] assert posted . text is not None [EOL] assert len ( posted . text ) > [number] [EOL] assert len ( posted . attachments ) == [number] [EOL] assert posted . attachments [ [number] ] [ [string] ] == [string] [EOL] assert posted . attachments [ [number] ] [ [string] ] == [ [string] ] [EOL] [EOL] [EOL] def test_mars_no_message ( bot , gmi ) : [EOL] from lowerpines . endpoints . message import Message [EOL] from saucerbot . groupme . handlers import general [EOL] [EOL] raw_message = get_sample_message ( bot . bot , [string] , [ ] ) [EOL] [EOL] ret = general . mars ( bot . bot , Message . from_json ( gmi , raw_message ) , [number] ) [EOL] [EOL] assert not ret [EOL] assert bot . group . messages . count == [number] [EOL] [EOL] [EOL] ZO_EXPECTED_POST = [string] [EOL] [EOL] [EOL] def test_zo_unregistered ( bot , client ) : [EOL] [comment] [EOL] sample_message = get_sample_message ( bot . bot , [string] ) [EOL] [EOL] ret = client . post ( [string] , content_type = [string] , data = json . dumps ( sample_message ) ) [EOL] [EOL] assert ret . status_code == [number] [EOL] assert ret . json ( ) == { [string] : False } [EOL] assert bot . group . messages . count == [number] [EOL] [EOL] [EOL] def test_zo_zo ( bot , client ) : [EOL] bot . handlers . create ( handler_name = [string] ) [EOL] [EOL] sample_message = get_sample_message ( bot . bot , [string] ) [EOL] [EOL] ret = client . post ( [string] , content_type = [string] , data = json . dumps ( sample_message ) ) [EOL] [EOL] assert ret . status_code == [number] [EOL] assert ret . json ( ) == { [string] : True } [EOL] assert bot . group . messages . count == [number] [EOL] assert bot . group . messages . all ( ) [ [number] ] . text == ZO_EXPECTED_POST [EOL] [EOL] [EOL] def test_zo_bot ( bot , client ) : [EOL] bot . handlers . create ( handler_name = [string] ) [EOL] [EOL] sample_message = get_sample_message ( bot . bot , [string] ) [EOL] [EOL] ret = client . post ( [string] , content_type = [string] , data = json . dumps ( sample_message ) ) [EOL] [EOL] assert ret . status_code == [number] [EOL] assert ret . json ( ) == { [string] : True } [EOL] assert bot . group . messages . count == [number] [EOL] assert bot . group . messages . all ( ) [ [number] ] . text == ZO_EXPECTED_POST [EOL] [EOL] [EOL] def test_zo_bot_bad ( bot , client ) : [EOL] bot . handlers . create ( handler_name = [string] ) [EOL] [EOL] sample_message = get_sample_message ( bot . bot , [string] ) [EOL] [EOL] ret = client . post ( [string] , content_type = [string] , data = json . dumps ( sample_message ) ) [EOL] [EOL] assert ret . status_code == [number] [EOL] assert ret . json ( ) == { [string] : False } [EOL] assert bot . group . messages . count == [number] [EOL] [EOL] [EOL] def test_system_messages_unregistered ( bot , client ) : [EOL] [comment] [EOL] sample_message = get_sample_message ( bot . bot , [string] , system = True ) [EOL] [EOL] ret = client . post ( [string] , content_type = [string] , data = json . dumps ( sample_message ) ) [EOL] [EOL] assert ret . status_code == [number] [EOL] assert ret . json ( ) == { [string] : False } [EOL] assert bot . group . messages . count == [number] [EOL] [EOL] [EOL] def test_name_change ( bot , client ) : [EOL] bot . handlers . create ( handler_name = [string] ) [EOL] [EOL] sample_message = get_sample_message ( bot . bot , [string] , system = True ) [EOL] [EOL] ret = client . post ( [string] , content_type = [string] , data = json . dumps ( sample_message ) ) [EOL] [EOL] assert ret . status_code == [number] [EOL] assert ret . json ( ) == { [string] : True } [EOL] assert bot . group . messages . count == [number] [EOL] assert len ( bot . group . messages . recent ( [number] ) [ [number] ] . attachments ) == [number] [EOL] [EOL] [EOL] def test_user_add ( bot , client ) : [EOL] bot . handlers . create ( handler_name = [string] ) [EOL] [EOL] sample_message = get_sample_message ( bot . bot , [string] , system = True ) [EOL] [EOL] ret = client . post ( [string] , content_type = [string] , data = json . dumps ( sample_message ) ) [EOL] [EOL] assert ret . status_code == [number] [EOL] assert ret . json ( ) == { [string] : True } [EOL] assert bot . group . messages . count == [number] [EOL] assert len ( bot . group . messages . recent ( [number] ) [ [number] ] . attachments ) == [number] [EOL] [EOL] [EOL] def test_user_remove ( bot , client ) : [EOL] bot . handlers . create ( handler_name = [string] ) [EOL] [EOL] sample_message = get_sample_message ( bot . bot , [string] , system = True ) [EOL] [EOL] ret = client . post ( [string] , content_type = [string] , data = json . dumps ( sample_message ) ) [EOL] [EOL] assert ret . status_code == [number] [EOL] assert ret . json ( ) == { [string] : True } [EOL] assert bot . group . messages . count == [number] [EOL] assert len ( bot . group . messages . recent ( [number] ) [ [number] ] . attachments ) == [number] [EOL] [EOL] [EOL] def test_bogus_system ( bot , client ) : [EOL] bot . handlers . create ( handler_name = [string] ) [EOL] [EOL] sample_message = get_sample_message ( bot . bot , [string] , system = True ) [EOL] [EOL] ret = client . post ( [string] , content_type = [string] , data = json . dumps ( sample_message ) ) [EOL] [EOL] assert ret . status_code == [number] [EOL] assert ret . json ( ) == { [string] : False } [EOL] assert bot . group . messages . count == [number] [EOL] [EOL] [EOL] def test_non_system ( bot , client ) : [EOL] bot . handlers . create ( handler_name = [string] ) [EOL] [EOL] sample_message = get_sample_message ( bot . bot , [string] , system = False ) [EOL] [EOL] ret = client . post ( [string] , content_type = [string] , data = json . dumps ( sample_message ) ) [EOL] [EOL] assert ret . status_code == [number] [EOL] assert ret . json ( ) == { [string] : False } [EOL] assert bot . group . messages . count == [number] [EOL] [EOL] [EOL] def test_saucerbot_user_not ( bot , gmi ) : [EOL] from lowerpines . endpoints . message import Message [EOL] from saucerbot . groupme . handlers import saucer [EOL] [EOL] raw_message = get_sample_message ( bot . bot , [string] ) [EOL] [EOL] ret = saucer . user_named_saucerbot ( bot . bot , Message . from_json ( gmi , raw_message ) ) [EOL] [EOL] assert not ret [EOL] assert bot . group . messages . count == [number] [EOL] [EOL] [EOL] def test_saucerbot_user ( bot , gmi ) : [EOL] from lowerpines . endpoints . message import Message [EOL] from saucerbot . groupme . handlers import saucer [EOL] [EOL] raw_message = get_sample_message ( bot . bot , [string] , name = [string] ) [EOL] [EOL] ret = saucer . user_named_saucerbot ( bot . bot , Message . from_json ( gmi , raw_message ) ) [EOL] [EOL] assert ret [EOL] assert bot . group . messages . count == [number] [EOL] [EOL] [EOL] def test_saucerbot_user_random ( bot , gmi ) : [EOL] from lowerpines . endpoints . message import Message [EOL] from saucerbot . groupme . handlers import saucer [EOL] [EOL] raw_message = get_sample_message ( bot . bot , [string] , name = [string] ) [EOL] [EOL] ret = saucer . user_named_saucerbot ( bot . bot , Message . from_json ( gmi , raw_message ) , True ) [EOL] [EOL] assert ret [EOL] assert bot . group . messages . count == [number] [EOL] [EOL] [EOL] def test_save_id_unregistered ( bot , client , monkeypatch ) : [EOL] monkeypatch . setattr ( [string] , lambda x : [ { [string] : [string] } ] ) [EOL] [EOL] [comment] [EOL] sample_message = get_sample_message ( bot . bot , [string] ) [EOL] [EOL] ret = client . post ( [string] , content_type = [string] , data = json . dumps ( sample_message ) ) [EOL] [EOL] assert ret . status_code == [number] [EOL] assert ret . json ( ) == { [string] : False } [EOL] assert bot . group . messages . count == [number] [EOL] [EOL] [EOL] def test_save_id_invalid ( bot , client , monkeypatch ) : [EOL] def get_tasted_brews ( x ) : [EOL] return [ ] [EOL] [EOL] monkeypatch . setattr ( [string] , get_tasted_brews ) [EOL] monkeypatch . setattr ( [string] , get_tasted_brews ) [EOL] monkeypatch . setattr ( [string] , get_tasted_brews ) [EOL] [EOL] bot . handlers . create ( handler_name = [string] ) [EOL] [EOL] sample_message = get_sample_message ( bot . bot , [string] ) [EOL] [EOL] ret = client . post ( [string] , content_type = [string] , data = json . dumps ( sample_message ) ) [EOL] [EOL] assert ret . status_code == [number] [EOL] assert ret . json ( ) == { [string] : True } [EOL] assert bot . group . messages . count == [number] [EOL] assert [string] in bot . group . messages . all ( ) [ [number] ] . text [EOL] [EOL] [EOL] def test_save_id_valid ( bot , client , monkeypatch ) : [EOL] def get_tasted_brews ( x ) : [EOL] return [ { [string] : [string] } ] [EOL] [EOL] monkeypatch . setattr ( [string] , get_tasted_brews ) [EOL] monkeypatch . setattr ( [string] , get_tasted_brews ) [EOL] monkeypatch . setattr ( [string] , get_tasted_brews ) [EOL] [EOL] bot . handlers . create ( handler_name = [string] ) [EOL] [EOL] sample_message = get_sample_message ( bot . bot , [string] ) [EOL] [EOL] ret = client . post ( [string] , content_type = [string] , data = json . dumps ( sample_message ) ) [EOL] [EOL] assert ret . status_code == [number] [EOL] assert ret . json ( ) == { [string] : True } [EOL] assert bot . group . messages . count == [number] [EOL] assert [string] not in bot . group . messages . all ( ) [ [number] ] . text [EOL] [EOL] [EOL] def test_troll_missing ( bot , client ) : [EOL] bot . handlers . create ( handler_name = [string] ) [EOL] [EOL] sample_message = get_sample_message ( bot . bot , [string] ) [EOL] [EOL] ret = client . post ( [string] , content_type = [string] , data = json . dumps ( sample_message ) ) [EOL] [EOL] assert ret . status_code == [number] [EOL] assert ret . json ( ) == { [string] : True } [EOL] assert bot . group . messages . count == [number] [EOL] [EOL] posted_message = bot . group . messages . all ( ) [ [number] ] [EOL] [EOL] assert posted_message . text == [string] [EOL] assert len ( posted_message . attachments ) == [number] [EOL] [EOL] [EOL] def test_troll_present ( bot , gmi , client ) : [EOL] bot . handlers . create ( handler_name = [string] ) [EOL] [EOL] from lowerpines . endpoints . member import Member [EOL] from saucerbot . groupme . handlers . saucer import SHAINA_USER_ID [EOL] [EOL] random = Member ( gmi , bot . group . group_id , [string] , [string] ) [EOL] bot . group . add_member ( random ) [EOL] [EOL] shaina = Member ( gmi , bot . group . group_id , [string] , SHAINA_USER_ID ) [EOL] bot . group . add_member ( shaina ) [EOL] [EOL] sample_message = get_sample_message ( bot . bot , [string] ) [EOL] [EOL] ret = client . post ( [string] , content_type = [string] , data = json . dumps ( sample_message ) ) [EOL] [EOL] assert ret . status_code == [number] [EOL] assert ret . json ( ) == { [string] : True } [EOL] assert bot . group . messages . count == [number] [EOL] [EOL] posted_message = bot . group . messages . all ( ) [ [number] ] [EOL] [EOL] assert posted_message . text == [string] [EOL] assert len ( posted_message . attachments ) == [number] [EOL] [EOL] [EOL] def test_whoami ( bot , gmi ) : [EOL] from lowerpines . endpoints . message import Message [EOL] from saucerbot . groupme . handlers import general [EOL] from saucerbot . groupme . models import HistoricalNickname [EOL] [EOL] fake_user_id = [string] [EOL] [EOL] HistoricalNickname . objects . create ( group_id = bot . group_id , groupme_id = fake_user_id , nickname = [string] , timestamp = arrow . utcnow ( ) . datetime - timedelta ( [number] ) ) [EOL] HistoricalNickname . objects . create ( group_id = bot . group_id , groupme_id = fake_user_id , nickname = [string] , timestamp = arrow . utcnow ( ) . datetime - timedelta ( [number] ) ) [EOL] [EOL] message = Message ( gmi ) [EOL] message . user_id = fake_user_id [EOL] [EOL] general . whoami ( bot . bot , message ) [EOL] [EOL] assert bot . group . messages . count == [number] [EOL] assert bot . group . messages . all ( ) [ [number] ] . text == [string] [EOL] [EOL] [EOL] def test_whoami_long ( bot , gmi ) : [EOL] from lowerpines . endpoints . message import Message [EOL] from saucerbot . groupme . handlers import general [EOL] from saucerbot . groupme . models import HistoricalNickname [EOL] [EOL] long_nickname = [string] [EOL] fake_user_id = [string] [EOL] [EOL] for i in range ( [number] , [number] ) : [EOL] HistoricalNickname . objects . create ( group_id = bot . group_id , groupme_id = fake_user_id , nickname = f'{ long_nickname } [string] { i }' , timestamp = arrow . utcnow ( ) . datetime - timedelta ( i ) ) [EOL] [EOL] message = Message ( gmi ) [EOL] message . user_id = fake_user_id [EOL] [EOL] general . whoami ( bot . bot , message ) [EOL] [EOL] assert bot . group . messages . count == [number] [EOL] [EOL] first_message = bot . group . messages . all ( ) [ [number] ] [EOL] [EOL] assert len ( first_message . text ) <= [number] [EOL] [EOL] first_expected_start = f'{ long_nickname } [string] ' f'{ long_nickname } [string] ' [EOL] [EOL] first_expected_end = f'{ long_nickname } [string] ' f'{ long_nickname } [string] ' [EOL] [EOL] assert first_message . text . startswith ( first_expected_start ) [EOL] assert first_message . text . endswith ( first_expected_end ) [EOL] [EOL] second_message = bot . group . messages . all ( ) [ [number] ] [EOL] [EOL] assert len ( second_message . text ) <= [number] [EOL] [EOL] second_expected_start = f'{ long_nickname } [string] ' f'{ long_nickname } [string] ' [EOL] [EOL] second_expected_end = f'{ long_nickname } [string] ' f'{ long_nickname } [string] ' [EOL] [EOL] assert second_message . text . startswith ( second_expected_start ) [EOL] assert second_message . text . endswith ( second_expected_end ) [EOL] [EOL] [EOL] def test_plate_party ( bot , gmi , client ) : [EOL] bot . handlers . create ( handler_name = [string] ) [EOL] [EOL] from lowerpines . endpoints . member import Member [EOL] from saucerbot . groupme . handlers . saucer import CLARK_USER_ID [EOL] clark_member = Member ( gmi , bot . group . group_id , [string] , CLARK_USER_ID ) [EOL] bot . group . add_member ( clark_member ) [EOL] [EOL] message = get_sample_message ( bot , [string] , name = [string] ) [EOL] ret = client . post ( [string] , content_type = [string] , data = json . dumps ( message ) ) [EOL] [EOL] assert ret . status_code == [number] [EOL] assert ret . json ( ) == { [string] : True } [EOL] assert bot . group . messages . count == [number] [EOL] [EOL] posted_message = bot . group . messages . all ( ) [ [number] ] [EOL] [EOL] assert [string] in posted_message . text [EOL] assert len ( posted_message . attachments ) == [number] [EOL] [EOL] [EOL] def test_too_early_for_thai_no_send ( bot , gmi , client ) : [EOL] bot . handlers . create ( handler_name = [string] ) [EOL] [EOL] message_no_thai = get_sample_message ( bot , [string] , timestamp = arrow . get ( [string] ) ) [EOL] [EOL] ret = client . post ( [string] , content_type = [string] , data = json . dumps ( message_no_thai ) ) [EOL] [EOL] assert ret . status_code == [number] [EOL] assert ret . json ( ) == { [string] : False } [EOL] assert bot . group . messages . count == [number] [EOL] [EOL] message_no_thai = get_sample_message ( bot , [string] , timestamp = arrow . get ( [string] ) ) [EOL] [EOL] ret = client . post ( [string] , content_type = [string] , data = json . dumps ( message_no_thai ) ) [EOL] [EOL] assert ret . status_code == [number] [EOL] assert ret . json ( ) == { [string] : False } [EOL] assert bot . group . messages . count == [number] [EOL] [EOL] [EOL] def test_too_early_for_thai_send ( bot , gmi , client ) : [EOL] lockfile = Path ( tempfile . gettempdir ( ) , [string] ) [EOL] if lockfile . exists ( ) : [EOL] os . remove ( lockfile ) [EOL] [EOL] bot . handlers . create ( handler_name = [string] ) [EOL] [EOL] message_thai = get_sample_message ( bot , [string] , timestamp = arrow . get ( [string] ) ) [EOL] [EOL] ret = client . post ( [string] , content_type = [string] , data = json . dumps ( message_thai ) ) [EOL] [EOL] assert ret . status_code == [number] [EOL] assert ret . json ( ) == { [string] : True } [EOL] assert bot . group . messages . count == [number] [EOL] [EOL] posted_message = bot . group . messages . all ( ) [ [number] ] [EOL] [EOL] assert [string] in posted_message . text [EOL] assert len ( posted_message . attachments ) == [number] [EOL] [EOL] os . remove ( lockfile ) [EOL] [EOL] message_thai = get_sample_message ( bot , [string] , timestamp = arrow . get ( [string] ) ) [EOL] [EOL] ret = client . post ( [string] , content_type = [string] , data = json . dumps ( message_thai ) ) [EOL] [EOL] assert ret . status_code == [number] [EOL] assert ret . json ( ) == { [string] : True } [EOL] assert bot . group . messages . count == [number] [EOL] [EOL] posted_message = bot . group . messages . all ( ) [ [number] ] [EOL] [EOL] assert [string] in posted_message . text [EOL] assert len ( posted_message . attachments ) == [number] [EOL] [EOL] [comment] [EOL] ret = client . post ( [string] , content_type = [string] , data = json . dumps ( message_thai ) ) [EOL] [EOL] assert ret . status_code == [number] [EOL] assert ret . json ( ) == { [string] : False } [EOL] assert bot . group . messages . count == [number] [EOL] [EOL] [comment] [EOL] os . remove ( lockfile ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any , Optional [EOL] import saucerbot [EOL] import typing [EOL] import logging [EOL] import logging [EOL] [EOL] import pytest [EOL] from django . contrib . sessions . backends . db import SessionStore [EOL] from django . http import HttpRequest [EOL] from lowerpines . exceptions import UnauthorizedException [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_get_user_no_session ( ) : [EOL] from saucerbot . groupme . models import get_user [EOL] [EOL] fake_request = HttpRequest ( ) [EOL] fake_request . session = SessionStore ( ) [EOL] [EOL] u = get_user ( fake_request ) [EOL] [EOL] assert u is None [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_get_user_invalid_id ( ) : [EOL] from saucerbot . groupme . models import get_user , SESSION_KEY [EOL] [EOL] fake_request = HttpRequest ( ) [EOL] fake_request . session = SessionStore ( ) [EOL] fake_request . session [ SESSION_KEY ] = [number] [EOL] [EOL] u = get_user ( fake_request ) [EOL] [EOL] assert u is None [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_get_user_valid ( ) : [EOL] from saucerbot . groupme . models import User , get_user , SESSION_KEY [EOL] [EOL] user = User . objects . create ( access_token = [string] , user_id = [string] ) [EOL] [EOL] fake_request = HttpRequest ( ) [EOL] fake_request . session = SessionStore ( ) [EOL] fake_request . session [ SESSION_KEY ] = user . pk [EOL] [EOL] u = get_user ( fake_request ) [EOL] [EOL] assert u is not None [EOL] assert u . access_token == [string] [EOL] assert u . user_id == [string] [EOL] [EOL] [comment] [EOL] assert u . is_active [EOL] assert not u . is_staff [EOL] assert not u . is_superuser [EOL] assert not u . is_anonymous [EOL] assert u . is_authenticated [EOL] assert u . groups . count ( ) == [number] [EOL] assert u . user_permissions . count ( ) == [number] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_new_user_valid ( gmi ) : [EOL] from saucerbot . groupme . models import get_gmi , new_user , SESSION_KEY [EOL] [EOL] [comment] [EOL] gmi = get_gmi ( [string] ) [EOL] user = gmi . user . get ( ) [EOL] user . user_id = [string] [EOL] user . save ( ) [EOL] [EOL] fake_request = HttpRequest ( ) [EOL] fake_request . session = SessionStore ( ) [EOL] [EOL] new_user ( fake_request , [string] ) [EOL] [EOL] assert SESSION_KEY in fake_request . session [EOL] assert fake_request . session [ SESSION_KEY ] is not None [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_new_user_invalid ( monkeypatch ) : [EOL] from saucerbot . groupme . models import get_gmi , new_user , InvalidGroupMeUser , SESSION_KEY [EOL] [EOL] gmi = get_gmi ( [string] ) [EOL] [EOL] [comment] [EOL] def fake_get ( ) : [EOL] raise UnauthorizedException ( ) [EOL] monkeypatch . setattr ( gmi . user , [string] , fake_get ) [EOL] [EOL] fake_request = HttpRequest ( ) [EOL] fake_request . session = SessionStore ( ) [EOL] [EOL] with pytest . raises ( InvalidGroupMeUser ) : [EOL] new_user ( fake_request , [string] ) [EOL] [EOL] assert SESSION_KEY not in fake_request . session [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any , Dict , List , Union [EOL] import saucerbot [EOL] import typing [EOL] import pytest [EOL] from django . contrib . sessions . backends . db import SessionStore [EOL] from django . http import HttpRequest [EOL] from rest_framework . request import Request [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_login_redirect_no_session ( ) : [EOL] from saucerbot . groupme . views import LoginRedirectView [EOL] [EOL] fake_request = HttpRequest ( ) [EOL] fake_request . session = SessionStore ( ) [EOL] [EOL] v = LoginRedirectView ( ) [EOL] v . setup ( fake_request ) [EOL] [EOL] r = v . get ( fake_request ) [EOL] [EOL] assert r . status_code == [number] [EOL] assert r . url . startswith ( [string] ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_login_redirect_with_session ( ) : [EOL] from saucerbot . groupme . views import LoginRedirectView , SESSION_KEY [EOL] [EOL] fake_request = HttpRequest ( ) [EOL] fake_request . session = SessionStore ( ) [EOL] fake_request . session [ SESSION_KEY ] = [number] [EOL] [EOL] v = LoginRedirectView ( ) [EOL] v . setup ( fake_request ) [EOL] [EOL] r = v . get ( fake_request ) [EOL] [EOL] assert r . status_code == [number] [EOL] assert not r . url . startswith ( [string] ) [EOL] assert [string] in r . url [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_oauth_missing_token ( ) : [EOL] from saucerbot . groupme . views import OAuthView , InvalidGroupMeUser [EOL] [EOL] fake_request = HttpRequest ( ) [EOL] fake_request . session = SessionStore ( ) [EOL] [EOL] v = OAuthView ( ) [EOL] v . setup ( fake_request ) [EOL] [EOL] with pytest . raises ( InvalidGroupMeUser ) : [EOL] v . get ( fake_request ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_oauth_with_token ( gmi ) : [EOL] u = gmi . user . get ( ) [EOL] u . user_id = [string] [EOL] u . save ( ) [EOL] [EOL] from saucerbot . groupme . views import OAuthView , SESSION_KEY [EOL] [EOL] fake_request = HttpRequest ( ) [EOL] fake_request . session = SessionStore ( ) [EOL] fake_request . GET [ [string] ] = [string] [EOL] [EOL] v = OAuthView ( ) [EOL] v . setup ( fake_request ) [EOL] [EOL] r = v . get ( fake_request ) [EOL] [EOL] assert r . status_code == [number] [EOL] assert not r . url . startswith ( [string] ) [EOL] assert [string] in r . url [EOL] [EOL] assert SESSION_KEY in fake_request . session [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_bot_view_create ( monkeypatch , gmi , client ) : [EOL] monkeypatch . setattr ( [string] , lambda a : gmi ) [EOL] [EOL] u = gmi . user . get ( ) [EOL] u . user_id = [string] [EOL] u . save ( ) [EOL] [EOL] [comment] [EOL] client . get ( [string] ) [EOL] [EOL] from lowerpines . endpoints . group import Group [EOL] [EOL] group = Group ( gmi , name = [string] ) [EOL] group . save ( ) [EOL] [EOL] data = { [string] : [string] , [string] : [string] , [string] : group . group_id , [string] : [ [string] ] } [EOL] [EOL] resp = client . post ( [string] , content_type = [string] , data = data ) [EOL] [EOL] assert resp . status_code == [number] [EOL] [EOL] from saucerbot . groupme . models import Bot [EOL] [EOL] new_bot = Bot . objects . get ( slug = [string] ) [EOL] gmi_bot = gmi . bots . get ( name = [string] ) [EOL] [EOL] assert new_bot . name == [string] [EOL] assert new_bot . slug == [string] [EOL] assert new_bot . bot_id == gmi_bot . bot_id [EOL] assert new_bot . group_id == group . group_id [EOL] assert new_bot . handlers . count ( ) == [number] [EOL] assert gmi_bot . callback_url == [string] [EOL] assert gmi_bot . name == [string] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_bot_view_update ( monkeypatch , gmi , client ) : [EOL] monkeypatch . setattr ( [string] , lambda a : gmi ) [EOL] [EOL] u = gmi . user . get ( ) [EOL] u . user_id = [string] [EOL] u . save ( ) [EOL] [EOL] [comment] [EOL] client . get ( [string] ) [EOL] [EOL] from lowerpines . endpoints . group import Group [EOL] from lowerpines . exceptions import NoneFoundException [EOL] from saucerbot . groupme . models import Bot [EOL] [EOL] group = Group ( gmi , name = [string] ) [EOL] group . save ( ) [EOL] [EOL] data = { [string] : [string] , [string] : [string] , [string] : group . group_id , [string] : [ [string] ] } [EOL] [EOL] resp = client . post ( [string] , content_type = [string] , data = data ) [EOL] [EOL] assert resp . status_code == [number] [EOL] [EOL] new_bot = Bot . objects . get ( slug = [string] ) [EOL] gmi_bot = gmi . bots . get ( name = [string] ) [EOL] [EOL] assert new_bot . name == [string] [EOL] assert new_bot . slug == [string] [EOL] assert new_bot . bot_id == gmi_bot . bot_id [EOL] assert new_bot . group_id == group . group_id [EOL] assert new_bot . handlers . count ( ) == [number] [EOL] assert gmi_bot . callback_url == [string] [EOL] assert gmi_bot . name == [string] [EOL] [EOL] update_data = { [string] : [string] , [string] : [string] , [string] : [ [string] ] } [EOL] [EOL] resp = client . patch ( [string] , content_type = [string] , data = update_data ) [EOL] [EOL] assert resp . status_code == [number] [EOL] [EOL] updated_bot = Bot . objects . get ( slug = [string] ) [EOL] [EOL] assert updated_bot . name == [string] [EOL] assert updated_bot . slug == [string] [EOL] assert updated_bot . bot_id == gmi_bot . bot_id [EOL] assert updated_bot . group_id == group . group_id [EOL] assert updated_bot . handlers . count ( ) == [number] [EOL] [EOL] [comment] [EOL] gmi_bot = gmi . bots . get ( name = [string] ) [EOL] assert gmi_bot . callback_url == [string] [EOL] assert gmi_bot . name == [string] [EOL] [EOL] [comment] [EOL] with pytest . raises ( NoneFoundException ) : [EOL] gmi . bots . get ( name = [string] ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_bot_view_delete ( monkeypatch , gmi , client ) : [EOL] monkeypatch . setattr ( [string] , lambda a : gmi ) [EOL] [EOL] u = gmi . user . get ( ) [EOL] u . user_id = [string] [EOL] u . save ( ) [EOL] [EOL] [comment] [EOL] client . get ( [string] ) [EOL] [EOL] from lowerpines . endpoints . group import Group [EOL] from lowerpines . exceptions import NoneFoundException [EOL] from saucerbot . groupme . models import Bot [EOL] [EOL] group = Group ( gmi , name = [string] ) [EOL] group . save ( ) [EOL] [EOL] data = { [string] : [string] , [string] : [string] , [string] : group . group_id , [string] : [ [string] ] } [EOL] [EOL] resp = client . post ( [string] , content_type = [string] , data = data ) [EOL] [EOL] assert resp . status_code == [number] [EOL] [EOL] new_bot = Bot . objects . get ( slug = [string] ) [EOL] gmi_bot = gmi . bots . get ( name = [string] ) [EOL] [EOL] assert new_bot . name == [string] [EOL] assert new_bot . slug == [string] [EOL] assert new_bot . bot_id == gmi_bot . bot_id [EOL] assert new_bot . group_id == group . group_id [EOL] assert new_bot . handlers . count ( ) == [number] [EOL] assert gmi_bot . callback_url == [string] [EOL] assert gmi_bot . name == [string] [EOL] [EOL] resp = client . delete ( [string] ) [EOL] [EOL] assert resp . status_code == [number] [EOL] [EOL] [comment] [EOL] with pytest . raises ( Bot . DoesNotExist ) : [EOL] Bot . objects . get ( slug = [string] ) [EOL] [EOL] [comment] [EOL] with pytest . raises ( NoneFoundException ) : [EOL] gmi . bots . get ( name = [string] ) [EOL]	
[comment] [EOL] [EOL] from typing import Any , Dict , DefaultDict , List [EOL] import typing [EOL] import uuid [EOL] from collections import defaultdict [EOL] [EOL] import pytest [EOL] [EOL] [EOL] @ pytest . fixture ( name = [string] ) def gmi ( monkeypatch ) : [EOL] from lowerpines . endpoints . bot import Bot [EOL] from lowerpines . endpoints . group import Group , GroupMessagesManager [EOL] from lowerpines . endpoints . message import Message [EOL] from lowerpines . endpoints . user import User [EOL] [EOL] global_users = { } [EOL] global_bots = { } [EOL] global_groups = { } [EOL] global_messages = defaultdict ( list ) [EOL] [EOL] class TestUser ( User ) : [EOL] [EOL] def save ( self ) : [EOL] global_users [ self . gmi . access_token ] = self [EOL] [EOL] def refresh ( self ) : [EOL] if self . gmi . access_token in global_users : [EOL] self . _refresh_from_other ( global_users [ self . gmi . access_token ] ) [EOL] [EOL] class TestGroup ( Group ) : [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] self . messages = TestGroupMessageManager ( self ) [EOL] [EOL] def save ( self ) : [EOL] if not self . group_id : [EOL] self . group_id = str ( uuid . uuid4 ( ) ) . replace ( [string] , [string] ) [EOL] global_groups [ self . group_id ] = self [EOL] [EOL] def delete ( self ) : [EOL] if self . group_id in global_groups : [EOL] del global_groups [ self . group_id ] [EOL] [EOL] def refresh ( self ) : [EOL] pass [EOL] [EOL] def add_member ( self , member ) : [EOL] self . members . append ( member ) [EOL] [EOL] @ staticmethod def get_all ( gmi ) : [EOL] return global_groups . values ( ) [EOL] [EOL] @ staticmethod def get ( gmi , group_id ) : [EOL] return global_groups . get ( group_id ) [EOL] [EOL] class TestGroupMessageManager ( GroupMessagesManager ) : [EOL] [EOL] @ property def count ( self ) : [EOL] return len ( global_messages [ self . group . group_id ] ) [EOL] [EOL] def all ( self ) : [EOL] return global_messages [ self . group . group_id ] [EOL] [EOL] def recent ( self , count = [number] ) : [EOL] return global_messages [ self . group . group_id ] [ - count : ] [EOL] [EOL] def before ( self , message , count = [number] ) : [EOL] group_messages = global_messages [ self . group . group_id ] [EOL] idx = group_messages . index ( message ) [EOL] return group_messages [ max ( idx - count , [number] ) : idx ] [EOL] [EOL] def since ( self , message , count = [number] ) : [EOL] group_messages = global_messages [ self . group . group_id ] [EOL] idx = group_messages . index ( message ) [EOL] return group_messages [ idx : min ( idx + count , len ( group_messages ) ) ] [EOL] [EOL] class TestMessage ( Message ) : [EOL] [EOL] def save ( self ) : [EOL] if self . message_id : [EOL] from lowerpines . exceptions import InvalidOperationException [EOL] raise InvalidOperationException ( [string] ) [EOL] else : [EOL] self . message_id = str ( uuid . uuid4 ( ) ) . replace ( [string] , [string] ) [EOL] global_messages [ self . group_id ] . append ( self ) [EOL] [EOL] def refresh ( self ) : [EOL] pass [EOL] [EOL] def like ( self ) : [EOL] if self . favorited_by is None : [EOL] self . favorited_by = [ ] [EOL] self . favorited_by . append ( self . gmi . user . get ( ) . user_id ) [EOL] [EOL] def like_as ( self , user_id ) : [EOL] if self . favorited_by is None : [EOL] self . favorited_by = [ ] [EOL] self . favorited_by . append ( user_id ) [EOL] [EOL] @ classmethod def from_json ( cls , gmi , json_dict , * args ) : [EOL] return Message . from_json ( gmi , json_dict , * args ) [EOL] [EOL] class TestBot ( Bot ) : [EOL] [EOL] def save ( self ) : [EOL] if self . bot_id is None : [EOL] self . bot_id = str ( uuid . uuid4 ( ) ) . replace ( [string] , [string] ) [EOL] [EOL] global_bots [ self . bot_id ] = self [EOL] [EOL] def delete ( self ) : [EOL] if self . bot_id in global_bots : [EOL] del global_bots [ self . bot_id ] [EOL] [EOL] def post ( self , text ) : [EOL] from lowerpines . message import smart_split_complex_message [EOL] text , attachments = smart_split_complex_message ( text ) [EOL] message = TestMessage ( self . gmi , group_id = self . group_id , text = text , attachments = attachments ) [EOL] message . favorited_by = [ ] [EOL] message . name = self . name [EOL] message . save ( ) [EOL] [EOL] @ staticmethod def get_all ( gmi ) : [EOL] return global_bots . values ( ) [EOL] [EOL] monkeypatch . setattr ( [string] , TestUser ) [EOL] monkeypatch . setattr ( [string] , TestGroup ) [EOL] monkeypatch . setattr ( [string] , TestMessage ) [EOL] monkeypatch . setattr ( [string] , TestBot ) [EOL] monkeypatch . setattr ( [string] , TestUser ) [EOL] monkeypatch . setattr ( [string] , TestGroup ) [EOL] monkeypatch . setattr ( [string] , TestBot ) [EOL] [EOL] from lowerpines . gmi import GMI [EOL] [EOL] return GMI ( [string] ) [EOL] [EOL] [EOL] @ pytest . fixture ( name = [string] ) def setup_bot ( db , gmi , monkeypatch ) : [EOL] [docstring] [EOL] monkeypatch . setattr ( [string] , lambda a : gmi ) [EOL] [EOL] from lowerpines . group import Group [EOL] from saucerbot . groupme . models import User , Bot [EOL] [EOL] user = User . objects . create ( access_token = [string] , user_id = [string] ) [EOL] [EOL] group = Group ( user . gmi , name = [string] ) [EOL] group . save ( ) [EOL] [EOL] bot = Bot . objects . create ( owner = user , group = group , name = [string] , slug = [string] ) [EOL] [EOL] return bot [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import Tuple , Any , Optional [EOL] import rest_framework [EOL] import saucerbot [EOL] import typing [EOL] import logging [EOL] import logging [EOL] from typing import Any , Optional , Tuple [EOL] [EOL] from rest_framework . authentication import SessionAuthentication [EOL] from rest_framework . request import Request [EOL] [EOL] from saucerbot . groupme . models import get_user [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class GroupMeUserAuthentication ( SessionAuthentication ) : [EOL] [EOL] def authenticate ( self , request ) : [EOL] user = get_user ( request ) [EOL] [EOL] if not user : [EOL] return None [EOL] [EOL] self . enforce_csrf ( request ) [EOL] [EOL] [comment] [EOL] return user , None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Tuple[typing.Optional[typing.Any],typing.Optional[typing.Any]]]$ 0 0 0 $rest_framework.request.Request$ 0 0 0 $typing.Optional[saucerbot.groupme.models.User]$ 0 0 0 $rest_framework.request.Request$ 0 0 0 0 0 $typing.Optional[saucerbot.groupme.models.User]$ 0 0 0 0 0 0 0 0 0 0 $rest_framework.request.Request$ 0 0 0 0 0 0 $typing.Optional[saucerbot.groupme.models.User]$ 0 0 0
[comment] [EOL] [EOL] from django . apps import AppConfig [EOL] [EOL] [EOL] class GroupMeConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL] [EOL] def ready ( self ) : [EOL] [comment] [EOL] [comment] [EOL] import saucerbot . groupme . handlers . general [EOL] import saucerbot . groupme . handlers . saucer [EOL] import saucerbot . groupme . handlers . vandy [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any , Type [EOL] import saucerbot [EOL] import typing [EOL] import builtins [EOL] import logging [EOL] import logging [EOL] [EOL] from django . urls import path [EOL] from rest_framework . routers import Route , DynamicRoute , DefaultRouter [EOL] from rest_framework . urlpatterns import format_suffix_patterns [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class PathRouter ( DefaultRouter ) : [EOL] routes = [ Route ( url = [string] , mapping = { [string] : [string] , [string] : [string] } , name = [string] , detail = False , initkwargs = { [string] : [string] } ) , DynamicRoute ( url = [string] , name = [string] , detail = False , initkwargs = { } ) , Route ( url = [string] , mapping = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } , name = [string] , detail = True , initkwargs = { [string] : [string] } ) , DynamicRoute ( url = [string] , name = [string] , detail = True , initkwargs = { } ) , ] [EOL] [EOL] @ staticmethod def get_lookup_path ( viewset , lookup_prefix = [string] ) : [EOL] [docstring] [EOL] base_path = [string] [EOL] [comment] [EOL] [comment] [EOL] lookup_field = getattr ( viewset , [string] , [string] ) [EOL] lookup_url_kwarg = getattr ( viewset , [string] , None ) or lookup_field [EOL] lookup_value = getattr ( viewset , [string] , [string] ) [EOL] return base_path . format ( lookup_prefix = lookup_prefix , lookup_url_kwarg = lookup_url_kwarg , lookup_value = lookup_value ) [EOL] [EOL] def get_urls ( self ) : [EOL] [docstring] [EOL] urls = [ ] [EOL] [EOL] for prefix , viewset , basename in self . registry : [EOL] lookup = self . get_lookup_path ( viewset ) [EOL] routes = self . get_routes ( viewset ) [EOL] [EOL] for route in routes : [EOL] [EOL] [comment] [EOL] mapping = self . get_method_map ( viewset , route . mapping ) [EOL] if not mapping : [EOL] continue [EOL] [EOL] [comment] [EOL] path_str = route . url . format ( prefix = prefix , lookup = lookup , trailing_slash = self . trailing_slash ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] initkwargs = route . initkwargs . copy ( ) [EOL] initkwargs . update ( { [string] : basename , [string] : route . detail , } ) [EOL] [EOL] view = viewset . as_view ( mapping , ** initkwargs ) [EOL] name = route . name . format ( basename = basename ) [EOL] urls . append ( path ( path_str , view , name = name ) ) [EOL] [EOL] if self . include_root_view : [EOL] view = self . get_api_root_view ( api_urls = urls ) [EOL] root_url = path ( [string] , view , name = self . root_view_name ) [EOL] urls . append ( root_url ) [EOL] [EOL] if self . include_format_suffixes : [EOL] urls = format_suffix_patterns ( urls ) [EOL] [EOL] return urls [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0
[comment] [EOL] [EOL] import rest_framework [EOL] import builtins [EOL] import logging [EOL] import logging [EOL] [EOL] from rest_framework . permissions import BasePermission [EOL] from rest_framework . request import Request [EOL] from rest_framework . views import APIView [EOL] [EOL] from saucerbot . groupme . models import User [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class HasGroupMeUser ( BasePermission ) : [EOL] [EOL] def has_permission ( self , request , view ) : [EOL] return request . user and isinstance ( request . user , User ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $rest_framework.request.Request$ 0 $rest_framework.views.APIView$ 0 0 0 0 $rest_framework.request.Request$ 0 0 0 0 0 $rest_framework.request.Request$ 0 0 0 0 0 0
[comment] [EOL] [EOL] default_app_config = [string] [EOL]	0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [EOL] from typing import Any , Type , Union , Dict , List , Set [EOL] import saucerbot [EOL] import lowerpines [EOL] import builtins [EOL] import logging [EOL] import typing [EOL] import logging [EOL] from typing import Any , Dict , Union [EOL] [EOL] from lowerpines . endpoints . group import Group [EOL] from lowerpines . exceptions import NoneFoundException [EOL] from rest_framework import serializers [EOL] [EOL] from saucerbot . groupme . handlers import registry , Handler as RHandler [EOL] from saucerbot . groupme . models import Bot , Handler , User [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class HandlerSerializer ( serializers . Serializer ) : [EOL] url = serializers . HyperlinkedIdentityField ( view_name = [string] , lookup_field = [string] ) [EOL] name = serializers . CharField ( ) [EOL] description = serializers . CharField ( ) [EOL] regexes = serializers . ListField ( child = serializers . CharField ( ) ) [EOL] [EOL] def create ( self , validated_data ) : [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] def update ( self , instance , validated_data ) : [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] [EOL] class HandlerRelatedField ( serializers . RelatedField ) : [EOL] [docstring] [EOL] queryset = registry [EOL] [EOL] def to_internal_value ( self , data ) : [EOL] [docstring] [EOL] handler = self . get_queryset ( ) . get ( name = data ) [EOL] if not handler : [EOL] raise serializers . ValidationError ( f" [string] { data } [string] " ) [EOL] return handler [EOL] [EOL] def to_representation ( self , value ) : [EOL] [docstring] [EOL] if isinstance ( value , RHandler ) : [EOL] return value . name [EOL] else : [EOL] return value . handler_name [EOL] [EOL] [EOL] class GroupRelatedField ( serializers . RelatedField ) : [EOL] [EOL] def get_queryset ( self ) : [EOL] user = self . context [ [string] ] . user [EOL] return user . gmi . groups [EOL] [EOL] def to_internal_value ( self , data ) : [EOL] try : [EOL] return self . get_queryset ( ) . get ( group_id = data ) [EOL] except NoneFoundException : [EOL] raise serializers . ValidationError ( f" [string] { data } [string] " ) [EOL] [EOL] def to_representation ( self , value ) : [EOL] return value . group_id [EOL] [EOL] [EOL] class BotSerializer ( serializers . HyperlinkedModelSerializer ) : [EOL] group = GroupRelatedField ( ) [EOL] avatar_url = serializers . URLField ( write_only = True , label = [string] , allow_null = True , required = False , default = None ) [EOL] handlers = HandlerRelatedField ( many = True , required = False , default = [ ] ) [EOL] [EOL] class Meta : [EOL] model = Bot [EOL] fields = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] extra_kwargs = { [string] : { [string] : False } , [string] : { [string] : [string] , [string] : [string] } , } [EOL] [EOL] def create ( self , validated_data ) : [EOL] handlers = validated_data . pop ( [string] ) [EOL] [EOL] bot = super ( ) . create ( validated_data ) [EOL] [EOL] [comment] [EOL] handler_objects = [ ] [EOL] for handler in handlers : [EOL] handler_objects . append ( Handler ( bot = bot , handler_name = handler . name ) ) [EOL] [EOL] Handler . objects . bulk_create ( handler_objects ) [EOL] [EOL] return bot [EOL] [EOL] def validate_group ( self , group ) : [EOL] [comment] [EOL] if self . instance : [EOL] if group and self . instance . group_id != group . group_id : [EOL] raise serializers . ValidationError ( [string] ) [EOL] [comment] [EOL] raise serializers . SkipField ( ) [EOL] return group [EOL] [EOL] def update ( self , instance , validated_data ) : [EOL] handlers = validated_data . pop ( [string] , None ) [EOL] [EOL] bot = super ( ) . update ( instance , validated_data ) [EOL] [EOL] bot . update_bot ( validated_data . get ( [string] ) ) [EOL] [EOL] if handlers : [EOL] new_handler_set = set ( h . name for h in handlers ) [EOL] current_handler_set = set ( h . handler_name for h in bot . handlers . all ( ) ) [EOL] [EOL] [comment] [EOL] removed_handlers = current_handler_set - new_handler_set [EOL] bot . handlers . filter ( handler_name__in = removed_handlers ) . delete ( ) [EOL] [EOL] [comment] [EOL] handlers_to_create = new_handler_set - current_handler_set [EOL] handler_objects = [ ] [EOL] for handler in handlers_to_create : [EOL] handler_objects . append ( Handler ( bot = bot , handler_name = handler ) ) [EOL] [EOL] Handler . objects . bulk_create ( handler_objects ) [EOL] [EOL] return bot [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $saucerbot.groupme.handlers.Handler$ 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 $typing.Union[saucerbot.groupme.models.Handler,saucerbot.groupme.handlers.Handler]$ 0 0 0 0 0 0 0 0 $typing.Union[saucerbot.groupme.models.Handler,saucerbot.groupme.handlers.Handler]$ 0 0 0 0 0 0 $typing.Union[saucerbot.groupme.models.Handler,saucerbot.groupme.handlers.Handler]$ 0 0 0 0 0 0 0 $typing.Union[saucerbot.groupme.models.Handler,saucerbot.groupme.handlers.Handler]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $saucerbot.groupme.models.User$ 0 0 0 0 0 0 0 0 $saucerbot.groupme.models.User$ 0 0 $saucerbot.groupme.models.User$ 0 0 0 0 0 0 0 $lowerpines.endpoints.group.Group$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $lowerpines.endpoints.group.Group$ 0 0 0 0 $lowerpines.endpoints.group.Group$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $saucerbot.groupme.serializers.GroupRelatedField$ 0 0 0 0 0 $typing.Type[saucerbot.groupme.serializers.BotSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $saucerbot.groupme.serializers.HandlerRelatedField$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[saucerbot.groupme.models.Bot]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,builtins.bool],typing.Dict[builtins.str,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $saucerbot.groupme.models.Bot$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $lowerpines.endpoints.group.Group$ 0 0 0 0 0 0 0 0 0 0 0 0 $lowerpines.endpoints.group.Group$ 0 0 0 0 0 0 0 $lowerpines.endpoints.group.Group$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lowerpines.endpoints.group.Group$ 0 0 0 $saucerbot.groupme.models.Bot$ 0 0 0 $saucerbot.groupme.models.Bot$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $saucerbot.groupme.models.Bot$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 $typing.Set[typing.Any]$ 0 $typing.Set[typing.Any]$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 $typing.Set[typing.Any]$ 0 $typing.Set[typing.Any]$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0
[comment] [EOL] [EOL] from typing import Any , List [EOL] import saucerbot [EOL] import typing [EOL] from django . contrib . auth . views import LogoutView [EOL] from django . urls import path , include [EOL] [EOL] from saucerbot . groupme . routers import PathRouter [EOL] from saucerbot . groupme . views import ( LoginRedirectView , OAuthView , BotViewSet , BotActionsViewSet , HandlerViewSet ) [EOL] [EOL] app_name = [string] [EOL] [EOL] router = PathRouter ( ) [EOL] router . register ( [string] , BotViewSet , basename = [string] ) [EOL] router . register ( [string] , BotActionsViewSet , basename = [string] ) [EOL] router . register ( [string] , HandlerViewSet , basename = [string] ) [EOL] [EOL] urlpatterns = [ path ( [string] , LoginRedirectView . as_view ( ) , name = [string] ) , path ( [string] , LogoutView . as_view ( ) , name = [string] ) , path ( [string] , OAuthView . as_view ( ) , name = [string] ) , path ( [string] , include ( router . urls ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $saucerbot.groupme.routers.PathRouter$ 0 0 0 0 0 $saucerbot.groupme.routers.PathRouter$ 0 0 0 0 0 0 0 0 0 0 0 0 $saucerbot.groupme.routers.PathRouter$ 0 0 0 0 0 0 0 0 0 0 0 0 $saucerbot.groupme.routers.PathRouter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $saucerbot.groupme.routers.PathRouter$ 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] from django import template [EOL] from django . urls import NoReverseMatch , reverse [EOL] from django . utils . html import escape , format_html [EOL] from django . utils . safestring import mark_safe [EOL] [EOL] register = template . Library ( ) [EOL] [EOL] [EOL] @ register . simple_tag def optional_login ( request ) : [EOL] [docstring] [EOL] try : [EOL] login_url = reverse ( [string] ) [EOL] except NoReverseMatch : [EOL] return [string] [EOL] [EOL] snippet = [string] [EOL] snippet = format_html ( snippet , href = login_url , next = escape ( request . path ) ) [EOL] [EOL] return mark_safe ( snippet ) [EOL] [EOL] [EOL] @ register . simple_tag def optional_logout ( request , user ) : [EOL] [docstring] [EOL] try : [EOL] logout_url = reverse ( [string] ) [EOL] except NoReverseMatch : [EOL] snippet = format_html ( [string] , user = escape ( user ) ) [EOL] return mark_safe ( snippet ) [EOL] [EOL] snippet = [string] [EOL] snippet = format_html ( snippet , user = escape ( user ) , href = logout_url , next = escape ( request . path ) ) [EOL] [EOL] return mark_safe ( snippet ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any , Optional , Union , Dict , List , Set [EOL] import lowerpines [EOL] import typing [EOL] import builtins [EOL] import io [EOL] import os [EOL] import random [EOL] import re [EOL] from typing import Optional , Set , Union [EOL] [EOL] from django . conf import settings [EOL] from lowerpines . endpoints . bot import Bot [EOL] from lowerpines . endpoints . message import Message [EOL] from lowerpines . message import ComplexMessage [EOL] from lowerpines . message import RefAttach [EOL] [EOL] emojis = [ [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] quips = { [string] : emojis , [string] : emojis , [string] : emojis , [string] : emojis [ [number] : ] , [string] : emojis , [string] : emojis , [string] : emojis , [string] : emojis , [string] : emojis , [string] : emojis [ [number] : ] , [string] : emojis , [string] : emojis , [string] : emojis [ [number] : ] } [EOL] [EOL] PERCENT_CHANCE = int ( os . environ . get ( [string] , [number] ) ) [EOL] [EOL] [EOL] def get_er_words ( ) : [EOL] er_words_file = os . path . join ( settings . BASE_DIR , [string] , [string] , [string] ) [EOL] with io . open ( er_words_file , [string] ) as er_words : [EOL] return set ( word . strip ( ) for word in er_words if not word . startswith ( [string] ) ) [EOL] [EOL] [EOL] matching_words = get_er_words ( ) [EOL] [EOL] [EOL] def i_barely_know_her ( bot , message ) : [EOL] if message . text is not None and random . choice ( range ( [number] , [number] ) ) < PERCENT_CHANCE : [EOL] quip = get_quip ( message ) [EOL] if quip is not None : [EOL] bot . post ( quip ) [EOL] return True [EOL] return False [EOL] [EOL] [EOL] def get_quip ( message ) : [EOL] matches = [ ] [EOL] for word in re . split ( [string] , message . text ) : [EOL] if word . strip ( ) . lower ( ) in matching_words : [EOL] matches . append ( word . strip ( ) . lower ( ) ) [EOL] if matches : [EOL] match = max ( matches , key = str . __len__ ) [EOL] quip = random . choice ( list ( quips . keys ( ) ) ) [EOL] emoji = random . choice ( quips [ quip ] ) [EOL] split_quip = quip . format ( match = match ) . split ( [string] ) [EOL] if len ( split_quip ) > [number] : [EOL] user_ref = RefAttach ( message . user_id , f' [string] { message . name }' ) [EOL] return split_quip [ [number] ] + user_ref + split_quip [ [number] ] + [string] + emoji [EOL] else : [EOL] return split_quip [ [number] ] + [string] + emoji [EOL] return None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Union[lowerpines.message.ComplexMessage,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any , Optional , Dict , List , Set [EOL] import requests [EOL] import lowerpines [EOL] import builtins [EOL] import logging [EOL] import typing [EOL] import io [EOL] import json [EOL] import logging [EOL] import os [EOL] import random [EOL] import re [EOL] from typing import Dict , List , Optional [EOL] [EOL] import requests [EOL] from django . conf import settings [EOL] from lowerpines . endpoints . bot import Bot [EOL] from lowerpines . endpoints . image import ImageConvertRequest [EOL] from lowerpines . message import ImageAttach , ComplexMessage [EOL] [EOL] flickr_url = [string] [EOL] logger = logging . getLogger ( __name__ ) [EOL] janet_messages = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] def unwrap_flickr_response ( text ) : [EOL] if text . startswith ( [string] ) : [EOL] return text [ len ( [string] ) : - [number] ] [EOL] return text [EOL] [EOL] [EOL] def search_flickr ( terms ) : [EOL] args = { [string] : settings . FLICKR_API_KEY , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : terms , [string] : [string] } [EOL] resp = requests . get ( flickr_url , params = args ) [EOL] if resp . status_code >= [number] or resp . status_code < [number] : [EOL] logger . info ( [string] , resp . status_code ) [EOL] logger . debug ( [string] , resp . text ) [EOL] return None [EOL] text = unwrap_flickr_response ( resp . text ) [EOL] return json . loads ( text ) [ [string] ] [ [string] ] [EOL] [EOL] [EOL] def select_url ( photos ) : [EOL] urls = [ photo [ [string] ] for photo in photos if [string] in photo ] [EOL] return random . choice ( urls ) [EOL] [EOL] [EOL] def get_stop_words ( ) : [EOL] stopwords_file = os . path . join ( settings . BASE_DIR , [string] , [string] , [string] ) [EOL] stopwords = io . open ( stopwords_file , [string] ) [EOL] words = [ word . strip ( ) for word in stopwords ] [EOL] stopwords . close ( ) [EOL] return words [EOL] [EOL] [EOL] blacklist_words = get_stop_words ( ) [EOL] [EOL] [EOL] def select_terms_from_message ( message ) : [EOL] alphabetic_only = re . compile ( [string] ) . sub ( [string] , message . lower ( ) ) [EOL] words = set ( re . compile ( [string] ) . split ( alphabetic_only ) ) [EOL] words = { w for w in words if len ( w ) > [number] and w not in blacklist_words } [EOL] if len ( words ) <= [number] : [EOL] return list ( words ) [EOL] else : [EOL] return random . sample ( words , [number] ) [EOL] [EOL] [EOL] def add_to_groupme_img_service ( bot , image_url ) : [EOL] img_data = requests . get ( image_url ) . content [EOL] return ImageConvertRequest ( bot . gmi , img_data ) . result [EOL] [EOL] [EOL] def create_message ( url ) : [EOL] message = random . choice ( janet_messages ) [EOL] return ImageAttach ( url ) + message [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.List]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lowerpines.message.ComplexMessage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from . barely import i_barely_know_her [EOL]	0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Optional [EOL] import lowerpines [EOL] import typing [EOL] import logging [EOL] import logging [EOL] [EOL] from lowerpines . endpoints . bot import Bot [EOL] from lowerpines . message import EmojiAttach [EOL] [EOL] from saucerbot . groupme . handlers import registry [EOL] from saucerbot . utils import ( did_the_dores_win , ) [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] @ registry . handler ( [ [string] , [string] ] ) def go_dores ( bot ) : [EOL] [docstring] [EOL] bot . post ( [string] ) [EOL] [EOL] [EOL] @ registry . handler ( [string] ) def anchor_down ( bot ) : [EOL] [docstring] [EOL] bot . post ( [string] ) [EOL] [EOL] [EOL] @ registry . handler ( [string] ) def black ( bot ) : [EOL] [docstring] [EOL] bot . post ( [string] ) [EOL] [EOL] [EOL] @ registry . handler ( [string] ) def gold ( bot ) : [EOL] [docstring] [EOL] bot . post ( [string] ) [EOL] [EOL] [EOL] @ registry . handler ( [ [string] , [string] ] ) def dores_win ( bot ) : [EOL] [docstring] [EOL] result = did_the_dores_win ( True , True ) [EOL] if result is None : [EOL] bot . post ( [string] + EmojiAttach ( [number] , [number] ) ) [EOL] else : [EOL] bot . post ( result ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any , Match , Optional , Pattern , Union , Callable , Dict , List [EOL] import inspect [EOL] import lowerpines [EOL] import saucerbot [EOL] import builtins [EOL] import typing [EOL] import inspect [EOL] import re [EOL] from typing import Any , Callable , Dict , List , NamedTuple , Optional , Pattern , Sequence , Union [EOL] [EOL] from lowerpines . endpoints . bot import Bot [EOL] from lowerpines . endpoints . message import Message [EOL] from scout_apm . api import instrument [EOL] [EOL] [EOL] class Handler ( NamedTuple ) : [EOL] name = ... [EOL] regexes = ... [EOL] func = ... [EOL] [EOL] @ property def description ( self ) : [EOL] doc = self . func . __doc__ [EOL] return doc . strip ( ) if doc else None [EOL] [EOL] def __str__ ( self ) : [EOL] ret = self . name [EOL] if self . description : [EOL] ret += f' [string] { self . description }' [EOL] return ret [EOL] [EOL] def handle_regexes ( self , bot , message , regexes ) : [EOL] for regex in regexes : [EOL] with instrument ( [string] , tags = { [string] : regex . pattern } ) : [EOL] match = regex . search ( message . text ) [EOL] if match : [EOL] [comment] [EOL] [EOL] [comment] [EOL] sig = inspect . signature ( self . func ) [EOL] [EOL] kwargs = { } [EOL] if [string] in sig . parameters : [EOL] kwargs [ [string] ] = message [EOL] if [string] in sig . parameters : [EOL] kwargs [ [string] ] = match [EOL] [EOL] with instrument ( [string] , tags = { [string] : self . name } ) : [EOL] self . func ( bot , ** kwargs ) [EOL] return True [EOL] [EOL] [comment] [EOL] return False [EOL] [EOL] def run ( self , bot , message ) : [EOL] if self . regexes : [EOL] [comment] [EOL] return self . handle_regexes ( bot , message , self . regexes ) [EOL] else : [EOL] [comment] [EOL] [comment] [EOL] with instrument ( [string] , tags = { [string] : self . name } ) : [EOL] return self . func ( bot , message ) [EOL] [EOL] [EOL] class HandlerRegistry ( Sequence [ Handler ] ) : [EOL] [EOL] def __init__ ( self ) : [EOL] self . handlers = [ ] [EOL] [EOL] [comment] [EOL] def __getitem__ ( self , item ) : [EOL] return self . handlers [ item ] [EOL] [EOL] def __len__ ( self ) : [EOL] return len ( self . handlers ) [EOL] [EOL] def __contains__ ( self , item ) : [EOL] return item in self . handlers [EOL] [EOL] def __iter__ ( self ) : [EOL] return iter ( self . handlers ) [EOL] [EOL] def __reversed__ ( self ) : [EOL] return reversed ( self . handlers ) [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] def get ( self , * args , ** kwargs ) : [EOL] for handler in self . handlers : [EOL] match = True [EOL] for k , v in kwargs . items ( ) : [EOL] if getattr ( handler , k ) != v : [EOL] match = False [EOL] break [EOL] [EOL] if match : [EOL] return handler [EOL] [EOL] return None [EOL] [EOL] def handler ( self , regex = None , name = None , case_sensitive = False ) : [EOL] [docstring] [EOL] regexes = regex or [ ] [EOL] if isinstance ( regex , str ) : [EOL] regexes = [ regex ] [EOL] elif regex and not isinstance ( regex , list ) : [EOL] regexes = list ( regex ) [EOL] [EOL] def wrapper ( func ) : [EOL] flags = [number] [EOL] [EOL] if not case_sensitive : [EOL] flags = flags | re . IGNORECASE [EOL] [EOL] self . handlers . append ( Handler ( name or func . __name__ , [ re . compile ( r , flags ) for r in regexes ] , func , ) ) [EOL] return func [EOL] [EOL] return wrapper [EOL] [EOL] [EOL] [comment] [EOL] registry = HandlerRegistry ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[typing.List[typing.Pattern[builtins.str]]]$ 0 0 0 $typing.Callable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $lowerpines.endpoints.bot.Bot$ 0 $lowerpines.endpoints.message.Message$ 0 $typing.List[typing.Pattern]$ 0 0 0 0 0 0 $typing.List[typing.Pattern]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[typing.Any]]$ 0 0 0 0 0 $lowerpines.endpoints.message.Message$ 0 0 0 0 0 $typing.Optional[typing.Match[typing.Any]]$ 0 0 0 0 0 0 0 $inspect.Signature$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 $inspect.Signature$ 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $lowerpines.endpoints.message.Message$ 0 0 0 0 $inspect.Signature$ 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Optional[typing.Match[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lowerpines.endpoints.bot.Bot$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $lowerpines.endpoints.bot.Bot$ 0 $lowerpines.endpoints.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lowerpines.endpoints.bot.Bot$ 0 $lowerpines.endpoints.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $lowerpines.endpoints.bot.Bot$ 0 $lowerpines.endpoints.message.Message$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[Handler]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[Handler]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable$ 0 0 0 $typing.Union[builtins.str,typing.List[builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.Union[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 $typing.Union[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $typing.Union[builtins.str,typing.List[builtins.str]]$ 0 0 0 $typing.Union[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 $typing.Union[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.Union[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 $typing.Callable$ 0 $typing.Callable$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Callable$ 0 0 0 0 0 $typing.Callable$ 0 0 0 0 0 0 0 0 0 $saucerbot.groupme.handlers.HandlerRegistry$ 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any , Optional , List , Pattern [EOL] import datetime [EOL] import lowerpines [EOL] import builtins [EOL] import logging [EOL] import arrow [EOL] import typing [EOL] import logging [EOL] import os [EOL] import random [EOL] import re [EOL] import tempfile [EOL] from pathlib import Path [EOL] [EOL] import arrow [EOL] import requests [EOL] from dateutil . tz import gettz [EOL] from lowerpines . endpoints . bot import Bot [EOL] from lowerpines . endpoints . message import Message [EOL] from lowerpines . message import ComplexMessage , EmojiAttach , RefAttach [EOL] [EOL] from saucerbot . groupme . handlers import registry [EOL] from saucerbot . groupme . models import HistoricalNickname [EOL] from saucerbot . groupme . utils import i_barely_know_her , janet [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] CATFACTS_CHANCE = float ( os . environ . get ( [string] , [number] ) ) / [number] [EOL] CATFACTS_URL = [string] [EOL] [EOL] REMOVE_RE = re . compile ( [string] ) [EOL] ADD_RE = re . compile ( [string] ) [EOL] CHANGE_RE = re . compile ( [string] ) [EOL] [EOL] PICTURE_RESPONSE_CHANCE = float ( os . environ . get ( [string] , [number] ) ) / [number] [EOL] PICTURE_RESPONSES = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] CENTRAL_TIME = gettz ( [string] ) [EOL] [EOL] [EOL] def nickname_entry ( bot , nickname , timestamp ) : [EOL] [comment] [EOL] user_id = None [EOL] [EOL] [comment] [EOL] bot . group . refresh ( ) [EOL] for member in bot . group . members : [EOL] if member . nickname == nickname : [EOL] user_id = member . user_id [EOL] break [EOL] [EOL] if not user_id : [EOL] logger . warning ( [string] , nickname ) [EOL] return [EOL] [EOL] HistoricalNickname . objects . create ( group_id = bot . group_id , groupme_id = user_id , timestamp = timestamp . datetime , nickname = nickname , ) [EOL] [EOL] [EOL] @ registry . handler ( ) def system_messages ( bot , message ) : [EOL] [docstring] [EOL] if not message . system : [EOL] return False [EOL] [EOL] remove_match = REMOVE_RE . match ( message . text ) [EOL] add_match = ADD_RE . match ( message . text ) [EOL] change_name_match = CHANGE_RE . match ( message . text ) [EOL] [EOL] [comment] [EOL] timestamp = arrow . get ( message . created_at ) [EOL] [EOL] if remove_match : [EOL] bot . post ( ComplexMessage ( [ EmojiAttach ( [number] , [number] ) ] ) ) [EOL] return True [EOL] [EOL] if add_match : [EOL] bot . post ( ComplexMessage ( [ EmojiAttach ( [number] , [number] ) ] ) ) [EOL] [EOL] [comment] [EOL] new_member = add_match . group ( [string] ) [EOL] nickname_entry ( bot , new_member , timestamp ) [EOL] [EOL] return True [EOL] [EOL] if change_name_match : [EOL] bot . post ( ComplexMessage ( [ EmojiAttach ( [number] , [number] ) ] ) ) [EOL] [EOL] [comment] [EOL] new_name = change_name_match . group ( [string] ) [EOL] nickname_entry ( bot , new_name , timestamp ) [EOL] [EOL] return True [EOL] [EOL] return False [EOL] [EOL] [EOL] @ registry . handler ( [string] ) def whoami ( bot , message ) : [EOL] [docstring] [EOL] nicknames = HistoricalNickname . objects . filter ( group_id = bot . group_id , groupme_id = message . user_id ) . order_by ( [string] ) [EOL] [EOL] response = [string] [EOL] [EOL] [comment] [EOL] now = arrow . now ( CENTRAL_TIME ) [EOL] [EOL] for nickname in nicknames : [EOL] timestamp = arrow . get ( nickname . timestamp ) [EOL] next_line = f'{ nickname . nickname } [string] { timestamp . humanize ( now ) } [string] ' [EOL] if len ( response ) + len ( next_line ) > [number] : [EOL] bot . post ( response ) [EOL] response = next_line [EOL] else : [EOL] response += next_line [EOL] [EOL] [comment] [EOL] if response : [EOL] bot . post ( response ) [EOL] [EOL] [EOL] @ registry . handler ( ) def mars ( bot , message , chances = PICTURE_RESPONSE_CHANCE ) : [EOL] [docstring] [EOL] for attachment in message . attachments : [EOL] if attachment [ [string] ] == [string] and random . random ( ) < chances : [EOL] user_attach = RefAttach ( message . user_id , f' [string] { message . name }' ) [EOL] response = random . choice ( PICTURE_RESPONSES ) [EOL] bot . post ( response [ : - [number] ] + [string] + user_attach + response [ - [number] ] ) [EOL] return True [EOL] [EOL] return False [EOL] [EOL] [EOL] @ registry . handler ( [string] ) def you_suck_too_coach ( bot ) : [EOL] [docstring] [EOL] bot . post ( [string] ) [EOL] [EOL] [EOL] @ registry . handler ( [string] ) def catfacts ( bot ) : [EOL] [docstring] [EOL] if random . random ( ) < CATFACTS_CHANCE : [EOL] catfact = requests . get ( CATFACTS_URL ) . json ( ) [EOL] bot . post ( catfact [ [string] ] ) [EOL] [EOL] [EOL] @ registry . handler ( [string] ) def lit ( bot ) : [EOL] [docstring] [EOL] bot . post ( [string] ) [EOL] [EOL] [EOL] @ registry . handler ( [string] , case_sensitive = True ) def dont_at_me ( bot ) : [EOL] [docstring] [EOL] bot . post ( [string] ) [EOL] [EOL] [EOL] @ registry . handler ( [ [string] , [string] ] ) def sneaky ( bot ) : [EOL] [docstring] [EOL] bot . post ( [string] ) [EOL] [EOL] [EOL] @ registry . handler ( [string] ) def ask_janet ( bot , message ) : [EOL] [docstring] [EOL] terms = janet . select_terms_from_message ( message . text ) [EOL] if not terms or random . random ( ) < [number] : [EOL] terms = [ [string] ] [comment] [EOL] photos = janet . search_flickr ( terms ) [EOL] if not photos : [EOL] bot . post ( f" [string] { terms }" ) [EOL] else : [EOL] url = janet . select_url ( photos ) [EOL] groupme_image = janet . add_to_groupme_img_service ( bot , url ) [EOL] bot . post ( janet . create_message ( groupme_image ) ) [EOL] [EOL] [EOL] @ registry . handler ( ) def handle_barely_know_her ( bot , message ) : [EOL] [docstring] [EOL] return i_barely_know_her ( bot , message ) [EOL] [EOL] [EOL] @ registry . handler ( [ [string] , [string] , [string] ] ) def teenage_saucerbot ( bot ) : [EOL] [docstring] [EOL] bot . post ( [string] ) [EOL] [EOL] [EOL] @ registry . handler ( ) def too_early_for_thai ( bot , message ) : [EOL] [docstring] [EOL] [comment] [EOL] timestamp = arrow . get ( message . created_at ) . to ( CENTRAL_TIME ) [EOL] [EOL] hour = timestamp . time ( ) . hour [EOL] [EOL] with Path ( tempfile . gettempdir ( ) , [string] ) as lockfile : [EOL] if [number] <= hour < [number] and not lockfile . exists ( ) : [EOL] bot . post ( [string] ) [EOL] lockfile . touch ( ) [EOL] return True [EOL] else : [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[datetime.tzinfo]$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[datetime.tzinfo]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[datetime.tzinfo]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RenameModel ( old_name = [string] , new_name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
[comment] [EOL] [EOL] from typing import Any , List [EOL] import typing [EOL] import arrow [EOL] from django . core . management . base import BaseCommand [EOL] [EOL] from saucerbot . groupme . models import Bot , HistoricalNickname [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] timestamp = arrow . utcnow ( ) [EOL] [EOL] nickname_list = [ ] [EOL] [EOL] for bot in Bot . objects . all ( ) : [EOL] for member in bot . group . members : [EOL] nickname_list . append ( HistoricalNickname ( groupme_id = member . user_id , timestamp = timestamp . datetime , nickname = member . nickname , ) ) [EOL] [EOL] HistoricalNickname . objects . bulk_create ( nickname_list ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0
[comment] [EOL] [EOL] import saucerbot [EOL] from django . core . management . base import BaseCommand [EOL] [EOL] from saucerbot . utils import BrewsLoaderUtil [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] loader = BrewsLoaderUtil ( ) [EOL] loader . load_all_brews ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $saucerbot.utils.base.BrewsLoaderUtil$ 0 0 0 0 0 $saucerbot.utils.base.BrewsLoaderUtil$ 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any , Dict , DefaultDict [EOL] import typing [EOL] import builtins [EOL] import django [EOL] from collections import defaultdict [EOL] from typing import DefaultDict , Dict [EOL] [EOL] from django . core . management . base import BaseCommand , CommandParser [EOL] [EOL] from saucerbot . groupme . models import Bot [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , help = [string] ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] bot = Bot . objects . get ( slug = options [ [string] ] ) [EOL] [EOL] messages_by_user = defaultdict ( int ) [EOL] user_id_to_user = { } [EOL] [EOL] for m in bot . bot . group . messages . all ( ) : [EOL] user_id_to_user . setdefault ( m . user_id , m . name ) [EOL] messages_by_user [ m . user_id ] += [number] [EOL] [EOL] for messages , user_id in reversed ( sorted ( ( b , a ) for a , b in messages_by_user . items ( ) ) ) : [EOL] print ( f'{ messages } [string] { user_id_to_user [ user_id ] }' ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $django.core.management.base.CommandParser$ 0 0 0 $django.core.management.base.CommandParser$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.DefaultDict[builtins.str,builtins.int]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.DefaultDict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.DefaultDict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any , Optional , Match , Dict , List [EOL] import saucerbot [EOL] import typing [EOL] import builtins [EOL] import logging [EOL] from typing import Any , Dict , List , Optional [EOL] import logging [EOL] import random [EOL] import re [EOL] import arrow [EOL] from requests . exceptions import RequestException [EOL] from arrow . parser import ParserError [EOL] from saucerbot . utils . parsers import BridgestoneEventsParser [EOL] from saucerbot . utils . parsers import BridgestoneEventTimeParser , HtmlContentProvider [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] __bridgestone_date_pattern = [string] [EOL] __bridgestone_time_pattern = [string] [EOL] __message_formats = [ [string] , [string] , [string] , [string] ] [EOL] __preds_quips = [ [string] , [string] , [string] ] [EOL] [EOL] __general_quips = [ [string] , [string] , [string] ] [EOL] [EOL] bridgestone_events_url = [string] [EOL] [EOL] [EOL] def get_todays_events ( ) : [EOL] today = arrow . now ( [string] ) [EOL] all_events = get_all_events ( HtmlContentProvider ( bridgestone_events_url ) ) [EOL] return get_events_for_date ( all_events , today ) [EOL] [EOL] [EOL] def get_events_for_date ( events , date ) : [EOL] results = [ ] [EOL] for ev in events : [EOL] event_date = ev [ [string] ] [EOL] if date . day == event_date . day \ [EOL] and date . month == event_date . month : [EOL] results . append ( ev ) [EOL] return results [EOL] [EOL] [EOL] def get_all_events ( provider ) : [EOL] events = [ ] [EOL] for ev in BridgestoneEventsParser ( provider ) . parse ( ) : [EOL] try : [EOL] ev [ [string] ] = arrow . get ( ev [ [string] ] , __bridgestone_date_pattern ) [EOL] events . append ( ev ) [EOL] except ParserError : [EOL] logger . info ( [string] , ev [ [string] ] ) [EOL] [comment] [EOL] continue [EOL] return events [EOL] [EOL] [EOL] def create_message ( event ) : [EOL] template = random . choice ( __message_formats ) [EOL] time_string = get_event_time ( event ) [EOL] if not time_string : [EOL] time_string = [string] [EOL] else : [EOL] time_string = [string] + time_string [EOL] preds_match = re . fullmatch ( [string] , event [ [string] ] ) [EOL] if preds_match : [EOL] team = preds_match . group ( [number] ) [EOL] event_string = random . choice ( __preds_quips ) . format ( team = team ) [EOL] else : [EOL] event_string = random . choice ( __general_quips ) . format ( name = event [ [string] ] ) [EOL] return template . format ( event = event_string , time = time_string ) [EOL] [EOL] [EOL] def get_event_time ( event ) : [EOL] provider = BridgestoneEventTimeParser . create_event_time_provider ( event ) [EOL] return get_event_time_helper ( provider , event [ [string] ] ) [EOL] [EOL] [EOL] def get_event_time_helper ( provider , event_name ) : [EOL] try : [EOL] parser = BridgestoneEventTimeParser ( provider ) [EOL] times = list ( t for t in parser . parse ( ) ) [EOL] raw_time_str = None [EOL] if times : [EOL] raw_time_str = times [ [number] ] [ [string] ] [EOL] else : [EOL] time_span = provider . get_content ( ) . select_one ( [string] ) [EOL] if time_span : [EOL] raw_time_str = time_span . text [EOL] [EOL] if raw_time_str : [EOL] return arrow . get ( raw_time_str , __bridgestone_time_pattern ) . format ( [string] ) [EOL] else : [EOL] logger . info ( [string] , event_name ) [EOL] return None [EOL] [EOL] except ( RequestException , ParserError ) as e : [EOL] logger . info ( [string] , event_name , exc_info = e ) [EOL] return None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any , Optional , Tuple , Dict , List [EOL] import requests [EOL] import builtins [EOL] import logging [EOL] import arrow [EOL] import typing [EOL] import datetime [EOL] import logging [EOL] import math [EOL] import random [EOL] import sys [EOL] from typing import Dict , Optional , Tuple [EOL] [EOL] import arrow [EOL] import requests [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] ESPN_FOOTBALL_URL = ( [string] [string] [string] ) [EOL] [EOL] WINNING_FORMATS = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] LOSING_FORMATS = [ [string] , [string] ] [EOL] [EOL] IN_PROGRESS_MESSAGES = [ [string] , [string] , [string] ] [EOL] [EOL] [EOL] def get_football_results ( desired_date ) : [EOL] logger . debug ( [string] ) [EOL] if [number] < desired_date . month < [number] : [comment] [EOL] return None [EOL] if ( desired_date . month == [number] and desired_date . day > [number] ) or desired_date . month == [number] : [EOL] [comment] [EOL] season_type = [number] [comment] [EOL] week = [number] [EOL] else : [EOL] season_type = [number] [comment] [EOL] week = __get_week ( desired_date ) [EOL] logger . debug ( [string] , week ) [EOL] url = ESPN_FOOTBALL_URL . format ( year = desired_date . year , week = week , season = season_type ) [EOL] logger . debug ( [string] , url ) [EOL] response = requests . get ( url ) [EOL] if [number] <= response . status_code < [number] : [EOL] scores = response . json ( ) [EOL] game = __get_the_dores_game ( scores ) [EOL] return game [EOL] else : [EOL] logger . warning ( [string] , response . status_code , response . text ) [EOL] return None [EOL] [EOL] [EOL] def __get_the_dores_game ( scores ) : [EOL] for ev in scores [ [string] ] : [EOL] teams = ev [ [string] ] [ [number] ] [ [string] ] [EOL] for team in teams : [EOL] if team [ [string] ] [ [string] ] == [string] : [EOL] return ev [EOL] logger . info ( [string] ) [EOL] return None [EOL] [EOL] [EOL] def __get_teams ( game ) : [EOL] [docstring] [EOL] team1 = game [ [string] ] [ [number] ] [ [string] ] [ [number] ] [EOL] team2 = game [ [string] ] [ [number] ] [ [string] ] [ [number] ] [EOL] if team1 [ [string] ] [ [string] ] == [string] : [EOL] return team1 , team2 [EOL] else : [EOL] return team2 , team1 [EOL] [EOL] [EOL] def __get_week ( desired_date ) : [EOL] [docstring] [EOL] labor_day = arrow . get ( datetime . datetime ( desired_date . year , [number] , [number] ) , [string] ) [EOL] while labor_day . weekday ( ) != [number] : [EOL] labor_day = labor_day . shift ( days = + [number] ) [EOL] [comment] [EOL] week_1 = labor_day . shift ( days = - [number] ) [EOL] diff = desired_date - week_1 [EOL] week = int ( math . floor ( diff . days / [number] ) ) + [number] [EOL] return week [EOL] [EOL] [EOL] def did_the_dores_win ( print_in_progress = False , print_loss = False , desired_date = None ) : [EOL] [docstring] [EOL] if desired_date is None : [EOL] desired_date = arrow . now ( [string] ) [EOL] game = get_football_results ( desired_date ) [EOL] if game is None : [EOL] logger . debug ( [string] ) [EOL] return None [EOL] else : [EOL] vandy , opponent = __get_teams ( game ) [EOL] if game [ [string] ] [ [string] ] [ [string] ] is False : [EOL] logger . debug ( [string] ) [EOL] if print_in_progress : [EOL] return random . choice ( IN_PROGRESS_MESSAGES ) [EOL] else : [EOL] return None [EOL] elif vandy [ [string] ] is True : [EOL] response = random . choice ( WINNING_FORMATS ) [EOL] else : [EOL] if print_loss : [EOL] response = random . choice ( LOSING_FORMATS ) [EOL] else : [EOL] logger . debug ( [string] ) [EOL] return None [EOL] return response . format ( team = opponent [ [string] ] [ [string] ] , vandy_score = vandy [ [string] ] , other_score = opponent [ [string] ] ) [EOL] [EOL] [EOL] [comment] [EOL] if __name__ == [string] : [EOL] if len ( sys . argv ) > [number] : [EOL] date = arrow . get ( sys . argv [ [number] ] , [string] ) [EOL] else : [EOL] date = None [EOL] print ( did_the_dores_win ( True , True , date ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict]$ 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Dict,typing.Dict]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0
[comment] [EOL] [EOL] from . base import BrewsLoaderUtil , brew_searcher , get_tasted_brews , get_insult , get_new_arrivals [EOL] from . the_dores import did_the_dores_win [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , Optional , List [EOL] import typing [EOL] import os [EOL] [EOL] from saucerbot . settings . base import HEROKU_APP_NAME [EOL] [EOL] EMAIL_HOST = [string] [EOL] EMAIL_HOST_USER = [string] [EOL] EMAIL_HOST_PASSWORD = os . environ . get ( [string] ) [EOL] EMAIL_PORT = [number] [EOL] EMAIL_USE_TLS = True [EOL] EMAIL_SUBJECT_PREFIX = f' [string] { HEROKU_APP_NAME } [string] ' [EOL] [EOL] SERVER_EMAIL = f' [string] { HEROKU_APP_NAME } [string] ' [EOL] [EOL] ADMINS = [ ( [string] , os . environ . get ( [string] ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,typing.Optional[builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any , Optional , Union , Dict , List [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] [EOL] import os [EOL] from typing import Optional [EOL] [EOL] import dj_database_url [EOL] [EOL] [comment] [EOL] BASE_DIR = os . path . dirname ( os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) ) [EOL] [EOL] [comment] [EOL] HEROKU_APP_NAME = os . environ . get ( [string] , [string] ) [EOL] GROUPME_CLIENT_ID = os . environ . get ( [string] , [string] ) [EOL] FLICKR_API_KEY = os . environ . get ( [string] ) [EOL] ELASTICSEARCH_URL = os . environ . get ( [string] ) [EOL] [EOL] [EOL] [comment] [EOL] DEBUG = False [EOL] [EOL] SERVER_DOMAIN = f'{ HEROKU_APP_NAME } [string] ' [EOL] [EOL] [comment] [EOL] ALLOWED_HOSTS = [ SERVER_DOMAIN , [string] ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] INSTALLED_APPS = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] MIDDLEWARE = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] ROOT_URLCONF = [string] [EOL] [EOL] TEMPLATES = [ { [string] : [string] , [string] : [ ] , [string] : True , [string] : { [string] : [ [string] , [string] , [string] , [string] , ] , } , } , ] [EOL] [EOL] WSGI_APPLICATION = [string] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] DATABASES = { [string] : dj_database_url . config ( conn_max_age = [number] , ssl_require = True ) , } [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] AUTH_PASSWORD_VALIDATORS = [ { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , ] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] LANGUAGE_CODE = [string] [EOL] [EOL] TIME_ZONE = [string] [EOL] [EOL] USE_I18N = True [EOL] [EOL] USE_L10N = True [EOL] [EOL] USE_TZ = True [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] STATIC_URL = [string] [EOL] [EOL] STATIC_ROOT = os . path . join ( BASE_DIR , [string] ) [EOL] [EOL] STATICFILES_STORAGE = [string] [EOL] [EOL] WHITENOISE_KEEP_ONLY_HASHED_FILES = True [EOL] [EOL] [EOL] REST_FRAMEWORK = { [string] : [ [string] , [string] , [string] , ] , } [EOL] [EOL] [comment] [EOL] SCOUT_NAME = HEROKU_APP_NAME [EOL] [EOL] [comment] [EOL] ROLLBAR = { [string] : os . environ . get ( [string] ) , [string] : os . environ . get ( [string] ) , [string] : BASE_DIR , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.List[builtins.str]],typing.List[typing.Any],builtins.bool,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Optional[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Optional [EOL] import typing [EOL] import os [EOL] [EOL] from django . core . exceptions import ImproperlyConfigured [EOL] from split_settings . tools import include [EOL] [EOL] [comment] [EOL] ENV = os . environ . get ( [string] ) [EOL] [EOL] if not ENV : [EOL] raise ImproperlyConfigured ( [string] ) [EOL] [EOL] [comment] [EOL] include ( [string] , [string] , [string] , f' [string] { ENV } [string] ' , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any , Dict , List [EOL] import typing [EOL] import dj_database_url [EOL] [EOL] SECRET_KEY = [string] [EOL] [EOL] DEBUG = True [EOL] [EOL] SERVER_DOMAIN = [string] [EOL] [EOL] ALLOWED_HOSTS = [ [string] ] [EOL] [EOL] [comment] [EOL] DATABASES = { [string] : dj_database_url . config ( conn_max_age = [number] ) , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple [EOL] import typing [EOL] import os [EOL] [EOL] from saucerbot . settings . base import HEROKU_APP_NAME [EOL] [EOL] [comment] [EOL] SECRET_KEY = os . environ [ [string] ] [EOL] [EOL] [comment] [EOL] SECURE_PROXY_SSL_HEADER = ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] if HEROKU_APP_NAME : [EOL] SECURE_SSL_REDIRECT = True [EOL] SECURE_SSL_HOST = f'{ HEROKU_APP_NAME } [string] ' [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple [EOL] import typing [EOL] import os [EOL] [EOL] from saucerbot . settings . base import HEROKU_APP_NAME [EOL] [EOL] [comment] [EOL] SECRET_KEY = os . environ [ [string] ] [EOL] [EOL] [comment] [EOL] SECURE_PROXY_SSL_HEADER = ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] if HEROKU_APP_NAME : [EOL] SECURE_SSL_REDIRECT = True [EOL] SECURE_SSL_HOST = f'{ HEROKU_APP_NAME } [string] ' [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] SECRET_KEY = [string] [EOL]	0 0 0 0 0 $builtins.str$ 0 0 0
	0
[comment] [EOL] [EOL] from typing import Any , Dict , List [EOL] import typing [EOL] import dj_database_url [EOL] [EOL] SECRET_KEY = [string] [EOL] [EOL] DEBUG = True [EOL] [EOL] ALLOWED_HOSTS = [ [string] ] [EOL] [EOL] SERVER_DOMAIN = [string] [EOL] [EOL] [comment] [EOL] DATABASES = { [string] : dj_database_url . config ( default = [string] , conn_max_age = [number] ) , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0