import pytest [EOL] [EOL] @ pytest . fixture ( autouse = True ) def media_root ( tmpdir , settings ) : [EOL] settings . MEDIA_ROOT = tmpdir / [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import os [EOL] import sys [EOL] [EOL] if __name__ == [string] : [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] from django . core . management import execute_from_command_line [EOL] [EOL] execute_from_command_line ( sys . argv ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
default_app_config = [string] [EOL]	$builtins.str$ 0 0 0
from typing import Any , Iterable , List , Set , Optional [EOL] import typing [EOL] import builtins [EOL] import requests [EOL] import semesterpage [EOL] import re [EOL] from typing import Iterable , List , Optional [EOL] from urllib . parse import urljoin [EOL] [EOL] from bs4 import BeautifulSoup as bs [EOL] [EOL] import requests [EOL] [EOL] from semesterpage . models import Course [EOL] [EOL] [EOL] class MathematicalSciencesCrawler : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , courses ) : [EOL] self . crawlers = [ MathematicalSciencesCourseCrawler ( code = course . course_code ) for course in courses ] [EOL] [EOL] def __iter__ ( self ) : [EOL] return ( crawler for crawler in self . crawlers if crawler ) [EOL] [EOL] [EOL] class MathematicalSciencesCourseCrawler : [EOL] WIKI_URL = [string] [EOL] [EOL] def __init__ ( self , code ) : [EOL] self . code = code [EOL] [EOL] @ property def homepage_url ( self ) : [EOL] return self . WIKI_URL + self . code [EOL] [EOL] @ property def has_content ( self ) : [EOL] try : [EOL] response = requests . get ( self . homepage_url ) [EOL] except Exception : [EOL] return False [EOL] if not response . ok : [EOL] return False [EOL] return True [EOL] [EOL] def exams_pages ( self ) : [EOL] try : [EOL] response = requests . get ( self . homepage_url , timeout = [number] ) [EOL] except Exception : [EOL] return [ ] [EOL] if not response . ok : [EOL] return [ ] [EOL] [EOL] soup = bs ( response . content , [string] ) [EOL] years = soup . find_all ( [string] , text = re . compile ( [string] ) , href = True , ) [EOL] if not years : [EOL] return [ ] [EOL] [EOL] years = [ urljoin ( self . WIKI_URL , year [ [string] ] ) for year in years ] [EOL] result = set ( ) [EOL] [EOL] for year in years : [EOL] try : [EOL] response = requests . get ( year , timeout = [number] ) [EOL] except Exception : [EOL] continue [EOL] if not response . ok : [EOL] continue [EOL] [EOL] soup = bs ( response . content , [string] ) [EOL] patterns = [string] + [string] . join ( [ [string] , [string] , ] ) + [string] [EOL] link = soup . find ( [string] , text = re . compile ( patterns , re . IGNORECASE ) , href = True , ) [EOL] if link : [EOL] result . add ( urljoin ( self . WIKI_URL , link [ [string] ] ) ) [EOL] else : [EOL] result . add ( self . homepage_url ) [EOL] [EOL] return list ( result ) [EOL] [EOL] def pdf_urls ( self ) : [EOL] exams_urls = self . exams_pages ( ) [EOL] if not exams_urls : [EOL] return [ ] [EOL] [EOL] result = set ( ) [EOL] [EOL] for exams_url in exams_urls : [EOL] if exams_url [ - [number] : ] == [string] : [EOL] [comment] [EOL] result . add ( exams_url ) [EOL] continue [EOL] try : [EOL] response = requests . get ( exams_url , timeout = [number] ) [EOL] except Exception : [EOL] continue [EOL] if not response . ok : [EOL] continue [EOL] [EOL] soup = bs ( response . content , [string] ) [EOL] links = soup . find_all ( [string] ) [EOL] for link in links : [EOL] if link . get ( [string] ) and link . get ( [string] ) . endswith ( [string] ) : [EOL] result . add ( urljoin ( self . WIKI_URL , link . get ( [string] ) ) ) [EOL] [EOL] return list ( result ) [EOL] [EOL] def __repr__ ( self ) : [EOL] return f" [string] { self . code } [string] " [EOL] [EOL] def __bool__ ( self ) : [EOL] return self . has_content [EOL] [EOL] [EOL] class DvikanCrawler : [EOL] [docstring] [EOL] [EOL] BASE_URL = [string] [EOL] [EOL] @ classmethod def course_urls ( cls ) : [EOL] [docstring] [EOL] response = cls . get ( cls . BASE_URL ) [EOL] if not response : [EOL] return [ ] [EOL] [EOL] soup = bs ( response . content , [string] ) [EOL] links = soup . find_all ( [string] ) [EOL] return ( cls . BASE_URL + link . get ( [string] ) for link in links if link . get ( [string] ) != [string] [EOL] and link . get ( [string] , [string] ) [ - [number] ] == [string] ) [EOL] [EOL] @ classmethod def pdf_urls ( cls ) : [EOL] [docstring] [EOL] for course_url in cls . course_urls ( ) : [EOL] response = cls . get ( course_url ) [EOL] if not response : [EOL] continue [EOL] [EOL] soup = bs ( response . content , [string] ) [EOL] pdf_links = soup . find_all ( [string] , href = re . compile ( [string] ) ) [EOL] for pdf_link in pdf_links : [EOL] yield urljoin ( course_url , pdf_link . get ( [string] ) ) [EOL] return [EOL] [EOL] @ staticmethod def get ( url ) : [EOL] [docstring] [EOL] try : [EOL] return requests . get ( url , timeout = [number] ) [EOL] except Exception : [EOL] return None [EOL] [EOL] [EOL] class PhysicsCrawler : [EOL] [docstring] [EOL] [EOL] BASE_URL = [string] [EOL] [EOL] @ classmethod def course_urls ( cls ) : [EOL] [docstring] [EOL] response = cls . get ( cls . BASE_URL ) [EOL] if not response : [EOL] return [ ] [EOL] [EOL] soup = bs ( response . content , [string] ) [EOL] links = soup . select ( [string] ) [EOL] return ( urljoin ( cls . BASE_URL , link . get ( [string] ) ) for link in links ) [EOL] [EOL] @ classmethod def pdf_urls ( cls ) : [EOL] [docstring] [EOL] for course_url in cls . course_urls ( ) : [EOL] response = cls . get ( course_url ) [EOL] if not response : [EOL] continue [EOL] [EOL] soup = bs ( response . content , [string] ) [EOL] pdf_links = soup . find_all ( [string] , href = re . compile ( [string] ) ) [EOL] for pdf_link in pdf_links : [EOL] yield urljoin ( cls . BASE_URL , pdf_link . get ( [string] ) ) [EOL] return [EOL] [EOL] @ staticmethod def get ( url ) : [EOL] [docstring] [EOL] try : [EOL] return requests . get ( url , timeout = [number] ) [EOL] except Exception : [EOL] return None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Iterable[builtins.str]$ 0 0 0 0 0 0 0 $typing.Optional[requests.models.Response]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[requests.models.Response]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Optional[requests.models.Response]$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterable[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[requests.models.Response]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[requests.models.Response]$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Optional[requests.models.Response]$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[requests.models.Response]$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Iterable[builtins.str]$ 0 0 0 0 0 0 0 $typing.Optional[requests.models.Response]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[requests.models.Response]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Optional[requests.models.Response]$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Iterable[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[requests.models.Response]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[requests.models.Response]$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Optional[requests.models.Response]$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[requests.models.Response]$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , List , Type , Any [EOL] import typing [EOL] import examiner [EOL] from random import randint [EOL] [EOL] from django . conf import settings [EOL] from django . contrib . auth . mixins import LoginRequiredMixin [EOL] from django . db import transaction [EOL] from django . db . models import F [EOL] from django . http import JsonResponse [EOL] from django . shortcuts import get_object_or_404 , redirect , render [EOL] from django . views . generic . edit import FormView [EOL] from django . views . generic . list import ListView [EOL] [EOL] from examiner . forms import ExamsSearchForm , VerifyExamForm [EOL] from examiner . models import DocumentInfo , DocumentInfoSource , Pdf , PdfUrl [EOL] from semesterpage . models import Course , Semester , StudyProgram [EOL] from semesterpage . views import CourseAutocomplete [EOL] [EOL] [EOL] DEFAULT_SEMESTER_PK = getattr ( settings , [string] , [number] ) [EOL] [EOL] [EOL] class ExamsView ( ListView ) : [EOL] model = PdfUrl [EOL] template_name = [string] [EOL] http_method_names = [ [string] ] [EOL] [EOL] def get_context_data ( self , ** kwargs ) : [EOL] super ( ) . get_context_data ( ** kwargs ) [EOL] course_code = self . kwargs . get ( [string] ) [EOL] docinfos = ( DocumentInfo . objects . order_by ( F ( [string] ) , F ( [string] ) . desc ( nulls_last = True ) , F ( [string] ) . desc ( ) , ) ) [EOL] if course_code : [EOL] docinfos = docinfos . filter ( course_code__iexact = course_code . upper ( ) , ) [EOL] [EOL] context = { [string] : docinfos . organize ( ) } [EOL] [EOL] if self . kwargs . get ( [string] ) : [EOL] [comment] [EOL] return context [ [string] ] [EOL] [EOL] add_context ( request = self . request , context = context ) [EOL] if course_code : [EOL] context [ [string] ] = f' [string] ' + course_code [EOL] context [ [string] ] = Course . objects . get ( course_code = course_code . upper ( ) , ) [EOL] else : [EOL] context [ [string] ] = [string] [EOL] [EOL] return context [EOL] [EOL] def get ( self , request , * args , ** kwargs ) : [EOL] if self . kwargs . get ( [string] ) : [EOL] [comment] [EOL] self . object_list = self . get_queryset ( ) [EOL] organization = self . get_context_data ( ) [EOL] return JsonResponse ( organization ) [EOL] [EOL] [comment] [EOL] return super ( ) . get ( request , * args , ** kwargs ) [EOL] [EOL] [EOL] class VerifyView ( LoginRequiredMixin , FormView ) : [EOL] template_name = [string] [EOL] form_class = VerifyExamForm [EOL] http_method_names = [ [string] , [string] ] [EOL] [EOL] def get ( self , request , * args , ** kwargs ) : [EOL] [docstring] [EOL] sha1_hash = self . kwargs . get ( [string] ) [EOL] if sha1_hash : [EOL] pdf = get_object_or_404 ( klass = Pdf , sha1_hash = sha1_hash , ) [EOL] else : [EOL] exam_pdfs = DocumentInfoSource . objects . filter ( verified_by__isnull = True , ) [EOL] pdf = exam_pdfs [ randint ( [number] , exam_pdfs . count ( ) - [number] ) ] . pdf [EOL] [EOL] exams = pdf . exams . all ( ) [EOL] form = VerifyExamForm ( instance = pdf . exams . first ( ) , initial = { [string] : exams . values_list ( [string] , flat = True ) , [string] : pdf , [string] : request . user , } , ) [EOL] context = { [string] : pdf , [string] : form } [EOL] add_context ( request , context ) [EOL] return render ( request , [string] , context ) [EOL] [EOL] @ transaction . atomic def form_valid ( self , form ) : [EOL] form . save ( commit = True ) [EOL] courses = form . courses [EOL] if courses . exists ( ) : [EOL] [comment] [EOL] course_code = courses . first ( ) . course_code [EOL] return redirect ( to = [string] , course_code = course_code ) [EOL] return redirect ( to = [string] ) [EOL] [EOL] [EOL] class CourseWithExamsAutocomplete ( CourseAutocomplete ) : [EOL] [docstring] [EOL] [EOL] LOGIN_REQUIRED = False [EOL] [EOL] def get_queryset ( self ) : [EOL] qs = super ( ) . get_queryset ( ) [EOL] return qs . filter ( docinfos__isnull = False ) . distinct ( ) [EOL] [EOL] [EOL] class SearchView ( FormView ) : [EOL] [docstring] [EOL] [EOL] template_name = [string] [EOL] form_class = ExamsSearchForm [EOL] http_method_names = [ [string] , [string] ] [EOL] [EOL] def form_valid ( self , form ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] course = form . cleaned_data [ [string] ] [ [number] ] [EOL] return redirect ( to = [string] , course_code = course . course_code , ) [EOL] [EOL] def get_context_data ( self , ** kwargs ) : [EOL] [docstring] [EOL] context = super ( ) . get_context_data ( ** kwargs ) [EOL] add_context ( request = self . request , context = context ) [EOL] context [ [string] ] = Pdf . objects . count ( ) [EOL] context [ [string] ] = ( DocumentInfoSource . objects . distinct ( [string] ) . count ( ) ) [EOL] return context [EOL] [EOL] [EOL] def add_context ( request , context ) : [EOL] [docstring] [EOL] semester_pk = request . session . get ( [string] , DEFAULT_SEMESTER_PK ) [EOL] try : [EOL] semester = Semester . objects . get ( pk = semester_pk ) [EOL] except Semester . DoesNotExist : [EOL] semester = None [EOL] [EOL] new_context = { [string] : request . user , [string] : StudyProgram . objects . filter ( published = True ) , [string] : semester , } [EOL] context . update ( new_context ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[examiner.models.PdfUrl]$ 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $typing.Any$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[examiner.forms.VerifyExamForm]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $examiner.forms.VerifyExamForm$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 $examiner.forms.VerifyExamForm$ 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[examiner.forms.ExamsSearchForm]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import List , Optional , Union , Any [EOL] import pathlib [EOL] import typing [EOL] import builtins [EOL] import logging [EOL] import logging [EOL] import subprocess [EOL] [EOL] from os import environ [EOL] from pathlib import Path [EOL] from statistics import mean [EOL] from tempfile import TemporaryDirectory [EOL] from typing import Optional , Union [EOL] [EOL] import pdftotext [EOL] [EOL] from tqdm import tqdm [EOL] [EOL] [EOL] OCR_ENABLED = True [EOL] logger = logging . getLogger ( ) [EOL] [EOL] [EOL] if environ . get ( [string] ) != [string] or environ . get ( [string] ) != [string] : [EOL] logger . critical ( [string] [string] ) [EOL] OCR_ENABLED = False [EOL] else : [EOL] try : [EOL] from tesserocr import PyTessBaseAPI [EOL] except ImportError : [EOL] logger . critical ( [string] ) [EOL] OCR_ENABLED = False [EOL] [EOL] [EOL] TESSDATA_DIR = Path ( __file__ ) . parent / [string] [EOL] [EOL] [EOL] class PdfReaderException ( Exception ) : [EOL] [docstring] [EOL] [EOL] [EOL] class PdfReader : [EOL] def __init__ ( self , path ) : [EOL] [docstring] [EOL] self . path = Path ( path ) [EOL] if not self . path . is_absolute ( ) : [EOL] raise ValueError ( f' [string] { path }' ) [EOL] [EOL] def read_text ( self , * , allow_ocr , force_ocr = False , ) : [EOL] [docstring] [EOL] if force_ocr : [EOL] return self . ocr_text ( ) [EOL] [EOL] with open ( self . path , [string] ) as file : [EOL] try : [EOL] pdf = pdftotext . PDF ( file ) [EOL] except pdftotext . Error : [EOL] if not ( allow_ocr and OCR_ENABLED ) : [EOL] raise PdfReaderException ( [string] ) [EOL] else : [EOL] return self . ocr_text ( ) [EOL] [EOL] self . pages = [ page for page in pdf ] [EOL] self . page_confidences = [ None ] * len ( self . pages ) [EOL] self . mean_confidence = None [EOL] text = [string] . join ( self . pages ) [EOL] [EOL] if len ( text . replace ( [string] , [string] ) . strip ( ) ) > [number] : [EOL] return text [EOL] elif allow_ocr and OCR_ENABLED : [EOL] return self . ocr_text ( ) [EOL] else : [EOL] return None [EOL] [EOL] def ocr_text ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] word_confidences = [ ] [EOL] [EOL] [comment] [EOL] self . pages = [ ] [EOL] [EOL] [comment] [EOL] tiff_directory = self . _tiff_directory ( ) [EOL] [EOL] tiff_files = sorted ( tiff_directory . iterdir ( ) ) [EOL] if len ( tiff_files ) == [number] : [EOL] raise PdfReaderException ( [string] ) [EOL] [EOL] with PyTessBaseAPI ( lang = [string] , path = str ( TESSDATA_DIR ) ) as api : [EOL] for page in tqdm ( tiff_files , desc = [string] ) : [EOL] api . SetImageFile ( str ( page ) ) [EOL] self . pages . append ( api . GetUTF8Text ( ) ) [EOL] word_confidences . append ( api . AllWordConfidences ( ) ) [EOL] [EOL] self . page_confidences = [ int ( mean ( word_confidence ) ) if word_confidence else None for word_confidence in word_confidences ] [EOL] self . mean_confidence = int ( mean ( word_confidence for page in word_confidences for word_confidence in page ) ) [EOL] return [string] . join ( self . pages ) [EOL] [EOL] def _tiff_directory ( self ) : [EOL] [docstring] [EOL] if hasattr ( self , [string] ) : [EOL] return Path ( self . _tmp_tiff_directory . name ) [EOL] [EOL] self . _tmp_tiff_directory = TemporaryDirectory ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] subprocess . run ( [ [string] , [string] , [string] , [string] , [string] , f' [string] { self . _tmp_tiff_directory . name } [string] ' , [string] , [string] , [string] , [string] , str ( self . path ) , [string] , [string] , [string] , [string] , [string] , ] ) [EOL] return Path ( self . _tmp_tiff_directory . name ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 $typing.List[pathlib.Path]$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 $typing.List[pathlib.Path]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pathlib.Path]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . conf . urls import url [EOL] [EOL] from examiner import views [EOL] [EOL] [EOL] urlpatterns = [ url ( [string] , views . SearchView . as_view ( ) , name = [string] , ) , url ( [string] , views . VerifyView . as_view ( ) , name = [string] , ) , url ( [string] , views . VerifyView . as_view ( ) , name = [string] , ) , url ( [string] , views . ExamsView . as_view ( ) , name = [string] , ) , url ( [string] , views . ExamsView . as_view ( ) , name = [string] , ) , url ( [string] , views . CourseWithExamsAutocomplete . as_view ( ) , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ExaminerConfig ( AppConfig ) : [EOL] name = [string] [EOL] [EOL] def ready ( self ) : [EOL] import examiner . signals . handlers [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Type , IO , Pattern , Union , Any , Literal , Set , Tuple [EOL] import typing_extensions [EOL] import examiner [EOL] import builtins [EOL] import typing [EOL] import requests [EOL] import hashlib [EOL] import hashlib [EOL] import re [EOL] from gettext import gettext as _ [EOL] from tempfile import NamedTemporaryFile [EOL] [EOL] from django . contrib . auth . models import User [EOL] from django . core . files import File [EOL] from django . core . validators import ( MaxValueValidator , MinValueValidator , RegexValidator , URLValidator , ValidationError , ) [EOL] from django . db import models [EOL] from django . shortcuts import reverse [EOL] from django . utils import timezone [EOL] [EOL] import requests [EOL] [EOL] from examiner . parsers import ExamURLParser , PdfParser , Season [EOL] from examiner . pdf import PdfReader , PdfReaderException [EOL] from semesterpage . models import Course [EOL] [EOL] [EOL] class ExamRelatedCourse ( models . Model ) : [EOL] [docstring] [EOL] primary_course = models . ForeignKey ( to = Course , on_delete = models . CASCADE , related_name = [string] , unique = False , blank = False , null = False , help_text = _ ( [string] ) , ) [EOL] secondary_course = models . OneToOneField ( to = Course , on_delete = models . SET_NULL , related_name = [string] , unique = True , blank = True , null = True , help_text = _ ( [string] ) , ) [EOL] secondary_course_code = models . CharField ( _ ( [string] ) , unique = True , null = False , blank = False , max_length = [number] , help_text = _ ( [string] ) ) [EOL] [EOL] def clean ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] super ( ) . clean ( * args , ** kwargs ) [EOL] self . secondary_course_code = self . secondary_course_code . upper ( ) [EOL] try : [EOL] self . secondary_course = ( Course . objects . get ( course_code = self . secondary_course_code ) ) [EOL] except Course . DoesNotExist : [EOL] self . secondary_course = None [EOL] [EOL] def validate_unique ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] super ( ) . validate_unique ( * args , ** kwargs ) [EOL] [EOL] [comment] [EOL] if ( ExamRelatedCourse . objects . filter ( primary_course__course_code = self . secondary_course_code ) . exists ( ) ) : [EOL] raise ValidationError ( f' [string] { self . secondary_course }' [string] ) [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] self . full_clean ( ) [EOL] super ( ) . save ( * args , ** kwargs ) [EOL] [EOL] [EOL] class DocumentInfoQueryset ( models . QuerySet ) : [EOL] def organize ( self ) : [EOL] [docstring] [EOL] self = ( self . filter ( pdfs__isnull = False ) . prefetch_related ( [string] , [string] , [string] , [string] , ) ) [EOL] [EOL] organization = { } [EOL] for docinfo in self : [EOL] course_dict = organization . setdefault ( docinfo . course_code , { [string] : { } } , ) [EOL] if docinfo . course and [string] not in course_dict : [EOL] course_dict [ [string] ] = docinfo . course . full_name [EOL] course_dict [ [string] ] = docinfo . course . display_name [EOL] [EOL] year = organization [ docinfo . course_code ] [ [string] ] . setdefault ( docinfo . year , { } , ) [EOL] semester = year . setdefault ( Season . str_from_field ( docinfo . season ) , { [string] : { } , [string] : { } } ) [EOL] key = [string] if docinfo . solutions else [string] [EOL] urls = semester [ key ] . setdefault ( docinfo . language or [string] , { } , ) [EOL] for pdf in docinfo . pdfs . all ( ) : [EOL] sha1_hash = pdf . sha1_hash [EOL] if sha1_hash in urls : [EOL] continue [EOL] [EOL] pdf_urls = pdf . hosted_at [EOL] pdf_dict = { [string] : pdf . file . url , [string] : list ( pdf_urls . values_list ( [string] , flat = True ) ) , [string] : pdf_urls . first ( ) . filename , [string] : pdf . text , } [EOL] urls [ sha1_hash ] = pdf_dict [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] return organization [EOL] [EOL] [EOL] class DocumentInfo ( models . Model ) : [EOL] EXAM = [string] [EOL] EXERCISE = [string] [EOL] IRRELEVANT = [string] [EOL] PROJECT = [string] [EOL] UNDETERMINED = None [EOL] [EOL] content_type = models . CharField ( max_length = [number] , null = True , blank = True , default = None , choices = [ ( EXAM , [string] ) , ( EXERCISE , [string] ) , ( PROJECT , [string] ) , ( IRRELEVANT , [string] ) , ( UNDETERMINED , [string] ) , ] , help_text = _ ( [string] ) , ) [EOL] [EOL] course = models . ForeignKey ( to = Course , on_delete = models . SET_NULL , related_name = [string] , null = True , blank = True , help_text = _ ( [string] ) , ) [EOL] course_code = models . CharField ( max_length = [number] , blank = True , null = True , help_text = _ ( [string] ) , ) [EOL] language = models . CharField ( max_length = [number] , null = True , blank = True , choices = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( None , [string] ) , ] , help_text = _ ( [string] ) , ) [EOL] year = models . PositiveSmallIntegerField ( null = True , blank = True , help_text = _ ( [string] ) , ) [EOL] season = models . PositiveSmallIntegerField ( null = True , blank = True , choices = [ ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( None , [string] ) , ] , help_text = _ ( [string] ) , ) [EOL] solutions = models . BooleanField ( default = False , help_text = _ ( [string] ) , ) [EOL] exercise_number = models . PositiveSmallIntegerField ( _ ( [string] ) , default = None , null = True , blank = True , help_text = _ ( [string] , ) , ) [EOL] objects = DocumentInfoQueryset . as_manager ( ) [EOL] [EOL] def __repr__ ( self ) : [EOL] return ( [string] f' [string] { self . content_type } [string] ' f" [string] { self . course_code } [string] " f' [string] { self . year } [string] ' f' [string] { self . season } [string] ' f' [string] { self . language } [string] ' f' [string] { self . solutions } [string] ' f' [string] { self . exercise_number }' [string] ) [EOL] [EOL] class Meta : [EOL] ordering = ( [string] , [string] , [string] ) [EOL] unique_together = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] def clean ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] super ( ) . clean ( * args , ** kwargs ) [EOL] has_exercise_number = self . exercise_number is not None [EOL] should_have_exercise_number = self . content_type in ( self . EXERCISE , self . PROJECT , ) [EOL] if has_exercise_number and not should_have_exercise_number : [EOL] raise ValidationError ( _ ( [string] ) , ) [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] self . full_clean ( ) [EOL] if self . course and not self . course_code : [EOL] self . course_code = self . course . course_code [EOL] elif self . course_code and not self . course : [EOL] try : [EOL] self . course = Course . objects . get ( course_code = self . course_code ) [EOL] except Course . DoesNotExist : [EOL] pass [EOL] [EOL] super ( ) . save ( * args , ** kwargs ) [EOL] [EOL] [EOL] def upload_path ( instance , filename ) : [EOL] [docstring] [EOL] return f' [string] ' + filename [EOL] [EOL] [EOL] class DocumentInfoSource ( models . Model ) : [EOL] [docstring] [EOL] [EOL] pdf = models . ForeignKey ( to = [string] , on_delete = models . PROTECT , null = False , blank = False , ) [EOL] document_info = models . ForeignKey ( to = DocumentInfo , on_delete = models . PROTECT , null = False , blank = False , ) [EOL] verified_by = models . ManyToManyField ( to = User , help_text = _ ( [string] ) , related_name = [string] , ) [EOL] [EOL] [EOL] class Pdf ( models . Model ) : [EOL] file = models . FileField ( upload_to = upload_path , help_text = _ ( [string] ) , ) [EOL] sha1_hash = models . CharField ( max_length = [number] , unique = True , null = False , help_text = _ ( [string] ) , validators = [ RegexValidator ( regex = [string] , message = [string] , ) ] , ) [EOL] exams = models . ManyToManyField ( to = DocumentInfo , through = DocumentInfoSource , related_name = [string] , help_text = _ ( [string] ) , ) [EOL] created_at = models . DateTimeField ( editable = False ) [EOL] updated_at = models . DateTimeField ( ) [EOL] [EOL] def read_text ( self , allow_ocr = False , force_ocr = False , ) : [EOL] [docstring] [EOL] pdf = PdfReader ( path = self . file . path ) [EOL] try : [EOL] pdf . read_text ( allow_ocr = allow_ocr , force_ocr = force_ocr ) [EOL] except PdfReaderException : [EOL] return False [EOL] [EOL] pages = pdf . pages [EOL] if len ( pages ) == [number] : [EOL] return False [EOL] [EOL] for page_number , page in enumerate ( pdf . pages ) : [EOL] PdfPage . objects . create ( pdf = self , number = page_number , text = page , confidence = pdf . page_confidences [ page_number ] , ) [EOL] return True [EOL] [EOL] @ property def text ( self ) : [EOL] [docstring] [EOL] return [string] . join ( [ page . text for page in self . pages . all ( ) ] ) [EOL] [EOL] def classify ( self , save = True , read = True , allow_ocr = True , ) : [EOL] [docstring] [EOL] first_page = self . pages . first ( ) [EOL] if not first_page and not read : [EOL] return False [EOL] [EOL] if not first_page : [EOL] success = self . read_text ( allow_ocr = allow_ocr ) [EOL] if not success : [EOL] return False [EOL] else : [EOL] first_page = self . pages . first ( ) [EOL] [EOL] assert first_page . number == [number] [EOL] [EOL] [comment] [EOL] if ( DocumentInfoSource . objects . filter ( pdf = self , verified_by__isnull = False ) . exists ( ) ) : [EOL] return True [EOL] [EOL] pdf_parser = PdfParser ( text = first_page . text ) [EOL] [EOL] [comment] [EOL] doc_infos = DocumentInfo . objects . filter ( urls__scraped_pdf = self ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] solutions = any ( [ pdf_parser . solutions , * doc_infos . values_list ( [string] , flat = True ) ] ) [EOL] [EOL] [comment] [EOL] course_codes = set ( pdf_parser . course_codes ) [EOL] course_codes . update ( doc_infos . values_list ( [string] , flat = True ) ) [EOL] if not course_codes : [EOL] course_codes = { None } [EOL] [EOL] [comment] [EOL] [comment] [EOL] for field in ( [string] , [string] , [string] ) : [EOL] parser_field_value = getattr ( pdf_parser , field ) [EOL] if parser_field_value is not None : [EOL] [comment] [EOL] continue [EOL] [EOL] ordered_field_values = ( doc_infos . values_list ( field ) . annotate ( count = models . Count ( field ) ) . order_by ( [string] + field ) ) [EOL] if not ordered_field_values . exists ( ) : [EOL] [comment] [EOL] continue [EOL] [EOL] [comment] [EOL] setattr ( pdf_parser , field , ordered_field_values . first ( ) [ [number] ] , ) [EOL] [EOL] [comment] [EOL] DocumentInfoSource . objects . filter ( pdf = self , verified_by = None ) . delete ( ) [EOL] [EOL] for course_code in course_codes : [EOL] [comment] [EOL] docinfo , _ = DocumentInfo . objects . get_or_create ( course_code = course_code , language = pdf_parser . language , year = pdf_parser . year , season = pdf_parser . season , solutions = solutions , content_type = pdf_parser . content_type , ) [EOL] [EOL] [comment] [EOL] DocumentInfoSource . objects . create ( document_info = docinfo , pdf = self ) [EOL] [EOL] if save : [EOL] self . save ( ) [EOL] return True [EOL] [EOL] def clean ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] super ( ) . clean ( * args , ** kwargs ) [EOL] sha1_pattern = re . compile ( [string] ) [EOL] if not sha1_pattern . match ( self . sha1_hash ) : [EOL] raise ValidationError ( [string] ) [EOL] [EOL] if ( len ( self . file . name ) < [number] or self . file and self . file . name [ - [number] : ] != self . sha1_hash + [string] ) : [EOL] raise ValidationError ( f' [string] { self . sha1_hash } [string] ' , ) [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] if not self . id : [EOL] self . created_at = timezone . now ( ) [EOL] self . updated_at = timezone . now ( ) [EOL] self . full_clean ( ) [EOL] super ( ) . save ( * args , ** kwargs ) [EOL] [EOL] def get_absolute_url ( self ) : [EOL] [docstring] [EOL] return reverse ( viewname = [string] , kwargs = { [string] : self . sha1_hash } , ) [EOL] [EOL] def __repr__ ( self ) : [EOL] [docstring] [EOL] return ( [string] f" [string] { self . sha1_hash } [string] " f' [string] { self . exams . all ( ) } [string] ' f' [string] { self . pages . count ( ) }' [string] ) [EOL] [EOL] [EOL] class PdfPage ( models . Model ) : [EOL] pdf = models . ForeignKey ( to = Pdf , null = False , on_delete = models . CASCADE , help_text = _ ( [string] ) , related_name = [string] , ) [EOL] number = models . PositiveSmallIntegerField ( null = False , help_text = _ ( [string] ) , ) [EOL] text = models . TextField ( null = False , help_text = _ ( [string] ) , ) [EOL] confidence = models . PositiveIntegerField ( null = True , default = None , validators = [ MinValueValidator ( [number] ) , MaxValueValidator ( [number] ) ] , help_text = _ ( [string] ) , ) [EOL] [EOL] class Meta : [EOL] ordering = ( [string] , [string] ) [EOL] unique_together = ( [string] , [string] ) [EOL] [EOL] def __repr__ ( self ) : [EOL] [docstring] [EOL] return ( [string] f' [string] { repr ( self . pdf ) } [string] ' f' [string] { self . number } [string] ' f' [string] { self . confidence }' [string] ) [EOL] [EOL] [EOL] class PdfUrl ( models . Model ) : [EOL] url = models . TextField ( unique = True , validators = [ URLValidator ( ) ] , ) [EOL] filename = models . CharField ( max_length = [number] , null = False , blank = False , help_text = _ ( [string] ) , ) [EOL] exam = models . ForeignKey ( to = DocumentInfo , on_delete = models . SET_NULL , null = True , help_text = _ ( [string] ) , related_name = [string] , ) [EOL] probably_exam = models . BooleanField ( default = False , help_text = _ ( [string] ) , ) [EOL] dead_link = models . NullBooleanField ( default = None , null = True , help_text = _ ( [string] ) , ) [EOL] verified_by = models . ManyToManyField ( to = User , help_text = _ ( [string] ) , ) [EOL] scraped_pdf = models . ForeignKey ( to = Pdf , null = True , on_delete = models . SET_NULL , help_text = _ ( [string] ) , related_name = [string] , ) [EOL] created_at = models . DateTimeField ( editable = False ) [EOL] updated_at = models . DateTimeField ( ) [EOL] [EOL] def backup_file ( self ) : [EOL] [docstring] [EOL] try : [EOL] response = requests . get ( self . url , stream = True , allow_redirects = True ) [EOL] except ConnectionError : [EOL] self . dead_link = True [EOL] self . save ( ) [EOL] return [EOL] [EOL] if not response . ok : [EOL] self . dead_link = True [EOL] self . save ( ) [EOL] return [EOL] [EOL] sha1_hasher = hashlib . sha1 ( ) [EOL] temp_file = NamedTemporaryFile ( ) [EOL] for chunk in response . iter_content ( chunk_size = [number] ) : [EOL] if chunk : [EOL] temp_file . write ( chunk ) [EOL] sha1_hasher . update ( chunk ) [EOL] [EOL] content_file = File ( temp_file ) [EOL] sha1_hash = sha1_hasher . hexdigest ( ) [EOL] [EOL] try : [EOL] file_backup = Pdf . objects . get ( sha1_hash = sha1_hash ) [EOL] new = False [EOL] except Pdf . DoesNotExist : [EOL] new = True [EOL] file_backup = Pdf ( sha1_hash = sha1_hash ) [EOL] file_backup . file . save ( name = sha1_hash + [string] , content = content_file ) [EOL] file_backup . save ( ) [EOL] [EOL] self . scraped_pdf = file_backup [EOL] self . dead_link = False [EOL] self . save ( ) [EOL] return new [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] if not self . id : [EOL] self . created_at = timezone . now ( ) [EOL] self . updated_at = timezone . now ( ) [EOL] [EOL] if not self . exam : [EOL] self . classify ( save = False ) [EOL] [EOL] super ( ) . save ( * args , ** kwargs ) [EOL] [EOL] def classify ( self , save = True ) : [EOL] [docstring] [EOL] if self . id and self . verified_by . count ( ) != [number] : [EOL] [comment] [EOL] return [EOL] [EOL] parser = ExamURLParser ( url = self . url ) [EOL] [EOL] self . probably_exam = parser . probably_exam [EOL] if parser . probably_exam : [EOL] content_type = DocumentInfo . EXAM [EOL] else : [EOL] content_type = DocumentInfo . UNDETERMINED [EOL] [EOL] self . filename = parser . filename [EOL] self . exam , _ = DocumentInfo . objects . get_or_create ( language = parser . language , year = parser . year , season = parser . season , solutions = parser . solutions , course_code = parser . code , content_type = content_type , exercise_number = None , ) [EOL] if save : [EOL] self . save ( ) [EOL] [EOL] def __repr__ ( self ) : [EOL] [docstring] [EOL] return f" [string] { self . url } [string] " [EOL]	builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Type , Any [EOL] import typing [EOL] import examiner [EOL] from django import forms [EOL] from django . contrib . auth import get_user_model [EOL] from django . urls import reverse [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] [EOL] from crispy_forms . helper import FormHelper [EOL] from crispy_forms . layout import Field , Fieldset , Layout , Submit [EOL] [EOL] from dal import autocomplete [EOL] [EOL] from examiner . models import DocumentInfoSource , DocumentInfo , Pdf [EOL] from semesterpage . models import Course [EOL] [EOL] [EOL] class VerifyExamForm ( forms . ModelForm ) : [EOL] courses = forms . ModelMultipleChoiceField ( label = _ ( [string] ) , queryset = Course . objects . all ( ) , widget = autocomplete . ModelSelect2Multiple ( url = [string] , attrs = { [string] : _ ( [string] ) , [string] : [number] , } , ) ) [EOL] pdf = forms . ModelChoiceField ( label = _ ( [string] ) , queryset = Pdf . objects . all ( ) , ) [EOL] verifier = forms . ModelChoiceField ( label = _ ( [string] ) , queryset = get_user_model ( ) . objects . all ( ) , ) [EOL] [EOL] class Meta : [EOL] model = DocumentInfo [EOL] exclude = [ [string] , [string] ] [EOL] labels = { [string] : _ ( [string] ) , [string] : _ ( [string] ) , [string] : _ ( [string] ) , [string] : _ ( [string] ) , [string] : _ ( [string] ) , } [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] self . helper = FormHelper ( ) [EOL] self . helper . form_id = [string] [EOL] self . helper . form_method = [string] [EOL] self . helper . form_action = reverse ( [string] ) [EOL] [EOL] self . helper . layout = Layout ( Fieldset ( _ ( [string] ) , Field ( [string] , onchange = [string] , ) , [string] , [string] , [string] , [string] , [string] , [string] , Field ( [string] , type = [string] , readonly = True ) , Field ( [string] , type = [string] , readonly = True ) , ) , Submit ( [string] , _ ( [string] ) , css_class = [string] , ) , ) [EOL] [EOL] [comment] [EOL] self . fields [ [string] ] . choices = [ ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) , ( None , [string] ) , ] [EOL] [EOL] [comment] [EOL] self . fields [ [string] ] . required = True [EOL] self . fields [ [string] ] . required = True [EOL] [EOL] def save ( self , commit = True ) : [EOL] [comment] [EOL] assert commit [EOL] [EOL] docinfo = self . instance [EOL] data = self . cleaned_data [EOL] [EOL] [comment] [EOL] self . courses = data . pop ( [string] ) [EOL] [EOL] pdf = data . pop ( [string] ) [EOL] verifier = data . pop ( [string] ) [EOL] [EOL] for course in self . courses : [EOL] docinfo , _ = DocumentInfo . objects . get_or_create ( course = course , course_code = course . course_code , ** data , ) [EOL] exam_pdf , _ = DocumentInfoSource . objects . get_or_create ( document_info = docinfo , pdf = pdf , ) [EOL] exam_pdf . verified_by . add ( verifier ) [EOL] exam_pdf . save ( ) [EOL] [EOL] [comment] [EOL] DocumentInfoSource . objects . filter ( pdf = pdf , verified_by__isnull = True , ) . delete ( ) [EOL] [EOL] [EOL] class ExamsSearchForm ( forms . Form ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] course = forms . ModelMultipleChoiceField ( label = _ ( [string] ) , queryset = Course . objects . all ( ) , widget = autocomplete . ModelSelect2Multiple ( url = [string] , attrs = { [string] : _ ( [string] ) , [string] : [number] , } , ) ) [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] self . helper = FormHelper ( ) [EOL] self . helper . form_id = [string] [EOL] self . helper . form_method = [string] [EOL] [EOL] [comment] [EOL] self . helper . form_action = [string] [EOL] [EOL] [comment] [EOL] self . helper . form_show_labels = False [EOL] [EOL] self . helper . layout = Layout ( Fieldset ( _ ( [string] ) , Field ( [string] , onchange = [string] , css_class = [string] , ) , ) , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[examiner.forms.VerifyExamForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[examiner.forms.VerifyExamForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[examiner.forms.VerifyExamForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[examiner.forms.ExamsSearchForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . db . models . signals import pre_delete [EOL] from django . dispatch . dispatcher import receiver [EOL] [EOL] from examiner . models import Pdf [EOL] [EOL] [EOL] @ receiver ( pre_delete , sender = Pdf , dispatch_uid = [string] ) def delete_pdf_backup_on_deletion ( sender , instance , ** kwargs ) : [EOL] [docstring] [EOL] instance . file . delete ( save = False ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import builtins [EOL] import examiner [EOL] from django . core . management . base import BaseCommand , CommandError [EOL] from django . db . models import Q [EOL] [EOL] from tqdm import tqdm [EOL] [EOL] from examiner . crawlers import ( DvikanCrawler , MathematicalSciencesCrawler , PhysicsCrawler , ) [EOL] from examiner . models import Pdf , PdfUrl [EOL] from examiner . parsers import PdfParser [EOL] from examiner . pdf import OCR_ENABLED [EOL] from semesterpage . models import Course [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , action = [string] , dest = [string] , help = [string] , ) [EOL] parser . add_argument ( [string] , action = [string] , dest = [string] , help = [string] , ) [EOL] parser . add_argument ( [string] , action = [string] , dest = [string] , help = [string] , ) [EOL] parser . add_argument ( [string] , action = [string] , dest = [string] , help = [string] , ) [EOL] parser . add_argument ( [string] , action = [string] , dest = [string] , help = [string] , ) [EOL] parser . add_argument ( [string] , action = [string] , dest = [string] , help = [string] , ) [EOL] parser . add_argument ( [string] , nargs = [string] , type = str , default = [string] , help = [string] , ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] course_code = options [ [string] ] . upper ( ) [EOL] retry = options [ [string] ] [EOL] [EOL] if options [ [string] ] : [EOL] self . crawl ( course_code = course_code ) [EOL] if options [ [string] ] : [EOL] if not OCR_ENABLED : [EOL] raise CommandError ( [string] ) [EOL] self . backup ( course_code = course_code , retry = retry ) [EOL] if options [ [string] ] : [EOL] if not OCR_ENABLED : [EOL] raise CommandError ( [string] ) [EOL] self . classify ( ) [EOL] if options [ [string] ] : [EOL] self . test ( gui = options [ [string] ] ) [EOL] [EOL] def crawl ( self , course_code ) : [EOL] [docstring] [EOL] if course_code == [string] : [EOL] courses = Course . objects . filter ( Q ( course_code__startswith = [string] ) | Q ( course_code__startswith = [string] ) ) [EOL] else : [EOL] course_code = course_code . upper ( ) [EOL] if [string] != course_code [ : [number] ] and [string] != course_code [ : [number] ] : [EOL] raise CommandError ( [string] ) [EOL] courses = Course . objects . filter ( course_code = course_code ) [EOL] [EOL] self . stdout . write ( f' [string] { courses }' ) [EOL] new_urls = [number] [EOL] [EOL] crawlers = MathematicalSciencesCrawler ( courses = courses ) [EOL] [EOL] [comment] [EOL] if course_code == [string] : [EOL] crawlers = ( PhysicsCrawler ( ) , DvikanCrawler ( ) , * crawlers ) [EOL] [EOL] for crawler in crawlers : [EOL] self . stdout . write ( self . style . SUCCESS ( repr ( crawler ) ) ) [EOL] for url in crawler . pdf_urls ( ) : [EOL] exam_url , new = PdfUrl . objects . get_or_create ( url = url ) [EOL] exam_url . classify ( ) [EOL] self . stdout . write ( f' [string] { repr ( exam_url . exam ) } [string] { url }' ) [EOL] [EOL] if new : [EOL] new_urls += [number] [EOL] [EOL] self . stdout . write ( self . style . SUCCESS ( f'{ new_urls } [string] ' ) ) [EOL] [EOL] def backup ( self , course_code , retry ) : [EOL] [docstring] [EOL] exam_urls = ( PdfUrl . objects . filter ( scraped_pdf__isnull = True ) . exclude ( dead_link = not retry ) ) [EOL] if course_code != [string] : [EOL] exam_urls = exam_urls . filter ( exam__course_code__iexact = course_code , ) [EOL] [EOL] new_backups = [number] [EOL] for exam_url in exam_urls : [EOL] new = exam_url . backup_file ( ) [EOL] if new : [EOL] new_backups += [number] [EOL] self . stdout . write ( [string] , ending = [string] ) [EOL] self . stdout . write ( f' [string] { exam_url . url }' ) [EOL] [EOL] self . stdout . write ( self . style . SUCCESS ( f'{ new_backups } [string] ' , ) ) [EOL] [EOL] def classify ( self ) : [EOL] [docstring] [EOL] successes = [number] [EOL] errors = [number] [EOL] for pdf in Pdf . objects . all ( ) : [EOL] try : [EOL] classify_success = pdf . classify ( read = True , allow_ocr = True , save = True , ) [EOL] except Exception : [EOL] classify_success = False [EOL] [EOL] if not classify_success : [EOL] errors += [number] [EOL] self . stdout . write ( self . style . ERROR ( f' [string] ' ) ) [EOL] continue [EOL] [EOL] self . stdout . write ( self . style . SUCCESS ( f' [string] { pdf . pages . count ( ) } [string] ' f' [string] { repr ( pdf . exams . first ( ) ) }' , ) ) [EOL] successes += [number] [EOL] [EOL] self . stdout . write ( self . style . SUCCESS ( f'{ successes } [string] ' ) ) [EOL] if errors : [EOL] self . stdout . write ( self . style . ERROR ( f'{ errors } [string] ' ) ) [EOL] [EOL] self . stdout . write ( [string] ) [EOL] for url in tqdm ( PdfUrl . objects . all ( ) ) : [EOL] url . classify ( ) [EOL] [EOL] def test ( self , gui = False ) : [EOL] pdfs = Pdf . objects . all ( ) [EOL] for pdf in pdfs : [EOL] self . stdout . write ( self . style . SUCCESS ( repr ( pdf ) ) ) [EOL] self . stdout . write ( [string] ) [EOL] for pdf_url in pdf . hosted_at . all ( ) : [EOL] self . stdout . write ( [string] + pdf_url . url ) [EOL] [EOL] first_page = pdf . pages . first ( ) [EOL] self . stdout . write ( [string] * [number] + [string] + [string] * [number] ) [EOL] self . stdout . write ( first_page . text ) [EOL] self . stdout . write ( [string] * [number] ) [EOL] [EOL] parser = PdfParser ( text = pdf . pages . first ( ) . text ) [EOL] self . stdout . write ( repr ( parser ) ) [EOL] [EOL] exam_not_determined = ( parser . language is None or parser . season is None or parser . year is None or not parser . course_codes ) [EOL] if exam_not_determined and ( first_page . confidence or [number] ) > [number] : [EOL] [comment] [EOL] self . stdout . write ( self . style . ERROR ( [string] ) , ) [EOL] self . stdout . write ( f' [string] { first_page . confidence }' ) [EOL] self . stdout . write ( [string] + pdf . hosted_at . first ( ) . url ) [EOL] answer = input ( [string] ) [EOL] if answer == [string] : [EOL] url = pdf . hosted_at . first ( ) [EOL] pdf . delete ( ) [EOL] url . backup_file ( ) [EOL] pdf = url . scraped_pdf [EOL] pdf . read_text ( allow_ocr = True ) [EOL] continue [EOL] if answer == [string] : [EOL] pdf . pages . all ( ) . delete ( ) [EOL] pdf . read_text ( force_ocr = True ) [EOL] continue [EOL] self . stdout . write ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.bool$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.bool$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $examiner.parsers.PdfParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $examiner.parsers.PdfParser$ 0 0 0 0 $builtins.bool$ 0 0 $examiner.parsers.PdfParser$ 0 0 0 0 0 $examiner.parsers.PdfParser$ 0 0 0 0 0 $examiner.parsers.PdfParser$ 0 0 0 0 0 0 $examiner.parsers.PdfParser$ 0 0 0 0 0 $builtins.bool$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import builtins [EOL] [docstring] [EOL] [EOL] import hashlib [EOL] [EOL] [EOL] def sha1 ( text ) : [EOL] [docstring] [EOL] return hashlib . sha1 ( text ) . hexdigest ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Optional , Any [EOL] import typing [EOL] import pathlib [EOL] import examiner [EOL] from os import environ [EOL] [EOL] from pathlib import Path [EOL] [EOL] from examiner . pdf import PdfReader [EOL] [EOL] import pytest [EOL] [EOL] [EOL] pytestmark = pytest . mark . skipif ( ( [string] in environ or environ . get ( [string] ) != [string] or environ . get ( [string] ) != [string] ) , reason = [string] , ) [EOL] [EOL] [EOL] @ pytest . fixture def pdf_path ( ) : [EOL] [docstring] [EOL] return Path ( __file__ ) . parent / [string] / [string] [EOL] [EOL] [EOL] @ pytest . fixture def ocr_many_pages ( ) : [EOL] [docstring] [EOL] return Path ( __file__ ) . parent / [string] / [string] [EOL] [EOL] [EOL] def test_creation_of_temporary_tiff_file ( pdf_path ) : [EOL] [docstring] [EOL] pdf_reader = PdfReader ( path = pdf_path ) [EOL] tiff_directory = pdf_reader . _tiff_directory ( ) [EOL] tiff_files = [ tiff_file . name for tiff_file in tiff_directory . iterdir ( ) ] [EOL] assert sorted ( tiff_files ) == [ [string] , [string] ] [EOL] [EOL] [EOL] def test_read_text ( pdf_path ) : [EOL] [docstring] [EOL] pdf_reader = PdfReader ( path = pdf_path ) [EOL] text = pdf_reader . ocr_text ( ) [EOL] [EOL] [comment] [EOL] assert pdf_reader . mean_confidence == [number] [EOL] assert pdf_reader . page_confidences == [ [number] , [number] ] [EOL] [EOL] [comment] [EOL] assert len ( text . split ( [string] ) ) == [number] [EOL] [EOL] [comment] [EOL] assert [string] . join ( pdf_reader . pages ) == text [EOL] [EOL] [comment] [EOL] assert [string] in text [ : [number] ] [EOL] [EOL] [comment] [EOL] assert [string] in text [ - [number] : ] [EOL] [EOL] [comment] [EOL] assert [string] in text [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ True , False ] ) def test_read_text_of_text_indexed_pdf ( allow_ocr , monkeypatch ) : [EOL] [docstring] [EOL] [comment] [EOL] pdf_path = Path ( __file__ ) . parent / [string] / [string] [EOL] [EOL] [comment] [EOL] monkeypatch . delattr ( [string] ) [EOL] [EOL] [comment] [EOL] pdf = PdfReader ( path = pdf_path ) [EOL] text = pdf . read_text ( allow_ocr = allow_ocr ) [EOL] [EOL] [comment] [EOL] assert isinstance ( text , str ) [EOL] [EOL] [comment] [EOL] assert [string] in text [EOL] assert [string] in text [EOL] assert [string] not in text [EOL] [EOL] [EOL] def test_read_text_of_non_indexed_pdf_without_ocr ( pdf_path ) : [EOL] [docstring] [EOL] pdf = PdfReader ( path = pdf_path ) [EOL] assert pdf . read_text ( allow_ocr = False ) is None [EOL] [EOL] [EOL] def test_read_text_of_non_indexed_pdf_with_ocr ( monkeypatch , pdf_path ) : [EOL] [docstring] [EOL] monkeypatch . setattr ( PdfReader , [string] , lambda self : [string] ) [EOL] pdf = PdfReader ( path = pdf_path ) [EOL] assert pdf . read_text ( allow_ocr = True ) == [string] [EOL] [EOL] [EOL] def test_pdf_with_many_pages_requires_ocr ( ocr_many_pages ) : [EOL] [docstring] [EOL] pdf = PdfReader ( path = ocr_many_pages ) [EOL] assert pdf . read_text ( allow_ocr = False ) is None [EOL] [EOL] [EOL] def test_force_ocr ( monkeypatch ) : [EOL] [docstring] [EOL] monkeypatch . setattr ( PdfReader , [string] , lambda self : [string] ) [EOL] pdf = PdfReader ( path = [string] ) [EOL] assert pdf . read_text ( allow_ocr = True , force_ocr = True ) == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Union , Any [EOL] import typing [EOL] import examiner [EOL] from django . core . files . base import ContentFile [EOL] from django . shortcuts import reverse [EOL] [EOL] import pytest [EOL] [EOL] from examiner . forms import VerifyExamForm [EOL] from examiner . models import DocumentInfo , DocumentInfoSource , Pdf [EOL] from semesterpage . tests . factories import CourseFactory [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_empty_exams_view ( client ) : [EOL] [docstring] [EOL] response = client . get ( reverse ( [string] ) ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_verify_random_pdf_view ( client , django_user_model ) : [EOL] [docstring] [EOL] [comment] [EOL] sha1_hash = [string] [EOL] pdf = Pdf ( sha1_hash = sha1_hash ) [EOL] content = ContentFile ( [string] ) [EOL] pdf . file . save ( name = sha1_hash + [string] , content = content ) [EOL] [EOL] [comment] [EOL] course1 = CourseFactory ( course_code = [string] ) [EOL] course2 = CourseFactory ( course_code = [string] ) [EOL] course3 = CourseFactory ( course_code = [string] ) [EOL] [EOL] [comment] [EOL] common_docinfo_attrs = { [string] : [string] , [string] : [number] , [string] : False , [string] : [string] , } [EOL] exam1 = DocumentInfo . objects . create ( course = course1 , ** common_docinfo_attrs , ) [EOL] DocumentInfoSource . objects . create ( pdf = pdf , document_info = exam1 ) [EOL] [EOL] exam2 = DocumentInfo . objects . create ( course = course2 , ** common_docinfo_attrs , ) [EOL] DocumentInfoSource . objects . create ( pdf = pdf , document_info = exam2 ) [EOL] [EOL] [comment] [EOL] user = django_user_model . objects . create_user ( username = [string] , password = [string] ) [EOL] client . login ( username = [string] , password = [string] ) [EOL] [EOL] url = reverse ( [string] ) [EOL] response = client . get ( url ) [EOL] assert response . status_code == [number] [EOL] [EOL] [comment] [EOL] form = response . context [ [string] ] [EOL] data = form . initial [EOL] assert form . instance == exam1 [EOL] assert data [ [string] ] == [string] [EOL] assert data [ [string] ] == pdf [EOL] assert data [ [string] ] is None [EOL] assert data [ [string] ] == user [EOL] [EOL] [comment] [EOL] assert data [ [string] ] . count ( ) == [number] [EOL] assert set ( data [ [string] ] ) == { course1 . id , course2 . id } [EOL] [EOL] [comment] [EOL] form = VerifyExamForm ( { [string] : [ course2 . id , course3 . id ] , [string] : pdf . id , [string] : user . id , ** common_docinfo_attrs , } ) [EOL] assert form . is_valid ( ) [EOL] response = client . post ( url , form . data ) [EOL] assert response . status_code == [number] [EOL] [EOL] [comment] [EOL] verified_exams = DocumentInfoSource . objects . filter ( verified_by__in = [ user ] ) [EOL] assert verified_exams . count ( ) == [number] [EOL] [EOL] [comment] [EOL] exam_pdf1 = verified_exams . first ( ) [EOL] exam_pdf2 = verified_exams . last ( ) [EOL] assert exam_pdf1 . pdf == pdf [EOL] assert exam_pdf2 . pdf == pdf [EOL] assert exam_pdf1 . verified_by . first ( ) == user [EOL] assert exam_pdf2 . verified_by . first ( ) == user [EOL] [EOL] [comment] [EOL] docinfo1 = exam_pdf1 . document_info [EOL] docinfo2 = exam_pdf2 . document_info [EOL] assert docinfo1 . course == course2 [EOL] assert docinfo2 . course == course3 [EOL] [EOL] [comment] [EOL] for key , value in common_docinfo_attrs . items ( ) : [EOL] assert getattr ( docinfo1 , key ) == value [EOL] assert getattr ( docinfo2 , key ) == value [EOL] [EOL] [comment] [EOL] assert not DocumentInfoSource . objects . filter ( verified_by__isnull = True , ) . exists ( ) [EOL] [EOL] [comment] [EOL] assert DocumentInfo . objects . count ( ) == [number] [EOL] [EOL] [comment] [EOL] assert DocumentInfoSource . objects . count ( ) == [number] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_verify_pdf_view ( admin_client ) : [EOL] [docstring] [EOL] [comment] [EOL] sha1_hash = [string] [EOL] pdf = Pdf ( sha1_hash = sha1_hash ) [EOL] content = ContentFile ( [string] ) [EOL] pdf . file . save ( name = sha1_hash + [string] , content = content ) [EOL] [EOL] [comment] [EOL] sha1_hash2 = [string] [EOL] pdf2 = Pdf ( sha1_hash = sha1_hash2 ) [EOL] content2 = ContentFile ( [string] ) [EOL] pdf2 . file . save ( name = sha1_hash2 + [string] , content = content2 ) [EOL] [EOL] [comment] [EOL] exam = DocumentInfo . objects . create ( ) [EOL] DocumentInfoSource . objects . create ( pdf = pdf , document_info = exam ) [EOL] DocumentInfoSource . objects . create ( pdf = pdf2 , document_info = exam ) [EOL] [EOL] [comment] [EOL] response = admin_client . get ( pdf . get_absolute_url ( ) ) [EOL] assert response . context [ [string] ] == pdf [EOL] response2 = admin_client . get ( pdf2 . get_absolute_url ( ) ) [EOL] assert response2 . context [ [string] ] == pdf2 [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import pathlib [EOL] import examiner [EOL] import os [EOL] from pathlib import Path [EOL] [EOL] from django . core . exceptions import ValidationError [EOL] from django . core . files . base import ContentFile [EOL] from django . db . utils import IntegrityError [EOL] [EOL] import pytest [EOL] [EOL] import responses [EOL] [EOL] from examiner . models import ( DocumentInfo , DocumentInfoSource , ExamRelatedCourse , Pdf , PdfPage , PdfUrl , ) [EOL] from examiner . parsers import Language , Season [EOL] from dataporten . tests . factories import UserFactory [EOL] from semesterpage . tests . factories import CourseFactory [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_derive_course_from_course_code_on_save ( ) : [EOL] [docstring] [EOL] course = CourseFactory ( course_code = [string] ) [EOL] exam = DocumentInfo . objects . create ( course_code = [string] ) [EOL] assert exam . course == course [EOL] [EOL] url = [string] [EOL] exam_url = PdfUrl ( url = url ) [EOL] exam_url . classify ( ) [EOL] assert exam_url . exam . course == course [EOL] assert exam_url . exam . content_type == DocumentInfo . EXAM [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_derive_course_code_from_course_on_save ( ) : [EOL] [docstring] [EOL] course = CourseFactory ( course_code = [string] ) [EOL] exam = DocumentInfo . objects . create ( course = course ) [EOL] assert exam . course_code == [string] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_prevention_of_non_unique_url ( ) : [EOL] [docstring] [EOL] url = [string] [EOL] exam_url1 = PdfUrl ( url = url ) [EOL] exam_url1 . save ( ) [EOL] [EOL] exam_url2 = PdfUrl ( url = url ) [EOL] with pytest . raises ( IntegrityError ) : [EOL] exam_url2 . save ( ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_url_classify_method ( ) : [EOL] [docstring] [EOL] url = [string] [EOL] exam_url = PdfUrl ( url = url ) [EOL] exam_url . classify ( ) [EOL] exam_url . save ( ) [EOL] assert exam_url . url == url [EOL] [EOL] [comment] [EOL] assert exam_url . exam . course is None [EOL] assert exam_url . exam . course_code == [string] [EOL] [EOL] [comment] [EOL] assert exam_url . filename == [string] [EOL] assert exam_url . probably_exam is True [EOL] [EOL] assert exam_url . exam . language == Language . BOKMAL [EOL] assert exam_url . exam . year == [number] [EOL] assert exam_url . exam . season == Season . SPRING [EOL] assert exam_url . exam . solutions is False [EOL] assert exam_url . exam . content_type == DocumentInfo . EXAM [EOL] assert exam_url . verified_by . count ( ) == [number] [EOL] assert exam_url . created_at [EOL] assert exam_url . updated_at [EOL] [EOL] [comment] [EOL] course = CourseFactory ( course_code = [string] ) [EOL] course . save ( ) [EOL] exam_url . exam . save ( ) [EOL] [EOL] [comment] [EOL] assert exam_url . exam . course == course [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_classify_url_of_already_verified_url ( ) : [EOL] [docstring] [EOL] url = [string] [EOL] exam_url = PdfUrl ( url = url ) [EOL] [EOL] [comment] [EOL] exam_url . classify ( ) [EOL] exam_url . save ( ) [EOL] assert exam_url . exam . year == [number] [EOL] [EOL] [comment] [EOL] exam_url . exam = DocumentInfo . objects . create ( year = [number] ) [EOL] exam_url . save ( ) [EOL] [EOL] [comment] [EOL] user = UserFactory ( username = [string] ) [EOL] user . save ( ) [EOL] exam_url . verified_by . add ( user ) [EOL] [EOL] [comment] [EOL] exam_url . classify ( ) [EOL] assert exam_url . exam . year == [number] [EOL] [EOL] [EOL] @ responses . activate @ pytest . mark . django_db def test_file_backup ( tmpdir , settings ) : [EOL] [comment] [EOL] tmpdir = Path ( tmpdir ) [EOL] test_file = tmpdir / [string] [EOL] test_file . touch ( ) [EOL] test_file . write_text ( [string] ) [EOL] [EOL] [comment] [EOL] url = [string] [EOL] [EOL] [comment] [EOL] responses . add ( responses . GET , url , body = test_file . read_bytes ( ) , status = [number] , content_type = [string] , stream = True , ) [EOL] [EOL] [comment] [EOL] exam_url = PdfUrl ( url = url ) [EOL] exam_url . backup_file ( ) [EOL] exam_url . refresh_from_db ( ) [EOL] [EOL] [comment] [EOL] assert exam_url . dead_link is False [EOL] expected_sha1_hash = [string] [EOL] file_backup = exam_url . scraped_pdf [EOL] assert file_backup . sha1_hash == expected_sha1_hash [EOL] [EOL] [comment] [EOL] assert ( file_backup . file . name == [string] + expected_sha1_hash + [string] ) [EOL] [EOL] [comment] [EOL] backup_directory = Path ( settings . MEDIA_ROOT / [string] ) [EOL] assert len ( list ( backup_directory . iterdir ( ) ) ) == [number] [EOL] [EOL] [comment] [EOL] new_url = [string] [EOL] [EOL] [comment] [EOL] responses . add ( responses . GET , new_url , body = test_file . read_bytes ( ) , status = [number] , content_type = [string] , stream = True , ) [EOL] new_exam_url = PdfUrl ( url = new_url ) [EOL] new_exam_url . backup_file ( ) [EOL] assert len ( list ( backup_directory . iterdir ( ) ) ) == [number] [EOL] assert PdfUrl . objects . all ( ) . count ( ) == [number] [EOL] assert Pdf . objects . all ( ) . count ( ) == [number] [EOL] assert exam_url . scraped_pdf == new_exam_url . scraped_pdf [EOL] [EOL] [EOL] @ responses . activate @ pytest . mark . django_db def test_file_backup_of_dead_link ( tmpdir , settings ) : [EOL] [docstring] [EOL] [comment] [EOL] url = [string] [EOL] [EOL] [comment] [EOL] responses . add ( responses . GET , url , body = [string] , status = [number] , content_type = [string] , stream = True , ) [EOL] [EOL] [comment] [EOL] exam_url = PdfUrl ( url = url ) [EOL] exam_url . classify ( ) [EOL] assert exam_url . dead_link is None [EOL] [EOL] [comment] [EOL] exam_url . backup_file ( ) [EOL] exam_url . refresh_from_db ( ) [EOL] assert exam_url . dead_link is True [EOL] [EOL] [EOL] @ pytest . mark . xfail ( reason = [string] , strict = True ) @ pytest . mark . django_db def test_queryset_organize_method ( ) : [EOL] [docstring] [EOL] [comment] [EOL] CourseFactory ( full_name = [string] , display_name = [string] , course_code = [string] , ) [EOL] [EOL] exam1 = DocumentInfo . objects . create ( course_code = [string] , year = [number] , season = Season . SPRING , language = Language . ENGLISH , ) [EOL] exam_url1 = PdfUrl . objects . create ( url = [string] , exam = exam1 , ) [EOL] [EOL] exam1_solutions = DocumentInfo . objects . create ( course_code = [string] , year = [number] , season = Season . SPRING , solutions = True , language = Language . ENGLISH , ) [EOL] exam_url_solutions = PdfUrl . objects . create ( url = [string] , exam = exam1_solutions ) [EOL] [EOL] eksamen_losning = DocumentInfo . objects . create ( course_code = [string] , year = [number] , season = Season . SPRING , solutions = True , language = Language . BOKMAL , ) [EOL] eksamen_url_losning = PdfUrl . objects . create ( url = [string] , exam = eksamen_losning , ) [EOL] [EOL] [comment] [EOL] url_exam_2015 = DocumentInfo . objects . create ( course_code = [string] , year = [number] , season = Season . SPRING , solutions = False , language = Language . UNKNOWN , ) [EOL] [EOL] [comment] [EOL] pdf_exam_2015 = DocumentInfo . objects . create ( course_code = [string] , year = [number] , season = Season . SPRING , solutions = False , language = Language . ENGLISH , ) [EOL] sha1_hash = [string] [EOL] exam_2015_pdf = Pdf ( sha1_hash = sha1_hash ) [EOL] exam_2015_pdf . file . save ( sha1_hash + [string] , ContentFile ( [string] ) ) [EOL] DocumentInfoSource . objects . create ( document_info = pdf_exam_2015 , pdf = exam_2015_pdf , ) [EOL] [EOL] [comment] [EOL] exam_2015_url = PdfUrl . objects . create ( url = [string] , exam = url_exam_2015 , scraped_pdf = exam_2015_pdf , ) [EOL] [EOL] organization = DocumentInfo . objects . all ( ) . organize ( ) [EOL] assert organization == { [string] : { [string] : [string] , [string] : [string] , [string] : { [number] : { [string] : { [string] : { [string] : [ exam_url1 ] } , [string] : { [string] : [ eksamen_url_losning ] , [string] : [ exam_url_solutions ] , } , } , } , [number] : { [string] : { [string] : { [string] : [ exam_2015_url ] } , [string] : { } , } , } , } , } , } [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_string_content ( ) : [EOL] [docstring] [EOL] pdf_path = Path ( __file__ ) . parent / [string] / [string] [EOL] pdf_content = ContentFile ( pdf_path . read_bytes ( ) ) [EOL] sha1 = [string] [EOL] pdf_backup = Pdf ( sha1_hash = sha1 ) [EOL] pdf_backup . file . save ( name = sha1 + [string] , content = pdf_content ) [EOL] pdf_backup . read_text ( ) [EOL] pdf_backup . save ( ) [EOL] [EOL] pdf_backup . refresh_from_db ( ) [EOL] [EOL] [comment] [EOL] assert isinstance ( pdf_backup . text , str ) [EOL] [EOL] [comment] [EOL] assert len ( pdf_backup . text . split ( [string] ) ) == [number] [EOL] assert [string] in pdf_backup . text [EOL] assert [string] in pdf_backup . text [EOL] assert [string] not in pdf_backup . text [EOL] [EOL] [comment] [EOL] pages = pdf_backup . pages . all ( ) [EOL] assert pages . count ( ) == [number] [EOL] [EOL] [comment] [EOL] for page_num , page in enumerate ( pages ) : [EOL] assert page . number == page_num [EOL] assert page . confidence is None [EOL] [EOL] [comment] [EOL] assert [string] in pages [ [number] ] . text [EOL] assert [string] not in pages [ [number] ] . text [EOL] [EOL] assert [string] in pages [ [number] ] . text [EOL] assert [string] not in pages [ [number] ] . text [EOL] [EOL] [EOL] @ responses . activate @ pytest . mark . django_db def test_deletion_of_file_on_delete ( tmpdir , settings ) : [EOL] [docstring] [EOL] [comment] [EOL] sha1_hash = [string] [EOL] pdf = Pdf ( sha1_hash = sha1_hash ) [EOL] pdf . file . save ( content = ContentFile ( [string] ) , name = sha1_hash + [string] ) [EOL] [EOL] [comment] [EOL] filepath = Path ( settings . MEDIA_ROOT , pdf . file . name ) [EOL] assert filepath . is_file ( ) [EOL] [EOL] [comment] [EOL] pdf . delete ( ) [EOL] assert not filepath . is_file ( ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_raising_validation_errors_of_wrong_sha1_formatting ( ) : [EOL] [docstring] [EOL] with pytest . raises ( ValidationError ) : [EOL] Pdf . objects . create ( sha1_hash = [string] ) [EOL] [EOL] correct_sha1_hash = [string] [EOL] pdf = Pdf ( sha1_hash = correct_sha1_hash ) [EOL] with pytest . raises ( ValidationError ) : [EOL] pdf . file . save ( content = ContentFile ( [string] ) , name = correct_sha1_hash . replace ( [string] , [string] ) + [string] , ) [EOL] [EOL] [EOL] def test_get_absolute_url_for_pdf ( ) : [EOL] [docstring] [EOL] sha1_hash = [string] [EOL] pdf = Pdf ( sha1_hash = sha1_hash ) [EOL] assert pdf . get_absolute_url ( ) == [string] + sha1_hash [EOL] [EOL] [EOL] class TestExamClassification : [EOL] [EOL] @ pytest . mark . django_db def test_classify_pdf ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] sha1_hash = [string] [EOL] pdf = Pdf ( sha1_hash = sha1_hash ) [EOL] text = [string] [EOL] content = ContentFile ( text ) [EOL] pdf . file . save ( content = content , name = sha1_hash + [string] , save = True ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] assert pdf . classify ( allow_ocr = True ) is False [comment] [EOL] assert pdf . classify ( allow_ocr = False ) is False [EOL] assert pdf . exams . count ( ) == [number] [EOL] [EOL] [comment] [EOL] PdfPage . objects . create ( text = text , pdf = pdf , number = [number] ) [EOL] pdf . refresh_from_db ( ) [EOL] assert pdf . classify ( ) is True [EOL] [EOL] [comment] [EOL] pdf = Pdf . objects . get ( id = pdf . id ) [EOL] assert pdf . exams . count ( ) == [number] [EOL] exam = pdf . exams . first ( ) [EOL] assert exam . language == Language . BOKMAL [EOL] assert exam . course_code == [string] [EOL] assert exam . solutions is False [EOL] assert exam . year == [number] [EOL] assert exam . season == Season . CONTINUATION [EOL] assert exam . content_type == DocumentInfo . EXAM [EOL] [EOL] [comment] [EOL] [comment] [EOL] exam . year == [number] [EOL] exam . save ( ) [EOL] pdf . classify ( ) [EOL] pdf = Pdf . objects . get ( id = pdf . id ) [EOL] assert pdf . exams . count ( ) == [number] [EOL] assert pdf . exams . first ( ) . year == [number] [EOL] [EOL] [comment] [EOL] verified_exam = DocumentInfo . objects . create ( year = [number] , course_code = exam . course_code , language = exam . language , solutions = exam . solutions , ) [EOL] user = UserFactory . create ( username = [string] ) [EOL] verified_exam_pdf = DocumentInfoSource . objects . create ( document_info = verified_exam , pdf = pdf , ) [EOL] verified_exam_pdf . verified_by . add ( user ) [EOL] pdf . classify ( ) [EOL] pdf = Pdf . objects . get ( id = pdf . id ) [EOL] assert pdf . exams . count ( ) == [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] DocumentInfoSource . objects . all ( ) . delete ( ) [EOL] verified_exam_pdf = DocumentInfoSource . objects . create ( document_info = verified_exam , pdf = pdf , ) [EOL] verified_exam_pdf . verified_by . add ( user ) [EOL] pdf . classify ( save = True ) [EOL] assert pdf . exams . count ( ) == [number] [EOL] assert pdf . exams . first ( ) == verified_exam [EOL] [EOL] @ pytest . mark . skipif ( [string] in os . environ , reason = [string] ) @ pytest . mark . django_db def test_classify_pdf_with_several_course_codes ( self ) : [EOL] [docstring] [EOL] sha1_hash = [string] [EOL] pdf = Pdf ( sha1_hash = sha1_hash ) [EOL] text = [string] . encode ( [string] ) [EOL] content = ContentFile ( text ) [EOL] pdf . file . save ( content = content , name = sha1_hash + [string] , save = True ) [EOL] PdfPage . objects . create ( text = text , pdf = pdf , number = [number] ) [EOL] pdf . classify ( ) [EOL] assert ( set ( pdf . exams . values_list ( [string] , flat = True ) ) == { [string] , [string] , [string] } ) [EOL] [EOL] for exam in pdf . exams . all ( ) : [EOL] assert exam . year == [number] [EOL] assert exam . season == Season . CONTINUATION [EOL] assert exam . language == Language . BOKMAL [EOL] assert exam . solutions is True [EOL] [EOL] @ pytest . mark . django_db def test_combining_urls_and_content_for_classification ( self ) : [EOL] [docstring] [EOL] sha1_hash = [string] [EOL] pdf = Pdf ( sha1_hash = sha1_hash ) [EOL] pdf . file . save ( sha1_hash + [string] , ContentFile ( [string] ) ) [EOL] text = [string] [EOL] PdfPage . objects . create ( text = text , pdf = pdf , number = [number] ) [EOL] [EOL] [comment] [EOL] urls = [ [string] , [string] , [string] , ] [EOL] for url in urls : [EOL] pdf_url = PdfUrl . objects . create ( url = url , scraped_pdf = pdf ) [EOL] assert pdf_url . exam . year and pdf_url . exam . season [EOL] [EOL] pdf . classify ( ) [EOL] assert pdf . exams . count ( ) == [number] [EOL] [EOL] exam = pdf . exams . first ( ) [EOL] assert exam . course_code == [string] [EOL] assert exam . solutions is True [EOL] assert exam . language == Language . BOKMAL [EOL] assert exam . year == [number] [EOL] assert exam . season == Season . AUTUMN [EOL] [EOL] @ pytest . mark . django_db def test_classifiying_bad_content ( self ) : [EOL] [docstring] [EOL] sha1_hash = [string] [EOL] text = [string] [EOL] pdf = Pdf ( sha1_hash = sha1_hash ) [EOL] pdf . file . save ( sha1_hash + [string] , ContentFile ( text ) ) [EOL] PdfPage . objects . create ( text = text , pdf = pdf , number = [number] ) [EOL] [EOL] [comment] [EOL] pdf . classify ( ) [EOL] assert pdf . exams . count ( ) == [number] [EOL] [EOL] exam = pdf . exams . first ( ) [EOL] assert exam . solutions is False [EOL] assert exam . course_code is None [EOL] assert exam . language is None [EOL] assert exam . year is None [EOL] assert exam . season is None [EOL] [EOL] [comment] [EOL] urls = [ [string] , [string] , [string] , ] [EOL] for url in urls : [EOL] PdfUrl . objects . create ( url = url , scraped_pdf = pdf ) [EOL] [EOL] pdf . classify ( ) [EOL] assert pdf . exams . count ( ) == [number] [EOL] [EOL] exam = pdf . exams . first ( ) [EOL] assert exam . solutions is False [EOL] assert exam . course_code is None [EOL] assert exam . language is None [EOL] assert exam . year is None [EOL] assert exam . season is None [EOL] [EOL] @ pytest . mark . django_db def test_using_courses_from_url_in_classification ( self ) : [EOL] [docstring] [EOL] sha1_hash = [string] [EOL] pdf = Pdf ( sha1_hash = sha1_hash ) [EOL] pdf . file . save ( sha1_hash + [string] , ContentFile ( [string] ) ) [EOL] [EOL] [comment] [EOL] text = [string] [EOL] PdfPage . objects . create ( text = text , pdf = pdf , number = [number] ) [EOL] [EOL] [comment] [EOL] urls = [ [string] , [string] , [string] , ] [EOL] for url in urls : [EOL] PdfUrl . objects . create ( url = url , scraped_pdf = pdf ) [EOL] [EOL] [comment] [EOL] pdf . classify ( ) [EOL] assert pdf . exams . count ( ) == [number] [EOL] assert ( set ( pdf . exams . values_list ( [string] , flat = True ) ) == { [string] , [string] , [string] , [string] } ) [EOL] [EOL] @ pytest . mark . django_db def test_determining_solutions_of_exam_without_content ( self ) : [EOL] [docstring] [EOL] sha1_hash = [string] [EOL] pdf = Pdf ( sha1_hash = sha1_hash ) [EOL] pdf . file . save ( sha1_hash + [string] , ContentFile ( [string] ) ) [EOL] [EOL] text = [string] [EOL] PdfPage . objects . create ( text = text , pdf = pdf , number = [number] ) [EOL] [EOL] [comment] [EOL] urls = [ [string] , [string] , [string] , ] [EOL] for url in urls : [EOL] PdfUrl . objects . create ( url = url , scraped_pdf = pdf ) [EOL] [EOL] [comment] [EOL] pdf . classify ( ) [EOL] assert pdf . exams . count ( ) == [number] [EOL] assert pdf . exams . first ( ) . solutions is True [EOL] [EOL] [EOL] class TestExamRelatedCourse : [EOL] [docstring] [EOL] [EOL] @ pytest . mark . django_db def test_deriving_course_from_course_code ( self ) : [EOL] [docstring] [EOL] primary = CourseFactory ( course_code = [string] ) [EOL] secondary = CourseFactory ( course_code = [string] ) [EOL] relation = ExamRelatedCourse . objects . create ( primary_course = primary , secondary_course_code = [string] , ) [EOL] assert relation . secondary_course . id == secondary . id [EOL] [EOL] @ pytest . mark . django_db def test_when_course_cant_be_derived_from_course_code ( self ) : [EOL] [docstring] [EOL] primary = CourseFactory ( course_code = [string] ) [EOL] relation = ExamRelatedCourse . objects . create ( primary_course = primary , secondary_course_code = [string] , ) [EOL] assert relation . secondary_course is None [EOL] [EOL] @ pytest . mark . django_db def test_creating_two_primary_courses_for_one_secondary_course ( self ) : [EOL] [docstring] [EOL] primary = CourseFactory ( course_code = [string] ) [EOL] new_primary = CourseFactory ( course_code = [string] ) [EOL] [EOL] ExamRelatedCourse . objects . create ( primary_course = primary , secondary_course_code = [string] , ) [EOL] with pytest . raises ( ValidationError ) : [EOL] ExamRelatedCourse . objects . create ( primary_course = new_primary , secondary_course_code = [string] , ) [EOL] [EOL] @ pytest . mark . django_db def test_setting_a_primary_course_as_a_secondary_one ( self ) : [EOL] [docstring] [EOL] primary = CourseFactory ( course_code = [string] ) [EOL] another_primary = CourseFactory ( course_code = [string] ) [EOL] [EOL] ExamRelatedCourse . objects . create ( primary_course = primary , secondary_course_code = [string] , ) [EOL] with pytest . raises ( ValidationError ) : [EOL] ExamRelatedCourse . objects . create ( primary_course = another_primary , secondary_course_code = [string] , ) [EOL] [EOL] @ pytest . mark . django_db def test_primary_course_with_several_secondary_courses ( self ) : [EOL] [docstring] [EOL] primary = CourseFactory ( course_code = [string] ) [EOL] [EOL] ExamRelatedCourse . objects . create ( primary_course = primary , secondary_course_code = [string] , ) [EOL] ExamRelatedCourse . objects . create ( primary_course = primary , secondary_course_code = [string] , ) [EOL] assert primary . secondary_courses . count ( ) == [number] [EOL] [EOL] [EOL] class TestDocumentInfoContentType : [EOL] [docstring] [EOL] [EOL] @ pytest . mark . django_db def test_default_type_of_document_info_being_unknown ( self ) : [EOL] docinfo = DocumentInfo ( ) [EOL] assert docinfo . content_type == DocumentInfo . UNDETERMINED [EOL] assert docinfo . exercise_number is None [EOL] [EOL] @ pytest . mark . django_db def test_number_only_being_allowed_for_exercise ( self ) : [EOL] [docstring] [EOL] DocumentInfo . objects . create ( content_type = DocumentInfo . EXERCISE , exercise_number = [number] , ) [EOL] DocumentInfo . objects . create ( content_type = DocumentInfo . PROJECT , exercise_number = [number] , ) [EOL] with pytest . raises ( ValidationError ) : [EOL] DocumentInfo . objects . create ( content_type = DocumentInfo . EXAM , exercise_number = [number] , ) [EOL] DocumentInfo . objects . create ( content_type = DocumentInfo . UNDETERMINED , exercise_number = [number] , ) [EOL] DocumentInfo . objects . create ( content_type = DocumentInfo . IRRELEVANT , exercise_number = [number] , ) [EOL]	builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $examiner.models.Pdf$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.bytes$ 0 0 $examiner.models.Pdf$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 $builtins.bytes$ 0 $examiner.models.Pdf$ 0 $examiner.models.Pdf$ 0 0 0 0 0 0 $examiner.models.Pdf$ 0 0 0 0 0 0 0 0 0 $examiner.models.Pdf$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $examiner.models.Pdf$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $examiner.models.Pdf$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 $examiner.models.Pdf$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $examiner.models.Pdf$ 0 $examiner.models.Pdf$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $examiner.models.Pdf$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $examiner.models.Pdf$ 0 0 0 0 0 0 $examiner.models.Pdf$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $examiner.models.Pdf$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $examiner.models.Pdf$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 $examiner.models.Pdf$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $examiner.models.Pdf$ 0 $examiner.models.Pdf$ 0 0 0 0 0 0 0 0 0 $examiner.models.Pdf$ 0 0 0 0 0 0 $examiner.models.Pdf$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $examiner.models.Pdf$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $examiner.models.Pdf$ 0 0 0 $examiner.models.Pdf$ 0 0 0 0 0 0 $examiner.models.Pdf$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $examiner.models.Pdf$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $examiner.models.Pdf$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 $examiner.models.Pdf$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $examiner.models.Pdf$ 0 $examiner.models.Pdf$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $examiner.models.Pdf$ 0 0 0 0 0 $examiner.models.Pdf$ 0 0 0 0 0 0 $examiner.models.Pdf$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $examiner.models.Pdf$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $examiner.models.Pdf$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 $examiner.models.Pdf$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $examiner.models.Pdf$ 0 $examiner.models.Pdf$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $examiner.models.Pdf$ 0 0 0 0 0 $examiner.models.Pdf$ 0 0 0 0 0 0 $examiner.models.Pdf$ 0 0 0 0 0 0 0 0 0 0 $examiner.models.Pdf$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $examiner.models.DocumentInfo$ 0 0 0 0 0 0 $examiner.models.DocumentInfo$ 0 0 0 0 0 0 0 0 $examiner.models.DocumentInfo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Optional , Tuple [EOL] import typing [EOL] import builtins [EOL] import examiner [EOL] from typing import List , Optional [EOL] [EOL] import pytest [EOL] [EOL] from examiner . models import DocumentInfo [EOL] from examiner . parsers import ExamURLParser , Language , PdfParser , Season [EOL] [EOL] [EOL] class ExamURL : [EOL] def __init__ ( self , url , code , year , season , solutions , language , probably_exam , ) : [EOL] self . url = url [EOL] self . code = code [EOL] self . year = year [EOL] self . season = season [EOL] self . solutions = solutions [EOL] self . language = language [EOL] self . probably_exam = probably_exam [EOL] [EOL] def __repr__ ( self ) : [EOL] return f' [string] { self . url }' [EOL] [EOL] [EOL] ExamURLs = ( ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . SPRING , solutions = False , language = Language . BOKMAL , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . SPRING , solutions = True , language = Language . ENGLISH , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . CONTINUATION , solutions = False , language = Language . BOKMAL , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . CONTINUATION , solutions = False , language = Language . NYNORSK , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . SPRING , solutions = True , language = Language . ENGLISH , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . SPRING , solutions = True , language = Language . ENGLISH , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . AUTUMN , solutions = False , language = Language . BOKMAL , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . AUTUMN , solutions = False , language = Language . BOKMAL , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = None , season = Season . UNKNOWN , solutions = False , language = Language . UNKNOWN , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . SPRING , solutions = False , language = Language . BOKMAL , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . SPRING , solutions = False , language = Language . ENGLISH , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . CONTINUATION , solutions = False , language = Language . UNKNOWN , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . AUTUMN , solutions = True , language = Language . BOKMAL , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . CONTINUATION , solutions = False , language = Language . UNKNOWN , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . SPRING , solutions = True , language = Language . ENGLISH , probably_exam = False , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . AUTUMN , solutions = True , language = Language . ENGLISH , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . AUTUMN , solutions = True , language = Language . BOKMAL , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . AUTUMN , solutions = True , language = Language . BOKMAL , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . AUTUMN , solutions = False , language = Language . UNKNOWN , probably_exam = False , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . CONTINUATION , solutions = False , language = Language . BOKMAL , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . AUTUMN , solutions = False , language = Language . UNKNOWN , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . AUTUMN , solutions = True , language = Language . BOKMAL , probably_exam = False , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . SPRING , solutions = False , language = Language . BOKMAL , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . AUTUMN , solutions = False , language = Language . BOKMAL , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . UNKNOWN , solutions = True , language = Language . BOKMAL , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . SPRING , solutions = True , language = Language . ENGLISH , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . SPRING , solutions = False , language = Language . NYNORSK , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . SPRING , solutions = False , language = Language . NYNORSK , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . UNKNOWN , solutions = False , language = Language . BOKMAL , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . UNKNOWN , solutions = False , language = Language . NYNORSK , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . CONTINUATION , solutions = False , language = Language . UNKNOWN , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . AUTUMN , solutions = True , language = Language . BOKMAL , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . SPRING , solutions = True , language = Language . NYNORSK , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . SPRING , solutions = False , language = Language . UNKNOWN , probably_exam = False , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . SPRING , solutions = True , language = Language . BOKMAL , probably_exam = False , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . SPRING , solutions = True , language = Language . BOKMAL , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . AUTUMN , solutions = False , language = Language . BOKMAL , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . AUTUMN , solutions = True , language = Language . BOKMAL , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . CONTINUATION , solutions = True , language = Language . BOKMAL , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . AUTUMN , solutions = False , language = Language . ENGLISH , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . AUTUMN , solutions = False , language = Language . BOKMAL , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . AUTUMN , solutions = True , language = Language . BOKMAL , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . AUTUMN , solutions = False , language = Language . BOKMAL , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . SPRING , solutions = False , language = Language . BOKMAL , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . AUTUMN , solutions = False , language = Language . BOKMAL , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . AUTUMN , solutions = True , language = Language . BOKMAL , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . AUTUMN , solutions = True , language = Language . BOKMAL , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . CONTINUATION , solutions = False , language = Language . BOKMAL , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . CONTINUATION , solutions = False , language = Language . BOKMAL , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . CONTINUATION , solutions = False , language = Language . BOKMAL , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . SPRING , solutions = False , language = Language . BOKMAL , probably_exam = True , ) , ExamURL ( url = [string] , code = [string] , year = [number] , season = Season . CONTINUATION , solutions = True , language = Language . BOKMAL , probably_exam = True , ) , ) [EOL] [EOL] class TestExamURLParser : [EOL] @ pytest . mark . parametrize ( [string] , ExamURLs ) def test_getting_url ( self , exam ) : [EOL] url_parser = ExamURLParser ( url = exam . url ) [EOL] assert url_parser . url == exam . url [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ExamURLs ) def test_year_parsing ( self , exam ) : [EOL] url_parser = ExamURLParser ( url = exam . url ) [EOL] assert url_parser . year == exam . year [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ExamURLs ) def test_course_code_parsing ( self , exam ) : [EOL] url_parser = ExamURLParser ( url = exam . url ) [EOL] assert url_parser . code == exam . code [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ExamURLs ) def test_season_parser ( self , exam ) : [EOL] url_parser = ExamURLParser ( url = exam . url ) [EOL] assert url_parser . season == exam . season [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ExamURLs ) def test_solutions_parser ( self , exam ) : [EOL] url_parser = ExamURLParser ( url = exam . url ) [EOL] assert url_parser . solutions == exam . solutions [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ExamURLs ) def test_probably_exam ( self , exam ) : [EOL] url_parser = ExamURLParser ( url = exam . url ) [EOL] assert url_parser . probably_exam == exam . probably_exam [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ExamURLs ) def test_language_parser ( self , exam ) : [EOL] url_parser = ExamURLParser ( url = exam . url ) [EOL] assert url_parser . language == exam . language [EOL] [EOL] [EOL] def test_tokenize ( ) : [EOL] assert ExamURLParser . tokenize ( [string] ) == [string] [EOL] assert ExamURLParser . tokenize ( [string] ) == [string] [EOL] assert ExamURLParser . tokenize ( [string] ) == [string] [EOL] assert ( ExamURLParser . tokenize ( [string] ) == [string] ) [EOL] [EOL] [EOL] class ExamPDF : [EOL] def __init__ ( self , pages , course_codes , year , season , solutions , language , content_type , ) : [EOL] self . pages = pages [EOL] self . course_codes = course_codes [EOL] self . year = year [EOL] self . season = season [EOL] self . solutions = solutions [EOL] self . language = language [EOL] self . content_type = content_type [EOL] [EOL] def __repr__ ( self ) : [EOL] return f' [string] { self . pages [ [number] ] } [string] ' [EOL] [EOL] [EOL] ExamPDFs = [ ExamPDF ( pages = [ [string] , ] , course_codes = [ [string] ] , year = [number] , season = Season . CONTINUATION , solutions = True , language = Language . BOKMAL , content_type = DocumentInfo . EXAM , ) , ExamPDF ( pages = [ [string] , ] , course_codes = [ [string] ] , year = [number] , season = Season . SPRING , solutions = True , language = Language . NYNORSK , content_type = DocumentInfo . EXAM , ) , ExamPDF ( pages = [ [string] , ] , course_codes = [ [string] , [string] ] , year = [number] , season = Season . CONTINUATION , solutions = True , language = Language . BOKMAL , content_type = DocumentInfo . EXAM , ) , ExamPDF ( pages = [ [string] , ] , course_codes = [ [string] , [string] ] , year = [number] , season = Season . CONTINUATION , solutions = True , language = Language . BOKMAL , content_type = DocumentInfo . EXAM , ) , ExamPDF ( pages = [ [string] , ] , course_codes = [ [string] , [string] ] , year = [number] , season = Season . CONTINUATION , solutions = True , language = Language . BOKMAL , content_type = DocumentInfo . EXAM , ) , ExamPDF ( pages = [ [string] ] , course_codes = [ [string] ] , year = [number] , season = Season . CONTINUATION , solutions = True , language = Language . ENGLISH , content_type = DocumentInfo . UNDETERMINED , ) , ExamPDF ( pages = [ [string] , ] , course_codes = [ [string] ] , year = [number] , season = Season . AUTUMN , solutions = False , language = Language . ENGLISH , content_type = DocumentInfo . EXAM , ) , ExamPDF ( pages = [ [string] ] , course_codes = [ [string] ] , year = [number] , season = Season . AUTUMN , solutions = True , language = Language . ENGLISH , content_type = DocumentInfo . UNDETERMINED , ) , ExamPDF ( pages = [ [string] ] , course_codes = [ [string] ] , year = [number] , season = Season . AUTUMN , solutions = True , language = Language . BOKMAL , content_type = DocumentInfo . EXAM , ) , ExamPDF ( pages = [ [string] ] , course_codes = [ [string] ] , year = [number] , season = Season . SPRING , solutions = True , language = Language . BOKMAL , content_type = DocumentInfo . EXAM , ) , ] [EOL] [EOL] [EOL] class TestExamPdfParser : [EOL] @ pytest . mark . parametrize ( [string] , ExamPDFs ) def test_year_parsing ( self , pdf ) : [EOL] url_parser = PdfParser ( text = pdf . pages [ [number] ] ) [EOL] assert url_parser . year == pdf . year [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ExamPDFs ) def test_course_code_parsing ( self , pdf ) : [EOL] url_parser = PdfParser ( text = pdf . pages [ [number] ] ) [EOL] assert url_parser . course_codes == pdf . course_codes [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ExamPDFs ) def test_season_parser ( self , pdf ) : [EOL] url_parser = PdfParser ( text = pdf . pages [ [number] ] ) [EOL] assert url_parser . season == pdf . season [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ExamPDFs ) def test_solutions_parser ( self , pdf ) : [EOL] url_parser = PdfParser ( text = pdf . pages [ [number] ] ) [EOL] assert url_parser . solutions == pdf . solutions [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ExamPDFs ) def test_content_type ( self , pdf ) : [EOL] url_parser = PdfParser ( text = pdf . pages [ [number] ] ) [EOL] assert url_parser . content_type == pdf . content_type [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ExamPDFs ) def test_language_parser ( self , pdf ) : [EOL] url_parser = PdfParser ( text = pdf . pages [ [number] ] ) [EOL] assert url_parser . language == pdf . language [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.int$ 0 $examiner.parsers.Season$ 0 $builtins.bool$ 0 $examiner.parsers.Language$ 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $examiner.parsers.Season$ 0 $examiner.parsers.Season$ 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 $examiner.parsers.Language$ 0 $examiner.parsers.Language$ 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 $builtins.strexaminer.parsers.ExamURLParser$ 0 0 0 0 0 0 0 0 0 0 0 $examiner.parsers.ExamURLParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $examiner.parsers.ExamURLParser$ 0 0 0 0 0 0 0 0 0 0 0 $examiner.parsers.ExamURLParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $examiner.parsers.ExamURLParser$ 0 0 0 0 0 0 0 0 0 0 0 $examiner.parsers.ExamURLParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $examiner.parsers.ExamURLParser$ 0 0 0 0 0 0 0 0 0 0 0 $examiner.parsers.ExamURLParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $examiner.parsers.ExamURLParser$ 0 0 0 0 0 0 0 0 0 0 0 $examiner.parsers.ExamURLParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $examiner.parsers.ExamURLParser$ 0 0 0 0 0 0 0 0 0 0 0 $examiner.parsers.ExamURLParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $examiner.parsers.ExamURLParser$ 0 0 0 0 0 0 0 0 0 0 0 $examiner.parsers.ExamURLParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 $builtins.int$ 0 $examiner.parsers.Season$ 0 $builtins.bool$ 0 $examiner.parsers.Language$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $examiner.parsers.Season$ 0 $examiner.parsers.Season$ 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 $examiner.parsers.Language$ 0 $examiner.parsers.Language$ 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $examiner.parsers.PdfParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $examiner.parsers.PdfParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $examiner.parsers.PdfParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $examiner.parsers.PdfParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $examiner.parsers.PdfParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $examiner.parsers.PdfParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $examiner.parsers.PdfParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $examiner.parsers.PdfParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $examiner.parsers.PdfParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $examiner.parsers.PdfParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $examiner.parsers.PdfParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $examiner.parsers.PdfParser$ 0 0 0 0 0 0 0
default_app_config = [string]	$builtins.str$ 0 0
from typing import Any [EOL] import typing [EOL] import builtins [EOL] import semesterpage [EOL] import django [EOL] from gettext import gettext as _ [EOL] [EOL] from django . conf import settings [EOL] from django . contrib import admin [EOL] from django . contrib . auth . decorators import login_required [EOL] from django . contrib . auth . models import User [EOL] from django . db . models import Q [EOL] from django . http import Http404 , HttpResponse , HttpRequest [EOL] from django . shortcuts import redirect , render , reverse as django_reverse [EOL] [EOL] from dal import autocomplete [EOL] from rules . contrib . views import permission_required , objectgetter [EOL] [EOL] from dataporten . models import DataportenUser [EOL] from . adapters import reconcile_dataporten_data [EOL] from . models import Course , Semester , StudyProgram [EOL] [EOL] DEFAULT_STUDY_PROGRAM_SLUG = getattr ( settings , [string] , [string] , ) [EOL] DEFAULT_SEMESTER_PK = getattr ( settings , [string] , [number] ) [EOL] [EOL] [EOL] def homepage ( request ) : [EOL] [docstring] [EOL] if request . user . is_authenticated : [EOL] return redirect ( to = request . user . options . get_absolute_url ( ) ) [EOL] elif request . session . get ( [string] , [string] ) : [EOL] [comment] [EOL] return redirect ( django_reverse ( [string] , args = ( request . session . get ( [string] ) , ) ) ) [EOL] else : [EOL] [comment] [EOL] return redirect ( to = [string] ) [EOL] [EOL] [comment] [EOL] semester_pk = request . session . get ( [string] , DEFAULT_SEMESTER_PK ) [EOL] semester = Semester . objects . get ( pk = semester_pk ) [EOL] return redirect ( to = semester . get_absolute_url ( ) ) [EOL] [EOL] [EOL] def studentpage ( request , homepage ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] try : [EOL] [comment] [EOL] user = ( User . objects . select_related ( [string] , [string] ) . prefetch_related ( [string] ) . get ( username = homepage ) ) [EOL] [EOL] except User . DoesNotExist : [EOL] raise Http404 ( _ ( [string] ) % homepage ) [EOL] [EOL] if request . user . is_authenticated \ [EOL] and isinstance ( request . user , DataportenUser ) \ [EOL] and request . user . username == homepage : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] reconcile_dataporten_data ( request . user ) [EOL] user . refresh_from_db ( ) [EOL] [EOL] [comment] [EOL] request . session [ [string] ] = homepage [EOL] [EOL] return render ( request , [string] , { [string] : user . options , [string] : user . options . courses , [string] : StudyProgram . objects . filter ( published = True ) , [string] : get_calendar_name ( request ) , [string] : request . user , [string] : f' [string] { user . username }' , [string] : True , } ) [EOL] [EOL] [EOL] def semester_view ( request , study_program , main_profile = None , semester_number = None , save_location = True , ) : [EOL] [docstring] [EOL] try : [EOL] semester = Semester . get ( study_program , main_profile , semester_number ) [EOL] except Semester . DoesNotExist : [EOL] if not main_profile and not semester_number : [EOL] [comment] [EOL] return studentpage ( request , study_program ) [EOL] raise Http404 ( _ ( [string] [string] [string] ) % ( ( semester_number or [string] ) , main_profile or [string] , study_program , ) ) [EOL] [EOL] if save_location : [EOL] [comment] [EOL] [comment] [EOL] request . session [ [string] ] = semester . pk [EOL] request . session [ [string] ] = semester . study_program . slug [EOL] [EOL] [comment] [EOL] request . session [ [string] ] = [string] [EOL] [EOL] if semester . main_profile : [EOL] request . session [ [string] ] = semester . main_profile . slug [EOL] else : [EOL] request . session [ [string] ] = [string] [EOL] request . session [ [string] ] = semester . number [EOL] request . session [ [string] ] = [string] [comment] [EOL] [EOL] [comment] [EOL] electives_url = [string] [EOL] if semester . has_electives : [EOL] if request . user . is_authenticated : [EOL] electives_url = request . user . options . get_admin_url ( ) [EOL] else : [EOL] electives_url = [string] [EOL] [EOL] return render ( request , [string] , { [string] : semester , [string] : semester . courses . all ( ) , [string] : StudyProgram . objects . filter ( published = True ) , [string] : get_calendar_name ( request ) , [string] : electives_url , [string] : request . user , [string] : False , } , ) [EOL] [EOL] [EOL] @ login_required def profile ( request ) : [EOL] [docstring] [EOL] if settings . PICK_COURSES_ON_FIRST_LOGIN and not request . user . options . last_user_modification : [EOL] return redirect ( request . user . options . get_admin_url ( ) ) [EOL] else : [EOL] return redirect ( django_reverse ( [string] , args = ( request . user . username , ) ) ) [EOL] [EOL] [EOL] def get_calendar_name ( request ) : [EOL] [docstring] [EOL] [comment] [EOL] try : [EOL] if request . user . options . calendar_name : [EOL] [comment] [EOL] return request . user . options . calendar_name [EOL] except AttributeError : [EOL] pass [EOL] [comment] [EOL] return request . session . get ( [string] , None ) [EOL] [EOL] [EOL] def calendar ( request , calendar_name ) : [EOL] [docstring] [EOL] request . session [ [string] ] = calendar_name [EOL] if request . user . is_authenticated ( ) : [EOL] request . user . options . calendar_name = calendar_name [EOL] request . user . options . save ( ) [EOL] return redirect ( to = [string] + calendar_name ) [EOL] [EOL] [EOL] def admin_login ( request ) : [EOL] [docstring] [EOL] if request . user . is_authenticated and [string] in request . GET : [EOL] [comment] [EOL] return redirect ( request . GET [ [string] ] ) [EOL] else : [EOL] [comment] [EOL] return admin . site . login ( request ) [EOL] [EOL] [EOL] def admin_course_history ( request , course_pk ) : [EOL] [docstring] [EOL] if request . user . is_superuser : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] return admin . site . _registry [ Course ] . history_view ( request , course_pk ) [EOL] else : [EOL] [comment] [EOL] [comment] [EOL] return redirect ( [string] ) [EOL] [EOL] [EOL] @ permission_required ( [string] , fn = objectgetter ( Course , [string] ) , ) def new_course_url ( request , course_pk ) : [EOL] [docstring] [EOL] homepage_url = request . GET . get ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] if not homepage_url [ : [number] ] . lower ( ) == [string] : [EOL] homepage_url = [string] + homepage_url [EOL] [EOL] course = Course . objects . get ( pk = int ( course_pk ) ) [EOL] course . homepage = homepage_url . strip ( ) [EOL] course . save ( update_fields = [ [string] ] ) [EOL] return redirect ( course . homepage ) [EOL] [EOL] [EOL] @ login_required def remove_course ( request , course_pk ) : [EOL] [docstring] [EOL] request . user . options . self_chosen_courses . remove ( course_pk ) [EOL] return redirect ( to = request . user . options . get_absolute_url ( ) ) [EOL] [EOL] [EOL] class CourseAutocomplete ( autocomplete . Select2QuerySetView ) : [EOL] LOGIN_REQUIRED = False [EOL] [EOL] def get_queryset ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] if self . LOGIN_REQUIRED and not self . request . user . is_authenticated ( ) : [EOL] return Course . objects . none ( ) [EOL] [EOL] qs = Course . objects . all ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if self . q : [EOL] course_code = Q ( course_code__istartswith = self . q ) [EOL] full_name = Q ( full_name__istartswith = self . q ) [EOL] display_name = Q ( display_name__istartswith = self . q ) [EOL] qs = qs . filter ( course_code | full_name | display_name ) [EOL] [EOL] return qs [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Anydjango.http.HttpResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.http.HttpResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.http.HttpResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.http.HttpResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0
from typing import Type [EOL] import typing [EOL] import semesterpage [EOL] from gettext import gettext as _ [EOL] [EOL] from django . apps import AppConfig [EOL] [EOL] [EOL] class SemesterpageConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = _ ( [string] ) [EOL] [EOL] def ready ( self ) : [EOL] [comment] [EOL] import semesterpage . signals . handlers [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def create_contributor_groups ( ) : [EOL] [docstring] [EOL] [comment] [EOL] from django . contrib . auth . models import Group , Permission [EOL] [EOL] students , created = Group . objects . get_or_create ( name = [string] ) [EOL] if created : [EOL] students . permissions = [ Permission . objects . get ( codename = [string] ) , ] [EOL] [EOL] course_contributors , created = Group . objects . get_or_create ( name = [string] ) [EOL] if created : [EOL] course_contributors . permissions = [ Permission . objects . get ( codename = [string] ) , Permission . objects . get ( codename = [string] ) , Permission . objects . get ( codename = [string] ) , Permission . objects . get ( codename = [string] ) , Permission . objects . get ( codename = [string] ) , Permission . objects . get ( codename = [string] ) , ] [EOL] [EOL] [comment] [EOL] semester_contributors , created = Group . objects . get_or_create ( name = [string] ) [EOL] if created : [EOL] semester_contributors . permissions = [ ] [EOL] [EOL] [comment] [EOL] mainprofile_contributors , created = Group . objects . get_or_create ( name = [string] ) [EOL] if created : [EOL] mainprofile_contributors . permissions = [ ] [EOL] [EOL] studyprogram_contributors , created = Group . objects . get_or_create ( name = [string] ) [EOL] if created : [EOL] studyprogram_contributors . permissions = [ Permission . objects . get ( codename = [string] ) , Permission . objects . get ( codename = [string] ) , Permission . objects . get ( codename = [string] ) , Permission . objects . get ( codename = [string] ) , Permission . objects . get ( codename = [string] ) , Permission . objects . get ( codename = [string] ) , Permission . objects . get ( codename = [string] ) , Permission . objects . get ( codename = [string] ) , Permission . objects . get ( codename = [string] ) , Permission . objects . get ( codename = [string] ) , Permission . objects . get ( codename = [string] ) , Permission . objects . get ( codename = [string] ) , Permission . objects . get ( codename = [string] ) , Permission . objects . get ( codename = [string] ) , Permission . objects . get ( codename = [string] ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Set , Any [EOL] import typing [EOL] import dataporten [EOL] import builtins [EOL] from typing import Dict [EOL] [EOL] from django . db . models import Q [EOL] [EOL] from dataporten . parsers import Course as ParsedCourse [EOL] [EOL] from . models import Course [EOL] from dataporten . models import DataportenUser [EOL] [EOL] def reconcile_dataporten_data ( user ) : [EOL] [docstring] [EOL] sync_dataporten_courses_with_db ( user . dataporten . courses . all ) [EOL] sync_options_of_user_with_dataporten ( user = user ) [EOL] [EOL] def sync_dataporten_courses_with_db ( courses ) : [EOL] [comment] [EOL] course_codes = courses . keys ( ) [EOL] [EOL] [comment] [EOL] already_in_database = Course . objects . filter ( course_code__in = course_codes ) [EOL] [EOL] codes_already_in_database = already_in_database . values_list ( [string] , flat = True ) [EOL] [EOL] [comment] [EOL] missing_in_database = set ( course_codes ) - set ( codes_already_in_database ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] for key in missing_in_database : [EOL] course = courses [ key ] [EOL] Course . objects . create ( full_name = course . name , homepage = course . url , course_code = course . code , dataporten_uid = course . uid , ) [EOL] [EOL] [comment] [EOL] missing_uid = already_in_database . filter ( dataporten_uid = None ) [EOL] for course in missing_uid . all ( ) : [EOL] course . dataporten_uid = courses [ course . course_code ] . uid [EOL] course . save ( update_fields = [ [string] ] ) [EOL] [EOL] def sync_options_of_user_with_dataporten ( user ) : [EOL] [docstring] [EOL] [comment] [EOL] active_dp_course = Q ( course_code__in = user . dataporten . courses . active ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] saved_active_course = Q ( pk__in = user . options . active_dataporten_courses . all ( ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] new_active_courses = Course . objects . filter ( active_dp_course ) . exclude ( saved_active_course ) [EOL] [EOL] new_finished_courses = Course . objects . filter ( saved_active_course ) . exclude ( active_dp_course ) [EOL] [EOL] has_new_active_courses = new_active_courses . count ( ) > [number] [EOL] has_new_finished_courses = new_finished_courses . count ( ) > [number] [EOL] [EOL] if has_new_active_courses : [EOL] [comment] [EOL] [comment] [EOL] user . options . self_chosen_courses . add ( * new_active_courses . all ( ) ) [EOL] [EOL] if has_new_finished_courses : [EOL] [comment] [EOL] [comment] [EOL] user . options . self_chosen_courses . remove ( * new_finished_courses . all ( ) ) [EOL] [EOL] if has_new_active_courses or has_new_finished_courses : [EOL] [comment] [EOL] active_dp_courses = Course . objects . filter ( active_dp_course ) . all ( ) [EOL] user . options . active_dataporten_courses . set ( active_dp_courses ) [EOL] user . options . save ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . conf . urls import include , url [EOL] from django . contrib import admin [EOL] [EOL] from semesterpage import views [EOL] [EOL] urlpatterns = [ url ( [string] , views . homepage , name = [string] ) , url ( [string] , views . homepage ) , url ( [string] , views . admin_login ) , url ( [string] , views . homepage ) , url ( [string] , views . admin_course_history , name = [string] ) , url ( [string] , include ( admin . site . urls ) ) , url ( [string] , views . CourseAutocomplete . as_view ( ) , name = [string] ) , url ( [string] , views . profile , name = [string] ) , url ( [string] , views . calendar , name = [string] ) , url ( [string] , views . new_course_url , name = [string] ) , url ( [string] , views . remove_course , name = [string] ) , url ( [string] , views . semester_view , name = [string] ) , url ( [string] , views . semester_view , name = [string] ) , url ( [string] , views . semester_view , name = [string] ) , url ( [string] , views . semester_view , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] [docstring] [EOL] from rules import add_perm , is_superuser , predicate [EOL] [EOL] from dataporten . models import DataportenUser [EOL] [EOL] [EOL] @ predicate def has_contributor_access ( user , object ) : [EOL] return user . is_authenticated \ [EOL] and user . contributor . has_contributor_access_to ( object ) [EOL] [EOL] contributor_models = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] for model in contributor_models : [EOL] add_perm ( [string] + model , has_contributor_access ) [EOL] add_perm ( [string] + model , has_contributor_access ) [EOL] [EOL] add_perm ( [string] , is_superuser ) [EOL] add_perm ( [string] , is_superuser ) [EOL] [EOL] [comment] [EOL] add_perm ( [string] , has_contributor_access ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import semesterpage [EOL] from django import forms [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] [EOL] from dal import autocomplete [EOL] [EOL] from . models import Course , Options [EOL] [EOL] class OptionsForm ( forms . ModelForm ) : [EOL] [docstring] [EOL] [EOL] self_chosen_courses = forms . ModelMultipleChoiceField ( label = _ ( [string] ) , queryset = Course . objects . all ( ) , widget = autocomplete . ModelSelect2Multiple ( url = [string] , attrs = { [string] : _ ( [string] ) , [string] : [number] , } , ) ) [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( OptionsForm , self ) . __init__ ( * args , ** kwargs ) [EOL] self . fields [ [string] ] . help_text = _ ( [string] ) [EOL] [EOL] class Meta : [EOL] model = Options [EOL] [EOL] [comment] [EOL] fields = ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[semesterpage.forms.OptionsForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[semesterpage.models.Options]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0
from typing import Set , Any [EOL] import typing [EOL] import builtins [EOL] import requests [EOL] import semesterpage [EOL] from typing import Set [EOL] [EOL] from django . core . management . base import BaseCommand [EOL] [EOL] import requests [EOL] [EOL] from tqdm import tqdm [EOL] [EOL] from semesterpage . models import Course [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] existing_courses = set ( Course . objects . all ( ) . values_list ( [string] , flat = True ) ) [EOL] [EOL] new_courses = [number] [EOL] [EOL] api = IMEAPI ( ) [EOL] try : [EOL] for course in tqdm ( api . all_courses ( skip = existing_courses ) ) : [EOL] Course . objects . create ( ** course ) [EOL] tqdm . write ( [string] + str ( course ) ) [EOL] new_courses += [number] [EOL] except KeyboardInterrupt : [EOL] pass [EOL] [EOL] self . stdout . write ( self . style . SUCCESS ( f'{ new_courses } [string] ' ) , ) [EOL] [EOL] [EOL] class IMEAPI : [EOL] [docstring] [EOL] [EOL] COURSE_URL = [string] [EOL] [EOL] @ classmethod def all_courses ( cls , skip ) : [EOL] [docstring] [EOL] response = requests . get ( cls . COURSE_URL + [string] ) [EOL] courses = response . json ( ) [ [string] ] [EOL] for course in courses : [EOL] course_code = course [ [string] ] . upper ( ) [EOL] if course_code in skip : [EOL] continue [EOL] [EOL] response = requests . get ( cls . COURSE_URL + course_code ) [EOL] course_info = response . json ( ) [ [string] ] [EOL] [EOL] yield { [string] : course_code , [string] : course_info [ [string] ] , [string] : cls . course_homepage ( course_info ) , } [EOL] [EOL] @ staticmethod def course_homepage ( course ) : [EOL] [docstring] [EOL] info_types = course . get ( [string] ) [EOL] if not info_types : [EOL] return [string] [EOL] [EOL] for info in info_types : [EOL] if info [ [string] ] == [string] and [string] in info : [EOL] return info [ [string] ] or [string] [EOL] [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $semesterpage.management.commands.populate_courses.IMEAPI$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $semesterpage.management.commands.populate_courses.IMEAPI$ 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Set[builtins.str]$ 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , List , Any [EOL] import typing [EOL] import pytest [EOL] [EOL] from . . adapters import ( sync_dataporten_courses_with_db , sync_options_of_user_with_dataporten , ) [EOL] from . . models import Course [EOL] from . factories import CourseFactory [EOL] from dataporten . tests . factories import DataportenUserFactory [EOL] from dataporten . tests . conftest import ( finished_course , non_finished_course , ongoing_course , ) [EOL] [EOL] class TestSyncDataportenCoursesWithDB : [EOL] @ pytest . mark . django_db def test_basic_properties_of_saving_new_courses_to_db ( self , finished_course , non_finished_course , ongoing_course , ) : [EOL] [docstring] [EOL] db_courses = [ finished_course , non_finished_course , ongoing_course ] [EOL] db_course_dict = { course . code : course for course in db_courses } [EOL] CourseFactory ( course_code = ongoing_course . code ) [EOL] [EOL] [comment] [EOL] assert Course . objects . filter ( course_code__in = db_course_dict . keys ( ) ) . count ( ) == [number] [EOL] [EOL] [comment] [EOL] sync_dataporten_courses_with_db ( db_course_dict ) [EOL] assert Course . objects . filter ( course_code__in = db_course_dict . keys ( ) ) . count ( ) == [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] algebra = Course . objects . get ( course_code = non_finished_course . code ) [EOL] assert algebra . full_name == [string] [EOL] assert algebra . homepage == [string] [EOL] assert algebra . dataporten_uid == [string] [EOL] [EOL] class TestSyncOptionsOfUserWithDataporten : [EOL] @ pytest . mark . django_db def test_new_user ( self , dataporten ) : [EOL] dp_user = DataportenUserFactory ( ) [EOL] sync_dataporten_courses_with_db ( dp_user . dataporten . courses . all ) [EOL] [EOL] [comment] [EOL] assert dp_user . options . self_chosen_courses . count ( ) == [number] [EOL] [EOL] sync_options_of_user_with_dataporten ( dp_user ) [EOL] [EOL] [comment] [EOL] assert len ( dp_user . dataporten . courses . active ) == dp_user . options . self_chosen_courses . count ( ) [EOL] [EOL] @ pytest . mark . django_db def test_user_has_removed_one_of_the_self_chosen_courses ( self ) : [EOL] dp_user = DataportenUserFactory ( ) [EOL] sync_dataporten_courses_with_db ( dp_user . dataporten . courses . all ) [EOL] sync_options_of_user_with_dataporten ( dp_user ) [EOL] course = dp_user . options . self_chosen_courses . all ( ) [ [number] ] [EOL] [EOL] [comment] [EOL] dp_user . options . self_chosen_courses . remove ( course ) [EOL] dp_user . options . save ( ) [EOL] dp_user . refresh_from_db ( ) [EOL] [EOL] count_before = dp_user . options . self_chosen_courses . count ( ) [EOL] sync_options_of_user_with_dataporten ( dp_user ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] assert dp_user . options . self_chosen_courses . count ( ) == count_before [EOL] assert count_before == len ( dp_user . dataporten . courses . active ) - [number] [EOL] [EOL] @ pytest . mark . django_db def test_user_has_finished_a_course_since_last_time ( self ) : [EOL] [comment] [EOL] assert True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import unittest [EOL] import semesterpage [EOL] import datetime [EOL] from unittest . mock import Mock [EOL] [EOL] from django . contrib . auth . models import Group , User [EOL] from django . test import TestCase [EOL] [EOL] import pytest [EOL] from freezegun import freeze_time [EOL] [EOL] from dataporten . models import DataportenUser [EOL] from dataporten . tests . factories import UserFactory [EOL] from . . apps import create_contributor_groups [EOL] from . . models import Course , Semester , norwegian_slugify [EOL] from . factories import ( CourseFactory , CourseUploadFactory , MainProfileFactory , OptionsFactory , SemesterFactory , StudyProgramFactory , ) [EOL] [EOL] [EOL] class TestUser : [EOL] @ pytest . mark . django_db def test_new_user_permissions ( self ) : [EOL] create_contributor_groups ( ) [EOL] [EOL] new_user = User . objects . create ( username = [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] assert new_user . is_staff is True [EOL] [EOL] [comment] [EOL] students_group = Group . objects . get ( name = [string] ) [EOL] assert students_group in new_user . groups . all ( ) [EOL] [EOL] [comment] [EOL] new_user . contributor [EOL] new_user . options [EOL] [EOL] @ pytest . mark . django_db def test_that_new_users_do_not_have_options_last_modified_attribute ( self ) : [EOL] user = UserFactory ( ) [EOL] assert user . options . last_user_modification is None [EOL] [EOL] class TestStudyProgram : [EOL] @ pytest . mark . django_db def test_study_program_factory ( self , study_program ) : [EOL] assert study_program . display_name == [string] [EOL] [EOL] @ pytest . mark . django_db def test_slug_field ( self ) : [EOL] study_program = StudyProgramFactory ( display_name = [string] ) [EOL] assert study_program . slug == [string] [EOL] [EOL] [EOL] class TestMainProfile : [EOL] @ pytest . mark . django_db def test_main_profile_factory ( self , main_profile ) : [EOL] assert main_profile . display_name == [string] [EOL] [EOL] @ pytest . mark . django_db def test_slug_field ( self ) : [EOL] main_profile = MainProfileFactory ( display_name = [string] ) [EOL] assert main_profile . slug == [string] [EOL] [EOL] [EOL] class TestSemester : [EOL] @ pytest . mark . django_db def test_creation_of_semester_with_factory ( self , semester ) : [EOL] assert semester . number == [number] [EOL] assert semester . main_profile . display_name == [string] [EOL] [EOL] @ pytest . mark . django_db def test_simple_semester ( self ) : [EOL] simple_semester = SemesterFactory ( study_program__display_name = [string] , main_profile = None , number = [number] , ) [EOL] result = Semester . get ( study_program = [string] , number = [number] , ) [EOL] assert simple_semester == result [EOL] [EOL] @ pytest . mark . django_db def test_main_profile_semester ( self ) : [EOL] main_profile_semester = SemesterFactory ( study_program__display_name = [string] , main_profile__display_name = [string] , number = [number] , ) [EOL] result = Semester . get ( study_program = [string] , main_profile = [string] , number = [number] , ) [EOL] assert main_profile_semester == result [EOL] [EOL] @ pytest . mark . django_db def test_getting_lowest_semester_of_study_program ( self ) : [EOL] lowest_semester = SemesterFactory ( study_program__display_name = [string] , main_profile__display_name = [string] , number = [number] , ) [EOL] higher_semester = SemesterFactory ( study_program = lowest_semester . study_program , main_profile = lowest_semester . main_profile , number = [number] , ) [EOL] result = Semester . get ( study_program = [string] , main_profile = [string] , ) [EOL] assert lowest_semester == result [EOL] [EOL] @ pytest . mark . django_db def test_alphabetical_reverse_ordering_when_several_lowest_semesters ( self ) : [EOL] alphabetical_first = SemesterFactory ( study_program__display_name = [string] , main_profile__display_name = [string] , number = [number] , ) [EOL] alphabetical_last = SemesterFactory ( study_program = alphabetical_first . study_program , main_profile__display_name = [string] , number = [number] , ) [EOL] result = Semester . get ( study_program = [string] , ) [EOL] assert alphabetical_last == result [EOL] [EOL] @ pytest . mark . django_db def test_case_insensitive_search ( self ) : [EOL] semester = SemesterFactory ( study_program__display_name = [string] , main_profile = None , ) [EOL] result = Semester . get ( study_program = [string] , ) [EOL] assert semester == result [EOL] [EOL] @ pytest . mark . django_db def test_lowest_main_profile_semester ( self ) : [EOL] even_lower_but_wrong = SemesterFactory ( study_program__display_name = [string] , main_profile = None , number = [number] , ) [EOL] lowest_semester = SemesterFactory ( study_program = even_lower_but_wrong . study_program , main_profile__display_name = [string] , number = [number] , ) [EOL] highest = SemesterFactory ( study_program = even_lower_but_wrong . study_program , main_profile = lowest_semester . main_profile , number = [number] , ) [EOL] result = Semester . get ( study_program = [string] , main_profile = [string] , ) [EOL] assert lowest_semester == result [EOL] [EOL] @ pytest . mark . django_db def test_non_existing_semester ( self ) : [EOL] with pytest . raises ( Semester . DoesNotExist ) : [EOL] result = Semester . get ( study_program = [string] , ) [EOL] [EOL] [EOL] class TestCourse : [EOL] @ pytest . mark . django_db def test_creation_of_course_with_many_to_many_field ( self , course ) : [EOL] assert course . display_name == [string] [EOL] assert course . semesters . all ( ) [ [number] ] . number == [number] [EOL] [EOL] @ pytest . mark . django_db def test_capitalize_course_code ( self ) : [EOL] course = CourseFactory . build ( ) [EOL] course . course_code = [string] [EOL] course . save ( ) [EOL] assert course . course_code == [string] [EOL] [EOL] def test_string_representation ( self ) : [EOL] course = Course ( display_name = [string] ) [EOL] assert course . short_name == [string] [EOL] [EOL] course = Course ( full_name = [string] ) [EOL] assert course . short_name == [string] [EOL] [EOL] course = Course ( full_name = [string] ) [EOL] assert course . short_name == [string] [EOL] [EOL] course = Course ( full_name = [string] ) [EOL] assert course . short_name == [string] [EOL] [EOL] def test_course_url_property ( self ) : [EOL] course = CourseFactory . build ( homepage = [string] ) [EOL] assert course . url == [string] [EOL] [EOL] course . homepage = [string] [EOL] course . pk = [number] [EOL] assert course . url == [string] [EOL] [EOL] [EOL] class TestCourseUpload : [EOL] @ pytest . mark . django_db def test_url ( self ) : [EOL] upload = CourseUploadFactory ( course__course_code = [string] ) [EOL] assert upload . url == [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] upload . file . delete ( ) [EOL] [EOL] def test_filename ( self ) : [EOL] upload = CourseUploadFactory . build ( ) [EOL] assert upload . filename == [string] [EOL] [EOL] def test_str_representation ( self ) : [EOL] upload = CourseUploadFactory . build ( ) [EOL] assert str ( upload ) == [string] [EOL] [EOL] upload . display_name = [string] [EOL] assert str ( upload ) == [string] [EOL] [EOL] [EOL] class TestResourceLinkList : [EOL] @ pytest . mark . django_db def test_resource_link_list_factory_with_many_to_many_field ( self , resource_link_list ) : [EOL] assert resource_link_list . full_name == [string] [EOL] assert resource_link_list . study_programs . all ( ) [ [number] ] . display_name == [string] [EOL] [EOL] [EOL] class TestCourseLink : [EOL] @ pytest . mark . django_db def test_basic_properties_of_course_link ( self , course_link ) : [EOL] assert course_link . url == [string] [EOL] [EOL] [EOL] class TestResourceLink : [EOL] @ pytest . mark . django_db def test_resource_link_factory ( self , resource_link ) : [EOL] assert resource_link . url == [string] [EOL] [EOL] [EOL] @ freeze_time ( [string] ) class TestContributor : [EOL] @ pytest . mark . django_db def test_contributor_factory ( self , contributor ) : [EOL] assert type ( contributor . user ) is DataportenUser [EOL] assert contributor . access_level == [number] [EOL] [EOL] @ pytest . mark . django_db def test_dataporten_access ( self , fysmat_user ) : [EOL] [docstring] [EOL] [comment] [EOL] old_taken_course = CourseFactory ( course_code = [string] ) [EOL] assert not old_taken_course . check_access ( fysmat_user ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] active_course = CourseFactory ( full_name = [string] , course_code = [string] , ) [EOL] assert active_course . check_access ( fysmat_user ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] recent_course = CourseFactory ( full_name = [string] , course_code = [string] , ) [EOL] assert active_course . check_access ( fysmat_user ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] non_taken_course = CourseFactory ( full_name = [string] , course_code = [string] , ) [EOL] assert not non_taken_course . check_access ( fysmat_user ) [EOL] [EOL] [EOL] [EOL] class TestOptions : [EOL] @ pytest . mark . django_db def test_options_factory ( self , options ) : [EOL] assert type ( options . user ) is DataportenUser [EOL] [EOL] @ pytest . mark . django_db def test_last_user_modification ( self ) : [EOL] [docstring] [EOL] options = OptionsFactory ( last_user_modification = None ) [EOL] options . save ( ) [EOL] assert options . last_user_modification == None [EOL] [EOL] [EOL] def test_norwegian_slugify ( ) : [EOL] norwegian_phrase = [string] [EOL] instance = Mock ( display_name = norwegian_phrase ) [EOL] [EOL] english_phrase = norwegian_slugify ( instance ) [EOL] assert english_phrase == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $semesterpage.models.Semester$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $semesterpage.models.Semester$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $semesterpage.models.Semester$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $semesterpage.models.Semester$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $semesterpage.models.Semester$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $semesterpage.models.Semester$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $semesterpage.models.Semester$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $semesterpage.models.Semester$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $semesterpage.models.Semester$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $semesterpage.models.Semester$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $semesterpage.models.Semester$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $semesterpage.models.Semester$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $semesterpage.models.Semester$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $semesterpage.models.Course$ 0 0 0 0 0 0 0 0 0 $semesterpage.models.Course$ 0 0 0 0 0 0 $semesterpage.models.Course$ 0 0 0 0 0 0 0 0 0 $semesterpage.models.Course$ 0 0 0 0 0 0 $semesterpage.models.Course$ 0 0 0 0 0 0 0 0 0 $semesterpage.models.Course$ 0 0 0 0 0 0 $semesterpage.models.Course$ 0 0 0 0 0 0 0 0 0 $semesterpage.models.Course$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pytest [EOL] import responses [EOL] [EOL] from dataporten . tests . conftest import dataporten , dataporten_user [EOL] from dataporten . tests . utils import mock_usergroups_request [EOL] from dataporten . models import DataportenGroupManager [EOL] from dataporten . tests . factories import DataportenUserFactory [EOL] from . factories import ( StudyProgramFactory , MainProfileFactory , SemesterFactory , CourseFactory , ResourceLinkListFactory , CourseLinkFactory , ResourceLinkFactory , ContributorFactory , OptionsFactory , ) [EOL] [EOL] @ pytest . fixture def fysmat_user ( dataporten_user , dataporten ) : [EOL] [docstring] [EOL] dataporten_user . dataporten = dataporten [EOL] return dataporten_user [EOL] [EOL] @ pytest . fixture def study_program ( ) : [EOL] return StudyProgramFactory ( ) [EOL] [EOL] @ pytest . fixture def main_profile ( ) : [EOL] return MainProfileFactory ( ) [EOL] [EOL] @ pytest . fixture def semester ( ) : [EOL] return SemesterFactory ( ) [EOL] [EOL] @ pytest . fixture def course ( semester ) : [EOL] return CourseFactory ( semesters = ( semester , ) ) [EOL] [EOL] @ pytest . fixture def resource_link_list ( study_program ) : [EOL] return ResourceLinkListFactory ( study_programs = ( study_program , ) ) [EOL] [EOL] @ pytest . fixture def course_link ( ) : [EOL] return CourseLinkFactory ( ) [EOL] [EOL] @ pytest . fixture def resource_link ( ) : [EOL] return ResourceLinkFactory ( ) [EOL] [EOL] @ pytest . fixture def contributor ( ) : [EOL] return ContributorFactory ( ) [EOL] [EOL] @ pytest . fixture def options ( ) : [EOL] return OptionsFactory ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import unittest [EOL] import datetime [EOL] from unittest . mock import MagicMock [EOL] [EOL] from django . contrib . auth . models import AnonymousUser , User [EOL] [EOL] import pytest [EOL] [EOL] from . factories import CourseFactory , SemesterFactory [EOL] from . . views import ( homepage , profile , remove_course , ) [EOL] from dataporten . tests . factories import DataportenUserFactory [EOL] [EOL] class TestProfileView : [EOL] @ pytest . mark . django_db def test_user_which_should_choose_their_courses ( self , client , settings ) : [EOL] settings . PICK_COURSES_ON_FIRST_LOGIN = True [EOL] [EOL] user = User . objects . create_user ( username = [string] , password = [string] ) [EOL] options_id = user . options . id [EOL] client . login ( username = [string] , password = [string] ) [EOL] response = client . get ( [string] , follow = True ) [EOL] assert response . redirect_chain == [ ( f' [string] { options_id } [string] ' , [number] , ) ] [EOL] [EOL] @ pytest . mark . django_db def test_user_which_has_already_chosen_their_courses ( self , client , settings ) : [EOL] settings . PICK_COURSES_ON_FIRST_LOGIN = True [EOL] [EOL] user = User . objects . create_user ( username = [string] , password = [string] ) [EOL] user . options . last_user_modification = datetime . date . today ( ) [EOL] user . options . save ( ) [EOL] [EOL] client . login ( username = [string] , password = [string] ) [EOL] response = client . get ( [string] , follow = True ) [EOL] assert response . redirect_chain == [ ( [string] , [number] ) ] [EOL] [EOL] @ pytest . mark . django_db def test_not_choosing_courses_based_on_settings ( self , client , settings ) : [EOL] settings . PICK_COURSES_ON_FIRST_LOGIN = False [EOL] user = User . objects . create_user ( username = [string] , password = [string] ) [EOL] [EOL] client . login ( username = [string] , password = [string] ) [EOL] response = client . get ( [string] , follow = True ) [EOL] assert response . redirect_chain == [ ( [string] , [number] ) ] [EOL] [EOL] [EOL] class TestAdminModelHistory : [EOL] @ pytest . mark . django_db def test_non_superuser_being_refused_access ( self , client ) : [EOL] User . objects . create_user ( username = [string] , password = [string] , is_staff = True , ) [EOL] client . login ( username = [string] , password = [string] ) [EOL] response = client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] assert response . url == [string] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_superuser_being_given_history_access ( self , client ) : [EOL] User . objects . create_user ( username = [string] , password = [string] , is_superuser = True , ) [EOL] client . login ( username = [string] , password = [string] ) [EOL] CourseFactory ( pk = [number] ) [EOL] response = client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] class TestHomepageView : [EOL] @ pytest . mark . django_db def test_logged_in_user_visiting_homepage ( self , client ) : [EOL] [docstring] [EOL] User . objects . create_user ( username = [string] , password = [string] , ) [EOL] client . login ( username = [string] , password = [string] ) [EOL] [EOL] response = client . get ( [string] , follow = True ) [EOL] assert response . redirect_chain == [ ( [string] , [number] , ) ] [EOL] [EOL] @ pytest . mark . django_db def test_user_with_old_visit_to_student_page ( self , rf ) : [EOL] [docstring] [EOL] request = MagicMock ( ) [EOL] request . user . is_authenticated = False [EOL] request . session = { [string] : [string] } [EOL] [EOL] response = homepage ( request ) [EOL] assert response . url == [string] [EOL] [EOL] @ pytest . mark . skip ( reason = [string] ) @ pytest . mark . django_db def test_user_with_old_visit_to_semester ( self , rf ) : [EOL] [docstring] [EOL] semester = SemesterFactory ( pk = [number] , study_program__display_name = [string] , main_profile = None , number = [number] , ) [EOL] request = MagicMock ( ) [EOL] request . user . is_authenticated = False [EOL] request . session = { [string] : [number] } [EOL] response = homepage ( request ) [EOL] assert response . url == [string] [EOL] [EOL] class TestRemoveCourseFromStudentPageView : [EOL] @ pytest . mark . django_db def test_course_is_removed ( self ) : [EOL] request = MagicMock ( ) [EOL] request . user . options . get_absolute_url . return_value = [string] [EOL] user = DataportenUserFactory ( ) [EOL] request . user = user [EOL] [EOL] courses = CourseFactory . create_batch ( [number] ) [EOL] request . user . options . self_chosen_courses = courses [EOL] [EOL] response = remove_course ( request , courses [ [number] ] . id ) [EOL] assert list ( request . user . options . self_chosen_courses . all ( ) ) == courses [ [number] : ] [EOL] assert response . url == [string] [EOL] [EOL] @ pytest . mark . django_db def test_removing_course_requires_login ( self , rf ) : [EOL] request = rf . get ( [string] ) [EOL] request . user = AnonymousUser ( ) [EOL] [EOL] response = remove_course ( request , [string] ) [EOL] assert response . status_code == [number] [EOL] assert response . url == [string] [EOL] [EOL] @ pytest . mark . django_db def test_remove_course_which_has_already_been_hidden ( self ) : [EOL] request = MagicMock ( ) [EOL] request . user . options . get_absolute_url . return_value = [string] [EOL] user = DataportenUserFactory ( ) [EOL] request . user = user [EOL] [EOL] courses = CourseFactory . create_batch ( [number] ) [EOL] request . user . options . self_chosen_courses = courses [EOL] [EOL] response = remove_course ( request , [string] ) [EOL] assert list ( request . user . options . self_chosen_courses . all ( ) ) == courses [EOL] assert response . url == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $unittest.mock.MagicMock$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $unittest.mock.MagicMock$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 $unittest.mock.MagicMock$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $unittest.mock.MagicMock$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $unittest.mock.MagicMock$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 $unittest.mock.MagicMock$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $unittest.mock.MagicMock$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] from django . test import TestCase [EOL] from django . urls import resolve , reverse [EOL] [EOL] from . factories import ( CourseFactory , MainProfileFactory , OptionsFactory , SemesterFactory , StudyProgramFactory , ) [EOL] [EOL] [EOL] def test_simple_semester ( ) : [EOL] simple_url = reverse ( [string] , args = [ [string] , [string] ] , ) [EOL] assert simple_url == [string] [EOL] [EOL] resolver = resolve ( [string] ) [EOL] assert resolver . view_name == [string] [EOL] assert resolver . func . __name__ == [string] [EOL] [EOL] kwargs = { [string] : [string] , [string] : [string] , } [EOL] assert resolver . kwargs == kwargs [EOL] [EOL] simple_semester = SemesterFactory . build ( main_profile = None , study_program__slug = [string] , ) [EOL] assert simple_semester . get_absolute_url ( ) == [string] [EOL] [EOL] def test_study_program ( ) : [EOL] study_program_url = reverse ( [string] , args = [ [string] ] , ) [EOL] assert study_program_url == [string] [EOL] [EOL] resolver = resolve ( [string] ) [EOL] assert resolver . view_name == [string] [EOL] assert resolver . func . __name__ == [string] [EOL] [EOL] kwargs = { [string] : [string] , } [EOL] assert resolver . kwargs == kwargs [EOL] [EOL] study_program = StudyProgramFactory . build ( slug = [string] , ) [EOL] assert study_program . get_absolute_url ( ) == [string] [EOL] [EOL] def test_main_profile ( ) : [EOL] main_profile_url = reverse ( [string] , args = [ [string] , [string] ] , ) [EOL] assert main_profile_url == [string] [EOL] [EOL] resolver = resolve ( [string] ) [EOL] assert resolver . view_name == [string] [EOL] assert resolver . func . __name__ == [string] [EOL] [EOL] kwargs = { [string] : [string] , [string] : [string] , } [EOL] assert resolver . kwargs == kwargs [EOL] [EOL] main_profile = MainProfileFactory . build ( slug = [string] , study_program__slug = [string] , ) [EOL] assert main_profile . get_absolute_url ( ) == [string] [EOL] [EOL] def test_semester ( ) : [EOL] semester_url = reverse ( [string] , args = [ [string] , [string] , [string] ] , ) [EOL] assert semester_url == [string] [EOL] [EOL] resolver = resolve ( [string] ) [EOL] assert resolver . view_name == [string] [EOL] assert resolver . func . __name__ == [string] [EOL] [EOL] kwargs = { [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] assert resolver . kwargs == kwargs [EOL] [EOL] semester = SemesterFactory . build ( number = [number] , main_profile__slug = [string] , study_program__slug = [string] , ) [EOL] assert semester . get_absolute_url ( ) == [string] [EOL] [EOL] def test_studentpage ( ) : [EOL] options_url = reverse ( [string] , args = [ [string] ] , ) [EOL] assert options_url == [string] [EOL] [EOL] resolver = resolve ( [string] ) [EOL] assert resolver . view_name == [string] [EOL] assert resolver . func . __name__ == [string] [EOL] [EOL] kwargs = { [string] : [string] } [EOL] assert resolver . kwargs == kwargs [EOL] [EOL] options = OptionsFactory . build ( user__username = [string] , ) [EOL] assert options . get_absolute_url ( ) == [string] [EOL] [EOL] def test_course_history ( ) : [EOL] history_url = reverse ( [string] , args = [ [string] ] , ) [EOL] assert history_url == [string] [EOL] [EOL] resolver = resolve ( [string] ) [EOL] assert resolver . view_name == [string] [EOL] assert resolver . func . __name__ == [string] [EOL] assert resolver . args == ( [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import django [EOL] from django . contrib . auth . models import Group , User [EOL] from django . core . exceptions import ObjectDoesNotExist [EOL] from django . db . models . signals import post_save [EOL] from django . dispatch import receiver [EOL] from django . http import HttpRequest [EOL] [EOL] from allauth . account . signals import user_logged_in [EOL] [EOL] from dataporten . models import DataportenUser [EOL] from semesterpage . adapters import reconcile_dataporten_data [EOL] from semesterpage . apps import create_contributor_groups [EOL] from semesterpage . models import Contributor , Options [EOL] [EOL] [EOL] @ receiver ( post_save , sender = User ) def user_save ( sender , instance , created , raw , ** kwargs ) : [EOL] if raw : [EOL] [comment] [EOL] return [EOL] elif created : [EOL] [comment] [EOL] [comment] [EOL] instance . is_staff = True [EOL] instance . save ( ) [EOL] [EOL] [comment] [EOL] try : [EOL] Group . objects . get ( name = [string] ) . user_set . add ( instance ) [EOL] except Group . DoesNotExist : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] create_contributor_groups ( ) [EOL] Group . objects . get ( name = [string] ) . user_set . add ( instance ) [EOL] [EOL] [comment] [EOL] Contributor . objects . create ( user = instance ) [EOL] Options . objects . create ( user = instance ) [EOL] elif not created : [EOL] set_groups ( instance ) [EOL] [EOL] [EOL] @ receiver ( post_save , sender = Contributor ) def contributor_save ( sender , instance , created , raw , ** kwargs ) : [EOL] [comment] [EOL] [comment] [EOL] if not created and not raw : [EOL] set_groups ( instance . user ) [EOL] [EOL] [EOL] def set_groups ( user ) : [EOL] [docstring] [EOL] try : [EOL] user . contributor [EOL] except ObjectDoesNotExist : [EOL] [comment] [EOL] return [EOL] [EOL] students = Group . objects . get ( name = [string] ) [EOL] course_contributors = Group . objects . get ( name = [string] ) [EOL] semester_contributors = Group . objects . get ( name = [string] ) [EOL] mainprofile_contributors = Group . objects . get ( name = [string] ) [EOL] studyprogram_contributors = Group . objects . get ( name = [string] ) [EOL] [EOL] contributor_groups = [ students , course_contributors , semester_contributors , mainprofile_contributors , studyprogram_contributors ] [EOL] [EOL] [comment] [EOL] for group in contributor_groups [ : user . contributor . access_level + [number] ] : [EOL] group . user_set . add ( user ) [EOL] for group in contributor_groups [ user . contributor . access_level + [number] : ] : [EOL] group . user_set . remove ( user ) [EOL] [EOL] @ receiver ( user_logged_in ) def dataporten_sync_at_login ( request , user , ** kwargs ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] user . __class__ = DataportenUser [EOL] reconcile_dataporten_data ( user ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations , models [EOL] import semesterpage . models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , migrations . RemoveField ( model_name = [string] , name = [string] , ) , migrations . AddField ( model_name = [string] , name = [string] , field = models . ImageField ( blank = True , help_text = [string] , null = True , upload_to = semesterpage . models . upload_path , verbose_name = [string] ) , ) , migrations . AddField ( model_name = [string] , name = [string] , field = models . FileField ( blank = True , null = True , upload_to = semesterpage . models . upload_path ) , ) , migrations . AddField ( model_name = [string] , name = [string] , field = models . ImageField ( blank = True , help_text = [string] , null = True , upload_to = semesterpage . models . upload_path , verbose_name = [string] ) , ) , migrations . AddField ( model_name = [string] , name = [string] , field = models . FileField ( blank = True , null = True , upload_to = semesterpage . models . upload_path ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] import autoslug . fields [EOL] from django . db import migrations [EOL] import semesterpage . models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterField ( model_name = [string] , name = [string] , field = autoslug . fields . AutoSlugField ( always_update = True , editable = False , populate_from = semesterpage . models . norwegian_slugify , unique_with = ( [string] , ) ) , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = autoslug . fields . AutoSlugField ( always_update = True , editable = False , populate_from = semesterpage . models . norwegian_slugify , unique = True ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import List , Tuple , Any [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] [EOL] def set_admin_theme ( apps , schema_editor ) : [EOL] [docstring] [EOL] Theme = apps . get_model ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] kokekunster_theme , _ = Theme . objects . get_or_create ( pk = [number] ) [EOL] [EOL] [comment] [EOL] white = [string] [EOL] dark_grey = [string] [EOL] darker_grey = [string] [EOL] grey = [string] [EOL] bright_grey = [string] [comment] [EOL] red = [string] [EOL] dark_red = [string] [EOL] [EOL] [comment] [EOL] kokekunster_theme . name = [string] [EOL] [EOL] kokekunster_theme . title = [string] [EOL] [EOL] kokekunster_theme . logo = [string] [EOL] [EOL] kokekunster_theme . css_header_background_color = darker_grey [EOL] kokekunster_theme . css_header_title_color = white [EOL] kokekunster_theme . css_header_text_color = bright_grey [EOL] kokekunster_theme . css_header_link_color = white [EOL] kokekunster_theme . css_header_link_hover_color = bright_grey [EOL] [EOL] kokekunster_theme . css_module_background_color = grey [EOL] kokekunster_theme . css_module_text_color = white [EOL] kokekunster_theme . css_module_link_color = white [EOL] kokekunster_theme . css_module_link_hover_color = bright_grey [EOL] kokekunster_theme . css_module_rounded_corners = False [EOL] [EOL] kokekunster_theme . css_generic_link_color = dark_grey [EOL] kokekunster_theme . css_generic_link_hover_color = bright_grey [EOL] [EOL] kokekunster_theme . css_save_button_background_color = dark_grey [EOL] kokekunster_theme . css_save_button_background_hover_color = grey [EOL] kokekunster_theme . css_save_button_text_color = white [EOL] [EOL] kokekunster_theme . css_delete_button_background_color = red [EOL] kokekunster_theme . css_delete_button_background_hover_color = dark_red [EOL] kokekunster_theme . css_delete_button_text_color = white [EOL] [EOL] kokekunster_theme . css = [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] \ [EOL] [EOL] [EOL] [EOL] [comment] [EOL] kokekunster_theme . save ( ) [EOL] [EOL] def set_site ( apps , schema_editor ) : [EOL] Site = apps . get_model ( [string] , [string] ) [EOL] default_site , _ = Site . objects . get_or_create ( pk = [number] ) [EOL] default_site . name = [string] [EOL] default_site . domain = [string] [EOL] default_site . save ( ) [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RunPython ( set_admin_theme ) , migrations . RunPython ( set_site ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] import autoslug . fields [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = autoslug . fields . AutoSlugField ( always_update = True , blank = True , editable = False , null = True , populate_from = [string] , unique = True ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] import autoslug . fields [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterField ( model_name = [string] , name = [string] , field = autoslug . fields . AutoSlugField ( always_update = True , editable = False , populate_from = [string] , unique_with = ( [string] , ) ) , ) , migrations . AlterField ( model_name = [string] , name = [string] , field = autoslug . fields . AutoSlugField ( always_update = True , editable = False , populate_from = [string] , unique = True ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] import os [EOL] [EOL] from django . conf import settings [EOL] from django . conf . urls import include , url [EOL] from django . conf . urls . static import static [EOL] [EOL] urlpatterns = [ url ( [string] , include ( [string] ) ) , url ( [string] , include ( [string] , namespace = [string] ) ) , url ( [string] , include ( [string] , namespace = [string] ) , { [string] : True } , ) , url ( [string] , include ( [string] ) ) , ] [EOL] [EOL] if not os . environ . get ( [string] , False ) : [EOL] urlpatterns += static ( settings . MEDIA_URL , document_root = settings . MEDIA_ROOT ) [EOL] [EOL] if settings . DEBUG : [EOL] import debug_toolbar [EOL] urlpatterns = [ url ( [string] , include ( debug_toolbar . urls ) ) , ] + urlpatterns [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0
from typing import Type [EOL] import typing [EOL] import kokekunster [EOL] from django . conf import settings [EOL] from django . core import management [EOL] from django_cron import CronJobBase , Schedule [EOL] [EOL] [EOL] class Backup ( CronJobBase ) : [EOL] [docstring] [EOL] RUN_AT_TIMES = getattr ( settings , [string] , [ [string] ] ) [EOL] schedule = Schedule ( run_at_times = RUN_AT_TIMES ) [EOL] code = [string] [comment] [EOL] [EOL] def do ( self ) : [EOL] management . call_command ( [string] ) [EOL] management . call_command ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[kokekunster.cronjobs.Backup]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[kokekunster.cronjobs.Backup]$ 0 0 0 0 0 $typing.Type[kokekunster.cronjobs.Backup]$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Tuple , List [EOL] import typing [EOL] import os [EOL] [EOL] from kokekunster . settings import BASE_DIR [EOL] [EOL] [comment] [EOL] [EOL] DEBUG = True [EOL] [EOL] ALLOWED_HOSTS = [ [string] ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] SECRET_KEY = [string] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] DATABASES = { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } } [EOL] [EOL] [EOL] [comment] [EOL] [EOL] EMAIL_BACKEND = [string] [EOL] [EOL] EMAIL_FILE_PATH = os . path . join ( BASE_DIR , [string] , [string] ) [EOL] [EOL] ADMINS = ( ( [string] , [string] ) , ( [string] , [string] ) , ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] MEDIA_ROOT = os . path . join ( BASE_DIR , [string] ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] DBBACKUP_STORAGE = [string] [EOL] DBBACKUP_STORAGE_OPTIONS = { [string] : os . path . join ( BASE_DIR , [string] ) , } [EOL] [EOL] [comment] [EOL] SITE_ID = [number] [EOL] [EOL] [comment] [EOL] INTERNAL_IPS = ( [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str],typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0
	0
import builtins [EOL] import django [EOL] from django . contrib . auth . models import User [EOL] [EOL] from allauth . socialaccount . models import SocialToken [EOL] [EOL] [EOL] def allauth_token ( user ) : [EOL] return SocialToken . objects . get ( account__user = user , account__provider = [string] , ) . token [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Tuple , List , Any [EOL] import typing [EOL] import os [EOL] import raven [EOL] [EOL] [comment] [EOL] [EOL] DEBUG = False [EOL] [EOL] ALLOWED_HOSTS = os . environ [ [string] ] . split ( [string] ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] SECRET_KEY = os . environ [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] DATABASES = { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } } [EOL] [EOL] [comment] [EOL] [EOL] MEDIA_ROOT = os . environ [ [string] ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] STATIC_ROOT = os . environ [ [string] ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] EMAIL_BACKEND = [string] [EOL] [EOL] ADMINS = ( ( os . environ [ [string] ] , os . environ [ [string] ] ) , ) [EOL] [EOL] [comment] [EOL] DBBACKUP_STORAGE = [string] [EOL] DBBACKUP_STORAGE_OPTIONS = { [string] : os . path . join ( os . path . dirname ( os . pardir ) , [string] ) , } [EOL] BACKUP_TIMES = [ [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] RAVEN_CONFIG = { [string] : os . environ [ [string] ] , [string] : raven . fetch_git_sha ( os . path . dirname ( os . pardir ) ) , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict [EOL] import typing [EOL] from . settings import * [EOL] [EOL] [comment] [EOL] DATABASES = { [string] : { [string] : [string] , [string] : [string] , } } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pytest [EOL] [EOL] from dataporten . tests . factories import DataportenUserFactory [EOL] [EOL] [EOL] @ pytest . fixture @ pytest . mark . django_db def dataporten_user ( ) : [EOL] return DataportenUserFactory ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pytest [EOL] [EOL] @ pytest . mark . django_db def test_dataporten_user_token ( dataporten_user ) : [EOL] assert dataporten_user . token == [string]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . shortcuts import render [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class DataportenConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Dict , List , Any [EOL] import typing [EOL] import builtins [EOL] import requests [EOL] [docstring] [EOL] from typing import Any , Dict , List , Optional [EOL] [EOL] import requests [EOL] from mypy_extensions import TypedDict [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] class MembershipJSONBase ( TypedDict ) : [EOL] basic = ... [comment] [EOL] displayName = ... [EOL] fsroles = ... [EOL] [EOL] [EOL] [comment] [EOL] class MembershipJSON ( MembershipJSONBase , total = False ) : [EOL] active = ... [EOL] notAfter = ... [EOL] subjectRelations = ... [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] class GroupJSONBase ( TypedDict ) : [EOL] displayName = ... [EOL] parent = ... [EOL] url = ... [EOL] id = ... [EOL] type = ... [EOL] [EOL] [EOL] [comment] [EOL] class GroupJSON ( GroupJSONBase , total = False ) : [EOL] membership = ... [EOL] [EOL] [EOL] def userinfo ( token ) : [EOL] USERINFO_URL = [string] [EOL] [EOL] [comment] [EOL] headers = { [string] : [string] + token } [EOL] [EOL] [comment] [EOL] [comment] [EOL] userinfo_response = requests . get ( USERINFO_URL , headers = headers , ) [EOL] [comment] [EOL] userinfo_response . raise_for_status ( ) [EOL] [EOL] [comment] [EOL] return userinfo_response . json ( ) [ [string] ] [EOL] [EOL] [EOL] def usergroups ( token ) : [EOL] GROUPS_URL = [string] [EOL] [EOL] [comment] [EOL] headers = { [string] : [string] + token } [EOL] [EOL] [comment] [EOL] [comment] [EOL] groups_data = requests . get ( GROUPS_URL + [string] , headers = headers , ) [EOL] [comment] [EOL] groups_data . raise_for_status ( ) [EOL] [EOL] [comment] [EOL] return groups_data . json ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $MembershipJSON$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[GroupJSON]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
	0
import django [EOL] import requests_cache [EOL] from django . conf import settings [EOL] from django . http import HttpRequest [EOL] [EOL] from . models import DataportenUser [EOL] [EOL] [comment] [EOL] if settings . DATAPORTEN_CACHE_REQUESTS : [EOL] requests_cache . install_cache ( settings . DATAPORTEN_CACHE_PATH + [string] , backend = [string] , expire_after = [number] , allowable_codes = ( [number] , ) , include_get_headers = True , ) [EOL] [EOL] [EOL] class DataportenGroupsMiddleware ( object ) : [EOL] def __init__ ( self , get_response ) : [EOL] self . get_response = get_response [EOL] [EOL] def __call__ ( self , request ) : [EOL] return self . get_response ( request ) [EOL] [EOL] def process_view ( self , request , * args , ** kwargs ) : [EOL] if DataportenUser . valid_request ( request ) : [EOL] request . user . __class__ = DataportenUser [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.http.HttpRequest$ 0 0 0 0 0 0 0 0 $django.http.HttpRequest$ 0 0 0 0 0 0 0 0 $django.http.HttpRequest$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.http.HttpRequest$ 0 0 0 $django.http.HttpRequest$ 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from allauth . socialaccount . providers . oauth2 . urls import default_urlpatterns [EOL] [EOL] from . provider import DataportenProvider [EOL] [EOL] urlpatterns = default_urlpatterns ( DataportenProvider ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
	0
from typing import Dict , Type , Any [EOL] import typing [EOL] import dataporten [EOL] import requests [EOL] import requests [EOL] from allauth . socialaccount . providers . base import ProviderException [EOL] from allauth . socialaccount . providers . oauth2 . views import OAuth2Adapter , OAuth2CallbackView , OAuth2LoginView [EOL] [EOL] from . provider import DataportenProvider [EOL] [EOL] [EOL] class DataportenAdapter ( OAuth2Adapter ) : [EOL] provider_id = DataportenProvider . id [EOL] access_token_url = [string] [EOL] authorize_url = [string] [EOL] profile_url = [string] [EOL] groups_url = [string] [EOL] [EOL] def complete_login ( self , request , app , token , ** kwargs ) : [EOL] [docstring] [EOL] [comment] [EOL] headers = { [string] : [string] + token . token } [EOL] [EOL] [comment] [EOL] [comment] [EOL] userinfo_response = requests . get ( self . profile_url , headers = headers , ) [EOL] [comment] [EOL] userinfo_response . raise_for_status ( ) [EOL] [EOL] [comment] [EOL] extra_data = userinfo_response . json ( ) [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if userinfo_response . json ( ) [ [string] ] != app . client_id : [EOL] raise ProviderException ( [string] ) [EOL] [EOL] return self . get_provider ( ) . sociallogin_from_response ( request , extra_data , ) [EOL] [EOL] [EOL] oauth2_login = OAuth2LoginView . adapter_view ( DataportenAdapter ) [EOL] oauth2_callback = OAuth2CallbackView . adapter_view ( DataportenAdapter ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dataporten.oauth2.views.DataportenAdapter]$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
	0
from typing import Dict , List , Any [EOL] import typing [EOL] from django . contrib . auth . models import AnonymousUser [EOL] [EOL] import pytest [EOL] import responses [EOL] from django . core . exceptions import ImproperlyConfigured [EOL] from freezegun import freeze_time [EOL] [EOL] from . utils import mock_usergroups_request [EOL] from . . models import ( DataportenGroupManager , CourseManager , DataportenUser , ) [EOL] [EOL] [EOL] @ freeze_time ( [string] ) class TestDataportenGroupManager : [EOL] def test_dataporten_courses ( self , dataporten ) : [EOL] [comment] [EOL] assert [string] in dataporten . courses . finished [EOL] assert [string] in dataporten . courses . all [EOL] assert [string] not in dataporten . courses . active [EOL] [EOL] [comment] [EOL] assert [string] not in dataporten . courses . finished [EOL] assert [string] in dataporten . courses . all [EOL] assert [string] in dataporten . courses . active [EOL] [EOL] [comment] [EOL] assert [string] not in dataporten . courses . finished [EOL] assert [string] in dataporten . courses . all [EOL] assert [string] in dataporten . courses . active [EOL] [EOL] def test_dataporten_study_program ( self , dataporten ) : [EOL] assert dataporten . study_programs [ [string] ] . code == [string] [EOL] [EOL] def test_dataporten_main_profile ( self , dataporten ) : [EOL] assert dataporten . main_profiles [ [string] ] . code == [string] [EOL] [EOL] def test_dataporten_organisation_units ( self , dataporten ) : [EOL] assert dataporten . organisation_units [ [string] ] . uid == [string] [EOL] [EOL] assert dataporten . organisation_units [ [string] ] . uid == [string] [EOL] [EOL] [EOL] @ freeze_time ( [string] ) class TestCourseManager : [EOL] def test_less_semesters_ago ( self , finished_course , course_last_semester , ongoing_course ) : [EOL] _courses = [ finished_course , course_last_semester , ongoing_course , ] [EOL] courses = { course . uid : course for course in _courses } [EOL] course_manager = CourseManager ( courses ) [EOL] [EOL] assert course_manager . less_semesters_ago ( than = [number] ) == [ ongoing_course . code ] [EOL] [EOL] assert course_manager . less_semesters_ago ( than = [number] ) == [ course_last_semester . code , ongoing_course . code ] [EOL] [EOL] assert course_manager . less_semesters_ago ( than = [number] ) == [ finished_course . code , course_last_semester . code , ongoing_course . code ] [EOL] [EOL] @ freeze_time ( [string] ) def test_semester_in_future ( self , ongoing_course ) : [EOL] [docstring] [EOL] course_manager = CourseManager ( { ongoing_course . uid : ongoing_course } ) [EOL] assert ongoing_course . code in course_manager . active [EOL] [EOL] [EOL] def token_import_function ( user ) : [EOL] return [string] [EOL] [EOL] [EOL] class TestTokenImport : [EOL] @ pytest . mark . django_db def test_token_not_configured ( self , settings , dataporten_user ) : [EOL] try : [EOL] del settings . DATAPORTEN_TOKEN_FUNCTION [EOL] except AttributeError : [EOL] pass [EOL] [EOL] with pytest . raises ( ImproperlyConfigured ) as excinfo : [EOL] dataporten_user . token [EOL] assert str ( excinfo . value ) == [string] [string] [EOL] [EOL] @ pytest . mark . django_db def test_token_unimportable_path ( self , settings , dataporten_user ) : [EOL] settings . DATAPORTEN_TOKEN_FUNCTION = [string] [EOL] [EOL] with pytest . raises ( ImproperlyConfigured ) as excinfo : [EOL] dataporten_user . token [EOL] assert str ( excinfo . value ) == [string] [string] [EOL] [EOL] @ pytest . mark . django_db def test_token_properly_configured ( self , settings , dataporten_user ) : [EOL] settings . DATAPORTEN_TOKEN_FUNCTION = [string] [EOL] [EOL] assert dataporten_user . token == [string] [EOL] [EOL] [EOL] @ pytest . mark . django_db @ responses . activate def test_dataporten_user_groups ( dataporten_user ) : [EOL] group_json = mock_usergroups_request ( ) [EOL] groups = dataporten_user . dataporten [EOL] assert isinstance ( groups , DataportenGroupManager ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_dataporten_user_validation ( rf , django_user_model , dataporten_user ) : [EOL] [comment] [EOL] request = rf . get ( [string] ) [EOL] [EOL] request . user = AnonymousUser ( ) [EOL] assert DataportenUser . valid_request ( request ) == False [EOL] [EOL] request . user = django_user_model ( ) [EOL] assert DataportenUser . valid_request ( request ) == False [EOL] [EOL] request . user = dataporten_user [EOL] assert DataportenUser . valid_request ( request ) == True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 $typing.Any$ 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import dataporten [EOL] from django . contrib . auth . models import AnonymousUser , User [EOL] [EOL] import pytest [EOL] [EOL] from . . middleware import DataportenGroupsMiddleware [EOL] from . . models import DataportenUser [EOL] [EOL] [EOL] def test_dataporten_middleware_with_anonymous_user ( rf ) : [EOL] request = rf . get ( [string] ) [EOL] dpm = DataportenGroupsMiddleware ( None ) [EOL] [EOL] request . user = AnonymousUser ( ) [EOL] dpm . process_view ( request ) [EOL] assert type ( request . user ) is AnonymousUser [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_dataporten_middleware_with_plain_django_user ( rf , django_user_model ) : [EOL] request = rf . get ( [string] ) [EOL] dpm = DataportenGroupsMiddleware ( None ) [EOL] [EOL] request . user = django_user_model ( ) [EOL] dpm . process_view ( request ) [EOL] assert type ( request . user ) is User [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_dataporten_middleware_with_user_with_dataporten_credentials ( rf , user_with_dataporten_token ) : [EOL] request = rf . get ( [string] ) [EOL] dpm = DataportenGroupsMiddleware ( None ) [EOL] [EOL] request . user = user_with_dataporten_token [EOL] dpm . process_view ( request ) [EOL] assert type ( request . user ) is DataportenUser [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] from django . contrib . auth . models import User [EOL] import pytest [EOL] import responses [EOL] [EOL] from . factories import DataportenUserFactory [EOL] from . utils import mock_usergroups_request , mock_userinfo_request [EOL] from . . models import DataportenGroupManager [EOL] from . . parsers import Course [EOL] [EOL] [EOL] @ pytest . fixture @ responses . activate def dataporten ( ) : [EOL] mock_usergroups_request ( ) [EOL] mock_userinfo_request ( ) [EOL] return DataportenGroupManager ( [string] ) [EOL] [EOL] [EOL] @ pytest . fixture @ pytest . mark . django_db def dataporten_user ( ) : [EOL] return DataportenUserFactory ( ) [EOL] [EOL] [EOL] @ pytest . fixture @ pytest . mark . django_db def user_with_dataporten_token ( ) : [EOL] [docstring] [EOL] dp_user = DataportenUserFactory ( ) [EOL] dp_user . __class__ = User [EOL] return dp_user [EOL] [EOL] [EOL] [comment] [EOL] @ pytest . fixture def study_program_json ( ) : [EOL] return { [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : True , [string] : [ [string] ] } , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] [EOL] @ pytest . fixture def course_json ( ) : [EOL] return { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : True , [string] : [ [string] ] , [string] : [string] , [string] : [string] } , [string] : [string] } [EOL] [EOL] [EOL] @ pytest . fixture def main_profile_json ( ) : [EOL] return { [string] : [string] , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [ [string] ] , [string] : [string] , [string] : True } , [string] : [string] } [EOL] [EOL] [EOL] @ pytest . fixture def organisation_unit_json ( ) : [EOL] return { [string] : [string] , [string] : [string] , [string] : True , [string] : [string] , [string] : [string] , [string] : { [string] : True , [string] : [string] } } [EOL] [EOL] [EOL] @ pytest . fixture def finished_course ( ) : [EOL] return Course ( { [string] : [string] , [string] : { [string] : [string] , [string] : True , [string] : [string] , [string] : [string] , [string] : [ [string] ] , [string] : [string] } , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } ) [EOL] [EOL] [EOL] @ pytest . fixture def non_finished_course ( ) : [EOL] return Course ( { [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : True , [string] : [ [string] ] } , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } ) [EOL] [EOL] [EOL] @ pytest . fixture def ongoing_course ( ) : [EOL] return Course ( { [string] : [string] , [string] : { [string] : [string] , [string] : True , [string] : [string] , [string] : [string] , [string] : [ [string] ] , [string] : [string] } , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } ) [EOL] [EOL] [EOL] @ pytest . fixture def course_last_semester ( ) : [EOL] return Course ( { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : True , [string] : [ [string] ] , [string] : [string] , [string] : [string] } , [string] : [string] } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , List , Any [EOL] import typing [EOL] import builtins [EOL] import json [EOL] from typing import Any , Dict , List [EOL] [EOL] import responses [EOL] [EOL] [EOL] def mock_userinfo_request ( ) : [EOL] [docstring] [EOL] with open ( [string] ) as userinfo_file : [EOL] userinfo_dump = json . load ( userinfo_file ) [EOL] [EOL] responses . add ( responses . GET , [string] , json = userinfo_dump , status = [number] , ) [EOL] [EOL] return userinfo_dump [EOL] [EOL] [EOL] def mock_usergroups_request ( ) : [EOL] [docstring] [EOL] with open ( [string] ) as groups_file : [EOL] groups_dump = json . load ( groups_file ) [EOL] [EOL] responses . add ( responses . GET , [string] , json = groups_dump , status = [number] , ) [EOL] [EOL] return groups_dump [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[typing.Any,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0