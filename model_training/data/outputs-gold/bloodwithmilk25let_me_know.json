	0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import re_path , include [EOL] [EOL] urlpatterns = [ re_path ( [string] , include ( [string] ) ) , re_path ( [string] , include ( [string] ) ) , re_path ( [string] , include ( [string] ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment]	0
from typing import Type , Any , Tuple [EOL] import user [EOL] import typing [EOL] from django import forms [EOL] from django . contrib . auth . forms import AuthenticationForm , ReadOnlyPasswordHashField [EOL] from django . contrib . auth . forms import UserCreationForm [EOL] from django . utils . translation import gettext_lazy as _ [EOL] [EOL] from . models import User [EOL] [EOL] [EOL] class CustomUserCreationForm ( UserCreationForm ) : [EOL] class Meta ( UserCreationForm ) : [EOL] model = User [EOL] fields = ( [string] , ) [EOL] [EOL] [EOL] class UserChangeForm ( forms . ModelForm ) : [EOL] [docstring] [EOL] password = ReadOnlyPasswordHashField ( label = _ ( [string] ) , help_text = _ ( [string] [string] [string] ) , ) [EOL] [EOL] class Meta : [EOL] model = User [EOL] fields = [string] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] password = self . fields . get ( [string] ) [EOL] [EOL] if password : [EOL] password . help_text = password . help_text . format ( [string] ) [EOL] user_permissions = self . fields . get ( [string] ) [EOL] if user_permissions : [EOL] user_permissions . queryset = user_permissions . queryset . select_related ( [string] ) [EOL] [EOL] def clean_password ( self ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] return self . initial [ [string] ] [EOL] [EOL] [EOL] class UserUpdateForm ( forms . ModelForm ) : [EOL] [EOL] class Meta : [EOL] model = User [EOL] fields = ( [string] , [string] , [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[user.models.User]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[user.forms.UserChangeForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[user.models.User]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[user.models.User]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any , Tuple [EOL] import user [EOL] import typing [EOL] from rest_auth . serializers import UserDetailsSerializer , LoginSerializer , TokenSerializer [EOL] from rest_auth . registration . serializers import RegisterSerializer [EOL] from rest_auth . models import TokenModel [EOL] from rest_framework import serializers [EOL] [EOL] from . models import User [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] class CustomLoginSerializer ( LoginSerializer ) : [EOL] def get_fields ( self ) : [EOL] fields = super ( ) . get_fields ( ) [EOL] del fields [ [string] ] [EOL] return fields [EOL] [EOL] [EOL] class CustomRegisterSerializer ( RegisterSerializer ) : [EOL] def get_fields ( self ) : [EOL] fields = super ( ) . get_fields ( ) [EOL] del fields [ [string] ] [EOL] return fields [EOL] [EOL] [EOL] class CustomUserDetailsSerializer ( UserDetailsSerializer ) : [EOL] [comment] [EOL] [EOL] class Meta : [EOL] model = User [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] read_only_fields = ( [string] , [string] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] class CustomTokenSerializer ( TokenSerializer ) : [EOL] [docstring] [EOL] user = CustomUserDetailsSerializer ( many = False , read_only = True ) [EOL] [EOL] class Meta : [EOL] model = TokenModel [EOL] fields = ( [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[user.serializers.CustomTokenSerializer.Meta]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $CustomTokenSerializer.user.serializers.CustomUserDetailsSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[user.serializers.CustomTokenSerializer.Meta]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0
from allauth . account . adapter import DefaultAccountAdapter [EOL] from allauth . socialaccount . adapter import DefaultSocialAccountAdapter [EOL] [EOL] [EOL] [comment] [EOL] class SocialAccountAdapter ( DefaultSocialAccountAdapter ) : [EOL] def save_user ( self , request , sociallogin , form = None ) : [EOL] u = sociallogin . user [EOL] u . is_verified = True [EOL] super ( ) . save_user ( request , sociallogin , form ) [EOL] [EOL] def get_connect_redirect_url ( self , request , socialaccount ) : [EOL] [docstring] [EOL] assert request . user . is_authenticated [EOL] return [string] [EOL] [EOL] [EOL] class AccountAdapter ( DefaultAccountAdapter ) : [EOL] def get_login_redirect_url ( self , request ) : [EOL] return [string] [EOL] [EOL] def get_email_confirmation_redirect_url ( self , request ) : [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class UserConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Type , Any , List [EOL] import notifications [EOL] import datetime [EOL] import typing [EOL] from django . db import models [EOL] from django . db . models import signals [EOL] from django . contrib . auth import get_user_model [EOL] from django . core . exceptions import ValidationError [EOL] from letmeknow . celery import app [EOL] from datetime import datetime , timezone [EOL] [EOL] [EOL] def in_future ( value ) : [EOL] current_time = datetime . now ( tz = timezone . utc ) [EOL] if value < current_time : [EOL] raise ValidationError ( [string] ) [EOL] [EOL] [EOL] class Notification ( models . Model ) : [EOL] title = models . CharField ( max_length = [number] , blank = True ) [EOL] content = models . TextField ( blank = True ) [EOL] user = models . ForeignKey ( get_user_model ( ) , related_name = [string] , on_delete = models . CASCADE ) [EOL] notify_on = models . DateTimeField ( validators = [ in_future ] ) [EOL] celery_task_id = models . CharField ( max_length = [number] , blank = True ) [EOL] [EOL] date_created = models . DateTimeField ( auto_now_add = True ) [EOL] last_modified = models . DateTimeField ( auto_now = True ) [EOL] sent = models . BooleanField ( default = False , editable = False ) [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . title if self . title else self . content [ : [number] ] [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [comment] [EOL] try : [EOL] pre_notify_on = Notification . objects . get ( pk = self . id ) . notify_on [EOL] except Notification . DoesNotExist : [EOL] pass [EOL] [EOL] super ( ) . save ( * args , ** kwargs ) [EOL] post_notify_on = self . notify_on [EOL] [EOL] from . tasks import send_notification [EOL] if not self . celery_task_id : [comment] [EOL] task_object = send_notification . apply_async ( ( self . id , ) , eta = self . notify_on ) [EOL] Notification . objects . filter ( pk = self . id ) . update ( celery_task_id = task_object . id ) [EOL] [EOL] [comment] [EOL] elif pre_notify_on != post_notify_on : [EOL] [comment] [EOL] app . control . revoke ( self . celery_task_id , terminate = True ) [EOL] [comment] [EOL] task_object = send_notification . apply_async ( ( self . id , ) , eta = self . notify_on ) [EOL] Notification . objects . filter ( pk = self . id ) . update ( celery_task_id = task_object . id ) [EOL] [EOL] [EOL] def delete_task ( instance , * args , ** kwargs ) : [EOL] app . control . revoke ( instance . celery_task_id , terminate = True ) [EOL] [EOL] [EOL] signals . post_delete . connect ( delete_task , sender = Notification ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[notifications.models.Notification]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[notifications.models.Notification]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[notifications.models.Notification]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[notifications.models.Notification]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[notifications.models.Notification]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[notifications.models.Notification]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[notifications.models.Notification]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[notifications.models.Notification]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type , Tuple [EOL] import notifications [EOL] import typing [EOL] from rest_framework import serializers [EOL] [EOL] from . models import Notification [EOL] [EOL] [EOL] class NotificationSerializer ( serializers . ModelSerializer ) : [EOL] [comment] [EOL] [EOL] class Meta : [EOL] model = Notification [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[notifications.models.Notification]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any , Tuple [EOL] import notifications [EOL] import typing [EOL] from rest_framework import generics [EOL] from rest_framework . response import Response [EOL] from rest_framework import status [EOL] from django . views . decorators . cache import cache_page [EOL] [EOL] from . models import Notification [EOL] from . serializers import NotificationSerializer [EOL] from . permissions import IsOwner [EOL] [EOL] [EOL] class NotificationsListView ( generics . ListAPIView ) : [EOL] [docstring] [EOL] serializer_class = NotificationSerializer [EOL] [EOL] def get_queryset ( self ) : [EOL] user = self . request . user [EOL] return user . notifications . all ( ) [EOL] [EOL] def post ( self , request , * args , ** kwargs ) : [EOL] serializer = NotificationSerializer ( data = request . data ) [EOL] if serializer . is_valid ( ) : [EOL] [comment] [EOL] new_ntfc_user_id = serializer . validated_data [ [string] ] . id [EOL] if new_ntfc_user_id == self . request . user . id : [EOL] serializer . save ( ) [EOL] return Response ( serializer . data , status = status . HTTP_201_CREATED ) [EOL] return Response ( serializer . errors , status = status . HTTP_400_BAD_REQUEST ) [EOL] [EOL] [EOL] class NotificationDetailView ( generics . RetrieveUpdateDestroyAPIView ) : [EOL] [docstring] [EOL] queryset = Notification . objects . all ( ) . select_related ( [string] ) [EOL] serializer_class = NotificationSerializer [EOL] permission_classes = ( IsOwner , ) [EOL] [EOL] def get ( self , request , * args , ** kwargs ) : [EOL] return super ( ) . get ( request , * args , ** kwargs ) [EOL] [EOL] def patch ( self , request , * args , ** kwargs ) : [EOL] notification = Notification . objects . get ( pk = kwargs [ [string] ] ) [EOL] serializer = NotificationSerializer ( notification , data = request . data , partial = True ) [EOL] if serializer . is_valid ( ) : [EOL] [comment] [EOL] new_ntfc_user_id = serializer . validated_data [ [string] ] . id [EOL] if new_ntfc_user_id == self . request . user . id : [EOL] serializer . save ( ) [EOL] return Response ( serializer . data , status = status . HTTP_201_CREATED ) [EOL] return Response ( serializer . errors , status = status . HTTP_400_BAD_REQUEST ) [EOL] [EOL] def put ( self , request , * args , ** kwargs ) : [EOL] return Response ( status = status . HTTP_405_METHOD_NOT_ALLOWED ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[notifications.serializers.NotificationSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $notifications.serializers.NotificationSerializer$ 0 0 0 0 0 0 0 0 0 0 0 $notifications.serializers.NotificationSerializer$ 0 0 0 0 0 0 0 0 0 0 $notifications.serializers.NotificationSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $notifications.serializers.NotificationSerializer$ 0 0 0 0 0 0 0 0 $notifications.serializers.NotificationSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $notifications.serializers.NotificationSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[notifications.views.NotificationDetailView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[notifications.serializers.NotificationSerializer]$ 0 0 0 $typing.Tuple[typing.Type[notifications.permissions.IsOwner]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $notifications.serializers.NotificationSerializer$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $notifications.serializers.NotificationSerializer$ 0 0 0 0 0 0 0 0 0 0 $notifications.serializers.NotificationSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $notifications.serializers.NotificationSerializer$ 0 0 0 0 0 0 0 0 $notifications.serializers.NotificationSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $notifications.serializers.NotificationSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class UserConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Any [EOL] import typing [EOL] import logging [EOL] from letmeknow . celery import app [EOL] from django . core . mail import send_mail [EOL] from django . template . loader import render_to_string [EOL] from . models import Notification [EOL] [EOL] [EOL] @ app . task def send_notification ( notf_id ) : [EOL] try : [EOL] notification = Notification . objects . select_related ( [string] ) . get ( id = notf_id ) [EOL] email = notification . user . email [EOL] [EOL] if not notification . sent : [EOL] mail_subject = notification . title [EOL] message = render_to_string ( [string] , { [string] : notification . title , [string] : notification . content } ) [EOL] [EOL] try : [EOL] send_mail ( mail_subject , message , recipient_list = [ email ] , from_email = None ) [EOL] Notification . objects . filter ( id = notf_id ) . update ( sent = True ) [EOL] return [string] [EOL] [EOL] except Exception as e : [EOL] logging . warning ( f"{ e } [string] { email }" ) [EOL] [EOL] logging . warning ( f" [string] { notification . id } [string] { email }" ) [EOL] [EOL] except Notification . DoesNotExist : [EOL] logging . warning ( [string] ) [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import re_path [EOL] from . views import NotificationsListView , NotificationDetailView [EOL] [EOL] urlpatterns = [ re_path ( [string] , NotificationDetailView . as_view ( ) , name = [string] ) , re_path ( [string] , NotificationsListView . as_view ( ) , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from rest_framework . permissions import BasePermission [EOL] [EOL] [EOL] class IsOwner ( BasePermission ) : [EOL] [docstring] [EOL] [EOL] def has_object_permission ( self , request , view , obj ) : [EOL] return obj . user_id == request . user . id [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations , models [EOL] import notifications . models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterField ( model_name = [string] , name = [string] , field = models . DateTimeField ( validators = [ notifications . models . in_future ] ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Union , Tuple , Optional , Dict , List [EOL] import typing [EOL] import os [EOL] from django . urls import reverse_lazy [EOL] [EOL] [comment] [EOL] BASE_DIR = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) [EOL] TEMPLATES_ROOT = os . path . join ( BASE_DIR , [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] SECRET_KEY = os . environ . get ( [string] ) [EOL] [EOL] [comment] [EOL] DEBUG = bool ( int ( os . getenv ( [string] , False ) ) ) [EOL] [EOL] ALLOWED_HOSTS = [ [string] ] [EOL] [EOL] INTERNAL_IPS = [string] [EOL] [EOL] [comment] [EOL] [EOL] INSTALLED_APPS = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] REST_FRAMEWORK = { [string] : ( [string] , ) } [EOL] [EOL] MIDDLEWARE = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] MIDDLEWARE . append ( [string] ) [EOL] [EOL] ROOT_URLCONF = [string] [EOL] [EOL] TEMPLATES = [ { [string] : [string] , [string] : [ TEMPLATES_ROOT , ] , [string] : True , [string] : { [string] : [ [string] , [string] , [string] , [string] ] , } , } , ] [EOL] [EOL] WSGI_APPLICATION = [string] [EOL] [EOL] [EOL] AUTH_USER_MODEL = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] DATABASES = { [string] : { [string] : [string] , [string] : os . environ . get ( [string] ) , [string] : os . environ . get ( [string] ) , [string] : os . environ . get ( [string] ) , [string] : os . environ . get ( [string] ) } } [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] AUTH_PASSWORD_VALIDATORS = [ { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , ] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] LANGUAGE_CODE = [string] [EOL] [EOL] TIME_ZONE = [string] [EOL] [EOL] USE_I18N = True [EOL] [EOL] USE_L10N = True [EOL] [EOL] USE_TZ = True [EOL] [EOL] [comment] [EOL] REACT_APP_DIR = os . path . join ( BASE_DIR , [string] ) [EOL] [EOL] STATICFILES_DIRS = [ os . path . join ( REACT_APP_DIR , [string] , [string] ) , ] [EOL] [EOL] STATIC_URL = [string] [EOL] STATIC_ROOT = os . path . join ( BASE_DIR , [string] ) [EOL] [EOL] MEDIA_URL = [string] [EOL] MEDIA_ROOT = os . path . join ( BASE_DIR , [string] ) [EOL] [comment] [EOL] CELERY_BROKER_URL = [string] [EOL] [EOL] [comment] [EOL] EMAIL_USE_TLS = True [EOL] EMAIL_HOST = os . environ . get ( [string] ) [EOL] EMAIL_HOST_USER = os . environ . get ( [string] ) [EOL] EMAIL_HOST_PASSWORD = os . environ . get ( [string] ) [EOL] EMAIL_PORT = os . environ . get ( [string] ) [EOL] [EOL] EMAIL_BACKEND = [string] [EOL] [EOL] [comment] [EOL] [EOL] ACCOUNT_AUTHENTICATION_METHOD = [string] [EOL] ACCOUNT_EMAIL_REQUIRED = True [EOL] ACCOUNT_UNIQUE_EMAIL = True [EOL] ACCOUNT_USERNAME_REQUIRED = False [EOL] ACCOUNT_USER_MODEL_USERNAME_FIELD = None [EOL] ACCOUNT_CONFIRM_EMAIL_ON_GET = True [EOL] OLD_PASSWORD_FIELD_ENABLED = True [EOL] [EOL] SITE_ID = [number] [EOL] [EOL] AUTHENTICATION_BACKENDS = ( [string] , [string] , ) [EOL] [EOL] [EOL] REST_AUTH_SERIALIZERS = { [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] REST_AUTH_REGISTER_SERIALIZERS = { [string] : [string] } [EOL] [EOL] SOCIALACCOUNT_PROVIDERS = { [string] : { [string] : [ [string] , [string] , ] , [string] : { [string] : [string] , } } } [EOL] [EOL] SOCIALACCOUNT_ADAPTER = [string] [EOL] ACCOUNT_ADAPTER = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Tuple[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.List[builtins.str]],typing.List[builtins.str],builtins.bool,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Optional[builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $None$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,builtins.str],typing.List[builtins.str]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . contrib import admin [EOL] from django . urls import path , re_path , include [EOL] from django . views . generic import TemplateView [EOL] from django . conf import settings [EOL] [EOL] [EOL] from . views import FrontendAppView [EOL] [EOL] urlpatterns = [ re_path ( [string] , admin . site . urls ) , re_path ( [string] , include ( [string] ) ) , re_path ( [string] , include ( [string] ) ) , re_path ( [string] , TemplateView . as_view ( template_name = [string] ) , name = [string] ) , re_path ( [string] , FrontendAppView . as_view ( ) ) , ] [EOL] [comment] [EOL] if settings . DEBUG : [EOL] import debug_toolbar [EOL] urlpatterns = [ path ( [string] , include ( debug_toolbar . urls ) ) , ] + urlpatterns [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] os . environ [ [string] ] = [string] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from __future__ import absolute_import [EOL] import os [EOL] from celery import Celery [EOL] [EOL] [comment] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] from django . conf import settings [EOL] [EOL] app = Celery ( [string] , broker = settings . CELERY_BROKER_URL , backend = settings . CELERY_BROKER_URL ) [EOL] app . config_from_object ( [string] ) [EOL] app . autodiscover_tasks ( settings . INSTALLED_APPS ) [EOL] [EOL] if __name__ == [string] : [EOL] app . start ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0
import logging [EOL] import os [EOL] [EOL] from django . views . generic import View [EOL] from django . http import HttpResponse [EOL] from django . conf import settings [EOL] [EOL] [EOL] class FrontendAppView ( View ) : [EOL] [docstring] [EOL] [EOL] def get ( self , request ) : [EOL] try : [EOL] with open ( os . path . join ( settings . REACT_APP_DIR , [string] , [string] ) ) as f : [EOL] return HttpResponse ( f . read ( ) ) [EOL] except FileNotFoundError : [EOL] logging . exception ( [string] ) [EOL] return HttpResponse ( [string] , status = [number] , )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0