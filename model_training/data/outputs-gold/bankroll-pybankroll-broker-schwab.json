from typing import List [EOL] import typing [EOL] from . account import SchwabAccount , Settings [EOL] [EOL] __all__ = [ [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0
import decimal [EOL] import bankroll [EOL] from decimal import Decimal [EOL] from bankroll . model import Cash , Currency [EOL] [EOL] [EOL] def cashUSD ( amount ) : [EOL] return Cash ( currency = Currency . USD , quantity = amount ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $bankroll.model.Cash$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from bankroll . model import ( AccountBalance , Cash , Currency , Stock , Bond , Option , OptionType , Position , CashPayment , Trade , TradeFlags , ) [EOL] import bankroll . brokers . schwab as schwab [EOL] from datetime import date [EOL] from decimal import Decimal [EOL] from itertools import groupby [EOL] from pathlib import Path [EOL] [EOL] from tests import helpers [EOL] import unittest [EOL] [EOL] [EOL] class TestSchwabPositions ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . positions = list ( schwab . SchwabAccount ( positions = Path ( [string] ) ) . positions ( ) ) [EOL] self . positions . sort ( key = lambda p : p . instrument . symbol ) [EOL] [EOL] def test_positionValidity ( self ) : [EOL] self . assertEqual ( len ( self . positions ) , [number] ) [EOL] [EOL] def test_tBill ( self ) : [EOL] self . assertEqual ( self . positions [ [number] ] . instrument , Bond ( [string] , Currency . USD ) ) [EOL] self . assertEqual ( self . positions [ [number] ] . quantity , [number] ) [EOL] self . assertEqual ( self . positions [ [number] ] . costBasis , helpers . cashUSD ( Decimal ( [string] ) ) ) [EOL] [EOL] def test_bnd ( self ) : [EOL] self . assertEqual ( self . positions [ [number] ] . instrument , Stock ( [string] , Currency . USD ) ) [EOL] self . assertEqual ( self . positions [ [number] ] . quantity , Decimal ( [string] ) ) [EOL] self . assertEqual ( self . positions [ [number] ] . costBasis , helpers . cashUSD ( Decimal ( [string] ) ) ) [EOL] [EOL] def test_uvxy ( self ) : [EOL] self . assertEqual ( self . positions [ [number] ] . instrument , Stock ( [string] , Currency . USD ) ) [EOL] self . assertEqual ( self . positions [ [number] ] . quantity , Decimal ( [string] ) ) [EOL] self . assertEqual ( self . positions [ [number] ] . costBasis , helpers . cashUSD ( Decimal ( [string] ) ) ) [EOL] [EOL] def test_vti ( self ) : [EOL] self . assertEqual ( self . positions [ [number] ] . instrument , Stock ( [string] , Currency . USD ) ) [EOL] self . assertEqual ( self . positions [ [number] ] . quantity , Decimal ( [string] ) ) [EOL] self . assertEqual ( self . positions [ [number] ] . costBasis , helpers . cashUSD ( Decimal ( [string] ) ) ) [EOL] [EOL] [EOL] class TestSchwabTransactions ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . activity = list ( schwab . SchwabAccount ( transactions = Path ( [string] ) ) . activity ( ) ) [EOL] self . activity . sort ( key = lambda t : t . date ) [EOL] [EOL] self . activityByDate = { d : list ( t ) for d , t in groupby ( self . activity , key = lambda t : t . date . date ( ) ) } [EOL] [EOL] def test_activityValidity ( self ) : [EOL] self . assertGreater ( len ( self . activity ) , [number] ) [EOL] [EOL] def test_buyBond ( self ) : [EOL] ts = self . activityByDate [ date ( [number] , [number] , [number] ) ] [EOL] self . assertEqual ( len ( ts ) , [number] ) [EOL] self . assertEqual ( ts [ [number] ] , Trade ( date = ts [ [number] ] . date , instrument = Bond ( symbol = [string] , currency = Currency . USD ) , quantity = Decimal ( [string] ) , amount = Cash ( currency = Currency . USD , quantity = Decimal ( [string] ) ) , fees = Cash ( currency = Currency . USD , quantity = Decimal ( [number] ) ) , flags = TradeFlags . OPEN , ) , ) [EOL] [EOL] def test_redeemBond ( self ) : [EOL] ts = self . activityByDate [ date ( [number] , [number] , [number] ) ] [EOL] self . assertEqual ( len ( ts ) , [number] ) [EOL] self . assertEqual ( ts [ [number] ] , Trade ( date = ts [ [number] ] . date , instrument = Bond ( symbol = [string] , currency = Currency . USD ) , quantity = Decimal ( [string] ) , amount = Cash ( currency = Currency . USD , quantity = Decimal ( [string] ) ) , fees = Cash ( currency = Currency . USD , quantity = Decimal ( [number] ) ) , flags = TradeFlags . CLOSE | TradeFlags . EXPIRED , ) , ) [EOL] [EOL] def test_buyStock ( self ) : [EOL] ts = self . activityByDate [ date ( [number] , [number] , [number] ) ] [EOL] self . assertEqual ( len ( ts ) , [number] ) [EOL] self . assertEqual ( ts [ [number] ] , Trade ( date = ts [ [number] ] . date , instrument = Stock ( [string] , Currency . USD ) , quantity = Decimal ( [string] ) , amount = Cash ( currency = Currency . USD , quantity = Decimal ( [string] ) ) , fees = Cash ( currency = Currency . USD , quantity = Decimal ( [string] ) ) , flags = TradeFlags . OPEN , ) , ) [EOL] [EOL] def test_dividendReinvested ( self ) : [EOL] ts = self . activityByDate [ date ( [number] , [number] , [number] ) ] [EOL] self . assertEqual ( len ( ts ) , [number] ) [EOL] self . assertEqual ( ts [ [number] ] , CashPayment ( date = ts [ [number] ] . date , instrument = Stock ( [string] , Currency . USD ) , proceeds = helpers . cashUSD ( Decimal ( [string] ) ) , ) , ) [EOL] [EOL] def test_cashDividend ( self ) : [EOL] ts = self . activityByDate [ date ( [number] , [number] , [number] ) ] [EOL] self . assertEqual ( len ( ts ) , [number] ) [EOL] self . assertEqual ( ts [ [number] ] , CashPayment ( date = ts [ [number] ] . date , instrument = Stock ( [string] , Currency . USD ) , proceeds = helpers . cashUSD ( Decimal ( [string] ) ) , ) , ) [EOL] [EOL] def test_reinvestShares ( self ) : [EOL] ts = self . activityByDate [ date ( [number] , [number] , [number] ) ] [EOL] self . assertEqual ( len ( ts ) , [number] ) [EOL] self . assertEqual ( ts [ [number] ] , Trade ( date = ts [ [number] ] . date , instrument = Stock ( [string] , Currency . USD ) , quantity = Decimal ( [string] ) , amount = Cash ( currency = Currency . USD , quantity = Decimal ( [string] ) ) , fees = Cash ( currency = Currency . USD , quantity = Decimal ( [number] ) ) , flags = TradeFlags . OPEN | TradeFlags . DRIP , ) , ) [EOL] [EOL] def test_shortSaleAndCover ( self ) : [EOL] ts = self . activityByDate [ date ( [number] , [number] , [number] ) ] [EOL] self . assertEqual ( len ( ts ) , [number] ) [EOL] [EOL] self . assertEqual ( ts [ [number] ] , Trade ( date = ts [ [number] ] . date , instrument = Stock ( [string] , Currency . USD ) , quantity = Decimal ( [string] ) , amount = Cash ( currency = Currency . USD , quantity = Decimal ( [string] ) ) , fees = Cash ( currency = Currency . USD , quantity = Decimal ( [string] ) ) , flags = TradeFlags . OPEN , ) , ) [EOL] [EOL] self . assertEqual ( ts [ [number] ] , Trade ( date = ts [ [number] ] . date , instrument = Stock ( [string] , Currency . USD ) , quantity = Decimal ( [string] ) , amount = Cash ( currency = Currency . USD , quantity = Decimal ( [string] ) ) , fees = Cash ( currency = Currency . USD , quantity = Decimal ( [string] ) ) , flags = TradeFlags . CLOSE , ) , ) [EOL] [EOL] def test_buyToOpenOption ( self ) : [EOL] ts = self . activityByDate [ date ( [number] , [number] , [number] ) ] [EOL] self . assertEqual ( len ( ts ) , [number] ) [EOL] self . assertEqual ( ts [ [number] ] , Trade ( date = ts [ [number] ] . date , instrument = Option ( underlying = [string] , currency = Currency . USD , optionType = OptionType . PUT , expiration = date ( [number] , [number] , [number] ) , strike = Decimal ( [string] ) , ) , quantity = Decimal ( [string] ) , amount = Cash ( currency = Currency . USD , quantity = Decimal ( [string] ) ) , fees = Cash ( currency = Currency . USD , quantity = Decimal ( [string] ) ) , flags = TradeFlags . OPEN , ) , ) [EOL] [EOL] def test_sellToCloseOption ( self ) : [EOL] ts = self . activityByDate [ date ( [number] , [number] , [number] ) ] [EOL] self . assertEqual ( len ( ts ) , [number] ) [EOL] self . assertEqual ( ts [ [number] ] , Trade ( date = ts [ [number] ] . date , instrument = Option ( underlying = [string] , currency = Currency . USD , optionType = OptionType . PUT , expiration = date ( [number] , [number] , [number] ) , strike = Decimal ( [string] ) , ) , quantity = Decimal ( [string] ) , amount = Cash ( currency = Currency . USD , quantity = Decimal ( [string] ) ) , fees = Cash ( currency = Currency . USD , quantity = Decimal ( [string] ) ) , flags = TradeFlags . CLOSE , ) , ) [EOL] [EOL] def test_exercisedOption ( self ) : [EOL] ts = self . activityByDate [ date ( [number] , [number] , [number] ) ] [EOL] self . assertEqual ( len ( ts ) , [number] ) [EOL] self . assertEqual ( ts [ [number] ] , Trade ( date = ts [ [number] ] . date , instrument = Option ( underlying = [string] , currency = Currency . USD , optionType = OptionType . CALL , expiration = date ( [number] , [number] , [number] ) , strike = Decimal ( [string] ) , ) , quantity = Decimal ( [string] ) , amount = Cash ( currency = Currency . USD , quantity = Decimal ( [number] ) ) , fees = Cash ( currency = Currency . USD , quantity = Decimal ( [number] ) ) , flags = TradeFlags . CLOSE | TradeFlags . ASSIGNED_OR_EXERCISED , ) , ) [EOL] [EOL] def test_assignedOption ( self ) : [EOL] ts = self . activityByDate [ date ( [number] , [number] , [number] ) ] [EOL] self . assertEqual ( len ( ts ) , [number] ) [EOL] self . assertEqual ( ts [ [number] ] , Trade ( date = ts [ [number] ] . date , instrument = Option ( underlying = [string] , currency = Currency . USD , optionType = OptionType . CALL , expiration = date ( [number] , [number] , [number] ) , strike = Decimal ( [string] ) , ) , quantity = Decimal ( [string] ) , amount = Cash ( currency = Currency . USD , quantity = Decimal ( [number] ) ) , fees = Cash ( currency = Currency . USD , quantity = Decimal ( [number] ) ) , flags = TradeFlags . CLOSE | TradeFlags . ASSIGNED_OR_EXERCISED , ) , ) [EOL] [EOL] def test_expiredShortOption ( self ) : [EOL] ts = self . activityByDate [ date ( [number] , [number] , [number] ) ] [EOL] self . assertEqual ( len ( ts ) , [number] ) [EOL] self . assertEqual ( ts [ [number] ] , Trade ( date = ts [ [number] ] . date , instrument = Option ( underlying = [string] , currency = Currency . USD , optionType = OptionType . PUT , expiration = date ( [number] , [number] , [number] ) , strike = Decimal ( [string] ) , ) , quantity = Decimal ( [string] ) , amount = Cash ( currency = Currency . USD , quantity = Decimal ( [number] ) ) , fees = Cash ( currency = Currency . USD , quantity = Decimal ( [number] ) ) , flags = TradeFlags . CLOSE | TradeFlags . EXPIRED , ) , ) [EOL] [EOL] def test_buyToCloseOption ( self ) : [EOL] ts = self . activityByDate [ date ( [number] , [number] , [number] ) ] [EOL] self . assertEqual ( len ( ts ) , [number] ) [EOL] self . assertEqual ( ts [ [number] ] , Trade ( date = ts [ [number] ] . date , instrument = Option ( underlying = [string] , currency = Currency . USD , optionType = OptionType . CALL , expiration = date ( [number] , [number] , [number] ) , strike = Decimal ( [string] ) , ) , quantity = Decimal ( [string] ) , amount = Cash ( currency = Currency . USD , quantity = Decimal ( [string] ) ) , fees = Cash ( currency = Currency . USD , quantity = Decimal ( [string] ) ) , flags = TradeFlags . CLOSE , ) , ) [EOL] [EOL] def test_sellToOpenOption ( self ) : [EOL] ts = self . activityByDate [ date ( [number] , [number] , [number] ) ] [EOL] self . assertEqual ( len ( ts ) , [number] ) [EOL] self . assertEqual ( ts [ [number] ] , Trade ( date = ts [ [number] ] . date , instrument = Option ( underlying = [string] , currency = Currency . USD , optionType = OptionType . CALL , expiration = date ( [number] , [number] , [number] ) , strike = Decimal ( [string] ) , ) , quantity = Decimal ( [string] ) , amount = Cash ( currency = Currency . USD , quantity = Decimal ( [string] ) ) , fees = Cash ( currency = Currency . USD , quantity = Decimal ( [string] ) ) , flags = TradeFlags . OPEN , ) , ) [EOL] [EOL] def test_securityTransferSale ( self ) : [EOL] ts = self . activityByDate [ date ( [number] , [number] , [number] ) ] [EOL] self . assertEqual ( len ( ts ) , [number] ) [EOL] self . assertEqual ( ts [ [number] ] , Trade ( date = ts [ [number] ] . date , instrument = Stock ( [string] , Currency . USD ) , quantity = Decimal ( [string] ) , amount = Cash ( currency = Currency . USD , quantity = Decimal ( [string] ) ) , fees = Cash ( currency = Currency . USD , quantity = Decimal ( [string] ) ) , flags = TradeFlags . CLOSE , ) , ) [EOL] [EOL] def test_cashInterest ( self ) : [EOL] ts = self . activityByDate [ date ( [number] , [number] , [number] ) ] [EOL] self . assertEqual ( len ( ts ) , [number] ) [EOL] self . assertEqual ( ts [ [number] ] , CashPayment ( date = ts [ [number] ] . date , instrument = None , proceeds = helpers . cashUSD ( Decimal ( [string] ) ) , ) , ) [EOL] [EOL] def test_marginInterest ( self ) : [EOL] ts = self . activityByDate [ date ( [number] , [number] , [number] ) ] [EOL] self . assertEqual ( len ( ts ) , [number] ) [EOL] self . assertEqual ( ts [ [number] ] , CashPayment ( date = ts [ [number] ] . date , instrument = None , proceeds = helpers . cashUSD ( Decimal ( [string] ) ) , ) , ) [EOL] [EOL] [EOL] class TestSchwabBalance ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . balance = schwab . SchwabAccount ( positions = Path ( [string] ) ) . balance ( ) [EOL] [EOL] def testUSDBalance ( self ) : [EOL] self . assertEqual ( self . balance . cash , { Currency . USD : helpers . cashUSD ( Decimal ( [string] ) ) } ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0