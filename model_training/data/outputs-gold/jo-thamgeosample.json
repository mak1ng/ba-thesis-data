[comment] [EOL] [EOL] from typing import Dict , Union , List [EOL] import typing [EOL] [docstring] [EOL] [EOL] import pytest [EOL] [EOL] import shapely . geometry as sg [EOL] [EOL] [EOL] @ pytest . fixture def shape ( ) : [EOL] s = { [string] : [string] , [string] : [ [ [ - [number] , [number] ] , [ - [number] , [number] ] , [ - [number] , [number] ] , [ - [number] , [number] ] , [ - [number] , [number] ] ] ] } [EOL] [EOL] return sg . shape ( s ) [EOL] [EOL] [EOL] @ pytest . fixture def shapes ( ) : [EOL] S = [ { [string] : [string] , [string] : [ [ [ - [number] , [number] ] , [ - [number] , [number] ] , [ - [number] , [number] ] , [ - [number] , [number] ] , [ - [number] , [number] ] ] ] } , { [string] : [string] , [string] : [ [ [ [number] , - [number] ] , [ [number] , - [number] ] , [ [number] , - [number] ] , [ [number] , - [number] ] , [ [number] , - [number] ] ] ] } ] [EOL] [EOL] return [ sg . shape ( s ) for s in S ] [EOL] [EOL] @ pytest . fixture def geojson ( ) : [EOL] return { [string] : [string] , [string] : [ { [string] : [string] , [string] : { [string] : [string] , [string] : [number] , [string] : [number] , [string] : [string] , [string] : [number] , [string] : [string] } , [string] : { [string] : [string] , [string] : [ [ [ - [number] , [number] ] , [ - [number] , [number] ] , [ - [number] , [number] ] , [ - [number] , [number] ] , [ - [number] , [number] ] ] ] } } , { [string] : [string] , [string] : { [string] : [string] , [string] : [number] , [string] : [number] , [string] : [string] , [string] : [number] , [string] : [string] } , [string] : { [string] : [string] , [string] : [ [ [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] ] ] } } , { [string] : [string] , [string] : { [string] : [string] , [string] : [number] , [string] : [number] , [string] : [string] , [string] : [number] , [string] : [string] } , [string] : { [string] : [string] , [string] : [ [ [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] ] ] } } ] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL]	0 0
[comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any [EOL] import click [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] import json [EOL] import pytest [EOL] from click . testing import CliRunner [EOL] from geosample . geosample import ( sample_geojson , _random_point_in_shape , _sample_shape , _allocate_samples_to_shapes , _sample_shapes , ) [EOL] from geosample . cli import main [EOL] [EOL] [EOL] def test__random_point_in_shape ( shape ) : [EOL] result = _random_point_in_shape ( shape ) [EOL] assert shape . contains ( result ) [EOL] [EOL] [EOL] def test__sample_shape ( shape ) : [EOL] num_samples = [number] [EOL] result = _sample_shape ( shape , num_samples ) [EOL] assert len ( result ) == num_samples [EOL] [EOL] [EOL] def test__allocate_samples_to_shapes ( shapes ) : [EOL] result = _allocate_samples_to_shapes ( shapes , [number] ) [EOL] assert result == [ [number] , [number] ] [EOL] [EOL] result = _allocate_samples_to_shapes ( shapes , [number] ) [EOL] assert result == [ [number] , [number] ] or result == [ [number] , [number] ] or result == [ [number] , [number] ] [EOL] [EOL] [EOL] def test__sample_shapes ( shapes ) : [EOL] n = [number] [EOL] result = _sample_shapes ( shapes , n ) [EOL] assert abs ( len ( result ) - n ) < [number] [EOL] [EOL] [EOL] def test_sample_geojson ( geojson ) : [EOL] n = [number] [EOL] result = sample_geojson ( geojson , n ) [EOL] assert abs ( len ( result ) - n ) < [number] [EOL] [EOL] [EOL] def test_sample_geojson_seed ( geojson ) : [EOL] n = [number] [EOL] result = sample_geojson ( geojson , n , seed = [number] ) [EOL] result_same = sample_geojson ( geojson , n , seed = [number] ) [EOL] result_different = sample_geojson ( geojson , n , seed = [number] ) [EOL] assert result == result_same [EOL] assert result != result_different [EOL] [EOL] [EOL] @ pytest . mark . skip ( reason = [string] ) def test__reproject_shapes ( shapes ) : [EOL] [comment] [EOL] assert False [EOL] [EOL] [EOL] def test_cli ( geojson ) : [EOL] input_data_path = [string] [EOL] expected_output_path = os . path . join ( [string] ) [EOL] runner = CliRunner ( ) [EOL] [EOL] with runner . isolated_filesystem ( ) : [EOL] with open ( input_data_path , [string] ) as of : [EOL] of . write ( json . dumps ( geojson ) ) [EOL] [EOL] result = runner . invoke ( main , [ [string] , [number] , [string] , expected_output_path , [string] , [number] , input_data_path , ] ) [EOL] [EOL] assert result . exit_code == [number] [EOL] assert os . path . exists ( expected_output_path ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] __author__ = [string] [EOL] __email__ = [string] [EOL] __version__ = [string] [EOL]	0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] import geojson [EOL] import click [EOL] import json [EOL] from . geosample import sample_geojson [EOL] [EOL] [EOL] @ click . command ( ) @ click . argument ( [string] , type = click . File ( ) ) @ click . option ( [string] , type = int , default = [number] , help = [string] ) @ click . option ( [string] , type = click . Path ( exists = False ) , default = [string] , help = [string] ) @ click . option ( [string] , [string] , type = int , default = [number] , help = [string] ) def main ( geojson_file , n , o , seed ) : [EOL] [docstring] [EOL] gj = json . loads ( geojson_file . read ( ) ) [EOL] points = sample_geojson ( gj , n , seed = seed ) [EOL] result = geojson . Feature ( geometry = points , properties = { } ) [EOL] [EOL] with open ( o , [string] ) as of : [EOL] of . write ( json . dumps ( result ) ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import builtins [EOL] from typing import List , Any , Tuple , Iterator [EOL] import typing [EOL] from __future__ import division [EOL] import random [EOL] from math import floor [EOL] from typing import List , Any [comment] [EOL] from shapely . geometry import shape , Point , MultiPoint [EOL] [EOL] [EOL] def _random_point_in_shape ( shape ) : [comment] [EOL] minx , miny , maxx , maxy = shape . bounds [EOL] [EOL] while True : [EOL] p = Point ( random . uniform ( minx , maxx ) , random . uniform ( miny , maxy ) ) [EOL] [EOL] if shape . contains ( p ) : [EOL] return p [EOL] [EOL] [EOL] def _sample_shape ( shape , n ) : [comment] [EOL] return [ _random_point_in_shape ( shape ) for i in range ( n ) ] [EOL] [EOL] [EOL] def _allocate_samples_to_shapes ( shapes , n ) : [comment] [EOL] [docstring] [EOL] areas = [ s . area for s in shapes ] [EOL] total = sum ( areas ) [EOL] proportions = [ a / total for a in areas ] [EOL] [EOL] return [ int ( floor ( p * n ) ) for p in proportions ] [EOL] [EOL] [EOL] def _sample_shapes ( shapes , n , ** kwargs ) : [EOL] [docstring] [EOL] samples = _allocate_samples_to_shapes ( shapes , n ) [EOL] shapes_and_samples = zip ( shapes , samples ) [EOL] result = [ _sample_shape ( s , n ) for s , n in shapes_and_samples ] [EOL] flat = [ item for sublist in result for item in sublist ] [EOL] [EOL] return flat [EOL] [EOL] [EOL] def sample_geojson ( features , n , seed = [number] ) : [comment] [EOL] [docstring] [EOL] random . seed ( a = seed ) [EOL] shapes = [ shape ( f [ [string] ] ) for f in features [ [string] ] if f [ [string] ] [ [string] ] . lower ( ) == [string] ] [EOL] [EOL] return MultiPoint ( _sample_shapes ( shapes , n ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0