from typing import Any , Type [EOL] import main [EOL] import flask [EOL] import typing [EOL] import datetime [EOL] [EOL] from flask import Flask [EOL] from flask_sqlalchemy import SQLAlchemy [EOL] from config import DevConfig [EOL] [EOL] app = Flask ( __name__ ) [EOL] app . config . from_object ( DevConfig ) [EOL] [EOL] db = SQLAlchemy ( app ) [EOL] [EOL] if __name__ == [string] : [EOL] app . run ( ) [EOL] [EOL] tags = db . Table ( [string] , db . Column ( [string] , db . Integer , db . ForeignKey ( [string] ) ) , db . Column ( [string] , db . Integer , db . ForeignKey ( [string] ) ) ) [EOL] [EOL] class User ( db . Model ) : [EOL] id = db . Column ( db . Integer ( ) , primary_key = True ) [EOL] username = db . Column ( db . String ( [number] ) , nullable = False , unique = True ) [EOL] password = db . Column ( db . String ( [number] ) ) [EOL] posts = db . relationship ( [string] , backref = [string] , lazy = [string] ) [EOL] [EOL] def __init__ ( self , username ) : [EOL] self . username = username [EOL] [EOL] def __repr__ ( self ) : [EOL] return [string] . format ( self . username ) [EOL] [EOL] class Post ( db . Model ) : [EOL] id = db . Column ( db . Integer ( ) , primary_key = True ) [EOL] title = db . Column ( db . String ( [number] ) , nullable = False ) [EOL] text = db . Column ( db . Text ( ) ) [EOL] publish_date = db . Column ( db . DateTime ( ) , default = datetime . datetime . now ) [EOL] comments = db . relationship ( [string] , backref = [string] , lazy = [string] ) [EOL] user_id = db . Column ( db . Integer ( ) , db . ForeignKey ( [string] ) ) [EOL] tags = db . relationship ( [string] , secondary = tags , backref = db . backref ( [string] , lazy = [string] ) ) [EOL] [EOL] def __init__ ( self , title ) : [EOL] self . title = title [EOL] [EOL] def __repr__ ( self ) : [EOL] return [string] . format ( self . title ) [EOL] [EOL] class Comment ( db . Model ) : [EOL] id = db . Column ( db . Integer ( ) , primary_key = True ) [EOL] name = db . Column ( db . String ( [number] ) , nullable = False ) [EOL] text = db . Column ( db . Text ( ) ) [EOL] date = db . Column ( db . DateTime ( ) , default = datetime . datetime . now ) [EOL] post_id = db . Column ( db . Integer ( ) , db . ForeignKey ( [string] ) ) [EOL] [EOL] def __init__ ( self , title ) : [EOL] self . title = title [EOL] [EOL] def __repr__ ( self ) : [EOL] return [string] . format ( self . text [ : [number] ] ) [EOL] [EOL] class Tag ( db . Model ) : [EOL] id = db . Column ( db . Integer ( ) , primary_key = True ) [EOL] title = db . Column ( db . String ( [number] ) , nullable = True , unique = True ) [EOL] [EOL] def __init__ ( self , title ) : [EOL] self . title = title [EOL] [EOL] def __repr__ ( self ) : [EOL] return [string] . format ( self . title ) [EOL] [EOL] @ app . route ( [string] ) def home ( ) : [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Type[main.User]$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[main.User]$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[main.User]$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Type[main.User]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Type[main.Post]$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[main.Post]$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[main.Post]$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Type[main.Post]$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[main.Post]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[main.Post]$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Type[main.Post]$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Type[main.Post]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Type[main.Comment]$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[main.Comment]$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[main.Comment]$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Type[main.Comment]$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[main.Comment]$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Type[main.Tag]$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[main.Tag]$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from main import app , db , User , Post , Comment , Tag [EOL] [EOL] @ app . shell_context_processor def make_shell_context ( ) : [EOL] return dict ( app = app , db = db , User = User , Post = Post , Comment = Comment , Tag = Tag ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
class Config ( object ) : [EOL] pass [EOL] class ProdConfig ( Config ) : [EOL] pass [EOL] class DevConfig ( Config ) : [EOL] DEBUG = True [EOL] SQLALCHEMY_DATABASE_URI = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0