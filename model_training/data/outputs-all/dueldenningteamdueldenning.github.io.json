import builtins [EOL] from typing import Dict , Union , Optional , Any [EOL] import logging [EOL] import rooms [EOL] import flask [EOL] import typing [EOL] import tasks [EOL] import os [EOL] import sys [EOL] import logging [EOL] import logging . config [EOL] [EOL] import flask [EOL] from flask import Flask , render_template , redirect , request , session , url_for [EOL] import flask_socketio [EOL] from flask_socketio import SocketIO [EOL] import yaml [EOL] [EOL] from rooms import RoomsController [EOL] from tasks import Tasks [EOL] [EOL] [comment] [EOL] with open ( [string] , [string] ) as file : [EOL] logging . config . dictConfig ( yaml . load ( file ) ) [EOL] logging . getLogger ( ) . info ( [string] ) [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] app = Flask ( __name__ ) [EOL] app . secret_key = os . getenv ( [string] , [string] ) [EOL] socketio = SocketIO ( app , path = [string] , logger = True ) [EOL] [EOL] open_rooms = RoomsController ( ) [EOL] tasks = Tasks ( [string] ) [EOL] [EOL] [comment] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def on_get_index ( ) : [EOL] session . permanent = True [EOL] username = request . args . get ( [string] ) [EOL] if username is not None : [EOL] app . logger . debug ( [string] + username ) [EOL] session [ [string] ] = username [EOL] [EOL] if [string] not in session : [EOL] username = [string] [EOL] app . logger . debug ( [string] + username ) [EOL] session [ [string] ] = username [EOL] [EOL] return render_template ( [string] , username = session [ [string] ] , rooms = open_rooms . open_room_names ( ) , tasks = tasks . task_names ( ) ) [EOL] [EOL] [comment] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def on_get_task ( task_name , room_id ) : [EOL] if [string] not in session : [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] if not tasks . exists ( task_name ) : [EOL] flask . abort ( [number] ) [EOL] [EOL] return render_template ( [string] , username = session [ [string] ] ) [EOL] [EOL] [comment] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def on_get_user_json ( ) : [EOL] if [string] not in session : [EOL] flask . abort ( [number] ) [EOL] [EOL] return flask . json . jsonify ( { [string] : session [ [string] ] } ) [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def on_get_user_js ( ) : [EOL] if [string] not in session : [EOL] flask . abort ( [number] ) [EOL] [EOL] return render_template ( [string] , username = session [ [string] ] ) [EOL] [EOL] [comment] [EOL] @ socketio . on ( [string] ) def on_connect ( ) : [EOL] app . logger . debug ( [string] + str ( request ) ) [EOL] [EOL] @ socketio . on ( [string] ) def on_disconnect ( ) : [EOL] app . logger . debug ( [string] + str ( request ) ) [EOL] [EOL] task_name = request . args [ [string] ] [EOL] room_id = request . args [ [string] ] [EOL] room_name = [string] . format ( task_name = task_name , room_id = room_id ) [EOL] username = session [ [string] ] [EOL] [EOL] metadata = open_rooms . get_metadata ( room_name ) [EOL] [EOL] state = metadata [ [string] ] [EOL] state [ [string] ] . append ( { [string] : [string] , [string] : [string] . format ( username ) , } ) [EOL] [EOL] open_rooms . emit_in_room ( room_name , [string] , { [string] : state } ) [EOL] open_rooms . leave_room ( request . sid , room_name ) [EOL] [EOL] @ socketio . on ( [string] ) def on_join ( message ) : [EOL] app . logger . debug ( [string] + str ( message ) ) [EOL] [EOL] task_name = request . args [ [string] ] [EOL] room_id = request . args [ [string] ] [EOL] room_name = [string] . format ( task_name = task_name , room_id = room_id ) [EOL] username = session [ [string] ] [EOL] [EOL] room_metatdata = open_rooms . join_or_create ( request . sid , room_name ) [EOL] [EOL] if [string] in room_metatdata : [EOL] state = room_metatdata [ [string] ] [EOL] assignments = state [ [string] ] [EOL] if username in assignments : [EOL] app . logger . warn ( [string] ) [EOL] else : [EOL] numb_briefs = len ( state [ [string] ] [ [string] ] ) [EOL] num_current_assignments = len ( assignments ) [EOL] assignments [ username ] = num_current_assignments % numb_briefs [EOL] else : [EOL] task = tasks . get ( task_name ) [EOL] default_options = { option_name : option_values [ [number] ] for option_name , option_values in task [ [string] ] . items ( ) } [EOL] state = { [string] : task , [string] : default_options , [string] : [ { [string] : [string] , [string] : [string] . format ( task_name ) , } ] , [string] : { username : [number] , } , } [EOL] room_metatdata [ [string] ] = state [EOL] state [ [string] ] . append ( { [string] : [string] , [string] : [string] . format ( username ) , } ) [EOL] open_rooms . emit_in_room ( room_name , [string] , { [string] : state } ) [EOL] [EOL] @ socketio . on ( [string] ) def on_relay_message ( message ) : [EOL] app . logger . debug ( [string] + str ( message ) ) [EOL] [EOL] task_name = request . args [ [string] ] [EOL] room_id = request . args [ [string] ] [EOL] room_name = [string] . format ( task_name = task_name , room_id = room_id ) [EOL] username = session [ [string] ] [EOL] [EOL] new_state = message [ [string] ] [EOL] [EOL] open_rooms . get_metadata ( room_name ) [ [string] ] = new_state [EOL] open_rooms . emit_in_room ( room_name , [string] , { [string] : new_state } ) [EOL] [EOL] [EOL] [comment] [EOL] if __name__ == [string] : [EOL] [docstring] [EOL] port = os . getenv ( [string] , default = None ) [EOL] socketio . run ( app , host = [string] , port = port , debug = False , use_reloader = False , log_output = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tasks.Tasks$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tasks.Tasks$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $rooms.RoomsController$ 0 0 0 0 0 $tasks.Tasks$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $rooms.RoomsController$ 0 0 0 0 0 $tasks.Tasks$ 0 $tasks.Tasks$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tasks.Tasks$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $rooms.RoomsController$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $rooms.RoomsController$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $rooms.RoomsController$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $rooms.RoomsController$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tasks.Tasks$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $rooms.RoomsController$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $rooms.RoomsController$ 0 0 0 0 0 0 0 0 0 0 0 $rooms.RoomsController$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List [EOL] import typing [EOL] class Player ( ) : [EOL] def __init__ ( self ) : [EOL] self . username = [ [string] ] [EOL] self . points = [ [number] ] [EOL] self . level = [ [number] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0
from typing import Any [EOL] import rooms [EOL] import typing [EOL] import flask_socketio [EOL] [EOL] class RoomsController ( object ) : [EOL] def __init__ ( self ) : [EOL] super ( RoomsController , self ) . __init__ ( ) [EOL] self . _rooms = { } [EOL] [EOL] def open_room_names ( self ) : [EOL] return [ key for key in self . _rooms . keys ( ) ] [EOL] [EOL] def join_or_create ( self , sid , room_name ) : [EOL] [docstring] [EOL] room = self . _rooms . get ( room_name ) [EOL] if room is None : [EOL] room = RoomController ( room_name ) [EOL] self . _rooms [ room_name ] = room [EOL] room . join ( sid ) [EOL] return room . metatdata ( ) [EOL] [EOL] def emit_in_room ( self , room_name , event , * args , ** kwargs ) : [EOL] room = self . _rooms [ room_name ] [EOL] room . emit ( event , * args , ** kwargs ) [EOL] [EOL] def leave_room ( self , sid , room_name ) : [EOL] room = self . _rooms [ room_name ] [EOL] if not room . is_present ( sid ) : [EOL] return [EOL] room . leave ( sid ) [EOL] if room . is_empty ( ) : [EOL] room . destroy ( ) [EOL] self . _rooms . pop ( room_name ) [EOL] [EOL] def get_metadata ( self , room_name ) : [EOL] return self . _rooms [ room_name ] . metatdata ( ) [EOL] [EOL] [EOL] class RoomController ( object ) : [EOL] def __init__ ( self , room_name ) : [EOL] super ( RoomController , self ) . __init__ ( ) [EOL] self . _room_name = room_name [EOL] self . _sids = set ( ) [EOL] self . _metatdata = { } [EOL] [EOL] def join ( self , sid ) : [EOL] if self . is_present ( sid ) : [EOL] return [EOL] self . _sids . add ( sid ) [EOL] flask_socketio . join_room ( self . _room_name , sid = sid ) [EOL] [EOL] def leave ( self , sid ) : [EOL] if not self . is_present ( sid ) : [EOL] return [EOL] flask_socketio . leave_room ( self . _room_name , sid = sid ) [EOL] self . _sids . remove ( sid ) [EOL] [EOL] def is_present ( self , sid ) : [EOL] return sid in self . _sids [EOL] [EOL] def is_empty ( self ) : [EOL] return len ( self . _sids ) == [number] [EOL] [EOL] def destroy ( self ) : [EOL] flask_socketio . close_room ( self . _room_name ) [EOL] [EOL] def emit ( self , event , * args , ** kwargs ) : [EOL] kwargs [ [string] ] = self . _room_name [EOL] flask_socketio . emit ( event , * args , ** kwargs ) [comment] [EOL] [EOL] def metatdata ( self ) : [EOL] return self . _metatdata [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $rooms.RoomController$ 0 0 0 0 0 0 0 0 0 0 0 $rooms.RoomController$ 0 0 0 0 $rooms.RoomController$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $rooms.RoomController$ 0 $rooms.RoomController$ 0 0 0 0 0 0 0 $rooms.RoomController$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any
from typing import Any , List [EOL] import pathlib [EOL] import typing [EOL] import builtins [EOL] import logging [EOL] from typing import List [EOL] from pathlib import Path [EOL] from json import loads [EOL] import logging [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] def load_file ( path ) : [EOL] with path . open ( ) as file : [EOL] logger . debug ( [string] + str ( path ) ) [EOL] [comment] [EOL] task = loads ( file . read ( ) ) [EOL] task [ [string] ] = path . stem [EOL] return task [EOL] [EOL] class Task ( object ) : [EOL] def __init__ ( self , name , json ) : [EOL] super ( Task , self ) . __init__ ( ) [EOL] logger . debug ( [string] + str ( json ) ) [EOL] self . name = name [EOL] self . overview = json [ [string] ] [EOL] self . draft = json [ [string] ] [EOL] self . briefs = json [ [string] ] [EOL] self . options = json [ [string] ] [EOL] [EOL] class Tasks ( object ) : [EOL] def __init__ ( self , folder ) : [EOL] super ( Tasks , self ) . __init__ ( ) [EOL] folder = Path ( folder ) [EOL] self . _tasks = { path . stem : load_file ( path ) for path in folder . glob ( [string] ) } [EOL] [EOL] def exists ( self , task_name ) : [EOL] return task_name in self . _tasks [EOL] [EOL] def task_names ( self ) : [EOL] return [ name for name in self . _tasks . keys ( ) ] [EOL] [EOL] def get ( self , task_name ) : [EOL] return self . _tasks [ task_name ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0