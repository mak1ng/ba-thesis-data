import os [EOL] from codecs import open [EOL] [EOL] from setuptools import setup , find_packages [EOL] [EOL] BASE_DIR = os . path . abspath ( os . path . dirname ( __file__ ) ) [EOL] VERSION = __import__ ( [string] ) . __version__ [EOL] [EOL] with open ( os . path . join ( BASE_DIR , [string] ) , encoding = [string] ) as f : [EOL] long_description = f . read ( ) [EOL] [EOL] setup ( name = [string] , version = VERSION , description = [string] , long_description = long_description , url = [string] , project_urls = { [string] : [string] , [string] : [string] , } , author = [string] , author_email = [string] , packages = find_packages ( exclude = [ [string] , [string] ] ) , install_requires = [ [string] , [string] ] , include_package_data = True , keywords = [string] [string] [string] , classifiers = [ [string] , [string] , [string] , [string] ] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import pinject [EOL] import builtins [EOL] import typing [EOL] from typing import List [EOL] [EOL] import pinject [EOL] from pinject . object_graph import ObjectGraph [EOL] [EOL] [EOL] class ObjectGraphBuilder ( object ) : [EOL] def __init__ ( self ) : [EOL] self . classes = [ ] [EOL] self . modules = [ ] [EOL] self . binding_specs = [ ] [EOL] self . tainted = True [EOL] self . object_graph = None [EOL] [EOL] def get_object_graph ( self ) : [EOL] if self . tainted : [EOL] self . object_graph = pinject . new_object_graph ( classes = self . classes , modules = self . modules , binding_specs = self . binding_specs ) [EOL] self . clean ( ) [EOL] return self . object_graph [EOL] else : [EOL] return self . object_graph [EOL] [EOL] def add_class ( self , class_definition ) : [EOL] self . classes . append ( class_definition ) [EOL] self . taint ( ) [EOL] [EOL] def add_classes ( self , class_definitions ) : [EOL] self . classes += class_definitions [EOL] self . taint ( ) [EOL] [EOL] def add_module ( self , module ) : [EOL] self . modules . append ( module ) [EOL] self . taint ( ) [EOL] [EOL] def add_modules ( self , modules ) : [EOL] self . modules += modules [EOL] self . taint ( ) [EOL] [EOL] def add_binding_spec ( self , binding_spec ) : [EOL] self . binding_specs . append ( binding_spec ) [EOL] self . taint ( ) [EOL] [EOL] def add_binding_specs ( self , binding_specs ) : [EOL] self . binding_specs += binding_specs [EOL] self . taint ( ) [EOL] [EOL] def taint ( self ) : [EOL] self . tainted = True [EOL] [EOL] def clean ( self ) : [EOL] self . tainted = False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List$ 0 0 0 0 0 0 $typing.List$ 0 0 0 0 0 0 $typing.List$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $pinject.object_graph.ObjectGraph$ 0 0 0 0 0 $pinject.object_graph.ObjectGraph$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List$ 0 0 0 0 0 0 0 $typing.List$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.List$ 0 0 0 0 0 $typing.List$ 0 $typing.List$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $pinject.BindingSpec$ 0 0 0 0 0 0 0 0 0 $pinject.BindingSpec$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.List[pinject.BindingSpec]$ 0 0 0 0 0 $typing.List[pinject.BindingSpec]$ 0 $typing.List[pinject.BindingSpec]$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0
from typing import List [EOL] import typing [EOL] __version__ = [string] [EOL] [EOL] __all__ = [ [string] ] [EOL] [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Type , Union , List [EOL] import object_graph [EOL] import typing [EOL] import tests [EOL] from unittest . mock import patch [EOL] [EOL] import pinject [EOL] from pinject import BindingSpec [EOL] from pinject . object_graph import ObjectGraph [EOL] from pinject . object_providers import ObjectProvider [EOL] [EOL] from object_graph . builder import ObjectGraphBuilder [EOL] [EOL] [EOL] class BindingSpec1 ( BindingSpec ) : [EOL] def configure ( self , bind ) : [EOL] pass [EOL] [EOL] [EOL] class BindingSpec2 ( BindingSpec ) : [EOL] def configure ( self , bind ) : [EOL] pass [EOL] [EOL] [EOL] class TestObjectGraphBuilder : [EOL] def test_can_build_without_any_configurations ( self ) : [EOL] builder = ObjectGraphBuilder ( ) [EOL] assert isinstance ( builder . get_object_graph ( ) , ObjectGraph ) [EOL] [EOL] @ patch ( [string] ) def test_add_class ( self , mocked_object_graph_method ) : [EOL] builder = ObjectGraphBuilder ( ) [EOL] class_to_add = TestObjectGraphBuilder [EOL] builder . add_class ( class_to_add ) [EOL] builder . get_object_graph ( ) [EOL] [EOL] mocked_object_graph_method . assert_called_once_with ( binding_specs = [ ] , classes = [ class_to_add ] , modules = [ ] ) [EOL] [EOL] @ patch ( [string] ) def test_add_classes ( self , mocked_object_graph_method ) : [EOL] builder = ObjectGraphBuilder ( ) [EOL] classes = [ TestObjectGraphBuilder , ObjectProvider ] [EOL] builder . add_classes ( classes ) [EOL] builder . get_object_graph ( ) [EOL] [EOL] mocked_object_graph_method . assert_called_once_with ( binding_specs = [ ] , classes = classes , modules = [ ] ) [EOL] [EOL] @ patch ( [string] ) def test_add_module ( self , mocked_object_graph_method ) : [EOL] builder = ObjectGraphBuilder ( ) [EOL] module_to_add = pinject [EOL] builder . add_module ( module_to_add ) [EOL] builder . get_object_graph ( ) [EOL] [EOL] mocked_object_graph_method . assert_called_once_with ( binding_specs = [ ] , classes = [ ] , modules = [ module_to_add ] ) [EOL] [EOL] @ patch ( [string] ) def test_add_modules ( self , mocked_object_graph_method ) : [EOL] builder = ObjectGraphBuilder ( ) [EOL] modules_to_add = [ pinject . decorators , pinject . bindings ] [EOL] builder . add_modules ( modules_to_add ) [EOL] builder . get_object_graph ( ) [EOL] [EOL] mocked_object_graph_method . assert_called_once_with ( binding_specs = [ ] , classes = [ ] , modules = modules_to_add ) [EOL] [EOL] @ patch ( [string] ) def test_add_binding_spec ( self , mocked_object_graph_method ) : [EOL] builder = ObjectGraphBuilder ( ) [EOL] binding_spec_to_add = BindingSpec1 [EOL] builder . add_binding_spec ( binding_spec_to_add ) [EOL] builder . get_object_graph ( ) [EOL] [EOL] mocked_object_graph_method . assert_called_once_with ( binding_specs = [ binding_spec_to_add ] , classes = [ ] , modules = [ ] ) [EOL] [EOL] @ patch ( [string] ) def test_add_binding_specs ( self , mocked_object_graph_method ) : [EOL] builder = ObjectGraphBuilder ( ) [EOL] binding_specs_to_add = [ BindingSpec1 , BindingSpec2 ] [EOL] builder . add_binding_specs ( binding_specs_to_add ) [EOL] builder . get_object_graph ( ) [EOL] [EOL] mocked_object_graph_method . assert_called_once_with ( binding_specs = binding_specs_to_add , classes = [ ] , modules = [ ] ) [EOL] [EOL] def test_rebuild_when_tainted ( self ) : [EOL] builder = ObjectGraphBuilder ( ) [EOL] object_graph = builder . get_object_graph ( ) [EOL] builder . add_class ( TestObjectGraphBuilder ) [EOL] new_object_graph = builder . get_object_graph ( ) [EOL] assert id ( object_graph ) != id ( new_object_graph ) [EOL] [EOL] def test_not_building_when_clean ( self ) : [EOL] builder = ObjectGraphBuilder ( ) [EOL] object_graph = builder . get_object_graph ( ) [EOL] new_object_graph = builder . get_object_graph ( ) [EOL] assert id ( object_graph ) == id ( new_object_graph ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $object_graph.builder.ObjectGraphBuilder$ 0 0 0 0 0 0 0 0 $object_graph.builder.ObjectGraphBuilder$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $object_graph.builder.ObjectGraphBuilder$ 0 0 0 0 0 $typing.Type[tests.test_object_graph_builder.TestObjectGraphBuilder]$ 0 0 0 $object_graph.builder.ObjectGraphBuilder$ 0 0 0 $typing.Type[tests.test_object_graph_builder.TestObjectGraphBuilder]$ 0 0 $object_graph.builder.ObjectGraphBuilder$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tests.test_object_graph_builder.TestObjectGraphBuilder]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $object_graph.builder.ObjectGraphBuilder$ 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 $object_graph.builder.ObjectGraphBuilder$ 0 0 0 $typing.list$ 0 0 $object_graph.builder.ObjectGraphBuilder$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $object_graph.builder.ObjectGraphBuilder$ 0 0 0 0 0 0 0 0 0 $object_graph.builder.ObjectGraphBuilder$ 0 0 0 0 0 0 $object_graph.builder.ObjectGraphBuilder$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $object_graph.builder.ObjectGraphBuilder$ 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 $object_graph.builder.ObjectGraphBuilder$ 0 0 0 $typing.list$ 0 0 $object_graph.builder.ObjectGraphBuilder$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $object_graph.builder.ObjectGraphBuilder$ 0 0 0 0 0 $typing.Type[tests.test_object_graph_builder.BindingSpec1]$ 0 0 0 $object_graph.builder.ObjectGraphBuilder$ 0 0 0 $typing.Type[tests.test_object_graph_builder.BindingSpec1]$ 0 0 $object_graph.builder.ObjectGraphBuilder$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[tests.test_object_graph_builder.BindingSpec1]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $object_graph.builder.ObjectGraphBuilder$ 0 0 0 0 0 $typing.List[typing.Type[typing.Union[tests.test_object_graph_builder.BindingSpec1,tests.test_object_graph_builder.BindingSpec2]]]$ 0 0 0 0 0 0 0 $object_graph.builder.ObjectGraphBuilder$ 0 0 0 $typing.List[typing.Type[typing.Union[tests.test_object_graph_builder.BindingSpec1,tests.test_object_graph_builder.BindingSpec2]]]$ 0 0 $object_graph.builder.ObjectGraphBuilder$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Type[typing.Union[tests.test_object_graph_builder.BindingSpec1,tests.test_object_graph_builder.BindingSpec2]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $object_graph.builder.ObjectGraphBuilder$ 0 0 0 0 0 0 0 $object_graph.builder.ObjectGraphBuilder$ 0 0 0 0 0 $object_graph.builder.ObjectGraphBuilder$ 0 0 0 0 0 0 0 0 $object_graph.builder.ObjectGraphBuilder$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $object_graph.builder.ObjectGraphBuilder$ 0 0 0 0 0 0 0 $object_graph.builder.ObjectGraphBuilder$ 0 0 0 0 0 0 0 $object_graph.builder.ObjectGraphBuilder$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0