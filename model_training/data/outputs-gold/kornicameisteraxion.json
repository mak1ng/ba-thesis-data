import sys [EOL] [EOL] import setuptools [EOL] [EOL] __version__ = [string] [EOL] __title__ = [string] [EOL] __author__ = [string] [EOL] __author_email__ = [string] [EOL] __maintainer__ = __author__ [EOL] __url__ = [string] [EOL] [EOL] if sys . version_info < ( [number] , [number] ) : [EOL] raise RuntimeError ( f'{ __title__ } [string] { __version__ } [string] ' ) [EOL] [EOL] setuptools . setup ( setup_requires = [string] , python_requires = [string] , versioning = [string] , package_data = { [string] : [ [string] ] , } , zip_safe = False , ) [EOL]	0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Any [EOL] import pytest_mypy_plugins [EOL] import typing [EOL] import pathlib [EOL] from pathlib import Path [EOL] [EOL] from pytest_mypy_plugins . item import YamlTestItem [EOL] [EOL] [EOL] def hook ( test_item ) : [EOL] axion_dir = Path ( test_item . base_ini_fpath ) . parents [ [number] ] [EOL] [EOL] plugin_path = ( axion_dir / [string] / [string] / [string] ) . resolve ( ) [EOL] oas_specifications_path = Path . cwd ( ) . resolve ( ) [EOL] [EOL] oas_spec = test_item . parsed_test_data . get ( [string] , None ) [EOL] if oas_spec : [EOL] spec_path = Path ( oas_specifications_path / f'{ test_item . name } [string] ' ) [EOL] with spec_path . open ( [string] ) as handler : [EOL] handler . write ( oas_spec ) [EOL] [EOL] additional_mypy_config = [string] . format ( plugin_path = plugin_path , oas_specifications_path = oas_specifications_path , ) [EOL] test_item . additional_mypy_config = additional_mypy_config [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pytest [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] , autouse = True , ) def axion_plugins ( ) : [EOL] from axion import _plugins [EOL] [EOL] _plugins ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import setuptools [EOL] [EOL] setuptools . setup ( name = [string] , setup_requires = [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import axion [EOL] from pathlib import Path [EOL] [EOL] import axion [EOL] [EOL] ax = axion . Axion ( Path . cwd ( ) , [string] , configuration = axion . Configuration ( ) , ) [EOL] ax . add_api ( spec_location = Path ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 $axion.Axion$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $axion.Axion$ 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Optional , Mapping [EOL] import builtins [EOL] import axion [EOL] import typing [EOL] import typing as t [EOL] [EOL] from axion import oas_endpoint [EOL] from axion import pipeline [EOL] [EOL] [EOL] @ oas_endpoint async def list_pets ( tags = None , page = [number] , limit = None , ) : [EOL] return { [string] : [number] , } [EOL] [EOL] [EOL] @ oas_endpoint async def find_pet ( id ) : [EOL] return { [string] : [number] , } [EOL] [EOL] [EOL] @ oas_endpoint async def delete_pet ( id ) : [EOL] return { [string] : [number] , } [EOL] [EOL] [EOL] @ oas_endpoint async def new_pet ( body ) : [EOL] return { [string] : [number] , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $axion.pipeline.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $axion.pipeline.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $axion.pipeline.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $axion.pipeline.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0