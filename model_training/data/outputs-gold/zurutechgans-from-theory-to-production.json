from typing import Any [EOL] import typing [EOL] import unittest [EOL] import base64 [EOL] from unittest . mock import Mock [EOL] import numpy as np [EOL] import cv2 [EOL] [EOL] from main import handler [EOL] [EOL] [EOL] def test_main ( ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] req = Mock ( ) [EOL] req . get_json = lambda silent : { } [EOL] [EOL] [comment] [EOL] out = handler ( req ) [EOL] [EOL] [comment] [EOL] assert out [ [number] ] == [number] [EOL] assert out [ [number] ] [ [string] ] [EOL] assert out [ [number] ] [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] image_bytes = base64 . b64decode ( out [ [number] ] [ [string] ] ) [EOL] [EOL] [comment] [EOL] decoded = cv2 . imdecode ( np . frombuffer ( image_bytes , np . uint8 ) , - [number] ) [EOL] [EOL] [comment] [EOL] assert decoded . shape == ( [number] , [number] , [number] ) [EOL] [EOL] [EOL] def test_with_noise ( ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] noise = np . random . normal ( size = ( [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] req = Mock ( ) [EOL] req . get_json = lambda silent : { [string] : noise . tolist ( ) } [EOL] [EOL] [comment] [EOL] out = handler ( req ) [EOL] [EOL] [comment] [EOL] assert out [ [number] ] == [number] [EOL] [EOL] [comment] [EOL] np . testing . assert_almost_equal ( np . array ( out [ [number] ] [ [string] ] ) , noise ) [EOL] assert out [ [number] ] [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] image_bytes = base64 . b64decode ( out [ [number] ] [ [string] ] ) [EOL] [EOL] [comment] [EOL] decoded = cv2 . imdecode ( np . frombuffer ( image_bytes , np . uint8 ) , - [number] ) [EOL] [EOL] [comment] [EOL] assert decoded . shape == ( [number] , [number] , [number] ) [EOL] [EOL] [EOL] def test_noise_error ( ) : [EOL] [comment] [EOL] noise = np . random . normal ( size = ( [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] req = Mock ( ) [EOL] req . get_json = lambda silent : { [string] : noise . tolist ( ) } [EOL] [EOL] [comment] [EOL] out = handler ( req ) [EOL] [EOL] [comment] [EOL] assert out [ [number] ] == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0