from distutils . core import setup [EOL] [EOL] setup ( name = [string] , version = [string] , packages = [ [string] , ] , license = [string] , long_description = open ( [string] ) . read ( ) , install_requires = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import crypto as c [EOL] import utility as u [EOL] import zipfile [EOL] [EOL] [EOL] [comment] [EOL] def main ( ) : [EOL] running = True [EOL] while running : [EOL] option = input ( [string] ) [EOL] if option == [string] : [EOL] encrypt ( ) [EOL] elif option == [string] : [EOL] decrypt ( ) [EOL] elif option == [string] : [EOL] running = False [EOL] [EOL] else : [EOL] print ( [string] ) [EOL] [EOL] [EOL] [EOL] def encrypt ( ) : [EOL] print ( [string] ) [EOL] file_path = u . read_line ( ) [EOL] print ( [string] ) [EOL] password = u . read_line ( ) [EOL] manifest = u . get_epub_info ( file_path ) [EOL] actual_content = [ ] [EOL] [comment] [EOL] key = c . create_key ( password ) [EOL] [comment] [EOL] zip_name = u . preprocess ( file_path ) [EOL] with zipfile . ZipFile ( zip_name , mode = [string] ) as myzip : [EOL] for name in myzip . namelist ( ) : [EOL] if name . startswith ( [string] ) : [EOL] actual_content . append ( name [ [number] : ] ) [EOL] [comment] [EOL] if name . endswith ( [string] ) or name . endswith ( [string] ) or name . endswith ( [string] ) or name . endswith ( [string] ) : [EOL] with myzip . open ( name ) as in_file : [EOL] contents = in_file . read ( ) [EOL] out = c . encrypt_AES ( key , contents ) [EOL] u . update_zip ( zip_name , name , out ) [EOL] else : [EOL] with myzip . open ( name ) as in_file : [EOL] contents = in_file . read ( ) [EOL] u . update_zip ( zip_name , name , contents ) [EOL] [EOL] [comment] [EOL] for item in manifest : [EOL] if item in actual_content : [EOL] actual_content . remove ( item ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] if len ( actual_content ) > [number] : [EOL] [comment] [EOL] print ( [string] ) [EOL] for item in actual_content : [EOL] print ( item ) [EOL] [EOL] u . postprocess ( zip_name ) [EOL] [EOL] [EOL] def decrypt ( ) : [EOL] [comment] [EOL] [comment] [EOL] print ( [string] ) [EOL] file_path = u . read_line ( ) [EOL] print ( [string] ) [EOL] password = u . read_line ( ) [EOL] [comment] [EOL] key = c . create_key ( password ) [EOL] [comment] [EOL] zip_name = u . preprocess ( file_path ) [EOL] with zipfile . ZipFile ( zip_name , mode = [string] ) as myzip : [EOL] for name in myzip . namelist ( ) : [EOL] if name . endswith ( [string] ) or name . endswith ( [string] ) or name . endswith ( [string] ) or name . endswith ( [string] ) : [EOL] with myzip . open ( name ) as in_file : [EOL] contents = in_file . read ( ) [EOL] out = c . decrypt_AES ( key , contents ) [EOL] u . update_zip ( zip_name , name , out ) [EOL] else : [EOL] with myzip . open ( name ) as in_file : [EOL] contents = in_file . read ( ) [EOL] u . update_zip ( zip_name , name , contents ) [EOL] [EOL] u . postprocess ( zip_name ) [EOL] [EOL] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Any [EOL] import typing [EOL] import sys [EOL] import zipfile [EOL] import os [EOL] import tempfile [EOL] import epub [EOL] [EOL] [EOL] def get_epub_info ( filepath ) : [EOL] book = epub . open_epub ( filepath ) [EOL] contents = [ ] [EOL] for item in book . opf . manifest . values ( ) : [EOL] [comment] [EOL] contents . append ( item . href ) [EOL] return contents [EOL] [EOL] [EOL] def read_line ( ) : [EOL] return sys . stdin . readline ( ) . strip ( ) [EOL] [EOL] [EOL] def update_zip ( zipname , filename , data ) : [EOL] [comment] [EOL] tmpfd , tmpname = tempfile . mkstemp ( dir = os . path . dirname ( zipname ) ) [EOL] os . close ( tmpfd ) [EOL] [EOL] [comment] [EOL] with zipfile . ZipFile ( zipname , [string] ) as zin : [EOL] with zipfile . ZipFile ( tmpname , [string] ) as zout : [EOL] zout . comment = zin . comment [comment] [EOL] for item in zin . infolist ( ) : [EOL] if item . filename != filename : [EOL] zout . writestr ( item , zin . read ( item . filename ) ) [EOL] [EOL] [comment] [EOL] os . remove ( zipname ) [EOL] os . rename ( tmpname , zipname ) [EOL] [EOL] with zipfile . ZipFile ( zipname , mode = [string] , compression = zipfile . ZIP_DEFLATED ) as out_zip : [EOL] out_zip . writestr ( filename , data ) [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def preprocess ( filepath ) : [EOL] if filepath [ - [number] : ] != [string] : [EOL] print ( [string] ) [EOL] sys . exit ( [number] ) [EOL] else : [EOL] os . rename ( filepath , filepath [ [number] : - [number] ] + [string] ) [EOL] return filepath [ [number] : - [number] ] + [string] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def postprocess ( filepath ) : [EOL] if filepath [ - [number] : ] != [string] : [EOL] print ( [string] ) [EOL] sys . exit ( [number] ) [EOL] else : [EOL] os . rename ( filepath , filepath [ [number] : - [number] ] + [string] ) [EOL] return filepath [ [number] : - [number] ] + [string]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0