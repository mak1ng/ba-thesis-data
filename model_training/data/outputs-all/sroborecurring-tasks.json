from typing import Sequence , Union , Any , List , Dict , Tuple , Literal [EOL] import pathlib [EOL] import typing_extensions [EOL] import github [EOL] import ticket_type [EOL] import datetime [EOL] import xmlrpc [EOL] import urllib [EOL] import builtins [EOL] import typing [EOL] import pathlib [EOL] import textwrap [EOL] import urllib . parse [EOL] from getpass import getpass [EOL] from typing import TYPE_CHECKING , Dict , List , Sequence [EOL] [EOL] import github [comment] [EOL] from termcolor import cprint [EOL] from ticket_type import Ticket [EOL] [EOL] if TYPE_CHECKING : [EOL] from typing_extensions import Protocol [EOL] [EOL] class Backend ( Protocol ) : [EOL] def submit ( self , ticket ) : [EOL] ... [EOL] [EOL] def title ( self , ticket_number ) : [EOL] ... [EOL] [EOL] [EOL] def trac_description_text ( ticket , backend ) : [EOL] text = ticket . description [EOL] text += f" [string] { ticket . original_name } [string] " [EOL] if ticket . dependencies : [EOL] text += [string] [EOL] for dep in sorted ( ticket . dependencies ) : [EOL] text += f" [string] { dep } [string] { backend . title ( dep ) }" . rstrip ( ) + [string] [EOL] return text . strip ( ) [EOL] [EOL] [EOL] class FakeTracBackend : [EOL] def __init__ ( self ) : [EOL] self . next_ticket = [number] [EOL] self . _known_titles = { } [EOL] [EOL] def submit ( self , ticket ) : [EOL] ticket_number = self . next_ticket [EOL] self . next_ticket += [number] [EOL] PRIORITY_COLOURS = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] cprint ( f" [string] { ticket_number } [string] { ticket . summary }" , PRIORITY_COLOURS [ ticket . priority ] , attrs = [ [string] ] , ) [EOL] desc = trac_description_text ( ticket , self ) [EOL] cprint ( textwrap . indent ( desc , [string] ) ) [EOL] self . _known_titles [ ticket_number ] = ticket . summary [EOL] return ticket_number [EOL] [EOL] def title ( self , ticket_number ) : [EOL] return self . _known_titles . get ( ticket_number , [string] ) [EOL] [EOL] [EOL] class RealTracBackend : [EOL] def __init__ ( self , root ) : [EOL] self . root = root [EOL] import xmlrpc . client as xml [comment] [EOL] [EOL] attrs = urllib . parse . urlsplit ( root ) [EOL] username = attrs . username or input ( [string] ) [EOL] password = attrs . password or getpass ( [string] ) [EOL] port = f' [string] { attrs . port }' if attrs . port is not None else [string] [EOL] generated_netloc = [string] . format ( urllib . parse . quote ( username ) , urllib . parse . quote ( password ) , attrs . hostname , port , ) [EOL] generated_parts = ( attrs . scheme , generated_netloc , attrs . path . rstrip ( [string] ) + [string] , [string] , [string] , ) [EOL] target_url = urllib . parse . urlunsplit ( generated_parts ) [EOL] self . _xml = xml . ServerProxy ( target_url ) [EOL] print ( self . _xml . system . methodHelp ( [string] ) ) [EOL] [EOL] def submit ( self , ticket ) : [EOL] desc = trac_description_text ( ticket , self ) [EOL] attrs = { } [EOL] if ticket . component is not None : [EOL] attrs [ [string] ] = ticket . component [EOL] if ticket . milestone is not None : [EOL] attrs [ [string] ] = ticket . milestone [EOL] attrs [ [string] ] = ticket . priority [EOL] [EOL] ticket_number = self . _xml . ticket . create ( ticket . summary , desc , attrs , False , ) [EOL] [EOL] print ( f" [string] { ticket_number } [string] { ticket . summary }" ) [EOL] return ticket_number [EOL] [EOL] def title ( self , ticket_number ) : [EOL] ticket_data = self . _xml . ticket . get ( ticket_number ) [EOL] return ticket_data [ [number] ] [ [string] ] [comment] [EOL] [EOL] [EOL] def get_github_credential ( ) : [EOL] config_file = pathlib . Path ( __file__ ) . parent . parent / [string] [EOL] [EOL] auth_token = None [EOL] [EOL] if config_file . exists ( ) : [EOL] with config_file . open ( ) as f : [EOL] auth_token = f . read ( ) [EOL] [EOL] if auth_token is None : [EOL] auth_token = getpass ( [string] ) [EOL] [EOL] store = input ( [string] ) [EOL] if store in ( [string] , [string] ) : [EOL] with config_file . open ( mode = [string] ) as f : [EOL] f . write ( auth_token ) [EOL] [EOL] return auth_token [EOL] [EOL] [EOL] class GitHubBackend : [EOL] COMPONENT_LABEL_MAPPING = { [string] : [ [string] ] , [string] : ( ) , [string] : ( ) , [string] : [ [string] ] , [string] : [ [string] ] , [string] : [ [string] , [string] ] , [string] : [ [string] ] , [string] : [ [string] ] , [string] : [ [string] , [string] ] , } [EOL] [EOL] COMPONENT_PRIORITY_MAPPING = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] def __init__ ( self , repo_name ) : [EOL] self . github = github . Github ( get_github_credential ( ) ) [EOL] self . repo = self . github . get_repo ( repo_name ) [EOL] self . milestones = { x . title : x for x in self . repo . get_milestones ( ) } [EOL] [EOL] labels = { x . name : x for x in self . repo . get_labels ( ) } [EOL] [EOL] try : [EOL] self . _component_label_mapping = { k : [ labels [ x ] for x in v ] for k , v in self . COMPONENT_LABEL_MAPPING . items ( ) } [EOL] self . _component_priority_mapping = { k : labels [ v ] for k , v in self . COMPONENT_PRIORITY_MAPPING . items ( ) } [EOL] except KeyError as e : [EOL] raise ValueError ( f" [string] { e } [string] { repo_name !r}" , ) from None [EOL] [EOL] self . _known_titles = { } [EOL] [EOL] @ staticmethod def _section ( heading , body ) : [EOL] return f" [string] { heading } [string] { body }" [EOL] [EOL] def _original_link ( self , ticket ) : [EOL] url = urllib . parse . urljoin ( [string] , f' [string] { ticket . original_name } [string] ' , ) [EOL] return f" [string] { ticket . original_name } [string] { url } [string] " [EOL] [EOL] def description_text ( self , ticket ) : [EOL] text = ticket . description [EOL] [EOL] text += self . _section ( [string] , self . _original_link ( ticket ) ) [EOL] [EOL] if ticket . dependencies : [EOL] text += self . _section ( [string] , [string] . join ( f" [string] { dep } [string] { self . title ( dep ) }" . rstrip ( ) for dep in sorted ( ticket . dependencies ) ) ) [EOL] [EOL] return text . strip ( ) [EOL] [EOL] def get_or_create_milestone ( self , title ) : [EOL] try : [EOL] return self . milestones [ title ] [EOL] except KeyError : [EOL] milestone = self . repo . create_milestone ( title ) [EOL] print ( f" [string] { title }" ) [EOL] self . milestones [ title ] = milestone [EOL] return milestone [EOL] [EOL] def labels ( self , ticket ) : [EOL] labels = [ self . _component_priority_mapping [ ticket . priority ] ] [EOL] labels += self . _component_label_mapping [ ticket . component ] [EOL] return labels [EOL] [EOL] def submit ( self , ticket ) : [EOL] issue = self . repo . create_issue ( ticket . summary , self . description_text ( ticket ) , milestone = self . get_or_create_milestone ( ticket . milestone ) , labels = self . labels ( ticket ) , ) [EOL] [EOL] ticket_number = issue . number [EOL] self . _known_titles [ ticket_number ] = ticket . summary [EOL] print ( f" [string] { ticket_number } [string] { ticket . summary }" ) [EOL] return ticket_number [EOL] [EOL] def title ( self , ticket_number ) : [EOL] return self . _known_titles . get ( ticket_number , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $ticket_type.Ticket$ 0 0 0 $builtins.str$ 0 0 0 $ticket_type.Ticket$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $ticket_type.Ticket$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $ticket_type.Ticket$ 0 0 0 0 $ticket_type.Ticket$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $ticket_type.Ticket$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $ticket_type.Ticket$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 $ticket_type.Ticket$ 0 0 0 $ticket_type.Ticket$ 0 0 0 $builtins.str$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $ticket_type.Ticket$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $typing.Union[None,typing.Dict[typing.Any,typing.Any],typing.List[typing.Any],builtins.bool,builtins.bytes,datetime.datetime,builtins.float,builtins.int,builtins.str,xmlrpc.client.Binary,xmlrpc.client.DateTime,typing.Tuple[typing.Any,...]]$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Union[None,typing.Dict[typing.Any,typing.Any],typing.List[typing.Any],builtins.bool,builtins.bytes,datetime.datetime,builtins.float,builtins.int,builtins.str,xmlrpc.client.Binary,xmlrpc.client.DateTime,typing.Tuple[typing.Any,...]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Sequence[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[builtins.str,github.Milestone.Milestone]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,github.Label.Label]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,github.Label.Label]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,github.Label.Label]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $ticket_type.Ticket$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $ticket_type.Ticket$ 0 0 0 0 0 0 0 0 0 0 0 0 $ticket_type.Ticket$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $ticket_type.Ticket$ 0 0 0 0 0 $ticket_type.Ticket$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ticket_type.Ticket$ 0 0 0 0 0 $ticket_type.Ticket$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ticket_type.Ticket$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $github.Milestone$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.List[github.Label.Label]$ 0 0 0 $ticket_type.Ticket$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $ticket_type.Ticket$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $ticket_type.Ticket$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.int$ 0 0 0 $ticket_type.Ticket$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $ticket_type.Ticket$ 0 0 0 0 0 0 0 $ticket_type.Ticket$ 0 0 0 0 0 0 0 0 $ticket_type.Ticket$ 0 0 0 0 0 0 0 0 0 0 $ticket_type.Ticket$ 0 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 $ticket_type.Ticket$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $ticket_type.Ticket$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0
[comment] [EOL] [EOL] from typing import Set , Any [EOL] import builtins [EOL] import typing [EOL] import argparse [EOL] import argparse [EOL] from pathlib import Path [EOL] [EOL] import yaml [EOL] [EOL] parser = argparse . ArgumentParser ( ) [EOL] parser . add_argument ( [string] , help = [string] ) [EOL] parser . add_argument ( [string] , help = [string] ) [EOL] arguments = parser . parse_args ( ) [EOL] [EOL] [EOL] def strip_dot_yaml ( text ) : [EOL] if not text . endswith ( [string] ) : [EOL] return text [EOL] return text [ : - [number] ] [EOL] [EOL] [EOL] linked = set ( ) [EOL] worklist = { strip_dot_yaml ( arguments . root ) } [EOL] [EOL] errors = False [EOL] [EOL] while worklist : [EOL] element = worklist . pop ( ) [EOL] linked . add ( element ) [EOL] try : [EOL] with Path ( element ) . with_suffix ( [string] ) . open ( ) as f : [EOL] data = yaml . load ( f ) [EOL] for dependency in data . get ( [string] , ( ) ) : [EOL] if dependency not in linked : [EOL] worklist . add ( dependency ) [EOL] except IOError : [EOL] print ( f" [string] { element }" ) [EOL] errors = True [EOL] [EOL] for element_path in Path ( arguments . dir ) . glob ( [string] ) : [EOL] ticket = str ( element_path ) [ : - [number] ] [EOL] if ticket not in linked : [EOL] print ( f" [string] { ticket }" ) [EOL] errors = True [EOL] [EOL] if errors : [EOL] exit ( [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 $builtins.str$ 0 $typing.Set[builtins.str]$ 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0
from typing import List , NamedTuple [EOL] [EOL] [EOL] class Ticket ( NamedTuple ) : [EOL] summary = ... [EOL] priority = ... [EOL] component = ... [EOL] original_name = ... [EOL] milestone = ... [EOL] description = ... [EOL] dependencies = ... [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.int]$ 0 0 0
[comment] [EOL] [EOL] from typing import Any , Union , List , Dict , Tuple , Callable [EOL] import pathlib [EOL] import ticket_type [EOL] import builtins [EOL] import typing [EOL] import argparse [EOL] import argparse [EOL] from pathlib import Path [EOL] from typing import TYPE_CHECKING , Callable , Dict , Union [EOL] [EOL] import yaml [EOL] from import_backends import FakeTracBackend , GitHubBackend , RealTracBackend [EOL] from ticket_type import Ticket [EOL] [EOL] if TYPE_CHECKING : [EOL] from import_backends import Backend [EOL] [EOL] [EOL] ROOT = Path ( __file__ ) . parent . parent [EOL] [EOL] [EOL] COMPONENTS = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] def process ( element_name , * , year , handle_dep ) : [EOL] [docstring] [EOL] [EOL] path = ( ROOT / element_name ) . with_suffix ( [string] ) [EOL] [EOL] with path . open ( [string] ) as f : [EOL] data = f . read ( ) [EOL] data = data . replace ( [string] , str ( year ) ) [EOL] data = data . replace ( [string] , f' [string] { year }' ) [EOL] [EOL] raw_elements = yaml . load ( data ) [EOL] if [string] not in raw_elements and [string] not in raw_elements : [EOL] raise RuntimeError ( f"{ path } [string] " ) [EOL] [EOL] description = raw_elements . get ( [string] , [string] ) [EOL] [EOL] if not len ( description . splitlines ( ) ) == [number] : [EOL] summary = raw_elements . get ( [string] , description . splitlines ( ) [ [number] ] ) [EOL] else : [EOL] summary = raw_elements [ [string] ] [EOL] [EOL] component = raw_elements . get ( [string] ) [EOL] [EOL] priority = raw_elements . get ( [string] , [string] ) [EOL] if priority not in ( [string] , [string] , [string] , [string] , [string] ) : [EOL] raise RuntimeError ( f"{ path } [string] { priority }" ) [EOL] [EOL] if component not in COMPONENTS : [EOL] raise RuntimeError ( f"{ path } [string] { component }" ) [EOL] [EOL] milestone = raw_elements . get ( [string] ) [EOL] dependencies = raw_elements . get ( [string] , ( ) ) [EOL] [EOL] computed_dependencies = [ handle_dep ( element ) for element in dependencies ] [EOL] [EOL] ticket = Ticket ( summary = summary , component = component , priority = priority , milestone = milestone , original_name = element_name , description = description , dependencies = computed_dependencies , ) [EOL] return ticket [EOL] [EOL] [EOL] def add ( element , backend , year ) : [EOL] [docstring] [EOL] CYCLE = object ( ) [EOL] elements = { } [EOL] [EOL] def _add ( element ) : [EOL] if element in elements : [EOL] previous = elements [ element ] [EOL] if previous is CYCLE : [EOL] raise RuntimeError ( f" [string] { element }" ) [EOL] assert isinstance ( previous , int ) [EOL] return previous [EOL] else : [EOL] elements [ element ] = CYCLE [EOL] generated = process ( element , year = year , handle_dep = _add ) [EOL] ticket_id = backend . submit ( generated ) [EOL] elements [ element ] = ticket_id [EOL] return ticket_id [EOL] [EOL] return _add ( element ) [EOL] [EOL] [EOL] def parse_args ( ) : [EOL] parser = argparse . ArgumentParser ( ) [EOL] parser . add_argument ( [string] , help = [string] ) [EOL] parser . add_argument ( [string] , help = [string] ) [EOL] [EOL] backends_group = parser . add_mutually_exclusive_group ( ) [EOL] backends_group . add_argument ( [string] , [string] , help = [string] , default = None , ) [EOL] backends_group . add_argument ( [string] , [string] , help = [string] , default = None , ) [EOL] [EOL] return parser . parse_args ( ) [EOL] [EOL] [EOL] def main ( arguments ) : [EOL] if arguments . trac_root is not None : [EOL] backend = RealTracBackend ( arguments . trac_root ) [EOL] elif arguments . github_repo is not None : [EOL] backend = GitHubBackend ( arguments . github_repo ) [EOL] else : [EOL] backend = FakeTracBackend ( ) [EOL] [EOL] add ( arguments . base , backend , arguments . year ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( parse_args ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ticket_type.Ticket$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0