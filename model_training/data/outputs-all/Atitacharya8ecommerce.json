from typing import Any , List [EOL] import typing [EOL] from django . contrib import admin [EOL] from django . urls import path [EOL] from django . contrib . auth import views as auth_views [EOL] [EOL] from eco import views [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ path ( [string] , auth_views . PasswordResetView . as_view ( template_name = [string] ) , name = [string] ) , path ( [string] , auth_views . PasswordResetDoneView . as_view ( template_name = [string] ) , name = [string] ) , path ( [string] , auth_views . PasswordResetConfirmView . as_view ( template_name = [string] ) , name = [string] ) , path ( [string] , auth_views . PasswordResetCompleteView . as_view ( template_name = [string] ) , name = [string] ) , path ( [string] , views . AtitAdmin , name = [string] ) , path ( [string] , views . category , name = [string] ) , path ( [string] , views . product , name = [string] ) , path ( [string] , views . feedback , name = [string] ) , path ( [string] , views . product_create_view , name = [string] ) , path ( [string] , views . product_list_update , name = [string] ) , path ( [string] , views . product_list_delete , name = [string] ) , path ( [string] , views . product_update_view , name = [string] ) , path ( [string] , views . product_delete_view , name = [string] ) , path ( [string] , views . category_list_update , name = [string] ) , path ( [string] , views . category_list_delete , name = [string] ) , path ( [string] , views . category_create_view , name = [string] ) , path ( [string] , views . category_delete_view , name = [string] ) , path ( [string] , views . category_update_view , name = [string] ) , path ( [string] , views . profile , name = [string] ) , path ( [string] , views . about , name = [string] ) , path ( [string] , views . home , name = [string] ) , path ( [string] , views . signup , name = [string] ) , path ( [string] , views . signin , name = [string] ) , path ( [string] , views . signout , name = [string] ) , path ( [string] , views . search , name = [string] ) , path ( [string] , views . googlemap , name = [string] ) , path ( [string] , views . cart , name = [string] ) , path ( [string] , views . mycart , name = [string] ) , path ( [string] , views . checkout , name = [string] ) , path ( [string] , views . detail , name = [string] ) , path ( [string] , views . categories , name = [string] ) , path ( [string] , views . api_products , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , List [EOL] import typing [EOL] import eco [EOL] from django import forms [EOL] from django . contrib . auth . forms import UserCreationForm [EOL] from django . contrib . auth . models import User [EOL] [EOL] from eco . models import Product , Category [EOL] from . import models [EOL] [EOL] [EOL] [EOL] class ReviewForm ( forms . ModelForm ) : [EOL] class Meta : [EOL] fields = [ [string] , [string] ] [EOL] model = models . Review [EOL] [EOL] class FeedbackForm ( forms . ModelForm ) : [EOL] class Meta : [EOL] fields = [ [string] , [string] ] [EOL] model = models . Feedback [EOL] [EOL] [EOL] class SigninForm ( forms . Form ) : [EOL] username = forms . CharField ( ) [EOL] password = forms . CharField ( widget = forms . PasswordInput ) [EOL] [EOL] [EOL] class SignupForm ( UserCreationForm ) : [EOL] class Meta : [EOL] model = User [EOL] fields = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] class ProductForm ( forms . ModelForm ) : [EOL] class Meta : [EOL] model = Product [EOL] fields = [string] [EOL] [EOL] [EOL] class CategoryForm ( forms . ModelForm ) : [EOL] class Meta : [EOL] model = Category [EOL] fields = [string] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Type[eco.models.Category]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Type[eco.models.Category]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[eco.forms.SigninForm]$ 0 0 0 0 0 0 0 $typing.Type[eco.forms.SigninForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[eco.models.Category]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[eco.models.Category]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[eco.models.Category]$ 0 0 0 $builtins.str$ 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import eco [EOL] from autoslug import AutoSlugField [EOL] from django . contrib . auth . models import User [EOL] from django . core . validators import MaxValueValidator , MinValueValidator [EOL] from django . db import models [EOL] [EOL] [comment] [EOL] class Category ( models . Model ) : [EOL] name = models . CharField ( max_length = [number] ) [EOL] slug = AutoSlugField ( populate_from = [string] ) [EOL] image = models . ImageField ( upload_to = [string] , blank = True ) [EOL] description = models . TextField ( blank = True ) [EOL] featured = models . BooleanField ( default = True ) [EOL] active = models . BooleanField ( blank = True ) [EOL] created = models . DateTimeField ( auto_now_add = True ) [EOL] modified = models . DateTimeField ( auto_now = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] class Meta : [EOL] verbose_name_plural = [string] [EOL] [EOL] class Product ( models . Model ) : [EOL] name = models . CharField ( max_length = [number] ) [EOL] slug = AutoSlugField ( populate_from = [string] ) [EOL] image = models . ImageField ( upload_to = [string] , blank = True ) [EOL] brand = models . CharField ( max_length = [number] , blank = True ) [EOL] shipping = models . CharField ( max_length = [number] , blank = True ) [EOL] description = models . TextField ( blank = True ) [EOL] price = models . DecimalField ( max_digits = [number] , decimal_places = [number] ) [EOL] category = models . ForeignKey ( Category , on_delete = models . CASCADE ) [EOL] featured = models . BooleanField ( default = True ) [EOL] active = models . BooleanField ( default = True ) [EOL] created = models . DateTimeField ( auto_now_add = True ) [EOL] modified = models . DateTimeField ( auto_now = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] [EOL] class Review ( models . Model ) : [EOL] product = models . ForeignKey ( Product , on_delete = models . CASCADE ) [EOL] user = models . ForeignKey ( User , on_delete = models . CASCADE ) [EOL] rate = models . IntegerField ( default = [number] , validators = [ MaxValueValidator ( [number] ) , MinValueValidator ( [number] ) ] ) [EOL] review = models . TextField ( blank = True ) [EOL] created = models . DateTimeField ( auto_now_add = True ) [EOL] active = models . BooleanField ( default = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . review [EOL] [EOL] [EOL] class Feedback ( models . Model ) : [EOL] user = models . ForeignKey ( User , on_delete = models . CASCADE ) [EOL] rate = models . IntegerField ( default = [number] , validators = [ MaxValueValidator ( [number] ) , MinValueValidator ( [number] ) ] ) [EOL] feedback = models . TextField ( blank = True ) [EOL] created = models . DateTimeField ( auto_now_add = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . feedback [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[eco.models.Category]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[eco.models.Category]$ 0 0 0 0 0 0 0 0 $typing.Type[eco.models.Category]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[eco.models.Category]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[eco.models.Category]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[eco.models.Category]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[eco.models.Category]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[eco.models.Category]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[eco.models.Product]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[eco.models.Product]$ 0 0 0 0 0 0 0 0 $typing.Type[eco.models.Product]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[eco.models.Product]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[eco.models.Product]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[eco.models.Product]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[eco.models.Product]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[eco.models.Product]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[eco.models.Product]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[eco.models.Product]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[eco.models.Product]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[eco.models.Product]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[eco.models.Review]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[eco.models.Review]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[eco.models.Review]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[eco.models.Review]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[eco.models.Review]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[eco.models.Review]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[eco.models.Feedback]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[eco.models.Feedback]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[eco.models.Feedback]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[eco.models.Feedback]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Tuple [EOL] import typing [EOL] import eco [EOL] from rest_framework import serializers [EOL] [EOL] from eco . models import Product [EOL] [EOL] [EOL] class ProductSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = Product [EOL] fields = ( [string] , [string] , [string] , [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[eco.models.Product]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] from import_export . admin import ImportExportModelAdmin [EOL] [comment] [EOL] from eco . models import Category , Product , Review , Feedback [EOL] [EOL] [EOL] @ admin . register ( Category , Product , Review , Feedback ) class CategoryAdmin ( ImportExportModelAdmin ) : [EOL] pass [EOL] [EOL] [EOL] class ProductAdmin ( ImportExportModelAdmin ) : [EOL] pass [EOL] [EOL] [EOL] class ReviewAdmin ( ImportExportModelAdmin ) : [EOL] pass [EOL] [EOL] [EOL] class FeedbackAdmin ( ImportExportModelAdmin ) : [EOL] pass [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class EcoConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Dict , Union , Any , List [EOL] import typing [EOL] import eco [EOL] from django . contrib import messages [EOL] from django . contrib . auth import authenticate , login , logout [EOL] from django . db . models import Q [EOL] from django . shortcuts import render , redirect [EOL] [EOL] [comment] [EOL] from rest_framework . decorators import api_view [EOL] from rest_framework . response import Response [EOL] [EOL] from eco . forms import ReviewForm , SigninForm , SignupForm , FeedbackForm , ProductForm , CategoryForm [EOL] from eco . models import Product , Category [EOL] [EOL] from eco . serializer import ProductSerializer [EOL] [EOL] [EOL] def AtitAdmin ( req ) : [EOL] if req . method == [string] : [EOL] form = SigninForm ( req . POST ) [EOL] username = form [ [string] ] . value ( ) [EOL] password = form [ [string] ] . value ( ) [EOL] user = authenticate ( req , username = username , password = password ) [EOL] if user is not None : [EOL] login ( req , user ) [EOL] messages . success ( req , [string] ) [EOL] return render ( req , [string] ) [EOL] else : [EOL] messages . error ( req , [string] ) [EOL] else : [EOL] form = SigninForm ( ) [EOL] context = { [string] : form } [EOL] return render ( req , [string] , context ) [EOL] [EOL] [EOL] def category ( req ) : [EOL] return render ( req , [string] ) [EOL] [EOL] [EOL] def product ( req ) : [EOL] return render ( req , [string] ) [EOL] [EOL] [EOL] def about ( req ) : [EOL] return render ( req , [string] ) [EOL] [EOL] [EOL] def home ( req ) : [EOL] products = Product . objects . filter ( active = True ) [EOL] categories = Category . objects . filter ( active = True ) [EOL] context = { [string] : products , [string] : categories } [EOL] return render ( req , [string] , context ) [EOL] [EOL] [EOL] def search ( req ) : [EOL] q = req . GET [ [string] ] [EOL] products = Product . objects . filter ( active = True , name__icontains = q ) [EOL] categories = Category . objects . filter ( active = True ) [EOL] context = { [string] : products , [string] : categories , [string] : q + [string] } [EOL] return render ( req , [string] , context ) [EOL] [EOL] [EOL] def googlemap ( req ) : [EOL] return render ( req , [string] , { } ) [EOL] [EOL] [EOL] def categories ( req , slug ) : [EOL] cat = Category . objects . get ( slug = slug ) [EOL] products = Product . objects . filter ( active = True , category = cat ) [EOL] categories = Category . objects . filter ( active = True ) [EOL] context = { [string] : products , [string] : categories , [string] : cat . name + [string] } [EOL] return render ( req , [string] , context ) [EOL] [EOL] [EOL] def detail ( req , slug ) : [EOL] product = Product . objects . get ( active = True , slug = slug ) [EOL] if req . method == [string] : [EOL] form = ReviewForm ( req . POST ) [EOL] if form . is_valid ( ) : [EOL] review = form . save ( commit = False ) [EOL] review . product = product [EOL] review . user = req . user [EOL] review . save ( ) [EOL] messages . success ( req , [string] ) [EOL] else : [EOL] messages . error ( req , [string] ) [EOL] else : [EOL] form = ReviewForm ( ) [EOL] categories = Category . objects . filter ( active = True ) [EOL] context = { [string] : product , [string] : categories , [string] : form } [EOL] return render ( req , [string] , context ) [EOL] [EOL] [EOL] def profile ( req ) : [EOL] return render ( req , [string] ) [EOL] [EOL] [EOL] def signup ( req ) : [EOL] if req . method == [string] : [EOL] form = SignupForm ( req . POST ) [EOL] if form . is_valid ( ) : [EOL] user = form . save ( commit = False ) [EOL] user . save ( ) [EOL] messages . success ( req , [string] ) [EOL] return redirect ( [string] ) [EOL] else : [EOL] messages . error ( req , [string] ) [EOL] else : [EOL] form = SigninForm ( ) [EOL] context = { [string] : form } [EOL] return render ( req , [string] , context ) [EOL] [EOL] [EOL] def signin ( req ) : [EOL] if req . method == [string] : [EOL] form = SigninForm ( req . POST ) [EOL] username = form [ [string] ] . value ( ) [EOL] password = form [ [string] ] . value ( ) [EOL] user = authenticate ( req , username = username , password = password ) [EOL] if user is not None : [EOL] login ( req , user ) [EOL] messages . success ( req , [string] ) [EOL] return redirect ( [string] ) [EOL] else : [EOL] messages . error ( req , [string] ) [EOL] else : [EOL] form = SigninForm ( ) [EOL] context = { [string] : form } [EOL] return render ( req , [string] , context ) [EOL] [EOL] [EOL] def signout ( req ) : [EOL] logout ( req ) [EOL] return redirect ( [string] ) [EOL] [EOL] [EOL] def cart ( req , slug ) : [EOL] product = Product . objects . get ( slug = slug ) [EOL] initial = { [string] : [ ] , [string] : [number] , [string] : [number] } [EOL] session = req . session . get ( [string] , initial ) [EOL] if slug in session [ [string] ] : [EOL] messages . error ( req , [string] ) [EOL] else : [EOL] session [ [string] ] . append ( slug ) [EOL] session [ [string] ] += float ( product . price ) [EOL] session [ [string] ] += [number] [EOL] req . session [ [string] ] = session [EOL] messages . success ( req , [string] ) [EOL] return redirect ( [string] , slug ) [EOL] [EOL] [EOL] def mycart ( req ) : [EOL] sess1 = req . session . get ( [string] , { [string] : [ ] } ) [EOL] products = Product . objects . filter ( active = True , slug__in = sess1 [ [string] ] ) [EOL] categories = Category . objects . filter ( active = True ) [EOL] context = { [string] : products , [string] : categories , [string] : [string] } [EOL] return render ( req , [string] , context ) [EOL] [EOL] [EOL] def checkout ( req ) : [EOL] req . session . pop ( [string] , None ) [EOL] return redirect ( [string] ) [EOL] [EOL] [EOL] def feedback ( req ) : [EOL] if req . method == [string] : [EOL] form = FeedbackForm ( req . POST ) [EOL] if form . is_valid ( ) : [EOL] feedback = form . save ( commit = False ) [EOL] feedback . user = req . user [EOL] feedback . save ( ) [EOL] messages . success ( req , [string] ) [EOL] else : [EOL] messages . error ( req , [string] ) [EOL] else : [EOL] form = FeedbackForm ( ) [EOL] context = { [string] : form } [EOL] return render ( req , [string] , context ) [EOL] [EOL] [EOL] def category_create_view ( req ) : [EOL] form = CategoryForm ( req . POST or None ) [EOL] if form . is_valid ( ) : [EOL] form . save ( ) [EOL] return redirect ( [string] ) [EOL] context = { [string] : form } [EOL] return render ( req , [string] , context ) [EOL] [EOL] [EOL] def category_update_view ( req , slug ) : [EOL] category = Category . objects . get ( slug = slug ) [EOL] form = CategoryForm ( req . POST or None , instance = category ) [EOL] if form . is_valid ( ) : [EOL] form . save ( ) [EOL] context = { [string] : category , [string] : form } [EOL] return render ( req , [string] , context ) [EOL] [EOL] [EOL] def category_delete_view ( req , slug ) : [EOL] category = Category . objects . get ( slug = slug ) [EOL] if req . method == [string] : [EOL] category . delete ( ) [EOL] return redirect ( [string] ) [EOL] [EOL] return render ( req , [string] , { [string] : category } ) [EOL] [EOL] def category_list_update ( req ) : [EOL] category = Category . objects . all ( ) [EOL] return render ( req , [string] , { [string] : category } ) [EOL] [EOL] def category_list_delete ( req ) : [EOL] category = Category . objects . all ( ) [EOL] return render ( req , [string] , { [string] : category } ) [EOL] [EOL] [EOL] def product_create_view ( req ) : [EOL] form = ProductForm ( req . POST or None ) [EOL] if form . is_valid ( ) : [EOL] form . save ( ) [EOL] return redirect ( [string] ) [EOL] context = { [string] : form } [EOL] return render ( req , [string] , context ) [EOL] [EOL] [EOL] def product_delete_view ( req , slug ) : [EOL] products = Product . objects . get ( slug = slug ) [EOL] if req . method == [string] : [EOL] products . delete ( ) [EOL] return redirect ( [string] ) [EOL] [EOL] return render ( req , [string] , { [string] : products } ) [EOL] [EOL] [EOL] def product_update_view ( req , slug ) : [EOL] products = Product . objects . get ( slug = slug ) [EOL] form = ProductForm ( req . POST or None , instance = products ) [EOL] if form . is_valid ( ) : [EOL] form . save ( ) [EOL] context = { [string] : products , [string] : form } [EOL] return render ( req , [string] , context ) [EOL] [EOL] [EOL] def product_list_update ( req ) : [EOL] products = Product . objects . all ( ) [EOL] return render ( req , [string] , { [string] : products } ) [EOL] [EOL] def product_list_delete ( req ) : [EOL] products = Product . objects . all ( ) [EOL] return render ( req , [string] , { [string] : products } ) [EOL] [EOL] @ api_view ( [ [string] ] ) def api_products ( req ) : [EOL] query = req . GET . get ( [string] , [string] ) [EOL] products = Product . objects . filter ( Q ( name__contains = query ) | Q ( description__contains = query ) ) [EOL] serializer = ProductSerializer ( products , many = True ) [EOL] return Response ( serializer . data ) [EOL]	
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0
from typing import Dict , Tuple , List , Optional , Union [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] [comment] [EOL] BASE_DIR = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] SECRET_KEY = [string] [EOL] [EOL] [comment] [EOL] DEBUG = True [EOL] [EOL] ALLOWED_HOSTS = [ [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] [EOL] INSTALLED_APPS = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] SITE_ID = [number] [EOL] [EOL] MIDDLEWARE = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] ROOT_URLCONF = [string] [EOL] [EOL] AUTH_BASE_MODEL = [string] [EOL] [EOL] AUTHENTICATION_BACKENDS = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] TEMPLATES = [ { [string] : [string] , [string] : [ os . path . join ( BASE_DIR , [string] ) ] , [string] : True , [string] : { [string] : [ [string] , [string] , [string] , [string] , [string] , [string] , ] , } , } , ] [EOL] [EOL] WSGI_APPLICATION = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] DATABASES = { [string] : { [string] : [string] , [string] : os . path . join ( BASE_DIR , [string] ) , } } [EOL] [EOL] [comment] [EOL] SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = [string] [EOL] SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = [string] [EOL] [EOL] SOCIAL_AUTH__KEY = [string] [EOL] SOCIAL_AUTH__SECRET = [string] [EOL] [comment] [EOL] [comment] [EOL] [EOL] AUTH_PASSWORD_VALIDATORS = [ { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , { [string] : [string] , } , ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] LANGUAGE_CODE = [string] [EOL] [EOL] TIME_ZONE = [string] [EOL] [EOL] USE_I18N = True [EOL] [EOL] USE_L10N = True [EOL] [EOL] USE_TZ = True [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] STATIC_URL = [string] [EOL] if DEBUG : [EOL] STATICFILES_DIRS = [ os . path . join ( BASE_DIR , [string] ) ] [EOL] else : [EOL] STATIC_ROOT = os . path . join ( BASE_DIR , [string] ) [EOL] [EOL] MEDIA_URL = [string] [EOL] MEDIA_ROOT = os . path . join ( BASE_DIR , [string] ) [EOL] [EOL] [EOL] EMAIL_BACKEND = [string] [EOL] EMAIL_HOST = [string] [EOL] EMAIL_PORT = [number] [EOL] EMAIL_USE_TLS = True [EOL] EMAIL_HOST_USER = os . environ . get ( [string] ) [EOL] EMAIL_HOST_PASSWORD = os . environ . get ( [string] ) [EOL] SERVER_EMAIL = [string] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.List[builtins.str]],typing.List[builtins.str],builtins.bool,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $builtins.bool$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0