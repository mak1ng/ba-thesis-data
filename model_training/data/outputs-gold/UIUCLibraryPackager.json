from setuptools import setup [EOL] [EOL] setup ( packages = [ [string] , [string] , ] , namespace_packages = [ [string] ] , test_suite = [string] , setup_requires = [ [string] ] , install_requires = [ [string] ] , extras_require = { [string] : [ [string] ] } , tests_require = [ [string] ] , zip_safe = False , python_requires = [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Iterator , List , Tuple [EOL] import builtins [EOL] import uiucprescon [EOL] import typing [EOL] import zipfile [EOL] import csv [EOL] import os [EOL] import sys [EOL] import tempfile [EOL] import zipfile [EOL] [EOL] import pytest [EOL] import shutil [EOL] from uiucprescon import packager [EOL] from uiucprescon . packager import errors [EOL] from uiucprescon . packager . common import Metadata [EOL] from uiucprescon . packager import InstantiationTypes [EOL] from uiucprescon . packager . packages . collection_builder import HathiLimitedViewBuilder [EOL] import pykdu_compress [EOL] [EOL] def package_names ( ) : [EOL] with open ( os . path . join ( os . path . dirname ( __file__ ) , [string] ) ) as csvfile : [EOL] for row in csv . reader ( csvfile ) : [EOL] yield row [ [number] ] , True if row [ [number] ] . strip ( ) == [string] else False [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , package_names ( ) ) def test_hathi_limited_batch_names ( dirname , expected_valid ) : [EOL] assert HathiLimitedViewBuilder . is_package_dir_name ( dirname ) is expected_valid [EOL] [EOL] [EOL] sample_files = [ ( [string] , InstantiationTypes . SUPPLEMENTARY ) , ( [string] , InstantiationTypes . SUPPLEMENTARY ) , ( [string] , InstantiationTypes . ACCESS ) , ( [string] , InstantiationTypes . ACCESS ) , ( [string] , InstantiationTypes . PRESERVATION ) , ( [string] , InstantiationTypes . PRESERVATION ) , ( [string] , InstantiationTypes . UNKNOWN ) , ] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , sample_files ) def test_get_file_type ( sample_file , expected_valid ) : [EOL] assert HathiLimitedViewBuilder . get_file_type ( sample_file ) == expected_valid [EOL] assert True [EOL] [EOL] [EOL] def test_read_only_transform ( capture_one_sample_package ) : [EOL] [EOL] capture_one_packager = packager . PackageFactory ( packager . packages . CaptureOnePackage ( ) ) [EOL] capture_one_packages = capture_one_packager . locate_packages ( capture_one_sample_package ) [EOL] [EOL] hathi_limited_view_packager = packager . PackageFactory ( packager . packages . HathiLimitedView ( ) ) [EOL] with pytest . raises ( NotImplementedError ) : [EOL] hathi_limited_view_packager . transform ( capture_one_packages , dest = [string] ) [EOL] [EOL] [EOL] def test_convert ( hathi_limited_view_sample_packages , monkeypatch ) : [EOL] [EOL] def mock_kdu_convert ( infile , outfile , in_args = None , out_args = None ) : [EOL] shutil . copyfile ( infile , outfile ) [EOL] [EOL] monkeypatch . setattr ( pykdu_compress , [string] , mock_kdu_convert ) [EOL] monkeypatch . setattr ( pykdu_compress , [string] , mock_kdu_convert ) [EOL] [EOL] digital_library_compound_builder = packager . PackageFactory ( packager . packages . DigitalLibraryCompound ( ) ) [EOL] [EOL] with tempfile . TemporaryDirectory ( ) as tmp_dir : [EOL] for package in hathi_limited_view_sample_packages : [EOL] try : [EOL] digital_library_compound_builder . transform ( package , dest = tmp_dir ) [EOL] except errors . ZipFileException as e : [EOL] print ( f"{ e . src_zip_file } [string] " , file = sys . stderr ) [EOL] if len ( e . problem_files ) > [number] : [EOL] print ( f" [string] { [string] . join ( e . problem_files ) }" , file = sys . stderr ) [EOL] problem_file = zipfile . ZipFile ( e . src_zip_file ) [EOL] print ( problem_file . namelist ( ) , file = sys . stderr ) [EOL] raise [EOL] [EOL] [EOL] assert len ( list ( os . scandir ( tmp_dir ) ) ) == [number] [EOL] [EOL] for i , new_package in enumerate ( digital_library_compound_builder . locate_packages ( tmp_dir ) ) : [EOL] assert new_package . metadata [ Metadata . ID ] == hathi_limited_view_sample_packages [ i ] . metadata [ Metadata . ID ] [EOL] [EOL] assert new_package . metadata [ Metadata . PATH ] == tmp_dir [EOL] [EOL] [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,uiucprescon.packager.common.InstantiationTypes]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,uiucprescon.packager.common.InstantiationTypes]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import uiucprescon [EOL] import typing [EOL] import os [EOL] import shutil [EOL] import sys [EOL] [EOL] from uiucprescon import packager [EOL] import pytest [EOL] import pykdu_compress [EOL] [EOL] CAPTURE_ONE_BATCH_NAME = [string] [EOL] DESTINATION_NAME = [string] [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def capture_one_fixture ( tmpdir_factory ) : [EOL] test_dir = tmpdir_factory . mktemp ( [string] , numbered = False ) [EOL] [EOL] os . makedirs ( os . path . join ( test_dir , CAPTURE_ONE_BATCH_NAME ) ) [EOL] os . makedirs ( os . path . join ( test_dir , DESTINATION_NAME ) ) [EOL] [comment] [EOL] [EOL] with open ( os . path . join ( test_dir , CAPTURE_ONE_BATCH_NAME , [string] ) , [string] ) : [EOL] pass [EOL] [EOL] with open ( os . path . join ( test_dir , CAPTURE_ONE_BATCH_NAME , [string] ) , [string] ) : [EOL] pass [EOL] [EOL] with open ( os . path . join ( test_dir , CAPTURE_ONE_BATCH_NAME , [string] ) , [string] ) : [EOL] pass [EOL] [EOL] with open ( os . path . join ( test_dir , CAPTURE_ONE_BATCH_NAME , [string] ) , [string] ) : [EOL] pass [EOL] [EOL] with open ( os . path . join ( test_dir , CAPTURE_ONE_BATCH_NAME , [string] ) , [string] ) : [EOL] pass [EOL] [EOL] yield test_dir [EOL] shutil . rmtree ( test_dir ) [EOL] [EOL] [EOL] def test_capture_one_tiff_to_hathi_tiff ( capture_one_fixture ) : [EOL] source = os . path . join ( capture_one_fixture , CAPTURE_ONE_BATCH_NAME ) [EOL] dest = os . path . join ( capture_one_fixture , DESTINATION_NAME ) [EOL] [EOL] capture_one_packages_factory = packager . PackageFactory ( packager . packages . CaptureOnePackage ( ) ) [EOL] [EOL] [comment] [EOL] capture_one_packages = list ( capture_one_packages_factory . locate_packages ( path = source ) ) [EOL] [EOL] [comment] [EOL] assert len ( capture_one_packages ) == [number] [EOL] [EOL] hathi_tiff_package_factory = packager . PackageFactory ( packager . packages . HathiTiff ( ) ) [EOL] [EOL] for capture_one_package in capture_one_packages : [EOL] hathi_tiff_package_factory . transform ( capture_one_package , dest = dest ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] assert os . path . exists ( os . path . join ( dest , [string] , [string] ) ) [EOL] assert os . path . exists ( os . path . join ( dest , [string] , [string] ) ) [EOL] assert os . path . exists ( os . path . join ( dest , [string] , [string] ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] assert os . path . exists ( os . path . join ( dest , [string] , [string] ) ) [EOL] assert os . path . exists ( os . path . join ( dest , [string] , [string] ) ) [EOL] [EOL] [EOL] def test_capture_one_tiff_package_size ( capture_one_fixture ) : [EOL] source = os . path . join ( capture_one_fixture , CAPTURE_ONE_BATCH_NAME ) [EOL] [EOL] capture_one_packages_factory = packager . PackageFactory ( packager . packages . CaptureOnePackage ( ) ) [EOL] [EOL] [comment] [EOL] capture_one_packages = list ( capture_one_packages_factory . locate_packages ( path = source ) ) [EOL] [EOL] [comment] [EOL] assert len ( capture_one_packages ) == [number] [EOL] [EOL] [EOL] def test_capture_one_tiff_to_digital_library ( capture_one_fixture , monkeypatch ) : [EOL] [EOL] def dummy_kdu_command ( args ) : [EOL] split_args = args . split ( ) [EOL] output_arg = os . path . abspath ( split_args [ [number] ] . strip ( [string] ) ) [EOL] with open ( output_arg , [string] ) as f : [EOL] pass [EOL] pass [EOL] [EOL] def dummy_kdu_compress_cli2 ( infile , outfile , in_args = None , out_args = None ) : [EOL] [comment] [EOL] [comment] [EOL] with open ( outfile , [string] ) as f : [EOL] pass [EOL] pass [EOL] [EOL] monkeypatch . setattr ( pykdu_compress , [string] , dummy_kdu_command ) [EOL] monkeypatch . setattr ( pykdu_compress , [string] , dummy_kdu_compress_cli2 ) [EOL] [EOL] source = os . path . join ( capture_one_fixture , CAPTURE_ONE_BATCH_NAME ) [EOL] dest = os . path . join ( capture_one_fixture , DESTINATION_NAME ) [EOL] [EOL] capture_one_packages_factory = packager . PackageFactory ( packager . packages . CaptureOnePackage ( ) ) [EOL] [EOL] [comment] [EOL] [EOL] capture_one_packages = list ( capture_one_packages_factory . locate_packages ( path = source ) ) [EOL] [EOL] [comment] [EOL] assert len ( capture_one_packages ) == [number] [EOL] [EOL] dl_factory = packager . PackageFactory ( packager . packages . DigitalLibraryCompound ( ) ) [EOL] [EOL] for capture_one_package in capture_one_packages : [EOL] dl_factory . transform ( capture_one_package , dest = dest ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] assert os . path . exists ( os . path . join ( dest , [string] , [string] , [string] ) ) [EOL] [EOL] [comment] [EOL] assert os . path . exists ( os . path . join ( dest , [string] , [string] , [string] ) ) [EOL] [EOL] [comment] [EOL] assert os . path . exists ( os . path . join ( dest , [string] , [string] , [string] ) ) [EOL] [comment] [EOL] assert os . path . exists ( os . path . join ( dest , [string] , [string] , [string] ) ) [EOL] [EOL] [comment] [EOL] assert os . path . exists ( os . path . join ( dest , [string] , [string] , [string] ) ) [EOL] [comment] [EOL] assert os . path . exists ( os . path . join ( dest , [string] , [string] , [string] ) ) [EOL] [EOL] [comment] [EOL] assert os . path . exists ( os . path . join ( dest , [string] , [string] , [string] ) ) [EOL] [comment] [EOL] assert os . path . exists ( os . path . join ( dest , [string] , [string] , [string] ) ) [EOL] [EOL] [comment] [EOL] assert os . path . exists ( os . path . join ( dest , [string] , [string] , [string] ) ) [EOL] [EOL] [comment] [EOL] assert os . path . exists ( os . path . join ( dest , [string] , [string] ) )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str
	0
from typing import List , Tuple , Dict , Any [EOL] import builtins [EOL] import typing [EOL] import uiucprescon [EOL] import os [EOL] import shutil [EOL] import sys [EOL] import tempfile [EOL] from zipfile import ZipFile [EOL] [EOL] import pytest [EOL] from typing import NamedTuple , Dict [EOL] import pathlib [EOL] [EOL] from uiucprescon import packager [EOL] [EOL] [EOL] class PackageTestType ( NamedTuple ) : [EOL] sub_path = ... [EOL] packaging_one_regex = ... [EOL] packaging_two_regex = ... [EOL] [EOL] [EOL] [EOL] sample_packages = { [string] : PackageTestType ( [string] , [string] , [string] ) , [string] : PackageTestType ( [string] , [string] , [string] ) , [string] : PackageTestType ( [string] , [string] , [string] ) , [string] : PackageTestType ( [string] , [string] , [string] ) , } [EOL] [EOL] @ pytest . fixture def capture_one_sample_package ( tmpdir_factory ) : [EOL] test_dir = tmpdir_factory . mktemp ( sample_packages [ [string] ] . sub_path , numbered = False ) [EOL] [EOL] [comment] [EOL] for file_name in [ [string] , [string] , [string] , [string] , [string] ] : [EOL] test_dir . join ( file_name ) . write ( [string] ) [EOL] [EOL] yield test_dir [EOL] shutil . rmtree ( test_dir ) [EOL] [EOL] [EOL] @ pytest . fixture def hathi_tiff_sample_package ( tmpdir_factory ) : [EOL] test_dir = tmpdir_factory . mktemp ( sample_packages [ [string] ] . sub_path , numbered = False ) [EOL] [EOL] hathi_package_one_path = os . path . join ( test_dir , [string] ) [EOL] os . makedirs ( hathi_package_one_path ) [EOL] [EOL] for file_name in [ [string] , [string] , [string] ] : [EOL] pathlib . Path ( os . path . join ( hathi_package_one_path , file_name ) ) . touch ( ) [EOL] [EOL] hathi_package_two_path = os . path . join ( test_dir , [string] ) [EOL] os . makedirs ( hathi_package_two_path ) [EOL] [EOL] for file_name in [ [string] , [string] ] : [EOL] pathlib . Path ( os . path . join ( hathi_package_two_path , file_name ) ) . touch ( ) [EOL] [EOL] yield test_dir [EOL] shutil . rmtree ( test_dir ) [EOL] [EOL] [EOL] @ pytest . fixture def hathi_jp2_sample_package ( tmpdir_factory ) : [EOL] test_dir = tmpdir_factory . mktemp ( sample_packages [ [string] ] . sub_path , numbered = False ) [EOL] [EOL] hathi_package_one_path = os . path . join ( test_dir , [string] ) [EOL] [EOL] os . makedirs ( hathi_package_one_path ) [EOL] [EOL] for file_name in [ [string] , [string] , [string] ] : [EOL] pathlib . Path ( os . path . join ( hathi_package_one_path , file_name ) ) . touch ( ) [EOL] [EOL] hathi_package_two_path = os . path . join ( test_dir , [string] ) [EOL] [EOL] os . makedirs ( hathi_package_two_path ) [EOL] for file_name in [ [string] , [string] ] : [EOL] pathlib . Path ( os . path . join ( hathi_package_two_path , file_name ) ) . touch ( ) [EOL] [EOL] yield test_dir [EOL] shutil . rmtree ( test_dir ) [EOL] [EOL] [EOL] @ pytest . fixture def digital_library_compound_sample_package ( tmpdir_factory ) : [EOL] [comment] [EOL] test_dir = tmpdir_factory . mktemp ( sample_packages [ [string] ] . sub_path , numbered = False ) [EOL] dl_compound_package_one = os . path . join ( test_dir , [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] os . makedirs ( os . path . join ( dl_compound_package_one , [string] ) ) [EOL] for file_name in [ [string] , [string] , [string] ] : [EOL] new_file_full = os . path . join ( dl_compound_package_one , [string] , file_name ) [EOL] [EOL] pathlib . Path ( new_file_full ) . touch ( ) [EOL] [EOL] os . makedirs ( os . path . join ( dl_compound_package_one , [string] ) ) [EOL] for file_name in [ [string] , [string] , [string] ] : [EOL] new_file_full = os . path . join ( dl_compound_package_one , [string] , file_name ) [EOL] [EOL] pathlib . Path ( new_file_full ) . touch ( ) [EOL] [EOL] dl_compound_package_two = os . path . join ( test_dir , [string] ) [EOL] [EOL] os . makedirs ( os . path . join ( dl_compound_package_two , [string] ) ) [EOL] for file_name in [ [string] , [string] ] : [EOL] new_file_full = os . path . join ( dl_compound_package_two , [string] , file_name ) [EOL] pathlib . Path ( new_file_full ) . touch ( ) [EOL] [EOL] os . makedirs ( os . path . join ( dl_compound_package_two , [string] ) ) [EOL] [EOL] for file_name in [ [string] , [string] ] : [EOL] new_file_full = os . path . join ( dl_compound_package_two , [string] , file_name ) [EOL] pathlib . Path ( new_file_full ) . touch ( ) [EOL] [EOL] yield test_dir [EOL] shutil . rmtree ( test_dir ) [EOL] [EOL] [EOL] @ pytest . fixture def source_path ( tmpdir_factory , capture_one_sample_package , hathi_tiff_sample_package , digital_library_compound_sample_package ) : [EOL] test_dir = tmpdir_factory . mktemp ( [string] , numbered = False ) [EOL] [EOL] shutil . copytree ( capture_one_sample_package , os . path . join ( test_dir , sample_packages [ [string] ] . sub_path ) ) [EOL] [EOL] shutil . copytree ( hathi_tiff_sample_package , os . path . join ( test_dir , sample_packages [ [string] ] . sub_path ) ) [EOL] [EOL] shutil . copytree ( digital_library_compound_sample_package , os . path . join ( test_dir , sample_packages [ [string] ] . sub_path ) ) [EOL] [EOL] yield test_dir [EOL] shutil . rmtree ( test_dir ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] , params = [ [string] , [string] , [string] ] ) def hathi_limited_view_sample_packages ( tmpdir_factory , request ) : [EOL] test_dir = tmpdir_factory . mktemp ( f" [string] { request . param }" , numbered = True ) [EOL] sample_package_names = { [string] : [ ( [string] , ( [string] , [ [string] ] + [ f"{ str ( a ) . zfill ( [number] ) } [string] " for a in range ( [number] ) ] + [ f"{ str ( a ) . zfill ( [number] ) } [string] " for a in range ( [number] ) ] + [ f"{ str ( a ) . zfill ( [number] ) } [string] " for a in range ( [number] ) ] ) ) ] , [string] : [ ( [string] , ( [string] , [ [string] ] + [ f"{ str ( a ) . zfill ( [number] ) } [string] " for a in range ( [number] ) ] + [ f"{ str ( a ) . zfill ( [number] ) } [string] " for a in range ( [number] ) ] + [ f"{ str ( a ) . zfill ( [number] ) } [string] " for a in range ( [number] ) ] ) ) ] , [string] : [ ( [string] , ( [string] , [ [string] ] + [ f"{ str ( a ) . zfill ( [number] ) } [string] " for a in range ( [number] ) ] + [ f"{ str ( a ) . zfill ( [number] ) } [string] " for a in range ( [number] ) ] + [ f"{ str ( a ) . zfill ( [number] ) } [string] " for a in range ( [number] ) ] ) ) ] } [EOL] [EOL] pkg_data = sample_package_names [ request . param ] [EOL] [EOL] [comment] [EOL] pkg_dir = test_dir . mkdir ( request . param ) [EOL] [EOL] tmp_dir = test_dir . mkdir ( f" [string] { request . param }" ) [EOL] for mets_file_filename , archive_data in pkg_data : [EOL] [comment] [EOL] pkg_dir . join ( mets_file_filename ) . write ( [string] ) [EOL] bib_id , zip_content = archive_data [EOL] [EOL] [comment] [EOL] with ZipFile ( pkg_dir . join ( f"{ bib_id } [string] " ) , [string] ) as myzip : [EOL] build_package_dir = tmp_dir . mkdir ( bib_id ) [EOL] for zipped_file in zip_content : [EOL] generated_file = build_package_dir . join ( zipped_file ) [EOL] generated_file . write ( [string] ) [EOL] [EOL] arcname = os . path . join ( bib_id , zipped_file ) [EOL] myzip . write ( generated_file , arcname = arcname ) [EOL] [EOL] hathi_limited_view_packager = packager . PackageFactory ( packager . packages . HathiLimitedView ( ) ) [EOL] [EOL] yield list ( hathi_limited_view_packager . locate_packages ( path = str ( test_dir ) ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Dict[builtins.str,PackageTestType]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,PackageTestType]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,PackageTestType]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,PackageTestType]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,PackageTestType]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,PackageTestType]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,PackageTestType]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,PackageTestType]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import uiucprescon [EOL] import typing [EOL] import os [EOL] import shutil [EOL] [EOL] from pytest_bdd import scenario , given , when , then [EOL] from . . conftest import sample_packages [EOL] from uiucprescon import packager [EOL] import pytest [EOL] [EOL] [EOL] @ pytest . fixture def new_path ( tmpdir_factory ) : [EOL] test_dir = tmpdir_factory . mktemp ( [string] , numbered = False ) [EOL] yield test_dir [EOL] shutil . rmtree ( test_dir ) [EOL] [EOL] [EOL] @ scenario ( [string] , [string] [string] ) def test_capture_one_session_two_object ( ) : [EOL] pass [EOL] [EOL] [EOL] @ given ( [string] ) def package_objects ( source_path , source_package_type ) : [EOL] source_pkg = eval ( f" [string] { source_package_type }" ) [EOL] source = os . path . join ( source_path , sample_packages [ source_package_type ] [ [number] ] ) [EOL] [EOL] packages_factory = packager . PackageFactory ( source_pkg ( ) ) [EOL] packages = list ( packages_factory . locate_packages ( path = source ) ) [EOL] return packages [EOL] [EOL] [EOL] @ given ( [string] ) def new_path_to_save_to ( new_path , new_package_type ) : [EOL] dest = os . path . join ( new_path , new_package_type ) [EOL] os . mkdir ( dest ) [EOL] return dest [EOL] [EOL] [EOL] @ when ( [string] ) def step_impl ( package_objects , new_path_to_save_to , new_package_type ) : [EOL] dest_pkg = eval ( f" [string] { new_package_type }" ) [EOL] new_package_factory = dest_pkg ( ) [EOL] for package in package_objects : [EOL] new_package_factory . transform ( package , new_path_to_save_to ) [EOL] [EOL] [EOL] @ then ( [string] [string] ) def step_impl ( new_path_to_save_to , new_package_type ) : [EOL] if new_package_type == [string] : [EOL] assert os . path . exists ( os . path . join ( new_path_to_save_to , [string] , [string] ) ) [EOL] assert os . path . exists ( os . path . join ( new_path_to_save_to , [string] , [string] ) ) [EOL] assert os . path . exists ( os . path . join ( new_path_to_save_to , [string] , [string] ) ) [EOL] assert os . path . exists ( os . path . join ( new_path_to_save_to , [string] , [string] ) ) [EOL] assert os . path . exists ( os . path . join ( new_path_to_save_to , [string] , [string] ) ) [EOL] elif new_package_type == [string] : [EOL] [EOL] assert os . path . exists ( os . path . join ( new_path_to_save_to , [string] ) ) [EOL] assert os . path . exists ( os . path . join ( new_path_to_save_to , [string] ) ) [EOL] assert os . path . exists ( os . path . join ( new_path_to_save_to , [string] ) ) [EOL] [EOL] assert os . path . exists ( os . path . join ( new_path_to_save_to , [string] ) ) [EOL] assert os . path . exists ( os . path . join ( new_path_to_save_to , [string] ) ) [EOL] else : [EOL] pytest . fail ( [string] . format ( new_package_type ) ) [EOL] [EOL] [EOL] @ scenario ( [string] , [string] [string] ) def test_capture_one_session_two_object_and_ds_store ( ) : [EOL] pass [EOL] [EOL] [EOL] @ given ( [string] [string] ) def capture_one_session_w_ds_store ( capture_one_sample_package ) : [EOL] source_dir = os . path . join ( capture_one_sample_package ) [EOL] [EOL] with open ( os . path . join ( source_dir , [string] ) , [string] ) as wf : [EOL] pass [EOL] capture_one_packages_factory = packager . PackageFactory ( packager . packages . CaptureOnePackage ( ) ) [EOL] [EOL] [comment] [EOL] return list ( capture_one_packages_factory . locate_packages ( path = source_dir ) ) [EOL] [EOL] [EOL] @ when ( [string] ) def step_impl ( capture_one_session_w_ds_store , new_path ) : [EOL] hathi_tiff_packages_factory = packager . PackageFactory ( packager . packages . HathiTiff ( ) ) [EOL] dest = os . path . join ( new_path , [string] ) [EOL] for package in capture_one_session_w_ds_store : [EOL] hathi_tiff_packages_factory . transform ( package , dest ) [EOL] [EOL] [EOL] @ then ( [string] ) def step_impl ( new_path ) : [EOL] new_package = os . path . join ( new_path , [string] ) [EOL] assert os . path . exists ( os . path . join ( new_package , [string] , [string] ) ) [EOL] assert os . path . exists ( os . path . join ( new_package , [string] , [string] ) ) [EOL] assert os . path . exists ( os . path . join ( new_package , [string] , [string] ) ) [EOL] assert os . path . exists ( os . path . join ( new_package , [string] , [string] ) ) [EOL] assert os . path . exists ( os . path . join ( new_package , [string] , [string] ) ) [EOL] [EOL] [EOL] @ scenario ( [string] , [string] [string] ) def test_capture_one_session_two_object_and_thumbs ( ) : [EOL] pass [EOL] [EOL] [EOL] @ given ( [string] [string] ) def capture_one_session_w_thumbs ( capture_one_sample_package ) : [EOL] source_dir = os . path . join ( capture_one_sample_package ) [EOL] [EOL] with open ( os . path . join ( source_dir , [string] ) , [string] ) as wf : [EOL] pass [EOL] capture_one_packages_factory = packager . PackageFactory ( packager . packages . CaptureOnePackage ( ) ) [EOL] [EOL] [comment] [EOL] return list ( capture_one_packages_factory . locate_packages ( path = source_dir ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import uiucprescon [EOL] import typing [EOL] import os [EOL] import re [EOL] import shutil [EOL] from uiucprescon import packager [EOL] [EOL] from pytest_bdd import scenario , given , when , then [EOL] import pytest [EOL] [EOL] from uiucprescon . packager import Metadata [EOL] from . . conftest import sample_packages [EOL] [EOL] [EOL] @ scenario ( [string] , [string] ) def test_load_session_objects ( ) : [EOL] pass [EOL] [EOL] [EOL] @ given ( [string] ) def package_objects ( source_path , package_type ) : [EOL] pkg_factory_type = eval ( f" [string] { package_type }" ) [EOL] [EOL] source = os . path . join ( source_path , sample_packages [ package_type ] [ [number] ] ) [EOL] [EOL] capture_one_packages_factory = packager . PackageFactory ( pkg_factory_type ( ) ) [EOL] [EOL] [comment] [EOL] packages = list ( capture_one_packages_factory . locate_packages ( path = source ) ) [EOL] return packages [EOL] [EOL] [EOL] @ then ( [string] ) def two_packages ( package_objects ) : [EOL] assert len ( package_objects ) == [number] [EOL] [EOL] [EOL] @ then ( [string] ) def step_impl ( package_objects , package_type ) : [EOL] first_group_regex = sample_packages [ package_type ] [ [number] ] [EOL] package_objects = sorted ( package_objects , key = lambda p : p . metadata [ Metadata . ID ] ) [EOL] object_000001 = package_objects [ [number] ] [EOL] [EOL] assert object_000001 . metadata [ Metadata . ID ] == [string] [EOL] [EOL] assert len ( object_000001 ) == [number] [EOL] [EOL] [comment] [EOL] checker = re . compile ( first_group_regex ) [EOL] [EOL] for item in object_000001 : [EOL] for instance_type , instance in item . instantiations . items ( ) : [EOL] for file_ in instance . files : [EOL] basename = os . path . basename ( file_ ) [EOL] assert checker . match ( basename ) [EOL] [EOL] [EOL] @ then ( [string] ) def step_impl ( package_objects , package_type ) : [EOL] second_group_regex = sample_packages [ package_type ] [ [number] ] [EOL] package_objects = sorted ( package_objects , key = lambda p : p . metadata [ Metadata . ID ] ) [EOL] object_000002 = package_objects [ [number] ] [EOL] assert object_000002 . metadata [ Metadata . ID ] == [string] [EOL] [EOL] assert len ( object_000002 ) == [number] [EOL] [EOL] [comment] [EOL] checker = re . compile ( second_group_regex ) [EOL] [EOL] for item in object_000002 : [EOL] for instance_type , instance in item . instantiations . items ( ) : [EOL] for file_ in instance . files : [EOL] basename = os . path . basename ( file_ ) [EOL] assert checker . match ( basename ) [EOL] [EOL] [EOL] @ scenario ( [string] , [string] ) def test_hathi_tiff_two_object_and_sidecar_text ( ) : [EOL] pass [EOL] [EOL] [EOL] @ given ( [string] ) def hathi_tiff_package_w_sidecar_text ( hathi_tiff_sample_package ) : [EOL] package_one_path = os . path . join ( hathi_tiff_sample_package , [string] ) [EOL] for i in range ( [number] ) : [EOL] with open ( os . path . join ( package_one_path , f" [string] { i + [number] } [string] " ) , [string] ) : [EOL] pass [EOL] [EOL] package_two_path = os . path . join ( hathi_tiff_sample_package , [string] ) [EOL] for i in range ( [number] ) : [EOL] with open ( os . path . join ( package_two_path , f" [string] { i + [number] } [string] " ) , [string] ) : [EOL] pass [EOL] package_factory = packager . PackageFactory ( packager . packages . HathiTiff ( ) ) [EOL] [EOL] packages = list ( package_factory . locate_packages ( hathi_tiff_sample_package ) ) [EOL] return packages [EOL] [EOL] [EOL] @ then ( [string] ) def step_impl ( hathi_tiff_package_w_sidecar_text ) : [EOL] assert len ( hathi_tiff_package_w_sidecar_text ) == [number] [EOL] [EOL] [EOL] @ then ( [string] ) def step_impl ( hathi_tiff_package_w_sidecar_text ) : [EOL] for package in hathi_tiff_package_w_sidecar_text : [EOL] for item in package . items : [EOL] for instance in item . instantiations . values ( ) : [EOL] num_sidecar_file = len ( instance . sidecar_files ) [EOL] if num_sidecar_file != [number] : [EOL] pytest . fail ( f"{ instance } [string] { num_sidecar_file } [string] " ) [EOL] [EOL] @ scenario ( [string] , [string] ) def test_hathi_jp2_two_object_and_sidecar_text ( ) : [EOL] pass [EOL] [EOL] [EOL] @ given ( [string] ) def hathi_jp2_package_w_sidecar_text ( hathi_jp2_sample_package ) : [EOL] package_one_path = os . path . join ( hathi_jp2_sample_package , [string] ) [EOL] for i in range ( [number] ) : [EOL] with open ( os . path . join ( package_one_path , f" [string] { i + [number] } [string] " ) , [string] ) : [EOL] pass [EOL] [EOL] package_two_path = os . path . join ( hathi_jp2_sample_package , [string] ) [EOL] for i in range ( [number] ) : [EOL] with open ( os . path . join ( package_two_path , f" [string] { i + [number] } [string] " ) , [string] ) : [EOL] pass [EOL] package_factory = packager . PackageFactory ( packager . packages . HathiJp2 ( ) ) [EOL] [EOL] packages = list ( package_factory . locate_packages ( hathi_jp2_sample_package ) ) [EOL] return packages [EOL] [EOL] @ then ( [string] ) def step_impl ( hathi_jp2_package_w_sidecar_text ) : [EOL] assert len ( hathi_jp2_package_w_sidecar_text ) == [number] [EOL] [EOL] [EOL] @ then ( [string] ) def step_impl ( hathi_jp2_package_w_sidecar_text ) : [EOL] for package in hathi_jp2_package_w_sidecar_text : [EOL] for item in package . items : [EOL] for instance in item . instantiations . values ( ) : [EOL] num_sidecar_file = len ( instance . sidecar_files ) [EOL] if num_sidecar_file != [number] : [EOL] pytest . fail ( f"{ instance } [string] { num_sidecar_file } [string] " ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0