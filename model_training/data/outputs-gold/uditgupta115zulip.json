import os [EOL] [EOL] ZULIP_VERSION = [string] [EOL] [comment] [EOL] zulip_git_version_file = os . path . join ( os . path . dirname ( os . path . abspath ( __file__ ) ) , [string] ) [EOL] if os . path . exists ( zulip_git_version_file ) : [EOL] with open ( zulip_git_version_file ) as f : [EOL] version = f . read ( ) . strip ( ) [EOL] if version : [EOL] ZULIP_VERSION = version [EOL] [EOL] LATEST_MAJOR_VERSION = [string] [EOL] LATEST_RELEASE_VERSION = [string] [EOL] LATEST_RELEASE_ANNOUNCEMENT = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] PROVISION_VERSION = [string] [EOL]	0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Type [EOL] import typing [EOL] import zilencer [EOL] from django import forms [EOL] [EOL] class EnterpriseToSForm ( forms . Form ) : [EOL] full_name = forms . CharField ( max_length = [number] ) [EOL] company = forms . CharField ( max_length = [number] ) [EOL] terms = forms . BooleanField ( required = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zilencer.forms.EnterpriseToSForm]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[zilencer.forms.EnterpriseToSForm]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[zilencer.forms.EnterpriseToSForm]$ 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , migrations . DeleteModel ( name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
	0
	0
from typing import List [EOL] import typing [EOL] import time [EOL] [EOL] from typing import Tuple [EOL] [EOL] def nagios_from_file ( results_file ) : [EOL] [comment] [EOL] [docstring] [EOL] [EOL] with open ( results_file ) as f : [EOL] data = f . read ( ) . strip ( ) [EOL] pieces = data . split ( [string] ) [EOL] [EOL] if not len ( pieces ) == [number] : [EOL] state = [string] [EOL] ret = [number] [EOL] data = [string] [EOL] else : [EOL] timestamp = int ( pieces [ [number] ] ) [EOL] [EOL] time_diff = time . time ( ) - timestamp [EOL] if time_diff > [number] * [number] : [EOL] ret = [number] [EOL] state = [string] [EOL] data = [string] [EOL] else : [EOL] ret = int ( pieces [ [number] ] ) [EOL] state = pieces [ [number] ] [EOL] data = pieces [ [number] ] [EOL] [EOL] return ( ret , [string] % ( state , data ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any , Set [EOL] import typing [EOL] import argparse [EOL] import argparse [EOL] import os [EOL] import sys [EOL] [EOL] from typing import Set [EOL] [EOL] ZULIP_PATH = os . path . dirname ( os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) ) [EOL] sys . path . append ( ZULIP_PATH ) [EOL] from scripts . lib . zulip_tools import get_environment , get_recent_deployments , parse_cache_script_args , purge_unused_caches [EOL] [EOL] ENV = get_environment ( ) [EOL] EMOJI_CACHE_PATH = [string] [EOL] if ENV == [string] : [EOL] EMOJI_CACHE_PATH = os . path . join ( os . environ [ [string] ] , [string] ) [EOL] [EOL] def get_caches_in_use ( threshold_days ) : [EOL] [comment] [EOL] setups_to_check = set ( [ ZULIP_PATH , ] ) [EOL] caches_in_use = set ( ) [EOL] [EOL] if ENV == [string] : [EOL] setups_to_check |= get_recent_deployments ( threshold_days ) [EOL] if ENV == [string] : [EOL] CACHE_SYMLINK = os . path . join ( ZULIP_PATH , [string] , [string] , [string] ) [EOL] CURRENT_CACHE = os . path . dirname ( os . path . realpath ( CACHE_SYMLINK ) ) [EOL] caches_in_use . add ( CURRENT_CACHE ) [EOL] [EOL] for setup_dir in setups_to_check : [EOL] emoji_link_path = os . path . join ( setup_dir , [string] ) [EOL] if not os . path . islink ( emoji_link_path ) : [EOL] [comment] [EOL] [comment] [EOL] continue [EOL] [comment] [EOL] caches_in_use . add ( os . path . dirname ( os . readlink ( emoji_link_path ) ) ) [EOL] return caches_in_use [EOL] [EOL] def main ( args ) : [EOL] caches_in_use = get_caches_in_use ( args . threshold_days ) [EOL] purge_unused_caches ( EMOJI_CACHE_PATH , caches_in_use , [string] , args ) [EOL] [EOL] if __name__ == [string] : [EOL] args = parse_cache_script_args ( [string] ) [EOL] main ( args ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0
[comment] [EOL] from typing import Any , Set [EOL] import typing [EOL] import argparse [EOL] import builtins [EOL] import argparse [EOL] import os [EOL] import sys [EOL] [EOL] from typing import Set [EOL] [EOL] ZULIP_PATH = os . path . dirname ( os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) ) [EOL] sys . path . append ( ZULIP_PATH ) [EOL] from scripts . lib . hash_reqs import expand_reqs , hash_deps [EOL] from scripts . lib . zulip_tools import get_environment , get_recent_deployments , parse_cache_script_args , purge_unused_caches [EOL] [EOL] ENV = get_environment ( ) [EOL] VENV_CACHE_DIR = [string] [EOL] if ENV == [string] : [EOL] VENV_CACHE_DIR = os . path . join ( os . environ [ [string] ] , [string] ) [EOL] [EOL] def get_caches_in_use ( threshold_days ) : [EOL] [comment] [EOL] setups_to_check = set ( [ ZULIP_PATH , ] ) [EOL] caches_in_use = set ( ) [EOL] [EOL] def add_current_venv_cache ( venv_name ) : [EOL] CACHE_SYMLINK = os . path . join ( os . path . dirname ( ZULIP_PATH ) , venv_name ) [EOL] CURRENT_CACHE = os . path . dirname ( os . path . realpath ( CACHE_SYMLINK ) ) [EOL] caches_in_use . add ( CURRENT_CACHE ) [EOL] [EOL] if ENV == [string] : [EOL] setups_to_check |= get_recent_deployments ( threshold_days ) [EOL] if ENV == [string] : [EOL] add_current_venv_cache ( [string] ) [EOL] add_current_venv_cache ( [string] ) [EOL] [EOL] for path in setups_to_check : [EOL] reqs_dir = os . path . join ( path , [string] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if not os . path . exists ( reqs_dir ) : [EOL] continue [EOL] for filename in os . listdir ( reqs_dir ) : [EOL] requirements_file = os . path . join ( reqs_dir , filename ) [EOL] deps = expand_reqs ( requirements_file ) [EOL] hash_val = hash_deps ( deps ) [EOL] caches_in_use . add ( os . path . join ( VENV_CACHE_DIR , hash_val ) ) [EOL] [EOL] return caches_in_use [EOL] [EOL] def main ( args ) : [EOL] caches_in_use = get_caches_in_use ( args . threshold_days ) [EOL] purge_unused_caches ( VENV_CACHE_DIR , caches_in_use , [string] , args ) [EOL] [EOL] if __name__ == [string] : [EOL] args = parse_cache_script_args ( [string] ) [EOL] main ( args ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0
	0
	0
	0
[comment] [EOL] [comment] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations , models [EOL] import django . db . models . deletion [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . IntegerField ( ) ) , ( [string] , models . BooleanField ( default = False ) ) , ( [string] , models . BooleanField ( default = False ) ) , ( [string] , models . IntegerField ( null = True ) ) , ( [string] , models . IntegerField ( null = True ) ) , ( [string] , models . DecimalField ( decimal_places = [number] , max_digits = [number] , null = True ) ) , ( [string] , models . DateTimeField ( ) ) , ( [string] , models . SmallIntegerField ( ) ) , ( [string] , models . DateTimeField ( ) ) , ( [string] , models . DateTimeField ( db_index = True ) ) , ( [string] , models . SmallIntegerField ( ) ) , ( [string] , models . SmallIntegerField ( default = [number] ) ) , ( [string] , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = [string] ) ) , ] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
	0
	0
from typing import Any [EOL] import typing [EOL] import jinja2 [EOL] from typing import Any [EOL] [EOL] from django . template . defaultfilters import slugify , pluralize [EOL] from django . urls import reverse [EOL] from django . utils import translation [EOL] from django . utils . timesince import timesince [EOL] from jinja2 import Environment [EOL] from two_factor . templatetags . two_factor import device_action [EOL] [EOL] from zerver . templatetags . app_filters import display_list , render_markdown_path [EOL] [EOL] [EOL] def environment ( ** options ) : [EOL] env = Environment ( ** options ) [EOL] env . globals . update ( { [string] : reverse , [string] : render_markdown_path , } ) [EOL] [EOL] env . install_gettext_translations ( translation , True ) [EOL] [EOL] env . filters [ [string] ] = slugify [EOL] env . filters [ [string] ] = pluralize [EOL] env . filters [ [string] ] = display_list [EOL] env . filters [ [string] ] = device_action [EOL] env . filters [ [string] ] = timesince [EOL] [EOL] return env [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jinja2.Environment$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
[comment] [EOL] default_app_config = [string] [EOL]	0 0 $builtins.str$ 0 0 0
from typing import List , Any , Dict [EOL] import django [EOL] import typing [EOL] import builtins [EOL] import re [EOL] from typing import Any , Dict [EOL] [EOL] from django . http import HttpRequest [EOL] from django . views . debug import SafeExceptionReporterFilter [EOL] [EOL] class ZulipExceptionReporterFilter ( SafeExceptionReporterFilter ) : [EOL] def get_post_parameters ( self , request ) : [EOL] filtered_post = SafeExceptionReporterFilter . get_post_parameters ( self , request ) . copy ( ) [EOL] filtered_vars = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] for var in filtered_vars : [EOL] if var in filtered_post : [EOL] filtered_post [ var ] = [string] [EOL] return filtered_post [EOL] [EOL] def clean_data_from_query_parameters ( val ) : [EOL] return re . sub ( [string] , [string] , val ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $django.http.HttpRequest$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $django.http.HttpRequest$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import builtins [EOL] from typing import Tuple , Union , Callable , Type , List , Optional , Any , TypeVar , Dict [EOL] import typing [EOL] import zerver [EOL] from typing import TypeVar , Callable , Optional , List , Dict , Union , Tuple , Any [EOL] from typing_extensions import TypedDict [EOL] from django . http import HttpResponse [EOL] [EOL] ViewFuncT = TypeVar ( [string] , bound = Callable [ ... , HttpResponse ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] Validator = Callable [ [ str , object ] , Optional [ str ] ] [EOL] ExtendedValidator = Callable [ [ str , str , object ] , Optional [ str ] ] [EOL] RealmUserValidator = Callable [ [ int , List [ int ] , bool ] , Optional [ str ] ] [EOL] [EOL] ProfileDataElement = TypedDict ( [string] , { [string] : int , [string] : str , [string] : int , [string] : Optional [ str ] , [string] : Optional [ str ] , [string] : int , [string] : str , [string] : Optional [ str ] , } , total = False ) [comment] [EOL] ProfileData = List [ ProfileDataElement ] [EOL] [EOL] FieldElement = Tuple [ int , str , Validator , Callable [ [ Any ] , Any ] , str ] [EOL] ExtendedFieldElement = Tuple [ int , str , ExtendedValidator , Callable [ [ Any ] , Any ] , str ] [EOL] UserFieldElement = Tuple [ int , str , RealmUserValidator , Callable [ [ Any ] , Any ] , str ] [EOL] [EOL] ProfileFieldData = Dict [ str , Union [ Dict [ str , str ] , str ] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,builtins.str],builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Callable , Pattern , Iterable , Match , Optional , Any , Set [EOL] import typing [EOL] import zerver [EOL] import builtins [EOL] [docstring] [EOL] import re [EOL] import ujson [EOL] from django . utils . translation import ugettext as _ [EOL] from django . core . exceptions import ValidationError [EOL] from django . core . validators import validate_email , URLValidator [EOL] from typing import Iterable , Optional , Tuple , cast [EOL] [EOL] from datetime import datetime [EOL] from zerver . lib . request import JsonableError [EOL] from zerver . lib . types import Validator , ProfileFieldData [EOL] [EOL] def check_string ( var_name , val ) : [EOL] if not isinstance ( val , str ) : [EOL] return _ ( [string] ) % ( var_name , ) [EOL] return None [EOL] [EOL] def check_required_string ( var_name , val ) : [EOL] error = check_string ( var_name , val ) [EOL] if error : [EOL] return error [EOL] [EOL] val = cast ( str , val ) [EOL] if not val . strip ( ) : [EOL] return _ ( [string] ) . format ( item = var_name ) [EOL] [EOL] return None [EOL] [EOL] def check_short_string ( var_name , val ) : [EOL] return check_capped_string ( [number] ) ( var_name , val ) [EOL] [EOL] def check_capped_string ( max_length ) : [EOL] def validator ( var_name , val ) : [EOL] if not isinstance ( val , str ) : [EOL] return _ ( [string] ) % ( var_name , ) [EOL] if len ( val ) > max_length : [EOL] return _ ( [string] ) . format ( var_name = var_name , max_length = max_length ) [EOL] return None [EOL] return validator [EOL] [EOL] def check_string_fixed_length ( length ) : [EOL] def validator ( var_name , val ) : [EOL] if not isinstance ( val , str ) : [EOL] return _ ( [string] ) % ( var_name , ) [EOL] if len ( val ) != length : [EOL] return _ ( [string] ) . format ( var_name = var_name , target_length = length , length = len ( val ) ) [EOL] return None [EOL] return validator [EOL] [EOL] def check_long_string ( var_name , val ) : [EOL] return check_capped_string ( [number] ) ( var_name , val ) [EOL] [EOL] def check_date ( var_name , val ) : [EOL] if not isinstance ( val , str ) : [EOL] return _ ( [string] ) % ( var_name , ) [EOL] try : [EOL] datetime . strptime ( val , [string] ) [EOL] except ValueError : [EOL] return _ ( [string] ) % ( var_name , ) [EOL] return None [EOL] [EOL] def check_int ( var_name , val ) : [EOL] if not isinstance ( val , int ) : [EOL] return _ ( [string] ) % ( var_name , ) [EOL] return None [EOL] [EOL] def check_float ( var_name , val ) : [EOL] if not isinstance ( val , float ) : [EOL] return _ ( [string] ) % ( var_name , ) [EOL] return None [EOL] [EOL] def check_bool ( var_name , val ) : [EOL] if not isinstance ( val , bool ) : [EOL] return _ ( [string] ) % ( var_name , ) [EOL] return None [EOL] [EOL] def check_color ( var_name , val ) : [EOL] if not isinstance ( val , str ) : [EOL] return _ ( [string] ) % ( var_name , ) [EOL] valid_color_pattern = re . compile ( [string] ) [EOL] matched_results = valid_color_pattern . match ( val ) [EOL] if not matched_results : [EOL] return _ ( [string] ) % ( var_name , ) [EOL] return None [EOL] [EOL] def check_none_or ( sub_validator ) : [EOL] def f ( var_name , val ) : [EOL] if val is None : [EOL] return None [EOL] else : [EOL] return sub_validator ( var_name , val ) [EOL] return f [EOL] [EOL] def check_list ( sub_validator , length = None ) : [EOL] def f ( var_name , val ) : [EOL] if not isinstance ( val , list ) : [EOL] return _ ( [string] ) % ( var_name , ) [EOL] [EOL] if length is not None and length != len ( val ) : [EOL] return ( _ ( [string] ) % { [string] : var_name , [string] : length } ) [EOL] [EOL] if sub_validator : [EOL] for i , item in enumerate ( val ) : [EOL] vname = [string] % ( var_name , i ) [EOL] error = sub_validator ( vname , item ) [EOL] if error : [EOL] return error [EOL] [EOL] return None [EOL] return f [EOL] [EOL] def check_dict ( required_keys = [ ] , optional_keys = [ ] , value_validator = None , _allow_only_listed_keys = False ) : [EOL] def f ( var_name , val ) : [EOL] if not isinstance ( val , dict ) : [EOL] return _ ( [string] ) % ( var_name , ) [EOL] [EOL] for k , sub_validator in required_keys : [EOL] if k not in val : [EOL] return ( _ ( [string] ) % { [string] : k , [string] : var_name } ) [EOL] vname = [string] % ( var_name , k ) [EOL] error = sub_validator ( vname , val [ k ] ) [EOL] if error : [EOL] return error [EOL] [EOL] for k , sub_validator in optional_keys : [EOL] if k in val : [EOL] vname = [string] % ( var_name , k ) [EOL] error = sub_validator ( vname , val [ k ] ) [EOL] if error : [EOL] return error [EOL] [EOL] if value_validator : [EOL] for key in val : [EOL] vname = [string] % ( var_name , ) [EOL] error = value_validator ( vname , val [ key ] ) [EOL] if error : [EOL] return error [EOL] [EOL] if _allow_only_listed_keys : [EOL] required_keys_set = set ( x [ [number] ] for x in required_keys ) [EOL] optional_keys_set = set ( x [ [number] ] for x in optional_keys ) [EOL] delta_keys = set ( val . keys ( ) ) - required_keys_set - optional_keys_set [EOL] if len ( delta_keys ) != [number] : [EOL] return _ ( [string] ) % ( [string] . join ( list ( delta_keys ) ) , ) [EOL] [EOL] return None [EOL] [EOL] return f [EOL] [EOL] def check_dict_only ( required_keys , optional_keys = [ ] ) : [EOL] return check_dict ( required_keys , optional_keys , _allow_only_listed_keys = True ) [EOL] [EOL] def check_variable_type ( allowed_type_funcs ) : [EOL] [docstring] [EOL] def enumerated_type_check ( var_name , val ) : [EOL] for func in allowed_type_funcs : [EOL] if not func ( var_name , val ) : [EOL] return None [EOL] return _ ( [string] ) % ( var_name , ) [EOL] return enumerated_type_check [EOL] [EOL] def equals ( expected_val ) : [EOL] def f ( var_name , val ) : [EOL] if val != expected_val : [EOL] return ( _ ( [string] ) % { [string] : var_name , [string] : expected_val , [string] : val } ) [EOL] return None [EOL] return f [EOL] [EOL] def validate_login_email ( email ) : [EOL] try : [EOL] validate_email ( email ) [EOL] except ValidationError as err : [EOL] raise JsonableError ( str ( err . message ) ) [EOL] [EOL] def check_url ( var_name , val ) : [EOL] [comment] [EOL] string_msg = check_string ( var_name , val ) [EOL] if string_msg is not None : [EOL] return string_msg [EOL] [comment] [EOL] validate = URLValidator ( ) [EOL] try : [EOL] validate ( val ) [EOL] return None [EOL] except ValidationError : [EOL] return _ ( [string] ) % ( var_name , ) [EOL] [EOL] def check_external_account_url_pattern ( var_name , val ) : [EOL] error = check_string ( var_name , val ) [EOL] if error : [EOL] return error [EOL] val = cast ( str , val ) [EOL] [EOL] if val . count ( [string] ) != [number] : [EOL] return _ ( [string] ) [EOL] url_val = val . replace ( [string] , [string] ) [EOL] [EOL] error = check_url ( var_name , url_val ) [EOL] if error : [EOL] return error [EOL] return None [EOL] [EOL] def validate_choice_field_data ( field_data ) : [EOL] [docstring] [EOL] validator = check_dict_only ( [ ( [string] , check_required_string ) , ( [string] , check_required_string ) , ] ) [EOL] [EOL] for key , value in field_data . items ( ) : [EOL] if not key . strip ( ) : [EOL] return _ ( [string] ) . format ( item = [string] ) [EOL] [EOL] error = validator ( [string] , value ) [EOL] if error : [EOL] return error [EOL] [EOL] return None [EOL] [EOL] def validate_choice_field ( var_name , field_data , value ) : [EOL] [docstring] [EOL] field_data_dict = ujson . loads ( field_data ) [EOL] if value not in field_data_dict : [EOL] msg = _ ( [string] ) [EOL] return msg . format ( value = value , field_name = var_name ) [EOL] return None [EOL] [EOL] def check_widget_content ( widget_content ) : [EOL] if not isinstance ( widget_content , dict ) : [EOL] return [string] [EOL] [EOL] if [string] not in widget_content : [EOL] return [string] [EOL] [EOL] if [string] not in widget_content : [EOL] return [string] [EOL] [EOL] widget_type = widget_content [ [string] ] [EOL] extra_data = widget_content [ [string] ] [EOL] [EOL] if not isinstance ( extra_data , dict ) : [EOL] return [string] [EOL] [EOL] if widget_type == [string] : [EOL] [EOL] if [string] not in extra_data : [EOL] return [string] [EOL] [EOL] if extra_data [ [string] ] == [string] : [EOL] check_choices = check_list ( check_dict ( [ ( [string] , check_string ) , ( [string] , check_string ) , ( [string] , check_string ) , ] ) , ) [EOL] [EOL] checker = check_dict ( [ ( [string] , check_string ) , ( [string] , check_choices ) , ] ) [EOL] [EOL] msg = checker ( [string] , extra_data ) [EOL] if msg : [EOL] return msg [EOL] [EOL] return None [EOL] [EOL] return [string] + extra_data [ [string] ] [EOL] [EOL] return [string] + widget_type [EOL] [EOL] [EOL] [comment] [EOL] def to_non_negative_int ( s , max_int_size = [number] ** [number] - [number] ) : [EOL] x = int ( s ) [EOL] if x < [number] : [EOL] raise ValueError ( [string] ) [EOL] if x > max_int_size : [EOL] raise ValueError ( [string] % ( x , max_int_size ) ) [EOL] return x [EOL] [EOL] def check_string_or_int_list ( var_name , val ) : [EOL] if isinstance ( val , str ) : [EOL] return None [EOL] [EOL] if not isinstance ( val , list ) : [EOL] return _ ( [string] ) % ( var_name , ) [EOL] [EOL] return check_list ( check_int ) ( var_name , val ) [EOL] [EOL] def check_string_or_int ( var_name , val ) : [EOL] if isinstance ( val , str ) or isinstance ( val , int ) : [EOL] return None [EOL] [EOL] return _ ( [string] ) % ( var_name , ) [EOL]	typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Any , Dict [EOL] import typing [EOL] import requests [EOL] import builtins [EOL] import requests [EOL] import jwt [EOL] from typing import Any , Dict , Optional [EOL] import time [EOL] [EOL] def request_zoom_video_call_url ( user_id , api_key , api_secret ) : [EOL] encodedToken = jwt . encode ( { [string] : api_key , [string] : int ( round ( time . time ( ) * [number] ) ) + [number] } , api_secret , algorithm = [string] ) . decode ( [string] ) [EOL] [EOL] response = requests . post ( [string] + user_id + [string] , headers = { [string] : [string] + encodedToken , [string] : [string] } , json = { } ) [EOL] [EOL] try : [EOL] response . raise_for_status ( ) [EOL] except Exception : [EOL] return None [EOL] [EOL] return response . json ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , Iterator , Any , IO [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] [EOL] [EOL] import fcntl [EOL] from contextlib import contextmanager [EOL] from typing import Iterator , IO , Any , Union [EOL] [EOL] @ contextmanager def flock ( lockfile , shared = False ) : [EOL] [docstring] [EOL] [EOL] fcntl . flock ( lockfile , fcntl . LOCK_SH if shared else fcntl . LOCK_EX ) [EOL] try : [EOL] yield [EOL] finally : [EOL] fcntl . flock ( lockfile , fcntl . LOCK_UN ) [EOL] [EOL] @ contextmanager def lockfile ( filename , shared = False ) : [EOL] [docstring] [EOL] with open ( filename , [string] ) as lock : [EOL] with flock ( lock , shared = shared ) : [EOL] yield [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] import builtins [EOL] import os [EOL] import subprocess [EOL] import logging [EOL] [EOL] class DiffException ( Exception ) : [EOL] pass [EOL] [EOL] def diff_strings ( output , expected_output ) : [EOL] [EOL] mdiff_path = [string] [EOL] if not os . path . isfile ( mdiff_path ) : [comment] [EOL] msg = [string] [EOL] logging . error ( msg ) [EOL] raise DiffException ( msg ) [EOL] [EOL] command = [ [string] , mdiff_path , output , expected_output ] [EOL] diff = subprocess . check_output ( command ) . decode ( [string] ) [EOL] return diff [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , Callable , TypeVar [EOL] import typing [EOL] import zerver [EOL] import builtins [EOL] from types import TracebackType [EOL] from typing import Any , Callable , Optional , Tuple , Type , TypeVar [EOL] [EOL] import six [EOL] import sys [EOL] import time [EOL] import ctypes [EOL] import threading [EOL] [EOL] [comment] [EOL] [EOL] class TimeoutExpired ( Exception ) : [EOL] [docstring] [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] [EOL] [EOL] ResultT = TypeVar ( [string] ) [EOL] [EOL] def timeout ( timeout , func , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] class TimeoutThread ( threading . Thread ) : [EOL] def __init__ ( self ) : [EOL] threading . Thread . __init__ ( self ) [EOL] self . result = None [comment] [EOL] self . exc_info = None [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] self . daemon = True [EOL] [EOL] def run ( self ) : [EOL] try : [EOL] self . result = func ( * args , ** kwargs ) [EOL] except BaseException : [EOL] self . exc_info = sys . exc_info ( ) [EOL] [EOL] def raise_async_timeout ( self ) : [EOL] [comment] [EOL] [comment] [EOL] assert self . ident is not None [comment] [EOL] tid = ctypes . c_long ( self . ident ) [EOL] result = ctypes . pythonapi . PyThreadState_SetAsyncExc ( tid , ctypes . py_object ( TimeoutExpired ) ) [EOL] if result > [number] : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] ctypes . pythonapi . PyThreadState_SetAsyncExc ( tid , None ) [EOL] [EOL] thread = TimeoutThread ( ) [EOL] thread . start ( ) [EOL] thread . join ( timeout ) [EOL] [EOL] if thread . is_alive ( ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] for i in range ( [number] ) : [EOL] thread . raise_async_timeout ( ) [EOL] time . sleep ( [number] ) [EOL] if not thread . is_alive ( ) : [EOL] break [EOL] raise TimeoutExpired [EOL] [EOL] if thread . exc_info : [EOL] [comment] [EOL] [comment] [EOL] six . reraise ( thread . exc_info [ [number] ] , thread . exc_info [ [number] ] , thread . exc_info [ [number] ] ) [EOL] assert thread . result is not None [comment] [EOL] return thread . result [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $ResultT$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] import datetime [EOL] import builtins [EOL] from typing import List [EOL] [EOL] import pytz [EOL] import datetime [EOL] [EOL] def get_all_timezones ( ) : [EOL] return sorted ( pytz . all_timezones ) [EOL] [EOL] def get_timezone ( tz ) : [EOL] return pytz . timezone ( tz ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.tzinfo$ 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Match , Optional , Dict [EOL] import typing [EOL] import builtins [EOL] import re [EOL] from typing import Dict [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def parse_user_agent ( user_agent ) : [EOL] match = re . match ( [string] , user_agent , re . X ) [EOL] assert match is not None [EOL] return match . groupdict ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import redis [EOL] from django . conf import settings [EOL] [EOL] import redis [EOL] [EOL] def get_redis_client ( ) : [EOL] return redis . StrictRedis ( host = settings . REDIS_HOST , port = settings . REDIS_PORT , password = settings . REDIS_PASSWORD , db = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $redis.StrictRedis$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import List [EOL] import typing [EOL] from zerver . lib . url_preview . parsers . open_graph import OpenGraphParser [EOL] from zerver . lib . url_preview . parsers . generic import GenericParser [EOL] [EOL] __all__ = [ [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import builtins [EOL] from typing import Any [EOL] [EOL] class BaseParser : [EOL] def __init__ ( self , html_source ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from bs4 import BeautifulSoup [EOL] self . _soup = BeautifulSoup ( html_source , [string] ) [EOL] [EOL] def extract_data ( self ) : [EOL] raise NotImplementedError ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0
	0
	0
[comment] [EOL] [comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RenameModel ( old_name = [string] , new_name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , List , Any [EOL] import django [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . conf import settings [EOL] from django . db import migrations , models [EOL] from django . db . backends . postgresql_psycopg2 . schema import DatabaseSchemaEditor [EOL] from django . db . migrations . state import StateApps [EOL] [EOL] [EOL] def set_initial_value_for_history_public_to_subscribers ( apps , schema_editor ) : [EOL] stream_model = apps . get_model ( [string] , [string] ) [EOL] streams = stream_model . objects . all ( ) [EOL] [EOL] for stream in streams : [EOL] if stream . invite_only : [EOL] stream . history_public_to_subscribers = getattr ( settings , [string] , False ) [EOL] else : [EOL] stream . history_public_to_subscribers = True [EOL] [EOL] if stream . is_in_zephyr_realm : [EOL] stream . history_public_to_subscribers = False [EOL] [EOL] stream . save ( update_fields = [ [string] ] ) [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AddField ( model_name = [string] , name = [string] , field = models . BooleanField ( default = False ) , ) , migrations . RunPython ( set_initial_value_for_history_public_to_subscribers , reverse_code = migrations . RunPython . noop ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Tuple , List , Any [EOL] import django [EOL] import typing [EOL] from django . db import migrations , models [EOL] from django . db . backends . postgresql_psycopg2 . schema import DatabaseSchemaEditor [EOL] from django . db . migrations . state import StateApps [EOL] from django . db . utils import IntegrityError [EOL] [EOL] def set_string_id_using_domain ( apps , schema_editor ) : [EOL] Realm = apps . get_model ( [string] , [string] ) [EOL] for realm in Realm . objects . all ( ) : [EOL] if not realm . string_id : [EOL] prefix = realm . domain . split ( [string] ) [ [number] ] [EOL] try : [EOL] realm . string_id = prefix [EOL] realm . save ( update_fields = [ [string] ] ) [EOL] continue [EOL] except IntegrityError : [EOL] pass [EOL] for i in range ( [number] , [number] ) : [EOL] try : [EOL] realm . string_id = prefix + str ( i ) [EOL] realm . save ( update_fields = [ [string] ] ) [EOL] continue [EOL] except IntegrityError : [EOL] pass [EOL] raise RuntimeError ( [string] % ( realm , ) ) [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RunPython ( set_string_id_using_domain ) , migrations . AlterField ( model_name = [string] , name = [string] , field = models . CharField ( unique = True , max_length = [number] ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RenameField ( model_name = [string] , old_name = [string] , new_name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Tuple , List , Any [EOL] import django [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations , models [EOL] [EOL] from django . db . migrations . state import StateApps [EOL] from django . db . backends . postgresql_psycopg2 . schema import DatabaseSchemaEditor [EOL] [EOL] from zerver . lib . actions import render_stream_description [EOL] [EOL] def render_all_stream_descriptions ( apps , schema_editor ) : [EOL] Stream = apps . get_model ( [string] , [string] ) [EOL] all_streams = Stream . objects . exclude ( description = [string] ) [EOL] for stream in all_streams : [EOL] stream . rendered_description = render_stream_description ( stream . description ) [EOL] stream . save ( update_fields = [ [string] ] ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AddField ( model_name = [string] , name = [string] , field = models . TextField ( default = [string] ) , ) , migrations . RunPython ( render_all_stream_descriptions , reverse_code = migrations . RunPython . noop ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , List , Any [EOL] import django [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations , models [EOL] import django . db . models . deletion [EOL] from django . db . backends . postgresql_psycopg2 . schema import DatabaseSchemaEditor [EOL] from django . db . migrations . state import StateApps [EOL] [EOL] def set_initial_value_for_signup_notifications_stream ( apps , schema_editor ) : [EOL] realm_model = apps . get_model ( [string] , [string] ) [EOL] realms = realm_model . objects . exclude ( notifications_stream__isnull = True ) [EOL] for realm in realms : [EOL] realm . signup_notifications_stream = realm . notifications_stream [EOL] realm . save ( update_fields = [ [string] ] ) [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AddField ( model_name = [string] , name = [string] , field = models . ForeignKey ( blank = True , null = True , on_delete = django . db . models . deletion . CASCADE , related_name = [string] , to = [string] ) , ) , migrations . RunPython ( set_initial_value_for_signup_notifications_stream , reverse_code = migrations . RunPython . noop ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RunSQL ( [string] , reverse_sql = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , migrations . RemoveField ( model_name = [string] , name = [string] , ) , migrations . RemoveField ( model_name = [string] , name = [string] , ) , migrations . DeleteModel ( name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RunSQL ( [string] , reverse_sql = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RenameModel ( old_name = [string] , new_name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RenameField ( model_name = [string] , old_name = [string] , new_name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , List , Any [EOL] import django [EOL] import typing [EOL] from django . db import migrations , models [EOL] from django . db . backends . postgresql_psycopg2 . schema import DatabaseSchemaEditor [EOL] from django . db . migrations . state import StateApps [EOL] [EOL] def populate_is_zephyr ( apps , schema_editor ) : [EOL] Realm = apps . get_model ( [string] , [string] ) [EOL] Stream = apps . get_model ( [string] , [string] ) [EOL] [EOL] realms = Realm . objects . filter ( string_id = [string] , ) [EOL] [EOL] for realm in realms : [EOL] Stream . objects . filter ( realm_id = realm . id ) . update ( is_in_zephyr_realm = True ) [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AddField ( model_name = [string] , name = [string] , field = models . BooleanField ( default = False ) , ) , migrations . RunPython ( populate_is_zephyr , reverse_code = migrations . RunPython . noop ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RunSQL ( [string] , reverse_sql = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RunSQL ( [string] , reverse_sql = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , List , Any [EOL] import django [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] from django . db . backends . postgresql_psycopg2 . schema import DatabaseSchemaEditor [EOL] from django . db . migrations . state import StateApps [EOL] from unicodedata import category [EOL] [EOL] NAME_INVALID_CHARS = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] def remove_name_illegal_chars ( apps , schema_editor ) : [EOL] UserProfile = apps . get_model ( [string] , [string] ) [EOL] for user in UserProfile . objects . all ( ) : [EOL] stripped = [ ] [EOL] for char in user . full_name : [EOL] if ( char not in NAME_INVALID_CHARS ) and ( category ( char ) [ [number] ] != [string] ) : [EOL] stripped . append ( char ) [EOL] user . full_name = [string] . join ( stripped ) [EOL] user . save ( update_fields = [ [string] ] ) [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RunPython ( remove_name_illegal_chars ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , List , Any , Dict [EOL] import django [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] from django . db . backends . postgresql_psycopg2 . schema import DatabaseSchemaEditor [EOL] from django . db . migrations . state import StateApps [EOL] [EOL] RECIPIENT_STREAM = [number] [EOL] SETTINGS_MAP = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] def update_notification_settings ( apps , schema_editor ) : [EOL] Subscription = apps . get_model ( [string] , [string] ) [EOL] UserProfile = apps . get_model ( [string] , [string] ) [EOL] [EOL] for setting_value in [ True , False ] : [EOL] for sub_setting_name , user_setting_name in SETTINGS_MAP . items ( ) : [EOL] sub_filter_kwargs = { sub_setting_name : setting_value } [EOL] user_filter_kwargs = { user_setting_name : setting_value } [EOL] update_kwargs = { sub_setting_name : None } [EOL] Subscription . objects . filter ( user_profile__in = UserProfile . objects . filter ( ** user_filter_kwargs ) , recipient__type = RECIPIENT_STREAM , ** sub_filter_kwargs ) . update ( ** update_kwargs ) [EOL] [EOL] def reverse_notification_settings ( apps , schema_editor ) : [EOL] Subscription = apps . get_model ( [string] , [string] ) [EOL] UserProfile = apps . get_model ( [string] , [string] ) [EOL] [EOL] for setting_value in [ True , False ] : [EOL] for sub_setting_name , user_setting_name in SETTINGS_MAP . items ( ) : [EOL] sub_filter_kwargs = { sub_setting_name : None } [EOL] user_filter_kwargs = { user_setting_name : setting_value } [EOL] update_kwargs = { sub_setting_name : setting_value } [EOL] Subscription . objects . filter ( user_profile__in = UserProfile . objects . filter ( ** user_filter_kwargs ) , recipient__type = RECIPIENT_STREAM , ** sub_filter_kwargs ) . update ( ** update_kwargs ) [EOL] [EOL] for sub_setting_name , user_setting_name in SETTINGS_MAP . items ( ) : [EOL] sub_filter_kwargs = { sub_setting_name : None } [EOL] update_kwargs = { sub_setting_name : True } [EOL] Subscription . objects . filter ( recipient__type__in = [ [number] , [number] ] , ** sub_filter_kwargs ) . update ( ** update_kwargs ) [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RunPython ( update_notification_settings , reverse_notification_settings ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RunSQL ( [string] , reverse_sql = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RenameField ( model_name = [string] , old_name = [string] , new_name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List , Any , Pattern [EOL] import django [EOL] import typing [EOL] import builtins [EOL] import os [EOL] import re [EOL] [EOL] from django . db import migrations , models [EOL] from django . db . backends . postgresql_psycopg2 . schema import DatabaseSchemaEditor [EOL] from django . db . migrations . state import StateApps [EOL] [EOL] attachment_url_re = re . compile ( [string] ) [EOL] [EOL] def attachment_url_to_path_id ( attachment_url ) : [EOL] path_id_raw = re . sub ( [string] , [string] , attachment_url ) [EOL] [comment] [EOL] return re . sub ( [string] , [string] , path_id_raw , re . M ) [EOL] [EOL] def check_and_create_attachments ( apps , schema_editor ) : [EOL] STREAM = [number] [EOL] Message = apps . get_model ( [string] , [string] ) [EOL] Attachment = apps . get_model ( [string] , [string] ) [EOL] Stream = apps . get_model ( [string] , [string] ) [EOL] for message in Message . objects . filter ( has_attachment = True , attachment = None ) : [EOL] attachment_url_list = attachment_url_re . findall ( message . content ) [EOL] for url in attachment_url_list : [EOL] path_id = attachment_url_to_path_id ( url ) [EOL] user_profile = message . sender [EOL] is_message_realm_public = False [EOL] if message . recipient . type == STREAM : [EOL] stream = Stream . objects . get ( id = message . recipient . type_id ) [EOL] is_message_realm_public = not stream . invite_only and stream . realm . domain != [string] [EOL] [EOL] if path_id is not None : [EOL] attachment = Attachment . objects . create ( file_name = os . path . basename ( path_id ) , path_id = path_id , owner = user_profile , realm = user_profile . realm , is_realm_public = is_message_realm_public ) [EOL] attachment . messages . add ( message ) [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterField ( model_name = [string] , name = [string] , field = models . TextField ( db_index = True ) , ) , migrations . RunPython ( check_and_create_attachments ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RenameField ( model_name = [string] , old_name = [string] , new_name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RunSQL ( [string] , reverse_sql = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RenameModel ( old_name = [string] , new_name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple , List , Any [EOL] import django [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . db import migrations , models [EOL] [EOL] from django . db . backends . postgresql_psycopg2 . schema import DatabaseSchemaEditor [EOL] from django . db . migrations . state import StateApps [EOL] [EOL] def handle_waiting_period ( apps , schema_editor ) : [EOL] Realm = apps . get_model ( [string] , [string] ) [EOL] Realm . objects . filter ( waiting_period_threshold__gt = [number] ) . update ( invite_to_stream_policy = [number] ) [comment] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AddField ( model_name = [string] , name = [string] , field = models . PositiveSmallIntegerField ( default = [number] ) , ) , migrations . RunPython ( handle_waiting_period , reverse_code = migrations . RunPython . noop ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type , Any [EOL] import typing [EOL] import zerver [EOL] from zerver . lib . test_classes import ZulipTestCase [EOL] from zerver . views . compatibility import find_mobile_os , version_lt [EOL] [EOL] class VersionTest ( ZulipTestCase ) : [EOL] data = [ case . split ( ) for case in [string] . strip ( ) . split ( [string] ) ] + [ [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , ] [EOL] [EOL] def test_version_lt ( self ) : [EOL] for ver1 , cmp , ver2 in self . data : [EOL] msg = [string] . format ( ver1 , cmp , ver2 ) [EOL] if cmp == [string] : [EOL] self . assertTrue ( version_lt ( ver1 , ver2 ) , msg = msg ) [EOL] self . assertFalse ( version_lt ( ver2 , ver1 ) , msg = msg ) [EOL] elif cmp == [string] : [EOL] self . assertFalse ( version_lt ( ver1 , ver2 ) , msg = msg ) [EOL] self . assertFalse ( version_lt ( ver2 , ver1 ) , msg = msg ) [EOL] elif cmp == [string] : [EOL] self . assertFalse ( version_lt ( ver1 , ver2 ) , msg = msg ) [EOL] self . assertTrue ( version_lt ( ver2 , ver1 ) , msg = msg ) [EOL] elif cmp == [string] : [EOL] self . assertIsNone ( version_lt ( ver1 , ver2 ) , msg = msg ) [EOL] self . assertIsNone ( version_lt ( ver2 , ver1 ) , msg = msg ) [EOL] else : [EOL] assert False [comment] [EOL] [EOL] mobile_os_data = [ case . split ( None , [number] ) for case in [string] . strip ( ) . split ( [string] ) ] [EOL] [EOL] def test_find_mobile_os ( self ) : [EOL] for expected_ , user_agent in self . mobile_os_data : [EOL] expected = None if expected_ == [string] else expected_ [EOL] self . assertEqual ( find_mobile_os ( user_agent ) , expected , msg = user_agent ) [EOL] [EOL] [EOL] class CompatibilityTest ( ZulipTestCase ) : [EOL] data = [ case . split ( None , [number] ) for case in [string] . strip ( ) . split ( [string] ) if case ] [EOL] [EOL] def test_compatibility_without_user_agent ( self ) : [EOL] result = self . client_get ( [string] ) [EOL] self . assert_json_error ( result , [string] ) [EOL] [EOL] def test_compatibility ( self ) : [EOL] for expected , user_agent in self . data : [EOL] result = self . client_get ( [string] , HTTP_USER_AGENT = user_agent ) [EOL] if expected == [string] : [EOL] self . assert_json_success ( result ) [EOL] elif expected == [string] : [EOL] self . assert_json_error ( result , [string] ) [EOL] else : [EOL] assert False [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import unittest [EOL] from unittest . mock import patch , MagicMock [EOL] from django . conf import settings [EOL] from zerver . lib . test_classes import ZulipTestCase [EOL] [EOL] class TestFeedbackBot ( ZulipTestCase ) : [EOL] @ patch ( [string] ) def test_pm_to_feedback_bot ( self , logging_info_mock ) : [EOL] with self . settings ( ENABLE_FEEDBACK = True ) : [EOL] user_email = self . example_email ( [string] ) [EOL] self . send_personal_message ( user_email , settings . FEEDBACK_BOT , content = [string] ) [EOL] logging_info_mock . assert_called_once_with ( [string] . format ( user_email ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0
from typing import List , Any [EOL] import typing [EOL] from zilencer . management . commands . populate_db import choose_pub_date [EOL] from zerver . lib . test_classes import ZulipTestCase [EOL] [EOL] from django . utils . timezone import timedelta as timezone_timedelta [EOL] [EOL] class TestChoosePubDate ( ZulipTestCase ) : [EOL] def test_choose_pub_date_large_tot_messages ( self ) : [EOL] [docstring] [EOL] tot_messages = [number] [EOL] datetimes_list = [ choose_pub_date ( i , tot_messages , [number] ) for i in range ( [number] , tot_messages , tot_messages // [number] ) ] [EOL] [EOL] [comment] [EOL] for i in range ( [number] , len ( datetimes_list ) ) : [EOL] self . assertTrue ( datetimes_list [ i ] - datetimes_list [ i - [number] ] > timezone_timedelta ( minutes = [number] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
	0
	0
	0
	0
	0
	0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import builtins [EOL] from zerver . lib . test_classes import WebhookTestCase [EOL] [EOL] from zerver . webhooks . gosquared . view import CHAT_MESSAGE_TEMPLATE [EOL] [EOL] class GoSquaredHookTests ( WebhookTestCase ) : [EOL] STREAM_NAME = [string] [EOL] URL_TEMPLATE = [string] [EOL] FIXTURE_DIR_NAME = [string] [EOL] [EOL] [comment] [EOL] def test_traffic_message ( self ) : [EOL] expected_topic = [string] [EOL] expected_message = [string] [EOL] [EOL] self . send_and_test_stream_message ( [string] , expected_topic , expected_message , content_type = [string] ) [EOL] [EOL] def test_chat_message ( self ) : [EOL] expected_topic = [string] [EOL] expected_message = CHAT_MESSAGE_TEMPLATE . format ( status = [string] , name = [string] , content = [string] ) [EOL] [EOL] self . send_and_test_stream_message ( [string] , expected_topic , expected_message , content_type = [string] ) [EOL] [EOL] def get_body ( self , fixture_name ) : [EOL] return self . webhook_fixture_data ( [string] , fixture_name , file_type = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0
	0
	0
	0
	0
[comment] [EOL] [EOL] import builtins [EOL] from zerver . lib . test_classes import WebhookTestCase [EOL] [EOL] class SplunkHookTests ( WebhookTestCase ) : [EOL] [EOL] STREAM_NAME = [string] [EOL] URL_TEMPLATE = [string] [EOL] FIXTURE_DIR_NAME = [string] [EOL] [EOL] def test_splunk_search_one_result ( self ) : [EOL] self . url = self . build_webhook_url ( topic = [string] ) [EOL] [EOL] [comment] [EOL] expected_topic = [string] [EOL] expected_message = [string] . strip ( ) [EOL] [EOL] [comment] [EOL] self . send_and_test_stream_message ( [string] , expected_topic , expected_message , content_type = [string] ) [EOL] [EOL] def test_splunk_short_search_name ( self ) : [EOL] [EOL] [comment] [EOL] expected_topic = [string] [EOL] expected_message = [string] . strip ( ) [EOL] [EOL] self . send_and_test_stream_message ( [string] , expected_topic , expected_message , content_type = [string] ) [EOL] [EOL] def test_splunk_long_search_name ( self ) : [EOL] [EOL] [comment] [EOL] expected_topic = [string] [EOL] expected_message = [string] . strip ( ) [EOL] [EOL] self . send_and_test_stream_message ( [string] , expected_topic , expected_message , content_type = [string] ) [EOL] [EOL] def test_splunk_missing_results_link ( self ) : [EOL] [EOL] self . url = self . build_webhook_url ( topic = [string] ) [EOL] [EOL] expected_topic = [string] [EOL] expected_message = [string] . strip ( ) [EOL] [EOL] self . send_and_test_stream_message ( [string] , expected_topic , expected_message , content_type = [string] ) [EOL] [EOL] def test_splunk_missing_search_name ( self ) : [EOL] [EOL] self . url = self . build_webhook_url ( topic = [string] ) [EOL] [EOL] expected_topic = [string] [EOL] expected_message = [string] . strip ( ) [EOL] [EOL] self . send_and_test_stream_message ( [string] , expected_topic , expected_message , content_type = [string] ) [EOL] [EOL] def test_splunk_missing_host ( self ) : [EOL] [EOL] self . url = self . build_webhook_url ( topic = [string] ) [EOL] [EOL] expected_topic = [string] [EOL] expected_message = [string] . strip ( ) [EOL] [EOL] self . send_and_test_stream_message ( [string] , expected_topic , expected_message , content_type = [string] ) [EOL] [EOL] def test_splunk_missing_source ( self ) : [EOL] [EOL] self . url = self . build_webhook_url ( topic = [string] ) [EOL] [EOL] expected_topic = [string] [EOL] expected_message = [string] . strip ( ) [EOL] [EOL] self . send_and_test_stream_message ( [string] , expected_topic , expected_message , content_type = [string] ) [EOL] [EOL] def test_splunk_missing_raw ( self ) : [EOL] [EOL] self . url = self . build_webhook_url ( topic = [string] ) [EOL] [EOL] expected_topic = [string] [EOL] expected_message = [string] . strip ( ) [EOL] [EOL] self . send_and_test_stream_message ( [string] , expected_topic , expected_message , content_type = [string] ) [EOL] [EOL] def get_body ( self , fixture_name ) : [EOL] return self . webhook_fixture_data ( [string] , fixture_name , file_type = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0
	0
	0
	0
	0
	0
	0
	0
	0
	0
	0
	0
	0
[comment] [EOL] from zerver . lib . test_classes import WebhookTestCase [EOL] [EOL] class SentryHookTests ( WebhookTestCase ) : [EOL] STREAM_NAME = [string] [EOL] URL_TEMPLATE = [string] [EOL] FIXTURE_DIR_NAME = [string] [EOL] [EOL] def test_error_issue_message ( self ) : [EOL] expected_topic = [string] [EOL] expected_message = [string] . strip ( ) [EOL] [EOL] self . send_and_test_stream_message ( [string] , expected_topic , expected_message ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0
	0
	0
	0
	0
	0
	0
	0
	0
	0
[comment] [EOL] from zerver . lib . test_classes import WebhookTestCase [EOL] [EOL] class CircleCiHookTests ( WebhookTestCase ) : [EOL] STREAM_NAME = [string] [EOL] URL_TEMPLATE = [string] [EOL] FIXTURE_DIR_NAME = [string] [EOL] [EOL] def test_circleci_build_in_success_status ( self ) : [EOL] expected_topic = [string] [EOL] expected_message = [string] [EOL] self . send_and_test_stream_message ( [string] , expected_topic , expected_message ) [EOL] [EOL] def test_circleci_build_in_failed_status ( self ) : [EOL] expected_topic = [string] [EOL] expected_message = [string] [EOL] self . send_and_test_stream_message ( [string] , expected_topic , expected_message ) [EOL] [EOL] def test_circleci_build_in_failed_status_when_previous_build_failed_too ( self ) : [EOL] expected_topic = [string] [EOL] expected_message = [string] [EOL] self . send_and_test_stream_message ( [string] , expected_topic , expected_message ) [EOL] [EOL] def test_circleci_build_in_success_status_when_previous_build_failed_too ( self ) : [EOL] expected_topic = [string] [EOL] expected_message = [string] [EOL] self . send_and_test_stream_message ( [string] , expected_topic , expected_message ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 $None$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 $None$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 $None$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0
	0
	0
	0
	0
	0
	0
	0
class TrelloWebhookException ( Exception ) : [EOL] pass [EOL] [EOL] class UnsupportedAction ( TrelloWebhookException ) : [EOL] pass [EOL] [EOL] class UnknownUpdateCardAction ( TrelloWebhookException ) : [EOL] pass [EOL] [EOL] class UnknownUpdateBoardAction ( TrelloWebhookException ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] import builtins [EOL] from zerver . lib . test_classes import WebhookTestCase [EOL] [EOL] class SolanoHookTests ( WebhookTestCase ) : [EOL] STREAM_NAME = [string] [EOL] URL_TEMPLATE = [string] [EOL] FIXTURE_DIR_NAME = [string] [EOL] [EOL] def test_solano_message_001 ( self ) : [EOL] [docstring] [EOL] expected_topic = [string] [EOL] expected_message = [string] . strip ( ) [EOL] [EOL] self . send_and_test_stream_message ( [string] , expected_topic , expected_message , content_type = [string] ) [EOL] [EOL] def test_solano_message_002 ( self ) : [EOL] [docstring] [EOL] expected_topic = [string] [EOL] expected_message = [string] . strip ( ) [EOL] [EOL] self . send_and_test_stream_message ( [string] , expected_topic , expected_message , content_type = [string] ) [EOL] [EOL] def test_solano_message_received ( self ) : [EOL] [docstring] [EOL] expected_topic = [string] [EOL] expected_message = [string] . strip ( ) [EOL] [EOL] self . send_and_test_stream_message ( [string] , expected_topic , expected_message , content_type = [string] ) [EOL] [EOL] def test_solano_test_message ( self ) : [EOL] expected_topic = [string] [EOL] expected_message = [string] [EOL] [EOL] self . send_and_test_stream_message ( [string] , expected_topic , expected_message , content_type = [string] ) [EOL] [EOL] def get_body ( self , fixture_name ) : [EOL] return self . webhook_fixture_data ( self . FIXTURE_DIR_NAME , fixture_name , file_type = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0
	0
	0
	0
	0
	0
	0
	0
	0
	0
	0
	0
	0
	0
	0
	0
	0
[comment] [EOL] [EOL] import builtins [EOL] from zerver . lib . test_classes import WebhookTestCase [EOL] [EOL] class MentionHookTests ( WebhookTestCase ) : [EOL] STREAM_NAME = [string] [EOL] URL_TEMPLATE = [string] [EOL] FIXTURE_DIR_NAME = [string] [EOL] [EOL] def test_mention_webfeed ( self ) : [EOL] expected_topic = [string] [EOL] expected_message = [string] . strip ( ) [EOL] [EOL] [comment] [EOL] self . send_and_test_stream_message ( [string] , expected_topic , expected_message , content_type = [string] ) [EOL] [EOL] def get_body ( self , fixture_name ) : [EOL] return self . webhook_fixture_data ( [string] , fixture_name , file_type = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0
	0
	0
	0
	0
	0
	0
	0
	0
	0
	0
	0
	0
	0
	0
	0
from typing import Tuple , List , Match , Optional , Dict [EOL] import django [EOL] import typing [EOL] import builtins [EOL] from django . http import HttpResponse , HttpRequest [EOL] import re [EOL] from typing import List , Optional , Tuple [EOL] [EOL] from django . utils . translation import ugettext as _ [EOL] [EOL] from zerver . lib . response import json_error , json_success [EOL] from zerver . lib . user_agent import parse_user_agent [EOL] [EOL] def pop_numerals ( ver ) : [EOL] match = re . search ( [string] , ver , re . X ) [EOL] if match is None : [EOL] return [ ] , ver [EOL] numerals , rest = match . groups ( ) [EOL] numbers = [ int ( n ) for n in numerals . split ( [string] ) ] [EOL] return numbers , rest [EOL] [EOL] def version_lt ( ver1 , ver2 ) : [EOL] [docstring] [EOL] num1 , rest1 = pop_numerals ( ver1 ) [EOL] num2 , rest2 = pop_numerals ( ver2 ) [EOL] if not num1 or not num2 : [EOL] return None [EOL] common_len = min ( len ( num1 ) , len ( num2 ) ) [EOL] common_num1 , rest_num1 = num1 [ : common_len ] , num1 [ common_len : ] [EOL] common_num2 , rest_num2 = num2 [ : common_len ] , num2 [ common_len : ] [EOL] [EOL] [comment] [EOL] if common_num1 != common_num2 : [EOL] return common_num1 < common_num2 [EOL] [EOL] [comment] [EOL] [comment] [EOL] if not rest1 and rest_num2 : [EOL] return True [EOL] if rest_num1 and not rest2 : [EOL] return False [EOL] if rest_num1 or rest_num2 : [EOL] return None [EOL] [EOL] [comment] [EOL] if rest1 == rest2 : [EOL] return False [EOL] return None [EOL] [EOL] [EOL] def find_mobile_os ( user_agent ) : [EOL] if re . search ( [string] , user_agent , re . I | re . X ) : [EOL] return [string] [EOL] if re . search ( [string] , user_agent , re . I | re . X ) : [EOL] return [string] [EOL] return None [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] android_min_app_version = [string] [EOL] [EOL] def check_global_compatibility ( request ) : [EOL] if request . META . get ( [string] ) is None : [EOL] return json_error ( _ ( [string] ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] legacy_compatibility_error_message = [string] [EOL] user_agent = parse_user_agent ( request . META [ [string] ] ) [EOL] if user_agent [ [string] ] == [string] : [EOL] return json_error ( legacy_compatibility_error_message ) [EOL] if user_agent [ [string] ] == [string] : [EOL] user_os = find_mobile_os ( request . META [ [string] ] ) [EOL] if ( user_os == [string] [EOL] and version_lt ( user_agent [ [string] ] , android_min_app_version ) ) : [EOL] return json_error ( legacy_compatibility_error_message ) [EOL] return json_success ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.List[builtins.int],builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $django.http.HttpResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
	0
	0
	0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List [EOL] import typing [EOL] BOT_NAME = [string] [EOL] [EOL] SPIDER_MODULES = [ [string] ] [EOL] NEWSPIDER_MODULE = [string] [EOL] COMMANDS_MODULE = [string] [EOL] LOG_LEVEL = [string] [EOL] DOWNLOAD_TIMEOUT = [number] [EOL] [EOL] [EOL] [comment] [EOL] USER_AGENT = ( [string] [string] [string] ) [EOL] [EOL] [comment] [EOL] ROBOTSTXT_OBEY = False [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0
	0
	0
	0
[comment] [EOL] from typing import List , Any [EOL] import typing [EOL] import argparse [EOL] import builtins [EOL] import os [EOL] import sys [EOL] import argparse [EOL] import glob [EOL] import shutil [EOL] [EOL] ZULIP_PATH = os . path . dirname ( os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) ) [EOL] [EOL] sys . path . append ( ZULIP_PATH ) [EOL] from scripts . lib . zulip_tools import run , run_as_root , OKBLUE , ENDC , get_dev_uuid_var_path , file_or_package_hash_updated [EOL] [EOL] from version import PROVISION_VERSION [EOL] [EOL] from tools . setup . generate_zulip_bots_static_files import generate_zulip_bots_static_files [EOL] [EOL] VENV_PATH = [string] [EOL] VAR_DIR_PATH = os . path . join ( ZULIP_PATH , [string] ) [EOL] LOG_DIR_PATH = os . path . join ( VAR_DIR_PATH , [string] ) [EOL] UPLOAD_DIR_PATH = os . path . join ( VAR_DIR_PATH , [string] ) [EOL] TEST_UPLOAD_DIR_PATH = os . path . join ( VAR_DIR_PATH , [string] ) [EOL] COVERAGE_DIR_PATH = os . path . join ( VAR_DIR_PATH , [string] ) [EOL] NODE_TEST_COVERAGE_DIR_PATH = os . path . join ( VAR_DIR_PATH , [string] ) [EOL] XUNIT_XML_TEST_RESULTS_DIR_PATH = os . path . join ( VAR_DIR_PATH , [string] ) [EOL] [EOL] is_travis = [string] in os . environ [EOL] [EOL] [comment] [EOL] EMOJI_CACHE_PATH = [string] [EOL] if is_travis : [EOL] [comment] [EOL] EMOJI_CACHE_PATH = [string] [EOL] [EOL] UUID_VAR_PATH = get_dev_uuid_var_path ( ) [EOL] [EOL] user_id = os . getuid ( ) [EOL] [EOL] def setup_shell_profile ( shell_profile ) : [EOL] [comment] [EOL] shell_profile_path = os . path . expanduser ( shell_profile ) [EOL] [EOL] def write_command ( command ) : [EOL] [comment] [EOL] if os . path . exists ( shell_profile_path ) : [EOL] with open ( shell_profile_path , [string] ) as shell_profile_file : [EOL] lines = [ line . strip ( ) for line in shell_profile_file . readlines ( ) ] [EOL] if command not in lines : [EOL] with open ( shell_profile_path , [string] ) as shell_profile_file : [EOL] shell_profile_file . writelines ( command + [string] ) [EOL] else : [EOL] with open ( shell_profile_path , [string] ) as shell_profile_file : [EOL] shell_profile_file . writelines ( command + [string] ) [EOL] [EOL] source_activate_command = [string] + os . path . join ( VENV_PATH , [string] , [string] ) [EOL] write_command ( source_activate_command ) [EOL] if os . path . exists ( [string] ) : [EOL] write_command ( [string] ) [EOL] [EOL] def main ( options ) : [EOL] setup_shell_profile ( [string] ) [EOL] setup_shell_profile ( [string] ) [EOL] [EOL] [comment] [EOL] run ( [ [string] , [string] ] ) [EOL] [EOL] [comment] [EOL] os . makedirs ( LOG_DIR_PATH , exist_ok = True ) [EOL] [comment] [EOL] os . makedirs ( UPLOAD_DIR_PATH , exist_ok = True ) [EOL] [comment] [EOL] os . makedirs ( TEST_UPLOAD_DIR_PATH , exist_ok = True ) [EOL] [comment] [EOL] os . makedirs ( COVERAGE_DIR_PATH , exist_ok = True ) [EOL] [comment] [EOL] os . makedirs ( NODE_TEST_COVERAGE_DIR_PATH , exist_ok = True ) [EOL] [comment] [EOL] os . makedirs ( XUNIT_XML_TEST_RESULTS_DIR_PATH , exist_ok = True ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if not os . path . isdir ( EMOJI_CACHE_PATH ) : [EOL] run_as_root ( [ [string] , EMOJI_CACHE_PATH ] ) [EOL] run_as_root ( [ [string] , [string] % ( user_id , user_id ) , EMOJI_CACHE_PATH ] ) [EOL] run ( [ [string] ] ) [EOL] [EOL] [comment] [EOL] generate_zulip_bots_static_files ( ) [EOL] [EOL] build_pygments_data_paths = [ [string] , [string] ] [EOL] from pygments import __version__ as pygments_version [EOL] if file_or_package_hash_updated ( build_pygments_data_paths , [string] , options . is_force , [ pygments_version ] ) : [EOL] run ( [ [string] ] ) [EOL] else : [EOL] print ( [string] ) [EOL] [EOL] update_authors_json_paths = [ [string] , [string] ] [EOL] if file_or_package_hash_updated ( update_authors_json_paths , [string] , options . is_force ) : [EOL] run ( [ [string] , [string] ] ) [EOL] else : [EOL] print ( [string] ) [EOL] [EOL] email_source_paths = [ [string] , [string] ] [EOL] email_source_paths += glob . glob ( [string] ) [EOL] if file_or_package_hash_updated ( email_source_paths , [string] , options . is_force ) : [EOL] run ( [ [string] ] ) [EOL] else : [EOL] print ( [string] ) [EOL] [EOL] if not options . is_production_travis : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] import django [EOL] django . setup ( ) [EOL] [EOL] from zerver . lib . test_fixtures import template_database_status , run_db_migrations , destroy_leaked_test_databases [EOL] [EOL] try : [EOL] from zerver . lib . queue import SimpleQueueClient [EOL] SimpleQueueClient ( ) [EOL] rabbitmq_is_configured = True [EOL] except Exception : [EOL] rabbitmq_is_configured = False [EOL] [EOL] if options . is_force or not rabbitmq_is_configured : [EOL] run ( [ [string] ] ) [EOL] else : [EOL] print ( [string] ) [EOL] [EOL] migration_status_path = os . path . join ( UUID_VAR_PATH , [string] ) [EOL] dev_template_db_status = template_database_status ( migration_status = migration_status_path , settings = [string] , database_name = [string] , ) [EOL] if options . is_force or dev_template_db_status == [string] : [EOL] run ( [ [string] ] ) [EOL] run ( [ [string] ] ) [EOL] elif dev_template_db_status == [string] : [EOL] run_db_migrations ( [string] ) [EOL] elif dev_template_db_status == [string] : [EOL] print ( [string] ) [EOL] [EOL] test_template_db_status = template_database_status ( ) [EOL] if options . is_force or test_template_db_status == [string] : [EOL] run ( [ [string] ] ) [EOL] run ( [ [string] ] ) [EOL] elif test_template_db_status == [string] : [EOL] run_db_migrations ( [string] ) [EOL] elif test_template_db_status == [string] : [EOL] print ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] paths = [ [string] ] [EOL] paths += glob . glob ( [string] ) [EOL] paths += glob . glob ( [string] ) [EOL] [EOL] if file_or_package_hash_updated ( paths , [string] , options . is_force ) : [EOL] run ( [ [string] , [string] ] ) [EOL] else : [EOL] print ( [string] ) [EOL] [EOL] destroyed = destroy_leaked_test_databases ( ) [EOL] if destroyed : [EOL] print ( [string] % ( destroyed , ) ) [EOL] [EOL] run ( [ [string] , [string] ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if os . path . isfile ( [string] ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] os . remove ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] print ( [string] ) [EOL] var_paths = glob . glob ( [string] ) [EOL] var_paths . append ( [string] ) [EOL] for path in var_paths : [EOL] try : [EOL] if os . path . isdir ( path ) : [EOL] shutil . rmtree ( path ) [EOL] else : [EOL] os . remove ( path ) [EOL] except FileNotFoundError : [EOL] pass [EOL] [EOL] version_file = os . path . join ( UUID_VAR_PATH , [string] ) [EOL] print ( [string] % ( version_file , ) ) [EOL] open ( version_file , [string] ) . write ( PROVISION_VERSION + [string] ) [EOL] [EOL] print ( ) [EOL] print ( OKBLUE + [string] + ENDC ) [EOL] return [number] [EOL] [EOL] if __name__ == [string] : [EOL] parser = argparse . ArgumentParser ( ) [EOL] parser . add_argument ( [string] , action = [string] , dest = [string] , default = False , help = [string] ) [EOL] [EOL] parser . add_argument ( [string] , action = [string] , dest = [string] , default = False , help = [string] ) [EOL] [EOL] options = parser . parse_args ( ) [EOL] sys . exit ( main ( options ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0
	0
[comment] [EOL] [EOL] from typing import List , Any [EOL] import typing [EOL] def generate_zulip_bots_static_files ( ) : [EOL] import glob [EOL] import os [EOL] import sys [EOL] import shutil [EOL] [EOL] ZULIP_PATH = os . path . dirname ( os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) ) [EOL] if ZULIP_PATH not in sys . path : [EOL] sys . path . append ( ZULIP_PATH ) [EOL] [EOL] from typing import List [EOL] from zulip_bots . lib import get_bots_directory_path [EOL] [EOL] bots_dir = [string] [EOL] if os . path . isdir ( bots_dir ) : [EOL] [comment] [EOL] try : [EOL] shutil . rmtree ( bots_dir ) [EOL] except OSError : [EOL] print ( [string] + [string] + [string] ) [EOL] sys . exit ( [number] ) [EOL] [EOL] os . makedirs ( bots_dir , exist_ok = True ) [EOL] [EOL] def copyfiles ( paths ) : [EOL] [comment] [EOL] for src_path in paths : [EOL] bot_name = os . path . basename ( os . path . dirname ( src_path ) ) [EOL] [EOL] bot_dir = os . path . join ( bots_dir , bot_name ) [EOL] os . makedirs ( bot_dir , exist_ok = True ) [EOL] [EOL] dst_path = os . path . join ( bot_dir , os . path . basename ( src_path ) ) [EOL] if not os . path . isfile ( dst_path ) : [EOL] shutil . copyfile ( src_path , dst_path ) [EOL] [EOL] package_bots_dir = get_bots_directory_path ( ) [EOL] [EOL] logo_glob_pattern = os . path . join ( package_bots_dir , [string] ) [EOL] logos = glob . glob ( logo_glob_pattern ) [EOL] copyfiles ( logos ) [EOL] [EOL] doc_glob_pattern = os . path . join ( package_bots_dir , [string] ) [EOL] docs = glob . glob ( doc_glob_pattern ) [EOL] copyfiles ( docs ) [EOL] [EOL] if __name__ == [string] : [EOL] generate_zulip_bots_static_files ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None
from typing import List , Any [EOL] import typing [EOL] from __future__ import print_function [EOL] from __future__ import absolute_import [EOL] [EOL] import argparse [EOL] [EOL] from typing import List [EOL] [EOL] from zulint . linters import run_pyflakes [EOL] [EOL] [EOL] def check_pyflakes ( files , options ) : [EOL] [comment] [EOL] suppress_patterns = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] if options . full : [EOL] suppress_patterns = [ ] [EOL] return run_pyflakes ( files , options , suppress_patterns ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] from typing import List [EOL] import typing [EOL] EXCLUDED_FILES = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] PUPPET_CHECK_RULES_TO_EXCLUDE = [ [string] , [string] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Tuple [EOL] import typing [EOL] VERSION = ( [number] , [number] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int,builtins.str]$ 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] [EOL] __revision__ = [string] [EOL] [EOL] STATUS_ACTIVE = [number] [EOL]	0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0
	0
	0
	0
[comment] [EOL] [comment] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ] , options = { [string] : True , } , bases = ( [string] , ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
from typing import Any [EOL] import typing [EOL] import argparse [EOL] from argparse import ArgumentParser [EOL] from typing import Any [EOL] [EOL] from django . core . management . base import BaseCommand , CommandError [EOL] [EOL] from analytics . lib . counts import do_drop_all_analytics_tables [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] if options [ [string] ] : [EOL] do_drop_all_analytics_tables ( ) [EOL] else : [EOL] raise CommandError ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 $argparse.ArgumentParser$ 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
[comment] [EOL] from typing import Tuple , List , Any [EOL] import django [EOL] import typing [EOL] from django . db import migrations [EOL] from django . db . backends . postgresql_psycopg2 . schema import DatabaseSchemaEditor [EOL] from django . db . migrations . state import StateApps [EOL] [EOL] def clear_analytics_tables ( apps , schema_editor ) : [EOL] UserCount = apps . get_model ( [string] , [string] ) [EOL] StreamCount = apps . get_model ( [string] , [string] ) [EOL] RealmCount = apps . get_model ( [string] , [string] ) [EOL] InstallationCount = apps . get_model ( [string] , [string] ) [EOL] FillState = apps . get_model ( [string] , [string] ) [EOL] [EOL] UserCount . objects . all ( ) . delete ( ) [EOL] StreamCount . objects . all ( ) . delete ( ) [EOL] RealmCount . objects . all ( ) . delete ( ) [EOL] InstallationCount . objects . all ( ) . delete ( ) [EOL] FillState . objects . all ( ) . delete ( ) [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RunPython ( clear_analytics_tables ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] import builtins [EOL] from math import sqrt [EOL] from random import gauss , random , seed [EOL] from typing import List [EOL] [EOL] from analytics . lib . counts import CountStat [EOL] [EOL] def generate_time_series_data ( days = [number] , business_hours_base = [number] , non_business_hours_base = [number] , growth = [number] , autocorrelation = [number] , spikiness = [number] , holiday_rate = [number] , frequency = CountStat . DAY , partial_sum = False , random_seed = [number] ) : [EOL] [docstring] [EOL] if frequency == CountStat . HOUR : [EOL] length = days * [number] [EOL] seasonality = [ non_business_hours_base ] * [number] * [number] [EOL] for day in range ( [number] ) : [EOL] for hour in range ( [number] ) : [EOL] seasonality [ [number] * day + hour ] = business_hours_base [EOL] holidays = [ ] [EOL] for i in range ( days ) : [EOL] holidays . extend ( [ random ( ) < holiday_rate ] * [number] ) [EOL] elif frequency == CountStat . DAY : [EOL] length = days [EOL] seasonality = [ [number] * business_hours_base + [number] * non_business_hours_base ] * [number] + [ [number] * non_business_hours_base ] * [number] [EOL] holidays = [ random ( ) < holiday_rate for i in range ( days ) ] [EOL] else : [EOL] raise AssertionError ( [string] % ( frequency , ) ) [EOL] if length < [number] : [EOL] raise AssertionError ( [string] [string] % ( length , ) ) [EOL] growth_base = growth ** ( [number] / ( length - [number] ) ) [EOL] values_no_noise = [ seasonality [ i % len ( seasonality ) ] * ( growth_base ** i ) for i in range ( length ) ] [EOL] [EOL] seed ( random_seed ) [EOL] noise_scalars = [ gauss ( [number] , [number] ) ] [EOL] for i in range ( [number] , length ) : [EOL] noise_scalars . append ( noise_scalars [ - [number] ] * autocorrelation + gauss ( [number] , [number] ) * ( [number] - autocorrelation ) ) [EOL] [EOL] values = [ [number] if holiday else int ( v + sqrt ( v ) * noise_scalar * spikiness ) for v , noise_scalar , holiday in zip ( values_no_noise , noise_scalars , holidays ) ] [EOL] if partial_sum : [EOL] for i in range ( [number] , length ) : [EOL] values [ i ] = values [ i - [number] ] + values [ i ] [EOL] return [ max ( v , [number] ) for v in values ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0