import os [EOL] [EOL] from setuptools import setup [EOL] [EOL] [EOL] def read ( fname ) : [EOL] return open ( os . path . join ( os . path . dirname ( __file__ ) , fname ) ) . read ( ) [EOL] [EOL] [EOL] setup ( name = [string] , license = [string] , version = [string] , python_requires = [string] , url = [string] , author = [string] , author_email = [string] , keywords = [string] , description = [string] , long_description = read ( [string] ) , py_modules = [ [string] ] , platforms = [string] , classifiers = [ [string] , [string] , [string] , [string] , [string] , [string] , ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import cachelock [EOL] import inspect [EOL] import logging [EOL] import typing [EOL] [docstring] [EOL] [EOL] __version__ = [string] [EOL] [EOL] import functools [EOL] import inspect [EOL] import logging [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class LockError ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class MemoryCache : [EOL] [EOL] def __init__ ( self ) : [EOL] self . __cache = { } [EOL] [EOL] def set ( self , key , value ) : [EOL] self . __cache [ key ] = value [EOL] [EOL] def get ( self , key , default = None ) : [EOL] return self . __cache . get ( key , default ) [EOL] [EOL] def delete ( self , key ) : [EOL] if key in self . __cache : [EOL] del self . __cache [ key ] [EOL] [EOL] [EOL] try : [EOL] from django . conf import settings [EOL] except ModuleNotFoundError : [EOL] default_cache = MemoryCache ( ) [EOL] else : [EOL] from django . core . cache import cache [EOL] default_cache = cache [ getattr ( settings , [string] , [string] ) ] [EOL] [EOL] [EOL] class Lock : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , key , cache = None ) : [EOL] [docstring] [EOL] self . key = key [EOL] self . cache = cache or default_cache [EOL] [EOL] def __enter__ ( self ) : [EOL] cached = self . cache . get ( self . key ) [EOL] if cached : [EOL] logger . warning ( f' [string] { self . key } [string] ' ) [EOL] raise LockError ( ) [EOL] self . cache . set ( self . key , [number] ) [EOL] logger . info ( f' [string] { self . key } [string] ' ) [EOL] [EOL] def __exit__ ( self , exc_type , exc_val , exc_tb ) : [EOL] self . cache . delete ( self . key ) [EOL] logger . info ( f' [string] { self . key } [string] ' ) [EOL] [EOL] [EOL] def once ( key , cache = default_cache , raise_if_lock = False ) : [EOL] [docstring] [EOL] def decorator ( func ) : [EOL] signature = inspect . signature ( func ) [EOL] [EOL] @ functools . wraps ( func ) def wrapper ( * args , ** kwargs ) : [EOL] bound = signature . bind ( * args , ** kwargs ) [EOL] try : [EOL] try : [EOL] _key = key . format ( ** bound . arguments ) [EOL] except IndexError : [EOL] raise ValueError ( [string] [string] ) [EOL] with Lock ( key = _key , cache = cache ) : [EOL] return func ( * args , ** kwargs ) [EOL] except LockError : [EOL] if raise_if_lock : [EOL] raise [EOL] return wrapper [EOL] [EOL] return decorator [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cachelock.MemoryCache$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cachelock.MemoryCache$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cachelock.MemoryCache$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cachelock.MemoryCache$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import inspect [EOL] from unittest . mock import patch [EOL] [EOL] import pytest [EOL] [EOL] import cachelock [EOL] [EOL] [EOL] def test_once_should_a_function ( ) : [EOL] assert inspect . isfunction ( cachelock . once ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( ( [string] , [string] ) , [string] , [string] ) , ( ( [string] , [string] ) , [string] , [string] ) , ( ( [string] , [string] ) , [string] , [string] ) , ] ) def test_once_should_generate_key_from_signature ( args , key , formatted_key ) : [EOL] [EOL] with patch . object ( cachelock , [string] ) as Lock : [EOL] [EOL] @ cachelock . once ( key = key ) def func ( arg_a , arg_b ) : [EOL] pass [EOL] [EOL] func ( * args ) [EOL] [EOL] Lock . assert_called_with ( key = formatted_key , cache = cachelock . default_cache ) [EOL] [EOL] [EOL] def test_once_should_raises_value_error_if_not_named_key ( ) : [EOL] with pytest . raises ( ValueError ) : [EOL] [EOL] @ cachelock . once ( key = [string] ) def func ( arg_a , arg_b ) : [EOL] pass [EOL] [EOL] func ( [number] , [number] ) [EOL] [EOL] func ( arg_a = [number] , arg_b = [number] ) [EOL] [EOL] [EOL] def test_once_should_raises_lock_error_if_param_is_true ( ) : [EOL] try : [EOL] cachelock . default_cache . set ( [string] , [number] ) [EOL] [EOL] with pytest . raises ( cachelock . LockError ) : [EOL] [EOL] @ cachelock . once ( key = [string] , raise_if_lock = True ) def func ( arg_a , arg_b ) : [EOL] pass [EOL] [EOL] func ( [number] , [number] ) [EOL] finally : [EOL] cachelock . default_cache . delete ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from modulefinder import Module [EOL] [EOL] import pytest [EOL] [EOL] stub_cache = object ( ) [EOL] [EOL] [EOL] class StubCacheHandler : [EOL] [EOL] def __getitem__ ( self , key ) : [EOL] return stub_cache [EOL] [EOL] [EOL] @ pytest . fixture ( autouse = True ) def force_refresh_cachelock_from_modules ( ) : [EOL] import sys [EOL] del sys . modules [ [string] ] [EOL] [EOL] [EOL] @ pytest . fixture def django ( ) : [EOL] import sys [EOL] try : [EOL] django = sys . modules [ [string] ] = Module ( name = [string] ) [EOL] django . conf = sys . modules [ [string] ] = Module ( name = [string] ) [EOL] django . conf . settings = object ( ) [EOL] django . globalnames [ [string] ] = django . conf [EOL] django . core = sys . modules [ [string] ] = Module ( name = [string] ) [EOL] django . globalnames [ [string] ] = django . conf [EOL] django . core . cache = Module ( name = [string] ) [EOL] sys . modules [ [string] ] = django . core . cache [EOL] django . core . globalnames [ [string] ] = django . core . cache [EOL] django . core . cache . cache = StubCacheHandler ( ) [EOL] yield [EOL] finally : [EOL] del sys . modules [ [string] ] [EOL] del sys . modules [ [string] ] [EOL] del sys . modules [ [string] ] [EOL] del sys . modules [ [string] ] [EOL] [EOL] [EOL] def test_default_cache_should_be_django_cache_if_django_is_installed ( django ) : [EOL] import cachelock [EOL] assert cachelock . default_cache is stub_cache [EOL] [EOL] [EOL] def test_default_cache_should_be_memory_cache_instance_if_not_django_installed ( ) : [EOL] import cachelock [EOL] assert isinstance ( cachelock . default_cache , cachelock . MemoryCache ) [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import cachelock [EOL] import contextlib [EOL] import inspect [EOL] from unittest . mock import patch [EOL] [EOL] import pytest [EOL] [EOL] import cachelock [EOL] [EOL] [EOL] def test_lock_should_be_class_instance ( ) : [EOL] assert inspect . isclass ( cachelock . Lock ) [EOL] [EOL] [EOL] def test_lock_should_raises_lock_error ( ) : [EOL] try : [EOL] cachelock . default_cache . set ( [string] , [number] ) [EOL] with pytest . raises ( cachelock . LockError ) : [EOL] with cachelock . Lock ( key = [string] ) : [EOL] pass [EOL] finally : [EOL] cachelock . default_cache . delete ( key = [string] ) [EOL] [EOL] [EOL] def test_lock_should_not_raises_lock_error ( ) : [EOL] with cachelock . Lock ( key = [string] ) : [EOL] pass [EOL] [EOL] [EOL] def test_lock_should_calls_for_cache_methods ( ) : [EOL] lock = cachelock . Lock ( key = [string] ) [EOL] [EOL] with patch . object ( lock , [string] ) as cache : [EOL] cache . get . return_value = None [EOL] with lock : [EOL] cache . get . assert_called_with ( [string] ) [EOL] cache . set . assert_called_with ( [string] , [number] ) [EOL] cache . delete . assert_called_with ( [string] ) [EOL] [EOL] cache . get . return_value = [number] [EOL] with contextlib . suppress ( cachelock . LockError ) : [EOL] with lock : [EOL] assert cache . get . called [EOL] assert not cache . set . called [EOL] assert cache . delete . called [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import cachelock [EOL] import inspect [EOL] [EOL] import pytest [EOL] [EOL] import cachelock [EOL] [EOL] [EOL] @ pytest . fixture def cache ( ) : [EOL] return cachelock . MemoryCache ( ) [EOL] [EOL] [EOL] def test_memorycache_should_be_a_class ( ) : [EOL] assert inspect . isclass ( cachelock . MemoryCache ) [EOL] [EOL] [EOL] def test_memorycache_should_have_get_method ( ) : [EOL] assert hasattr ( cachelock . MemoryCache , [string] ) [EOL] [EOL] [EOL] def test_memorycache_should_have_delete_method ( ) : [EOL] assert hasattr ( cachelock . MemoryCache , [string] ) [EOL] [EOL] [EOL] def test_memorycache_should_have_set_method ( ) : [EOL] assert hasattr ( cachelock . MemoryCache , [string] ) [EOL] [EOL] [EOL] def test_memorycache_should_set_and_get_foo_key ( cache ) : [EOL] cache . set ( [string] , [number] ) [EOL] assert cache . get ( [string] ) is [number] [EOL] [EOL] [EOL] def test_memorycache_should_delete_foo_key ( cache ) : [EOL] cache . set ( [string] , [number] ) [EOL] cache . delete ( [string] ) [EOL] assert cache . get ( [string] ) is None [EOL] [EOL] [EOL] def test_memorycache_should_return_none_for_nonexistent_key ( cache ) : [EOL] assert cache . get ( [string] ) is None [EOL] [EOL] [EOL] def test_memorycache_should_internal_cache ( ) : [EOL] cache_1 = cachelock . MemoryCache ( ) [EOL] cache_2 = cachelock . MemoryCache ( ) [EOL] assert cache_1 is not cache_2 [EOL] cache_1 . set ( [string] , [number] ) [EOL] cache_2 . set ( [string] , [number] ) [EOL] assert cache_1 . get ( [string] ) != cache_2 . get ( [string] ) [EOL] cache_1 . delete ( [string] ) [EOL] assert cache_2 . get ( [string] ) is [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0