from typing import Any [EOL] import typing [EOL] import asynctest [EOL] [EOL] [EOL] class ConnectionMock : [EOL] [EOL] async def close ( self ) : [EOL] pass [EOL] [EOL] [EOL] class TestPool ( asynctest . TestCase ) : [EOL] [EOL] @ asynctest . patch ( [string] , new_callable = asynctest . CoroutineMock , return_value = ConnectionMock ( ) ) async def test_create_pool ( self , mocked_connect ) : [EOL] from async_repool . async_pool import AsyncConnectionPool [EOL] p = AsyncConnectionPool ( dict ( ) ) [EOL] await p . init_pool ( ) [EOL] self . assertFalse ( p . empty ) [EOL] await p . release_pool ( ) [EOL] [EOL] @ asynctest . patch ( [string] , new_callable = asynctest . CoroutineMock , return_value = ConnectionMock ( ) ) async def test_acquire_release_one ( self , mocked_connect ) : [EOL] from async_repool . async_pool import AsyncConnectionPool [EOL] p = AsyncConnectionPool ( dict ( ) ) [EOL] await p . init_pool ( ) [EOL] nb_init = p . _pool . qsize ( ) [EOL] conn = await p . acquire ( ) [EOL] await p . release ( conn ) [EOL] nb_term = p . _pool . qsize ( ) [EOL] self . assertEqual ( nb_init , nb_term ) [EOL] await p . release_pool ( ) [EOL] [EOL] @ asynctest . patch ( [string] , new_callable = asynctest . CoroutineMock , return_value = ConnectionMock ( ) ) async def test_acquire_one ( self , mocked_connect ) : [EOL] from async_repool . async_pool import AsyncConnectionPool [EOL] p = AsyncConnectionPool ( dict ( ) ) [EOL] await p . init_pool ( ) [EOL] nb_init = p . _pool . qsize ( ) [EOL] conn = await p . acquire ( ) [EOL] nb_term = p . _pool . qsize ( ) [EOL] self . assertEqual ( nb_init - [number] , nb_term ) [EOL] await p . release ( conn ) [EOL] await p . release_pool ( ) [EOL] [EOL] @ asynctest . patch ( [string] , new_callable = asynctest . CoroutineMock , return_value = ConnectionMock ( ) ) async def test_acquire ( self , mocked_connect ) : [EOL] from async_repool . async_pool import AsyncConnectionPool [EOL] p = AsyncConnectionPool ( dict ( ) ) [EOL] await p . init_pool ( ) [EOL] conn = await p . acquire ( ) [EOL] self . assertIsInstance ( conn , ConnectionMock ) [EOL] await p . release ( conn ) [EOL] await p . release_pool ( ) [EOL] [EOL] @ asynctest . patch ( [string] , new_callable = asynctest . CoroutineMock , return_value = ConnectionMock ( ) ) async def test_release_pool ( self , mocked_connect ) : [EOL] from async_repool . async_pool import AsyncConnectionPool , PoolException [EOL] p = AsyncConnectionPool ( dict ( ) ) [EOL] await p . init_pool ( ) [EOL] conn1 = await p . acquire ( ) [EOL] conn2 = await p . acquire ( ) [EOL] await p . release ( conn1 ) [EOL] with self . assertRaises ( PoolException ) : [EOL] await p . release_pool ( ) [EOL] [EOL] @ asynctest . patch ( [string] , new_callable = asynctest . CoroutineMock , return_value = ConnectionMock ( ) ) async def test_connect ( self , mocked_connect ) : [EOL] from async_repool . async_pool import AsyncConnectionPool [EOL] p = AsyncConnectionPool ( dict ( ) , pool_size = [number] ) [EOL] await p . init_pool ( ) [EOL] async with p . connect ( ) as conn : [EOL] self . assertEqual ( [number] , p . _pool . qsize ( ) ) [EOL] self . assertEqual ( [number] , p . _pool . qsize ( ) ) [EOL] await p . release_pool ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from . test_pool import *	0 0 0 0 0
from typing import List [EOL] import typing [EOL] from . async_pool import * [EOL] [EOL] __author__ = [string] [EOL] __copyright__ = [string] [EOL] __credits__ = [ [string] ] [EOL] __license__ = [string] [EOL] __version__ = [string] [EOL] __maintainer__ = [string] [EOL] __email__ = [string] [EOL] __status__ = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0