from typing import Dict , Any [EOL] import typing [EOL] from setuptools import setup [EOL] import os [EOL] import sys [EOL] [EOL] from os import path [EOL] [EOL] FILE_PATH = path . dirname ( path . realpath ( __file__ ) ) [EOL] [EOL] info = { } [EOL] [comment] [EOL] with open ( path . join ( FILE_PATH , [string] , [string] ) ) as f : [EOL] exec ( f . read ( ) , info ) [EOL] [EOL] setup ( name = [string] , version = info [ [string] ] , description = [string] , long_description = [string] , url = [string] , author = [string] , packages = [ [string] ] , package_data = { [string] : [ [string] ] } , classifiers = [ [string] , [string] , [string] , [string] , [string] , [string] , ] , python_requires = [string] , install_requires = [ [string] , [string] , [string] , ] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fmi [EOL] import pytest [EOL] [EOL] [EOL] @ pytest . mark . asyncio async def test_cannot_use_five_as_interval ( ) : [EOL] with pytest . raises ( ValueError ) : [EOL] await fmi . latest_observations ( [string] , timestep = [number] ) [EOL] [EOL] [EOL] @ pytest . mark . asyncio async def test_sea_levels_invalid_timestep ( ) : [EOL] with pytest . raises ( ValueError ) : [EOL] await fmi . sea_levels ( [number] , timestep = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any , List , Optional [EOL] import fmi [EOL] import datetime [EOL] import typing [EOL] from datetime import datetime [EOL] [EOL] from fmi . wfs_parse import ( parse_latest_observations , _parse_feature , _extract_node_id , _dict_to_observation , _parse_exception , parse_forecast , parse_sea_levels , _parse_watlev_property , ) [EOL] [EOL] from pytest import approx [EOL] [EOL] [EOL] def test_wfs_observation_parsing ( observation_gml ) : [EOL] parsed = parse_latest_observations ( observation_gml ) [EOL] before_len = len ( observation_gml ) [EOL] after_len = len ( parsed ) [EOL] assert after_len < before_len [EOL] [EOL] [EOL] def test_wfs_parse_coords ( observation_node ) : [EOL] parsed = _parse_feature ( observation_node ) [EOL] lat = float ( parsed [ [string] ] ) [EOL] lon = float ( parsed [ [string] ] ) [EOL] [EOL] assert lon > [number] [EOL] assert lat < [number] [EOL] [EOL] [EOL] def test_wfs_parse_property ( observation_node ) : [EOL] parsed = _parse_feature ( observation_node ) [EOL] prop = parsed [ [string] ] [EOL] [EOL] assert prop == [string] [EOL] [EOL] [EOL] def test_compare_element_id ( observation_node ) : [EOL] res = _extract_node_id ( observation_node ) [EOL] assert len ( res ) == [number] [EOL] [EOL] [EOL] def test_time_parsed_exact ( observation_node ) : [EOL] parsed_node = _parse_feature ( observation_node ) [EOL] result_timestamp = datetime . utcfromtimestamp ( parsed_node [ [string] ] ) [EOL] assert result_timestamp . hour == [number] [EOL] assert result_timestamp . minute == [number] [EOL] [EOL] [EOL] def test_parse_forecast_not_empty ( forecast_gml ) : [EOL] forecasts = parse_forecast ( forecast_gml ) [EOL] [EOL] assert forecasts [EOL] [EOL] [EOL] def test_parse_forecast_has_temperature ( forecast_gml ) : [EOL] forecast = parse_forecast ( forecast_gml ) [ [number] ] [EOL] [EOL] assert forecast . temperature == approx ( [number] ) [EOL] [EOL] [EOL] def test_parse_forecast_has_text_representation ( forecast_gml ) : [EOL] forecast = parse_forecast ( forecast_gml ) [ [number] ] [EOL] [EOL] assert forecast . weather_text == [string] [EOL] [EOL] [EOL] def test_parse_exception ( api_exception ) : [EOL] res = _parse_exception ( api_exception ) [EOL] [EOL] assert [string] in res [EOL] assert [string] in res [EOL] [EOL] [EOL] def test_parse_sea_level_valid_timestamp ( sea_level_gml ) : [EOL] unix_timestamp , _ = parse_sea_levels ( sea_level_gml ) [ [number] ] [EOL] datetime . utcfromtimestamp ( unix_timestamp ) [EOL] [EOL] [EOL] def test_parse_sea_level_value ( sea_level_gml ) : [EOL] sea_levels = parse_sea_levels ( sea_level_gml ) [EOL] _ , sea_level = sea_levels [ [number] ] [EOL] [EOL] assert sea_level == [number] [EOL] [EOL] [EOL] def test_sea_level_trailing_null_is_removed ( sea_level_gml ) : [EOL] sea_levels = parse_sea_levels ( sea_level_gml ) [EOL] _ , sea_level = sea_levels [ - [number] ] [EOL] [EOL] assert sea_level is not None [EOL] [EOL] [EOL] def test_parse_null_watlev_property ( ) : [EOL] example = { [string] : [string] } [EOL] result = _parse_watlev_property ( example ) [EOL] assert result is None [EOL] [EOL] [EOL] def test_parse_watlev_property ( ) : [EOL] example = { [string] : [number] } [EOL] result = _parse_watlev_property ( example ) [EOL] assert result == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fmi [EOL] from fmi . model import Observation , Coordinates [EOL] [EOL] [EOL] def test_return_none_if_zero_wawa ( ) : [EOL] obs = Observation ( Coordinates ( [number] , [number] ) , [number] , [number] , [number] , [number] , wawa = [number] ) [EOL] assert obs . weather_text is None [EOL] [EOL] [EOL] def test_return_sumua_if_weather_code_30 ( ) : [EOL] obs = Observation ( Coordinates ( [number] , [number] ) , [number] , [number] , [number] , [number] , wawa = [number] ) [EOL] assert obs . weather_text == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import pytest [EOL] from os import path , environ [EOL] from lxml import etree [EOL] [EOL] import fmi [EOL] [EOL] FIXTURE_DIR = path . join ( path . dirname ( path . realpath ( __file__ ) ) , [string] ) [EOL] [EOL] [EOL] def parse_first_node ( gml ) : [EOL] parsed = etree . fromstring ( gml ) [EOL] xpath = [string] [EOL] return parsed . find ( xpath , namespaces = parsed . nsmap ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def observation_gml ( ) : [EOL] [docstring] [EOL] observation_file = path . join ( FIXTURE_DIR , [string] ) [EOL] [EOL] with open ( observation_file , [string] ) as f : [EOL] return f . read ( ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def observation_node ( observation_gml ) : [EOL] return parse_first_node ( observation_gml ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def forecast_gml ( ) : [EOL] forecast_file = path . join ( FIXTURE_DIR , [string] ) [EOL] [EOL] with open ( forecast_file , [string] ) as f : [EOL] return f . read ( ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def forecast_node ( forecast_gml ) : [EOL] return parse_first_node ( forecast_gml ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def api_exception ( ) : [EOL] with open ( path . join ( FIXTURE_DIR , [string] ) , [string] ) as ex_file : [EOL] return etree . fromstring ( ex_file . read ( ) ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def sea_level_gml ( ) : [EOL] with open ( path . join ( FIXTURE_DIR , [string] ) , [string] ) as gml_file : [EOL] return gml_file . read ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import fmi [EOL] import fmi [EOL] import pytest [EOL] [EOL] [EOL] @ pytest . mark . asyncio @ pytest . mark . slow async def test_temp_for_helsinki ( ) : [EOL] w = await fmi . weather_now ( [string] ) [EOL] [EOL] assert - [number] < w . temperature < [number] [EOL] [EOL] [EOL] @ pytest . mark . asyncio @ pytest . mark . slow async def test_invalid_place ( ) : [EOL] with pytest . raises ( ValueError ) : [EOL] await fmi . weather_now ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import fmi [EOL] [docstring] [EOL] [EOL] import asyncio [EOL] import fmi [EOL] [EOL] [EOL] async def main ( ) : [EOL] observation = await fmi . weather_now ( [string] ) [EOL] [EOL] print ( f" [string] { observation . temperature } [string] " f"{ observation . wind_speed } [string] " ) [EOL] [EOL] [EOL] asyncio . run ( main ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Tuple , Dict , Any , List [EOL] import typing [EOL] import os [EOL] import sys [EOL] [EOL] sys . path . insert ( [number] , os . path . abspath ( [string] ) ) [EOL] [EOL] from fmi . model import Observation [EOL] from fmi import __version__ [EOL] [EOL] from sphinx . ext . autodoc import ( ClassLevelDocumenter , InstanceAttributeDocumenter , ) [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] extensions = [ [string] , [string] , [string] , ] [EOL] [EOL] [comment] [EOL] templates_path = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] source_suffix = [string] [EOL] [EOL] [comment] [EOL] master_doc = [string] [EOL] [EOL] [comment] [EOL] project = [string] [EOL] copyright = [string] [EOL] author = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] version = __version__ [EOL] [comment] [EOL] release = __version__ [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] language = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] exclude_patterns = [ [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] pygments_style = [string] [EOL] [EOL] [comment] [EOL] todo_include_todos = False [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_theme = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_theme_options = { [string] : True , [string] : False } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_static_path = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_sidebars = { [string] : [ [string] , [string] , [string] ] } [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] htmlhelp_basename = [string] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] latex_elements = { } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] latex_documents = [ ( master_doc , [string] , [string] , [string] , [string] ) ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] man_pages = [ ( master_doc , [string] , [string] , [ author ] , [number] ) ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] texinfo_documents = [ ( master_doc , [string] , [string] , author , [string] , [string] , [string] , ) ] [EOL] [EOL] autoclass_content = [string] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,typing.List[builtins.str],builtins.int]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Callable , Optional , Union , Any [EOL] import fmi [EOL] import builtins [EOL] import typing [EOL] from typing import Callable , Dict , Optional , Union , Any [EOL] from pprint import pformat [EOL] [EOL] from fmi . constant import OBSERVATION_CODES , FORECAST_CODES [EOL] [EOL] OBSERVATION_PARAMS = { [string] : float , [string] : float , [string] : float , [string] : float , [string] : float , [string] : float , [string] : float , [string] : lambda s : int ( float ( s ) ) , [string] : float , [string] : float , [string] : float , [string] : lambda s : int ( float ( s ) ) , } [EOL] [EOL] OBSERVATION_SCHEMA = { [string] : float , [string] : float , [string] : int , ** OBSERVATION_PARAMS , } [EOL] [EOL] [EOL] class Coordinates : [EOL] def __init__ ( self , lat , lon ) : [EOL] [comment] [EOL] self . lat = lat [EOL] [EOL] [comment] [EOL] self . lon = lon [EOL] [EOL] [EOL] class Observation : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , coordinates , humidity , temperature , timestamp , dewpoint = None , pressure = None , precipitation_1h = None , snow = None , visibility = None , wind_direction = None , wind_gust = None , wind_speed = None , wawa = None , ) : [EOL] [comment] [EOL] self . coordinates = coordinates [EOL] [EOL] [comment] [EOL] self . pressure = pressure [EOL] [EOL] [comment] [EOL] self . precipitation_1h = precipitation_1h [EOL] [EOL] [comment] [EOL] self . humidity = humidity [EOL] [EOL] [comment] [EOL] self . snow = snow [EOL] [EOL] [comment] [EOL] self . temperature = temperature [EOL] [EOL] [comment] [EOL] self . dewpoint = dewpoint [EOL] [EOL] [comment] [EOL] self . timestamp = timestamp [EOL] [EOL] [comment] [EOL] self . visibility = visibility [EOL] [EOL] [comment] [EOL] self . wind_direction = wind_direction [EOL] [EOL] [comment] [EOL] self . wind_gust = wind_gust [EOL] [EOL] [comment] [EOL] self . wind_speed = wind_speed [EOL] [EOL] self . _wawa = wawa [EOL] [EOL] @ property def weather_text ( self ) : [EOL] [docstring] [EOL] if self . _wawa : [EOL] return OBSERVATION_CODES [ self . _wawa ] [EOL] return None [EOL] [EOL] def __str__ ( self ) : [EOL] return pformat ( self . __dict__ ) [EOL] [EOL] [EOL] class Forecast : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , dewpoint , height , high_cloud_cover , humidity , landseamask , low_cloud_cover , max_wind , med_cloud_cover , precipitation_1h , precipitation_amount , pressure , radiation_diffuse_acc , radiation_global_acc , radiation_lwa_acc , radiation_netsurface_lwa_acc , radiation_netsurface_swa_acc , temperature , total_cloud_cover , wind_direction , wind_gust , wind_speed , wind_ums , wind_vms , coordinates , timestamp , weather_symbol_code , ) : [EOL] [comment] [EOL] self . dewpoint = dewpoint [EOL] [EOL] [comment] [EOL] self . height = height [EOL] [EOL] [comment] [EOL] self . high_cloud_cover = high_cloud_cover [EOL] [EOL] [comment] [EOL] self . humidity = humidity [EOL] [EOL] [comment] [EOL] self . landseamask = landseamask [EOL] [EOL] [comment] [EOL] self . low_cloud_cover = low_cloud_cover [EOL] [EOL] [comment] [EOL] self . max_wind = max_wind [EOL] [EOL] [comment] [EOL] self . med_cloud_cover = med_cloud_cover [EOL] [EOL] [comment] [EOL] self . precipitation_1h = precipitation_1h [EOL] [EOL] [comment] [EOL] self . precipitation_amount = precipitation_amount [EOL] [EOL] [comment] [EOL] self . pressure = pressure [EOL] [EOL] [comment] [EOL] self . radiation_diffuse_acc = radiation_diffuse_acc [EOL] [EOL] [comment] [EOL] self . radiation_global_acc = radiation_global_acc [EOL] [EOL] [comment] [EOL] self . radiation_lwa_acc = radiation_lwa_acc [EOL] [EOL] [comment] [EOL] self . radiation_netsurface_lwa_acc = radiation_netsurface_lwa_acc [EOL] [EOL] [comment] [EOL] self . radiation_netsurface_swa_acc = radiation_netsurface_swa_acc [EOL] [EOL] [comment] [EOL] self . temperature = temperature [EOL] [EOL] [comment] [EOL] self . total_cloud_cover = total_cloud_cover [EOL] [EOL] [comment] [EOL] self . wind_direction = wind_direction [EOL] [EOL] [comment] [EOL] self . wind_gust = wind_gust [EOL] [EOL] [comment] [EOL] self . wind_speed = wind_speed [EOL] [EOL] [comment] [EOL] self . wind_ums = wind_ums [EOL] [EOL] [comment] [EOL] self . wind_vms = wind_vms [EOL] [EOL] [comment] [EOL] self . coordinates = coordinates [EOL] [EOL] [comment] [EOL] self . timestamp = timestamp [EOL] [EOL] self . _weather_symbol_code = weather_symbol_code [EOL] [EOL] @ property def weather_text ( self ) : [EOL] [docstring] [EOL] if self . _weather_symbol_code : [EOL] return FORECAST_CODES [ self . _weather_symbol_code ] [EOL] [EOL] return None [EOL] [EOL] def __str__ ( self ) : [EOL] return pformat ( self . __dict__ ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Callable[[builtins.str],typing.Union[builtins.float,builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Callable[[builtins.str],typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Callable[[builtins.str],typing.Union[builtins.float,builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $fmi.model.Coordinates$ 0 $builtins.int$ 0 $builtins.float$ 0 $builtins.int$ 0 $typing.Optional[builtins.float]$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $typing.Optional[builtins.float]$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 $fmi.model.Coordinates$ 0 $fmi.model.Coordinates$ 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 $typing.Optional[builtins.float]$ 0 $typing.Optional[builtins.float]$ 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 $typing.Optional[builtins.float]$ 0 $typing.Optional[builtins.float]$ 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[builtins.int]$ 0 0 0 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.int$ 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 $builtins.float$ 0 $fmi.model.Coordinates$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 $fmi.model.Coordinates$ 0 $fmi.model.Coordinates$ 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Dict [EOL] import typing [EOL] OBSERVATION_CODES = { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } [EOL] [EOL] FORECAST_CODES = { [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , [number] : [string] , } [EOL]	0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
__version__ = [string] [EOL]	$builtins.str$ 0 0 0
from typing import Dict , Optional , List , Union , Any , Tuple [EOL] import fmi [EOL] import datetime [EOL] import builtins [EOL] import typing [EOL] [docstring] [EOL] from typing import List , Tuple , Optional , Any , Dict [EOL] from datetime import datetime , timedelta [EOL] [EOL] from urllib . parse import urlencode [EOL] import aiohttp [EOL] [EOL] from fmi . model import Observation , Forecast [EOL] from fmi . wfs_parse import ( parse_latest_observations , parse_forecast , parse_sea_levels , ) [EOL] [EOL] from fmi . model import OBSERVATION_PARAMS [EOL] [EOL] WFS_URL = [string] [EOL] [EOL] [EOL] async def fetch ( url , aiohttp_kwargs ) : [EOL] aiohttp_kwargs = aiohttp_kwargs or { } [EOL] [EOL] async with aiohttp . ClientSession ( ) as session : [EOL] async with session . get ( url , ** aiohttp_kwargs ) as response : [EOL] res = await response . read ( ) [EOL] return res [EOL] [EOL] [EOL] async def latest_observations ( place , starttime = None , timestep = [number] , aiohttp_kwargs = None , ) : [EOL] [docstring] [EOL] sensor_parameters = [string] . join ( OBSERVATION_PARAMS . keys ( ) ) [EOL] [EOL] params = { [string] : [string] , [string] : [string] , [string] : place , [string] : sensor_parameters , } [EOL] [EOL] if timestep % [number] != [number] : [EOL] raise ValueError ( [string] ) [EOL] [EOL] if timestep != [number] : [EOL] params [ [string] ] = str ( timestep ) [EOL] [EOL] if starttime : [EOL] params [ [string] ] = starttime [EOL] [EOL] url = WFS_URL + urlencode ( params ) [EOL] unparsed_gml = await fetch ( url , aiohttp_kwargs ) [EOL] [EOL] return parse_latest_observations ( unparsed_gml ) [EOL] [EOL] [EOL] async def forecast ( place , timestep = [number] , count = [number] , aiohttp_kwargs = None ) : [EOL] [docstring] [EOL] if count > [number] : [EOL] raise ValueError ( [string] ) [EOL] [EOL] params = { [string] : [string] , [string] : [string] , [string] : place , } [EOL] [EOL] if timestep != [number] : [EOL] params [ [string] ] = str ( timestep ) [EOL] [EOL] if count != [number] : [EOL] [comment] [EOL] [comment] [EOL] params [ [string] ] = str ( count * [number] ) [EOL] [EOL] url = WFS_URL + urlencode ( params ) [EOL] unparsed_gml = await fetch ( url , aiohttp_kwargs ) [EOL] return parse_forecast ( unparsed_gml ) [EOL] [EOL] [EOL] async def weather_now ( place , aiohttp_kwargs = None ) : [EOL] [docstring] [EOL] half_hour_before = datetime . utcnow ( ) - timedelta ( minutes = [number] ) [EOL] iso_time = datetime . isoformat ( half_hour_before . replace ( microsecond = [number] ) ) [EOL] [EOL] observations = await latest_observations ( place , starttime = iso_time , timestep = [number] , aiohttp_kwargs = aiohttp_kwargs ) [EOL] [EOL] if not observations : [EOL] raise ValueError ( [string] . format ( place ) ) [EOL] [EOL] return observations [ - [number] ] [EOL] [EOL] [EOL] async def sea_levels ( fmisid , starttime = None , endtime = None , timestep = [number] , aiohttp_kwargs = None , ) : [EOL] [docstring] [EOL] if timestep % [number] != [number] : [EOL] raise ValueError ( [string] ) [EOL] [EOL] raw_params = { [string] : [string] , [string] : [string] , [string] : fmisid , [string] : timestep , [string] : starttime , [string] : endtime , } [EOL] [EOL] [comment] [EOL] params = { k : v for k , v in raw_params . items ( ) if v is not None } [EOL] [EOL] url = WFS_URL + urlencode ( params ) [EOL] [EOL] unparsed_gml = await fetch ( url , aiohttp_kwargs ) [EOL] return parse_sea_levels ( unparsed_gml ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,typing.Optional[builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Generator , Optional , List , Iterator , Any , Tuple [EOL] import fmi [EOL] import builtins [EOL] import typing [EOL] from typing import List , Dict , Optional , Tuple , Any [EOL] [EOL] import itertools [EOL] from functools import reduce [EOL] from dateutil . parser import parse as timeparse [EOL] from lxml import etree [EOL] from fmi . model import OBSERVATION_SCHEMA , Forecast , Observation , Coordinates [EOL] [EOL] [EOL] def _read_raw_gml ( gml ) : [EOL] is_invalid_api_key = gml . startswith ( [string] ) [EOL] [EOL] if is_invalid_api_key : [EOL] raise ValueError ( [string] ) [EOL] [EOL] parsed_gml = etree . fromstring ( gml ) [EOL] if parsed_gml . tag . endswith ( [string] ) : [EOL] error_reason = _parse_exception ( parsed_gml ) [EOL] raise ValueError ( error_reason ) [EOL] [EOL] return parsed_gml [EOL] [EOL] [EOL] def _extract_features ( gml ) : [EOL] parsed_gml = _read_raw_gml ( gml ) [EOL] [EOL] elements = parsed_gml . findall ( [string] , namespaces = parsed_gml . nsmap ) [EOL] [EOL] groups = itertools . groupby ( elements , _extract_node_id ) [EOL] [EOL] return [ reduce ( _merge , e , { } ) for _ , e in groups ] [EOL] [EOL] [EOL] def parse_latest_observations ( gml ) : [EOL] [docstring] [EOL] [EOL] merged = _extract_features ( gml ) [EOL] return [ _dict_to_observation ( i ) for i in merged ] [EOL] [EOL] [EOL] def parse_forecast ( gml ) : [EOL] [docstring] [EOL] merged = _extract_features ( gml ) [EOL] return [ Forecast ( dewpoint = float ( i [ [string] ] ) , height = float ( i [ [string] ] ) , high_cloud_cover = float ( i [ [string] ] ) , humidity = float ( i [ [string] ] ) , landseamask = float ( i [ [string] ] ) , low_cloud_cover = float ( i [ [string] ] ) , max_wind = float ( i [ [string] ] ) , med_cloud_cover = float ( i [ [string] ] ) , precipitation_1h = float ( i [ [string] ] ) , precipitation_amount = float ( i [ [string] ] ) , pressure = float ( i [ [string] ] ) , radiation_diffuse_acc = float ( i [ [string] ] ) , radiation_global_acc = float ( i [ [string] ] ) , radiation_lwa_acc = float ( i [ [string] ] ) , radiation_netsurface_lwa_acc = float ( i [ [string] ] ) , radiation_netsurface_swa_acc = float ( i [ [string] ] ) , temperature = float ( i [ [string] ] ) , total_cloud_cover = float ( i [ [string] ] ) , wind_direction = int ( float ( i [ [string] ] ) ) , wind_gust = float ( i [ [string] ] ) , wind_speed = float ( i [ [string] ] ) , wind_ums = float ( i [ [string] ] ) , wind_vms = float ( i [ [string] ] ) , coordinates = Coordinates ( float ( i [ [string] ] ) , float ( i [ [string] ] ) ) , timestamp = int ( i [ [string] ] ) , weather_symbol_code = int ( float ( i [ [string] ] ) ) , ) for i in merged ] [EOL] [EOL] [EOL] def _parse_watlev_property ( feature ) : [EOL] if feature [ [string] ] == [string] : [EOL] return None [EOL] [EOL] return int ( float ( feature [ [string] ] ) ) [EOL] [EOL] [EOL] def parse_sea_levels ( gml ) : [EOL] [docstring] [EOL] raw_features = _extract_features ( gml ) [EOL] [EOL] timestamps = ( o [ [string] ] for o in raw_features ) [EOL] sea_levels = ( _parse_watlev_property ( o ) for o in raw_features ) [EOL] [EOL] combined = list ( zip ( timestamps , sea_levels ) ) [EOL] [EOL] while combined and combined [ - [number] ] [ [number] ] is None : [EOL] combined . pop ( ) [EOL] [EOL] if not combined : [EOL] raise ValueError ( [string] ) [EOL] [EOL] return combined [EOL] [EOL] [EOL] def _parse_exception ( gml ) : [EOL] exception_element = gml . find ( [string] , namespaces = gml . nsmap ) [EOL] error_code = exception_element . get ( [string] ) [EOL] [EOL] text = _gml_find ( gml , [string] ) [EOL] return [string] . format ( error_code , text ) [EOL] [EOL] [EOL] def _extract_node_id ( element ) : [EOL] id_text = element . values ( ) [ [number] ] [EOL] element_id = id_text . split ( [string] , [number] ) [ [number] ] [EOL] return element_id . split ( [string] , [number] ) [ : [number] ] [EOL] [EOL] [EOL] def _dict_to_observation ( obj ) : [EOL] obs = { k : OBSERVATION_SCHEMA [ k ] ( v ) for k , v in obj . items ( ) if v != [string] } [EOL] [EOL] return Observation ( coordinates = Coordinates ( float ( obs [ [string] ] ) , float ( obs [ [string] ] ) ) , pressure = int ( obs [ [string] ] ) if obs . get ( [string] ) else None , precipitation_1h = float ( obs [ [string] ] ) if obs . get ( [string] ) else None , humidity = int ( obs [ [string] ] ) , snow = int ( obs [ [string] ] ) if obs . get ( [string] ) else None , temperature = float ( obs [ [string] ] ) , dewpoint = float ( obs [ [string] ] ) if obs . get ( [string] ) else None , timestamp = int ( obs [ [string] ] ) , visibility = int ( obs [ [string] ] ) if obs . get ( [string] ) else None , wind_direction = int ( obs [ [string] ] ) if obs . get ( [string] ) else None , wind_gust = int ( obs [ [string] ] ) if obs . get ( [string] ) else None , wind_speed = int ( obs [ [string] ] ) if obs . get ( [string] ) else None , wawa = int ( obs [ [string] ] ) if obs . get ( [string] ) else None , ) [EOL] [EOL] [EOL] def _merge ( acc , cur ) : [EOL] [docstring] [EOL] parsed = _parse_feature ( cur ) [EOL] acc [ [string] ] = parsed [ [string] ] [EOL] acc [ [string] ] = parsed [ [string] ] [EOL] acc [ [string] ] = parsed [ [string] ] [EOL] key = parsed [ [string] ] [EOL] val = parsed [ [string] ] [EOL] [EOL] acc [ key ] = val [EOL] [EOL] return acc [EOL] [EOL] [EOL] def _gml_find ( gml , search_term ) : [EOL] element_text = gml . findtext ( [string] + search_term , namespaces = gml . nsmap ) [EOL] return element_text . strip ( ) [EOL] [EOL] [EOL] def _parse_feature ( gml ) : [EOL] coords = _gml_find ( gml , [string] ) [EOL] lat , lon = coords . strip ( ) . split ( [string] ) [EOL] [EOL] prop = _gml_find ( gml , [string] ) [EOL] value = _gml_find ( gml , [string] ) [EOL] time_prop = _gml_find ( gml , [string] ) [EOL] [EOL] unix_timestamp = int ( timeparse ( time_prop ) . timestamp ( ) ) [EOL] [EOL] return { [string] : prop , [string] : value , [string] : unix_timestamp , [string] : lat , [string] : lon , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[fmi.model.Observation]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[fmi.model.Forecast]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,typing.Optional[builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fmi.model.Observation$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . model import Observation , Forecast , Coordinates [EOL] from . fmi import latest_observations , forecast , weather_now , sea_levels [EOL] from . __version__ import __version__ [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0