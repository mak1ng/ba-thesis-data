from typing import List [EOL] import typing [EOL] from setuptools import setup [EOL] [EOL] from graphene_permissions import __version__ [EOL] [EOL] with open ( [string] , encoding = [string] ) as f : [EOL] long_description = f . read ( ) [EOL] [EOL] with open ( [string] ) as f : [EOL] install_requirements = f . readlines ( ) [EOL] [EOL] setup ( name = [string] , packages = ( [string] , ) , license = [string] , version = __version__ , author = [string] , description = [string] , long_description = long_description , long_description_content_type = [string] , url = [string] , install_requires = install_requirements , keywords = [string] , python_requires = [string] , classifiers = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from contextlib import contextmanager [EOL] [EOL] from django . core . management import call_command [EOL] [EOL] [EOL] @ contextmanager def load_fixtures ( * li ) : [EOL] for i in li : [EOL] call_command ( [string] , i ) [EOL] yield [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def test_fake ( ) : [EOL] assert [number] == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0
import pytest [EOL] from django . test import Client [EOL] [EOL] [EOL] @ pytest . fixture def client ( ) : [EOL] return Client ( ) [EOL] [EOL] [EOL] @ pytest . fixture def test_kwargs ( ) : [EOL] return { [string] : [string] , [string] : [string] , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] [EOL] from tests . utils import load_fixtures [EOL] [EOL] [EOL] @ load_fixtures ( [string] ) @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( None , None ) , ] ) @ pytest . mark . django_db def test_mutation_superuser_required_permission ( client , test_kwargs , login , password ) : [EOL] client . login ( username = login , password = password ) [EOL] [EOL] mutation = [string] [EOL] [EOL] response = client . post ( data = mutation , ** test_kwargs ) [EOL] result = response . json ( ) [EOL] [EOL] if login == [string] : [EOL] assert result [ [string] ] == { [string] : { [string] : { [string] : [string] , [string] : [string] } , [string] : [number] } } [EOL] else : [EOL] assert result [ [string] ] == { [string] : { [string] : None , [string] : [number] } } [EOL] [EOL] [EOL] @ load_fixtures ( [string] ) @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( None , None ) , ] ) @ pytest . mark . django_db def test_mutation_staff_required_permission ( client , test_kwargs , login , password ) : [EOL] client . login ( username = login , password = password ) [EOL] [EOL] mutation = [string] [EOL] [EOL] response = client . post ( data = mutation , ** test_kwargs ) [EOL] result = response . json ( ) [EOL] [EOL] if login == [string] : [EOL] assert result [ [string] ] == { [string] : { [string] : { [string] : [string] , [string] : [string] } , [string] : [number] } } [EOL] else : [EOL] assert result [ [string] ] == { [string] : { [string] : None , [string] : [number] } } [EOL] [EOL] [EOL] @ load_fixtures ( [string] ) @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( None , None ) , ] ) @ pytest . mark . django_db def test_mutation_allow_authenticated_permission ( client , test_kwargs , login , password ) : [EOL] client . login ( username = login , password = password ) [EOL] [EOL] mutation = [string] [EOL] [EOL] response = client . post ( data = mutation , ** test_kwargs ) [EOL] result = response . json ( ) [EOL] [EOL] if login in ( [string] , [string] , [string] ) : [EOL] assert result [ [string] ] == { [string] : { [string] : { [string] : [string] , [string] : [string] } , [string] : [number] } } [EOL] else : [EOL] assert result [ [string] ] == { [string] : { [string] : None , [string] : [number] } } [EOL] [EOL] [EOL] @ load_fixtures ( [string] ) @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( None , None ) , ] ) @ pytest . mark . django_db def test_mutation_allow_any_permission ( client , test_kwargs , login , password ) : [EOL] client . login ( username = login , password = password ) [EOL] [EOL] mutation = [string] [EOL] [EOL] response = client . post ( data = mutation , ** test_kwargs ) [EOL] result = response . json ( ) [EOL] [EOL] assert result [ [string] ] == { [string] : { [string] : { [string] : [string] , [string] : [string] } , [string] : [number] } } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , List [EOL] import typing [EOL] SECRET_KEY = [string] [EOL] [EOL] DEBUG = True [EOL] [EOL] [EOL] INSTALLED_APPS = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] MIDDLEWARE = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] DATABASES = { [string] : { [string] : [string] , } } [EOL] [EOL] [EOL] ROOT_URLCONF = [string] [EOL] [EOL] [EOL] GRAPHENE = { [string] : [string] } [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0
	0
from typing import Any , List [EOL] import typing [EOL] from django . conf . urls import url [EOL] from graphene_django . views import GraphQLView [EOL] [EOL] urlpatterns = [ url ( [string] , GraphQLView . as_view ( graphiql = True ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type [EOL] import builtins [EOL] import typing [EOL] import graphene_permissions [EOL] import graphql [EOL] import operator [EOL] from typing import Any [EOL] [EOL] from graphql import ResolveInfo [EOL] [EOL] [EOL] class BaseOperatorPerm : [EOL] def __init__ ( self , op1 , op2 ) : [EOL] self . op1 = op1 [EOL] self . op2 = op2 [EOL] [EOL] def __call__ ( self ) : [EOL] return self [EOL] [EOL] def has_permission ( self , info ) : [EOL] return self . op_func ( self . op1 . has_permission ( info ) , self . op2 . has_permission ( info ) ) [EOL] [EOL] def has_node_permission ( self , info , id ) : [EOL] return self . op_func ( self . op1 . has_node_permission ( info , id ) , self . op2 . has_node_permission ( info , id ) , ) [EOL] [EOL] def has_mutation_permission ( self , root , info , input ) : [EOL] return self . op_func ( self . op1 . has_mutation_permission ( root , info , input ) , self . op2 . has_mutation_permission ( root , info , input ) , ) [EOL] [EOL] def has_filter_permission ( self , info ) : [EOL] return self . op_func ( self . op1 . has_filter_permission ( info ) , self . op2 . has_filter_permission ( info ) ) [EOL] [EOL] [EOL] class BaseSingleOperatorPerm ( BaseOperatorPerm ) : [EOL] def __init__ ( self , op1 ) : [EOL] self . op1 = op1 [EOL] [EOL] def has_permission ( self , info ) : [EOL] return self . op_func ( self . op1 . has_permission ( info ) ) [EOL] [EOL] def has_node_permission ( self , info , id ) : [EOL] return self . op_func ( self . op1 . has_node_permission ( info , id ) ) [EOL] [EOL] def has_mutation_permission ( self , root , info , input ) : [EOL] return self . op_func ( self . op1 . has_mutation_permission ( root , info , input ) ) [EOL] [EOL] def has_filter_permission ( self , info ) : [EOL] return self . op_func ( self . op1 . has_filter_permission ( info ) ) [EOL] [EOL] [EOL] class AND ( BaseOperatorPerm ) : [EOL] op_func = operator . and_ [EOL] [EOL] def __repr__ ( self ) : [EOL] return f' [string] { self . op1 } [string] { self . op2 } [string] ' [EOL] [EOL] [EOL] class OR ( BaseOperatorPerm ) : [EOL] op_func = operator . or_ [EOL] [EOL] def __repr__ ( self ) : [EOL] return f' [string] { self . op1 } [string] { self . op2 } [string] ' [EOL] [EOL] [EOL] class NOT ( BaseSingleOperatorPerm ) : [EOL] op_func = operator . not_ [EOL] [EOL] def __repr__ ( self ) : [EOL] return f' [string] { self . op1 } [string] ' [EOL] [EOL] [EOL] class BasePermissionMetaclass ( type ) : [EOL] def __and__ ( self , other ) : [EOL] return AND ( self , other ) [EOL] [EOL] def __or__ ( self , other ) : [EOL] return OR ( self , other ) [EOL] [EOL] def __rand__ ( self , other ) : [EOL] return AND ( other , self ) [EOL] [EOL] def __ror__ ( self , other ) : [EOL] return OR ( other , self ) [EOL] [EOL] def __invert__ ( self ) : [EOL] return NOT ( self ) [EOL] [EOL] [EOL] class BasePermission ( metaclass = BasePermissionMetaclass ) : [EOL] [docstring] [EOL] [EOL] @ classmethod def has_permission ( cls , info ) : [EOL] [docstring] [EOL] return False [EOL] [EOL] @ classmethod def has_node_permission ( cls , info , id ) : [EOL] return cls . has_permission ( info ) [EOL] [EOL] @ classmethod def has_mutation_permission ( cls , root , info , input ) : [EOL] return cls . has_permission ( info ) [EOL] [EOL] @ classmethod def has_filter_permission ( cls , info ) : [EOL] return cls . has_permission ( info ) [EOL] [EOL] [EOL] class AllowAny ( BasePermission ) : [EOL] [docstring] [EOL] [EOL] @ classmethod def has_permission ( cls , info ) : [EOL] return True [EOL] [EOL] [EOL] class AllowAuthenticated ( BasePermission ) : [EOL] [docstring] [EOL] [EOL] @ classmethod def has_permission ( cls , info ) : [EOL] return info . context . user . is_authenticated [EOL] [EOL] [EOL] class AllowStaff ( BasePermission ) : [EOL] [docstring] [EOL] [EOL] @ classmethod def has_permission ( cls , info ) : [EOL] return info . context . user . is_staff [EOL] [EOL] [EOL] class AllowSuperuser ( BasePermission ) : [EOL] [docstring] [EOL] [EOL] @ classmethod def has_permission ( cls , info ) : [EOL] return info . context . user . is_superuser [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $graphql.ResolveInfo$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $graphql.ResolveInfo$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $graphql.ResolveInfo$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Any$ 0 $graphql.ResolveInfo$ 0 $builtins.dict$ 0 0 0 0 0 0 0 0 $graphql.ResolveInfo$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $graphql.ResolveInfo$ 0 0 0 0 0 0 0 0 $graphql.ResolveInfo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $graphql.ResolveInfo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $graphql.ResolveInfo$ 0 0 0 0 $graphql.ResolveInfo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $graphql.ResolveInfo$ 0 0 0 0 $graphql.ResolveInfo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $graphql.ResolveInfo$ 0 0 0 0 $graphql.ResolveInfo$ 0 0 0 0 0 0 0
from typing import Type , Optional , Any , Tuple , Dict [EOL] import typing [EOL] import graphene_permissions [EOL] import builtins [EOL] import django [EOL] import graphql [EOL] from typing import Any , Optional [EOL] [EOL] from django . db . models import Model [EOL] from graphene_django . filter import DjangoFilterConnectionField [EOL] from graphql import ResolveInfo [EOL] [EOL] from graphene_permissions . permissions import AllowAny [EOL] [EOL] [EOL] class AuthNode : [EOL] [docstring] [EOL] permission_classes = ( AllowAny , ) [EOL] [EOL] @ classmethod def get_node ( cls , info , id ) : [EOL] if all ( ( perm . has_node_permission ( info , id ) for perm in cls . permission_classes ) ) : [EOL] try : [EOL] object_instance = cls . _meta . model . objects . get ( pk = id ) [comment] [EOL] except cls . _meta . model . DoesNotExist : [comment] [EOL] object_instance = None [EOL] return object_instance [EOL] else : [EOL] return None [EOL] [EOL] [EOL] class AuthMutation : [EOL] [docstring] [EOL] permission_classes = ( AllowAny , ) [EOL] [EOL] @ classmethod def has_permission ( cls , root , info , input ) : [EOL] return all ( ( perm . has_mutation_permission ( root , info , input ) for perm in cls . permission_classes ) ) [EOL] [EOL] [EOL] class AuthFilter ( DjangoFilterConnectionField ) : [EOL] [docstring] [EOL] permission_classes = ( AllowAny , ) [EOL] [EOL] @ classmethod def has_permission ( cls , info ) : [EOL] return all ( ( perm . has_filter_permission ( info ) for perm in cls . permission_classes ) ) [EOL] [EOL] @ classmethod def connection_resolver ( cls , resolver , connection , default_manager , max_limit , enforce_first_or_last , filterset_class , filtering_args , root , info , ** args ) : [EOL] [EOL] filter_kwargs = { k : v for k , v in args . items ( ) if k in filtering_args } [EOL] qs = filterset_class ( data = filter_kwargs , queryset = default_manager . get_queryset ( ) ) . qs [EOL] [EOL] if not cls . has_permission ( info ) : [EOL] return super ( DjangoFilterConnectionField , cls ) . connection_resolver ( resolver , connection , qs . none ( ) , max_limit , enforce_first_or_last , root , info , ** args , ) [EOL] [EOL] return super ( DjangoFilterConnectionField , cls ) . connection_resolver ( resolver , connection , qs , max_limit , enforce_first_or_last , filterset_class , filtering_args , ** args , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Type[graphene_permissions.permissions.AllowAny]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[django.db.models.Model]$ 0 0 0 $graphql.ResolveInfo$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $graphql.ResolveInfo$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Type[graphene_permissions.permissions.AllowAny]]$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.Any$ 0 $graphql.ResolveInfo$ 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $graphql.ResolveInfo$ 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Type[graphene_permissions.permissions.AllowAny]]$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $graphql.ResolveInfo$ 0 0 0 0 0 0 0 0 0 0 0 $graphql.ResolveInfo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
__version__ = [string] [EOL]	$builtins.str$ 0 0 0