[comment] [EOL] [comment] [EOL] from typing import Tuple [EOL] import typing [EOL] from . celery_app import app as celery_app [EOL] [EOL] __all__ = ( [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Any [EOL] import typing [EOL] import os [EOL] from celery import Celery [EOL] [EOL] [comment] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] app = Celery ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] app . config_from_object ( [string] , namespace = [string] ) [EOL] [EOL] [comment] [EOL] app . autodiscover_tasks ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import tornado [EOL] import typing [EOL] import os [EOL] import sys [EOL] from tornado . options import options , define [EOL] from django . core . wsgi import get_wsgi_application [EOL] import tornado . httpserver [EOL] import tornado . ioloop [EOL] import tornado . web [EOL] import tornado . wsgi [EOL] [EOL] [comment] [EOL] app_path = os . path . abspath ( os . path . join ( os . path . dirname ( os . path . abspath ( __file__ ) ) , os . pardir ) ) [EOL] sys . path . append ( os . path . join ( app_path , [string] ) ) [comment] [EOL] define ( [string] , default = [number] , type = int , help = [string] ) [EOL] [EOL] [EOL] def main ( ) : [EOL] tornado . options . parse_command_line ( ) [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] wsgi_app = tornado . wsgi . WSGIContainer ( get_wsgi_application ( ) ) [EOL] http_server = tornado . httpserver . HTTPServer ( wsgi_app , xheaders = True ) [comment] [EOL] http_server . listen ( options . port ) [EOL] tornado . ioloop . IOLoop . instance ( ) . start ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Union [EOL] import typing [EOL] __version__ = [string] [EOL] __version_info__ = tuple ( [ int ( num ) if num . isdigit ( ) else num for num in __version__ . replace ( [string] , [string] , [number] ) . split ( [string] ) ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[typing.Union[builtins.int,builtins.str],...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from django . apps import AppConfig [EOL] [EOL] [EOL] class MessagerConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
	0
	0
	0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class NewsConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Type [EOL] import zanhu [EOL] import typing [EOL] from django . contrib . auth . decorators import login_required [EOL] from django . contrib . auth . mixins import LoginRequiredMixin [EOL] from django . views . generic import ListView , DeleteView [EOL] from django . template . loader import render_to_string [EOL] from django . http import HttpResponse , HttpResponseBadRequest , JsonResponse [EOL] from django . views . decorators . http import require_http_methods [EOL] from django . urls import reverse_lazy [EOL] [EOL] [EOL] [EOL] from zanhu . news . models import News [EOL] from zanhu . helpers import ajax_required , AuthorRequiredMixin [EOL] [EOL] class NewsListView ( LoginRequiredMixin , ListView ) : [EOL] [docstring] [EOL] model = News [EOL] paginate_by = [number] [EOL] template_name = [string] [EOL] [EOL] def get_queryset ( self , ** kwargs ) : [EOL] [comment] [EOL] return News . objects . filter ( reply = False ) . select_related ( [string] , [string] ) . prefetch_related ( [string] ) [EOL] [EOL] [EOL] class NewsDeleteView ( LoginRequiredMixin , AuthorRequiredMixin , DeleteView ) : [EOL] [docstring] [EOL] model = News [EOL] template_name = [string] [EOL] success_url = reverse_lazy ( [string] ) [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] @ login_required @ ajax_required @ require_http_methods ( [ [string] ] ) def post_news ( request ) : [EOL] [docstring] [EOL] post = request . POST [ [string] ] . strip ( ) [EOL] if post : [EOL] posted = News . objects . create ( user = request . user , content = post ) [EOL] html = render_to_string ( [string] , { [string] : posted , [string] : request } ) [EOL] return HttpResponse ( html ) [EOL] else : [EOL] return HttpResponseBadRequest ( [string] ) [EOL] [EOL] [EOL] @ login_required @ ajax_required @ require_http_methods ( [ [string] ] ) def like ( request ) : [EOL] [docstring] [EOL] news_id = request . POST [ [string] ] [EOL] news = News . objects . get ( pk = news_id ) [EOL] [comment] [EOL] news . switch_like ( request . user ) [EOL] [comment] [EOL] return JsonResponse ( { [string] : news . count_likers ( ) } ) [EOL] [EOL] [EOL] @ login_required @ ajax_required @ require_http_methods ( [ [string] ] ) def get_thread ( request ) : [EOL] [docstring] [EOL] news_id = request . GET [ [string] ] [EOL] news = News . objects . select_related ( [string] ) . get ( pk = news_id ) [comment] [EOL] [comment] [EOL] news_html = render_to_string ( [string] , { [string] : news } ) [comment] [EOL] thread_html = render_to_string ( [string] , { [string] : news . get_thread ( ) } ) [comment] [EOL] return JsonResponse ( { [string] : news_id , [string] : news_html , [string] : thread_html , } ) [EOL] [EOL] [EOL] @ login_required @ ajax_required @ require_http_methods ( [ [string] ] ) def post_comment ( request ) : [EOL] [docstring] [EOL] post = request . POST [ [string] ] . strip ( ) [EOL] parent_id = request . POST [ [string] ] [EOL] parent = News . objects . get ( pk = parent_id ) [EOL] if post : [EOL] parent . reply_this ( request . user , post ) [EOL] return JsonResponse ( { [string] : parent . comment_count ( ) } ) [EOL] else : [comment] [EOL] return HttpResponseBadRequest ( [string] ) [EOL] [EOL] [EOL] @ login_required @ ajax_required @ require_http_methods ( [ [string] ] ) def update_interactions ( request ) : [EOL] [docstring] [EOL] data_point = request . POST [ [string] ] [EOL] news = News . objects . get ( pk = data_point ) [EOL] return JsonResponse ( { [string] : news . count_likers ( ) , [string] : news . comment_count ( ) } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zanhu.news.views.NewsListView]$ 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zanhu.news.views.NewsDeleteView]$ 0 0 0 $builtins.str$ 0 0 0 $typing.Type[zanhu.news.views.NewsDeleteView]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Type [EOL] import zanhu [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . utils . encoding import python_2_unicode_compatible [EOL] from django . contrib . auth . models import AbstractUser [EOL] from django . db import models [EOL] from django . urls import reverse [EOL] [EOL] @ python_2_unicode_compatible class User ( AbstractUser ) : [EOL] [EOL] [docstring] [EOL] nickname = models . CharField ( null = True , blank = True , max_length = [number] , verbose_name = [string] ) [EOL] job_title = models . CharField ( max_length = [number] , null = True , blank = True , verbose_name = [string] ) [EOL] introduction = models . TextField ( blank = True , null = True , verbose_name = [string] ) [EOL] picture = models . ImageField ( upload_to = [string] , null = True , blank = True , verbose_name = [string] ) [EOL] location = models . CharField ( max_length = [number] , null = True , blank = True , verbose_name = [string] ) [EOL] personal_url = models . URLField ( max_length = [number] , blank = True , null = True , verbose_name = [string] ) [EOL] weibo = models . URLField ( max_length = [number] , blank = True , null = True , verbose_name = [string] ) [EOL] zhihu = models . URLField ( max_length = [number] , blank = True , null = True , verbose_name = [string] ) [EOL] github = models . URLField ( max_length = [number] , blank = True , null = True , verbose_name = [string] ) [EOL] linkedin = models . URLField ( max_length = [number] , blank = True , null = True , verbose_name = [string] ) [EOL] created_at = models . DateTimeField ( auto_now_add = True , verbose_name = [string] ) [EOL] updated_at = models . DateTimeField ( auto_now = True , verbose_name = [string] ) [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = verbose_name [EOL] [EOL] def __str__ ( self ) : [EOL] return self . username [EOL] [EOL] [EOL] def get_absolute_url ( self ) : [EOL] return reverse ( [string] , kwargs = { [string] : self . username } ) [EOL] [EOL] def get_profile_name ( self ) : [EOL] if self . nickname : [EOL] return self . nickname [EOL] return self . username [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zanhu.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zanhu.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zanhu.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zanhu.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zanhu.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zanhu.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zanhu.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zanhu.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zanhu.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zanhu.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zanhu.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zanhu.users.models.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . contrib . auth import get_user_model [EOL] [EOL] from config import celery_app [EOL] [EOL] User = get_user_model ( ) [EOL] [EOL] [EOL] @ celery_app . task ( ) def get_users_count ( ) : [EOL] [docstring] [EOL] return User . objects . count ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from test_plus . test import TestCase [EOL] [EOL] class TestUser ( TestCase ) : [EOL] def setUp ( self ) : [EOL] self . user = self . make_user ( ) [EOL] [EOL] def test__str__ ( self ) : [EOL] self . assertEqual ( self . user . __str__ ( ) , [string] ) [EOL] [EOL] def test_get_absolute_url ( self ) : [EOL] self . assertEqual ( self . user . get_absolute_url ( ) , [string] ) [EOL] [EOL] def test_get_profile_name ( self ) : [EOL] assert self . user . get_profile_name ( ) == [string] [EOL] self . user . nickname = [string] [EOL] assert self . user . get_profile_name ( ) == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Type , Any , List , Literal , Union [EOL] import typing_extensions [EOL] import zanhu [EOL] import typing [EOL] from django . urls import reverse_lazy [EOL] from django . contrib import messages [EOL] from django . http import JsonResponse [EOL] from django . core . exceptions import PermissionDenied [EOL] from django . contrib . auth . decorators import login_required [EOL] from django . contrib . auth . mixins import LoginRequiredMixin [EOL] from django . views . decorators . http import require_http_methods [EOL] from django . views . generic import CreateView , ListView , DetailView [EOL] from django . views . decorators . cache import cache_page [EOL] from django . utils . decorators import method_decorator [EOL] [EOL] from zanhu . helpers import ajax_required [EOL] from zanhu . qa . models import Question , Answer [EOL] from zanhu . qa . forms import QuestionForm [EOL] from zanhu . notifications . views import notification_handler [EOL] [EOL] [EOL] class QuestionListView ( LoginRequiredMixin , ListView ) : [EOL] [docstring] [EOL] [EOL] queryset = Question . objects . select_related ( [string] ) [EOL] paginate_by = [number] [EOL] context_object_name = [string] [EOL] template_name = [string] [EOL] [EOL] def get_context_data ( self , * , object_list = None , ** kwargs ) : [EOL] context = super ( QuestionListView , self ) . get_context_data ( ) [EOL] context [ [string] ] = Question . objects . get_counted_tags ( ) [comment] [EOL] context [ [string] ] = [string] [EOL] return context [EOL] [EOL] [EOL] class AnsweredQuestionListView ( QuestionListView ) : [EOL] [docstring] [EOL] [EOL] def get_queryset ( self ) : [EOL] return Question . objects . get_answered ( ) [EOL] [EOL] def get_context_data ( self , * , object_list = None , ** kwargs ) : [EOL] context = super ( AnsweredQuestionListView , self ) . get_context_data ( ) [EOL] context [ [string] ] = [string] [EOL] return context [EOL] [EOL] [EOL] class UnansweredQuestionListView ( QuestionListView ) : [EOL] [docstring] [EOL] [EOL] def get_queryset ( self ) : [EOL] return Question . objects . get_unanswered ( ) [EOL] [EOL] def get_context_data ( self , * , object_list = None , ** kwargs ) : [EOL] context = super ( UnansweredQuestionListView , self ) . get_context_data ( ) [EOL] context [ [string] ] = [string] [EOL] return context [EOL] [EOL] [EOL] @ method_decorator ( cache_page ( [number] * [number] ) , name = [string] ) class CreateQuestionView ( LoginRequiredMixin , CreateView ) : [EOL] [docstring] [EOL] [EOL] form_class = QuestionForm [EOL] template_name = [string] [EOL] message = [string] [EOL] [EOL] def form_valid ( self , form ) : [EOL] form . instance . user = self . request . user [EOL] return super ( CreateQuestionView , self ) . form_valid ( form ) [EOL] [EOL] def get_success_url ( self ) : [EOL] messages . success ( self . request , self . message ) [EOL] return reverse_lazy ( [string] ) [EOL] [EOL] [EOL] class QuestionDetailView ( LoginRequiredMixin , DetailView ) : [EOL] [docstring] [EOL] [EOL] model = Question [EOL] context_object_name = [string] [EOL] template_name = [string] [EOL] [EOL] def get_queryset ( self ) : [EOL] return Question . objects . select_related ( [string] ) . filter ( pk = self . kwargs [ [string] ] ) [EOL] [EOL] [EOL] [comment] [EOL] class CreateAnswerView ( LoginRequiredMixin , CreateView ) : [EOL] [docstring] [EOL] model = Answer [EOL] fields = [ [string] , ] [EOL] message = [string] [EOL] template_name = [string] [EOL] [EOL] def form_valid ( self , form ) : [EOL] form . instance . user = self . request . user [EOL] form . instance . question_id = self . kwargs [ [string] ] [EOL] return super ( CreateAnswerView , self ) . form_valid ( form ) [EOL] [EOL] def get_success_url ( self ) : [EOL] messages . success ( self . request , self . message ) [EOL] return reverse_lazy ( [string] , kwargs = { [string] : self . kwargs [ [string] ] } ) [EOL] [EOL] [EOL] @ login_required @ ajax_required @ require_http_methods ( [ [string] ] ) def question_vote ( request ) : [EOL] [docstring] [EOL] question_id = request . POST [ [string] ] [EOL] value = True if request . POST [ [string] ] == [string] else False [comment] [EOL] question = Question . objects . get ( pk = question_id ) [EOL] users = question . votes . values_list ( [string] , flat = True ) [comment] [EOL] [EOL] if request . user . pk in users and ( question . votes . get ( user = request . user ) . value == value ) : [EOL] question . votes . get ( user = request . user ) . delete ( ) [EOL] else : [EOL] question . votes . update_or_create ( user = request . user , defaults = { [string] : value } ) [EOL] [EOL] [docstring] [EOL] [EOL] return JsonResponse ( { [string] : question . total_votes ( ) } ) [EOL] [EOL] [EOL] @ login_required @ ajax_required @ require_http_methods ( [ [string] ] ) def answer_vote ( request ) : [EOL] [docstring] [EOL] answer_id = request . POST [ [string] ] [EOL] value = True if request . POST [ [string] ] == [string] else False [comment] [EOL] answer = Answer . objects . get ( uuid_id = answer_id ) [EOL] users = answer . votes . values_list ( [string] , flat = True ) [comment] [EOL] [EOL] if request . user . pk in users and ( answer . votes . get ( user = request . user ) . value == value ) : [EOL] answer . votes . get ( user = request . user ) . delete ( ) [EOL] else : [EOL] answer . votes . update_or_create ( user = request . user , defaults = { [string] : value } ) [EOL] [EOL] return JsonResponse ( { [string] : answer . total_votes ( ) } ) [EOL] [EOL] [EOL] @ login_required @ ajax_required @ require_http_methods ( [ [string] ] ) def accept_answer ( request ) : [EOL] [docstring] [EOL] answer_id = request . POST [ [string] ] [EOL] answer = Answer . objects . get ( pk = answer_id ) [EOL] [comment] [EOL] if answer . question . user . username != request . user . username : [EOL] raise PermissionDenied [EOL] answer . accept_answer ( ) [EOL] [comment] [EOL] notification_handler ( request . user , answer . user , [string] , answer ) [EOL] return JsonResponse ( { [string] : [string] } , status = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zanhu.qa.views.QuestionListView]$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zanhu.qa.views.CreateQuestionView]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zanhu.qa.models.Question]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zanhu.qa.models.Answer]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Type , Any , Counter , Dict , Tuple [EOL] import collections [EOL] import zanhu [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] import uuid [EOL] from collections import Counter [EOL] [EOL] from django . utils . encoding import python_2_unicode_compatible [EOL] from django . conf import settings [EOL] from django . db import models [EOL] from django . contrib . contenttypes . models import ContentType [EOL] from django . contrib . contenttypes . fields import GenericRelation , GenericForeignKey [EOL] from django . db . models import Count [EOL] [EOL] from slugify import slugify [EOL] from markdownx . models import MarkdownxField [EOL] from taggit . managers import TaggableManager [EOL] from markdownx . utils import markdownify [EOL] [EOL] [EOL] @ python_2_unicode_compatible class Vote ( models . Model ) : [EOL] [docstring] [EOL] uuid_id = models . UUIDField ( primary_key = True , default = uuid . uuid4 , editable = False ) [EOL] user = models . ForeignKey ( settings . AUTH_USER_MODEL , related_name = [string] , on_delete = models . CASCADE , verbose_name = [string] ) [EOL] value = models . BooleanField ( default = True , verbose_name = [string] ) [comment] [EOL] [comment] [EOL] content_type = models . ForeignKey ( ContentType , related_name = [string] , on_delete = models . CASCADE ) [EOL] object_id = models . CharField ( max_length = [number] ) [EOL] vote = GenericForeignKey ( [string] , [string] ) [comment] [EOL] [EOL] created_at = models . DateTimeField ( auto_now_add = True , verbose_name = [string] ) [EOL] updated_at = models . DateTimeField ( auto_now = True , verbose_name = [string] ) [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = verbose_name [EOL] unique_together = ( [string] , [string] , [string] ) [comment] [EOL] [comment] [EOL] index_together = ( [string] , [string] ) [comment] [EOL] [EOL] [EOL] @ python_2_unicode_compatible class QuestionQuerySet ( models . query . QuerySet ) : [EOL] [docstring] [EOL] [EOL] def get_answered ( self ) : [EOL] [docstring] [EOL] return self . filter ( has_answer = True ) . select_related ( [string] ) [EOL] [EOL] def get_unanswered ( self ) : [EOL] [docstring] [EOL] return self . filter ( has_answer = False ) . select_related ( [string] ) [EOL] [EOL] def get_counted_tags ( self ) : [EOL] [docstring] [EOL] tag_dict = { } [EOL] for obj in self . all ( ) : [EOL] for tag in obj . tags . names ( ) : [EOL] if tag not in tag_dict : [EOL] tag_dict [ tag ] = [number] [EOL] [EOL] else : [EOL] tag_dict [ tag ] += [number] [EOL] return tag_dict . items ( ) [EOL] [EOL] [EOL] @ python_2_unicode_compatible class Question ( models . Model ) : [EOL] STATUS = ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ) [EOL] [EOL] user = models . ForeignKey ( settings . AUTH_USER_MODEL , related_name = [string] , on_delete = models . CASCADE , verbose_name = [string] ) [EOL] title = models . CharField ( max_length = [number] , unique = True , verbose_name = [string] ) [EOL] slug = models . SlugField ( max_length = [number] , null = True , blank = True , verbose_name = [string] ) [EOL] status = models . CharField ( max_length = [number] , choices = STATUS , default = [string] , verbose_name = [string] ) [EOL] content = MarkdownxField ( verbose_name = [string] ) [EOL] tags = TaggableManager ( help_text = [string] , verbose_name = [string] ) [EOL] has_answer = models . BooleanField ( default = False , verbose_name = [string] ) [comment] [EOL] votes = GenericRelation ( Vote , verbose_name = [string] ) [comment] [EOL] created_at = models . DateTimeField ( db_index = True , auto_now_add = True , verbose_name = [string] ) [EOL] updated_at = models . DateTimeField ( auto_now = True , verbose_name = [string] ) [EOL] [EOL] objects = QuestionQuerySet . as_manager ( ) [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = verbose_name [EOL] ordering = ( [string] , ) [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] if not self . slug : [EOL] self . slug = slugify ( self . title ) [EOL] super ( Question , self ) . save ( * args , ** kwargs ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . title [EOL] [EOL] def get_markdown ( self ) : [EOL] return markdownify ( self . content ) [EOL] [EOL] def total_votes ( self ) : [EOL] [docstring] [EOL] dic = Counter ( self . votes . values_list ( [string] , flat = True ) ) [comment] [EOL] return dic [ True ] - dic [ False ] [EOL] [EOL] def get_answers ( self ) : [EOL] [docstring] [EOL] return Answer . objects . filter ( question = self ) . select_related ( [string] , [string] ) [comment] [EOL] [EOL] def count_answers ( self ) : [EOL] [docstring] [EOL] return self . get_answers ( ) . count ( ) [EOL] [EOL] def get_upvoters ( self ) : [EOL] [docstring] [EOL] return [ vote . user for vote in self . votes . filter ( value = True ) . select_related ( [string] ) . prefecth_related ( [string] ) ] [EOL] [EOL] def get_downvoters ( self ) : [EOL] [docstring] [EOL] return [ vote . user for vote in self . votes . filter ( value = False ) . select_related ( [string] ) . prefecth_related ( [string] ) ] [EOL] [EOL] [EOL] @ python_2_unicode_compatible class Answer ( models . Model ) : [EOL] uuid_id = models . UUIDField ( primary_key = True , default = uuid . uuid4 , editable = False ) [EOL] user = models . ForeignKey ( settings . AUTH_USER_MODEL , related_name = [string] , on_delete = models . CASCADE , verbose_name = [string] ) [EOL] question = models . ForeignKey ( Question , on_delete = models . CASCADE , verbose_name = [string] ) [EOL] content = MarkdownxField ( verbose_name = [string] ) [EOL] is_answer = models . BooleanField ( default = False , verbose_name = [string] ) [EOL] votes = GenericRelation ( Vote , verbose_name = [string] ) [EOL] created_at = models . DateTimeField ( db_index = True , auto_now_add = True , verbose_name = [string] ) [EOL] updated_at = models . DateTimeField ( auto_now = True , verbose_name = [string] ) [EOL] [EOL] class Meta : [EOL] ordering = ( [string] , [string] ) [comment] [EOL] verbose_name = [string] [EOL] verbose_name_plural = verbose_name [EOL] [EOL] def __str__ ( self ) : [EOL] return self . content [EOL] [EOL] def get_markdown ( self ) : [EOL] return markdownify ( self . content ) [EOL] [EOL] def total_votes ( self ) : [EOL] [docstring] [EOL] dic = Counter ( self . votes . values_list ( [string] , flat = True ) ) [comment] [EOL] return dic [ True ] - dic [ False ] [EOL] [EOL] def get_upvoters ( self ) : [EOL] [docstring] [EOL] return [ vote . user for vote in self . votes . filter ( value = True ) . select_related ( [string] ) . prefecth_related ( [string] ) ] [EOL] [EOL] def get_downvoters ( self ) : [EOL] [docstring] [EOL] return [ vote . user for vote in self . votes . filter ( value = False ) . select_related ( [string] ) . prefecth_related ( [string] ) ] [EOL] [EOL] [EOL] def accept_answer ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] answer_set = Answer . objects . filter ( question = self . question ) [comment] [EOL] answer_set . update ( is_answer = False ) [comment] [EOL] [comment] [EOL] self . is_answer = True [EOL] self . save ( ) [EOL] [comment] [EOL] self . question . has_answer = True [EOL] self . question . save ( ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zanhu.qa.models.Answer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zanhu.qa.models.Answer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zanhu.qa.models.Answer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zanhu.qa.models.Answer]$ 0 0 0 0 0 0 0 0 $typing.Type[zanhu.qa.models.Answer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zanhu.qa.models.Answer]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[zanhu.qa.models.Answer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zanhu.qa.models.Answer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $collections.Counter[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $collections.Counter[typing.Any]$ 0 0 0 0 $collections.Counter[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] from django . apps import AppConfig [EOL] [EOL] [EOL] class QaConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from django . apps import AppConfig [EOL] [EOL] [EOL] class SearchConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from django . apps import AppConfig [EOL] [EOL] [EOL] class NotificationsConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
	0
	0
	0
from typing import Any [EOL] import typing [EOL] import os [EOL] from celery import Celery [EOL] from django . apps import apps , AppConfig [EOL] from django . conf import settings [EOL] [EOL] if not settings . configured : [EOL] [comment] [EOL] os . environ . setdefault ( [string] , [string] ) [comment] [EOL] [EOL] app = Celery ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] app . config_from_object ( [string] , namespace = [string] ) [EOL] [EOL] [EOL] class CeleryAppConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL] [EOL] def ready ( self ) : [EOL] installed_apps = [ app_config . name for app_config in apps . get_app_configs ( ) ] [EOL] app . autodiscover_tasks ( lambda : installed_apps , force = True ) [EOL] [EOL] [EOL] @ app . task ( bind = True ) def debug_task ( self ) : [EOL] print ( f' [string] { self . request !r}' ) [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Any , Type [EOL] import zanhu [EOL] import typing [EOL] from django . contrib import messages [EOL] from django . contrib . auth . mixins import LoginRequiredMixin [EOL] from django . views . generic import CreateView , ListView , UpdateView , DetailView [EOL] from django . urls import reverse [EOL] from django . views . decorators . cache import cache_page [EOL] from django . utils . decorators import method_decorator [EOL] [EOL] from django_comments . signals import comment_was_posted [EOL] [EOL] from zanhu . articles . models import Article [EOL] from zanhu . articles . forms import ArticleForm [EOL] from zanhu . helpers import AuthorRequiredMixin [EOL] [EOL] [EOL] from zanhu . notifications . views import notification_handler [EOL] [EOL] [EOL] class ArticlesListView ( LoginRequiredMixin , ListView ) : [EOL] [docstring] [EOL] model = Article [EOL] paginate_by = [number] [EOL] context_object_name = [string] [EOL] template_name = [string] [comment] [EOL] [EOL] def get_context_data ( self , * args , ** kwargs ) : [EOL] context = super ( ArticlesListView , self ) . get_context_data ( * args , ** kwargs ) [EOL] context [ [string] ] = Article . objects . get_counted_tags ( ) [EOL] return context [EOL] [EOL] def get_queryset ( self , ** kwargs ) : [EOL] return Article . objects . get_published ( ) [EOL] [EOL] [EOL] class DraftsListView ( ArticlesListView ) : [EOL] [docstring] [EOL] [EOL] def get_queryset ( self , ** kwargs ) : [EOL] [comment] [EOL] return Article . objects . filter ( user = self . request . user ) . get_drafts ( ) [EOL] [EOL] [EOL] @ method_decorator ( cache_page ( [number] * [number] ) , name = [string] ) class CreateArticleView ( LoginRequiredMixin , CreateView ) : [EOL] [docstring] [EOL] model = Article [EOL] message = [string] [comment] [EOL] form_class = ArticleForm [EOL] template_name = [string] [EOL] [EOL] def form_valid ( self , form ) : [EOL] form . instance . user = self . request . user [EOL] return super ( CreateArticleView , self ) . form_valid ( form ) [EOL] [EOL] def get_success_url ( self ) : [EOL] [docstring] [EOL] messages . success ( self . request , self . message ) [comment] [EOL] return reverse ( [string] ) [EOL] [EOL] [EOL] class DetailArticleView ( LoginRequiredMixin , DetailView ) : [EOL] [docstring] [EOL] model = Article [EOL] template_name = [string] [EOL] [EOL] def get_queryset ( self ) : [EOL] return Article . objects . select_related ( [string] ) . filter ( slug = self . kwargs [ [string] ] ) [EOL] [EOL] [EOL] class EditArticleView ( LoginRequiredMixin , AuthorRequiredMixin , UpdateView ) : [comment] [EOL] [docstring] [EOL] model = Article [EOL] message = [string] [EOL] form_class = ArticleForm [EOL] template_name = [string] [EOL] [EOL] def form_valid ( self , form ) : [EOL] form . instance . user = self . request . user [EOL] return super ( EditArticleView , self ) . form_valid ( form ) [EOL] [EOL] def get_success_url ( self ) : [EOL] messages . success ( self . request , self . message ) [EOL] [comment] [EOL] return reverse ( [string] , kwargs = { [string] : self . get_object ( ) . slug } ) [EOL] [EOL] def notify_comment ( ** kwargs ) : [EOL] [docstring] [EOL] actor = kwargs [ [string] ] . user [EOL] obj = kwargs [ [string] ] . content_object [EOL] [EOL] notification_handler ( actor , obj . user , [string] , obj ) [EOL] [EOL] [EOL] comment_was_posted . connect ( receiver = notify_comment ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zanhu.articles.models.Article]$ 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zanhu.articles.models.Article]$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Type[zanhu.articles.views.CreateArticleView]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zanhu.articles.models.Article]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zanhu.articles.models.Article]$ 0 0 0 $builtins.str$ 0 0 0 $typing.Type[zanhu.articles.views.EditArticleView]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ArticlesConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Any , Tuple , Type , Dict [EOL] import zanhu [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] from django . utils . encoding import python_2_unicode_compatible [EOL] from django . conf import settings [EOL] from django . db import models [EOL] from django . db . models import Count [EOL] [EOL] from slugify import slugify [EOL] from markdownx . models import MarkdownxField [EOL] from markdownx . utils import markdownify [EOL] from taggit . managers import TaggableManager [EOL] [EOL] [EOL] @ python_2_unicode_compatible class ArticleQuerySet ( models . query . QuerySet ) : [EOL] [docstring] [EOL] [EOL] def get_published ( self ) : [EOL] [docstring] [EOL] return self . filter ( status = [string] ) . select_related ( [string] ) [EOL] [EOL] def get_drafts ( self ) : [EOL] [docstring] [EOL] return self . filter ( status = [string] ) . select_related ( [string] ) [EOL] [EOL] def get_counted_tags ( self ) : [EOL] [docstring] [EOL] tag_dict = { } [EOL] for obj in self . all ( ) : [EOL] for tag in obj . tags . names ( ) : [EOL] if tag not in tag_dict : [EOL] tag_dict [ tag ] = [number] [EOL] [EOL] else : [EOL] tag_dict [ tag ] += [number] [EOL] return tag_dict . items ( ) [EOL] [EOL] [EOL] @ python_2_unicode_compatible class Article ( models . Model ) : [EOL] STATUS = ( ( [string] , [string] ) , ( [string] , [string] ) ) [EOL] [EOL] title = models . CharField ( max_length = [number] , null = False , unique = True , verbose_name = [string] ) [EOL] user = models . ForeignKey ( settings . AUTH_USER_MODEL , null = True , related_name = [string] , on_delete = models . SET_NULL , verbose_name = [string] ) [EOL] image = models . ImageField ( upload_to = [string] , verbose_name = [string] ) [EOL] slug = models . SlugField ( max_length = [number] , null = True , blank = True , verbose_name = [string] ) [EOL] status = models . CharField ( max_length = [number] , choices = STATUS , default = [string] , verbose_name = [string] ) [comment] [EOL] content = MarkdownxField ( verbose_name = [string] ) [EOL] edited = models . BooleanField ( default = False , verbose_name = [string] ) [EOL] tags = TaggableManager ( help_text = [string] , verbose_name = [string] ) [EOL] created_at = models . DateTimeField ( db_index = True , auto_now_add = True , verbose_name = [string] ) [EOL] updated_at = models . DateTimeField ( auto_now = True , verbose_name = [string] ) [EOL] objects = ArticleQuerySet . as_manager ( ) [EOL] [EOL] class Meta : [EOL] verbose_name = [string] [EOL] verbose_name_plural = verbose_name [EOL] ordering = ( [string] , ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . title [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] if not self . slug : [EOL] [comment] [EOL] self . slug = slugify ( self . title ) [EOL] super ( Article , self ) . save ( * args , ** kwargs ) [EOL] [EOL] def get_markdown ( self ) : [EOL] [comment] [EOL] return markdownify ( self . content ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zanhu.articles.models.Article]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zanhu.articles.models.Article]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zanhu.articles.models.Article]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zanhu.articles.models.Article]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zanhu.articles.models.Article]$ 0 0 0 0 0 0 0 0 $typing.Type[zanhu.articles.models.Article]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zanhu.articles.models.Article]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zanhu.articles.models.Article]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zanhu.articles.models.Article]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zanhu.articles.models.Article]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Tuple , Literal [EOL] import typing_extensions [EOL] import typing [EOL] import tempfile [EOL] [EOL] from PIL import Image [EOL] from test_plus . test import TestCase [EOL] from django . urls import reverse [EOL] from django . test import override_settings [EOL] [EOL] from zanhu . articles . models import Article [EOL] [EOL] [EOL] class ArticlesViewsTest ( TestCase ) : [EOL] [EOL] @ staticmethod def get_temp_img ( ) : [EOL] [docstring] [EOL] size = ( [number] , [number] ) [EOL] color = ( [number] , [number] , [number] , [number] ) [EOL] with tempfile . NamedTemporaryFile ( suffix = [string] , delete = False ) as f : [EOL] image = Image . new ( [string] , size , color ) [EOL] image . save ( f , [string] ) [EOL] return open ( f . name , mode = [string] ) [EOL] [EOL] def setUp ( self ) : [EOL] [docstring] [EOL] self . user = self . make_user ( ) [EOL] self . client . login ( username = [string] , password = [string] ) [EOL] self . article = Article . objects . create ( title = [string] , content = [string] , status = [string] , user = self . user , ) [EOL] self . test_image = self . get_temp_img ( ) [EOL] [EOL] def tearDown ( self ) : [EOL] [docstring] [EOL] self . test_image . close ( ) [EOL] [EOL] def test_index_articles ( self ) : [EOL] [docstring] [EOL] response = self . client . get ( reverse ( [string] ) ) [EOL] self . assertEqual ( response . status_code , [number] ) [EOL] [EOL] def test_error_404 ( self ) : [EOL] [docstring] [EOL] response_no_page = self . client . get ( reverse ( [string] , kwargs = { [string] : [string] } ) ) [EOL] self . assertEqual ( response_no_page . status_code , [number] ) [EOL] [EOL] @ override_settings ( MEDIA_ROOT = tempfile . gettempdir ( ) ) def test_create_article ( self ) : [EOL] [docstring] [EOL] response = self . client . post ( reverse ( [string] ) , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : self . test_image } ) [EOL] assert response . status_code == [number] [EOL] [EOL] @ override_settings ( MEDIA_ROOT = tempfile . gettempdir ( ) ) def test_single_article ( self ) : [EOL] [docstring] [EOL] current_count = Article . objects . count ( ) [EOL] response = self . client . post ( reverse ( [string] ) , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : self . test_image } ) [EOL] assert response . status_code == [number] [EOL] assert Article . objects . count ( ) == current_count + [number] [EOL] [EOL] @ override_settings ( MEDIA_ROOT = tempfile . gettempdir ( ) ) def test_draft_article ( self ) : [EOL] [docstring] [EOL] response = self . client . post ( reverse ( [string] ) , { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : self . test_image } ) [EOL] resp = self . client . get ( reverse ( [string] ) ) [EOL] assert resp . status_code == [number] [EOL] assert response . status_code == [number] [EOL] assert resp . context [ [string] ] [ [number] ] . slug == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal]$ 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal,typing_extensions.Literal]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from test_plus . test import TestCase [comment] [EOL] [EOL] from zanhu . articles . models import Article [EOL] [EOL] [EOL] class ArticlesModelsTest ( TestCase ) : [EOL] def setUp ( self ) : [EOL] [docstring] [EOL] self . user = self . make_user ( [string] ) [comment] [EOL] self . other_user = self . make_user ( [string] ) [EOL] self . article = Article . objects . create ( title = [string] , content = [string] , status = [string] , user = self . user , ) [EOL] self . not_p_article = Article . objects . create ( title = [string] , content = [string] , user = self . user , ) [EOL] [EOL] def test_object_instance ( self ) : [EOL] [docstring] [EOL] assert isinstance ( self . article , Article ) [EOL] assert isinstance ( self . not_p_article , Article ) [EOL] assert isinstance ( Article . objects . get_published ( ) [ [number] ] , Article ) [EOL] [EOL] def test_return_values ( self ) : [EOL] [docstring] [EOL] assert self . article . status == [string] [EOL] assert self . article . status != [string] [EOL] assert self . not_p_article . status == [string] [EOL] assert str ( self . article ) == [string] [comment] [EOL] assert self . article in Article . objects . get_published ( ) [EOL] assert Article . objects . get_published ( ) [ [number] ] . title == [string] [EOL] assert self . not_p_article in Article . objects . get_drafts ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0