[comment] [EOL] from typing import Any , List , Dict [EOL] import subprocess [EOL] import typing [EOL] [docstring] [EOL] from __future__ import print_function [EOL] from __future__ import unicode_literals [EOL] from __future__ import division [EOL] import sys [EOL] import functools [EOL] import glob [EOL] import json [EOL] import os [EOL] import socket [EOL] import subprocess [EOL] [EOL] from checksumdir import dirhash [EOL] from pynt import task [EOL] from pyntcontrib import execute , safe_cd [EOL] from semantic_version import Version [EOL] [EOL] sys . path . append ( os . path . join ( os . path . dirname ( __file__ ) , [string] ) ) [EOL] from build_utils import check_is_aws , skip_if_no_change , execute_with_environment , get_versions , get_packages , execute_get_text [EOL] [EOL] [EOL] PROJECT_NAME = [string] [EOL] SRC = [string] [EOL] [EOL] [comment] [EOL] PYTHON = [string] [EOL] IS_DJANGO = False [EOL] IS_TRAVIS = [string] in os . environ [EOL] if IS_TRAVIS : [EOL] PIPENV = [string] [EOL] else : [EOL] PIPENV = [string] [EOL] GEM_FURY = [string] [EOL] [EOL] CURRENT_HASH = None [EOL] [EOL] MAC_LIBS = [string] [EOL] [EOL] [EOL] [EOL] [EOL] @ task ( ) @ skip_if_no_change ( [string] ) def git_secrets ( ) : [EOL] if check_is_aws ( ) : [EOL] [comment] [EOL] return [EOL] if IS_TRAVIS : [EOL] [comment] [EOL] return [EOL] try : [EOL] commands = [ [string] , [string] ] [EOL] for command in commands : [EOL] cp = subprocess . run ( command . split ( [string] ) , stdout = subprocess . PIPE , stderr = subprocess . PIPE , shell = False , check = True ) [EOL] for stream in [ cp . stdout , cp . stderr ] : [EOL] if stream : [EOL] for line in stream . decode ( ) . split ( [string] ) : [EOL] print ( [string] + line ) [EOL] except subprocess . CalledProcessError as cpe : [EOL] print ( cpe ) [EOL] installed = False [EOL] for stream in [ cpe . stdout , cpe . stderr ] : [EOL] if stream : [EOL] for line in stream . decode ( ) . split ( [string] ) : [EOL] print ( [string] + line ) [EOL] if [string] in line : [EOL] print ( [string] ) [EOL] installed = True [EOL] break [EOL] if not installed : [EOL] raise [EOL] execute ( * ( [string] . strip ( ) . split ( [string] ) ) ) [EOL] [EOL] [EOL] @ task ( ) def clean ( ) : [EOL] return [EOL] [EOL] [EOL] @ task ( ) @ skip_if_no_change ( [string] ) def formatting ( ) : [EOL] with safe_cd ( SRC ) : [EOL] if sys . version_info < ( [number] , [number] ) : [EOL] print ( [string] ) [EOL] return [EOL] command = [string] . format ( PIPENV , PROJECT_NAME ) . strip ( ) [EOL] print ( command ) [EOL] result = execute_get_text ( command ) [EOL] assert result [EOL] changed = [ ] [EOL] for line in result . split ( [string] ) : [EOL] if [string] in line : [EOL] file = line [ len ( [string] ) : ] . strip ( ) [EOL] changed . append ( file ) [EOL] for change in changed : [EOL] command = [string] . format ( change ) [EOL] print ( command ) [EOL] execute ( * ( command . split ( [string] ) ) ) [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] @ task ( clean ) @ skip_if_no_change ( [string] ) def compile_py ( ) : [EOL] with safe_cd ( SRC ) : [EOL] execute ( PYTHON , [string] , [string] , PROJECT_NAME ) [EOL] [EOL] [EOL] @ task ( compile_py ) @ skip_if_no_change ( [string] ) def prospector ( ) : [EOL] with safe_cd ( SRC ) : [EOL] command = [string] . format ( PIPENV , PROJECT_NAME ) . strip ( ) . replace ( [string] , [string] ) [EOL] print ( command ) [EOL] execute ( * ( command . split ( [string] ) ) ) [EOL] [EOL] [EOL] @ task ( ) @ skip_if_no_change ( [string] ) def detect_secrets ( ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] errors_file = [string] [EOL] [EOL] command = [string] [string] [string] . format ( errors_file ) [EOL] print ( command ) [EOL] bash_process = subprocess . Popen ( command . split ( [string] ) , stdout = subprocess . PIPE , stderr = subprocess . PIPE ) [EOL] out , err = bash_process . communicate ( ) [comment] [EOL] [EOL] with open ( errors_file , [string] ) as file_handle : [EOL] file_handle . write ( out . decode ( ) ) [EOL] [EOL] [EOL] with open ( errors_file ) as f : [EOL] try : [EOL] data = json . load ( f ) [EOL] if data [ [string] ] : [EOL] for result in data [ [string] ] : [EOL] print ( result ) [EOL] print ( [string] ) [EOL] exit ( - [number] ) [EOL] return [EOL] [comment] [EOL] except Exception : [EOL] print ( [string] ) [EOL] [EOL] [EOL] @ task ( compile_py , formatting , prospector ) @ skip_if_no_change ( [string] ) def lint ( ) : [EOL] with safe_cd ( SRC ) : [EOL] if os . path . isfile ( [string] ) : [EOL] execute ( [string] , [string] ) [EOL] [EOL] with safe_cd ( SRC ) : [EOL] if IS_DJANGO : [EOL] django_bits = [string] [EOL] else : [EOL] django_bits = [string] [EOL] [EOL] [comment] [EOL] command = [string] . format ( PIPENV , django_bits , PROJECT_NAME ) . strip ( ) . replace ( [string] , [string] ) [EOL] print ( command ) [EOL] command = command . split ( [string] ) [EOL] [EOL] [comment] [EOL] lint_output_file_name = [string] [EOL] with open ( lint_output_file_name , [string] ) as outfile : [EOL] env = config_pythonpath ( ) [EOL] subprocess . call ( command , stdout = outfile , env = env ) [EOL] [EOL] fatal_errors = sum ( [number] for line in open ( lint_output_file_name ) if [string] in line or [string] in line or [string] in line ) [EOL] [EOL] if fatal_errors > [number] : [EOL] for line in open ( lint_output_file_name ) : [EOL] if [string] in line or [string] in line or [string] in line : [EOL] print ( line ) [EOL] print ( [string] . format ( fatal_errors ) ) [EOL] exit ( - [number] ) [EOL] return [EOL] [EOL] cutoff = [number] [EOL] num_lines = sum ( [number] for line in open ( lint_output_file_name ) if [string] not in line [EOL] and [string] not in line [EOL] and [string] not in line ) [EOL] if num_lines > cutoff : [EOL] print ( [string] . format ( num_lines ) ) [EOL] exit ( - [number] ) [EOL] return [EOL] [EOL] [EOL] @ task ( ) @ skip_if_no_change ( [string] ) def nose_tests ( ) : [EOL] if IS_DJANGO : [EOL] command = [string] . format ( PYTHON ) [EOL] [comment] [EOL] my_env = config_pythonpath ( ) [EOL] execute_with_environment ( command , env = my_env ) [EOL] else : [EOL] my_env = config_pythonpath ( ) [EOL] command = [string] . format ( PIPENV , PYTHON , [string] ) . strip ( ) [EOL] print ( command ) [EOL] execute_with_environment ( command , env = my_env ) [EOL] [EOL] [EOL] def config_pythonpath ( ) : [EOL] if check_is_aws ( ) : [EOL] env = [string] [EOL] else : [EOL] env = [string] [EOL] my_env = { [string] : env } [EOL] for key , value in os . environ . items ( ) : [EOL] my_env [ key ] = value [EOL] my_env [ [string] ] = my_env . get ( [string] , [string] ) + MAC_LIBS [EOL] print ( my_env [ [string] ] ) [EOL] return my_env [EOL] [EOL] [EOL] @ task ( ) def coverage ( ) : [EOL] print ( [string] ) [EOL] with safe_cd ( SRC ) : [EOL] my_env = config_pythonpath ( ) [EOL] command = [string] . format ( PIPENV , [string] , PROJECT_NAME ) [EOL] print ( command ) [EOL] execute_with_environment ( command , my_env ) [EOL] [EOL] [EOL] @ task ( ) @ skip_if_no_change ( [string] ) def docs ( ) : [EOL] with safe_cd ( SRC ) : [EOL] with safe_cd ( [string] ) : [EOL] my_env = config_pythonpath ( ) [EOL] execute_with_environment ( [string] , env = my_env ) [EOL] [EOL] [EOL] @ task ( ) def pip_check ( ) : [EOL] print ( [string] ) [EOL] with safe_cd ( SRC ) : [EOL] execute ( [string] , [string] ) [EOL] [EOL] [EOL] @ task ( ) def compile_mark_down ( ) : [EOL] with safe_cd ( SRC ) : [EOL] if IS_TRAVIS : [EOL] command = [string] . strip ( ) . split ( [string] ) [EOL] else : [EOL] command = [string] . format ( PIPENV ) . strip ( ) . split ( [string] ) [EOL] execute ( * (command) ) [EOL] [EOL] [EOL] @ task ( ) @ skip_if_no_change ( [string] ) def mypy ( ) : [EOL] if sys . version_info < ( [number] , [number] ) : [EOL] print ( [string] ) [EOL] return [EOL] mypy_file = [string] [EOL] if os . path . isfile ( mypy_file ) : [EOL] execute ( [string] , mypy_file ) [EOL] command = [string] . format ( PIPENV , PROJECT_NAME ) . strip ( ) [EOL] bash_process = subprocess . Popen ( command . split ( [string] ) , stdout = subprocess . PIPE , stderr = subprocess . PIPE ) [EOL] out , err = bash_process . communicate ( ) [comment] [EOL] [EOL] with open ( mypy_file , [string] ) as lint_file : [EOL] lines = out . decode ( ) . split ( [string] ) [EOL] for line in lines : [EOL] if [string] in line : [EOL] continue [EOL] if [string] in line : [EOL] continue [EOL] if [string] in line : [EOL] continue [EOL] if [string] in line : [EOL] continue [EOL] else : [EOL] lint_file . writelines ( [ line + [string] ] ) [EOL] [EOL] num_lines = sum ( [number] for line in open ( mypy_file ) if line . strip ( ) ) [EOL] max_lines = [number] [EOL] if num_lines > max_lines : [EOL] print ( [string] . format ( num_lines , max_lines ) ) [EOL] exit ( - [number] ) [EOL] return [EOL] [EOL] @ task ( ) def pin_dependencies ( ) : [EOL] with safe_cd ( SRC ) : [EOL] execute ( * ( [string] . format ( PIPENV ) . strip ( ) . split ( [string] ) ) ) [EOL] [EOL] [EOL] [EOL] @ task ( ) @ skip_if_no_change ( [string] , expect_files = [string] ) def dead_code ( ) : [EOL] [docstring] [EOL] with safe_cd ( SRC ) : [EOL] if IS_TRAVIS : [EOL] command = [string] . format ( PYTHON , PROJECT_NAME ) . strip ( ) . split ( ) [EOL] else : [EOL] command = [string] . format ( PIPENV , PROJECT_NAME ) . strip ( ) . split ( ) [EOL] [EOL] output_file_name = [string] [EOL] with open ( output_file_name , [string] ) as outfile : [EOL] env = config_pythonpath ( ) [EOL] subprocess . call ( command , stdout = outfile , env = env ) [EOL] [EOL] cutoff = [number] [EOL] num_lines = sum ( [number] for line in open ( output_file_name ) if line ) [EOL] if num_lines > cutoff : [EOL] print ( [string] . format ( num_lines , cutoff ) ) [EOL] exit ( - [number] ) [EOL] [EOL] @ task ( ) def jiggle_version ( ) : [EOL] command = [string] . format ( PIPENV , PROJECT_NAME , [string] ) . strip ( ) [EOL] execute ( * ( command . split ( [string] ) ) ) [EOL] [EOL] [EOL] @ task ( ) def check_setup_py ( ) : [EOL] with safe_cd ( SRC ) : [EOL] if IS_TRAVIS : [EOL] execute ( PYTHON , * ( [string] . split ( [string] ) ) ) [EOL] else : [EOL] execute ( * ( [string] . format ( PIPENV , PYTHON ) . strip ( ) . split ( [string] ) ) ) [EOL] [EOL] @ task ( formatting , mypy , detect_secrets , git_secrets , check_setup_py , nose_tests , coverage , compile_py , dead_code , lint , compile_mark_down , pin_dependencies , jiggle_version ) @ skip_if_no_change ( [string] ) def package ( ) : [EOL] with safe_cd ( SRC ) : [EOL] for folder in [ [string] , [string] , PROJECT_NAME + [string] ] : [EOL] execute ( [string] , [string] , folder ) [EOL] [EOL] with safe_cd ( SRC ) : [EOL] execute ( PYTHON , [string] , [string] , [string] ) [EOL] [EOL] [EOL] [comment] [EOL] @ task ( mypy , detect_secrets , git_secrets , check_setup_py , compile_py , dead_code ) @ skip_if_no_change ( [string] ) def pre_commit_hook ( ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] pass [EOL] [EOL] [comment] [EOL] @ task ( mypy , detect_secrets , git_secrets , nose_tests , coverage , check_setup_py , compile_py , dead_code ) @ skip_if_no_change ( [string] ) def pre_push_hook ( ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] pass [EOL] [EOL] @ task ( package ) def gemfury ( ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] cp = subprocess . run ( ( [string] . format ( GEM_FURY ) . split ( [string] ) ) , stdout = subprocess . PIPE , stderr = subprocess . PIPE , shell = False , check = True ) [EOL] print ( cp . stdout ) [EOL] [EOL] [EOL] about = { } [EOL] with open ( os . path . join ( SRC , PROJECT_NAME , [string] ) ) as f : [EOL] exec ( f . read ( ) , about ) [EOL] version = Version ( about [ [string] ] ) [EOL] print ( [string] + str ( version ) ) [EOL] print ( [string] ) [EOL] [EOL] if version not in get_versions ( ) : [EOL] for kind in [ [string] , [string] ] : [EOL] try : [EOL] files = glob . glob ( [string] . format ( SRC . replace ( [string] , [string] ) , kind ) ) [EOL] for file_name in files : [EOL] cp = subprocess . run ( ( [string] . format ( file_name , GEM_FURY ) . split ( [string] ) ) , stdout = subprocess . PIPE , stderr = subprocess . PIPE , shell = False , check = True ) [EOL] print ( [string] ) [EOL] for stream in [ cp . stdout , cp . stderr ] : [EOL] if stream : [EOL] for line in stream . decode ( ) . split ( [string] ) : [EOL] print ( line ) [EOL] [EOL] except subprocess . CalledProcessError as cpe : [EOL] print ( [string] ) [EOL] for stream in [ cp . stdout , cp . stderr ] : [EOL] if stream : [EOL] for line in stream . decode ( ) . split ( [string] ) : [EOL] print ( line ) [EOL] print ( cpe ) [EOL] raise [EOL] [EOL] [EOL] @ task ( ) def echo ( * args , ** kwargs ) : [EOL] print ( args ) [EOL] print ( kwargs ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] __DEFAULT__ = echo [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $None$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0
[comment] [EOL] from typing import Any , List , Tuple [EOL] import subprocess [EOL] import typing [EOL] import build_utils [EOL] [docstring] [EOL] import functools [EOL] import os [EOL] import socket [EOL] import subprocess [EOL] [EOL] from checksumdir import dirhash [EOL] from semantic_version import Version [EOL] [EOL] PROJECT_NAME = [string] [EOL] SRC = [string] [EOL] [EOL] [comment] [EOL] PYTHON = [string] [EOL] IS_DJANGO = False [EOL] IS_TRAVIS = [string] in os . environ [EOL] if IS_TRAVIS : [EOL] PIPENV = [string] [EOL] else : [EOL] PIPENV = [string] [EOL] GEM_FURY = [string] [EOL] [EOL] CURRENT_HASH = None [EOL] [EOL] MAC_LIBS = [string] [EOL] [EOL] [EOL] [EOL] def check_is_aws ( ) : [EOL] [docstring] [EOL] name = socket . getfqdn ( ) [EOL] return [string] in name and [string] in name [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] class BuildState ( object ) : [EOL] def __init__ ( self , what , where ) : [EOL] self . what = what [EOL] self . where = where [EOL] if not os . path . exists ( [string] ) : [EOL] os . makedirs ( [string] ) [EOL] self . state_file_name = [string] . format ( what ) [EOL] [EOL] def oh_never_mind ( self ) : [EOL] [docstring] [EOL] os . remove ( self . state_file_name ) [EOL] [EOL] def has_source_code_tree_changed ( self ) : [EOL] [docstring] [EOL] global CURRENT_HASH [EOL] directory = self . where [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] CURRENT_HASH = dirhash ( directory , [string] , ignore_hidden = True , excluded_files = [ [string] , [string] ] , excluded_extensions = [ [string] ] ) [EOL] [EOL] print ( [string] + self . state_file_name ) [EOL] if os . path . isfile ( self . state_file_name ) : [EOL] with open ( self . state_file_name , [string] ) as file : [EOL] last_hash = file . read ( ) [EOL] if last_hash != CURRENT_HASH : [EOL] file . seek ( [number] ) [EOL] file . write ( CURRENT_HASH ) [EOL] file . truncate ( ) [EOL] return True [EOL] else : [EOL] return False [EOL] [EOL] [comment] [EOL] with open ( self . state_file_name , [string] ) as file : [EOL] file . write ( CURRENT_HASH ) [EOL] return True [EOL] [EOL] [EOL] def oh_never_mind ( what ) : [EOL] state = BuildState ( what , PROJECT_NAME ) [EOL] state . oh_never_mind ( ) [EOL] [EOL] [EOL] def has_source_code_tree_changed ( task_name , expect_file = None ) : [EOL] if expect_file : [EOL] if os . path . isdir ( expect_file ) and not os . listdir ( expect_file ) : [EOL] os . path . dirname ( expect_file ) [EOL] [comment] [EOL] return True [EOL] if not os . path . isfile ( expect_file ) : [EOL] [comment] [EOL] return True [EOL] state = BuildState ( task_name , os . path . join ( SRC , PROJECT_NAME ) ) [EOL] return state . has_source_code_tree_changed ( ) [EOL] [EOL] [EOL] def skip_if_no_change ( name , expect_files = None ) : [EOL] [comment] [EOL] def real_decorator ( func ) : [EOL] @ functools . wraps ( func ) def wrapper ( * args , ** kwargs ) : [EOL] if not has_source_code_tree_changed ( name , expect_files ) : [EOL] print ( [string] + name ) [EOL] return [EOL] try : [EOL] return func ( * args , ** kwargs ) [EOL] except : [EOL] oh_never_mind ( name ) [EOL] raise [EOL] [EOL] return wrapper [EOL] [EOL] return real_decorator [EOL] [EOL] [EOL] def execute_with_environment ( command , env ) : [EOL] [comment] [EOL] shell_process = subprocess . Popen ( command . strip ( ) . replace ( [string] , [string] ) . split ( [string] ) , env = env ) [EOL] value = shell_process . communicate ( ) [comment] [EOL] if shell_process . returncode != [number] : [EOL] print ( [string] . format ( shell_process . returncode ) ) [EOL] exit ( - [number] ) [EOL] [comment] [EOL] return value [EOL] [EOL] [EOL] def execute_get_text ( command ) : [comment] [EOL] [docstring] [EOL] try : [EOL] completed = subprocess . run ( command , check = True , shell = True , stdout = subprocess . PIPE , stderr = subprocess . PIPE ) [EOL] except subprocess . CalledProcessError as err : [EOL] raise [EOL] else : [EOL] [EOL] print ( completed . stdout . decode ( [string] ) + str ( [string] ) + completed . stderr . decode ( [string] ) ) [EOL] return completed . stdout . decode ( [string] ) + completed . stderr . decode ( [string] ) [EOL] [EOL] [EOL] [EOL] [EOL] def get_packages ( ) : [EOL] packages = [ ] [EOL] cp = subprocess . run ( ( [string] . format ( GEM_FURY ) . split ( [string] ) ) , stdout = subprocess . PIPE , stderr = subprocess . PIPE , shell = False , check = True ) [EOL] package_text = cp . stdout . split ( [string] ) [EOL] found = False [EOL] for line in package_text : [EOL] if [string] in line and [string] in line : [EOL] if PROJECT_NAME in line : [EOL] found = True [EOL] packages . append ( line ) [EOL] return packages , found [EOL] [EOL] [EOL] def get_versions ( ) : [EOL] versions = [ ] [EOL] cp = subprocess . run ( ( [string] . format ( GEM_FURY ) . format ( PROJECT_NAME ) . split ( [string] ) ) , stdout = subprocess . PIPE , stderr = subprocess . PIPE , shell = False , check = True ) [EOL] package_text = cp . stdout . decode ( ) . split ( [string] ) [EOL] found = False [EOL] for line in package_text : [EOL] if [string] in line : [EOL] try : [EOL] version = Version ( line ) [EOL] versions . append ( version ) [EOL] except ValueError : [EOL] pass [EOL] print ( versions ) [EOL] return versions [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $None$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [docstring] [EOL] __version__ = [string] [EOL]	0 0 0 0 $builtins.str$ 0 0 0
_ = [string] [EOL] __ = [string] [EOL]	$builtins.str$ 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [docstring] [EOL] [EOL] __version__ = [string] [EOL]	0 0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] import find_known_secrets [EOL] [docstring] [EOL] import os [EOL] import docopt [EOL] from find_known_secrets import main [EOL] from find_known_secrets . searcher import Searcher [EOL] [EOL] import find_known_secrets . __version__ as v1 [EOL] import find_known_secrets . __main__ as dunder_main [EOL] [EOL] def test_version ( ) : [EOL] print ( v1 ) [EOL] [EOL] def test_dunder_main ( ) : [EOL] dir ( dunder_main ) [EOL] [EOL] def test_this ( ) : [EOL] here = os . path . abspath ( os . path . dirname ( __file__ ) ) [EOL] [EOL] searcher = Searcher ( here + [string] ) [EOL] searcher . go ( ) [EOL] [EOL] def test_docops ( ) : [EOL] try : [EOL] main . process_docopts ( ) [EOL] except docopt . DocoptExit : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0