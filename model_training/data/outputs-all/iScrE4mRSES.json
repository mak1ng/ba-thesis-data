[comment] [EOL] [docstring] [EOL]	0 0 0 0
[comment] [EOL] from typing import Optional , Any , List [EOL] import logging [EOL] import typing [EOL] import psycopg2 [EOL] import builtins [EOL] import urllib [EOL] [docstring] [EOL] import logging [EOL] from typing import List , Optional , Any [comment] [EOL] from urllib . parse import urlparse , ParseResult [EOL] [EOL] import psycopg2 [EOL] import psycopg2 . extras [EOL] [EOL] from rses_config import DATABASE_URL [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class DatabaseAdapter : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , url = DATABASE_URL ) : [EOL] connection_data = urlparse ( url ) [EOL] self . username = connection_data . username [EOL] self . password = connection_data . password [EOL] self . database = connection_data . path [ [number] : ] [EOL] self . hostname = connection_data . hostname [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] [EOL] [EOL] def __repr__ ( self ) : [EOL] return f' [string] { self . username } [string] { self . hostname } [string] { self . database } [string] ' [EOL] [EOL] @ property def connection ( self ) : [EOL] [docstring] [EOL] conn = psycopg2 . connect ( database = self . database , user = self . username , password = self . password , host = self . hostname , connection_factory = psycopg2 . extras . NamedTupleConnection , cursor_factory = psycopg2 . extras . NamedTupleCursor ) [EOL] conn . autocommit = True [EOL] [comment] [EOL] [comment] [EOL] return conn [EOL] [EOL] @ property def cursor ( self ) : [EOL] [docstring] [EOL] with self . connection as conn : [EOL] return conn . cursor ( ) [EOL] [EOL] def select ( self , query , * args ) : [EOL] [docstring] [EOL] with self . cursor as cur : [EOL] cur . execute ( query , args ) [EOL] result = cur . fetchone ( ) [EOL] log . debug ( [string] , _query_for_log ( cur . query ) , result ) [EOL] return result [EOL] [EOL] def select_all ( self , query , * args ) : [EOL] [docstring] [EOL] with self . cursor as cur : [EOL] cur . execute ( query , args ) [EOL] result = cur . fetchall ( ) [EOL] log . debug ( [string] , _query_for_log ( cur . query ) , result ) [EOL] return result [EOL] [EOL] def delete ( self , query , * args ) : [EOL] [docstring] [EOL] with self . cursor as cur : [EOL] cur . execute ( query , args ) [EOL] log . debug ( [string] , _query_for_log ( cur . query ) , cur . rowcount ) [EOL] row_count = cur . rowcount [EOL] return row_count [EOL] [EOL] def insert ( self , query , * args ) : [EOL] [docstring] [EOL] with self . cursor as cur : [EOL] cur . execute ( query , args ) [EOL] result = cur . fetchone ( ) [EOL] log . debug ( [string] , _query_for_log ( cur . query ) , result ) [EOL] return result [EOL] [EOL] def update ( self , query , * args ) : [EOL] [docstring] [EOL] with self . cursor as cur : [EOL] cur . execute ( query , args ) [EOL] log . debug ( [string] , _query_for_log ( cur . query ) , cur . rowcount ) [EOL] row_count = cur . rowcount [EOL] return row_count [EOL] [EOL] [EOL] def _query_for_log ( query ) : [EOL] [docstring] [EOL] return [string] . join ( query . decode ( ) . replace ( [string] , [string] ) . split ( ) ) [EOL] [EOL] db = DatabaseAdapter ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $psycopg2.extensions.connection$ 0 0 0 0 0 0 0 $psycopg2.extensions.connection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $psycopg2.extensions.connection$ 0 0 0 0 0 0 0 0 0 0 $psycopg2.extensions.connection$ 0 0 0 0 0 $psycopg2.extras.NamedTupleCursor$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [docstring] [EOL] import sys [EOL] import os [EOL] [EOL] [comment] [EOL] [comment] [EOL] sys . path . append ( os . path . dirname ( os . path . realpath ( __file__ ) ) ) [EOL] [EOL] [comment] [EOL] from flask_app . blueprints . api . api import rses_api_bp [EOL] from flask_app . blueprints . client . client import rses_web_client_bp [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Optional , Type [EOL] import builtins [EOL] import typing [EOL] [docstring] [EOL] from typing import Optional , Type [EOL] [EOL] [EOL] class DoesNotExist ( Exception ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , what , identifier = [string] , add_info = None ) : [EOL] [docstring] [EOL] [comment] [EOL] self . what = what . __name__ [EOL] self . identifier = identifier [EOL] self . add_info = add_info [EOL] [EOL] def __str__ ( self ) : [EOL] message = f'{ self . what } [string] { self . identifier } [string] ' [EOL] if self . add_info is not None : [EOL] message += self . add_info [EOL] return message [EOL] [EOL] [EOL] class AlreadyExists ( Exception ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , what , relation = None ) : [EOL] [docstring] [EOL] self . what = what [EOL] self . relation = relation [EOL] [EOL] def __str__ ( self ) : [EOL] if self . relation is not None : [EOL] return f'{ repr ( self . what ) } [string] { repr ( self . relation ) } [string] ' [EOL] return f'{ repr ( self . what ) } [string] ' [EOL] [EOL] [EOL] class MissingParameter ( Exception ) : [EOL] [docstring] [EOL] def __init__ ( self , parameter ) : [EOL] [docstring] [EOL] self . parameter = parameter [EOL] [EOL] def __str__ ( self ) : [EOL] return f' [string] { self . parameter }' [EOL] [EOL] [EOL] class NotEnoughIngredients ( Exception ) : [EOL] [docstring] [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.object$ 0 $typing.Optional[builtins.object]$ 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 $builtins.object$ 0 0 0 $typing.Optional[builtins.object]$ 0 $typing.Optional[builtins.object]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] from flask_app . app import app [EOL] [EOL] port = app . config [ [string] ] [EOL] app . run ( host = [string] , port = port , debug = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0
[comment] [EOL] import builtins [EOL] [docstring] [EOL] import os [EOL] [EOL] SECRET_KEY = os . environ . get ( [string] , [string] ) [EOL] PORT = int ( os . environ . get ( [string] , [number] ) ) [EOL] DATABASE_URL = os . environ . get ( [string] ) or os . environ . get ( [string] ) [EOL] [comment] [EOL] RSES_WEB_CLIENT = True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0
[comment] [EOL] [docstring] [EOL]	0 0 0 0
[comment] [EOL] from typing import Any , Union , Optional , Dict , List [EOL] import logging [EOL] import typing [EOL] import objects [EOL] import builtins [EOL] [docstring] [EOL] from typing import List , Optional , Dict , Any [EOL] import logging [EOL] [EOL] from psycopg2 import sql [EOL] [EOL] import rses_errors [EOL] from rses_connections import db [EOL] from objects . stock import Ingredient [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class RecipeCategory : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * , recipe_category_id = None , name = None ) : [EOL] self . _id = recipe_category_id [EOL] self . _name = name [EOL] if not self . _id : [EOL] self . create ( ) [EOL] elif not self . _name : [EOL] self . __load_from_db ( ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f' [string] { self . _name }' [EOL] [EOL] def __repr__ ( self ) : [EOL] return f' [string] { self . _id } [string] { self . _name } [string] ' [EOL] [EOL] @ property def id ( self ) : [EOL] [docstring] [EOL] return self . _id [EOL] [EOL] @ property def name ( self ) : [EOL] [docstring] [EOL] return self . _name [EOL] [EOL] @ name . setter def name ( self , new_name ) : [EOL] log . debug ( [string] , str ( self ) , new_name ) [EOL] query = [string] [EOL] db . update ( query , new_name , self . _id ) [EOL] self . _name = new_name [EOL] [EOL] def exists ( self ) : [EOL] [docstring] [EOL] query = [string] [EOL] res = db . select ( query , self . _name ) [EOL] if res : [EOL] log . debug ( [string] , self . _name ) [EOL] else : [EOL] log . debug ( [string] , self . _name ) [EOL] return bool ( res ) [EOL] [EOL] def create ( self ) : [EOL] [docstring] [EOL] if self . exists ( ) or self . _id : [EOL] raise rses_errors . AlreadyExists ( self ) [EOL] if self . _name is None : [EOL] raise rses_errors . MissingParameter ( [string] ) [EOL] query = [string] [EOL] self . _id = db . insert ( query , self . _name ) . id [EOL] log . debug ( [string] , self . id ) [EOL] [EOL] def delete ( self ) : [EOL] [docstring] [EOL] if not self . exists ( ) : [EOL] raise rses_errors . DoesNotExist ( RecipeCategory , identifier = self . _name ) [EOL] query = [string] [EOL] db . delete ( query , self . _id ) [EOL] [EOL] def items ( self ) : [EOL] [docstring] [EOL] query = [string] [EOL] res = db . select_all ( query , self . _id ) [EOL] recipes = list ( ) [EOL] for item in res : [EOL] recipes . append ( Recipe ( recipe_id = item . id ) ) [EOL] return recipes [EOL] [EOL] def __load_from_db ( self ) : [EOL] [docstring] [EOL] query = [string] [EOL] res = db . select ( query , self . _id ) [EOL] self . _name = res . name [EOL] [EOL] [EOL] class Recipe : [EOL] [docstring] [EOL] def __init__ ( self , * , recipe_id = None , name = None , directions = [string] , picture = None , prepare_time = None , portions = None ) : [EOL] [docstring] [EOL] self . _id = recipe_id [EOL] self . _name = name [EOL] self . _directions = directions [EOL] self . _picture = picture [EOL] self . _prepare_time = prepare_time [EOL] self . _portions = portions [EOL] self . ingredients = dict ( ) [EOL] self . categories = list ( ) [EOL] if not self . _id : [EOL] self . create ( ) [EOL] else : [EOL] self . __load_from_db ( ) [EOL] self . _wanted_portions = self . _portions [EOL] [EOL] @ property def id ( self ) : [EOL] [docstring] [EOL] return self . _id [EOL] [EOL] @ property def name ( self ) : [EOL] [docstring] [EOL] return self . _name [EOL] [EOL] @ name . setter def name ( self , new_name ) : [EOL] self . _name = self . __updater ( [string] , new_name ) [EOL] [EOL] @ property def directions ( self ) : [EOL] [docstring] [EOL] return self . _directions [EOL] [EOL] @ directions . setter def directions ( self , new_directions ) : [EOL] self . _directions = self . __updater ( [string] , new_directions ) [EOL] [EOL] @ property def picture ( self ) : [EOL] [docstring] [EOL] return self . _picture [EOL] [EOL] @ picture . setter def picture ( self , new_picture_link ) : [EOL] self . _picture = self . __updater ( [string] , new_picture_link ) [EOL] [EOL] @ property def prepare_time ( self ) : [EOL] [docstring] [EOL] return self . _prepare_time [EOL] [EOL] @ prepare_time . setter def prepare_time ( self , new_time ) : [EOL] self . _prepare_time = self . __updater ( [string] , new_time ) [EOL] [EOL] @ property def portions ( self ) : [EOL] [docstring] [EOL] return self . _portions [EOL] [EOL] @ portions . setter def portions ( self , new_amount ) : [EOL] self . _portions = self . __updater ( [string] , new_amount ) [EOL] [EOL] @ property def wanted_portions ( self ) : [EOL] [docstring] [EOL] return self . _wanted_portions [EOL] [EOL] @ wanted_portions . setter def wanted_portions ( self , new_amount ) : [EOL] new_ratio = self . _wanted_portions / new_amount [EOL] self . _wanted_portions = new_amount [EOL] for ingredient , amount in self . ingredients . items ( ) : [EOL] self . ingredients [ ingredient ] = amount * new_ratio [EOL] [EOL] @ property def portion_price ( self ) : [EOL] [docstring] [EOL] return self . current_price / self . _portions [EOL] [EOL] @ property def current_price ( self ) : [EOL] [docstring] [EOL] price = [number] [EOL] for ingredient , amount in self . ingredients . items ( ) : [EOL] price += ingredient . average_price * amount [EOL] return price [EOL] [EOL] def create ( self ) : [EOL] [docstring] [EOL] required_params = dict ( portions = self . _portions , name = self . _name ) [EOL] for name , param in required_params . items ( ) : [EOL] if param is None : [EOL] raise rses_errors . MissingParameter ( name ) [EOL] query = [string] [EOL] db . insert ( query , self . _name , self . _directions , self . _picture , self . _prepare_time , self . _portions ) [EOL] [EOL] def delete ( self ) : [EOL] [docstring] [EOL] query = [string] [EOL] db . delete ( query , self . _name ) [EOL] [EOL] def add_ingredient ( self , ingredient , amount ) : [EOL] [docstring] [EOL] if ingredient in self . ingredients . keys ( ) : [EOL] raise rses_errors . AlreadyExists ( ingredient , relation = self ) [EOL] query = [string] [EOL] db . insert ( query , self . _id , ingredient . id , amount ) [EOL] self . ingredients [ ingredient ] = amount [EOL] [EOL] def remove_ingredient ( self , ingredient ) : [EOL] [docstring] [EOL] query = [string] [EOL] db . delete ( query , ingredient . id , self . _id ) [EOL] self . ingredients . pop ( ingredient , None ) [EOL] [EOL] def add_category ( self , category ) : [EOL] [docstring] [EOL] if category in self . categories : [EOL] raise rses_errors . AlreadyExists ( category , relation = self ) [EOL] query = [string] [EOL] db . insert ( query , self . _id , category . id ) [EOL] self . categories . append ( category ) [EOL] [EOL] def remove_category ( self , category ) : [EOL] [docstring] [EOL] query = [string] [EOL] db . delete ( query , self . _id , category . id ) [EOL] [EOL] def can_be_cooked ( self ) : [EOL] [docstring] [EOL] for ingredient , amount in self . ingredients . items ( ) : [EOL] if amount > ingredient . in_stock : [EOL] return False [EOL] return True [EOL] [EOL] def cook ( self ) : [EOL] [docstring] [EOL] if not self . can_be_cooked ( ) : [EOL] raise rses_errors . NotEnoughIngredients [EOL] query = [string] [EOL] db . insert ( query , self . _id , self . _portions , self . current_price ) [EOL] for ingredient , amount in self . ingredients . items ( ) : [EOL] ingredient . remove_stock ( amount ) [EOL] [EOL] def __load_from_db ( self ) : [EOL] [docstring] [EOL] query = [string] [EOL] res = db . select ( query , self . _id ) [EOL] self . _name = res . name [EOL] self . _directions = res . directions [EOL] self . _picture = res . picture [EOL] self . _prepare_time = res . prepare_time [EOL] self . _portions = res . portions [EOL] [EOL] query_ingredients = [string] [EOL] res = db . select_all ( query_ingredients , self . _id ) [EOL] for i in res : [EOL] ingredient = Ingredient ( ingredient_id = i . ingredient ) [EOL] self . ingredients [ ingredient ] = res . amount [EOL] query_categories = [string] [EOL] res = db . select_all ( query_categories , self . _id ) [EOL] for category in res : [EOL] self . categories . append ( RecipeCategory ( recipe_category_id = category . category ) ) [EOL] [EOL] def __updater ( self , column , new_value ) : [EOL] [docstring] [EOL] log . debug ( [string] , column , getattr ( self , [string] ) , new_value ) [EOL] query = sql . SQL ( [string] ) . format ( sql . Identifier ( column ) ) [EOL] db . update ( query , new_value , self . _id ) [EOL] return new_value [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[objects.stock.Ingredient,builtins.float]$ 0 0 0 0 0 0 0 $typing.List[RecipeCategory]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.float$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $None$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[None,builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[None,builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 $objects.stock.Ingredient$ 0 $builtins.float$ 0 0 0 0 0 0 $objects.stock.Ingredient$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $objects.stock.Ingredient$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $objects.stock.Ingredient$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 $objects.stock.Ingredient$ 0 0 $builtins.float$ 0 0 0 $None$ 0 0 0 $objects.stock.Ingredient$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $objects.stock.Ingredient$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $objects.stock.Ingredient$ 0 0 0 0 0 0 $None$ 0 0 0 $RecipeCategory$ 0 0 0 0 0 0 $RecipeCategory$ 0 0 0 0 0 0 0 0 0 0 0 $RecipeCategory$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $RecipeCategory$ 0 0 0 0 0 0 0 0 0 0 $RecipeCategory$ 0 0 0 0 $None$ 0 0 0 $RecipeCategory$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $RecipeCategory$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Any$ 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 $typing.Any$ 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0
[comment] [EOL] from typing import Any , Literal , Union , Optional , Dict , List [EOL] import logging [EOL] import typing [EOL] import typing_extensions [EOL] import rses [EOL] import builtins [EOL] [docstring] [EOL] import logging [EOL] from typing import Optional , List , Any , Dict , Union [EOL] [EOL] from psycopg2 import sql [EOL] [EOL] import rses_errors [EOL] from rses_connections import db [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class IngredientType : [EOL] [docstring] [EOL] def __init__ ( self , * , ingredient_type_id = None , name = None ) : [EOL] self . _id = ingredient_type_id [EOL] self . _name = name [EOL] if not self . _id : [EOL] self . create ( ) [EOL] elif not self . _name : [EOL] self . __load_from_db ( ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f" [string] { self . name } [string] " [EOL] [EOL] def __repr__ ( self ) : [EOL] return f' [string] { self . id } [string] { self . name } [string] ' [EOL] [EOL] def __eq__ ( self , other ) : [EOL] return repr ( self ) == repr ( other ) [EOL] [EOL] @ property def id ( self ) : [EOL] [docstring] [EOL] return self . _id [EOL] [EOL] @ property def name ( self ) : [EOL] [docstring] [EOL] return self . _name [EOL] [EOL] @ name . setter def name ( self , new_name ) : [EOL] log . debug ( [string] , str ( self ) , new_name ) [EOL] query = [string] [EOL] db . update ( query , new_name , self . _id ) [EOL] self . _name = new_name [EOL] [EOL] def exists ( self ) : [EOL] [docstring] [EOL] query = [string] [EOL] res = db . select ( query , self . _name ) [EOL] if res : [EOL] log . debug ( [string] , self . _name ) [EOL] else : [EOL] log . debug ( [string] , self . _name ) [EOL] return bool ( res ) [EOL] [EOL] def create ( self ) : [EOL] [docstring] [EOL] log . debug ( [string] , str ( self ) ) [EOL] if self . exists ( ) or self . _id : [EOL] raise rses_errors . AlreadyExists ( self ) [EOL] if self . _name is None : [EOL] raise rses_errors . MissingParameter ( [string] ) [EOL] query = [string] [EOL] self . _id = db . insert ( query , self . _name ) . id [EOL] log . debug ( [string] , self . id ) [EOL] [EOL] def delete ( self ) : [EOL] [docstring] [EOL] log . debug ( [string] , str ( self ) ) [EOL] if not self . exists ( ) : [EOL] raise rses_errors . DoesNotExist ( IngredientType , identifier = self . _name ) [EOL] query = [string] [EOL] db . delete ( query , self . _id ) [EOL] [EOL] def items ( self ) : [EOL] [docstring] [EOL] log . debug ( [string] , str ( self ) ) [EOL] query = [string] [EOL] res = db . select_all ( query , self . _id ) [EOL] ingredients = list ( ) [EOL] for item in res : [EOL] ingredients . append ( Ingredient ( ingredient_id = item . id ) ) [EOL] return ingredients [EOL] [EOL] def __load_from_db ( self ) : [EOL] [docstring] [EOL] query = [string] [EOL] res = db . select ( query , self . _id ) [EOL] self . _name = res . name [EOL] [EOL] @ classmethod def load_by_name ( cls , name ) : [EOL] [docstring] [EOL] query = [string] [EOL] res = db . select ( query , name ) [EOL] if res is None : [EOL] raise rses_errors . DoesNotExist ( IngredientType , name ) [EOL] return cls ( ingredient_type_id = res . id ) [EOL] [EOL] @ property def json_dict ( self ) : [EOL] [docstring] [EOL] return dict ( id = self . id , name = self . name ) [EOL] [EOL] [EOL] class Ingredient : [EOL] [docstring] [EOL] def __init__ ( self , * , ingredient_id = None , name = None , unit = None , ingredient_type = None , suggestion_threshold = [number] , rebuy_threshold = [number] , durability = None ) : [EOL] [docstring] [EOL] self . _id = ingredient_id [EOL] self . _name = name [EOL] self . _unit = unit [EOL] self . _type = ingredient_type [EOL] self . _suggestion_threshold = suggestion_threshold [EOL] self . _rebuy_threshold = rebuy_threshold [EOL] self . _durability = durability [EOL] if not self . _id : [EOL] self . create ( ) [EOL] elif not any ( [ self . _name , self . _unit , self . _type , self . _suggestion_threshold , self . _rebuy_threshold , self . _durability ] ) : [EOL] self . __load_from_db ( ) [EOL] [EOL] @ property def id ( self ) : [EOL] [docstring] [EOL] return self . _id [EOL] [EOL] @ property def name ( self ) : [EOL] [docstring] [EOL] return self . _name [EOL] [EOL] @ name . setter def name ( self , new_name ) : [EOL] self . _name = self . __updater ( [string] , new_name ) [EOL] [EOL] @ property def unit ( self ) : [EOL] [docstring] [EOL] return self . _unit [EOL] [EOL] @ unit . setter def unit ( self , new_unit ) : [EOL] self . _unit = self . __updater ( [string] , new_unit ) [EOL] [EOL] @ property def type ( self ) : [EOL] [docstring] [EOL] return self . _type [EOL] [EOL] @ type . setter def type ( self , new_type ) : [EOL] self . __updater ( [string] , new_type . id ) [EOL] self . _type = new_type [EOL] [EOL] @ property def suggestion_threshold ( self ) : [EOL] [docstring] [EOL] return self . _suggestion_threshold [EOL] [EOL] @ suggestion_threshold . setter def suggestion_threshold ( self , new_threshold ) : [EOL] self . _suggestion_threshold = self . __updater ( [string] , new_threshold ) [EOL] [EOL] @ property def rebuy_threshold ( self ) : [EOL] [docstring] [EOL] return self . _rebuy_threshold [EOL] [EOL] @ rebuy_threshold . setter def rebuy_threshold ( self , new_threshold ) : [EOL] self . _rebuy_threshold = self . __updater ( [string] , new_threshold ) [EOL] [EOL] @ property def durability ( self ) : [EOL] [docstring] [EOL] return self . _durability [EOL] [EOL] @ durability . setter def durability ( self , new_durability ) : [EOL] self . _durability = self . __updater ( [string] , new_durability ) [EOL] [EOL] @ property def average_price ( self ) : [EOL] [docstring] [EOL] query = [string] [EOL] return db . select ( query , self . _name ) . average [EOL] [EOL] @ property def in_stock ( self ) : [EOL] [docstring] [EOL] query = [string] [EOL] res = db . select ( query , self . _id ) [EOL] return res . amount [EOL] [EOL] def __str__ ( self ) : [EOL] return f' [string] { self . _name }' [EOL] [EOL] def __repr__ ( self ) : [EOL] return f' [string] { self . _id } [string] { self . _name } [string] { self . _unit } [string] { repr ( self . _type ) } [string] ' f' [string] { self . _suggestion_threshold } [string] { self . _rebuy_threshold }' [EOL] [EOL] def exists ( self ) : [EOL] [docstring] [EOL] query = [string] [EOL] res = db . select ( query , self . _name ) [EOL] if res : [EOL] log . debug ( [string] , self . _name ) [EOL] else : [EOL] log . debug ( [string] , self . _name ) [EOL] return bool ( res ) [EOL] [EOL] def create ( self ) : [EOL] [docstring] [EOL] log . debug ( [string] , str ( self ) ) [EOL] required_params = dict ( type = self . _type , unit = self . _unit , ingredient_type = self . _type ) [EOL] for name , param in required_params . items ( ) : [EOL] if param is None : [EOL] rses_errors . MissingParameter ( name ) [EOL] if self . exists ( ) : [EOL] raise rses_errors . AlreadyExists ( self ) [EOL] query = [string] [EOL] self . _id = db . insert ( query , self . _name , self . _unit , self . _type . id , self . _suggestion_threshold , self . _rebuy_threshold , self . _durability ) . id [EOL] log . debug ( [string] , self . _id ) [EOL] [EOL] def remove_stock ( self , amount ) : [EOL] [docstring] [EOL] log . debug ( [string] , amount , self . _unit , str ( self ) ) [EOL] query_select = [string] [EOL] res = db . select ( query_select ) [EOL] can_remove = res . amount_left if res . amount_left >= amount else amount [EOL] query_update = [string] [EOL] db . delete ( query_update , res . id ) [EOL] amount -= can_remove [EOL] [comment] [EOL] if amount > [number] : [EOL] log . debug ( [string] , amount , self . _unit ) [EOL] self . remove_stock ( amount ) [EOL] [EOL] def delete ( self ) : [EOL] [docstring] [EOL] log . debug ( [string] , str ( self ) ) [EOL] if not self . exists ( ) : [EOL] raise rses_errors . DoesNotExist ( Ingredient , identifier = self . _name ) [EOL] query = [string] [EOL] db . delete ( query , self . _id ) [EOL] [EOL] def __updater ( self , column , new_value ) : [EOL] [docstring] [EOL] log . debug ( [string] , column , getattr ( self , [string] ) , new_value ) [EOL] query = sql . SQL ( [string] ) . format ( sql . Identifier ( column ) ) [EOL] db . update ( query , new_value , self . _id ) [EOL] return new_value [EOL] [EOL] def __load_from_db ( self ) : [EOL] [docstring] [EOL] query = [string] [EOL] res = db . select ( query , self . _id ) [EOL] self . _name = res . name [EOL] self . _unit = res . unit [EOL] self . _type = IngredientType ( ingredient_type_id = res . ingredient_type ) [EOL] self . _suggestion_threshold = res . suggestion_threshold [EOL] self . _rebuy_threshold = res . rebuy_threshold [EOL] self . _durability = res . durability [EOL] [EOL] @ classmethod def load_by_name ( cls , name ) : [EOL] [docstring] [EOL] query = [string] [EOL] res = db . select ( query , name ) [EOL] return cls ( ingredient_id = res . id ) [EOL] [EOL] @ property def json_dict ( self ) : [EOL] [docstring] [EOL] return dict ( id = self . id , name = self . name , unit = self . unit , type = self . type , suggestion_threshold = self . suggestion_threshold , rebuy_threshold = self . rebuy_threshold , durability = self . durability ) [EOL] [EOL] [EOL] class IngredientTypeListing : [EOL] [docstring] [EOL] [EOL] @ property def total ( self ) : [EOL] [docstring] [EOL] query = [string] [EOL] return db . select ( query ) . total [EOL] [EOL] @ staticmethod def show ( limit = [number] , offset = [number] , name_filter = [string] ) : [EOL] [docstring] [EOL] name_filter = name_filter . lower ( ) [EOL] query = [string] [EOL] name_filter = f' [string] { name_filter } [string] ' . lower ( ) [EOL] res = db . select_all ( query , name_filter , limit , offset ) [EOL] return [ IngredientType ( ingredient_type_id = item . id , name = item . name ) . json_dict for item in res ] [EOL] [EOL] [EOL] class IngredientListing : [EOL] [docstring] [EOL] [EOL] @ property def total ( self ) : [EOL] [docstring] [EOL] query = [string] [EOL] return db . select ( query ) . total [EOL] [EOL] @ staticmethod def show ( limit = [number] , offset = [number] , wanted_filters = None ) : [EOL] [docstring] [EOL] filters = dict ( name = [string] , unit = [string] , ingredient_type = [string] ) [EOL] if wanted_filters is not None : [EOL] filters . update ( wanted_filters ) [EOL] query = [string] [EOL] name_filter = f' [string] { filters [ [string] ] } [string] ' . lower ( ) [EOL] unit_filter = f' [string] { filters [ [string] ] } [string] ' . lower ( ) [EOL] ingredient_type_filter = f' [string] { filters [ [string] ] } [string] ' . lower ( ) [EOL] res = db . select_all ( query , name_filter , unit_filter , ingredient_type_filter , limit , offset ) [EOL] return [ Ingredient ( ingredient_id = item . id , name = item . name , unit = item . unit , ingredient_type = item . ingredient_type , suggestion_threshold = item . suggestion_threshold , rebuy_threshold = item . rebuy_threshold , durability = item . durability ) . json_dict for item in res ] [EOL]	typing.List[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0
[comment] [EOL] from typing import Optional , Any , List [EOL] import logging [EOL] import typing [EOL] import datetime [EOL] import builtins [EOL] import rses [EOL] [docstring] [EOL] from typing import Optional , List [EOL] import datetime [EOL] import logging [EOL] [EOL] from rses_connections import db [EOL] from objects . stock import Ingredient [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class ShoppingItem ( Ingredient ) : [EOL] [docstring] [EOL] def __init__ ( self , shopping_item_id , amount = None ) : [EOL] super ( ) . __init__ ( ingredient_id = shopping_item_id ) [EOL] self . _amount = amount [EOL] self . current_price = None [EOL] self . expiration_date = None [EOL] [EOL] @ property def status ( self ) : [EOL] [docstring] [EOL] query = [string] [EOL] res = db . select ( query , self . _id ) [EOL] return res . status [EOL] [EOL] @ property def amount ( self ) : [EOL] [docstring] [EOL] if self . _amount is None : [EOL] log . debug ( [string] , self . name ) [EOL] return self . _suggestion_threshold + [number] [EOL] return self . _amount [EOL] [EOL] def __str__ ( self ) : [EOL] return f'{ self . amount } [string] { self . _unit } [string] { self . _name } [string] { self . current_price }' [EOL] [EOL] def __repr__ ( self ) : [EOL] return f' [string] { self . _name } [string] { self . amount } [string] { self . current_price } [string] ' f' [string] { self . average_price } [string] { self . status } [string] ' [EOL] [EOL] def create ( self ) : [EOL] [docstring] [EOL] log . debug ( [string] , str ( self ) ) [EOL] if self . _amount is None : [EOL] self . _amount = self . amount [EOL] query = [string] [EOL] db . insert ( query , self . _id , self . _amount ) [EOL] [EOL] def to_cart ( self ) : [EOL] [docstring] [EOL] query = [string] [EOL] db . update ( query , self . _id ) [EOL] [EOL] def from_cart ( self ) : [EOL] [docstring] [EOL] query = [string] [EOL] db . update ( query , self . _id ) [EOL] [EOL] def purchase ( self ) : [EOL] [docstring] [EOL] log . debug ( [string] , str ( self ) ) [EOL] query_insert = [string] [EOL] db . insert ( query_insert , self . _id , self . amount , self . amount , self . expiration_date , self . current_price ) [EOL] query_delete = [string] [EOL] db . delete ( query_delete , self . _id ) [EOL] [EOL] def __eq__ ( self , other ) : [EOL] return self . _name == other . name [EOL] [EOL] [EOL] class ShoppingList : [EOL] [docstring] [EOL] def __init__ ( self ) : [EOL] self . list = list ( ) [EOL] self . suggested_list = list ( ) [EOL] log . debug ( [string] ) [EOL] self . __add_from_db_list ( ) [EOL] self . __add_critical ( ) [EOL] log . debug ( [string] ) [EOL] self . __add_suggested ( ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f' [string] { self . list } [string] { self . suggested_list }' [EOL] [EOL] def __repr__ ( self ) : [EOL] return f' [string] { repr ( self . list ) } [string] { repr ( self . suggested_list ) } [string] ' [EOL] [EOL] def __add_from_db_list ( self ) : [EOL] query = [string] [EOL] res = db . select_all ( query ) [EOL] for item in res : [EOL] item = ShoppingItem ( item . ingredient , item . wanted_amount ) [EOL] log . debug ( [string] , item ) [EOL] self . list . append ( item ) [EOL] [EOL] def __add_critical ( self ) : [EOL] [docstring] [EOL] query = [string] [EOL] res = db . select_all ( query ) [EOL] for item in res : [EOL] item = ShoppingItem ( item . id ) [EOL] if item not in self . list : [EOL] item . create ( ) [EOL] log . debug ( [string] , item ) [EOL] self . list . append ( item ) [EOL] [EOL] def __add_suggested ( self ) : [EOL] [docstring] [EOL] query = [string] [EOL] res = db . select_all ( query ) [EOL] for item in res : [EOL] item = ShoppingItem ( item . id ) [EOL] if item not in self . list : [EOL] log . debug ( [string] , item ) [EOL] self . suggested_list . append ( item ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 $typing.Optional[builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Optional[builtins.float]$ 0 $typing.Optional[builtins.float]$ 0 0 0 $typing.Optional[builtins.float]$ 0 0 0 0 0 $typing.Optional[datetime.date]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.float]$ 0 0 0 0 0 0 $typing.Optional[builtins.float]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Optional[builtins.float]$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $typing.List[ShoppingItem]$ 0 $typing.List[ShoppingItem]$ 0 0 0 0 0 $typing.List[ShoppingItem]$ 0 $typing.List[ShoppingItem]$ 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $rses.src.objects.shopping.ShoppingItem$ 0 $typing.Any$ 0 0 $rses.src.objects.shopping.ShoppingItem$ 0 0 0 $rses.src.objects.shopping.ShoppingItem$ 0 0 0 $rses.src.objects.shopping.ShoppingItem$ 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $rses.src.objects.shopping.ShoppingItem$ 0 0 0 0 0 0 0 0 $rses.src.objects.shopping.ShoppingItem$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $rses.src.objects.shopping.ShoppingItem$ 0 $typing.Any$ 0 0 $rses.src.objects.shopping.ShoppingItem$ 0 0 0 $rses.src.objects.shopping.ShoppingItem$ 0 0 0 0 0 $rses.src.objects.shopping.ShoppingItem$ 0 0 0 0 0 0 0 $rses.src.objects.shopping.ShoppingItem$ 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $rses.src.objects.shopping.ShoppingItem$ 0 0 0 0 0 0 0 0 $rses.src.objects.shopping.ShoppingItem$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $rses.src.objects.shopping.ShoppingItem$ 0 $typing.Any$ 0 0 $rses.src.objects.shopping.ShoppingItem$ 0 0 0 $rses.src.objects.shopping.ShoppingItem$ 0 0 0 0 0 $rses.src.objects.shopping.ShoppingItem$ 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $rses.src.objects.shopping.ShoppingItem$ 0 0 0 0 0 0 0 0 $rses.src.objects.shopping.ShoppingItem$ 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] import flask [EOL] [docstring] [EOL] from flask import Flask , url_for , redirect [EOL] [EOL] from flask_app . blueprints . api . api import rses_api_bp [EOL] [EOL] app = Flask ( __name__ ) [EOL] app . config . from_object ( [string] ) [EOL] app . register_blueprint ( rses_api_bp ) [EOL] [EOL] [comment] [EOL] if app . config [ [string] ] : [EOL] from flask_app . blueprints . client . client import rses_web_client_bp [EOL] [EOL] app . register_blueprint ( rses_web_client_bp ) [EOL] [EOL] [EOL] def home ( ) : [EOL] [docstring] [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] [EOL] app . route ( [string] ) ( home ) [EOL] else : [EOL] [comment] [EOL] def home ( ) : [EOL] [docstring] [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] [EOL] app . route ( [string] ) ( home ) [EOL] [EOL] if __name__ == [string] : [EOL] port = app . config [ [string] ] [EOL] app . run ( host = [string] , port = port , debug = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $flask.app.Flask$ 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0
[comment] [EOL] [docstring]	0 0 0
[comment] [EOL] [docstring]	0 0 0
[comment] [EOL] from typing import Any [EOL] import werkzeug [EOL] import builtins [EOL] import typing [EOL] import flask [EOL] [docstring] [EOL] import html [EOL] from urllib . parse import unquote [EOL] [EOL] from flask import Blueprint , json , current_app , session , abort , request [EOL] [EOL] from objects import stock [EOL] [EOL] rses_api_bp = Blueprint ( [string] , __name__ , url_prefix = [string] ) [EOL] [EOL] [EOL] @ rses_api_bp . before_request def before_api_request ( ) : [EOL] [docstring] [EOL] if not session . get ( [string] , False ) : [EOL] return abort ( [number] ) [EOL] [EOL] [EOL] @ rses_api_bp . route ( [string] ) def index ( ) : [EOL] [docstring] [EOL] ret = [string] [EOL] for rule in current_app . url_map . iter_rules ( ) : [EOL] ret += f" [string] { repr ( rule ) . replace ( [string] , [string] ) . replace ( [string] , [string] ) } [string] " [EOL] return ret [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] @ rses_api_bp . route ( [string] , methods = [ [string] ] ) def ingredient_type_get ( ingredient_type_id ) : [EOL] [docstring] [EOL] try : [EOL] ingredient_type = stock . IngredientType ( ingredient_type_id = ingredient_type_id ) [EOL] except AttributeError : [comment] [EOL] return json . jsonify ( dict ( status = [number] ) ) , [number] [EOL] return json . jsonify ( dict ( ingredientType = ingredient_type . json_dict ) ) , [number] [EOL] [EOL] [EOL] @ rses_api_bp . route ( [string] , methods = [ [string] ] ) def ingredient_type_delete ( ingredient_type_id ) : [EOL] [docstring] [EOL] stock . IngredientType ( ingredient_type_id = ingredient_type_id ) . delete ( ) [EOL] return json . jsonify ( dict ( status = [string] ) ) , [number] [EOL] [EOL] [EOL] @ rses_api_bp . route ( [string] , methods = [ [string] ] ) def ingredient_type_create ( name ) : [EOL] [docstring] [EOL] name = html . unescape ( unquote ( name ) ) [EOL] ingredient_type = stock . IngredientType ( name = name ) [EOL] return json . jsonify ( dict ( status = [string] , id = ingredient_type . id ) ) , [number] [EOL] [EOL] [EOL] @ rses_api_bp . route ( [string] , methods = [ [string] ] ) def ingredient_type_rename ( ingredient_type_id , new_name ) : [EOL] [docstring] [EOL] new_name = html . unescape ( unquote ( new_name ) ) [EOL] ingredient_type = stock . IngredientType ( ingredient_type_id = ingredient_type_id ) [EOL] ingredient_type . name = new_name [EOL] return json . jsonify ( dict ( status = [string] , new_name = ingredient_type . name ) ) , [number] [EOL] [EOL] [EOL] @ rses_api_bp . route ( [string] , methods = [ [string] ] ) @ rses_api_bp . route ( [string] , methods = [ [string] ] ) def list_ingredient_types ( limit , offset , name_filter = [string] ) : [EOL] [docstring] [EOL] name_filter = html . unescape ( unquote ( name_filter ) ) [EOL] listing = stock . IngredientTypeListing ( ) . show ( limit , offset , name_filter ) [EOL] return json . jsonify ( dict ( status = [string] , ingredient_types = listing ) ) , [number] [EOL] [EOL] [EOL] @ rses_api_bp . route ( [string] , methods = [ [string] ] ) def total_ingredient_types ( ) : [EOL] [docstring] [EOL] total = stock . IngredientTypeListing ( ) . total [EOL] return json . jsonify ( dict ( status = [string] , total = total ) ) , [number] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] @ rses_api_bp . route ( [string] , methods = [ [string] ] ) def ingredient_get ( ingredient_id ) : [EOL] [docstring] [EOL] try : [EOL] ingredient_type = stock . Ingredient ( ingredient_id = ingredient_id ) [EOL] except AttributeError : [comment] [EOL] return json . jsonify ( dict ( status = [number] ) ) , [number] [EOL] return json . jsonify ( dict ( ingredientType = ingredient_type . json_dict ) ) , [number] [EOL] [EOL] [EOL] @ rses_api_bp . route ( [string] , methods = [ [string] ] ) def ingredient_delete ( ingredient_id ) : [EOL] [docstring] [EOL] stock . Ingredient ( ingredient_id = ingredient_id ) . delete ( ) [EOL] return json . jsonify ( dict ( status = [string] ) ) , [number] [EOL] [EOL] [EOL] @ rses_api_bp . route ( [string] , methods = [ [string] ] ) def ingredient_create ( name ) : [EOL] [docstring] [EOL] name = html . unescape ( unquote ( name ) ) [EOL] params = request . get_json ( ) [EOL] ingredient_type = stock . IngredientType . load_by_name ( params . get ( [string] ) ) [EOL] ingredient = stock . Ingredient ( name = name , unit = params . get ( [string] ) , ingredient_type = ingredient_type , suggestion_threshold = params . get ( [string] ) , rebuy_threshold = params . get ( [string] ) , durability = params . get ( [string] ) ) [EOL] return json . jsonify ( dict ( status = [string] , id = ingredient . id ) ) , [number] [EOL] [EOL] [EOL] @ rses_api_bp . route ( [string] , methods = [ [string] ] ) def ingredient_rename ( ingredient_id ) : [EOL] [docstring] [EOL] ingredient = stock . Ingredient ( ingredient_id = ingredient_id ) [EOL] params = request . get_json ( ) [EOL] for name , value in params . items ( ) : [EOL] setattr ( ingredient , name , value ) [EOL] return json . jsonify ( dict ( status = [string] , changed_ingredienty = ingredient . json_dict ) ) , [number] [EOL] [EOL] [EOL] @ rses_api_bp . route ( [string] , methods = [ [string] ] ) @ rses_api_bp . route ( [string] , methods = [ [string] ] ) def list_ingredients ( limit , offset ) : [EOL] [docstring] [EOL] filters = request . args [EOL] listing = stock . IngredientTypeListing ( ) . show ( limit , offset , filters ) [EOL] return json . jsonify ( dict ( status = [string] , ingredient_types = listing ) ) , [number] [EOL] [EOL] [EOL] @ rses_api_bp . route ( [string] , methods = [ [string] ] ) def total_ingredients ( ) : [EOL] [docstring] [EOL] total = stock . IngredientListing ( ) . total [EOL] return json . jsonify ( dict ( status = [string] , total = total ) ) , [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [docstring]	0 0 0
[comment] [EOL] import builtins [EOL] import flask [EOL] [docstring] [EOL] import os [EOL] from functools import wraps [EOL] [EOL] from flask import Blueprint , render_template , current_app , request , session , redirect , url_for , flash [EOL] [EOL] rses_web_client_bp = Blueprint ( [string] , __name__ , url_prefix = [string] , template_folder = [string] , static_folder = [string] , static_url_path = [string] ) [EOL] [EOL] [EOL] @ rses_web_client_bp . context_processor def inject_menu_items ( ) : [EOL] [docstring] [EOL] return dict ( menu_items = [ { [string] : [string] , [string] : [string] , [string] : [string] , [string] : None } , { [string] : [string] , [string] : [ { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } ] } , ] ) [EOL] [EOL] [EOL] def public ( endpoint ) : [EOL] [docstring] [EOL] [EOL] @ wraps ( endpoint ) def public_endpoint ( * args , ** kwargs ) : [EOL] [docstring] [EOL] return endpoint ( * args , ** kwargs ) [EOL] [EOL] public_endpoint . _is_public = True [EOL] return public_endpoint [EOL] [EOL] [EOL] @ rses_web_client_bp . before_request def before_request ( ) : [EOL] [docstring] [EOL] if getattr ( current_app . view_functions . get ( request . endpoint , False ) , [string] , False ) : [EOL] return [EOL] if [string] in request . path : [EOL] return [EOL] if not session . get ( [string] , False ) : [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] [EOL] @ rses_web_client_bp . route ( [string] , methods = [ [string] , [string] ] ) @ public def authorize ( ) : [EOL] [docstring] [EOL] if request . method == [string] : [EOL] password = request . form . get ( [string] ) [EOL] if password == os . environ . get ( [string] , [string] ) : [EOL] session [ [string] ] = True [EOL] return redirect ( [string] ) [EOL] else : [EOL] flash ( [string] ) [EOL] [EOL] return render_template ( [string] ) [EOL] [EOL] [EOL] @ rses_web_client_bp . route ( [string] ) def home ( ) : [EOL] [docstring] [EOL] return render_template ( [string] ) [EOL] [EOL] [EOL] @ rses_web_client_bp . route ( [string] ) def ingredient_types ( ) : [EOL] [docstring] [EOL] return render_template ( [string] ) [EOL] [EOL] [EOL] @ rses_web_client_bp . route ( [string] ) def ingredients ( ) : [EOL] [docstring] [EOL] return render_template ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [docstring]	0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] import rses [EOL] import logging [EOL] [EOL] from pytest import fixture [EOL] [EOL] from rses . src . objects import stock [EOL] [EOL] logging . basicConfig ( level = logging . INFO ) [EOL] [EOL] [EOL] @ fixture ( params = [ [string] , [string] ] ) def ingredient_type_name ( request ) : [EOL] return request . param [EOL] [EOL] [EOL] @ fixture ( params = [ [string] , [string] ] ) def ingredient_type_new_name ( request ) : [EOL] yield request . param [EOL] try : [EOL] stock . IngredientType . load_by_name ( request . param ) . delete ( ) [EOL] except AttributeError : [EOL] pass [EOL] [EOL] [EOL] @ fixture def ingredient_type_no_create ( ingredient_type_name ) : [EOL] yield ingredient_type_name [EOL] stock . IngredientType . load_by_name ( ingredient_type_name ) . delete ( ) [EOL] [EOL] [EOL] @ fixture def ingredient_type ( ingredient_type_name ) : [EOL] IT = stock . IngredientType ( name = ingredient_type_name ) [EOL] yield IT [EOL] [comment] [EOL] try : [EOL] stock . IngredientType ( ingredient_type_id = IT . id ) . delete ( ) [EOL] [comment] [EOL] except AttributeError : [EOL] pass [EOL] [EOL] [EOL] @ fixture def ingredient_type_no_delete ( ingredient_type_name ) : [EOL] IT = stock . IngredientType ( name = ingredient_type_name ) [EOL] yield IT [EOL] [EOL] [EOL] @ fixture ( params = [ [string] , [string] , [string] ] ) def ingredient_name ( request ) : [EOL] return request . param [EOL] [EOL] [EOL] @ fixture ( params = [ [string] ] ) def ingredient_unit ( request ) : [EOL] return request . param [EOL] [EOL] [EOL] @ fixture ( params = [ [number] , [number] ] ) def positive_int ( request ) : [EOL] return request . param [EOL] [EOL] [EOL] @ fixture ( params = [ [number] , [number] ] ) def positive_float ( request ) : [EOL] return request . param [EOL] [EOL] positive_float2 = positive_float [EOL] [EOL] [EOL] @ fixture def ingredient_no_create ( ingredient_name ) : [EOL] yield ingredient_name [EOL] stock . Ingredient . load_by_name ( ingredient_name ) . delete ( ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import rses [EOL] from pytest import raises [EOL] [EOL] from rses . src . objects import stock [EOL] import rses_errors [EOL] [EOL] [EOL] def test_ingredient_type_create ( ingredient_type_no_create ) : [EOL] ingredient_type = stock . IngredientType ( name = ingredient_type_no_create ) [EOL] assert ingredient_type . id [EOL] assert ingredient_type . name == ingredient_type_no_create [EOL] [EOL] [EOL] def test_ingredient_type_rename ( ingredient_type , ingredient_type_new_name ) : [EOL] ingredient_type . name = ingredient_type_new_name [EOL] assert ingredient_type . name == ingredient_type_new_name [EOL] new = stock . IngredientType ( ingredient_type_id = ingredient_type . id ) [EOL] assert new . name == ingredient_type_new_name [EOL] assert ingredient_type == new [EOL] [EOL] [EOL] def test_ingredient_type_delete ( ingredient_type ) : [EOL] ingredient_type . delete ( ) [EOL] with raises ( rses_errors . DoesNotExist ) as e : [EOL] stock . IngredientType . load_by_name ( ingredient_type . name ) [EOL] assert ingredient_type . name in str ( e ) [EOL] [EOL] [EOL] def test_ingredient_create ( ingredient_type , ingredient_no_create , ingredient_unit , positive_float , positive_float2 , positive_int ) : [EOL] [docstring] [EOL] ingredient = stock . Ingredient ( name = ingredient_no_create , unit = ingredient_unit , ingredient_type = ingredient_type , suggestion_threshold = positive_float , rebuy_threshold = positive_float2 , durability = positive_int ) [EOL] assert ingredient . name == ingredient_no_create [EOL] assert ingredient . unit == ingredient_unit [EOL] assert ingredient . type == ingredient_type [EOL] assert ingredient . suggestion_threshold == positive_float [EOL] assert ingredient . rebuy_threshold == positive_float2 [EOL] assert ingredient . durability == positive_int [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0