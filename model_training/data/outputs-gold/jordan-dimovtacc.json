from setuptools import setup [EOL] [EOL] setup ( name = [string] , version = [string] , package_dir = { [string] : [string] } , packages = [ [string] ] , include_package_data = True , install_requires = [ ] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from decimal import Decimal [EOL] [EOL] from tacc import BalanceType , T [EOL] [EOL] [EOL] def test_t_initialised_correctly_without_arguments ( ) : [EOL] t = T ( ) [EOL] assert ( t . dr == [number] ) [EOL] assert ( t . cr == [number] ) [EOL] assert ( t . balance_type == BalanceType . DEBIT ) [EOL] assert ( str ( t ) == [string] ) [EOL] [EOL] [EOL] def test_t_initialised_correctly_with_basic_arguments ( ) : [EOL] t = T ( [number] , [number] ) [EOL] assert ( t . dr == Decimal ( [string] ) ) [EOL] assert ( t . cr == Decimal ( [string] ) ) [EOL] assert ( t . balance_type == BalanceType . DEBIT ) [EOL] assert ( str ( t ) == [string] ) [EOL] [EOL] [EOL] def test_t_initialised_correctly_with_extra_arguments ( ) : [EOL] t = T ( [number] , [number] , balance_type = BalanceType . CREDIT , account_name = [string] , label = [string] , ) [EOL] assert ( t . dr == Decimal ( [string] ) ) [EOL] assert ( t . cr == Decimal ( [string] ) ) [EOL] assert ( t . balance_type == BalanceType . CREDIT ) [EOL] assert ( t . account_name == [string] ) [EOL] assert ( t . labels == ( [string] , ) ) [EOL] [EOL] [EOL] def test_t_balance_for_debit_balance ( ) : [EOL] t = T ( [number] , [number] , balance_type = BalanceType . DEBIT ) [EOL] assert ( t . balance == [number] - [number] ) [EOL] [EOL] [EOL] def test_t_balance_for_credit_balance ( ) : [EOL] t = T ( [number] , [number] , balance_type = BalanceType . CREDIT ) [EOL] assert ( t . balance == [number] - [number] ) [EOL] [EOL] [EOL] def test_t_equality ( ) : [EOL] assert ( T ( [number] , [number] ) == T ( [number] , [number] ) ) [EOL] assert ( T ( [number] , [number] ) == T ( [number] , [number] ) ) [EOL] assert ( T ( [number] , [number] ) == T ( [number] , [number] ) ) [EOL] assert ( T ( [number] , [number] ) == T ( [number] , [number] ) ) [EOL] [EOL] [EOL] def test_t_addition ( ) : [EOL] assert ( T ( [number] , [number] ) + T ( [number] , [number] ) ) == T ( [number] , [number] ) [EOL] [EOL] [EOL] def test_t_substraction ( ) : [EOL] assert ( T ( [number] , [number] ) - T ( [number] , [number] ) ) == T ( [number] , [number] ) [EOL] [EOL] [EOL] def test_t_bool ( ) : [EOL] assert ( bool ( T ( [number] , [number] ) ) is False ) [EOL] assert ( bool ( T ( [number] , [number] ) ) is False ) [EOL] assert ( bool ( T ( [number] , [number] ) ) is True ) [EOL] assert ( bool ( T ( [number] , [number] ) ) is True ) [EOL] [EOL] [EOL] def test_balance_for_debit_balance_t_account ( ) : [EOL] class DebitT ( T ) : [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] self . balance_type = BalanceType . DEBIT [EOL] [EOL] assert ( DebitT ( [number] , [number] ) . balance == Decimal ( [string] ) ) [EOL] assert ( DebitT ( [number] , [number] ) . balance == Decimal ( [string] ) ) [EOL] assert ( DebitT ( [number] , [number] ) . balance == Decimal ( [string] ) ) [EOL] assert ( DebitT ( [number] , [number] ) . balance == Decimal ( [string] ) ) [EOL] [EOL] [EOL] def test_balance_for_credit_balance_t_account ( ) : [EOL] class DebitT ( T ) : [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] self . balance_type = BalanceType . CREDIT [EOL] [EOL] assert ( DebitT ( [number] , [number] ) . balance == Decimal ( [string] ) ) [EOL] assert ( DebitT ( [number] , [number] ) . balance == Decimal ( [string] ) ) [EOL] assert ( DebitT ( [number] , [number] ) . balance == Decimal ( [string] ) ) [EOL] assert ( DebitT ( [number] , [number] ) . balance == Decimal ( [string] ) ) [EOL] [EOL] [EOL] def test_t_account_as_tuple ( ) : [EOL] assert ( T ( [number] , [number] ) . as_tuple ( ) ) == ( Decimal ( [string] ) , Decimal ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from collections import defaultdict [EOL] [EOL] from tacc import T [EOL] [EOL] [EOL] class TJournal : [EOL] def __init__ ( self , TClass = T ) : [EOL] self . TClass = TClass [EOL] self . T0 = TClass ( ) [EOL] self . _journal = defaultdict ( TClass ) [EOL] [EOL] def add_t ( self , account_id , t ) : [EOL] self . _journal [ account_id ] += t [EOL] [EOL] @ property def balance ( self ) : [EOL] return sum ( self . _journal . values ( ) , self . T0 ) [EOL] [EOL] def is_balanced ( self ) : [EOL] return not bool ( self . balance ) [EOL] [EOL] def auto_balance ( self , account_id ) : [EOL] self . add_t ( account_id , - self . balance ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0