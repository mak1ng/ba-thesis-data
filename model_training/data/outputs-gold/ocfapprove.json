from setuptools import setup [EOL] [EOL] try : [EOL] with open ( [string] ) as f : [EOL] VERSION = f . readline ( ) . strip ( ) [EOL] except IOError : [EOL] VERSION = [string] [EOL] [EOL] setup ( name = [string] , version = VERSION , py_modules = [ [string] ] , url = [string] , author = [string] , author_email = [string] , entry_points = { [string] : { [string] , } , } , classifiers = [ [string] , ] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import argparse [EOL] import configparser [EOL] [docstring] [EOL] import ssl [EOL] import sys [EOL] import time [EOL] from argparse import ArgumentParser [EOL] from configparser import ConfigParser [EOL] from textwrap import dedent [EOL] [EOL] import yaml [EOL] from celery import Celery [EOL] from Crypto . PublicKey import RSA [EOL] from ocflib . account . creation import CREATE_PUBLIC_KEY [EOL] from ocflib . account . creation import encrypt_password [EOL] from ocflib . account . creation import NewAccountRequest [EOL] from ocflib . account . submission import get_tasks [EOL] from ocflib . account . submission import NewAccountResponse [EOL] from ocflib . account . validators import validate_password [EOL] from ocflib . misc . mail import send_problem_report [EOL] from ocflib . misc . shell import bold [EOL] from ocflib . misc . shell import edit_file [EOL] from ocflib . misc . shell import green [EOL] from ocflib . misc . shell import prompt_for_new_password [EOL] from ocflib . misc . shell import red [EOL] from ocflib . misc . shell import yellow [EOL] from ocflib . ucb . groups import group_by_oid [EOL] [EOL] TEMPLATE = dedent ( [string] ) [EOL] [EOL] [EOL] def wait_for_task ( celery , task ) : [EOL] [docstring] [EOL] print ( [string] , end = [string] ) [EOL] task . wait ( ) [comment] [EOL] [EOL] if isinstance ( task . result , NewAccountResponse ) : [EOL] print ( ) [EOL] return task . result [EOL] [EOL] task = celery . AsyncResult ( task . result ) [EOL] [EOL] last_status_len = [number] [EOL] while not task . ready ( ) : [EOL] time . sleep ( [number] ) [EOL] [EOL] meta = task . info [EOL] if isinstance ( meta , dict ) and [string] in meta : [EOL] status = meta [ [string] ] [EOL] [EOL] if len ( status ) > last_status_len : [EOL] for line in status [ last_status_len : ] : [EOL] print ( ) [EOL] print ( line , end = [string] ) [EOL] [EOL] last_status_len = len ( status ) [EOL] [EOL] print ( [string] , end = [string] ) [EOL] sys . stdout . flush ( ) [EOL] [EOL] print ( ) [EOL] [EOL] if isinstance ( task . result , Exception ) : [EOL] raise task . result [EOL] else : [EOL] return task . result [EOL] [EOL] [EOL] def get_group_information ( group_oid ) : [EOL] [docstring] [EOL] if group_oid : [EOL] group = group_by_oid ( group_oid ) [EOL] [EOL] if not group : [EOL] print ( red ( [string] ) . format ( group_oid ) ) [EOL] sys . exit ( [number] ) [EOL] [EOL] if group [ [string] ] : [EOL] print ( yellow ( [string] . format ( group_oid , [string] . join ( group [ [string] ] ) , ) , ) ) [EOL] input ( [string] ) [EOL] [EOL] return ( group [ [string] ] , group_oid , group [ [string] ] ) [EOL] else : [EOL] return ( [string] , [string] , [string] ) [EOL] [EOL] [EOL] def make_account_request ( account , password ) : [EOL] [docstring] [EOL] request = NewAccountRequest ( user_name = account [ [string] ] , real_name = account [ [string] ] , is_group = True , calnet_uid = None , callink_oid = account [ [string] ] , email = account [ [string] ] , encrypted_password = encrypt_password ( password , RSA . importKey ( CREATE_PUBLIC_KEY ) , ) , handle_warnings = NewAccountRequest . WARNINGS_WARN , ) [EOL] [EOL] print ( ) [EOL] print ( bold ( [string] ) ) [EOL] print ( dedent ( [string] ) . format ( request = request ) ) [EOL] [EOL] return request [EOL] [EOL] [EOL] def create_account ( request ) : [EOL] [docstring] [EOL] conf = ConfigParser ( ) [EOL] conf . read ( [string] ) [EOL] [EOL] celery = Celery ( broker = conf . get ( [string] , [string] ) , backend = conf . get ( [string] , [string] ) , ) [EOL] celery . conf . broker_use_ssl = { [string] : [string] , [string] : ssl . CERT_REQUIRED , } [EOL] celery . conf . redis_backend_use_ssl = { [string] : [string] , [string] : ssl . CERT_REQUIRED , } [EOL] [EOL] [comment] [EOL] celery . conf . task_serializer = [string] [EOL] celery . conf . result_serializer = [string] [EOL] celery . conf . accept_content = { [string] } [EOL] [EOL] tasks = get_tasks ( celery ) [EOL] task = tasks . validate_then_create_account . delay ( request ) [EOL] [EOL] response = wait_for_task ( celery , task ) [EOL] [EOL] return ( tasks , celery , response ) [EOL] [EOL] [EOL] def error_report ( request , new_request , response ) : [EOL] [docstring] [EOL] print ( bold ( red ( [string] ) ) ) [EOL] print ( bold ( [string] ) ) [EOL] [EOL] error_report = dedent ( [string] ) . format ( request = request , new_request = new_request , reponse = response ) [EOL] [EOL] send_problem_report ( error_report ) [EOL] [EOL] [EOL] def main ( ) : [EOL] [docstring] [EOL] def pause_error_msg ( ) : [EOL] input ( [string] ) [EOL] [EOL] parser = ArgumentParser ( description = [string] ) [EOL] parser . add_argument ( [string] , type = int , nargs = [string] , help = [string] ) [EOL] args = parser . parse_args ( ) [EOL] [EOL] group_name , callink_oid , email = get_group_information ( args . oid ) [EOL] [EOL] content = TEMPLATE . format ( group_name = group_name , callink_oid = callink_oid , email = email ) [EOL] [EOL] while True : [EOL] content = edit_file ( content ) [EOL] try : [EOL] account = yaml . safe_load ( content ) [EOL] except yaml . YAMLError as ex : [EOL] print ( [string] ) [EOL] print ( ex ) [EOL] pause_error_msg ( ) [EOL] continue [EOL] [EOL] missing_key = False [EOL] for key in [ [string] , [string] , [string] , [string] ] : [EOL] if account . get ( key ) is None : [EOL] print ( [string] + key ) [EOL] missing_key = True [EOL] if missing_key : [EOL] pause_error_msg ( ) [EOL] continue [EOL] [EOL] if account [ [string] ] . startswith ( [string] ) : [EOL] print ( [string] ) [EOL] pause_error_msg ( ) [EOL] continue [EOL] [EOL] try : [EOL] password = prompt_for_new_password ( validator = lambda pwd : validate_password ( account [ [string] ] , pwd , ) , ) [EOL] except KeyboardInterrupt : [EOL] [comment] [EOL] [comment] [EOL] print ( ) [EOL] pause_error_msg ( ) [EOL] continue [EOL] [EOL] request = make_account_request ( account , password ) [EOL] [EOL] if input ( [string] ) not in ( [string] , [string] ) : [EOL] pause_error_msg ( ) [EOL] continue [EOL] [EOL] tasks , celery , response = create_account ( request ) [EOL] new_request = None [EOL] [EOL] if response . status == NewAccountResponse . REJECTED : [EOL] print ( bold ( red ( [string] ) ) ) [EOL] for error in response . errors : [EOL] print ( red ( [string] . format ( error ) ) ) [EOL] [EOL] pause_error_msg ( ) [EOL] continue [EOL] elif response . status == NewAccountResponse . FLAGGED : [EOL] print ( bold ( yellow ( [string] ) ) ) [EOL] for error in response . errors : [EOL] print ( yellow ( [string] . format ( error ) ) ) [EOL] print ( bold ( [string] [string] ) ) [EOL] choice = input ( [string] ) [EOL] [EOL] if choice in ( [string] , [string] ) : [EOL] new_request = request . _replace ( handle_warnings = NewAccountRequest . WARNINGS_CREATE , ) [EOL] task = tasks . validate_then_create_account . delay ( new_request ) [EOL] response = wait_for_task ( celery , task ) [EOL] else : [EOL] pause_error_msg ( ) [EOL] continue [EOL] [EOL] if response . status == NewAccountResponse . CREATED : [EOL] print ( bold ( green ( [string] ) ) ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] return [EOL] else : [EOL] [comment] [EOL] error_report ( request , new_request , response ) [EOL] pause_error_msg ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.strbuiltins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0