import os [EOL] [EOL] import dotenv [EOL] import newrelic . agent [EOL] from syspath import git_root [EOL] [EOL] dotenv . load_dotenv ( os . path . join ( git_root . path , [string] ) ) [EOL] [EOL] [comment] [EOL] if os . environ [ [string] ] in [ [string] , [string] ] : [EOL] newrelic_ini = os . path . join ( git_root . path , [string] , [string] ) [EOL] newrelic . agent . initialize ( newrelic_ini , os . environ [ [string] ] ) [EOL] [EOL] from app . serve import * [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] import datetime [EOL] import calendar [EOL] import datetime [EOL] import os [EOL] import subprocess [EOL] [EOL] EDITOR = os . environ . get ( [string] , [string] ) [EOL] [EOL] current_time = datetime . datetime . utcnow ( ) [EOL] [EOL] current_directory = os . path . dirname ( os . path . realpath ( __file__ ) ) [EOL] notes_directory = os . path . join ( current_directory , [string] , [string] , [string] ) [EOL] note_filename = current_time . strftime ( [string] ) [EOL] note_path = os . path . join ( notes_directory , note_filename ) [EOL] note_path = os . path . normpath ( note_path ) [EOL] [EOL] timestamp = calendar . timegm ( current_time . utctimetuple ( ) ) [EOL] note = [string] % timestamp [EOL] [EOL] with open ( note_path , [string] ) as note_handle : [EOL] note_handle . write ( note ) [EOL] [EOL] print ( [string] % note_path ) [EOL] subprocess . call ( [ EDITOR , note_path ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $datetime.datetime$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0
[comment] [EOL] from typing import Any , Dict , Callable [EOL] import typing [EOL] import os [EOL] [EOL] from typing import Any , Callable [EOL] [EOL] [EOL] SHOULD_CACHE = os . environ . get ( [string] , [string] ) == [string] [EOL] [EOL] [EOL] def cached_function ( func ) : [EOL] data = { } [EOL] [EOL] def wrapper ( * args ) : [EOL] if not SHOULD_CACHE : [EOL] return func ( * args ) [EOL] cache_key = [string] . join ( [ str ( x ) for x in args ] ) [EOL] if cache_key not in data : [EOL] data [ cache_key ] = func ( * args ) [EOL] return data [ cache_key ] [EOL] [EOL] wrapper . __qualname__ = func . __qualname__ [EOL] return wrapper [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable[...,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import builtins [EOL] import typing [EOL] import flask [EOL] from urllib . parse import urljoin [EOL] [EOL] from feedgen . feed import FeedGenerator [EOL] from flask import ( Blueprint , Response , abort , redirect , render_template , request , url_for , ) [EOL] from varsnap import varsnap [EOL] from typing import Any [EOL] [EOL] from app import note_util [EOL] [EOL] [EOL] handlers = Blueprint ( [string] , __name__ ) [EOL] [EOL] [EOL] @ handlers . route ( [string] ) def index ( ) : [EOL] return render_template ( [string] ) [EOL] [EOL] [EOL] @ handlers . route ( [string] ) def resume ( ) : [EOL] return render_template ( [string] ) [EOL] [EOL] [EOL] @ handlers . route ( [string] ) def projects ( ) : [EOL] return render_template ( [string] ) [EOL] [EOL] [EOL] @ handlers . route ( [string] ) def notes ( ) : [EOL] posts = note_util . get_notes ( ) [EOL] return render_template ( [string] , posts = posts ) [EOL] [EOL] [EOL] @ handlers . route ( [string] ) def note ( slug = [string] ) : [EOL] if slug . lower ( ) != slug : [EOL] return redirect ( url_for ( [string] , slug = slug . lower ( ) ) ) [EOL] post = note_util . get_note_from_slug ( slug ) [EOL] if not post : [EOL] abort ( [number] ) [EOL] return render_template ( [string] , post = post ) [EOL] [EOL] [EOL] @ handlers . route ( [string] ) def contact ( ) : [EOL] return redirect ( url_for ( [string] ) ) [EOL] [EOL] [EOL] @ handlers . route ( [string] ) def about ( ) : [EOL] return render_template ( [string] ) [EOL] [EOL] [EOL] @ handlers . route ( [string] ) def atom_feed ( ) : [EOL] fg = FeedGenerator ( ) [EOL] fg . title ( [string] ) [EOL] fg . id ( request . url ) [EOL] fg . author ( name = [string] , email = [string] ) [EOL] fg . link ( href = request . url , rel = [string] ) [EOL] fg . link ( href = request . url_root , rel = [string] ) [EOL] fg . language ( [string] ) [EOL] fg . updated ( note_util . get_notes ( ) [ [number] ] . time ) [EOL] for post in list ( note_util . get_notes ( ) ) [ : [number] ] : [EOL] url = url_for ( [string] , slug = post . slug ) [EOL] url = urljoin ( request . url_root , url ) [EOL] [EOL] fe = fg . add_entry ( ) [EOL] fe . title ( post . title ) [EOL] fe . id ( url ) [EOL] fe . content ( post . note , type = [string] ) [EOL] fe . author ( name = [string] , email = [string] ) [EOL] fe . source ( url ) [EOL] fe . updated ( post . time ) [EOL] fe . link ( href = url ) [EOL] return Response ( fg . atom_str ( pretty = True ) , mimetype = [string] ) [EOL] [EOL] [EOL] @ varsnap def sitemap_urls ( ) : [EOL] for post in list ( note_util . get_notes ( ) ) : [EOL] yield url_for ( [string] , slug = post . slug , _external = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.blueprints.Blueprint$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import os [EOL] [EOL] from syspath import git_root , get_git_root [comment] [EOL] import dotenv [EOL] [EOL] [EOL] dotenv . load_dotenv ( os . path . join ( get_git_root ( ) , [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import builtins [EOL] import typing [EOL] import random [EOL] import unittest [EOL] [EOL] from app import util [EOL] [EOL] [EOL] def rand ( base ) : [EOL] return base + random . random ( ) [EOL] [EOL] [EOL] @ util . cached_function def cached_rand ( base ) : [EOL] return rand ( base ) [EOL] [EOL] [EOL] class TestCachedFunction ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . orig_cache = util . SHOULD_CACHE [EOL] util . SHOULD_CACHE = True [EOL] [EOL] def tearDown ( self ) : [EOL] util . SHOULD_CACHE = self . orig_cache [EOL] [EOL] def test_noncached_function ( self ) : [EOL] self . assertNotEqual ( rand ( [number] ) , rand ( [number] ) ) [EOL] [EOL] def test_cached_function ( self ) : [EOL] self . assertEqual ( cached_rand ( [number] ) , cached_rand ( [number] ) ) [EOL] [EOL] def test_cached_nonmatching_function ( self ) : [EOL] self . assertNotEqual ( cached_rand ( [number] ) , cached_rand ( [number] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0