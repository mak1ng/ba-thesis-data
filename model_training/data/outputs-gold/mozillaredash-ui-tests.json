[comment] [EOL] [EOL] from typing import List , Callable , Dict , Any [EOL] import models [EOL] import typing [EOL] import requests [EOL] import pages [EOL] import builtins [EOL] [docstring] [EOL] [EOL] import os [EOL] import typing [EOL] [EOL] import pytest [EOL] from requests import Session [EOL] from requests . adapters import HTTPAdapter [EOL] from requests . packages . urllib3 . util . retry import Retry [EOL] [EOL] from pages . login import LoginPage [EOL] from models . user import UserFactory , User [EOL] [EOL] [EOL] @ pytest . fixture ( name = [string] , scope = [string] ) def fixture_user_factory ( ) : [EOL] [docstring] [EOL] return UserFactory ( ) [EOL] [EOL] [EOL] @ pytest . fixture ( autouse = True ) def _verify_url ( request , server_url , user , org ) : [EOL] [docstring] [EOL] if server_url and request . config . option . verify_server_url : [EOL] session = Session ( ) [EOL] retries = Retry ( backoff_factor = [number] , status_forcelist = [ [number] , [number] , [number] , [number] ] ) [EOL] session . mount ( server_url , HTTPAdapter ( max_retries = retries ) ) [EOL] session . get ( server_url , verify = False ) [EOL] [EOL] [EOL] @ pytest . fixture ( name = [string] , scope = [string] ) def fixture_server_url ( request ) : [EOL] [docstring] [EOL] return request . config . getoption ( [string] ) [EOL] [EOL] [EOL] @ pytest . fixture ( name = [string] , scope = [string] ) def fixture_org ( ) : [EOL] [docstring] [EOL] return [string] [EOL] [EOL] [EOL] @ pytest . fixture ( name = [string] ) def fixture_unknown_user ( variables , org ) : [EOL] [docstring] [EOL] return User ( ** variables [ org ] [ [string] ] [ [string] ] ) [EOL] [EOL] [EOL] @ pytest . fixture ( name = [string] , scope = [string] ) def fixture_user ( create_user , variables , org , user_factory , ) : [EOL] [docstring] [EOL] [EOL] user_info = variables [ org ] [ [string] ] [ [string] ] [EOL] [EOL] for user in user_factory : [EOL] if user . email == user_info [ [string] ] : [EOL] return user [EOL] [EOL] return create_user ( ** user_info ) [EOL] [EOL] [EOL] @ pytest . fixture ( name = [string] , scope = [string] ) def fixture_users ( variables , org , root_session , server_url , user_factory , ) : [EOL] [docstring] [EOL] [comment] [EOL] response = root_session . get ( f"{ server_url } [string] " ) [EOL] if response . status_code == [number] : [EOL] raise RuntimeError ( [string] ) [EOL] [EOL] for existing_user in response . json ( ) : [EOL] for user in variables [ org ] [ [string] ] . values ( ) : [EOL] if user [ [string] ] == existing_user [ [string] ] : [EOL] user_factory . create_user ( name = user [ [string] ] , password = user [ [string] ] , email = user [ [string] ] , id = existing_user [ [string] ] , ) [EOL] [EOL] return user_factory . users [EOL] [EOL] [EOL] @ pytest . fixture ( name = [string] , scope = [string] ) def fixture_root_user ( variables , org ) : [EOL] [docstring] [EOL] return User ( ** variables [ org ] [ [string] ] [ [string] ] ) [EOL] [EOL] [EOL] @ pytest . fixture ( name = [string] ) def fixture_login_page ( selenium , server_url , org ) : [EOL] [docstring] [EOL] login_page = LoginPage ( selenium , server_url , org = org ) [EOL] return login_page . open ( ) [EOL] [EOL] [EOL] @ pytest . fixture ( name = [string] , scope = [string] ) def fixture_create_user ( root_session , server_url , user_factory ) : [EOL] [docstring] [EOL] [EOL] def create_user ( name = [string] , email = [string] , password = [string] ) : [EOL] [docstring] [EOL] [comment] [EOL] response = root_session . get ( f"{ server_url } [string] " ) [EOL] for user in response . json ( ) [ [string] ] : [EOL] if user [ [string] ] == email : [EOL] return user_factory . create_user ( name = name , password = password , email = email , id = user [ [string] ] ) [EOL] [EOL] response = root_session . post ( f"{ server_url } [string] " , json = { [string] : name , [string] : email , [string] : True } , ) [EOL] if response . status_code != [number] : [EOL] raise RuntimeError ( f" [string] { response . text }" ) [EOL] [EOL] [comment] [EOL] try : [EOL] invite_link = response . json ( ) [ [string] ] [EOL] response = root_session . post ( f"{ server_url }{ invite_link }" , data = { [string] : password } ) [EOL] except KeyError : [EOL] raise RuntimeError ( f" [string] { response . text }" ) [EOL] except Exception : [EOL] raise RuntimeError ( f" [string] { response . text }" ) [EOL] [EOL] return user_factory . create_user ( name = name , email = email , password = password ) [EOL] [EOL] return create_user [EOL] [EOL] [EOL] @ pytest . fixture ( name = [string] , scope = [string] ) def fixture_root_session ( server_url , root_user ) : [EOL] [docstring] [EOL] url = f"{ server_url } [string] " [EOL] session = Session ( ) [EOL] response = session . post ( url , data = { [string] : root_user . email , [string] : root_user . password } ) [EOL] if response . status_code != [number] : [EOL] raise RuntimeError ( f" [string] { response . text }" ) [EOL] return session [EOL] [EOL] [EOL] @ pytest . fixture ( name = [string] , scope = [string] ) def fixture_create_queries ( root_session , server_url , variables ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] response = root_session . get ( f"{ server_url } [string] " ) [EOL] for item in response . json ( ) [ [string] ] : [EOL] for values in variables [ [string] ] [ [string] ] . values ( ) : [EOL] if item [ [string] ] in values . values ( ) : [EOL] return [EOL] [EOL] for query in variables [ [string] ] [ [string] ] . values ( ) : [EOL] response = root_session . post ( f"{ server_url } [string] " , json = query ) [EOL] if response . status_code != [number] : [EOL] raise RuntimeError ( f" [string] { response . text }" ) [EOL] [EOL] [EOL] def pytest_addoption ( parser ) : [EOL] [docstring] [EOL] group = parser . getgroup ( [string] ) [EOL] [EOL] group . addoption ( [string] , action = [string] , dest = [string] , type = str , default = os . getenv ( [string] , [string] ) , help = [string] , ) [EOL] group . addoption ( [string] , action = [string] , default = not os . getenv ( [string] , [string] ) . lower ( ) == [string] , help = [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $models.user.UserFactory$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $models.user.User$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $models.user.User$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[models.user.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $models.user.User$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Callable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $models.user.User$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.Session$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import models [EOL] import typing [EOL] import pages [EOL] [docstring] [EOL] [EOL] import pytest [EOL] from selenium . common . exceptions import TimeoutException [EOL] [EOL] from models . user import User [EOL] from pages . login import LoginPage [EOL] [EOL] [EOL] @ pytest . mark . nondestructive def test_login_wrong_user_credentials ( login_page , unknown_user ) : [EOL] [docstring] [EOL] assert login_page . title == [string] [EOL] [EOL] with pytest . raises ( TimeoutException ) : [EOL] login_page . login ( email = unknown_user . email , password = unknown_user . password ) [EOL] [EOL] assert login_page . alert == [string] [EOL] assert login_page . title == [string] [EOL] [EOL] [EOL] @ pytest . mark . nondestructive def test_login ( login_page , user ) : [EOL] [docstring] [EOL] assert login_page . title == [string] [EOL] [EOL] home_page = login_page . login ( email = user . email , password = user . password ) [EOL] [EOL] assert home_page . profile_dropdown == user . name [EOL] assert home_page . title == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [docstring] [EOL]	0 0 0 0 0
[comment] [EOL] [EOL] from typing import Callable , Dict , Any [EOL] import models [EOL] import typing [EOL] import pages [EOL] import builtins [EOL] [docstring] [EOL] [EOL] import typing [EOL] [EOL] import pytest [EOL] [EOL] from models . user import User [EOL] from pages . home import HomePage [EOL] from pages . login import LoginPage [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] ) , ( [string] , [string] ) , ] , ) def test_query_by_username ( create_queries , login_page , search_term , description , user , ) : [EOL] [docstring] [EOL] page = login_page . login ( email = user . email , password = user . password ) [EOL] search = page . search ( search_term ) [EOL] query = search . queries [ [number] ] . click ( ) [EOL] assert query . description == description [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] ) , ( [string] , [string] ) , ] , ) def test_query_by_description ( create_queries , login_page , search_term , description , user , ) : [EOL] [docstring] [EOL] page = login_page . login ( email = user . email , password = user . password ) [EOL] search = page . search ( description ) [EOL] query = search . queries [ [number] ] . click ( ) [EOL] assert query . description == description [EOL] [EOL] [EOL] def test_query_by_weird_capitalization ( create_queries , login_page , org , user , variables , ) : [EOL] [docstring] [EOL] term = variables [ org ] [ [string] ] [ [string] ] [EOL] page = login_page . login ( email = user . email , password = user . password ) [EOL] search = page . search ( term [ [string] ] ) [EOL] query = search . queries [ [number] ] . click ( ) [EOL] assert query . description == term [ [string] ] [EOL] [EOL] [EOL] def test_query_by_number ( create_queries , login_page , org , user , variables , ) : [EOL] [docstring] [EOL] term = variables [ org ] [ [string] ] [ [string] ] [EOL] page = login_page . login ( email = user . email , password = user . password ) [EOL] search = page . search ( term [ [string] ] ) [EOL] query = search . queries [ [number] ] . click ( ) [EOL] assert query . description == term [ [string] ] [EOL] [EOL] [EOL] def test_query_by_special_char ( create_queries , login_page , org , user , variables , ) : [EOL] [docstring] [EOL] term = variables [ org ] [ [string] ] [ [string] ] [EOL] page = login_page . login ( email = user . email , password = user . password ) [EOL] search = page . search ( term [ [string] ] ) [EOL] query = search . queries [ [number] ] . click ( ) [EOL] assert query . description == term [ [string] ] [EOL] [EOL] [EOL] def test_search_for_unpublished_query ( create_queries , login_page , server_url , selenium , root_user , ) : [EOL] [docstring] [EOL] page = login_page . login ( email = root_user . email , password = root_user . password ) [EOL] search = page . search ( [string] ) [EOL] query = search . queries [ [number] ] . click ( ) [EOL] query . publish ( ) [EOL] page = HomePage ( selenium , server_url ) . open ( ) [EOL] search = page . search ( [string] ) [EOL] query = search . queries [ [number] ] . click ( ) [EOL] assert query . description == [string] [EOL] [EOL] [EOL] def test_search_for_query_by_id ( create_queries , login_page , server_url , selenium , user , ) : [EOL] [docstring] [EOL] page = login_page . login ( email = user . email , password = user . password ) [EOL] search = page . search ( [string] ) [EOL] query = search . queries [ [number] ] . click ( ) [EOL] assert query . description == [string] [EOL] [EOL] [EOL] def test_search_for_query_only_includes_search_result ( create_queries , login_page , server_url , selenium , user , ) : [EOL] page = login_page . login ( email = user . email , password = user . password ) [EOL] search = page . search ( [string] ) [EOL] assert len ( search . queries ) == [number] [EOL] assert search . queries [ [number] ] . link . text == [string] [EOL] [EOL] [EOL] def test_change_query_title ( create_queries , login_page , server_url , selenium , root_user , variables , ) : [EOL] page = login_page . login ( email = root_user . email , password = root_user . password ) [EOL] query_specs = variables [ [string] ] [ [string] ] [ [string] ] [EOL] query_name = query_specs [ [string] ] [EOL] search = page . search ( query_name ) [EOL] query = search . queries [ [number] ] . click ( ) [EOL] assert query . title == query_name [EOL] query . edit_title ( [string] ) [EOL] assert query . title == f"{ query_name } [string] " [EOL] [EOL] [EOL] def test_change_query_description ( create_queries , login_page , server_url , selenium , root_user , ) : [EOL] page = login_page . login ( email = root_user . email , password = root_user . password ) [EOL] search = page . search ( [string] ) [EOL] query = search . queries [ [number] ] . click ( ) [EOL] query . edit_description ( [string] ) [EOL] assert query . description == [string] [EOL] [EOL] [EOL] def test_edit_query_description ( create_queries , login_page , server_url , selenium , root_user , variables , ) : [EOL] default_description = variables [ [string] ] [ [string] ] [ [string] ] [ [string] ] [EOL] page = login_page . login ( email = root_user . email , password = root_user . password ) [EOL] search = page . search ( [string] ) [EOL] query = search . queries [ [number] ] . click ( ) [EOL] assert query . description == default_description [EOL] query . edit_description ( [string] ) [EOL] assert query . description == f"{ default_description } [string] " [EOL] [EOL] [EOL] def test_edit_query_source ( create_queries , login_page , server_url , selenium , root_user , variables , ) : [EOL] page = login_page . login ( email = root_user . email , password = root_user . password ) [EOL] search = page . search ( [string] ) [EOL] query = search . queries [ [number] ] . click ( ) [EOL] query . edit_source_button . click ( ) [EOL] assert [string] in selenium . current_url [EOL] [EOL] [EOL] def test_query_fork ( create_queries , login_page , server_url , selenium , root_user , variables , ) : [EOL] page = login_page . login ( email = root_user . email , password = root_user . password ) [EOL] search = page . search ( [string] ) [EOL] query = search . queries [ [number] ] . click ( ) [EOL] fork_query = query . click_dropdown_menu ( text = [string] ) [EOL] selenium . switch_to . window ( selenium . window_handles [ - [number] ] ) [EOL] assert [string] in fork_query . title [EOL] [EOL] [EOL] def test_query_archive ( create_queries , login_page , server_url , selenium , root_user , variables , ) : [EOL] page = login_page . login ( email = root_user . email , password = root_user . password ) [EOL] search = page . search ( [string] ) [EOL] query = search . queries [ [number] ] . click ( ) [EOL] query . click_dropdown_menu ( text = [string] ) [EOL] assert query . query_tag == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [docstring] [EOL]	0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Generator , Any [EOL] import models [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] [EOL] import typing [EOL] [EOL] import attr [EOL] [EOL] [EOL] @ attr . s ( auto_attribs = True ) class User : [EOL] [docstring] [EOL] [EOL] name = ... [EOL] password = ... [EOL] email = ... [EOL] _id = [number] [EOL] [EOL] [EOL] @ attr . s ( auto_attribs = True ) class UserFactory : [EOL] [docstring] [EOL] [EOL] users = attr . Factory ( list ) [EOL] [EOL] def __iter__ ( self ) : [EOL] for user in self . users : [EOL] yield user [EOL] [EOL] def __contains__ ( self , user ) : [EOL] return user in self . users [EOL] [EOL] def create_user ( self , ** kwargs ) : [EOL] user = User ( ** kwargs ) [EOL] self . users . append ( user ) [EOL] return user [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[User]$ 0 0 0 0 0 0 0 0 0 0 $typing.Generator[User,None,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $User$ 0 0 0 0 $User$ 0 0 0 0 0 0 0 $User$ 0 0 0 0 $typing.Any$ 0 0 0 $models.user.User$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $models.user.User$ 0 0 0 $models.user.User$ 0
[comment] [EOL] [EOL] [docstring] [EOL]	0 0 0 0 0
[comment] [EOL] [EOL] from typing import Type , Tuple , Any [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] [EOL] import typing [EOL] [EOL] from pypom import Page [EOL] from selenium . webdriver . common . by import By [EOL] from selenium . webdriver . support import expected_conditions as expected [EOL] [EOL] from pages . queries import QueryPage [EOL] [EOL] Locator = typing . Tuple [ typing . Any , str ] [EOL] [EOL] [EOL] class HomePage ( Page ) : [EOL] [docstring] [EOL] [EOL] _profile_username_dropdown_locator = ( By . CSS_SELECTOR , [string] , ) [EOL] _navbar_search_input_locator = ( By . CLASS_NAME , [string] ) [EOL] _search_input_btn_locator = ( By . CLASS_NAME , [string] ) [EOL] [EOL] @ property def loaded ( self ) : [EOL] self . wait . until ( lambda _ : self . is_element_displayed ( * self . _profile_username_dropdown_locator ) ) [EOL] return self [EOL] [EOL] @ property def title ( self ) : [EOL] [docstring] [EOL] return self . wait . until ( lambda s : self . selenium . title ) [EOL] [EOL] @ property def profile_dropdown ( self ) : [EOL] [docstring] [EOL] element = self . wait . until ( expected . visibility_of_element_located ( self . _profile_username_dropdown_locator ) ) [EOL] return element . text [EOL] [EOL] def log_out ( self ) : [EOL] element = self . selenium . find_element ( * self . _profile_username_dropdown_locator ) [EOL] element . click ( ) [EOL] logout = element . find_elements_by_tag_name ( [string] ) [EOL] logout [ - [number] ] . click ( ) [EOL] [EOL] def search ( self , term ) : [EOL] element = self . selenium . find_element ( * self . _navbar_search_input_locator ) [EOL] element . click ( ) [EOL] element . send_keys ( term ) [EOL] button = self . selenium . find_element ( * self . _search_input_btn_locator ) [EOL] button . click ( ) [EOL] [EOL] return QueryPage ( self . selenium ) . wait_for_page_to_load ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Locator$ 0 0 0 0 0 0 0 0 0 0 $Locator$ 0 0 0 0 0 0 0 0 0 $Locator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List , Type , Any [EOL] import typing [EOL] import pages [EOL] import builtins [EOL] [docstring] [EOL] [EOL] import typing [EOL] [EOL] from pypom import Page , Region [EOL] from selenium . webdriver . common . action_chains import ActionChains [EOL] from selenium . webdriver . common . by import By [EOL] from selenium . webdriver . common . keys import Keys [EOL] from selenium . webdriver . support import expected_conditions as expected [EOL] [EOL] [EOL] Locator = typing . Tuple [ typing . Any , str ] [EOL] [EOL] [EOL] class QueryDetailPage ( Page ) : [EOL] [EOL] _query_modal_archive_locator = ( By . CSS_SELECTOR , [string] , ) [EOL] _query_description_locator = ( By . CSS_SELECTOR , [string] , ) [EOL] _query_description_blank_locator = ( By . CSS_SELECTOR , [string] [string] , ) [EOL] _query_description_edit_locator = ( By . CSS_SELECTOR , [string] [string] , ) [EOL] _query_edit_source_locator = ( By . CSS_SELECTOR , [string] , ) [EOL] _query_dropdown_menu_locator = ( By . CSS_SELECTOR , [string] , ) [EOL] _query_dropdown_menu_item_locator = ( By . CSS_SELECTOR , [string] ) [EOL] _query_name_locator = ( By . CSS_SELECTOR , [string] , ) [EOL] _query_name_edit_locator = ( By . CSS_SELECTOR , [string] , ) [EOL] _query_publish_button_locator = ( By . CSS_SELECTOR , [string] ) [EOL] _query_tag_locator = ( By . CSS_SELECTOR , [string] , ) [EOL] [EOL] @ property def description ( self ) : [EOL] self . wait . until ( lambda _ : self . is_element_displayed ( * self . _query_description_locator ) ) [EOL] return self . find_element ( * self . _query_description_locator ) . text [EOL] [EOL] def click_dropdown_menu ( self , text = None ) : [EOL] menu = self . find_element ( * self . _query_dropdown_menu_locator ) [EOL] items = menu . find_elements ( * self . _query_dropdown_menu_item_locator ) [EOL] menu . click ( ) [EOL] for item in ( i for i in items if i . text in text ) : [EOL] if text == [string] : [EOL] item . click ( ) [EOL] page = QueryDetailPage ( self . selenium , self . base_url ) [EOL] return page . wait_for_page_to_load ( ) [EOL] if text == [string] : [EOL] item . click ( ) [EOL] self . find_element ( * self . _query_modal_archive_locator ) . click ( ) [EOL] return [EOL] raise ValueError ( f"{ item } [string] " ) [EOL] [EOL] def edit_description ( self , description ) : [EOL] element = self . find_element ( * self . _query_description_blank_locator ) [EOL] element . click ( ) [EOL] self . wait . until ( expected . element_to_be_clickable ( self . _query_description_edit_locator ) ) [EOL] edit_box = self . find_element ( * self . _query_description_edit_locator ) [EOL] edit_box . send_keys ( f" [string] { description }" ) [EOL] edit_box . send_keys ( Keys . ENTER ) [EOL] [EOL] @ property def edit_source_button ( self ) : [EOL] return self . find_element ( * self . _query_edit_source_locator ) [EOL] [EOL] def edit_title ( self , title ) : [EOL] element = self . find_element ( * self . _query_name_locator ) [EOL] action = ActionChains ( self . selenium ) [EOL] action . move_to_element ( element ) [EOL] action . pause ( [number] ) [EOL] action . click ( ) [EOL] action . send_keys ( f" [string] { title }" ) [EOL] action . send_keys ( Keys . ENTER ) [EOL] action . perform ( ) [EOL] [EOL] def publish ( self ) : [EOL] self . find_element ( * self . _query_publish_button_locator ) . click ( ) [EOL] [EOL] @ property def query_tag ( self ) : [EOL] return self . find_element ( * self . _query_tag_locator ) . text [EOL] [EOL] @ property def title ( self ) : [EOL] self . wait . until ( lambda _ : self . find_element ( * self . _query_name_locator ) . is_displayed ( ) ) [EOL] return self . find_element ( * self . _query_name_locator ) . text [EOL] [EOL] [EOL] class QueryRow ( Region ) : [EOL] [EOL] _query_link_locator = ( By . CSS_SELECTOR , [string] ) [EOL] [EOL] @ property def link ( self ) : [EOL] return self . selenium . find_element ( * self . _query_link_locator ) [EOL] [EOL] def click ( self ) : [EOL] self . link . click ( ) [EOL] return QueryDetailPage ( self . selenium ) [EOL] [EOL] [EOL] class QueryPage ( Page ) : [EOL] [EOL] URL_TEMPLATE = [string] [EOL] [EOL] _query_table_locator = ( By . CSS_SELECTOR , [string] ) [EOL] _table_row_locator = ( By . TAG_NAME , [string] ) [EOL] [EOL] def wait_for_page_to_load ( self ) : [EOL] self . wait . until ( lambda _ : self . is_element_displayed ( * self . _query_table_locator ) ) [EOL] return self [EOL] [EOL] @ property def queries ( self ) : [EOL] table = self . selenium . find_element ( * self . _query_table_locator ) [EOL] items = table . find_elements ( * self . _table_row_locator ) [EOL] return [ QueryRow ( self , item ) for item in items ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Locator$ 0 0 0 0 0 0 0 0 0 0 $Locator$ 0 0 0 0 0 0 0 0 0 0 $Locator$ 0 0 0 0 0 0 0 0 0 0 0 $Locator$ 0 0 0 0 0 0 0 0 0 0 0 $Locator$ 0 0 0 0 0 0 0 0 0 0 $Locator$ 0 0 0 0 0 0 0 0 0 0 $Locator$ 0 0 0 0 0 0 0 0 0 $Locator$ 0 0 0 0 0 0 0 0 0 0 $Locator$ 0 0 0 0 0 0 0 0 0 0 $Locator$ 0 0 0 0 0 0 0 0 0 $Locator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pages.queries.QueryDetailPage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $pages.queries.QueryDetailPage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $Locator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $QueryDetailPage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $Locator$ 0 0 0 0 0 0 0 0 0 $Locator$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[QueryRow]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0
[comment] [EOL] [EOL] from typing import Tuple , Type , Any [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] [EOL] import typing [EOL] [EOL] from pypom import Page [EOL] from selenium . webdriver . common . by import By [EOL] from selenium . webdriver . support import expected_conditions as expected [EOL] [EOL] from pages . home import HomePage [EOL] [EOL] Locator = typing . Tuple [ typing . Any , str ] [EOL] [EOL] [EOL] class LoginPage ( Page ) : [EOL] [docstring] [EOL] [EOL] URL_TEMPLATE = [string] [EOL] [EOL] _alert_locator = ( By . CSS_SELECTOR , [string] ) [EOL] _input_email_locator = ( By . ID , [string] ) [EOL] _input_password_locator = ( By . ID , [string] ) [EOL] _login_buttton_locator = ( By . CSS_SELECTOR , [string] ) [EOL] [EOL] @ property def title ( self ) : [EOL] [docstring] [EOL] return self . wait . until ( lambda s : self . selenium . title ) [EOL] [EOL] @ property def alert ( self ) : [EOL] [docstring] [EOL] element = self . wait . until ( expected . visibility_of_element_located ( self . _alert_locator ) ) [EOL] return element . text [EOL] [EOL] def enter_email ( self , email ) : [EOL] [docstring] [EOL] input_email = self . find_element ( * self . _input_email_locator ) [EOL] input_email . send_keys ( email ) [EOL] [EOL] def enter_password ( self , password ) : [EOL] [docstring] [EOL] input_password = self . find_element ( * self . _input_password_locator ) [EOL] input_password . send_keys ( password ) [EOL] [EOL] def click_login ( self ) : [EOL] [docstring] [EOL] btn = self . find_element ( * self . _login_buttton_locator ) [EOL] btn . click ( ) [EOL] [EOL] def login ( self , email = [string] , password = [string] ) : [EOL] [docstring] [EOL] self . enter_email ( email ) [EOL] self . enter_password ( password ) [EOL] self . click_login ( ) [EOL] return HomePage ( self . selenium ) . wait_for_page_to_load ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $Locator$ 0 0 0 0 0 0 0 0 0 $Locator$ 0 0 0 0 0 0 0 0 0 $Locator$ 0 0 0 0 0 0 0 0 0 $Locator$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0