	0
from celery import shared_task [EOL] from templated_mail . mail import BaseEmailMessage [EOL] [EOL] [EOL] @ shared_task def send_mail ( template_name , recipients_email_list , context_dict = None ) : [EOL] BaseEmailMessage ( template_name = template_name , context = context_dict or { } , ) . send ( to = recipients_email_list , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class GifsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Type [EOL] import backend [EOL] import typing [EOL] from django . conf import settings [EOL] from rest_framework . pagination import CursorPagination [EOL] [EOL] [EOL] class GIFEntryCursorPagination ( CursorPagination ) : [EOL] page_size = settings . GIFS_PAGE_SIZE [EOL] ordering = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.gifz_api.gifs.paginations.GIFEntryCursorPagination]$ 0 0 0 0 0 $builtins.str$ 0 0 0
from django . contrib import admin [EOL] [EOL] from . models import GIFEntry [EOL] [EOL] [EOL] @ admin . register ( GIFEntry ) class GIFEntryAdmin ( admin . ModelAdmin ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . core . validators import FileExtensionValidator [EOL] [EOL] [EOL] validate_gif_file_extension = FileExtensionValidator ( allowed_extensions = [ [string] ] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0
default_app_config = [string] [EOL]	$builtins.str$ 0 0 0
	0
	0
	0
from typing import Any [EOL] import typing [EOL] import glob [EOL] import os [EOL] import secrets [EOL] [EOL] from django . contrib . auth import get_user_model [EOL] from django . core . files . uploadedfile import SimpleUploadedFile [EOL] from django . core . management . base import ( BaseCommand , CommandError , ) [EOL] [EOL] from gifz_api . gifs . models import GIFEntry [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , nargs = [string] , type = str ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] if GIFEntry . objects . count ( ) > [number] : [EOL] self . stdout . write ( [string] ) [EOL] return [EOL] [EOL] dir_path = options [ [string] ] [ [number] ] [EOL] [EOL] if os . path . exists ( dir_path ) : [EOL] for filename in glob . glob ( os . path . join ( dir_path , [string] ) ) : [EOL] with open ( filename , [string] ) as f : [EOL] f . seek ( [number] ) [EOL] inmemory_file = SimpleUploadedFile ( filename , f . read ( ) ) [EOL] gif_entry = GIFEntry ( title = secrets . token_hex ( nbytes = [number] ) , author = get_user_model ( ) . objects . get ( username = [string] ) , gif_file = inmemory_file , ) [EOL] gif_entry . save ( ) [EOL] gif_entry . tags . add ( [string] , [string] , [string] ) [EOL] inmemory_file . close ( ) [EOL] self . stdout . write ( [string] ) [EOL] else : [EOL] raise CommandError ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from social_core . backends . google_openidconnect import GoogleOpenIdConnect as GoogleOpenIdConnectOriginal [EOL] [EOL] [EOL] class GoogleOpenIdConnect ( GoogleOpenIdConnectOriginal ) : [EOL] STATE_PARAMETER = False [EOL] [EOL] def get_and_store_nonce ( self , url , state ) : [EOL] state = state or [string] [EOL] super ( ) . get_and_store_nonce ( url , state ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0
from typing import Any , List [EOL] import typing [EOL] from django . conf . urls import ( include , url , ) [EOL] from rest_framework import routers [EOL] [EOL] [EOL] app_name = [string] [EOL] [EOL] router = routers . DefaultRouter ( ) [EOL] [EOL] [EOL] urlpatterns = [ url ( [string] , include ( router . urls ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
	0
from django . contrib import admin [EOL] [EOL] from . models import User [EOL] [EOL] [EOL] @ admin . register ( User ) class UserAdmin ( admin . ModelAdmin ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
default_app_config = [string] [EOL]	$builtins.str$ 0 0 0
from typing import Type [EOL] import backend [EOL] import typing [EOL] from django . contrib . auth . models import AbstractUser [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] [EOL] [EOL] class User ( AbstractUser ) : [EOL] class Meta : [EOL] verbose_name = _ ( [string] ) [EOL] verbose_name_plural = _ ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.gifz_api.accounts.models.User.Meta]$ 0 0 0 0 0 0 $typing.Type[backend.gifz_api.accounts.models.User.Meta]$ 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class AccountsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
	0
import pytest [EOL] from django . contrib . auth import get_user_model [EOL] [EOL] [EOL] @ pytest . fixture ( ) def simple_user ( ) : [EOL] return get_user_model ( ) . objects . create_user ( username = [string] , email = [string] , first_name = [string] , last_name = [string] , is_active = True , ) [EOL] [EOL] [EOL] @ pytest . fixture ( ) def admin_user ( ) : [EOL] return get_user_model ( ) . objects . create_superuser ( username = [string] , email = [string] , first_name = [string] , last_name = [string] , is_active = True , password = [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] from django . core . exceptions import ValidationError [EOL] [EOL] [EOL] def get_error_dict_from_model_validation ( obj ) : [EOL] with pytest . raises ( ValidationError ) as excinfo : [EOL] obj . full_clean ( ) [EOL] obj . save ( ) [EOL] [EOL] error_dict = excinfo . value . __dict__ [ [string] ] [EOL] [EOL] return error_dict [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import os [EOL] [EOL] import pytest [EOL] [EOL] from gifz_api . gifs . models import GIFEntry [EOL] [EOL] from . . utils import get_error_dict_from_model_validation [EOL] from . conftest import ( GIFS_DIR , UUID4Monkey , ) [EOL] [EOL] [EOL] class GIFEntryTest : [EOL] [EOL] @ pytest . mark . django_db def test_has_proper_fields ( self , gif_file , simple_user ) : [EOL] gif_entry = GIFEntry ( ) [EOL] gif_entry . title = [string] [EOL] gif_entry . gif_file = gif_file [EOL] gif_entry . author = simple_user [EOL] gif_entry . full_clean ( ) [EOL] gif_entry . save ( ) [EOL] gif_entry . tags . add ( [string] , [string] ) [EOL] [EOL] assert GIFEntry . objects . count ( ) == [number] [EOL] assert GIFEntry . objects . get ( pk = [number] ) == gif_entry [EOL] [EOL] @ pytest . mark . django_db def test_if_file_is_uploaded_properly ( self , gif_entry ) : [EOL] file_path = os . path . join ( GIFS_DIR , [string] . format ( UUID4Monkey . hex ) ) [EOL] assert os . path . exists ( file_path ) [EOL] [EOL] with open ( file_path , [string] ) as f : [EOL] gif_entry . gif_file . seek ( [number] ) [EOL] assert gif_entry . gif_file . read ( ) == f . read ( ) [EOL] [EOL] assert gif_entry . gif_file . size == [number] [EOL] [EOL] @ pytest . mark . django_db def test_gif_file_is_required ( self , simple_user ) : [EOL] gif_entry = GIFEntry ( title = [string] , author = simple_user , ) [EOL] [EOL] error_dict = get_error_dict_from_model_validation ( gif_entry , ) [EOL] assert [string] in str ( error_dict [ [string] ] ) [EOL] [EOL] @ pytest . mark . django_db def test_if_jpg_cant_be_passed ( self , jpg_file , simple_user ) : [EOL] gif_entry = GIFEntry ( title = [string] , gif_file = jpg_file , author = simple_user , ) [EOL] [EOL] error_dict = get_error_dict_from_model_validation ( gif_entry , ) [EOL] assert ( [string] ) in str ( error_dict [ [string] ] ) [EOL] [EOL] @ pytest . mark . django_db def test_if_txt_cant_be_passed ( self , txt_file , simple_user ) : [EOL] gif_entry = GIFEntry ( title = [string] , gif_file = txt_file , author = simple_user , ) [EOL] [EOL] error_dict = get_error_dict_from_model_validation ( gif_entry , ) [EOL] assert ( [string] ) in str ( error_dict [ [string] ] ) [EOL] [EOL] @ pytest . mark . django_db def test_str_of_object ( self , gif_entry ) : [EOL] assert str ( gif_entry ) == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] from rest_framework . test import APIClient [EOL] [EOL] [EOL] class GIFEntryViewSetTest : [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def url ( self ) : [EOL] return [string] [EOL] [EOL] @ pytest . mark . django_db def test_list ( self , url , simple_user , list_of_3_gifs ) : [EOL] client = APIClient ( ) [EOL] client . force_authenticate ( user = simple_user ) [EOL] [EOL] response = client . get ( url ) [EOL] assert response . status_code == [number] [EOL] assert len ( response . data [ [string] ] ) == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] from . celery import app as celery_app [EOL] [EOL] __all__ = [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] [EOL] os . environ . setdefault ( [string] , [string] , ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import List , Any , Dict [EOL] import typing [EOL] from . settings import * [comment] [EOL] from . settings import ( INSTALLED_APPS , root , ) [EOL] [EOL] [EOL] INSTALLED_APPS = [ app for app in INSTALLED_APPS if app != [string] ] [EOL] [EOL] CACHALOT_ENABLED = False [EOL] [EOL] DATABASES = { [string] : { [string] : [string] , [string] : [string] , } , } [EOL] [EOL] MEDIA_ROOT = ( root - [number] ) ( [string] ) [EOL] [EOL] EMAIL_BACKEND = [string] [EOL] [EOL] CELERY_TASK_ALWAYS_EAGER = True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0
from typing import Any [EOL] import typing [EOL] import os [EOL] [EOL] from celery import Celery [EOL] [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] app = Celery ( [string] ) [EOL] app . config_from_object ( [string] , namespace = [string] ) [EOL] app . autodiscover_tasks ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0