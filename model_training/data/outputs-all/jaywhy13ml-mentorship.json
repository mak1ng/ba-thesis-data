from typing import Optional , Any , Dict , Callable , List [EOL] import mentorship [EOL] import typing [EOL] import builtins [EOL] import sys [EOL] from typing import Dict , Callable [EOL] from mentorship . gmail . api import GmailApi [EOL] from mentorship . email_classification . pipeline import get_pipeline_steps [EOL] from mentorship . engine import osemn_pipeline [EOL] [EOL] from pandas import DataFrame [EOL] [EOL] api = GmailApi ( ) [EOL] api . initialize ( ) [EOL] [EOL] [EOL] def download_emails ( ) : [EOL] [EOL] emails = api . get_messages ( ) [EOL] from pprint import pprint [EOL] [EOL] pprint ( emails ) [EOL] [EOL] [EOL] def download_labels ( ) : [EOL] labels = api . get_labels ( ) [EOL] from pprint import pprint [EOL] [EOL] pprint ( labels ) [EOL] [EOL] [EOL] def run_pipeline ( ) : [EOL] obtain_step , scrub_step , explore_step , model_step , interpret_step = ( get_pipeline_steps ( ) ) [EOL] osemn_pipeline ( input_data = DataFrame ( ) , obtain_step = obtain_step , scrub_step = scrub_step , explore_step = explore_step , model_step = model_step , interpret_step = interpret_step , ) [EOL] [EOL] [EOL] TASK_REGISTRY = { [string] : download_emails , [string] : download_labels , [string] : run_pipeline , } [EOL] [EOL] if __name__ == [string] : [EOL] [EOL] task_name = sys . argv [ [number] ] [EOL] task_function = TASK_REGISTRY . get ( task_name ) [EOL] if task_function : [EOL] task_function ( ) [EOL] else : [EOL] raise Exception ( f" [string] { task_name }" ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $mentorship.gmail.api.GmailApi$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $mentorship.gmail.api.GmailApi$ 0 0 0 0 0 $mentorship.gmail.api.GmailApi$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $mentorship.gmail.api.GmailApi$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $mentorship.gmail.api.GmailApi$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Callable]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Optional[typing.Callable[...,typing.Any]]$ 0 $typing.Dict[builtins.str,typing.Callable]$ 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[typing.Callable[...,typing.Any]]$ 0 0 $typing.Optional[typing.Callable[...,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from dotenv import load_dotenv [EOL] [EOL] load_dotenv ( ) [EOL]	0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import List , Any , Callable , Type [EOL] import typing [EOL] import pandas [EOL] import os [EOL] from typing import Callable , List [EOL] [EOL] from pandas import DataFrame [EOL] from termcolor import cprint [EOL] [EOL] Step = Callable [ [ DataFrame ] , DataFrame ] [EOL] [EOL] DEBUG_PIPELINE = bool ( int ( os . getenv ( [string] , [string] ) ) ) [EOL] [EOL] [EOL] def run_pipeline ( input_data , steps ) : [EOL] output = input_data [EOL] for index , step in enumerate ( steps ) : [EOL] cprint ( f" [string] { index + [number] } [string] { step . __name__ } [string] " , [string] ) [EOL] output = step ( output ) [EOL] if DEBUG_PIPELINE : [EOL] import pdb [EOL] [EOL] pdb . set_trace ( ) [EOL] print ( [string] ) [EOL] return output [EOL] [EOL] [EOL] def osemn_pipeline ( input_data , obtain_step , scrub_step , explore_step , model_step , interpret_step , ) : [EOL] return run_pipeline ( input_data , steps = [ obtain_step , scrub_step , explore_step , model_step , interpret_step ] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pandas.DataFrame$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pandas.DataFrame$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , List [EOL] import typing [EOL] def extract_subject ( row ) : [EOL] headers = row . get ( [string] ) [EOL] matches = [ header . get ( [string] ) for header in headers if header . get ( [string] ) == [string] ] [EOL] if matches : [EOL] return matches [ [number] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Dict [EOL] import typing [EOL] import pandas [EOL] from pandas import DataFrame [EOL] [EOL] from mentorship . engine import run_pipeline [EOL] [EOL] [EOL] def multiply_by_two ( dataframe ) : [EOL] return dataframe * [number] [EOL] [EOL] [EOL] def multiply_by_three ( dataframe ) : [EOL] return dataframe * [number] [EOL] [EOL] [EOL] def test_pipeline ( ) : [EOL] data = { [string] : [ [number] , [number] , [number] ] } [EOL] df = DataFrame ( data = data ) [EOL] result = run_pipeline ( df , steps = [ multiply_by_two , multiply_by_three ] ) [EOL] assert all ( result == df * [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pandas.DataFrame$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $pandas.DataFrame$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Optional , Any , Union , Dict , Literal , List [EOL] import typing_extensions [EOL] import mentorship [EOL] import datetime [EOL] import typing [EOL] import builtins [EOL] from __future__ import print_function [EOL] [EOL] import os . path [EOL] import pickle [EOL] from datetime import date [EOL] from os . path import abspath , dirname [EOL] from typing import Optional , List , Dict [EOL] [EOL] from google . auth . transport . requests import Request [EOL] from google_auth_oauthlib . flow import InstalledAppFlow [EOL] from googleapiclient . discovery import build [EOL] from diskcache import Cache [EOL] [EOL] from mentorship . gmail . data import Message , MessageId [EOL] from mentorship . gmail . factory import MessageFactory , MessageIdFactory [EOL] [EOL] [comment] [EOL] SCOPES = [ [string] ] [EOL] [EOL] CREDENTIALS_FILENAME = os . path . join ( dirname ( dirname ( abspath ( __file__ ) ) ) , [string] ) [EOL] SECRET_FILENAME = os . path . join ( dirname ( dirname ( abspath ( __file__ ) ) ) , [string] ) [EOL] CACHE_LOCATION = os . getenv ( [string] , [string] ) [EOL] [EOL] cache = Cache ( CACHE_LOCATION ) [EOL] [EOL] [EOL] class GmailApi : [EOL] def initialize ( self ) : [EOL] [docstring] [EOL] if not hasattr ( self , [string] ) : [EOL] self . authenticate ( ) [EOL] self . _service = build ( [string] , [string] , credentials = self . credentials ) [EOL] [EOL] def get_labels ( self ) : [EOL] results = self . get_service ( ) . users ( ) . labels ( ) . list ( userId = [string] ) . execute ( ) [EOL] return results [EOL] [EOL] def get_messages_for_page ( self , after = None , before = None , includeSpamTrash = True , limit = [number] , page_token = None , ) : [EOL] query = self . build_query ( after = after , before = before ) [EOL] results = ( self . get_service ( ) . users ( ) . messages ( ) . list ( userId = [string] , q = query , maxResults = limit , includeSpamTrash = includeSpamTrash , pageToken = page_token , ) . execute ( ) ) [EOL] return results [EOL] [EOL] def get_messages ( self , after = None , before = None , includeSpamTrash = True , limit = [number] , ) : [EOL] [docstring] [EOL] cache_key = f" [string] { after } [string] { before } [string] { limit } [string] { includeSpamTrash }" [EOL] if cache_key in cache : [EOL] return cache [ cache_key ] [EOL] messages = [ ] [EOL] next_page_token = None [EOL] while True : [EOL] result = self . get_messages_for_page ( after = after , before = before , includeSpamTrash = includeSpamTrash , limit = limit , page_token = next_page_token , ) [EOL] messages_on_page = result . get ( [string] ) [EOL] messages . extend ( messages_on_page ) [EOL] next_page_token = result . get ( [string] ) [EOL] if not next_page_token or len ( messages ) > limit : [EOL] [comment] [EOL] [comment] [EOL] break [EOL] [comment] [EOL] messages = messages [ : limit ] [EOL] message_ids = [ MessageIdFactory . build ( message ) for message in messages ] [EOL] cache . set ( cache_key , message_ids , expire = None ) [EOL] return message_ids [EOL] [EOL] def get_message ( self , id , user_id = [string] ) : [EOL] [docstring] [EOL] cache_key = f" [string] { id }" [EOL] if cache_key in cache : [EOL] return cache [ cache_key ] [EOL] result = ( self . get_service ( ) . users ( ) . messages ( ) . get ( userId = user_id , id = id ) . execute ( ) ) [EOL] message = MessageFactory . build ( result ) [EOL] cache . set ( cache_key , message , expire = None ) [EOL] return message [EOL] [EOL] def build_query ( self , after = None , before = None ) : [EOL] queries = [ ] [EOL] if after : [EOL] queries . append ( f" [string] { as_date ( after ) }" ) [EOL] if before : [EOL] queries . append ( f" [string] { as_date ( before ) }" ) [EOL] return [string] . join ( queries ) [EOL] [EOL] def get_service ( self ) : [EOL] if not hasattr ( self , [string] ) : [EOL] raise Exception ( [string] ) [EOL] return self . _service [EOL] [EOL] def authenticate ( self ) : [EOL] self . credentials = self . get_or_create_credentials ( ) [EOL] [EOL] [comment] [EOL] if self . credentials . expired and self . credentials . refresh_token : [EOL] self . credentials . refresh ( Request ( ) ) [EOL] [EOL] def get_or_create_credentials ( self ) : [EOL] if os . path . exists ( CREDENTIALS_FILENAME ) : [EOL] with open ( CREDENTIALS_FILENAME , [string] ) as credentials_file : [EOL] credentials = pickle . load ( credentials_file ) [EOL] if credentials . valid : [EOL] return credentials [EOL] [EOL] [comment] [EOL] flow = InstalledAppFlow . from_client_secrets_file ( SECRET_FILENAME , SCOPES ) [EOL] credentials = flow . run_local_server ( port = [number] ) [EOL] [comment] [EOL] with open ( CREDENTIALS_FILENAME , [string] ) as credentials_file : [EOL] pickle . dump ( credentials , credentials_file ) [EOL] [EOL] assert credentials [EOL] return credentials [EOL] [EOL] [EOL] def as_date ( date ) : [EOL] return date . strftime ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Optional[datetime.date]$ 0 0 0 $typing.Optional[datetime.date]$ 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Optional[datetime.date]$ 0 $typing.Optional[datetime.date]$ 0 $typing.Optional[datetime.date]$ 0 $typing.Optional[datetime.date]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[builtins.bool]$ 0 $typing.Optional[builtins.bool]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[mentorship.gmail.data.MessageId]$ 0 0 0 $typing.Optional[datetime.date]$ 0 0 0 $typing.Optional[datetime.date]$ 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Optional[datetime.date]$ 0 0 0 $typing.Optional[datetime.date]$ 0 0 0 $builtins.int$ 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Optional[datetime.date]$ 0 $typing.Optional[datetime.date]$ 0 $typing.Optional[datetime.date]$ 0 $typing.Optional[datetime.date]$ 0 $typing.Optional[builtins.bool]$ 0 $typing.Optional[builtins.bool]$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 $builtins.int$ 0 0 $typing.List[mentorship.gmail.data.MessageId]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 $typing.List[mentorship.gmail.data.MessageId]$ 0 0 0 0 0 0 0 $typing.List[mentorship.gmail.data.MessageId]$ 0 0 0 $mentorship.gmail.data.Message$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[datetime.date]$ 0 0 0 $typing.Optional[datetime.date]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Optional[datetime.date]$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Optional[datetime.date]$ 0 0 0 0 0 $typing.Optional[datetime.date]$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Optional[datetime.date]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from dataclasses import dataclass [EOL] from dataclasses_json import dataclass_json [EOL] from typing import List [EOL] [EOL] [EOL] @ dataclass_json @ dataclass class Label : [EOL] [EOL] id = ... [EOL] [EOL] [EOL] @ dataclass_json @ dataclass class Header : [EOL] [EOL] name = ... [EOL] value = ... [EOL] [EOL] [EOL] @ dataclass_json @ dataclass class MessageId : [EOL] [EOL] id = ... [EOL] thread_id = ... [EOL] [EOL] [EOL] @ dataclass_json @ dataclass class MessagePart : [EOL] [EOL] id = ... [EOL] mime_type = ... [EOL] filename = ... [EOL] headers = ... [EOL] body = ... [EOL] [EOL] [EOL] @ dataclass_json @ dataclass class Message : [EOL] [EOL] id = ... [EOL] date = ... [EOL] snippet = ... [EOL] labels = ... [EOL] headers = ... [EOL] mime_type = ... [EOL] parts = ... [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.List[Header]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $MessageId$ 0 0 0 $builtins.float$ 0 0 0 $builtins.str$ 0 0 0 $typing.List[Label]$ 0 0 0 $typing.List[Header]$ 0 0 0 $builtins.str$ 0 0 0 $typing.List[MessagePart]$ 0 0 0 0
from typing import List , Any , Dict [EOL] import mentorship [EOL] import typing [EOL] import builtins [EOL] from typing import Dict , Any [EOL] from base64 import urlsafe_b64decode [EOL] [EOL] from mentorship . gmail . data import Message , MessageId , MessagePart , Header , Label [EOL] [EOL] [EOL] class MessageHeaderFactory : [EOL] @ classmethod def build ( self , header ) : [EOL] return Header ( name = header [ [string] ] , value = header [ [string] ] ) [EOL] [EOL] [EOL] class MessagePartFactory : [EOL] @ classmethod def build ( cls , part ) : [EOL] body = part [ [string] ] . get ( [string] , [string] ) [EOL] return MessagePart ( id = part [ [string] ] , mime_type = part [ [string] ] , filename = part [ [string] ] , headers = [ MessageHeaderFactory . build ( header ) for header in part . get ( [string] , [ ] ) ] , body = str ( urlsafe_b64decode ( body ) , [string] ) , ) [EOL] [EOL] [EOL] class MessageFactory : [EOL] @ classmethod def build ( cls , message ) : [EOL] payload = message [ [string] ] [EOL] message_id = MessageIdFactory . build ( message ) [EOL] labels = [ Label ( id = label_id ) for label_id in message . get ( [string] , [ ] ) ] [EOL] headers = [ MessageHeaderFactory . build ( header ) for header in payload . get ( [string] , [ ] ) ] [EOL] message_parts = [ MessagePartFactory . build ( part ) for part in payload . get ( [string] , [ ] ) ] [EOL] [EOL] return Message ( id = message_id , date = message [ [string] ] , snippet = message [ [string] ] , labels = labels , headers = headers , mime_type = payload [ [string] ] , parts = message_parts , ) [EOL] [EOL] [EOL] class MessageIdFactory : [EOL] @ classmethod def build ( cls , message_id ) : [EOL] return MessageId ( id = message_id [ [string] ] , thread_id = message_id [ [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $mentorship.gmail.data.MessageId$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 $typing.List[mentorship.gmail.data.Label]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[mentorship.gmail.data.Header]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[mentorship.gmail.data.MessagePart]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $mentorship.gmail.data.MessageId$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.List[mentorship.gmail.data.Label]$ 0 $typing.List[mentorship.gmail.data.Label]$ 0 $typing.List[mentorship.gmail.data.Header]$ 0 $typing.List[mentorship.gmail.data.Header]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[mentorship.gmail.data.MessagePart]$ 0 0 0 0 0 0 0 0 0 0 0 0 $mentorship.gmail.data.MessageId$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0
	0