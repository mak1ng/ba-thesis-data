[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Type , Dict , Any [EOL] import typing [EOL] import caladrius [EOL] import datetime [EOL] import argparse [EOL] import logging [EOL] import builtins [EOL] [docstring] [EOL] [EOL] import logging [EOL] import argparse [EOL] import sys [EOL] [EOL] import datetime as dt [EOL] [EOL] from typing import Dict , cast , Any , Type [EOL] [EOL] from caladrius import logs [EOL] from caladrius import loader [EOL] from caladrius . config . keys import ConfKeys [EOL] from caladrius . graph . builder . heron import builder [EOL] from caladrius . graph . gremlin . client import GremlinClient [EOL] from caladrius . common . heron import tracker [EOL] from caladrius . metrics . heron . client import HeronMetricsClient [EOL] from caladrius . common . timestamp import get_window_dt_from_now [EOL] [EOL] LOG = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] def create_parser ( ) : [EOL] [docstring] [EOL] [EOL] parser = argparse . ArgumentParser ( description = ( [string] [string] ) ) [EOL] parser . add_argument ( [string] , [string] , required = True , help = [string] [string] [string] ) [EOL] parser . add_argument ( [string] , [string] , required = True , help = [string] ) [EOL] parser . add_argument ( [string] , [string] , required = True , help = [string] ) [EOL] parser . add_argument ( [string] , [string] , required = True , help = ( [string] [string] ) ) [EOL] parser . add_argument ( [string] , [string] , required = True , help = ( [string] [string] ) ) [EOL] parser . add_argument ( [string] , [string] , required = False , action = [string] , help = ( [string] [string] [string] [string] ) ) [EOL] parser . add_argument ( [string] , [string] , type = int , required = False , help = ( [string] [string] ) ) [EOL] parser . add_argument ( [string] , required = False , action = [string] , help = ( [string] [string] ) ) [EOL] parser . add_argument ( [string] , [string] , required = False , action = [string] , help = ( [string] [string] ) ) [EOL] return parser [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] [EOL] ARGS = create_parser ( ) . parse_args ( ) [EOL] [EOL] if not ARGS . quiet : [EOL] logs . setup ( debug = ARGS . debug ) [EOL] [EOL] if ARGS . populate and not ARGS . duration : [EOL] MSG = ( [string] [string] [string] ) [EOL] [EOL] if ARGS . quiet : [EOL] print ( MSG ) [EOL] else : [EOL] LOG . error ( MSG ) [EOL] [EOL] sys . exit ( [number] ) [EOL] [EOL] try : [EOL] CONFIG = loader . load_config ( ARGS . config ) [EOL] except FileNotFoundError : [EOL] MSG2 = f" [string] { ARGS . config } [string] " [EOL] [EOL] if ARGS . quiet : [EOL] print ( MSG2 ) [EOL] else : [EOL] LOG . error ( MSG2 ) [EOL] [EOL] sys . exit ( [number] ) [EOL] [EOL] TIMER_START = dt . datetime . now ( ) [EOL] [EOL] TRACKER_URL = cast ( str , CONFIG [ ConfKeys . HERON_TRACKER_URL . value ] ) [EOL] [EOL] LPLAN = tracker . get_logical_plan ( TRACKER_URL , ARGS . zone , ARGS . environment , ARGS . topology ) [EOL] [EOL] PPLAN = tracker . get_physical_plan ( TRACKER_URL , ARGS . zone , ARGS . environment , ARGS . topology ) [EOL] [EOL] GRAPH_CLIENT = GremlinClient ( CONFIG [ [string] ] ) [EOL] [EOL] builder . create_physical_graph ( GRAPH_CLIENT , ARGS . topology , ARGS . reference , LPLAN , PPLAN ) [EOL] [EOL] if ARGS . populate and ARGS . duration : [EOL] [EOL] METRIC_CLIENT_CLASS = loader . get_class ( CONFIG [ [string] ] ) [EOL] [EOL] METRICS_CLIENT = METRIC_CLIENT_CLASS ( CONFIG [ [string] ] ) [EOL] [EOL] START , END = get_window_dt_from_now ( seconds = ARGS . duration ) [EOL] [EOL] try : [EOL] builder . populate_physical_graph ( GRAPH_CLIENT , METRICS_CLIENT , ARGS . topology , ARGS . reference , START , END ) [EOL] except KeyError as kerr : [EOL] err_msg = ( [string] [string] [string] ) [EOL] [EOL] if ARGS . quiet : [EOL] print ( err_msg ) [EOL] else : [EOL] LOG . error ( err_msg ) [EOL] [EOL] LOG . info ( [string] , ( dt . datetime . now ( ) - TIMER_START ) . total_seconds ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 $argparse.Namespace$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $logging.Logger$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $logging.Logger$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 $builtins.str$ 0 $argparse.Namespace$ 0 0 0 $argparse.Namespace$ 0 0 0 $argparse.Namespace$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 $builtins.str$ 0 $argparse.Namespace$ 0 0 0 $argparse.Namespace$ 0 0 0 $argparse.Namespace$ 0 0 0 0 0 $caladrius.graph.gremlin.client.GremlinClient$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $caladrius.graph.gremlin.client.GremlinClient$ 0 $argparse.Namespace$ 0 0 0 $argparse.Namespace$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $argparse.Namespace$ 0 0 0 $argparse.Namespace$ 0 0 0 0 0 $typing.Type$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $caladrius.metrics.heron.client.HeronMetricsClient$ 0 $typing.Type$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 $caladrius.graph.gremlin.client.GremlinClient$ 0 $caladrius.metrics.heron.client.HeronMetricsClient$ 0 $argparse.Namespace$ 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $logging.Logger$ 0 0 0 $builtins.str$ 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0