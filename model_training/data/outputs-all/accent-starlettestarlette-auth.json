from typing import Any [EOL] import typing [EOL] from starlette . routing import Route , Router [EOL] [EOL] from . import endpoints [EOL] [EOL] app = Router ( [ Route ( [string] , endpoint = endpoints . Login , methods = [ [string] , [string] ] , name = [string] ) , Route ( [string] , endpoint = endpoints . Logout , methods = [ [string] ] , name = [string] ) , Route ( [string] , endpoint = endpoints . ChangePassword , methods = [ [string] , [string] ] , name = [string] , ) , Route ( [string] , endpoint = endpoints . PasswordReset , methods = [ [string] , [string] ] , name = [string] , ) , Route ( [string] , endpoint = endpoints . PasswordResetDone , methods = [ [string] ] , name = [string] , ) , Route ( [string] , endpoint = endpoints . PasswordResetConfirm , methods = [ [string] , [string] ] , name = [string] , ) , Route ( [string] , endpoint = endpoints . PasswordResetComplete , methods = [ [string] ] , name = [string] , ) , ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] import builtins [EOL] import starlette_auth [EOL] from datetime import datetime [EOL] [EOL] from sqlalchemy . orm . exc import NoResultFound [EOL] from starlette import status [EOL] from starlette . authentication import requires [EOL] from starlette . endpoints import HTTPEndpoint [EOL] from starlette . exceptions import HTTPException [EOL] from starlette . responses import RedirectResponse [EOL] [EOL] from . config import config [EOL] from . forms import ( ChangePasswordForm , LoginForm , PasswordResetConfirmForm , PasswordResetForm , ) [EOL] from . tables import User [EOL] from . tokens import token_generator [EOL] from . utils . http import urlsafe_base64_decode [EOL] [EOL] [EOL] class ChangePassword ( HTTPEndpoint ) : [EOL] @ requires ( [ [string] ] ) async def get ( self , request ) : [EOL] template = config . change_pw_template [EOL] [EOL] form = ChangePasswordForm ( ) [EOL] context = { [string] : request , [string] : form } [EOL] return config . templates . TemplateResponse ( template , context ) [EOL] [EOL] @ requires ( [ [string] ] ) async def post ( self , request ) : [EOL] template = config . change_pw_template [EOL] [EOL] data = await request . form ( ) [EOL] form = ChangePasswordForm ( data ) [EOL] [EOL] if not form . validate ( ) : [EOL] context = { [string] : request , [string] : form } [EOL] return config . templates . TemplateResponse ( template , context ) [EOL] [EOL] if not request . user . check_password ( form . current_password . data ) : [EOL] form . current_password . errors . append ( [string] ) [EOL] context = { [string] : request , [string] : form } [EOL] return config . templates . TemplateResponse ( template , context ) [EOL] [EOL] else : [EOL] request . user . set_password ( form . new_password . data ) [EOL] request . user . save ( ) [EOL] [EOL] return RedirectResponse ( url = config . change_pw_redirect_url , status_code = status . HTTP_302_FOUND ) [EOL] [EOL] [EOL] class Login ( HTTPEndpoint ) : [EOL] async def get ( self , request ) : [EOL] template = config . login_template [EOL] [EOL] form = LoginForm ( ) [EOL] context = { [string] : request , [string] : form } [EOL] return config . templates . TemplateResponse ( template , context ) [EOL] [EOL] async def post ( self , request ) : [EOL] template = config . login_template [EOL] [EOL] data = await request . form ( ) [EOL] form = LoginForm ( data ) [EOL] [EOL] if not form . validate ( ) : [EOL] context = { [string] : request , [string] : form } [EOL] return config . templates . TemplateResponse ( template , context ) [EOL] [EOL] try : [EOL] user = User . query . filter ( User . email == form . email . data . lower ( ) ) . one ( ) [EOL] if user . check_password ( form . password . data ) : [EOL] request . session [ [string] ] = str ( user . id ) [EOL] user . last_login = datetime . utcnow ( ) [EOL] user . save ( ) [EOL] return RedirectResponse ( url = config . login_redirect_url , status_code = status . HTTP_302_FOUND ) [EOL] [EOL] except NoResultFound : [EOL] pass [EOL] [EOL] request . session . clear ( ) [EOL] [EOL] form . password . errors . append ( [string] ) [EOL] context = { [string] : request , [string] : form } [EOL] [EOL] return config . templates . TemplateResponse ( template , context ) [EOL] [EOL] [EOL] class Logout ( HTTPEndpoint ) : [EOL] async def get ( self , request ) : [EOL] request . session . clear ( ) [EOL] return RedirectResponse ( url = config . logout_redirect_url , status_code = status . HTTP_302_FOUND ) [EOL] [EOL] [EOL] class PasswordReset ( HTTPEndpoint ) : [EOL] async def get ( self , request ) : [EOL] template = config . reset_pw_template [EOL] [EOL] form = PasswordResetForm ( ) [EOL] context = { [string] : request , [string] : form } [EOL] return config . templates . TemplateResponse ( template , context ) [EOL] [EOL] async def post ( self , request ) : [EOL] template = config . reset_pw_template [EOL] [EOL] data = await request . form ( ) [EOL] form = PasswordResetForm ( data ) [EOL] [EOL] if not form . validate ( ) : [EOL] context = { [string] : request , [string] : form } [EOL] return config . templates . TemplateResponse ( template , context ) [EOL] [EOL] user = User . query . filter ( User . email == form . email . data ) . one_or_none ( ) [EOL] if user and user . is_active : [EOL] await form . send_email ( request ) [EOL] [EOL] return RedirectResponse ( request . url_for ( [string] ) , status_code = status . HTTP_302_FOUND , ) [EOL] [EOL] [EOL] class PasswordResetDone ( HTTPEndpoint ) : [EOL] async def get ( self , request ) : [EOL] template = config . reset_pw_done_template [EOL] [EOL] context = { [string] : request } [EOL] return config . templates . TemplateResponse ( template , context ) [EOL] [EOL] [EOL] class PasswordResetConfirm ( HTTPEndpoint ) : [EOL] def get_user ( self , uidb64 ) : [EOL] try : [EOL] uid = urlsafe_base64_decode ( uidb64 ) . decode ( ) [EOL] user = User . query . get ( uid ) [EOL] except : [EOL] user = None [EOL] return user [EOL] [EOL] def check_token ( self , user , uidb64 , token ) : [EOL] if not ( user and user . is_active ) : [EOL] return False [EOL] return bool ( token_generator . check_token ( user , token ) ) [EOL] [EOL] async def get ( self , request ) : [EOL] template = config . reset_pw_confirm_template [EOL] [EOL] uidb64 = request . path_params [ [string] ] [EOL] token = request . path_params [ [string] ] [EOL] [EOL] user = self . get_user ( uidb64 ) [EOL] [EOL] if not self . check_token ( user , uidb64 , token ) : [EOL] raise HTTPException ( status_code = status . HTTP_404_NOT_FOUND ) [EOL] [EOL] form = PasswordResetConfirmForm ( ) [EOL] context = { [string] : request , [string] : form } [EOL] return config . templates . TemplateResponse ( template , context ) [EOL] [EOL] async def post ( self , request ) : [EOL] template = config . reset_pw_confirm_template [EOL] [EOL] uidb64 = request . path_params [ [string] ] [EOL] token = request . path_params [ [string] ] [EOL] [EOL] user = self . get_user ( uidb64 ) [EOL] [EOL] if not self . check_token ( user , uidb64 , token ) : [EOL] raise HTTPException ( status_code = status . HTTP_404_NOT_FOUND ) [EOL] [EOL] data = await request . form ( ) [EOL] form = PasswordResetConfirmForm ( data ) [EOL] [EOL] if not form . validate ( ) : [EOL] context = { [string] : request , [string] : form } [EOL] return config . templates . TemplateResponse ( template , context ) [EOL] [EOL] user . set_password ( form . new_password . data ) [EOL] user . save ( ) [EOL] [EOL] return RedirectResponse ( url = request . url_for ( [string] ) , status_code = status . HTTP_302_FOUND , ) [EOL] [EOL] [EOL] class PasswordResetComplete ( HTTPEndpoint ) : [EOL] async def get ( self , request ) : [EOL] template = config . reset_pw_complete_template [EOL] [EOL] context = { [string] : request } [EOL] return config . templates . TemplateResponse ( template , context ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $starlette_auth.forms.ChangePasswordForm$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $starlette_auth.forms.ChangePasswordForm$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $starlette_auth.forms.ChangePasswordForm$ 0 0 0 $starlette_auth.forms.ChangePasswordForm$ 0 0 0 $typing.Any$ 0 0 0 0 0 $starlette_auth.forms.ChangePasswordForm$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $starlette_auth.forms.ChangePasswordForm$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $starlette_auth.forms.ChangePasswordForm$ 0 0 0 $typing.Any$ 0 0 0 $starlette_auth.forms.ChangePasswordForm$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $starlette_auth.forms.ChangePasswordForm$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $starlette_auth.forms.ChangePasswordForm$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $starlette_auth.forms.LoginForm$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $starlette_auth.forms.LoginForm$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $starlette_auth.forms.LoginForm$ 0 0 0 $starlette_auth.forms.LoginForm$ 0 0 0 $typing.Any$ 0 0 0 0 0 $starlette_auth.forms.LoginForm$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $starlette_auth.forms.LoginForm$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $starlette_auth.forms.LoginForm$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $starlette_auth.forms.LoginForm$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starlette_auth.forms.LoginForm$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $starlette_auth.forms.LoginForm$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $starlette_auth.forms.PasswordResetForm$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $starlette_auth.forms.PasswordResetForm$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $starlette_auth.forms.PasswordResetForm$ 0 0 0 $starlette_auth.forms.PasswordResetForm$ 0 0 0 $typing.Any$ 0 0 0 0 0 $starlette_auth.forms.PasswordResetForm$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $starlette_auth.forms.PasswordResetForm$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $starlette_auth.forms.PasswordResetForm$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $starlette_auth.forms.PasswordResetForm$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $None$ 0 0 0 0 $None$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starlette_auth.forms.PasswordResetConfirmForm$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $starlette_auth.forms.PasswordResetConfirmForm$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $starlette_auth.forms.PasswordResetConfirmForm$ 0 0 0 $starlette_auth.forms.PasswordResetConfirmForm$ 0 0 0 $typing.Any$ 0 0 0 0 0 $starlette_auth.forms.PasswordResetConfirmForm$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $starlette_auth.forms.PasswordResetConfirmForm$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 $starlette_auth.forms.PasswordResetConfirmForm$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0
from typing import Any [EOL] import typing [EOL] import starlette_auth [EOL] from datetime import datetime [EOL] [EOL] from . config import config [EOL] from . utils . crypto import constant_time_compare , salted_hmac [EOL] from . utils . http import base36_to_int , int_to_base36 [EOL] [EOL] [EOL] class PasswordResetTokenGenerator : [EOL] [docstring] [EOL] [EOL] key_salt = [string] [EOL] [EOL] def make_token ( self , user ) : [EOL] [docstring] [EOL] return self . _make_token_with_timestamp ( user , self . _num_seconds ( self . _now ( ) ) ) [EOL] [EOL] def check_token ( self , user , token ) : [EOL] [docstring] [EOL] if not ( user and token ) : [EOL] return False [EOL] [comment] [EOL] try : [EOL] ts_b36 , _ = token . split ( [string] ) [EOL] except ValueError : [EOL] return False [EOL] [EOL] try : [EOL] ts = base36_to_int ( ts_b36 ) [EOL] except ValueError : [EOL] return False [EOL] [EOL] [comment] [EOL] if not constant_time_compare ( self . _make_token_with_timestamp ( user , ts ) , token ) : [EOL] return False [EOL] [EOL] [comment] [EOL] return self . _num_seconds ( self . _now ( ) ) - ts <= config . reset_pw_timeout [EOL] [EOL] def _make_token_with_timestamp ( self , user , timestamp ) : [EOL] [comment] [EOL] [comment] [EOL] ts_b36 = int_to_base36 ( timestamp ) [EOL] hash_string = salted_hmac ( self . key_salt , self . _make_hash_value ( user , timestamp ) , secret = str ( config . secret_key ) , ) . hexdigest ( ) [ : : [number] ] [comment] [EOL] return [string] % ( ts_b36 , hash_string ) [EOL] [EOL] def _make_hash_value ( self , user , timestamp ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] login_timestamp = ( [string] [EOL] if user . last_login is None [EOL] else user . last_login . replace ( microsecond = [number] , tzinfo = None ) ) [EOL] return str ( user . id ) + user . password + str ( login_timestamp ) + str ( timestamp ) [EOL] [EOL] def _num_seconds ( self , dt ) : [EOL] return int ( ( dt - datetime ( [number] , [number] , [number] ) ) . total_seconds ( ) ) [EOL] [EOL] def _now ( self ) : [EOL] [comment] [EOL] return datetime . utcnow ( ) [EOL] [EOL] [EOL] token_generator = PasswordResetTokenGenerator ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starlette_auth.tokens.PasswordResetTokenGenerator$ 0 0 0 0 0
from typing import List [EOL] import typing [EOL] __version__ = [string] [EOL] [EOL] [EOL] from . backends import ModelAuthBackend [EOL] from . config import config [EOL] from . main import app [EOL] [EOL] __all__ = [ [string] , [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0
class ImproperlyConfigured ( Exception ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import starlette [EOL] import typing [EOL] from starlette . authentication import ( AuthCredentials , AuthenticationBackend , UnauthenticatedUser , ) [EOL] from starlette . requests import HTTPConnection [EOL] [EOL] from . tables import User [EOL] [EOL] [EOL] class ModelAuthBackend ( AuthenticationBackend ) : [EOL] def get_user ( self , conn ) : [EOL] user_id = conn . session . get ( [string] ) [EOL] if user_id : [EOL] try : [EOL] return User . query . get ( user_id ) [EOL] except : [EOL] conn . session . pop ( [string] ) [EOL] [EOL] async def authenticate ( self , conn ) : [EOL] user = self . get_user ( conn ) [EOL] if user and user . is_authenticated : [EOL] scopes = [ [string] ] + sorted ( [ str ( s ) for s in user . scopes ] ) [EOL] return AuthCredentials ( scopes ) , user [EOL] scopes = [ [string] ] [EOL] return AuthCredentials ( scopes ) , UnauthenticatedUser ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starlette.requests.HTTPConnection$ 0 0 0 $typing.Any$ 0 $starlette.requests.HTTPConnection$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $starlette.requests.HTTPConnection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starlette.requests.HTTPConnection$ 0 0 0 $typing.Any$ 0 0 0 0 0 $starlette.requests.HTTPConnection$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $typing.Any$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0
from typing import Type , Union [EOL] import starlette [EOL] import typing [EOL] import builtins [EOL] import starlette_auth [EOL] import typing [EOL] [EOL] from starlette . config import Config [EOL] from starlette . datastructures import Secret [EOL] from starlette . templating import Jinja2Templates [EOL] [EOL] [EOL] class AppConfig : [EOL] _config = Config ( [string] ) [EOL] [EOL] [comment] [EOL] templates = Jinja2Templates ( directory = [string] ) [EOL] change_pw_template = _config ( [string] , default = [string] ) [EOL] login_template = _config ( [string] , default = [string] ) [EOL] reset_pw_template = _config ( [string] , default = [string] ) [EOL] reset_pw_done_template = _config ( [string] , default = [string] ) [EOL] reset_pw_confirm_template = _config ( [string] , default = [string] , ) [EOL] reset_pw_complete_template = _config ( [string] , default = [string] , ) [EOL] [EOL] [comment] [EOL] reset_pw_email_subject_template = _config ( [string] , default = [string] , ) [EOL] reset_pw_email_template = _config ( [string] , default = [string] ) [EOL] reset_pw_html_email_template = _config ( [string] , default = [string] ) [EOL] [EOL] [comment] [EOL] change_pw_redirect_url = _config ( [string] , default = [string] ) [EOL] login_redirect_url = _config ( [string] , default = [string] ) [EOL] logout_redirect_url = _config ( [string] , default = [string] ) [EOL] [EOL] [comment] [EOL] reset_pw_timeout = _config ( [string] , cast = int , default = ( [number] * [number] * [number] * [number] ) ) [EOL] secret_key = _config ( [string] , cast = Secret , default = [string] ) [EOL] [EOL] [EOL] config = AppConfig ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $starlette.templating.Jinja2Templates$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[builtins.str,starlette.datastructures.Secret]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any [EOL] import typing [EOL] import builtins [EOL] import starlette_auth [EOL] import binascii [EOL] import hashlib [EOL] import os [EOL] [EOL] import sqlalchemy as sa [EOL] from sqlalchemy import orm [EOL] from sqlalchemy_utils import EmailType [EOL] from starlette_core . database import Base [EOL] [EOL] user_scopes = sa . Table ( [string] , Base . metadata , sa . Column ( [string] , Base . id . type , sa . ForeignKey ( [string] ) , primary_key = True ) , sa . Column ( [string] , Base . id . type , sa . ForeignKey ( [string] ) , primary_key = True ) , ) [EOL] [EOL] [EOL] class User ( Base ) : [EOL] email = sa . Column ( EmailType , nullable = False , index = True , unique = True ) [EOL] password = sa . Column ( sa . String ( [number] ) ) [EOL] first_name = sa . Column ( sa . String ( [number] ) ) [EOL] last_name = sa . Column ( sa . String ( [number] ) ) [EOL] is_active = sa . Column ( sa . Boolean , nullable = False , default = True ) [EOL] last_login = sa . Column ( sa . DateTime , nullable = True ) [EOL] scopes = orm . relationship ( [string] , secondary = user_scopes ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . email [EOL] [EOL] @ property def is_authenticated ( self ) : [EOL] return self . is_active [EOL] [EOL] @ property def display_name ( self ) : [EOL] return f"{ self . first_name } [string] { self . last_name }" [EOL] [EOL] def set_password ( self , password ) : [EOL] salt = hashlib . sha256 ( os . urandom ( [number] ) ) . hexdigest ( ) . encode ( [string] ) [EOL] password_hash = hashlib . pbkdf2_hmac ( [string] , password . encode ( [string] ) , salt , [number] ) [EOL] password_hash = binascii . hexlify ( password_hash ) [EOL] self . password = ( salt + password_hash ) . decode ( [string] ) [EOL] [EOL] def check_password ( self , password ) : [EOL] salt = self . password [ : [number] ] [EOL] stored_password = self . password [ [number] : ] [EOL] password_hash = hashlib . pbkdf2_hmac ( [string] , password . encode ( [string] ) , salt . encode ( [string] ) , [number] ) [EOL] password_hash = binascii . hexlify ( password_hash ) . decode ( [string] ) [comment] [EOL] return password_hash == stored_password [EOL] [EOL] [EOL] class Scope ( Base ) : [EOL] code = sa . Column ( sa . String ( [number] ) , nullable = False , unique = True ) [EOL] description = sa . Column ( sa . Text ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . code [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[starlette_auth.tables.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[starlette_auth.tables.User]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 $builtins.bytes$ 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[starlette_auth.tables.Scope]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[starlette_auth.tables.Scope]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Type , Dict , Any [EOL] import starlette [EOL] import typing [EOL] import email [EOL] import starlette_auth [EOL] from email . message import EmailMessage [EOL] [EOL] from starlette . requests import Request [EOL] from starlette_core . mail import send_message [EOL] from wtforms import fields , form , validators [EOL] from wtforms . fields . html5 import EmailField [EOL] [EOL] from . exceptions import ImproperlyConfigured [EOL] from . tables import User [EOL] from . tokens import token_generator [EOL] from . utils . http import urlsafe_base64_encode [EOL] [EOL] [EOL] class ChangePasswordForm ( form . Form ) : [EOL] current_password = fields . PasswordField ( validators = [ validators . DataRequired ( ) ] ) [EOL] new_password = fields . PasswordField ( validators = [ validators . DataRequired ( ) ] ) [EOL] confirm_new_password = fields . PasswordField ( validators = [ validators . DataRequired ( ) , validators . EqualTo ( [string] , message = [string] ) , ] ) [EOL] [EOL] [EOL] class LoginForm ( form . Form ) : [EOL] email = EmailField ( validators = [ validators . DataRequired ( ) , validators . Email ( message = [string] ) , ] ) [EOL] password = fields . PasswordField ( validators = [ validators . DataRequired ( ) ] ) [EOL] [EOL] [EOL] class PasswordResetForm ( form . Form ) : [EOL] email = EmailField ( validators = [ validators . DataRequired ( ) , validators . Email ( message = [string] ) , ] ) [EOL] [EOL] async def send_email ( self , request ) : [EOL] from . import config [EOL] [EOL] user = User . query . filter ( User . email == self . data [ [string] ] ) . one_or_none ( ) [EOL] [EOL] if not user : [EOL] return [EOL] [EOL] templates = config . templates [EOL] context = { [string] : request , [string] : urlsafe_base64_encode ( bytes ( str ( user . id ) , encoding = [string] ) ) , [string] : user , [string] : token_generator . make_token ( user ) , } [EOL] msg = EmailMessage ( ) [EOL] [EOL] if ( not config . reset_pw_email_subject_template or not config . reset_pw_email_template ) : [EOL] error_message = ( [string] [string] [string] [string] ) [EOL] raise ImproperlyConfigured ( error_message ) [EOL] [EOL] subject_tmpl = templates . get_template ( config . reset_pw_email_subject_template ) [EOL] subject = subject_tmpl . render ( context ) [EOL] body_tmpl = templates . get_template ( config . reset_pw_email_template ) [EOL] body = body_tmpl . render ( context ) [EOL] [EOL] msg [ [string] ] = [ user . email ] [EOL] msg [ [string] ] = subject [EOL] msg . set_content ( body ) [EOL] [EOL] if config . reset_pw_html_email_template : [EOL] html_body_tmpl = templates . get_template ( config . reset_pw_html_email_template ) [EOL] html_body = html_body_tmpl . render ( context ) [EOL] msg . add_alternative ( html_body , subtype = [string] ) [EOL] [EOL] send_message ( msg ) [EOL] [EOL] [EOL] class PasswordResetConfirmForm ( form . Form ) : [EOL] new_password = fields . PasswordField ( validators = [ validators . DataRequired ( ) ] ) [EOL] confirm_new_password = fields . PasswordField ( validators = [ validators . DataRequired ( ) , validators . EqualTo ( [string] , message = [string] ) , ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $email.message.EmailMessage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 $email.message.EmailMessage$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $email.message.EmailMessage$ 0 0 0 0 $typing.Any$ 0 $email.message.EmailMessage$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 $email.message.EmailMessage$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $email.message.EmailMessage$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[starlette_auth.forms.PasswordResetConfirmForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[starlette_auth.forms.PasswordResetConfirmForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import hashlib [EOL] import hmac [EOL] import secrets [EOL] [EOL] [EOL] def salted_hmac ( key_salt , value , secret ) : [EOL] [docstring] [EOL] [EOL] assert secret , f" [string] " [EOL] [EOL] key_salt = bytes ( key_salt , encoding = [string] ) [EOL] secret = bytes ( secret , encoding = [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] key = hashlib . sha1 ( key_salt + secret ) . digest ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] return hmac . new ( key , msg = bytes ( value , encoding = [string] ) , digestmod = hashlib . sha1 ) [EOL] [EOL] [EOL] def constant_time_compare ( val1 , val2 ) : [EOL] [docstring] [EOL] [EOL] return secrets . compare_digest ( bytes ( val1 , encoding = [string] ) , bytes ( val2 , encoding = [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import builtins [EOL] import base64 [EOL] from binascii import Error as BinasciiError [EOL] [EOL] [EOL] def base36_to_int ( s ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if len ( s ) > [number] : [EOL] raise ValueError ( [string] ) [EOL] return int ( s , [number] ) [EOL] [EOL] [EOL] def int_to_base36 ( i ) : [EOL] [docstring] [EOL] char_set = [string] [EOL] if i < [number] : [EOL] raise ValueError ( [string] ) [EOL] if i < [number] : [EOL] return char_set [ i ] [EOL] b36 = [string] [EOL] while i != [number] : [EOL] i , n = divmod ( i , [number] ) [EOL] b36 = char_set [ n ] + b36 [EOL] return b36 [EOL] [EOL] [EOL] def urlsafe_base64_decode ( s ) : [EOL] [docstring] [EOL] s = s . encode ( ) [EOL] try : [EOL] return base64 . urlsafe_b64decode ( s . ljust ( len ( s ) + len ( s ) % [number] , [string] ) ) [EOL] except ( LookupError , BinasciiError ) as e : [EOL] raise ValueError ( e ) [EOL] [EOL] [EOL] def urlsafe_base64_encode ( s ) : [EOL] [docstring] [EOL] return base64 . urlsafe_b64encode ( s ) . rstrip ( [string] ) . decode ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import starlette_auth [EOL] from starlette_auth . config import AppConfig [EOL] [EOL] [EOL] def test_defaults ( ) : [EOL] config = AppConfig ( ) [EOL] assert config . change_pw_template == [string] [EOL] assert config . login_template == [string] [EOL] assert config . reset_pw_template == [string] [EOL] assert config . reset_pw_done_template == [string] [EOL] assert ( config . reset_pw_confirm_template == [string] ) [EOL] assert ( config . reset_pw_complete_template == [string] ) [EOL] assert ( config . reset_pw_email_subject_template == [string] ) [EOL] assert config . reset_pw_email_template == [string] [EOL] assert config . reset_pw_html_email_template == [string] [EOL] assert config . change_pw_redirect_url == [string] [EOL] assert config . login_redirect_url == [string] [EOL] assert config . logout_redirect_url == [string] [EOL] assert config . reset_pw_timeout == [number] * [number] * [number] * [number] [EOL] assert str ( config . secret_key ) == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from starlette . applications import Starlette [EOL] from starlette . authentication import requires [EOL] from starlette . middleware . authentication import AuthenticationMiddleware [EOL] from starlette . middleware . sessions import SessionMiddleware [EOL] from starlette . responses import JSONResponse [EOL] from starlette . testclient import TestClient [EOL] [EOL] from starlette_auth . backends import ModelAuthBackend [EOL] from starlette_auth . tables import User [EOL] [EOL] [EOL] class AuthenticatedBackend ( ModelAuthBackend ) : [EOL] def get_user ( self , conn ) : [EOL] return User ( first_name = [string] , last_name = [string] , is_active = True ) [EOL] [EOL] [EOL] class InactiveBackend ( ModelAuthBackend ) : [EOL] def get_user ( self , conn ) : [EOL] return User ( first_name = [string] , last_name = [string] , is_active = False ) [EOL] [EOL] [EOL] class NoUserBackend ( ModelAuthBackend ) : [EOL] def get_user ( self , conn ) : [EOL] pass [EOL] [EOL] [EOL] def homepage ( request ) : [EOL] return JSONResponse ( { [string] : request . user . is_authenticated , [string] : request . user . display_name , } ) [EOL] [EOL] [EOL] @ requires ( [string] ) async def dashboard ( request ) : [EOL] return JSONResponse ( { [string] : request . user . is_authenticated , [string] : request . user . display_name , } ) [EOL] [EOL] [EOL] @ requires ( [string] ) async def unauthenticated ( request ) : [EOL] return JSONResponse ( { [string] : request . user . is_authenticated , [string] : request . user . display_name , } ) [EOL] [EOL] [EOL] @ requires ( [string] , redirect = [string] ) async def admin ( request ) : [EOL] return JSONResponse ( { [string] : request . user . is_authenticated , [string] : request . user . display_name , } ) [EOL] [EOL] [EOL] def test_authenticated ( ) : [EOL] app = Starlette ( ) [EOL] app . add_middleware ( SessionMiddleware , secret_key = [string] ) [EOL] app . add_middleware ( AuthenticationMiddleware , backend = AuthenticatedBackend ( ) ) [EOL] [EOL] app . add_route ( [string] , homepage ) [EOL] app . add_route ( [string] , dashboard ) [EOL] app . add_route ( [string] , admin ) [EOL] app . add_route ( [string] , unauthenticated ) [EOL] [EOL] with TestClient ( app ) as client : [EOL] response = client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] assert response . json ( ) == { [string] : True , [string] : [string] } [EOL] [EOL] response = client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] assert response . json ( ) == { [string] : True , [string] : [string] } [EOL] [EOL] response = client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] assert response . json ( ) == { [string] : True , [string] : [string] } [EOL] [EOL] response = client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_not_active ( ) : [EOL] app = Starlette ( ) [EOL] app . add_middleware ( SessionMiddleware , secret_key = [string] ) [EOL] app . add_middleware ( AuthenticationMiddleware , backend = InactiveBackend ( ) ) [EOL] [EOL] app . add_route ( [string] , homepage ) [EOL] app . add_route ( [string] , dashboard ) [EOL] app . add_route ( [string] , admin ) [EOL] app . add_route ( [string] , unauthenticated ) [EOL] [EOL] with TestClient ( app ) as client : [EOL] response = client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] assert response . json ( ) == { [string] : False , [string] : [string] } [EOL] [EOL] response = client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] [EOL] response = client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] assert response . json ( ) == { [string] : False , [string] : [string] } [EOL] [EOL] response = client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] assert response . json ( ) == { [string] : False , [string] : [string] } [EOL] [EOL] [EOL] def test_no_user ( ) : [EOL] app = Starlette ( ) [EOL] app . add_middleware ( SessionMiddleware , secret_key = [string] ) [EOL] app . add_middleware ( AuthenticationMiddleware , backend = NoUserBackend ( ) ) [EOL] [EOL] app . add_route ( [string] , homepage ) [EOL] app . add_route ( [string] , dashboard ) [EOL] app . add_route ( [string] , admin ) [EOL] app . add_route ( [string] , unauthenticated ) [EOL] [EOL] with TestClient ( app ) as client : [EOL] response = client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] assert response . json ( ) == { [string] : False , [string] : [string] } [EOL] [EOL] response = client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] [EOL] response = client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] assert response . json ( ) == { [string] : False , [string] : [string] } [EOL] [EOL] response = client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] assert response . json ( ) == { [string] : False , [string] : [string] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import starlette_auth [EOL] import jinja2 [EOL] import pytest [EOL] from sqlalchemy_utils import create_database , database_exists , drop_database [EOL] from starlette . applications import Starlette [EOL] from starlette . authentication import requires [EOL] from starlette . middleware . authentication import AuthenticationMiddleware [EOL] from starlette . middleware . sessions import SessionMiddleware [EOL] from starlette . responses import JSONResponse [EOL] from starlette . testclient import TestClient [EOL] from starlette_core . database import Database , DatabaseURL , Session [EOL] from starlette_core . templating import Jinja2Templates [EOL] [EOL] import starlette_auth [EOL] from starlette_auth . tables import User [EOL] [EOL] [comment] [EOL] starlette_auth . config . templates = Jinja2Templates ( loader = jinja2 . FileSystemLoader ( [string] ) ) [EOL] starlette_auth . config . login_template = [string] [EOL] starlette_auth . config . change_pw_template = [string] [EOL] starlette_auth . config . reset_pw_template = [string] [EOL] starlette_auth . config . reset_pw_done_template = [string] [EOL] starlette_auth . config . reset_pw_email_subject_template = [string] [EOL] starlette_auth . config . reset_pw_email_template = [string] [EOL] starlette_auth . config . reset_pw_confirm_template = [string] [EOL] starlette_auth . config . reset_pw_complete_template = [string] [EOL] [EOL] url = DatabaseURL ( [string] ) [EOL] db = Database ( url ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] , autouse = True ) def database ( ) : [EOL] if database_exists ( str ( url ) ) : [EOL] drop_database ( str ( url ) ) [EOL] [EOL] create_database ( str ( url ) ) [EOL] [EOL] db . drop_all ( ) [EOL] db . create_all ( ) [EOL] [EOL] return db [EOL] [EOL] [EOL] @ pytest . yield_fixture ( scope = [string] , autouse = True ) def session ( ) : [EOL] db_session = Session ( ) [EOL] yield db_session [EOL] db . truncate_all ( True ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def user ( ) : [EOL] test_user = User ( email = [string] ) [EOL] test_user . set_password ( [string] ) [EOL] test_user . save ( ) [EOL] [EOL] return test_user [EOL] [EOL] [EOL] @ pytest . yield_fixture ( scope = [string] ) def client ( ) : [EOL] @ requires ( [ [string] ] , redirect = [string] ) def home ( request ) : [EOL] return JSONResponse ( { [string] : request . user . email } ) [EOL] [EOL] app = Starlette ( ) [EOL] app . mount ( path = [string] , app = starlette_auth . app , name = [string] ) [EOL] app . add_middleware ( AuthenticationMiddleware , backend = starlette_auth . backends . ModelAuthBackend ( ) ) [EOL] app . add_middleware ( SessionMiddleware , secret_key = [string] ) [EOL] app . add_route ( [string] , home ) [EOL] [EOL] with TestClient ( app ) as client : [EOL] yield client [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict [EOL] import typing [EOL] import starlette_auth [EOL] import sqlalchemy as sa [EOL] from starlette_core . testing import assert_model_field [EOL] [EOL] from starlette_auth . tables import Scope [EOL] [EOL] data = { [string] : [string] , [string] : [string] } [EOL] [EOL] [EOL] def test_fields ( ) : [EOL] assert_model_field ( Scope , [string] , sa . String , False , False , True , [number] ) [EOL] assert_model_field ( Scope , [string] , sa . Text , True , False , False ) [EOL] [EOL] [EOL] def test_model_data ( ) : [EOL] scope = Scope ( ** data ) [EOL] [EOL] assert scope . code == [string] [EOL] assert scope . description == [string] [EOL] [EOL] [EOL] def test_str ( ) : [EOL] scope = Scope ( ** data ) [EOL] [EOL] assert str ( scope ) == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Union [EOL] import typing [EOL] import starlette_auth [EOL] import sqlalchemy as sa [EOL] from sqlalchemy_utils import EmailType [EOL] from starlette_core . testing import assert_model_field [EOL] [EOL] from starlette_auth . tables import User [EOL] [EOL] data = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : True , } [EOL] [EOL] [EOL] def test_fields ( ) : [EOL] assert_model_field ( User , [string] , EmailType , False , True , True , [number] ) [EOL] assert_model_field ( User , [string] , sa . String , True , False , False , [number] ) [EOL] assert_model_field ( User , [string] , sa . String , True , False , False , [number] ) [EOL] assert_model_field ( User , [string] , sa . Boolean , False , False , False ) [EOL] assert_model_field ( User , [string] , sa . DateTime , True , False , False ) [EOL] assert_model_field ( User , [string] , sa . String , True , False , False , [number] ) [EOL] [EOL] [EOL] def test_relationships ( ) : [EOL] assert User . scopes . property . target . name == [string] [EOL] [EOL] [EOL] def test_model_data ( ) : [EOL] user = User ( ** data ) [EOL] [EOL] assert user . email == [string] [EOL] assert user . first_name == [string] [EOL] assert user . last_name == [string] [EOL] assert user . is_active is True [EOL] assert user . password is None [EOL] [EOL] [EOL] def test_display_name ( ) : [EOL] user = User ( ** data ) [EOL] [EOL] assert user . display_name == [string] [EOL] [EOL] [EOL] def test_str ( ) : [EOL] user = User ( ** data ) [EOL] [EOL] assert str ( user ) == [string] [EOL] [EOL] [EOL] def test_password ( ) : [EOL] user = User ( ** data ) [EOL] [EOL] user . set_password ( [string] ) [EOL] assert user . check_password ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import tests [EOL] import starlette_auth [EOL] from datetime import datetime , timedelta [EOL] [EOL] from starlette_auth import config [EOL] from starlette_auth . tables import User [EOL] from starlette_auth . tokens import PasswordResetTokenGenerator [EOL] [EOL] [EOL] def test_make_token ( user ) : [EOL] config . secret_key = [string] [EOL] p0 = PasswordResetTokenGenerator ( ) [EOL] tk1 = p0 . make_token ( user ) [EOL] assert p0 . check_token ( user , tk1 ) [EOL] [EOL] [EOL] def test_10265 ( user ) : [EOL] config . secret_key = [string] [EOL] p0 = PasswordResetTokenGenerator ( ) [EOL] tk1 = p0 . make_token ( user ) [EOL] reload = User . query . get ( user . id ) [EOL] tk2 = p0 . make_token ( reload ) [EOL] assert tk1 == tk2 [EOL] [EOL] [EOL] def test_timeout ( user ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] config . secret_key = [string] [EOL] [EOL] class Mocked ( PasswordResetTokenGenerator ) : [EOL] def __init__ ( self , now ) : [EOL] self . _now_val = now [EOL] [EOL] def _now ( self ) : [EOL] return self . _now_val [EOL] [EOL] p0 = PasswordResetTokenGenerator ( ) [EOL] tk1 = p0 . make_token ( user ) [EOL] [EOL] p1 = Mocked ( datetime . utcnow ( ) + timedelta ( seconds = config . reset_pw_timeout ) ) [EOL] assert p1 . check_token ( user , tk1 ) [EOL] [EOL] p2 = Mocked ( datetime . utcnow ( ) + timedelta ( seconds = ( config . reset_pw_timeout + [number] ) ) ) [EOL] assert not p2 . check_token ( user , tk1 ) [EOL] [EOL] config . reset_pw_timeout = [number] * [number] [EOL] [EOL] p3 = Mocked ( datetime . utcnow ( ) + timedelta ( seconds = config . reset_pw_timeout ) ) [EOL] assert p3 . check_token ( user , tk1 ) [EOL] p4 = Mocked ( datetime . utcnow ( ) + timedelta ( seconds = ( config . reset_pw_timeout + [number] ) ) ) [EOL] assert not p4 . check_token ( user , tk1 ) [EOL] [EOL] [EOL] def test_check_token_with_nonexistent_token_and_user ( user ) : [EOL] config . secret_key = [string] [EOL] [EOL] p0 = PasswordResetTokenGenerator ( ) [EOL] tk1 = p0 . make_token ( user ) [EOL] assert not p0 . check_token ( None , tk1 ) [EOL] assert not p0 . check_token ( user , None ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict [EOL] import typing [EOL] import starlette_auth [EOL] import pytest [EOL] from starlette_core . testing import DummyPostData [EOL] [EOL] from starlette_auth . forms import ChangePasswordForm [EOL] [EOL] [EOL] def test_valid ( ) : [EOL] data = { [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] form = ChangePasswordForm ( DummyPostData ( data ) ) [EOL] assert form . validate ( ) [EOL] assert form . data == data [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ { } , { [string] : [string] , [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] , [string] : [string] } , ] , ) def test_invalid ( test_data ) : [EOL] form = ChangePasswordForm ( DummyPostData ( test_data ) ) [EOL] assert form . validate ( ) is False [EOL] assert [string] in form . errors [EOL] assert [string] in form . errors [EOL] assert [string] in form . errors [EOL] [EOL] [EOL] def test_passwords_dont_match ( ) : [EOL] data = { [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] form = ChangePasswordForm ( DummyPostData ( data ) ) [EOL] assert form . validate ( ) is False [EOL] assert form . errors == { [string] : [ [string] ] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Dict [EOL] import typing [EOL] import starlette_auth [EOL] import pytest [EOL] from starlette_core . testing import DummyPostData [EOL] [EOL] from starlette_auth . forms import LoginForm [EOL] [EOL] [EOL] def test_valid ( ) : [EOL] data = { [string] : [string] , [string] : [string] } [EOL] form = LoginForm ( DummyPostData ( data ) ) [EOL] assert form . validate ( ) [EOL] assert form . data == data [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ { } , { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , ] , ) def test_invalid ( test_data ) : [EOL] form = LoginForm ( DummyPostData ( test_data ) ) [EOL] assert form . validate ( ) is False [EOL] assert [string] in form . errors [EOL] assert [string] in form . errors [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import starlette_auth [EOL] from starlette . authentication import requires [EOL] from starlette . responses import JSONResponse [EOL] [EOL] from starlette_auth . tables import Scope [EOL] [EOL] [EOL] @ requires ( [ [string] ] ) def unauthed ( request ) : [EOL] return JSONResponse ( { [string] : [string] } ) [EOL] [EOL] [EOL] @ requires ( [ [string] ] ) def authed ( request ) : [EOL] return JSONResponse ( { [string] : [string] } ) [EOL] [EOL] [EOL] @ requires ( [ [string] , [string] ] ) def read ( request ) : [EOL] return JSONResponse ( { [string] : [string] } ) [EOL] [EOL] [EOL] @ requires ( [ [string] , [string] ] ) def write ( request ) : [EOL] return JSONResponse ( { [string] : [string] } ) [EOL] [EOL] [EOL] def test_scoped_endpoints ( client , user ) : [EOL] read_scope = Scope ( code = [string] ) [EOL] write_scope = Scope ( code = [string] ) [EOL] [EOL] read_scope . save ( ) [EOL] write_scope . save ( ) [EOL] [EOL] client . app . add_route ( [string] , unauthed ) [EOL] client . app . add_route ( [string] , authed ) [EOL] client . app . add_route ( [string] , read ) [EOL] client . app . add_route ( [string] , write ) [EOL] [EOL] assert client . get ( [string] ) . status_code == [number] [EOL] assert client . get ( [string] ) . status_code == [number] [EOL] assert client . get ( [string] ) . status_code == [number] [EOL] assert client . get ( [string] ) . status_code == [number] [EOL] [EOL] login = client . post ( [string] , data = { [string] : [string] , [string] : [string] } ) [EOL] [EOL] assert login . status_code == [number] [EOL] [EOL] assert client . get ( [string] ) . status_code == [number] [EOL] assert client . get ( [string] ) . status_code == [number] [EOL] assert client . get ( [string] ) . status_code == [number] [EOL] assert client . get ( [string] ) . status_code == [number] [EOL] [EOL] user . scopes . append ( read_scope ) [EOL] user . save ( ) [EOL] [EOL] assert client . get ( [string] ) . status_code == [number] [EOL] assert client . get ( [string] ) . status_code == [number] [EOL] assert client . get ( [string] ) . status_code == [number] [EOL] assert client . get ( [string] ) . status_code == [number] [EOL] [EOL] user . scopes . append ( write_scope ) [EOL] user . save ( ) [EOL] [EOL] assert client . get ( [string] ) . status_code == [number] [EOL] assert client . get ( [string] ) . status_code == [number] [EOL] assert client . get ( [string] ) . status_code == [number] [EOL] assert client . get ( [string] ) . status_code == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] def test_get ( client ) : [EOL] response = client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] assert [string] in response . context [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from datetime import datetime [EOL] [EOL] import pytest [EOL] [EOL] from starlette_auth . tokens import token_generator [EOL] from starlette_auth . utils . http import urlsafe_base64_encode [EOL] [EOL] [EOL] def test_get_200 ( client , user ) : [EOL] uidb64 = urlsafe_base64_encode ( bytes ( str ( user . id ) , encoding = [string] ) ) [EOL] token = token_generator . make_token ( user ) [EOL] url = client . app . url_path_for ( [string] , uidb64 = uidb64 , token = token ) [EOL] [EOL] response = client . get ( url ) [EOL] assert response . status_code == [number] [EOL] assert [string] in response . context [EOL] assert [string] in response . context [EOL] [EOL] [EOL] def test_get_invalid_token ( client , user ) : [EOL] uidb64 = urlsafe_base64_encode ( bytes ( str ( user . id ) , encoding = [string] ) ) [EOL] token = [string] [EOL] url = client . app . url_path_for ( [string] , uidb64 = uidb64 , token = token ) [EOL] [EOL] response = client . get ( url ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_get_invalid_uid ( client , user ) : [EOL] uidb64 = [string] [EOL] token = token_generator . make_token ( user ) [EOL] url = client . app . url_path_for ( [string] , uidb64 = uidb64 , token = token ) [EOL] [EOL] response = client . get ( url ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_get_user_not_active ( client , user ) : [EOL] user . is_active = False [EOL] user . save ( ) [EOL] uidb64 = urlsafe_base64_encode ( bytes ( str ( user . id ) , encoding = [string] ) ) [EOL] token = token_generator . make_token ( user ) [EOL] url = client . app . url_path_for ( [string] , uidb64 = uidb64 , token = token ) [EOL] [EOL] response = client . get ( url ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_get_user_url_is_invalid_by_logging_in ( client , user ) : [EOL] uidb64 = urlsafe_base64_encode ( bytes ( str ( user . id ) , encoding = [string] ) ) [EOL] token = token_generator . make_token ( user ) [EOL] url = client . app . url_path_for ( [string] , uidb64 = uidb64 , token = token ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] user . last_login = datetime . utcnow ( ) [EOL] user . save ( ) [EOL] [EOL] response = client . get ( url ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_post ( client , user ) : [EOL] uidb64 = urlsafe_base64_encode ( bytes ( str ( user . id ) , encoding = [string] ) ) [EOL] token = token_generator . make_token ( user ) [EOL] url = client . app . url_path_for ( [string] , uidb64 = uidb64 , token = token ) [EOL] [EOL] response = client . post ( url , data = { [string] : [string] , [string] : [string] } ) [EOL] assert response . status_code == [number] [EOL] assert response . next . url == [string] [EOL] [EOL] [EOL] def test_post_changed_password ( client , user ) : [EOL] uidb64 = urlsafe_base64_encode ( bytes ( str ( user . id ) , encoding = [string] ) ) [EOL] token = token_generator . make_token ( user ) [EOL] url = client . app . url_path_for ( [string] , uidb64 = uidb64 , token = token ) [EOL] [EOL] client . post ( url , data = { [string] : [string] , [string] : [string] } ) [EOL] [EOL] user . refresh_from_db ( ) [EOL] assert user . check_password ( [string] ) [EOL] [EOL] [EOL] def test_post_url_is_one_time_use ( client , user ) : [EOL] uidb64 = urlsafe_base64_encode ( bytes ( str ( user . id ) , encoding = [string] ) ) [EOL] token = token_generator . make_token ( user ) [EOL] url = client . app . url_path_for ( [string] , uidb64 = uidb64 , token = token ) [EOL] [EOL] client . post ( url , data = { [string] : [string] , [string] : [string] } ) [EOL] [EOL] another = client . get ( url ) [EOL] assert another . status_code == [number] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ { } , { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , ] , ) def test_invalid ( test_data , client , user ) : [EOL] uidb64 = urlsafe_base64_encode ( bytes ( str ( user . id ) , encoding = [string] ) ) [EOL] token = token_generator . make_token ( user ) [EOL] url = client . app . url_path_for ( [string] , uidb64 = uidb64 , token = token ) [EOL] [EOL] response = client . post ( url , data = test_data ) [EOL] assert response . status_code == [number] [EOL] assert response . url == f" [string] { url }" [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] [EOL] [EOL] def test_get ( client ) : [EOL] response = client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_can_login ( client , user ) : [EOL] response = client . post ( [string] , data = { [string] : [string] , [string] : [string] } ) [EOL] [EOL] assert response . status_code == [number] [EOL] assert response . next . url == [string] [EOL] [EOL] response = client . get ( [string] ) [EOL] assert response . json ( ) == { [string] : [string] } [EOL] [EOL] [EOL] def test_user_last_login_set ( client , user ) : [EOL] assert user . last_login is None [EOL] response = client . post ( [string] , data = { [string] : [string] , [string] : [string] } ) [EOL] user . refresh_from_db ( ) [EOL] assert user . last_login is not None [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ { } , { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } , ] , ) def test_invalid_credentials ( test_data , client , user ) : [EOL] response = client . post ( [string] , data = test_data ) [EOL] [EOL] assert response . status_code == [number] [EOL] assert response . url == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] def test_get ( client ) : [EOL] response = client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] assert [string] in response . context [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] [EOL] [EOL] def test_logout ( client , user ) : [EOL] client . post ( [string] , data = { [string] : [string] , [string] : [string] } ) [EOL] [EOL] response = client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] assert response . url == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] [EOL] from starlette_auth import config [EOL] [EOL] [EOL] def test_get ( client ) : [EOL] response = client . get ( [string] ) [EOL] assert response . status_code == [number] [EOL] assert [string] in response . context [EOL] assert [string] in response . context [EOL] [EOL] [EOL] def test_post_redirects ( client , monkeypatch ) : [EOL] [comment] [EOL] [comment] [EOL] [EOL] def fake_send ( msg ) : [EOL] raise Exception ( [string] ) [EOL] [EOL] monkeypatch . setattr ( [string] , fake_send ) [EOL] [EOL] response = client . post ( [string] , data = { [string] : [string] } ) [EOL] assert response . status_code == [number] [EOL] assert response . next . url == [string] [EOL] [EOL] [EOL] def test_email_not_sent_if_user_is_not_active ( client , user , monkeypatch ) : [EOL] user . is_active = False [EOL] user . save ( ) [EOL] [EOL] def fake_send ( msg ) : [EOL] raise Exception ( [string] ) [EOL] [EOL] monkeypatch . setattr ( [string] , fake_send ) [EOL] [EOL] response = client . post ( [string] , data = { [string] : [string] } ) [EOL] assert response . status_code == [number] [EOL] assert response . next . url == [string] [EOL] [EOL] [EOL] def test_txt_email_sent_if_user_exists ( client , user , monkeypatch ) : [EOL] def fake_send ( msg ) : [EOL] assert msg . get_content_maintype ( ) == [string] [EOL] assert msg [ [string] ] == user . email [EOL] assert msg [ [string] ] == [string] [EOL] assert [string] in msg . as_string ( ) [EOL] [EOL] monkeypatch . setattr ( [string] , fake_send ) [EOL] [EOL] response = client . post ( [string] , data = { [string] : user . email } ) [EOL] assert response . status_code == [number] [EOL] assert response . next . url == [string] [EOL] [EOL] [EOL] def test_html_email_sent_if_template_is_defined ( client , user , monkeypatch ) : [EOL] def fake_send ( msg ) : [EOL] assert msg . get_content_maintype ( ) == [string] [EOL] assert msg [ [string] ] == user . email [EOL] assert msg [ [string] ] == [string] [EOL] assert [string] in msg . as_string ( ) [EOL] [EOL] monkeypatch . setattr ( [string] , fake_send ) [EOL] [EOL] config . reset_pw_html_email_template = [string] [EOL] [EOL] response = client . post ( [string] , data = { [string] : user . email } ) [EOL] assert response . status_code == [number] [EOL] assert response . next . url == [string] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ { } , { [string] : [string] } , { [string] : [string] } , { [string] : [string] } , { [string] : [string] } , ] , ) def test_invalid_data ( test_data , client , user ) : [EOL] response = client . post ( [string] , data = test_data ) [EOL] [EOL] assert response . status_code == [number] [EOL] assert response . url == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0