[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import List [EOL] import typing [EOL] import os [EOL] import sys [EOL] [EOL] sys . path . insert ( [number] , os . path . abspath ( [string] ) ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] project = [string] [EOL] copyright = [string] [EOL] author = [string] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] extensions = [ [string] , [string] , [string] , ] [EOL] [EOL] [comment] [EOL] templates_path = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] language = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] exclude_patterns = [ [string] , [string] , [string] ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_theme = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_static_path = [ [string] ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] todo_include_todos = True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0
[docstring] [EOL]	0 0
from unittest . mock import patch [EOL] from sampleapp import logger [EOL] [EOL] [EOL] def test_get_logger_does_not_apply_config ( ) : [EOL] with patch ( [string] , return_value = { } ) : [EOL] assert logger . get_logger ( [string] ) . getEffectiveLevel ( ) == [number] [EOL] [EOL] [EOL] def test_get_logger_applies_config ( ) : [EOL] assert logger . get_logger ( [string] ) . getEffectiveLevel ( ) == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from unittest . mock import patch [EOL] from hypothesis import given , strategies [EOL] from sampleapp import foo [EOL] [EOL] [EOL] def test_foo_bar ( ) : [EOL] assert foo . bar ( [number] ) == [number] [EOL] [EOL] [EOL] def test_foo_baz ( ) : [EOL] assert foo . baz ( ) == [number] [EOL] [EOL] [EOL] @ patch ( [string] ) def test_foo_baz_with_mock ( mocked_bar ) : [EOL] foo . baz ( ) [EOL] assert mocked_bar . called_once_with ( [number] ) [EOL] [EOL] [EOL] @ given ( strategies . integers ( ) ) def test_with_hypothesis ( integer ) : [EOL] assert foo . bar ( integer ) == integer + [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import sampleapp [EOL] import pytest [EOL] import os [EOL] from unittest . mock import patch [EOL] from sampleapp import config [EOL] [EOL] [EOL] @ pytest . fixture def config_path ( ) : [EOL] return os . path . join ( os . path . dirname ( os . path . dirname ( os . path . realpath ( __file__ ) ) ) , [string] ) [EOL] [EOL] [EOL] def test_config_constructor_sets_paths ( config_path ) : [EOL] cfg = config . Config ( ) [EOL] assert cfg . config_path == config_path , [string] [EOL] assert cfg . log_config_path == os . path . join ( cfg . config_path , cfg . LOG_CONFIG_FILE ) [EOL] assert cfg . app_config_path == os . path . join ( cfg . config_path , cfg . APP_CONFIG_FILE ) [EOL] [EOL] [EOL] def test_load_log_if_file_present ( ) : [EOL] cfg = config . Config ( ) [EOL] assert len ( cfg . log ( ) ) != [number] [EOL] [EOL] [EOL] @ patch ( [string] , lambda _ : False ) def test_load_empty_log_if_file_not_present ( ) : [EOL] cfg = config . Config ( ) [EOL] assert len ( cfg . log ( ) ) == [number] [EOL] [EOL] [EOL] def test_load_app_if_file_present ( ) : [EOL] cfg = config . Config ( ) [EOL] assert len ( cfg . app ( ) ) != [number] [EOL] [EOL] [EOL] @ patch ( [string] , lambda _ : False ) def test_load_empty_app_if_file_not_present ( ) : [EOL] cfg = config . Config ( ) [EOL] assert len ( cfg . app ( ) ) == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import sampleapp [EOL] import builtins [EOL] import logging [EOL] [docstring] [EOL] import logging [EOL] from logging import config [EOL] from sampleapp import config as appconfig [EOL] [EOL] [EOL] def get_logger ( name ) : [EOL] [docstring] [EOL] cfg = appconfig . Config ( ) [EOL] if cfg . log ( ) : [EOL] config . dictConfig ( cfg . log ( ) ) [EOL] return logging . getLogger ( name ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] from sampleapp . metrics import METRICS [EOL] [EOL] request_processing_seconds = METRICS [ [string] ] [EOL] [EOL] [EOL] def bar ( a ) : [EOL] [docstring] [EOL] return a + [number] [EOL] [EOL] [EOL] @ request_processing_seconds ( ) def baz ( ) : [EOL] [docstring] [EOL] return bar ( [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL]	0 0
from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] from prometheus_client import Counter , Gauge , Summary [EOL] [EOL] METRICS = { [string] : Summary ( [string] , [string] ) . time , [string] : Gauge ( [string] , [string] ) . track_inprogress , [string] : Counter ( [string] , [string] ) . count_exceptions , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] [EOL] [EOL] VERSION = ( [number] , [number] , [number] ) [EOL] [EOL] [EOL] __version__ = [string] . join ( map ( str , VERSION ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] import json [EOL] import os [EOL] [EOL] [EOL] class Config ( object ) : [EOL] [docstring] [EOL] [EOL] LOG_CONFIG_FILE = [string] [EOL] APP_CONFIG_FILE = [string] [EOL] [EOL] def __init__ ( self ) : [EOL] [docstring] [EOL] self . config_path = os . path . join ( os . path . dirname ( os . path . dirname ( os . path . realpath ( __file__ ) ) ) , [string] ) [EOL] self . log_config_path = os . path . join ( self . config_path , self . LOG_CONFIG_FILE ) [EOL] self . app_config_path = os . path . join ( self . config_path , self . APP_CONFIG_FILE ) [EOL] self . log_config = { } [EOL] self . app_config = { } [EOL] [EOL] def log ( self ) : [EOL] [docstring] [EOL] if not self . log_config : [EOL] self . log_config = self . _load ( self . log_config_path ) [EOL] return self . log_config [EOL] [EOL] def app ( self ) : [EOL] [docstring] [EOL] if not self . app_config : [EOL] self . app_config = self . _load ( self . app_config_path ) [EOL] return self . app_config [EOL] [EOL] def _load ( self , path ) : [EOL] if os . path . exists ( path ) : [EOL] return json . load ( open ( path ) ) [EOL] else : [EOL] return { } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0