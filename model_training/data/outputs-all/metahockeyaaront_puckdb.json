from typing import Any [EOL] import asyncio [EOL] import typing [EOL] import datetime [EOL] import asyncio [EOL] from datetime import datetime [EOL] [EOL] import pytest [EOL] [EOL] from puckdb import db , fetch [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def database ( event_loop ) : [EOL] event_loop . run_until_complete ( db . setup ( loop = event_loop ) ) [EOL] yield db . create ( ) [EOL] db . drop ( ) [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def database_teams ( event_loop , database ) : [EOL] event_loop . run_until_complete ( fetch . get_teams ( event_loop ) ) [EOL] yield database [EOL] [EOL] [EOL] class TestFetch : [EOL] @ pytest . mark . asyncio async def test_get_games ( self , database_teams , event_loop ) : [EOL] date = datetime ( [number] , [number] , [number] ) [EOL] games = await fetch . get_games ( from_date = date , to_date = date , loop = event_loop ) [EOL] assert games is not None [EOL] assert len ( games ) == [number] [EOL] [EOL] @ pytest . mark . asyncio async def test_get_game ( self , database_teams , event_loop ) : [EOL] live = await fetch . get_game ( [number] , loop = event_loop ) [EOL] assert live [ [string] ] == [number] [EOL] assert live [ [string] ] == [number] [EOL] assert live [ [string] ] == [number] [EOL] [EOL] @ pytest . mark . asyncio async def test_get_teams ( self , database , event_loop ) : [EOL] teams = await fetch . get_teams ( event_loop ) [EOL] assert teams is not None [EOL] assert len ( teams ) >= [number] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.AbstractEventLoop$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $asyncio.AbstractEventLoop$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.AbstractEventLoop$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $asyncio.AbstractEventLoop$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
from puckdb import model [EOL] [EOL] [EOL] class TestModelEvents : [EOL] def test_type_parser ( self ) : [EOL] assert model . EventType . blocked_shot == model . parse_enum ( model . EventType , [string] ) [EOL] assert model . EventType . shot == model . parse_enum ( model . EventType , [string] ) [EOL] assert model . parse_enum ( model . EventType , [string] ) is None [comment] [EOL] assert model . parse_enum ( model . EventType , [string] ) is None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import asyncio [EOL] import typing [EOL] import asyncio [EOL] import sys [EOL] from datetime import datetime [EOL] [EOL] import click [EOL] import click_datetime [EOL] [EOL] from puckdb import db , fetch [EOL] [EOL] DATE_PARAM = click_datetime . Datetime ( format = [string] ) [EOL] [EOL] [EOL] def abort_if_false ( ctx , param , value ) : [EOL] if not value : [EOL] ctx . abort ( ) [EOL] [EOL] [EOL] def _setup ( ) : [EOL] loop . run_until_complete ( db . setup ( loop = loop ) ) [EOL] [EOL] [EOL] @ click . command ( help = [string] ) @ click . option ( [string] , is_flag = True , callback = abort_if_false , expose_value = False , prompt = [string] ) def init ( ) : [EOL] db . create ( ) [EOL] loop . run_until_complete ( fetch . get_teams ( loop = loop ) ) [EOL] [EOL] [EOL] @ click . command ( help = [string] ) @ click . option ( [string] , is_flag = True , callback = abort_if_false , expose_value = False , prompt = [string] ) def drop ( ) : [EOL] db . drop ( ) [EOL] [EOL] [EOL] @ click . command ( ) @ click . option ( [string] , type = DATE_PARAM , default = datetime ( [number] , [number] , [number] ) ) @ click . option ( [string] , type = DATE_PARAM , default = datetime . now ( ) ) def get ( from_date , to_date ) : [EOL] games = loop . run_until_complete ( fetch . get_games ( from_date = from_date , to_date = to_date , loop = loop ) ) [EOL] click . echo ( len ( games ) ) [EOL] [EOL] [EOL] @ click . group ( ) @ click . version_option ( ) def main ( ) : [EOL] if db . connect_str is None : [EOL] click . echo ( [string] ) [EOL] sys . exit ( [number] ) [EOL] _setup ( ) [EOL] [EOL] [EOL] main . add_command ( get ) [EOL] main . add_command ( init ) [EOL] main . add_command ( drop ) [EOL] [EOL] loop = asyncio . get_event_loop ( ) [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 0 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 $asyncio.events.AbstractEventLoop$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 0 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 $asyncio.events.AbstractEventLoop$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 $asyncio.events.AbstractEventLoop$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $asyncio.events.AbstractEventLoop$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import asyncio [EOL] [EOL] try : [EOL] import uvloop [EOL] [EOL] asyncio . set_event_loop_policy ( uvloop . EventLoopPolicy ( ) ) [EOL] except ImportError : [EOL] pass [EOL] [EOL] __title__ = [string] [EOL] __author__ = [string] [EOL] __version__ = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
class FilterException ( Exception ) : [EOL] def __init__ ( self , message = None ) : [EOL] self . message = message [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( message = [string] + self . message if self . message else [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import datetime [EOL] import puckdb [EOL] import enum [EOL] import typing [EOL] import builtins [EOL] import enum [EOL] from datetime import datetime [EOL] from typing import Type [EOL] [EOL] from marshmallow import Schema , fields [EOL] from marshmallow_enum import EnumField [EOL] [EOL] [EOL] class PlayerPosition ( enum . Enum ) : [EOL] center = [number] [EOL] left_wing = [number] [EOL] right_wing = [number] [EOL] defenseman = [number] [EOL] goalie = [number] [EOL] [EOL] [EOL] class GameState ( enum . Enum ) : [EOL] not_started = - [number] [EOL] in_progress = [number] [EOL] finished = [number] [EOL] [EOL] [EOL] class EventType ( enum . Enum ) : [EOL] blocked_shot = [number] [EOL] challenge = [number] [EOL] faceoff = [number] [EOL] giveaway = [number] [EOL] goal = [number] [EOL] hit = [number] [EOL] missed_shot = [number] [EOL] penalty = [number] [EOL] shot = [number] [EOL] stop = [number] [EOL] takeaway = [number] [EOL] [EOL] [EOL] class ShotType ( enum . Enum ) : [EOL] backhand = [number] [EOL] deflected = [number] [EOL] slap = [number] [EOL] snap = [number] [EOL] tip = [number] [EOL] wrap_around = [number] [EOL] wrist = [number] [EOL] [EOL] [EOL] class Team : [EOL] def __init__ ( self , id , name , team_name , abbreviation , city ) : [EOL] self . id = id [EOL] self . name = name [EOL] self . team_name = team_name [EOL] self . abbreviation = abbreviation [EOL] self . city = city [EOL] [EOL] [EOL] class TeamSchema ( Schema ) : [EOL] id = fields . Integer ( ) [EOL] name = fields . String ( ) [EOL] team_name = fields . String ( ) [EOL] abbreviation = fields . String ( ) [EOL] city = fields . String ( ) [EOL] [EOL] [EOL] class Player : [EOL] def __init__ ( self , id , first_name , last_name , position ) : [EOL] self . id = id [EOL] self . first_name = first_name [EOL] self . last_name = last_name [EOL] self . position = position [EOL] [EOL] [EOL] class PlayerSchema ( Schema ) : [EOL] id = fields . Integer ( ) [EOL] first_name = fields . String ( ) [EOL] last_name = fields . String ( ) [EOL] position = EnumField ( PlayerPosition ) [EOL] [EOL] [EOL] class Game : [EOL] def __init__ ( self , id , home , away , start_date ) : [EOL] self . id = id [EOL] self . home = home [EOL] self . away = away [EOL] self . start_date = start_date [EOL] [EOL] [EOL] class Event : [EOL] def __init__ ( self , id , game , team , type , date , period ) : [EOL] self . id = id [EOL] self . game = game [EOL] self . team = team [EOL] self . type = type [EOL] self . date = date [EOL] self . period = period [EOL] [EOL] [EOL] def parse_enum ( check_enum , type_str ) : [EOL] for e in check_enum : [EOL] if e . name == type_str . lower ( ) : [EOL] return e [EOL] return None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $puckdb.model.Game$ 0 $puckdb.model.Team$ 0 $puckdb.model.EventType$ 0 $datetime.datetime.datetime$ 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $puckdb.model.Game$ 0 $puckdb.model.Game$ 0 0 0 $puckdb.model.Team$ 0 $puckdb.model.Team$ 0 0 0 $puckdb.model.EventType$ 0 $puckdb.model.EventType$ 0 0 0 $datetime.datetime.datetime$ 0 $datetime.datetime.datetime$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0