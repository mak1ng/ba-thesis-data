from setuptools import find_packages , setup [EOL] [EOL] [EOL] def readme ( ) : [EOL] with open ( [string] ) as f : [EOL] return f . read ( ) [EOL] [EOL] [EOL] setup ( name = [string] , version = [string] , description = [string] , long_description = readme ( ) , keywords = [string] , classifiers = [ [string] , [string] , [string] , [string] , [string] ] , url = [string] , author = [string] , author_email = [string] , packages = find_packages ( where = [string] ) , package_dir = { [string] : [string] } , license = [string] , scripts = [ [string] ] , install_requires = [ [string] , [string] , [string] , [string] ] , include_package_data = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from concurrent . futures import ThreadPoolExecutor [EOL] [EOL] import pytest [EOL] [EOL] [EOL] @ pytest . fixture def thread_pool_executor ( ) : [EOL] return ThreadPoolExecutor ( [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Union [EOL] import typing [EOL] DEFAULT_CONFIG = { [string] : { [string] : [string] , [string] : [string] } , [string] : { [string] : False } , [string] : { [string] : False } } [EOL]	0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,builtins.bool],typing.Dict[builtins.str,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
from typing import Any [EOL] import builtins [EOL] import typing [EOL] import requests [EOL] import requests [EOL] [EOL] from kata . domain . exceptions import ApiLimitReached , InvalidAuthToken [EOL] [EOL] [EOL] class GithubApi : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , auth_token ) : [EOL] self . _requests = requests [EOL] self . _auth_token = auth_token [EOL] [EOL] def contents ( self , user , repo , path = [string] ) : [EOL] url = f' [string] { user } [string] { repo } [string] ' [EOL] if path : [EOL] url += f' [string] { path }' [EOL] [EOL] response = self . _get_url ( url ) [EOL] return response . json ( ) [EOL] [EOL] def download_raw_text_file ( self , raw_text_file_url ) : [EOL] response = self . _get_url ( raw_text_file_url ) [EOL] return response . text [EOL] [EOL] def _get_url ( self , url ) : [EOL] response = self . _requests . get ( url , headers = self . _headers ( ) ) [EOL] self . _validate_response ( response ) [EOL] return response [EOL] [EOL] def _headers ( self ) : [EOL] if not self . _auth_token : [EOL] return { } [EOL] return { [string] : f' [string] { self . _auth_token }' } [EOL] [EOL] def _validate_response ( self , response ) : [EOL] def rate_limit_reached ( ) : [EOL] def unauthorised ( ) : [EOL] return response . status_code == [number] [EOL] [EOL] def limit_reached ( ) : [EOL] return int ( response . headers . get ( [string] , - [number] ) ) == [number] [EOL] [EOL] return unauthorised ( ) and limit_reached ( ) [EOL] [EOL] def invalid_auth ( ) : [EOL] return response . status_code == [number] [EOL] [EOL] if rate_limit_reached ( ) : [EOL] raise ApiLimitReached ( ) [EOL] if invalid_auth ( ) : [EOL] raise InvalidAuthToken ( self . _auth_token ) [EOL] response . raise_for_status ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.Response$ 0 0 0 0 0
import pathlib [EOL] import builtins [EOL] from pathlib import Path [EOL] [EOL] import yaml [EOL] [EOL] [EOL] class FileWriter : [EOL] @ staticmethod def write_to_file_in_sub_path ( root_dir , file_sub_path , file_content ) : [EOL] def create_dir_hierarchy_if_does_not_exist ( ) : [EOL] file_full_path . parent . mkdir ( parents = True , exist_ok = True ) [EOL] [EOL] def write_to_file ( ) : [EOL] with file_full_path . open ( [string] ) as file : [EOL] file . write ( file_content ) [EOL] [EOL] file_full_path = root_dir / file_sub_path [EOL] create_dir_hierarchy_if_does_not_exist ( ) [EOL] write_to_file ( ) [EOL] [EOL] @ staticmethod def write_yaml_to_file ( file_path , yaml_data ) : [EOL] with file_path . open ( [string] ) as f : [EOL] yaml . dump ( yaml_data , f , default_flow_style = False ) [EOL] [EOL] [EOL] class FileReader : [EOL] @ staticmethod def read_yaml ( file_path ) : [EOL] with file_path . open ( [string] ) as f : [EOL] return yaml . load ( f ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $builtins.dict$ 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 $pathlib.Path$ 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import concurrent [EOL] import click [EOL] import pathlib [EOL] import kata [EOL] import src [EOL] from concurrent . futures import ThreadPoolExecutor [EOL] from pathlib import Path [EOL] from pprint import pprint [EOL] from textwrap import dedent [EOL] from typing import List [EOL] [EOL] import click [EOL] [EOL] from kata . data . io . file import FileWriter , FileReader [EOL] from kata . data . io . network import GithubApi [EOL] from kata . data . repos import KataTemplateRepo , KataLanguageRepo , ConfigRepo [EOL] from kata . domain . exceptions import KataError , KataLanguageNotFound , KataTemplateNotFound [EOL] from kata . domain . grepo import GRepo [EOL] from kata . domain . models import DownloadableFile [EOL] from kata . domain . services import InitKataService , LoginService [EOL] [EOL] SANDBOX = Path ( [string] ) [EOL] [EOL] [EOL] @ click . group ( ) @ click . pass_context def cli ( ctx ) : [EOL] config_file_path_as_string = [string] [EOL] config_file = Path ( config_file_path_as_string ) . expanduser ( ) [EOL] if not config_file . exists ( ) : [EOL] print_warning ( [string] ) [EOL] print_warning ( [string] ) [EOL] print_warning ( [string] ) [EOL] print_warning ( f" [string] { config_file_path_as_string } [string] " ) [EOL] print_warning ( [string] ) [EOL] try : [EOL] main = KataMainContext ( config_file ) [EOL] ctx . obj = main [EOL] print_warning_if_not_auth ( main ) [EOL] except KataError as error : [EOL] print_error ( str ( error ) ) [EOL] exit ( [number] ) [EOL] [EOL] [EOL] @ cli . command ( ) @ click . pass_context @ click . argument ( [string] ) @ click . argument ( [string] ) @ click . argument ( [string] , required = False ) def init ( ctx , kata_name , template_language , template_name ) : [EOL] main_ctx = ctx . obj [EOL] [EOL] current_dir = Path ( [string] ) [EOL] print_normal ( f" [string] { kata_name } [string] " ) [EOL] print_normal ( f" [string] { template_language } [string] " ) [EOL] print_normal ( f" [string] { template_name } [string] " ) [EOL] print_normal ( [string] ) [EOL] try : [EOL] main_ctx . init_kata_service . init_kata ( current_dir , kata_name , template_language , template_name ) [EOL] print_success ( [string] ) [EOL] [EOL] except KataLanguageNotFound as lang_not_found : [EOL] print_error ( f" [string] { template_language } [string] " ) [EOL] print_error ( [string] ) [EOL] print_error ( [string] ) [EOL] for lang in lang_not_found . available_languages : [EOL] print_error ( f" [string] { lang . name }" ) [EOL] [EOL] except KataTemplateNotFound as template_not_found : [EOL] def has_only_root_template ( ) : [EOL] return len ( template_not_found . available_templates ) == [number] \ [EOL] and template_not_found . available_templates [ [number] ] . template_name is None [EOL] [EOL] print_error ( f" [string] { template_name } [string] " ) [EOL] print_error ( [string] ) [EOL] [EOL] if has_only_root_template ( ) : [EOL] print_warning ( f" [string] { template_language } [string] " ) [EOL] print_warning ( f" [string] { template_language } [string] " ) [EOL] print_warning ( [string] ) [EOL] print_warning ( f" [string] { kata_name } [string] { template_language }" ) [EOL] print_warning ( [string] ) [EOL] else : [EOL] print_error ( f" [string] { template_language } [string] " ) [EOL] for template in template_not_found . available_templates : [EOL] print_error ( f" [string] { template . template_name }" ) [EOL] [EOL] except KataError as error : [EOL] print_error ( str ( error ) ) [EOL] [EOL] [EOL] @ cli . group ( ) @ click . pass_context def list ( _ctx ) : [EOL] pass [EOL] [EOL] [EOL] @ list . command ( ) @ click . pass_context def languages ( ctx ) : [EOL] main_ctx = ctx . obj [EOL] try : [EOL] available_kata_languages = main_ctx . init_kata_service . list_available_languages ( ) [EOL] print_normal ( [string] ) [EOL] for lang in available_kata_languages : [EOL] print_normal ( f" [string] { lang . name } [string] " ) [EOL] [EOL] except KataError as error : [EOL] print_error ( str ( error ) ) [EOL] [EOL] [EOL] @ list . command ( ) @ click . pass_context @ click . argument ( [string] ) def templates ( ctx , language ) : [EOL] main_ctx = ctx . obj [EOL] try : [EOL] available_kata_templates = main_ctx . init_kata_service . list_available_templates ( language ) [EOL] print_normal ( f" [string] { language } [string] " ) [EOL] for template in available_kata_templates : [EOL] print_normal ( f" [string] { template . template_name } [string] " ) [EOL] [EOL] except KataLanguageNotFound as lang_not_found : [EOL] print_error ( f" [string] { language } [string] " ) [EOL] print_error ( [string] ) [EOL] print_error ( [string] ) [EOL] for lang in lang_not_found . available_languages : [EOL] print_error ( f" [string] { lang . name }" ) [EOL] [EOL] except KataError as error : [EOL] print_error ( str ( error ) ) [EOL] [EOL] [EOL] @ cli . group ( ) @ click . pass_context def debug ( _ctx ) : [EOL] pass [EOL] [EOL] [EOL] @ debug . command ( ) @ click . argument ( [string] ) @ click . argument ( [string] ) @ click . argument ( [string] , default = [string] ) @ click . pass_context def explore ( ctx , github_user , repo , sub_path_in_repo ) : [EOL] main_ctx = ctx . obj [EOL] click . echo ( [string] ) [EOL] click . echo ( [string] ) [EOL] click . echo ( [string] ) [EOL] click . echo ( f" [string] { github_user } [string] " ) [EOL] click . echo ( f" [string] { repo } [string] " ) [EOL] click . echo ( f" [string] { sub_path_in_repo } [string] " ) [EOL] click . echo ( [string] ) [EOL] result = main_ctx . grepo . get_files_to_download ( github_user , repo , sub_path_in_repo ) [EOL] pprint ( result ) [EOL] click . echo ( [string] ) [EOL] click . echo ( [string] ) [EOL] [EOL] [EOL] @ debug . command ( ) @ click . argument ( [string] ) @ click . argument ( [string] ) @ click . argument ( [string] , default = [string] ) @ click . pass_context def download ( ctx , github_user , repo , sub_path_in_repo ) : [EOL] if not SANDBOX . exists ( ) : [EOL] raise KataError ( [string] ) [EOL] for _ in SANDBOX . iterdir ( ) : [EOL] raise KataError ( [string] ) [EOL] [EOL] main_ctx = ctx . obj [EOL] click . echo ( f' [string] { SANDBOX . absolute ( ) }' ) [EOL] [EOL] repo_files = main_ctx . grepo . get_files_to_download ( github_user , repo , sub_path_in_repo ) [EOL] click . echo ( [string] ) [EOL] main_ctx . grepo . download_files_at_location ( SANDBOX , repo_files ) [EOL] click . echo ( [string] ) [EOL] [EOL] [EOL] @ debug . command ( ) def debug ( ) : [EOL] p = Path ( [string] ) . expanduser ( ) [EOL] print_normal ( p . absolute ( ) ) [EOL] [EOL] [EOL] class KataMainContext : [EOL] file_reader = ... [EOL] file_writer = ... [EOL] api = ... [EOL] executor = ... [EOL] [EOL] config_repo = ... [EOL] kata_template_repo = ... [EOL] kata_language_repo = ... [EOL] [EOL] grepo = ... [EOL] init_kata_service = ... [EOL] login_service = ... [EOL] [EOL] def __init__ ( self , config_file ) : [EOL] self . config_file = config_file [EOL] [EOL] def init_base_deps ( ) : [EOL] self . executor = ThreadPoolExecutor ( [number] ) [EOL] self . file_writer = FileWriter ( ) [EOL] self . file_reader = FileReader ( ) [EOL] [EOL] def init_config ( ) : [EOL] self . config_repo = ConfigRepo ( self . config_file , self . file_reader , self . file_writer ) [EOL] [EOL] def init_network ( ) : [EOL] auth_token = self . config_repo . get_auth_token ( ) [EOL] self . api = GithubApi ( auth_token ) [EOL] [EOL] def init_repos ( ) : [EOL] self . kata_template_repo = KataTemplateRepo ( self . api , self . config_repo ) [EOL] self . kata_language_repo = KataLanguageRepo ( self . api , self . config_repo ) [EOL] [EOL] def init_domain ( ) : [EOL] self . grepo = GRepo ( self . api , self . file_writer , self . executor ) [EOL] self . init_kata_service = InitKataService ( self . kata_language_repo , self . kata_template_repo , self . grepo , self . config_repo ) [EOL] self . login_service = LoginService ( self . config_repo ) [EOL] [EOL] init_base_deps ( ) [EOL] init_config ( ) [EOL] init_network ( ) [EOL] init_repos ( ) [EOL] init_domain ( ) [EOL] [EOL] [EOL] def print_error ( msg ) : [EOL] click . secho ( msg , fg = [string] ) [EOL] [EOL] [EOL] def print_success ( msg ) : [EOL] click . secho ( msg , fg = [string] ) [EOL] [EOL] [EOL] def print_warning ( msg ) : [EOL] click . secho ( msg , fg = [string] ) [EOL] [EOL] [EOL] def print_normal ( msg ) : [EOL] click . echo ( msg ) [EOL] [EOL] [EOL] def print_warning_if_not_auth ( main_context ) : [EOL] if main_context . login_service . is_logged_in ( ) : [EOL] return [EOL] if main_context . login_service . should_skip_not_logged_in_warning ( ) : [EOL] return [EOL] [EOL] print_warning ( dedent ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kata.data.io.file.FileReader$ 0 0 0 $kata.data.io.file.FileWriter$ 0 0 0 $kata.data.io.network.GithubApi$ 0 0 0 $concurrent.futures.ThreadPoolExecutor$ 0 0 0 0 $kata.data.repos.ConfigRepo$ 0 0 0 $kata.data.repos.KataTemplateRepo$ 0 0 0 $kata.data.repos.KataLanguageRepo$ 0 0 0 0 $kata.domain.grepo.GRepo$ 0 0 0 $kata.domain.services.InitKataService$ 0 0 0 $kata.domain.services.LoginService$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $concurrent.futures.thread.ThreadPoolExecutor$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from pathlib import Path [EOL] from typing import NamedTuple , Optional [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] class DownloadableFile ( NamedTuple ) : [EOL] file_path = ... [EOL] download_url = ... [EOL] [EOL] [EOL] class KataLanguage ( NamedTuple ) : [EOL] name = ... [EOL] [EOL] [EOL] class KataTemplate ( NamedTuple ) : [EOL] language = ... [EOL] template_name = ... [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $KataLanguage$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0
from typing import List [EOL] import kata [EOL] import builtins [EOL] import typing [EOL] from typing import List [EOL] [EOL] from kata . domain . models import KataLanguage , KataTemplate [EOL] [EOL] [EOL] class KataError ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class InvalidKataName ( KataError ) : [EOL] def __init__ ( self , kata_name , reason = None ) : [EOL] super ( ) . __init__ ( f" [string] { kata_name } [string] " ) [EOL] self . kata_name = kata_name [EOL] self . reason = reason [EOL] [EOL] [EOL] class KataLanguageNotFound ( KataError ) : [EOL] def __init__ ( self , available_languages = None ) : [EOL] self . available_languages = available_languages [EOL] [EOL] [EOL] class KataTemplateNotFound ( KataError ) : [EOL] def __init__ ( self , available_templates = None ) : [EOL] self . available_templates = available_templates [EOL] [EOL] [EOL] class InvalidConfig ( KataError ) : [EOL] pass [EOL] [EOL] [EOL] class ApiError ( KataError ) : [EOL] pass [EOL] [EOL] [EOL] class ApiLimitReached ( ApiError ) : [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( [string] ) [EOL] [EOL] [EOL] class InvalidAuthToken ( ApiError ) : [EOL] def __init__ ( self , token ) : [EOL] super ( ) . __init__ ( f" [string] { token } [string] " ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import concurrent [EOL] import builtins [EOL] import pathlib [EOL] import kata [EOL] from concurrent import futures [EOL] from pathlib import Path [EOL] from typing import NamedTuple , List [EOL] [EOL] from kata . data . io . file import FileWriter [EOL] from kata . data . io . network import GithubApi [EOL] from kata . domain . models import DownloadableFile [EOL] [EOL] [EOL] class _DownloadedFile ( NamedTuple ) : [EOL] file_path = ... [EOL] file_text_contents = ... [EOL] [EOL] [EOL] class GRepo : [EOL] [EOL] def __init__ ( self , api , file_writer , executor ) : [EOL] self . _api = api [EOL] self . _executor = executor [EOL] self . _file_writer = file_writer [EOL] [EOL] def get_files_to_download ( self , user , repo , path ) : [EOL] [docstring] [EOL] files = self . _get_files_in_dir ( user , repo , path ) [EOL] downloadable_files = self . _map_to_model ( files ) [EOL] downloadable_files = self . _remove_nesting_if_in_sub_path ( downloadable_files , path ) [EOL] return downloadable_files [EOL] [EOL] def download_files_at_location ( self , root_dir , files_to_download ) : [EOL] if not root_dir . exists ( ) : [EOL] root_dir . mkdir ( ) [EOL] [EOL] if not root_dir . is_dir ( ) : [EOL] raise FileExistsError ( f" [string] { root_dir } [string] " ) [EOL] [EOL] download_file_futures = [ ] [EOL] for file_to_download in files_to_download : [EOL] download_file_futures . append ( self . _executor . submit ( self . _download_file , file_to_download ) ) [EOL] [EOL] for download_file_future in futures . as_completed ( download_file_futures ) : [EOL] downloaded_file = download_file_future . result ( ) [EOL] self . _file_writer . write_to_file_in_sub_path ( root_dir , downloaded_file . file_path , downloaded_file . file_text_contents ) [EOL] [EOL] def _get_files_in_dir ( self , user , repo , dir_path ) : [EOL] def filter_by_type ( contents , content_type ) : [EOL] return [ entry for entry in contents if entry [ [string] ] == content_type ] [EOL] [EOL] def get_files_in_all_sub_dirs_async ( ) : [EOL] sub_dir_files_futures = [ ] [EOL] for sub_dir in sub_dirs : [EOL] sub_dir_path = f"{ dir_path } [string] { sub_dir [ [string] ] }" . lstrip ( [string] ) [EOL] sub_dir_files_future = self . _executor . submit ( self . _get_files_in_dir , user , repo , sub_dir_path ) [EOL] sub_dir_files_futures += [ sub_dir_files_future ] [EOL] [EOL] all_sub_dir_files = [ ] [EOL] for sub_dir_files_future in futures . as_completed ( sub_dir_files_futures ) : [EOL] sub_dir_files = sub_dir_files_future . result ( ) [EOL] all_sub_dir_files += sub_dir_files [EOL] [EOL] return all_sub_dir_files [EOL] [EOL] dir_contents = self . _api . contents ( user , repo , dir_path ) [EOL] files = filter_by_type ( dir_contents , [string] ) [EOL] sub_dirs = filter_by_type ( dir_contents , [string] ) [EOL] return files + get_files_in_all_sub_dirs_async ( ) [EOL] [EOL] @ staticmethod def _remove_nesting_if_in_sub_path ( files , sub_path ) : [EOL] if not sub_path : [EOL] return files [EOL] [EOL] def files_with_sub_path_at_root ( ) : [EOL] for file in files : [EOL] yield DownloadableFile ( file_path = file . file_path . relative_to ( sub_path ) , download_url = file . download_url ) [EOL] [EOL] return list ( files_with_sub_path_at_root ( ) ) [EOL] [EOL] @ staticmethod def _map_to_model ( contents ) : [EOL] return [ DownloadableFile ( file_path = Path ( file [ [string] ] ) , download_url = file [ [string] ] ) for file in contents ] [EOL] [EOL] def _download_file ( self , file ) : [EOL] file_contents = self . _api . download_raw_text_file ( file . download_url ) [EOL] return _DownloadedFile ( file_path = file . file_path , file_text_contents = file_contents ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kata.data.io.network.GithubApi$ 0 $kata.data.io.file.FileWriter$ 0 $concurrent.futures.Executor$ 0 0 0 0 0 0 0 $kata.data.io.network.GithubApi$ 0 0 0 $concurrent.futures._base.Executor$ 0 $concurrent.futures.Executor$ 0 0 0 0 0 $kata.data.io.file.FileWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $None$ 0 0 0 $pathlib.Path$ 0 $typing.List[kata.domain.models.DownloadableFile]$ 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[kata.domain.models.DownloadableFile]$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $concurrent.futures._base.Future[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $concurrent.futures._base.Future[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $concurrent.futures._base.Future[typing.Any]$ 0 0 $concurrent.futures._base.Future[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $concurrent.futures._base.Future[typing.Any]$ 0 0 0 0 0 $concurrent.futures._base.Future[typing.Any]$ 0 0 0 $typing.Any$ 0 $concurrent.futures._base.Future[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[kata.domain.models.DownloadableFile]$ 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[kata.domain.models.DownloadableFile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kata.domain.models.DownloadableFile$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $kata.domain.models.DownloadableFile$ 0 0 0 0 0 0 0 0 0 $kata.domain.models.DownloadableFile$ 0 0 0 0 0 $typing.Any$ 0 0
	0
from typing import List , Any , Optional [EOL] import pathlib [EOL] import builtins [EOL] import typing [EOL] import kata [EOL] import re [EOL] from pathlib import Path [EOL] from typing import Optional , List [EOL] [EOL] from kata . data . repos import KataTemplateRepo , KataLanguageRepo , ConfigRepo [EOL] from kata . domain . exceptions import InvalidKataName , KataLanguageNotFound , KataTemplateNotFound [EOL] from kata . domain . grepo import GRepo [EOL] from kata . domain . models import KataLanguage , KataTemplate [EOL] [EOL] [EOL] class InitKataService : [EOL] def __init__ ( self , kata_language_repo , kata_template_repo , grepo , config_repo ) : [EOL] self . _kata_language_repo = kata_language_repo [EOL] self . _kata_template_repo = kata_template_repo [EOL] self . _config_repo = config_repo [EOL] self . _grepo = grepo [EOL] [EOL] def init_kata ( self , parent_dir , kata_name , template_language , template_name ) : [EOL] self . _validate_parent_dir ( parent_dir ) [EOL] self . _validate_kata_name ( kata_name ) [EOL] [EOL] kata_template = self . _get_kata_template ( template_language , template_name ) [EOL] path = self . _build_path ( kata_template ) [EOL] files_to_download = self . _grepo . get_files_to_download ( user = self . _config_repo . get_kata_grepo_username ( ) , repo = self . _config_repo . get_kata_grepo_reponame ( ) , path = path ) [EOL] kata_dir = parent_dir / kata_name [EOL] self . _grepo . download_files_at_location ( kata_dir , files_to_download ) [EOL] [EOL] def list_available_languages ( self ) : [EOL] return self . _kata_language_repo . get_all ( ) [EOL] [EOL] def list_available_templates ( self , language ) : [EOL] kata_language = self . _get_kata_language_or_raise ( language ) [EOL] return self . _kata_template_repo . get_for_language ( kata_language ) [EOL] [EOL] @ staticmethod def _validate_parent_dir ( parent_dir ) : [EOL] if not parent_dir . exists ( ) : [EOL] raise FileNotFoundError ( f" [string] { parent_dir . absolute ( ) } [string] " ) [EOL] [EOL] @ staticmethod def _validate_kata_name ( kata_name ) : [EOL] def has_spaces ( ) : [EOL] return len ( kata_name . split ( [string] ) ) > [number] [EOL] [EOL] if not kata_name : [EOL] raise InvalidKataName ( kata_name , reason = [string] ) [EOL] if has_spaces ( ) : [EOL] raise InvalidKataName ( kata_name , reason = [string] ) [EOL] [EOL] if not re . match ( [string] , kata_name ) : [EOL] raise InvalidKataName ( kata_name ) [EOL] [EOL] def _get_kata_template ( self , template_language , template_name ) : [EOL] [EOL] def only_one_available_for_language ( ) : [EOL] return len ( templates_for_language ) == [number] [EOL] [EOL] def first ( ) : [EOL] return templates_for_language [ [number] ] [EOL] [EOL] def first_found_or_raise_template_not_found ( ) : [EOL] for template in templates_for_language : [EOL] if template . template_name == template_name : [EOL] return template [EOL] [EOL] raise KataTemplateNotFound ( templates_for_language ) [EOL] [EOL] kata_language = self . _get_kata_language_or_raise ( template_language ) [EOL] templates_for_language = self . _kata_template_repo . get_for_language ( kata_language ) [EOL] [EOL] if not template_name and only_one_available_for_language ( ) : [EOL] return first ( ) [EOL] return first_found_or_raise_template_not_found ( ) [EOL] [EOL] def _get_kata_language_or_raise ( self , language_name ) : [EOL] res = self . _kata_language_repo . get ( language_name ) [EOL] if not res : [EOL] all_languages = self . _kata_language_repo . get_all ( ) [EOL] raise KataLanguageNotFound ( all_languages ) [EOL] return res [EOL] [EOL] @ staticmethod def _build_path ( kata_template ) : [EOL] path = kata_template . language . name [EOL] if kata_template . template_name : [EOL] path += [string] + kata_template . template_name [EOL] return path [EOL] [EOL] [EOL] class LoginService : [EOL] def __init__ ( self , config_repo ) : [EOL] self . _config_repo = config_repo [EOL] [EOL] def is_logged_in ( self ) : [EOL] return self . _config_repo . get_auth_token ( ) is not None [EOL] [EOL] def should_skip_not_logged_in_warning ( self ) : [EOL] return self . _config_repo . should_skip_not_logged_in_warning ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $typing.Any$ 0 0 0 0 $typing.List[kata.domain.models.KataLanguage]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[kata.domain.models.KataTemplate]$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kata.data.repos.ConfigRepo$ 0 0 0 0 0 0 0 $kata.data.repos.ConfigRepo$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , List [EOL] import typing [EOL] import tests [EOL] import concurrent [EOL] import requests [EOL] import pathlib [EOL] import textwrap [EOL] from concurrent import futures [EOL] from concurrent . futures import ThreadPoolExecutor [EOL] from pathlib import Path [EOL] from pprint import pprint [EOL] [EOL] import pytest [EOL] import requests [EOL] [EOL] from kata . data . io . file import FileWriter [EOL] from kata . data . io . network import GithubApi [EOL] from kata . data . repos import KataTemplateRepo , HardCoded [EOL] from kata . domain . grepo import GRepo [EOL] from kata . domain . models import KataTemplate [EOL] from kata . domain . services import InitKataService [EOL] [EOL] [EOL] class SandboxContext : [EOL] def __init__ ( self ) : [EOL] self . executor = ThreadPoolExecutor ( [number] ) [EOL] self . api = GithubApi ( ) [EOL] self . file_writer = FileWriter ( ) [EOL] self . grepo = GRepo ( self . api , self . file_writer , self . executor ) [EOL] self . kata_template_repo = HardCoded . KataTemplateRepo ( ) [EOL] self . real_kata_template_repo = KataTemplateRepo ( self . api ) [EOL] self . sandbox_dir = Path ( [string] ) [EOL] self . init_kata_service = InitKataService ( self . kata_template_repo , self . grepo ) [EOL] [EOL] [EOL] class TestSandbox : [EOL] [EOL] @ pytest . mark . skip ( reason = None ) def test_explore_repo ( self ) : [EOL] github_user = [string] [EOL] [comment] [EOL] repo_name = [string] [EOL] path = [string] [EOL] thread_pool_executor = futures . ThreadPoolExecutor ( [number] , thread_name_prefix = [string] ) [EOL] api = GithubApi ( ) [EOL] repo = GRepo ( api , thread_pool_executor ) [EOL] [EOL] result = repo . get_files_to_download ( github_user , repo_name , path ) [EOL] pprint ( result ) [EOL] [EOL] @ pytest . mark . skip def test_download_raw_file ( self ) : [EOL] res = requests . get ( [string] ) [EOL] [EOL] print ( res . text ) [EOL] [EOL] @ pytest . mark . skip def test_invalid_file ( self ) : [EOL] res = requests . get ( [string] ) [EOL] res = requests . get ( [string] ) [EOL] res . raise_for_status ( ) [EOL] [comment] [EOL] [EOL] print ( res ) [EOL] print ( res . text ) [EOL] [EOL] @ pytest . mark . skip def test_write_subpath ( self ) : [EOL] def write_sandbox_file ( path_relative_to_sandbox_root , content ) : [EOL] def create_dir_hierarchy_if_does_not_exist ( ) : [EOL] file_path . parent . mkdir ( parents = True , exist_ok = True ) [EOL] [EOL] def write_to_file ( ) : [EOL] with file_path . open ( [string] ) as sandbox_file : [EOL] sandbox_file . write ( content ) [EOL] [EOL] file_path = Path ( SANDBOX_DIR , path_relative_to_sandbox_root ) [EOL] create_dir_hierarchy_if_does_not_exist ( ) [EOL] write_to_file ( ) [EOL] [EOL] write_sandbox_file ( [string] , [string] ) [EOL] write_sandbox_file ( [string] , [string] ) [EOL] [EOL] write_sandbox_file ( [string] , textwrap . dedent ( [string] ) ) [EOL] [EOL] @ pytest . mark . skip def test_for_loop_scope ( self ) : [EOL] some_numbers = [ [number] , [number] , [number] ] [EOL] for number in some_numbers : [EOL] declared_inside_loop = number [EOL] print ( f' [string] { number }' ) [EOL] [EOL] last_number = some_numbers [ - [number] ] [EOL] assert declared_inside_loop == last_number [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] @ pytest . mark . skip def test_kata_template_repo ( self ) : [EOL] repo = KataTemplateRepo ( ) [EOL] [EOL] assert repo . get_all ( ) == [ KataTemplate ( [string] , [string] ) , KataTemplate ( [string] , [string] ) , KataTemplate ( [string] , [string] ) , KataTemplate ( [string] , [string] ) ] [EOL] assert repo . get_for_language ( [string] ) == [ KataTemplate ( [string] , [string] ) , KataTemplate ( [string] , [string] ) ] [EOL] [EOL] @ pytest . mark . skip def test_raise_if_used ( self ) : [EOL] class ShouldNeverBeUsed : [EOL] def __getattribute__ ( self , name ) : [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] def __str__ ( self ) : [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] a = ShouldNeverBeUsed ( ) [EOL] [comment] [EOL] print ( a . test ) [EOL] [EOL] @ pytest . mark . skip def test_asdfasdf ( self ) : [EOL] context = SandboxContext ( ) [EOL] context . kata_template_repo . available_templates = { [string] : [ [string] , [string] ] } [EOL] context . init_kata_service . init_kata ( context . sandbox_dir , [string] , [string] , [string] ) [EOL] [EOL] @ pytest . mark . skip def test_list_kata_templates ( self ) : [EOL] context = SandboxContext ( ) [EOL] [EOL] def print_templates ( language ) : [EOL] templates = context . real_kata_template_repo . get_for_language ( language ) [EOL] print ( templates ) [EOL] [EOL] print_templates ( [string] ) [EOL] print_templates ( [string] ) [EOL] print_templates ( [string] ) [EOL] print_templates ( [string] ) [EOL] print_templates ( [string] ) [EOL] print_templates ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $concurrent.futures.thread.ThreadPoolExecutor$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $concurrent.futures.thread.ThreadPoolExecutor$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $concurrent.futures.thread.ThreadPoolExecutor$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $concurrent.futures.thread.ThreadPoolExecutor$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.kata.test_sandbox.SandboxContext$ 0 0 0 0 0 $tests.kata.test_sandbox.SandboxContext$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.kata.test_sandbox.SandboxContext$ 0 0 0 0 0 $tests.kata.test_sandbox.SandboxContext$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.kata.test_sandbox.SandboxContext$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Any , Union [EOL] import typing [EOL] import pathlib [EOL] import kata [EOL] import unittest [EOL] from pathlib import Path [EOL] from typing import Union [EOL] from unittest import mock [EOL] from unittest . mock import MagicMock [EOL] [EOL] import pytest [EOL] [EOL] from kata . data . repos import HardCoded [EOL] from kata . defaults import DEFAULT_CONFIG [EOL] from kata . domain . exceptions import InvalidKataName , KataLanguageNotFound , KataTemplateNotFound [EOL] from kata . domain . grepo import GRepo [EOL] from kata . domain . models import DownloadableFile , KataLanguage , KataTemplate [EOL] from kata . domain . services import InitKataService , LoginService [EOL] [EOL] NOT_USED = [string] [EOL] VALID_KATA_NAME = [string] [EOL] [EOL] MOCK_FILES_TO_DOWNLOAD = [ DownloadableFile ( Path ( [string] ) , [string] ) , DownloadableFile ( Path ( [string] ) , [string] ) , DownloadableFile ( Path ( [string] ) , [string] ) ] [EOL] [EOL] [EOL] @ pytest . fixture def config_repo ( ) : [EOL] return HardCoded . ConfigRepo ( ) [EOL] [EOL] [EOL] class TestInitKataService : [EOL] [EOL] @ pytest . fixture @ mock . patch ( [string] ) def mock_grepo ( self , mocked_grepo , ) : [EOL] mocked_grepo . get_files_to_download . return_value = MOCK_FILES_TO_DOWNLOAD [EOL] return mocked_grepo [EOL] [EOL] @ pytest . fixture def kata_template_repo ( self ) : [EOL] return HardCoded . KataTemplateRepo ( ) [EOL] [EOL] @ pytest . fixture def kata_language_repo ( self ) : [EOL] return HardCoded . KataLanguageRepo ( ) [EOL] [EOL] @ pytest . fixture def init_kata_service ( self , kata_language_repo , kata_template_repo , mock_grepo , config_repo ) : [EOL] return InitKataService ( kata_language_repo , kata_template_repo , mock_grepo , config_repo ) [EOL] [EOL] class TestInitKata : [EOL] class TestValidCases : [EOL] def test_with_valid_template ( self , tmp_path , kata_language_repo , kata_template_repo , mock_grepo , init_kata_service ) : [EOL] [comment] [EOL] kata_language_repo . available_languages = [ [string] ] [EOL] kata_template_repo . available_templates = { [string] : [ [string] , [string] ] } [EOL] kata_name = [string] [EOL] template_lang = [string] [EOL] template_name = [string] [EOL] parent_dir = tmp_path [EOL] [EOL] [comment] [EOL] init_kata_service . init_kata ( parent_dir , kata_name , template_lang , template_name ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] mock_grepo . get_files_to_download . assert_called_with ( user = DEFAULT_CONFIG [ [string] ] [ [string] ] , repo = DEFAULT_CONFIG [ [string] ] [ [string] ] , path = [string] ) [EOL] [comment] [EOL] [comment] [EOL] mock_grepo . download_files_at_location . assert_called_with ( parent_dir / kata_name , MOCK_FILES_TO_DOWNLOAD ) [EOL] [EOL] class TestNoExplicitTemplateNameBut : [EOL] def test_only_one_template_available_for_language ( self , tmp_path , kata_language_repo , kata_template_repo , mock_grepo , init_kata_service ) : [EOL] [comment] [EOL] kata_language_repo . available_languages = [ [string] ] [EOL] kata_template_repo . available_templates = { [string] : [ [string] ] } [EOL] kata_name = [string] [EOL] template_lang = [string] [EOL] template_name = None [EOL] [EOL] [comment] [EOL] init_kata_service . init_kata ( tmp_path , kata_name , template_lang , template_name ) [EOL] [EOL] [comment] [EOL] mock_grepo . get_files_to_download . assert_called_with ( user = DEFAULT_CONFIG [ [string] ] [ [string] ] , repo = DEFAULT_CONFIG [ [string] ] [ [string] ] , path = [string] ) [EOL] [EOL] def test_only_one_template_at_root ( self , tmp_path , kata_language_repo , kata_template_repo , mock_grepo , init_kata_service ) : [EOL] [comment] [EOL] kata_language_repo . available_languages = [ [string] ] [EOL] kata_template_repo . available_templates = { [string] : [ None ] } [EOL] kata_name = [string] [EOL] template_lang = [string] [EOL] template_name = None [EOL] [EOL] [comment] [EOL] init_kata_service . init_kata ( tmp_path , kata_name , template_lang , template_name ) [EOL] [EOL] [comment] [EOL] mock_grepo . get_files_to_download . assert_called_with ( user = DEFAULT_CONFIG [ [string] ] [ [string] ] , repo = DEFAULT_CONFIG [ [string] ] [ [string] ] , path = [string] ) [EOL] [EOL] def test_default_specified_and_valid ( self ) : [EOL] [comment] [EOL] pytest . skip ( [string] ) [EOL] [EOL] class TestEdgeCases : [EOL] def test_invalid_parent_dir ( self , init_kata_service ) : [EOL] with pytest . raises ( FileNotFoundError ) as expected_error : [EOL] invalid_dir = Path ( [string] ) [EOL] init_kata_service . init_kata ( invalid_dir , kata_name = NOT_USED , template_language = NOT_USED , template_name = NOT_USED ) [EOL] [EOL] expected_error . match ( [string] ) [EOL] [EOL] class TestInvalidKataName : [EOL] def test_kata_name_empty ( self , tmp_path , init_kata_service ) : [EOL] with pytest . raises ( InvalidKataName ) : [EOL] empty_name = [string] [EOL] init_kata_service . init_kata ( tmp_path , empty_name , NOT_USED , NOT_USED ) [EOL] [EOL] def test_kata_name_with_spaces ( self , tmp_path , init_kata_service ) : [EOL] with pytest . raises ( InvalidKataName ) : [EOL] name_with_spaces = [string] [EOL] init_kata_service . init_kata ( tmp_path , name_with_spaces , NOT_USED , NOT_USED ) [EOL] [EOL] def test_kata_name_with_special_char_besides_underscore ( self , tmp_path , init_kata_service ) : [EOL] with pytest . raises ( InvalidKataName ) : [EOL] name_with_special_chars = [string] [EOL] init_kata_service . init_kata ( tmp_path , name_with_special_chars , NOT_USED , NOT_USED ) [EOL] [EOL] with pytest . raises ( InvalidKataName ) : [EOL] name_with_special_chars = [string] [EOL] init_kata_service . init_kata ( tmp_path , name_with_special_chars , NOT_USED , NOT_USED ) [EOL] [EOL] class TestInvalidTemplate : [EOL] def test_language_doesnt_exist ( self , tmp_path , init_kata_service , kata_language_repo , kata_template_repo ) : [EOL] with pytest . raises ( KataLanguageNotFound ) as language_not_found_error : [EOL] kata_language_repo . available_languages = [ [string] ] [EOL] kata_template_repo . available_templates = { [string] : [ [string] , [string] ] } [EOL] init_kata_service . init_kata ( tmp_path , VALID_KATA_NAME , [string] , NOT_USED ) [EOL] [EOL] assert language_not_found_error . value . available_languages == [ KataLanguage ( [string] ) ] [EOL] [EOL] def test_template_name_doesnt_exist ( self , tmp_path , init_kata_service , kata_language_repo , kata_template_repo ) : [EOL] with pytest . raises ( KataTemplateNotFound ) as template_not_found_error : [EOL] kata_language_repo . available_languages = [ [string] ] [EOL] kata_template_repo . available_templates = { [string] : [ [string] , [string] ] } [EOL] init_kata_service . init_kata ( tmp_path , VALID_KATA_NAME , [string] , [string] ) [EOL] [EOL] assert template_not_found_error . value . available_templates == [ KataTemplate ( KataLanguage ( [string] ) , [string] ) , KataTemplate ( KataLanguage ( [string] ) , [string] ) ] [EOL] [EOL] def test_template_name_doesnt_exist_template_at_root ( self , tmp_path , init_kata_service , kata_language_repo , kata_template_repo ) : [EOL] with pytest . raises ( KataTemplateNotFound ) as template_not_found_error : [EOL] kata_language_repo . available_languages = [ [string] ] [EOL] kata_template_repo . available_templates = { [string] : [ None ] } [EOL] init_kata_service . init_kata ( tmp_path , VALID_KATA_NAME , [string] , [string] ) [EOL] [EOL] assert template_not_found_error . value . available_templates == [ KataTemplate ( KataLanguage ( [string] ) , None ) ] [EOL] [EOL] def test_template_name_isnt_given_but_multiple_options_are_available ( self , tmp_path , init_kata_service , kata_language_repo , kata_template_repo ) : [EOL] with pytest . raises ( KataTemplateNotFound ) as template_not_found_error : [EOL] kata_language_repo . available_languages = [ [string] ] [EOL] kata_template_repo . available_templates = { [string] : [ [string] , [string] ] } [EOL] init_kata_service . init_kata ( tmp_path , VALID_KATA_NAME , [string] , None ) [EOL] [EOL] assert template_not_found_error . value . available_templates == [ KataTemplate ( KataLanguage ( [string] ) , [string] ) , KataTemplate ( KataLanguage ( [string] ) , [string] ) ] [EOL] [EOL] def test_default_template_is_invalid ( self ) : [EOL] [comment] [EOL] pytest . skip ( [string] ) [EOL] [EOL] class TestListLanguages : [EOL] def test_valid_case ( self , init_kata_service , kata_language_repo ) : [EOL] kata_language_repo . available_languages = [ [string] , [string] ] [EOL] available_languages = init_kata_service . list_available_languages ( ) [EOL] assert available_languages == [ KataLanguage ( [string] ) , KataLanguage ( [string] ) ] [EOL] [EOL] class TestListTemplates : [EOL] def test_valid_language ( self , init_kata_service , kata_language_repo , kata_template_repo ) : [EOL] kata_language_repo . available_languages = [ [string] ] [EOL] kata_template_repo . available_templates = { [string] : [ [string] , [string] ] } [EOL] available_templates_for_java = init_kata_service . list_available_templates ( [string] ) [EOL] assert available_templates_for_java == [ KataTemplate ( KataLanguage ( [string] ) , [string] ) , KataTemplate ( KataLanguage ( [string] ) , [string] ) ] [EOL] [EOL] def test_language_doesnt_exist ( self , init_kata_service , kata_language_repo , kata_template_repo ) : [EOL] kata_language_repo . available_languages = [ [string] ] [EOL] kata_template_repo . available_templates = { [string] : [ [string] , [string] ] } [EOL] with pytest . raises ( KataLanguageNotFound ) as language_not_found_error : [EOL] init_kata_service . list_available_templates ( [string] ) [EOL] assert language_not_found_error . value . available_languages == [ KataLanguage ( [string] ) ] [EOL] [EOL] [EOL] class TestLoginService : [EOL] @ pytest . fixture def login_service ( self , config_repo ) : [EOL] return LoginService ( config_repo ) [EOL] [EOL] class TestIsLoggedIn : [EOL] def test_is_logged_in ( self , login_service , config_repo ) : [EOL] config_repo . config [ [string] ] [ [string] ] = [string] [EOL] assert login_service . is_logged_in ( ) is True [EOL] [EOL] def test_not_logged_in ( self , login_service , config_repo ) : [EOL] [comment] [EOL] [comment] [EOL] config_repo . config [ [string] ] . pop ( [string] , None ) [EOL] assert login_service . is_logged_in ( ) is False [EOL] [EOL] class TestShouldSkipWarning : [EOL] def test_should_skip ( self , login_service , config_repo ) : [EOL] config_repo . config [ [string] ] [ [string] ] = True [EOL] assert login_service . should_skip_not_logged_in_warning ( ) is True [EOL] [EOL] def test_should_not_skip ( self , login_service , config_repo ) : [EOL] config_repo . config [ [string] ] [ [string] ] = False [EOL] assert login_service . should_skip_not_logged_in_warning ( ) is False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[kata.domain.grepo.GRepo,unittest.mock.MagicMock]$ 0 0 0 0 $typing.Union[kata.domain.grepo.GRepo,unittest.mock.MagicMock]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Union[kata.domain.grepo.GRepo,unittest.mock.MagicMock]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $kata.data.repos.HardCoded.KataLanguageRepo$ 0 $kata.data.repos.HardCoded.KataTemplateRepo$ 0 $unittest.mock.MagicMock$ 0 $kata.domain.services.InitKataService$ 0 0 0 0 0 $kata.data.repos.HardCoded.KataLanguageRepo$ 0 0 0 0 0 0 0 $kata.data.repos.HardCoded.KataTemplateRepo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 $kata.domain.services.InitKataService$ 0 0 0 $pathlib.Path$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 $pathlib.Path$ 0 $builtins.str$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $kata.data.repos.HardCoded.KataLanguageRepo$ 0 $kata.data.repos.HardCoded.KataTemplateRepo$ 0 $unittest.mock.MagicMock$ 0 $kata.domain.services.InitKataService$ 0 0 0 0 0 $kata.data.repos.HardCoded.KataLanguageRepo$ 0 0 0 0 0 0 0 $kata.data.repos.HardCoded.KataTemplateRepo$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 0 0 0 $kata.domain.services.InitKataService$ 0 0 0 $pathlib.Path$ 0 $builtins.str$ 0 $builtins.str$ 0 $None$ 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $kata.data.repos.HardCoded.KataLanguageRepo$ 0 $kata.data.repos.HardCoded.KataTemplateRepo$ 0 $unittest.mock.MagicMock$ 0 $kata.domain.services.InitKataService$ 0 0 0 0 0 $kata.data.repos.HardCoded.KataLanguageRepo$ 0 0 0 0 0 0 0 $kata.data.repos.HardCoded.KataTemplateRepo$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 0 0 0 $kata.domain.services.InitKataService$ 0 0 0 $pathlib.Path$ 0 $builtins.str$ 0 $builtins.str$ 0 $None$ 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kata.domain.services.InitKataService$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $kata.domain.services.InitKataService$ 0 0 0 $pathlib.Path$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $kata.domain.services.InitKataService$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $kata.domain.services.InitKataService$ 0 0 0 $pathlib.Path$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $kata.domain.services.InitKataService$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $kata.domain.services.InitKataService$ 0 0 0 $pathlib.Path$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $kata.domain.services.InitKataService$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $kata.domain.services.InitKataService$ 0 0 0 $pathlib.Path$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $kata.domain.services.InitKataService$ 0 0 0 $pathlib.Path$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $kata.domain.services.InitKataService$ 0 $kata.data.repos.HardCoded.KataLanguageRepo$ 0 $kata.data.repos.HardCoded.KataTemplateRepo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kata.data.repos.HardCoded.KataLanguageRepo$ 0 0 0 0 0 0 0 $kata.data.repos.HardCoded.KataTemplateRepo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $kata.domain.services.InitKataService$ 0 0 0 $pathlib.Path$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $kata.domain.services.InitKataService$ 0 $kata.data.repos.HardCoded.KataLanguageRepo$ 0 $kata.data.repos.HardCoded.KataTemplateRepo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kata.data.repos.HardCoded.KataLanguageRepo$ 0 0 0 0 0 0 0 $kata.data.repos.HardCoded.KataTemplateRepo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $kata.domain.services.InitKataService$ 0 0 0 $pathlib.Path$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $kata.domain.services.InitKataService$ 0 $kata.data.repos.HardCoded.KataLanguageRepo$ 0 $kata.data.repos.HardCoded.KataTemplateRepo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kata.data.repos.HardCoded.KataLanguageRepo$ 0 0 0 0 0 0 0 $kata.data.repos.HardCoded.KataTemplateRepo$ 0 0 0 0 0 0 0 0 0 0 0 $kata.domain.services.InitKataService$ 0 0 0 $pathlib.Path$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $kata.domain.services.InitKataService$ 0 $kata.data.repos.HardCoded.KataLanguageRepo$ 0 $kata.data.repos.HardCoded.KataTemplateRepo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kata.data.repos.HardCoded.KataLanguageRepo$ 0 0 0 0 0 0 0 $kata.data.repos.HardCoded.KataTemplateRepo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $kata.domain.services.InitKataService$ 0 0 0 $pathlib.Path$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kata.domain.services.InitKataService$ 0 $kata.data.repos.HardCoded.KataLanguageRepo$ 0 0 0 $kata.data.repos.HardCoded.KataLanguageRepo$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $kata.domain.services.InitKataService$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kata.domain.services.InitKataService$ 0 $kata.data.repos.HardCoded.KataLanguageRepo$ 0 $kata.data.repos.HardCoded.KataTemplateRepo$ 0 0 0 $kata.data.repos.HardCoded.KataLanguageRepo$ 0 0 0 0 0 0 0 $kata.data.repos.HardCoded.KataTemplateRepo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $kata.domain.services.InitKataService$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kata.domain.services.InitKataService$ 0 $kata.data.repos.HardCoded.KataLanguageRepo$ 0 $kata.data.repos.HardCoded.KataTemplateRepo$ 0 0 0 $kata.data.repos.HardCoded.KataLanguageRepo$ 0 0 0 0 0 0 0 $kata.data.repos.HardCoded.KataTemplateRepo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kata.domain.services.InitKataService$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kata.data.repos.HardCoded.ConfigRepo$ 0 0 0 $kata.data.repos.HardCoded.ConfigRepo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kata.data.repos.HardCoded.ConfigRepo$ 0 0 0 0 0 0 0 $kata.data.repos.HardCoded.ConfigRepo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kata.data.repos.HardCoded.ConfigRepo$ 0 0 0 $kata.data.repos.HardCoded.ConfigRepo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kata.data.repos.HardCoded.ConfigRepo$ 0 0 0 $kata.data.repos.HardCoded.ConfigRepo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , List [EOL] import typing [EOL] import unittest [EOL] import builtins [EOL] import pathlib [EOL] import kata [EOL] import textwrap [EOL] from pathlib import Path [EOL] from typing import List [EOL] from unittest import mock [EOL] from unittest . mock import MagicMock [EOL] [EOL] import pytest [EOL] import yaml [EOL] [EOL] from kata import defaults [EOL] from kata . data . io . file import FileReader , FileWriter [EOL] from kata . data . repos import KataTemplateRepo , KataLanguageRepo , ConfigRepo , HardCoded [EOL] from kata . defaults import DEFAULT_CONFIG [EOL] from kata . domain . exceptions import InvalidConfig [EOL] from kata . domain . models import KataTemplate , KataLanguage [EOL] [EOL] [EOL] def extract_name_from_path ( path ) : [EOL] return path . split ( [string] ) [ - [number] ] [EOL] [EOL] [EOL] def mock_file_entry ( file_path ) : [EOL] return { [string] : extract_name_from_path ( file_path ) , [string] : file_path , [string] : [string] , [string] : f' [string] { file_path }' } [EOL] [EOL] [EOL] def mock_dir_entry ( dir_path ) : [EOL] return { [string] : extract_name_from_path ( dir_path ) , [string] : dir_path , [string] : [string] , [string] : None } [EOL] [EOL] [EOL] @ pytest . fixture @ mock . patch ( [string] ) def mock_api ( mocked_api ) : [EOL] return mocked_api [EOL] [EOL] [EOL] @ pytest . fixture @ mock . patch ( [string] ) def mock_file_reader ( mocked_file_reader ) : [EOL] return mocked_file_reader [EOL] [EOL] [EOL] @ pytest . fixture @ mock . patch ( [string] ) def mock_file_writer ( mocked_file_writer ) : [EOL] return mocked_file_writer [EOL] [EOL] [EOL] @ pytest . fixture def config_repo ( ) : [EOL] return HardCoded . ConfigRepo ( ) [EOL] [EOL] [EOL] class TestKataTemplateRepo : [EOL] [EOL] @ pytest . fixture def kata_template_repo ( self , mock_api , config_repo ) : [EOL] return KataTemplateRepo ( mock_api , config_repo ) [EOL] [EOL] class TestGetForLanguage : [EOL] def test_request_contents_of_language_directory ( self , mock_api , kata_template_repo ) : [EOL] kata_template_repo . get_for_language ( KataLanguage ( [string] ) ) [EOL] mock_api . contents . assert_called_with ( DEFAULT_CONFIG [ [string] ] [ [string] ] , DEFAULT_CONFIG [ [string] ] [ [string] ] , [string] ) [EOL] [EOL] class TestTemplateIsAtRoot : [EOL] class TestInfoIsInConfig : [EOL] def test_template_not_at_root ( self , mock_api , config_repo , kata_template_repo ) : [EOL] [comment] [EOL] config_repo . config [ [string] ] = { [string] : False } [EOL] mock_api . contents . return_value = [ mock_file_entry ( [string] ) , mock_file_entry ( [string] ) , mock_dir_entry ( [string] ) , mock_dir_entry ( [string] ) ] [EOL] [EOL] [comment] [EOL] java_available_templates = kata_template_repo . get_for_language ( KataLanguage ( [string] ) ) [EOL] [EOL] [comment] [EOL] assert java_available_templates == [ KataTemplate ( KataLanguage ( [string] ) , template_name = [string] ) , KataTemplate ( KataLanguage ( [string] ) , template_name = [string] ) ] [EOL] [EOL] def test_template_at_root ( self , mock_api , config_repo , kata_template_repo ) : [EOL] [comment] [EOL] config_repo . config [ [string] ] = { [string] : True } [EOL] mock_api . contents . return_value = [ mock_file_entry ( [string] ) , mock_dir_entry ( [string] ) ] [EOL] [EOL] [comment] [EOL] rust_available_templates = kata_template_repo . get_for_language ( KataLanguage ( [string] ) ) [EOL] [EOL] [comment] [EOL] assert rust_available_templates == [ KataTemplate ( KataLanguage ( [string] ) , template_name = None ) ] [EOL] [EOL] class TestInfoIsNotInConfig : [EOL] def test_check_if_has_readme ( self , mock_api , config_repo , kata_template_repo ) : [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] config_repo . config [ [string] ] = { } [EOL] mock_api . contents . return_value = [ mock_file_entry ( [string] ) ] [EOL] [EOL] [comment] [EOL] available_java_templates = kata_template_repo . get_for_language ( KataLanguage ( [string] ) ) [EOL] [EOL] [comment] [EOL] assert len ( available_java_templates ) == [number] [EOL] assert available_java_templates [ [number] ] == KataTemplate ( KataLanguage ( [string] ) , template_name = None ) [EOL] [EOL] def test_template_is_not_at_root ( self , mock_api , kata_template_repo ) : [EOL] [comment] [EOL] mock_api . contents . return_value = [ mock_dir_entry ( [string] ) , mock_dir_entry ( [string] ) ] [EOL] [EOL] [comment] [EOL] available_java_templates = kata_template_repo . get_for_language ( KataLanguage ( [string] ) ) [EOL] [EOL] [comment] [EOL] assert available_java_templates == [ KataTemplate ( KataLanguage ( [string] ) , [string] ) , KataTemplate ( KataLanguage ( [string] ) , [string] ) ] [EOL] [EOL] [EOL] class TestKataLanguageRepo : [EOL] [EOL] @ pytest . fixture def kata_language_repo ( self , mock_api , config_repo ) : [EOL] return KataLanguageRepo ( mock_api , config_repo ) [EOL] [EOL] class TestGetAll : [EOL] def test_request_contents_of_root_directory ( self , mock_api , kata_language_repo ) : [EOL] kata_language_repo . get_all ( ) [EOL] mock_api . contents . assert_called_with ( DEFAULT_CONFIG [ [string] ] [ [string] ] , DEFAULT_CONFIG [ [string] ] [ [string] ] , [string] ) [EOL] [EOL] def test_return_all_directory_as_kata_languages ( self , mock_api , kata_language_repo ) : [EOL] mock_api . contents . return_value = [ mock_file_entry ( [string] ) , mock_dir_entry ( [string] ) , mock_file_entry ( [string] ) , mock_dir_entry ( [string] ) ] [EOL] all_languages = kata_language_repo . get_all ( ) [EOL] assert all_languages == [ KataLanguage ( [string] ) , KataLanguage ( [string] ) ] [EOL] [EOL] class TestGet : [EOL] def test_request_contents_of_root_directory ( self , mock_api , kata_language_repo ) : [EOL] kata_language_repo . get ( language_name = [string] ) [EOL] mock_api . contents . assert_called_with ( DEFAULT_CONFIG [ [string] ] [ [string] ] , DEFAULT_CONFIG [ [string] ] [ [string] ] , [string] ) [EOL] [EOL] def test_valid_language_name ( self , mock_api , kata_language_repo ) : [EOL] mock_api . contents . return_value = [ mock_file_entry ( [string] ) , mock_dir_entry ( [string] ) , mock_file_entry ( [string] ) , mock_dir_entry ( [string] ) ] [EOL] assert kata_language_repo . get ( [string] ) == KataLanguage ( [string] ) [EOL] [EOL] def test_invalid_language_name ( self , mock_api , kata_language_repo ) : [EOL] mock_api . contents . return_value = [ mock_file_entry ( [string] ) , mock_dir_entry ( [string] ) , mock_file_entry ( [string] ) , mock_dir_entry ( [string] ) ] [EOL] assert kata_language_repo . get ( [string] ) is None [EOL] [EOL] [EOL] class TestConfigRepo : [EOL] @ pytest . fixture def valid_config ( self ) : [EOL] return { [string] : { [string] : [string] , [string] : [string] } , [string] : { [string] : False } , [string] : { [string] : False } } [EOL] [EOL] def test_load_config_at_initialization ( self , valid_config , mock_file_reader , mock_file_writer ) : [EOL] [comment] [EOL] config_file = Path ( [string] ) [EOL] mock_file_reader . read_yaml . return_value = valid_config [EOL] [EOL] [comment] [EOL] _config_repo = ConfigRepo ( config_file , mock_file_reader , mock_file_writer ) [EOL] [EOL] [comment] [EOL] mock_file_reader . read_yaml . assert_called_with ( config_file ) [EOL] [EOL] class TestGetKataGRepoInfos : [EOL] def test_get_kata_grepo_username ( self , valid_config , mock_file_reader , mock_file_writer ) : [EOL] config_file = Path ( [string] ) [EOL] config = valid_config [EOL] config [ [string] ] = { [string] : [string] , [string] : [string] } [EOL] mock_file_reader . read_yaml . return_value = config [EOL] config_repo = ConfigRepo ( config_file , mock_file_reader , mock_file_writer ) [EOL] assert config_repo . get_kata_grepo_username ( ) == [string] [EOL] [EOL] def test_get_kata_grepo_reponame ( self , valid_config , mock_file_reader , mock_file_writer ) : [EOL] config_file = Path ( [string] ) [EOL] config = valid_config [EOL] config [ [string] ] = { [string] : [string] , [string] : [string] } [EOL] mock_file_reader . read_yaml . return_value = config [EOL] config_repo = ConfigRepo ( config_file , mock_file_reader , mock_file_writer ) [EOL] assert config_repo . get_kata_grepo_reponame ( ) == [string] [EOL] [EOL] class TestHasTemplateAtRoot : [EOL] @ pytest . fixture def config_repo ( self , mock_file_reader , valid_config , mock_file_writer ) : [EOL] config_file = Path ( [string] ) [EOL] valid_config [ [string] ] = { [string] : False , [string] : True } [EOL] mock_file_reader . read_yaml . return_value = valid_config [EOL] return ConfigRepo ( config_file , mock_file_reader , mock_file_writer ) [EOL] [EOL] def test_has_template ( self , config_repo ) : [EOL] assert config_repo . has_template_at_root ( KataLanguage ( [string] ) ) is False [EOL] [EOL] def test_doesnt_have_template ( self , config_repo ) : [EOL] assert config_repo . has_template_at_root ( KataLanguage ( [string] ) ) is True [EOL] [EOL] def test_no_information_whether_or_not_template_is_located_at_root ( self , config_repo ) : [EOL] assert config_repo . has_template_at_root ( KataLanguage ( [string] ) ) is None [EOL] [EOL] class TestAuthInfos : [EOL] class TestGetAuthToken : [EOL] def test_valid_token ( self , valid_config , mock_file_reader , mock_file_writer ) : [EOL] [comment] [EOL] config_file = Path ( [string] ) [EOL] config = valid_config [EOL] config [ [string] ] [ [string] ] = [string] [EOL] mock_file_reader . read_yaml . return_value = config [EOL] [EOL] [comment] [EOL] config_repo = ConfigRepo ( config_file , mock_file_reader , mock_file_writer ) [EOL] token = config_repo . get_auth_token ( ) [EOL] [EOL] [comment] [EOL] assert token is [string] [EOL] [EOL] def test_missing_token ( self , valid_config , mock_file_reader , mock_file_writer ) : [EOL] [comment] [EOL] def config_wo_token ( ) : [EOL] conf = valid_config [EOL] [comment] [EOL] [comment] [EOL] conf [ [string] ] . pop ( [string] , None ) [EOL] return conf [EOL] [EOL] config_file = Path ( [string] ) [EOL] config = config_wo_token ( ) [EOL] mock_file_reader . read_yaml . return_value = config [EOL] [EOL] [comment] [EOL] config_repo = ConfigRepo ( config_file , mock_file_reader , mock_file_writer ) [EOL] token = config_repo . get_auth_token ( ) [EOL] [EOL] [comment] [EOL] assert token is None [EOL] [EOL] class TestSkipWarning : [EOL] def test_do_not_skip ( self , valid_config , mock_file_reader , mock_file_writer ) : [EOL] [comment] [EOL] config_file = Path ( [string] ) [EOL] config = valid_config [EOL] config [ [string] ] [ [string] ] = False [EOL] mock_file_reader . read_yaml . return_value = config [EOL] [EOL] [comment] [EOL] config_repo = ConfigRepo ( config_file , mock_file_reader , mock_file_writer ) [EOL] should_skip = config_repo . should_skip_not_logged_in_warning ( ) [EOL] [EOL] [comment] [EOL] assert not should_skip [EOL] [EOL] def test_skip ( self , valid_config , mock_file_reader , mock_file_writer ) : [EOL] [comment] [EOL] config_file = Path ( [string] ) [EOL] config = valid_config [EOL] config [ [string] ] [ [string] ] = True [EOL] mock_file_reader . read_yaml . return_value = config [EOL] [EOL] [comment] [EOL] config_repo = ConfigRepo ( config_file , mock_file_reader , mock_file_writer ) [EOL] should_skip = config_repo . should_skip_not_logged_in_warning ( ) [EOL] [EOL] [comment] [EOL] assert should_skip [EOL] [EOL] class TestConfigValidation : [EOL] @ pytest . fixture def assert_given_config_raises_when_calling_given_method ( self , mock_file_reader , mock_file_writer ) : [EOL] def wrapper ( config , method_to_call , method_args , regexes_to_match ) : [EOL] [comment] [EOL] config_file = Path ( [string] ) [EOL] mock_file_reader . read_yaml . return_value = config [EOL] [EOL] [comment] [EOL] [comment] [EOL] exception_to_raise = InvalidConfig [EOL] with pytest . raises ( exception_to_raise ) as exception : [EOL] config_repo = ConfigRepo ( config_file , mock_file_reader , mock_file_writer ) [EOL] method = getattr ( config_repo , method_to_call ) [EOL] method ( * method_args ) [EOL] for regex_to_match in regexes_to_match : [EOL] assert exception . match ( regex_to_match ) [EOL] [EOL] return wrapper [EOL] [EOL] def test_missing_katagrepo_entry ( self , valid_config , assert_given_config_raises_when_calling_given_method ) : [EOL] def config_wo_katagrepo ( ) : [EOL] conf = valid_config [EOL] conf . pop ( [string] ) [EOL] return conf [EOL] [EOL] assert_given_config_raises_when_calling_given_method ( config = config_wo_katagrepo ( ) , method_to_call = [string] , method_args = ( ) , regexes_to_match = [ [string] , [string] ] ) [EOL] [EOL] def test_missing_user_entry ( self , valid_config , assert_given_config_raises_when_calling_given_method ) : [EOL] def config_wo_user ( ) : [EOL] conf = valid_config [EOL] conf [ [string] ] . pop ( [string] ) [EOL] return conf [EOL] [EOL] assert_given_config_raises_when_calling_given_method ( config = config_wo_user ( ) , method_to_call = [string] , method_args = ( ) , regexes_to_match = [ [string] , [string] ] ) [EOL] [EOL] def test_missing_repo_entry ( self , valid_config , assert_given_config_raises_when_calling_given_method ) : [EOL] def config_wo_repo ( ) : [EOL] conf = valid_config [EOL] conf [ [string] ] . pop ( [string] ) [EOL] return conf [EOL] [EOL] assert_given_config_raises_when_calling_given_method ( config = config_wo_repo ( ) , method_to_call = [string] , method_args = ( ) , regexes_to_match = [ [string] , [string] ] ) [EOL] [EOL] def test_missing_hastemplateatroot_entry ( self , valid_config , assert_given_config_raises_when_calling_given_method ) : [EOL] def config_wo_hastemplateatroot ( ) : [EOL] conf = valid_config [EOL] conf . pop ( [string] ) [EOL] return conf [EOL] [EOL] assert_given_config_raises_when_calling_given_method ( config = config_wo_hastemplateatroot ( ) , method_to_call = [string] , method_args = ( KataLanguage ( [string] ) ) , regexes_to_match = [ [string] , [string] ] ) [EOL] [EOL] def test_missing_auth_entry ( self , valid_config , assert_given_config_raises_when_calling_given_method ) : [EOL] def config_wo_auth ( ) : [EOL] conf = valid_config [EOL] conf . pop ( [string] ) [EOL] return conf [EOL] [EOL] assert_given_config_raises_when_calling_given_method ( config = config_wo_auth ( ) , method_to_call = [string] , method_args = ( ) , regexes_to_match = [ [string] , [string] ] ) [EOL] [EOL] def test_missing_skipnotloggedinwarning ( self , valid_config , assert_given_config_raises_when_calling_given_method ) : [EOL] def config_wo_skipnotloggedinwarning ( ) : [EOL] conf = valid_config [EOL] conf [ [string] ] . pop ( [string] , None ) [EOL] return conf [EOL] [EOL] assert_given_config_raises_when_calling_given_method ( config = config_wo_skipnotloggedinwarning ( ) , method_to_call = [string] , method_args = ( ) , regexes_to_match = [ [string] , [string] ] ) [EOL] [EOL] class TestIntegration : [EOL] def test_valid_config ( self , tmp_path ) : [EOL] def write_config ( config_contents ) : [EOL] with config_file . open ( [string] ) as f : [EOL] f . write ( textwrap . dedent ( config_contents ) ) [EOL] [EOL] def create_config_repo ( ) : [EOL] actual_file_reader = FileReader ( ) [EOL] actual_file_writer = FileWriter ( ) [EOL] return ConfigRepo ( config_file , actual_file_reader , actual_file_writer ) [EOL] [EOL] [comment] [EOL] config_file = tmp_path / [string] [EOL] write_config ( [string] ) [EOL] [EOL] [comment] [EOL] config_repo = create_config_repo ( ) [EOL] [EOL] [comment] [EOL] assert config_repo . get_kata_grepo_username ( ) == [string] [EOL] assert config_repo . get_kata_grepo_reponame ( ) == [string] [EOL] assert config_repo . has_template_at_root ( KataLanguage ( [string] ) ) is False [EOL] assert config_repo . has_template_at_root ( KataLanguage ( [string] ) ) is True [EOL] assert config_repo . has_template_at_root ( KataLanguage ( [string] ) ) is None [EOL] assert config_repo . should_skip_not_logged_in_warning ( ) [EOL] [EOL] def test_missing_config_file_then_create_with_defaults ( self , tmp_path ) : [EOL] [comment] [EOL] config_path = tmp_path / [string] [EOL] assert not config_path . exists ( ) [EOL] [EOL] [comment] [EOL] actual_file_reader = FileReader ( ) [EOL] actual_file_writer = FileWriter ( ) [EOL] config_repo = ConfigRepo ( config_path , actual_file_reader , actual_file_writer ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] assert config_path . exists ( ) [EOL] with config_path . open ( [string] ) as config_file : [EOL] assert yaml . load ( config_file ) == defaults . DEFAULT_CONFIG [EOL] [EOL] [comment] [EOL] assert config_repo . get_kata_grepo_username ( ) == defaults . DEFAULT_CONFIG [ [string] ] [ [string] ] [EOL] assert config_repo . get_kata_grepo_reponame ( ) == defaults . DEFAULT_CONFIG [ [string] ] [ [string] ] [EOL] for language_name in defaults . DEFAULT_CONFIG [ [string] ] : [EOL] assert config_repo . has_template_at_root ( KataLanguage ( language_name ) ) is defaults . DEFAULT_CONFIG [ [string] ] [ language_name ] [EOL] assert config_repo . has_template_at_root ( KataLanguage ( [string] ) ) is None [EOL] assert not config_repo . should_skip_not_logged_in_warning ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 $kata.data.repos.KataTemplateRepo$ 0 0 0 $kata.data.repos.KataTemplateRepo$ 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 $kata.data.repos.KataTemplateRepo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $kata.data.repos.KataTemplateRepo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 $kata.data.repos.KataTemplateRepo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $kata.data.repos.KataTemplateRepo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 $kata.data.repos.KataTemplateRepo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $kata.data.repos.KataTemplateRepo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 $kata.data.repos.KataTemplateRepo$ 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $kata.data.repos.KataTemplateRepo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 $kata.data.repos.KataLanguageRepo$ 0 0 0 $kata.data.repos.KataLanguageRepo$ 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 $kata.data.repos.KataLanguageRepo$ 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $kata.data.repos.KataLanguageRepo$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 $kata.data.repos.KataLanguageRepo$ 0 0 0 $kata.data.repos.KataLanguageRepo$ 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 $kata.data.repos.KataLanguageRepo$ 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kata.data.repos.KataLanguageRepo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 $kata.data.repos.KataLanguageRepo$ 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kata.data.repos.KataLanguageRepo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 $kata.data.repos.ConfigRepo$ 0 0 0 0 $kata.data.repos.ConfigRepo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kata.data.repos.ConfigRepo$ 0 0 0 0 $kata.data.repos.ConfigRepo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kata.data.repos.ConfigRepo$ 0 0 0 0 $kata.data.repos.ConfigRepo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $pathlib.Path$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $pathlib.Path$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Dict , Any , Union [EOL] import typing [EOL] import pytest [EOL] from schema import Schema , Optional , SchemaError [EOL] [EOL] from kata . domain . exceptions import InvalidConfig [EOL] [EOL] [EOL] def test_simple_nested_dict ( ) : [EOL] schema = Schema ( { [string] : { [string] : str , [string] : str } } ) [EOL] [EOL] assert not schema . is_valid ( { } ) [EOL] assert not schema . is_valid ( { [string] : { } } ) [EOL] assert not schema . is_valid ( { [string] : { [string] : [string] } } ) [EOL] assert not schema . is_valid ( { [string] : { [string] : [number] , [string] : [string] } } ) [EOL] [EOL] assert schema . is_valid ( { [string] : { [string] : [string] , [string] : [string] } } ) [EOL] [EOL] [EOL] def test_unlimited_keys_in_sub_dict ( ) : [EOL] schema = Schema ( { [string] : { str : int } } ) [EOL] [EOL] assert not schema . is_valid ( { [string] : { } } ) [EOL] assert not schema . is_valid ( { [string] : { [string] : [string] } } ) [EOL] [EOL] assert schema . is_valid ( { [string] : { [string] : [number] } } ) [EOL] assert schema . is_valid ( { [string] : { [string] : [number] , [string] : [number] , [string] : [number] } } ) [EOL] [EOL] [EOL] def test_optional ( ) : [EOL] schema = Schema ( { [string] : { Optional ( str ) : int } } ) [EOL] [EOL] assert schema . is_valid ( { [string] : { } } ) [EOL] assert schema . is_valid ( { [string] : { [string] : [number] , [string] : [number] } } ) [EOL] [EOL] [EOL] def test_extract_info_of_reason_why_invalid ( ) : [EOL] def function_under_test ( data_to_validate ) : [EOL] try : [EOL] schema . validate ( data_to_validate ) [EOL] except SchemaError as e : [EOL] raise InvalidConfig ( e ) [EOL] [EOL] def assert_domain_exception_is_raised_matching_msg ( invalid_data , * regexes_to_match_in_exception_msg ) : [EOL] domain_exception = InvalidConfig [EOL] with pytest . raises ( domain_exception ) as raised : [EOL] function_under_test ( invalid_data ) [EOL] for regex in regexes_to_match_in_exception_msg : [EOL] raised . match ( regex ) [EOL] [EOL] schema = Schema ( { [string] : { [string] : str , [string] : str } , [string] : bool } ) [EOL] [EOL] missing_katagrepo_entry = { [string] : False } [EOL] invalid_type_for_user = { [string] : { [string] : [number] , [string] : [string] } , [string] : True } [EOL] missing_both_user_and_repo = { [string] : { } , [string] : True } [EOL] [EOL] assert_domain_exception_is_raised_matching_msg ( missing_katagrepo_entry , [string] , [string] ) [EOL] assert_domain_exception_is_raised_matching_msg ( invalid_type_for_user , [string] ) [EOL] assert_domain_exception_is_raised_matching_msg ( missing_both_user_and_repo , [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Dict , List , Union [EOL] import typing [EOL] import pathlib [EOL] import kata [EOL] from pathlib import Path [EOL] [EOL] import pytest [EOL] import yaml [EOL] [EOL] from kata . data . io . file import FileWriter [EOL] [EOL] [EOL] class TestFileWriter : [EOL] @ pytest . fixture def file_writer ( self ) : [EOL] return FileWriter ( ) [EOL] [EOL] class TestWriteToFileInSubPath : [EOL] [comment] [EOL] [comment] [EOL] pass [EOL] [EOL] class TestWriteYamlToFile : [EOL] def test_valid_yaml ( self , tmp_path , file_writer ) : [EOL] [comment] [EOL] file_path = tmp_path / [string] [EOL] valid_yaml_data = { [string] : { [string] : [number] } , [string] : { [string] : [ [string] , [string] ] } } [EOL] [EOL] [comment] [EOL] file_writer . write_yaml_to_file ( file_path , valid_yaml_data ) [EOL] [EOL] [comment] [EOL] with file_path . open ( [string] ) as f : [EOL] assert yaml . load ( f . read ( ) ) == valid_yaml_data [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $kata.data.io.file.FileWriter$ 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.List[builtins.str]],typing.Dict[builtins.str,builtins.int]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $kata.data.io.file.FileWriter$ 0 0 0 $pathlib.Path$ 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.List[builtins.str]],typing.Dict[builtins.str,builtins.int]]]$ 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[builtins.str,typing.List[builtins.str]],typing.Dict[builtins.str,builtins.int]]]$ 0