from . syspath import append_git_root [EOL] [EOL] [EOL] path = append_git_root ( index = [number] ) [EOL] [EOL] if __name__ == [string] : [EOL] print ( path ) [EOL]	0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
from typing import List , Optional [EOL] import typing [EOL] import _importlib_modulespec [EOL] import builtins [EOL] import inspect [EOL] import inspect [EOL] import os [EOL] import sys [EOL] [EOL] [EOL] def _append_path ( new_path ) : [EOL] [docstring] [EOL] for path in sys . path : [EOL] path = os . path . abspath ( path ) [EOL] if new_path == path : [EOL] return [EOL] sys . path . append ( new_path ) [EOL] [EOL] [EOL] def _caller_path ( index ) : [EOL] [docstring] [EOL] module = None [EOL] stack = inspect . stack ( ) [EOL] while not module : [EOL] if index >= len ( stack ) : [EOL] raise RuntimeError ( [string] ) [EOL] frame = stack [ index ] [EOL] module = inspect . getmodule ( frame [ [number] ] ) [EOL] index += [number] [EOL] filename = module . __file__ [EOL] path = os . path . dirname ( os . path . realpath ( filename ) ) [EOL] return path [EOL] [EOL] [EOL] def get_current_path ( index = [number] ) : [EOL] [docstring] [EOL] try : [EOL] path = _caller_path ( index ) [EOL] except RuntimeError : [EOL] path = os . getcwd ( ) [EOL] return path [EOL] [EOL] [EOL] def append_current_path ( index = [number] ) : [EOL] [docstring] [EOL] path = get_current_path ( index = index ) [EOL] _append_path ( path ) [EOL] return path [EOL] [EOL] [EOL] def get_git_root ( index = [number] ) : [EOL] [docstring] [EOL] path = get_current_path ( index = index ) [EOL] while True : [EOL] git_path = os . path . join ( path , [string] ) [EOL] if os . path . isdir ( git_path ) : [EOL] return path [EOL] if os . path . dirname ( path ) == path : [EOL] raise RuntimeError ( [string] ) [EOL] path = os . path . split ( path ) [ [number] ] [EOL] [EOL] [EOL] def append_git_root ( index = [number] ) : [EOL] [docstring] [EOL] path = get_git_root ( index = index ) [EOL] _append_path ( path ) [EOL] return path [EOL] [EOL] [EOL] def get_parent_path ( index = [number] ) : [EOL] [docstring] [EOL] try : [EOL] path = _caller_path ( index ) [EOL] except RuntimeError : [EOL] path = os . getcwd ( ) [EOL] path = os . path . abspath ( os . path . join ( path , os . pardir ) ) [EOL] return path [EOL] [EOL] [EOL] def append_parent_path ( index = [number] ) : [EOL] [docstring] [EOL] path = get_parent_path ( index = index ) [EOL] _append_path ( path ) [EOL] return path [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
VERSION = ( [number] , [number] , [number] ) [EOL] [EOL] __version__ = [string] . join ( map ( str , VERSION ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . syspath import * [comment] [EOL] from . syspath import _append_path , _caller_path [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . syspath import append_parent_path [EOL] [EOL] [EOL] path = append_parent_path ( index = [number] ) [EOL] [EOL] if __name__ == [string] : [EOL] print ( path ) [EOL]	0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
from . syspath import append_current_path [EOL] [EOL] [EOL] path = append_current_path ( index = [number] ) [EOL] [EOL] if __name__ == [string] : [EOL] print ( path ) [EOL]	0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
import unittest [EOL] [EOL] from syspath import __version__ [EOL] [EOL] [EOL] class TestVersion ( unittest . TestCase ) : [EOL] def test_version ( self ) : [EOL] self . assertTrue ( __version__ ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] import copy [EOL] import sys [EOL] import unittest [EOL] [EOL] from . . import syspath [EOL] [EOL] [EOL] class TestCurrentPath ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . orig_sys_path = copy . deepcopy ( sys . path ) [EOL] [EOL] def tearDown ( self ) : [EOL] sys . path = self . orig_sys_path [EOL] [EOL] def test_import ( self ) : [EOL] self . assertEqual ( len ( sys . path ) , len ( self . orig_sys_path ) ) [EOL] from . . import current_path [comment] [EOL] self . assertIn ( syspath . get_current_path ( ) , sys . path ) [EOL] [EOL] def test_path ( self ) : [EOL] from . . import current_path [EOL] self . assertEqual ( current_path . path , syspath . get_current_path ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import builtins [EOL] from typing import List , Any [EOL] import typing [EOL] import copy [EOL] import os [EOL] import sys [EOL] import unittest [EOL] from unittest . mock import patch [EOL] [EOL] from . . import syspath [EOL] [EOL] [EOL] class TestSysPath ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . orig_sys_path = copy . deepcopy ( sys . path ) [EOL] [EOL] def tearDown ( self ) : [EOL] sys . path = self . orig_sys_path [EOL] [EOL] def test_append_path ( self ) : [EOL] syspath . _append_path ( [string] ) [EOL] self . assertEqual ( sys . path [ - [number] ] , [string] ) [EOL] [EOL] def test_append_path_deduplicates ( self ) : [EOL] syspath . _append_path ( sys . path [ [number] ] ) [EOL] self . assertEqual ( len ( sys . path ) , len ( self . orig_sys_path ) ) [EOL] [EOL] def test_caller_path ( self ) : [EOL] path = syspath . _caller_path ( [number] ) [EOL] expected = os . path . dirname ( os . path . realpath ( __file__ ) ) [EOL] self . assertEqual ( path , expected ) [EOL] [EOL] def test_caller_path_error ( self ) : [EOL] with self . assertRaises ( RuntimeError ) : [EOL] syspath . _caller_path ( [number] ) [EOL] [EOL] def test_append_current_path ( self ) : [EOL] appended_path = syspath . append_current_path ( ) [EOL] self . assertEqual ( len ( sys . path ) , len ( self . orig_sys_path ) + [number] ) [EOL] self . assertIn ( appended_path , sys . path ) [EOL] self . assertEqual ( os . path . split ( appended_path ) [ [number] ] , [string] ) [EOL] [EOL] def test_append_cli_path ( self ) : [EOL] with patch ( [string] ) as mock_caller_path : [EOL] mock_caller_path . side_effect = RuntimeError ( ) [EOL] appended_path = syspath . append_current_path ( ) [EOL] self . assertIn ( appended_path , sys . path ) [EOL] self . assertEqual ( appended_path , os . getcwd ( ) ) [EOL] [EOL] def test_append_git_root ( self ) : [EOL] appended_path = syspath . append_git_root ( ) [EOL] self . assertIn ( appended_path , sys . path ) [EOL] self . assertEqual ( os . path . split ( appended_path ) [ [number] ] , [string] ) [EOL] [EOL] def test_append_git_root_cli ( self ) : [EOL] with patch ( [string] ) as mock_caller_path : [EOL] mock_caller_path . side_effect = RuntimeError ( ) [EOL] appended_path = syspath . append_git_root ( ) [EOL] self . assertIn ( appended_path , sys . path ) [EOL] self . assertEqual ( os . path . split ( appended_path ) [ [number] ] , [string] ) [EOL] [EOL] def test_append_git_root_error ( self ) : [EOL] with patch ( [string] ) as mock_caller_path : [EOL] root = os . path . abspath ( os . sep ) [EOL] mock_caller_path . return_value = root [EOL] with self . assertRaises ( RuntimeError ) : [EOL] syspath . append_git_root ( ) [EOL] [EOL] def test_append_parent_path ( self ) : [EOL] appended_path = syspath . append_parent_path ( ) [EOL] self . assertEqual ( len ( sys . path ) , len ( self . orig_sys_path ) + [number] ) [EOL] self . assertIn ( appended_path , sys . path ) [EOL] self . assertEqual ( os . path . split ( appended_path ) [ [number] ] , [string] ) [EOL] [EOL] def test_append_cli_parent_path ( self ) : [EOL] with patch ( [string] ) as mock_caller_path : [EOL] mock_caller_path . side_effect = RuntimeError ( ) [EOL] appended_path = syspath . append_parent_path ( ) [EOL] self . assertIn ( appended_path , sys . path ) [EOL] path = os . getcwd ( ) [EOL] parent = os . path . abspath ( os . path . join ( path , os . pardir ) ) [EOL] self . assertEqual ( appended_path , parent ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0
from typing import List [EOL] import typing [EOL] import copy [EOL] import sys [EOL] import unittest [EOL] [EOL] from . . import syspath [EOL] [EOL] [EOL] class TestParentPath ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . orig_sys_path = copy . deepcopy ( sys . path ) [EOL] [EOL] def tearDown ( self ) : [EOL] sys . path = self . orig_sys_path [EOL] [EOL] def test_import ( self ) : [EOL] self . assertEqual ( len ( sys . path ) , len ( self . orig_sys_path ) ) [EOL] from . . import parent_path [comment] [EOL] self . assertIn ( syspath . get_parent_path ( ) , sys . path ) [EOL] [EOL] def test_path ( self ) : [EOL] from . . import parent_path [EOL] self . assertEqual ( parent_path . path , syspath . get_parent_path ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] import copy [EOL] import sys [EOL] import unittest [EOL] [EOL] from . . import syspath [EOL] [EOL] [EOL] class TestGitRoot ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] self . orig_sys_path = copy . deepcopy ( sys . path ) [EOL] [EOL] def tearDown ( self ) : [EOL] sys . path = self . orig_sys_path [EOL] [EOL] def test_import ( self ) : [EOL] self . assertEqual ( len ( sys . path ) , len ( self . orig_sys_path ) ) [EOL] from . . import git_root [comment] [EOL] self . assertIn ( syspath . get_git_root ( ) , sys . path ) [EOL] [EOL] def test_path ( self ) : [EOL] from . . import git_root [EOL] self . assertEqual ( git_root . path , syspath . get_git_root ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0