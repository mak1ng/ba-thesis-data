[comment] [EOL] import os [EOL] import sys [EOL] [EOL] if __name__ == [string] : [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] from django . core . management import execute_from_command_line [EOL] [EOL] execute_from_command_line ( sys . argv ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import rosie [EOL] import typing [EOL] from typing import ( NamedTuple , Optional , ) [EOL] [EOL] [EOL] ReceivedMessage = NamedTuple ( [string] , [ ( [string] , str ) , ( [string] , str ) , ( [string] , Optional [ str ] ) , ] ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[rosie.types.ReceivedMessage]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , List [EOL] import rosie [EOL] import typing [EOL] from django . db import models [EOL] from typing import List [EOL] [EOL] [EOL] class SubscribedUser ( models . Model ) : [EOL] user_psid = models . CharField ( max_length = [number] , primary_key = True ) [EOL] [EOL] @ classmethod def get_all_subscribers ( cls ) : [EOL] [comment] [EOL] return cls . objects . all ( ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[rosie.models.SubscribedUser]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List['SubscribedUser']$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Any , Dict [EOL] import unittest [EOL] import typing [EOL] import os [EOL] import sys [EOL] from contextlib import contextmanager [EOL] from io import StringIO [EOL] from unittest import TestCase [EOL] from unittest . mock import ( MagicMock , patch , ) [EOL] from util . rate_limit import rate_limit [EOL] [EOL] [EOL] @ contextmanager def captured_output ( ) : [EOL] new_out , new_err = StringIO ( ) , StringIO ( ) [EOL] old_out , old_err = sys . stdout , sys . stderr [EOL] try : [EOL] sys . stdout , sys . stderr = new_out , new_err [EOL] yield sys . stdout , sys . stderr [EOL] finally : [EOL] sys . stdout , sys . stderr = old_out , old_err [EOL] [EOL] [EOL] @ contextmanager def set_env ( ** environ ) : [EOL] old_environ = dict ( os . environ ) [EOL] os . environ . update ( environ ) [EOL] try : [EOL] yield [EOL] finally : [EOL] os . environ . clear ( ) [EOL] os . environ . update ( old_environ ) [EOL] [EOL] [EOL] class RateLimitTests ( TestCase ) : [EOL] START_TIME = [number] [EOL] [EOL] @ patch ( [string] ) def test_rate_limiting ( self , time_mock ) : [EOL] @ rate_limit ( [string] , once_every = [number] ) def _f ( ) : [EOL] _f . counter += [number] [EOL] _f . counter = [number] [EOL] [EOL] time_mock . return_value = self . START_TIME [EOL] _f ( ) [EOL] self . assertEquals ( _f . counter , [number] ) [EOL] _f ( ) [EOL] self . assertEquals ( _f . counter , [number] ) [EOL] [EOL] time_mock . return_value += [number] [EOL] _f ( ) [EOL] self . assertEquals ( _f . counter , [number] ) [EOL] [EOL] time_mock . return_value += [number] [EOL] _f ( ) [EOL] self . assertEquals ( _f . counter , [number] ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import time [EOL] from keyvaluestore . utils import get_value_or_default , set_key_value [EOL] [EOL] [EOL] def rate_limit ( key , once_every ) : [EOL] def _rate_limit_decorator ( fn ) : [EOL] def wrapper ( * args , ** kwargs ) : [EOL] if shouldnt_rate_limit ( key , once_every ) : [EOL] return fn ( * args , ** kwargs ) [EOL] return None [EOL] return wrapper [EOL] return _rate_limit_decorator [EOL] [EOL] [EOL] def should_rate_limit ( key , once_every ) : [EOL] last_hit_key = [string] + key [EOL] [EOL] last_hit = float ( get_value_or_default ( last_hit_key , [number] ) ) [EOL] time_since_last_hit = time . time ( ) - last_hit [EOL] if time_since_last_hit < once_every : [EOL] return True [EOL] set_key_value ( last_hit_key , time . time ( ) ) [EOL] return False [EOL] [EOL] [EOL] def shouldnt_rate_limit ( key , once_every ) : [EOL] return not should_rate_limit ( key , once_every ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import concurrent [EOL] import asyncio [EOL] import typing [EOL] from concurrent . futures import ThreadPoolExecutor [EOL] import asyncio [EOL] [EOL] [EOL] def threaded_async ( fn ) : [EOL] pool = ThreadPoolExecutor ( ) [EOL] [EOL] def wrapper ( * args , ** kwargs ) : [EOL] future = pool . submit ( fn , * args , ** kwargs ) [EOL] return asyncio . wrap_future ( future ) [EOL] [EOL] return wrapper [EOL] [EOL] [EOL] def middleware ( view ) : [EOL] def middleware ( * args , ** kwargs ) : [EOL] loop = asyncio . new_event_loop ( ) [EOL] asyncio . set_event_loop ( loop ) [EOL] return view ( * args , ** kwargs ) [EOL] return middleware [EOL] [EOL] [EOL] def sync ( fn ) : [EOL] def wrapper ( * args , ** kwargs ) : [EOL] return asyncio . get_event_loop ( ) . run_until_complete ( fn ( * args , ** kwargs ) ) [EOL] return wrapper [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type [EOL] import django [EOL] import backend [EOL] import typing [EOL] from allauth . socialaccount . providers . facebook . views import FacebookOAuth2Adapter [EOL] from django . contrib . admin . views . decorators import staff_member_required [EOL] from django . http import ( HttpRequest , HttpResponse , ) [EOL] from graphene_django . views import GraphQLView [EOL] from graphql . execution . executors . asyncio import AsyncioExecutor [EOL] from rest_auth . registration . views import SocialLoginView [EOL] from rest_framework . decorators import ( api_view , authentication_classes , permission_classes , ) [EOL] from rest_framework . permissions import IsAuthenticated [EOL] from rest_framework . settings import api_settings [EOL] [EOL] import asyncio [EOL] import rest_framework [EOL] [EOL] [EOL] class FacebookLogin ( SocialLoginView ) : [EOL] adapter_class = FacebookOAuth2Adapter [EOL] [EOL] [EOL] class RestGraphQLView ( GraphQLView ) : [EOL] def parse_body ( self , request ) : [EOL] if type ( request ) is rest_framework . request . Request : [EOL] return request . data [EOL] return super ( ) . parse_body ( request ) [EOL] [EOL] [EOL] @ api_view ( [ [string] , [string] ] ) @ authentication_classes ( api_settings . DEFAULT_AUTHENTICATION_CLASSES ) @ permission_classes ( ( IsAuthenticated , ) ) def graphql ( request ) : [EOL] view = RestGraphQLView . as_view ( graphiql = False , executor = AsyncioExecutor ( loop = asyncio . get_event_loop ( ) ) , ) [EOL] return view ( request ) [EOL] [EOL] [EOL] @ staff_member_required def graphiql ( request ) : [EOL] view = GraphQLView . as_view ( graphiql = True , executor = AsyncioExecutor ( loop = asyncio . get_event_loop ( ) ) , ) [EOL] return view ( request ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[backend.views.FacebookLogin]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.http.HttpResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.http.HttpResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from apscheduler . jobstores . memory import MemoryJobStore [EOL] from apscheduler . schedulers . asyncio import AsyncIOScheduler [EOL] [EOL] scheduler = AsyncIOScheduler ( ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import graphene [EOL] import _importlib_modulespec [EOL] from django . conf import settings [EOL] from importlib import import_module [EOL] import graphene [EOL] from typing import cast [EOL] [EOL] [EOL] def _build_query ( ) : [EOL] bases = [ ] [EOL] for app in settings . INSTALLED_APPS : [EOL] try : [EOL] queries = import_module ( [string] , app ) [EOL] bases . append ( queries . Query ) [comment] [EOL] except ImportError : [EOL] pass [EOL] bases . append ( graphene . ObjectType ) [EOL] return cast ( graphene . ObjectType , type ( [string] , tuple ( bases ) , { } ) , ) [EOL] [EOL] [EOL] def _build_mutation ( ) : [EOL] bases = [ ] [EOL] for app in settings . INSTALLED_APPS : [EOL] try : [EOL] mutations = import_module ( [string] , app ) [EOL] bases . append ( mutations . Mutation ) [comment] [EOL] except ImportError : [EOL] pass [EOL] bases . append ( graphene . ObjectType ) [EOL] return cast ( graphene . ObjectType , type ( [string] , tuple ( bases ) , { } ) , ) [EOL] [EOL] [EOL] schema = graphene . Schema ( query = _build_query ( ) , mutation = _build_mutation ( ) ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $graphene.ObjectType$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $graphene.ObjectType$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from apscheduler . jobstores . memory import MemoryJobStore [EOL] from django . conf import settings [EOL] from django . core . management . base import BaseCommand [EOL] from django_apscheduler . jobstores import DjangoJobStore [EOL] from importlib import import_module [EOL] import asyncio [EOL] [EOL] from backend import scheduler [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] for app in settings . INSTALLED_APPS : [EOL] try : [EOL] import_module ( [string] , app ) [EOL] print ( [string] . format ( app ) ) [EOL] except ImportError as ex : [EOL] pass [EOL] [EOL] scheduler . add_jobstore ( MemoryJobStore ( ) , [string] ) [EOL] scheduler . add_jobstore ( DjangoJobStore ( ) , [string] ) [EOL] scheduler . start ( ) [EOL] [EOL] try : [EOL] asyncio . get_event_loop ( ) . run_forever ( ) [EOL] except ( KeyboardInterrupt , SystemExit ) : [EOL] pass [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , List [EOL] import typing [EOL] from django . contrib import admin [EOL] from django . conf . urls import ( include , url , ) [EOL] [EOL] import backend . views [EOL] [EOL] admin . autodiscover ( ) [EOL] [EOL] urlpatterns = [ url ( [string] , backend . views . graphql , name = [string] ) , url ( [string] , backend . views . graphiql , name = [string] ) , url ( [string] , include ( [string] ) ) , url ( [string] , include ( [string] ) ) , url ( [string] , include ( [string] ) ) , url ( [string] , backend . views . FacebookLogin . as_view ( ) , name = [string] ) , url ( [string] , admin . site . urls ) , url ( [string] , include ( [string] ) ) , ] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import os [EOL] from django . core . wsgi import get_wsgi_application [EOL] from whitenoise . django import DjangoWhiteNoise [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL] application = DjangoWhiteNoise ( application ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0
	0
from conf . settings . common import * [EOL] [EOL] [comment] [EOL] DEBUG = False [EOL] [EOL] TEST_RUNNER = [string] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.str$ 0 0 0 0
from conf . settings . dev import * [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0
from conf . settings . common import * [EOL] [EOL] DEBUG = False [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0