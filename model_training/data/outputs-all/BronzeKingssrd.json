[comment] [EOL] from typing import Any [EOL] import typing [EOL] import os [EOL] import sys [EOL] [EOL] if __name__ == [string] : [EOL] from utility . env import parse [EOL] env = parse ( [string] ) [EOL] [EOL] os . environ . setdefault ( [string] , env [ [string] ] ) [EOL] [EOL] try : [EOL] from django . core . management import execute_from_command_line [EOL] except ImportError : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] try : [EOL] import django [comment] [EOL] except ImportError : [EOL] raise ImportError ( [string] [string] [string] ) [EOL] raise [EOL] [EOL] [comment] [EOL] [comment] [EOL] current_path = os . path . dirname ( os . path . abspath ( __file__ ) ) [EOL] sys . path . append ( os . path . join ( current_path , [string] ) ) [EOL] [EOL] execute_from_command_line ( sys . argv ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] import _importlib_modulespec [EOL] import argparse [EOL] import argparse [EOL] import os [EOL] [EOL] import importlib [EOL] [EOL] parser = argparse . ArgumentParser ( description = [string] ) [EOL] parser . add_argument ( [string] , help = [string] ) [EOL] parser . add_argument ( [string] , nargs = [string] , help = [string] , default = [string] ) [EOL] parser = parser . parse_args ( ) [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] [EOL] def import_module ( dotted_path ) : [EOL] module_parts = dotted_path . split ( [string] ) [EOL] if len ( module_parts ) < [number] : [EOL] module_parts . append ( [string] ) [comment] [EOL] if len ( module_parts ) == [number] : [EOL] module_parts . insert ( [number] , [string] ) [comment] [EOL] module_path = [string] . join ( module_parts [ : - [number] ] ) [EOL] module = importlib . import_module ( module_path ) [EOL] return getattr ( module , module_parts [ - [number] ] ) [EOL] [EOL] [EOL] def main ( ) : [EOL] path , args = parser . path , parser . args or [ ] [EOL] shouldSetUp = False [EOL] if not os . environ . get ( [string] ) : [EOL] print ( [string] ) [EOL] if [string] not in path : [EOL] try : [EOL] from django import setup [EOL] shouldSetUp = True [EOL] except ImportError : [EOL] pass [EOL] shouldSetUp and setup ( ) [EOL] func = import_module ( path ) [EOL] func ( * args ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] from PIL import Image , ImageDraw , ImageFont [EOL] from datetime import datetime [EOL] [EOL] now = datetime . now ( ) . strftime ( [string] ) [EOL] [EOL] [EOL] im = Image . open ( [string] ) . convert ( [string] ) [EOL] txt = Image . new ( [string] , im . size , ( [number] , [number] , [number] , [number] ) ) [EOL] d = ImageDraw . Draw ( txt ) [EOL] font = ImageFont . truetype ( [string] , [number] ) [EOL] [EOL] d . text ( ( txt . size [ [number] ] - [number] , txt . size [ [number] ] - [number] ) , str ( now ) , font = font , fill = ( [number] , [number] , [number] , [number] ) ) [EOL] out = Image . alpha_composite ( im , txt ) [EOL] out . show ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0
from typing import Union , Tuple [EOL] import typing [EOL] __version__ = [string] [EOL] __version_info__ = tuple ( [ int ( num ) if num . isdigit ( ) else num for num in __version__ . replace ( [string] , [string] , [number] ) . split ( [string] ) ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[typing.Union[builtins.int,builtins.str],...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class UsersConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL] [EOL] def ready ( self ) : [EOL] [docstring] [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . db import models [EOL]	0 0 0 0 0 0 0
	0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class HomeConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
	0
from django . db import models [EOL] [EOL] [EOL] class CredentialManager ( models . Manager ) : [EOL] def add_credential ( self , request , user , Type , confirm = False , action = None ) : [EOL] credential , created = self . get_or_create ( user = user , Type = Type , defaults = { [string] : Type } ) [EOL] [EOL] if created and confirm : [EOL] credential . send_confirmation ( request , action = action ) [EOL] [EOL] return credential [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class UsersConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL] [EOL] def ready ( self ) : [EOL] [docstring] [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] class CrawlerPipeline ( object ) : [EOL] def process_item ( self , item , spider ) : [EOL] return item [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import scrapy [EOL] [EOL] [EOL] class CrawlerItem ( scrapy . Item ) : [EOL] [comment] [EOL] [comment] [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List [EOL] import typing [EOL] BOT_NAME = [string] [EOL] [EOL] SPIDER_MODULES = [ [string] ] [EOL] NEWSPIDER_MODULE = [string] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] ROBOTSTXT_OBEY = True [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import builtins [EOL] from typing import Union , List , Dict , Type , Tuple , Any [EOL] import data [EOL] import io [EOL] import utility [EOL] import typing [EOL] import scrapy [EOL] from io import BytesIO [EOL] import requests [EOL] from django . core . files import File [EOL] from scrapy . http import Request [EOL] from scrapy . http import HtmlResponse [EOL] import pandas as pd [EOL] [EOL] from ssrd . home . models import Product , Images , Category [EOL] from ssrd . users . models import Documents [EOL] from data . home import get_category [EOL] from utility . tfIdf import TfIdf [EOL] [EOL] category , ok = Category . objects . get_or_create ( name = [string] ) [EOL] data = pd . read_excel ( [string] ) [ : [number] ] [EOL] products = { x . code for x in Product . objects . all ( ) } [EOL] config = [ dict ( name = x [ [string] ] , code = x [ [string] ] , url = x [ [string] ] ) for index , x in data . iterrows ( ) if x [ [string] ] not in products ] [EOL] [ x . update ( category = category ) for x in config ] [EOL] categories = [ { [string] : { [string] : [string] , [string] : { [string] : [string] } } , [string] : [string] } , { [string] : { [string] : [string] , [string] : { [string] : [string] } } , [string] : [string] } , { [string] : { [string] : [string] , [string] : { [string] : [string] } } , [string] : [string] } , { [string] : { [string] : [string] , [string] : { [string] : [string] } } , [string] : [string] } , { [string] : { [string] : [string] , [string] : { [string] : [string] } } , [string] : [string] } , { [string] : { [string] : [string] , [string] : { [string] : [string] } } , [string] : [string] } , { [string] : { [string] : [string] , [string] : { [string] : [string] } } , [string] : [string] } , { [string] : { [string] : [string] , [string] : { [string] : [string] } } , [string] : [string] } , { [string] : { [string] : [string] , [string] : { [string] : [string] } } , [string] : [string] } , { [string] : { [string] : [string] , [string] : { [string] : [string] } } , [string] : [string] } , { [string] : { [string] : [string] , [string] : { [string] : [string] } } , [string] : [string] } , { [string] : { [string] : [string] , [string] : { [string] : [string] } } , [string] : [string] } ] [EOL] [EOL] [EOL] def update_category ( item ) : [EOL] tf = TfIdf ( ) [EOL] tf . add_document ( item [ [string] ] , item [ [string] ] ) [EOL] sims = [ ( x , tf . similarities ( x [ [string] ] ) ) for x in categories ] [EOL] score = max ( [ x [ [number] ] [ [number] ] for x in sims ] ) [EOL] category = [ x [ [number] ] for x in sims if x [ [number] ] [ [number] ] == score ] [EOL] if category : [EOL] item [ [string] ] = get_category ( category [ [number] ] ) [EOL] [EOL] [EOL] def request ( url ) : [EOL] headers = { [string] : [string] } [EOL] return requests . get ( url , headers = headers ) [EOL] [EOL] [EOL] def download ( url ) : [EOL] response = request ( url ) [EOL] name = url . split ( [string] ) [ - [number] ] [EOL] bio = BytesIO ( response . content ) [EOL] setattr ( bio , [string] , name ) [EOL] return File ( bio ) [EOL] [EOL] [EOL] def onerror ( tag ) : [EOL] return tag . split ( [string] ) [ [number] ] . strip ( [string] ) [EOL] [EOL] [EOL] [comment] [EOL] zhijia = [ [string] [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] class HkSpider ( scrapy . Spider ) : [EOL] name = [string] [EOL] allowed_domains = [ [string] ] [EOL] [comment] [EOL] start_urls = zhijia [EOL] item = { } [EOL] [EOL] def start_requests ( self ) : [EOL] for index , url in enumerate ( self . start_urls ) : [EOL] [comment] [EOL] yield Request ( url , dont_filter = True , callback = self . parseList ) [EOL] [EOL] def parseList ( self , response ) : [EOL] for i in range ( [number] ) : [EOL] xpath = [string] . format ( i ) [EOL] urls = response . xpath ( xpath ) . extract ( ) [EOL] urls = [ [string] + x for x in urls ] [EOL] for url in urls : [EOL] yield Request ( url , dont_filter = True , callback = self . parse ) [EOL] [EOL] def parse ( self , response ) : [EOL] item = self . item [EOL] [EOL] Xdescription = [string] [EOL] description = [string] . join ( map ( lambda x : x . strip ( ) , response . xpath ( Xdescription ) . extract ( ) ) ) [EOL] item [ [string] ] = description [EOL] item [ [string] ] = item [ [string] ] = description [EOL] update_category ( item ) [EOL] obj = Product . objects . filter ( name = item [ [string] ] ) [EOL] if obj : [EOL] return [EOL] Xbackgroup = [string] [EOL] backgroup = onerror ( response . xpath ( Xbackgroup ) . extract_first ( ) ) [EOL] item [ [string] ] = download ( backgroup ) [EOL] pictures = [ [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] pictures = [ response . xpath ( x ) . extract_first ( ) for x in pictures ] [EOL] pictures = [ onerror ( x ) for x in pictures if x ] [EOL] pictures = [ Images . objects . create ( image = x ) for x in map ( download , pictures ) ] [EOL] [EOL] content = [ { [string] : [string] } , { [string] : [string] } , { [string] : [string] } ] [EOL] content [ [number] ] [ [string] ] = response . xpath ( [string] ) . extract_first ( ) [EOL] content [ [number] ] [ [string] ] = [string] [EOL] [EOL] xpath = [string] [EOL] files = map ( download , response . xpath ( xpath ) . extract ( ) ) [EOL] files = Documents . bulk ( files ) [EOL] _tpl = [string] [EOL] files = [string] . join ( [ _tpl . format ( name = x . name , url = x . file . url ) for x in files ] ) [EOL] files = [string] % files [EOL] content [ [number] ] [ [string] ] = files [EOL] item [ [string] ] = content [EOL] obj = Product . objects . filter ( name = item [ [string] ] ) [EOL] if obj : [EOL] obj = obj [ [number] ] [EOL] [ setattr ( obj , k , v ) for k , v in item . items ( ) ] [EOL] obj . save ( ) [EOL] obj . pictures . clear ( ) [EOL] obj = Product . objects . create ( ** item ) [EOL] obj . pictures . add ( * pictures ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] import os [EOL] import sys [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] [comment] [EOL] [comment] [EOL] app_path = os . path . dirname ( os . path . abspath ( __file__ ) ) . replace ( [string] , [string] ) [EOL] sys . path . append ( os . path . join ( app_path , [string] ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if [string] not in sys . argv : [EOL] os . environ [ [string] ] = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] application = get_wsgi_application ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL]	0 0
from typing import List , Any , Dict [EOL] import typing [EOL] def parse ( filename ) : [EOL] try : [EOL] with open ( filename , [string] ) as fd : [EOL] data = [ x . split ( [string] , [number] ) for x in fd . read ( ) . splitlines ( ) if x ] [EOL] data = { x [ [number] ] : x [ [number] ] for x in data if len ( x ) == [number] } [EOL] except Exception as e : [EOL] print ( e ) [EOL] data = { } [EOL] return data [EOL] [EOL] [EOL] def replace ( old = [string] , new = [string] ) : [EOL] new = parse ( [string] ) [EOL] lines = [ ] [EOL] with open ( [string] , [string] ) as old : [EOL] for line in old . read ( ) . splitlines ( ) : [EOL] line = line . split ( [string] , [number] ) [EOL] if not len ( line ) == [number] and isinstance ( line , list ) : [EOL] lines . append ( [string] . join ( line ) ) [EOL] else : [EOL] value = new . get ( line [ [number] ] , line [ [number] ] ) [EOL] lines . append ( [string] . format ( line [ [number] ] , value ) ) [EOL] with open ( [string] , [string] ) as env : [EOL] env . write ( [string] . join ( lines ) ) [EOL] import os [EOL] try : [EOL] os . unlink ( [string] ) [EOL] except : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Dict [EOL] import typing [EOL] import sys [EOL] import os [EOL] [EOL] [EOL] class TfIdf ( object ) : [EOL] def __init__ ( self ) : [EOL] self . weighted = False [EOL] self . documents = [ ] [EOL] self . corpus_dict = { } [EOL] [EOL] def add_document ( self , doc_name , list_of_words ) : [EOL] [comment] [EOL] doc_dict = { } [EOL] for w in list_of_words : [EOL] doc_dict [ w ] = doc_dict . get ( w , [number] ) + [number] [EOL] self . corpus_dict [ w ] = self . corpus_dict . get ( w , [number] ) + [number] [EOL] [EOL] [comment] [EOL] length = float ( len ( list_of_words ) ) [EOL] for k in doc_dict : [EOL] doc_dict [ k ] = doc_dict [ k ] / length [EOL] [EOL] [comment] [EOL] self . documents . append ( [ doc_name , doc_dict ] ) [EOL] return self [EOL] [EOL] def similarities ( self , list_of_words ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] query_dict = { } [EOL] for w in list_of_words : [EOL] query_dict [ w ] = query_dict . get ( w , [number] ) + [number] [EOL] [EOL] [comment] [EOL] length = float ( len ( list_of_words ) ) [EOL] for k in query_dict : [EOL] query_dict [ k ] = query_dict [ k ] / length [EOL] [EOL] [comment] [EOL] sims = [ ] [EOL] for doc in self . documents : [EOL] score = [number] [EOL] doc_dict = doc [ [number] ] [EOL] for k in query_dict : [EOL] if k in doc_dict : [EOL] score += ( query_dict [ k ] / self . corpus_dict [ k ] ) + ( doc_dict [ k ] / self . corpus_dict [ k ] ) [EOL] sims . append ( [ doc [ [number] ] , score ] ) [EOL] [EOL] return sims [ [number] ] [EOL] def test ( ) : [EOL] obj = TfIdf ( ) . add_document ( [string] , [string] ) [EOL] print ( obj . similarities ( [string] ) ) [EOL] print ( obj . similarities ( [string] ) )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $builtins.float$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 $builtins.float$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import Any , List [EOL] import typing [EOL] from django . db import connections [EOL] [EOL] [EOL] def run_query_sql ( strSql , args = None ) : [EOL] [docstring] [EOL] [EOL] connection = connections [ [string] ] [EOL] cursor = connection . cursor ( ) [EOL] result_rows = [ ] [EOL] try : [EOL] if args : [EOL] cursor . execute ( strSql , args ) [EOL] else : [EOL] cursor . execute ( strSql ) [EOL] finally : [EOL] cursor . close ( ) [EOL] connection . close ( ) [EOL] return result_rows [EOL] [EOL] def source ( ) : [EOL] run_query_sql ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0