	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] [docstring] [EOL] [EOL] from django . conf import settings [EOL] from django . conf . urls . static import static [EOL] from django . contrib import admin [EOL] from django . contrib . auth import views as auth_views [EOL] from django . urls import path , include [EOL] from users import views as user_views [EOL] [EOL] urlpatterns = [ path ( [string] , admin . site . urls ) , path ( [string] , user_views . register , name = [string] ) , path ( [string] , user_views . profile , name = [string] ) , path ( [string] , auth_views . LoginView . as_view ( template_name = [string] ) , name = [string] ) , path ( [string] , auth_views . LogoutView . as_view ( template_name = [string] ) , name = [string] ) , path ( [string] , auth_views . PasswordResetView . as_view ( template_name = [string] ) , name = [string] ) , path ( [string] , auth_views . PasswordResetDoneView . as_view ( template_name = [string] ) , name = [string] ) , path ( [string] , auth_views . PasswordResetConfirmView . as_view ( template_name = [string] ) , name = [string] ) , path ( [string] , auth_views . PasswordResetCompleteView . as_view ( template_name = [string] ) , name = [string] ) , path ( [string] , include ( [string] , namespace = [string] ) ) , ] [EOL] [EOL] [EOL] if settings . DEBUG : [EOL] urlpatterns += static ( settings . MEDIA_URL , document_root = settings . MEDIA_ROOT )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from django . contrib import admin [EOL] [EOL] [comment] [EOL] from . models import Profile [EOL] [EOL] [comment] [EOL] admin . site . register ( Profile ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Union , Dict [EOL] import users [EOL] import typing [EOL] from django . shortcuts import render , redirect [EOL] from django . contrib import messages [EOL] from django . contrib . auth . decorators import login_required [EOL] from . forms import UserRegisterForm , UserUpdateForm , ProfileUpdateForm [EOL] [EOL] [EOL] def register ( request ) : [EOL] [docstring] [EOL] if request . method == [string] : [EOL] form = UserRegisterForm ( request . POST ) [EOL] if form . is_valid ( ) : [EOL] form . save ( ) [EOL] username = form . cleaned_data . get ( [string] ) [EOL] messages . success ( request , f' [string] ' ) [EOL] return redirect ( [string] ) [EOL] else : [EOL] form = UserRegisterForm ( ) [EOL] [EOL] context = { [string] : form } [EOL] template_name = [string] [EOL] [EOL] return render ( request , template_name , context ) [EOL] [EOL] [EOL] @ login_required def profile ( request ) : [EOL] if request . method == [string] : [EOL] u_form = UserUpdateForm ( request . POST , instance = request . user ) [EOL] p_form = ProfileUpdateForm ( request . POST , request . FILES , instance = request . user . profile ) [EOL] if u_form . is_valid ( ) and p_form . is_valid ( ) : [EOL] u_form . save ( ) [EOL] p_form . save ( ) [EOL] messages . success ( request , f' [string] ' ) [EOL] return redirect ( [string] ) [EOL] [EOL] else : [EOL] u_form = UserUpdateForm ( instance = request . user ) [EOL] p_form = ProfileUpdateForm ( instance = request . user . profile ) [EOL] [EOL] context = { [string] : u_form , [string] : p_form } [EOL] template_name = [string] [EOL] [EOL] return render ( request , template_name , context ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] from typing import Any , Literal , Tuple , Type [EOL] import users [EOL] import typing [EOL] import typing_extensions [EOL] from PIL import Image [EOL] [EOL] [comment] [EOL] from django . contrib . auth . models import User [EOL] from django . db import models [EOL] [EOL] [EOL] class Profile ( models . Model ) : [EOL] [docstring] [EOL] user = models . OneToOneField ( User , on_delete = models . CASCADE ) [EOL] image = models . ImageField ( default = [string] , upload_to = [string] ) [EOL] [EOL] def __str__ ( self ) : [EOL] [docstring] [EOL] return f"{ self . user . username } [string] " [EOL] [EOL] def save ( self , ** kwargs ) : [EOL] [docstring] [EOL] super ( ) . save ( ) [EOL] [comment] [EOL] img = Image . open ( self . image . path ) [EOL] [EOL] if img . height > [number] or img . width > [number] : [EOL] output_size = ( [number] , [number] ) [EOL] img . thumbnail ( output_size ) [EOL] img . save ( self . image . path ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.models.Profile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Tuple[typing_extensions.Literal,typing_extensions.Literal]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import List , Type [EOL] import users [EOL] import typing [EOL] from django import forms [EOL] from django . contrib . auth . forms import UserCreationForm [EOL] from django . contrib . auth . models import User [EOL] [EOL] [comment] [EOL] from . models import Profile [EOL] [EOL] [EOL] class UserRegisterForm ( UserCreationForm ) : [EOL] [docstring] [EOL] email = forms . EmailField ( ) [EOL] [EOL] class Meta : [EOL] model = User [EOL] fields = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] class UserUpdateForm ( forms . ModelForm ) : [EOL] [docstring] [EOL] email = forms . EmailField ( ) [EOL] [EOL] class Meta : [EOL] model = User [EOL] fields = [ [string] , [string] ] [EOL] [EOL] [EOL] class ProfileUpdateForm ( forms . ModelForm ) : [EOL] [docstring] [EOL] class Meta : [EOL] model = Profile [EOL] fields = [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.forms.UserRegisterForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.models.Profile]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.forms.UserUpdateForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.models.Profile]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[users.models.Profile]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class UsersConfig ( AppConfig ) : [EOL] name = [string] [EOL] [EOL] [comment] [EOL] def ready ( self ) : [EOL] import users . signals [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
[comment] [EOL] from typing import Type [EOL] import blog [EOL] import typing [EOL] from django . contrib . auth . models import User [EOL] from django . db import models [EOL] from django . urls import reverse [EOL] from django . utils import timezone [EOL] [EOL] [EOL] class Post ( models . Model ) : [EOL] [docstring] [EOL] title = models . CharField ( max_length = [number] ) [EOL] content = models . TextField ( ) [EOL] date_posted = models . DateTimeField ( default = timezone . now ) [EOL] author = models . ForeignKey ( User , on_delete = models . CASCADE ) [EOL] [EOL] def __str__ ( self ) : [EOL] [docstring] [EOL] return self . title [EOL] [EOL] def get_absolute_url ( self ) : [EOL] [docstring] [EOL] return reverse ( [string] , kwargs = { [string] : self . pk } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[blog.models.Post]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[blog.models.Post]$ 0 0 0 0 0 0 0 $typing.Type[blog.models.Post]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[blog.models.Post]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] from . models import Post [EOL] [EOL] [EOL] [comment] [EOL] admin . site . register ( Post )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class BlogConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any , List , Dict , Type [EOL] import blog [EOL] import typing [EOL] from django . contrib . auth . mixins import ( LoginRequiredMixin , UserPassesTestMixin ) [EOL] from django . contrib . auth . models import User [EOL] from django . shortcuts import render , get_object_or_404 [EOL] from django . views . generic import ( ListView , DetailView , CreateView , UpdateView , DeleteView , ) [EOL] [EOL] [comment] [EOL] from . models import Post [EOL] [EOL] [EOL] def home ( request ) : [EOL] [docstring] [EOL] context = { [string] : Post . objects . all ( ) } [EOL] return render ( request , [string] , context ) [EOL] [EOL] [EOL] class PostListView ( ListView ) : [EOL] [docstring] [EOL] model = Post [EOL] template_name = [string] [EOL] context_object_name = [string] [EOL] ordering = [ [string] ] [EOL] paginate_by = [number] [EOL] [EOL] [EOL] class UserPostListView ( ListView ) : [EOL] [docstring] [EOL] model = Post [EOL] template_name = [string] [EOL] context_object_name = [string] [EOL] paginate_by = [number] [EOL] [EOL] def get_queryset ( self ) : [EOL] user = get_object_or_404 ( User , username = self . kwargs . get ( [string] ) ) [EOL] return Post . objects . filter ( author = user ) . order_by ( [string] ) [EOL] [EOL] [EOL] class PostDetailView ( DetailView ) : [EOL] [docstring] [EOL] model = Post [EOL] [EOL] [EOL] class PostCreateView ( LoginRequiredMixin , CreateView ) : [EOL] [docstring] [EOL] model = Post [EOL] fields = [ [string] , [string] ] [EOL] [EOL] def form_valid ( self , form ) : [EOL] form . instance . author = self . request . user [EOL] return super ( ) . form_valid ( form ) [EOL] [EOL] [EOL] class PostUpdateView ( LoginRequiredMixin , UserPassesTestMixin , UpdateView ) : [EOL] [docstring] [EOL] model = Post [EOL] fields = [ [string] , [string] ] [EOL] [EOL] def form_valid ( self , form ) : [EOL] [docstring] [EOL] form . instance . author = self . request . user [EOL] return super ( ) . form_valid ( form ) [EOL] [EOL] def test_func ( self ) : [EOL] [docstring] [EOL] post = self . get_object ( ) [EOL] if self . request . user == post . author : [EOL] return True [EOL] return False [EOL] [EOL] [EOL] class PostDeleteView ( LoginRequiredMixin , UserPassesTestMixin , DeleteView ) : [EOL] [docstring] [EOL] model = Post [EOL] success_url = [string] [EOL] [EOL] def test_func ( self ) : [EOL] [docstring] [EOL] post = self . get_object ( ) [EOL] if self . request . user == post . author : [EOL] return True [EOL] return False [EOL] [EOL] [EOL] def about ( request ) : [EOL] [docstring] [EOL] context = { [string] : [string] } [EOL] template_name = [string] [EOL] return render ( request , template_name , context ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[blog.models.Post]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[blog.models.Post]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[blog.models.Post]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[blog.models.Post]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[blog.models.Post]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[blog.models.Post]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0