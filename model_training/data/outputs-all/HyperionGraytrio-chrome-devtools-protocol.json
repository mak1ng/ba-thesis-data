from typing import Any [EOL] import contextvars [EOL] import typing [EOL] from contextlib import contextmanager [EOL] import contextvars [EOL] [EOL] [EOL] _connection_context = contextvars . ContextVar ( [string] ) [EOL] _session_context = contextvars . ContextVar ( [string] ) [EOL] [EOL] [EOL] [EOL] [EOL] def get_connection_context ( fn_name ) : [EOL] [docstring] [EOL] try : [EOL] return _connection_context . get ( ) [EOL] except LookupError : [EOL] raise RuntimeError ( f'{ fn_name } [string] ' ) [EOL] [EOL] [EOL] def get_session_context ( fn_name ) : [EOL] [docstring] [EOL] try : [EOL] return _session_context . get ( ) [EOL] except LookupError : [EOL] raise RuntimeError ( f'{ fn_name } [string] ' ) [EOL] [EOL] [EOL] @ contextmanager def connection_context ( connection ) : [EOL] [docstring] [EOL] token = _connection_context . set ( connection ) [EOL] try : [EOL] yield [EOL] finally : [EOL] _connection_context . reset ( token ) [EOL] [EOL] [EOL] @ contextmanager def session_context ( session ) : [EOL] [docstring] [EOL] token = _session_context . set ( session ) [EOL] try : [EOL] yield [EOL] finally : [EOL] _session_context . reset ( token ) [EOL] [EOL] [EOL] def set_global_connection ( connection ) : [EOL] [docstring] [EOL] global _connection_context [EOL] _connection_context = contextvars . ContextVar ( [string] , default = connection ) [EOL] [EOL] [EOL] def set_global_session ( session ) : [EOL] [docstring] [EOL] global _session_context [EOL] _session_context = contextvars . ContextVar ( [string] , default = session ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contextvars.ContextVar$ 0 0 0 0 0 0 0 0 $contextvars.ContextVar$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contextvars.ContextVar$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contextvars.ContextVar$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contextvars.ContextVar$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contextvars.ContextVar$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contextvars.ContextVar$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contextvars.ContextVar$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contextvars.ContextVar$ 0 $contextvars.ContextVar$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $contextvars.ContextVar$ 0 $contextvars.ContextVar$ 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any [EOL] import cdp [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . animation [EOL] from cdp . animation import ( Animation , AnimationCanceled , AnimationCreated , AnimationEffect , AnimationStarted , KeyframeStyle , KeyframesRule ) [EOL] [EOL] [EOL] async def disable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . animation . disable ( ) ) [EOL] [EOL] [EOL] async def enable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . animation . enable ( ) ) [EOL] [EOL] [EOL] async def get_current_time ( id_ ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . animation . get_current_time ( id_ ) ) [EOL] [EOL] [EOL] async def get_playback_rate ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . animation . get_playback_rate ( ) ) [EOL] [EOL] [EOL] async def release_animations ( animations ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . animation . release_animations ( animations ) ) [EOL] [EOL] [EOL] async def resolve_animation ( animation_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . animation . resolve_animation ( animation_id ) ) [EOL] [EOL] [EOL] async def seek_animations ( animations , current_time ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . animation . seek_animations ( animations , current_time ) ) [EOL] [EOL] [EOL] async def set_paused ( animations , paused ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . animation . set_paused ( animations , paused ) ) [EOL] [EOL] [EOL] async def set_playback_rate ( playback_rate ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . animation . set_playback_rate ( playback_rate ) ) [EOL] [EOL] [EOL] async def set_timing ( animation_id , duration , delay ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . animation . set_timing ( animation_id , duration , delay ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.runtime.RemoteObject$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , List , Tuple [EOL] import cdp [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . system_info [EOL] from cdp . system_info import ( GPUDevice , GPUInfo , ImageDecodeAcceleratorCapability , ProcessInfo , Size , SubsamplingFormat , VideoDecodeAcceleratorCapability , VideoEncodeAcceleratorCapability ) [EOL] [EOL] [EOL] async def get_info ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . system_info . get_info ( ) ) [EOL] [EOL] [EOL] async def get_process_info ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . system_info . get_process_info ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[cdp.system_info.GPUInfo,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[cdp.system_info.ProcessInfo]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Optional , Any [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . cast [EOL] from cdp . cast import ( IssueUpdated , Sink , SinksUpdated ) [EOL] [EOL] [EOL] async def disable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . cast . disable ( ) ) [EOL] [EOL] [EOL] async def enable ( presentation_url = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . cast . enable ( presentation_url ) ) [EOL] [EOL] [EOL] async def set_sink_to_use ( sink_name ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . cast . set_sink_to_use ( sink_name ) ) [EOL] [EOL] [EOL] async def start_tab_mirroring ( sink_name ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . cast . start_tab_mirroring ( sink_name ) ) [EOL] [EOL] [EOL] async def stop_casting ( sink_name ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . cast . stop_casting ( sink_name ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Optional , List , Any [EOL] import cdp [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . accessibility [EOL] from cdp . accessibility import ( AXNode , AXNodeId , AXProperty , AXPropertyName , AXRelatedNode , AXValue , AXValueNativeSourceType , AXValueSource , AXValueSourceType , AXValueType ) [EOL] [EOL] [EOL] async def disable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . accessibility . disable ( ) ) [EOL] [EOL] [EOL] async def enable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . accessibility . enable ( ) ) [EOL] [EOL] [EOL] async def get_full_ax_tree ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . accessibility . get_full_ax_tree ( ) ) [EOL] [EOL] [EOL] async def get_partial_ax_tree ( node_id = None , backend_node_id = None , object_id = None , fetch_relatives = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . accessibility . get_partial_ax_tree ( node_id , backend_node_id , object_id , fetch_relatives ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[cdp.accessibility.AXNode]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[cdp.accessibility.AXNode]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . console [EOL] from cdp . console import ( ConsoleMessage , MessageAdded ) [EOL] [EOL] [EOL] async def clear_messages ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . console . clear_messages ( ) ) [EOL] [EOL] [EOL] async def disable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . console . disable ( ) ) [EOL] [EOL] [EOL] async def enable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . console . enable ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Optional , Tuple [EOL] import cdp [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . audits [EOL] [EOL] async def get_encoded_response ( request_id , encoding , quality = None , size_only = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . audits . get_encoded_response ( request_id , encoding , quality , size_only ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Optional[builtins.str],builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . device_orientation [EOL] [EOL] async def clear_device_orientation_override ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . device_orientation . clear_device_orientation_override ( ) ) [EOL] [EOL] [EOL] async def set_device_orientation_override ( alpha , beta , gamma ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . device_orientation . set_device_orientation_override ( alpha , beta , gamma ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Optional , List , Tuple [EOL] import cdp [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . indexed_db [EOL] from cdp . indexed_db import ( DataEntry , DatabaseWithObjectStores , Key , KeyPath , KeyRange , ObjectStore , ObjectStoreIndex ) [EOL] [EOL] [EOL] async def clear_object_store ( security_origin , database_name , object_store_name ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . indexed_db . clear_object_store ( security_origin , database_name , object_store_name ) ) [EOL] [EOL] [EOL] async def delete_database ( security_origin , database_name ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . indexed_db . delete_database ( security_origin , database_name ) ) [EOL] [EOL] [EOL] async def delete_object_store_entries ( security_origin , database_name , object_store_name , key_range ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . indexed_db . delete_object_store_entries ( security_origin , database_name , object_store_name , key_range ) ) [EOL] [EOL] [EOL] async def disable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . indexed_db . disable ( ) ) [EOL] [EOL] [EOL] async def enable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . indexed_db . enable ( ) ) [EOL] [EOL] [EOL] async def get_metadata ( security_origin , database_name , object_store_name ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . indexed_db . get_metadata ( security_origin , database_name , object_store_name ) ) [EOL] [EOL] [EOL] async def request_data ( security_origin , database_name , object_store_name , index_name , skip_count , page_size , key_range = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . indexed_db . request_data ( security_origin , database_name , object_store_name , index_name , skip_count , page_size , key_range ) ) [EOL] [EOL] [EOL] async def request_database ( security_origin , database_name ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . indexed_db . request_database ( security_origin , database_name ) ) [EOL] [EOL] [EOL] async def request_database_names ( security_origin ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . indexed_db . request_database_names ( security_origin ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.float,builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.List[cdp.indexed_db.DataEntry],builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.indexed_db.DatabaseWithObjectStores$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any [EOL] import cdp [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . application_cache [EOL] from cdp . application_cache import ( ApplicationCache , ApplicationCacheResource , ApplicationCacheStatusUpdated , FrameWithManifest , NetworkStateUpdated ) [EOL] [EOL] [EOL] async def enable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . application_cache . enable ( ) ) [EOL] [EOL] [EOL] async def get_application_cache_for_frame ( frame_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . application_cache . get_application_cache_for_frame ( frame_id ) ) [EOL] [EOL] [EOL] async def get_frames_with_manifests ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . application_cache . get_frames_with_manifests ( ) ) [EOL] [EOL] [EOL] async def get_manifest_for_frame ( frame_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . application_cache . get_manifest_for_frame ( frame_id ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.application_cache.ApplicationCache$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[cdp.application_cache.FrameWithManifest]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Optional , List , Tuple [EOL] import cdp [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . browser [EOL] from cdp . browser import ( Bounds , Bucket , Histogram , PermissionType , WindowID , WindowState ) [EOL] [EOL] [EOL] async def close ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . browser . close ( ) ) [EOL] [EOL] [EOL] async def crash ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . browser . crash ( ) ) [EOL] [EOL] [EOL] async def crash_gpu_process ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . browser . crash_gpu_process ( ) ) [EOL] [EOL] [EOL] async def get_browser_command_line ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . browser . get_browser_command_line ( ) ) [EOL] [EOL] [EOL] async def get_histogram ( name , delta = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . browser . get_histogram ( name , delta ) ) [EOL] [EOL] [EOL] async def get_histograms ( query = None , delta = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . browser . get_histograms ( query , delta ) ) [EOL] [EOL] [EOL] async def get_version ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . browser . get_version ( ) ) [EOL] [EOL] [EOL] async def get_window_bounds ( window_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . browser . get_window_bounds ( window_id ) ) [EOL] [EOL] [EOL] async def get_window_for_target ( target_id = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . browser . get_window_for_target ( target_id ) ) [EOL] [EOL] [EOL] async def grant_permissions ( origin , permissions , browser_context_id = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . browser . grant_permissions ( origin , permissions , browser_context_id ) ) [EOL] [EOL] [EOL] async def reset_permissions ( browser_context_id = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . browser . reset_permissions ( browser_context_id ) ) [EOL] [EOL] [EOL] async def set_dock_tile ( badge_label = None , image = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . browser . set_dock_tile ( badge_label , image ) ) [EOL] [EOL] [EOL] async def set_window_bounds ( window_id , bounds ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . browser . set_window_bounds ( window_id , bounds ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.browser.Histogram$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[cdp.browser.Histogram]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.browser.Bounds$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[cdp.browser.WindowID,cdp.browser.Bounds]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Optional , Any [EOL] import cdp [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . emulation [EOL] from cdp . emulation import ( ScreenOrientation , VirtualTimeBudgetExpired , VirtualTimePolicy ) [EOL] [EOL] [EOL] async def can_emulate ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . emulation . can_emulate ( ) ) [EOL] [EOL] [EOL] async def clear_device_metrics_override ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . emulation . clear_device_metrics_override ( ) ) [EOL] [EOL] [EOL] async def clear_geolocation_override ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . emulation . clear_geolocation_override ( ) ) [EOL] [EOL] [EOL] async def reset_page_scale_factor ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . emulation . reset_page_scale_factor ( ) ) [EOL] [EOL] [EOL] async def set_cpu_throttling_rate ( rate ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . emulation . set_cpu_throttling_rate ( rate ) ) [EOL] [EOL] [EOL] async def set_default_background_color_override ( color = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . emulation . set_default_background_color_override ( color ) ) [EOL] [EOL] [EOL] async def set_device_metrics_override ( width , height , device_scale_factor , mobile , scale = None , screen_width = None , screen_height = None , position_x = None , position_y = None , dont_set_visible_size = None , screen_orientation = None , viewport = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . emulation . set_device_metrics_override ( width , height , device_scale_factor , mobile , scale , screen_width , screen_height , position_x , position_y , dont_set_visible_size , screen_orientation , viewport ) ) [EOL] [EOL] [EOL] async def set_document_cookie_disabled ( disabled ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . emulation . set_document_cookie_disabled ( disabled ) ) [EOL] [EOL] [EOL] async def set_emit_touch_events_for_mouse ( enabled , configuration = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . emulation . set_emit_touch_events_for_mouse ( enabled , configuration ) ) [EOL] [EOL] [EOL] async def set_emulated_media ( media ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . emulation . set_emulated_media ( media ) ) [EOL] [EOL] [EOL] async def set_focus_emulation_enabled ( enabled ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . emulation . set_focus_emulation_enabled ( enabled ) ) [EOL] [EOL] [EOL] async def set_geolocation_override ( latitude = None , longitude = None , accuracy = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . emulation . set_geolocation_override ( latitude , longitude , accuracy ) ) [EOL] [EOL] [EOL] async def set_navigator_overrides ( platform ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . emulation . set_navigator_overrides ( platform ) ) [EOL] [EOL] [EOL] async def set_page_scale_factor ( page_scale_factor ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . emulation . set_page_scale_factor ( page_scale_factor ) ) [EOL] [EOL] [EOL] async def set_script_execution_disabled ( value ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . emulation . set_script_execution_disabled ( value ) ) [EOL] [EOL] [EOL] async def set_scrollbars_hidden ( hidden ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . emulation . set_scrollbars_hidden ( hidden ) ) [EOL] [EOL] [EOL] async def set_timezone_override ( timezone_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . emulation . set_timezone_override ( timezone_id ) ) [EOL] [EOL] [EOL] async def set_touch_emulation_enabled ( enabled , max_touch_points = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . emulation . set_touch_emulation_enabled ( enabled , max_touch_points ) ) [EOL] [EOL] [EOL] async def set_user_agent_override ( user_agent , accept_language = None , platform = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . emulation . set_user_agent_override ( user_agent , accept_language , platform ) ) [EOL] [EOL] [EOL] async def set_virtual_time_policy ( policy , budget = None , max_virtual_time_task_starvation_count = None , wait_for_navigation = None , initial_virtual_time = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . emulation . set_virtual_time_policy ( policy , budget , max_virtual_time_task_starvation_count , wait_for_navigation , initial_virtual_time ) ) [EOL] [EOL] [EOL] async def set_visible_size ( width , height ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . emulation . set_visible_size ( width , height ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Optional , Tuple [EOL] import cdp [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . io [EOL] from cdp . io import ( StreamHandle ) [EOL] [EOL] [EOL] async def close ( handle ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . io . close ( handle ) ) [EOL] [EOL] [EOL] async def read ( handle , offset = None , size = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . io . read ( handle , offset , size ) ) [EOL] [EOL] [EOL] async def resolve_blob ( object_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . io . resolve_blob ( object_id ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Optional[builtins.bool],builtins.str,builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Optional , List , Tuple [EOL] import cdp [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . fetch [EOL] from cdp . fetch import ( AuthChallenge , AuthChallengeResponse , AuthRequired , HeaderEntry , RequestId , RequestPattern , RequestPaused , RequestStage ) [EOL] [EOL] [EOL] async def continue_request ( request_id , url = None , method = None , post_data = None , headers = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . fetch . continue_request ( request_id , url , method , post_data , headers ) ) [EOL] [EOL] [EOL] async def continue_with_auth ( request_id , auth_challenge_response ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . fetch . continue_with_auth ( request_id , auth_challenge_response ) ) [EOL] [EOL] [EOL] async def disable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . fetch . disable ( ) ) [EOL] [EOL] [EOL] async def enable ( patterns = None , handle_auth_requests = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . fetch . enable ( patterns , handle_auth_requests ) ) [EOL] [EOL] [EOL] async def fail_request ( request_id , error_reason ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . fetch . fail_request ( request_id , error_reason ) ) [EOL] [EOL] [EOL] async def fulfill_request ( request_id , response_code , response_headers , body = None , response_phrase = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . fetch . fulfill_request ( request_id , response_code , response_headers , body , response_phrase ) ) [EOL] [EOL] [EOL] async def get_response_body ( request_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . fetch . get_response_body ( request_id ) ) [EOL] [EOL] [EOL] async def take_response_body_as_stream ( request_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . fetch . take_response_body_as_stream ( request_id ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.io.StreamHandle$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Optional , Tuple [EOL] import cdp [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . headless_experimental [EOL] from cdp . headless_experimental import ( NeedsBeginFramesChanged , ScreenshotParams ) [EOL] [EOL] [EOL] async def begin_frame ( frame_time_ticks = None , interval = None , no_display_updates = None , screenshot = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . headless_experimental . begin_frame ( frame_time_ticks , interval , no_display_updates , screenshot ) ) [EOL] [EOL] [EOL] async def disable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . headless_experimental . disable ( ) ) [EOL] [EOL] [EOL] async def enable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . headless_experimental . enable ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.bool,typing.Optional[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any [EOL] import cdp [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . web_authn [EOL] from cdp . web_authn import ( AuthenticatorId , AuthenticatorProtocol , AuthenticatorTransport , Credential , VirtualAuthenticatorOptions ) [EOL] [EOL] [EOL] async def add_credential ( authenticator_id , credential ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . web_authn . add_credential ( authenticator_id , credential ) ) [EOL] [EOL] [EOL] async def add_virtual_authenticator ( options ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . web_authn . add_virtual_authenticator ( options ) ) [EOL] [EOL] [EOL] async def clear_credentials ( authenticator_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . web_authn . clear_credentials ( authenticator_id ) ) [EOL] [EOL] [EOL] async def disable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . web_authn . disable ( ) ) [EOL] [EOL] [EOL] async def enable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . web_authn . enable ( ) ) [EOL] [EOL] [EOL] async def get_credentials ( authenticator_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . web_authn . get_credentials ( authenticator_id ) ) [EOL] [EOL] [EOL] async def remove_virtual_authenticator ( authenticator_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . web_authn . remove_virtual_authenticator ( authenticator_id ) ) [EOL] [EOL] [EOL] async def set_user_verified ( authenticator_id , is_user_verified ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . web_authn . set_user_verified ( authenticator_id , is_user_verified ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.web_authn.AuthenticatorId$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[cdp.web_authn.Credential]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any [EOL] import cdp [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . log [EOL] from cdp . log import ( EntryAdded , LogEntry , ViolationSetting ) [EOL] [EOL] [EOL] async def clear ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . log . clear ( ) ) [EOL] [EOL] [EOL] async def disable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . log . disable ( ) ) [EOL] [EOL] [EOL] async def enable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . log . enable ( ) ) [EOL] [EOL] [EOL] async def start_violations_report ( config ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . log . start_violations_report ( config ) ) [EOL] [EOL] [EOL] async def stop_violations_report ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . log . stop_violations_report ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import cdp [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . web_audio [EOL] from cdp . web_audio import ( BaseAudioContext , ContextChanged , ContextCreated , ContextDestroyed , ContextId , ContextRealtimeData , ContextState , ContextType ) [EOL] [EOL] [EOL] async def disable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . web_audio . disable ( ) ) [EOL] [EOL] [EOL] async def enable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . web_audio . enable ( ) ) [EOL] [EOL] [EOL] async def get_realtime_data ( context_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . web_audio . get_realtime_data ( context_id ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.web_audio.ContextRealtimeData$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , List , Tuple [EOL] import cdp [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . storage [EOL] from cdp . storage import ( CacheStorageContentUpdated , CacheStorageListUpdated , IndexedDBContentUpdated , IndexedDBListUpdated , StorageType , UsageForType ) [EOL] [EOL] [EOL] async def clear_data_for_origin ( origin , storage_types ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . storage . clear_data_for_origin ( origin , storage_types ) ) [EOL] [EOL] [EOL] async def get_usage_and_quota ( origin ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . storage . get_usage_and_quota ( origin ) ) [EOL] [EOL] [EOL] async def track_cache_storage_for_origin ( origin ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . storage . track_cache_storage_for_origin ( origin ) ) [EOL] [EOL] [EOL] async def track_indexed_db_for_origin ( origin ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . storage . track_indexed_db_for_origin ( origin ) ) [EOL] [EOL] [EOL] async def untrack_cache_storage_for_origin ( origin ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . storage . untrack_cache_storage_for_origin ( origin ) ) [EOL] [EOL] [EOL] async def untrack_indexed_db_for_origin ( origin ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . storage . untrack_indexed_db_for_origin ( origin ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.float,builtins.float,typing.List[cdp.storage.UsageForType]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Optional , Any [EOL] import cdp [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . overlay [EOL] from cdp . overlay import ( HighlightConfig , InspectMode , InspectModeCanceled , InspectNodeRequested , NodeHighlightRequested , ScreenshotRequested ) [EOL] [EOL] [EOL] async def disable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . overlay . disable ( ) ) [EOL] [EOL] [EOL] async def enable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . overlay . enable ( ) ) [EOL] [EOL] [EOL] async def get_highlight_object_for_test ( node_id , include_distance = None , include_style = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . overlay . get_highlight_object_for_test ( node_id , include_distance , include_style ) ) [EOL] [EOL] [EOL] async def hide_highlight ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . overlay . hide_highlight ( ) ) [EOL] [EOL] [EOL] async def highlight_frame ( frame_id , content_color = None , content_outline_color = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . overlay . highlight_frame ( frame_id , content_color , content_outline_color ) ) [EOL] [EOL] [EOL] async def highlight_node ( highlight_config , node_id = None , backend_node_id = None , object_id = None , selector = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . overlay . highlight_node ( highlight_config , node_id , backend_node_id , object_id , selector ) ) [EOL] [EOL] [EOL] async def highlight_quad ( quad , color = None , outline_color = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . overlay . highlight_quad ( quad , color , outline_color ) ) [EOL] [EOL] [EOL] async def highlight_rect ( x , y , width , height , color = None , outline_color = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . overlay . highlight_rect ( x , y , width , height , color , outline_color ) ) [EOL] [EOL] [EOL] async def set_inspect_mode ( mode , highlight_config = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . overlay . set_inspect_mode ( mode , highlight_config ) ) [EOL] [EOL] [EOL] async def set_paused_in_debugger_message ( message = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . overlay . set_paused_in_debugger_message ( message ) ) [EOL] [EOL] [EOL] async def set_show_ad_highlights ( show ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . overlay . set_show_ad_highlights ( show ) ) [EOL] [EOL] [EOL] async def set_show_debug_borders ( show ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . overlay . set_show_debug_borders ( show ) ) [EOL] [EOL] [EOL] async def set_show_fps_counter ( show ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . overlay . set_show_fps_counter ( show ) ) [EOL] [EOL] [EOL] async def set_show_hit_test_borders ( show ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . overlay . set_show_hit_test_borders ( show ) ) [EOL] [EOL] [EOL] async def set_show_layout_shift_regions ( result ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . overlay . set_show_layout_shift_regions ( result ) ) [EOL] [EOL] [EOL] async def set_show_paint_rects ( result ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . overlay . set_show_paint_rects ( result ) ) [EOL] [EOL] [EOL] async def set_show_scroll_bottleneck_rects ( show ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . overlay . set_show_scroll_bottleneck_rects ( show ) ) [EOL] [EOL] [EOL] async def set_show_viewport_size_on_resize ( show ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . overlay . set_show_viewport_size_on_resize ( show ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any [EOL] import cdp [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . dom_storage [EOL] from cdp . dom_storage import ( DomStorageItemAdded , DomStorageItemRemoved , DomStorageItemUpdated , DomStorageItemsCleared , Item , StorageId ) [EOL] [EOL] [EOL] async def clear ( storage_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom_storage . clear ( storage_id ) ) [EOL] [EOL] [EOL] async def disable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom_storage . disable ( ) ) [EOL] [EOL] [EOL] async def enable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom_storage . enable ( ) ) [EOL] [EOL] [EOL] async def get_dom_storage_items ( storage_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom_storage . get_dom_storage_items ( storage_id ) ) [EOL] [EOL] [EOL] async def remove_dom_storage_item ( storage_id , key ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom_storage . remove_dom_storage_item ( storage_id , key ) ) [EOL] [EOL] [EOL] async def set_dom_storage_item ( storage_id , key , value ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom_storage . set_dom_storage_item ( storage_id , key , value ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[cdp.dom_storage.Item]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Optional , Tuple [EOL] import cdp [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . memory [EOL] from cdp . memory import ( Module , PressureLevel , SamplingProfile , SamplingProfileNode ) [EOL] [EOL] [EOL] async def forcibly_purge_java_script_memory ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . memory . forcibly_purge_java_script_memory ( ) ) [EOL] [EOL] [EOL] async def get_all_time_sampling_profile ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . memory . get_all_time_sampling_profile ( ) ) [EOL] [EOL] [EOL] async def get_browser_sampling_profile ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . memory . get_browser_sampling_profile ( ) ) [EOL] [EOL] [EOL] async def get_dom_counters ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . memory . get_dom_counters ( ) ) [EOL] [EOL] [EOL] async def get_sampling_profile ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . memory . get_sampling_profile ( ) ) [EOL] [EOL] [EOL] async def prepare_for_leak_detection ( ) : [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . memory . prepare_for_leak_detection ( ) ) [EOL] [EOL] [EOL] async def set_pressure_notifications_suppressed ( suppressed ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . memory . set_pressure_notifications_suppressed ( suppressed ) ) [EOL] [EOL] [EOL] async def simulate_pressure_notification ( level ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . memory . simulate_pressure_notification ( level ) ) [EOL] [EOL] [EOL] async def start_sampling ( sampling_interval = None , suppress_randomness = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . memory . start_sampling ( sampling_interval , suppress_randomness ) ) [EOL] [EOL] [EOL] async def stop_sampling ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . memory . stop_sampling ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.memory.SamplingProfile$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.memory.SamplingProfile$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.memory.SamplingProfile$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . tethering [EOL] from cdp . tethering import ( Accepted ) [EOL] [EOL] [EOL] async def bind ( port ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . tethering . bind ( port ) ) [EOL] [EOL] [EOL] async def unbind ( port ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . tethering . unbind ( port ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from . import accessibility [EOL] from . import animation [EOL] from . import application_cache [EOL] from . import audits [EOL] from . import background_service [EOL] from . import browser [EOL] from . import cache_storage [EOL] from . import cast [EOL] from . import console [EOL] from . import css [EOL] from . import database [EOL] from . import debugger [EOL] from . import device_orientation [EOL] from . import dom [EOL] from . import dom_debugger [EOL] from . import dom_snapshot [EOL] from . import dom_storage [EOL] from . import emulation [EOL] from . import fetch [EOL] from . import headless_experimental [EOL] from . import heap_profiler [EOL] from . import indexed_db [EOL] from . import input_ [EOL] from . import inspector [EOL] from . import io [EOL] from . import layer_tree [EOL] from . import log [EOL] from . import memory [EOL] from . import network [EOL] from . import overlay [EOL] from . import page [EOL] from . import performance [EOL] from . import profiler [EOL] from . import runtime [EOL] from . import schema [EOL] from . import security [EOL] from . import service_worker [EOL] from . import storage [EOL] from . import system_info [EOL] from . import target [EOL] from . import tethering [EOL] from . import tracing [EOL] from . import web_audio [EOL] from . import web_authn [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Optional , List , Any [EOL] import cdp [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . dom_debugger [EOL] from cdp . dom_debugger import ( DOMBreakpointType , EventListener ) [EOL] [EOL] [EOL] async def get_event_listeners ( object_id , depth = None , pierce = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom_debugger . get_event_listeners ( object_id , depth , pierce ) ) [EOL] [EOL] [EOL] async def remove_dom_breakpoint ( node_id , type_ ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom_debugger . remove_dom_breakpoint ( node_id , type_ ) ) [EOL] [EOL] [EOL] async def remove_event_listener_breakpoint ( event_name , target_name = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom_debugger . remove_event_listener_breakpoint ( event_name , target_name ) ) [EOL] [EOL] [EOL] async def remove_instrumentation_breakpoint ( event_name ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom_debugger . remove_instrumentation_breakpoint ( event_name ) ) [EOL] [EOL] [EOL] async def remove_xhr_breakpoint ( url ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom_debugger . remove_xhr_breakpoint ( url ) ) [EOL] [EOL] [EOL] async def set_dom_breakpoint ( node_id , type_ ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom_debugger . set_dom_breakpoint ( node_id , type_ ) ) [EOL] [EOL] [EOL] async def set_event_listener_breakpoint ( event_name , target_name = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom_debugger . set_event_listener_breakpoint ( event_name , target_name ) ) [EOL] [EOL] [EOL] async def set_instrumentation_breakpoint ( event_name ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom_debugger . set_instrumentation_breakpoint ( event_name ) ) [EOL] [EOL] [EOL] async def set_xhr_breakpoint ( url ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom_debugger . set_xhr_breakpoint ( url ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[cdp.dom_debugger.EventListener]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Optional , List , Tuple [EOL] import cdp [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . runtime [EOL] from cdp . runtime import ( BindingCalled , CallArgument , CallFrame , ConsoleAPICalled , CustomPreview , EntryPreview , ExceptionDetails , ExceptionRevoked , ExceptionThrown , ExecutionContextCreated , ExecutionContextDescription , ExecutionContextDestroyed , ExecutionContextId , ExecutionContextsCleared , InspectRequested , InternalPropertyDescriptor , ObjectPreview , PrivatePropertyDescriptor , PropertyDescriptor , PropertyPreview , RemoteObject , RemoteObjectId , ScriptId , StackTrace , StackTraceId , TimeDelta , Timestamp , UniqueDebuggerId , UnserializableValue ) [EOL] [EOL] [EOL] async def add_binding ( name , execution_context_id = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . runtime . add_binding ( name , execution_context_id ) ) [EOL] [EOL] [EOL] async def await_promise ( promise_object_id , return_by_value = None , generate_preview = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . runtime . await_promise ( promise_object_id , return_by_value , generate_preview ) ) [EOL] [EOL] [EOL] async def call_function_on ( function_declaration , object_id = None , arguments = None , silent = None , return_by_value = None , generate_preview = None , user_gesture = None , await_promise = None , execution_context_id = None , object_group = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . runtime . call_function_on ( function_declaration , object_id , arguments , silent , return_by_value , generate_preview , user_gesture , await_promise , execution_context_id , object_group ) ) [EOL] [EOL] [EOL] async def compile_script ( expression , source_url , persist_script , execution_context_id = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . runtime . compile_script ( expression , source_url , persist_script , execution_context_id ) ) [EOL] [EOL] [EOL] async def disable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . runtime . disable ( ) ) [EOL] [EOL] [EOL] async def discard_console_entries ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . runtime . discard_console_entries ( ) ) [EOL] [EOL] [EOL] async def enable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . runtime . enable ( ) ) [EOL] [EOL] [EOL] async def evaluate ( expression , object_group = None , include_command_line_api = None , silent = None , context_id = None , return_by_value = None , generate_preview = None , user_gesture = None , await_promise = None , throw_on_side_effect = None , timeout = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . runtime . evaluate ( expression , object_group , include_command_line_api , silent , context_id , return_by_value , generate_preview , user_gesture , await_promise , throw_on_side_effect , timeout ) ) [EOL] [EOL] [EOL] async def get_heap_usage ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . runtime . get_heap_usage ( ) ) [EOL] [EOL] [EOL] async def get_isolate_id ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . runtime . get_isolate_id ( ) ) [EOL] [EOL] [EOL] async def get_properties ( object_id , own_properties = None , accessor_properties_only = None , generate_preview = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . runtime . get_properties ( object_id , own_properties , accessor_properties_only , generate_preview ) ) [EOL] [EOL] [EOL] async def global_lexical_scope_names ( execution_context_id = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . runtime . global_lexical_scope_names ( execution_context_id ) ) [EOL] [EOL] [EOL] async def query_objects ( prototype_object_id , object_group = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . runtime . query_objects ( prototype_object_id , object_group ) ) [EOL] [EOL] [EOL] async def release_object ( object_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . runtime . release_object ( object_id ) ) [EOL] [EOL] [EOL] async def release_object_group ( object_group ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . runtime . release_object_group ( object_group ) ) [EOL] [EOL] [EOL] async def remove_binding ( name ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . runtime . remove_binding ( name ) ) [EOL] [EOL] [EOL] async def run_if_waiting_for_debugger ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . runtime . run_if_waiting_for_debugger ( ) ) [EOL] [EOL] [EOL] async def run_script ( script_id , execution_context_id = None , object_group = None , silent = None , include_command_line_api = None , return_by_value = None , generate_preview = None , await_promise = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . runtime . run_script ( script_id , execution_context_id , object_group , silent , include_command_line_api , return_by_value , generate_preview , await_promise ) ) [EOL] [EOL] [EOL] async def set_async_call_stack_depth ( max_depth ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . runtime . set_async_call_stack_depth ( max_depth ) ) [EOL] [EOL] [EOL] async def set_custom_object_formatter_enabled ( enabled ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . runtime . set_custom_object_formatter_enabled ( enabled ) ) [EOL] [EOL] [EOL] async def set_max_call_stack_size_to_capture ( size ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . runtime . set_max_call_stack_size_to_capture ( size ) ) [EOL] [EOL] [EOL] async def terminate_execution ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . runtime . terminate_execution ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[cdp.runtime.RemoteObject,typing.Optional[cdp.runtime.ExceptionDetails]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[cdp.runtime.RemoteObject,typing.Optional[cdp.runtime.ExceptionDetails]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Optional[cdp.runtime.ScriptId],typing.Optional[cdp.runtime.ExceptionDetails]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[cdp.runtime.RemoteObject,typing.Optional[cdp.runtime.ExceptionDetails]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.float,builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.List[cdp.runtime.PropertyDescriptor],typing.Optional[typing.List[cdp.runtime.InternalPropertyDescriptor]],typing.Optional[typing.List[cdp.runtime.PrivatePropertyDescriptor]],typing.Optional[cdp.runtime.ExceptionDetails]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.runtime.RemoteObject$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[cdp.runtime.RemoteObject,typing.Optional[cdp.runtime.ExceptionDetails]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Optional , List , Any [EOL] import cdp [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . input_ [EOL] from cdp . input_ import ( GestureSourceType , TimeSinceEpoch , TouchPoint ) [EOL] [EOL] [EOL] async def dispatch_key_event ( type_ , modifiers = None , timestamp = None , text = None , unmodified_text = None , key_identifier = None , code = None , key = None , windows_virtual_key_code = None , native_virtual_key_code = None , auto_repeat = None , is_keypad = None , is_system_key = None , location = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . input_ . dispatch_key_event ( type_ , modifiers , timestamp , text , unmodified_text , key_identifier , code , key , windows_virtual_key_code , native_virtual_key_code , auto_repeat , is_keypad , is_system_key , location ) ) [EOL] [EOL] [EOL] async def dispatch_mouse_event ( type_ , x , y , modifiers = None , timestamp = None , button = None , buttons = None , click_count = None , delta_x = None , delta_y = None , pointer_type = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . input_ . dispatch_mouse_event ( type_ , x , y , modifiers , timestamp , button , buttons , click_count , delta_x , delta_y , pointer_type ) ) [EOL] [EOL] [EOL] async def dispatch_touch_event ( type_ , touch_points , modifiers = None , timestamp = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . input_ . dispatch_touch_event ( type_ , touch_points , modifiers , timestamp ) ) [EOL] [EOL] [EOL] async def emulate_touch_from_mouse_event ( type_ , x , y , button , timestamp = None , delta_x = None , delta_y = None , modifiers = None , click_count = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . input_ . emulate_touch_from_mouse_event ( type_ , x , y , button , timestamp , delta_x , delta_y , modifiers , click_count ) ) [EOL] [EOL] [EOL] async def insert_text ( text ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . input_ . insert_text ( text ) ) [EOL] [EOL] [EOL] async def set_ignore_input_events ( ignore ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . input_ . set_ignore_input_events ( ignore ) ) [EOL] [EOL] [EOL] async def synthesize_pinch_gesture ( x , y , scale_factor , relative_speed = None , gesture_source_type = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . input_ . synthesize_pinch_gesture ( x , y , scale_factor , relative_speed , gesture_source_type ) ) [EOL] [EOL] [EOL] async def synthesize_scroll_gesture ( x , y , x_distance = None , y_distance = None , x_overscroll = None , y_overscroll = None , prevent_fling = None , speed = None , gesture_source_type = None , repeat_count = None , repeat_delay_ms = None , interaction_marker_name = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . input_ . synthesize_scroll_gesture ( x , y , x_distance , y_distance , x_overscroll , y_overscroll , prevent_fling , speed , gesture_source_type , repeat_count , repeat_delay_ms , interaction_marker_name ) ) [EOL] [EOL] [EOL] async def synthesize_tap_gesture ( x , y , duration = None , tap_count = None , gesture_source_type = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . input_ . synthesize_tap_gesture ( x , y , duration , tap_count , gesture_source_type ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Optional , List , Any [EOL] import cdp [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . target [EOL] from cdp . target import ( AttachedToTarget , BrowserContextID , DetachedFromTarget , ReceivedMessageFromTarget , RemoteLocation , SessionID , TargetCrashed , TargetCreated , TargetDestroyed , TargetID , TargetInfo , TargetInfoChanged ) [EOL] [EOL] [EOL] async def activate_target ( target_id ) : [EOL] [docstring] [EOL] connection = get_connection_context ( [string] ) [EOL] return await connection . execute ( cdp . target . activate_target ( target_id ) ) [EOL] [EOL] [EOL] async def attach_to_browser_target ( ) : [EOL] [docstring] [EOL] connection = get_connection_context ( [string] ) [EOL] return await connection . execute ( cdp . target . attach_to_browser_target ( ) ) [EOL] [EOL] [EOL] async def attach_to_target ( target_id , flatten = None ) : [EOL] [docstring] [EOL] connection = get_connection_context ( [string] ) [EOL] return await connection . execute ( cdp . target . attach_to_target ( target_id , flatten ) ) [EOL] [EOL] [EOL] async def close_target ( target_id ) : [EOL] [docstring] [EOL] connection = get_connection_context ( [string] ) [EOL] return await connection . execute ( cdp . target . close_target ( target_id ) ) [EOL] [EOL] [EOL] async def create_browser_context ( ) : [EOL] [docstring] [EOL] connection = get_connection_context ( [string] ) [EOL] return await connection . execute ( cdp . target . create_browser_context ( ) ) [EOL] [EOL] [EOL] async def create_target ( url , width = None , height = None , browser_context_id = None , enable_begin_frame_control = None , new_window = None , background = None ) : [EOL] [docstring] [EOL] connection = get_connection_context ( [string] ) [EOL] return await connection . execute ( cdp . target . create_target ( url , width , height , browser_context_id , enable_begin_frame_control , new_window , background ) ) [EOL] [EOL] [EOL] async def detach_from_target ( session_id = None , target_id = None ) : [EOL] [docstring] [EOL] connection = get_connection_context ( [string] ) [EOL] return await connection . execute ( cdp . target . detach_from_target ( session_id , target_id ) ) [EOL] [EOL] [EOL] async def dispose_browser_context ( browser_context_id ) : [EOL] [docstring] [EOL] connection = get_connection_context ( [string] ) [EOL] return await connection . execute ( cdp . target . dispose_browser_context ( browser_context_id ) ) [EOL] [EOL] [EOL] async def expose_dev_tools_protocol ( target_id , binding_name = None ) : [EOL] [docstring] [EOL] connection = get_connection_context ( [string] ) [EOL] return await connection . execute ( cdp . target . expose_dev_tools_protocol ( target_id , binding_name ) ) [EOL] [EOL] [EOL] async def get_browser_contexts ( ) : [EOL] [docstring] [EOL] connection = get_connection_context ( [string] ) [EOL] return await connection . execute ( cdp . target . get_browser_contexts ( ) ) [EOL] [EOL] [EOL] async def get_target_info ( target_id = None ) : [EOL] [docstring] [EOL] connection = get_connection_context ( [string] ) [EOL] return await connection . execute ( cdp . target . get_target_info ( target_id ) ) [EOL] [EOL] [EOL] async def get_targets ( ) : [EOL] [docstring] [EOL] connection = get_connection_context ( [string] ) [EOL] return await connection . execute ( cdp . target . get_targets ( ) ) [EOL] [EOL] [EOL] async def send_message_to_target ( message , session_id = None , target_id = None ) : [EOL] [docstring] [EOL] connection = get_connection_context ( [string] ) [EOL] return await connection . execute ( cdp . target . send_message_to_target ( message , session_id , target_id ) ) [EOL] [EOL] [EOL] async def set_auto_attach ( auto_attach , wait_for_debugger_on_start , flatten = None ) : [EOL] [docstring] [EOL] connection = get_connection_context ( [string] ) [EOL] return await connection . execute ( cdp . target . set_auto_attach ( auto_attach , wait_for_debugger_on_start , flatten ) ) [EOL] [EOL] [EOL] async def set_discover_targets ( discover ) : [EOL] [docstring] [EOL] connection = get_connection_context ( [string] ) [EOL] return await connection . execute ( cdp . target . set_discover_targets ( discover ) ) [EOL] [EOL] [EOL] async def set_remote_locations ( locations ) : [EOL] [docstring] [EOL] connection = get_connection_context ( [string] ) [EOL] return await connection . execute ( cdp . target . set_remote_locations ( locations ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.target.SessionID$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.target.SessionID$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.target.BrowserContextID$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.target.TargetID$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[cdp.target.BrowserContextID]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.target.TargetInfo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[cdp.target.TargetInfo]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Optional , List , Tuple [EOL] import cdp [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . dom [EOL] from cdp . dom import ( AttributeModified , AttributeRemoved , BackendNode , BackendNodeId , BoxModel , CharacterDataModified , ChildNodeCountUpdated , ChildNodeInserted , ChildNodeRemoved , DistributedNodesUpdated , DocumentUpdated , InlineStyleInvalidated , Node , NodeId , PseudoElementAdded , PseudoElementRemoved , PseudoType , Quad , RGBA , Rect , SetChildNodes , ShadowRootPopped , ShadowRootPushed , ShadowRootType , ShapeOutsideInfo ) [EOL] [EOL] [EOL] async def collect_class_names_from_subtree ( node_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . collect_class_names_from_subtree ( node_id ) ) [EOL] [EOL] [EOL] async def copy_to ( node_id , target_node_id , insert_before_node_id = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . copy_to ( node_id , target_node_id , insert_before_node_id ) ) [EOL] [EOL] [EOL] async def describe_node ( node_id = None , backend_node_id = None , object_id = None , depth = None , pierce = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . describe_node ( node_id , backend_node_id , object_id , depth , pierce ) ) [EOL] [EOL] [EOL] async def disable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . disable ( ) ) [EOL] [EOL] [EOL] async def discard_search_results ( search_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . discard_search_results ( search_id ) ) [EOL] [EOL] [EOL] async def enable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . enable ( ) ) [EOL] [EOL] [EOL] async def focus ( node_id = None , backend_node_id = None , object_id = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . focus ( node_id , backend_node_id , object_id ) ) [EOL] [EOL] [EOL] async def get_attributes ( node_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . get_attributes ( node_id ) ) [EOL] [EOL] [EOL] async def get_box_model ( node_id = None , backend_node_id = None , object_id = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . get_box_model ( node_id , backend_node_id , object_id ) ) [EOL] [EOL] [EOL] async def get_content_quads ( node_id = None , backend_node_id = None , object_id = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . get_content_quads ( node_id , backend_node_id , object_id ) ) [EOL] [EOL] [EOL] async def get_document ( depth = None , pierce = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . get_document ( depth , pierce ) ) [EOL] [EOL] [EOL] async def get_file_info ( object_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . get_file_info ( object_id ) ) [EOL] [EOL] [EOL] async def get_flattened_document ( depth = None , pierce = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . get_flattened_document ( depth , pierce ) ) [EOL] [EOL] [EOL] async def get_frame_owner ( frame_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . get_frame_owner ( frame_id ) ) [EOL] [EOL] [EOL] async def get_node_for_location ( x , y , include_user_agent_shadow_dom = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . get_node_for_location ( x , y , include_user_agent_shadow_dom ) ) [EOL] [EOL] [EOL] async def get_outer_html ( node_id = None , backend_node_id = None , object_id = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . get_outer_html ( node_id , backend_node_id , object_id ) ) [EOL] [EOL] [EOL] async def get_relayout_boundary ( node_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . get_relayout_boundary ( node_id ) ) [EOL] [EOL] [EOL] async def get_search_results ( search_id , from_index , to_index ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . get_search_results ( search_id , from_index , to_index ) ) [EOL] [EOL] [EOL] async def hide_highlight ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . hide_highlight ( ) ) [EOL] [EOL] [EOL] async def highlight_node ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . highlight_node ( ) ) [EOL] [EOL] [EOL] async def highlight_rect ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . highlight_rect ( ) ) [EOL] [EOL] [EOL] async def mark_undoable_state ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . mark_undoable_state ( ) ) [EOL] [EOL] [EOL] async def move_to ( node_id , target_node_id , insert_before_node_id = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . move_to ( node_id , target_node_id , insert_before_node_id ) ) [EOL] [EOL] [EOL] async def perform_search ( query , include_user_agent_shadow_dom = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . perform_search ( query , include_user_agent_shadow_dom ) ) [EOL] [EOL] [EOL] async def push_node_by_path_to_frontend ( path ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . push_node_by_path_to_frontend ( path ) ) [EOL] [EOL] [EOL] async def push_nodes_by_backend_ids_to_frontend ( backend_node_ids ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . push_nodes_by_backend_ids_to_frontend ( backend_node_ids ) ) [EOL] [EOL] [EOL] async def query_selector ( node_id , selector ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . query_selector ( node_id , selector ) ) [EOL] [EOL] [EOL] async def query_selector_all ( node_id , selector ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . query_selector_all ( node_id , selector ) ) [EOL] [EOL] [EOL] async def redo ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . redo ( ) ) [EOL] [EOL] [EOL] async def remove_attribute ( node_id , name ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . remove_attribute ( node_id , name ) ) [EOL] [EOL] [EOL] async def remove_node ( node_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . remove_node ( node_id ) ) [EOL] [EOL] [EOL] async def request_child_nodes ( node_id , depth = None , pierce = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . request_child_nodes ( node_id , depth , pierce ) ) [EOL] [EOL] [EOL] async def request_node ( object_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . request_node ( object_id ) ) [EOL] [EOL] [EOL] async def resolve_node ( node_id = None , backend_node_id = None , object_group = None , execution_context_id = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . resolve_node ( node_id , backend_node_id , object_group , execution_context_id ) ) [EOL] [EOL] [EOL] async def set_attribute_value ( node_id , name , value ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . set_attribute_value ( node_id , name , value ) ) [EOL] [EOL] [EOL] async def set_attributes_as_text ( node_id , text , name = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . set_attributes_as_text ( node_id , text , name ) ) [EOL] [EOL] [EOL] async def set_file_input_files ( files , node_id = None , backend_node_id = None , object_id = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . set_file_input_files ( files , node_id , backend_node_id , object_id ) ) [EOL] [EOL] [EOL] async def set_inspected_node ( node_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . set_inspected_node ( node_id ) ) [EOL] [EOL] [EOL] async def set_node_name ( node_id , name ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . set_node_name ( node_id , name ) ) [EOL] [EOL] [EOL] async def set_node_value ( node_id , value ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . set_node_value ( node_id , value ) ) [EOL] [EOL] [EOL] async def set_outer_html ( node_id , outer_html ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . set_outer_html ( node_id , outer_html ) ) [EOL] [EOL] [EOL] async def undo ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom . undo ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.dom.NodeId$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.dom.Node$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.dom.BoxModel$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[cdp.dom.Quad]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.dom.Node$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[cdp.dom.Node]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[cdp.dom.BackendNodeId,typing.Optional[cdp.dom.NodeId]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[cdp.dom.BackendNodeId,typing.Optional[cdp.dom.NodeId]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.dom.NodeId$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[cdp.dom.NodeId]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.dom.NodeId$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.dom.NodeId$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[cdp.dom.NodeId]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.dom.NodeId$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[cdp.dom.NodeId]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.dom.NodeId$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.runtime.RemoteObject$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.dom.NodeId$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Optional , List , Tuple [EOL] import cdp [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . database [EOL] from cdp . database import ( AddDatabase , Database , DatabaseId , Error ) [EOL] [EOL] [EOL] async def disable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . database . disable ( ) ) [EOL] [EOL] [EOL] async def enable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . database . enable ( ) ) [EOL] [EOL] [EOL] async def execute_sql ( database_id , query ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . database . execute_sql ( database_id , query ) ) [EOL] [EOL] [EOL] async def get_database_table_names ( database_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . database . get_database_table_names ( database_id ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Optional[typing.List[builtins.str]],typing.Optional[typing.List[typing.Any]],typing.Optional[cdp.database.Error]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Optional , List , Any [EOL] import cdp [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . layer_tree [EOL] from cdp . layer_tree import ( Layer , LayerId , LayerPainted , LayerTreeDidChange , PaintProfile , PictureTile , ScrollRect , SnapshotId , StickyPositionConstraint ) [EOL] [EOL] [EOL] async def compositing_reasons ( layer_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . layer_tree . compositing_reasons ( layer_id ) ) [EOL] [EOL] [EOL] async def disable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . layer_tree . disable ( ) ) [EOL] [EOL] [EOL] async def enable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . layer_tree . enable ( ) ) [EOL] [EOL] [EOL] async def load_snapshot ( tiles ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . layer_tree . load_snapshot ( tiles ) ) [EOL] [EOL] [EOL] async def make_snapshot ( layer_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . layer_tree . make_snapshot ( layer_id ) ) [EOL] [EOL] [EOL] async def profile_snapshot ( snapshot_id , min_repeat_count = None , min_duration = None , clip_rect = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . layer_tree . profile_snapshot ( snapshot_id , min_repeat_count , min_duration , clip_rect ) ) [EOL] [EOL] [EOL] async def release_snapshot ( snapshot_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . layer_tree . release_snapshot ( snapshot_id ) ) [EOL] [EOL] [EOL] async def replay_snapshot ( snapshot_id , from_step = None , to_step = None , scale = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . layer_tree . replay_snapshot ( snapshot_id , from_step , to_step , scale ) ) [EOL] [EOL] [EOL] async def snapshot_command_log ( snapshot_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . layer_tree . snapshot_command_log ( snapshot_id ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.layer_tree.SnapshotId$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.layer_tree.SnapshotId$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[cdp.layer_tree.PaintProfile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.dict]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Optional , Any [EOL] import cdp [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . heap_profiler [EOL] from cdp . heap_profiler import ( AddHeapSnapshotChunk , HeapSnapshotObjectId , HeapStatsUpdate , LastSeenObjectId , ReportHeapSnapshotProgress , ResetProfiles , SamplingHeapProfile , SamplingHeapProfileNode , SamplingHeapProfileSample ) [EOL] [EOL] [EOL] async def add_inspected_heap_object ( heap_object_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . heap_profiler . add_inspected_heap_object ( heap_object_id ) ) [EOL] [EOL] [EOL] async def collect_garbage ( ) : [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . heap_profiler . collect_garbage ( ) ) [EOL] [EOL] [EOL] async def disable ( ) : [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . heap_profiler . disable ( ) ) [EOL] [EOL] [EOL] async def enable ( ) : [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . heap_profiler . enable ( ) ) [EOL] [EOL] [EOL] async def get_heap_object_id ( object_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . heap_profiler . get_heap_object_id ( object_id ) ) [EOL] [EOL] [EOL] async def get_object_by_heap_object_id ( object_id , object_group = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . heap_profiler . get_object_by_heap_object_id ( object_id , object_group ) ) [EOL] [EOL] [EOL] async def get_sampling_profile ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . heap_profiler . get_sampling_profile ( ) ) [EOL] [EOL] [EOL] async def start_sampling ( sampling_interval = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . heap_profiler . start_sampling ( sampling_interval ) ) [EOL] [EOL] [EOL] async def start_tracking_heap_objects ( track_allocations = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . heap_profiler . start_tracking_heap_objects ( track_allocations ) ) [EOL] [EOL] [EOL] async def stop_sampling ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . heap_profiler . stop_sampling ( ) ) [EOL] [EOL] [EOL] async def stop_tracking_heap_objects ( report_progress = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . heap_profiler . stop_tracking_heap_objects ( report_progress ) ) [EOL] [EOL] [EOL] async def take_heap_snapshot ( report_progress = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . heap_profiler . take_heap_snapshot ( report_progress ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.heap_profiler.HeapSnapshotObjectId$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.runtime.RemoteObject$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.heap_profiler.SamplingHeapProfile$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.heap_profiler.SamplingHeapProfile$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any [EOL] import cdp [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . schema [EOL] from cdp . schema import ( Domain ) [EOL] [EOL] [EOL] async def get_domains ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . schema . get_domains ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[cdp.schema.Domain]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Optional , List , Tuple [EOL] import cdp [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . tracing [EOL] from cdp . tracing import ( BufferUsage , DataCollected , MemoryDumpConfig , StreamCompression , StreamFormat , TraceConfig , TracingComplete ) [EOL] [EOL] [EOL] async def end ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . tracing . end ( ) ) [EOL] [EOL] [EOL] async def get_categories ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . tracing . get_categories ( ) ) [EOL] [EOL] [EOL] async def record_clock_sync_marker ( sync_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . tracing . record_clock_sync_marker ( sync_id ) ) [EOL] [EOL] [EOL] async def request_memory_dump ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . tracing . request_memory_dump ( ) ) [EOL] [EOL] [EOL] async def start ( categories = None , options = None , buffer_usage_reporting_interval = None , transfer_mode = None , stream_format = None , stream_compression = None , trace_config = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . tracing . start ( categories , options , buffer_usage_reporting_interval , transfer_mode , stream_format , stream_compression , trace_config ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any [EOL] import cdp [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . performance [EOL] from cdp . performance import ( Metric , Metrics ) [EOL] [EOL] [EOL] async def disable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . performance . disable ( ) ) [EOL] [EOL] [EOL] async def enable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . performance . enable ( ) ) [EOL] [EOL] [EOL] async def get_metrics ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . performance . get_metrics ( ) ) [EOL] [EOL] [EOL] async def set_time_domain ( time_domain ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . performance . set_time_domain ( time_domain ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[cdp.performance.Metric]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Pattern , Tuple , Optional , List , Any [EOL] import cdp [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . network [EOL] from cdp . network import ( AuthChallenge , AuthChallengeResponse , BlockedCookieWithReason , BlockedReason , BlockedSetCookieWithReason , CachedResource , CertificateTransparencyCompliance , ConnectionType , Cookie , CookieBlockedReason , CookieParam , CookieSameSite , DataReceived , ErrorReason , EventSourceMessageReceived , Headers , Initiator , InterceptionId , InterceptionStage , LoaderId , LoadingFailed , LoadingFinished , MonotonicTime , Request , RequestId , RequestIntercepted , RequestPattern , RequestServedFromCache , RequestWillBeSent , RequestWillBeSentExtraInfo , ResourceChangedPriority , ResourcePriority , ResourceTiming , ResourceType , Response , ResponseReceived , ResponseReceivedExtraInfo , SecurityDetails , SetCookieBlockedReason , SignedCertificateTimestamp , SignedExchangeError , SignedExchangeErrorField , SignedExchangeHeader , SignedExchangeInfo , SignedExchangeReceived , SignedExchangeSignature , TimeSinceEpoch , WebSocketClosed , WebSocketCreated , WebSocketFrame , WebSocketFrameError , WebSocketFrameReceived , WebSocketFrameSent , WebSocketHandshakeResponseReceived , WebSocketRequest , WebSocketResponse , WebSocketWillSendHandshakeRequest ) [EOL] [EOL] [EOL] async def can_clear_browser_cache ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . network . can_clear_browser_cache ( ) ) [EOL] [EOL] [EOL] async def can_clear_browser_cookies ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . network . can_clear_browser_cookies ( ) ) [EOL] [EOL] [EOL] async def can_emulate_network_conditions ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . network . can_emulate_network_conditions ( ) ) [EOL] [EOL] [EOL] async def clear_browser_cache ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . network . clear_browser_cache ( ) ) [EOL] [EOL] [EOL] async def clear_browser_cookies ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . network . clear_browser_cookies ( ) ) [EOL] [EOL] [EOL] async def continue_intercepted_request ( interception_id , error_reason = None , raw_response = None , url = None , method = None , post_data = None , headers = None , auth_challenge_response = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . network . continue_intercepted_request ( interception_id , error_reason , raw_response , url , method , post_data , headers , auth_challenge_response ) ) [EOL] [EOL] [EOL] async def delete_cookies ( name , url = None , domain = None , path = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . network . delete_cookies ( name , url , domain , path ) ) [EOL] [EOL] [EOL] async def disable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . network . disable ( ) ) [EOL] [EOL] [EOL] async def emulate_network_conditions ( offline , latency , download_throughput , upload_throughput , connection_type = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . network . emulate_network_conditions ( offline , latency , download_throughput , upload_throughput , connection_type ) ) [EOL] [EOL] [EOL] async def enable ( max_total_buffer_size = None , max_resource_buffer_size = None , max_post_data_size = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . network . enable ( max_total_buffer_size , max_resource_buffer_size , max_post_data_size ) ) [EOL] [EOL] [EOL] async def get_all_cookies ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . network . get_all_cookies ( ) ) [EOL] [EOL] [EOL] async def get_certificate ( origin ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . network . get_certificate ( origin ) ) [EOL] [EOL] [EOL] async def get_cookies ( urls = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . network . get_cookies ( urls ) ) [EOL] [EOL] [EOL] async def get_request_post_data ( request_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . network . get_request_post_data ( request_id ) ) [EOL] [EOL] [EOL] async def get_response_body ( request_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . network . get_response_body ( request_id ) ) [EOL] [EOL] [EOL] async def get_response_body_for_interception ( interception_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . network . get_response_body_for_interception ( interception_id ) ) [EOL] [EOL] [EOL] async def replay_xhr ( request_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . network . replay_xhr ( request_id ) ) [EOL] [EOL] [EOL] async def search_in_response_body ( request_id , query , case_sensitive = None , is_regex = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . network . search_in_response_body ( request_id , query , case_sensitive , is_regex ) ) [EOL] [EOL] [EOL] async def set_blocked_ur_ls ( urls ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . network . set_blocked_ur_ls ( urls ) ) [EOL] [EOL] [EOL] async def set_bypass_service_worker ( bypass ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . network . set_bypass_service_worker ( bypass ) ) [EOL] [EOL] [EOL] async def set_cache_disabled ( cache_disabled ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . network . set_cache_disabled ( cache_disabled ) ) [EOL] [EOL] [EOL] async def set_cookie ( name , value , url = None , domain = None , path = None , secure = None , http_only = None , same_site = None , expires = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . network . set_cookie ( name , value , url , domain , path , secure , http_only , same_site , expires ) ) [EOL] [EOL] [EOL] async def set_cookies ( cookies ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . network . set_cookies ( cookies ) ) [EOL] [EOL] [EOL] async def set_data_size_limits_for_test ( max_total_size , max_resource_size ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . network . set_data_size_limits_for_test ( max_total_size , max_resource_size ) ) [EOL] [EOL] [EOL] async def set_extra_http_headers ( headers ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . network . set_extra_http_headers ( headers ) ) [EOL] [EOL] [EOL] async def set_request_interception ( patterns ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . network . set_request_interception ( patterns ) ) [EOL] [EOL] [EOL] async def set_user_agent_override ( user_agent , accept_language = None , platform = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . network . set_user_agent_override ( user_agent , accept_language , platform ) ) [EOL] [EOL] [EOL] async def take_response_body_for_interception_as_stream ( interception_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . network . take_response_body_for_interception_as_stream ( interception_id ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[cdp.network.Cookie]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[cdp.network.Cookie]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[cdp.debugger.SearchMatch]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.io.StreamHandle$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Optional , List , Tuple [EOL] import cdp [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . debugger [EOL] from cdp . debugger import ( BreakLocation , BreakpointId , BreakpointResolved , CallFrame , CallFrameId , Location , Paused , Resumed , Scope , ScriptFailedToParse , ScriptParsed , ScriptPosition , SearchMatch ) [EOL] [EOL] [EOL] async def continue_to_location ( location , target_call_frames = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . debugger . continue_to_location ( location , target_call_frames ) ) [EOL] [EOL] [EOL] async def disable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . debugger . disable ( ) ) [EOL] [EOL] [EOL] async def enable ( max_scripts_cache_size = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . debugger . enable ( max_scripts_cache_size ) ) [EOL] [EOL] [EOL] async def evaluate_on_call_frame ( call_frame_id , expression , object_group = None , include_command_line_api = None , silent = None , return_by_value = None , generate_preview = None , throw_on_side_effect = None , timeout = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . debugger . evaluate_on_call_frame ( call_frame_id , expression , object_group , include_command_line_api , silent , return_by_value , generate_preview , throw_on_side_effect , timeout ) ) [EOL] [EOL] [EOL] async def get_possible_breakpoints ( start , end = None , restrict_to_function = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . debugger . get_possible_breakpoints ( start , end , restrict_to_function ) ) [EOL] [EOL] [EOL] async def get_script_source ( script_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . debugger . get_script_source ( script_id ) ) [EOL] [EOL] [EOL] async def get_stack_trace ( stack_trace_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . debugger . get_stack_trace ( stack_trace_id ) ) [EOL] [EOL] [EOL] async def pause ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . debugger . pause ( ) ) [EOL] [EOL] [EOL] async def pause_on_async_call ( parent_stack_trace_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . debugger . pause_on_async_call ( parent_stack_trace_id ) ) [EOL] [EOL] [EOL] async def remove_breakpoint ( breakpoint_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . debugger . remove_breakpoint ( breakpoint_id ) ) [EOL] [EOL] [EOL] async def restart_frame ( call_frame_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . debugger . restart_frame ( call_frame_id ) ) [EOL] [EOL] [EOL] async def resume ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . debugger . resume ( ) ) [EOL] [EOL] [EOL] async def search_in_content ( script_id , query , case_sensitive = None , is_regex = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . debugger . search_in_content ( script_id , query , case_sensitive , is_regex ) ) [EOL] [EOL] [EOL] async def set_async_call_stack_depth ( max_depth ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . debugger . set_async_call_stack_depth ( max_depth ) ) [EOL] [EOL] [EOL] async def set_blackbox_patterns ( patterns ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . debugger . set_blackbox_patterns ( patterns ) ) [EOL] [EOL] [EOL] async def set_blackboxed_ranges ( script_id , positions ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . debugger . set_blackboxed_ranges ( script_id , positions ) ) [EOL] [EOL] [EOL] async def set_breakpoint ( location , condition = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . debugger . set_breakpoint ( location , condition ) ) [EOL] [EOL] [EOL] async def set_breakpoint_by_url ( line_number , url = None , url_regex = None , script_hash = None , column_number = None , condition = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . debugger . set_breakpoint_by_url ( line_number , url , url_regex , script_hash , column_number , condition ) ) [EOL] [EOL] [EOL] async def set_breakpoint_on_function_call ( object_id , condition = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . debugger . set_breakpoint_on_function_call ( object_id , condition ) ) [EOL] [EOL] [EOL] async def set_breakpoints_active ( active ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . debugger . set_breakpoints_active ( active ) ) [EOL] [EOL] [EOL] async def set_instrumentation_breakpoint ( instrumentation ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . debugger . set_instrumentation_breakpoint ( instrumentation ) ) [EOL] [EOL] [EOL] async def set_pause_on_exceptions ( state ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . debugger . set_pause_on_exceptions ( state ) ) [EOL] [EOL] [EOL] async def set_return_value ( new_value ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . debugger . set_return_value ( new_value ) ) [EOL] [EOL] [EOL] async def set_script_source ( script_id , script_source , dry_run = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . debugger . set_script_source ( script_id , script_source , dry_run ) ) [EOL] [EOL] [EOL] async def set_skip_all_pauses ( skip ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . debugger . set_skip_all_pauses ( skip ) ) [EOL] [EOL] [EOL] async def set_variable_value ( scope_number , variable_name , new_value , call_frame_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . debugger . set_variable_value ( scope_number , variable_name , new_value , call_frame_id ) ) [EOL] [EOL] [EOL] async def step_into ( break_on_async_call = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . debugger . step_into ( break_on_async_call ) ) [EOL] [EOL] [EOL] async def step_out ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . debugger . step_out ( ) ) [EOL] [EOL] [EOL] async def step_over ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . debugger . step_over ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.runtime.UniqueDebuggerId$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[cdp.runtime.RemoteObject,typing.Optional[cdp.runtime.ExceptionDetails]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[cdp.debugger.BreakLocation]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.runtime.StackTrace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.List[cdp.debugger.CallFrame],typing.Optional[cdp.runtime.StackTrace],typing.Optional[cdp.runtime.StackTraceId]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[cdp.debugger.SearchMatch]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[cdp.debugger.BreakpointId,cdp.debugger.Location]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[cdp.debugger.BreakpointId,typing.List[cdp.debugger.Location]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.debugger.BreakpointId$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.debugger.BreakpointId$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Optional[typing.List[cdp.debugger.CallFrame]],typing.Optional[builtins.bool],typing.Optional[cdp.runtime.StackTrace],typing.Optional[cdp.runtime.StackTraceId],typing.Optional[cdp.runtime.ExceptionDetails]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . inspector [EOL] from cdp . inspector import ( Detached , TargetCrashed , TargetReloadedAfterCrash ) [EOL] [EOL] [EOL] async def disable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . inspector . disable ( ) ) [EOL] [EOL] [EOL] async def enable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . inspector . enable ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import cdp [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . service_worker [EOL] from cdp . service_worker import ( RegistrationID , ServiceWorkerErrorMessage , ServiceWorkerRegistration , ServiceWorkerVersion , ServiceWorkerVersionRunningStatus , ServiceWorkerVersionStatus , WorkerErrorReported , WorkerRegistrationUpdated , WorkerVersionUpdated ) [EOL] [EOL] [EOL] async def deliver_push_message ( origin , registration_id , data ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . service_worker . deliver_push_message ( origin , registration_id , data ) ) [EOL] [EOL] [EOL] async def disable ( ) : [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . service_worker . disable ( ) ) [EOL] [EOL] [EOL] async def dispatch_sync_event ( origin , registration_id , tag , last_chance ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . service_worker . dispatch_sync_event ( origin , registration_id , tag , last_chance ) ) [EOL] [EOL] [EOL] async def enable ( ) : [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . service_worker . enable ( ) ) [EOL] [EOL] [EOL] async def inspect_worker ( version_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . service_worker . inspect_worker ( version_id ) ) [EOL] [EOL] [EOL] async def set_force_update_on_page_load ( force_update_on_page_load ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . service_worker . set_force_update_on_page_load ( force_update_on_page_load ) ) [EOL] [EOL] [EOL] async def skip_waiting ( scope_url ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . service_worker . skip_waiting ( scope_url ) ) [EOL] [EOL] [EOL] async def start_worker ( scope_url ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . service_worker . start_worker ( scope_url ) ) [EOL] [EOL] [EOL] async def stop_all_workers ( ) : [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . service_worker . stop_all_workers ( ) ) [EOL] [EOL] [EOL] async def stop_worker ( version_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . service_worker . stop_worker ( version_id ) ) [EOL] [EOL] [EOL] async def unregister ( scope_url ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . service_worker . unregister ( scope_url ) ) [EOL] [EOL] [EOL] async def update_registration ( scope_url ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . service_worker . update_registration ( scope_url ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import cdp [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . security [EOL] from cdp . security import ( CertificateError , CertificateErrorAction , CertificateId , InsecureContentStatus , MixedContentType , SecurityState , SecurityStateChanged , SecurityStateExplanation ) [EOL] [EOL] [EOL] async def disable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . security . disable ( ) ) [EOL] [EOL] [EOL] async def enable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . security . enable ( ) ) [EOL] [EOL] [EOL] async def handle_certificate_error ( event_id , action ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . security . handle_certificate_error ( event_id , action ) ) [EOL] [EOL] [EOL] async def set_ignore_certificate_errors ( ignore ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . security . set_ignore_certificate_errors ( ignore ) ) [EOL] [EOL] [EOL] async def set_override_certificate_errors ( override ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . security . set_override_certificate_errors ( override ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Optional , List , Tuple [EOL] import cdp [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . css [EOL] from cdp . css import ( CSSComputedStyleProperty , CSSKeyframeRule , CSSKeyframesRule , CSSMedia , CSSProperty , CSSRule , CSSStyle , CSSStyleSheetHeader , FontFace , FontsUpdated , InheritedStyleEntry , MediaQuery , MediaQueryExpression , MediaQueryResultChanged , PlatformFontUsage , PseudoElementMatches , RuleMatch , RuleUsage , SelectorList , ShorthandEntry , SourceRange , StyleDeclarationEdit , StyleSheetAdded , StyleSheetChanged , StyleSheetId , StyleSheetOrigin , StyleSheetRemoved , Value ) [EOL] [EOL] [EOL] async def add_rule ( style_sheet_id , rule_text , location ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . css . add_rule ( style_sheet_id , rule_text , location ) ) [EOL] [EOL] [EOL] async def collect_class_names ( style_sheet_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . css . collect_class_names ( style_sheet_id ) ) [EOL] [EOL] [EOL] async def create_style_sheet ( frame_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . css . create_style_sheet ( frame_id ) ) [EOL] [EOL] [EOL] async def disable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . css . disable ( ) ) [EOL] [EOL] [EOL] async def enable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . css . enable ( ) ) [EOL] [EOL] [EOL] async def force_pseudo_state ( node_id , forced_pseudo_classes ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . css . force_pseudo_state ( node_id , forced_pseudo_classes ) ) [EOL] [EOL] [EOL] async def get_background_colors ( node_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . css . get_background_colors ( node_id ) ) [EOL] [EOL] [EOL] async def get_computed_style_for_node ( node_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . css . get_computed_style_for_node ( node_id ) ) [EOL] [EOL] [EOL] async def get_inline_styles_for_node ( node_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . css . get_inline_styles_for_node ( node_id ) ) [EOL] [EOL] [EOL] async def get_matched_styles_for_node ( node_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . css . get_matched_styles_for_node ( node_id ) ) [EOL] [EOL] [EOL] async def get_media_queries ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . css . get_media_queries ( ) ) [EOL] [EOL] [EOL] async def get_platform_fonts_for_node ( node_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . css . get_platform_fonts_for_node ( node_id ) ) [EOL] [EOL] [EOL] async def get_style_sheet_text ( style_sheet_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . css . get_style_sheet_text ( style_sheet_id ) ) [EOL] [EOL] [EOL] async def set_effective_property_value_for_node ( node_id , property_name , value ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . css . set_effective_property_value_for_node ( node_id , property_name , value ) ) [EOL] [EOL] [EOL] async def set_keyframe_key ( style_sheet_id , range_ , key_text ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . css . set_keyframe_key ( style_sheet_id , range_ , key_text ) ) [EOL] [EOL] [EOL] async def set_media_text ( style_sheet_id , range_ , text ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . css . set_media_text ( style_sheet_id , range_ , text ) ) [EOL] [EOL] [EOL] async def set_rule_selector ( style_sheet_id , range_ , selector ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . css . set_rule_selector ( style_sheet_id , range_ , selector ) ) [EOL] [EOL] [EOL] async def set_style_sheet_text ( style_sheet_id , text ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . css . set_style_sheet_text ( style_sheet_id , text ) ) [EOL] [EOL] [EOL] async def set_style_texts ( edits ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . css . set_style_texts ( edits ) ) [EOL] [EOL] [EOL] async def start_rule_usage_tracking ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . css . start_rule_usage_tracking ( ) ) [EOL] [EOL] [EOL] async def stop_rule_usage_tracking ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . css . stop_rule_usage_tracking ( ) ) [EOL] [EOL] [EOL] async def take_coverage_delta ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . css . take_coverage_delta ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.css.CSSRule$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.css.StyleSheetId$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Optional[typing.List[builtins.str]],typing.Optional[builtins.str],typing.Optional[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[cdp.css.CSSComputedStyleProperty]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Optional[cdp.css.CSSStyle],typing.Optional[cdp.css.CSSStyle]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Optional[cdp.css.CSSStyle],typing.Optional[cdp.css.CSSStyle],typing.Optional[typing.List[cdp.css.RuleMatch]],typing.Optional[typing.List[cdp.css.PseudoElementMatches]],typing.Optional[typing.List[cdp.css.InheritedStyleEntry]],typing.Optional[typing.List[cdp.css.CSSKeyframesRule]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[cdp.css.CSSMedia]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[cdp.css.PlatformFontUsage]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.css.Value$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.css.CSSMedia$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.css.SelectorList$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[cdp.css.CSSStyle]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[cdp.css.RuleUsage]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[cdp.css.RuleUsage]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Optional , List , Tuple [EOL] import cdp [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . dom_snapshot [EOL] from cdp . dom_snapshot import ( ArrayOfStrings , ComputedStyle , DOMNode , DocumentSnapshot , InlineTextBox , LayoutTreeNode , LayoutTreeSnapshot , NameValue , NodeTreeSnapshot , RareBooleanData , RareIntegerData , RareStringData , Rectangle , StringIndex , TextBoxSnapshot ) [EOL] [EOL] [EOL] async def capture_snapshot ( computed_styles , include_dom_rects = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom_snapshot . capture_snapshot ( computed_styles , include_dom_rects ) ) [EOL] [EOL] [EOL] async def disable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom_snapshot . disable ( ) ) [EOL] [EOL] [EOL] async def enable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom_snapshot . enable ( ) ) [EOL] [EOL] [EOL] async def get_snapshot ( computed_style_whitelist , include_event_listeners = None , include_paint_order = None , include_user_agent_shadow_tree = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . dom_snapshot . get_snapshot ( computed_style_whitelist , include_event_listeners , include_paint_order , include_user_agent_shadow_tree ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.List[cdp.dom_snapshot.DocumentSnapshot],typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.List[cdp.dom_snapshot.DOMNode],typing.List[cdp.dom_snapshot.LayoutTreeNode],typing.List[cdp.dom_snapshot.ComputedStyle]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import cdp [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . background_service [EOL] from cdp . background_service import ( BackgroundServiceEvent , BackgroundServiceEventReceived , EventMetadata , RecordingStateChanged , ServiceName ) [EOL] [EOL] [EOL] async def clear_events ( service ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . background_service . clear_events ( service ) ) [EOL] [EOL] [EOL] async def set_recording ( should_record , service ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . background_service . set_recording ( should_record , service ) ) [EOL] [EOL] [EOL] async def start_observing ( service ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . background_service . start_observing ( service ) ) [EOL] [EOL] [EOL] async def stop_observing ( service ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . background_service . stop_observing ( service ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Optional , List , Any [EOL] import cdp [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . profiler [EOL] from cdp . profiler import ( ConsoleProfileFinished , ConsoleProfileStarted , CoverageRange , FunctionCoverage , PositionTickInfo , Profile , ProfileNode , ScriptCoverage , ScriptTypeProfile , TypeObject , TypeProfileEntry ) [EOL] [EOL] [EOL] async def disable ( ) : [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . profiler . disable ( ) ) [EOL] [EOL] [EOL] async def enable ( ) : [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . profiler . enable ( ) ) [EOL] [EOL] [EOL] async def get_best_effort_coverage ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . profiler . get_best_effort_coverage ( ) ) [EOL] [EOL] [EOL] async def set_sampling_interval ( interval ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . profiler . set_sampling_interval ( interval ) ) [EOL] [EOL] [EOL] async def start ( ) : [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . profiler . start ( ) ) [EOL] [EOL] [EOL] async def start_precise_coverage ( call_count = None , detailed = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . profiler . start_precise_coverage ( call_count , detailed ) ) [EOL] [EOL] [EOL] async def start_type_profile ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . profiler . start_type_profile ( ) ) [EOL] [EOL] [EOL] async def stop ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . profiler . stop ( ) ) [EOL] [EOL] [EOL] async def stop_precise_coverage ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . profiler . stop_precise_coverage ( ) ) [EOL] [EOL] [EOL] async def stop_type_profile ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . profiler . stop_type_profile ( ) ) [EOL] [EOL] [EOL] async def take_precise_coverage ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . profiler . take_precise_coverage ( ) ) [EOL] [EOL] [EOL] async def take_type_profile ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . profiler . take_type_profile ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[cdp.profiler.ScriptCoverage]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.profiler.Profile$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[cdp.profiler.ScriptCoverage]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[cdp.profiler.ScriptTypeProfile]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Optional , List , Tuple [EOL] import cdp [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . cache_storage [EOL] from cdp . cache_storage import ( Cache , CacheId , CachedResponse , CachedResponseType , DataEntry , Header ) [EOL] [EOL] [EOL] async def delete_cache ( cache_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . cache_storage . delete_cache ( cache_id ) ) [EOL] [EOL] [EOL] async def delete_entry ( cache_id , request ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . cache_storage . delete_entry ( cache_id , request ) ) [EOL] [EOL] [EOL] async def request_cache_names ( security_origin ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . cache_storage . request_cache_names ( security_origin ) ) [EOL] [EOL] [EOL] async def request_cached_response ( cache_id , request_url , request_headers ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . cache_storage . request_cached_response ( cache_id , request_url , request_headers ) ) [EOL] [EOL] [EOL] async def request_entries ( cache_id , skip_count , page_size , path_filter = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . cache_storage . request_entries ( cache_id , skip_count , page_size , path_filter ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[cdp.cache_storage.Cache]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.cache_storage.CachedResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.List[cdp.cache_storage.DataEntry],builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Optional , List , Tuple [EOL] import cdp [EOL] import builtins [EOL] import typing [EOL] from __future__ import annotations [EOL] import typing [EOL] [EOL] from . . context import get_connection_context , get_session_context [EOL] [EOL] import cdp . page [EOL] from cdp . page import ( AppManifestError , ClientNavigationReason , CompilationCacheProduced , DialogType , DomContentEventFired , DownloadWillBegin , FileChooserOpened , FontFamilies , FontSizes , Frame , FrameAttached , FrameClearedScheduledNavigation , FrameDetached , FrameId , FrameNavigated , FrameRequestedNavigation , FrameResized , FrameResource , FrameResourceTree , FrameScheduledNavigation , FrameStartedLoading , FrameStoppedLoading , FrameTree , InterstitialHidden , InterstitialShown , JavascriptDialogClosed , JavascriptDialogOpening , LayoutViewport , LifecycleEvent , LoadEventFired , NavigatedWithinDocument , NavigationEntry , ScreencastFrame , ScreencastFrameMetadata , ScreencastVisibilityChanged , ScriptIdentifier , TransitionType , Viewport , VisualViewport , WindowOpen ) [EOL] [EOL] [EOL] async def add_compilation_cache ( url , data ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . add_compilation_cache ( url , data ) ) [EOL] [EOL] [EOL] async def add_script_to_evaluate_on_load ( script_source ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . add_script_to_evaluate_on_load ( script_source ) ) [EOL] [EOL] [EOL] async def add_script_to_evaluate_on_new_document ( source , world_name = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . add_script_to_evaluate_on_new_document ( source , world_name ) ) [EOL] [EOL] [EOL] async def bring_to_front ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . bring_to_front ( ) ) [EOL] [EOL] [EOL] async def capture_screenshot ( format_ = None , quality = None , clip = None , from_surface = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . capture_screenshot ( format_ , quality , clip , from_surface ) ) [EOL] [EOL] [EOL] async def capture_snapshot ( format_ = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . capture_snapshot ( format_ ) ) [EOL] [EOL] [EOL] async def clear_compilation_cache ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . clear_compilation_cache ( ) ) [EOL] [EOL] [EOL] async def clear_device_metrics_override ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . clear_device_metrics_override ( ) ) [EOL] [EOL] [EOL] async def clear_device_orientation_override ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . clear_device_orientation_override ( ) ) [EOL] [EOL] [EOL] async def clear_geolocation_override ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . clear_geolocation_override ( ) ) [EOL] [EOL] [EOL] async def close ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . close ( ) ) [EOL] [EOL] [EOL] async def crash ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . crash ( ) ) [EOL] [EOL] [EOL] async def create_isolated_world ( frame_id , world_name = None , grant_univeral_access = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . create_isolated_world ( frame_id , world_name , grant_univeral_access ) ) [EOL] [EOL] [EOL] async def delete_cookie ( cookie_name , url ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . delete_cookie ( cookie_name , url ) ) [EOL] [EOL] [EOL] async def disable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . disable ( ) ) [EOL] [EOL] [EOL] async def enable ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . enable ( ) ) [EOL] [EOL] [EOL] async def generate_test_report ( message , group = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . generate_test_report ( message , group ) ) [EOL] [EOL] [EOL] async def get_app_manifest ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . get_app_manifest ( ) ) [EOL] [EOL] [EOL] async def get_cookies ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . get_cookies ( ) ) [EOL] [EOL] [EOL] async def get_frame_tree ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . get_frame_tree ( ) ) [EOL] [EOL] [EOL] async def get_installability_errors ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . get_installability_errors ( ) ) [EOL] [EOL] [EOL] async def get_layout_metrics ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . get_layout_metrics ( ) ) [EOL] [EOL] [EOL] async def get_navigation_history ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . get_navigation_history ( ) ) [EOL] [EOL] [EOL] async def get_resource_content ( frame_id , url ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . get_resource_content ( frame_id , url ) ) [EOL] [EOL] [EOL] async def get_resource_tree ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . get_resource_tree ( ) ) [EOL] [EOL] [EOL] async def handle_file_chooser ( action , files = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . handle_file_chooser ( action , files ) ) [EOL] [EOL] [EOL] async def handle_java_script_dialog ( accept , prompt_text = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . handle_java_script_dialog ( accept , prompt_text ) ) [EOL] [EOL] [EOL] async def navigate ( url , referrer = None , transition_type = None , frame_id = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . navigate ( url , referrer , transition_type , frame_id ) ) [EOL] [EOL] [EOL] async def navigate_to_history_entry ( entry_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . navigate_to_history_entry ( entry_id ) ) [EOL] [EOL] [EOL] async def print_to_pdf ( landscape = None , display_header_footer = None , print_background = None , scale = None , paper_width = None , paper_height = None , margin_top = None , margin_bottom = None , margin_left = None , margin_right = None , page_ranges = None , ignore_invalid_page_ranges = None , header_template = None , footer_template = None , prefer_css_page_size = None , transfer_mode = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . print_to_pdf ( landscape , display_header_footer , print_background , scale , paper_width , paper_height , margin_top , margin_bottom , margin_left , margin_right , page_ranges , ignore_invalid_page_ranges , header_template , footer_template , prefer_css_page_size , transfer_mode ) ) [EOL] [EOL] [EOL] async def reload ( ignore_cache = None , script_to_evaluate_on_load = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . reload ( ignore_cache , script_to_evaluate_on_load ) ) [EOL] [EOL] [EOL] async def remove_script_to_evaluate_on_load ( identifier ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . remove_script_to_evaluate_on_load ( identifier ) ) [EOL] [EOL] [EOL] async def remove_script_to_evaluate_on_new_document ( identifier ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . remove_script_to_evaluate_on_new_document ( identifier ) ) [EOL] [EOL] [EOL] async def reset_navigation_history ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . reset_navigation_history ( ) ) [EOL] [EOL] [EOL] async def screencast_frame_ack ( session_id ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . screencast_frame_ack ( session_id ) ) [EOL] [EOL] [EOL] async def search_in_resource ( frame_id , url , query , case_sensitive = None , is_regex = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . search_in_resource ( frame_id , url , query , case_sensitive , is_regex ) ) [EOL] [EOL] [EOL] async def set_ad_blocking_enabled ( enabled ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . set_ad_blocking_enabled ( enabled ) ) [EOL] [EOL] [EOL] async def set_bypass_csp ( enabled ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . set_bypass_csp ( enabled ) ) [EOL] [EOL] [EOL] async def set_device_metrics_override ( width , height , device_scale_factor , mobile , scale = None , screen_width = None , screen_height = None , position_x = None , position_y = None , dont_set_visible_size = None , screen_orientation = None , viewport = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . set_device_metrics_override ( width , height , device_scale_factor , mobile , scale , screen_width , screen_height , position_x , position_y , dont_set_visible_size , screen_orientation , viewport ) ) [EOL] [EOL] [EOL] async def set_device_orientation_override ( alpha , beta , gamma ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . set_device_orientation_override ( alpha , beta , gamma ) ) [EOL] [EOL] [EOL] async def set_document_content ( frame_id , html ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . set_document_content ( frame_id , html ) ) [EOL] [EOL] [EOL] async def set_download_behavior ( behavior , download_path = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . set_download_behavior ( behavior , download_path ) ) [EOL] [EOL] [EOL] async def set_font_families ( font_families ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . set_font_families ( font_families ) ) [EOL] [EOL] [EOL] async def set_font_sizes ( font_sizes ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . set_font_sizes ( font_sizes ) ) [EOL] [EOL] [EOL] async def set_geolocation_override ( latitude = None , longitude = None , accuracy = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . set_geolocation_override ( latitude , longitude , accuracy ) ) [EOL] [EOL] [EOL] async def set_intercept_file_chooser_dialog ( enabled ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . set_intercept_file_chooser_dialog ( enabled ) ) [EOL] [EOL] [EOL] async def set_lifecycle_events_enabled ( enabled ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . set_lifecycle_events_enabled ( enabled ) ) [EOL] [EOL] [EOL] async def set_produce_compilation_cache ( enabled ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . set_produce_compilation_cache ( enabled ) ) [EOL] [EOL] [EOL] async def set_touch_emulation_enabled ( enabled , configuration = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . set_touch_emulation_enabled ( enabled , configuration ) ) [EOL] [EOL] [EOL] async def set_web_lifecycle_state ( state ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . set_web_lifecycle_state ( state ) ) [EOL] [EOL] [EOL] async def start_screencast ( format_ = None , quality = None , max_width = None , max_height = None , every_nth_frame = None ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . start_screencast ( format_ , quality , max_width , max_height , every_nth_frame ) ) [EOL] [EOL] [EOL] async def stop_loading ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . stop_loading ( ) ) [EOL] [EOL] [EOL] async def stop_screencast ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . stop_screencast ( ) ) [EOL] [EOL] [EOL] async def wait_for_debugger ( ) : [EOL] [docstring] [EOL] session = get_session_context ( [string] ) [EOL] return await session . execute ( cdp . page . wait_for_debugger ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.page.ScriptIdentifier$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.page.ScriptIdentifier$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.runtime.ExecutionContextId$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,typing.List[cdp.page.AppManifestError],typing.Optional[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[cdp.network.Cookie]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.page.Frame.Tree$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[cdp.page.LayoutViewport,cdp.page.VisualViewport,cdp.dom.Rect]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,typing.List[cdp.page.NavigationEntry]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $cdp.page.FrameResourceTree$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[cdp.page.Frame.Id,typing.Optional[cdp.network.LoaderId],typing.Optional[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,typing.Optional[cdp.io.StreamHandle]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[cdp.debugger.SearchMatch]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , Any , Dict [EOL] import trio_cdp [EOL] import typing [EOL] import json [EOL] import logging [EOL] [EOL] from cdp import dom , page , target [EOL] import pytest [EOL] import trio [EOL] from trio_websocket import serve_websocket [EOL] [EOL] from . import fail_after [EOL] from trio_cdp import BrowserError , open_cdp , dom as trio_cdp_dom [EOL] [EOL] [EOL] HOST = [string] [EOL] [EOL] [EOL] async def start_server ( nursery , handler ) : [EOL] [docstring] [EOL] server = await nursery . start ( serve_websocket , handler , HOST , [number] , None ) [EOL] return f' [string] { HOST } [string] { server . port } [string] ' [EOL] [EOL] [EOL] def test_browser_error ( ) : [EOL] err = BrowserError ( { [string] : [number] , [string] : [string] , [string] : [string] } ) [EOL] assert str ( err ) == [string] [string] [EOL] [EOL] [EOL] @ fail_after ( [number] ) async def test_connection_execute ( nursery ) : [EOL] [docstring] [EOL] async def handler ( request ) : [EOL] [comment] [EOL] [comment] [EOL] try : [EOL] ws = await request . accept ( ) [EOL] command = json . loads ( await ws . get_message ( ) ) [EOL] logging . info ( [string] , command ) [EOL] assert command [ [string] ] == [string] [EOL] response = { [string] : command [ [string] ] , [string] : { [string] : [ { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False , } ] , } } [EOL] logging . info ( [string] , response ) [EOL] await ws . send_message ( json . dumps ( response ) ) [EOL] except Exception : [EOL] logging . exception ( [string] ) [EOL] server = await start_server ( nursery , handler ) [EOL] async with open_cdp ( server ) as conn : [EOL] targets = await conn . execute ( target . get_targets ( ) ) [EOL] assert len ( targets ) == [number] [EOL] assert isinstance ( targets [ [number] ] , target . TargetInfo ) [EOL] [EOL] [EOL] @ fail_after ( [number] ) async def test_connection_invalid_json ( ) : [EOL] [docstring] [EOL] with pytest . raises ( BrowserError ) as exc_info : [EOL] async with trio . open_nursery ( ) as nursery : [EOL] async def handler ( request ) : [EOL] [comment] [EOL] [comment] [EOL] try : [EOL] ws = await request . accept ( ) [EOL] command = json . loads ( await ws . get_message ( ) ) [EOL] logging . info ( [string] , command ) [EOL] logging . info ( [string] ) [EOL] await ws . send_message ( [string] ) [EOL] except Exception : [EOL] logging . exception ( [string] ) [EOL] server = await start_server ( nursery , handler ) [EOL] [EOL] async with open_cdp ( server ) as conn : [EOL] targets = await conn . execute ( target . get_targets ( ) ) [EOL] assert exc_info . value . code == - [number] [comment] [EOL] [EOL] [EOL] @ fail_after ( [number] ) async def test_connection_browser_error ( nursery ) : [EOL] [docstring] [EOL] async def handler ( request ) : [EOL] [comment] [EOL] [comment] [EOL] try : [EOL] ws = await request . accept ( ) [EOL] command = json . loads ( await ws . get_message ( ) ) [EOL] logging . info ( [string] , command ) [EOL] response = { [string] : command [ [string] ] , [string] : { [string] : - [number] , [string] : [string] , [string] : [string] } } [EOL] logging . info ( [string] , response ) [EOL] await ws . send_message ( json . dumps ( response ) ) [EOL] except Exception : [EOL] logging . exception ( [string] ) [EOL] server = await start_server ( nursery , handler ) [EOL] [EOL] async with open_cdp ( server ) as conn : [EOL] with pytest . raises ( BrowserError ) as exc_info : [EOL] targets = await conn . execute ( target . get_targets ( ) ) [EOL] [EOL] assert exc_info . value . code == - [number] [EOL] [EOL] [EOL] @ pytest . fixture def session_handler ( ) : [EOL] [docstring] [EOL] async def handler ( request ) : [EOL] [comment] [EOL] [comment] [EOL] try : [EOL] ws = await request . accept ( ) [EOL] [EOL] [comment] [EOL] command = json . loads ( await ws . get_message ( ) ) [EOL] assert command [ [string] ] == [string] [EOL] assert command [ [string] ] [ [string] ] == [string] [EOL] logging . info ( [string] , command ) [EOL] response = { [string] : command [ [string] ] , [string] : { [string] : [string] , } } [EOL] logging . info ( [string] , response ) [EOL] await ws . send_message ( json . dumps ( response ) ) [EOL] [EOL] [comment] [EOL] command = json . loads ( await ws . get_message ( ) ) [EOL] assert command [ [string] ] == [string] [EOL] assert command [ [string] ] == [string] [EOL] assert command [ [string] ] [ [string] ] == [number] [EOL] assert command [ [string] ] [ [string] ] == [string] [EOL] logging . info ( [string] , command ) [EOL] response = { [string] : command [ [string] ] , [string] : command [ [string] ] , [string] : { [string] : [number] , } } [EOL] logging . info ( [string] , response ) [EOL] await ws . send_message ( json . dumps ( response ) ) [EOL] except Exception : [EOL] logging . exception ( [string] ) [EOL] return handler [EOL] [EOL] [EOL] @ fail_after ( [number] ) async def test_session_execute ( nursery , session_handler ) : [EOL] [docstring] [EOL] server = await start_server ( nursery , session_handler ) [EOL] [EOL] async with open_cdp ( server ) as conn : [EOL] session = await conn . connect_session ( target . TargetID ( [string] ) ) [EOL] assert session . session_id == [string] [EOL] node_id = await session . execute ( dom . query_selector ( dom . NodeId ( [number] ) , [string] ) ) [EOL] assert node_id == [number] [EOL] [EOL] [EOL] @ fail_after ( [number] ) async def test_session_context ( nursery , session_handler ) : [EOL] [docstring] [EOL] server = await start_server ( nursery , session_handler ) [EOL] [EOL] async with open_cdp ( server ) as conn : [EOL] async with conn . open_session ( target . TargetID ( [string] ) ) as session : [EOL] assert session . session_id == [string] [EOL] node_id = await trio_cdp_dom . query_selector ( dom . NodeId ( [number] ) , [string] ) [EOL] assert node_id == [number] [EOL] [EOL] [EOL] @ fail_after ( [number] ) async def test_session_no_context ( nursery , session_handler ) : [EOL] [docstring] [EOL] server = await start_server ( nursery , session_handler ) [EOL] [EOL] async with open_cdp ( server ) as conn : [EOL] with pytest . raises ( RuntimeError ) as exc_info : [EOL] node_id = await trio_cdp_dom . query_selector ( dom . NodeId ( [number] ) , [string] ) [EOL] assert str ( exc_info . value ) == [string] [string] [EOL] [EOL] [EOL] @ fail_after ( [number] ) async def test_wait_for_event ( nursery ) : [EOL] [docstring] [EOL] async def handler ( request ) : [EOL] [comment] [EOL] [comment] [EOL] try : [EOL] ws = await request . accept ( ) [EOL] [EOL] [comment] [EOL] event = { [string] : [string] , [string] : { [string] : [number] } , } [EOL] logging . info ( [string] , event ) [EOL] await ws . send_message ( json . dumps ( event ) ) [EOL] [EOL] [comment] [EOL] event = { [string] : [string] , [string] : { [string] : [number] } , } [EOL] logging . info ( [string] , event ) [EOL] await ws . send_message ( json . dumps ( event ) ) [EOL] [EOL] except Exception : [EOL] logging . exception ( [string] ) [EOL] server = await start_server ( nursery , handler ) [EOL] [EOL] async with open_cdp ( server ) as conn : [EOL] async with conn . wait_for ( page . LoadEventFired ) as event : [EOL] [comment] [EOL] [comment] [EOL] pass [EOL] assert isinstance ( event . value , page . LoadEventFired ) [EOL] assert event . value . timestamp == [number] [EOL] [EOL] [EOL] @ fail_after ( [number] ) async def test_listen_for_events ( nursery ) : [EOL] [docstring] [EOL] async def handler ( request ) : [EOL] [comment] [EOL] [comment] [EOL] try : [EOL] ws = await request . accept ( ) [EOL] [EOL] [comment] [EOL] event = { [string] : [string] , [string] : { [string] : [number] } , } [EOL] logging . info ( [string] , event ) [EOL] await ws . send_message ( json . dumps ( event ) ) [EOL] [EOL] [comment] [EOL] event = { [string] : [string] , [string] : { [string] : [number] } , } [EOL] logging . info ( [string] , event ) [EOL] await ws . send_message ( json . dumps ( event ) ) [EOL] [EOL] except Exception : [EOL] logging . exception ( [string] ) [EOL] server = await start_server ( nursery , handler ) [EOL] [EOL] async with open_cdp ( server ) as conn : [EOL] n = [number] [EOL] async for event in conn . listen ( page . LoadEventFired ) : [EOL] assert isinstance ( event , page . LoadEventFired ) [EOL] assert event . timestamp == n [EOL] if n == [number] : [EOL] break [EOL] n += [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str
from functools import wraps [EOL] [EOL] import pytest [EOL] import trio [EOL] [EOL] [EOL] class fail_after : [EOL] [docstring] [EOL] def __init__ ( self , seconds ) : [EOL] self . _seconds = seconds [EOL] [EOL] def __call__ ( self , fn ) : [EOL] @ wraps ( fn ) async def wrapper ( * args , ** kwargs ) : [EOL] with trio . move_on_after ( self . _seconds ) as cancel_scope : [EOL] await fn ( * args , ** kwargs ) [EOL] if cancel_scope . cancelled_caught : [EOL] pytest . fail ( [string] . format ( self . _seconds ) ) [EOL] return wrapper	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import logging [EOL] import typing [EOL] [docstring] [EOL] from datetime import datetime [EOL] import logging [EOL] import os [EOL] import sys [EOL] [EOL] import trio [EOL] from trio_cdp import open_cdp , browser , dom , heap_profiler , page , target [EOL] [EOL] [EOL] log_level = os . environ . get ( [string] , [string] ) . upper ( ) [EOL] logging . basicConfig ( level = getattr ( logging , log_level ) ) [EOL] logger = logging . getLogger ( [string] ) [EOL] logging . getLogger ( [string] ) . setLevel ( logging . WARNING ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] async def _take_heap_snapshot ( session , outfile , report_progress = False ) : [EOL] async def chunk_helper ( ) : [EOL] async for event in session . listen ( heap_profiler . AddHeapSnapshotChunk ) : [EOL] await outfile . write ( event . chunk ) [EOL] async def progress_helper ( ) : [EOL] async for event in session . listen ( heap_profiler . ReportHeapSnapshotProgress ) : [EOL] logger . info ( [string] . format ( event . done , event . done * [number] / event . total , [string] if event . finished else [string] ) ) [EOL] async with trio . open_nursery ( ) as nursery : [EOL] nursery . start_soon ( chunk_helper ) [EOL] if report_progress : [EOL] nursery . start_soon ( progress_helper ) [EOL] await heap_profiler . take_heap_snapshot ( report_progress ) [EOL] nursery . cancel_scope . cancel ( ) [EOL] [EOL] [EOL] async def main ( ) : [EOL] cdp_uri = sys . argv [ [number] ] [EOL] async with open_cdp ( cdp_uri ) as conn : [EOL] logger . info ( [string] ) [EOL] targets = await target . get_targets ( ) [EOL] target_id = targets [ [number] ] . target_id [EOL] [EOL] [comment] [EOL] logger . info ( [string] , target_id ) [EOL] async with conn . open_session ( target_id ) as session : [EOL] [EOL] logger . info ( [string] ) [EOL] outfile_path = trio . Path ( [string] % datetime . today ( ) . isoformat ( ) ) [EOL] async with await outfile_path . open ( [string] ) as outfile : [EOL] logger . info ( [string] ) [EOL] await _take_heap_snapshot ( session , outfile , report_progress = True ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] if len ( sys . argv ) != [number] : [EOL] sys . stderr . write ( [string] ) [EOL] sys . exit ( [number] ) [EOL] trio . run ( main , restrict_keyboard_interrupt_to_checkpoints = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import logging [EOL] import typing [EOL] [docstring] [EOL] import logging [EOL] import os [EOL] import sys [EOL] [EOL] import trio [EOL] from trio_cdp import open_cdp , dom , page , target [EOL] [EOL] [EOL] log_level = os . environ . get ( [string] , [string] ) . upper ( ) [EOL] logging . basicConfig ( level = getattr ( logging , log_level ) ) [EOL] logger = logging . getLogger ( [string] ) [EOL] logging . getLogger ( [string] ) . setLevel ( logging . WARNING ) [EOL] [EOL] [EOL] async def main ( ) : [EOL] logger . info ( [string] , sys . argv [ [number] ] ) [EOL] async with open_cdp ( sys . argv [ [number] ] ) as conn : [EOL] logger . info ( [string] ) [EOL] targets = await target . get_targets ( ) [EOL] [EOL] for t in targets : [EOL] if ( t . type == [string] and not t . url . startswith ( [string] ) and not t . attached ) : [EOL] target_id = t . target_id [EOL] break [EOL] [EOL] logger . info ( [string] , target_id ) [EOL] async with conn . open_session ( target_id ) as session : [EOL] [EOL] logger . info ( [string] , sys . argv [ [number] ] ) [EOL] await page . enable ( ) [EOL] async with session . wait_for ( page . LoadEventFired ) : [EOL] await page . navigate ( sys . argv [ [number] ] ) [EOL] [EOL] logger . info ( [string] ) [EOL] root_node = await dom . get_document ( ) [EOL] title_node_id = await dom . query_selector ( root_node . node_id , [string] ) [EOL] html = await dom . get_outer_html ( title_node_id ) [EOL] print ( html ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] if len ( sys . argv ) != [number] : [EOL] sys . stderr . write ( [string] ) [EOL] sys . exit ( [number] ) [EOL] trio . run ( main , restrict_keyboard_interrupt_to_checkpoints = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import logging [EOL] import typing [EOL] [docstring] [EOL] from base64 import b64decode [EOL] import logging [EOL] import os [EOL] import sys [EOL] [EOL] import trio [EOL] from trio_cdp import open_cdp , emulation , page , target [EOL] [EOL] [EOL] log_level = os . environ . get ( [string] , [string] ) . upper ( ) [EOL] logging . basicConfig ( level = getattr ( logging , log_level ) ) [EOL] logger = logging . getLogger ( [string] ) [EOL] logging . getLogger ( [string] ) . setLevel ( logging . WARNING ) [EOL] [EOL] [EOL] async def main ( ) : [EOL] logger . info ( [string] , sys . argv [ [number] ] ) [EOL] async with open_cdp ( sys . argv [ [number] ] ) as conn : [EOL] logger . info ( [string] ) [EOL] targets = await target . get_targets ( ) [EOL] [EOL] for t in targets : [EOL] if ( t . type == [string] and not t . url . startswith ( [string] ) and not t . attached ) : [EOL] target_id = t . target_id [EOL] break [EOL] [EOL] logger . info ( [string] , target_id ) [EOL] async with conn . open_session ( target_id ) as session : [EOL] [EOL] logger . info ( [string] ) [EOL] await emulation . set_device_metrics_override ( width = [number] , height = [number] , device_scale_factor = [number] , mobile = False ) [EOL] [EOL] logger . info ( [string] ) [EOL] await page . enable ( ) [EOL] [EOL] logger . info ( [string] , sys . argv [ [number] ] ) [EOL] async with session . wait_for ( page . LoadEventFired ) : [EOL] await page . navigate ( url = sys . argv [ [number] ] ) [EOL] [EOL] logger . info ( [string] ) [EOL] img_data = await page . capture_screenshot ( format = [string] ) [EOL] logger . info ( [string] ) [EOL] screenshot_file = await trio . open_file ( [string] , [string] ) [EOL] async with screenshot_file : [EOL] await screenshot_file . write ( b64decode ( img_data ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] if len ( sys . argv ) != [number] : [EOL] sys . stderr . write ( [string] ) [EOL] sys . exit ( [number] ) [EOL] trio . run ( main , restrict_keyboard_interrupt_to_checkpoints = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0