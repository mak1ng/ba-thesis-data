from typing import Dict , Any , Optional , Union , Pattern , List [EOL] import isim [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [EOL] import os [EOL] import re [EOL] import shlex [EOL] from typing import Any , Dict , List , Optional , Union [EOL] [EOL] from isim . runtime import Runtime [EOL] from isim . device_type import DeviceType [EOL] from isim . base_types import SimulatorControlBase , SimulatorControlType [EOL] [EOL] class MultipleMatchesException ( Exception ) : [EOL] [docstring] [EOL] [EOL] class DeviceNotFoundError ( Exception ) : [EOL] [docstring] [EOL] [EOL] class InvalidDeviceError ( Exception ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] class Device ( SimulatorControlBase ) : [EOL] [docstring] [EOL] [EOL] raw_info = ... [EOL] [EOL] availability = ... [EOL] is_available = ... [EOL] name = ... [EOL] runtime_id = ... [EOL] state = ... [EOL] udid = ... [EOL] [EOL] _runtime = ... [EOL] [EOL] def __init__ ( self , device_info , runtime_id ) : [EOL] [docstring] [EOL] [EOL] super ( ) . __init__ ( device_info , SimulatorControlType . device ) [EOL] self . _runtime = None [EOL] self . raw_info = device_info [EOL] self . availability = device_info . get ( [string] ) [EOL] self . is_available = device_info [ [string] ] [EOL] self . name = device_info [ [string] ] [EOL] self . runtime_id = runtime_id [EOL] self . state = device_info [ [string] ] [EOL] self . udid = device_info [ [string] ] [EOL] [EOL] def refresh_state ( self ) : [EOL] [docstring] [EOL] device = Device . from_identifier ( self . udid ) [EOL] self . raw_info = device . raw_info [EOL] self . availability = device . availability [EOL] self . is_available = device . is_available [EOL] self . name = device . name [EOL] self . state = device . state [EOL] self . udid = device . udid [EOL] [EOL] def runtime ( self ) : [EOL] [docstring] [EOL] if self . _runtime is None : [EOL] self . _runtime = Runtime . from_id ( self . runtime_id ) [EOL] [EOL] return self . _runtime [EOL] [EOL] def get_app_container ( self , app_identifier , container = None ) : [EOL] [docstring] [EOL] command = [string] % ( self . udid , app_identifier ) [EOL] [EOL] if container is not None : [EOL] command += [string] + container + [string] [EOL] [EOL] path = self . _run_command ( command ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] return path [ : - [number] ] [EOL] [comment] [EOL] [EOL] def get_data_directory ( self , app_identifier ) : [EOL] [docstring] [EOL] app_container = self . get_app_container ( app_identifier ) [EOL] [EOL] [comment] [EOL] app_container = os . path . dirname ( app_container ) [EOL] [EOL] data_folder = os . path . join ( app_container , [string] , [string] , [string] , [string] ) [EOL] mobile_installation_folder = os . path . join ( data_folder , [string] , [string] , [string] ) [EOL] mobile_installation_folder = os . path . abspath ( mobile_installation_folder ) [EOL] [EOL] log_file_names = os . listdir ( mobile_installation_folder ) [EOL] [EOL] [comment] [EOL] log_file_names = sorted ( log_file_names ) [EOL] [EOL] container_pattern = re . compile ( f' [string] { app_identifier } [string] ' ) [EOL] [EOL] [comment] [EOL] for log_file in log_file_names : [EOL] log_path = os . path . join ( mobile_installation_folder , log_file ) [EOL] [EOL] with open ( log_path , [string] ) as log_file_handle : [EOL] log_lines = log_file_handle . readlines ( ) [EOL] [EOL] [comment] [EOL] log_lines . reverse ( ) [EOL] [EOL] for line in log_lines : [EOL] matches = container_pattern . findall ( line . strip ( ) ) [EOL] [EOL] if not matches : [EOL] continue [EOL] [EOL] [comment] [EOL] return matches [ [number] ] [EOL] [EOL] return None [EOL] [EOL] def openurl ( self , url ) : [EOL] [docstring] [EOL] command = [string] % ( self . udid , url ) [EOL] self . _run_command ( command ) [EOL] [EOL] def logverbose ( self , enable ) : [EOL] [docstring] [EOL] command = [string] % ( self . udid , [string] if enable else [string] ) [EOL] self . _run_command ( command ) [EOL] [EOL] def icloud_sync ( self ) : [EOL] [docstring] [EOL] command = [string] % ( self . udid , ) [EOL] self . _run_command ( command ) [EOL] [EOL] def getenv ( self , variable_name ) : [EOL] [docstring] [EOL] command = [string] % ( self . udid , variable_name ) [EOL] variable = self . _run_command ( command ) [EOL] [comment] [EOL] [comment] [EOL] return variable [ : - [number] ] [EOL] [comment] [EOL] [EOL] def addmedia ( self , paths ) : [EOL] [docstring] [EOL] if isinstance ( paths , str ) : [EOL] paths = [ paths ] [EOL] [EOL] if not paths : [EOL] return [EOL] [EOL] command = [string] % ( self . udid ) [EOL] [EOL] [comment] [EOL] quoted_paths = [ [string] + path + [string] for path in paths ] [EOL] paths_arg = [string] . join ( quoted_paths ) [EOL] command += paths_arg [EOL] [EOL] self . _run_command ( command ) [EOL] [EOL] def terminate ( self , app_identifier ) : [EOL] [docstring] [EOL] command = [string] % ( self . udid , app_identifier ) [EOL] self . _run_command ( command ) [EOL] [EOL] def install ( self , path ) : [EOL] [docstring] [EOL] command = [string] % ( self . udid , path ) [EOL] self . _run_command ( command ) [EOL] [EOL] def uninstall ( self , app_identifier ) : [EOL] [docstring] [EOL] command = [string] % ( self . udid , app_identifier ) [EOL] self . _run_command ( command ) [EOL] [EOL] def delete ( self ) : [EOL] [docstring] [EOL] command = [string] % ( self . udid ) [EOL] self . _run_command ( command ) [EOL] [EOL] def rename ( self , name ) : [EOL] [docstring] [EOL] command = [string] % ( self . udid , name ) [EOL] self . _run_command ( command ) [EOL] [EOL] def boot ( self ) : [EOL] [docstring] [EOL] command = [string] % ( self . udid , ) [EOL] self . _run_command ( command ) [EOL] [EOL] def boot_status ( self ) : [EOL] [docstring] [EOL] command = [string] % ( self . udid , ) [EOL] self . _run_command ( command ) [EOL] [EOL] def shutdown ( self ) : [EOL] [docstring] [EOL] command = [string] % ( self . udid , ) [EOL] self . _run_command ( command ) [EOL] [EOL] def erase ( self ) : [EOL] [docstring] [EOL] command = [string] % ( self . udid , ) [EOL] self . _run_command ( command ) [EOL] [EOL] def upgrade ( self , runtime ) : [EOL] [docstring] [EOL] command = [string] % ( self . udid , runtime . identifier ) [EOL] self . _run_command ( command ) [EOL] self . _runtime = None [EOL] self . runtime_id = runtime . identifier [EOL] [EOL] def clone ( self , new_name ) : [EOL] [docstring] [EOL] command = [string] % ( self . udid , new_name ) [EOL] device_id = self . _run_command ( command ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] return device_id [ : - [number] ] [EOL] [comment] [EOL] [EOL] def pair ( self , other_device ) : [EOL] [docstring] [EOL] watch = None [EOL] phone = None [EOL] [EOL] if [string] in self . runtime_id : [EOL] phone = self [EOL] [EOL] if [string] in other_device . runtime_id : [EOL] phone = other_device [EOL] [EOL] if [string] in self . runtime_id : [EOL] watch = self [EOL] [EOL] if [string] in other_device . runtime_id : [EOL] watch = other_device [EOL] [EOL] if watch is None or phone is None : [EOL] raise InvalidDeviceError ( [string] ) [EOL] [EOL] command = [string] % ( watch . udid , phone . udid ) [EOL] pair_id = self . _run_command ( command ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] return pair_id [ : - [number] ] [EOL] [comment] [EOL] [EOL] def screenshot ( self , output_path ) : [EOL] [docstring] [EOL] [EOL] if os . path . exists ( output_path ) : [EOL] raise FileExistsError ( [string] ) [EOL] [EOL] self . _run_command ( f' [string] { self . udid } [string] { shlex . quote ( output_path ) }' ) [EOL] [EOL] def __str__ ( self ) : [EOL] [docstring] [EOL] return self . name + [string] + self . udid [EOL] [EOL] def __repr__ ( self ) : [EOL] [docstring] [EOL] return str ( { [string] : self . runtime_id , [string] : self . raw_info } ) [EOL] [EOL] @ staticmethod def from_simctl_info ( info ) : [EOL] [docstring] [EOL] all_devices = { } [EOL] for runtime_id in info . keys ( ) : [EOL] runtime_devices_info = info [ runtime_id ] [EOL] devices = [ ] [EOL] for device_info in runtime_devices_info : [EOL] devices . append ( Device ( device_info , runtime_id ) ) [EOL] all_devices [ runtime_id ] = devices [EOL] return all_devices [EOL] [EOL] @ staticmethod def from_identifier ( identifier ) : [EOL] [docstring] [EOL] for _ , devices in Device . list_all ( ) . items ( ) : [EOL] for device in devices : [EOL] if device . udid == identifier : [EOL] return device [EOL] [EOL] raise DeviceNotFoundError ( [string] + identifier ) [EOL] [EOL] @ staticmethod def from_name ( name , runtime = None ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] matching_name_devices = [ ] [EOL] [EOL] for runtime_id , runtime_devices in Device . list_all ( ) . items ( ) : [EOL] for device in runtime_devices : [EOL] if device . name == name : [EOL] matching_name_devices . append ( ( device , runtime_id ) ) [EOL] [EOL] [comment] [EOL] if not matching_name_devices : [EOL] return None [EOL] [EOL] [comment] [EOL] if len ( matching_name_devices ) == [number] : [EOL] return matching_name_devices [ [number] ] [ [number] ] [EOL] [EOL] [comment] [EOL] if runtime is None : [EOL] raise MultipleMatchesException ( [string] ) [EOL] [EOL] [comment] [EOL] matching_devices = [ device for device in matching_name_devices if device [ [number] ] == runtime . identifier ] [EOL] [EOL] if not matching_devices : [EOL] return None [EOL] [EOL] [comment] [EOL] if len ( matching_devices ) > [number] : [EOL] raise MultipleMatchesException ( [string] ) [EOL] [EOL] return matching_devices [ [number] ] [ [number] ] [EOL] [EOL] @ staticmethod def create ( name , device_type , runtime ) : [EOL] [docstring] [EOL] command = [string] % ( name , device_type . identifier , runtime . identifier ) [EOL] device_id = SimulatorControlBase . run_command ( command ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] device_id = device_id [ : - [number] ] [EOL] [comment] [EOL] [EOL] return Device . from_identifier ( device_id ) [EOL] [EOL] @ staticmethod def delete_unavailable ( ) : [EOL] [docstring] [EOL] SimulatorControlBase . run_command ( [string] ) [EOL] [EOL] @ staticmethod def list_all ( ) : [EOL] [docstring] [EOL] raw_info = Device . list_all_raw ( ) [EOL] return Device . from_simctl_info ( raw_info ) [EOL] [EOL] @ staticmethod def list_all_raw ( ) : [EOL] [docstring] [EOL] return SimulatorControlBase . list_type ( SimulatorControlType . device ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Optional[isim.runtime.Runtime]$ 0 0 0 0 0 $None$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Optional[isim.runtime.Runtime]$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $isim.device.Device$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 $isim.device.Device$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $typing.Optional[builtins.str]$ 0 $isim.device.Device$ 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.str$ 0 $isim.device.Device$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $isim.device.Device$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $isim.device.Device$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $isim.device.Device$ 0 $builtins.str$ 0 0 0 $isim.runtime.Runtime$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[isim.runtime.Runtime]$ 0 0 0 0 0 0 $typing.Optional[isim.runtime.Runtime]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[isim.runtime.Runtime]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $typing.List[typing.Any]$ 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $None$ 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $None$ 0 0 0 $isim.runtime.Runtime$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $isim.runtime.Runtime$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Optional[isim.runtime.Runtime]$ 0 0 0 0 0 $builtins.str$ 0 $isim.runtime.Runtime$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $'Device'$ 0 0 0 0 0 $isim.device.Device$ 0 0 0 $isim.device.Device$ 0 0 0 0 0 0 0 0 0 0 0 0 $isim.device.Device$ 0 0 0 0 0 0 0 $'Device'$ 0 0 0 0 $isim.device.Device$ 0 $'Device'$ 0 0 0 0 0 0 0 0 0 0 $isim.device.Device$ 0 0 0 0 0 0 0 $'Device'$ 0 0 0 0 $isim.device.Device$ 0 $'Device'$ 0 0 0 $isim.device.Device$ 0 0 0 $isim.device.Device$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $isim.device.Device$ 0 0 0 $isim.device.Device$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List['Device']]$ 0 $typing.Dict[builtins.str,typing.List[typing.Dict[builtins.str,typing.Any]]]$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[Device]]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[typing.Dict[builtins.str,typing.Any]]]$ 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 $typing.Dict[builtins.str,typing.List[typing.Dict[builtins.str,typing.Any]]]$ 0 0 0 0 $typing.List['Device']$ 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 $typing.List['Device']$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[Device]]$ 0 0 0 0 $typing.List['Device']$ 0 0 $typing.Dict[builtins.str,typing.List[Device]]$ 0 0 0 0 0 $'Device'$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Optional['Device']$ 0 $builtins.str$ 0 $typing.Optional[isim.runtime.Runtime]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[isim.runtime.Runtime]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Optional[isim.runtime.Runtime]$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $'Device'$ 0 $builtins.str$ 0 $isim.device_type.DeviceType$ 0 $isim.runtime.Runtime$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $isim.device_type.DeviceType$ 0 0 0 $isim.runtime.Runtime$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List['Device']]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[typing.Dict[builtins.str,typing.Any]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[typing.Dict[builtins.str,typing.Any]]]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[typing.Dict[builtins.str,typing.Any]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] import isim [EOL] import builtins [EOL] [docstring] [EOL] [EOL] import enum [EOL] import json [EOL] from typing import Any , Dict [EOL] import subprocess [EOL] [EOL] [EOL] class ErrorCodes ( enum . Enum ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] incompatible_device = [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] class SimulatorControlType ( enum . Enum ) : [EOL] [docstring] [EOL] [EOL] device_pair = [string] [EOL] runtime = [string] [EOL] device_type = [string] [EOL] device = [string] [EOL] [EOL] def list_key ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] if self . name == [string] : [EOL] return [string] [EOL] [comment] [EOL] return self . value + [string] [EOL] [EOL] [EOL] class SimulatorControlBase : [EOL] [docstring] [EOL] [EOL] raw_info = ... [EOL] simctl_type = ... [EOL] [EOL] def __init__ ( self , raw_info , simctl_type ) : [EOL] self . raw_info = raw_info [EOL] self . simctl_type = simctl_type [EOL] [EOL] [comment] [EOL] def _run_command ( self , command ) : [EOL] [docstring] [EOL] return SimulatorControlBase . run_command ( command ) [EOL] [comment] [EOL] [EOL] def __eq__ ( self , other ) : [EOL] [docstring] [EOL] [EOL] if not isinstance ( other , self . __class__ ) : [EOL] return False [EOL] [EOL] if not self . simctl_type == other . simctl_type : [EOL] return False [EOL] [EOL] return self . raw_info == other . raw_info [EOL] [EOL] def __ne__ ( self , other ) : [EOL] [docstring] [EOL] return not self . __eq__ ( other ) [EOL] [EOL] @ staticmethod def run_command ( command ) : [EOL] [docstring] [EOL] full_command = [string] % ( command , ) [EOL] [comment] [EOL] return subprocess . run ( full_command , universal_newlines = True , shell = True , check = True , stdout = subprocess . PIPE ) . stdout [EOL] [EOL] @ staticmethod def list_type ( item ) : [EOL] [docstring] [EOL] full_command = [string] % ( item . list_key ( ) , ) [EOL] [comment] [EOL] output = subprocess . run ( full_command , universal_newlines = True , shell = True , check = True , stdout = subprocess . PIPE ) . stdout [EOL] [EOL] json_output = json . loads ( output ) [EOL] [EOL] if not isinstance ( json_output , dict ) : [EOL] raise Exception ( [string] + str ( type ( json_output ) ) ) [EOL] [EOL] if not json_output . get ( item . list_key ( ) ) : [EOL] raise Exception ( [string] + item . list_key ( ) + [string] + str ( json_output ) ) [EOL] [EOL] return json_output [ item . list_key ( ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $SimulatorControlType$ 0 0 0 0 0 $None$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 $isim.base_types.SimulatorControlType$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $isim.base_types.SimulatorControlType$ 0 $isim.base_types.SimulatorControlType$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $SimulatorControlType$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $SimulatorControlType$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $SimulatorControlType$ 0 0 0 0 0 0 0 0 0 0 0 0 $SimulatorControlType$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $SimulatorControlType$ 0 0 0 0 0 0
from typing import Dict , List , Any [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] [EOL] from typing import Any , Dict , List [EOL] [EOL] from isim . base_types import SimulatorControlBase , SimulatorControlType [EOL] [EOL] class DevicePair ( SimulatorControlBase ) : [EOL] [docstring] [EOL] [EOL] raw_info = ... [EOL] identifier = ... [EOL] watch_udid = ... [EOL] phone_udid = ... [EOL] [EOL] def __init__ ( self , device_pair_identifier , device_pair_info ) : [EOL] [docstring] [EOL] super ( ) . __init__ ( device_pair_info , SimulatorControlType . device_pair ) [EOL] self . raw_info = device_pair_info [EOL] self . identifier = device_pair_identifier [EOL] self . watch_udid = device_pair_info [ [string] ] [ [string] ] [EOL] self . phone_udid = device_pair_info [ [string] ] [ [string] ] [EOL] [EOL] def watch ( self ) : [EOL] [docstring] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] def phone ( self ) : [EOL] [docstring] [EOL] raise NotImplementedError ( [string] ) [EOL] [EOL] def unpair ( self ) : [EOL] [docstring] [EOL] command = [string] % ( self . identifier , ) [EOL] self . _run_command ( command ) [EOL] [EOL] def activate ( self ) : [EOL] [docstring] [EOL] command = [string] % ( self . identifier , ) [EOL] self . _run_command ( command ) [EOL] [EOL] def __str__ ( self ) : [EOL] [docstring] [EOL] return self . identifier [EOL] [EOL] def __repr__ ( self ) : [EOL] [docstring] [EOL] return str ( { [string] : self . identifier , [string] : self . raw_info } ) [EOL] [EOL] @ staticmethod def from_simctl_info ( info ) : [EOL] [docstring] [EOL] device_pairs = [ ] [EOL] for device_pair_identifier , device_pair_info in info . items ( ) : [EOL] device_pairs . append ( DevicePair ( device_pair_identifier , device_pair_info ) ) [EOL] return device_pairs [EOL] [EOL] @ staticmethod def list_all ( ) : [EOL] [docstring] [EOL] device_pair_info = SimulatorControlBase . list_type ( SimulatorControlType . device_pair ) [EOL] return DevicePair . from_simctl_info ( device_pair_info ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List['DevicePair']$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List['DevicePair']$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0
from typing import Optional , List , Union [EOL] import typing [EOL] import subprocess [EOL] import builtins [EOL] [docstring] [EOL] [EOL] import os [EOL] from typing import List , Optional , Union [EOL] import shlex [EOL] import subprocess [EOL] [EOL] from isim . device import Device , DeviceNotFoundError [EOL] from isim . device_pair import DevicePair [EOL] from isim . device_type import DeviceType , DeviceTypeNotFoundError [EOL] from isim . runtime import Runtime , RuntimeNotFoundError [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def diagnose ( * , output_path , all_logs = False , include_data_directory = False , archive = True , timeout = [number] , udids = None ) : [EOL] [docstring] [EOL] [EOL] output_archive = f'{ output_path } [string] ' [EOL] [EOL] if os . path . exists ( output_path ) : [EOL] raise FileExistsError ( [string] ) [EOL] [EOL] if os . path . exists ( output_archive ) : [EOL] raise FileExistsError ( f' [string] { output_archive } [string] ' ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] full_command = [ [string] , [string] , [string] , [string] , [string] , f' [string] { timeout }' , f' [string] { shlex . quote ( output_path ) }' ] [EOL] [EOL] if not archive : [EOL] full_command . append ( [string] ) [EOL] [EOL] if include_data_directory : [EOL] full_command . append ( [string] ) [EOL] [EOL] if all_logs : [EOL] full_command . append ( [string] ) [EOL] [EOL] if udids is not None : [EOL] if isinstance ( udids , str ) : [EOL] full_command . append ( f' [string] { udids }' ) [EOL] else : [EOL] full_command += [ f' [string] { udid }' for udid in udids ] [EOL] [EOL] command_string = [string] . join ( full_command ) [EOL] [EOL] [comment] [EOL] _ = subprocess . run ( command_string , universal_newlines = True , shell = True , stdout = subprocess . PIPE , stderr = subprocess . STDOUT , check = True ) [EOL] [EOL] return output_archive [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str
from typing import Optional , Dict , List , Any [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] [EOL] from typing import Any , Dict , List , Optional [EOL] [EOL] from isim . base_types import SimulatorControlBase , SimulatorControlType [EOL] [EOL] class RuntimeNotFoundError ( Exception ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] class Runtime ( SimulatorControlBase ) : [EOL] [docstring] [EOL] [EOL] raw_info = ... [EOL] availability = ... [EOL] build_version = ... [EOL] bundle_path = ... [EOL] identifier = ... [EOL] is_available = ... [EOL] name = ... [EOL] version = ... [EOL] [EOL] def __init__ ( self , runtime_info ) : [EOL] [docstring] [EOL] [EOL] super ( ) . __init__ ( runtime_info , SimulatorControlType . runtime ) [EOL] self . raw_info = runtime_info [EOL] self . availability = runtime_info . get ( [string] ) [EOL] self . build_version = runtime_info [ [string] ] [EOL] self . bundle_path = runtime_info [ [string] ] . replace ( [string] , [string] ) [EOL] self . identifier = runtime_info [ [string] ] [EOL] self . is_available = runtime_info [ [string] ] [EOL] self . name = runtime_info [ [string] ] [EOL] self . version = runtime_info [ [string] ] [EOL] [EOL] def __str__ ( self ) : [EOL] [docstring] [EOL] return [string] % ( self . name , self . identifier ) [EOL] [EOL] def __repr__ ( self ) : [EOL] [docstring] [EOL] return str ( self . raw_info ) [EOL] [EOL] @ staticmethod def from_simctl_info ( info ) : [EOL] [docstring] [EOL] runtimes = [ ] [EOL] for runtime_info in info : [EOL] runtimes . append ( Runtime ( runtime_info ) ) [EOL] return runtimes [EOL] [EOL] @ staticmethod def from_id ( identifier ) : [EOL] [docstring] [EOL] [comment] [EOL] for runtime in Runtime . list_all ( ) : [EOL] if runtime . identifier == identifier : [EOL] return runtime [EOL] [EOL] raise RuntimeNotFoundError ( f" [string] { identifier }" ) [EOL] [EOL] @ staticmethod def from_name ( name ) : [EOL] [docstring] [EOL] for runtime in Runtime . list_all ( ) : [EOL] if runtime . name == name : [EOL] return runtime [EOL] [EOL] raise RuntimeNotFoundError ( f" [string] { name }" ) [EOL] [EOL] @ staticmethod def list_all ( ) : [EOL] [docstring] [EOL] runtime_info = SimulatorControlBase . list_type ( SimulatorControlType . runtime ) [EOL] return Runtime . from_simctl_info ( runtime_info ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $builtins.bool$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List['Runtime']$ 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Any]]$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $'Runtime'$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $'Runtime'$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.List['Runtime']$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0
from typing import Dict , List , Any [EOL] import typing [EOL] import isim [EOL] import builtins [EOL] [docstring] [EOL] [EOL] from typing import Dict , List [EOL] [EOL] from isim . base_types import SimulatorControlBase , SimulatorControlType [EOL] [EOL] class DeviceTypeNotFoundError ( Exception ) : [EOL] [docstring] [EOL] [EOL] class DeviceType ( SimulatorControlBase ) : [EOL] [docstring] [EOL] [EOL] raw_info = ... [EOL] bundle_path = ... [EOL] identifier = ... [EOL] name = ... [EOL] [EOL] def __init__ ( self , device_type_info ) : [EOL] [docstring] [EOL] super ( ) . __init__ ( device_type_info , SimulatorControlType . device_type ) [EOL] self . raw_info = device_type_info [EOL] self . bundle_path = device_type_info [ [string] ] . replace ( [string] , [string] ) [EOL] self . identifier = device_type_info [ [string] ] [EOL] self . name = device_type_info [ [string] ] [EOL] [EOL] def __str__ ( self ) : [EOL] [docstring] [EOL] return self . name + [string] + self . identifier [EOL] [EOL] def __repr__ ( self ) : [EOL] [docstring] [EOL] return str ( self . raw_info ) [EOL] [EOL] @ staticmethod def from_simctl_info ( info ) : [EOL] [docstring] [EOL] device_types = [ ] [EOL] for device_type_info in info : [EOL] device_types . append ( DeviceType ( device_type_info ) ) [EOL] return device_types [EOL] [EOL] @ staticmethod def from_id ( identifier ) : [EOL] [docstring] [EOL] for device_type in DeviceType . list_all ( ) : [EOL] if device_type . identifier == identifier : [EOL] return device_type [EOL] raise DeviceTypeNotFoundError ( [string] + identifier ) [EOL] [EOL] @ staticmethod def from_name ( name ) : [EOL] [docstring] [EOL] [comment] [EOL] device_types = DeviceType . list_all ( ) [EOL] [EOL] for device_type in device_types : [EOL] if device_type . name == name : [EOL] return device_type [EOL] [EOL] raise DeviceTypeNotFoundError ( [string] + name ) [EOL] [EOL] @ staticmethod def list_all ( ) : [EOL] [docstring] [EOL] device_type_info = SimulatorControlBase . list_type ( SimulatorControlType . device_type ) [EOL] return DeviceType . from_simctl_info ( device_type_info ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List['DeviceType']$ 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,builtins.str]]$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $'DeviceType'$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $'DeviceType'$ 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.List[isim.device_type.DeviceType]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[isim.device_type.DeviceType]$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List['DeviceType']$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0
[docstring] [EOL] [EOL] import sys [EOL] import os [EOL] [EOL] sys . path . insert ( [number] , os . path . abspath ( [string] ) ) [EOL] sys . path . insert ( [number] , os . path . abspath ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , Dict , Set , List [EOL] import typing [EOL] import isim [EOL] [docstring] [EOL] [EOL] import os [EOL] import random [EOL] import subprocess [EOL] import sys [EOL] import unittest [EOL] import uuid [EOL] [EOL] sys . path . insert ( [number] , os . path . abspath ( os . path . join ( os . path . dirname ( __file__ ) , [string] ) ) ) [EOL] [comment] [EOL] import isim [EOL] [comment] [EOL] [EOL] [EOL] class TestRuntime ( unittest . TestCase ) : [EOL] [docstring] [EOL] [EOL] def test_from_info ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] fake_runtime = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : True , [string] : [string] , [string] : [string] } [EOL] [comment] [EOL] [EOL] runtimes = isim . Runtime . from_simctl_info ( [ fake_runtime ] ) [EOL] self . assertEqual ( len ( runtimes ) , [number] ) [EOL] runtime = runtimes [ [number] ] [EOL] [EOL] self . assertTrue ( runtime . availability == fake_runtime [ [string] ] or runtime . availability is None ) [EOL] self . assertEqual ( runtime . build_version , fake_runtime [ [string] ] ) [EOL] self . assertEqual ( runtime . bundle_path , fake_runtime [ [string] ] . replace ( [string] , [string] ) ) [EOL] self . assertEqual ( runtime . identifier , fake_runtime [ [string] ] ) [EOL] self . assertEqual ( runtime . is_available , fake_runtime [ [string] ] ) [EOL] self . assertEqual ( runtime . name , fake_runtime [ [string] ] ) [EOL] self . assertEqual ( runtime . version , fake_runtime [ [string] ] ) [EOL] [EOL] def test_installed_runtimes ( self ) : [EOL] [docstring] [EOL] self . assertIsNotNone ( isim . Runtime . list_all ( ) ) [EOL] [EOL] def test_from_identifier ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] command = [string] [EOL] runtimes = subprocess . run ( command , universal_newlines = True , shell = True , check = True , stdout = subprocess . PIPE ) . stdout [EOL] runtimes = runtimes . split ( [string] ) [EOL] runtimes = [ runtime . strip ( ) for runtime in runtimes ] [EOL] runtimes = [ runtime for runtime in runtimes if len ( runtime ) > [number] ] [EOL] self . assertTrue ( len ( runtimes ) > [number] ) [EOL] [EOL] runtime_identifier = random . choice ( runtimes ) [EOL] runtime = isim . Runtime . from_id ( runtime_identifier ) [EOL] [EOL] self . assertIsNotNone ( runtime ) [EOL] self . assertEqual ( runtime . identifier , runtime_identifier ) [EOL] [EOL] def test_from_name ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] command = [string] [EOL] runtimes = subprocess . run ( command , universal_newlines = True , shell = True , check = True , stdout = subprocess . PIPE ) . stdout [EOL] runtimes = runtimes . split ( [string] ) [EOL] runtimes = [ runtime for runtime in runtimes if len ( runtime ) > [number] ] [EOL] self . assertTrue ( len ( runtimes ) > [number] ) [EOL] [EOL] runtime_name = random . choice ( runtimes ) [EOL] runtime = isim . Runtime . from_name ( runtime_name ) [EOL] [EOL] self . assertIsNotNone ( runtime ) [EOL] self . assertEqual ( runtime . name , runtime_name ) [EOL] [EOL] def test_invalid_identifier ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] with self . assertRaises ( isim . runtime . RuntimeNotFoundError ) : [EOL] _ = isim . Runtime . from_id ( [string] ) [EOL] [EOL] def test_invalid_name ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] with self . assertRaises ( isim . RuntimeNotFoundError ) : [EOL] _ = isim . Runtime . from_name ( str ( uuid . uuid4 ( ) ) ) [EOL] [EOL] def test_equality ( self ) : [EOL] [docstring] [EOL] all_runtimes = isim . Runtime . list_all ( ) [EOL] [EOL] [comment] [EOL] self . assertTrue ( len ( all_runtimes ) >= [number] ) [EOL] [EOL] [comment] [EOL] runtime_a , runtime_b = random . sample ( all_runtimes , [number] ) [EOL] [EOL] [comment] [EOL] self . assertNotEqual ( runtime_a , runtime_b ) [EOL] [EOL] [comment] [EOL] self . assertNotEqual ( runtime_a , [ [string] , [string] ] ) [EOL] [EOL] [comment] [EOL] self . assertEqual ( runtime_a , runtime_a ) [EOL] [EOL] [comment] [EOL] identifier_copy_a = isim . Runtime . from_id ( runtime_a . identifier ) [EOL] self . assertEqual ( runtime_a , identifier_copy_a ) [EOL] [EOL] def test_string_representations ( self ) : [EOL] [docstring] [EOL] all_runtimes = isim . Runtime . list_all ( ) [EOL] strings = { str ( runtime ) for runtime in all_runtimes } [EOL] self . assertEqual ( len ( strings ) , len ( all_runtimes ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[isim.runtime.Runtime]$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 $typing.List[isim.runtime.Runtime]$ 0 0 0 0 0 $isim.runtime.Runtime$ 0 $typing.List[isim.runtime.Runtime]$ 0 0 0 0 0 0 0 0 0 $isim.runtime.Runtime$ 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 $isim.runtime.Runtime$ 0 0 0 0 0 0 0 0 0 0 $isim.runtime.Runtime$ 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 $isim.runtime.Runtime$ 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $isim.runtime.Runtime$ 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 $isim.runtime.Runtime$ 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 $isim.runtime.Runtime$ 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 $isim.runtime.Runtime$ 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.bool,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $isim.runtime.Runtime$ 0 0 0 0 0 $isim.runtime.Runtime$ 0 $typing.List[builtins.str]$ 0 0 $typing.List[builtins.str]$ 0 0 $isim.runtime.Runtime$ 0 $isim.runtime.Runtime$ 0 $typing.List[builtins.str]$ 0 0 0 $isim.runtime.Runtime$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $isim.runtime.Runtime$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $isim.runtime.Runtime$ 0 0 0 0 0 0 $isim.runtime.Runtime$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $isim.runtime.Runtime$ 0 $isim.runtime.Runtime$ 0 $typing.List[builtins.str]$ 0 0 0 $isim.runtime.Runtime$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $isim.runtime.Runtime$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $isim.runtime.Runtime$ 0 0 0 0 0 0 $isim.runtime.Runtime$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $isim.runtime.Runtime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $isim.runtime.Runtime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[isim.runtime.Runtime]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[isim.runtime.Runtime]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[isim.runtime.Runtime]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $isim.runtime.Runtime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $isim.runtime.Runtime$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[isim.runtime.Runtime]$ 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[isim.runtime.Runtime]$ 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 $typing.List[isim.runtime.Runtime]$ 0 0 0
from typing import Dict , Set , List [EOL] import isim [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] import random [EOL] import subprocess [EOL] import sys [EOL] import unittest [EOL] import uuid [EOL] [EOL] sys . path . insert ( [number] , os . path . abspath ( os . path . join ( os . path . dirname ( __file__ ) , [string] ) ) ) [EOL] [comment] [EOL] import isim [EOL] [comment] [EOL] [EOL] [EOL] class TestDeviceTypes ( unittest . TestCase ) : [EOL] [docstring] [EOL] [EOL] def test_installed_device_types ( self ) : [EOL] [docstring] [EOL] self . assertIsNotNone ( isim . Runtime . list_all ( ) ) [EOL] [EOL] def test_from_info ( self ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] fake_device_type = { [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [comment] [EOL] [EOL] device_types = isim . DeviceType . from_simctl_info ( [ fake_device_type ] ) [EOL] self . assertEqual ( len ( device_types ) , [number] ) [EOL] device_type = device_types [ [number] ] [EOL] [EOL] self . assertEqual ( device_type . name , fake_device_type [ [string] ] ) [EOL] self . assertEqual ( device_type . bundle_path , fake_device_type [ [string] ] . replace ( [string] , [string] ) ) [EOL] self . assertEqual ( device_type . identifier , fake_device_type [ [string] ] ) [EOL] [EOL] def test_from_identifier ( self ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] command = [string] [EOL] device_type_identifiers = subprocess . run ( command , universal_newlines = True , shell = True , check = True , stdout = subprocess . PIPE ) . stdout [EOL] [EOL] device_type_identifiers = device_type_identifiers . split ( [string] ) [EOL] device_type_identifiers = [ identifier for identifier in device_type_identifiers if len ( identifier ) > [number] ] [EOL] self . assertTrue ( len ( device_type_identifiers ) > [number] ) [EOL] [EOL] device_type_identifier = random . choice ( device_type_identifiers ) [EOL] device_type = isim . DeviceType . from_id ( device_type_identifier ) [EOL] [EOL] self . assertIsNotNone ( device_type ) [EOL] self . assertEqual ( device_type . identifier , device_type_identifier ) [EOL] [EOL] def test_from_name ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] command = [string] [EOL] device_type_names = subprocess . run ( command , universal_newlines = True , shell = True , check = True , stdout = subprocess . PIPE ) . stdout [EOL] device_type_names = device_type_names . split ( [string] ) [EOL] device_type_names = [ name for name in device_type_names if len ( name ) > [number] ] [EOL] self . assertTrue ( len ( device_type_names ) > [number] ) [EOL] [EOL] device_type_name = random . choice ( device_type_names ) [EOL] device_type = isim . DeviceType . from_name ( device_type_name ) [EOL] [EOL] self . assertIsNotNone ( device_type ) [EOL] self . assertEqual ( device_type . name , device_type_name ) [EOL] [EOL] def test_invalid_identifier ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] with self . assertRaises ( isim . DeviceTypeNotFoundError ) : [EOL] _ = isim . DeviceType . from_id ( [string] ) [EOL] [EOL] def test_invalid_name ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] with self . assertRaises ( isim . DeviceTypeNotFoundError ) : [EOL] _ = isim . DeviceType . from_name ( str ( uuid . uuid4 ( ) ) ) [EOL] [EOL] def test_equality ( self ) : [EOL] [docstring] [EOL] all_device_types = isim . DeviceType . list_all ( ) [EOL] [EOL] [comment] [EOL] self . assertTrue ( len ( all_device_types ) >= [number] ) [EOL] [EOL] [comment] [EOL] device_type_a , device_type_b = random . sample ( all_device_types , [number] ) [EOL] [EOL] [comment] [EOL] self . assertNotEqual ( device_type_a , device_type_b ) [EOL] [EOL] [comment] [EOL] self . assertNotEqual ( device_type_a , [ [string] , [string] ] ) [EOL] [EOL] [comment] [EOL] self . assertEqual ( device_type_a , device_type_a ) [EOL] [EOL] [comment] [EOL] identifier_copy_a = isim . DeviceType . from_id ( device_type_a . identifier ) [EOL] self . assertEqual ( device_type_a , identifier_copy_a ) [EOL] [EOL] def test_string_representations ( self ) : [EOL] [docstring] [EOL] all_device_types = isim . DeviceType . list_all ( ) [EOL] strings = { str ( device_type ) for device_type in all_device_types } [EOL] self . assertEqual ( len ( strings ) , len ( all_device_types ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $isim.device_type.DeviceType$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $isim.device_type.DeviceType$ 0 0 0 0 0 $isim.device_type.DeviceType$ 0 $isim.device_type.DeviceType$ 0 0 0 0 0 0 0 0 0 $isim.device_type.DeviceType$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $isim.device_type.DeviceType$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $isim.device_type.DeviceType$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $isim.device_type.DeviceType$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $isim.device_type.DeviceType$ 0 0 0 0 0 0 $isim.device_type.DeviceType$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $isim.device_type.DeviceType$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $isim.device_type.DeviceType$ 0 0 0 0 0 0 $isim.device_type.DeviceType$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $isim.device_type.DeviceType$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $isim.device_type.DeviceType$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[isim.device_type.DeviceType]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[isim.device_type.DeviceType]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[isim.device_type.DeviceType]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $isim.device_type.DeviceType$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $isim.device_type.DeviceType$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[isim.device_type.DeviceType]$ 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[isim.device_type.DeviceType]$ 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 $typing.List[isim.device_type.DeviceType]$ 0 0 0
from typing import List [EOL] import typing [EOL] import isim [EOL] [docstring] [EOL] [EOL] import os [EOL] import subprocess [EOL] import sys [EOL] from typing import List [EOL] import unittest [EOL] import uuid [EOL] [EOL] sys . path . insert ( [number] , os . path . abspath ( os . path . join ( os . path . dirname ( __file__ ) , [string] ) ) ) [EOL] [comment] [EOL] import isim [EOL] [comment] [EOL] [EOL] [EOL] [EOL] class TestDevice ( unittest . TestCase ) : [EOL] [docstring] [EOL] [EOL] available_runtimes = [ ] [EOL] available_device_types = [ ] [EOL] [EOL] @ classmethod def setUpClass ( cls ) : [EOL] TestDevice . available_runtimes = isim . Runtime . list_all ( ) [EOL] TestDevice . available_device_types = isim . DeviceType . list_all ( ) [EOL] [EOL] [EOL] def run_device_test ( self , available_device_type , available_runtime ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] if [string] in available_device_type . identifier or [string] in available_device_type . identifier : [EOL] if [string] not in available_runtime . identifier : [EOL] return False [EOL] elif [string] in available_device_type . identifier : [EOL] if [string] not in available_runtime . identifier : [EOL] return False [EOL] elif [string] in available_device_type . identifier : [EOL] if [string] not in available_runtime . identifier : [EOL] return False [EOL] else : [EOL] raise Exception ( [string] + available_device_type . identifier ) [EOL] [EOL] device_name = [string] % ( uuid . uuid4 ( ) , ) [EOL] state = [string] [EOL] availability = [string] [EOL] [EOL] try : [EOL] device = isim . Device . create ( device_name , available_device_type , available_runtime ) [EOL] except subprocess . CalledProcessError as ex : [EOL] if ex . returncode in [ isim . base_types . ErrorCodes . incompatible_device . value ] : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] return False [EOL] [EOL] raise ex [EOL] [EOL] self . assertIsNotNone ( device ) [EOL] self . assertEqual ( device . name , device_name , [string] % ( device . name , device_name ) ) [EOL] self . assertEqual ( device . state . lower ( ) , state , [string] ) [EOL] if device . availability is not None : [EOL] self . assertEqual ( device . availability . lower ( ) , availability , [string] ) [EOL] self . assertEqual ( device . runtime ( ) , available_runtime , [string] % ( device . runtime ( ) , available_runtime ) ) [EOL] [EOL] device . delete ( ) [EOL] [EOL] return True [EOL] [EOL] def test_installed_devicess ( self ) : [EOL] [docstring] [EOL] self . assertIsNotNone ( isim . Device . list_all ( ) ) [EOL] [EOL] def test_lifecycle ( self ) : [EOL] [docstring] [EOL] [EOL] for available_device_type in TestDevice . available_device_types : [EOL] device_tested = False [EOL] [EOL] for available_runtime in TestDevice . available_runtimes : [EOL] [EOL] [comment] [EOL] [comment] [EOL] if device_tested : [EOL] continue [EOL] [EOL] if self . run_device_test ( available_device_type , available_runtime ) : [EOL] [comment] [EOL] device_tested = True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[isim.Runtime]$ 0 0 0 0 $typing.List[isim.DeviceType]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[isim.runtime.Runtime]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[isim.device_type.DeviceType]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $isim.device.Device$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $isim.device.Device$ 0 0 0 0 0 0 $isim.device.Device$ 0 0 0 $builtins.str$ 0 0 0 0 $isim.device.Device$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $isim.device.Device$ 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $isim.device.Device$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $isim.device.Device$ 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $isim.device.Device$ 0 0 0 0 0 0 0 0 0 0 $isim.device.Device$ 0 0 0 0 0 0 0 0 0 0 $isim.device.Device$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0