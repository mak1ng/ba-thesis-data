	0
from typing import Dict , Any , Optional [EOL] import temba_client [EOL] import typing [EOL] import builtins [EOL] from typing import Optional [EOL] from django . conf import settings [EOL] from temba_client . v2 import TembaClient [EOL] from temba_client . v2 . types import Group , Contact , Field [EOL] [EOL] [EOL] def iso639one2two ( locale ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] ISO_639_ONE_TO_TWO = { [string] : [string] , [string] : [string] , } [EOL] [EOL] return ISO_639_ONE_TO_TWO [ locale ] [EOL] [EOL] [EOL] def get_group ( client , name ) : [EOL] [docstring] [EOL] [EOL] group = client . get_groups ( name = name ) . first ( retry_on_rate_exceed = True ) [EOL] if group is None : [EOL] raise ValueError ( f" [string] { name } [string] " ) [EOL] return group [EOL] [EOL] [EOL] def get_field ( client , key ) : [EOL] [docstring] [EOL] [EOL] field = client . get_fields ( key = key ) . first ( retry_on_rate_exceed = True ) [EOL] if field is None : [EOL] raise ValueError ( f" [string] { key } [string] " ) [EOL] return field [EOL] [EOL] [EOL] def get_or_create_contact ( client , name , phone_number , locale ) : [EOL] [docstring] [EOL] [EOL] urn = f' [string] { phone_number }' [EOL] contact = client . get_contacts ( urn = urn ) . first ( retry_on_rate_exceed = True ) [EOL] if contact is None : [EOL] contact = client . create_contact ( name = name , urns = [ urn ] , language = iso639one2two ( locale ) ) [EOL] return contact [EOL] [EOL] [EOL] def get_client_from_settings ( ) : [EOL] [docstring] [EOL] [EOL] if not settings . RAPIDPRO_API_TOKEN : [EOL] return None [EOL] return TembaClient ( settings . RAPIDPRO_HOSTNAME , settings . RAPIDPRO_API_TOKEN ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $temba_client.v2.types.Group$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $temba_client.v2.types.Field$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $temba_client.v2.types.Contact$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[temba_client.v2.TembaClient]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional [EOL] import typing [EOL] import rapidpro [EOL] import builtins [EOL] from celery import shared_task [EOL] from temba_client . exceptions import TembaHttpError [EOL] [EOL] from . rapidpro_util import get_client_from_settings [EOL] from . followup_campaigns import DjangoSettingsFollowupCampaigns [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] @ shared_task ( bind = True , retry_backoff = True , default_retry_delay = [number] * [number] ) def trigger_followup_campaign ( self , full_name , phone_number , campaign_name , locale = [string] ) : [EOL] client = get_client_from_settings ( ) [EOL] campaign = DjangoSettingsFollowupCampaigns . get_campaign ( campaign_name ) [EOL] [EOL] assert client is not None [EOL] assert campaign is not None [EOL] [EOL] try : [EOL] campaign . add_contact ( client , full_name , phone_number , locale = locale ) [EOL] except TembaHttpError as e : [EOL] raise self . retry ( exc = e ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Set , Any , Optional , List [EOL] import typing [EOL] import rapidpro [EOL] import temba_client [EOL] import builtins [EOL] import datetime [EOL] from typing import NamedTuple , Optional , List [EOL] from django . conf import settings [EOL] from temba_client . v2 import TembaClient [EOL] from temba_client . v2 . types import Contact [EOL] from temba_client . utils import format_iso8601 [EOL] [EOL] from . rapidpro_util import get_field , get_group , get_or_create_contact , get_client_from_settings [EOL] [EOL] [EOL] class DjangoSettingsFollowupCampaigns : [EOL] [docstring] [EOL] [EOL] CAMPAIGN_SETTING_PREFIX = [string] [EOL] [EOL] @ classmethod def get_names ( cls ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] settings_attrs = set ( dir ( settings ) ) [EOL] [EOL] return [ name [ len ( cls . CAMPAIGN_SETTING_PREFIX ) : ] for name in settings_attrs if name . startswith ( cls . CAMPAIGN_SETTING_PREFIX ) ] [EOL] [EOL] @ classmethod def get_setting_name ( cls , name ) : [EOL] [docstring] [EOL] [EOL] return cls . CAMPAIGN_SETTING_PREFIX + name [EOL] [EOL] @ classmethod def get_campaign ( cls , name ) : [EOL] [docstring] [EOL] [EOL] campaign_str = getattr ( settings , cls . get_setting_name ( name ) ) [EOL] return FollowupCampaign . from_string ( campaign_str ) [EOL] [EOL] [EOL] class FollowupCampaign ( NamedTuple ) : [EOL] [comment] [EOL] [comment] [EOL] group_name = ... [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] field_key = ... [EOL] [EOL] def validate ( self , client ) : [EOL] [docstring] [EOL] [EOL] get_group ( client , self . group_name ) [EOL] get_field ( client , self . field_key ) [EOL] [EOL] def add_to_group_and_update_date_field ( self , client , contact ) : [EOL] [docstring] [EOL] [EOL] client . update_contact ( contact , groups = [ * contact . groups , get_group ( client , self . group_name ) ] , fields = { ** contact . fields , self . field_key : format_iso8601 ( datetime . datetime . now ( ) ) } ) [EOL] [EOL] def add_contact ( self , client , full_name , phone_number , locale ) : [EOL] [docstring] [EOL] [EOL] contact = get_or_create_contact ( client , full_name , phone_number , locale = locale ) [EOL] self . add_to_group_and_update_date_field ( client , contact ) [EOL] [EOL] @ classmethod def from_string ( cls , value ) : [EOL] [docstring] [EOL] [EOL] if not value : [EOL] return None [EOL] return FollowupCampaign ( * value . split ( [string] , [number] ) ) [EOL] [EOL] [EOL] def trigger_followup_campaign_async ( full_name , phone_number , campaign_name , locale ) : [EOL] [docstring] [EOL] [EOL] client = get_client_from_settings ( ) [EOL] campaign = DjangoSettingsFollowupCampaigns . get_campaign ( campaign_name ) [EOL] if client and campaign : [EOL] from . import tasks [EOL] tasks . trigger_followup_campaign . delay ( full_name , phone_number , campaign_name , locale ) [EOL] [EOL] [EOL] def ensure_followup_campaign_exists ( campaign_name ) : [EOL] [docstring] [EOL] [EOL] DjangoSettingsFollowupCampaigns . get_campaign ( campaign_name ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Optional['FollowupCampaign']$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $temba_client.v2.TembaClient$ 0 0 0 0 0 0 0 0 $temba_client.v2.TembaClient$ 0 0 0 0 0 0 0 0 $temba_client.v2.TembaClient$ 0 0 0 0 0 0 0 0 0 0 0 0 $temba_client.v2.TembaClient$ 0 $temba_client.v2.types.Contact$ 0 0 0 0 0 0 $temba_client.v2.TembaClient$ 0 0 0 $temba_client.v2.types.Contact$ 0 0 0 0 0 $temba_client.v2.types.Contact$ 0 0 0 0 0 $temba_client.v2.TembaClient$ 0 0 0 0 0 0 0 0 0 0 0 $temba_client.v2.types.Contact$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $temba_client.v2.TembaClient$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $temba_client.v2.TembaClient$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $temba_client.v2.TembaClient$ 0 0 0 0 0 0 0 0 $typing.Optional['FollowupCampaign']$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class RapidproConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Any [EOL] import rapidpro [EOL] import typing [EOL] import unittest [EOL] from unittest . mock import MagicMock [EOL] from celery . exceptions import Retry [EOL] from temba_client . v2 . types import Contact [EOL] from temba_client . exceptions import TembaHttpError [EOL] from freezegun import freeze_time [EOL] import pytest [EOL] [EOL] from rapidpro import tasks [EOL] from rapidpro . followup_campaigns import ( DjangoSettingsFollowupCampaigns , FollowupCampaign , trigger_followup_campaign_async ) [EOL] from . test_rapidpro_util import mock_query , make_client_mocks [EOL] [EOL] [EOL] class TestDjangoSettingsFollowupCampaigns : [EOL] def test_get_names_works ( self ) : [EOL] assert [string] in DjangoSettingsFollowupCampaigns . get_names ( ) [EOL] [EOL] def test_get_campaign_returns_none_if_unconfigured ( self ) : [EOL] assert DjangoSettingsFollowupCampaigns . get_campaign ( [string] ) is None [EOL] [EOL] def test_get_campaign_returns_campaign_if_configured ( self , settings ) : [EOL] settings . RAPIDPRO_FOLLOWUP_CAMPAIGN_RH = [string] [EOL] assert DjangoSettingsFollowupCampaigns . get_campaign ( [string] ) == FollowupCampaign ( [string] , [string] ) [EOL] [EOL] [EOL] class TestFollowupCampaign : [EOL] def test_validate_works ( self ) : [EOL] client , _ = make_client_mocks ( [string] , [string] ) [EOL] mock_query ( client , [string] , [string] ) [EOL] campaign = FollowupCampaign ( [string] , [string] ) [EOL] campaign . validate ( client ) [EOL] [EOL] def test_validate_raises_error_on_failure ( self ) : [EOL] client , _ = make_client_mocks ( [string] , [string] ) [EOL] mock_query ( client , [string] , None ) [EOL] campaign = FollowupCampaign ( [string] , [string] ) [EOL] with pytest . raises ( ValueError , match = [string] ) : [EOL] campaign . validate ( client ) [EOL] [EOL] def test_add_contact_works ( self ) : [EOL] contact = Contact . create ( groups = [ [string] ] , fields = { [string] : [string] } ) [EOL] client , _ = make_client_mocks ( [string] , contact ) [EOL] mock_query ( client , [string] , [string] ) [EOL] campaign = FollowupCampaign ( [string] , [string] ) [EOL] with freeze_time ( [string] ) : [EOL] campaign . add_contact ( client , [string] , [string] , [string] ) [EOL] client . update_contact . assert_called_once_with ( contact , groups = [ [string] , [string] ] , fields = { [string] : [string] , [string] : [string] } ) [EOL] [EOL] [EOL] class TestTriggerFollowupCampaignAsync : [EOL] @ pytest . fixture def tasks_trigger ( self , monkeypatch ) : [EOL] tasks_trigger = MagicMock ( ) [EOL] monkeypatch . setattr ( tasks , [string] , tasks_trigger ) [EOL] yield tasks_trigger [EOL] [EOL] def test_it_does_nothing_if_rapidpro_is_unconfigured ( self , settings , tasks_trigger ) : [EOL] settings . RAPIDPRO_FOLLOWUP_CAMPAIGN_RH = [string] [EOL] trigger_followup_campaign_async ( [string] , [string] , [string] , [string] ) [EOL] tasks_trigger . assert_not_called ( ) [EOL] [EOL] def test_it_does_nothing_if_campaign_is_unconfigured ( self , settings , tasks_trigger ) : [EOL] settings . RAPIDPRO_API_TOKEN = [string] [EOL] trigger_followup_campaign_async ( [string] , [string] , [string] , [string] ) [EOL] tasks_trigger . assert_not_called ( ) [EOL] [EOL] def test_it_triggers_if_rapidpro_and_campaign_are_configured ( self , settings , tasks_trigger ) : [EOL] settings . RAPIDPRO_FOLLOWUP_CAMPAIGN_RH = [string] [EOL] settings . RAPIDPRO_API_TOKEN = [string] [EOL] trigger_followup_campaign_async ( [string] , [string] , [string] , [string] ) [EOL] tasks_trigger . delay . assert_called_once_with ( [string] , [string] , [string] , [string] ) [EOL] [EOL] def test_task_works ( self , settings , monkeypatch ) : [EOL] settings . RAPIDPRO_FOLLOWUP_CAMPAIGN_RH = [string] [EOL] settings . RAPIDPRO_API_TOKEN = [string] [EOL] dsfc = MagicMock ( ) [EOL] campaign = MagicMock ( ) [EOL] dsfc . get_campaign . return_value = campaign [EOL] monkeypatch . setattr ( tasks , [string] , dsfc ) [EOL] trigger_followup_campaign_async ( [string] , [string] , [string] , [string] ) [EOL] dsfc . get_campaign . assert_called_once_with ( [string] ) [EOL] campaign . add_contact . assert_called_once ( ) [EOL] assert campaign . add_contact . call_args . args [ [number] : ] == ( [string] , [string] ) [EOL] assert campaign . add_contact . call_args . kwargs == { [string] : [string] } [EOL] [EOL] def test_task_retries_on_api_errors ( self , settings , monkeypatch ) : [EOL] settings . RAPIDPRO_FOLLOWUP_CAMPAIGN_RH = [string] [EOL] settings . RAPIDPRO_API_TOKEN = [string] [EOL] dsfc = MagicMock ( ) [EOL] campaign = MagicMock ( ) [EOL] dsfc . get_campaign . return_value = campaign [EOL] campaign . add_contact . side_effect = TembaHttpError ( [string] ) [EOL] retry = MagicMock ( ) [EOL] [EOL] def fake_retry ( exc ) : [EOL] assert isinstance ( exc , TembaHttpError ) [EOL] raise Retry ( ) [EOL] [EOL] retry . side_effect = fake_retry [EOL] monkeypatch . setattr ( tasks . trigger_followup_campaign , [string] , retry ) [EOL] monkeypatch . setattr ( tasks , [string] , dsfc ) [EOL] with pytest . raises ( Retry ) : [EOL] trigger_followup_campaign_async ( [string] , [string] , [string] , [string] ) [EOL] dsfc . get_campaign . assert_called_once_with ( [string] ) [EOL] campaign . add_contact . assert_called_once ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $rapidpro.followup_campaigns.FollowupCampaign$ 0 0 0 0 0 0 0 0 $rapidpro.followup_campaigns.FollowupCampaign$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $rapidpro.followup_campaigns.FollowupCampaign$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $rapidpro.followup_campaigns.FollowupCampaign$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $rapidpro.followup_campaigns.FollowupCampaign$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $rapidpro.followup_campaigns.FollowupCampaign$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 $unittest.mock.MagicMock$ 0 $unittest.mock.MagicMock$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0 0 $unittest.mock.MagicMock$ 0 0 0 0 0 0 0
import io [EOL] import unittest [EOL] from io import StringIO [EOL] from unittest . mock import MagicMock [EOL] import pytest [EOL] from django . core . management import call_command [EOL] [EOL] from rapidpro . followup_campaigns import FollowupCampaign [EOL] [EOL] [EOL] def call ( ) : [EOL] out = StringIO ( ) [EOL] call_command ( [string] , stdout = out ) [EOL] return out . getvalue ( ) [EOL] [EOL] [EOL] @ pytest . fixture ( autouse = True ) def setup_fixture ( settings , monkeypatch ) : [EOL] settings . RAPIDPRO_API_TOKEN = [string] [EOL] [EOL] [EOL] def test_it_works_when_no_campaigns_are_configured ( ) : [EOL] assert [string] in call ( ) [EOL] [EOL] [EOL] def test_it_validates_campaigns ( settings , monkeypatch ) : [EOL] settings . RAPIDPRO_FOLLOWUP_CAMPAIGN_RH = [string] [EOL] validate = MagicMock ( ) [EOL] monkeypatch . setattr ( FollowupCampaign , [string] , validate ) [EOL] assert [string] in call ( ) [EOL] validate . assert_called_once ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import unittest [EOL] from unittest . mock import MagicMock [EOL] from temba_client . v2 import TembaClient [EOL] import pytest [EOL] [EOL] from rapidpro import rapidpro_util [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] ) , ( [string] , [string] ) , ] ) def test_iso639one2two ( one , two ) : [EOL] assert rapidpro_util . iso639one2two ( one ) == two [EOL] [EOL] [EOL] def test_iso639one2two_works_for_all_project_locales ( ) : [EOL] from project . locales import ALL [EOL] [EOL] for locale , _ in ALL . choices : [EOL] assert len ( rapidpro_util . iso639one2two ( locale ) ) == [number] [EOL] [EOL] [EOL] class TestGetClientFromSettings : [EOL] def test_it_returns_none_when_rapidpro_is_not_configured ( self ) : [EOL] assert rapidpro_util . get_client_from_settings ( ) is None [EOL] [EOL] def test_it_returns_client_when_rapidpro_is_configured ( self , settings ) : [EOL] settings . RAPIDPRO_API_TOKEN = [string] [EOL] assert isinstance ( rapidpro_util . get_client_from_settings ( ) , TembaClient ) [EOL] [EOL] [EOL] def mock_query ( client , query_method_name , first_result ) : [EOL] query = MagicMock ( ) [EOL] query_method = getattr ( client , query_method_name ) [EOL] query_method . return_value = query [EOL] query . first . return_value = first_result [EOL] return query [EOL] [EOL] [EOL] def make_client_mocks ( query_method_name , first_result ) : [EOL] client = MagicMock ( ) [EOL] query = mock_query ( client , query_method_name , first_result ) [EOL] return ( client , query ) [EOL] [EOL] [EOL] class TestGetOrCreateContact : [EOL] def test_it_returns_pre_existing_contacts ( self ) : [EOL] client , contacts = make_client_mocks ( [string] , first_result = [string] ) [EOL] assert rapidpro_util . get_or_create_contact ( client , [string] , [string] , [string] ) == [string] [EOL] client . get_contacts . assert_called_once_with ( urn = [string] ) [EOL] contacts . first . assert_called_once ( ) [EOL] client . create_contact . assert_not_called ( ) [EOL] [EOL] def test_it_creates_contact_when_needed ( self ) : [EOL] client , contacts = make_client_mocks ( [string] , first_result = None ) [EOL] client . create_contact . return_value = [string] [EOL] assert rapidpro_util . get_or_create_contact ( client , [string] , [string] , [string] ) == [string] [EOL] client . get_contacts . assert_called_once_with ( urn = [string] ) [EOL] contacts . first . assert_called_once ( ) [EOL] client . create_contact . assert_called_once_with ( name = [string] , urns = [ [string] ] , language = [string] ) [EOL] [EOL] [EOL] class TestGetField : [EOL] def test_it_raises_exception_if_not_found ( self ) : [EOL] client , _ = make_client_mocks ( [string] , first_result = None ) [EOL] with pytest . raises ( ValueError , match = [string] ) : [EOL] rapidpro_util . get_field ( client , [string] ) [EOL] [EOL] def test_it_returns_field_if_found ( self ) : [EOL] client , _ = make_client_mocks ( [string] , first_result = [string] ) [EOL] assert rapidpro_util . get_field ( client , [string] ) == [string] [EOL] client . get_fields . assert_called_once_with ( key = [string] ) [EOL] [EOL] [EOL] class TestGetGroup : [EOL] def test_it_raises_exception_if_not_found ( self ) : [EOL] client , _ = make_client_mocks ( [string] , first_result = None ) [EOL] with pytest . raises ( ValueError , match = [string] ) : [EOL] rapidpro_util . get_group ( client , [string] ) [EOL] [EOL] def test_it_returns_group_if_found ( self ) : [EOL] client , _ = make_client_mocks ( [string] , first_result = [string] ) [EOL] assert rapidpro_util . get_group ( client , [string] ) == [string] [EOL] client . get_groups . assert_called_once_with ( name = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import unittest [EOL] from unittest . mock import MagicMock [EOL] from django . core . management import call_command , CommandError [EOL] import pytest [EOL] [EOL] from rapidpro . followup_campaigns import DjangoSettingsFollowupCampaigns [EOL] [EOL] [EOL] @ pytest . fixture ( autouse = True ) def setup_fixture ( settings ) : [EOL] settings . RAPIDPRO_API_TOKEN = [string] [EOL] [EOL] [EOL] def test_it_raises_error_if_campaign_is_invalid ( ) : [EOL] with pytest . raises ( CommandError , match = [string] ) : [EOL] call_command ( [string] , [string] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] def test_it_raises_error_if_campaign_is_unconfigured ( ) : [EOL] with pytest . raises ( CommandError , match = [string] ) : [EOL] call_command ( [string] , [string] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] def test_it_works ( settings , monkeypatch ) : [EOL] settings . RAPIDPRO_FOLLOWUP_CAMPAIGN_RH = [string] [EOL] get_campaign = MagicMock ( ) [EOL] campaign = MagicMock ( ) [EOL] get_campaign . return_value = campaign [EOL] monkeypatch . setattr ( DjangoSettingsFollowupCampaigns , [string] , get_campaign ) [EOL] call_command ( [string] , [string] , [string] , [string] , [string] ) [EOL] assert get_campaign . called_once_with ( [string] ) [EOL] assert campaign . add_contact . called_once ( ) [EOL] assert campaign . add_contact . call_args . args [ [number] : ] == ( [string] , [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . CharField ( max_length = [number] , primary_key = True , serialize = False ) ) , ( [string] , models . CharField ( max_length = [number] ) ) , ] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import List , Optional [EOL] import typing [EOL] import builtins [EOL] from typing import Optional [EOL] import pydantic [EOL] [EOL] from . la_zipcodes import LOS_ANGELES_ZIP_CODES [EOL] [EOL] [EOL] [comment] [EOL] VERSION = [string] [EOL] [EOL] [EOL] NYC_CITIES = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] [EOL] class NorentScaffolding ( pydantic . BaseModel ) : [EOL] [docstring] [EOL] [EOL] first_name = [string] [EOL] [EOL] last_name = [string] [EOL] [EOL] [comment] [EOL] street = [string] [EOL] [EOL] city = [string] [EOL] [EOL] [comment] [EOL] state = [string] [EOL] [EOL] zip_code = [string] [EOL] [EOL] apt_number = None [EOL] [EOL] email = [string] [EOL] [EOL] phone_number = [string] [EOL] [EOL] landlord_name = [string] [EOL] [EOL] [comment] [EOL] landlord_primary_line = [string] [EOL] [EOL] landlord_city = [string] [EOL] [EOL] landlord_state = [string] [EOL] [EOL] landlord_zip_code = [string] [EOL] [EOL] landlord_email = [string] [EOL] [EOL] landlord_phone_number = [string] [EOL] [EOL] has_landlord_email_address = None [EOL] [EOL] has_landlord_mailing_address = None [EOL] [EOL] can_receive_rttc_comms = None [EOL] [EOL] def is_city_in_nyc ( self ) : [EOL] if not ( self . state and self . city ) : [EOL] return None [EOL] return self . state == [string] and self . city . lower ( ) in NYC_CITIES [EOL] [EOL] def is_zip_code_in_la ( self ) : [EOL] if not self . zip_code : [EOL] return None [EOL] return self . zip_code in LOS_ANGELES_ZIP_CODES [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Set [EOL] import typing [EOL] LOS_ANGELES_ZIP_CODES = set ( [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] ) [EOL]	0 0 0 0 0 0 0 0 $typing.Set[builtins.str
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class NorentConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
	0
	0
	0
from typing import Any , List [EOL] import typing [EOL] import builtins [EOL] from typing import NamedTuple , List [EOL] from django . contrib . auth . models import Permission [EOL] [EOL] [EOL] class ModelPermissions ( NamedTuple ) : [EOL] [docstring] [EOL] [EOL] app = ... [EOL] model = ... [EOL] [EOL] def _prefix ( self , prefix ) : [EOL] return f"{ self . app } [string] { prefix } [string] { self . model }" [EOL] [EOL] @ property def add ( self ) : [EOL] return self . _prefix ( [string] ) [EOL] [EOL] @ property def change ( self ) : [EOL] return self . _prefix ( [string] ) [EOL] [EOL] @ property def delete ( self ) : [EOL] return self . _prefix ( [string] ) [EOL] [EOL] @ property def view ( self ) : [EOL] return self . _prefix ( [string] ) [EOL] [EOL] @ property def all ( self ) : [EOL] return [ self . add , self . change , self . delete ] [EOL] [EOL] def only ( self , add = False , change = False , delete = False ) : [EOL] result = [ ] [EOL] if add : [EOL] result . append ( self . add ) [EOL] if change : [EOL] result . append ( self . change ) [EOL] if delete : [EOL] result . append ( self . delete ) [EOL] return result [EOL] [EOL] [EOL] def get_permissions_from_ns_codenames ( ns_codenames ) : [EOL] [docstring] [EOL] [EOL] splitnames = [ ns_codename . split ( [string] ) for ns_codename in ns_codenames ] [EOL] return [ Permission . objects . get ( codename = codename , content_type__app_label = app_label ) for app_label , codename in splitnames ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.bool$ 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.bool$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations , models [EOL] from project . util import phone_number [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterField ( model_name = [string] , name = [string] , field = models . CharField ( help_text = [string] , max_length = [number] , unique = True , validators = [ phone_number . validate_phone_number ] , verbose_name = [string] ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import io [EOL] from io import StringIO [EOL] from django . core . management import call_command [EOL] [EOL] [EOL] GROUP_DOES_NOT_EXIST_SENTINEL = [string] [EOL] [EOL] [EOL] def test_initgroups_works ( db ) : [EOL] out = StringIO ( ) [EOL] call_command ( [string] , stdout = out ) [EOL] assert GROUP_DOES_NOT_EXIST_SENTINEL in out . getvalue ( ) [EOL] [EOL] out = StringIO ( ) [EOL] call_command ( [string] , stdout = out ) [EOL] assert GROUP_DOES_NOT_EXIST_SENTINEL not in out . getvalue ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0
	0
from typing import Any , List [EOL] import typing [EOL] from django . urls import path [EOL] [EOL] from . import views [EOL] [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ path ( [string] , views . download_multi_landlord_csv , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Iterator , Optional , Any , List [EOL] import typing [EOL] import django [EOL] import pathlib [EOL] import logging [EOL] import builtins [EOL] from typing import List , Iterator , Any , Tuple , Optional [EOL] import itertools [EOL] import logging [EOL] from pathlib import Path [EOL] from django . db import connections [EOL] from django . db . utils import ProgrammingError [EOL] from django . conf import settings [EOL] [EOL] from project . util . streaming_csv import generate_csv_rows [EOL] [EOL] [EOL] MY_DIR = Path ( __file__ ) . parent . resolve ( ) [EOL] [EOL] MULTI_LANDLORD_SQL = MY_DIR / [string] [EOL] [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def split_into_list ( value ) : [EOL] [docstring] [EOL] [EOL] items = value . split ( [string] ) [EOL] return list ( filter ( None , [ item . strip ( ) for item in items ] ) ) [EOL] [EOL] [EOL] def parse_landlord ( name ) : [EOL] [docstring] [EOL] [EOL] parts = name . rsplit ( [string] , [number] ) [EOL] if len ( parts ) != [number] : [EOL] return None [EOL] firstname , lastname = parts [EOL] return ( firstname , lastname ) [EOL] [EOL] [EOL] def make_error_rows ( lines ) : [EOL] return iter ( [ [ [string] ] , * [ [ line ] for line in lines ] ] ) [EOL] [EOL] [EOL] def get_sql_error_rows ( e ) : [EOL] [docstring] [EOL] [EOL] if settings . DEBUG : [EOL] lines = str ( e ) . split ( [string] ) [EOL] else : [EOL] lines = [ [string] ] [EOL] return make_error_rows ( lines ) [EOL] [EOL] [EOL] def _multi_landlord_query ( ll_list , db ) : [EOL] full_sql = MULTI_LANDLORD_SQL . read_text ( ) % { [string] : [string] . join ( [ [string] ] * len ( ll_list ) ) } [EOL] args = list ( itertools . chain ( * ll_list ) ) [EOL] with connections [ db ] . cursor ( ) as cursor : [EOL] try : [EOL] cursor . execute ( full_sql , args ) [EOL] except ProgrammingError as e : [EOL] logger . exception ( [string] ) [EOL] yield from get_sql_error_rows ( e ) [EOL] return [EOL] yield from generate_csv_rows ( cursor ) [EOL] [EOL] [EOL] def get_csv_rows_for_multi_landlord_query ( landlords ) : [EOL] ll_list = list ( filter ( None , [ parse_landlord ( ll ) for ll in split_into_list ( landlords ) ] ) ) [EOL] if not ll_list : [EOL] return iter ( [ ] ) [EOL] if not settings . WOW_DATABASE : [EOL] return make_error_rows ( [ [string] ] ) [EOL] return _multi_landlord_query ( ll_list , settings . WOW_DATABASE ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[typing.List[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[typing.List[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[typing.List[typing.Any]]$ 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[typing.List[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Iterator , Optional , Any , Type , List [EOL] import data_requests [EOL] import typing [EOL] import builtins [EOL] from typing import Optional , Iterator , List , Any [EOL] import csv [EOL] import json [EOL] import itertools [EOL] import urllib . parse [EOL] import graphene [EOL] from django . urls import reverse [EOL] [EOL] from project import schema_registry [EOL] from project . util . streaming_csv import generate_streaming_csv [EOL] from . import db_queries [EOL] [EOL] [EOL] SNIPPET_MAX_ROWS = [number] [EOL] [EOL] [EOL] class DataRequestResult ( graphene . ObjectType ) : [EOL] csv_url = graphene . String ( required = True ) [EOL] snippet_rows = graphene . String ( required = True ) [EOL] snippet_max_rows = graphene . Int ( required = True ) [EOL] [EOL] [EOL] def get_csv_snippet ( rows ) : [EOL] return [string] . join ( list ( generate_streaming_csv ( itertools . islice ( rows , [number] , SNIPPET_MAX_ROWS + [number] ) ) ) ) [EOL] [EOL] [EOL] def resolve_multi_landlord ( root , info , landlords ) : [EOL] snippet = get_csv_snippet ( db_queries . get_csv_rows_for_multi_landlord_query ( landlords ) ) [EOL] snippet_rows = list ( filter ( None , list ( csv . reader ( snippet . split ( [string] ) ) ) ) ) [EOL] if len ( snippet_rows ) <= [number] : [EOL] [comment] [EOL] return None [EOL] return DataRequestResult ( csv_url = ( reverse ( [string] ) + f' [string] { urllib . parse . quote ( landlords ) }' ) , snippet_rows = json . dumps ( snippet_rows ) , snippet_max_rows = SNIPPET_MAX_ROWS ) [EOL] [EOL] [EOL] @ schema_registry . register_queries class DataRequestQuery : [EOL] data_request_multi_landlord = graphene . Field ( DataRequestResult , landlords = graphene . String ( ) , resolver = resolve_multi_landlord ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[data_requests.schema.DataRequestResult]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[data_requests.schema.DataRequestResult]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[data_requests.schema.DataRequestResult]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[DataRequestResult]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[data_requests.schema.DataRequestQuery]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Iterator , List [EOL] import typing [EOL] from project . util . streaming_csv import streaming_csv_response [EOL] from . import db_queries [EOL] [EOL] [EOL] def download_multi_landlord_csv ( request ) : [EOL] rows = db_queries . get_csv_rows_for_multi_landlord_query ( request . GET . get ( [string] , [string] ) ) [EOL] return streaming_csv_response ( rows , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class DataRequestsConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Any [EOL] import typing [EOL] def test_it_does_not_explode ( client ) : [EOL] res = client . get ( [string] ) [EOL] data = [string] . join ( res . streaming_content ) . decode ( [string] ) [EOL] assert data == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] from data_requests import db_queries [EOL] [EOL] [EOL] def test_it_returns_sql_errors ( db ) : [EOL] [comment] [EOL] result = list ( db_queries . _multi_landlord_query ( [ ( [string] , [string] ) ] , [string] ) ) [EOL] assert result == [ [ [string] ] , [ [string] ] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from data_requests import schema [EOL] [EOL] [EOL] def test_it_returns_none_on_empty_query ( ) : [EOL] assert schema . resolve_multi_landlord ( None , None , [string] ) is None [EOL] [EOL] [EOL] def test_it_returns_errors ( graphql_client ) : [EOL] res = graphql_client . execute ( [string] ) [ [string] ] [ [string] ] [EOL] [EOL] assert res == { [string] : [string] , [string] : [string] , [string] : [number] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import builtins [EOL] from django . conf import settings [EOL] from django . core . mail import send_mail [EOL] [EOL] [EOL] def send_email_to_dhcr ( subject , body ) : [EOL] send_mail ( subject , body , settings . DHCR_EMAIL_SENDER_ADDRESS , settings . DHCR_EMAIL_RECIPIENT_ADDRESSES , fail_silently = False , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class FindhelpConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Tuple , Any , Dict , Optional [EOL] import typing [EOL] import builtins [EOL] import django [EOL] import json [EOL] from typing import Optional , Any , Dict [EOL] from django . conf import settings [EOL] from django . contrib . gis . geos import Point , MultiPolygon [EOL] from django . template . loader import render_to_string [EOL] from django . contrib . admin import ModelAdmin [EOL] from django . utils import html [EOL] [EOL] from project . util . admin_util import admin_field [EOL] [EOL] [EOL] [comment] [EOL] ADMIN_MAP_PREFIX = [string] [EOL] [EOL] [EOL] def render_admin_map ( id , area = None , point = None , point_label = None , ) : [EOL] [docstring] [EOL] [EOL] if not settings . MAPBOX_ACCESS_TOKEN : [EOL] return [string] [EOL] [EOL] if not ( area or point ) : [EOL] return [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] json_params = { [string] : settings . MAPBOX_ACCESS_TOKEN , [string] : settings . MAPBOX_TILES_ORIGIN , [string] : [number] , [string] : area and json . loads ( area . geojson ) , [string] : point and json . loads ( point . geojson ) , [string] : html . escape ( point_label ) } [EOL] [EOL] return render_to_string ( [string] , { [string] : json_params , [string] : ADMIN_MAP_PREFIX + id } ) [EOL] [EOL] [EOL] def admin_map_field ( area_attr , short_description ) : [EOL] [docstring] [EOL] [EOL] @ admin_field ( allow_tags = True , short_description = short_description ) def field ( self , obj ) : [EOL] return render_admin_map ( id = area_attr , area = getattr ( obj , area_attr ) ) [EOL] [EOL] return field [EOL] [EOL] [EOL] class MapModelAdmin ( ModelAdmin ) : [EOL] [docstring] [EOL] [EOL] class Media : [EOL] css = { [string] : ( [string] , [string] ) } [EOL] js = ( [string] , [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0
from typing import Tuple , Iterator , Optional , Any , Union , Dict , Type , List [EOL] import typing [EOL] import itertools [EOL] import project [EOL] import django [EOL] import findhelp [EOL] import builtins [EOL] import itertools [EOL] from typing import Union , Iterator , Optional [EOL] from django . contrib . gis . db import models [EOL] from django . contrib . gis . geos import GEOSGeometry , Point , Polygon , MultiPolygon [EOL] from django . contrib . gis . db . models . functions import Distance [EOL] [EOL] from project import geocoding [EOL] from project . common_data import Choices [EOL] from project . util import phone_number as pn [EOL] [EOL] [EOL] ORG_TYPE_CHOICES = Choices . from_file ( [string] ) [EOL] [EOL] [EOL] def to_multipolygon ( geos_geom ) : [EOL] if isinstance ( geos_geom , Polygon ) : [EOL] return MultiPolygon ( geos_geom ) [EOL] assert isinstance ( geos_geom , MultiPolygon ) [EOL] return geos_geom [EOL] [EOL] [EOL] def union_geometries ( geometries ) : [EOL] total_area = GEOSGeometry ( [string] , srid = [number] ) [EOL] for geom in geometries : [EOL] total_area = total_area . union ( geom ) [EOL] if isinstance ( total_area , Point ) : [EOL] return None [EOL] return to_multipolygon ( total_area ) [EOL] [EOL] [EOL] class IgnoreFindhelpMigrationsRouter : [EOL] [docstring] [EOL] [EOL] def allow_migrate ( self , db , app_label , model_name = None , ** hints ) : [EOL] if app_label == [string] : [EOL] return False [EOL] [comment] [EOL] [comment] [EOL] return None [EOL] [EOL] [EOL] class Zipcode ( models . Model ) : [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] [EOL] zipcode = models . CharField ( max_length = [number] , primary_key = True ) [EOL] geom = models . MultiPolygonField ( srid = [number] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . zipcode [EOL] [EOL] [EOL] class Borough ( models . Model ) : [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] [EOL] code = models . IntegerField ( primary_key = True ) [EOL] name = models . CharField ( max_length = [number] , unique = True ) [EOL] geom = models . MultiPolygonField ( srid = [number] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] [EOL] class Neighborhood ( models . Model ) : [EOL] class Meta : [EOL] ordering = [ [string] , [string] ] [EOL] unique_together = ( [string] , [string] ) [EOL] [EOL] name = models . CharField ( max_length = [number] ) [EOL] county = models . CharField ( max_length = [number] ) [EOL] geom = models . MultiPolygonField ( srid = [number] ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f"{ self . name } [string] { self . county } [string] " [EOL] [EOL] [EOL] class CommunityDistrict ( models . Model ) : [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] [EOL] boro_cd = models . CharField ( max_length = [number] , primary_key = True ) [EOL] name = models . CharField ( max_length = [number] ) [EOL] geom = models . MultiPolygonField ( srid = [number] ) [EOL] [EOL] BOROUGHS = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] [comment] [EOL] JOINT_INTEREST_AREAS = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] @ classmethod def boro_cd_to_name ( cls , boro_cd ) : [EOL] borough = cls . BOROUGHS [ boro_cd [ [number] ] ] [EOL] num = int ( boro_cd [ [number] : ] ) [EOL] jia = cls . JOINT_INTEREST_AREAS . get ( boro_cd ) [EOL] if jia : [EOL] return f'{ borough } [string] { num } [string] { jia } [string] ' [EOL] return f'{ borough } [string] { num }' [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] [EOL] class TenantResourceManager ( models . Manager ) : [EOL] def find_best_for ( self , latitude , longitude ) : [EOL] origin = Point ( longitude , latitude , srid = [number] ) [EOL] return self . filter ( catchment_area__contains = Point ( longitude , latitude ) , ) . annotate ( distance = Distance ( [string] , origin ) ) . order_by ( [string] ) [EOL] [EOL] [EOL] class TenantResource ( models . Model ) : [EOL] name = models . CharField ( max_length = [number] , help_text = [string] ) [EOL] website = models . URLField ( blank = True , help_text = [string] ) [EOL] phone_number = models . CharField ( [string] , blank = True , ** pn . get_model_field_kwargs ( ) , ) [EOL] description = models . TextField ( blank = True , help_text = [string] ) [EOL] org_type = models . CharField ( max_length = [number] , blank = True , choices = ORG_TYPE_CHOICES . choices , help_text = [string] ) [EOL] address = models . TextField ( help_text = [string] ) [EOL] zipcodes = models . ManyToManyField ( Zipcode , blank = True ) [EOL] boroughs = models . ManyToManyField ( Borough , blank = True ) [EOL] neighborhoods = models . ManyToManyField ( Neighborhood , blank = True ) [EOL] community_districts = models . ManyToManyField ( CommunityDistrict , blank = True ) [EOL] [EOL] geocoded_address = models . TextField ( blank = True , help_text = ( [string] [string] [string] [string] [string] ) ) [EOL] geocoded_point = models . PointField ( null = True , blank = True , srid = [number] ) [EOL] catchment_area = models . MultiPolygonField ( null = True , blank = True , srid = [number] ) [EOL] [EOL] objects = TenantResourceManager ( ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] def update_geocoded_info ( self ) : [EOL] results = geocoding . search ( self . address ) [EOL] if results : [EOL] result = results [ [number] ] [EOL] self . geocoded_address = result . properties . label [EOL] longitude , latitude = result . geometry . coordinates [EOL] self . geocoded_point = Point ( longitude , latitude ) [EOL] else : [EOL] self . geocoded_address = [string] [EOL] self . geocoded_point = None [EOL] [EOL] def iter_geometries ( self ) : [EOL] regions = itertools . chain ( self . zipcodes . all ( ) , self . boroughs . all ( ) , self . neighborhoods . all ( ) , self . community_districts . all ( ) , ) [EOL] for region in regions : [EOL] yield region . geom [EOL] [EOL] def update_catchment_area ( self ) : [EOL] self . catchment_area = union_geometries ( self . iter_geometries ( ) ) [EOL] [EOL] def save ( self , * args , ** kwargs ) : [EOL] if self . address != self . geocoded_address or not self . geocoded_point : [EOL] self . update_geocoded_info ( ) [EOL] super ( ) . save ( * args , ** kwargs ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $django.contrib.gis.geos.MultiPolygon$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[django.contrib.gis.geos.MultiPolygon]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.Type[findhelp.models.Zipcode]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[findhelp.models.Zipcode]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.Type[findhelp.models.Borough]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[findhelp.models.Borough]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[findhelp.models.Borough]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Type[findhelp.models.Neighborhood]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[findhelp.models.Neighborhood]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[findhelp.models.Neighborhood]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.Type[findhelp.models.CommunityDistrict]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[findhelp.models.CommunityDistrict]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[findhelp.models.CommunityDistrict]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[findhelp.models.TenantResource]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[findhelp.models.TenantResource]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[findhelp.models.TenantResource]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[findhelp.models.TenantResource]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[findhelp.models.TenantResource]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Type[findhelp.models.TenantResource]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[findhelp.models.TenantResource]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[findhelp.models.TenantResource]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[findhelp.models.TenantResource]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[findhelp.models.TenantResource]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[findhelp.models.TenantResource]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[findhelp.models.TenantResource]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[findhelp.models.TenantResource]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $findhelp.models.TenantResourceManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $project.geocoding.Feature$ 0 0 0 0 0 0 0 0 0 0 0 $project.geocoding.Feature$ 0 0 $project.geocoding.Feature$ 0 $project.geocoding.Feature$ 0 0 0 0 0 0 0 0 $project.geocoding.Feature$ 0 0 0 0 0 0 0 0 0 $project.geocoding.Feature$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[django.contrib.gis.geos.MultiPolygon]$ 0 0 0 0 0 $itertools.chain[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $itertools.chain[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Dict , Any , Set , List [EOL] import pathlib [EOL] import typing [EOL] import builtins [EOL] from pathlib import Path [EOL] from collections import defaultdict [EOL] from typing import Dict , List , Set , Any [EOL] from django . db import transaction [EOL] from django . core . management . base import BaseCommand [EOL] from django . contrib . gis . gdal import DataSource [EOL] [EOL] from findhelp import models [EOL] from findhelp . models import ( Zipcode , Borough , Neighborhood , CommunityDistrict , to_multipolygon ) [EOL] [EOL] [EOL] DATA_DIR = Path ( models . __file__ ) . parent . resolve ( ) / [string] [EOL] ZIPCODE_SHAPEFILE = DATA_DIR / [string] / [string] [EOL] BOROUGH_SHAPEFILE = DATA_DIR / [string] [EOL] NEIGHBORHOOD_SHAPEFILE = DATA_DIR / [string] / [string] [EOL] COMMUNITY_DISTRICT_SHAPEFILE = DATA_DIR / [string] [EOL] [EOL] [EOL] def get_or_construct ( model , ** kwargs ) : [EOL] instance = model . objects . filter ( ** kwargs ) . first ( ) [EOL] if instance is None : [EOL] instance = model ( ** kwargs ) [EOL] return instance [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] @ transaction . atomic def handle ( self , * args , ** options ) : [EOL] self . load_zipcodes ( ) [EOL] self . load_neighborhoods ( ) [EOL] self . load_community_districts ( ) [EOL] self . load_boroughs ( ) [EOL] [EOL] def load_community_districts ( self ) : [EOL] ds = DataSource ( str ( COMMUNITY_DISTRICT_SHAPEFILE ) ) [EOL] layer = ds [ [number] ] [EOL] for feature in layer : [EOL] boro_cd = str ( feature [ [string] ] ) [EOL] name = CommunityDistrict . boro_cd_to_name ( boro_cd ) [EOL] instance = get_or_construct ( CommunityDistrict , boro_cd = boro_cd ) [EOL] geom = feature . geom [EOL] geom . transform ( [number] ) [EOL] instance . geom = to_multipolygon ( geom . geos ) [EOL] instance . name = name [EOL] print ( f" [string] { instance . name } [string] " ) [EOL] instance . save ( ) [EOL] [EOL] def load_neighborhoods ( self ) : [EOL] ds = DataSource ( str ( NEIGHBORHOOD_SHAPEFILE ) ) [EOL] layer = ds [ [number] ] [EOL] nyc_features = [ feature for feature in layer if str ( feature [ [string] ] ) == [string] ] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] region_counties = defaultdict ( list ) [EOL] for feature in nyc_features : [EOL] region = str ( feature [ [string] ] ) [EOL] region_counties [ region ] . append ( str ( feature [ [string] ] ) ) [EOL] regions = set ( ) [EOL] for feature in nyc_features : [EOL] region = str ( feature [ [string] ] ) [EOL] if region in regions : [EOL] continue [EOL] regions . add ( region ) [EOL] name = str ( feature [ [string] ] ) [EOL] county = [string] . join ( region_counties [ region ] ) [EOL] instance = get_or_construct ( Neighborhood , name = name , county = county ) [EOL] geom = feature . geom [EOL] geom . transform ( [number] ) [EOL] instance . geom = to_multipolygon ( geom . geos ) [EOL] print ( f" [string] { instance } [string] " ) [EOL] instance . save ( ) [EOL] [EOL] def load_boroughs ( self ) : [EOL] ds = DataSource ( str ( BOROUGH_SHAPEFILE ) ) [EOL] layer = ds [ [number] ] [EOL] for feature in layer : [EOL] code = int ( str ( feature [ [string] ] ) ) [EOL] name = str ( feature [ [string] ] ) [EOL] geom = feature . geom [EOL] geom . transform ( [number] ) [EOL] instance = get_or_construct ( Borough , code = code ) [EOL] instance . name = name [EOL] instance . geom = geom . geos [EOL] print ( f" [string] { name } [string] " ) [EOL] instance . save ( ) [EOL] [EOL] def load_zipcodes ( self ) : [EOL] ds = DataSource ( str ( ZIPCODE_SHAPEFILE ) ) [EOL] layer = ds [ [number] ] [EOL] zipcodes = { } [EOL] for feature in layer : [EOL] zipcode = str ( feature [ [string] ] ) [EOL] geom = feature . geom [EOL] geom . transform ( [number] ) [EOL] if zipcode in zipcodes : [EOL] zipcodes [ zipcode ] = zipcodes [ zipcode ] . union ( geom . geos ) [EOL] else : [EOL] zipcodes [ zipcode ] = geom . geos [EOL] for zipcode , geos_geom in zipcodes . items ( ) : [EOL] print ( f" [string] { zipcode } [string] " ) [EOL] instance = get_or_construct ( Zipcode , zipcode = zipcode ) [EOL] instance . geom = to_multipolygon ( geos_geom ) [EOL] instance . save ( ) [EOL] [EOL] print ( f" [string] { len ( zipcodes ) } [string] { len ( layer ) } [string] " ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $pathlib.Path$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $pathlib.Path$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 $typing.Set[builtins.str]$ 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 $typing.Set[builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 $typing.Set[builtins.str]$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $pathlib.Path$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $pathlib.Path$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 $typing.Any$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
from typing import Dict , Any , Set , List [EOL] import findhelp [EOL] import pathlib [EOL] import typing [EOL] import builtins [EOL] import json [EOL] from pathlib import Path [EOL] from typing import List [EOL] from django . core . management . base import BaseCommand [EOL] from django . db import transaction [EOL] from django . contrib . gis . geos import Point [EOL] [EOL] from findhelp . models import ( ORG_TYPE_CHOICES as ORG_TYPES , Zipcode , CommunityDistrict , Borough , Neighborhood , TenantResource , ) [EOL] [EOL] [EOL] DATA_DIR = Path ( __file__ ) . parent . parent . parent . resolve ( ) / [string] [EOL] [EOL] NYC_CBOS_GEOJSON = DATA_DIR / [string] [EOL] [EOL] ORG_TYPES_MAP = { [string] : ORG_TYPES . COMMUNITY , [string] : ORG_TYPES . GOVERNMENT , [string] : ORG_TYPES . LEGAL } [EOL] [EOL] [EOL] BOROUGH = [string] [EOL] NEIGHBORHOOD = [string] [EOL] COUNCIL = [string] [EOL] ZIPCODE = [string] [EOL] COMMUNITY_BOARD = [string] [EOL] SERVICE_AREA_TYPES = set ( [ BOROUGH , NEIGHBORHOOD , COUNCIL , ZIPCODE , COMMUNITY_BOARD ] ) [EOL] [EOL] [EOL] def strip_csv ( val ) : [EOL] return [ item . strip ( ) for item in val . split ( [string] ) ] [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = ( [string] [string] ) [EOL] [EOL] @ transaction . atomic def handle ( self , * args , ** options ) : [EOL] geojson = json . load ( NYC_CBOS_GEOJSON . open ( encoding = [string] ) ) [EOL] for feature in geojson [ [string] ] : [EOL] props = feature [ [string] ] [EOL] satype = props [ [string] ] [EOL] assert satype in SERVICE_AREA_TYPES [EOL] [EOL] if satype == COUNCIL : [EOL] [comment] [EOL] continue [EOL] [EOL] name = props [ [string] ] [EOL] print ( f" [string] { name } [string] " ) [EOL] [EOL] org_type = props [ [string] ] [EOL] address = props [ [string] ] [EOL] phone_number = str ( props [ [string] ] ) [EOL] longitude , latitude = feature [ [string] ] [ [string] ] [EOL] geocoded_point = Point ( longitude , latitude ) [EOL] if org_type != [string] : [EOL] org_type = ORG_TYPES_MAP [ org_type ] [EOL] tr = TenantResource ( name = name , website = props [ [string] ] , phone_number = phone_number , description = props [ [string] ] , org_type = org_type , address = address , geocoded_address = address , geocoded_point = geocoded_point ) [EOL] tr . full_clean ( ) [EOL] tr . save ( ) [EOL] [EOL] if satype == BOROUGH : [EOL] borough = Borough . objects . get ( name__iexact = props [ [string] ] ) [EOL] tr . boroughs . set ( [ borough ] ) [EOL] elif satype == NEIGHBORHOOD : [EOL] hoods = [ ] [EOL] for hood in strip_csv ( props [ [string] ] ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if hood == [string] : [EOL] hood = [string] [EOL] [comment] [EOL] [comment] [EOL] if hood == [string] : [EOL] hood = [string] [EOL] [comment] [EOL] [comment] [EOL] if hood == [string] : [EOL] hood = [string] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if hood == [string] : [EOL] hood = [string] [EOL] [comment] [EOL] [comment] [EOL] if hood == [string] : [EOL] hood = [string] [EOL] if hood == [string] : [EOL] hood = [string] [EOL] if hood == [string] : [EOL] hood = [string] [EOL] if hood == [string] : [EOL] [comment] [EOL] [comment] [EOL] hoods . append ( Neighborhood . objects . get ( name = [string] , county = [string] ) ) [EOL] else : [EOL] hoods . append ( Neighborhood . objects . get ( name__iexact = hood ) ) [EOL] tr . neighborhoods . set ( hoods ) [EOL] elif satype == ZIPCODE : [EOL] zipcodes = [ ] [EOL] for zipcode in strip_csv ( props [ [string] ] ) : [EOL] assert len ( zipcode ) == [number] [EOL] zipcodes . append ( Zipcode . objects . get ( zipcode = zipcode ) ) [EOL] tr . zipcodes . set ( zipcodes ) [EOL] else : [EOL] assert satype == COMMUNITY_BOARD [EOL] borough = Borough . objects . get ( name__iexact = props [ [string] ] ) [EOL] cbs = [ ] [EOL] for cb in strip_csv ( props [ [string] ] ) : [EOL] boro_cd = f"{ borough . code }{ cb . zfill ( [number] ) }" [EOL] cbs . append ( CommunityDistrict . objects . get ( boro_cd = boro_cd ) ) [EOL] tr . community_districts . set ( cbs ) [EOL] [EOL] tr . update_catchment_area ( ) [EOL] tr . save ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Set[builtins.str]$ 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $findhelp.models.TenantResource$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 $findhelp.models.TenantResource$ 0 0 0 0 0 $findhelp.models.TenantResource$ 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $findhelp.models.TenantResource$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $findhelp.models.TenantResource$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 $typing.List[findhelp.models.Zipcode]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[findhelp.models.Zipcode]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $findhelp.models.TenantResource$ 0 $typing.List[findhelp.models.Zipcode]$ 0 0 0 $typing.List[findhelp.models.Zipcode]$ 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[findhelp.models.CommunityDistrict]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[findhelp.models.CommunityDistrict]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $findhelp.models.TenantResource$ 0 0 0 0 0 $typing.List[findhelp.models.CommunityDistrict]$ 0 0 0 $findhelp.models.TenantResource$ 0 0 0 0 0 $findhelp.models.TenantResource$ 0 0 0 0 0
	0
[comment] [EOL] [EOL] import django . contrib . gis . db . models . fields [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] initial = True [EOL] [EOL] dependencies = [ ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . IntegerField ( primary_key = True , serialize = False ) ) , ( [string] , models . CharField ( max_length = [number] , unique = True ) ) , ( [string] , django . contrib . gis . db . models . fields . MultiPolygonField ( srid = [number] ) ) , ] , options = { [string] : [ [string] ] , } , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . CharField ( max_length = [number] , primary_key = True , serialize = False ) ) , ( [string] , models . CharField ( max_length = [number] ) ) , ( [string] , django . contrib . gis . db . models . fields . MultiPolygonField ( srid = [number] ) ) , ] , options = { [string] : [ [string] ] , } , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . CharField ( max_length = [number] ) ) , ( [string] , models . CharField ( max_length = [number] ) ) , ( [string] , django . contrib . gis . db . models . fields . MultiPolygonField ( srid = [number] ) ) , ] , options = { [string] : [ [string] , [string] ] , } , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . CharField ( max_length = [number] ) ) , ( [string] , models . TextField ( ) ) , ( [string] , models . TextField ( blank = True ) ) , ( [string] , django . contrib . gis . db . models . fields . PointField ( blank = True , null = True , srid = [number] ) ) , ( [string] , django . contrib . gis . db . models . fields . MultiPolygonField ( blank = True , null = True , srid = [number] ) ) , ( [string] , models . ManyToManyField ( blank = True , to = [string] ) ) , ( [string] , models . ManyToManyField ( blank = True , to = [string] ) ) , ( [string] , models . ManyToManyField ( blank = True , to = [string] ) ) , ] , ) , migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . CharField ( max_length = [number] , primary_key = True , serialize = False ) ) , ( [string] , django . contrib . gis . db . models . fields . MultiPolygonField ( srid = [number] ) ) , ] , options = { [string] : [ [string] ] , } , ) , migrations . AddField ( model_name = [string] , name = [string] , field = models . ManyToManyField ( blank = True , to = [string] ) , ) , migrations . AlterUniqueTogether ( name = [string] , unique_together = { ( [string] , [string] ) } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] [EOL] from . test_models import create_sample_tenant_resources [EOL] [EOL] [EOL] class TestTenantResources : [EOL] @ pytest . fixture ( autouse = True ) def setup ( self , graphql_client ) : [EOL] self . graphql_client = graphql_client [EOL] [EOL] def query ( self , latitude , longitude ) : [EOL] return self . graphql_client . execute ( [string] , variables = { [string] : latitude , [string] : longitude } ) [ [string] ] [ [string] ] [EOL] [EOL] def test_it_works ( self , db , fake_geocoder ) : [EOL] create_sample_tenant_resources ( db , fake_geocoder ) [EOL] results = self . query ( [number] , [number] ) [EOL] assert len ( results ) == [number] [EOL] assert results [ [number] ] == { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [string] } [EOL] assert results [ [number] ] [ [string] ] == [string] [EOL] assert int ( results [ [number] ] [ [string] ] ) == [number] [EOL] [EOL] def test_it_returns_none_if_findhelp_is_disabled ( self , simulate_findhelp_disabled ) : [EOL] assert self . query ( [number] , [number] ) is None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import findhelp [EOL] import typing [EOL] from findhelp . models import ( to_multipolygon , union_geometries , IgnoreFindhelpMigrationsRouter , Zipcode , Borough , Neighborhood , CommunityDistrict , TenantResource ) [EOL] from django . contrib . gis . geos import Polygon , MultiPolygon [EOL] [EOL] [EOL] POLY_1 = Polygon . from_bbox ( ( [number] , [number] , [number] , [number] ) ) [EOL] POLY_2 = Polygon . from_bbox ( ( [number] , [number] , [number] , [number] ) ) [EOL] [EOL] [EOL] def create_zipcode ( zipcode = [string] , geom = POLY_1 ) : [EOL] zc = Zipcode ( zipcode = zipcode , geom = to_multipolygon ( geom ) ) [EOL] zc . save ( ) [EOL] return zc [EOL] [EOL] [EOL] def create_borough ( code = [number] , name = [string] , geom = POLY_1 ) : [EOL] borough = Borough ( code = code , name = name , geom = to_multipolygon ( geom ) ) [EOL] borough . save ( ) [EOL] return borough [EOL] [EOL] [EOL] def create_neighborhood ( name = [string] , county = [string] , geom = POLY_1 ) : [EOL] neighborhood = Neighborhood ( name = name , county = county , geom = to_multipolygon ( geom ) ) [EOL] neighborhood . save ( ) [EOL] return neighborhood [EOL] [EOL] [EOL] def create_cd ( boro_cd = [string] , name = [string] , geom = POLY_1 ) : [EOL] cd = CommunityDistrict ( boro_cd = boro_cd , name = name , geom = to_multipolygon ( geom ) ) [EOL] cd . save ( ) [EOL] return cd [EOL] [EOL] [EOL] def create_tenant_resource ( name = [string] , address = [string] , ** kwargs ) : [EOL] zipcodes = kwargs . pop ( [string] , [ ] ) [EOL] boroughs = kwargs . pop ( [string] , [ ] ) [EOL] neighborhoods = kwargs . pop ( [string] , [ ] ) [EOL] cds = kwargs . pop ( [string] , [ ] ) [EOL] tr = TenantResource ( name = name , address = address , ** kwargs ) [EOL] tr . save ( ) [EOL] update = False [EOL] if zipcodes : [EOL] tr . zipcodes . set ( zipcodes ) [EOL] update = True [EOL] if boroughs : [EOL] tr . boroughs . set ( boroughs ) [EOL] update = True [EOL] if neighborhoods : [EOL] tr . neighborhoods . set ( neighborhoods ) [EOL] update = True [EOL] if cds : [EOL] tr . community_districts . set ( cds ) [EOL] update = True [EOL] if update : [EOL] tr . update_catchment_area ( ) [EOL] tr . save ( ) [EOL] return tr [EOL] [EOL] [EOL] def create_sample_tenant_resources ( db , fake_geocoder ) : [EOL] zc1 = create_zipcode ( zipcode = [string] , geom = POLY_1 ) [EOL] zc2 = create_zipcode ( zipcode = [string] , geom = POLY_2 ) [EOL] [EOL] fake_geocoder . register ( [string] , [number] , [number] ) [EOL] fake_geocoder . register ( [string] , [number] , [number] ) [EOL] fake_geocoder . register ( [string] , [number] , [number] ) [EOL] [EOL] create_tenant_resource ( [string] , [string] , zipcodes = [ zc1 ] ) [EOL] create_tenant_resource ( [string] , [string] , zipcodes = [ zc2 ] ) [EOL] create_tenant_resource ( [string] , [string] , zipcodes = [ zc1 ] ) [EOL] [EOL] [EOL] def test_to_multipolygon_converts_polygons ( ) : [EOL] p = POLY_1 [EOL] mp = to_multipolygon ( p ) [EOL] assert isinstance ( mp , MultiPolygon ) [EOL] assert mp [ [number] ] == p [EOL] [EOL] [EOL] def test_to_multipolygon_passes_through_multipolygons ( ) : [EOL] mp = MultiPolygon ( POLY_1 ) [EOL] assert to_multipolygon ( mp ) is mp [EOL] [EOL] [EOL] def test_zipcode_str_works ( ) : [EOL] zc = Zipcode ( zipcode = [string] ) [EOL] assert str ( zc ) == [string] [EOL] [EOL] [EOL] def test_borough_str_works ( ) : [EOL] b = Borough ( name = [string] ) [EOL] assert str ( b ) == [string] [EOL] [EOL] [EOL] def test_neighborhood_str_works ( ) : [EOL] n = Neighborhood ( name = [string] , county = [string] ) [EOL] assert str ( n ) == [string] [EOL] [EOL] [EOL] class TestCommunityDistrict : [EOL] def test_boro_cd_to_name_shows_joint_interest_areas ( self ) : [EOL] assert CommunityDistrict . boro_cd_to_name ( [string] ) == [string] [EOL] [EOL] def test_boro_cd_to_name_shows_community_districts ( self ) : [EOL] assert CommunityDistrict . boro_cd_to_name ( [string] ) == [string] [EOL] [EOL] def test_str_works ( self ) : [EOL] cd = CommunityDistrict ( name = [string] ) [EOL] assert str ( cd ) == [string] [EOL] [EOL] [EOL] class TestTenantResourceManager : [EOL] def test_it_finds_best_resources ( self , db , fake_geocoder ) : [EOL] create_sample_tenant_resources ( db , fake_geocoder ) [EOL] resources = list ( tr . name for tr in TenantResource . objects . find_best_for ( [number] , [number] ) ) [EOL] assert resources == [ [string] , [string] ] [EOL] [EOL] [EOL] class TestTenantResource : [EOL] def test_it_updates_catchment_area_to_none ( self , db ) : [EOL] tr = create_tenant_resource ( ) [EOL] tr . update_catchment_area ( ) [EOL] assert tr . catchment_area is None [EOL] [EOL] def test_it_updates_catchment_area_to_multipolygon ( self , db ) : [EOL] zc = create_zipcode ( ) [EOL] tr = create_tenant_resource ( zipcodes = [ zc ] ) [EOL] tr . update_catchment_area ( ) [EOL] assert isinstance ( tr . catchment_area , MultiPolygon ) [EOL] [EOL] def test_it_updates_geocoded_info_on_save ( self , db , fake_geocoder ) : [EOL] fake_geocoder . register ( [string] , latitude = [number] , longitude = [number] ) [EOL] tr = create_tenant_resource ( address = [string] ) [EOL] [EOL] assert tr . geocoded_address == [string] [EOL] assert tr . geocoded_point is None [EOL] [EOL] tr . address = [string] [EOL] tr . save ( ) [EOL] [EOL] assert tr . geocoded_address == [string] [EOL] assert str ( tr . geocoded_point ) == [string] [EOL] [EOL] tr . address = [string] [EOL] tr . save ( ) [EOL] [EOL] assert tr . geocoded_address == [string] [EOL] assert tr . geocoded_point is None [EOL] [EOL] def test_iter_geometries_works ( self , db ) : [EOL] tr = create_tenant_resource ( ) [EOL] assert union_geometries ( tr . iter_geometries ( ) ) is None [EOL] [EOL] zc = create_zipcode ( ) [EOL] tr = create_tenant_resource ( zipcodes = [ zc ] ) [EOL] assert union_geometries ( tr . iter_geometries ( ) ) is not None [EOL] [EOL] borough = create_borough ( ) [EOL] tr = create_tenant_resource ( boroughs = [ borough ] ) [EOL] assert union_geometries ( tr . iter_geometries ( ) ) is not None [EOL] [EOL] neighborhood = create_neighborhood ( ) [EOL] tr = create_tenant_resource ( neighborhoods = [ neighborhood ] ) [EOL] assert union_geometries ( tr . iter_geometries ( ) ) is not None [EOL] [EOL] cd = create_cd ( ) [EOL] tr = create_tenant_resource ( community_districts = [ cd ] ) [EOL] assert union_geometries ( tr . iter_geometries ( ) ) is not None [EOL] [EOL] [EOL] class TestIgnoreFindhelpMigrationsRouter : [EOL] def test_it_returns_false_for_findhelp_models ( self ) : [EOL] router = IgnoreFindhelpMigrationsRouter ( ) [EOL] assert router . allow_migrate ( None , app_label = [string] ) is False [EOL] [EOL] def test_it_returns_none_for_non_findhelp_models ( self ) : [EOL] router = IgnoreFindhelpMigrationsRouter ( ) [EOL] assert router . allow_migrate ( None , app_label = [string] ) is None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $findhelp.models.CommunityDistrict$ 0 0 0 0 0 0 0 0 0 0 0 $findhelp.models.CommunityDistrict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $findhelp.models.IgnoreFindhelpMigrationsRouter$ 0 0 0 0 0 0 $findhelp.models.IgnoreFindhelpMigrationsRouter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $findhelp.models.IgnoreFindhelpMigrationsRouter$ 0 0 0 0 0 0 $findhelp.models.IgnoreFindhelpMigrationsRouter$ 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from types import SimpleNamespace [EOL] from django . contrib . gis . geos import Point , MultiPolygon , Polygon [EOL] import pytest [EOL] [EOL] from findhelp . admin_map import ( render_admin_map , admin_map_field ) [EOL] [EOL] [EOL] MPOLY_1 = MultiPolygon ( Polygon . from_bbox ( ( [number] , [number] , [number] , [number] ) ) ) [EOL] [EOL] [EOL] class MapboxEnabled : [EOL] @ pytest . fixture ( autouse = True ) def enable_mapbox ( self , settings ) : [EOL] settings . MAPBOX_ACCESS_TOKEN = [string] [EOL] [EOL] [EOL] def test_render_admin_map_works_when_mapbox_is_disabled ( ) : [EOL] assert [string] in render_admin_map ( [string] ) [EOL] [EOL] [EOL] class TestRenderAdminMapWithMapboxEnabled ( MapboxEnabled ) : [EOL] def test_it_works_when_there_is_no_map_data_to_display ( self ) : [EOL] assert render_admin_map ( [string] ) == [string] [EOL] [EOL] def test_it_returns_json_params ( self , settings ) : [EOL] html = render_admin_map ( [string] , area = MPOLY_1 , point = Point ( [number] , [number] ) , point_label = [string] ) [EOL] assert [string] in html [EOL] assert [string] in html [EOL] assert settings . MAPBOX_TILES_ORIGIN in html [EOL] [EOL] [comment] [EOL] assert [string] in html [EOL] [EOL] [comment] [EOL] assert [string] in html [EOL] [EOL] [EOL] class TestAdminMapField ( MapboxEnabled ) : [EOL] def test_it_works ( self ) : [EOL] f = admin_map_field ( [string] , [string] ) [EOL] [EOL] assert f . short_description == [string] [EOL] [EOL] assert f ( None , SimpleNamespace ( blarf = None ) ) == [string] [EOL] [EOL] assert [string] in f ( None , SimpleNamespace ( blarf = MPOLY_1 ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0
from django . core . management import call_command [EOL] [EOL] from findhelp . models import Zipcode [EOL] [EOL] [EOL] def test_it_works ( db ) : [EOL] call_command ( [string] ) [EOL] assert Zipcode . objects . get ( zipcode = [string] ) is not None [EOL] [EOL] [comment] [EOL] [comment] [EOL] call_command ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any , Optional , BinaryIO [EOL] import typing [EOL] import logging [EOL] import builtins [EOL] import threading [EOL] import json [EOL] import logging [EOL] from typing import Dict , Any , BinaryIO , Optional [EOL] from threading import Lock [EOL] from django . conf import settings [EOL] import lob [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] MAX_NAME_LEN = [number] [EOL] [EOL] DELIVERABLE = [string] [EOL] [EOL] UNDELIVERABLE = [string] [EOL] [EOL] [comment] [EOL] DELIVERABILITY_DOCS = { DELIVERABLE : [string] , [string] : ( [string] [string] ) , [string] : ( [string] [string] [string] [string] ) , [string] : ( [string] [string] [string] [string] ) , UNDELIVERABLE : ( [string] ) } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] _lock = Lock ( ) [EOL] [EOL] [EOL] def _to_plain_object ( obj ) : [EOL] [docstring] [EOL] [EOL] return json . loads ( json . dumps ( obj ) ) [EOL] [EOL] [EOL] def truncate_name_in_address ( address ) : [EOL] [docstring] [EOL] [EOL] if isinstance ( address . get ( [string] ) , str ) : [EOL] return { ** address , [string] : address [ [string] ] [ : MAX_NAME_LEN ] } [EOL] return address [EOL] [EOL] [EOL] def mail_certified_letter ( description , to_address , from_address , file , color , double_sided , request_return_receipt = False , ) : [EOL] [docstring] [EOL] [EOL] with _lock : [EOL] lob . api_key = settings . LOB_SECRET_API_KEY [EOL] if request_return_receipt : [EOL] extra_service = [string] [EOL] else : [EOL] extra_service = [string] [EOL] return _to_plain_object ( lob . Letter . create ( description = description , to_address = truncate_name_in_address ( to_address ) , from_address = truncate_name_in_address ( from_address ) , file = file , color = color , double_sided = double_sided , extra_service = extra_service , ) ) [EOL] [EOL] [EOL] def verify_address ( ** params ) : [EOL] [docstring] [EOL] [EOL] with _lock : [EOL] lob . api_key = settings . LOB_PUBLISHABLE_API_KEY [EOL] return _to_plain_object ( lob . USVerification . create ( ** params ) ) [EOL] [EOL] [EOL] def is_address_undeliverable ( ** params ) : [EOL] [docstring] [EOL] [EOL] if not settings . LOB_PUBLISHABLE_API_KEY : [EOL] return None [EOL] [EOL] try : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] v = verify_address ( ** params ) [EOL] return v [ [string] ] == UNDELIVERABLE [EOL] except Exception as e : [EOL] logger . exception ( e ) [EOL] return None [EOL] [EOL] [EOL] def get_deliverability_docs ( verification ) : [EOL] [docstring] [EOL] [EOL] return DELIVERABILITY_DOCS [ verification [ [string] ] ] [EOL] [EOL] [EOL] def verification_to_inline_address ( verification ) : [EOL] [docstring] [EOL] [EOL] v = verification [EOL] vc = v [ [string] ] [EOL] return { [string] : v [ [string] ] , [string] : v [ [string] ] , [string] : vc [ [string] ] , [string] : vc [ [string] ] , [string] : vc [ [string] ] } [EOL] [EOL] [EOL] def get_address_from_verification ( verification ) : [EOL] [docstring] [EOL] [EOL] v = verification [EOL] return [string] . join ( filter ( None , [ v [ [string] ] , v [ [string] ] , v [ [string] ] , v [ [string] ] ] ) ) [EOL] [EOL] [EOL] def is_lob_fully_enabled ( ) : [EOL] [docstring] [EOL] [EOL] return bool ( settings . LOB_SECRET_API_KEY and settings . LOB_PUBLISHABLE_API_KEY ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $threading.Lock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $threading.Lock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $threading.Lock$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Optional , Union , Tuple , List [EOL] import nycdb [EOL] import typing [EOL] import nycha [EOL] import project [EOL] import logging [EOL] import builtins [EOL] from typing import Optional , Tuple [EOL] from dataclasses import dataclass [EOL] import logging [EOL] [EOL] from project import geocoding [EOL] from nycha . models import NychaOffice [EOL] import nycdb . models [EOL] [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] @ dataclass class LandlordInfo : [EOL] [docstring] [EOL] [EOL] name = ... [EOL] [EOL] [comment] [EOL] address = ... [EOL] [EOL] [comment] [EOL] primary_line = ... [EOL] city = ... [EOL] state = ... [EOL] zip_code = ... [EOL] [EOL] [EOL] def _lookup_bbl_and_bin_and_full_address ( address ) : [EOL] features = geocoding . search ( address ) [EOL] if not features : [EOL] return ( [string] , [string] , [string] ) [EOL] props = features [ [number] ] . properties [EOL] return ( props . pad_bbl , props . pad_bin , props . label ) [EOL] [EOL] [EOL] def _lookup_landlord_via_nycdb ( pad_bbl , pad_bin ) : [EOL] contact = nycdb . models . get_landlord ( pad_bbl , pad_bin ) [EOL] if contact : [EOL] return LandlordInfo ( name = contact . name , address = [string] . join ( contact . address . lines_for_mailing ) , primary_line = contact . address . first_line , city = contact . address . city , state = contact . address . state , zip_code = contact . address . zipcode , ) [EOL] return None [EOL] [EOL] [EOL] def _lookup_landlord_via_nycha ( pad_bbl , address ) : [EOL] office = NychaOffice . objects . find_for_property ( pad_bbl , address ) [EOL] if not office : [EOL] return None [EOL] return LandlordInfo ( name = f"{ office . name } [string] " , address = office . address , primary_line = office . primary_line , city = office . city , state = office . state , zip_code = office . zip_code , ) [EOL] [EOL] [EOL] def lookup_landlord ( address , pad_bbl = [string] , pad_bin = [string] ) : [EOL] [docstring] [EOL] [EOL] if pad_bbl : [EOL] full_addr = address [EOL] else : [EOL] pad_bbl , pad_bin , full_addr = _lookup_bbl_and_bin_and_full_address ( address ) [EOL] if not pad_bbl : [EOL] return None [EOL] [EOL] return ( _lookup_landlord_via_nycha ( pad_bbl , full_addr ) or _lookup_landlord_via_nycdb ( pad_bbl , pad_bin ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[LandlordInfo]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class LocConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Any [EOL] import pathlib [EOL] import typing [EOL] from pathlib import Path [EOL] from copy import deepcopy [EOL] import json [EOL] [EOL] MY_DIR = Path ( __file__ ) . parent . resolve ( ) [EOL] [EOL] LOB_LETTERS_URL = [string] [EOL] [EOL] LOB_VERIFICATIONS_URL = [string] [EOL] [EOL] LETTER_JSON = MY_DIR / [string] [EOL] [EOL] VERIFICATION_JSON = MY_DIR / [string] [EOL] [EOL] SAMPLE_LETTER = json . loads ( LETTER_JSON . read_text ( ) ) [EOL] [EOL] SAMPLE_VERIFICATION = json . loads ( VERIFICATION_JSON . read_text ( ) ) [EOL] [EOL] [EOL] class MockLob : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , settings , requests_mock ) : [EOL] self . settings = settings [EOL] self . requests_mock = requests_mock [EOL] self . sample_letter = SAMPLE_LETTER [EOL] self . sample_verification = SAMPLE_VERIFICATION [EOL] self . settings . LOB_PUBLISHABLE_API_KEY = [string] [EOL] self . settings . LOB_SECRET_API_KEY = [string] [EOL] self . mock_letters_api ( ) [EOL] self . mock_verifications_api ( ) [EOL] [EOL] def mock_verifications_api ( self , json = None , status_code = [number] ) : [EOL] if json is None : [EOL] json = self . sample_verification [EOL] self . verifications_mock = self . requests_mock . post ( LOB_VERIFICATIONS_URL , json = json , status_code = status_code , ) [EOL] [EOL] def mock_letters_api ( self , json = None , status_code = [number] ) : [EOL] if json is None : [EOL] json = self . sample_letter [EOL] self . letters_mock = self . requests_mock . post ( LOB_LETTERS_URL , json = json , status_code = status_code , ) [EOL] [EOL] def get_sample_verification ( self , ** updates ) : [EOL] return get_sample_verification ( ** updates ) [EOL] [EOL] [EOL] def mocklob ( settings , requests_mock ) : [EOL] [docstring] [EOL] [EOL] yield MockLob ( settings , requests_mock ) [EOL] [EOL] [EOL] def get_sample_verification ( ** updates ) : [EOL] result = deepcopy ( SAMPLE_VERIFICATION ) [EOL] result . update ( updates ) [EOL] return result [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Optional [EOL] import pathlib [EOL] import typing [EOL] import loc [EOL] from pathlib import Path [EOL] from unittest . mock import patch [EOL] import pytest [EOL] from django . test import override_settings [EOL] from django . conf import settings [EOL] from django . core . management import call_command [EOL] from django . core . management . base import CommandError [EOL] [EOL] from project . tests . test_geocoding import EXAMPLE_SEARCH as EXAMPLE_GEO_SEARCH [EOL] from project . tests . util import simplepatch [EOL] from loc . landlord_lookup import ( lookup_landlord , LandlordInfo , _lookup_landlord_via_nycdb ) [EOL] [EOL] [EOL] MY_DIR = Path ( __file__ ) . parent . resolve ( ) [EOL] [EOL] enable_fake_landlord_lookup = override_settings ( GEOCODING_SEARCH_URL = [string] , ) [EOL] [EOL] bypass_nycha_lookup = simplepatch ( [string] , return_value = None ) [EOL] [EOL] [EOL] def mock_lookup_success ( requests_mock , nycdb ) : [EOL] requests_mock . get ( settings . GEOCODING_SEARCH_URL , json = EXAMPLE_GEO_SEARCH ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] reg = nycdb . load_hpd_registration ( [string] ) [EOL] reg . boroid = [number] [EOL] reg . block = [number] [EOL] reg . lot = [number] [EOL] reg . save ( ) [EOL] [EOL] [EOL] def mock_lookup_failure ( requests_mock ) : [EOL] requests_mock . get ( settings . GEOCODING_SEARCH_URL , json = EXAMPLE_GEO_SEARCH ) [EOL] [EOL] [EOL] def test_lookup_landlord_command_uses_nycha ( db , loaded_nycha_csv_data ) : [EOL] with patch ( [string] , return_value = ( [string] , [string] , [string] ) ) : [EOL] results = lookup_landlord ( [string] ) [EOL] assert results . name == [string] [EOL] assert results . address == [string] [EOL] [EOL] [EOL] @ enable_fake_landlord_lookup @ bypass_nycha_lookup def test_lookup_landlord_command_works ( requests_mock , nycdb ) : [EOL] mock_lookup_success ( requests_mock , nycdb ) [EOL] call_command ( [string] , [string] ) [EOL] [EOL] [EOL] @ enable_fake_landlord_lookup @ bypass_nycha_lookup def test_lookup_landlord_command_fails ( requests_mock ) : [EOL] with pytest . raises ( CommandError ) : [EOL] requests_mock . get ( settings . GEOCODING_SEARCH_URL , json = EXAMPLE_GEO_SEARCH ) [EOL] call_command ( [string] , [string] ) [EOL] [EOL] [EOL] def test_lookup_landlord_via_nycdb_works ( nycdb ) : [EOL] reg = nycdb . load_hpd_registration ( [string] ) [EOL] ll = _lookup_landlord_via_nycdb ( reg . pad_bbl , [string] ) [EOL] assert isinstance ( ll , LandlordInfo ) [EOL] assert ll . name == [string] [EOL] assert ll . address == [string] [EOL] assert ll . primary_line == [string] [EOL] assert ll . city == [string] [EOL] assert ll . state == [string] [EOL] assert ll . zip_code == [string] [EOL] [EOL] [EOL] @ enable_fake_landlord_lookup @ bypass_nycha_lookup def test_lookup_landlord_returns_none_on_geocoding_500 ( requests_mock ) : [EOL] requests_mock . get ( settings . GEOCODING_SEARCH_URL , status_code = [number] ) [EOL] assert lookup_landlord ( [string] ) is None [EOL] [EOL] [EOL] @ enable_fake_landlord_lookup @ bypass_nycha_lookup def test_lookup_landlord_returns_none_on_landlord_api_500 ( requests_mock ) : [EOL] requests_mock . get ( settings . GEOCODING_SEARCH_URL , json = EXAMPLE_GEO_SEARCH ) [EOL] assert lookup_landlord ( [string] ) is None [EOL] [EOL] [EOL] @ enable_fake_landlord_lookup @ bypass_nycha_lookup def test_search_returns_none_on_request_exception ( requests_mock ) : [EOL] requests_mock . get ( settings . GEOCODING_SEARCH_URL , json = EXAMPLE_GEO_SEARCH ) [EOL] assert lookup_landlord ( [string] ) is None [EOL] [EOL] [EOL] @ enable_fake_landlord_lookup @ bypass_nycha_lookup def test_search_returns_none_on_bad_result ( requests_mock ) : [EOL] requests_mock . get ( settings . GEOCODING_SEARCH_URL , json = EXAMPLE_GEO_SEARCH ) [EOL] assert lookup_landlord ( [string] ) is None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import io [EOL] import typing [EOL] from io import BytesIO [EOL] import lob [EOL] import pytest [EOL] [EOL] from loc import lob_api [EOL] [EOL] [EOL] def test_verify_address_works ( mocklob ) : [EOL] v = lob_api . verify_address ( address = [string] ) [EOL] assert v [ [string] ] == [string] [EOL] assert lob . api_key == [string] [EOL] [EOL] [EOL] def test_mail_certified_letter_works ( mocklob ) : [EOL] f = BytesIO ( [string] ) [EOL] ltr = lob_api . mail_certified_letter ( description = [string] , to_address = { } , from_address = { } , file = f , color = False , double_sided = False ) [EOL] assert ltr [ [string] ] == [string] [EOL] assert lob . api_key == [string] [EOL] [EOL] [EOL] def test_get_deliverability_docs_works ( mocklob ) : [EOL] docs = lob_api . get_deliverability_docs ( mocklob . get_sample_verification ( ) ) [EOL] assert docs == [string] [EOL] [EOL] [EOL] def test_verification_to_inline_address_works ( mocklob ) : [EOL] assert lob_api . verification_to_inline_address ( mocklob . get_sample_verification ( ) ) == { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] [EOL] def test_get_address_from_verification_works ( mocklob ) : [EOL] assert lob_api . get_address_from_verification ( mocklob . get_sample_verification ( ) ) == ( [string] [string] ) [EOL] [EOL] [EOL] class TestIsAddressUndeliverable : [EOL] def test_it_returns_null_if_lob_is_disabled ( self ) : [EOL] assert lob_api . is_address_undeliverable ( ) is None [EOL] [EOL] def test_it_returns_false_if_addr_is_deliverable ( self , mocklob ) : [EOL] assert lob_api . is_address_undeliverable ( ) is False [EOL] [EOL] def test_it_returns_true_if_addr_is_undeliverable ( self , mocklob ) : [EOL] mocklob . mock_verifications_api ( json = mocklob . get_sample_verification ( deliverability = [string] ) ) [EOL] assert lob_api . is_address_undeliverable ( ) is True [EOL] [EOL] def test_it_returns_null_if_lob_raises_exception ( self , mocklob ) : [EOL] mocklob . mock_verifications_api ( json = { [string] : { [string] : [string] } } , status_code = [number] , ) [EOL] assert lob_api . is_address_undeliverable ( ) is None [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( { [string] : [string] , [string] : [string] } , { [string] : [string] , [string] : [string] } ) , ( { [string] : [string] } , { [string] : [string] } ) , ( { [string] : [string] } , { [string] : [string] } ) , ( { [string] : None } , { [string] : None } ) , ] ) def test_truncate_name_in_address_works ( original , expected ) : [EOL] assert lob_api . truncate_name_in_address ( original ) == expected [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations , models [EOL] import project . util . phone_number [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AddField ( model_name = [string] , name = [string] , field = models . EmailField ( blank = True , help_text = [string] , max_length = [number] ) , ) , migrations . AddField ( model_name = [string] , name = [string] , field = models . CharField ( blank = True , help_text = [string] , max_length = [number] , validators = [ project . util . phone_number . validate_phone_number ] ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . DateTimeField ( auto_now_add = True ) ) , ( [string] , models . DateTimeField ( auto_now = True ) ) , ( [string] , models . CharField ( help_text = [string] , max_length = [number] , unique = True ) ) , ( [string] , models . CharField ( blank = True , help_text = [string] , max_length = [number] ) ) , ( [string] , models . CharField ( blank = True , help_text = [string] , max_length = [number] ) ) , ( [string] , models . CharField ( blank = True , help_text = [string] , max_length = [number] ) ) , ( [string] , models . CharField ( blank = True , help_text = [string] , max_length = [number] ) ) , ( [string] , models . CharField ( blank = True , help_text = [string] , max_length = [number] ) ) , ( [string] , models . CharField ( blank = True , help_text = [string] , max_length = [number] ) ) , ] , options = { [string] : [string] , } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Optional [EOL] import typing [EOL] import loc [EOL] from django . core . management . base import BaseCommand , CommandError [EOL] [EOL] from loc . landlord_lookup import lookup_landlord [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] info = lookup_landlord ( options [ [string] ] ) [EOL] if info is None : [EOL] raise CommandError ( [string] ) [EOL] self . stdout . write ( f" [string] { info . name }" ) [EOL] self . stdout . write ( f" [string] { info . primary_line }" ) [EOL] self . stdout . write ( f" [string] " f"{ info . city } [string] { info . state } [string] { info . zip_code }" ) [EOL] self . stdout . write ( f" [string] " ) [EOL] for line in info . address . splitlines ( ) : [EOL] self . stdout . write ( f" [string] { line }" ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[loc.landlord_lookup.LandlordInfo]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[loc.landlord_lookup.LandlordInfo]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[loc.landlord_lookup.LandlordInfo]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[loc.landlord_lookup.LandlordInfo]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[loc.landlord_lookup.LandlordInfo]$ 0 0 0 0 0 $typing.Optional[loc.landlord_lookup.LandlordInfo]$ 0 0 0 0 0 $typing.Optional[loc.landlord_lookup.LandlordInfo]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[loc.landlord_lookup.LandlordInfo]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , Set [EOL] import typing [EOL] from django . urls import reverse , NoReverseMatch [EOL] from django . core . exceptions import MiddlewareNotUsed [EOL] [EOL] from . util import is_request_user_verified , redirect_request_to_verify [EOL] [EOL] [EOL] def admin_requires_2fa_middleware ( get_response ) : [EOL] try : [EOL] admin_prefix = reverse ( [string] ) [EOL] except NoReverseMatch : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] raise MiddlewareNotUsed ( ) [EOL] [EOL] ignored_paths = { reverse ( [string] ) , reverse ( [string] ) } [EOL] [EOL] def middleware ( request ) : [EOL] path = request . path [EOL] if ( path . startswith ( admin_prefix ) and path not in ignored_paths and request . user . is_authenticated and not is_request_user_verified ( request ) ) : [EOL] return redirect_request_to_verify ( request ) [EOL] return get_response ( request ) [EOL] [EOL] return middleware [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class TwofactorConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Any [EOL] import typing [EOL] import builtins [EOL] import django [EOL] import time [EOL] from django . conf import settings [EOL] from django . http import HttpRequest , HttpResponse [EOL] from django . contrib . auth . views import redirect_to_login [EOL] from django . urls import reverse [EOL] [EOL] [EOL] SESSION_KEY = [string] [EOL] [EOL] [EOL] def is_request_user_verified ( request ) : [EOL] [docstring] [EOL] [EOL] if not request . user . is_authenticated : [EOL] return False [EOL] if settings . TWOFACTOR_VERIFY_DURATION <= [number] : [EOL] return True [EOL] verify_time = request . session . get ( SESSION_KEY , [number] ) [EOL] expiry_time = verify_time + settings . TWOFACTOR_VERIFY_DURATION [EOL] return expiry_time >= time . time ( ) [EOL] [EOL] [EOL] def verify_request_user ( request ) : [EOL] [docstring] [EOL] [EOL] assert request . user . is_authenticated [EOL] request . session [ SESSION_KEY ] = int ( time . time ( ) ) [EOL] [EOL] [EOL] def redirect_request_to_verify ( request ) : [EOL] [docstring] [EOL] [EOL] path = request . build_absolute_uri ( ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] return redirect_to_login ( next = path , login_url = reverse ( [string] ) , redirect_field_name = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.http.HttpResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from functools import wraps [EOL] [EOL] from . util import is_request_user_verified , redirect_request_to_verify [EOL] [EOL] [EOL] def twofactor_required ( view_func ) : [EOL] [docstring] [EOL] [EOL] @ wraps ( view_func ) def _wrapped_view ( request , * args , ** kwargs ) : [EOL] if is_request_user_verified ( request ) : [EOL] return view_func ( request , * args , ** kwargs ) [EOL] return redirect_request_to_verify ( request ) [EOL] return _wrapped_view [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
import pytest [EOL] [EOL] [EOL] @ pytest . fixture ( autouse = True ) def enable_twofactor ( settings ) : [EOL] [comment] [EOL] [comment] [EOL] settings . TWOFACTOR_VERIFY_DURATION = [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class NychaConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Tuple , Any , Type , Optional [EOL] import logging [EOL] import nycha [EOL] import typing [EOL] import builtins [EOL] from typing import Optional [EOL] import logging [EOL] from django . db import models [EOL] [EOL] from project . util . mailing_address import MailingAddress [EOL] [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class NychaOfficeManager ( models . Manager ) : [EOL] def find_for_property ( self , pad_bbl , address ) : [EOL] offices_for_bbl = self . filter ( properties__pad_bbl = pad_bbl ) . distinct ( ) [EOL] count = offices_for_bbl . count ( ) [EOL] if count == [number] : [EOL] return None [EOL] elif count == [number] : [EOL] return offices_for_bbl . get ( ) [EOL] else : [EOL] addr_beginning_upper = address . split ( [string] ) [ [number] ] . upper ( ) [EOL] offices_for_address = offices_for_bbl . filter ( properties__address = addr_beginning_upper ) [EOL] if offices_for_address . exists ( ) : [EOL] return offices_for_address . first ( ) [EOL] logger . info ( f" [string] { pad_bbl } [string] " f" [string] { address } [string] " ) [EOL] return offices_for_bbl . first ( ) [EOL] [EOL] [EOL] class NychaOffice ( MailingAddress ) : [EOL] name = models . CharField ( max_length = [number] , help_text = [string] ) [EOL] [EOL] address = models . TextField ( help_text = [string] ) [EOL] [EOL] objects = NychaOfficeManager ( ) [EOL] [EOL] [EOL] class NychaProperty ( models . Model ) : [EOL] class Meta : [EOL] unique_together = ( [string] , [string] ) [EOL] [EOL] pad_bbl = models . CharField ( max_length = [number] , help_text = [string] ) [EOL] [EOL] address = models . CharField ( max_length = [number] , help_text = [string] ) [EOL] [EOL] development = models . CharField ( max_length = [number] , help_text = [string] ) [EOL] [EOL] office = models . ForeignKey ( NychaOffice , on_delete = models . CASCADE , related_name = [string] , help_text = [string] ) [EOL] [EOL] [EOL] def is_nycha_bbl ( pad_bbl ) : [EOL] return NychaProperty . objects . filter ( pad_bbl = pad_bbl ) . exists ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional['NychaOffice']$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[nycha.models.NychaOffice]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[nycha.models.NychaOffice]$ 0 0 0 0 0 0 0 0 0 0 0 $nycha.models.NychaOfficeManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Type[nycha.models.NychaProperty]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[nycha.models.NychaProperty]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[nycha.models.NychaProperty]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[nycha.models.NychaProperty]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations , models [EOL] import project . util . mailing_address [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterField ( model_name = [string] , name = [string] , field = models . CharField ( blank = True , help_text = [string] , max_length = [number] , validators = [ project . util . mailing_address . ZipCodeValidator ( ) ] ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Dict , Any [EOL] import nycha [EOL] import typing [EOL] from nycha . management . commands . loadnycha import Row [EOL] from nycha . models import NychaProperty [EOL] [EOL] [EOL] ROW_DICT = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] [EOL] def test_command_works ( loaded_nycha_csv_data ) : [EOL] assert loaded_nycha_csv_data . stderr == ( [string] [string] ) [EOL] assert loaded_nycha_csv_data . stdout == ( [string] [string] [string] [string] [string] ) [EOL] prop = NychaProperty . objects . get ( pad_bbl = [string] , address = [string] ) [EOL] assert prop . development == [string] [EOL] assert prop . office . name == [string] [EOL] assert prop . office . address == [string] [EOL] assert prop . office . city == [string] [EOL] assert prop . office . state == [string] [EOL] assert prop . office . zip_code == [string] [EOL] assert prop . office . primary_line == [string] [EOL] [EOL] [EOL] class TestRow : [EOL] def test_pad_bbl_works ( self ) : [EOL] row = Row ( ** ROW_DICT ) [EOL] assert row . pad_bbl == [string] [EOL] [EOL] row . BOROUGH = [string] [EOL] assert row . pad_bbl == [string] [EOL] [EOL] def test_is_main_management_office_works ( self ) : [EOL] row = Row ( ** ROW_DICT ) [EOL] assert row . is_main_management_office ( ) is True [EOL] [EOL] row . FACILITY = [string] [EOL] assert row . is_main_management_office ( ) is False [EOL] [EOL] def test_full_address_works ( self ) : [EOL] row = Row ( ** ROW_DICT ) [EOL] assert row . full_address == [string] [EOL] [EOL] row . BOROUGH = [string] [EOL] assert row . full_address == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $nycha.management.commands.loadnycha.Row$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $nycha.management.commands.loadnycha.Row$ 0 0 0 0 0 0 $nycha.management.commands.loadnycha.Row$ 0 $builtins.str$ 0 0 0 0 $nycha.management.commands.loadnycha.Row$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $nycha.management.commands.loadnycha.Row$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $nycha.management.commands.loadnycha.Row$ 0 0 0 0 0 0 0 0 $nycha.management.commands.loadnycha.Row$ 0 $builtins.str$ 0 0 0 0 $nycha.management.commands.loadnycha.Row$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $nycha.management.commands.loadnycha.Row$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $nycha.management.commands.loadnycha.Row$ 0 0 0 0 0 0 $nycha.management.commands.loadnycha.Row$ 0 $builtins.str$ 0 0 0 0 $nycha.management.commands.loadnycha.Row$ 0 0 0 0 0
import pathlib [EOL] import io [EOL] from io import StringIO [EOL] from pathlib import Path [EOL] from dataclasses import dataclass [EOL] from django . core . management import call_command [EOL] [EOL] CSV_FILE = Path ( __file__ ) . parent . resolve ( ) / [string] [EOL] [EOL] [EOL] @ dataclass class LoadNychaCommandResult : [EOL] stdout = ... [EOL] stderr = ... [EOL] [EOL] [EOL] def load_nycha_csv_data ( ) : [EOL] out = StringIO ( ) [EOL] err = StringIO ( ) [EOL] call_command ( [string] , str ( CSV_FILE ) , stdout = out , stderr = err ) [EOL] return LoadNychaCommandResult ( stdout = out . getvalue ( ) , stderr = err . getvalue ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Iterator , Set , Any , TextIO , Dict , Generator [EOL] import typing [EOL] import nycha [EOL] import csv [EOL] import pathlib [EOL] import builtins [EOL] import csv [EOL] from pathlib import Path [EOL] from dataclasses import dataclass [EOL] from typing import Dict , Set , TextIO , Iterator , NamedTuple [EOL] from django . core . management . base import BaseCommand [EOL] from django . db import transaction [EOL] import pydantic [EOL] [EOL] from project . util . nyc import to_pad_bbl [EOL] from nycha . models import NychaOffice , NychaProperty [EOL] [EOL] [EOL] MANHATTAN = [string] [EOL] [EOL] [comment] [EOL] BOROUGH_NUMBERS = { MANHATTAN : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] } [EOL] [EOL] [EOL] class Row ( pydantic . BaseModel ) : [EOL] BOROUGH = ... [EOL] BLOCK = ... [EOL] LOT = ... [EOL] ADDRESS = ... [EOL] ZIP_CODE = pydantic . Schema ( ... , alias = [string] ) [EOL] DEVELOPMENT = ... [EOL] MANAGED_BY = pydantic . Schema ( ... , alias = [string] ) [EOL] FACILITY = ... [EOL] [EOL] @ property def pad_bbl ( self ) : [EOL] boro = BOROUGH_NUMBERS [ self . BOROUGH ] [EOL] return to_pad_bbl ( boro , int ( self . BLOCK ) , int ( self . LOT ) ) [EOL] [EOL] @ property def city ( self ) : [EOL] city = self . BOROUGH [EOL] if city == MANHATTAN : [EOL] city = [string] [EOL] return city [EOL] [EOL] @ property def state ( self ) : [EOL] return [string] [EOL] [EOL] @ property def full_address ( self ) : [EOL] return f'{ self . ADDRESS } [string] { self . city } [string] { self . state } [string] { self . ZIP_CODE }' [EOL] [EOL] def is_main_management_office ( self ) : [EOL] return ( [string] in self . FACILITY and [string] not in self . FACILITY ) [EOL] [EOL] [EOL] class Property ( NamedTuple ) : [EOL] pad_bbl = ... [EOL] address = ... [EOL] development = ... [EOL] [EOL] [EOL] @ dataclass class ManagementOffice : [EOL] row = ... [EOL] properties = ... [EOL] [EOL] [EOL] class NychaCsvLoader : [EOL] offices = ... [EOL] mgmt_orgs = ... [EOL] pad_bbls = ... [EOL] bbls_with_many_offices = ... [EOL] stdout = ... [EOL] stderr = ... [EOL] [EOL] def __init__ ( self , stdout , stderr ) : [EOL] self . offices = { } [EOL] self . mgmt_orgs = set ( ) [EOL] self . bbls_with_many_offices = set ( ) [EOL] self . pad_bbls = { } [EOL] self . stderr = stderr [EOL] self . stdout = stdout [EOL] [EOL] def iter_rows ( self , csvpath ) : [EOL] with csvpath . open ( [string] ) as csvfile : [EOL] reader = csv . DictReader ( csvfile ) [EOL] for dictrow in reader : [EOL] row = Row ( ** dictrow ) [EOL] yield row [EOL] [EOL] def load_csv ( self , csvpath ) : [EOL] mgmt_rows = ( row for row in self . iter_rows ( csvpath ) if row . is_main_management_office ( ) ) [EOL] [comment] [EOL] [comment] [EOL] for row in mgmt_rows : [EOL] self . load_management_office_row ( row ) [EOL] [comment] [EOL] [comment] [EOL] for row in self . iter_rows ( csvpath ) : [EOL] self . load_row ( row ) [EOL] [EOL] def load_management_office_row ( self , row ) : [EOL] mgmt_org = row . MANAGED_BY [EOL] if mgmt_org in self . offices : [EOL] self . stderr . write ( f" [string] { mgmt_org } [string] " f"{ row . FACILITY } [string] { self . offices [ mgmt_org ] . row . FACILITY }" ) [EOL] self . offices [ mgmt_org ] = ManagementOffice ( row = row , properties = set ( ) ) [EOL] [EOL] def load_row ( self , row ) : [EOL] mgmt_org = row . MANAGED_BY [EOL] self . mgmt_orgs . add ( mgmt_org ) [EOL] if mgmt_org in self . offices : [EOL] office = self . offices [ mgmt_org ] [EOL] pad_bbl = row . pad_bbl [EOL] office . properties . add ( Property ( pad_bbl = pad_bbl , address = row . ADDRESS , development = row . DEVELOPMENT , ) ) [EOL] if pad_bbl not in self . pad_bbls : [EOL] self . pad_bbls [ pad_bbl ] = office [EOL] elif ( self . pad_bbls [ pad_bbl ] is not office and pad_bbl not in self . bbls_with_many_offices ) : [EOL] self . bbls_with_many_offices . add ( pad_bbl ) [EOL] other_office = self . pad_bbls [ pad_bbl ] [EOL] self . stdout . write ( f" [string] { pad_bbl } [string] " f" [string] { mgmt_org } [string] { other_office . row . MANAGED_BY } [string] " ) [EOL] [EOL] @ transaction . atomic def populate_db ( self ) : [EOL] self . stdout . write ( f' [string] ' ) [EOL] NychaOffice . objects . all ( ) . delete ( ) [EOL] for office in self . offices . values ( ) : [EOL] office_model = NychaOffice ( name = office . row . MANAGED_BY , address = office . row . full_address , primary_line = office . row . ADDRESS , city = office . row . city , state = office . row . state , zip_code = office . row . ZIP_CODE , ) [EOL] office_model . save ( ) [EOL] NychaProperty . objects . bulk_create ( [ NychaProperty ( pad_bbl = p . pad_bbl , address = p . address , development = p . development , office = office_model ) for p in office . properties ] ) [EOL] self . stdout . write ( f' [string] ' ) [EOL] [EOL] def report_stats ( self ) : [EOL] self . stdout . write ( f'{ len ( self . offices ) } [string] ' ) [EOL] orgs_without_offices = self . mgmt_orgs . difference ( set ( self . offices . keys ( ) ) ) [EOL] if orgs_without_offices : [EOL] self . stdout . write ( f' [string] ' f' [string] { [string] . join ( orgs_without_offices ) } [string] ' ) [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] loader = NychaCsvLoader ( self . stdout , self . stderr ) [EOL] loader . load_csv ( Path ( options [ [string] ] ) ) [EOL] loader . report_stats ( ) [EOL] loader . populate_db ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $Row$ 0 0 0 $typing.Set[Property]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,ManagementOffice]$ 0 0 0 $typing.Set[builtins.str]$ 0 0 0 $typing.Dict[builtins.str,ManagementOffice]$ 0 0 0 $typing.Set[builtins.str]$ 0 0 0 $typing.TextIO$ 0 0 0 $typing.TextIO$ 0 0 0 0 0 $None$ 0 0 0 $typing.TextIO$ 0 $typing.TextIO$ 0 0 0 0 0 $typing.Dict[builtins.str,nycha.management.commands.loadnycha.ManagementOffice]$ 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,nycha.management.commands.loadnycha.ManagementOffice]$ 0 0 0 0 0 0 $typing.TextIO$ 0 $typing.TextIO$ 0 0 0 $typing.TextIO$ 0 $typing.TextIO$ 0 0 0 $typing.Iterator[Row]$ 0 0 0 $pathlib.Path$ 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 $csv.DictReader$ 0 0 0 0 0 0 0 0 0 0 0 $csv.DictReader$ 0 0 $nycha.management.commands.loadnycha.Row$ 0 0 0 0 0 0 0 0 $nycha.management.commands.loadnycha.Row$ 0 0 0 $None$ 0 0 0 $pathlib.Path$ 0 0 0 $typing.Generator[nycha.management.commands.loadnycha.Row,None,None]$ 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Generator[nycha.management.commands.loadnycha.Row,None,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $Row$ 0 0 0 $builtins.str$ 0 $Row$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $Row$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $Row$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $Row$ 0 $Row$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $Row$ 0 0 0 $builtins.str$ 0 $Row$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $nycha.management.commands.loadnycha.ManagementOffice$ 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 $Row$ 0 $builtins.str$ 0 $nycha.management.commands.loadnycha.ManagementOffice$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $Row$ 0 0 0 0 0 $Row$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $nycha.management.commands.loadnycha.ManagementOffice$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $nycha.management.commands.loadnycha.ManagementOffice$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $nycha.management.commands.loadnycha.ManagementOffice$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $nycha.management.commands.loadnycha.ManagementOffice$ 0 $Row$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $nycha.models.NychaOffice$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $nycha.models.NychaOffice$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $nycha.models.NychaOffice$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $nycha.management.commands.loadnycha.NychaCsvLoader$ 0 0 0 0 0 0 0 0 0 0 0 0 $nycha.management.commands.loadnycha.NychaCsvLoader$ 0 0 0 0 0 0 0 0 0 0 0 0 $nycha.management.commands.loadnycha.NychaCsvLoader$ 0 0 0 0 0 $nycha.management.commands.loadnycha.NychaCsvLoader$ 0 0 0 0 0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class DwhConfig ( AppConfig ) : [EOL] name = [string] [EOL] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0
from typing import Type , Set [EOL] import dwh [EOL] import typing [EOL] from django . conf import settings [EOL] [EOL] [EOL] class ReadAndWriteToDataWarehouseDb : [EOL] [docstring] [EOL] [EOL] route_app_labels = { [string] } [EOL] [EOL] def db_for_read ( self , model , ** hints ) : [EOL] if model . _meta . app_label in self . route_app_labels : [EOL] return settings . DWH_DATABASE [EOL] return None [EOL] [EOL] db_for_write = db_for_read [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import builtins [EOL] from typing import List , Any [EOL] from contextlib import contextmanager [EOL] from django . db import transaction [EOL] [EOL] [EOL] def uuid_from_url ( url ) : [EOL] [docstring] [EOL] [EOL] return url . split ( [string] ) [ - [number] ] [EOL] [EOL] [EOL] def iter_cursor_dicts ( cursor ) : [EOL] [docstring] [EOL] [EOL] columns = [ column . name for column in cursor . description ] [EOL] [EOL] for row in cursor . fetchall ( ) : [EOL] yield dict ( zip ( columns , row ) ) [EOL] [EOL] [EOL] class BatchWriter : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , model_class , batch_size = [number] , ignore_conflicts = False , silent = False ) : [EOL] self . model_class = model_class [EOL] self . models = [ ] [EOL] self . batch_size = batch_size [EOL] self . ignore_conflicts = ignore_conflicts [EOL] self . silent = silent [EOL] [EOL] @ contextmanager def atomic_transaction ( self , using = None , wipe = False ) : [EOL] with transaction . atomic ( using = using ) : [EOL] if wipe : [EOL] self . model_class . objects . all ( ) . delete ( ) [EOL] with self : [EOL] yield self [EOL] [EOL] def write ( self , model ) : [EOL] assert isinstance ( model , self . model_class ) [EOL] self . models . append ( model ) [EOL] if len ( self . models ) >= self . batch_size : [EOL] self . flush ( ) [EOL] [EOL] def flush ( self ) : [EOL] if self . models : [EOL] if not self . silent : [EOL] print ( f" [string] { len ( self . models ) } [string] " ) [EOL] self . model_class . objects . bulk_create ( self . models , ignore_conflicts = self . ignore_conflicts , ) [EOL] self . models = [ ] [EOL] [EOL] def __enter__ ( self ) : [EOL] return self [EOL] [EOL] def __exit__ ( self , exc_type , exc_value , traceback ) : [EOL] if exc_type is None : [EOL] self . flush ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type [EOL] import dwh [EOL] import typing [EOL] from django . db import models [EOL] [EOL] [EOL] UUID_LEN = [number] [EOL] [EOL] [EOL] class RapidproRun ( models . Model ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] flow_uuid = models . CharField ( max_length = UUID_LEN ) [EOL] [EOL] [comment] [EOL] flow_name = models . CharField ( max_length = [number] ) [EOL] [EOL] [comment] [EOL] user_uuid = models . CharField ( max_length = UUID_LEN ) [EOL] [EOL] [comment] [EOL] start_time = models . DateTimeField ( ) [EOL] [EOL] [comment] [EOL] end_time = models . DateTimeField ( ) [EOL] [EOL] [comment] [EOL] num_steps = models . IntegerField ( ) [EOL] [EOL] [comment] [EOL] exit_type = models . CharField ( max_length = [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] num_error_steps = models . IntegerField ( null = True ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] was_rent_history_received = models . BooleanField ( null = True ) [EOL] [EOL] [EOL] class OnlineRentHistoryRequest ( models . Model ) : [EOL] [docstring] [EOL] [EOL] created_at = models . DateTimeField ( ) [EOL] [EOL] [comment] [EOL] user_uuid = models . CharField ( max_length = UUID_LEN , blank = True , null = True ) [EOL] [EOL] [EOL] class LetterOfComplaintRequest ( models . Model ) : [EOL] [docstring] [EOL] [EOL] created_at = models . DateTimeField ( ) [EOL] [EOL] mail_choice = models . CharField ( max_length = [number] ) [EOL] [EOL] letter_sent_at = models . DateTimeField ( null = True , blank = True ) [EOL] [EOL] landlord_responded_by = models . DateTimeField ( null = True , blank = True ) [EOL] [EOL] landlord_did_not_respond_by = models . DateTimeField ( null = True , blank = True ) [EOL] [EOL] landlord_retaliated_by = models . DateTimeField ( null = True , blank = True ) [EOL] [EOL] repairs_made_by = models . DateTimeField ( null = True , blank = True ) [EOL] [EOL] interested_in_hp_action_by = models . DateTimeField ( null = True , blank = True ) [EOL] [EOL] [EOL] class EmergencyHPASigning ( models . Model ) : [EOL] [docstring] [EOL] [EOL] created_at = models . DateTimeField ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dwh.models.RapidproRun]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Type[dwh.models.RapidproRun]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dwh.models.RapidproRun]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Type[dwh.models.RapidproRun]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[dwh.models.RapidproRun]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[dwh.models.RapidproRun]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[dwh.models.RapidproRun]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dwh.models.RapidproRun]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dwh.models.RapidproRun]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dwh.models.OnlineRentHistoryRequest]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[dwh.models.OnlineRentHistoryRequest]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dwh.models.LetterOfComplaintRequest]$ 0 0 0 0 0 0 0 0 $typing.Type[dwh.models.LetterOfComplaintRequest]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dwh.models.LetterOfComplaintRequest]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dwh.models.LetterOfComplaintRequest]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dwh.models.LetterOfComplaintRequest]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dwh.models.LetterOfComplaintRequest]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dwh.models.LetterOfComplaintRequest]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dwh.models.LetterOfComplaintRequest]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dwh.models.EmergencyHPASigning]$ 0 0 0 0 0 0 0
	0
	0
	0
	0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . DateTimeField ( ) ) , ( [string] , models . CharField ( max_length = [number] ) ) , ( [string] , models . DateTimeField ( blank = True , null = True ) ) , ( [string] , models . DateTimeField ( blank = True , null = True ) ) , ( [string] , models . DateTimeField ( blank = True , null = True ) ) , ( [string] , models . DateTimeField ( blank = True , null = True ) ) , ( [string] , models . DateTimeField ( blank = True , null = True ) ) , ( [string] , models . DateTimeField ( blank = True , null = True ) ) , ] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class DataDrivenOnboardingConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class IssuesConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
import pathlib [EOL] from pathlib import Path [EOL] [EOL] [EOL] MY_DIR = Path ( __file__ ) . parent . resolve ( ) [EOL] ISSUE_STATS_SQLFILE = MY_DIR / [string] [EOL] [EOL] [EOL] def execute_issue_stats_query ( cursor ) : [EOL] cursor . execute ( ISSUE_STATS_SQLFILE . read_text ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterModelOptions ( name = [string] , options = { [string] : ( [string] , ) } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterUniqueTogether ( name = [string] , unique_together = set ( ) , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Tuple [EOL] import typing [EOL] _celery_available = True [EOL] [EOL] try : [EOL] import celery [comment] [EOL] except ModuleNotFoundError : [EOL] _celery_available = False [EOL] [EOL] if _celery_available : [EOL] from . celery import app as celery_app [EOL] [EOL] __all__ = ( [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from django . conf import settings [EOL] import rollbar [EOL] [EOL] [EOL] def init ( ) : [EOL] if settings . ROLLBAR is not None : [EOL] print ( [string] ) [EOL] [EOL] rollbar . init ( ** settings . ROLLBAR , handler = [string] ) [EOL] [EOL] def celery_base_data_hook ( request , data ) : [EOL] data [ [string] ] = [string] [EOL] [EOL] rollbar . BASE_DATA_HOOK = celery_base_data_hook [EOL] [EOL] [EOL] def report_exc_info ( ** kwargs ) : [EOL] if settings . ROLLBAR is not None : [EOL] rollbar . report_exc_info ( extra_data = kwargs ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , List , Match , Optional [EOL] import requests [EOL] import typing [EOL] import project [EOL] import logging [EOL] import builtins [EOL] from typing import Optional , Dict , List , NamedTuple [EOL] import re [EOL] import urllib . parse [EOL] import pydantic [EOL] import logging [EOL] from django . conf import settings [EOL] import requests [EOL] [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] MAPBOX_PLACES_URL = [string] [EOL] [EOL] MAPBOX_STATE_SHORT_CODE_RE = [string] [EOL] [EOL] MAPBOX_CITY_ID_RE = [string] [EOL] [EOL] [EOL] class MapboxFeatureContext ( pydantic . BaseModel ) : [EOL] id = ... [EOL] text = ... [EOL] short_code = ... [EOL] [EOL] [EOL] class MapboxFeature ( pydantic . BaseModel ) : [EOL] context = ... [EOL] text = ... [EOL] address = ... [EOL] place_type = ... [EOL] [EOL] [EOL] class MapboxResults ( pydantic . BaseModel ) : [EOL] features = ... [EOL] [EOL] [EOL] class StreetAddress ( NamedTuple ) : [EOL] address = ... [EOL] zip_code = ... [EOL] [EOL] [EOL] def mapbox_places_request ( query , args ) : [EOL] [docstring] [EOL] [EOL] if not settings . MAPBOX_ACCESS_TOKEN : [EOL] return None [EOL] [EOL] query = query . replace ( [string] , [string] ) [EOL] [EOL] try : [EOL] response = requests . get ( f"{ MAPBOX_PLACES_URL } [string] { urllib . parse . quote ( query ) } [string] " , { [string] : settings . MAPBOX_ACCESS_TOKEN , [string] : [string] , [string] : [string] , ** args , } , timeout = settings . MAPBOX_TIMEOUT ) [EOL] if response . status_code == [number] : [EOL] [comment] [EOL] [comment] [EOL] return MapboxResults ( features = [ ] ) [EOL] response . raise_for_status ( ) [EOL] return MapboxResults ( ** response . json ( ) ) [EOL] except Exception : [EOL] logger . exception ( f' [string] { MAPBOX_PLACES_URL }' ) [EOL] return None [EOL] [EOL] [EOL] def find_city ( city , state ) : [EOL] [docstring] [EOL] [EOL] results = mapbox_places_request ( f"{ city } [string] { state }" , { [string] : [string] . join ( [ [string] , [string] ] ) , } ) [EOL] if not results : [EOL] return None [EOL] cities = [ ] [EOL] for result in results . features : [EOL] result_state = get_mapbox_state ( result ) [EOL] if result_state == state : [EOL] cities . append ( result . text ) [EOL] return cities [EOL] [EOL] [EOL] def find_address ( address , city , state , zip_code ) : [EOL] [docstring] [EOL] [EOL] city = city . strip ( ) [EOL] results = mapbox_places_request ( f"{ address } [string] { city } [string] { state } [string] { zip_code }" , { [string] : [string] , } ) [EOL] if not results : [EOL] return None [EOL] addrs = [ ] [EOL] for result in results . features : [EOL] state_matches = get_mapbox_state ( result ) == state [EOL] result_zip_code = get_mapbox_zip_code ( result ) [EOL] if state_matches and result_zip_code and does_city_match ( city , result ) : [EOL] addrs . append ( StreetAddress ( address = get_mapbox_street_addr ( result ) , zip_code = result_zip_code ) ) [EOL] return addrs [EOL] [EOL] [EOL] def get_mapbox_street_addr ( feature ) : [EOL] [docstring] [EOL] [EOL] assert [string] in feature . place_type [EOL] [EOL] [comment] [EOL] [comment] [EOL] if feature . address : [EOL] return f"{ feature . address } [string] { feature . text }" [EOL] return feature . text [EOL] [EOL] [EOL] def get_state_from_short_code ( short_code ) : [EOL] [docstring] [EOL] [EOL] if short_code == [string] : [EOL] return [string] [EOL] match = re . match ( MAPBOX_STATE_SHORT_CODE_RE , short_code or [string] ) [EOL] if match : [EOL] return match [ [number] ] [EOL] return None [EOL] [EOL] [EOL] def get_mapbox_state ( feature ) : [EOL] [docstring] [EOL] [EOL] for context in feature . context : [EOL] state = get_state_from_short_code ( context . short_code ) [EOL] if state : [EOL] return state [EOL] return None [EOL] [EOL] [EOL] def get_mapbox_zip_code ( feature ) : [EOL] [docstring] [EOL] [EOL] for context in feature . context : [EOL] if context . id . startswith ( [string] ) : [EOL] return context . text [EOL] return None [EOL] [EOL] [EOL] def does_city_match ( city , feature ) : [EOL] [docstring] [EOL] [EOL] for context in feature . context : [EOL] if re . match ( MAPBOX_CITY_ID_RE , context . id ) and context . text . lower ( ) == city . lower ( ) : [EOL] return True [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[MapboxFeatureContext]$ 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[MapboxFeature]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Optional[MapboxResults]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.List[StreetAddress]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict , Union , Type , List [EOL] import hashlib [EOL] import typing [EOL] import builtins [EOL] import base64 [EOL] from functools import partial [EOL] from hashlib import sha256 [EOL] from typing import Dict , List , Union [EOL] from django . conf import settings [EOL] from django . http import HttpResponseRedirect [EOL] from csp . middleware import CSPMiddleware [EOL] [EOL] from project . util . site_util import get_protocol [EOL] from . import monkeypatch_rollbar [EOL] [EOL] [EOL] CspUpdateDict = Dict [ str , Union [ str , List [ str ] ] ] [EOL] SimpleCspUpdateDict = Dict [ str , List [ str ] ] [EOL] [EOL] [EOL] def to_str_list ( value ) : [EOL] if isinstance ( value , str ) : [EOL] return [ value ] [EOL] return value [EOL] [EOL] [EOL] class CSPHashingMiddleware ( CSPMiddleware ) : [EOL] [docstring] [EOL] [EOL] def _allow_inline_script ( self , request , content ) : [EOL] m = sha256 ( ) [EOL] m . update ( content . encode ( [string] ) ) [EOL] b64hash = base64 . b64encode ( m . digest ( ) ) . decode ( [string] ) [EOL] hashval = f" [string] { b64hash } [string] " [EOL] prev = getattr ( request , [string] , [ ] ) [EOL] setattr ( request , [string] , prev + [ hashval ] ) [EOL] [EOL] def _csp_update ( self , request , ** kwargs ) : [EOL] update = dict ( ( k . lower ( ) . replace ( [string] , [string] ) , v ) for k , v in kwargs . items ( ) ) [EOL] prev = getattr ( request , [string] , [ ] ) [EOL] setattr ( request , [string] , prev + [ update ] ) [EOL] [EOL] def process_request ( self , request ) : [EOL] super ( ) . process_request ( request ) [EOL] allow_inline_script = partial ( self . _allow_inline_script , request ) [EOL] request . allow_inline_script = allow_inline_script [EOL] request . csp_update = partial ( self . _csp_update , request ) [EOL] [EOL] def _merge_csp_updates ( self , csp_updates ) : [EOL] result = { } [EOL] [EOL] for update in csp_updates : [EOL] for key , value in update . items ( ) : [EOL] result [ key ] = result . get ( key , [ [string] ] ) + to_str_list ( value ) [EOL] [EOL] return result [EOL] [EOL] def process_response ( self , request , response ) : [EOL] script_hashes = getattr ( request , [string] , [ ] ) [EOL] csp_updates = getattr ( request , [string] , [ ] ) [EOL] response_csp_update = getattr ( response , [string] , { } ) [EOL] [EOL] csp_updates . append ( response_csp_update ) [EOL] [EOL] if script_hashes : [EOL] csp_updates . append ( { [string] : [ [string] ] + script_hashes } ) [EOL] [EOL] setattr ( response , [string] , self . _merge_csp_updates ( csp_updates ) ) [EOL] [EOL] return super ( ) . process_response ( request , response ) [EOL] [EOL] [EOL] def hostname_redirect_middleware ( get_response ) : [EOL] [docstring] [EOL] [EOL] def middleware ( request ) : [EOL] host = request . get_host ( ) [EOL] if host in settings . HOSTNAME_REDIRECTS : [EOL] new_host = settings . HOSTNAME_REDIRECTS [ host ] [EOL] path = request . get_full_path ( ) [EOL] return HttpResponseRedirect ( f'{ get_protocol ( ) } [string] { new_host }{ path }' ) [EOL] return get_response ( request ) [EOL] [EOL] return middleware [EOL] [EOL] [EOL] def rollbar_request_middleware ( get_response ) : [EOL] [docstring] [EOL] [EOL] def middleware ( request ) : [EOL] with monkeypatch_rollbar . set_current_rollbar_request ( request ) : [EOL] response = get_response ( request ) [EOL] return response [EOL] [EOL] return middleware [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $hashlib._Hash$ 0 0 0 0 0 $hashlib._Hash$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $hashlib._Hash$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $SimpleCspUpdateDict$ 0 0 0 $typing.List[CspUpdateDict]$ 0 0 0 $SimpleCspUpdateDict$ 0 0 0 0 0 0 0 0 $typing.List[CspUpdateDict]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $SimpleCspUpdateDict$ 0 0 0 0 $SimpleCspUpdateDict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $SimpleCspUpdateDict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[CspUpdateDict]$ 0 0 0 0 0 0 0 0 0 0 0 $CspUpdateDict$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[CspUpdateDict]$ 0 0 0 $CspUpdateDict$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 $typing.List[CspUpdateDict]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[CspUpdateDict]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] from . common_data import Choices [EOL] [EOL] [EOL] ALL = Choices . from_file ( [string] ) [EOL] [EOL] FULLY_SUPPORTED_ONLY = ALL . only ( [string] , [string] ) [EOL] [EOL] PARTIALLY_SUPPORTED_ONLY = ALL . only ( ) [EOL] [EOL] DEFAULT = ALL . en [EOL] [EOL] LOCALE_KWARGS = dict ( max_length = [number] , choices = ALL . choices , default = DEFAULT , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pathlib [EOL] import builtins [EOL] from pathlib import Path [EOL] from django . contrib . auth . hashers import UNUSABLE_PASSWORD_PREFIX [EOL] [EOL] from project . util . site_util import absolute_reverse [EOL] [EOL] [EOL] MY_DIR = Path ( __file__ ) . parent . resolve ( ) [EOL] USER_STATS_SQLFILE = MY_DIR / [string] [EOL] [EOL] [EOL] def execute_user_stats_query ( cursor , include_pad_bbl = False ) : [EOL] admin_url_begin , admin_url_end = absolute_reverse ( [string] , args = ( [number] , ) ) . split ( [string] ) [EOL] cursor . execute ( USER_STATS_SQLFILE . read_text ( ) , { [string] : include_pad_bbl , [string] : UNUSABLE_PASSWORD_PREFIX + [string] , [string] : admin_url_begin , [string] : admin_url_end } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import os [EOL] from celery import Celery [EOL] from celery . signals import worker_init , task_failure [EOL] [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] app = Celery ( [string] ) [EOL] [EOL] app . config_from_object ( [string] , namespace = [string] ) [EOL] app . autodiscover_tasks ( ) [EOL] [EOL] [EOL] @ worker_init . connect def init_rollbar ( * args , ** kwargs ) : [EOL] from . import celery_rollbar [EOL] [EOL] celery_rollbar . init ( ) [EOL] [EOL] [EOL] @ task_failure . connect def handle_task_failure ( ** kwargs ) : [EOL] from . import celery_rollbar [EOL] [EOL] celery_rollbar . report_exc_info ( ) [EOL] [EOL] [EOL] @ app . task ( bind = True ) def debug_task ( self ) : [EOL] print ( [string] . format ( self . request ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any , List [EOL] import typing [EOL] from django . conf import settings [EOL] from storages . backends . s3boto3 import S3Boto3Storage [EOL] [EOL] [EOL] class S3StaticFilesStorage ( S3Boto3Storage ) : [EOL] CORS_CONFIG = { [string] : [ { [string] : [ [string] ] , [string] : [ [string] ] } ] } [EOL] [EOL] def __init__ ( self ) : [EOL] super ( ) . __init__ ( bucket_name = settings . AWS_STORAGE_STATICFILES_BUCKET_NAME , gzip = True , default_acl = [string] , bucket_acl = [string] , querystring_auth = False ) [EOL] [EOL] def _get_or_create_bucket ( self , name ) : [EOL] bucket = super ( ) . _get_or_create_bucket ( name ) [EOL] bucket . Cors ( ) . put ( CORSConfiguration = self . CORS_CONFIG ) [EOL] return bucket [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[typing.Dict[builtins.str,typing.List[builtins.str]]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0
from typing import Any , Type , List [EOL] import graphene [EOL] import typing [EOL] import builtins [EOL] from typing import List , Type [EOL] import graphene [EOL] from graphene . utils . str_converters import to_snake_case [EOL] from graphene . types . mutation import Mutation [EOL] from django . utils . module_loading import autodiscover_modules [EOL] [EOL] [EOL] _is_initialized = False [EOL] [EOL] _session_info_classes = [ ] [EOL] [EOL] _queries_classes = [ ] [EOL] [EOL] _mutations_classes = [ ] [EOL] [EOL] [EOL] def register_session_info ( klass ) : [EOL] [docstring] [EOL] [EOL] _session_info_classes . append ( klass ) [EOL] return klass [EOL] [EOL] [EOL] def register_queries ( klass ) : [EOL] [docstring] [EOL] [EOL] _queries_classes . append ( klass ) [EOL] return klass [EOL] [EOL] [EOL] def register_mutation ( klass ) : [EOL] [docstring] [EOL] [EOL] name = f"{ klass . __name__ } [string] " [EOL] attr_name = to_snake_case ( klass . __name__ ) [EOL] _mutations_classes . append ( type ( name , tuple ( ) , { attr_name : klass . Field ( required = True ) } ) ) [EOL] [EOL] return klass [EOL] [EOL] [EOL] def _build_graphene_object_type ( name , classes , __doc__ ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] classes = sorted ( classes , key = lambda klass : klass . __name__ ) [EOL] [EOL] return type ( name , tuple ( [ * classes , graphene . ObjectType ] ) , { [string] : __doc__ } ) [EOL] [EOL] [EOL] def build_session_info ( ) : [EOL] _init ( ) [EOL] return _build_graphene_object_type ( [string] , _session_info_classes , [string] ) [EOL] [EOL] [EOL] def build_query ( ) : [EOL] _init ( ) [EOL] return _build_graphene_object_type ( [string] , _queries_classes , [string] ) [EOL] [EOL] [EOL] def build_mutations ( ) : [EOL] _init ( ) [EOL] return _build_graphene_object_type ( [string] , _mutations_classes , [string] ) [EOL] [EOL] [EOL] def _init ( ) : [EOL] global _is_initialized [EOL] [EOL] if not _is_initialized : [EOL] _is_initialized = True [EOL] autodiscover_modules ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.List[typing.Type]$ 0 0 0 0 0 $typing.List[typing.Type]$ 0 0 0 0 0 $typing.List[typing.Type]$ 0 0 0 0 0 0 0 $typing.Type$ 0 0 0 0 0 0 0 0 $typing.List[typing.Type]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type$ 0 0 0 0 0 0 0 0 $typing.List[typing.Type]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Type]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Type]$ 0 0 0 0 0 0 0 $typing.Type$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Type]$ 0 0 0 0 0 0 0 $typing.Type$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Type]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0
from typing import Optional [EOL] import typing [EOL] import project [EOL] import django [EOL] from typing import Optional [EOL] from contextlib import contextmanager [EOL] from django . http import HttpRequest [EOL] import rollbar [EOL] import threading [EOL] [EOL] [EOL] class CurrThreadRequest ( threading . local ) : [EOL] [docstring] [EOL] [EOL] value = None [EOL] [EOL] [EOL] _curr_rollbar_request = CurrThreadRequest ( ) [EOL] [EOL] _orig_rollbar_get_request = rollbar . get_request [EOL] [EOL] [EOL] @ contextmanager def set_current_rollbar_request ( request ) : [EOL] [docstring] [EOL] [EOL] _curr_rollbar_request . value = request [EOL] try : [EOL] yield [EOL] finally : [EOL] _curr_rollbar_request . value = None [EOL] [EOL] [EOL] def _new_rollbar_get_request ( ) : [EOL] [docstring] [EOL] [EOL] req = _curr_rollbar_request . value [EOL] if req is not None : [EOL] return req [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] return _orig_rollbar_get_request ( ) [EOL] [EOL] [EOL] rollbar . get_request = _new_rollbar_get_request [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[django.http.HttpRequest]$ 0 0 0 0 0 $project.monkeypatch_rollbar.CurrThreadRequest$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $project.monkeypatch_rollbar.CurrThreadRequest$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $project.monkeypatch_rollbar.CurrThreadRequest$ 0 0 0 0 0 0 0 0 $typing.Optional[django.http.HttpRequest]$ 0 0 0 0 0 0 0 0 0 $project.monkeypatch_rollbar.CurrThreadRequest$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Optional [EOL] import requests [EOL] import typing [EOL] import project [EOL] import logging [EOL] import builtins [EOL] from typing import List , Optional [EOL] import logging [EOL] import pydantic [EOL] import requests [EOL] from django . conf import settings [EOL] [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] class FeatureGeometry ( pydantic . BaseModel ) : [EOL] [comment] [EOL] type = ... [EOL] [EOL] [comment] [EOL] coordinates = ... [EOL] [EOL] [EOL] class FeatureProperties ( pydantic . BaseModel ) : [EOL] [comment] [EOL] [comment] [EOL] postalcode = ... [EOL] [EOL] [comment] [EOL] name = ... [EOL] [EOL] [comment] [EOL] street = ... [EOL] [EOL] [comment] [EOL] region = ... [EOL] [EOL] [comment] [EOL] locality = ... [EOL] [EOL] [comment] [EOL] borough = ... [EOL] [EOL] [comment] [EOL] borough_gid = ... [EOL] [EOL] [comment] [EOL] label = ... [EOL] [EOL] [comment] [EOL] pad_bbl = ... [EOL] [EOL] [comment] [EOL] pad_bin = ... [EOL] [EOL] [EOL] class Feature ( pydantic . BaseModel ) : [EOL] [comment] [EOL] type = ... [EOL] [EOL] geometry = ... [EOL] [EOL] properties = ... [EOL] [EOL] [EOL] def _log_replacements ( old , new ) : [EOL] [docstring] [EOL] [EOL] if old and new : [EOL] np = new [ [number] ] . properties [EOL] op = old [ [number] ] . properties [EOL] nstr = f"{ np . street } [string] { np . borough }" [EOL] ostr = f"{ op . street } [string] { op . borough }" [EOL] if nstr != ostr : [EOL] logger . info ( f" [string] { nstr } [string] { ostr } [string] " ) [EOL] [EOL] [EOL] def _promote_exact_address ( search_text , features ) : [EOL] [docstring] [EOL] [EOL] exact_matches = [ ] [EOL] other_matches = [ ] [EOL] [EOL] for feature in features : [EOL] p = feature . properties [EOL] addr_with_borough = f"{ p . name } [string] { p . borough }" [EOL] if addr_with_borough . lower ( ) == search_text . lower ( ) : [EOL] exact_matches . append ( feature ) [EOL] else : [EOL] other_matches . append ( feature ) [EOL] [EOL] return exact_matches + other_matches [EOL] [EOL] [EOL] def _promote_same_borough ( search_text , features ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] maybe_borough = search_text . split ( [string] ) [ - [number] ] . strip ( ) . lower ( ) [EOL] [EOL] same_borough = [ ] [EOL] other_boroughs = [ ] [EOL] for feature in features : [EOL] if feature . properties . borough . lower ( ) == maybe_borough : [EOL] same_borough . append ( feature ) [EOL] else : [EOL] other_boroughs . append ( feature ) [EOL] [EOL] new_features = same_borough + other_boroughs [EOL] _log_replacements ( features , new_features ) [EOL] return new_features [EOL] [EOL] [EOL] def search ( text ) : [EOL] [docstring] [EOL] [EOL] if not settings . GEOCODING_SEARCH_URL : [EOL] [comment] [EOL] return None [EOL] [EOL] try : [EOL] response = requests . get ( settings . GEOCODING_SEARCH_URL , { [string] : text } , timeout = settings . GEOCODING_TIMEOUT ) [EOL] if response . status_code != [number] : [EOL] raise Exception ( f' [string] { response . status_code }' ) [EOL] features = [ Feature ( ** kwargs ) for kwargs in response . json ( ) [ [string] ] ] [EOL] except pydantic . ValidationError : [EOL] logger . exception ( f' [string] { settings . GEOCODING_SEARCH_URL } [string] ' f' [string] { repr ( text ) }' ) [EOL] return None [EOL] except Exception : [EOL] logger . exception ( f' [string] { settings . GEOCODING_SEARCH_URL }' ) [EOL] return None [EOL] [EOL] return _promote_exact_address ( text , _promote_same_borough ( text , features ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $FeatureGeometry$ 0 0 0 0 $FeatureProperties$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[Feature]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[Feature]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.List[Feature]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import Choices [EOL] from typing import Tuple , Set , Optional , Any , Dict , Type , List [EOL] import enum [EOL] import pathlib [EOL] import typing [EOL] import builtins [EOL] import json [EOL] from enum import Enum [EOL] from typing import List , Tuple , Dict , Optional , Set [EOL] from pathlib import Path [EOL] import pydantic [EOL] [EOL] [EOL] MY_DIR = Path ( __file__ ) . parent . resolve ( ) [EOL] [EOL] COMMON_DATA_DIR = MY_DIR . parent / [string] [EOL] [EOL] DjangoChoices = List [ Tuple [ str , str ] ] [EOL] [EOL] [EOL] class _ValidatedChoices ( pydantic . BaseModel ) : [EOL] [docstring] [EOL] [EOL] choices = ... [EOL] [EOL] [EOL] class Choices : [EOL] [docstring] [EOL] [EOL] choices = ... [EOL] [EOL] choices_dict = ... [EOL] [EOL] enum = ... [EOL] [EOL] name = ... [EOL] [EOL] def __init__ ( self , choices , name = [string] ) : [EOL] self . name = name [EOL] self . choices = choices [EOL] self . choices_dict = dict ( self . choices ) [EOL] self . enum = Enum ( name , [ ( choice , label ) for choice , label in self . choices ] ) [EOL] [EOL] def __getattr__ ( self , value ) : [EOL] if value in self . choices_dict : [EOL] return value [EOL] raise AttributeError ( f'{ value } [string] ' ) [EOL] [EOL] def get_label ( self , value ) : [EOL] return self . choices_dict [ value ] [EOL] [EOL] def get_enum_member ( self , value ) : [EOL] return getattr ( self . enum , value ) [EOL] [EOL] def validate_choices ( self , * values ) : [EOL] for value in values : [EOL] if value not in self . choices_dict : [EOL] raise ValueError ( f" [string] { value } [string] " ) [EOL] [EOL] def only ( self , * values , name = None ) : [EOL] name = name or self . name [EOL] self . validate_choices ( * values ) [EOL] choices = [ ( choice , label ) for choice , label in self . choices if choice in values ] [EOL] return Choices ( choices , name ) [EOL] [EOL] @ property def choice_set ( self ) : [EOL] return set ( self . choices_dict . keys ( ) ) [EOL] [EOL] @ classmethod def from_file ( cls , * path , name = [string] ) : [EOL] obj = load_json ( * path ) [EOL] return cls ( _ValidatedChoices ( choices = obj ) . choices , name = name ) [EOL] [EOL] [EOL] def load_json ( * path ) : [EOL] return json . loads ( COMMON_DATA_DIR . joinpath ( * path ) . read_text ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $DjangoChoices$ 0 0 0 0 0 0 0 0 0 0 0 0 $DjangoChoices$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $enum.Enum$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $Choices.enum.Enum$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'Choices'$ 0 0 0 0 $builtins.str$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 $DjangoChoices$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $DjangoChoices$ 0 0 0 $builtins.str$ 0 0 0 0 0 $DjangoChoices$ 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Pattern , Any , List [EOL] import logging [EOL] import typing [EOL] import builtins [EOL] import re [EOL] import logging [EOL] from django . conf import settings [EOL] [EOL] IGNORE_PATHS = [ [string] , [string] ] [EOL] [EOL] IGNORE_PATHS_PATTERN = [string] . join ( [ re . escape ( path ) for path in IGNORE_PATHS ] ) [EOL] [EOL] STATIC_REGEX = re . compile ( [string] + re . escape ( settings . STATIC_URL ) + [string] + IGNORE_PATHS_PATTERN + [string] ) [EOL] [EOL] [EOL] def skip_static_requests ( record ) : [EOL] [docstring] [EOL] [EOL] if not ( record . args and isinstance ( record . args , tuple ) ) : [EOL] return True [EOL] request_line = record . args [ [number] ] [EOL] if isinstance ( request_line , str ) and STATIC_REGEX . match ( request_line ) : [EOL] return False [EOL] return True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Optional [EOL] import typing [EOL] import project [EOL] from django . core . management . base import BaseCommand , CommandError [EOL] [EOL] from project import geocoding [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] features = geocoding . search ( options [ [string] ] ) [EOL] if features is None : [EOL] raise CommandError ( [string] ) [EOL] self . stdout . write ( [string] ) [EOL] for feature in features : [EOL] self . stdout . write ( f"{ feature . properties . label } [string] " f" [string] { feature . properties . pad_bbl } [string] " ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.List[project.geocoding.Feature]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.List[project.geocoding.Feature]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.List[project.geocoding.Feature]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import datetime [EOL] import builtins [EOL] import datetime [EOL] from io import BytesIO [EOL] from django . conf import settings [EOL] from django . core . files . storage import DefaultStorage [EOL] from django . core . management . base import BaseCommand [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , help = [string] , action = [string] ) [EOL] [EOL] def make_file_contents ( self ) : [EOL] now = datetime . datetime . now ( ) [EOL] return ( f' [string] { now } [string] ' f' [string] ' ) . encode ( [string] ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] no_delete = options [ [string] ] [EOL] contents = self . make_file_contents ( ) [EOL] storage = DefaultStorage ( ) [EOL] self . stdout . write ( f' [string] { settings . DEFAULT_FILE_STORAGE } [string] ' ) [EOL] filename = storage . save ( [string] , BytesIO ( contents ) ) [EOL] self . stdout . write ( f' [string] { filename } [string] ' ) [EOL] try : [EOL] self . stdout . write ( [string] ) [EOL] assert storage . exists ( filename ) [EOL] self . stdout . write ( [string] ) [EOL] with storage . open ( filename ) as f : [EOL] assert f . read ( ) == contents [EOL] self . stdout . write ( [string] ) [EOL] finally : [EOL] if no_delete : [EOL] self . stdout . write ( f' [string] { filename } [string] ' ) [EOL] else : [EOL] self . stdout . write ( [string] ) [EOL] storage . delete ( filename ) [EOL] self . stdout . write ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] import shlex [EOL] import subprocess [EOL] from django . core . management . base import BaseCommand [EOL] from django . utils import autoreload [EOL] [EOL] import project [EOL] [EOL] [EOL] def restart_celery ( ) : [EOL] cmd = [string] [EOL] subprocess . call ( shlex . split ( cmd ) ) [EOL] cmd = f' [string] { project . __name__ } [string] ' [EOL] subprocess . call ( shlex . split ( cmd ) ) [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] def handle ( self , * args , ** options ) : [EOL] print ( [string] ) [EOL] autoreload . run_with_reloader ( restart_celery ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from django . core . management . base import BaseCommand [EOL] [EOL] from project import mapbox [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] ) [EOL] parser . add_argument ( [string] ) [EOL] parser . add_argument ( [string] ) [EOL] parser . add_argument ( [string] ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] address = options [ [string] ] [EOL] city = options [ [string] ] [EOL] state = options [ [string] ] . upper ( ) [EOL] zip_code = options [ [string] ] [EOL] print ( mapbox . find_address ( address , city , state , zip_code ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0
from typing import Any [EOL] import typing [EOL] from django . core . management . base import BaseCommand , CommandError [EOL] from django . conf import settings [EOL] [EOL] from project . tasks import raise_test_error [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] if not settings . CELERY_BROKER_URL : [EOL] raise CommandError ( [string] ) [EOL] id = options [ [string] ] [EOL] self . stdout . write ( f" [string] { raise_test_error . name } [string] { repr ( id ) } [string] " ) [EOL] raise_test_error . delay ( id ) [EOL] self . stdout . write ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0
	0
import builtins [EOL] from django . core . management . base import BaseCommand [EOL] [EOL] from project import mapbox [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] ) [EOL] parser . add_argument ( [string] ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] city = options [ [string] ] [EOL] state = options [ [string] ] [EOL] [EOL] print ( mapbox . find_city ( city , state ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0
from typing import Any , List [EOL] import pathlib [EOL] import typing [EOL] import builtins [EOL] from typing import Any [EOL] from pathlib import Path [EOL] import glob [EOL] [EOL] [EOL] class LambdaService : [EOL] [docstring] [EOL] [EOL] def run_handler ( self , event ) : [EOL] [docstring] [EOL] [EOL] raise NotImplementedError ( ) [EOL] [EOL] [EOL] def get_latest_mtime_for_bundle ( path ) : [EOL] [docstring] [EOL] [EOL] filenames = [ str ( path ) ] + glob . glob ( str ( path . with_name ( f" [string] { path . name }" ) ) ) [EOL] latest_mtime = max ( Path ( filename ) . stat ( ) . st_mtime for filename in filenames ) [EOL] return latest_mtime [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Optional , Any , List , BinaryIO [EOL] import typing [EOL] import pathlib [EOL] import subprocess [EOL] import logging [EOL] import builtins [EOL] import sys [EOL] import atexit [EOL] import logging [EOL] import subprocess [EOL] import json [EOL] from dataclasses import dataclass [EOL] from typing import List , Any , BinaryIO , Optional [EOL] from threading import RLock [EOL] from pathlib import Path [EOL] [EOL] from . lambda_service import LambdaService , get_latest_mtime_for_bundle [EOL] [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] @ dataclass class LambdaPool ( LambdaService ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] name = ... [EOL] [EOL] [comment] [EOL] script_path = ... [EOL] [EOL] [comment] [EOL] cwd = ... [EOL] [EOL] [comment] [EOL] size = [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] timeout_secs = [number] [EOL] [EOL] [comment] [EOL] interpreter_path = Path ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] restart_on_script_change = False [EOL] [EOL] [comment] [EOL] [comment] [EOL] stderr = sys . stderr . buffer if hasattr ( sys . stderr , [string] ) else None [EOL] [EOL] def __post_init__ ( self ) : [EOL] self . __processes = [ ] [EOL] self . __lock = RLock ( ) [EOL] self . __script_path_mtime = [number] [EOL] [EOL] def __create_process ( self ) : [EOL] [docstring] [EOL] [EOL] child = subprocess . Popen ( [ str ( self . interpreter_path ) , str ( self . script_path ) ] , stdin = subprocess . PIPE , stdout = subprocess . PIPE , stderr = subprocess . PIPE , cwd = self . cwd ) [EOL] logger . debug ( f" [string] { self . name } [string] { child . pid } [string] " ) [EOL] return child [EOL] [EOL] def __get_process ( self ) : [EOL] [docstring] [EOL] [EOL] with self . __lock : [EOL] if self . restart_on_script_change : [EOL] mtime = get_latest_mtime_for_bundle ( self . script_path ) [EOL] if mtime != self . __script_path_mtime : [EOL] self . __script_path_mtime = mtime [EOL] logger . debug ( f" [string] { self . script_path . name } [string] " f" [string] { self . name } [string] " ) [EOL] self . empty ( ) [EOL] [EOL] [comment] [EOL] while len ( self . __processes ) < self . size : [EOL] self . __processes . append ( self . __create_process ( ) ) [EOL] [EOL] [comment] [EOL] atexit . register ( self . empty ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] return self . __processes . pop ( [number] ) [EOL] [EOL] def empty ( self ) : [EOL] [docstring] [EOL] [EOL] with self . __lock : [EOL] while self . __processes : [EOL] child = self . __processes . pop ( ) [EOL] child . kill ( ) [EOL] logger . debug ( f" [string] { self . name } [string] { child . pid } [string] " ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] atexit . unregister ( self . empty ) [EOL] [EOL] def run_handler ( self , event , timeout_secs = None , enable_stderr = True ) : [EOL] [docstring] [EOL] [EOL] if timeout_secs is None : [EOL] timeout_secs = self . timeout_secs [EOL] [EOL] stderr_file = self . stderr if enable_stderr else None [EOL] [EOL] child = self . __get_process ( ) [EOL] try : [EOL] ( stdout , stderr ) = child . communicate ( json . dumps ( event ) . encode ( [string] ) , timeout_secs ) [EOL] except subprocess . TimeoutExpired as e : [EOL] child . kill ( ) [EOL] logger . warning ( f" [string] { self . name } [string] { child . pid } [string] " ) [EOL] raise e [EOL] [EOL] if stderr_file : [EOL] stderr_file . write ( stderr ) [EOL] stderr_file . flush ( ) [EOL] [EOL] if child . returncode != [number] : [EOL] logger . warning ( f'{ self . name } [string] ' ) [EOL] raise subprocess . CalledProcessError ( child . returncode , child . args , output = stdout , stderr = stderr ) [EOL] [EOL] try : [EOL] return json . loads ( stdout . decode ( [string] ) ) [EOL] except Exception as e : [EOL] logger . warning ( f'{ self . name } [string] ' ) [EOL] raise MalformedResponseError ( e , self . name , output = stdout , stderr = stderr ) [EOL] [EOL] [EOL] class MalformedResponseError ( Exception ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , wrapped_exc , name , output , stderr ) : [EOL] self . wrapped_exc = wrapped_exc [EOL] self . name = name [EOL] self . output = output [EOL] self . stderr = stderr [EOL] [EOL] def __str__ ( self ) : [EOL] return ( f" [string] { self . name } [string] " f" [string] { self . wrapped_exc } [string] " ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 $typing.Optional[typing.BinaryIO]$ 0 0 0 $typing.Optional[typing.BinaryIO]$ 0 0 0 0 0 0 0 $typing.Optional[typing.BinaryIO]$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $typing.List[subprocess.Popen]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $subprocess.Popen$ 0 0 0 0 0 0 0 0 $subprocess.Popen[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 $subprocess.Popen[typing.Any]$ 0 0 0 0 0 0 0 0 $subprocess.Popen[typing.Any]$ 0 0 0 $subprocess.Popen$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 $typing.Optional[typing.BinaryIO]$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $subprocess.Popen[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $subprocess.Popen[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $subprocess.Popen[typing.Any]$ 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 $subprocess.Popen[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.BinaryIO]$ 0 0 $typing.Optional[typing.BinaryIO]$ 0 0 0 0 0 0 $typing.Optional[typing.BinaryIO]$ 0 0 0 0 0 0 0 $subprocess.Popen[typing.Any]$ 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $subprocess.Popen[typing.Any]$ 0 0 0 $subprocess.Popen[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.Exception$ 0 $builtins.str$ 0 $builtins.bytes$ 0 $builtins.bytes$ 0 0 0 0 0 $builtins.Exception$ 0 $builtins.Exception$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.bytes$ 0 $builtins.bytes$ 0 0 0 $builtins.bytes$ 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Iterator , List [EOL] import typing [EOL] import _csv [EOL] import project [EOL] import django [EOL] import builtins [EOL] import csv [EOL] from typing import Any , Iterator , List [EOL] from django . http import StreamingHttpResponse [EOL] [EOL] [EOL] def transform_csv_row ( row ) : [EOL] for item in row : [EOL] if isinstance ( item , ( list , tuple ) ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] yield [string] . join ( [ str ( listitem ) for listitem in item ] ) [EOL] else : [EOL] yield item [EOL] [EOL] [EOL] def generate_csv_rows ( cursor ) : [EOL] yield [ column . name for column in cursor . description ] [EOL] [EOL] while True : [EOL] row = cursor . fetchone ( ) [EOL] if row is None : [EOL] break [EOL] yield list ( transform_csv_row ( row ) ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] class Echo : [EOL] value = [string] [EOL] [EOL] def write ( self , value ) : [EOL] assert isinstance ( value , str ) [EOL] self . value += value [EOL] [EOL] [EOL] def generate_streaming_csv ( rows ) : [EOL] pseudo_buffer = Echo ( ) [EOL] writer = csv . writer ( pseudo_buffer ) [EOL] for row in rows : [EOL] writer . writerow ( row ) [EOL] yield pseudo_buffer . value [EOL] pseudo_buffer . value = [string] [EOL] [EOL] [EOL] def streaming_csv_response ( rows , filename ) : [EOL] response = StreamingHttpResponse ( generate_streaming_csv ( rows ) , content_type = [string] ) [EOL] response [ [string] ] = f' [string] { filename } [string] ' [EOL] return response [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 $typing.Iterator[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.http.StreamingHttpResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type , List [EOL] import typing [EOL] import project [EOL] import builtins [EOL] from typing import List , Dict , Union , Any [EOL] [EOL] [EOL] class InstanceChangeTracker : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] field_type = Union [ str ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] original_values = ... [EOL] [EOL] def __init__ ( self , instance , field_names ) : [EOL] self . instance = instance [EOL] self . field_names = field_names [EOL] self . original_values = { } [EOL] self . set_to_unchanged ( ) [EOL] [EOL] def are_any_fields_blank ( self ) : [EOL] [docstring] [EOL] [EOL] for name in self . field_names : [EOL] if not getattr ( self . instance , name ) : [EOL] return True [EOL] return False [EOL] [EOL] def set_to_unchanged ( self ) : [EOL] [docstring] [EOL] [EOL] for name in self . field_names : [EOL] value = getattr ( self . instance , name ) [EOL] self . original_values [ name ] = value [EOL] [EOL] def has_changed ( self ) : [EOL] [docstring] [EOL] [EOL] for name in self . field_names : [EOL] value = getattr ( self . instance , name ) [EOL] if value != self . original_values [ name ] : [EOL] return True [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,InstanceChangeTracker.field_type]$ 0 0 0 0 0 $None$ 0 0 0 $typing.Any$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] import builtins [EOL] from typing import NamedTuple , List [EOL] from django . utils . html import format_html [EOL] from django . utils . safestring import SafeText [EOL] [EOL] [EOL] class Hyperlink ( NamedTuple ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] name = ... [EOL] [EOL] [comment] [EOL] url = ... [EOL] [EOL] @ property def admin_button_html ( self ) : [EOL] [docstring] [EOL] [EOL] return format_html ( [string] , self . url , self . name ) [EOL] [EOL] @ staticmethod def join_admin_buttons ( links ) : [EOL] [docstring] [EOL] [EOL] return SafeText ( [string] . join ( map ( lambda link : link . admin_button_html , links ) ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.List['Hyperlink']$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List['Hyperlink']$ 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import django [EOL] import builtins [EOL] from typing import List [EOL] import math [EOL] from email . mime . base import MIMEBase [EOL] from django . core . mail . message import EmailMultiAlternatives , EmailMessage [EOL] from django . core . mail . backends . console import EmailBackend as ConsoleEmailBackend [EOL] [EOL] [EOL] def get_kb ( content ) : [EOL] return math . ceil ( len ( content ) / [number] ) [EOL] [EOL] [EOL] def log_extra_email_content ( message , extra_content ) : [EOL] for attachment in message . attachments : [EOL] extra = [string] [EOL] if isinstance ( attachment , MIMEBase ) : [EOL] mimetype = attachment [ [string] ] [EOL] content = attachment . as_bytes ( ) [EOL] else : [EOL] filename , content , mimetype = attachment [EOL] extra = f" [string] { filename } [string] " [EOL] kb = get_kb ( content ) [EOL] extra_content . append ( f" [string] { kb } [string] { mimetype } [string] { extra } [string] " ) [EOL] [EOL] [EOL] def log_extra_alternatives ( message , extra_content ) : [EOL] for content , mimetype in message . alternatives : [EOL] kb = get_kb ( content ) [EOL] extra_content . append ( f" [string] { kb } [string] { mimetype } [string] " ) [EOL] [EOL] [EOL] class EmailBackend ( ConsoleEmailBackend ) : [EOL] [docstring] [EOL] [EOL] def __log_extra_content ( self , extra_content ) : [EOL] if extra_content : [EOL] self . stream . write ( [string] [string] ) [EOL] for line in extra_content : [EOL] self . stream . write ( f" [string] { line } [string] " ) [EOL] self . stream . write ( [string] ) [EOL] [EOL] def write_message ( self , message ) : [EOL] extra_content = [ ] [EOL] [EOL] if isinstance ( message , EmailMessage ) : [EOL] log_extra_email_content ( message , extra_content ) [EOL] if isinstance ( message , EmailMultiAlternatives ) : [EOL] log_extra_alternatives ( message , extra_content ) [EOL] message = EmailMessage ( subject = message . subject , body = message . body , from_email = message . from_email , to = message . to , bcc = message . bcc , connection = message . connection , attachments = None , headers = message . extra_headers , cc = message . cc , reply_to = message . reply_to , ) [EOL] [EOL] self . __log_extra_content ( extra_content ) [EOL] super ( ) . write_message ( message ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.List[builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0
from typing import Dict [EOL] import typing [EOL] import project [EOL] import django [EOL] import builtins [EOL] import abc [EOL] from typing import Dict [EOL] from functools import partial [EOL] from textwrap import dedent [EOL] from django . http import HttpRequest [EOL] from django . utils . safestring import SafeString [EOL] from django . utils . functional import SimpleLazyObject [EOL] [EOL] from project . middleware import CspUpdateDict [EOL] [EOL] [EOL] class JsSnippetContextProcessor ( metaclass = abc . ABCMeta ) : [EOL] [docstring] [EOL] [EOL] @ property @ abc . abstractmethod def template ( self ) : [EOL] [docstring] [EOL] [EOL] pass [EOL] [EOL] @ property @ abc . abstractmethod def var_name ( self ) : [EOL] [docstring] [EOL] [EOL] pass [EOL] [EOL] @ property def csp_updates ( self ) : [EOL] [docstring] [EOL] [EOL] return { } [EOL] [EOL] def is_enabled ( self ) : [EOL] [docstring] [EOL] [EOL] return True [EOL] [EOL] def get_context ( self ) : [EOL] [docstring] [EOL] [EOL] return { } [EOL] [EOL] def get_html ( self , request ) : [EOL] [docstring] [EOL] [EOL] inline_script = dedent ( self . template ) . strip ( ) % self . get_context ( ) [EOL] request . allow_inline_script ( inline_script ) [EOL] request . csp_update ( ** self . csp_updates ) [EOL] return SafeString ( f" [string] { inline_script } [string] " ) [EOL] [EOL] def __call__ ( self , request ) : [EOL] [docstring] [EOL] [EOL] if not self . is_enabled ( ) : [EOL] return { } [EOL] return { self . var_name : SimpleLazyObject ( partial ( self . get_html , request ) ) } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $project.middleware.CspUpdateDict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.utils.safestring.SafeString$ 0 0 0 $django.http.HttpRequest$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.http.HttpRequest$ 0 0 0 $builtins.str$ 0 0 $django.http.HttpRequest$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $django.http.HttpRequest$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.http.HttpRequest$ 0 0 0 0
from typing import Any , Optional , List [EOL] import typing [EOL] import builtins [EOL] import django [EOL] from typing import Optional [EOL] import re [EOL] from django . contrib . sites . models import Site [EOL] from django . http import HttpRequest [EOL] from django . conf import settings [EOL] from django . urls import reverse [EOL] [EOL] from . . common_data import Choices [EOL] [EOL] [EOL] SITE_CHOICES = Choices . from_file ( [string] ) [EOL] [EOL] [EOL] def get_default_site ( ) : [EOL] [docstring] [EOL] [EOL] return Site . objects . _get_site_by_id ( settings . DEFAULT_SITE_ID ) [EOL] [EOL] [EOL] def get_site_from_request_or_default ( request = None ) : [EOL] [docstring] [EOL] [EOL] if request is None : [EOL] return get_default_site ( ) [EOL] try : [EOL] return Site . objects . get_current ( request ) [EOL] except Site . DoesNotExist : [EOL] return get_default_site ( ) [EOL] [EOL] [EOL] def get_site_of_type ( site_type ) : [EOL] [docstring] [EOL] [EOL] for site in Site . objects . all ( ) : [EOL] if get_site_type ( site ) == site_type : [EOL] return site [EOL] raise ValueError ( f" [string] { site_type }" ) [EOL] [EOL] [EOL] def get_site_type ( site ) : [EOL] [docstring] [EOL] [EOL] if re . match ( [string] , site . name , re . IGNORECASE ) : [EOL] return SITE_CHOICES . NORENT [EOL] return SITE_CHOICES . JUSTFIX [EOL] [EOL] [EOL] def get_site_origin ( site ) : [EOL] [docstring] [EOL] [EOL] return absolutify_url ( [string] , site = site ) [ : - [number] ] [EOL] [EOL] [EOL] def get_protocol ( ) : [EOL] return [string] if settings . DEBUG else [string] [EOL] [EOL] [EOL] def absolutify_url ( url , request = None , site = None , ) : [EOL] [docstring] [EOL] [EOL] if url . startswith ( [string] ) or url . startswith ( [string] ) : [EOL] return url [EOL] [EOL] if not url . startswith ( [string] ) : [EOL] raise ValueError ( f" [string] { url }" ) [EOL] [EOL] site = site or get_site_from_request_or_default ( request ) [EOL] host = site . domain [EOL] return f"{ get_protocol ( ) } [string] { host }{ url }" [EOL] [EOL] [EOL] def absolute_reverse ( * args , request = None , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] return absolutify_url ( reverse ( * args , ** kwargs ) , request = request ) [EOL] [EOL] [EOL] def get_canonical_url ( request ) : [EOL] [docstring] [EOL] [EOL] return absolutify_url ( request . get_full_path ( ) , request ) [EOL] [EOL] [EOL] def get_site_base_name ( site_type ) : [EOL] [docstring] [EOL] [EOL] if site_type == SITE_CHOICES . JUSTFIX : [EOL] return [string] [EOL] elif site_type == SITE_CHOICES . NORENT : [EOL] return [string] [EOL] raise ValueError ( f" [string] { site_type }" ) [EOL] [EOL] [EOL] def get_site_name ( site_type = SITE_CHOICES . JUSTFIX ) : [EOL] [docstring] [EOL] [EOL] words = [ get_site_base_name ( site_type ) ] [EOL] [EOL] if settings . NAVBAR_LABEL : [EOL] words . append ( settings . NAVBAR_LABEL ) [EOL] [EOL] return [string] . join ( words ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $django.contrib.sites.models.Site$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.contrib.sites.models.Site$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.contrib.sites.models.Site$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Pattern , Dict , Any [EOL] import typing [EOL] import builtins [EOL] import re [EOL] from typing import Dict , Any [EOL] [EOL] from django import forms [EOL] from django . utils . translation import gettext as _ [EOL] from django . core . exceptions import ValidationError [EOL] [EOL] [EOL] PHONE_NUMBER_LEN = [number] [EOL] [EOL] ALL_DIGITS_RE = re . compile ( [string] ) [EOL] [EOL] [EOL] def get_model_field_kwargs ( ) : [EOL] return dict ( max_length = PHONE_NUMBER_LEN , validators = [ validate_phone_number ] , help_text = [string] ) [EOL] [EOL] [EOL] def validate_phone_number ( value ) : [EOL] if len ( value ) != PHONE_NUMBER_LEN : [EOL] raise ValidationError ( _ ( [string] ) % { [string] : PHONE_NUMBER_LEN , } ) [EOL] if not ALL_DIGITS_RE . fullmatch ( value ) : [EOL] raise ValidationError ( _ ( [string] ) ) [EOL] if value [ [number] ] in ( [string] , [string] ) : [EOL] [comment] [EOL] [comment] [EOL] raise ValidationError ( _ ( [string] ) % { [string] : value [ [number] : [number] ] , } ) [EOL] [EOL] [EOL] def humanize ( phone_number ) : [EOL] if len ( phone_number ) != PHONE_NUMBER_LEN : [EOL] return phone_number [EOL] area_code = phone_number [ [number] : [number] ] [EOL] first_three_digits = phone_number [ [number] : [number] ] [EOL] last_digits = phone_number [ [number] : ] [EOL] return f" [string] { area_code } [string] { first_three_digits } [string] { last_digits }" [EOL] [EOL] [EOL] class USPhoneNumberField ( forms . CharField ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] kwargs [ [string] ] = [number] [comment] [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] def clean ( self , value ) : [EOL] cleaned = super ( ) . clean ( value ) [EOL] cleaned = [string] . join ( [ ch for ch in cleaned if ch in [string] ] ) [EOL] if len ( cleaned ) == PHONE_NUMBER_LEN + [number] and cleaned . startswith ( [string] ) : [EOL] [comment] [EOL] cleaned = cleaned [ [number] : ] [EOL] if len ( cleaned ) != PHONE_NUMBER_LEN : [EOL] raise ValidationError ( _ ( [string] [string] ) ) [EOL] validate_phone_number ( cleaned ) [EOL] return cleaned [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0
from typing import Pattern , Optional [EOL] import typing [EOL] import builtins [EOL] from typing import NamedTuple , Optional [EOL] import re [EOL] [EOL] BORO_DIGITS = [number] [EOL] [EOL] BLOCK_DIGITS = [number] [EOL] [EOL] LOT_DIGITS = [number] [EOL] [EOL] PAD_BBL_DIGITS = BORO_DIGITS + BLOCK_DIGITS + LOT_DIGITS [EOL] [EOL] PAD_BIN_DIGITS = [number] [EOL] [EOL] PAD_BIN_RE = re . compile ( [string] ) [EOL] [EOL] [EOL] class BBL ( NamedTuple ) : [EOL] [docstring] [EOL] [EOL] boro = ... [EOL] block = ... [EOL] lot = ... [EOL] [EOL] @ staticmethod def parse ( pad_bbl ) : [EOL] if len ( pad_bbl ) != PAD_BBL_DIGITS : [EOL] raise ValueError ( f" [string] { PAD_BBL_DIGITS } [string] " ) [EOL] boro = int ( pad_bbl [ [number] : BORO_DIGITS ] ) [EOL] block = int ( pad_bbl [ BORO_DIGITS : BORO_DIGITS + BLOCK_DIGITS ] ) [EOL] lot = int ( pad_bbl [ BORO_DIGITS + BLOCK_DIGITS : ] ) [EOL] return BBL ( boro , block , lot ) [EOL] [EOL] @ staticmethod def safe_parse ( pad_bbl ) : [EOL] try : [EOL] return BBL . parse ( pad_bbl ) [EOL] except ValueError : [EOL] return None [EOL] [EOL] [EOL] def to_pad_bbl ( boro , block , lot ) : [EOL] [docstring] [EOL] [EOL] return ( f'{ boro }' f'{ str ( block ) . zfill ( BLOCK_DIGITS ) }' f'{ str ( lot ) . zfill ( LOT_DIGITS ) }' ) [EOL] [EOL] [EOL] def is_bin ( value ) : [EOL] [docstring] [EOL] [EOL] return PAD_BIN_RE . match ( value ) is not None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $'BBL'$ 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 $typing.Optional['BBL']$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0
from typing import Any , Dict , Type , List , Literal [EOL] import typing [EOL] import project [EOL] import typing_extensions [EOL] import builtins [EOL] from typing import List , Dict [EOL] from django . db import models [EOL] from django . core . validators import RegexValidator [EOL] from django . utils . translation import gettext_lazy as _ [EOL] [EOL] from project . common_data import Choices [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] US_STATE_CHOICES = Choices . from_file ( [string] ) [EOL] [EOL] [EOL] class ZipCodeValidator ( RegexValidator ) : [EOL] def __init__ ( self ) : [EOL] [comment] [EOL] super ( ) . __init__ ( regex = [string] , message = _ ( [string] ) ) [EOL] [EOL] [EOL] CITY_KWARGS = dict ( max_length = [number] , ) [EOL] [EOL] STATE_KWARGS = dict ( max_length = [number] , choices = US_STATE_CHOICES . choices , ) [EOL] [EOL] [EOL] class MailingAddress ( models . Model ) : [EOL] [docstring] [EOL] [EOL] class Meta : [EOL] abstract = True [EOL] [EOL] primary_line = models . CharField ( max_length = [number] , blank = True , help_text = [string] ) [EOL] [EOL] secondary_line = models . CharField ( max_length = [number] , blank = True , help_text = [string] ) [EOL] [EOL] urbanization = models . CharField ( max_length = [number] , blank = True , help_text = [string] ) [EOL] [EOL] city = models . CharField ( ** CITY_KWARGS , blank = True , help_text = [string] ) [EOL] [EOL] state = models . CharField ( ** STATE_KWARGS , blank = True , help_text = [string] ) [EOL] [EOL] zip_code = models . CharField ( max_length = [number] , blank = True , validators = [ ZipCodeValidator ( ) ] , help_text = [string] ) [EOL] [EOL] [comment] [EOL] LOB_ATTRS = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] def as_lob_params ( self ) : [EOL] [docstring] [EOL] [EOL] result = { } [EOL] for attr in self . LOB_ATTRS : [EOL] value = getattr ( self , attr ) [EOL] if value : [EOL] result [ attr ] = value [EOL] return result [EOL] [EOL] def is_address_populated ( self ) : [EOL] [docstring] [EOL] [EOL] return bool ( self . primary_line and self . city and self . state and self . zip_code ) [EOL] [EOL] @ property def address_lines_for_mailing ( self ) : [EOL] [docstring] [EOL] [EOL] if not self . is_address_populated ( ) : [EOL] return [ ] [EOL] lines = [ self . primary_line ] [EOL] if self . secondary_line : [EOL] lines . append ( self . secondary_line ) [EOL] lines . append ( f"{ self . city } [string] { self . state } [string] { self . zip_code }" ) [EOL] return lines [EOL] [EOL] def get_address_as_dict ( self ) : [EOL] [docstring] [EOL] [EOL] return { [string] : self . primary_line , [string] : self . secondary_line , [string] : self . urbanization , [string] : self . city , [string] : self . state , [string] : self . zip_code , } [EOL] [EOL] def clear_address ( self ) : [EOL] self . primary_line = [string] [EOL] self . secondary_line = [string] [EOL] self . urbanization = [string] [EOL] self . city = [string] [EOL] self . state = [string] [EOL] self . zip_code = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any , Optional [EOL] import typing [EOL] import builtins [EOL] from typing import Optional , get_type_hints [EOL] from django . utils . html import format_html [EOL] from django . urls import reverse [EOL] [EOL] [EOL] def admin_field ( short_description = None , allow_tags = None , admin_order_field = None , ) : [EOL] [docstring] [EOL] [EOL] def decorator ( fn ) : [EOL] if short_description is not None : [EOL] fn . short_description = short_description [EOL] if allow_tags is not None : [EOL] fn . allow_tags = allow_tags [EOL] if admin_order_field is not None : [EOL] fn . admin_order_field = admin_order_field [EOL] if get_type_hints ( fn ) . get ( [string] ) == bool : [EOL] fn . boolean = True [EOL] return fn [EOL] return decorator [EOL] [EOL] [EOL] def admin_action ( short_description ) : [EOL] [docstring] [EOL] [EOL] def decorator ( fn ) : [EOL] fn . short_description = short_description [EOL] return fn [EOL] [EOL] return decorator [EOL] [EOL] [EOL] def never_has_permission ( request = None , obj = None , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] return False [EOL] [EOL] [EOL] def get_admin_url_for_instance_or_class ( obj , pk ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] info = ( obj . _meta . app_label , obj . _meta . model_name ) [EOL] return reverse ( [string] % info , args = ( pk , ) ) [EOL] [EOL] [EOL] def get_admin_url_for_class ( class_obj , pk ) : [EOL] [docstring] [EOL] [EOL] return get_admin_url_for_instance_or_class ( class_obj , pk ) [EOL] [EOL] [EOL] def get_admin_url_for_instance ( model_instance ) : [EOL] [docstring] [EOL] [EOL] admin_url = getattr ( model_instance , [string] , None ) [EOL] if isinstance ( admin_url , str ) : [EOL] return admin_url [EOL] return get_admin_url_for_instance_or_class ( model_instance , model_instance . pk ) [EOL] [EOL] [EOL] def make_edit_link ( short_description , field = None ) : [EOL] [docstring] [EOL] [EOL] @ admin_field ( short_description = short_description , allow_tags = True ) def edit ( self , obj ) : [EOL] if field : [EOL] obj = getattr ( obj , field , None ) [EOL] if not ( obj and obj . pk ) : [EOL] return [string] [EOL] admin_url = get_admin_url_for_instance ( obj ) [EOL] return format_html ( [string] , admin_url , short_description , ) [EOL] [EOL] return edit [EOL] [EOL] [EOL] def make_button_link ( url , short_description ) : [EOL] return format_html ( [string] , url , short_description ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any , Iterator [EOL] import typing [EOL] import django [EOL] import builtins [EOL] import json [EOL] from typing import Any , Iterator , Dict [EOL] from django . http import StreamingHttpResponse [EOL] from django . core . serializers . json import DjangoJSONEncoder [EOL] [EOL] [EOL] def generate_json_rows ( cursor ) : [EOL] columns = [ column . name for column in cursor . description ] [EOL] [EOL] while True : [EOL] row = cursor . fetchone ( ) [EOL] if row is None : [EOL] break [EOL] yield dict ( zip ( columns , row ) ) [EOL] [EOL] [EOL] def generate_streaming_json ( rows ) : [EOL] yield [string] [EOL] yielded_first = False [EOL] for row in rows : [EOL] if yielded_first : [EOL] yield [string] [EOL] yielded_first = True [EOL] yield json . dumps ( row , cls = DjangoJSONEncoder ) [EOL] yield [string] [EOL] [EOL] [EOL] def streaming_json_response ( rows , filename ) : [EOL] response = StreamingHttpResponse ( generate_streaming_json ( rows ) , content_type = [string] ) [EOL] response [ [string] ] = f' [string] { filename } [string] ' [EOL] return response [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.http.StreamingHttpResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Dict , Any , Optional [EOL] import pathlib [EOL] import typing [EOL] import builtins [EOL] import sys [EOL] from pathlib import Path [EOL] from typing import Dict , Any , Optional [EOL] import pytest [EOL] [EOL] [EOL] def one_field_err ( message , field = [string] ) : [EOL] [docstring] [EOL] [EOL] return [ { [string] : field , [string] : [ message ] } ] [EOL] [EOL] [EOL] class GraphQLTestingPal : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] QUERY = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] DEFAULT_INPUT = { } [EOL] [EOL] @ pytest . fixture ( autouse = True ) def setup_fixture ( self , graphql_client , db ) : [EOL] self . graphql_client = graphql_client [EOL] self . request = graphql_client . request [EOL] self . user = graphql_client . request . user [EOL] [EOL] def execute ( self , input = None ) : [EOL] [docstring] [EOL] [EOL] res = self . graphql_client . execute ( self . QUERY , variables = { [string] : { ** self . DEFAULT_INPUT , ** ( input or { } ) , } } ) [EOL] return res [ [string] ] [ [string] ] [EOL] [EOL] def assert_one_field_err ( self , message , field = [string] , input = None , ) : [EOL] [docstring] [EOL] [EOL] errors = self . execute ( input = input ) [ [string] ] [EOL] expected = one_field_err ( message , field ) [EOL] if errors != expected : [EOL] raise AssertionError ( f" [string] { expected } [string] { errors }" ) [EOL] [EOL] def one_field_err ( self , message , field = [string] ) : [EOL] [docstring] [EOL] [EOL] return one_field_err ( message , field ) [EOL] [EOL] [EOL] class ClassCachedValue : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] _cached_value = None [EOL] [EOL] @ classmethod def cache_value ( cls , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] raise NotImplementedError ( ) [EOL] [EOL] @ classmethod def get_value ( cls , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] if cls . _cached_value is None : [EOL] cls . _cached_value = cls . cache_value ( * args , ** kwargs ) [EOL] return cls . _cached_value [EOL] [EOL] [EOL] class Blob : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , ** kwargs ) : [EOL] self . __dict__ = kwargs [EOL] [EOL] [EOL] class Snapshot : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , actual , path ) : [EOL] self . actual = actual [EOL] self . path = path [EOL] [EOL] if not path . exists ( ) : [EOL] path . parent . mkdir ( parents = True , exist_ok = True ) [EOL] path . write_text ( actual ) [EOL] [EOL] self . expected = path . read_text ( ) [EOL] [EOL] if self . actual != self . expected : [EOL] sys . stderr . write ( f" [string] " f" [string] { self . path } [string] " ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $pathlib.Path$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0
from typing import Iterator , List [EOL] import typing [EOL] import pytest [EOL] [EOL] from project . util . streaming_csv import ( transform_csv_row , generate_streaming_csv , streaming_csv_response ) [EOL] [EOL] [EOL] rows = [ [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] ] [EOL] [EOL] [EOL] def test_generate_streaming_csv_works ( ) : [EOL] g = generate_streaming_csv ( rows ) [EOL] assert next ( g ) == [string] [EOL] assert next ( g ) == [string] [EOL] with pytest . raises ( StopIteration ) : [EOL] next ( g ) [EOL] [EOL] [EOL] def test_streaming_csv_response_works ( ) : [EOL] r = streaming_csv_response ( rows , [string] ) [EOL] assert r [ [string] ] == [string] [EOL] assert r [ [string] ] == [string] [EOL] assert list ( r ) == [ [string] , [string] . encode ( [string] ) ] [EOL] [EOL] [EOL] def test_transform_csv_row_works ( ) : [EOL] assert list ( transform_csv_row ( ( [string] , [ [string] , [number] ] ) ) ) == [ [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import logging [EOL] import builtins [EOL] import logging [EOL] import pytest [EOL] [EOL] from project . logging import skip_static_requests [EOL] [EOL] [EOL] def mkrecord ( text ) : [EOL] return logging . makeLogRecord ( { [string] : ( text , ) } ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , True ) , ( [string] , True ) , ( [string] , False ) , ( [string] , False ) , ( [string] , False ) , ] ) def test_skip_static_requests ( request_line , noskip ) : [EOL] assert skip_static_requests ( mkrecord ( request_line ) ) is noskip [EOL] [EOL] [EOL] def test_skip_static_requests_ignores_weirdly_typed_log_records ( ) : [EOL] assert skip_static_requests ( logging . makeLogRecord ( { [string] : { [string] : [number] } } ) ) is True [EOL] assert skip_static_requests ( logging . makeLogRecord ( { [string] : tuple ( ) } ) ) is True [EOL] assert skip_static_requests ( logging . makeLogRecord ( { [string] : ( [number] , ) } ) ) is True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.LogRecord$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Optional , List [EOL] import pathlib [EOL] import typing [EOL] import project [EOL] import json [EOL] from pathlib import Path [EOL] import pytest [EOL] from django . conf import settings [EOL] from django . test import override_settings [EOL] from django . core . management import call_command [EOL] from django . core . management . base import CommandError [EOL] import requests . exceptions [EOL] [EOL] from project import geocoding [EOL] [EOL] [EOL] MY_DIR = Path ( __file__ ) . parent . resolve ( ) [EOL] [EOL] EXAMPLE_SEARCH = json . loads ( ( MY_DIR / [string] ) . read_text ( ) ) [EOL] [EOL] enable_fake_geocoding = override_settings ( GEOCODING_SEARCH_URL = [string] ) [EOL] [EOL] [EOL] @ enable_fake_geocoding def test_geocode_command_works ( requests_mock ) : [EOL] requests_mock . get ( settings . GEOCODING_SEARCH_URL , json = EXAMPLE_SEARCH ) [EOL] call_command ( [string] , [string] ) [EOL] [EOL] with pytest . raises ( CommandError ) : [EOL] requests_mock . get ( settings . GEOCODING_SEARCH_URL , status_code = [number] ) [EOL] call_command ( [string] , [string] ) [EOL] [EOL] [EOL] @ enable_fake_geocoding def test_search_works ( requests_mock ) : [EOL] requests_mock . get ( settings . GEOCODING_SEARCH_URL , json = EXAMPLE_SEARCH ) [EOL] results = geocoding . search ( [string] ) [EOL] assert results [ [number] ] . properties . label == [string] [EOL] [EOL] [EOL] @ enable_fake_geocoding def test_search_returns_none_on_500 ( requests_mock ) : [EOL] requests_mock . get ( settings . GEOCODING_SEARCH_URL , status_code = [number] ) [EOL] assert geocoding . search ( [string] ) is None [EOL] [EOL] [EOL] @ enable_fake_geocoding def test_search_returns_none_on_request_exception ( requests_mock ) : [EOL] requests_mock . get ( settings . GEOCODING_SEARCH_URL , exc = requests . exceptions . Timeout ) [EOL] assert geocoding . search ( [string] ) is None [EOL] [EOL] [EOL] @ enable_fake_geocoding def test_search_returns_none_on_bad_result_without_features ( requests_mock ) : [EOL] requests_mock . get ( settings . GEOCODING_SEARCH_URL , json = { [string] : False } ) [EOL] assert geocoding . search ( [string] ) is None [EOL] [EOL] [EOL] @ enable_fake_geocoding def test_search_returns_none_on_feature_validation_errors ( requests_mock ) : [EOL] requests_mock . get ( settings . GEOCODING_SEARCH_URL , json = { [string] : [ { [string] : [number] } ] } ) [EOL] assert geocoding . search ( [string] ) is None [EOL] [EOL] [EOL] @ enable_fake_geocoding def test_search_promotes_results_in_same_borough ( requests_mock ) : [EOL] requests_mock . get ( settings . GEOCODING_SEARCH_URL , json = EXAMPLE_SEARCH ) [EOL] results = geocoding . search ( [string] ) [EOL] assert results [ [number] ] . properties . label == [string] [EOL] [EOL] [EOL] @ enable_fake_geocoding def test_search_promotes_exact_matches ( requests_mock ) : [EOL] requests_mock . get ( settings . GEOCODING_SEARCH_URL , json = EXAMPLE_SEARCH ) [EOL] results = geocoding . search ( [string] ) [EOL] assert results [ [number] ] . properties . label == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from project import middleware [EOL] import rollbar [EOL] [EOL] [EOL] class TestHostnameRedirectMiddleware : [EOL] def test_it_works ( self , client , settings ) : [EOL] settings . HOSTNAME_REDIRECTS = { [string] : [string] , } [EOL] settings . MIDDLEWARE = [ [string] ] [EOL] [EOL] res = client . get ( [string] , SERVER_NAME = [string] ) [EOL] assert res . status_code == [number] [EOL] assert res [ [string] ] == [string] [EOL] [EOL] res = client . get ( [string] , SERVER_NAME = [string] ) [EOL] assert res . status_code == [number] [EOL] [EOL] [EOL] class TestRollbarRequestMiddleware : [EOL] def test_it_works ( self , settings ) : [EOL] def get_response ( request ) : [EOL] assert rollbar . get_request ( ) == [string] [EOL] return [string] [EOL] [EOL] mw = middleware . rollbar_request_middleware ( get_response ) [EOL] [EOL] assert rollbar . get_request ( ) is None [EOL] assert mw ( [string] ) == [string] [EOL] assert rollbar . get_request ( ) is None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] [EOL] [EOL] def test_example_server_error_works ( client ) : [EOL] with pytest . raises ( Exception , match = [string] ) : [EOL] client . post ( [string] ) [EOL] [EOL] [EOL] def test_favicon_works ( client , staticfiles ) : [EOL] res = client . get ( [string] , follow = True ) [EOL] assert res . status_code == [number] [EOL] assert res [ [string] ] == [string] [EOL] [EOL] [EOL] def test_health_works ( db , client ) : [EOL] res = client . get ( [string] ) [EOL] assert res . status_code == [number] [EOL] health = res . json ( ) [EOL] assert health [ [string] ] == [number] [EOL] assert health [ [string] ] is False [EOL] [EOL] [EOL] def test_extended_health_works ( db , client , settings ) : [EOL] settings . EXTENDED_HEALTHCHECK_KEY = [string] [EOL] res = client . get ( [string] ) [EOL] assert res . status_code == [number] [EOL] health = res . json ( ) [EOL] assert health [ [string] ] == [number] [EOL] assert health [ [string] ] is True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import builtins [EOL] from unittest . mock import patch [EOL] from functools import wraps [EOL] from django . http import QueryDict [EOL] from django . conf import settings [EOL] [EOL] [EOL] def qdict ( d = None ) : [EOL] [docstring] [EOL] [EOL] qd = QueryDict ( mutable = True ) [EOL] if d is None : [EOL] return qd [EOL] for key in d : [EOL] assert isinstance ( d [ key ] , list ) [EOL] qd . setlist ( key , d [ key ] ) [EOL] return qd [EOL] [EOL] [EOL] def simplepatch ( * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] def decorator ( fn ) : [EOL] @ wraps ( fn ) def wrapper ( * fn_args , ** fn_kwargs ) : [EOL] with patch ( * args , ** kwargs ) : [EOL] return fn ( * fn_args , ** fn_kwargs ) [EOL] [EOL] return wrapper [EOL] [EOL] return decorator [EOL] [EOL] [EOL] def strip_locale ( url ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] for lang , _ in settings . LANGUAGES : [EOL] url = url . replace ( f" [string] { lang } [string] " , [string] ) [EOL] [EOL] return url [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] def test_dashboard_works ( admin_client ) : [EOL] res = admin_client . get ( [string] ) [EOL] assert res . status_code == [number] [EOL] assert [string] in res . content [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pytest [EOL] from django . core . exceptions import ValidationError [EOL] [EOL] from project . util . phone_number import ( validate_phone_number , USPhoneNumberField , humanize ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] ) def test_validate_phone_number_raises_validation_errors ( value , excmsg ) : [EOL] with pytest . raises ( ValidationError ) as excinfo : [EOL] validate_phone_number ( value ) [EOL] assert excinfo . value . args [ [number] ] == excmsg [EOL] [EOL] [EOL] def test_validate_phone_number_works_with_valid_phone_numbers ( ) : [EOL] validate_phone_number ( [string] ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] ] ) def test_phone_number_field_works ( phone_number ) : [EOL] assert USPhoneNumberField ( ) . clean ( phone_number ) == [string] [EOL] [EOL] [EOL] def test_phone_number_field_errors_on_really_long_input ( ) : [EOL] with pytest . raises ( ValidationError ) as exc_info : [EOL] USPhoneNumberField ( ) . clean ( [string] * [number] ) [EOL] assert [string] in str ( exc_info . value ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] ] ) def test_phone_number_field_raises_errors ( bad_phone_number ) : [EOL] with pytest . raises ( ValidationError ) as exc_info : [EOL] USPhoneNumberField ( ) . clean ( bad_phone_number ) [EOL] assert [string] in str ( exc_info . value ) [EOL] [EOL] [EOL] def test_phone_number_field_raises_error_on_bad_area_code ( ) : [EOL] with pytest . raises ( ValidationError , match = [string] ) : [EOL] USPhoneNumberField ( ) . clean ( [string] ) [EOL] [EOL] [EOL] def test_humanize_works ( ) : [EOL] assert humanize ( [string] ) == [string] [EOL] assert humanize ( [string] ) == [string] [EOL] assert humanize ( [string] ) == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pytest [EOL] [EOL] from project . util . nyc import BBL [EOL] [EOL] [EOL] class TestBBL : [EOL] def test_parse_raises_err_when_input_is_too_long ( self ) : [EOL] with pytest . raises ( ValueError , match = [string] ) : [EOL] BBL . parse ( [string] ) [EOL] [EOL] def test_safe_parse_works ( self ) : [EOL] assert BBL . safe_parse ( [string] ) is None [EOL] assert BBL . safe_parse ( [string] ) is None [EOL] assert BBL . safe_parse ( [string] ) == BBL ( [number] , [number] , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] from django . test import override_settings , TestCase [EOL] from django . contrib . sites . models import Site [EOL] [EOL] from . . util . site_util import ( absolute_reverse , absolutify_url , get_site_name , get_default_site , get_site_from_request_or_default , get_site_type , SITE_CHOICES , get_site_base_name , get_site_of_type , get_site_origin ) [EOL] [EOL] [EOL] class SiteUtilsTests ( TestCase ) : [EOL] @ override_settings ( DEBUG = False ) def test_absolute_reverse_works ( self ) : [EOL] self . assertEqual ( absolute_reverse ( [string] ) , [string] ) [EOL] [EOL] def test_absolutify_url_raises_error_on_non_absolute_paths ( self ) : [EOL] with self . assertRaises ( ValueError ) : [EOL] absolutify_url ( [string] ) [EOL] [EOL] def test_absolutify_url_passes_through_http_urls ( self ) : [EOL] self . assertEqual ( absolutify_url ( [string] ) , [string] ) [EOL] [EOL] def test_absolutify_url_passes_through_https_urls ( self ) : [EOL] self . assertEqual ( absolutify_url ( [string] ) , [string] ) [EOL] [EOL] @ override_settings ( DEBUG = False ) def test_absolutify_url_works_in_production ( self ) : [EOL] self . assertEqual ( absolutify_url ( [string] ) , [string] ) [EOL] [EOL] @ override_settings ( DEBUG = True ) def test_absolutify_url_works_in_development ( self ) : [EOL] self . assertEqual ( absolutify_url ( [string] ) , [string] ) [EOL] [EOL] [EOL] def test_absolute_reverse_works_when_passed_in_request ( db , rf ) : [EOL] Site ( domain = [string] , name = [string] ) . save ( ) [EOL] req = rf . get ( [string] , SERVER_NAME = [string] ) [EOL] assert absolute_reverse ( [string] , request = req ) . startswith ( [string] ) [EOL] [EOL] [EOL] def test_absolutify_url_works_when_passed_in_request ( db , rf ) : [EOL] Site ( domain = [string] , name = [string] ) . save ( ) [EOL] req = rf . get ( [string] , SERVER_NAME = [string] ) [EOL] assert absolutify_url ( [string] , request = req ) == [string] [EOL] [EOL] [EOL] class TestGetDefaultSite : [EOL] def test_it_works ( self , db ) : [EOL] assert get_default_site ( ) . name == [string] [EOL] [EOL] def test_it_works_when_default_site_id_is_not_1 ( self , db , settings ) : [EOL] site = Site ( domain = [string] , name = [string] ) [EOL] site . save ( ) [EOL] settings . DEFAULT_SITE_ID = site . pk [EOL] assert get_default_site ( ) . name == [string] [EOL] [EOL] [EOL] class TestGetSiteFromRequestOrDefault : [EOL] def test_it_returns_default_site_when_request_is_none ( self , db ) : [EOL] assert get_site_from_request_or_default ( ) . name == [string] [EOL] [EOL] def test_it_returns_default_site_when_request_has_unrecognized_domain ( self , rf , db ) : [EOL] req = rf . get ( [string] , SERVER_NAME = [string] ) [EOL] assert get_site_from_request_or_default ( req ) . name == [string] [EOL] [EOL] def test_it_returns_site_when_request_has_recognized_domain ( self , rf , db ) : [EOL] Site ( domain = [string] , name = [string] ) . save ( ) [EOL] req = rf . get ( [string] , SERVER_NAME = [string] ) [EOL] assert get_site_from_request_or_default ( req ) . name == [string] [EOL] [EOL] [EOL] class TestGetSiteName : [EOL] def test_it_works_when_deployment_name_is_undefined ( self ) : [EOL] assert get_site_name ( ) == [string] [EOL] [EOL] @ override_settings ( NAVBAR_LABEL = [string] ) def test_it_works_when_deployment_name_is_defined ( self ) : [EOL] assert get_site_name ( ) == [string] [EOL] [EOL] [EOL] class TestGetSiteOfType : [EOL] def test_it_works ( self , db ) : [EOL] assert get_site_of_type ( SITE_CHOICES . JUSTFIX ) . name == [string] [EOL] [EOL] def test_it_raises_error_when_site_not_found ( self , db ) : [EOL] with pytest . raises ( ValueError , match = [string] ) : [EOL] get_site_of_type ( SITE_CHOICES . NORENT ) [EOL] [EOL] [EOL] def test_get_site_origin_works ( settings ) : [EOL] site = Site ( domain = [string] ) [EOL] assert get_site_origin ( site ) == [string] [EOL] [EOL] settings . DEBUG = True [EOL] assert get_site_origin ( site ) == [string] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [ [string] , SITE_CHOICES . JUSTFIX ] , [ [string] , SITE_CHOICES . JUSTFIX ] , [ [string] , SITE_CHOICES . JUSTFIX ] , [ [string] , SITE_CHOICES . JUSTFIX ] , [ [string] , SITE_CHOICES . NORENT ] , [ [string] , SITE_CHOICES . NORENT ] , [ [string] , SITE_CHOICES . NORENT ] , ] ) def test_get_site_type_works ( name , expected ) : [EOL] site = Site ( name = name , domain = [string] ) [EOL] assert get_site_type ( site ) == expected [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [ SITE_CHOICES . JUSTFIX , [string] ] , [ SITE_CHOICES . NORENT , [string] ] , ] ) def test_get_site_base_name_works ( name , expected ) : [EOL] assert get_site_base_name ( name ) == expected [EOL] [EOL] [EOL] def test_get_site_base_name_raises_error ( ) : [EOL] with pytest . raises ( ValueError ) : [EOL] get_site_base_name ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any
from typing import Any [EOL] import typing [EOL] import project [EOL] import pytest [EOL] from django . contrib . sites . models import Site [EOL] [EOL] from project . util . testing_util import Blob [EOL] from project . util . admin_util import admin_field , make_edit_link , get_admin_url_for_class [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , [string] ) , ( [string] , True ) , ( [string] , [string] ) , ] ) def test_params_are_set_on_func ( param , value ) : [EOL] thing = admin_field ( ** { param : value } ) ( lambda : None ) [EOL] assert getattr ( thing , param ) == value [EOL] [EOL] [EOL] class TestMakeEditLink : [EOL] def test_it_returns_empty_string_when_given_none ( self ) : [EOL] edit_link = make_edit_link ( [string] ) [EOL] assert edit_link ( None , None ) == [string] [EOL] [EOL] def test_it_returns_empty_string_when_given_obj_without_pk ( self ) : [EOL] site = Site ( ) [EOL] edit_link = make_edit_link ( [string] ) [EOL] assert edit_link ( None , site ) == [string] [EOL] [EOL] def test_it_returns_edit_link_for_obj ( self ) : [EOL] site = Site ( pk = [number] ) [EOL] edit_link = make_edit_link ( [string] ) [EOL] assert edit_link ( None , site ) == [string] [EOL] [EOL] def test_it_returns_edit_link_for_field ( self ) : [EOL] obj = Blob ( related_thing = Blob ( admin_url = [string] , pk = [number] ) ) [EOL] edit_link = make_edit_link ( [string] , field = [string] ) [EOL] assert edit_link ( None , obj ) == [string] [EOL] [EOL] [EOL] def test_get_admin_url_for_class_works ( ) : [EOL] assert get_admin_url_for_class ( Site , [number] ) == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $project.util.testing_util.Blob$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $project.util.testing_util.Blob$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pathlib [EOL] import project [EOL] import json [EOL] from io import BytesIO [EOL] from pathlib import Path [EOL] from subprocess import CalledProcessError , TimeoutExpired [EOL] import pytest [EOL] [EOL] from project . util . lambda_pool import LambdaPool , MalformedResponseError [EOL] [EOL] MY_DIR = Path ( __file__ ) . parent . resolve ( ) [EOL] [EOL] LAMBDA_SCRIPT = MY_DIR / [string] [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def pool ( ) : [EOL] pool = LambdaPool ( [string] , LAMBDA_SCRIPT , cwd = MY_DIR , stderr = BytesIO ( ) ) [EOL] yield pool [EOL] pool . empty ( ) [EOL] [EOL] [EOL] def test_output_is_returned ( pool ) : [EOL] assert pool . run_handler ( { [string] : json . dumps ( { [string] : [string] } ) } ) == { [string] : [string] } [EOL] [EOL] [EOL] def test_stderr_is_output ( pool ) : [EOL] pool . stderr = BytesIO ( ) [EOL] assert pool . run_handler ( { [string] : [string] , [string] : [string] } ) == [string] [EOL] assert pool . stderr . getvalue ( ) == [string] [EOL] [EOL] [EOL] def test_stderr_is_not_output_if_disabled ( pool ) : [EOL] pool . stderr = BytesIO ( ) [EOL] assert pool . run_handler ( { [string] : [string] , [string] : [string] } , enable_stderr = False ) == [string] [EOL] assert pool . stderr . getvalue ( ) == [string] [EOL] [EOL] [EOL] def test_error_raised_if_output_is_malformed ( pool ) : [EOL] with pytest . raises ( MalformedResponseError ) as excinfo : [EOL] pool . run_handler ( { [string] : [string] } ) [EOL] assert [string] in excinfo . value . output [EOL] [EOL] [EOL] def test_error_raised_if_exit_code_is_nonzero ( pool ) : [EOL] with pytest . raises ( CalledProcessError ) as excinfo : [EOL] pool . run_handler ( { [string] : [string] } ) [EOL] assert [string] in excinfo . value . stderr [EOL] [EOL] [EOL] def test_error_raised_if_timeout_expires ( pool ) : [EOL] with pytest . raises ( TimeoutExpired ) : [EOL] pool . run_handler ( { [string] : True } , timeout_secs = [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import project [EOL] from project . util . hyperlink import Hyperlink [EOL] [EOL] [EOL] def test_admin_button_url_works ( ) : [EOL] h = Hyperlink ( [string] , [string] ) [EOL] assert h . admin_button_html == ( [string] ) [EOL] [EOL] [EOL] def test_join_admin_buttons_returns_nothing_on_empty_list ( ) : [EOL] assert Hyperlink . join_admin_buttons ( [ ] ) == [string] [EOL] [EOL] [EOL] def test_join_admin_buttons_works ( ) : [EOL] html = Hyperlink . join_admin_buttons ( [ Hyperlink ( [string] , [string] ) , Hyperlink ( [string] , [string] ) , ] ) [EOL] assert [string] in html [EOL] assert [string] in html [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import io [EOL] from io import StringIO [EOL] from django . core . management import call_command [EOL] [EOL] [EOL] def test_all_files_have_unix_line_endings ( ) : [EOL] out = StringIO ( ) [EOL] err = StringIO ( ) [EOL] call_command ( [string] , [string] , stdout = out , stderr = err ) [EOL] [EOL] [comment] [EOL] assert err . getvalue ( ) == [string] [EOL] [EOL] assert out . getvalue ( ) == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict [EOL] import typing [EOL] import project [EOL] from django . core . exceptions import ValidationError [EOL] import pytest [EOL] [EOL] from project . util . mailing_address import MailingAddress , ZipCodeValidator [EOL] [EOL] [EOL] EXAMPLE_KWARGS = dict ( primary_line = [string] , secondary_line = [string] , city = [string] , state = [string] , zip_code = [string] , urbanization = [string] , ) [EOL] [EOL] [EOL] def test_as_lob_params_works_with_populated_addr ( ) : [EOL] kwargs = dict ( primary_line = [string] , city = [string] , state = [string] , zip_code = [string] ) [EOL] ad = MailingAddress ( ** kwargs ) [EOL] assert ad . as_lob_params ( ) == kwargs [EOL] [EOL] [EOL] def test_as_lob_params_returns_empty_dict_for_unpopulated_addr ( ) : [EOL] ad = MailingAddress ( ) [EOL] assert ad . as_lob_params ( ) == { } [EOL] [EOL] [EOL] def test_is_address_populated_works ( ) : [EOL] ma = MailingAddress ( ) [EOL] assert ma . is_address_populated ( ) is False [EOL] ma . primary_line = [string] [EOL] assert ma . is_address_populated ( ) is False [EOL] ma . city = [string] [EOL] assert ma . is_address_populated ( ) is False [EOL] ma . state = [string] [EOL] assert ma . is_address_populated ( ) is False [EOL] ma . zip_code = [string] [EOL] assert ma . is_address_populated ( ) is True [EOL] [EOL] [EOL] def test_state_is_validated ( ) : [EOL] MailingAddress ( state = [string] ) . full_clean ( ) [EOL] [EOL] with pytest . raises ( ValidationError ) : [EOL] MailingAddress ( state = [string] ) . full_clean ( ) [EOL] [EOL] [EOL] def test_address_lines_for_mailing_works ( ) : [EOL] ma = MailingAddress ( ) [EOL] assert ma . address_lines_for_mailing == [ ] [EOL] ma . primary_line = [string] [EOL] assert ma . address_lines_for_mailing == [ ] [EOL] ma . city = [string] [EOL] assert ma . address_lines_for_mailing == [ ] [EOL] ma . state = [string] [EOL] assert ma . address_lines_for_mailing == [ ] [EOL] ma . zip_code = [string] [EOL] assert ma . address_lines_for_mailing == [ [string] , [string] ] [EOL] ma . secondary_line = [string] [EOL] assert ma . address_lines_for_mailing == [ [string] , [string] , [string] ] [EOL] [EOL] [EOL] def test_get_address_as_dict_works ( ) : [EOL] ma = MailingAddress ( ** EXAMPLE_KWARGS ) [EOL] assert ma . get_address_as_dict ( ) == EXAMPLE_KWARGS [EOL] [EOL] [EOL] def test_clear_address_works ( ) : [EOL] ma = MailingAddress ( ** EXAMPLE_KWARGS ) [EOL] ma . clear_address ( ) [EOL] assert ma . primary_line == [string] [EOL] assert ma . secondary_line == [string] [EOL] assert ma . urbanization == [string] [EOL] assert ma . city == [string] [EOL] assert ma . state == [string] [EOL] assert ma . zip_code == [string] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , ] ) def test_zip_code_validator_accepts_valid_zip_codes ( zip_code ) : [EOL] ZipCodeValidator ( ) ( zip_code ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [string] , [string] , [string] , [string] , [string] , ] ) def test_zip_code_validator_rejects_invalid_zip_codes ( zip_code ) : [EOL] with pytest . raises ( ValidationError , match = [string] ) : [EOL] ZipCodeValidator ( ) ( zip_code ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . core . management import call_command [EOL] [EOL] [EOL] def test_system_checks ( ) : [EOL] [docstring] [EOL] [EOL] call_command ( [string] , [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def test_collectstatic_works ( staticfiles ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from project . locales import ( FULLY_SUPPORTED_ONLY , PARTIALLY_SUPPORTED_ONLY , ALL ) [EOL] [EOL] [EOL] def test_fully_and_partially_supported_locales_cover_all ( ) : [EOL] assert FULLY_SUPPORTED_ONLY . choice_set . union ( PARTIALLY_SUPPORTED_ONLY . choice_set ) == ALL . choice_set [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any , List , Union [EOL] import pathlib [EOL] import typing [EOL] from io import StringIO [EOL] from pathlib import Path [EOL] from email . mime . base import MIMEBase [EOL] from django . core . mail import send_mail , EmailMessage [EOL] import pytest [EOL] import freezegun [EOL] [EOL] from project . util . testing_util import Snapshot [EOL] from project . util . friendly_email_console_backend import EmailBackend [EOL] [EOL] [EOL] MY_DIR = Path ( __file__ ) . parent . resolve ( ) [EOL] [EOL] SNAPSHOT_DIR = MY_DIR / [string] [EOL] [EOL] [EOL] class MyBackend ( EmailBackend ) : [EOL] latest_output = [string] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs , stream = StringIO ( ) ) [EOL] [EOL] def write_message ( self , message ) : [EOL] super ( ) . write_message ( message ) [EOL] MyBackend . latest_output = [string] . join ( [ line for line in self . stream . getvalue ( ) . splitlines ( ) if not line . startswith ( [string] ) ] ) [EOL] [EOL] @ classmethod def snapshot ( cls , filename ) : [EOL] return Snapshot ( cls . latest_output , SNAPSHOT_DIR / filename ) [EOL] [EOL] [EOL] @ pytest . fixture def backend ( settings ) : [EOL] with freezegun . freeze_time ( [string] ) : [EOL] MyBackend . latest_output = [string] [EOL] settings . EMAIL_BACKEND = f"{ __name__ } [string] " [EOL] yield MyBackend [EOL] [EOL] [EOL] BASE_EMAIL_MESSAGE_KWARGS = dict ( subject = [string] , body = [string] , to = [ [string] ] , ) [EOL] [EOL] BASE_SEND_MAIL_KWARGS = dict ( subject = [string] , message = [string] , from_email = [string] , recipient_list = [ [string] ] , ) [EOL] [EOL] [EOL] def test_no_extra_info ( backend ) : [EOL] send_mail ( ** BASE_SEND_MAIL_KWARGS ) [EOL] snapshot = backend . snapshot ( [string] ) [EOL] assert snapshot . expected == snapshot . actual [EOL] [EOL] [EOL] def test_html_alternative ( backend ) : [EOL] send_mail ( ** BASE_SEND_MAIL_KWARGS , html_message = [string] ) [EOL] snapshot = backend . snapshot ( [string] ) [EOL] assert snapshot . expected == snapshot . actual [EOL] [EOL] [EOL] def test_attachments ( backend ) : [EOL] msg = EmailMessage ( ** BASE_EMAIL_MESSAGE_KWARGS ) [EOL] msg . attach ( [string] , [string] ) [EOL] msg . attach ( MIMEBase ( [string] , [string] ) ) [EOL] msg . send ( ) [EOL] snapshot = backend . snapshot ( [string] ) [EOL] assert snapshot . expected == snapshot . actual [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[builtins.str],builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[builtins.str],builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[builtins.str],builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[builtins.str],builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.List[builtins.str],builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Dict , Any , List [EOL] import typing [EOL] import project [EOL] import pytest [EOL] from django . http import HttpResponse [EOL] from django . urls import path [EOL] from csp . decorators import csp_update [EOL] [EOL] from project . middleware import CSPHashingMiddleware [EOL] [EOL] [EOL] EXPECTED_CSP = [string] [EOL] [EOL] [EOL] def basic_view ( request ) : [EOL] return HttpResponse ( [string] ) [EOL] [EOL] [EOL] def view_with_inline_script ( request ) : [EOL] script = [string] [EOL] request . allow_inline_script ( script ) [EOL] return HttpResponse ( f' [string] { script } [string] ' ) [EOL] [EOL] [EOL] @ csp_update ( SCRIPT_SRC = [string] ) def view_with_everything ( request ) : [EOL] script = [string] [EOL] request . allow_inline_script ( script ) [EOL] request . csp_update ( SCRIPT_SRC = [string] ) [EOL] return HttpResponse ( f' [string] { script } [string] ' ) [EOL] [EOL] [EOL] urlpatterns = [ path ( [string] , basic_view ) , path ( [string] , view_with_inline_script ) , path ( [string] , view_with_everything ) , ] [EOL] [EOL] [EOL] def parse_csp_header ( csp ) : [EOL] parts = csp . split ( [string] ) [EOL] result = { } [EOL] for part in parts : [EOL] first_word , rest = part . split ( [string] , [number] ) [EOL] result [ first_word ] = rest [EOL] assert [string] in result [ [string] ] [EOL] return result [EOL] [EOL] [EOL] @ pytest . mark . urls ( __name__ ) def test_csp_works_on_dynamic_pages ( client ) : [EOL] response = client . get ( [string] ) [EOL] assert [number] == response . status_code [EOL] assert response . content == [string] [EOL] csp = response [ [string] ] [EOL] assert [string] not in parse_csp_header ( csp ) [ [string] ] [EOL] assert EXPECTED_CSP in csp [EOL] [EOL] [EOL] @ pytest . mark . urls ( __name__ ) def test_hash_is_added_for_inline_scripts ( client ) : [EOL] response = client . get ( [string] ) [EOL] assert [number] == response . status_code [EOL] assert response . content == [string] [EOL] csp = response [ [string] ] [EOL] b64hash = [string] [EOL] assert f" [string] { b64hash } [string] " in csp [EOL] assert EXPECTED_CSP in csp [EOL] [EOL] [EOL] @ pytest . mark . urls ( __name__ ) def test_all_csp_directives_are_merged ( client , settings ) : [EOL] settings . CSP_SCRIPT_SRC = [ [string] ] [EOL] response = client . get ( [string] ) [EOL] assert [number] == response . status_code [EOL] assert ( [string] [string] [string] ) in response [ [string] ] [EOL] [EOL] [EOL] def test_csp_works_on_static_assets ( client , staticfiles ) : [EOL] assert ( staticfiles / [string] / [string] / [string] ) . exists ( ) [EOL] response = client . get ( [string] ) [EOL] assert [number] == response . status_code [EOL] [EOL] csp = response [ [string] ] [EOL] assert [string] not in parse_csp_header ( csp ) [ [string] ] [EOL] assert EXPECTED_CSP in csp [EOL] [EOL] [EOL] def test_merge_csp_updates_works ( ) : [EOL] m = CSPHashingMiddleware ( ) [EOL] assert m . _merge_csp_updates ( [ ] ) == { } [EOL] assert m . _merge_csp_updates ( [ { [string] : [string] } , { [string] : [ [string] , [string] ] } , ] ) == { [string] : [ [string] , [string] , [string] , [string] ] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import project [EOL] from django . conf import settings [EOL] [EOL] from project import health [EOL] from project . health import CheckGeocoding , CheckNycdb , CheckCelery [EOL] from nycdb . tests import fixtures as nycdb_fixtures [EOL] from . import test_geocoding [EOL] [EOL] [EOL] class TrivialCheck ( health . HealthCheck ) : [EOL] def __init__ ( self , result = True , is_enabled = True ) : [EOL] self . _result = result [EOL] self . _is_enabled = is_enabled [EOL] [EOL] @ property def is_enabled ( self ) : [EOL] return self . _is_enabled [EOL] [EOL] def run_check ( self ) : [EOL] return self . _result [EOL] [EOL] [EOL] class TrivialExtendedCheck ( TrivialCheck ) : [EOL] is_extended = True [EOL] [EOL] [EOL] def test_check_works ( db ) : [EOL] info = health . check ( True ) [EOL] assert info . status == [number] [EOL] assert info . check_results == { [string] : True } [EOL] [EOL] [EOL] def test_extended_checks_work ( ) : [EOL] info = health . HealthInfo ( [ TrivialExtendedCheck ( ) ] ) [EOL] assert info . check_results == { } [EOL] [EOL] info = health . HealthInfo ( [ TrivialExtendedCheck ( ) ] , is_extended = True ) [EOL] assert info . check_results == { [string] : True } [EOL] [EOL] [EOL] def test_failing_checks_result_in_503_status ( ) : [EOL] info = health . HealthInfo ( [ TrivialCheck ( result = False ) ] ) [EOL] assert info . status == [number] [EOL] assert info . check_results == { [string] : False } [EOL] [EOL] [EOL] def test_disabled_checks_are_ignored ( ) : [EOL] info = health . HealthInfo ( [ TrivialCheck ( is_enabled = False ) ] ) [EOL] assert info . status == [number] [EOL] assert info . check_results == { } [EOL] [EOL] [EOL] def test_is_healthy_returns_false_on_exception ( ) : [EOL] class ExplodingCheck ( health . HealthCheck ) : [EOL] def run_check ( self ) : [EOL] raise Exception ( [string] ) [EOL] [EOL] assert ExplodingCheck ( ) . is_healthy ( ) is False [EOL] [EOL] [EOL] def test_is_healthy_returns_run_check_value ( ) : [EOL] assert TrivialCheck ( result = True ) . is_healthy ( ) is True [EOL] assert TrivialCheck ( result = False ) . is_healthy ( ) is False [EOL] [EOL] [EOL] class TestCheckGeocoding : [EOL] def test_it_is_disabled_when_geocoding_is_disabled ( self ) : [EOL] assert CheckGeocoding ( ) . is_enabled is False [EOL] [EOL] def test_it_returns_false_when_geocoding_search_fails ( self ) : [EOL] assert CheckGeocoding ( ) . run_check ( ) is False [EOL] [EOL] @ test_geocoding . enable_fake_geocoding def test_it_works ( self , requests_mock ) : [EOL] requests_mock . get ( settings . GEOCODING_SEARCH_URL , json = test_geocoding . EXAMPLE_SEARCH ) [EOL] check = CheckGeocoding ( ) [EOL] assert check . is_enabled is True [EOL] assert check . run_check ( ) is True [EOL] [EOL] [EOL] class TestCheckNycdb : [EOL] def test_it_is_disabled_when_nycdb_is_disabled ( self ) : [EOL] assert CheckNycdb ( ) . is_enabled is False [EOL] [EOL] def test_it_works ( self , nycdb ) : [EOL] nycdb_fixtures . load_hpd_registration ( [string] ) [EOL] check = CheckNycdb ( ) [EOL] assert check . is_enabled is True [EOL] assert check . is_healthy ( ) is True [EOL] [EOL] [EOL] class TestCheckCelery : [EOL] def test_it_is_disabled_when_celery_is_disabled ( self ) : [EOL] assert CheckCelery ( ) . is_enabled is False [EOL] [EOL] def test_it_works ( self , settings ) : [EOL] settings . CELERY_BROKER_URL = [string] [EOL] check = CheckCelery ( ) [EOL] assert check . is_enabled is True [EOL] assert check . is_healthy ( ) is True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $project.health.CheckGeocoding$ 0 0 0 0 0 0 $project.health.CheckGeocoding$ 0 0 0 0 0 0 $project.health.CheckGeocoding$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $project.health.CheckNycdb$ 0 0 0 0 0 0 $project.health.CheckNycdb$ 0 0 0 0 0 0 $project.health.CheckNycdb$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $project.health.CheckCelery$ 0 0 0 0 0 0 $project.health.CheckCelery$ 0 0 0 0 0 0 $project.health.CheckCelery$ 0 0 0 0 0 0 0
import project [EOL] import pytest [EOL] [EOL] from project . common_data import Choices [EOL] [EOL] [EOL] def test_get_label_works ( ) : [EOL] choices = Choices ( choices = [ ( [string] , [string] ) , ( [string] , [string] ) ] ) [EOL] assert choices . get_label ( [string] ) == [string] [EOL] assert choices . get_label ( [string] ) == [string] [EOL] [EOL] [EOL] def test_get_enum_member_works ( ) : [EOL] choices = Choices ( choices = [ ( [string] , [string] ) , ( [string] , [string] ) ] ) [EOL] assert choices . get_enum_member ( [string] ) == choices . enum . FOO [EOL] assert choices . get_enum_member ( [string] ) . name == [string] [EOL] assert choices . get_enum_member ( [string] ) . value == [string] [EOL] [EOL] [EOL] def test_getattr_returns_choice_name ( ) : [EOL] choices = Choices ( choices = [ ( [string] , [string] ) , ( [string] , [string] ) ] ) [EOL] assert choices . FOO == [string] [EOL] [EOL] [EOL] def test_getattr_raises_err_on_invalid_choice_name ( ) : [EOL] choices = Choices ( choices = [ ( [string] , [string] ) , ( [string] , [string] ) ] ) [EOL] [EOL] with pytest . raises ( AttributeError , match = [string] ) : [EOL] choices . BOOOOP [EOL] [EOL] [EOL] def test_validate_choices_raises_no_err_on_valid_choices ( ) : [EOL] choices = Choices ( choices = [ ( [string] , [string] ) , ( [string] , [string] ) ] ) [EOL] [EOL] choices . validate_choices ( [string] ) [EOL] choices . validate_choices ( [string] ) [EOL] choices . validate_choices ( [string] , [string] ) [EOL] [EOL] [EOL] def test_validate_choices_raises_err_on_invalid_choice_name ( ) : [EOL] choices = Choices ( choices = [ ( [string] , [string] ) , ( [string] , [string] ) ] ) [EOL] [EOL] with pytest . raises ( ValueError , match = [string] ) : [EOL] choices . validate_choices ( [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pytest [EOL] [EOL] from project . util . html_to_text import html_to_text [EOL] [EOL] [EOL] def test_it_ignores_title_tags ( ) : [EOL] assert html_to_text ( [string] ) == [string] [EOL] [EOL] [EOL] def test_it_ignores_style_tags ( ) : [EOL] assert html_to_text ( [string] ) == [string] [EOL] [EOL] [EOL] def test_it_works ( ) : [EOL] assert html_to_text ( [string] ) == ( [string] [string] ) [EOL] [EOL] [EOL] def test_it_ignores_class_name ( ) : [EOL] assert html_to_text ( [string] ) == [string] [EOL] [EOL] [EOL] def test_it_supports_br ( ) : [EOL] assert html_to_text ( [string] ) == ( [string] ) [EOL] [EOL] [EOL] def test_it_ignores_empty_blocks ( ) : [EOL] assert html_to_text ( [string] ) == ( [string] ) [EOL] [EOL] [EOL] def test_it_adds_anchor_hrefs ( ) : [EOL] assert html_to_text ( [string] ) == ( [string] ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [ [string] , [string] ] , [ [string] , [string] ] , ] ) def test_it_ignores_useless_hrefs ( href , text ) : [EOL] assert html_to_text ( f' [string] { href } [string] { text } [string] ' ) == text [EOL] [EOL] [EOL] def test_it_ignores_anchors_without_hrefs ( ) : [EOL] assert html_to_text ( [string] ) == ( [string] ) [EOL] [EOL] [EOL] def test_it_supports_unordered_lists ( ) : [EOL] assert html_to_text ( [string] ) == ( [string] [string] ) [EOL] [EOL] [EOL] def test_it_supports_lists_with_blocks ( ) : [EOL] assert html_to_text ( [string] ) == ( [string] [string] [string] ) [EOL] [EOL] [EOL] def test_it_supports_nested_unordered_lists ( ) : [EOL] assert html_to_text ( [string] [string] [string] [string] ) == ( [string] [string] [string] ) [EOL] [EOL] [EOL] def test_it_supports_ordered_lists ( ) : [EOL] assert html_to_text ( [string] ) == ( [string] [string] ) [EOL] [EOL] [EOL] def test_it_supports_nested_ordered_lists ( ) : [EOL] assert html_to_text ( [string] [string] [string] [string] ) == ( [string] [string] [string] [string] ) [EOL] [EOL] [EOL] def test_it_supports_nested_mixed_lists ( ) : [EOL] assert html_to_text ( [string] [string] [string] [string] ) == ( [string] [string] [string] ) [EOL] [EOL] [EOL] def test_it_does_not_currently_support_roman_numerals ( ) : [EOL] with pytest . raises ( NotImplementedError , match = [string] ) : [EOL] html_to_text ( [string] ) [EOL] [EOL] [EOL] def test_it_raises_value_error_on_unsupported_type ( ) : [EOL] with pytest . raises ( ValueError , match = [string] ) : [EOL] html_to_text ( [string] ) [EOL] [EOL] [EOL] def test_it_replaces_non_decorative_images_with_urls ( ) : [EOL] assert html_to_text ( [string] ) == [string] [EOL] [EOL] [EOL] def test_it_ignores_decorative_images ( ) : [EOL] assert html_to_text ( [string] ) == [string] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ [ [string] , [string] ] , [ [string] , [string] ] , [ [string] , [string] ] , [ [string] , [string] ] , ] ) def test_it_embellishes_headings ( html , text ) : [EOL] assert html_to_text ( html ) == text [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pathlib [EOL] import builtins [EOL] import project [EOL] import tempfile [EOL] from pathlib import Path [EOL] [EOL] [EOL] class TempDjangoFileStorage : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , dirname ) : [EOL] self . dirname = dirname [EOL] self . path = Path ( dirname ) [EOL] [EOL] def get_abs_path ( self , django_fieldfile ) : [EOL] [docstring] [EOL] [EOL] parts = django_fieldfile . name . split ( [string] ) [EOL] return self . path . joinpath ( * parts ) [EOL] [EOL] def read ( self , django_fieldfile ) : [EOL] [docstring] [EOL] [EOL] f = django_fieldfile . open ( ) [EOL] data = f . read ( ) [EOL] f . close ( ) [EOL] return data [EOL] [EOL] [EOL] def django_file_storage ( settings ) : [EOL] [docstring] [EOL] [EOL] with tempfile . TemporaryDirectory ( ) as tmpdirname : [EOL] settings . MEDIA_ROOT = tmpdirname [EOL] settings . DEFAULT_FILE_STORAGE = [string] [EOL] storage = TempDjangoFileStorage ( tmpdirname ) [EOL] yield storage [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pathlib [EOL] from pathlib import Path [EOL] [EOL] [EOL] MY_DIR = Path ( __file__ ) . parent . resolve ( ) [EOL] [EOL] [comment] [EOL] VEGA_EMBED_FILE = MY_DIR / [string] / [string] / [string] / [string] / [string] [EOL] [EOL] [EOL] def test_git_lfs_has_checked_out_large_files ( ) : [EOL] assert VEGA_EMBED_FILE . exists ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] assert [string] in VEGA_EMBED_FILE . read_text ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0
import io [EOL] import builtins [EOL] import project [EOL] from io import StringIO [EOL] from textwrap import dedent [EOL] from typing import Optional [EOL] import pytest [EOL] [EOL] from . . util import typed_environ [EOL] [EOL] [EOL] def test_print_help_works ( ) : [EOL] class PrintyEnv ( typed_environ . BaseEnvironment ) : [EOL] THINGY = True [EOL] [EOL] out = StringIO ( ) [EOL] PrintyEnv ( ) . print_help ( out ) [EOL] assert [string] in out . getvalue ( ) [EOL] [EOL] [EOL] def test_get_envhelp_returns_empty_str ( ) : [EOL] assert typed_environ . get_envhelp ( int ) == [string] [EOL] [EOL] [EOL] def test_exception_raised_if_converter_not_found ( ) : [EOL] class NoConverterEnv ( typed_environ . BaseEnvironment ) : [EOL] OOF = ... [EOL] [EOL] with pytest . raises ( ValueError , match = [string] ) : [EOL] NoConverterEnv ( env = { [string] : [string] } ) [EOL] [EOL] [EOL] def test_overriding_default_value_works ( ) : [EOL] class MyEnv ( typed_environ . BaseEnvironment ) : [EOL] BLARG = [string] [EOL] [EOL] assert MyEnv ( ) . BLARG == [string] [EOL] assert MyEnv ( env = { [string] : [string] } ) . BLARG == [string] [EOL] [EOL] [EOL] def test_ints_work ( ) : [EOL] class MyIntyEnv ( typed_environ . BaseEnvironment ) : [EOL] INTY = ... [EOL] [EOL] assert MyIntyEnv ( env = { [string] : [string] } ) . INTY == [number] [EOL] [EOL] [EOL] def test_optional_values_work ( ) : [EOL] class MyOptionalEnv ( typed_environ . BaseEnvironment ) : [EOL] BLARG = ... [EOL] [EOL] assert MyOptionalEnv ( ) . BLARG is None [EOL] assert MyOptionalEnv ( env = { [string] : [string] } ) . BLARG is True [EOL] [EOL] [EOL] def test_get_docs_work ( ) : [EOL] class MyDocumentedEnv ( typed_environ . BaseEnvironment ) : [EOL] [comment] [EOL] [comment] [EOL] BLARG = True [EOL] [EOL] [comment] [EOL] OOF = [string] [EOL] [EOL] assert MyDocumentedEnv ( ) . get_docs ( ) == { [string] : [string] , [string] : [string] } [EOL] [EOL] [EOL] def test_system_exit_is_raised_if_exit_when_invalid_is_true ( ) : [EOL] class SystemExitEnv ( typed_environ . BaseEnvironment ) : [EOL] BLAH = ... [EOL] [EOL] with pytest . raises ( SystemExit ) as excinfo : [EOL] SystemExitEnv ( exit_when_invalid = True ) [EOL] [EOL] assert excinfo . value . args [ [number] ] == [number] [EOL] [EOL] [EOL] def test_nothing_is_raised_if_throw_when_invalid_is_false ( ) : [EOL] class YuckyEnv ( typed_environ . BaseEnvironment ) : [EOL] BLAH = ... [EOL] THINGY = True [EOL] [EOL] e = YuckyEnv ( throw_when_invalid = False ) [EOL] assert e . THINGY is True [EOL] assert not hasattr ( e , [string] ) [EOL] [EOL] [EOL] def test_multiple_missing_values_are_logged ( ) : [EOL] output = StringIO ( ) [EOL] [EOL] class MyBigEnv ( typed_environ . BaseEnvironment ) : [EOL] FOO = ... [EOL] [EOL] [comment] [EOL] BAR = ... [EOL] [EOL] with pytest . raises ( ValueError ) as excinfo : [EOL] MyBigEnv ( err_output = output ) [EOL] [EOL] assert [string] in str ( excinfo . value ) [EOL] [EOL] assert output . getvalue ( ) . strip ( ) == dedent ( [string] ) . strip ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $io.StringIO$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Iterator , Any , Dict , Union , List [EOL] import typing [EOL] import pytest [EOL] import json [EOL] [EOL] from project . util . streaming_json import ( generate_json_rows , generate_streaming_json , streaming_json_response ) [EOL] [EOL] [EOL] rows = [ { [string] : [number] , [string] : [string] , } , { [string] : [number] , [string] : [string] } ] [EOL] [EOL] [EOL] def test_generate_json_rows_works ( db ) : [EOL] from django . db import connection [EOL] [EOL] with connection . cursor ( ) as cursor : [EOL] cursor . execute ( [string] ) [EOL] cursor . execute ( [string] [string] ) [EOL] cursor . execute ( [string] ) [EOL] rows = generate_json_rows ( cursor ) [EOL] assert next ( rows ) == { [string] : [string] , [string] : [string] , [string] : [ [number] , [number] ] } [EOL] assert next ( rows ) == { [string] : [string] , [string] : [string] , [string] : [ [number] , [number] ] } [EOL] with pytest . raises ( StopIteration ) : [EOL] next ( rows ) [EOL] [EOL] [EOL] def test_generate_streaming_json_works ( ) : [EOL] g = generate_streaming_json ( rows ) [EOL] assert next ( g ) == [string] [EOL] assert json . loads ( next ( g ) ) == rows [ [number] ] [EOL] assert next ( g ) == [string] [EOL] assert json . loads ( next ( g ) ) == rows [ [number] ] [EOL] assert next ( g ) == [string] [EOL] with pytest . raises ( StopIteration ) : [EOL] next ( g ) [EOL] [EOL] [EOL] def test_streaming_json_response_works ( ) : [EOL] r = streaming_json_response ( rows , [string] ) [EOL] assert r [ [string] ] == [string] [EOL] assert r [ [string] ] == [string] [EOL] assert json . loads ( [string] . join ( list ( r ) ) . decode ( [string] ) ) == rows [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]]$ 0
from typing import Any , List [EOL] import typing [EOL] import pytest [EOL] from django . urls import path [EOL] from django . template import RequestContext [EOL] from django . template import Template [EOL] from django . http import HttpResponse [EOL] [EOL] from project . context_processors import ( ga_snippet , gtm_snippet , gtm_noscript_snippet , rollbar_snippet , facebook_pixel_snippet , facebook_pixel_noscript_snippet ) [EOL] [EOL] [EOL] def make_snippet_view ( var_name ) : [EOL] def view ( request ) : [EOL] template = Template ( [string] + var_name + [string] ) [EOL] return HttpResponse ( template . render ( RequestContext ( request ) ) ) [EOL] return view [EOL] [EOL] [EOL] urlpatterns = [ path ( [string] , make_snippet_view ( [string] ) ) , path ( [string] , make_snippet_view ( [string] ) ) , path ( [string] , make_snippet_view ( [string] ) ) , path ( [string] , make_snippet_view ( [string] ) ) , path ( [string] , make_snippet_view ( [string] ) ) , path ( [string] , make_snippet_view ( [string] ) ) , ] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ga_snippet , gtm_snippet , gtm_noscript_snippet , rollbar_snippet , facebook_pixel_snippet , facebook_pixel_noscript_snippet ] ) def test_contexts_are_empty_when_associated_setting_is_empty ( context_processor ) : [EOL] assert context_processor ( None ) == { } [EOL] [EOL] [EOL] def ensure_response_sets_csp ( res , * args ) : [EOL] csp = res [ [string] ] [EOL] assert f" [string] " in csp [EOL] for arg in args : [EOL] assert arg in csp [EOL] [EOL] [EOL] @ pytest . mark . urls ( __name__ ) def test_ga_snippet_works ( client , settings ) : [EOL] settings . GA_TRACKING_ID = [string] [EOL] res = client . get ( [string] ) [EOL] assert res . status_code == [number] [EOL] html = res . content . decode ( [string] ) [EOL] assert [string] in html [EOL] ensure_response_sets_csp ( res , [string] ) [EOL] [EOL] [EOL] @ pytest . mark . urls ( __name__ ) def test_gtm_snippets_work ( client , settings ) : [EOL] settings . GTM_CONTAINER_ID = [string] [EOL] res = client . get ( [string] ) [EOL] assert res . status_code == [number] [EOL] html = res . content . decode ( [string] ) [EOL] assert [string] in html [EOL] ensure_response_sets_csp ( res , [string] ) [EOL] [EOL] res = client . get ( [string] ) [EOL] assert res . status_code == [number] [EOL] html = res . content . decode ( [string] ) [EOL] assert [string] in html [EOL] [EOL] [EOL] @ pytest . mark . urls ( __name__ ) def test_facebook_pixel_snippets_work ( client , settings ) : [EOL] settings . FACEBOOK_PIXEL_ID = [string] [EOL] res = client . get ( [string] ) [EOL] assert res . status_code == [number] [EOL] html = res . content . decode ( [string] ) [EOL] assert [string] in html [EOL] ensure_response_sets_csp ( res , [string] ) [EOL] ensure_response_sets_csp ( res , [string] ) [EOL] [EOL] res = client . get ( [string] ) [EOL] assert res . status_code == [number] [EOL] html = res . content . decode ( [string] ) [EOL] assert [string] in html [EOL] [EOL] [EOL] @ pytest . mark . urls ( __name__ ) def test_rollbar_snippet_works ( client , settings ) : [EOL] def get_html ( ) : [EOL] res = client . get ( [string] ) [EOL] assert res . status_code == [number] [EOL] return ( res , res . content . decode ( [string] ) ) [EOL] [EOL] settings . ROLLBAR_ACCESS_TOKEN = [string] [EOL] res , html = get_html ( ) [EOL] assert [string] in html [EOL] assert [string] in html [EOL] ensure_response_sets_csp ( res , [string] ) [EOL] [EOL] settings . DEBUG = True [EOL] res , html = get_html ( ) [EOL] assert [string] in html [EOL] [EOL] [EOL] def test_rollbar_js_url_exists ( staticfiles , client ) : [EOL] url = rollbar_snippet . get_context ( ) [ [string] ] [EOL] res = client . get ( url ) [EOL] assert res . status_code == [number] [EOL] assert res [ [string] ] == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from django . core . management import call_command [EOL] from django . utils . translation import override , gettext_lazy as _ [EOL] [EOL] from project import locales [EOL] [EOL] HELLO_WORLD = _ ( [string] ) [EOL] [EOL] [EOL] def test_compilemessages_works ( settings ) : [EOL] settings . LANGUAGES = locales . ALL . choices [EOL] call_command ( [string] ) [EOL] assert str ( HELLO_WORLD ) == [string] [EOL] with override ( [string] ) : [EOL] assert str ( HELLO_WORLD ) == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0
	0
	0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] import django . contrib . postgres . fields . jsonb [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . CharField ( help_text = [string] , max_length = [number] , unique = True ) ) , ( [string] , models . DateTimeField ( auto_now_add = True ) ) , ( [string] , models . DateTimeField ( auto_now = True ) ) , ( [string] , models . BooleanField ( help_text = [string] ) ) , ( [string] , django . contrib . postgres . fields . jsonb . JSONField ( default = None , help_text = [string] , null = True ) ) , ] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from django . core . management import call_command [EOL] [EOL] [EOL] def test_sendtestsms_works ( db , smsoutbox ) : [EOL] call_command ( [string] , [string] , [string] ) [EOL] assert len ( smsoutbox ) == [number] [EOL] assert smsoutbox [ [number] ] . to == [string] [EOL] assert smsoutbox [ [number] ] . body == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Pattern , Any [EOL] import texting_history [EOL] import typing [EOL] import builtins [EOL] import re [EOL] from dataclasses import dataclass [EOL] [EOL] from project . util . phone_number import ALL_DIGITS_RE [EOL] [EOL] IN_QUOTES_RE = re . compile ( [string] ) [EOL] [EOL] [EOL] @ dataclass class Query : [EOL] full_name = [string] [EOL] phone_number = [string] [EOL] has_hpa_packet = False [EOL] message_body = [string] [EOL] [EOL] @ staticmethod def parse ( query ) : [EOL] result = Query ( ) [EOL] quoted_match = IN_QUOTES_RE . fullmatch ( query ) [EOL] [EOL] if quoted_match : [EOL] result . message_body = quoted_match . group ( [string] ) [EOL] elif ALL_DIGITS_RE . fullmatch ( query ) : [EOL] result . phone_number = query [EOL] elif query . lower ( ) == [string] : [EOL] result . has_hpa_packet = True [EOL] else : [EOL] result . full_name = query [EOL] return result [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'Query'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class TextingHistoryConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
	0
	0
from typing import Any [EOL] import pathlib [EOL] import typing [EOL] import json [EOL] from pathlib import Path [EOL] import pytest [EOL] [EOL] MY_DIR = Path ( __file__ ) . parent . resolve ( ) [EOL] [EOL] FAKE_MESSAGE_RESPONSE_PATH = ( MY_DIR / [string] ) . read_text ( ) [EOL] [EOL] FAKE_MESSAGE_RESPONSE = json . loads ( FAKE_MESSAGE_RESPONSE_PATH ) [EOL] [EOL] EMPTY_MESSAGE_RESPONSE = json . loads ( FAKE_MESSAGE_RESPONSE_PATH ) [EOL] EMPTY_MESSAGE_RESPONSE [ [string] ] = [number] [EOL] EMPTY_MESSAGE_RESPONSE [ [string] ] = [ ] [EOL] [EOL] [EOL] @ pytest . fixture def mock_twilio_api ( requests_mock , settings ) : [EOL] settings . TWILIO_ACCOUNT_SID = [string] [EOL] settings . TWILIO_AUTH_TOKEN = [string] [EOL] settings . TWILIO_PHONE_NUMBER = [string] [EOL] requests_mock . get ( [string] , json = FAKE_MESSAGE_RESPONSE , ) [EOL] requests_mock . get ( [string] , json = EMPTY_MESSAGE_RESPONSE , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0
import pytest [EOL] [EOL] from texting_history . query_parser import Query [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ ( [string] , Query ( full_name = [string] ) ) , ( [string] , Query ( phone_number = [string] ) ) , ( [string] , Query ( has_hpa_packet = True ) ) , ( [string] , Query ( message_body = [string] ) ) , ] ) def test_parse_works ( query , expected ) : [EOL] assert Query . parse ( query ) == expected [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
import pytest [EOL] [EOL] [EOL] @ pytest . fixture def mailchimp ( settings ) : [EOL] [docstring] [EOL] [EOL] settings . MAILCHIMP_API_KEY = ( [string] * [number] ) + [string] [EOL] settings . MAILCHIMP_CORS_ORIGINS = [ [string] ] [EOL] settings . MAILCHIMP_LIST_ID = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
	0
from typing import Any [EOL] import typing [EOL] import io [EOL] import PyPDF2 [EOL] import builtins [EOL] from io import BytesIO [EOL] import weasyprint [EOL] from PyPDF2 . pdf import PageObject [EOL] [EOL] [EOL] CSS = [string] [EOL] [EOL] BASE_HTML = [string] [EOL] [EOL] [EOL] def render_pdf ( count ) : [EOL] css = weasyprint . CSS ( string = CSS ) [EOL] html_content = [string] . join ( [ BASE_HTML , [string] * count ] ) [EOL] html = weasyprint . HTML ( string = html_content ) [EOL] pdf = BytesIO ( html . write_pdf ( stylesheets = [ css ] ) ) [EOL] return pdf [EOL] [EOL] [EOL] def merge_page_with_possible_rotation ( page , numbers_page ) : [EOL] ur_x = page . artBox . getUpperRight_x ( ) [EOL] ur_y = page . artBox . getUpperRight_y ( ) [EOL] if ur_x > ur_y : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] page . mergeRotatedTranslatedPage ( numbers_page , [number] , numbers_page . mediaBox . getWidth ( ) / [number] , numbers_page . mediaBox . getWidth ( ) / [number] ) [EOL] else : [EOL] page . mergePage ( numbers_page ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $io.BytesIO$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] from django . db . models . signals import post_migrate [EOL] [EOL] from . post_migration import create_default_hpaction_config [EOL] [EOL] [EOL] class HPActionConfig ( AppConfig ) : [EOL] name = [string] [EOL] [EOL] verbose_name = [string] [EOL] [EOL] def ready ( self ) : [EOL] post_migrate . connect ( create_default_hpaction_config , sender = self ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] from django . apps import apps as global_apps [EOL] from django . db import DEFAULT_DB_ALIAS , router [EOL] [EOL] [EOL] def create_default_hpaction_config ( app_config , verbosity = [number] , interactive = True , using = DEFAULT_DB_ALIAS , apps = global_apps , ** kwargs ) : [EOL] try : [EOL] Config = apps . get_model ( [string] , [string] ) [EOL] except LookupError : [EOL] return [EOL] [EOL] if not router . allow_migrate_model ( using , Config ) : [EOL] return [EOL] [EOL] if not Config . objects . using ( using ) . exists ( ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if verbosity >= [number] : [EOL] print ( [string] ) [EOL] Config ( ) . save ( using = using ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , BinaryIO [EOL] import io [EOL] import typing [EOL] from typing import BinaryIO [EOL] from io import BytesIO [EOL] import PyPDF2 [EOL] [EOL] [EOL] POINTS_PER_INCH = [number] [EOL] [EOL] LETTER_WIDTH = [number] * POINTS_PER_INCH [EOL] [EOL] LETTER_HEIGHT = [number] * POINTS_PER_INCH [EOL] [EOL] [EOL] def convert_to_letter_pages ( pdf ) : [EOL] [docstring] [EOL] [EOL] reader = PyPDF2 . PdfFileReader ( pdf ) [EOL] writer = PyPDF2 . PdfFileWriter ( ) [EOL] [EOL] for i in range ( reader . getNumPages ( ) ) : [EOL] blank_page = writer . addBlankPage ( width = LETTER_WIDTH , height = LETTER_HEIGHT ) [EOL] src_page = reader . getPage ( i ) [EOL] blank_page . mergePage ( src_page ) [EOL] [EOL] new_pdf = BytesIO ( ) [EOL] writer . write ( new_pdf ) [EOL] new_pdf . seek ( [number] ) [EOL] [EOL] return new_pdf [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 $typing.BinaryIO$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Optional , Union , Type , List [EOL] import decimal [EOL] import typing [EOL] import datetime [EOL] import hpaction [EOL] import builtins [EOL] from typing import Optional , Union , List [EOL] from decimal import Decimal [EOL] import datetime [EOL] from enum import Enum [EOL] from dataclasses import dataclass , field [EOL] from hpaction . hotdocs import AnswerSet , enum2mc , enum2mc_opt , none2unans , AnswerType [EOL] [EOL] [EOL] class AccessPersonMC ( Enum ) : [EOL] [comment] [EOL] ME = [string] [EOL] [comment] [EOL] SOMEONE_ELSE = [string] [EOL] [EOL] [EOL] class ActionTypeMS ( Enum ) : [EOL] [comment] [EOL] REPAIRS = [string] [EOL] [comment] [EOL] HARASSMENT = [string] [EOL] [comment] [EOL] FEE_WAIVER = [string] [EOL] [EOL] [EOL] class CourtCountyMC ( Enum ) : [EOL] BRONX = [string] [EOL] KINGS = [string] [EOL] NEW_YORK = [string] [EOL] QUEENS = [string] [EOL] RICHMOND = [string] [EOL] [EOL] [EOL] class CourtLocationMC ( Enum ) : [EOL] [comment] [EOL] BRONX_COUNTY = [string] [EOL] [comment] [EOL] HARLEM_COMMUNITY_JUSTICE_CENTER = [string] [EOL] [comment] [EOL] KINGS_COUNTY = [string] [EOL] [comment] [EOL] NEW_YORK_COUNTY = [string] [EOL] [comment] [EOL] QUEENS_COUNTY = [string] [EOL] [comment] [EOL] RICHMOND_COUNTY = [string] [EOL] [comment] [EOL] RED_HOOK_COMMUNITY_JUSTICE_CENTER = [string] [EOL] [EOL] [EOL] class HarassmentAllegationsMS ( Enum ) : [EOL] [comment] [EOL] FORCE = [string] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] MISLEADING_INFO = [string] [EOL] [comment] [EOL] [comment] [EOL] STOPPED_SERVICE = [string] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] FAILED_TO_COMPLY = [string] [EOL] [comment] [EOL] [comment] [EOL] FALSE_CERT_REPAIRS = [string] [EOL] [comment] [EOL] CONDUCT_IN_VIOLATION = [string] [EOL] [comment] [EOL] SUED = [string] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] REMOVED_POSSESSIONS = [string] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] INDUCED_LEAVING = [string] [EOL] [comment] [EOL] [comment] [EOL] CONTACT = [string] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] THREATS_RE_STATUS = [string] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] REQUESTED_ID = [string] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] DISTURBED = [string] [EOL] [EOL] [EOL] class IFPWhatOrdersMS ( Enum ) : [EOL] [comment] [EOL] FEES = [string] [EOL] [comment] [EOL] APPEAL_FEES = [string] [EOL] [comment] [EOL] OTHER = [string] [EOL] [EOL] [EOL] class LandlordAddressStateMC ( Enum ) : [EOL] ALABAMA = [string] [EOL] ALASKA = [string] [EOL] ARIZONA = [string] [EOL] ARKANSAS = [string] [EOL] CALIFORNIA = [string] [EOL] COLORADO = [string] [EOL] CONNECTICUT = [string] [EOL] DELAWARE = [string] [EOL] DISTRICT_OF_COLUMBIA = [string] [EOL] FLORIDA = [string] [EOL] GEORGIA = [string] [EOL] HAWAII = [string] [EOL] IDAHO = [string] [EOL] ILLINOIS = [string] [EOL] INDIANA = [string] [EOL] IOWA = [string] [EOL] KANSAS = [string] [EOL] KENTUCKY = [string] [EOL] LOUISIANA = [string] [EOL] MAINE = [string] [EOL] MARYLAND = [string] [EOL] MASSACHUSETTS = [string] [EOL] MICHIGAN = [string] [EOL] MINNESOTA = [string] [EOL] MISSISSIPPI = [string] [EOL] MISSOURI = [string] [EOL] MONTANA = [string] [EOL] NEBRASKA = [string] [EOL] NEVADA = [string] [EOL] NEW_HAMPSHIRE = [string] [EOL] NEW_JERSEY = [string] [EOL] NEW_MEXICO = [string] [EOL] NEW_YORK = [string] [EOL] NORTH_CAROLINA = [string] [EOL] NORTH_DAKOTA = [string] [EOL] OHIO = [string] [EOL] OKLAHOMA = [string] [EOL] OREGON = [string] [EOL] PENNSYLVANIA = [string] [EOL] RHODE_ISLAND = [string] [EOL] SOUTH_CAROLINA = [string] [EOL] SOUTH_DAKOTA = [string] [EOL] TENNESSEE = [string] [EOL] TEXAS = [string] [EOL] UTAH = [string] [EOL] VERMONT = [string] [EOL] VIRGINIA = [string] [EOL] WASHINGTON = [string] [EOL] WEST_VIRGINIA = [string] [EOL] WISCONSIN = [string] [EOL] WYOMING = [string] [EOL] [EOL] [EOL] class LandlordEntityOrIndividualMC ( Enum ) : [EOL] [comment] [EOL] INDIVIDUAL = [string] [EOL] [comment] [EOL] COMPANY = [string] [EOL] [EOL] [EOL] class PayPeriodMC ( Enum ) : [EOL] [comment] [EOL] WEEK = [string] [EOL] [comment] [EOL] TWO_WEEKS = [string] [EOL] [comment] [EOL] HALF_MONTH = [string] [EOL] [comment] [EOL] MONTH = [string] [EOL] [comment] [EOL] OTHER = [string] [EOL] [EOL] [EOL] class PriorHarassmentCaseMC ( Enum ) : [EOL] [comment] [EOL] YES = [string] [EOL] [comment] [EOL] NO = [string] [EOL] [EOL] [EOL] class TenantBoroughMC ( Enum ) : [EOL] BRONX = [string] [EOL] BROOKLYN = [string] [EOL] MANHATTAN = [string] [EOL] QUEENS = [string] [EOL] STATEN_ISLAND = [string] [EOL] [EOL] [EOL] class TenantRepairsAllegationsMC ( Enum ) : [EOL] [comment] [EOL] [comment] [EOL] NOTICE_ISSUED = [string] [EOL] [comment] [EOL] [comment] [EOL] NO_NOTICE_ISSUED = [string] [EOL] [EOL] [EOL] class AreaComplainedOfMC ( Enum ) : [EOL] [comment] [EOL] MY_APARTMENT = [string] [EOL] [comment] [EOL] PUBLIC_AREA = [string] [EOL] [EOL] [EOL] class WhichRoomMC ( Enum ) : [EOL] [comment] [EOL] KITCHEN = [string] [EOL] [comment] [EOL] BATHROOM = [string] [EOL] [comment] [EOL] HALLWAY = [string] [EOL] [comment] [EOL] LIVING_ROOM = [string] [EOL] [comment] [EOL] DINING_ROOM = [string] [EOL] [comment] [EOL] BEDROOM_1 = [string] [EOL] [comment] [EOL] BEDROOM_2 = [string] [EOL] [comment] [EOL] BEDROOM_3 = [string] [EOL] [comment] [EOL] BEDROOM_4 = [string] [EOL] [comment] [EOL] STAIRWAY = [string] [EOL] [comment] [EOL] PORCHBALCONY = [string] [EOL] [comment] [EOL] FRONT_ENTRANCE = [string] [EOL] [comment] [EOL] LOBBY = [string] [EOL] [comment] [EOL] MAILBOX_AREA = [string] [EOL] [comment] [EOL] LAUNDRY_ROOM = [string] [EOL] [comment] [EOL] YARD = [string] [EOL] [comment] [EOL] PARKING_AREA = [string] [EOL] [comment] [EOL] STORAGE_ROOM = [string] [EOL] [comment] [EOL] ALL_ROOMS = [string] [EOL] [EOL] [EOL] ManagementCompanyAddressStateMC = LandlordAddressStateMC [EOL] [EOL] PriorRepairsCaseMC = PriorHarassmentCaseMC [EOL] [EOL] TenantAddressStateMC = LandlordAddressStateMC [EOL] [EOL] [EOL] @ dataclass class TenantChild : [EOL] [comment] [EOL] tenant_child_name_te = None [EOL] [EOL] [comment] [EOL] tenant_child_dob = None [EOL] [EOL] @ staticmethod def add_to_answer_set ( values , result ) : [EOL] result . add ( [string] , [ none2unans ( v . tenant_child_name_te , AnswerType . TEXT ) for v in values ] ) [EOL] result . add ( [string] , [ none2unans ( v . tenant_child_dob , AnswerType . DATE ) for v in values ] ) [EOL] [EOL] [EOL] @ dataclass class TenantComplaints : [EOL] [comment] [EOL] area_complained_of_mc = None [EOL] [EOL] [comment] [EOL] which_room_mc = None [EOL] [EOL] [comment] [EOL] conditions_complained_of_te = None [EOL] [EOL] @ staticmethod def add_to_answer_set ( values , result ) : [EOL] result . add ( [string] , [ enum2mc ( none2unans ( v . area_complained_of_mc , AnswerType . MC ) ) for v in values ] ) [EOL] result . add ( [string] , [ enum2mc ( none2unans ( v . which_room_mc , AnswerType . MC ) ) for v in values ] ) [EOL] result . add ( [string] , [ none2unans ( v . conditions_complained_of_te , AnswerType . TEXT ) for v in values ] ) [EOL] [EOL] [EOL] @ dataclass class HPActionVariables : [EOL] [comment] [EOL] access_person_te = None [EOL] [EOL] [comment] [EOL] access_person_phone_te = None [EOL] [EOL] [comment] [EOL] case_number_te = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] cause_of_action_description_te = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] harassment_details_te = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] ifp_other_order_te = None [comment] [EOL] [EOL] [comment] [EOL] landlord_address_city_te = None [EOL] [EOL] [comment] [EOL] landlord_address_street_te = None [EOL] [EOL] [comment] [EOL] landlord_address_zip_te = None [EOL] [EOL] [comment] [EOL] landlord_contact_person_name_first_te = None [EOL] [EOL] [comment] [EOL] landlord_contact_person_name_last_te = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] landlord_entity_name_te = None [EOL] [EOL] [comment] [EOL] landlord_name_first_te = None [EOL] [EOL] [comment] [EOL] landlord_name_last_te = None [EOL] [EOL] [comment] [EOL] management_company_address_city_te = None [EOL] [EOL] [comment] [EOL] management_company_address_street_te = None [EOL] [EOL] [comment] [EOL] management_company_address_zip_te = None [EOL] [EOL] [comment] [EOL] management_company_name_te = None [EOL] [EOL] [comment] [EOL] other_pay_period_te = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] prior_relief_sought_case_numbers_and_dates_te = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] reason_for_further_application_te = None [EOL] [EOL] [comment] [EOL] tenant_address_apt_no_te = None [EOL] [EOL] [comment] [EOL] tenant_address_city_te = None [EOL] [EOL] [comment] [EOL] tenant_address_street_te = None [EOL] [EOL] [comment] [EOL] tenant_address_zip_te = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] tenant_income_source_te = None [EOL] [EOL] [comment] [EOL] tenant_name_first_te = None [EOL] [EOL] [comment] [EOL] tenant_name_last_te = None [EOL] [EOL] [comment] [EOL] tenant_name_middle_te = None [EOL] [EOL] [comment] [EOL] tenant_phone_home_te = None [EOL] [EOL] [comment] [EOL] tenant_phone_work_te = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] tenant_property_owned_te = None [EOL] [EOL] [comment] [EOL] inspection_request_copy_number_nu = None [EOL] [EOL] [comment] [EOL] tenant_address_floor_nu = None [EOL] [EOL] [comment] [EOL] tenant_children_under_6_nu = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] tenant_income_nu = None [EOL] [EOL] [comment] [EOL] tenant_monthly_exp_deductions_nu = None [EOL] [EOL] [comment] [EOL] tenant_monthly_exp_employment_nu = None [EOL] [EOL] [comment] [EOL] tenant_monthly_exp_food_etc_nu = None [EOL] [EOL] [comment] [EOL] tenant_monthly_exp_housing_nu = None [EOL] [EOL] [comment] [EOL] tenant_monthly_exp_insurance_nu = None [EOL] [EOL] [comment] [EOL] tenant_monthly_exp_laundry_nu = None [EOL] [EOL] [comment] [EOL] tenant_monthly_exp_medical_nu = None [EOL] [EOL] [comment] [EOL] tenant_monthly_exp_other_nu = None [EOL] [EOL] [comment] [EOL] tenant_monthly_exp_support_nu = None [EOL] [EOL] [comment] [EOL] tenant_monthly_exp_transportation_nu = None [EOL] [EOL] [comment] [EOL] tenant_monthly_exp_utilities_nu = None [EOL] [EOL] [comment] [EOL] tenant_monthly_rent_nu = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] fine_landlord_harassment_tf = None [EOL] [EOL] flag_tf = None [EOL] [EOL] harassment_conduct_in_violation_tf = None [EOL] [EOL] harassment_contact_tf = None [EOL] [EOL] harassment_disturbed_tf = None [EOL] [EOL] harassment_failed_to_comply_tf = None [EOL] [EOL] harassment_false_cert_repairs_tf = None [EOL] [EOL] harassment_force_tf = None [EOL] [EOL] harassment_induced_leaving_tf = None [EOL] [EOL] harassment_misleading_info_tf = None [EOL] [EOL] harassment_removed_possessions_tf = None [EOL] [EOL] harassment_requested_id_tf = None [EOL] [EOL] harassment_stopped_service_tf = None [EOL] [EOL] harassment_sued_tf = None [EOL] [EOL] harassment_threats_re_status_tf = None [EOL] [EOL] [comment] [EOL] management_company_to_be_sued_tf = None [EOL] [EOL] [comment] [EOL] more_than_2_apartments_in_building_tf = None [EOL] [EOL] [comment] [EOL] more_than_one_family_per_apartment_tf = None [EOL] [EOL] [comment] [EOL] previous_application_tf = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] problem_is_urgent_tf = None [EOL] [EOL] [comment] [EOL] request_fee_waiver_tf = None [EOL] [EOL] [comment] [EOL] sue_for_harassment_tf = None [EOL] [EOL] [comment] [EOL] sue_for_repairs_tf = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] tenant_receives_public_assistance_tf = None [EOL] [EOL] [comment] [EOL] tenant_wants_to_serve_tf = None [EOL] [EOL] [comment] [EOL] user_is_nycha_tf = None [EOL] [EOL] [comment] [EOL] access_person_mc = None [EOL] [EOL] [comment] [EOL] action_type_ms = None [EOL] [EOL] [comment] [EOL] court_county_mc = None [EOL] [EOL] [comment] [EOL] court_location_mc = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] harassment_allegations_ms = None [EOL] [EOL] [comment] [EOL] ifp_what_orders_ms = None [comment] [EOL] [EOL] [comment] [EOL] landlord_address_state_mc = None [EOL] [EOL] [comment] [EOL] landlord_entity_or_individual_mc = None [EOL] [EOL] [comment] [EOL] management_company_address_state_mc = None [EOL] [EOL] [comment] [EOL] pay_period_mc = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] prior_harassment_case_mc = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] prior_repairs_case_mc = None [EOL] [EOL] [comment] [EOL] tenant_address_state_mc = None [EOL] [EOL] [comment] [EOL] tenant_borough_mc = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] tenant_repairs_allegations_mc = None [EOL] [EOL] tenant_child_list = field ( default_factory = list ) [EOL] [EOL] tenant_complaints_list = field ( default_factory = list ) [EOL] [EOL] def to_answer_set ( self ) : [EOL] result = AnswerSet ( ) [EOL] result . add_opt ( [string] , self . access_person_te ) [EOL] result . add_opt ( [string] , self . access_person_phone_te ) [EOL] result . add_opt ( [string] , self . case_number_te ) [EOL] result . add_opt ( [string] , self . cause_of_action_description_te ) [EOL] result . add_opt ( [string] , self . harassment_details_te ) [EOL] result . add_opt ( [string] , self . ifp_other_order_te ) [EOL] result . add_opt ( [string] , self . landlord_address_city_te ) [EOL] result . add_opt ( [string] , self . landlord_address_street_te ) [EOL] result . add_opt ( [string] , self . landlord_address_zip_te ) [EOL] result . add_opt ( [string] , self . landlord_contact_person_name_first_te ) [EOL] result . add_opt ( [string] , self . landlord_contact_person_name_last_te ) [EOL] result . add_opt ( [string] , self . landlord_entity_name_te ) [EOL] result . add_opt ( [string] , self . landlord_name_first_te ) [EOL] result . add_opt ( [string] , self . landlord_name_last_te ) [EOL] result . add_opt ( [string] , self . management_company_address_city_te ) [EOL] result . add_opt ( [string] , self . management_company_address_street_te ) [EOL] result . add_opt ( [string] , self . management_company_address_zip_te ) [EOL] result . add_opt ( [string] , self . management_company_name_te ) [EOL] result . add_opt ( [string] , self . other_pay_period_te ) [EOL] result . add_opt ( [string] , self . prior_relief_sought_case_numbers_and_dates_te ) [EOL] result . add_opt ( [string] , self . reason_for_further_application_te ) [EOL] result . add_opt ( [string] , self . tenant_address_apt_no_te ) [EOL] result . add_opt ( [string] , self . tenant_address_city_te ) [EOL] result . add_opt ( [string] , self . tenant_address_street_te ) [EOL] result . add_opt ( [string] , self . tenant_address_zip_te ) [EOL] result . add_opt ( [string] , self . tenant_income_source_te ) [EOL] result . add_opt ( [string] , self . tenant_name_first_te ) [EOL] result . add_opt ( [string] , self . tenant_name_last_te ) [EOL] result . add_opt ( [string] , self . tenant_name_middle_te ) [EOL] result . add_opt ( [string] , self . tenant_phone_home_te ) [EOL] result . add_opt ( [string] , self . tenant_phone_work_te ) [EOL] result . add_opt ( [string] , self . tenant_property_owned_te ) [EOL] result . add_opt ( [string] , self . inspection_request_copy_number_nu ) [EOL] result . add_opt ( [string] , self . tenant_address_floor_nu ) [EOL] result . add_opt ( [string] , self . tenant_children_under_6_nu ) [EOL] result . add_opt ( [string] , self . tenant_income_nu ) [EOL] result . add_opt ( [string] , self . tenant_monthly_exp_deductions_nu ) [EOL] result . add_opt ( [string] , self . tenant_monthly_exp_employment_nu ) [EOL] result . add_opt ( [string] , self . tenant_monthly_exp_food_etc_nu ) [EOL] result . add_opt ( [string] , self . tenant_monthly_exp_housing_nu ) [EOL] result . add_opt ( [string] , self . tenant_monthly_exp_insurance_nu ) [EOL] result . add_opt ( [string] , self . tenant_monthly_exp_laundry_nu ) [EOL] result . add_opt ( [string] , self . tenant_monthly_exp_medical_nu ) [EOL] result . add_opt ( [string] , self . tenant_monthly_exp_other_nu ) [EOL] result . add_opt ( [string] , self . tenant_monthly_exp_support_nu ) [EOL] result . add_opt ( [string] , self . tenant_monthly_exp_transportation_nu ) [EOL] result . add_opt ( [string] , self . tenant_monthly_exp_utilities_nu ) [EOL] result . add_opt ( [string] , self . tenant_monthly_rent_nu ) [EOL] result . add_opt ( [string] , self . fine_landlord_harassment_tf ) [EOL] result . add_opt ( [string] , self . flag_tf ) [EOL] result . add_opt ( [string] , self . harassment_conduct_in_violation_tf ) [EOL] result . add_opt ( [string] , self . harassment_contact_tf ) [EOL] result . add_opt ( [string] , self . harassment_disturbed_tf ) [EOL] result . add_opt ( [string] , self . harassment_failed_to_comply_tf ) [EOL] result . add_opt ( [string] , self . harassment_false_cert_repairs_tf ) [EOL] result . add_opt ( [string] , self . harassment_force_tf ) [EOL] result . add_opt ( [string] , self . harassment_induced_leaving_tf ) [EOL] result . add_opt ( [string] , self . harassment_misleading_info_tf ) [EOL] result . add_opt ( [string] , self . harassment_removed_possessions_tf ) [EOL] result . add_opt ( [string] , self . harassment_requested_id_tf ) [EOL] result . add_opt ( [string] , self . harassment_stopped_service_tf ) [EOL] result . add_opt ( [string] , self . harassment_sued_tf ) [EOL] result . add_opt ( [string] , self . harassment_threats_re_status_tf ) [EOL] result . add_opt ( [string] , self . management_company_to_be_sued_tf ) [EOL] result . add_opt ( [string] , self . more_than_2_apartments_in_building_tf ) [EOL] result . add_opt ( [string] , self . more_than_one_family_per_apartment_tf ) [EOL] result . add_opt ( [string] , self . previous_application_tf ) [EOL] result . add_opt ( [string] , self . problem_is_urgent_tf ) [EOL] result . add_opt ( [string] , self . request_fee_waiver_tf ) [EOL] result . add_opt ( [string] , self . sue_for_harassment_tf ) [EOL] result . add_opt ( [string] , self . sue_for_repairs_tf ) [EOL] result . add_opt ( [string] , self . tenant_receives_public_assistance_tf ) [EOL] result . add_opt ( [string] , self . tenant_wants_to_serve_tf ) [EOL] result . add_opt ( [string] , self . user_is_nycha_tf ) [EOL] result . add_opt ( [string] , enum2mc_opt ( self . access_person_mc ) ) [EOL] result . add_opt ( [string] , enum2mc_opt ( self . action_type_ms ) ) [EOL] result . add_opt ( [string] , enum2mc_opt ( self . court_county_mc ) ) [EOL] result . add_opt ( [string] , enum2mc_opt ( self . court_location_mc ) ) [EOL] result . add_opt ( [string] , enum2mc_opt ( self . harassment_allegations_ms ) ) [EOL] result . add_opt ( [string] , enum2mc_opt ( self . ifp_what_orders_ms ) ) [EOL] result . add_opt ( [string] , enum2mc_opt ( self . landlord_address_state_mc ) ) [EOL] result . add_opt ( [string] , enum2mc_opt ( self . landlord_entity_or_individual_mc ) ) [EOL] result . add_opt ( [string] , enum2mc_opt ( self . management_company_address_state_mc ) ) [EOL] result . add_opt ( [string] , enum2mc_opt ( self . pay_period_mc ) ) [EOL] result . add_opt ( [string] , enum2mc_opt ( self . prior_harassment_case_mc ) ) [EOL] result . add_opt ( [string] , enum2mc_opt ( self . prior_repairs_case_mc ) ) [EOL] result . add_opt ( [string] , enum2mc_opt ( self . tenant_address_state_mc ) ) [EOL] result . add_opt ( [string] , enum2mc_opt ( self . tenant_borough_mc ) ) [EOL] result . add_opt ( [string] , enum2mc_opt ( self . tenant_repairs_allegations_mc ) ) [EOL] if self . tenant_child_list : [EOL] TenantChild . add_to_answer_set ( self . tenant_child_list , result ) [EOL] if self . tenant_complaints_list : [EOL] TenantComplaints . add_to_answer_set ( self . tenant_complaints_list , result ) [EOL] return result [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[datetime.date]$ 0 0 0 0 0 0 0 $None$ 0 $typing.List['TenantChild']$ 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List['TenantChild']$ 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List['TenantChild']$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[AreaComplainedOfMC]$ 0 0 0 0 0 0 $typing.Optional[WhichRoomMC]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 $None$ 0 $typing.List['TenantComplaints']$ 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List['TenantComplaints']$ 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List['TenantComplaints']$ 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List['TenantComplaints']$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[typing.Union[builtins.int,builtins.float,decimal.Decimal]]$ 0 0 0 0 0 0 $typing.Optional[typing.Union[builtins.int,builtins.float,decimal.Decimal]]$ 0 0 0 0 0 0 $typing.Optional[typing.Union[builtins.int,builtins.float,decimal.Decimal]]$ 0 0 0 0 0 0 0 0 $typing.Optional[typing.Union[builtins.int,builtins.float,decimal.Decimal]]$ 0 0 0 0 0 0 $typing.Optional[typing.Union[builtins.int,builtins.float,decimal.Decimal]]$ 0 0 0 0 0 0 $typing.Optional[typing.Union[builtins.int,builtins.float,decimal.Decimal]]$ 0 0 0 0 0 0 $typing.Optional[typing.Union[builtins.int,builtins.float,decimal.Decimal]]$ 0 0 0 0 0 0 $typing.Optional[typing.Union[builtins.int,builtins.float,decimal.Decimal]]$ 0 0 0 0 0 0 $typing.Optional[typing.Union[builtins.int,builtins.float,decimal.Decimal]]$ 0 0 0 0 0 0 $typing.Optional[typing.Union[builtins.int,builtins.float,decimal.Decimal]]$ 0 0 0 0 0 0 $typing.Optional[typing.Union[builtins.int,builtins.float,decimal.Decimal]]$ 0 0 0 0 0 0 $typing.Optional[typing.Union[builtins.int,builtins.float,decimal.Decimal]]$ 0 0 0 0 0 0 $typing.Optional[typing.Union[builtins.int,builtins.float,decimal.Decimal]]$ 0 0 0 0 0 0 $typing.Optional[typing.Union[builtins.int,builtins.float,decimal.Decimal]]$ 0 0 0 0 0 0 $typing.Optional[typing.Union[builtins.int,builtins.float,decimal.Decimal]]$ 0 0 0 0 0 0 $typing.Optional[typing.Union[builtins.int,builtins.float,decimal.Decimal]]$ 0 0 0 0 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 $typing.Optional[AccessPersonMC]$ 0 0 0 0 0 0 $typing.Optional[typing.List[ActionTypeMS]]$ 0 0 0 0 0 0 $typing.Optional[CourtCountyMC]$ 0 0 0 0 0 0 $typing.Optional[CourtLocationMC]$ 0 0 0 0 0 0 0 0 $typing.Optional[typing.List[HarassmentAllegationsMS]]$ 0 0 0 0 0 0 $typing.Optional[typing.List[IFPWhatOrdersMS]]$ 0 0 0 0 0 0 0 $typing.Optional[LandlordAddressStateMC]$ 0 0 0 0 0 0 $typing.Optional[LandlordEntityOrIndividualMC]$ 0 0 0 0 0 0 $typing.Optional[ManagementCompanyAddressStateMC]$ 0 0 0 0 0 0 $typing.Optional[PayPeriodMC]$ 0 0 0 0 0 0 0 0 $typing.Optional[PriorHarassmentCaseMC]$ 0 0 0 0 0 0 0 0 $typing.Optional[PriorRepairsCaseMC]$ 0 0 0 0 0 0 $typing.Optional[TenantAddressStateMC]$ 0 0 0 0 0 0 $typing.Optional[TenantBoroughMC]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[TenantRepairsAllegationsMC]$ 0 0 0 0 $typing.List[TenantChild]$ 0 0 0 0 0 0 0 0 0 $typing.List[TenantComplaints]$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $hpaction.hotdocs.AnswerSet$ 0 0 0 $hpaction.hotdocs.AnswerSet$ 0
import pathlib [EOL] from pathlib import Path [EOL] [EOL] [EOL] MY_DIR = Path ( __file__ ) . parent . resolve ( ) [EOL] EHPA_FILINGS_SQLFILE = MY_DIR / [string] [EOL] [EOL] [EOL] def execute_ehpa_filings_query ( cursor ) : [EOL] cursor . execute ( EHPA_FILINGS_SQLFILE . read_text ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0
from typing import Union , List , Optional [EOL] import typing [EOL] import xml [EOL] import hpactionvars [EOL] import builtins [EOL] from typing import Optional , Union [EOL] from enum import Enum [EOL] import xml . etree . ElementTree as ET [EOL] [EOL] from . hpactionvars import CourtLocationMC [EOL] [EOL] [EOL] def get_answers_xml_tf ( root , name ) : [EOL] nodes = root . findall ( f" [string] { name } [string] " ) [EOL] if nodes : [EOL] return nodes [ [number] ] . text == [string] [EOL] return None [EOL] [EOL] [EOL] class HPAType ( Enum ) : [EOL] REPAIRS = [number] [EOL] HARASSMENT = [number] [EOL] BOTH = [number] [EOL] [EOL] @ staticmethod def get_from_answers_xml ( xml_value ) : [EOL] [comment] [EOL] [comment] [EOL] root = ET . fromstring ( xml_value ) [EOL] [EOL] harassment = get_answers_xml_tf ( root , [string] ) [EOL] repairs = get_answers_xml_tf ( root , [string] ) [EOL] [EOL] if harassment and repairs : [EOL] return HPAType . BOTH [EOL] elif harassment : [EOL] return HPAType . HARASSMENT [EOL] elif repairs : [EOL] return HPAType . REPAIRS [EOL] [EOL] raise ValueError ( [string] ) [EOL] [EOL] [EOL] def get_answers_xml_court_location_mc ( xml_value ) : [EOL] root = ET . fromstring ( xml_value ) [EOL] [EOL] nodes = root . findall ( f" [string] " ) [EOL] if nodes : [EOL] return CourtLocationMC ( nodes [ [number] ] . text ) [EOL] return None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $'HPAType'$ 0 $typing.Union[builtins.str,builtins.bytes]$ 0 0 0 0 0 0 0 $xml.etree.ElementTree.Element$ 0 0 0 0 0 $typing.Union[builtins.str,builtins.bytes]$ 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 $xml.etree.ElementTree.Element$ 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 $xml.etree.ElementTree.Element$ 0 0 0 0 0 0 $typing.Optional[builtins.bool]$ 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Optional , Dict , Any , List [EOL] import typing [EOL] import pathlib [EOL] import hpaction [EOL] import hotdocs [EOL] import builtins [EOL] import xml [EOL] import xml . etree . ElementTree as ET [EOL] from dataclasses import dataclass [EOL] from typing import NamedTuple , List , Dict [EOL] from pathlib import Path [EOL] from django . contrib . humanize . templatetags . humanize import apnumber [EOL] from django . utils . text import slugify [EOL] [EOL] from . hotdocs import AnswerType [EOL] [EOL] [EOL] HD_URL = [string] [EOL] [EOL] HD = [string] + HD_URL + [string] [EOL] [EOL] NS = { [string] : HD_URL } [EOL] [EOL] [EOL] def to_camel_case ( string ) : [EOL] return [string] . join ( [ word [ [number] ] . upper ( ) + word [ [number] : ] for word in string . split ( [string] ) ] ) [EOL] [EOL] [EOL] def to_snake_case ( string ) : [EOL] name = slugify ( string . lower ( ) ) . replace ( [string] , [string] ) [EOL] if name [ [number] ] . isdigit ( ) : [EOL] return apnumber ( name [ [number] ] ) + name [ [number] : ] [EOL] return name [EOL] [EOL] [EOL] @ dataclass class HDVariable : [EOL] [docstring] [EOL] [EOL] name = ... [EOL] help_text = ... [EOL] [EOL] @ property def snake_case_name ( self ) : [EOL] return to_snake_case ( self . name ) [EOL] [EOL] @ property def camel_case_name ( self ) : [EOL] return to_camel_case ( self . name ) [EOL] [EOL] @ property def py_annotation ( self ) : [EOL] raise NotImplementedError ( ) [EOL] [EOL] @ property def answer_type ( self ) : [EOL] raise NotImplementedError ( ) [EOL] [EOL] [EOL] class HDDate ( HDVariable ) : [EOL] @ property def py_annotation ( self ) : [EOL] return [string] [EOL] [EOL] @ property def answer_type ( self ) : [EOL] return AnswerType . DATE [EOL] [EOL] [EOL] class HDText ( HDVariable ) : [EOL] @ property def py_annotation ( self ) : [EOL] return [string] [EOL] [EOL] @ property def answer_type ( self ) : [EOL] return AnswerType . TEXT [EOL] [EOL] [EOL] class HDTrueFalse ( HDVariable ) : [EOL] @ property def py_annotation ( self ) : [EOL] return [string] [EOL] [EOL] @ property def answer_type ( self ) : [EOL] return AnswerType . TF [EOL] [EOL] [EOL] class HDNumber ( HDVariable ) : [EOL] @ property def py_annotation ( self ) : [EOL] return [string] [EOL] [EOL] @ property def answer_type ( self ) : [EOL] return AnswerType . NUM [EOL] [EOL] [EOL] class HDMultipleChoiceOption ( NamedTuple ) : [EOL] name = ... [EOL] label = ... [EOL] [EOL] [EOL] @ dataclass class HDMultipleChoice ( HDVariable ) : [EOL] options = ... [EOL] select_multiple = ... [EOL] [EOL] @ property def py_annotation ( self ) : [EOL] anno = self . camel_case_name [EOL] return f' [string] { anno } [string] ' if self . select_multiple else anno [EOL] [EOL] @ property def answer_type ( self ) : [EOL] return AnswerType . MC [EOL] [EOL] [EOL] class HDRepeatedVariables ( NamedTuple ) : [EOL] [docstring] [EOL] [EOL] label = ... [EOL] variables = ... [EOL] [EOL] @ property def py_class_name ( self ) : [EOL] return to_camel_case ( self . label ) [EOL] [EOL] @ property def py_prop_name ( self ) : [EOL] return f"{ to_snake_case ( self . label ) } [string] " [EOL] [EOL] [EOL] class HDComponentLibrary : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] vars = ... [EOL] [EOL] [comment] [EOL] [comment] [EOL] repeated_vars = ... [EOL] [EOL] def __init__ ( self , path ) : [EOL] [docstring] [EOL] [EOL] self . vars = { } [EOL] self . repeated_vars = [ ] [EOL] [EOL] tree = ET . parse ( str ( path ) ) [EOL] root = tree . getroot ( ) [EOL] components = root . find ( [string] , NS ) [EOL] if components is None : [EOL] raise Exception ( [string] ) [EOL] self . populate_vars ( components ) [EOL] self . populate_repeats ( components ) [EOL] [EOL] def get_help_text ( self , el ) : [EOL] [comment] [EOL] for prompt in el . findall ( [string] , NS ) : [EOL] if prompt . text : [EOL] return prompt . text [EOL] return [string] [EOL] [EOL] def get_mc_options ( self , el ) : [EOL] results = [ ] [EOL] for option in el . findall ( [string] , NS ) : [EOL] results . append ( HDMultipleChoiceOption ( name = option . attrib [ [string] ] , label = self . get_help_text ( option ) ) ) [EOL] return results [EOL] [EOL] def populate_repeats ( self , components ) : [EOL] for dialog in components . iter ( f'{ HD } [string] ' ) : [EOL] is_sheet = len ( dialog . findall ( [string] , NS ) ) > [number] [EOL] if not is_sheet : [EOL] continue [EOL] repeat_vars = [ ] [EOL] for item in dialog . findall ( [string] , NS ) : [EOL] name = item . attrib [ [string] ] [EOL] value = self . vars [ name ] [EOL] del self . vars [ name ] [EOL] repeat_vars . append ( value ) [EOL] self . repeated_vars . append ( HDRepeatedVariables ( label = dialog . attrib [ [string] ] , variables = repeat_vars ) ) [EOL] [EOL] def add_var ( self , var ) : [EOL] self . vars [ var . name ] = var [EOL] [EOL] def populate_vars ( self , components ) : [EOL] for el in components . findall ( [string] , NS ) : [EOL] self . add_var ( HDText ( name = el . attrib [ [string] ] , help_text = self . get_help_text ( el ) ) ) [EOL] for el in components . findall ( [string] , NS ) : [EOL] self . add_var ( HDDate ( name = el . attrib [ [string] ] , help_text = self . get_help_text ( el ) ) ) [EOL] for el in components . findall ( [string] , NS ) : [EOL] self . add_var ( HDNumber ( name = el . attrib [ [string] ] , help_text = self . get_help_text ( el ) ) ) [EOL] for el in components . findall ( [string] , NS ) : [EOL] self . add_var ( HDTrueFalse ( name = el . attrib [ [string] ] , help_text = self . get_help_text ( el ) ) ) [EOL] for el in components . findall ( [string] , NS ) : [EOL] sm = len ( el . findall ( [string] , NS ) ) > [number] [EOL] self . add_var ( HDMultipleChoice ( name = el . attrib [ [string] ] , help_text = self . get_help_text ( el ) , options = self . get_mc_options ( el ) , select_multiple = sm ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $hotdocs.AnswerType$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $hotdocs.AnswerType$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $hotdocs.AnswerType$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $hotdocs.AnswerType$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $hotdocs.AnswerType$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[HDMultipleChoiceOption]$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $hotdocs.AnswerType$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[HDVariable]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,HDVariable]$ 0 0 0 0 0 0 0 0 $typing.List[HDRepeatedVariables]$ 0 0 0 0 0 $None$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,hpaction.hotdocs_cmp.HDVariable]$ 0 0 0 0 0 0 $typing.List[hpaction.hotdocs_cmp.HDRepeatedVariables]$ 0 0 0 0 0 $xml.etree.ElementTree.ElementTree$ 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 $xml.etree.ElementTree.Element$ 0 $xml.etree.ElementTree.ElementTree$ 0 0 0 0 0 $typing.Optional[xml.etree.ElementTree.Element]$ 0 $xml.etree.ElementTree.Element$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.Optional[xml.etree.ElementTree.Element]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[xml.etree.ElementTree.Element]$ 0 0 0 0 0 0 $typing.Optional[xml.etree.ElementTree.Element]$ 0 0 0 0 $builtins.str$ 0 0 0 $xml.etree.ElementTree.Element$ 0 0 0 0 0 0 0 0 $xml.etree.ElementTree.Element$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[HDMultipleChoiceOption]$ 0 0 0 $xml.etree.ElementTree.Element$ 0 0 0 $typing.List[HDMultipleChoiceOption]$ 0 0 0 0 0 0 0 $xml.etree.ElementTree.Element$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.List[HDMultipleChoiceOption]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[HDMultipleChoiceOption]$ 0 0 0 $None$ 0 0 0 $xml.etree.ElementTree.Element$ 0 0 0 0 0 0 $xml.etree.ElementTree.Element$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.List[HDVariable]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $hpaction.hotdocs_cmp.HDVariable$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.List[HDVariable]$ 0 0 0 $hpaction.hotdocs_cmp.HDVariable$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[HDVariable]$ 0 0 0 0 0 $None$ 0 0 0 $HDVariable$ 0 0 0 0 0 0 0 $HDVariable$ 0 0 0 0 $HDVariable$ 0 0 0 $None$ 0 0 0 $xml.etree.ElementTree.Element$ 0 0 0 0 0 0 $xml.etree.ElementTree.Element$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $xml.etree.ElementTree.Element$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $xml.etree.ElementTree.Element$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $xml.etree.ElementTree.Element$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $xml.etree.ElementTree.Element$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0
[comment] [EOL] [EOL] from django . conf import settings [EOL] from django . db import migrations , models [EOL] import django . db . models . deletion [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ migrations . swappable_dependency ( settings . AUTH_USER_MODEL ) , ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . NullBooleanField ( help_text = [string] ) ) , ( [string] , models . DecimalField ( decimal_places = [number] , help_text = [string] , max_digits = [number] , null = True ) ) , ( [string] , models . BooleanField ( default = False , help_text = [string] , verbose_name = [string] ) ) , ( [string] , models . BooleanField ( default = False , help_text = [string] , verbose_name = [string] ) ) , ( [string] , models . BooleanField ( default = False , help_text = [string] , verbose_name = [string] ) ) , ( [string] , models . BooleanField ( default = False , help_text = [string] , verbose_name = [string] ) ) , ( [string] , models . CharField ( blank = True , help_text = [string] , max_length = [number] ) ) , ( [string] , models . DecimalField ( decimal_places = [number] , help_text = [string] , max_digits = [number] , null = True ) ) , ( [string] , models . DecimalField ( decimal_places = [number] , default = [number] , max_digits = [number] ) ) , ( [string] , models . DecimalField ( decimal_places = [number] , default = [number] , max_digits = [number] ) ) , ( [string] , models . DecimalField ( decimal_places = [number] , default = [number] , max_digits = [number] ) ) , ( [string] , models . DecimalField ( decimal_places = [number] , default = [number] , max_digits = [number] ) ) , ( [string] , models . DecimalField ( decimal_places = [number] , default = [number] , max_digits = [number] ) ) , ( [string] , models . NullBooleanField ( help_text = [string] ) ) , ( [string] , models . OneToOneField ( help_text = [string] , on_delete = django . db . models . deletion . CASCADE , related_name = [string] , to = settings . AUTH_USER_MODEL ) ) , ] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . EmailField ( blank = True , max_length = [number] ) ) , ( [string] , models . EmailField ( blank = True , max_length = [number] ) ) , ( [string] , models . EmailField ( blank = True , max_length = [number] ) ) , ( [string] , models . EmailField ( blank = True , max_length = [number] ) ) , ( [string] , models . EmailField ( blank = True , max_length = [number] ) ) , ] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from django . conf import settings [EOL] import django . contrib . postgres . fields . jsonb [EOL] from django . db import migrations , models [EOL] import django . db . models . deletion [EOL] import project . util . mailing_address [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ migrations . swappable_dependency ( settings . AUTH_USER_MODEL ) , ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . CharField ( blank = True , help_text = [string] , max_length = [number] ) ) , ( [string] , models . CharField ( blank = True , help_text = [string] , max_length = [number] ) ) , ( [string] , models . CharField ( blank = True , help_text = [string] , max_length = [number] ) ) , ( [string] , models . CharField ( blank = True , help_text = [string] , max_length = [number] ) ) , ( [string] , models . CharField ( blank = True , choices = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ] , help_text = [string] , max_length = [number] ) ) , ( [string] , models . CharField ( blank = True , help_text = [string] , max_length = [number] , validators = [ project . util . mailing_address . ZipCodeValidator ( ) ] ) ) , ( [string] , models . DateTimeField ( auto_now_add = True ) ) , ( [string] , models . CharField ( help_text = [string] , max_length = [number] ) ) , ( [string] , models . FileField ( help_text = [string] , upload_to = [string] ) ) , ( [string] , django . contrib . postgres . fields . jsonb . JSONField ( blank = True , help_text = [string] , null = True ) ) , ( [string] , models . CharField ( blank = True , help_text = [string] , max_length = [number] ) ) , ( [string] , models . DateTimeField ( blank = True , help_text = [string] , null = True ) ) , ( [string] , models . ForeignKey ( blank = True , help_text = [string] , null = True , on_delete = django . db . models . deletion . SET_NULL , related_name = [string] , to = settings . AUTH_USER_MODEL ) ) , ( [string] , models . ForeignKey ( blank = True , help_text = [string] , null = True , on_delete = django . db . models . deletion . SET_NULL , related_name = [string] , to = settings . AUTH_USER_MODEL ) ) , ] , options = { [string] : False , } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterModelOptions ( name = [string] , options = { [string] : [string] , [string] : [string] } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from django . conf import settings [EOL] from django . db import migrations , models [EOL] import django . db . models . deletion [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ migrations . swappable_dependency ( settings . AUTH_USER_MODEL ) , ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . NullBooleanField ( help_text = [string] ) ) , ( [string] , models . NullBooleanField ( help_text = [string] ) ) , ( [string] , models . NullBooleanField ( help_text = [string] ) ) , ( [string] , models . NullBooleanField ( help_text = [string] ) ) , ( [string] , models . NullBooleanField ( help_text = [string] ) ) , ( [string] , models . OneToOneField ( help_text = [string] , on_delete = django . db . models . deletion . CASCADE , related_name = [string] , to = settings . AUTH_USER_MODEL ) ) , ] , options = { [string] : [string] , } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
import hpaction [EOL] from textwrap import dedent [EOL] from datetime import date [EOL] from decimal import Decimal [EOL] from enum import Enum [EOL] import pytest [EOL] [EOL] from . . hotdocs import ( AnswerSet , MCValue , Unanswered , AnswerType , enum2mc , enum2mc_opt , none2unans ) [EOL] [EOL] [EOL] def test_full_documents_are_rendered ( ) : [EOL] a = AnswerSet ( ) [EOL] a . add ( [string] , [string] ) [EOL] a . add_opt ( [string] , None ) [EOL] assert str ( a ) == dedent ( [string] ) [EOL] [EOL] [EOL] def test_error_raised_if_type_is_invalid ( ) : [EOL] class Foo : [EOL] pass [EOL] [EOL] with pytest . raises ( ValueError , match = [string] ) : [EOL] AnswerSet ( ) . create_answer_value ( Foo ( ) ) [comment] [EOL] [EOL] [EOL] class Funky ( Enum ) : [EOL] BOOP = [string] [EOL] BLAP = [string] [EOL] [EOL] [EOL] def test_enum2mc_works ( ) : [EOL] assert enum2mc ( Funky . BOOP ) . items == [ [string] ] [comment] [EOL] assert enum2mc ( [ Funky . BOOP , Funky . BLAP ] ) . items == [ [string] , [string] ] [comment] [EOL] [EOL] unans = Unanswered ( AnswerType . TF ) [EOL] assert enum2mc ( unans ) is unans [EOL] [EOL] [EOL] def test_enum2mc_opt_works ( ) : [EOL] assert enum2mc_opt ( None ) is None [EOL] assert enum2mc_opt ( Funky . BOOP ) . items == [ [string] ] [comment] [EOL] [EOL] [EOL] def test_none2unans_works ( ) : [EOL] assert none2unans ( [string] , AnswerType . TEXT ) == [string] [EOL] assert none2unans ( None , AnswerType . TEXT ) == Unanswered ( AnswerType . TEXT ) [EOL] [EOL] [EOL] def value_xml ( value ) : [EOL] return AnswerSet ( ) . create_answer_value ( value ) . toxml ( ) [EOL] [EOL] [EOL] def test_unanswered_answer_values_work ( ) : [EOL] assert value_xml ( Unanswered ( AnswerType . TF ) ) == [string] [EOL] [EOL] [EOL] def test_text_answer_values_are_escaped ( ) : [EOL] assert value_xml ( [string] ) == [string] [EOL] [EOL] [EOL] def test_bool_answer_values_work ( ) : [EOL] assert value_xml ( True ) == [string] [EOL] assert value_xml ( False ) == [string] [EOL] [EOL] [EOL] def test_numeric_answer_values_work ( ) : [EOL] assert value_xml ( [number] ) == [string] [EOL] assert value_xml ( [number] ) == [string] [EOL] assert value_xml ( Decimal ( [string] ) ) == [string] [EOL] [EOL] [EOL] def test_date_answer_values_work ( ) : [EOL] [comment] [EOL] assert value_xml ( date ( [number] , [number] , [number] ) ) == [string] [EOL] [EOL] [EOL] def test_multiple_choice_values_work ( ) : [EOL] assert value_xml ( MCValue ( [string] , [string] ) ) == ( [string] [string] [string] [string] ) [EOL] [EOL] [EOL] def test_list_values_are_converted_to_rptvalue ( ) : [EOL] assert value_xml ( [ [number] , [number] ] ) == ( [string] [string] [string] [string] ) [EOL] [EOL] [EOL] def test_invalid_answer_types_raise_errors ( ) : [EOL] with pytest . raises ( ValueError , match = [string] ) : [EOL] value_xml ( lambda : None ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . core . management import call_command [EOL] [EOL] [EOL] def test_hpclean_does_not_explode ( db ) : [EOL] call_command ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Any , Optional [EOL] import typing [EOL] import hpaction [EOL] import pytest [EOL] [EOL] from hpaction . hpactionvars import ( HPActionVariables , CourtLocationMC , ) [EOL] from hpaction . hotdocs_xml_parsing import ( HPAType , get_answers_xml_court_location_mc ) [EOL] [EOL] [EOL] class TestHPAType : [EOL] @ pytest . mark . parametrize ( [string] , [ ( HPActionVariables ( sue_for_harassment_tf = True ) , HPAType . HARASSMENT ) , ( HPActionVariables ( sue_for_harassment_tf = True , sue_for_repairs_tf = False ) , HPAType . HARASSMENT ) , ( HPActionVariables ( sue_for_repairs_tf = True ) , HPAType . REPAIRS ) , ( HPActionVariables ( sue_for_harassment_tf = False , sue_for_repairs_tf = True ) , HPAType . REPAIRS ) , ( HPActionVariables ( sue_for_repairs_tf = True , sue_for_harassment_tf = True ) , HPAType . BOTH ) , ] ) def test_it_works ( self , vars , expected ) : [EOL] xmlstr = str ( vars . to_answer_set ( ) ) [EOL] assert HPAType . get_from_answers_xml ( xmlstr ) == expected [EOL] [EOL] vars . access_person_te = [string] [EOL] xmlbytes = str ( vars . to_answer_set ( ) ) . encode ( [string] ) [EOL] assert HPAType . get_from_answers_xml ( xmlbytes ) == expected [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ HPActionVariables ( ) , HPActionVariables ( sue_for_harassment_tf = False , sue_for_repairs_tf = False ) , ] ) def test_it_raises_error_when_neither_are_present ( self , vars ) : [EOL] xmlstr = str ( vars . to_answer_set ( ) ) [EOL] with pytest . raises ( ValueError , match = [string] ) : [EOL] HPAType . get_from_answers_xml ( xmlstr ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ HPActionVariables ( court_location_mc = CourtLocationMC . RED_HOOK_COMMUNITY_JUSTICE_CENTER ) , HPActionVariables ( court_location_mc = CourtLocationMC . BRONX_COUNTY ) , HPActionVariables ( ) , ] ) def test_get_answers_xml_court_location_mc_works ( vars ) : [EOL] xmlstr = str ( vars . to_answer_set ( ) ) [EOL] assert get_answers_xml_court_location_mc ( xmlstr ) == vars . court_location_mc [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Optional , List [EOL] import typing [EOL] import hpaction [EOL] from textwrap import dedent [EOL] [EOL] import hpaction . hpactionvars as hp [EOL] [EOL] [EOL] def ensure_answer_set ( v , expected_xml ) : [EOL] expected_xml = dedent ( expected_xml ) [EOL] actual_xml = str ( v . to_answer_set ( ) ) [EOL] if actual_xml != expected_xml : [EOL] print ( [string] ) [EOL] print ( actual_xml ) [EOL] assert actual_xml == expected_xml [EOL] [EOL] [EOL] def test_it_works_with_complaints ( ) : [EOL] v = hp . HPActionVariables ( ) [EOL] complaint = hp . TenantComplaints ( area_complained_of_mc = hp . AreaComplainedOfMC . PUBLIC_AREA ) [EOL] v . tenant_complaints_list . append ( complaint ) [EOL] ensure_answer_set ( v , [string] ) [EOL] [EOL] [EOL] def test_it_works_with_children_and_other_stuff ( ) : [EOL] v = hp . HPActionVariables ( ) [EOL] v . access_person_te = [string] [EOL] v . action_type_ms = [ hp . ActionTypeMS . REPAIRS ] [EOL] child = hp . TenantChild ( tenant_child_name_te = [string] ) [EOL] v . tenant_child_list . append ( child ) [EOL] [EOL] ensure_answer_set ( v , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] import builtins [EOL] from typing import Dict , Any [EOL] from project . util . js_snippet import JsSnippetContextProcessor [EOL] import frontend . safe_mode [EOL] [EOL] [EOL] class SafeModeJsSnippet ( JsSnippetContextProcessor ) : [EOL] @ property def template ( self ) : [EOL] return frontend . safe_mode . SAFE_MODE_JS . read_text ( ) [EOL] [EOL] var_name = [string] [EOL] [EOL] [EOL] class SafeModeHistoryFixJsSnippet ( JsSnippetContextProcessor ) : [EOL] @ property def template ( self ) : [EOL] return frontend . safe_mode . SAFE_MODE_HISTORY_FIX_JS . read_text ( ) [EOL] [EOL] var_name = [string] [EOL] [EOL] [EOL] def safe_mode ( request ) : [EOL] is_enabled = frontend . safe_mode . is_enabled ( request ) [EOL] ctx = { [string] : is_enabled } [EOL] if is_enabled : [EOL] ctx . update ( SafeModeHistoryFixJsSnippet ( ) ( request ) ) [EOL] else : [EOL] ctx . update ( SafeModeJsSnippet ( ) ( request ) ) [EOL] return ctx [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import NamedTuple , Dict , Any , Optional [EOL] from django . utils . safestring import SafeString [EOL] [EOL] [EOL] class GraphQLQueryPrefetchInfo ( NamedTuple ) : [EOL] [docstring] [EOL] [EOL] graphql = ... [EOL] input = ... [EOL] [EOL] [EOL] class LambdaResponse ( NamedTuple ) : [EOL] [docstring] [EOL] [EOL] html = ... [EOL] is_static_content = ... [EOL] http_headers = ... [EOL] title_tag = ... [EOL] meta_tags = ... [EOL] script_tags = ... [EOL] status = ... [EOL] modal_html = ... [EOL] location = ... [EOL] traceback = ... [EOL] graphql_query_to_prefetch = ... [EOL] [EOL] [comment] [EOL] render_time = ... [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.utils.safestring.SafeString$ 0 0 0 $builtins.bool$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $django.utils.safestring.SafeString$ 0 0 0 $django.utils.safestring.SafeString$ 0 0 0 $django.utils.safestring.SafeString$ 0 0 0 $builtins.int$ 0 0 0 $django.utils.safestring.SafeString$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[GraphQLQueryPrefetchInfo]$ 0 0 0 0 0 0 $builtins.int$ 0 0 0
	0
from typing import Any [EOL] import pathlib [EOL] import typing [EOL] import project [EOL] from pathlib import Path [EOL] from django . core . management import call_command [EOL] [EOL] from project . util . testing_util import Snapshot [EOL] [EOL] [EOL] MY_DIR = Path ( __file__ ) . parent . resolve ( ) [EOL] [EOL] SNAPSHOT_DIR = MY_DIR / [string] [EOL] [EOL] [EOL] def test_it_works ( db , mailoutbox , allow_lambda_http ) : [EOL] call_command ( [string] , [string] ) [EOL] assert len ( mailoutbox ) == [number] [EOL] msg = mailoutbox [ [number] ] [EOL] assert msg . subject == [string] [EOL] [EOL] assert msg . alternatives [ [number] ] [ [number] ] == [string] [EOL] html = msg . alternatives [ [number] ] [ [number] ] [EOL] assert [string] in html , [string] [EOL] assert [string] not in html , [string] [EOL] assert [string] in html , [string] [EOL] [EOL] snap = Snapshot ( msg . body , SNAPSHOT_DIR / [string] ) [EOL] assert snap . actual == snap . expected [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import pytest [EOL] from django . urls import path , include [EOL] from django . template import Template , RequestContext [EOL] from django . http import HttpResponse [EOL] [EOL] from frontend . context_processors import safe_mode as ctx_processor [EOL] [EOL] [EOL] def show_safe_mode_snippet ( request ) : [EOL] template = Template ( [string] . strip ( ) ) [EOL] return HttpResponse ( template . render ( RequestContext ( request ) ) ) [EOL] [EOL] [EOL] urlpatterns = [ path ( [string] , show_safe_mode_snippet ) , path ( [string] , include ( [string] ) ) , ] [EOL] [EOL] [EOL] class FakeRequest : [EOL] def __init__ ( self , ** kwargs ) : [EOL] self . session = kwargs [EOL] [EOL] [EOL] def test_ctx_processor_works_when_not_in_safe_mode ( ) : [EOL] d = ctx_processor ( FakeRequest ( ) ) [EOL] assert d [ [string] ] is False [EOL] assert [string] in d [EOL] [EOL] [EOL] def test_ctx_processor_works_when_in_safe_mode ( ) : [EOL] d = ctx_processor ( FakeRequest ( enable_safe_mode = True ) ) [EOL] assert d [ [string] ] is True [EOL] assert [string] in d [EOL] [EOL] [EOL] [comment] [EOL] JS_SENTINEL = [string] [EOL] [EOL] [comment] [EOL] HISTORY_FIX_JS_SENTINEL = [string] [EOL] [EOL] [EOL] def get_snippet_html ( client ) : [EOL] res = client . get ( [string] ) [EOL] assert res . status_code == [number] [EOL] return res . content . decode ( [string] ) [EOL] [EOL] [EOL] def assert_html_is_not_in_safe_mode ( html ) : [EOL] assert JS_SENTINEL in html [EOL] assert HISTORY_FIX_JS_SENTINEL not in html [EOL] assert [string] in html [EOL] [EOL] [EOL] def assert_html_is_in_safe_mode ( html ) : [EOL] assert JS_SENTINEL not in html [EOL] assert HISTORY_FIX_JS_SENTINEL in html [EOL] assert [string] in html [EOL] [EOL] [EOL] def enable_safe_mode ( client ) : [EOL] session = client . session [EOL] session [ [string] ] = True [EOL] session . save ( ) [EOL] [EOL] [EOL] @ pytest . mark . urls ( __name__ ) def test_snippet_and_ui_work_when_not_in_safe_mode ( client ) : [EOL] assert_html_is_not_in_safe_mode ( get_snippet_html ( client ) ) [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . urls ( __name__ ) def test_snippet_and_ui_work_when_in_safe_mode ( client ) : [EOL] enable_safe_mode ( client ) [EOL] assert_html_is_in_safe_mode ( get_snippet_html ( client ) ) [EOL] [EOL] [EOL] @ pytest . mark . django_db @ pytest . mark . urls ( __name__ ) def test_activating_and_deactivating_safe_mode_works ( django_app ) : [EOL] response = django_app . get ( [string] ) [EOL] assert_html_is_not_in_safe_mode ( response ) [EOL] response = response . form . submit ( ) . follow ( ) [EOL] [EOL] assert response . status == [string] [EOL] assert_html_is_in_safe_mode ( response ) [EOL] [EOL] response = response . form . submit ( ) . follow ( ) [EOL] assert response . status == [string] [EOL] assert_html_is_not_in_safe_mode ( response ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from . safe_mode import * [comment] [EOL]	0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] import pathlib [EOL] import builtins [EOL] import django [EOL] from pathlib import Path [EOL] from django . http import HttpResponseRedirect , HttpRequest [EOL] from django . urls import path [EOL] from django . views . decorators . http import require_POST [EOL] from django . views . decorators . csrf import csrf_exempt [EOL] [EOL] [EOL] MY_DIR = Path ( __file__ ) . parent . resolve ( ) [EOL] [EOL] SESSION_KEY = [string] [EOL] [EOL] SAFE_MODE_JS = MY_DIR / [string] [EOL] [EOL] SAFE_MODE_HISTORY_FIX_JS = MY_DIR / [string] [EOL] [EOL] [EOL] def is_enabled ( request ) : [EOL] return request . session . get ( SESSION_KEY , False ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] @ csrf_exempt @ require_POST def enable ( request ) : [EOL] request . session [ SESSION_KEY ] = True [EOL] return HttpResponseRedirect ( request . META . get ( [string] , [string] ) ) [EOL] [EOL] [EOL] @ csrf_exempt @ require_POST def disable ( request ) : [EOL] request . session [ SESSION_KEY ] = False [EOL] return HttpResponseRedirect ( request . META . get ( [string] , [string] ) ) [EOL] [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ path ( [string] , enable , name = [string] ) , path ( [string] , disable , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
	0
from django . core . management import call_command [EOL] [EOL] [EOL] def test_it_does_not_explode ( ) : [EOL] call_command ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import docusign [EOL] from django . db import models [EOL] [EOL] [EOL] class Config ( models . Model ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] private_key = models . TextField ( blank = True ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] consent_code = models . TextField ( blank = True ) [EOL] [EOL] [comment] [EOL] consent_code_updated_at = models . DateTimeField ( blank = True , null = True ) [EOL] [EOL] [comment] [EOL] base_uri = models . URLField ( blank = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[docusign.models.Config]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[docusign.models.Config]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[docusign.models.Config]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[docusign.models.Config]$ 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from django . db import migrations , models [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] initial = True [EOL] [EOL] dependencies = [ ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . TextField ( blank = True ) ) , ( [string] , models . TextField ( blank = True ) ) , ( [string] , models . DateTimeField ( blank = True , null = True ) ) , ( [string] , models . URLField ( blank = True ) ) , ] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
	0
	0
from django . apps import AppConfig [EOL] [EOL] [EOL] class NycdbConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Optional , Union , Any , List [EOL] import nycdb [EOL] import typing [EOL] import project [EOL] import builtins [EOL] import json [EOL] from typing import List , Any [EOL] from django . core . management . base import BaseCommand , CommandError [EOL] from django . core import serializers [EOL] [EOL] from project import geocoding [EOL] from project . util . nyc import BBL , is_bin [EOL] from nycdb . models import HPDRegistration , HPDContact , Contact , filter_and_sort_registrations [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] parser . add_argument ( [string] , help = ( [string] [string] ) ) [EOL] parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] [EOL] def show_mailing_addr ( self , contact , indent = [string] ) : [EOL] self . stdout . write ( f"{ indent }{ contact . name } [string] " ) [EOL] for line in contact . address . lines_for_mailing : [EOL] self . stdout . write ( f"{ indent }{ line } [string] " ) [EOL] [EOL] def show_raw_contact_info ( self , contact ) : [EOL] fields = [string] . join ( filter ( None , [ contact . type , contact . corporationname , contact . full_name , contact . street_address ] ) ) [EOL] self . stdout . write ( f" [string] { fields } [string] " ) [EOL] [EOL] def show_registration ( self , reg ) : [EOL] self . stdout . write ( f" [string] { reg . registrationid } [string] " f" [string] { reg . lastregistrationdate } [string] { reg . registrationenddate } [string] " ) [EOL] [EOL] for contact in reg . contacts . all ( ) : [EOL] self . show_raw_contact_info ( contact ) [EOL] [EOL] landlord = reg . get_landlord ( ) [EOL] if landlord : [EOL] self . stdout . write ( f" [string] { landlord . __class__ . __name__ } [string] " ) [EOL] self . show_mailing_addr ( landlord ) [EOL] [EOL] mgmt_co = reg . get_management_company ( ) [EOL] if mgmt_co : [EOL] print ( f" [string] " ) [EOL] self . show_mailing_addr ( mgmt_co ) [EOL] [EOL] def _get_registrations ( self , pad_bbl_or_bin ) : [EOL] if is_bin ( pad_bbl_or_bin ) : [EOL] qs = HPDRegistration . objects . filter ( bin = int ( pad_bbl_or_bin ) ) [EOL] else : [EOL] qs = HPDRegistration . objects . from_pad_bbl ( pad_bbl_or_bin ) [EOL] return filter_and_sort_registrations ( qs ) [EOL] [EOL] def show_registrations ( self , pad_bbl_or_bin ) : [EOL] for reg in self . _get_registrations ( pad_bbl_or_bin ) : [EOL] self . show_registration ( reg ) [EOL] print ( ) [EOL] [EOL] def dump_models ( self , pad_bbl_or_bin ) : [EOL] regs = self . _get_registrations ( pad_bbl_or_bin ) [EOL] models = list ( regs ) [EOL] for reg in regs : [EOL] models . extend ( reg . contact_list ) [EOL] data = json . loads ( serializers . serialize ( [string] , models ) ) [EOL] self . stdout . write ( json . dumps ( data , indent = [number] ) ) [EOL] [EOL] def parse_address_or_bbl_or_bin ( self , value ) : [EOL] if BBL . safe_parse ( value ) or is_bin ( value ) : [EOL] return value [EOL] features = geocoding . search ( value ) [EOL] if not features : [EOL] raise CommandError ( [string] ) [EOL] [EOL] props = features [ [number] ] . properties [EOL] self . stdout . write ( f" [string] { props . pad_bbl } [string] { props . pad_bin } [string] { props . label } [string] " ) [EOL] self . stdout . write ( f" [string] " ) [EOL] return props . pad_bin [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] address_or_bbl_or_bin = options [ [string] ] [EOL] dump_models = options [ [string] ] [EOL] [EOL] pad_bbl_or_bin = self . parse_address_or_bbl_or_bin ( address_or_bbl_or_bin ) [EOL] [EOL] if dump_models : [EOL] self . dump_models ( pad_bbl_or_bin ) [EOL] else : [EOL] self . show_registrations ( pad_bbl_or_bin ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $None$ 0 0 0 $nycdb.models.HPDRegistration$ 0 0 0 0 0 0 0 0 0 0 0 0 $nycdb.models.HPDRegistration$ 0 0 0 0 0 0 0 0 $nycdb.models.HPDRegistration$ 0 0 0 0 0 $nycdb.models.HPDRegistration$ 0 0 0 0 0 0 0 0 0 0 0 $nycdb.models.HPDRegistration$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[None,nycdb.models.Company,nycdb.models.Individual]$ 0 $nycdb.models.HPDRegistration$ 0 0 0 0 0 0 $typing.Union[None,nycdb.models.Company,nycdb.models.Individual]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[None,nycdb.models.Company,nycdb.models.Individual]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[None,nycdb.models.Company,nycdb.models.Individual]$ 0 0 0 $typing.Optional[nycdb.models.Company]$ 0 $nycdb.models.HPDRegistration$ 0 0 0 0 0 0 $typing.Optional[nycdb.models.Company]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[nycdb.models.Company]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $typing.Optional[typing.List[project.geocoding.Feature]]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Optional[typing.List[project.geocoding.Feature]]$ 0 0 0 0 0 0 0 0 0 $project.geocoding.FeatureProperties$ 0 $typing.Optional[typing.List[project.geocoding.Feature]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $project.geocoding.FeatureProperties$ 0 0 0 0 0 $project.geocoding.FeatureProperties$ 0 0 0 0 0 $project.geocoding.FeatureProperties$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $project.geocoding.FeatureProperties$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
	0
from typing import List [EOL] import typing [EOL] import nycdb [EOL] import io [EOL] import builtins [EOL] from typing import List [EOL] from io import StringIO [EOL] from django . core . management import call_command [EOL] [EOL] from . import fixtures [EOL] [EOL] [EOL] def get_output ( fixture_filename , extra_args = None , reg_attr = [string] ) : [EOL] if extra_args is None : [EOL] extra_args = [ ] [EOL] reg = fixtures . load_hpd_registration ( fixture_filename ) [EOL] out = StringIO ( ) [EOL] call_command ( [string] , getattr ( reg , reg_attr ) , * extra_args , stdout = out ) [EOL] return out . getvalue ( ) [EOL] [EOL] [EOL] def test_it_works_with_tiny_landlord ( nycdb ) : [EOL] assert [string] in get_output ( [string] , reg_attr = [string] ) [EOL] assert [string] in get_output ( [string] , reg_attr = [string] ) [EOL] [EOL] [EOL] def test_it_works_with_medium_landlord ( nycdb ) : [EOL] output = get_output ( [string] ) [EOL] assert [string] in output [EOL] assert [string] in output [EOL] [EOL] [EOL] def test_it_dumps_model_json ( nycdb ) : [EOL] output = get_output ( [string] , [ [string] ] ) [EOL] assert [string] in output [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Union , Any , Optional [EOL] import nycdb [EOL] import typing [EOL] from unittest . mock import patch [EOL] from django . db . utils import DatabaseError [EOL] import pytest [EOL] [EOL] from nycdb . models import ( HPDRegistration , HPDContact , Company , Individual , get_landlord , get_management_company ) [EOL] from . import fixtures [EOL] [EOL] [EOL] class TestHPDRegistration : [EOL] def test_get_landlord_returns_none_if_not_found ( self , nycdb ) : [EOL] reg = HPDRegistration ( ) [EOL] assert reg . get_landlord ( ) is None [EOL] [EOL] def test_pad_bin_works ( self ) : [EOL] reg = HPDRegistration ( ) [EOL] assert reg . pad_bin == [string] [EOL] reg . bin = [number] [EOL] assert reg . pad_bin == [string] [EOL] [EOL] [EOL] def test_tiny_landlord_works ( nycdb ) : [EOL] tiny = fixtures . load_hpd_registration ( [string] ) [EOL] assert tiny . get_management_company ( ) is None [EOL] boop = tiny . get_landlord ( ) [EOL] assert isinstance ( boop , Individual ) [EOL] assert boop . name == [string] [EOL] assert boop . address . lines_for_mailing == [ [string] , [string] ] [EOL] [EOL] [EOL] def test_medium_landlord_works ( nycdb ) : [EOL] reg = fixtures . load_hpd_registration ( [string] ) [EOL] [EOL] mgmtco = reg . get_management_company ( ) [EOL] assert isinstance ( mgmtco , Company ) [EOL] assert mgmtco . name == [string] [EOL] assert mgmtco . address . lines_for_mailing == [ [string] , [string] ] [EOL] [EOL] ll = reg . get_landlord ( ) [EOL] assert isinstance ( ll , Company ) [EOL] assert ll . name == [string] [EOL] assert ll . address . lines_for_mailing == [ [string] , [string] ] [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , [ HPDRegistration , HPDContact , ] ) def test_error_raised_when_nycdb_not_enabled ( model ) : [EOL] with pytest . raises ( Exception , match = [string] ) : [EOL] model . objects . all ( ) [EOL] [EOL] [EOL] class TestHPDContact : [EOL] def test_full_name_works ( self ) : [EOL] assert HPDContact ( ) . full_name == [string] [EOL] assert HPDContact ( firstname = [string] , lastname = [string] ) . full_name == [string] [EOL] assert HPDContact ( firstname = [string] ) . full_name == [string] [EOL] assert HPDContact ( lastname = [string] ) . full_name == [string] [EOL] [EOL] def test_street_address_works ( self ) : [EOL] assert HPDContact ( ) . street_address == [string] [EOL] assert HPDContact ( businesshousenumber = [string] , businessstreetname = [string] ) . street_address == [string] [EOL] [EOL] def test_address_is_none_if_all_fields_are_not_present ( self ) : [EOL] assert HPDContact ( ) . address is None [EOL] assert HPDContact ( businessstreetname = [string] ) . address is None [EOL] assert HPDContact ( businesscity = [string] ) . address is None [EOL] [EOL] [EOL] class TestGetLandlord : [EOL] def test_it_returns_none_if_nycdb_is_disabled ( self ) : [EOL] assert get_landlord ( [string] ) is None [EOL] assert get_landlord ( [string] ) is None [EOL] [EOL] def test_it_returns_none_if_pad_bbl_does_not_exist ( self , nycdb ) : [EOL] assert get_landlord ( [string] ) is None [EOL] [EOL] def test_it_returns_none_on_db_error ( self , nycdb ) : [EOL] with patch . object ( HPDRegistration . objects , [string] ) as fpbblmock : [EOL] fpbblmock . side_effect = DatabaseError ( ) [EOL] with patch ( [string] ) as loggermock : [EOL] assert get_landlord ( [string] ) is None [EOL] loggermock . assert_called_once_with ( f' [string] ' ) [EOL] [EOL] def test_it_returns_contact_of_pad_bbl_on_success ( self , nycdb ) : [EOL] tiny = fixtures . load_hpd_registration ( [string] ) [EOL] boop = get_landlord ( tiny . pad_bbl ) [EOL] assert isinstance ( boop , Individual ) [EOL] assert boop . name == [string] [EOL] [EOL] def test_it_returns_contact_of_pad_bin_on_success ( self , nycdb ) : [EOL] tiny = fixtures . load_hpd_registration ( [string] ) [EOL] boop = get_landlord ( [string] , tiny . pad_bin ) [EOL] assert isinstance ( boop , Individual ) [EOL] [EOL] def test_it_falls_back_to_pad_bbl_if_pad_bin_fails ( self , nycdb ) : [EOL] tiny = fixtures . load_hpd_registration ( [string] ) [EOL] boop = get_landlord ( tiny . pad_bbl , [string] ) [EOL] assert isinstance ( boop , Individual ) [EOL] [EOL] [EOL] class TestGetManagementCompany : [EOL] def test_it_returns_none_if_nycdb_is_disabled ( self ) : [EOL] assert get_management_company ( [string] ) is None [EOL] [EOL] def test_it_returns_none_if_pad_bbl_does_not_exist ( self , nycdb ) : [EOL] assert get_management_company ( [string] ) is None [EOL] [EOL] def test_it_returns_none_on_db_error ( self , nycdb ) : [EOL] with patch . object ( HPDRegistration . objects , [string] ) as fpbblmock : [EOL] fpbblmock . side_effect = DatabaseError ( ) [EOL] with patch ( [string] ) as loggermock : [EOL] assert get_management_company ( [string] ) is None [EOL] loggermock . assert_called_once_with ( f' [string] ' ) [EOL] [EOL] def test_it_returns_company_on_success ( self , nycdb ) : [EOL] medium = fixtures . load_hpd_registration ( [string] ) [EOL] mgmtco = get_management_company ( medium . pad_bbl ) [EOL] assert isinstance ( mgmtco , Company ) [EOL] assert mgmtco . name == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $HPDRegistration$ 0 0 0 0 0 0 $HPDRegistration$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $nycdb.models.HPDRegistration$ 0 0 0 0 0 0 $nycdb.models.HPDRegistration$ 0 0 0 0 0 $nycdb.models.HPDRegistration$ 0 $builtins.int$ 0 0 0 0 $nycdb.models.HPDRegistration$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $nycdb.models.HPDRegistration$ 0 0 0 0 0 0 0 0 $typing.Union[None,typing.Optional,typing.Union]$ 0 0 0 $nycdb.models.HPDRegistration$ 0 0 0 0 0 0 0 $typing.Union[None,typing.Optional,typing.Union]$ 0 0 0 0 0 $typing.Union[None,typing.Optional,typing.Union]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $nycdb.models.HPDRegistration$ 0 0 0 0 0 0 0 0 $typing.Union[None,typing.Optional,typing.Union]$ 0 0 0 0 0 $nycdb.models.HPDRegistration$ 0 0 0 0 0 0 0 $typing.Union[None,typing.Optional,typing.Union]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $nycdb.models.HPDRegistration$ 0 0 0 0 0 0 0 0 $typing.Union[None,typing.Optional,typing.Union]$ 0 0 0 $nycdb.models.HPDRegistration$ 0 0 0 0 0 0 0 0 0 $typing.Union[None,typing.Optional,typing.Union]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $nycdb.models.HPDRegistration$ 0 0 0 0 0 0 0 0 $typing.Optional[typing.Optional]$ 0 0 0 $nycdb.models.HPDRegistration$ 0 0 0 0 0 0 0 $typing.Optional[typing.Optional]$ 0 0 0 0 0 $typing.Optional[typing.Optional]$ 0 0 0 0 0
from typing import Any [EOL] import nycdb [EOL] import pathlib [EOL] import typing [EOL] import builtins [EOL] from pathlib import Path [EOL] from django . core import serializers [EOL] [EOL] from nycdb . models import HPDRegistration [EOL] [EOL] [EOL] FIXTURES_DIR = Path ( __file__ ) . parent . resolve ( ) [EOL] [EOL] [EOL] def load_hpd_registration ( filename ) : [EOL] [docstring] [EOL] [EOL] path = FIXTURES_DIR / filename [EOL] first_obj = None [EOL] for obj in serializers . deserialize ( [string] , path . read_text ( ) ) : [EOL] obj . save ( ) [EOL] if first_obj is None : [EOL] first_obj = obj . object [EOL] assert isinstance ( first_obj , HPDRegistration ) [EOL] return first_obj [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $nycdb.models.HPDRegistration$ 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class OnboardingConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
	0
	0
	0
	0
[comment] [EOL] [EOL] from django . conf import settings [EOL] from django . db import migrations , models [EOL] import django . db . models . deletion [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] initial = True [EOL] [EOL] dependencies = [ migrations . swappable_dependency ( settings . AUTH_USER_MODEL ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ( [string] , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = [string] ) ) , ( [string] , models . DateTimeField ( auto_now_add = True ) ) , ( [string] , models . DateTimeField ( auto_now = True ) ) , ( [string] , models . CharField ( help_text = [string] , max_length = [number] ) ) , ( [string] , models . BooleanField ( help_text = [string] ) ) , ( [string] , models . CharField ( choices = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ] , help_text = [string] , max_length = [number] ) ) , ( [string] , models . CharField ( max_length = [number] ) ) , ( [string] , models . BooleanField ( help_text = [string] ) ) , ( [string] , models . BooleanField ( help_text = [string] ) ) , ( [string] , models . BooleanField ( help_text = [string] ) ) , ( [string] , models . BooleanField ( help_text = [string] ) ) , ( [string] , models . BooleanField ( help_text = [string] ) ) , ( [string] , models . CharField ( choices = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ] , help_text = [string] , max_length = [number] ) ) , ( [string] , models . BooleanField ( help_text = [string] ) ) , ( [string] , models . BooleanField ( help_text = [string] ) ) , ( [string] , models . OneToOneField ( on_delete = django . db . models . deletion . CASCADE , related_name = [string] , to = settings . AUTH_USER_MODEL ) ) , ] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0