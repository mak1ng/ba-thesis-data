[comment] [EOL] import os [EOL] import sys [EOL] [EOL] if __name__ == [string] : [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] from django . core . management import execute_from_command_line [EOL] [EOL] execute_from_command_line ( sys . argv ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . shortcuts import render [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import django [EOL] import typing [EOL] import logging [EOL] [EOL] import requests [EOL] import requests_cache [EOL] [EOL] from django . conf import settings [EOL] from django . http import HttpResponse , HttpRequest [EOL] try : [EOL] from django . utils . deprecation import MiddlewareMixin [EOL] except ImportError : [EOL] MiddlewareMixin = object [EOL] [EOL] from . api import usergroups [EOL] from . models import DataportenUser [EOL] [EOL] [comment] [EOL] if settings . DATAPORTEN_CACHE_REQUESTS : [EOL] requests_cache . install_cache ( settings . DATAPORTEN_CACHE_PATH + [string] , backend = [string] , expire_after = [number] , allowable_codes = ( [number] , ) , include_get_headers = True , ) [EOL] [EOL] [EOL] class DataportenGroupsMiddleware ( MiddlewareMixin ) : [EOL] def process_request ( self , request ) : [EOL] if DataportenUser . valid_request ( request ) : [EOL] request . user . __class__ = DataportenUser [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[builtins.object]$ 0 0 0 0 0 $typing.Type[builtins.object]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[builtins.object]$ 0 0 0 0 0 0 0 0 $django.http.HttpRequest$ 0 0 0 0 0 0 0 0 $django.http.HttpRequest$ 0 0 0 $django.http.HttpRequest$ 0 0 0 0 0 0 0
default_app_config = [string] [EOL]	$builtins.str$ 0 0 0
from typing import Type , Tuple , Iterable , Generator , List , Union [EOL] import Course [EOL] import api [EOL] import builtins [EOL] import datetime [EOL] import typing [EOL] import dataporten [EOL] import datetime [EOL] from typing import Dict , Generator , Iterable , List , Optional , Tuple [EOL] [EOL] from . api import GroupJSON , MembershipJSON [EOL] [EOL] [EOL] def datetime_from ( json_string ) : [EOL] return datetime . datetime . strptime ( json_string , [string] , ) [EOL] [EOL] [EOL] def group_type ( group ) : [EOL] return group [ [string] ] . split ( [string] ) [ - [number] ] [EOL] [EOL] [EOL] def group_factory ( * groups ) : [EOL] [docstring] [EOL] [EOL] for group in groups : [EOL] for parser in PARSERS : [EOL] if parser . valid ( group ) : [EOL] yield parser ( group ) [EOL] break [EOL] else : [EOL] [comment] [EOL] [comment] [EOL] yield Group ( group ) [EOL] [EOL] [EOL] [EOL] class BaseGroup : [EOL] [docstring] [EOL] [EOL] DATAPORTEN_TYPE = ... [EOL] NAME = ... [EOL] [EOL] def __init__ ( self , group ) : [EOL] if not self . valid ( group ) : [EOL] raise TypeError ( [string] ) [EOL] [EOL] self . name = group . get ( [string] , [string] ) . strip ( ) [EOL] self . url = group . get ( [string] , [string] ) [EOL] self . uid = group [ [string] ] [EOL] self . group_type = group_type ( group ) [EOL] [EOL] if [string] in group : [EOL] self . membership = Membership ( group [ [string] ] ) [EOL] else : [EOL] self . membership = None [EOL] [EOL] @ classmethod def valid ( cls , group ) : [EOL] [docstring] [EOL] return cls . DATAPORTEN_TYPE == group_type ( group ) [EOL] [EOL] [EOL] class Group ( BaseGroup ) : [EOL] [docstring] [EOL] [EOL] NAME = [string] [EOL] [EOL] @ classmethod def valid ( cls , group ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] return True [EOL] [EOL] [EOL] class Membership : [EOL] def __init__ ( self , membership ) : [EOL] self . json = membership [EOL] self . primary_affiliation = membership . get ( [string] ) [EOL] self . affiliations = membership . get ( [string] , [ ] ) [EOL] [EOL] if [string] in membership : [EOL] self . active = membership [ [string] ] [EOL] else : [EOL] [comment] [EOL] [comment] [EOL] self . active = True [EOL] [EOL] if [string] in membership : [EOL] self . end_time = datetime_from ( membership [ [string] ] ) [EOL] self . semester = Semester ( self . end_time ) [EOL] else : [EOL] self . end_time = None [EOL] [EOL] def __bool__ ( self ) : [EOL] [docstring] [EOL] if not self . active : [EOL] return False [EOL] elif self . end_time is None : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] return True [EOL] else : [EOL] return datetime . datetime . now ( ) < self . end_time [EOL] [EOL] def __str__ ( self ) : [EOL] [docstring] [EOL] return self . json . get ( [string] , [string] ) [EOL] [EOL] [EOL] def next_holiday ( ) : [EOL] now = datetime . datetime . now ( ) [EOL] if [number] <= now . month <= [number] : [EOL] return datetime . datetime ( year = now . year , month = [number] , day = [number] ) [EOL] else : [EOL] return datetime . datetime ( year = now . year , month = [number] , day = [number] ) [EOL] [EOL] [EOL] class Course ( BaseGroup ) : [EOL] DATAPORTEN_TYPE = [string] [EOL] NAME = [string] [EOL] [EOL] def __init__ ( self , group ) : [EOL] super ( ) . __init__ ( group ) [EOL] self . code = group [ [string] ] . split ( [string] ) [ - [number] ] [EOL] [EOL] if self . membership is not None and self . membership . end_time : [EOL] self . semester = Semester ( self . membership . end_time ) [EOL] else : [EOL] self . semester = Semester ( next_holiday ( ) ) [EOL] [EOL] CourseDict = Dict [ str , [string] ] [EOL] [EOL] @ classmethod def split_on_membership ( cls , courses , ) : [EOL] [EOL] [docstring] [EOL] [EOL] active , inactive = { } , { } [EOL] for course in courses : [EOL] if course . membership : [EOL] active [ course . code ] = course [EOL] else : [EOL] inactive [ course . code ] = course [EOL] [EOL] return active , inactive [EOL] [EOL] class StudyProgram ( BaseGroup ) : [EOL] DATAPORTEN_TYPE = [string] [EOL] NAME = [string] [EOL] [EOL] def __init__ ( self , group ) : [EOL] super ( ) . __init__ ( group ) [EOL] self . code = group [ [string] ] . split ( [string] ) [ - [number] ] [EOL] [EOL] [EOL] class MainProfile ( BaseGroup ) : [EOL] DATAPORTEN_TYPE = [string] [EOL] NAME = [string] [EOL] [EOL] def __init__ ( self , group ) : [EOL] super ( ) . __init__ ( group ) [EOL] self . code = group [ [string] ] . split ( [string] ) [ - [number] ] [EOL] [EOL] [EOL] class OrganisationUnit ( BaseGroup ) : [EOL] DATAPORTEN_TYPE = [string] [EOL] NAME = [string] [EOL] [EOL] [EOL] class Semester : [EOL] SPRING = [number] [EOL] AUTUMN = [number] [EOL] [EOL] def __init__ ( self , dt ) : [EOL] self . year = dt . year [EOL] self . season = self . determine_season ( dt . month ) [EOL] [EOL] @ classmethod def determine_season ( cls , month ) : [EOL] if [number] <= month <= [number] : [EOL] return cls . SPRING [EOL] else : [EOL] return cls . AUTUMN [EOL] [EOL] @ classmethod def now ( cls ) : [EOL] return cls ( datetime . datetime . now ( ) ) [EOL] [EOL] def __sub__ ( self , other ) : [EOL] return [number] * ( self . year - other . year ) + ( self . season - other . season ) [EOL] [EOL] [EOL] PARSERS = [ Course , StudyProgram , MainProfile , OrganisationUnit , Group , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $api.GroupJSON$ 0 0 0 0 0 0 0 0 0 0 0 0 $api.GroupJSON$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $api.GroupJSON$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $api.MembershipJSON$ 0 0 0 0 0 0 0 $api.MembershipJSON$ 0 0 0 0 0 $api.MembershipJSON$ 0 0 0 0 0 0 0 0 0 0 $api.MembershipJSON$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $api.MembershipJSON$ 0 0 0 0 0 0 $api.MembershipJSON$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $api.MembershipJSON$ 0 0 0 0 0 0 0 0 $api.MembershipJSON$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 $api.GroupJSON$ 0 0 0 0 0 0 0 0 0 $api.GroupJSON$ 0 0 0 0 0 0 $api.GroupJSON$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dataporten.parsers.Course]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[Course.CourseDict,Course.CourseDict]$ 0 0 0 $typing.List['Course']$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List['Course']$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 $api.GroupJSON$ 0 0 0 0 0 0 0 0 0 $api.GroupJSON$ 0 0 0 0 0 0 $api.GroupJSON$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 $api.GroupJSON$ 0 0 0 0 0 0 0 0 0 $api.GroupJSON$ 0 0 0 0 0 0 $api.GroupJSON$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 $None$ 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $'Semester'$ 0 0 0 0 0 0 0 0 0 0 0 $'Semester'$ 0 0 0 0 0 0 0 0 0 $'Semester'$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Dict , Tuple , Literal [EOL] import typing_extensions [EOL] import typing [EOL] from . settings import * [EOL] [EOL] SECRET_KEY = [string] [EOL] [EOL] [comment] [EOL] DATABASES = { [string] : { [string] : [string] , [string] : [string] , } } [EOL] [EOL] INSTALLED_APPS = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [comment] [EOL] DATAPORTEN_CACHE_REQUESTS = True [EOL] [EOL] [comment] [EOL] DATAPORTEN_CACHE_PATH = [string] [EOL] [EOL] [comment] [EOL] DATAPORTEN_TOKEN_FUNCTION = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class DataportenConfig ( AppConfig ) : [EOL] name = [string] [EOL] label = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from typing import Any , Dict , List , Tuple [EOL] import builtins [EOL] import typing [EOL] import parsers [EOL] import dataporten [EOL] import django [EOL] from collections import defaultdict [EOL] from typing import DefaultDict , List , Type , Tuple , Dict [EOL] [EOL] from django . conf import settings [EOL] from django . contrib . auth . models import User [EOL] from django . core . exceptions import ImproperlyConfigured [EOL] from django . http import HttpRequest [EOL] from django . utils . functional import cached_property [EOL] from django . utils . module_loading import import_string [EOL] [EOL] from allauth . socialaccount . models import SocialToken [EOL] [EOL] from . api import usergroups [EOL] from . parsers import ( BaseGroup , Course , PARSERS , Semester , group_factory , ) [EOL] [EOL] class DataportenGroupManager : [EOL] [docstring] [EOL] def __init__ ( self , token ) : [EOL] [comment] [EOL] [comment] [EOL] groups_json = usergroups ( token ) [EOL] self . groups = { group . uid : group for group in group_factory ( * groups_json ) } [EOL] [EOL] [comment] [EOL] [comment] [EOL] for parser in PARSERS : [EOL] setattr ( self , parser . NAME , { } ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] for uid , group in self . groups . items ( ) : [EOL] getattr ( self , group . NAME ) [ uid ] = group [EOL] [EOL] self . courses = CourseManager ( self . courses ) [comment] [EOL] [EOL] def is_member_of ( self , uid , active = True ) : [EOL] [docstring] [EOL] group = self . groups . get ( uid ) [EOL] [EOL] if not group : [EOL] return False [EOL] elif group and not active : [EOL] return True [EOL] else : [EOL] return bool ( group . membership ) [EOL] [EOL] [EOL] class CourseManager : [EOL] def __init__ ( self , courses ) : [EOL] self . all = { course . code : course for course in courses . values ( ) } [EOL] self . semesters_ago = [ ] [EOL] now = Semester . now ( ) [EOL] [EOL] for course in courses . values ( ) : [EOL] ago = now - course . semester [EOL] self . semesters_ago . append ( ( ago , course . code , ) ) [EOL] [EOL] @ property def active ( self ) : [EOL] return [ code for ago , code in self . semesters_ago if ago <= [number] ] [EOL] [EOL] @ property def finished ( self ) : [EOL] return [ code for ago , code in self . semesters_ago if ago > [number] ] [EOL] [EOL] def less_semesters_ago ( self , than ) : [EOL] return [ code for ago , code in self . semesters_ago if ago < than ] [EOL] [EOL] [EOL] class DataportenUser ( User ) : [EOL] [docstring] [EOL] [EOL] class Meta : [EOL] proxy = True [EOL] [EOL] @ cached_property def token ( self ) : [EOL] try : [EOL] token_func_path = settings . DATAPORTEN_TOKEN_FUNCTION [EOL] token_func = import_string ( token_func_path ) [EOL] return token_func ( self ) [EOL] except ModuleNotFoundError : [EOL] raise ImproperlyConfigured ( f' [string] ' f'{ token_func_path }' , ) [EOL] except AttributeError : [EOL] raise ImproperlyConfigured ( [string] [string] , ) [EOL] [EOL] [EOL] @ cached_property def dataporten ( self ) : [EOL] return DataportenGroupManager ( self . token ) [EOL] [EOL] @ staticmethod def valid_request ( request ) : [EOL] if hasattr ( request , [string] ) and request . user . is_authenticated : [EOL] return SocialToken . objects . filter ( account__user = request . user , account__provider = [string] , ) . exists ( ) [EOL] else : [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dataporten.models.CourseManager$ 0 0 0 0 0 $dataporten.models.CourseManager$ 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 $builtins.bool$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Dict[builtins.str,parsers.Course]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,parsers.Course]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,builtins.str]]$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,parsers.Course]$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,builtins.str]]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $django.http.HttpRequest$ 0 0 0 0 0 0 $django.http.HttpRequest$ 0 0 0 0 $django.http.HttpRequest$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.http.HttpRequest$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] [EOL] import django . contrib . auth . models [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] initial = True [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . CreateModel ( name = [string] , fields = [ ] , options = { [string] : True , [string] : [ ] , } , bases = ( [string] , ) , managers = [ ( [string] , django . contrib . auth . models . UserManager ( ) ) , ] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import dataporten [EOL] import typing [EOL] from django . contrib . auth . models import AnonymousUser [EOL] [EOL] import pytest [EOL] import responses [EOL] from django . core . exceptions import ImproperlyConfigured [EOL] from freezegun import freeze_time [EOL] [EOL] from . utils import mock_usergroups_request [EOL] from . . models import ( DataportenGroupManager , CourseManager , DataportenUser , ) [EOL] [EOL] [EOL] @ freeze_time ( [string] ) class TestDataportenGroupManager : [EOL] def test_dataporten_courses ( self , dataporten ) : [EOL] [comment] [EOL] assert [string] in dataporten . courses . finished [EOL] assert [string] in dataporten . courses . all [EOL] assert [string] not in dataporten . courses . active [EOL] [EOL] [comment] [EOL] [comment] [EOL] assert dataporten . is_member_of ( uid = [string] , active = False , ) [EOL] assert not dataporten . is_member_of ( uid = [string] , active = True , ) [EOL] [EOL] [comment] [EOL] assert [string] not in dataporten . courses . finished [EOL] assert [string] in dataporten . courses . all [EOL] assert [string] in dataporten . courses . active [EOL] assert dataporten . is_member_of ( uid = [string] , active = False , ) [EOL] assert dataporten . is_member_of ( uid = [string] , active = True , ) [EOL] [EOL] [EOL] [comment] [EOL] assert [string] not in dataporten . courses . finished [EOL] assert [string] in dataporten . courses . all [EOL] assert [string] in dataporten . courses . active [EOL] assert dataporten . is_member_of ( uid = [string] , active = False , ) [EOL] assert dataporten . is_member_of ( uid = [string] , active = True , ) [EOL] [EOL] def test_dataporten_study_program ( self , dataporten ) : [EOL] assert dataporten . study_programs [ [string] ] . code == [string] [EOL] [EOL] def test_dataporten_main_profile ( self , dataporten ) : [EOL] assert dataporten . main_profiles [ [string] ] . code == [string] [EOL] [EOL] def test_dataporten_organisation_units ( self , dataporten ) : [EOL] assert dataporten . organisation_units [ [string] ] . uid == [string] [EOL] [EOL] assert dataporten . organisation_units [ [string] ] . uid == [string] [EOL] [EOL] [EOL] @ freeze_time ( [string] ) class TestCourseManager : [EOL] def test_less_semesters_ago ( self , finished_course , course_last_semester , ongoing_course ) : [EOL] _courses = [ finished_course , course_last_semester , ongoing_course , ] [EOL] courses = { course . uid : course for course in _courses } [EOL] course_manager = CourseManager ( courses ) [EOL] [EOL] assert course_manager . less_semesters_ago ( than = [number] ) == [ ongoing_course . code ] [EOL] [EOL] assert course_manager . less_semesters_ago ( than = [number] ) == [ course_last_semester . code , ongoing_course . code ] [EOL] [EOL] assert course_manager . less_semesters_ago ( than = [number] ) == [ finished_course . code , course_last_semester . code , ongoing_course . code ] [EOL] [EOL] @ freeze_time ( [string] ) def test_semester_in_future ( self , ongoing_course ) : [EOL] [docstring] [EOL] course_manager = CourseManager ( { ongoing_course . uid : ongoing_course } ) [EOL] assert ongoing_course . code in course_manager . active [EOL] [EOL] [EOL] def token_import_function ( user ) : [EOL] return [string] [EOL] [EOL] [EOL] class TestTokenImport : [EOL] @ pytest . mark . django_db def test_token_not_configured ( self , settings , dataporten_user ) : [EOL] try : [EOL] del settings . DATAPORTEN_TOKEN_FUNCTION [EOL] except AttributeError : [EOL] pass [EOL] [EOL] with pytest . raises ( ImproperlyConfigured ) as excinfo : [EOL] dataporten_user . token [EOL] assert str ( excinfo . value ) == [string] [string] [EOL] [EOL] @ pytest . mark . django_db def test_token_unimportable_path ( self , settings , dataporten_user ) : [EOL] settings . DATAPORTEN_TOKEN_FUNCTION = [string] [EOL] [EOL] with pytest . raises ( ImproperlyConfigured ) as excinfo : [EOL] dataporten_user . token [EOL] assert str ( excinfo . value ) == [string] [string] [EOL] [EOL] @ pytest . mark . django_db def test_token_properly_configured ( self , settings , dataporten_user ) : [EOL] settings . DATAPORTEN_TOKEN_FUNCTION = [string] [EOL] [EOL] assert dataporten_user . token == [string] [EOL] [EOL] [EOL] @ pytest . mark . django_db @ responses . activate def test_dataporten_user_groups ( dataporten_user ) : [EOL] group_json = mock_usergroups_request ( ) [EOL] groups = dataporten_user . dataporten [EOL] assert isinstance ( groups , DataportenGroupManager ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_dataporten_user_validation ( rf , django_user_model , dataporten_user ) : [EOL] [comment] [EOL] request = rf . get ( [string] ) [EOL] [EOL] request . user = AnonymousUser ( ) [EOL] assert DataportenUser . valid_request ( request ) == False [EOL] [EOL] request . user = django_user_model ( ) [EOL] assert DataportenUser . valid_request ( request ) == False [EOL] [EOL] request . user = dataporten_user [EOL] assert DataportenUser . valid_request ( request ) == True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 $dataporten.models.CourseManager$ 0 0 0 $typing.Dict[unknown,typing.Any]$ 0 0 0 0 $dataporten.models.CourseManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dataporten.models.CourseManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dataporten.models.CourseManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dataporten.models.CourseManager$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dataporten.models.CourseManager
	0
from typing import Type [EOL] import dataporten [EOL] import typing [EOL] from django . contrib . auth . models import User [EOL] from allauth . socialaccount . models import SocialAccount , SocialApp , SocialToken [EOL] import factory [EOL] [EOL] from . . models import DataportenUser [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] class SocialAccountFactory ( factory . django . DjangoModelFactory ) : [EOL] [EOL] user = factory . SubFactory ( [string] , social_account = None , ) [EOL] social_token = factory . RelatedFactory ( [string] , [string] , ) [EOL] provider = [string] [EOL] [EOL] class Meta : [EOL] model = SocialAccount [EOL] [EOL] [EOL] class SocialAppFactory ( factory . django . DjangoModelFactory ) : [EOL] class Meta : [EOL] model = SocialApp [EOL] [EOL] [EOL] class SocialTokenFactory ( factory . django . DjangoModelFactory ) : [EOL] token = [string] [EOL] account = factory . SubFactory ( SocialAccountFactory , social_token = None ) [EOL] app = factory . SubFactory ( SocialAppFactory ) [EOL] [EOL] class Meta : [EOL] model = SocialToken [EOL] [EOL] [EOL] class UserFactory ( factory . django . DjangoModelFactory ) : [EOL] username = [string] [EOL] [EOL] class Meta : [EOL] model = User [EOL] [EOL] [EOL] class DataportenUserFactory ( factory . django . DjangoModelFactory ) : [EOL] username = [string] [EOL] social_account = factory . RelatedFactory ( SocialAccountFactory , [string] ) [EOL] [EOL] class Meta : [EOL] model = DataportenUser [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dataporten.tests.factories.SocialAccountFactory]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dataporten.tests.factories.SocialAccountFactory]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Type[dataporten.models.DataportenUser]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dataporten.models.DataportenUser]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[dataporten.tests.factories.SocialTokenFactory]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dataporten.tests.factories.SocialTokenFactory]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dataporten.models.DataportenUser]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Type[dataporten.models.DataportenUser]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Type[dataporten.tests.factories.DataportenUserFactory]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dataporten.models.DataportenUser]$ 0 0 0
from typing import Any [EOL] import typing [EOL] import json [EOL] [EOL] import responses [EOL] from django . test import TestCase [EOL] [EOL] from . . api import usergroups , userinfo [EOL] from . utils import mock_usergroups_request , mock_userinfo_request [EOL] [EOL] [EOL] class TestTypes ( TestCase ) : [EOL] [docstring] [EOL] from . . api import GroupJSON [EOL] [EOL] [EOL] class TestUserInfo ( TestCase ) : [EOL] [docstring] [EOL] [EOL] @ responses . activate def test_valid_case ( self ) : [EOL] userinfo_dict = mock_userinfo_request ( ) [EOL] userinfo_return = userinfo ( [string] ) [EOL] self . assertEqual ( userinfo_return , userinfo_dict [ [string] ] , ) [EOL] [EOL] [EOL] class TestGroups ( TestCase ) : [EOL] [docstring] [EOL] [EOL] @ responses . activate def test_valid_case ( self ) : [EOL] groups_dict = mock_usergroups_request ( ) [EOL] userinfo_return = usergroups ( [string] ) [EOL] self . assertEqual ( userinfo_return , groups_dict , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0
from typing import Any , Generator , List [EOL] import datetime [EOL] import dataporten [EOL] import typing [EOL] from datetime import datetime [EOL] [EOL] from django . test import TestCase [EOL] [EOL] from freezegun import freeze_time [EOL] [EOL] import pytest [EOL] [EOL] from . . parsers import ( Course , Group , group_factory , MainProfile , Membership , OrganisationUnit , Semester , StudyProgram , datetime_from , ) [EOL] [EOL] [EOL] class TestDatetimeFrom ( TestCase ) : [EOL] def test_basic_correctness ( self ) : [EOL] dt = datetime_from ( [string] ) [EOL] self . assertEqual ( [ dt . year , dt . month , dt . day , dt . hour , dt . minute , dt . second ] , [ [number] , [number] , [number] , [number] , [number] , [number] ] , ) [EOL] [EOL] [EOL] class TestGroupFactory : [EOL] def test_study_program_factory ( self , study_program_json ) : [EOL] study_program = next ( group_factory ( study_program_json ) ) [EOL] assert type ( study_program ) is StudyProgram [EOL] [EOL] def test_course_factory ( self , course_json ) : [EOL] course = next ( group_factory ( course_json ) ) [EOL] assert type ( course ) is Course [EOL] [EOL] def test_main_profile_factory ( self , main_profile_json ) : [EOL] main_profile = next ( group_factory ( main_profile_json ) ) [EOL] assert type ( main_profile ) is MainProfile [EOL] [EOL] def test_group_factory_given_iterable_argument ( self , study_program_json , course_json , ) : [EOL] groups = group_factory ( study_program_json , course_json ) [EOL] assert len ( list ( groups ) ) == [number] [EOL] [EOL] [EOL] class TestGroup : [EOL] def test_properties_present ( self , study_program_json ) : [EOL] group_example = Group ( study_program_json ) [EOL] assert group_example . name == [string] [EOL] assert group_example . url == [string] [EOL] assert group_example . group_type == [string] [EOL] [EOL] def test_active_membership ( self , study_program_json ) : [EOL] group_example = Group ( study_program_json ) [EOL] assert group_example . membership [EOL] [EOL] [EOL] class TestMembership ( ) : [EOL] def test_perpetual_membership ( self ) : [EOL] unending_membership = Membership ( { [string] : [string] , [string] : [string] , [string] : True , [string] : [ [string] ] } ) [EOL] assert bool ( unending_membership ) is True [EOL] [EOL] def test_inactive_membership ( self ) : [EOL] inactive_membership = Membership ( { [string] : [string] , [string] : [string] , [string] : False , [string] : [ [string] ] } ) [EOL] assert bool ( inactive_membership ) is False [EOL] [EOL] @ freeze_time ( [string] ) def test_limited_membership ( self ) : [EOL] limited_membership = Membership ( { [string] : [string] , [string] : True , [string] : [string] , [string] : [string] , [string] : [ [string] ] , [string] : [string] } ) [EOL] assert bool ( limited_membership ) is True [EOL] [EOL] @ freeze_time ( [string] ) def test_expired_membership ( self ) : [EOL] limited_membership = Membership ( { [string] : [string] , [string] : True , [string] : [string] , [string] : [string] , [string] : [ [string] ] , [string] : [string] } ) [EOL] assert bool ( limited_membership ) is False [EOL] [EOL] def test_retrieval_of_json_from_membership_object ( self , membership_json ) : [EOL] [docstring] [EOL] membership = Membership ( membership_json ) [EOL] assert membership . json == membership_json [EOL] [EOL] [EOL] def test_string_representation_of_membership ( self , membership_json ) : [EOL] [docstring] [EOL] [comment] [EOL] membership = Membership ( membership_json ) [EOL] assert str ( membership ) == [string] [EOL] [EOL] [comment] [EOL] del membership_json [ [string] ] [EOL] membership = Membership ( membership_json ) [EOL] assert str ( membership ) == [string] [EOL] [EOL] def test_primary_affiliation_property ( self , membership_json ) : [EOL] [docstring] [EOL] membership = Membership ( membership_json ) [EOL] assert membership . primary_affiliation == [string] [EOL] assert membership . affiliations == [ [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] @ freeze_time ( [string] ) class TestCourse : [EOL] def test_course_code ( self , finished_course ) : [EOL] assert finished_course . code == [string] [EOL] [EOL] def test_finished_course ( self , finished_course ) : [EOL] assert not finished_course . membership [EOL] assert finished_course . semester . year == [number] [EOL] [EOL] def test_ongoing_course_with_end_time ( self , ongoing_course ) : [EOL] assert ongoing_course . membership [EOL] assert ongoing_course . semester . year == [number] [EOL] [EOL] @ pytest . mark . skip ( reason = [string] ) def test_ongoing_course_without_end_time ( self , non_finished_course ) : [EOL] assert non_finished_course . membership [EOL] assert non_finished_course . semester . year == [number] [EOL] [EOL] def test_split_on_membership ( self , finished_course , non_finished_course , ongoing_course ) : [EOL] courses = [ finished_course , non_finished_course , ongoing_course , ] [EOL] active , inactive = Course . split_on_membership ( courses ) [EOL] [EOL] assert finished_course . code in inactive . keys ( ) [EOL] assert finished_course in inactive . values ( ) [EOL] [EOL] assert non_finished_course . code in active . keys ( ) [EOL] assert non_finished_course in active . values ( ) [EOL] [EOL] assert ongoing_course . code in active . keys ( ) [EOL] assert ongoing_course in active . values ( ) [EOL] [EOL] [EOL] class TestStudyProgram : [EOL] def test_study_program_basic_properties ( self , study_program_json ) : [EOL] study_program = StudyProgram ( study_program_json ) [EOL] assert study_program . code == [string] [EOL] [EOL] [EOL] class TestMainProfile : [EOL] def test_main_profile_basic_properties ( self , main_profile_json ) : [EOL] main_profile = MainProfile ( main_profile_json ) [EOL] assert main_profile . code == [string] [EOL] [EOL] [EOL] class TestOrganisationUnit : [EOL] def test_organisation_unit_basic_properties ( self , organisation_unit_json ) : [EOL] organisation_unit = OrganisationUnit ( organisation_unit_json ) [EOL] assert organisation_unit . uid == [string] [EOL] [EOL] [EOL] @ freeze_time ( [string] ) class TestSemester ( TestCase ) : [EOL] def setUp ( self ) : [EOL] autumn_semester_date = datetime_from ( [string] ) [EOL] spring_semester_date = datetime_from ( [string] ) [EOL] [EOL] self . autumn_semester = Semester ( autumn_semester_date ) [EOL] self . spring_semester = Semester ( spring_semester_date ) [EOL] self . present_semester = Semester . now ( ) [EOL] [EOL] def test_year_of_semester ( self ) : [EOL] self . assertEqual ( self . autumn_semester . year , [number] ) [EOL] self . assertEqual ( self . present_semester . year , [number] ) [EOL] [EOL] def test_semester_season ( self ) : [EOL] self . assertEqual ( self . autumn_semester . season , Semester . AUTUMN ) [EOL] self . assertEqual ( self . spring_semester . season , Semester . SPRING ) [EOL] [EOL] def test_subtracting_semesters ( self ) : [EOL] same_semester_diff = self . present_semester - self . present_semester [EOL] same_season_diff = self . present_semester - self . autumn_semester [EOL] negative_diff = self . autumn_semester - self . present_semester [EOL] different_season_diff = self . autumn_semester - self . spring_semester [EOL] different_season_negative_diff = self . spring_semester - self . present_semester [EOL] [EOL] self . assertEqual ( [ same_semester_diff , same_season_diff , negative_diff , different_season_diff , different_season_negative_diff ] , [ [number] , [number] , - [number] , [number] , - [number] ] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 $datetime.datetime.datetime$ 0 0 0 $datetime.datetime.datetime$ 0 0 0 $datetime.datetime.datetime$ 0 0 0 $datetime.datetime.datetime$ 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dataporten.parsers.BaseGroup$ 0 0 0 0 0 0 0 0 0 0 0 0 $dataporten.parsers.BaseGroup$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dataporten.parsers.BaseGroup$ 0 0 0 0 0 0 0 0 0 0 0 0 $dataporten.parsers.BaseGroup$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dataporten.parsers.BaseGroup$ 0 0 0 0 0 0 0 0 0 0 0 0 $dataporten.parsers.BaseGroup$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Generator[dataporten.parsers.BaseGroup,None,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Generator[dataporten.parsers.BaseGroup,None,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dataporten.parsers.Group$ 0 0 0 0 0 0 0 $dataporten.parsers.Group$ 0 0 0 0 0 0 $dataporten.parsers.Group$ 0 0 0 0 0 0 $dataporten.parsers.Group$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dataporten.parsers.Group$ 0 0 0 0 0 0 0 $dataporten.parsers.Group$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dataporten.parsers.Membership$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dataporten.parsers.Membership$ 0 0 0 0 0 0 0 0 0 0 0 0 $dataporten.parsers.Membership$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dataporten.parsers.Membership$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dataporten.parsers.Membership$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dataporten.parsers.Membership$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dataporten.parsers.Membership$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dataporten.parsers.Membership$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dataporten.parsers.Membership$ 0 0 0 0 0 0 0 $dataporten.parsers.Membership$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dataporten.parsers.Membership$ 0 0 0 0 0 0 0 0 0 $dataporten.parsers.Membership$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $dataporten.parsers.Membership$ 0 0 0 0 0 0 0 0 0 $dataporten.parsers.Membership$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dataporten.parsers.Membership$ 0 0 0 0 0 0 0 $dataporten.parsers.Membership$ 0 0 0 0 0 0 $dataporten.parsers.Membership$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dataporten.parsers.StudyProgram$ 0 0 0 0 0 0 0 $dataporten.parsers.StudyProgram$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dataporten.parsers.MainProfile$ 0 0 0 0 0 0 0 $dataporten.parsers.MainProfile$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $dataporten.parsers.OrganisationUnit$ 0 0 0 0 0 0 0 $dataporten.parsers.OrganisationUnit$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 $datetime.datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0