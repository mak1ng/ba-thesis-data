from typing import List [EOL] import builtins [EOL] import pathlib [EOL] import typing [EOL] [docstring] [EOL] [EOL] from pathlib import Path [EOL] from typing import List [EOL] [EOL] from setuptools import setup [EOL] [EOL] [EOL] def _get_dependencies ( requirements_file ) : [EOL] [docstring] [EOL] lines = requirements_file . read_text ( ) . strip ( ) . split ( [string] ) [EOL] return [ line for line in lines if not line . startswith ( [string] ) ] [EOL] [EOL] [EOL] _DIRECT_REQUIRES = _get_dependencies ( requirements_file = Path ( [string] ) , ) [EOL] [EOL] _INDIRECT_REQUIRES = _get_dependencies ( requirements_file = Path ( [string] ) , ) [EOL] [EOL] INSTALL_REQUIRES = _DIRECT_REQUIRES + _INDIRECT_REQUIRES [EOL] DEV_REQUIRES = _get_dependencies ( requirements_file = Path ( [string] ) , ) [EOL] PACKAGING_REQUIRES = _get_dependencies ( requirements_file = Path ( [string] ) , ) [EOL] [EOL] SETUP_REQUIRES = _get_dependencies ( requirements_file = Path ( [string] ) , ) [EOL] [EOL] setup ( use_scm_version = True , setup_requires = SETUP_REQUIRES , install_requires = INSTALL_REQUIRES , extras_require = { [string] : DEV_REQUIRES } , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0
from typing import List [EOL] import subprocess [EOL] import pathlib [EOL] import typing [EOL] [docstring] [EOL] [EOL] import subprocess [EOL] import sys [EOL] from pathlib import Path [EOL] from textwrap import dedent [EOL] [EOL] [EOL] def test_prompt_specified_late ( tmp_path ) : [EOL] [docstring] [EOL] source_directory = tmp_path / [string] [EOL] source_directory . mkdir ( ) [EOL] source_file = source_directory / [string] [EOL] conf_py = source_directory / [string] [EOL] conf_py . touch ( ) [EOL] source_file . touch ( ) [EOL] conf_py_content = dedent ( [string] , ) [EOL] conf_py . write_text ( conf_py_content ) [EOL] destination_directory = tmp_path / [string] [EOL] args = [ sys . executable , [string] , [string] , [string] , [string] , [string] , str ( source_directory ) , str ( destination_directory ) , str ( source_file ) , ] [EOL] result = subprocess . run ( args = args , check = False , stderr = subprocess . PIPE , ) [EOL] [EOL] expected_message = ( [string] [string] ) [EOL] [EOL] assert result . returncode != [number] [EOL] assert expected_message in result . stderr . decode ( ) [EOL] [EOL] [EOL] def test_substitution_prompt ( tmp_path ) : [EOL] [docstring] [EOL] source_directory = tmp_path / [string] [EOL] source_directory . mkdir ( ) [EOL] source_file = source_directory / [string] [EOL] conf_py = source_directory / [string] [EOL] conf_py . touch ( ) [EOL] source_file . touch ( ) [EOL] conf_py_content = dedent ( [string] , ) [EOL] conf_py . write_text ( conf_py_content ) [EOL] source_file_content = dedent ( [string] , ) [EOL] source_file . write_text ( source_file_content ) [EOL] destination_directory = tmp_path / [string] [EOL] args = [ sys . executable , [string] , [string] , [string] , [string] , [string] , str ( source_directory ) , str ( destination_directory ) , str ( source_file ) , ] [EOL] subprocess . check_output ( args = args ) [EOL] expected = [string] [EOL] content_html = Path ( str ( destination_directory ) ) / [string] [EOL] assert expected in content_html . read_text ( ) [EOL] [EOL] [EOL] def test_substitution_prompt_is_case_preserving ( tmp_path ) : [EOL] [docstring] [EOL] source_directory = tmp_path / [string] [EOL] source_directory . mkdir ( ) [EOL] source_file = source_directory / [string] [EOL] conf_py = source_directory / [string] [EOL] conf_py . touch ( ) [EOL] source_file . touch ( ) [EOL] conf_py_content = dedent ( [string] , ) [EOL] conf_py . write_text ( conf_py_content ) [EOL] source_file_content = dedent ( [string] , ) [EOL] source_file . write_text ( source_file_content ) [EOL] destination_directory = tmp_path / [string] [EOL] args = [ sys . executable , [string] , [string] , [string] , [string] , [string] , str ( source_directory ) , str ( destination_directory ) , str ( source_file ) , ] [EOL] subprocess . check_output ( args = args ) [EOL] expected = [string] [EOL] content_html = Path ( str ( destination_directory ) ) / [string] [EOL] assert expected in content_html . read_text ( ) [EOL] [EOL] [EOL] def test_no_substitution_prompt ( tmp_path ) : [EOL] [docstring] [EOL] source_directory = tmp_path / [string] [EOL] source_directory . mkdir ( ) [EOL] source_file = source_directory / [string] [EOL] conf_py = source_directory / [string] [EOL] conf_py . touch ( ) [EOL] source_file . touch ( ) [EOL] conf_py_content = dedent ( [string] , ) [EOL] conf_py . write_text ( conf_py_content ) [EOL] source_file_content = dedent ( [string] , ) [EOL] source_file . write_text ( source_file_content ) [EOL] destination_directory = tmp_path / [string] [EOL] args = [ sys . executable , [string] , [string] , [string] , [string] , [string] , str ( source_directory ) , str ( destination_directory ) , str ( source_file ) , ] [EOL] subprocess . check_output ( args = args ) [EOL] expected = [string] [EOL] content_html = Path ( str ( destination_directory ) ) / [string] [EOL] assert expected not in content_html . read_text ( ) [EOL] [EOL] [EOL] def test_no_substitution_code_block ( tmp_path ) : [EOL] [docstring] [EOL] source_directory = tmp_path / [string] [EOL] source_directory . mkdir ( ) [EOL] source_file = source_directory / [string] [EOL] conf_py = source_directory / [string] [EOL] conf_py . touch ( ) [EOL] source_file . touch ( ) [EOL] conf_py_content = dedent ( [string] , ) [EOL] conf_py . write_text ( conf_py_content ) [EOL] source_file_content = dedent ( [string] , ) [EOL] source_file . write_text ( source_file_content ) [EOL] destination_directory = tmp_path / [string] [EOL] args = [ sys . executable , [string] , [string] , [string] , [string] , [string] , str ( source_directory ) , str ( destination_directory ) , str ( source_file ) , ] [EOL] subprocess . check_output ( args = args ) [EOL] expected = [string] [EOL] content_html = Path ( str ( destination_directory ) ) / [string] [EOL] assert expected not in content_html . read_text ( ) [EOL] [EOL] [EOL] def test_substitution_code_block ( tmp_path ) : [EOL] [docstring] [EOL] source_directory = tmp_path / [string] [EOL] source_directory . mkdir ( ) [EOL] source_file = source_directory / [string] [EOL] conf_py = source_directory / [string] [EOL] conf_py . touch ( ) [EOL] source_file . touch ( ) [EOL] conf_py_content = dedent ( [string] , ) [EOL] conf_py . write_text ( conf_py_content ) [EOL] source_file_content = dedent ( [string] , ) [EOL] source_file . write_text ( source_file_content ) [EOL] destination_directory = tmp_path / [string] [EOL] args = [ sys . executable , [string] , [string] , [string] , [string] , [string] , str ( source_directory ) , str ( destination_directory ) , str ( source_file ) , ] [EOL] subprocess . check_output ( args = args ) [EOL] expected = [string] [EOL] content_html = Path ( str ( destination_directory ) ) / [string] [EOL] assert expected in content_html . read_text ( ) [EOL] [EOL] [EOL] def test_substitution_code_block_case_preserving ( tmp_path ) : [EOL] [docstring] [EOL] source_directory = tmp_path / [string] [EOL] source_directory . mkdir ( ) [EOL] source_file = source_directory / [string] [EOL] conf_py = source_directory / [string] [EOL] conf_py . touch ( ) [EOL] source_file . touch ( ) [EOL] conf_py_content = dedent ( [string] , ) [EOL] conf_py . write_text ( conf_py_content ) [EOL] source_file_content = dedent ( [string] , ) [EOL] source_file . write_text ( source_file_content ) [EOL] destination_directory = tmp_path / [string] [EOL] args = [ sys . executable , [string] , [string] , [string] , [string] , [string] , str ( source_directory ) , str ( destination_directory ) , str ( source_file ) , ] [EOL] subprocess . check_output ( args = args ) [EOL] expected = [string] [EOL] content_html = Path ( str ( destination_directory ) ) / [string] [EOL] assert expected in content_html . read_text ( ) [EOL] [EOL] [EOL] def test_substitution_inline ( tmp_path ) : [EOL] [docstring] [EOL] source_directory = tmp_path / [string] [EOL] source_directory . mkdir ( ) [EOL] source_file = source_directory / [string] [EOL] conf_py = source_directory / [string] [EOL] conf_py . touch ( ) [EOL] source_file . touch ( ) [EOL] conf_py_content = dedent ( [string] , ) [EOL] conf_py . write_text ( conf_py_content ) [EOL] source_file_content = dedent ( [string] , ) [EOL] source_file . write_text ( source_file_content ) [EOL] destination_directory = tmp_path / [string] [EOL] args = [ sys . executable , [string] , [string] , [string] , [string] , [string] , str ( source_directory ) , str ( destination_directory ) , str ( source_file ) , ] [EOL] subprocess . check_output ( args = args ) [EOL] expected = [string] [EOL] content_html = Path ( str ( destination_directory ) ) / [string] [EOL] assert expected in content_html . read_text ( ) [EOL] [EOL] [EOL] def test_substitution_inline_case_preserving ( tmp_path ) : [EOL] [docstring] [EOL] source_directory = tmp_path / [string] [EOL] source_directory . mkdir ( ) [EOL] source_file = source_directory / [string] [EOL] conf_py = source_directory / [string] [EOL] conf_py . touch ( ) [EOL] source_file . touch ( ) [EOL] conf_py_content = dedent ( [string] , ) [EOL] conf_py . write_text ( conf_py_content ) [EOL] source_file_content = dedent ( [string] , ) [EOL] source_file . write_text ( source_file_content ) [EOL] destination_directory = tmp_path / [string] [EOL] args = [ sys . executable , [string] , [string] , [string] , [string] , [string] , str ( source_directory ) , str ( destination_directory ) , str ( source_file ) , ] [EOL] subprocess . check_output ( args = args ) [EOL] expected = [string] [EOL] content_html = Path ( str ( destination_directory ) ) / [string] [EOL] assert expected in content_html . read_text ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
from typing import List [EOL] import typing [EOL] [docstring] [EOL] [EOL] extensions = [ [string] , [string] , ] [EOL] [EOL] rst_prolog = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0