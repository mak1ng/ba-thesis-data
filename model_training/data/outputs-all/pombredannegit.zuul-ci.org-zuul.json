[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] import setuptools [EOL] [EOL] setuptools . setup ( setup_requires = [ [string] ] , pbr = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import ValuesView , Set , Dict , List , Any , Optional [EOL] import tests [EOL] import typing [EOL] import github3 . exceptions [EOL] import re [EOL] [EOL] FAKE_BASE_URL = [string] [EOL] [EOL] [EOL] class FakeUser ( object ) : [EOL] def __init__ ( self , login ) : [EOL] self . login = login [EOL] self . name = [string] [EOL] self . email = [string] [EOL] [EOL] [EOL] class FakeBranch ( object ) : [EOL] def __init__ ( self , branch = [string] , protected = False ) : [EOL] self . name = branch [EOL] self . protected = protected [EOL] [EOL] def as_dict ( self ) : [EOL] return { [string] : self . name , [string] : self . protected } [EOL] [EOL] [EOL] class FakeStatus ( object ) : [EOL] def __init__ ( self , state , url , description , context , user ) : [EOL] self . state = state [EOL] self . context = context [EOL] self . _url = url [EOL] self . _description = description [EOL] self . _user = user [EOL] [EOL] def as_dict ( self ) : [EOL] return { [string] : self . state , [string] : self . _url , [string] : self . _description , [string] : self . context , [string] : { [string] : self . _user } } [EOL] [EOL] [EOL] class FakeCombinedStatus ( object ) : [EOL] def __init__ ( self , sha , statuses ) : [EOL] self . sha = sha [EOL] self . statuses = statuses [EOL] [EOL] [EOL] class FakeCommit ( object ) : [EOL] def __init__ ( self , sha ) : [EOL] self . _statuses = [ ] [EOL] self . sha = sha [EOL] [EOL] def set_status ( self , state , url , description , context , user ) : [EOL] status = FakeStatus ( state , url , description , context , user ) [EOL] [comment] [EOL] [comment] [EOL] self . _statuses . insert ( [number] , status ) [EOL] [EOL] def statuses ( self ) : [EOL] return self . _statuses [EOL] [EOL] def status ( self ) : [EOL] [docstring] [EOL] latest_statuses_by_context = { } [EOL] for status in self . _statuses : [EOL] if status . context not in latest_statuses_by_context : [EOL] latest_statuses_by_context [ status . context ] = status [EOL] combined_statuses = latest_statuses_by_context . values ( ) [EOL] return FakeCombinedStatus ( self . sha , combined_statuses ) [EOL] [EOL] [EOL] class FakeRepository ( object ) : [EOL] def __init__ ( self , name , data ) : [EOL] self . _api = FAKE_BASE_URL [EOL] self . _branches = [ FakeBranch ( ) ] [EOL] self . _commits = { } [EOL] self . data = data [EOL] self . name = name [EOL] [EOL] [comment] [EOL] self . fail_not_found = [number] [EOL] [EOL] def branches ( self , protected = False ) : [EOL] if protected : [EOL] [comment] [EOL] return [ b for b in self . _branches if b . protected ] [EOL] return self . _branches [EOL] [EOL] def _set_branch_protection ( self , branch_name , protected ) : [EOL] for branch in self . _branches : [EOL] if branch . name == branch_name : [EOL] branch . protected = protected [EOL] return [EOL] [EOL] def _build_url ( self , * args , ** kwargs ) : [EOL] path_args = [ [string] , self . name ] [EOL] path_args . extend ( args ) [EOL] fakepath = [string] . join ( path_args ) [EOL] return FAKE_BASE_URL + fakepath [EOL] [EOL] def _get ( self , url , headers = None ) : [EOL] client = FakeGithubClient ( self . data ) [EOL] return client . session . get ( url , headers ) [EOL] [EOL] def _create_branch ( self , branch ) : [EOL] self . _branches . append ( ( FakeBranch ( branch = branch ) ) ) [EOL] [EOL] def _delete_branch ( self , branch_name ) : [EOL] self . _branches = [ b for b in self . _branches if b . name != branch_name ] [EOL] [EOL] def create_status ( self , sha , state , url , description , context , user = [string] ) : [EOL] [comment] [EOL] [comment] [EOL] commit = self . _commits . get ( sha , None ) [EOL] if commit is None : [EOL] commit = FakeCommit ( sha ) [EOL] self . _commits [ sha ] = commit [EOL] commit . set_status ( state , url , description , context , user ) [EOL] [EOL] def commit ( self , sha ) : [EOL] [EOL] if self . fail_not_found > [number] : [EOL] self . fail_not_found -= [number] [EOL] [EOL] class Response : [EOL] status_code = [number] [EOL] message = [string] [EOL] [EOL] def json ( self ) : [EOL] return { [string] : self . message } [EOL] [EOL] resp = Response ( ) [EOL] resp . status_code = [number] [EOL] resp . message = [string] [EOL] [EOL] raise github3 . exceptions . NotFoundError ( resp ) [EOL] [EOL] commit = self . _commits . get ( sha , None ) [EOL] if commit is None : [EOL] commit = FakeCommit ( sha ) [EOL] self . _commits [ sha ] = commit [EOL] return commit [EOL] [EOL] def get_url ( self , path , params = None ) : [EOL] if [string] in path : [EOL] entity , request = path . split ( [string] , [number] ) [EOL] else : [EOL] entity = path [EOL] request = None [EOL] [EOL] if entity == [string] : [EOL] return self . get_url_branches ( request , params = params ) [EOL] if entity == [string] : [EOL] return self . get_url_collaborators ( request ) [EOL] else : [EOL] return None [EOL] [EOL] def get_url_branches ( self , path , params = None ) : [EOL] if path is None : [EOL] [comment] [EOL] return self . get_url_branch_list ( params ) [EOL] [EOL] elements = path . split ( [string] ) [EOL] [EOL] entity = elements [ - [number] ] [EOL] if entity == [string] : [EOL] branch = [string] . join ( elements [ [number] : - [number] ] ) [EOL] return self . get_url_protection ( branch ) [EOL] else : [EOL] [comment] [EOL] branch = [string] . join ( elements ) [EOL] return self . get_url_branch ( branch ) [EOL] [EOL] def get_url_branch_list ( self , params ) : [EOL] if params . get ( [string] ) == [number] : [EOL] exclude_unprotected = True [EOL] else : [EOL] exclude_unprotected = False [EOL] branches = [ x . as_dict ( ) for x in self . branches ( exclude_unprotected ) ] [EOL] [EOL] return FakeResponse ( branches , [number] ) [EOL] [EOL] def get_url_branch ( self , branch_name ) : [EOL] for branch in self . _branches : [EOL] if branch . name == branch_name : [EOL] return FakeResponse ( branch . as_dict ( ) ) [EOL] return FakeResponse ( None , [number] ) [EOL] [EOL] def get_url_collaborators ( self , path ) : [EOL] login , entity = path . split ( [string] ) [EOL] [EOL] if entity == [string] : [EOL] owner , proj = self . name . split ( [string] ) [EOL] permission = None [EOL] for pr in self . data . pull_requests . values ( ) : [EOL] pr_owner , pr_project = pr . project . split ( [string] ) [EOL] if ( pr_owner == owner and proj == pr_project ) : [EOL] if login in pr . admins : [EOL] permission = [string] [EOL] break [EOL] elif login in pr . writers : [EOL] permission = [string] [EOL] break [EOL] else : [EOL] permission = [string] [EOL] data = { [string] : permission , } [EOL] return FakeResponse ( data ) [EOL] else : [EOL] return None [EOL] [EOL] def get_url_protection ( self , branch ) : [EOL] contexts = self . data . required_contexts . get ( ( self . name , branch ) , [ ] ) [EOL] if not contexts : [EOL] [comment] [EOL] [comment] [EOL] return FakeResponse ( { } , [number] ) [EOL] data = { [string] : { [string] : contexts } } [EOL] return FakeResponse ( data ) [EOL] [EOL] def pull_requests ( self , state = None , sort = None , direction = None ) : [EOL] [comment] [EOL] [comment] [EOL] pulls = [ ] [EOL] for pull in self . data . pull_requests . values ( ) : [EOL] if pull . project != self . name : [EOL] continue [EOL] if state and pull . state != state : [EOL] continue [EOL] pulls . append ( FakePull ( pull ) ) [EOL] return pulls [EOL] [EOL] [EOL] class FakeIssue ( object ) : [EOL] def __init__ ( self , fake_pull_request ) : [EOL] self . _fake_pull_request = fake_pull_request [EOL] [EOL] def pull_request ( self ) : [EOL] return FakePull ( self . _fake_pull_request ) [EOL] [EOL] [EOL] class FakeFile ( object ) : [EOL] def __init__ ( self , filename ) : [EOL] self . filename = filename [EOL] [EOL] [EOL] class FakePull ( object ) : [EOL] def __init__ ( self , fake_pull_request ) : [EOL] self . _fake_pull_request = fake_pull_request [EOL] [EOL] def issue ( self ) : [EOL] return FakeIssue ( self . _fake_pull_request ) [EOL] [EOL] def files ( self ) : [EOL] [comment] [EOL] return [ FakeFile ( fn ) for fn in sorted ( self . _fake_pull_request . files ) ] [ : [number] ] [EOL] [EOL] def reviews ( self ) : [EOL] return self . _fake_pull_request . reviews [EOL] [EOL] @ property def head ( self ) : [EOL] client = FakeGithubClient ( self . _fake_pull_request . github . github_data ) [EOL] repo = client . repo_from_project ( self . _fake_pull_request . project ) [EOL] return repo . commit ( self . _fake_pull_request . head_sha ) [EOL] [EOL] def commits ( self ) : [EOL] [comment] [EOL] [comment] [EOL] return [ self . head ] [EOL] [EOL] def as_dict ( self ) : [EOL] pr = self . _fake_pull_request [EOL] connection = pr . github [EOL] data = { [string] : pr . number , [string] : pr . subject , [string] : [string] % ( connection . server , pr . project , pr . number ) , [string] : pr . updated_at , [string] : { [string] : { [string] : pr . project } , [string] : pr . branch , } , [string] : True , [string] : pr . state , [string] : { [string] : pr . head_sha , [string] : pr . getPRReference ( ) , [string] : { [string] : pr . project } } , [string] : pr . is_merged , [string] : pr . body , [string] : len ( pr . files ) , [string] : [ { [string] : l } for l in pr . labels ] } [EOL] return data [EOL] [EOL] [EOL] class FakeIssueSearchResult ( object ) : [EOL] def __init__ ( self , issue ) : [EOL] self . issue = issue [EOL] [EOL] [EOL] class FakeResponse ( object ) : [EOL] def __init__ ( self , data , status_code = [number] ) : [EOL] self . status_code = status_code [EOL] self . data = data [EOL] self . links = { } [EOL] [EOL] def json ( self ) : [EOL] return self . data [EOL] [EOL] [EOL] class FakeGithubSession ( object ) : [EOL] [EOL] def __init__ ( self , data ) : [EOL] self . _data = data [EOL] [EOL] def build_url ( self , * args ) : [EOL] fakepath = [string] . join ( args ) [EOL] return FAKE_BASE_URL + fakepath [EOL] [EOL] def get ( self , url , headers = None , params = None ) : [EOL] request = url [EOL] if request . startswith ( FAKE_BASE_URL ) : [EOL] request = request [ len ( FAKE_BASE_URL ) : ] [EOL] [EOL] entity , request = request . split ( [string] , [number] ) [EOL] [EOL] if entity == [string] : [EOL] return self . get_repo ( request , params = params ) [EOL] else : [EOL] [comment] [EOL] return None [EOL] [EOL] def get_repo ( self , request , params = None ) : [EOL] org , project , request = request . split ( [string] , [number] ) [EOL] project_name = [string] . format ( org , project ) [EOL] [EOL] client = FakeGithubClient ( self . _data ) [EOL] repo = client . repo_from_project ( project_name ) [EOL] [EOL] return repo . get_url ( request , params = params ) [EOL] [EOL] [EOL] class FakeGithubData ( object ) : [EOL] def __init__ ( self , pull_requests ) : [EOL] self . pull_requests = pull_requests [EOL] self . repos = { } [EOL] self . required_contexts = { } [EOL] [EOL] [EOL] class FakeGithubClient ( object ) : [EOL] def __init__ ( self , data , inst_id = None ) : [EOL] self . _data = data [EOL] self . _inst_id = inst_id [EOL] self . session = FakeGithubSession ( data ) [EOL] [EOL] def user ( self , login ) : [EOL] return FakeUser ( login ) [EOL] [EOL] def repository ( self , owner , proj ) : [EOL] return self . _data . repos . get ( ( owner , proj ) , None ) [EOL] [EOL] def repo_from_project ( self , project ) : [EOL] [comment] [EOL] owner , proj = project . split ( [string] ) [EOL] return self . repository ( owner , proj ) [EOL] [EOL] def addProject ( self , project ) : [EOL] owner , proj = project . name . split ( [string] ) [EOL] self . _data . repos [ ( owner , proj ) ] = FakeRepository ( project . name , self . _data ) [EOL] [EOL] def addProjectByName ( self , project_name ) : [EOL] owner , proj = project_name . split ( [string] ) [EOL] self . _data . repos [ ( owner , proj ) ] = FakeRepository ( project_name , self . _data ) [EOL] [EOL] def pull_request ( self , owner , project , number ) : [EOL] fake_pr = self . _data . pull_requests [ int ( number ) ] [EOL] return FakePull ( fake_pr ) [EOL] [EOL] def search_issues ( self , query ) : [EOL] def tokenize ( s ) : [EOL] return re . findall ( [string] , s ) [EOL] [EOL] parts = tokenize ( query ) [EOL] terms = set ( ) [EOL] results = [ ] [EOL] for part in parts : [EOL] kv = part . split ( [string] , [number] ) [EOL] if len ( kv ) == [number] : [EOL] if kv [ [number] ] in set ( [string] , [string] , [string] ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] continue [EOL] terms . add ( part ) [EOL] [EOL] for pr in self . _data . pull_requests . values ( ) : [EOL] if not pr . body : [EOL] body = set ( ) [EOL] else : [EOL] body = set ( tokenize ( pr . body ) ) [EOL] if terms . intersection ( body ) : [EOL] issue = FakeIssue ( pr ) [EOL] results . append ( FakeIssueSearchResult ( issue ) ) [EOL] [EOL] return results [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.fakegithub.FakeStatus$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.fakegithub.FakeStatus$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.ValuesView[typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.ValuesView[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[tests.fakegithub.FakeBranch]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 0 0 0 $typing.list$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.list$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.fakegithub.FakeGithubClient$ 0 0 0 0 0 0 0 0 0 $tests.fakegithub.FakeGithubClient$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[tests.fakegithub.FakeBranch]$ 0 0 0 0 0 0 0 0 $typing.List[tests.fakegithub.FakeBranch]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.fakegithub.FakeCommit$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.fakegithub.FakeCommit$ 0 0 0 0 $tests.fakegithub.FakeCommit$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.fakegithub.FakeCommit$ 0 $tests.fakegithub.FakeCommit$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.fakegithub.FakeCommit$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.fakegithub.FakeRepository.commit.Response$ 0 0 0 0 0 $tests.fakegithub.FakeRepository.commit.Response$ 0 $builtins.int$ 0 0 0 $tests.fakegithub.FakeRepository.commit.Response$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $tests.fakegithub.FakeRepository.commit.Response$ 0 0 0 $tests.fakegithub.FakeCommit$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.fakegithub.FakeCommit$ 0 0 0 0 $tests.fakegithub.FakeCommit$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.fakegithub.FakeCommit$ 0 0 $tests.fakegithub.FakeCommit$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $None$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Optional[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Dict[builtins.str,typing.Optional[builtins.str]]$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Optional[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.fakegithub.FakeGithubClient$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $tests.fakegithub.FakeGithubClient$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $tests.fakegithub.FakeGithubClient$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $tests.fakegithub.FakeGithubClient$ 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.fakegithub.FakeGithubSession$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 $typing.Set[typing.Any]$ 0 0 0 $tests.fakegithub.FakeIssue$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $tests.fakegithub.FakeIssue$ 0 0 0 0 0 $typing.List[typing.Any]$ 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] def main ( ) : [EOL] module = AnsibleModule ( argument_spec = dict ( path = dict ( required = False , type = [string] ) , state = dict ( required = False , type = [string] ) , ) ) [EOL] [EOL] module . exit_json ( changed = False ) [EOL] [EOL] from ansible . module_utils . basic import * [comment] [EOL] from ansible . module_utils . basic import AnsibleModule [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] def main ( ) : [EOL] print ( [string] ) [EOL] [EOL] [EOL] try : [EOL] from ansible . module_utils . basic import * [comment] [EOL] except ImportError : [EOL] pass [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] tenant_config = [string] [EOL] [EOL] print ( tenant_config ) [EOL]	0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0
import subprocess [EOL] [EOL] [EOL] def my_cool_test ( string ) : [EOL] shell_output = subprocess . check_output ( [ [string] ] ) [EOL] return [string] % shell_output . decode ( [string] ) [EOL] [EOL] [EOL] class FilterModule ( object ) : [EOL] [EOL] def filters ( self ) : [EOL] return { [string] : my_cool_test } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import subprocess [EOL] [EOL] [EOL] def my_cool_test ( string ) : [EOL] shell_output = subprocess . check_output ( [ [string] ] ) [EOL] return [string] % shell_output . decode ( [string] ) [EOL] [EOL] [EOL] class FilterModule ( object ) : [EOL] [EOL] def filters ( self ) : [EOL] return { [string] : my_cool_test } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import subprocess [EOL] [EOL] [EOL] def my_cool_test ( string ) : [EOL] shell_output = subprocess . check_output ( [ [string] ] ) [EOL] return [string] % shell_output . decode ( [string] ) [EOL] [EOL] [EOL] class FilterModule ( object ) : [EOL] [EOL] def filters ( self ) : [EOL] return { [string] : my_cool_test } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import subprocess [EOL] [EOL] [EOL] def my_cool_test ( string ) : [EOL] shell_output = subprocess . check_output ( [ [string] ] ) [EOL] return [string] % shell_output . decode ( [string] ) [EOL] [EOL] [EOL] class FilterModule ( object ) : [EOL] [EOL] def filters ( self ) : [EOL] return { [string] : my_cool_test } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import subprocess [EOL] [EOL] [EOL] def my_cool_test ( string ) : [EOL] shell_output = subprocess . check_output ( [ [string] ] ) [EOL] return [string] % shell_output . decode ( [string] ) [EOL] [EOL] [EOL] class FilterModule ( object ) : [EOL] [EOL] def filters ( self ) : [EOL] return { [string] : my_cool_test } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import subprocess [EOL] [EOL] [EOL] def my_cool_test ( string ) : [EOL] shell_output = subprocess . check_output ( [ [string] ] ) [EOL] return [string] % shell_output . decode ( [string] ) [EOL] [EOL] [EOL] class FilterModule ( object ) : [EOL] [EOL] def filters ( self ) : [EOL] return { [string] : my_cool_test } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] from tests . base import ZuulTestCase [EOL] [EOL] [EOL] class TestGerritAndGithub ( ZuulTestCase ) : [EOL] config_file = [string] [EOL] tenant_config_file = [string] [EOL] [EOL] def setup_config ( self ) : [EOL] super ( TestGerritAndGithub , self ) . setup_config ( ) [EOL] [EOL] def test_multiple_project_gerrit_and_github ( self ) : [EOL] self . executor_server . hold_jobs_in_build = True [EOL] [EOL] A = self . fake_gerrit . addFakeChange ( [string] , [string] , [string] ) [EOL] self . fake_gerrit . addEvent ( A . getPatchsetCreatedEvent ( [number] ) ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] B = self . fake_github . openFakePullRequest ( [string] , [string] , [string] ) [EOL] self . fake_github . emitEvent ( B . getPullRequestOpenedEvent ( ) ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] self . assertEqual ( [number] , len ( self . builds ) ) [EOL] self . assertEqual ( [string] , self . builds [ [number] ] . name ) [EOL] self . assertEqual ( [string] , self . builds [ [number] ] . name ) [EOL] self . assertTrue ( self . builds [ [number] ] . hasChanges ( A ) ) [EOL] self . assertTrue ( self . builds [ [number] ] . hasChanges ( B ) ) [EOL] [EOL] self . executor_server . hold_jobs_in_build = False [EOL] self . executor_server . release ( ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] statuses = self . fake_github . getCommitStatuses ( [string] , B . head_sha ) [EOL] self . assertEqual ( [number] , len ( statuses ) ) [EOL] self . assertEqual ( [string] , statuses [ [number] ] [ [string] ] ) [EOL] [EOL] [comment] [EOL] self . assertEqual ( A . reported , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , Dict [EOL] import typing [EOL] import os [EOL] import subprocess [EOL] [EOL] from tests . base import ZuulTestCase [EOL] from zuul . executor . server import SshAgent [EOL] [EOL] [EOL] class TestSshAgent ( ZuulTestCase ) : [EOL] tenant_config_file = [string] [EOL] [EOL] def test_ssh_agent ( self ) : [EOL] [comment] [EOL] env_copy = dict ( os . environ ) [EOL] [comment] [EOL] [comment] [EOL] if [string] in env_copy : [EOL] del env_copy [ [string] ] [EOL] if [string] in env_copy : [EOL] del env_copy [ [string] ] [EOL] [EOL] agent = SshAgent ( ) [EOL] agent . start ( ) [EOL] env_copy . update ( agent . env ) [EOL] [EOL] pub_key_file = [string] . format ( self . private_key_file ) [EOL] pub_key = None [EOL] with open ( pub_key_file ) as pub_key_f : [EOL] pub_key = pub_key_f . read ( ) . split ( [string] ) [ [number] ] [EOL] [EOL] agent . add ( self . private_key_file ) [EOL] keys = agent . list ( ) [EOL] self . assertEqual ( [number] , len ( keys ) ) [EOL] self . assertEqual ( keys [ [number] ] . split ( [string] ) [ [number] ] , pub_key ) [EOL] agent . remove ( self . private_key_file ) [EOL] keys = agent . list ( ) [EOL] self . assertEqual ( [ ] , keys ) [EOL] agent . stop ( ) [EOL] [comment] [EOL] with open ( [string] ) as devnull : [EOL] self . assertRaises ( subprocess . CalledProcessError , subprocess . check_call , [ [string] , self . private_key_file ] , env = env_copy , stderr = devnull ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Tuple , Dict , Any , List [EOL] import typing [EOL] import os [EOL] import textwrap [EOL] from unittest import mock [EOL] [EOL] import tests . base [EOL] from tests . base import BaseTestCase , ZuulTestCase , AnsibleZuulTestCase [EOL] from zuul . driver . gerrit import GerritDriver [EOL] from zuul . driver . gerrit . gerritconnection import GerritConnection [EOL] [EOL] FIXTURE_DIR = os . path . join ( tests . base . FIXTURE_DIR , [string] ) [EOL] [EOL] [EOL] def read_fixture ( file ) : [EOL] with open ( [string] % ( FIXTURE_DIR , file ) , [string] ) as fixturefile : [EOL] lines = fixturefile . readlines ( ) [EOL] command = lines [ [number] ] . replace ( [string] , [string] ) [EOL] value = [string] . join ( lines [ [number] : ] ) [EOL] return command , value [EOL] [EOL] [EOL] def read_fixtures ( files ) : [EOL] calls = [ ] [EOL] values = [ ] [EOL] for fixture_file in files : [EOL] command , value = read_fixture ( fixture_file ) [EOL] calls . append ( mock . call ( command ) ) [EOL] values . append ( [ value , [string] ] ) [EOL] return calls , values [EOL] [EOL] [EOL] class TestGerrit ( BaseTestCase ) : [EOL] [EOL] @ mock . patch ( [string] ) def run_query ( self , files , expected_patches , _ssh_mock ) : [EOL] gerrit_config = { [string] : [string] , [string] : [string] , } [EOL] driver = GerritDriver ( ) [EOL] gerrit = GerritConnection ( driver , [string] , gerrit_config ) [EOL] [EOL] calls , values = read_fixtures ( files ) [EOL] _ssh_mock . side_effect = values [EOL] [EOL] result = gerrit . simpleQuery ( [string] ) [EOL] [EOL] _ssh_mock . assert_has_calls ( calls ) [EOL] self . assertEqual ( len ( calls ) , _ssh_mock . call_count , [string] % len ( calls ) ) [EOL] self . assertIsNotNone ( result , [string] ) [EOL] self . assertEqual ( len ( result ) , expected_patches , [string] % expected_patches ) [EOL] [EOL] def test_simple_query_pagination_new ( self ) : [EOL] files = [ [string] , [string] ] [EOL] expected_patches = [number] [EOL] self . run_query ( files , expected_patches ) [EOL] [EOL] def test_simple_query_pagination_old ( self ) : [EOL] files = [ [string] , [string] , [string] ] [EOL] expected_patches = [number] [EOL] self . run_query ( files , expected_patches ) [EOL] [EOL] def test_ref_name_check_rules ( self ) : [EOL] [comment] [EOL] test_strings = [ ( [string] , True ) , ( [string] , False ) , ( [string] , False ) , ( [string] , True ) , ( [string] , True ) , ( [string] , False ) , ( [string] , False ) , ( [string] , False ) , ( [string] , False ) , ( [string] , False ) , ( [string] , False ) , ( [string] , False ) , ( [string] , False ) , ( [string] , False ) , ( [string] , False ) , ( [string] , False ) , ( [string] , False ) , ( [string] , False ) ] [EOL] [EOL] for ref , accepted in test_strings : [EOL] self . assertEqual ( accepted , GerritConnection . _checkRefFormat ( ref ) , ref + [string] + ( [string] if accepted else [string] ) ) [EOL] [EOL] [EOL] class TestGerritWeb ( ZuulTestCase ) : [EOL] config_file = [string] [EOL] tenant_config_file = [string] [EOL] [EOL] def test_jobs_executed ( self ) : [EOL] [docstring] [EOL] A = self . fake_gerrit . addFakeChange ( [string] , [string] , [string] ) [EOL] A . addApproval ( [string] , [number] ) [EOL] self . fake_gerrit . addEvent ( A . addApproval ( [string] , [number] ) ) [EOL] self . waitUntilSettled ( ) [EOL] self . assertEqual ( self . getJobFromHistory ( [string] ) . result , [string] ) [EOL] self . assertEqual ( self . getJobFromHistory ( [string] ) . result , [string] ) [EOL] self . assertEqual ( self . getJobFromHistory ( [string] ) . result , [string] ) [EOL] self . assertEqual ( A . data [ [string] ] , [string] ) [EOL] self . assertEqual ( A . reported , [number] ) [EOL] self . assertEqual ( self . getJobFromHistory ( [string] ) . node , [string] ) [EOL] self . assertEqual ( self . getJobFromHistory ( [string] ) . node , [string] ) [EOL] [EOL] def test_dynamic_line_comment ( self ) : [EOL] in_repo_conf = textwrap . dedent ( [string] ) [EOL] [EOL] file_dict = { [string] : in_repo_conf } [EOL] A = self . fake_gerrit . addFakeChange ( [string] , [string] , [string] , files = file_dict ) [EOL] self . fake_gerrit . addEvent ( A . getPatchsetCreatedEvent ( [number] ) ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] self . assertEqual ( A . patchsets [ [number] ] [ [string] ] [ [number] ] [ [string] ] , [string] ) [EOL] self . assertIn ( [string] , A . messages [ [number] ] ) [EOL] comments = sorted ( A . comments , key = lambda x : x [ [string] ] ) [EOL] self . assertEqual ( comments [ [number] ] , { [string] : [string] , [string] : [number] , [string] : [string] [string] , [string] : { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] } , [string] : { [string] : [string] , [string] : [string] , [string] : [string] } } ) [EOL] [EOL] def test_dependent_dynamic_line_comment ( self ) : [EOL] in_repo_conf = textwrap . dedent ( [string] ) [EOL] [EOL] file_dict = { [string] : in_repo_conf } [EOL] A = self . fake_gerrit . addFakeChange ( [string] , [string] , [string] , files = file_dict ) [EOL] B = self . fake_gerrit . addFakeChange ( [string] , [string] , [string] ) [EOL] B . data [ [string] ] = [string] % ( B . subject , A . data [ [string] ] ) [EOL] [EOL] self . fake_gerrit . addEvent ( B . getPatchsetCreatedEvent ( [number] ) ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] self . assertEqual ( B . patchsets [ [number] ] [ [string] ] [ [number] ] [ [string] ] , [string] ) [EOL] self . assertIn ( [string] , B . messages [ [number] ] ) [EOL] self . assertEqual ( B . comments , [ ] ) [EOL] [EOL] [EOL] class TestFileComments ( AnsibleZuulTestCase ) : [EOL] config_file = [string] [EOL] tenant_config_file = [string] [EOL] [EOL] def test_file_comments ( self ) : [EOL] A = self . fake_gerrit . addFakeChange ( [string] , [string] , [string] , files = { [string] : [string] , [string] : [string] , } ) [EOL] A . addApproval ( [string] , [number] ) [EOL] self . fake_gerrit . addEvent ( A . getPatchsetCreatedEvent ( [number] ) ) [EOL] self . waitUntilSettled ( ) [EOL] self . assertEqual ( self . getJobFromHistory ( [string] ) . result , [string] ) [EOL] self . assertEqual ( self . getJobFromHistory ( [string] ) . result , [string] ) [EOL] self . assertEqual ( len ( A . comments ) , [number] ) [EOL] comments = sorted ( A . comments , key = lambda x : x [ [string] ] ) [EOL] self . assertEqual ( comments [ [number] ] , { [string] : [string] , [string] : [number] , [string] : [string] [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] } } ) [EOL] self . assertEqual ( comments [ [number] ] , { [string] : [string] , [string] : [number] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] } } ) [EOL] self . assertEqual ( comments [ [number] ] , { [string] : [string] , [string] : [number] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] , [string] : [string] } } ) [EOL] self . assertIn ( [string] , A . messages [ [number] ] , [string] ) [EOL] self . assertIn ( [string] , A . messages [ [number] ] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.bool]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.bool]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import os [EOL] [EOL] import configparser [EOL] [EOL] from tests . base import BaseTestCase [EOL] from tests . base import FIXTURE_DIR [EOL] from zuul . lib . config import get_default [EOL] [EOL] [EOL] class TestDefaultConfigValue ( BaseTestCase ) : [EOL] config_file = [string] [EOL] [EOL] def setUp ( self ) : [EOL] super ( TestDefaultConfigValue , self ) . setUp ( ) [EOL] self . config = configparser . ConfigParser ( ) [EOL] self . config . read ( os . path . join ( FIXTURE_DIR , self . config_file ) ) [EOL] [EOL] def test_default_config_value ( self ) : [EOL] default_value = get_default ( self . config , [string] , [string] , default = [number] ) [EOL] self . assertEqual ( [number] , default_value ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] from tests . base import ( ZuulTestCase , ) [EOL] [EOL] [EOL] class TestGerritToGithubCRD ( ZuulTestCase ) : [EOL] config_file = [string] [EOL] tenant_config_file = [string] [EOL] [EOL] def test_crd_gate ( self ) : [EOL] [docstring] [EOL] A = self . fake_gerrit . addFakeChange ( [string] , [string] , [string] ) [EOL] B = self . fake_github . openFakePullRequest ( [string] , [string] , [string] ) [EOL] [EOL] A . addApproval ( [string] , [number] ) [EOL] [EOL] AM2 = self . fake_gerrit . addFakeChange ( [string] , [string] , [string] ) [EOL] AM1 = self . fake_gerrit . addFakeChange ( [string] , [string] , [string] ) [EOL] AM2 . setMerged ( ) [EOL] AM1 . setMerged ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] A . setDependsOn ( AM1 , [number] ) [EOL] AM1 . setDependsOn ( AM2 , [number] ) [EOL] [EOL] A . data [ [string] ] = [string] % ( A . subject , B . url ) [EOL] [EOL] self . fake_gerrit . addEvent ( A . addApproval ( [string] , [number] ) ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] self . assertEqual ( A . data [ [string] ] , [string] ) [EOL] self . assertFalse ( B . is_merged ) [EOL] [EOL] for connection in self . connections . connections . values ( ) : [EOL] connection . maintainCache ( [ ] ) [EOL] [EOL] self . executor_server . hold_jobs_in_build = True [EOL] B . addLabel ( [string] ) [EOL] self . fake_gerrit . addEvent ( A . addApproval ( [string] , [number] ) ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] self . executor_server . release ( [string] ) [EOL] self . waitUntilSettled ( ) [EOL] self . executor_server . release ( [string] ) [EOL] self . waitUntilSettled ( ) [EOL] self . executor_server . hold_jobs_in_build = False [EOL] self . executor_server . release ( ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] self . assertEqual ( AM2 . queried , [number] ) [EOL] self . assertEqual ( A . data [ [string] ] , [string] ) [EOL] self . assertTrue ( B . is_merged ) [EOL] self . assertEqual ( A . reported , [number] ) [EOL] self . assertEqual ( len ( B . comments ) , [number] ) [EOL] [EOL] changes = self . getJobFromHistory ( [string] , [string] ) . changes [EOL] self . assertEqual ( changes , [string] % B . head_sha ) [EOL] [EOL] def test_crd_branch ( self ) : [EOL] [docstring] [EOL] [EOL] self . create_branch ( [string] , [string] ) [EOL] A = self . fake_gerrit . addFakeChange ( [string] , [string] , [string] ) [EOL] B = self . fake_github . openFakePullRequest ( [string] , [string] , [string] ) [EOL] C1 = self . fake_github . openFakePullRequest ( [string] , [string] , [string] ) [EOL] [EOL] A . addApproval ( [string] , [number] ) [EOL] [EOL] [comment] [EOL] A . data [ [string] ] = [string] % ( A . subject , B . url , C1 . url ) [EOL] [EOL] self . executor_server . hold_jobs_in_build = True [EOL] B . addLabel ( [string] ) [EOL] C1 . addLabel ( [string] ) [EOL] self . fake_gerrit . addEvent ( A . addApproval ( [string] , [number] ) ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] self . executor_server . release ( [string] ) [EOL] self . waitUntilSettled ( ) [EOL] self . executor_server . release ( [string] ) [EOL] self . waitUntilSettled ( ) [EOL] self . executor_server . release ( [string] ) [EOL] self . waitUntilSettled ( ) [EOL] self . executor_server . hold_jobs_in_build = False [EOL] self . executor_server . release ( ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] self . assertEqual ( A . data [ [string] ] , [string] ) [EOL] self . assertTrue ( B . is_merged ) [EOL] self . assertTrue ( C1 . is_merged ) [EOL] self . assertEqual ( A . reported , [number] ) [EOL] self . assertEqual ( len ( B . comments ) , [number] ) [EOL] self . assertEqual ( len ( C1 . comments ) , [number] ) [EOL] [EOL] changes = self . getJobFromHistory ( [string] , [string] ) . changes [EOL] self . assertEqual ( changes , [string] % ( B . head_sha , C1 . head_sha ) ) [EOL] [EOL] def test_crd_gate_reverse ( self ) : [EOL] [docstring] [EOL] A = self . fake_gerrit . addFakeChange ( [string] , [string] , [string] ) [EOL] B = self . fake_github . openFakePullRequest ( [string] , [string] , [string] ) [EOL] A . addApproval ( [string] , [number] ) [EOL] [EOL] [comment] [EOL] [EOL] A . data [ [string] ] = [string] % ( A . subject , B . url ) [EOL] [EOL] self . fake_gerrit . addEvent ( A . addApproval ( [string] , [number] ) ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] self . assertEqual ( A . data [ [string] ] , [string] ) [EOL] self . assertFalse ( B . is_merged ) [EOL] [EOL] self . executor_server . hold_jobs_in_build = True [EOL] A . addApproval ( [string] , [number] ) [EOL] self . fake_github . emitEvent ( B . addLabel ( [string] ) ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] self . executor_server . release ( [string] ) [EOL] self . waitUntilSettled ( ) [EOL] self . executor_server . release ( [string] ) [EOL] self . waitUntilSettled ( ) [EOL] self . executor_server . hold_jobs_in_build = False [EOL] self . executor_server . release ( ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] self . assertEqual ( A . data [ [string] ] , [string] ) [EOL] self . assertTrue ( B . is_merged ) [EOL] self . assertEqual ( A . reported , [number] ) [EOL] self . assertEqual ( len ( B . comments ) , [number] ) [EOL] [EOL] changes = self . getJobFromHistory ( [string] , [string] ) . changes [EOL] self . assertEqual ( changes , [string] % ( B . head_sha , ) ) [EOL] [EOL] def test_crd_cycle ( self ) : [EOL] [docstring] [EOL] A = self . fake_gerrit . addFakeChange ( [string] , [string] , [string] ) [EOL] msg = [string] % ( A . data [ [string] ] , ) [EOL] B = self . fake_github . openFakePullRequest ( [string] , [string] , [string] , body = msg ) [EOL] A . addApproval ( [string] , [number] ) [EOL] B . addLabel ( [string] ) [EOL] [EOL] [comment] [EOL] [EOL] A . data [ [string] ] = [string] % ( A . subject , B . url ) [EOL] [EOL] self . fake_gerrit . addEvent ( A . addApproval ( [string] , [number] ) ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] self . assertEqual ( A . reported , [number] ) [EOL] self . assertEqual ( len ( B . comments ) , [number] ) [EOL] self . assertEqual ( A . data [ [string] ] , [string] ) [EOL] self . assertFalse ( B . is_merged ) [EOL] [EOL] def test_crd_gate_unknown ( self ) : [EOL] [docstring] [EOL] self . init_repo ( [string] , tag = [string] ) [EOL] A = self . fake_gerrit . addFakeChange ( [string] , [string] , [string] ) [EOL] B = self . fake_github . openFakePullRequest ( [string] , [string] , [string] ) [EOL] A . addApproval ( [string] , [number] ) [EOL] [EOL] [comment] [EOL] A . data [ [string] ] = [string] % ( A . subject , B . url ) [EOL] [EOL] event = B . addLabel ( [string] ) [EOL] self . fake_gerrit . addEvent ( A . addApproval ( [string] , [number] ) ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] self . assertEqual ( A . data [ [string] ] , [string] ) [EOL] self . assertFalse ( B . is_merged ) [EOL] self . assertEqual ( A . reported , [number] ) [EOL] self . assertEqual ( len ( B . comments ) , [number] ) [EOL] self . assertEqual ( len ( self . history ) , [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] B . setMerged ( [string] ) [EOL] self . fake_github . emitEvent ( event ) [EOL] self . waitUntilSettled ( ) [EOL] self . assertEqual ( len ( self . history ) , [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] self . fake_gerrit . addEvent ( A . addApproval ( [string] , [number] ) ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] self . assertEqual ( A . data [ [string] ] , [string] ) [EOL] self . assertEqual ( A . reported , [number] ) [EOL] self . assertTrue ( B . is_merged ) [EOL] self . assertEqual ( len ( B . comments ) , [number] ) [EOL] [EOL] def test_crd_check ( self ) : [EOL] [docstring] [EOL] self . executor_server . hold_jobs_in_build = True [EOL] self . gearman_server . hold_jobs_in_queue = True [EOL] A = self . fake_gerrit . addFakeChange ( [string] , [string] , [string] ) [EOL] B = self . fake_github . openFakePullRequest ( [string] , [string] , [string] ) [EOL] [EOL] [comment] [EOL] A . data [ [string] ] = [string] % ( A . subject , B . url ) [EOL] [EOL] self . fake_gerrit . addEvent ( A . getPatchsetCreatedEvent ( [number] ) ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] self . gearman_server . hold_jobs_in_queue = False [EOL] self . gearman_server . release ( ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] self . executor_server . release ( [string] ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] self . assertTrue ( self . builds [ [number] ] . hasChanges ( A , B ) ) [EOL] [EOL] self . executor_server . hold_jobs_in_build = False [EOL] self . executor_server . release ( ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] self . assertEqual ( A . data [ [string] ] , [string] ) [EOL] self . assertFalse ( B . is_merged ) [EOL] self . assertEqual ( A . reported , [number] ) [EOL] self . assertEqual ( len ( B . comments ) , [number] ) [EOL] [EOL] changes = self . getJobFromHistory ( [string] , [string] ) . changes [EOL] self . assertEqual ( changes , [string] % ( B . head_sha , ) ) [EOL] [EOL] tenant = self . sched . abide . tenants . get ( [string] ) [EOL] self . assertEqual ( len ( tenant . layout . pipelines [ [string] ] . queues ) , [number] ) [EOL] [EOL] def test_crd_check_duplicate ( self ) : [EOL] [docstring] [EOL] self . executor_server . hold_jobs_in_build = True [EOL] A = self . fake_gerrit . addFakeChange ( [string] , [string] , [string] ) [EOL] B = self . fake_github . openFakePullRequest ( [string] , [string] , [string] ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] [comment] [EOL] A . data [ [string] ] = [string] % ( A . subject , B . url ) [EOL] tenant = self . sched . abide . tenants . get ( [string] ) [EOL] check_pipeline = tenant . layout . pipelines [ [string] ] [EOL] [EOL] [comment] [EOL] self . fake_gerrit . addEvent ( A . getPatchsetCreatedEvent ( [number] ) ) [EOL] self . waitUntilSettled ( ) [EOL] self . assertEqual ( len ( check_pipeline . getAllItems ( ) ) , [number] ) [EOL] [EOL] [comment] [EOL] self . fake_gerrit . addEvent ( A . getPatchsetCreatedEvent ( [number] ) ) [EOL] self . waitUntilSettled ( ) [EOL] self . assertEqual ( len ( check_pipeline . getAllItems ( ) ) , [number] ) [EOL] [EOL] [comment] [EOL] self . fake_github . emitEvent ( B . getPullRequestEditedEvent ( ) ) [EOL] self . waitUntilSettled ( ) [EOL] self . assertEqual ( len ( check_pipeline . getAllItems ( ) ) , [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] self . orderedRelease ( ) [EOL] self . executor_server . hold_jobs_in_build = False [EOL] self . executor_server . release ( ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] self . assertEqual ( A . data [ [string] ] , [string] ) [EOL] self . assertFalse ( B . is_merged ) [EOL] self . assertEqual ( A . reported , [number] ) [EOL] self . assertEqual ( len ( B . comments ) , [number] ) [EOL] [EOL] changes = self . getJobFromHistory ( [string] , [string] ) . changes [EOL] self . assertEqual ( changes , [string] % ( B . head_sha , ) ) [EOL] [EOL] changes = self . getJobFromHistory ( [string] , [string] ) . changes [EOL] self . assertEqual ( changes , [string] % ( B . head_sha , ) ) [EOL] self . assertEqual ( len ( tenant . layout . pipelines [ [string] ] . queues ) , [number] ) [EOL] [EOL] self . assertIn ( [string] , A . messages [ [number] ] ) [EOL] [EOL] def _test_crd_check_reconfiguration ( self , project1 , project2 ) : [EOL] [docstring] [EOL] [EOL] self . gearman_server . hold_jobs_in_queue = True [EOL] A = self . fake_gerrit . addFakeChange ( [string] , [string] , [string] ) [EOL] B = self . fake_github . openFakePullRequest ( [string] , [string] , [string] ) [EOL] [EOL] [comment] [EOL] A . data [ [string] ] = [string] % ( A . subject , B . url ) [EOL] [EOL] self . fake_gerrit . addEvent ( A . getPatchsetCreatedEvent ( [number] ) ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] self . sched . reconfigure ( self . config ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] tenant = self . sched . abide . tenants . get ( [string] ) [EOL] self . assertEqual ( len ( tenant . layout . pipelines [ [string] ] . queues ) , [number] ) [EOL] queue = tenant . layout . pipelines [ [string] ] . queues [ [number] ] [EOL] first_item = queue . queue [ [number] ] [EOL] for item in queue . queue : [EOL] self . assertEqual ( item . queue , first_item . queue ) [EOL] self . assertFalse ( first_item . live ) [EOL] self . assertTrue ( queue . queue [ [number] ] . live ) [EOL] [EOL] self . gearman_server . hold_jobs_in_queue = False [EOL] self . gearman_server . release ( ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] self . assertEqual ( A . data [ [string] ] , [string] ) [EOL] self . assertFalse ( B . is_merged ) [EOL] self . assertEqual ( A . reported , [number] ) [EOL] self . assertEqual ( len ( B . comments ) , [number] ) [EOL] [EOL] changes = self . getJobFromHistory ( [string] , [string] ) . changes [EOL] self . assertEqual ( changes , [string] % ( B . head_sha , ) ) [EOL] self . assertEqual ( len ( tenant . layout . pipelines [ [string] ] . queues ) , [number] ) [EOL] [EOL] def test_crd_check_reconfiguration ( self ) : [EOL] self . _test_crd_check_reconfiguration ( [string] , [string] ) [EOL] [EOL] def test_crd_undefined_project ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] self . init_repo ( [string] , tag = [string] ) [EOL] self . _test_crd_check_reconfiguration ( [string] , [string] ) [EOL] [EOL] def test_crd_check_transitive ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] A = self . fake_gerrit . addFakeChange ( [string] , [string] , [string] ) [EOL] C = self . fake_gerrit . addFakeChange ( [string] , [string] , [string] ) [EOL] [comment] [EOL] msg = [string] % ( C . data [ [string] ] , ) [EOL] B = self . fake_github . openFakePullRequest ( [string] , [string] , [string] , body = msg ) [EOL] [EOL] [comment] [EOL] A . data [ [string] ] = [string] % ( A . subject , B . url ) [EOL] [EOL] self . fake_gerrit . addEvent ( A . getPatchsetCreatedEvent ( [number] ) ) [EOL] self . waitUntilSettled ( ) [EOL] self . assertEqual ( self . history [ - [number] ] . changes , [string] % ( B . head_sha , ) ) [EOL] [EOL] self . fake_github . emitEvent ( B . getPullRequestEditedEvent ( ) ) [EOL] self . waitUntilSettled ( ) [EOL] self . assertEqual ( self . history [ - [number] ] . changes , [string] % ( B . head_sha , ) ) [EOL] [EOL] self . fake_gerrit . addEvent ( C . getPatchsetCreatedEvent ( [number] ) ) [EOL] self . waitUntilSettled ( ) [EOL] self . assertEqual ( self . history [ - [number] ] . changes , [string] ) [EOL] [EOL] C . addPatchset ( ) [EOL] self . fake_gerrit . addEvent ( C . getPatchsetCreatedEvent ( [number] ) ) [EOL] self . waitUntilSettled ( ) [EOL] self . assertEqual ( self . history [ - [number] ] . changes , [string] ) [EOL] [EOL] A . addPatchset ( ) [EOL] self . fake_gerrit . addEvent ( A . getPatchsetCreatedEvent ( [number] ) ) [EOL] self . waitUntilSettled ( ) [EOL] self . assertEqual ( self . history [ - [number] ] . changes , [string] % ( B . head_sha , ) ) [EOL] [EOL] def test_crd_check_unknown ( self ) : [EOL] [docstring] [EOL] self . init_repo ( [string] , tag = [string] ) [EOL] A = self . fake_gerrit . addFakeChange ( [string] , [string] , [string] ) [EOL] B = self . fake_github . openFakePullRequest ( [string] , [string] , [string] ) [EOL] [comment] [EOL] A . data [ [string] ] = [string] % ( A . subject , B . url ) [EOL] [EOL] [comment] [EOL] self . fake_github . emitEvent ( B . getPullRequestEditedEvent ( ) ) [EOL] self . fake_gerrit . addEvent ( A . getPatchsetCreatedEvent ( [number] ) ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] self . assertEqual ( A . data [ [string] ] , [string] ) [EOL] self . assertEqual ( A . reported , [number] ) [EOL] self . assertFalse ( B . is_merged ) [EOL] self . assertEqual ( len ( B . comments ) , [number] ) [EOL] [EOL] def test_crd_cycle_join ( self ) : [EOL] [docstring] [EOL] A = self . fake_github . openFakePullRequest ( [string] , [string] , [string] ) [EOL] [EOL] self . fake_github . emitEvent ( A . getPullRequestEditedEvent ( ) ) [EOL] self . waitUntilSettled ( ) [EOL] self . assertEqual ( len ( A . comments ) , [number] ) [EOL] [EOL] [comment] [EOL] B = self . fake_gerrit . addFakeChange ( [string] , [string] , [string] ) [EOL] B . data [ [string] ] = [string] % ( B . subject , A . url ) [EOL] self . fake_gerrit . addEvent ( B . getPatchsetCreatedEvent ( [number] ) ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] [comment] [EOL] self . assertEqual ( B . reported , [number] ) [EOL] [EOL] [comment] [EOL] A . editBody ( [string] % ( B . data [ [string] ] ) ) [EOL] self . fake_github . emitEvent ( A . getPullRequestEditedEvent ( ) ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] [comment] [EOL] self . assertEqual ( len ( A . comments ) , [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] B . addPatchset ( ) [EOL] B . data [ [string] ] = [string] % ( B . subject , ) [EOL] self . fake_github . emitEvent ( A . getPullRequestEditedEvent ( ) ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] [comment] [EOL] self . assertEqual ( len ( A . comments ) , [number] ) [EOL] [EOL] self . fake_gerrit . addEvent ( B . getPatchsetCreatedEvent ( [number] ) ) [EOL] self . waitUntilSettled ( ) [EOL] self . assertEqual ( B . reported , [number] ) [EOL] [EOL] [EOL] class TestGithubToGerritCRD ( ZuulTestCase ) : [EOL] config_file = [string] [EOL] tenant_config_file = [string] [EOL] [EOL] def test_crd_gate ( self ) : [EOL] [docstring] [EOL] A = self . fake_github . openFakePullRequest ( [string] , [string] , [string] ) [EOL] B = self . fake_gerrit . addFakeChange ( [string] , [string] , [string] ) [EOL] [EOL] B . addApproval ( [string] , [number] ) [EOL] [EOL] [comment] [EOL] A . editBody ( [string] % ( B . data [ [string] ] ) ) [EOL] [EOL] event = A . addLabel ( [string] ) [EOL] self . fake_github . emitEvent ( event ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] self . assertFalse ( A . is_merged ) [EOL] self . assertEqual ( B . data [ [string] ] , [string] ) [EOL] [EOL] for connection in self . connections . connections . values ( ) : [EOL] connection . maintainCache ( [ ] ) [EOL] [EOL] self . executor_server . hold_jobs_in_build = True [EOL] B . addApproval ( [string] , [number] ) [EOL] self . fake_github . emitEvent ( event ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] self . executor_server . release ( [string] ) [EOL] self . waitUntilSettled ( ) [EOL] self . executor_server . release ( [string] ) [EOL] self . waitUntilSettled ( ) [EOL] self . executor_server . hold_jobs_in_build = False [EOL] self . executor_server . release ( ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] self . assertTrue ( A . is_merged ) [EOL] self . assertEqual ( B . data [ [string] ] , [string] ) [EOL] self . assertEqual ( len ( A . comments ) , [number] ) [EOL] self . assertEqual ( B . reported , [number] ) [EOL] [EOL] changes = self . getJobFromHistory ( [string] , [string] ) . changes [EOL] self . assertEqual ( changes , [string] % A . head_sha ) [EOL] [EOL] def test_crd_branch ( self ) : [EOL] [docstring] [EOL] [EOL] self . create_branch ( [string] , [string] ) [EOL] A = self . fake_github . openFakePullRequest ( [string] , [string] , [string] ) [EOL] B = self . fake_gerrit . addFakeChange ( [string] , [string] , [string] ) [EOL] C1 = self . fake_gerrit . addFakeChange ( [string] , [string] , [string] ) [EOL] [EOL] B . addApproval ( [string] , [number] ) [EOL] C1 . addApproval ( [string] , [number] ) [EOL] [EOL] [comment] [EOL] A . editBody ( [string] % ( B . data [ [string] ] , C1 . data [ [string] ] ) ) [EOL] [EOL] self . executor_server . hold_jobs_in_build = True [EOL] B . addApproval ( [string] , [number] ) [EOL] C1 . addApproval ( [string] , [number] ) [EOL] self . fake_github . emitEvent ( A . addLabel ( [string] ) ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] self . executor_server . release ( [string] ) [EOL] self . waitUntilSettled ( ) [EOL] self . executor_server . release ( [string] ) [EOL] self . waitUntilSettled ( ) [EOL] self . executor_server . release ( [string] ) [EOL] self . waitUntilSettled ( ) [EOL] self . executor_server . hold_jobs_in_build = False [EOL] self . executor_server . release ( ) [EOL] self . waitUntilSettled ( ) [EOL] self . assertTrue ( A . is_merged ) [EOL] self . assertEqual ( B . data [ [string] ] , [string] ) [EOL] self . assertEqual ( C1 . data [ [string] ] , [string] ) [EOL] self . assertEqual ( len ( A . comments ) , [number] ) [EOL] self . assertEqual ( B . reported , [number] ) [EOL] self . assertEqual ( C1 . reported , [number] ) [EOL] [EOL] changes = self . getJobFromHistory ( [string] , [string] ) . changes [EOL] self . assertEqual ( changes , [string] % ( A . head_sha , ) ) [EOL] [EOL] def test_crd_gate_reverse ( self ) : [EOL] [docstring] [EOL] A = self . fake_github . openFakePullRequest ( [string] , [string] , [string] ) [EOL] B = self . fake_gerrit . addFakeChange ( [string] , [string] , [string] ) [EOL] B . addApproval ( [string] , [number] ) [EOL] [EOL] [comment] [EOL] A . editBody ( [string] % ( B . data [ [string] ] , ) ) [EOL] [EOL] self . fake_github . emitEvent ( A . addLabel ( [string] ) ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] self . assertFalse ( A . is_merged ) [EOL] self . assertEqual ( B . data [ [string] ] , [string] ) [EOL] [EOL] self . executor_server . hold_jobs_in_build = True [EOL] A . addLabel ( [string] ) [EOL] self . fake_gerrit . addEvent ( B . addApproval ( [string] , [number] ) ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] self . executor_server . release ( [string] ) [EOL] self . waitUntilSettled ( ) [EOL] self . executor_server . release ( [string] ) [EOL] self . waitUntilSettled ( ) [EOL] self . executor_server . hold_jobs_in_build = False [EOL] self . executor_server . release ( ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] self . assertTrue ( A . is_merged ) [EOL] self . assertEqual ( B . data [ [string] ] , [string] ) [EOL] self . assertEqual ( len ( A . comments ) , [number] ) [EOL] self . assertEqual ( B . reported , [number] ) [EOL] [EOL] changes = self . getJobFromHistory ( [string] , [string] ) . changes [EOL] self . assertEqual ( changes , [string] % ( A . head_sha , ) ) [EOL] [EOL] def test_crd_cycle ( self ) : [EOL] [docstring] [EOL] A = self . fake_github . openFakePullRequest ( [string] , [string] , [string] ) [EOL] B = self . fake_gerrit . addFakeChange ( [string] , [string] , [string] ) [EOL] B . data [ [string] ] = [string] % ( B . subject , A . url ) [EOL] [EOL] B . addApproval ( [string] , [number] ) [EOL] B . addApproval ( [string] , [number] ) [EOL] [EOL] [comment] [EOL] A . editBody ( [string] % ( B . data [ [string] ] , ) ) [EOL] [EOL] self . fake_github . emitEvent ( A . addLabel ( [string] ) ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] self . assertEqual ( len ( A . comments ) , [number] ) [EOL] self . assertEqual ( B . reported , [number] ) [EOL] self . assertFalse ( A . is_merged ) [EOL] self . assertEqual ( B . data [ [string] ] , [string] ) [EOL] [EOL] def test_crd_gate_unknown ( self ) : [EOL] [docstring] [EOL] self . init_repo ( [string] , tag = [string] ) [EOL] A = self . fake_github . openFakePullRequest ( [string] , [string] , [string] ) [EOL] B = self . fake_gerrit . addFakeChange ( [string] , [string] , [string] ) [EOL] B . addApproval ( [string] , [number] ) [EOL] [EOL] [comment] [EOL] A . editBody ( [string] % ( B . data [ [string] ] , ) ) [EOL] [EOL] B . addApproval ( [string] , [number] ) [EOL] event = A . addLabel ( [string] ) [EOL] self . fake_github . emitEvent ( event ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] self . assertFalse ( A . is_merged ) [EOL] self . assertEqual ( B . data [ [string] ] , [string] ) [EOL] self . assertEqual ( len ( A . comments ) , [number] ) [EOL] self . assertEqual ( B . reported , [number] ) [EOL] self . assertEqual ( len ( self . history ) , [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] B . setMerged ( ) [EOL] self . fake_gerrit . addEvent ( B . addApproval ( [string] , [number] ) ) [EOL] self . waitUntilSettled ( ) [EOL] self . assertEqual ( len ( self . history ) , [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] self . fake_github . emitEvent ( event ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] self . assertTrue ( A . is_merged ) [EOL] self . assertEqual ( len ( A . comments ) , [number] ) [EOL] self . assertEqual ( B . data [ [string] ] , [string] ) [EOL] self . assertEqual ( B . reported , [number] ) [EOL] [EOL] def test_crd_check ( self ) : [EOL] [docstring] [EOL] self . executor_server . hold_jobs_in_build = True [EOL] self . gearman_server . hold_jobs_in_queue = True [EOL] A = self . fake_github . openFakePullRequest ( [string] , [string] , [string] ) [EOL] B = self . fake_gerrit . addFakeChange ( [string] , [string] , [string] ) [EOL] [EOL] [comment] [EOL] A . editBody ( [string] % ( B . data [ [string] ] , ) ) [EOL] [EOL] self . fake_github . emitEvent ( A . getPullRequestEditedEvent ( ) ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] self . gearman_server . hold_jobs_in_queue = False [EOL] self . gearman_server . release ( ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] self . executor_server . release ( [string] ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] self . assertTrue ( self . builds [ [number] ] . hasChanges ( A , B ) ) [EOL] [EOL] self . executor_server . hold_jobs_in_build = False [EOL] self . executor_server . release ( ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] self . assertFalse ( A . is_merged ) [EOL] self . assertEqual ( B . data [ [string] ] , [string] ) [EOL] self . assertEqual ( len ( A . comments ) , [number] ) [EOL] self . assertEqual ( B . reported , [number] ) [EOL] [EOL] changes = self . getJobFromHistory ( [string] , [string] ) . changes [EOL] self . assertEqual ( changes , [string] % ( A . head_sha , ) ) [EOL] [EOL] tenant = self . sched . abide . tenants . get ( [string] ) [EOL] self . assertEqual ( len ( tenant . layout . pipelines [ [string] ] . queues ) , [number] ) [EOL] [EOL] def test_crd_check_duplicate ( self ) : [EOL] [docstring] [EOL] self . executor_server . hold_jobs_in_build = True [EOL] A = self . fake_github . openFakePullRequest ( [string] , [string] , [string] ) [EOL] B = self . fake_gerrit . addFakeChange ( [string] , [string] , [string] ) [EOL] [EOL] [comment] [EOL] A . editBody ( [string] % ( B . data [ [string] ] , ) ) [EOL] tenant = self . sched . abide . tenants . get ( [string] ) [EOL] check_pipeline = tenant . layout . pipelines [ [string] ] [EOL] [EOL] [comment] [EOL] self . fake_github . emitEvent ( A . getPullRequestEditedEvent ( ) ) [EOL] self . waitUntilSettled ( ) [EOL] self . assertEqual ( len ( check_pipeline . getAllItems ( ) ) , [number] ) [EOL] [EOL] [comment] [EOL] self . fake_github . emitEvent ( A . getPullRequestEditedEvent ( ) ) [EOL] self . waitUntilSettled ( ) [EOL] self . assertEqual ( len ( check_pipeline . getAllItems ( ) ) , [number] ) [EOL] [EOL] [comment] [EOL] self . fake_gerrit . addEvent ( B . getPatchsetCreatedEvent ( [number] ) ) [EOL] self . waitUntilSettled ( ) [EOL] self . assertEqual ( len ( check_pipeline . getAllItems ( ) ) , [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] self . orderedRelease ( ) [EOL] self . executor_server . hold_jobs_in_build = False [EOL] self . executor_server . release ( ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] self . assertFalse ( A . is_merged ) [EOL] self . assertEqual ( B . data [ [string] ] , [string] ) [EOL] self . assertEqual ( len ( A . comments ) , [number] ) [EOL] self . assertEqual ( B . reported , [number] ) [EOL] [EOL] changes = self . getJobFromHistory ( [string] , [string] ) . changes [EOL] self . assertEqual ( changes , [string] % ( A . head_sha , ) ) [EOL] [EOL] changes = self . getJobFromHistory ( [string] , [string] ) . changes [EOL] self . assertEqual ( changes , [string] ) [EOL] self . assertEqual ( len ( tenant . layout . pipelines [ [string] ] . queues ) , [number] ) [EOL] [EOL] self . assertIn ( [string] , A . comments [ [number] ] ) [EOL] [EOL] def _test_crd_check_reconfiguration ( self , project1 , project2 ) : [EOL] [docstring] [EOL] [EOL] self . gearman_server . hold_jobs_in_queue = True [EOL] A = self . fake_github . openFakePullRequest ( [string] , [string] , [string] ) [EOL] B = self . fake_gerrit . addFakeChange ( [string] , [string] , [string] ) [EOL] [EOL] [comment] [EOL] A . editBody ( [string] % ( B . data [ [string] ] , ) ) [EOL] [EOL] self . fake_github . emitEvent ( A . getPullRequestEditedEvent ( ) ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] self . sched . reconfigure ( self . config ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] tenant = self . sched . abide . tenants . get ( [string] ) [EOL] self . assertEqual ( len ( tenant . layout . pipelines [ [string] ] . queues ) , [number] ) [EOL] queue = tenant . layout . pipelines [ [string] ] . queues [ [number] ] [EOL] first_item = queue . queue [ [number] ] [EOL] for item in queue . queue : [EOL] self . assertEqual ( item . queue , first_item . queue ) [EOL] self . assertFalse ( first_item . live ) [EOL] self . assertTrue ( queue . queue [ [number] ] . live ) [EOL] [EOL] self . gearman_server . hold_jobs_in_queue = False [EOL] self . gearman_server . release ( ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] self . assertFalse ( A . is_merged ) [EOL] self . assertEqual ( B . data [ [string] ] , [string] ) [EOL] self . assertEqual ( len ( A . comments ) , [number] ) [EOL] self . assertEqual ( B . reported , [number] ) [EOL] [EOL] changes = self . getJobFromHistory ( [string] , [string] ) . changes [EOL] self . assertEqual ( changes , [string] % ( A . head_sha , ) ) [EOL] self . assertEqual ( len ( tenant . layout . pipelines [ [string] ] . queues ) , [number] ) [EOL] [EOL] def test_crd_check_reconfiguration ( self ) : [EOL] self . _test_crd_check_reconfiguration ( [string] , [string] ) [EOL] [EOL] def test_crd_undefined_project ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] self . init_repo ( [string] , tag = [string] ) [EOL] self . _test_crd_check_reconfiguration ( [string] , [string] ) [EOL] [EOL] def test_crd_check_transitive ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] A = self . fake_github . openFakePullRequest ( [string] , [string] , [string] ) [EOL] B = self . fake_gerrit . addFakeChange ( [string] , [string] , [string] ) [EOL] C = self . fake_github . openFakePullRequest ( [string] , [string] , [string] ) [EOL] [EOL] [comment] [EOL] B . data [ [string] ] = [string] % ( B . subject , C . url ) [EOL] [EOL] [comment] [EOL] A . editBody ( [string] % ( B . data [ [string] ] , ) ) [EOL] [EOL] self . fake_github . emitEvent ( A . getPullRequestEditedEvent ( ) ) [EOL] self . waitUntilSettled ( ) [EOL] self . assertEqual ( self . history [ - [number] ] . changes , [string] % ( C . head_sha , A . head_sha ) ) [EOL] [EOL] self . fake_gerrit . addEvent ( B . getPatchsetCreatedEvent ( [number] ) ) [EOL] self . waitUntilSettled ( ) [EOL] self . assertEqual ( self . history [ - [number] ] . changes , [string] % ( C . head_sha , ) ) [EOL] [EOL] self . fake_github . emitEvent ( C . getPullRequestEditedEvent ( ) ) [EOL] self . waitUntilSettled ( ) [EOL] self . assertEqual ( self . history [ - [number] ] . changes , [string] % ( C . head_sha , ) ) [EOL] [EOL] new_c_head = C . head_sha [EOL] C . addCommit ( ) [EOL] old_c_head = C . head_sha [EOL] self . assertNotEqual ( old_c_head , new_c_head ) [EOL] self . fake_github . emitEvent ( C . getPullRequestEditedEvent ( ) ) [EOL] self . waitUntilSettled ( ) [EOL] self . assertEqual ( self . history [ - [number] ] . changes , [string] % ( C . head_sha , ) ) [EOL] [EOL] new_a_head = A . head_sha [EOL] A . addCommit ( ) [EOL] old_a_head = A . head_sha [EOL] self . assertNotEqual ( old_a_head , new_a_head ) [EOL] self . fake_github . emitEvent ( A . getPullRequestEditedEvent ( ) ) [EOL] self . waitUntilSettled ( ) [EOL] self . assertEqual ( self . history [ - [number] ] . changes , [string] % ( C . head_sha , A . head_sha , ) ) [EOL] [EOL] def test_crd_check_unknown ( self ) : [EOL] [docstring] [EOL] self . init_repo ( [string] , tag = [string] ) [EOL] A = self . fake_github . openFakePullRequest ( [string] , [string] , [string] ) [EOL] B = self . fake_gerrit . addFakeChange ( [string] , [string] , [string] ) [EOL] [EOL] [comment] [EOL] A . editBody ( [string] % ( B . data [ [string] ] , ) ) [EOL] [EOL] [comment] [EOL] self . fake_gerrit . addEvent ( B . getPatchsetCreatedEvent ( [number] ) ) [EOL] self . fake_github . emitEvent ( A . getPullRequestEditedEvent ( ) ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] self . assertFalse ( A . is_merged ) [EOL] self . assertEqual ( len ( A . comments ) , [number] ) [EOL] self . assertEqual ( B . data [ [string] ] , [string] ) [EOL] self . assertEqual ( B . reported , [number] ) [EOL] [EOL] def test_crd_cycle_join ( self ) : [EOL] [docstring] [EOL] A = self . fake_gerrit . addFakeChange ( [string] , [string] , [string] ) [EOL] [EOL] self . fake_gerrit . addEvent ( A . getPatchsetCreatedEvent ( [number] ) ) [EOL] self . waitUntilSettled ( ) [EOL] self . assertEqual ( A . reported , [number] ) [EOL] [EOL] [comment] [EOL] B = self . fake_github . openFakePullRequest ( [string] , [string] , [string] ) [EOL] B . editBody ( [string] % ( A . data [ [string] ] , ) ) [EOL] self . fake_github . emitEvent ( B . getPullRequestEditedEvent ( ) ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] [comment] [EOL] self . assertEqual ( len ( B . comments ) , [number] ) [EOL] [EOL] [comment] [EOL] A . data [ [string] ] = [string] % ( A . subject , B . url ) [EOL] self . fake_gerrit . addEvent ( A . getPatchsetCreatedEvent ( [number] ) ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] [comment] [EOL] self . assertEqual ( A . reported , [number] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] B . addCommit ( ) [EOL] B . editBody ( [string] ) [EOL] self . fake_gerrit . addEvent ( A . getPatchsetCreatedEvent ( [number] ) ) [EOL] self . waitUntilSettled ( ) [EOL] [EOL] [comment] [EOL] self . assertEqual ( A . reported , [number] ) [EOL] [EOL] self . fake_github . emitEvent ( B . getPullRequestEditedEvent ( ) ) [EOL] self . waitUntilSettled ( ) [EOL] self . assertEqual ( len ( B . comments ) , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
	0
	0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import builtins [EOL] from typing import Type , Any , Dict [EOL] import zuul [EOL] import typing [EOL] import json [EOL] import logging [EOL] import time [EOL] [EOL] import gear [EOL] [EOL] [EOL] class RPCFailure ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class RPCClient ( object ) : [EOL] log = logging . getLogger ( [string] ) [EOL] [EOL] def __init__ ( self , server , port , ssl_key = None , ssl_cert = None , ssl_ca = None ) : [EOL] self . log . debug ( [string] % ( server , port ) ) [EOL] self . gearman = gear . Client ( ) [EOL] self . gearman . addServer ( server , port , ssl_key , ssl_cert , ssl_ca , keepalive = True , tcp_keepidle = [number] , tcp_keepintvl = [number] , tcp_keepcnt = [number] ) [EOL] self . log . debug ( [string] ) [EOL] self . gearman . waitForServer ( ) [EOL] [EOL] def submitJob ( self , name , data ) : [EOL] self . log . debug ( [string] % ( name , data ) ) [EOL] job = gear . TextJob ( name , json . dumps ( data ) , unique = str ( time . time ( ) ) ) [EOL] self . gearman . submitJob ( job , timeout = [number] ) [EOL] [EOL] self . log . debug ( [string] ) [EOL] while not job . complete : [EOL] time . sleep ( [number] ) [EOL] if job . exception : [EOL] raise RPCFailure ( job . exception ) [EOL] self . log . debug ( [string] % ( not job . failure ) ) [EOL] return job [EOL] [EOL] def autohold ( self , tenant , project , job , change , ref , reason , count , node_hold_expiration = None ) : [EOL] data = { [string] : tenant , [string] : project , [string] : job , [string] : change , [string] : ref , [string] : reason , [string] : count , [string] : node_hold_expiration } [EOL] return not self . submitJob ( [string] , data ) . failure [EOL] [EOL] def autohold_list ( self ) : [EOL] data = { } [EOL] job = self . submitJob ( [string] , data ) [EOL] if job . failure : [EOL] return False [EOL] else : [EOL] return json . loads ( job . data [ [number] ] ) [EOL] [EOL] def enqueue ( self , tenant , pipeline , project , trigger , change ) : [EOL] data = { [string] : tenant , [string] : pipeline , [string] : project , [string] : trigger , [string] : change , } [EOL] return not self . submitJob ( [string] , data ) . failure [EOL] [EOL] def enqueue_ref ( self , tenant , pipeline , project , trigger , ref , oldrev , newrev ) : [EOL] data = { [string] : tenant , [string] : pipeline , [string] : project , [string] : trigger , [string] : ref , [string] : oldrev , [string] : newrev , } [EOL] return not self . submitJob ( [string] , data ) . failure [EOL] [EOL] def dequeue ( self , tenant , pipeline , project , change , ref ) : [EOL] data = { [string] : tenant , [string] : pipeline , [string] : project , [string] : change , [string] : ref , } [EOL] return not self . submitJob ( [string] , data ) . failure [EOL] [EOL] def promote ( self , tenant , pipeline , change_ids ) : [EOL] data = { [string] : tenant , [string] : pipeline , [string] : change_ids , } [EOL] return not self . submitJob ( [string] , data ) . failure [EOL] [EOL] def get_running_jobs ( self ) : [EOL] data = { } [EOL] job = self . submitJob ( [string] , data ) [EOL] if job . failure : [EOL] return False [EOL] else : [EOL] return json . loads ( job . data [ [number] ] ) [EOL] [EOL] def shutdown ( self ) : [EOL] self . gearman . shutdown ( ) [EOL] [EOL] def get_job_log_stream_address ( self , uuid , logfile = [string] ) : [EOL] data = { [string] : uuid , [string] : logfile } [EOL] job = self . submitJob ( [string] , data ) [EOL] if job . failure : [EOL] return False [EOL] else : [EOL] return json . loads ( job . data [ [number] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import json [EOL] [EOL] import pbr . version [EOL] import pkg_resources [EOL] [EOL] version_info = pbr . version . VersionInfo ( [string] ) [EOL] release_string = version_info . release_string ( ) [EOL] [EOL] is_release = None [EOL] git_version = None [EOL] try : [EOL] _metadata = json . loads ( pkg_resources . get_distribution ( [string] ) . get_metadata ( [string] ) ) [EOL] if _metadata : [EOL] is_release = _metadata [ [string] ] [EOL] git_version = _metadata [ [string] ] [EOL] except Exception : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import builtins [EOL] from typing import Union , Dict , Type , Any , Optional [EOL] import requests [EOL] import zuul [EOL] import typing [EOL] import logging [EOL] import requests [EOL] [EOL] from urllib . parse import urlparse [EOL] [EOL] [EOL] class FormAuth ( requests . auth . AuthBase ) : [EOL] log = logging . getLogger ( [string] ) [EOL] [EOL] def __init__ ( self , username , password ) : [EOL] self . username = username [EOL] self . password = password [EOL] [EOL] def _retry_using_form_auth ( self , response , args ) : [EOL] adapter = requests . adapters . HTTPAdapter ( ) [EOL] request = _copy_request ( response . request ) [EOL] [EOL] u = urlparse . urlparse ( response . url ) [EOL] url = urlparse . urlunparse ( [ u . scheme , u . netloc , [string] , None , None , None ] ) [EOL] auth = { [string] : self . username , [string] : self . password } [EOL] request2 = requests . Request ( [string] , url , data = auth ) . prepare ( ) [EOL] response2 = adapter . send ( request2 , ** args ) [EOL] [EOL] if response2 . status_code == [number] : [EOL] self . log . error ( [string] ) [EOL] return response [EOL] [EOL] cookie = response2 . headers . get ( [string] ) [EOL] if cookie is not None : [EOL] request . headers [ [string] ] = cookie [EOL] [EOL] response3 = adapter . send ( request , ** args ) [EOL] return response3 [EOL] [EOL] def _response_hook ( self , response , ** kwargs ) : [EOL] if response . status_code == [number] : [EOL] return self . _retry_using_form_auth ( response , kwargs ) [EOL] return response [EOL] [EOL] def __call__ ( self , request ) : [EOL] request . headers [ [string] ] = [string] [EOL] request . register_hook ( [string] , self . _response_hook ) [EOL] return request [EOL] [EOL] [EOL] def _copy_request ( request ) : [EOL] new_request = requests . PreparedRequest ( ) [EOL] new_request . method = request . method [EOL] new_request . url = request . url [EOL] new_request . body = request . body [EOL] new_request . hooks = request . hooks [EOL] new_request . headers = request . headers . copy ( ) [EOL] return new_request [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.adapters.HTTPAdapter$ 0 0 0 0 0 0 0 0 0 $requests.models.PreparedRequest$ 0 0 0 0 0 $requests.models.PreparedRequest$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.PreparedRequest$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 $requests.models.Response$ 0 $requests.adapters.HTTPAdapter$ 0 0 0 $requests.models.PreparedRequest$ 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $requests.models.PreparedRequest$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 $requests.models.Response$ 0 $requests.adapters.HTTPAdapter$ 0 0 0 $requests.models.PreparedRequest$ 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import builtins [EOL] from typing import Set , Dict , Type , Tuple , Any [EOL] import urllib [EOL] import zuul [EOL] import typing [EOL] import re [EOL] import urllib [EOL] import logging [EOL] import voluptuous as vs [EOL] from urllib . parse import urlparse [EOL] from zuul . source import BaseSource [EOL] from zuul . model import Project [EOL] from zuul . driver . gerrit . gerritmodel import GerritRefFilter [EOL] from zuul . driver . util import scalar_or_list , to_list [EOL] from zuul . lib . dependson import find_dependency_headers [EOL] [EOL] [EOL] class GerritSource ( BaseSource ) : [EOL] name = [string] [EOL] log = logging . getLogger ( [string] ) [EOL] [EOL] def __init__ ( self , driver , connection , config = None ) : [EOL] hostname = connection . canonical_hostname [EOL] super ( GerritSource , self ) . __init__ ( driver , connection , hostname , config ) [EOL] prefix_ui = urlparse ( self . connection . baseurl ) . path [EOL] if prefix_ui : [EOL] prefix_ui = prefix_ui . lstrip ( [string] ) . rstrip ( [string] ) [EOL] prefix_ui += [string] [EOL] [EOL] self . change_re = re . compile ( [string] % prefix_ui ) [EOL] [EOL] def getRefSha ( self , project , ref ) : [EOL] return self . connection . getRefSha ( project , ref ) [EOL] [EOL] def isMerged ( self , change , head = None ) : [EOL] return self . connection . isMerged ( change , head ) [EOL] [EOL] def canMerge ( self , change , allow_needs ) : [EOL] return self . connection . canMerge ( change , allow_needs ) [EOL] [EOL] def postConfig ( self ) : [EOL] pass [EOL] [EOL] def getChange ( self , event , refresh = False ) : [EOL] return self . connection . getChange ( event , refresh ) [EOL] [EOL] def getChangeByURL ( self , url ) : [EOL] try : [EOL] parsed = urllib . parse . urlparse ( url ) [EOL] except ValueError : [EOL] return None [EOL] path = parsed . path [EOL] if parsed . fragment : [EOL] path += [string] + parsed . fragment [EOL] m = self . change_re . match ( path ) [EOL] if not m : [EOL] return None [EOL] try : [EOL] change_no = int ( m . group ( [number] ) ) [EOL] except ValueError : [EOL] return None [EOL] query = [string] % ( change_no , ) [EOL] results = self . connection . simpleQuery ( query ) [EOL] if not results : [EOL] return None [EOL] change = self . connection . _getChange ( results [ [number] ] [ [string] ] , results [ [number] ] [ [string] ] [ [string] ] ) [EOL] return change [EOL] [EOL] def getChangesDependingOn ( self , change , projects , tenant ) : [EOL] changes = [ ] [EOL] if not change . uris : [EOL] return changes [EOL] queries = set ( ) [EOL] for uri in change . uris : [EOL] queries . add ( [string] % uri ) [EOL] query = [string] + [string] . join ( queries ) + [string] [EOL] results = self . connection . simpleQuery ( query ) [EOL] seen = set ( ) [EOL] for result in results : [EOL] for match in find_dependency_headers ( result [ [string] ] ) : [EOL] found = False [EOL] for uri in change . uris : [EOL] if uri in match : [EOL] found = True [EOL] break [EOL] if not found : [EOL] continue [EOL] key = ( str ( result [ [string] ] ) , str ( result [ [string] ] [ [string] ] ) ) [EOL] if key in seen : [EOL] continue [EOL] seen . add ( key ) [EOL] change = self . connection . _getChange ( result [ [string] ] , result [ [string] ] [ [string] ] ) [EOL] changes . append ( change ) [EOL] return changes [EOL] [EOL] def getCachedChanges ( self ) : [EOL] for x in self . connection . _change_cache . values ( ) : [EOL] for y in x . values ( ) : [EOL] yield y [EOL] [EOL] def getProject ( self , name ) : [EOL] p = self . connection . getProject ( name ) [EOL] if not p : [EOL] p = Project ( name , self ) [EOL] self . connection . addProject ( p ) [EOL] return p [EOL] [EOL] def getProjectOpenChanges ( self , project ) : [EOL] return self . connection . getProjectOpenChanges ( project ) [EOL] [EOL] def getProjectBranches ( self , project , tenant ) : [EOL] return self . connection . getProjectBranches ( project , tenant ) [EOL] [EOL] def getGitUrl ( self , project ) : [EOL] return self . connection . getGitUrl ( project ) [EOL] [EOL] def _getGitwebUrl ( self , project , sha = None ) : [EOL] return self . connection . _getGitwebUrl ( project , sha ) [EOL] [EOL] def getRequireFilters ( self , config ) : [EOL] f = GerritRefFilter ( connection_name = self . connection . connection_name , open = config . get ( [string] ) , current_patchset = config . get ( [string] ) , statuses = to_list ( config . get ( [string] ) ) , required_approvals = to_list ( config . get ( [string] ) ) , ) [EOL] return [ f ] [EOL] [EOL] def getRejectFilters ( self , config ) : [EOL] f = GerritRefFilter ( connection_name = self . connection . connection_name , reject_approvals = to_list ( config . get ( [string] ) ) , ) [EOL] return [ f ] [EOL] [EOL] def getRefForChange ( self , change ) : [EOL] partial = change [ - [number] : ] [EOL] return [string] % ( partial , change ) [EOL] [EOL] [EOL] approval = vs . Schema ( { [string] : str , [string] : str , [string] : str , [string] : str , } , extra = vs . ALLOW_EXTRA ) [EOL] [EOL] [EOL] def getRequireSchema ( ) : [EOL] require = { [string] : scalar_or_list ( approval ) , [string] : bool , [string] : bool , [string] : scalar_or_list ( str ) } [EOL] [EOL] return require [EOL] [EOL] [EOL] def getRejectSchema ( ) : [EOL] reject = { [string] : scalar_or_list ( approval ) } [EOL] [EOL] return reject [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $urllib.parse.ParseResult$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $urllib.parse.ParseResult$ 0 $builtins.str$ 0 0 $urllib.parse.ParseResult$ 0 0 0 0 $builtins.str$ 0 0 0 $urllib.parse.ParseResult$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Set[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 $typing.Set[typing.Any]$ 0 0 0 0 $typing.Set[typing.Any]$ 0 0 0 $typing.Tuple[typing.Any,typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zuul.driver.gerrit.gerritmodel.GerritRefFilter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zuul.driver.gerrit.gerritmodel.GerritRefFilter$ 0 0 0 0 0 0 0 0 0 0 0 0 $zuul.driver.gerrit.gerritmodel.GerritRefFilter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zuul.driver.gerrit.gerritmodel.GerritRefFilter$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any , List [EOL] import typing [EOL] import copy [EOL] import re [EOL] import time [EOL] [EOL] from zuul . model import EventFilter , RefFilter [EOL] from zuul . model import Change , TriggerEvent [EOL] from zuul . driver . util import time_to_seconds [EOL] [EOL] [EOL] EMPTY_GIT_REF = [string] * [number] [comment] [EOL] [EOL] [EOL] class GerritChange ( Change ) : [EOL] def __init__ ( self , project ) : [EOL] super ( GerritChange , self ) . __init__ ( project ) [EOL] self . approvals = [ ] [EOL] [EOL] [EOL] class GerritTriggerEvent ( TriggerEvent ) : [EOL] [docstring] [EOL] def __init__ ( self ) : [EOL] super ( GerritTriggerEvent , self ) . __init__ ( ) [EOL] self . approvals = [ ] [EOL] [EOL] def __repr__ ( self ) : [EOL] ret = [string] % ( self . type , self . canonical_project_name ) [EOL] [EOL] if self . branch : [EOL] ret += [string] % self . branch [EOL] if self . change_number : [EOL] ret += [string] % ( self . change_number , self . patch_number ) [EOL] if self . approvals : [EOL] ret += [string] + [string] . join ( [ [string] % ( a [ [string] ] , a [ [string] ] ) for a in self . approvals ] ) [EOL] ret += [string] [EOL] [EOL] return ret [EOL] [EOL] def isPatchsetCreated ( self ) : [EOL] return [string] == self . type [EOL] [EOL] def isChangeAbandoned ( self ) : [EOL] return [string] == self . type [EOL] [EOL] [EOL] class GerritApprovalFilter ( object ) : [EOL] def __init__ ( self , required_approvals = [ ] , reject_approvals = [ ] ) : [EOL] self . _required_approvals = copy . deepcopy ( required_approvals ) [EOL] self . required_approvals = self . _tidy_approvals ( self . _required_approvals ) [EOL] self . _reject_approvals = copy . deepcopy ( reject_approvals ) [EOL] self . reject_approvals = self . _tidy_approvals ( self . _reject_approvals ) [EOL] [EOL] def _tidy_approvals ( self , approvals ) : [EOL] for a in approvals : [EOL] for k , v in a . items ( ) : [EOL] if k == [string] : [EOL] a [ [string] ] = re . compile ( v ) [EOL] elif k == [string] : [EOL] a [ [string] ] = re . compile ( v ) [EOL] elif k == [string] : [EOL] a [ k ] = time_to_seconds ( v ) [EOL] elif k == [string] : [EOL] a [ k ] = time_to_seconds ( v ) [EOL] return approvals [EOL] [EOL] def _match_approval_required_approval ( self , rapproval , approval ) : [EOL] [comment] [EOL] if [string] not in approval : [EOL] return False [EOL] now = time . time ( ) [EOL] by = approval . get ( [string] , { } ) [EOL] for k , v in rapproval . items ( ) : [EOL] if k == [string] : [EOL] if ( not v . search ( by . get ( [string] , [string] ) ) ) : [EOL] return False [EOL] elif k == [string] : [EOL] if ( not v . search ( by . get ( [string] , [string] ) ) ) : [EOL] return False [EOL] elif k == [string] : [EOL] t = now - v [EOL] if ( approval [ [string] ] < t ) : [EOL] return False [EOL] elif k == [string] : [EOL] t = now - v [EOL] if ( approval [ [string] ] >= t ) : [EOL] return False [EOL] else : [EOL] if not isinstance ( v , list ) : [EOL] v = [ v ] [EOL] if ( approval [ [string] ] != k or int ( approval [ [string] ] ) not in v ) : [EOL] return False [EOL] return True [EOL] [EOL] def matchesApprovals ( self , change ) : [EOL] if self . required_approvals or self . reject_approvals : [EOL] if not hasattr ( change , [string] ) : [EOL] [comment] [EOL] return False [EOL] if self . required_approvals and not change . approvals : [EOL] [comment] [EOL] return False [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] return ( self . matchesRequiredApprovals ( change ) and self . matchesNoRejectApprovals ( change ) ) [EOL] [EOL] def matchesRequiredApprovals ( self , change ) : [EOL] [comment] [EOL] for rapproval in self . required_approvals : [EOL] matches_rapproval = False [EOL] for approval in change . approvals : [EOL] if self . _match_approval_required_approval ( rapproval , approval ) : [EOL] [comment] [EOL] [comment] [EOL] matches_rapproval = True [EOL] break [EOL] if not matches_rapproval : [EOL] return False [EOL] return True [EOL] [EOL] def matchesNoRejectApprovals ( self , change ) : [EOL] [comment] [EOL] for rapproval in self . reject_approvals : [EOL] for approval in change . approvals : [EOL] if self . _match_approval_required_approval ( rapproval , approval ) : [EOL] [comment] [EOL] [comment] [EOL] return False [EOL] [comment] [EOL] [comment] [EOL] return True [EOL] [EOL] [EOL] class GerritEventFilter ( EventFilter , GerritApprovalFilter ) : [EOL] def __init__ ( self , trigger , types = [ ] , branches = [ ] , refs = [ ] , event_approvals = { } , comments = [ ] , emails = [ ] , usernames = [ ] , required_approvals = [ ] , reject_approvals = [ ] , ignore_deletes = True ) : [EOL] [EOL] EventFilter . __init__ ( self , trigger ) [EOL] [EOL] GerritApprovalFilter . __init__ ( self , required_approvals = required_approvals , reject_approvals = reject_approvals ) [EOL] [EOL] self . _types = types [EOL] self . _branches = branches [EOL] self . _refs = refs [EOL] self . _comments = comments [EOL] self . _emails = emails [EOL] self . _usernames = usernames [EOL] self . types = [ re . compile ( x ) for x in types ] [EOL] self . branches = [ re . compile ( x ) for x in branches ] [EOL] self . refs = [ re . compile ( x ) for x in refs ] [EOL] self . comments = [ re . compile ( x ) for x in comments ] [EOL] self . emails = [ re . compile ( x ) for x in emails ] [EOL] self . usernames = [ re . compile ( x ) for x in usernames ] [EOL] self . event_approvals = event_approvals [EOL] self . ignore_deletes = ignore_deletes [EOL] [EOL] def __repr__ ( self ) : [EOL] ret = [string] [EOL] [EOL] if self . _types : [EOL] ret += [string] % [string] . join ( self . _types ) [EOL] if self . _branches : [EOL] ret += [string] % [string] . join ( self . _branches ) [EOL] if self . _refs : [EOL] ret += [string] % [string] . join ( self . _refs ) [EOL] if self . ignore_deletes : [EOL] ret += [string] % self . ignore_deletes [EOL] if self . event_approvals : [EOL] ret += [string] % [string] . join ( [ [string] % a for a in self . event_approvals . items ( ) ] ) [EOL] if self . required_approvals : [EOL] ret += [string] % [string] . join ( [ [string] % a for a in self . _required_approvals ] ) [EOL] if self . reject_approvals : [EOL] ret += [string] % [string] . join ( [ [string] % a for a in self . _reject_approvals ] ) [EOL] if self . _comments : [EOL] ret += [string] % [string] . join ( self . _comments ) [EOL] if self . _emails : [EOL] ret += [string] % [string] . join ( self . _emails ) [EOL] if self . _usernames : [EOL] ret += [string] % [string] . join ( self . _usernames ) [EOL] ret += [string] [EOL] [EOL] return ret [EOL] [EOL] def matches ( self , event , change ) : [EOL] [comment] [EOL] matches_type = False [EOL] for etype in self . types : [EOL] if etype . match ( event . type ) : [EOL] matches_type = True [EOL] if self . types and not matches_type : [EOL] return False [EOL] [EOL] [comment] [EOL] matches_branch = False [EOL] for branch in self . branches : [EOL] if branch . match ( event . branch ) : [EOL] matches_branch = True [EOL] if self . branches and not matches_branch : [EOL] return False [EOL] [EOL] [comment] [EOL] matches_ref = False [EOL] if event . ref is not None : [EOL] for ref in self . refs : [EOL] if ref . match ( event . ref ) : [EOL] matches_ref = True [EOL] if self . refs and not matches_ref : [EOL] return False [EOL] if self . ignore_deletes and event . newrev == EMPTY_GIT_REF : [EOL] [comment] [EOL] [comment] [EOL] return False [EOL] [EOL] [comment] [EOL] matches_comment_re = False [EOL] for comment_re in self . comments : [EOL] if ( event . comment is not None and comment_re . search ( event . comment ) ) : [EOL] matches_comment_re = True [EOL] if self . comments and not matches_comment_re : [EOL] return False [EOL] [EOL] [comment] [EOL] [comment] [EOL] if event . account is not None : [EOL] account_email = event . account . get ( [string] ) [EOL] [comment] [EOL] matches_email_re = False [EOL] for email_re in self . emails : [EOL] if ( account_email is not None and email_re . search ( account_email ) ) : [EOL] matches_email_re = True [EOL] if self . emails and not matches_email_re : [EOL] return False [EOL] [EOL] [comment] [EOL] account_username = event . account . get ( [string] ) [EOL] matches_username_re = False [EOL] for username_re in self . usernames : [EOL] if ( account_username is not None and username_re . search ( account_username ) ) : [EOL] matches_username_re = True [EOL] if self . usernames and not matches_username_re : [EOL] return False [EOL] [EOL] [comment] [EOL] for category , value in self . event_approvals . items ( ) : [EOL] matches_approval = False [EOL] for eapp in event . approvals : [EOL] if ( eapp [ [string] ] == category and int ( eapp [ [string] ] ) == int ( value ) ) : [EOL] matches_approval = True [EOL] if not matches_approval : [EOL] return False [EOL] [EOL] [comment] [EOL] if not self . matchesApprovals ( change ) : [EOL] return False [EOL] [EOL] return True [EOL] [EOL] [EOL] class GerritRefFilter ( RefFilter , GerritApprovalFilter ) : [EOL] def __init__ ( self , connection_name , open = None , current_patchset = None , statuses = [ ] , required_approvals = [ ] , reject_approvals = [ ] ) : [EOL] RefFilter . __init__ ( self , connection_name ) [EOL] [EOL] GerritApprovalFilter . __init__ ( self , required_approvals = required_approvals , reject_approvals = reject_approvals ) [EOL] [EOL] self . open = open [EOL] self . current_patchset = current_patchset [EOL] self . statuses = statuses [EOL] [EOL] def __repr__ ( self ) : [EOL] ret = [string] [EOL] [EOL] ret += [string] % self . connection_name [EOL] if self . open is not None : [EOL] ret += [string] % self . open [EOL] if self . current_patchset is not None : [EOL] ret += [string] % self . current_patchset [EOL] if self . statuses : [EOL] ret += [string] % [string] . join ( self . statuses ) [EOL] if self . required_approvals : [EOL] ret += ( [string] % str ( self . required_approvals ) ) [EOL] if self . reject_approvals : [EOL] ret += ( [string] % str ( self . reject_approvals ) ) [EOL] ret += [string] [EOL] [EOL] return ret [EOL] [EOL] def matches ( self , change ) : [EOL] if self . open is not None : [EOL] [comment] [EOL] [comment] [EOL] if hasattr ( change , [string] ) : [EOL] if self . open != change . open : [EOL] return False [EOL] else : [EOL] return False [EOL] [EOL] if self . current_patchset is not None : [EOL] [comment] [EOL] [comment] [EOL] if hasattr ( change , [string] ) : [EOL] if self . current_patchset != change . is_current_patchset : [EOL] return False [EOL] else : [EOL] return False [EOL] [EOL] if self . statuses : [EOL] if change . status not in self . statuses : [EOL] return False [EOL] [EOL] [comment] [EOL] if not self . matchesApprovals ( change ) : [EOL] return False [EOL] [EOL] return True [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Type [EOL] import zuul [EOL] import typing [EOL] import logging [EOL] import psutil [EOL] [EOL] from zuul . driver import ( Driver , WrapperInterface ) [EOL] from zuul . execution_context import BaseExecutionContext [EOL] [EOL] [EOL] class NullExecutionContext ( BaseExecutionContext ) : [EOL] log = logging . getLogger ( [string] ) [EOL] [EOL] def getPopen ( self , ** kwargs ) : [EOL] return psutil . Popen [EOL] [EOL] [EOL] class NullwrapDriver ( Driver , WrapperInterface ) : [EOL] name = [string] [EOL] log = logging . getLogger ( [string] ) [EOL] [EOL] def getExecutionContext ( self , ro_paths = None , rw_paths = None , secrets = None ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if secrets : [EOL] raise NotImplementedError ( [string] [string] ) [EOL] return NullExecutionContext ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import builtins [EOL] from typing import Type , Any , Dict [EOL] import zuul [EOL] import typing [EOL] import logging [EOL] import time [EOL] import voluptuous as v [EOL] [EOL] from zuul . reporter import BaseReporter [EOL] [EOL] [EOL] class MQTTReporter ( BaseReporter ) : [EOL] [docstring] [EOL] [EOL] name = [string] [EOL] log = logging . getLogger ( [string] ) [EOL] [EOL] def report ( self , item ) : [EOL] self . log . debug ( [string] % ( item . change , self . config ) ) [EOL] message = { [string] : time . time ( ) , [string] : self . _action , [string] : item . pipeline . tenant . name , [string] : item . current_build_set . ref , [string] : item . pipeline . name , [string] : item . change . project . name , [string] : getattr ( item . change , [string] , [string] ) , [string] : item . change . url , [string] : getattr ( item . change , [string] , [string] ) , [string] : getattr ( item . change , [string] , [string] ) , [string] : getattr ( item . change , [string] , [string] ) , [string] : self . _formatItemReport ( item , with_jobs = False ) , [string] : item . enqueue_time , [string] : { [string] : item . current_build_set . uuid , [string] : [ ] } , } [EOL] for job in item . getJobs ( ) : [EOL] job_informations = { [string] : job . name , [string] : job . voting , } [EOL] build = item . current_build_set . getBuild ( job . name ) [EOL] if build : [EOL] [comment] [EOL] ( result , url ) = item . formatJobResult ( job ) [EOL] job_informations . update ( { [string] : build . uuid , [string] : build . start_time , [string] : build . end_time , [string] : build . execute_time , [string] : url , [string] : result , } ) [EOL] message [ [string] ] [ [string] ] . append ( job_informations ) [EOL] topic = None [EOL] try : [EOL] topic = self . config [ [string] ] . format ( tenant = item . pipeline . tenant . name , pipeline = item . pipeline . name , project = item . change . project . name , branch = getattr ( item . change , [string] , None ) , change = getattr ( item . change , [string] , None ) , patchset = getattr ( item . change , [string] , None ) , ref = getattr ( item . change , [string] , None ) ) [EOL] except Exception : [EOL] self . log . exception ( [string] % self . config [ [string] ] ) [EOL] if topic is not None : [EOL] self . connection . publish ( topic , message , qos = self . config . get ( [string] , [number] ) ) [EOL] [EOL] [EOL] def topicValue ( value ) : [EOL] if not isinstance ( value , str ) : [EOL] raise v . Invalid ( [string] ) [EOL] try : [EOL] value . format ( tenant = [string] , pipeline = [string] , project = [string] , branch = [string] , change = [string] , patchset = [string] , ref = [string] ) [EOL] except KeyError as e : [EOL] raise v . Invalid ( [string] % str ( e ) ) [EOL] return value [EOL] [EOL] [EOL] def qosValue ( value ) : [EOL] if not isinstance ( value , int ) : [EOL] raise v . Invalid ( [string] ) [EOL] if value not in ( [number] , [number] , [number] ) : [EOL] raise v . Invalid ( [string] ) [EOL] return value [EOL] [EOL] [EOL] def getSchema ( ) : [EOL] return v . Schema ( { v . Required ( [string] ) : topicValue , [string] : qosValue } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import builtins [EOL] from typing import Type , Any , Dict [EOL] import zuul [EOL] import typing [EOL] import logging [EOL] [EOL] import alembic [EOL] import alembic . command [EOL] import alembic . config [EOL] import sqlalchemy as sa [EOL] from sqlalchemy . ext . declarative import declarative_base [EOL] from sqlalchemy import orm [EOL] import sqlalchemy . pool [EOL] [EOL] from zuul . connection import BaseConnection [EOL] [EOL] BUILDSET_TABLE = [string] [EOL] BUILD_TABLE = [string] [EOL] ARTIFACT_TABLE = [string] [EOL] PROVIDES_TABLE = [string] [EOL] [EOL] [EOL] class DatabaseSession ( object ) : [EOL] [EOL] log = logging . getLogger ( [string] ) [EOL] [EOL] def __init__ ( self , connection ) : [EOL] self . connection = connection [EOL] self . session = connection . session [EOL] [EOL] def __enter__ ( self ) : [EOL] return self [EOL] [EOL] def __exit__ ( self , etype , value , tb ) : [EOL] if etype : [EOL] self . session ( ) . rollback ( ) [EOL] else : [EOL] self . session ( ) . commit ( ) [EOL] self . session ( ) . close ( ) [EOL] self . session = None [EOL] [EOL] def listFilter ( self , query , column , value ) : [EOL] if value is None : [EOL] return query [EOL] if isinstance ( value , list ) : [EOL] return query . filter ( column . in_ ( value ) ) [EOL] return query . filter ( column == value ) [EOL] [EOL] def getBuilds ( self , tenant = None , project = None , pipeline = None , change = None , branch = None , patchset = None , ref = None , newrev = None , uuid = None , job_name = None , voting = None , node_name = None , result = None , provides = None , limit = [number] , offset = [number] ) : [EOL] [EOL] build_table = self . connection . zuul_build_table [EOL] buildset_table = self . connection . zuul_buildset_table [EOL] provides_table = self . connection . zuul_provides_table [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] q = self . session ( ) . query ( self . connection . buildModel ) . join ( self . connection . buildSetModel ) . outerjoin ( self . connection . providesModel ) . options ( orm . contains_eager ( self . connection . buildModel . buildset ) , orm . selectinload ( self . connection . buildModel . provides ) , orm . selectinload ( self . connection . buildModel . artifacts ) ) . with_hint ( build_table , [string] , [string] ) [EOL] [EOL] q = self . listFilter ( q , buildset_table . c . tenant , tenant ) [EOL] q = self . listFilter ( q , buildset_table . c . project , project ) [EOL] q = self . listFilter ( q , buildset_table . c . pipeline , pipeline ) [EOL] q = self . listFilter ( q , buildset_table . c . change , change ) [EOL] q = self . listFilter ( q , buildset_table . c . branch , branch ) [EOL] q = self . listFilter ( q , buildset_table . c . patchset , patchset ) [EOL] q = self . listFilter ( q , buildset_table . c . ref , ref ) [EOL] q = self . listFilter ( q , buildset_table . c . newrev , newrev ) [EOL] q = self . listFilter ( q , build_table . c . uuid , uuid ) [EOL] q = self . listFilter ( q , build_table . c . job_name , job_name ) [EOL] q = self . listFilter ( q , build_table . c . voting , voting ) [EOL] q = self . listFilter ( q , build_table . c . node_name , node_name ) [EOL] q = self . listFilter ( q , build_table . c . result , result ) [EOL] q = self . listFilter ( q , provides_table . c . name , provides ) [EOL] [EOL] q = q . order_by ( build_table . c . id . desc ( ) ) . limit ( limit ) . offset ( offset ) [EOL] [EOL] try : [EOL] return q . all ( ) [EOL] except sqlalchemy . orm . exc . NoResultFound : [EOL] return [ ] [EOL] [EOL] def createBuildSet ( self , * args , ** kw ) : [EOL] bs = self . connection . buildSetModel ( * args , ** kw ) [EOL] self . session ( ) . add ( bs ) [EOL] self . session ( ) . flush ( ) [EOL] return bs [EOL] [EOL] def getBuildsets ( self , tenant = None , project = None , pipeline = None , change = None , branch = None , patchset = None , ref = None , newrev = None , uuid = None , result = None , limit = [number] , offset = [number] ) : [EOL] [EOL] buildset_table = self . connection . zuul_buildset_table [EOL] [EOL] q = self . session ( ) . query ( self . connection . buildSetModel ) . with_hint ( buildset_table , [string] , [string] ) [EOL] [EOL] q = self . listFilter ( q , buildset_table . c . tenant , tenant ) [EOL] q = self . listFilter ( q , buildset_table . c . project , project ) [EOL] q = self . listFilter ( q , buildset_table . c . pipeline , pipeline ) [EOL] q = self . listFilter ( q , buildset_table . c . change , change ) [EOL] q = self . listFilter ( q , buildset_table . c . branch , branch ) [EOL] q = self . listFilter ( q , buildset_table . c . patchset , patchset ) [EOL] q = self . listFilter ( q , buildset_table . c . ref , ref ) [EOL] q = self . listFilter ( q , buildset_table . c . newrev , newrev ) [EOL] q = self . listFilter ( q , buildset_table . c . uuid , uuid ) [EOL] q = self . listFilter ( q , buildset_table . c . result , result ) [EOL] [EOL] q = q . order_by ( buildset_table . c . id . desc ( ) ) . limit ( limit ) . offset ( offset ) [EOL] [EOL] try : [EOL] return q . all ( ) [EOL] except sqlalchemy . orm . exc . NoResultFound : [EOL] return [ ] [EOL] [EOL] def getBuildset ( self , tenant , uuid ) : [EOL] [docstring] [EOL] [EOL] buildset_table = self . connection . zuul_buildset_table [EOL] [EOL] q = self . session ( ) . query ( self . connection . buildSetModel ) . options ( orm . joinedload ( self . connection . buildSetModel . builds ) . subqueryload ( self . connection . buildModel . artifacts ) ) . options ( orm . joinedload ( self . connection . buildSetModel . builds ) . subqueryload ( self . connection . buildModel . provides ) ) . with_hint ( buildset_table , [string] , [string] ) [EOL] [EOL] q = self . listFilter ( q , buildset_table . c . tenant , tenant ) [EOL] q = self . listFilter ( q , buildset_table . c . uuid , uuid ) [EOL] [EOL] try : [EOL] return q . one ( ) [EOL] except sqlalchemy . orm . exc . NoResultFound : [EOL] return None [EOL] except sqlalchemy . orm . exc . MultipleResultsFound : [EOL] self . log . error ( [string] , uuid ) [EOL] return None [EOL] [EOL] [EOL] class SQLConnection ( BaseConnection ) : [EOL] driver_name = [string] [EOL] log = logging . getLogger ( [string] ) [EOL] [EOL] def __init__ ( self , driver , connection_name , connection_config ) : [EOL] [EOL] super ( SQLConnection , self ) . __init__ ( driver , connection_name , connection_config ) [EOL] [EOL] self . dburi = None [EOL] self . engine = None [EOL] self . connection = None [EOL] self . tables_established = False [EOL] self . table_prefix = self . connection_config . get ( [string] , [string] ) [EOL] [EOL] try : [EOL] self . dburi = self . connection_config . get ( [string] ) [EOL] self . _setup_models ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] self . engine = sa . create_engine ( self . dburi , poolclass = sqlalchemy . pool . QueuePool , pool_recycle = self . connection_config . get ( [string] , [number] ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] self . session_factory = orm . sessionmaker ( bind = self . engine , expire_on_commit = False , autoflush = False ) [EOL] self . session = orm . scoped_session ( self . session_factory ) [EOL] [EOL] except sa . exc . NoSuchModuleError : [EOL] self . log . exception ( [string] [string] % connection_name ) [EOL] except sa . exc . OperationalError : [EOL] self . log . exception ( [string] [string] % self ) [EOL] [EOL] def getSession ( self ) : [EOL] return DatabaseSession ( self ) [EOL] [EOL] def _migrate ( self ) : [EOL] [docstring] [EOL] with self . engine . begin ( ) as conn : [EOL] context = alembic . migration . MigrationContext . configure ( conn ) [EOL] current_rev = context . get_current_revision ( ) [EOL] self . log . debug ( [string] % current_rev ) [EOL] [EOL] config = alembic . config . Config ( ) [EOL] config . set_main_option ( [string] , [string] ) [EOL] config . set_main_option ( [string] , self . connection_config . get ( [string] ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] tag = { [string] : self . table_prefix } [EOL] alembic . command . upgrade ( config , [string] , tag = tag ) [EOL] [EOL] def onLoad ( self ) : [EOL] try : [EOL] self . _migrate ( ) [EOL] self . tables_established = True [EOL] except sa . exc . NoSuchModuleError : [EOL] self . log . exception ( [string] [string] % self . connection_name ) [EOL] except sa . exc . OperationalError : [EOL] self . log . exception ( [string] [string] % self ) [EOL] [EOL] def _setup_models ( self ) : [EOL] Base = declarative_base ( metadata = sa . MetaData ( ) ) [EOL] [EOL] class BuildSetModel ( Base ) : [EOL] __tablename__ = self . table_prefix + BUILDSET_TABLE [EOL] id = sa . Column ( sa . Integer , primary_key = True ) [EOL] uuid = sa . Column ( sa . String ( [number] ) ) [EOL] zuul_ref = sa . Column ( sa . String ( [number] ) ) [EOL] pipeline = sa . Column ( sa . String ( [number] ) ) [EOL] project = sa . Column ( sa . String ( [number] ) ) [EOL] branch = sa . Column ( sa . String ( [number] ) ) [EOL] change = sa . Column ( sa . Integer , nullable = True ) [EOL] patchset = sa . Column ( sa . String ( [number] ) , nullable = True ) [EOL] ref = sa . Column ( sa . String ( [number] ) ) [EOL] oldrev = sa . Column ( sa . String ( [number] ) ) [EOL] newrev = sa . Column ( sa . String ( [number] ) ) [EOL] ref_url = sa . Column ( sa . String ( [number] ) ) [EOL] result = sa . Column ( sa . String ( [number] ) ) [EOL] message = sa . Column ( sa . TEXT ( ) ) [EOL] tenant = sa . Column ( sa . String ( [number] ) ) [EOL] [EOL] def createBuild ( self , * args , ** kw ) : [EOL] session = orm . session . Session . object_session ( self ) [EOL] b = BuildModel ( * args , ** kw ) [EOL] b . buildset_id = self . id [EOL] self . builds . append ( b ) [EOL] session . add ( b ) [EOL] session . flush ( ) [EOL] return b [EOL] [EOL] class BuildModel ( Base ) : [EOL] __tablename__ = self . table_prefix + BUILD_TABLE [EOL] id = sa . Column ( sa . Integer , primary_key = True ) [EOL] buildset_id = sa . Column ( sa . String , sa . ForeignKey ( self . table_prefix + BUILDSET_TABLE + [string] ) ) [EOL] uuid = sa . Column ( sa . String ( [number] ) ) [EOL] job_name = sa . Column ( sa . String ( [number] ) ) [EOL] result = sa . Column ( sa . String ( [number] ) ) [EOL] start_time = sa . Column ( sa . DateTime ) [EOL] end_time = sa . Column ( sa . DateTime ) [EOL] voting = sa . Column ( sa . Boolean ) [EOL] log_url = sa . Column ( sa . String ( [number] ) ) [EOL] node_name = sa . Column ( sa . String ( [number] ) ) [EOL] buildset = orm . relationship ( BuildSetModel , backref = [string] ) [EOL] [EOL] def createArtifact ( self , * args , ** kw ) : [EOL] session = orm . session . Session . object_session ( self ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if [string] in kw : [EOL] kw [ [string] ] = kw [ [string] ] [EOL] del kw [ [string] ] [EOL] a = ArtifactModel ( * args , ** kw ) [EOL] a . build_id = self . id [EOL] self . artifacts . append ( a ) [EOL] session . add ( a ) [EOL] session . flush ( ) [EOL] return a [EOL] [EOL] def createProvides ( self , * args , ** kw ) : [EOL] session = orm . session . Session . object_session ( self ) [EOL] p = ProvidesModel ( * args , ** kw ) [EOL] p . build_id = self . id [EOL] self . provides . append ( p ) [EOL] session . add ( p ) [EOL] session . flush ( ) [EOL] return p [EOL] [EOL] class ArtifactModel ( Base ) : [EOL] __tablename__ = self . table_prefix + ARTIFACT_TABLE [EOL] id = sa . Column ( sa . Integer , primary_key = True ) [EOL] build_id = sa . Column ( sa . Integer , sa . ForeignKey ( self . table_prefix + BUILD_TABLE + [string] ) ) [EOL] name = sa . Column ( sa . String ( [number] ) ) [EOL] url = sa . Column ( sa . TEXT ( ) ) [EOL] meta = sa . Column ( [string] , sa . TEXT ( ) ) [EOL] build = orm . relationship ( BuildModel , backref = [string] ) [EOL] [EOL] class ProvidesModel ( Base ) : [EOL] __tablename__ = self . table_prefix + PROVIDES_TABLE [EOL] id = sa . Column ( sa . Integer , primary_key = True ) [EOL] build_id = sa . Column ( sa . Integer , sa . ForeignKey ( self . table_prefix + BUILD_TABLE + [string] ) ) [EOL] name = sa . Column ( sa . String ( [number] ) ) [EOL] build = orm . relationship ( BuildModel , backref = [string] ) [EOL] [EOL] self . providesModel = ProvidesModel [EOL] self . zuul_provides_table = self . providesModel . __table__ [EOL] [EOL] self . artifactModel = ArtifactModel [EOL] self . zuul_artifact_table = self . artifactModel . __table__ [EOL] [EOL] self . buildModel = BuildModel [EOL] self . zuul_build_table = self . buildModel . __table__ [EOL] [EOL] self . buildSetModel = BuildSetModel [EOL] self . zuul_buildset_table = self . buildSetModel . __table__ [EOL] [EOL] def onStop ( self ) : [EOL] self . log . debug ( [string] % self . connection_name ) [EOL] self . engine . dispose ( ) [EOL] [EOL] def getBuilds ( self , * args , ** kw ) : [EOL] [docstring] [EOL] with self . getSession ( ) as db : [EOL] return db . getBuilds ( * args , ** kw ) [EOL] [EOL] def getBuildsets ( self , * args , ** kw ) : [EOL] [docstring] [EOL] with self . getSession ( ) as db : [EOL] return db . getBuildsets ( * args , ** kw ) [EOL] [EOL] def getBuildset ( self , * args , ** kw ) : [EOL] [docstring] [EOL] with self . getSession ( ) as db : [EOL] return db . getBuildset ( * args , ** kw ) [EOL]	builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zuul.driver.sql.sqlconnection.SQLConnection._setup_models.BuildSetModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zuul.driver.sql.sqlconnection.SQLConnection._setup_models.BuildSetModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zuul.driver.sql.sqlconnection.SQLConnection._setup_models.BuildSetModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zuul.driver.sql.sqlconnection.SQLConnection._setup_models.BuildSetModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zuul.driver.sql.sqlconnection.SQLConnection._setup_models.BuildSetModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zuul.driver.sql.sqlconnection.SQLConnection._setup_models.BuildSetModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zuul.driver.sql.sqlconnection.SQLConnection._setup_models.BuildSetModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zuul.driver.sql.sqlconnection.SQLConnection._setup_models.BuildSetModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zuul.driver.sql.sqlconnection.SQLConnection._setup_models.BuildSetModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zuul.driver.sql.sqlconnection.SQLConnection._setup_models.BuildSetModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zuul.driver.sql.sqlconnection.SQLConnection._setup_models.BuildSetModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zuul.driver.sql.sqlconnection.SQLConnection._setup_models.BuildSetModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zuul.driver.sql.sqlconnection.SQLConnection._setup_models.BuildModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zuul.driver.sql.sqlconnection.SQLConnection._setup_models.BuildModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zuul.driver.sql.sqlconnection.SQLConnection._setup_models.BuildModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zuul.driver.sql.sqlconnection.SQLConnection._setup_models.BuildModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zuul.driver.sql.sqlconnection.SQLConnection._setup_models.BuildModel]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[zuul.driver.sql.sqlconnection.SQLConnection._setup_models.BuildModel]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[zuul.driver.sql.sqlconnection.SQLConnection._setup_models.BuildModel]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[zuul.driver.sql.sqlconnection.SQLConnection._setup_models.BuildModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zuul.driver.sql.sqlconnection.SQLConnection._setup_models.BuildModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zuul.driver.sql.sqlconnection.SQLConnection._setup_models.BuildModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zuul.driver.sql.sqlconnection.SQLConnection._setup_models.ArtifactModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zuul.driver.sql.sqlconnection.SQLConnection._setup_models.ArtifactModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zuul.driver.sql.sqlconnection.SQLConnection._setup_models.ProvidesModel]$ 0 0 0 0 0 0 0 $typing.Type[zuul.driver.sql.sqlconnection.SQLConnection._setup_models.ProvidesModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zuul.driver.sql.sqlconnection.SQLConnection._setup_models.ProvidesModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zuul.driver.sql.sqlconnection.SQLConnection._setup_models.ProvidesModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zuul.driver.sql.sqlconnection.SQLConnection._setup_models.ProvidesModel]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] from zuul . driver import Driver , ConnectionInterface , ReporterInterface [EOL] from zuul . driver . sql import sqlconnection [EOL] from zuul . driver . sql import sqlreporter [EOL] [EOL] [EOL] class SQLDriver ( Driver , ConnectionInterface , ReporterInterface ) : [EOL] name = [string] [EOL] [EOL] def __init__ ( self ) : [EOL] self . tenant_connections = { } [EOL] [EOL] def reconfigure ( self , tenant ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if tenant . name in self . tenant_connections : [EOL] del self . tenant_connections [ tenant . name ] [EOL] for pipeline in tenant . layout . pipelines . values ( ) : [EOL] reporters = ( pipeline . start_actions + pipeline . success_actions + pipeline . failure_actions + pipeline . merge_failure_actions ) [EOL] for reporter in reporters : [EOL] if not isinstance ( reporter , sqlreporter . SQLReporter ) : [EOL] continue [EOL] self . tenant_connections [ tenant . name ] = reporter . connection [EOL] return [EOL] [EOL] def registerScheduler ( self , scheduler ) : [EOL] self . sched = scheduler [EOL] [EOL] def getConnection ( self , name , config ) : [EOL] return sqlconnection . SQLConnection ( self , name , config ) [EOL] [EOL] def getReporter ( self , connection , pipeline , config = None ) : [EOL] return sqlreporter . SQLReporter ( self , connection , config ) [EOL] [EOL] def getReporterSchema ( self ) : [EOL] return sqlreporter . getSchema ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] [comment] [EOL] revision = [string] [EOL] down_revision = [string] [EOL] branch_labels = None [EOL] depends_on = None [EOL] [EOL] from alembic import op [EOL] import sqlalchemy as sa [EOL] [EOL] BUILDSET_TABLE = [string] [EOL] [EOL] [EOL] def upgrade ( table_prefix = [string] ) : [EOL] op . add_column ( table_prefix + BUILDSET_TABLE , sa . Column ( [string] , sa . String ( [number] ) ) ) [EOL] [EOL] connection = op . get_bind ( ) [EOL] connection . execute ( [string] . format ( buildset_table = table_prefix + BUILDSET_TABLE ) ) [EOL] [EOL] op . drop_column ( table_prefix + BUILDSET_TABLE , [string] ) [EOL] [EOL] [EOL] def downgrade ( ) : [EOL] raise Exception ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] [comment] [EOL] revision = [string] [EOL] down_revision = [string] [EOL] branch_labels = None [EOL] depends_on = None [EOL] [EOL] from alembic import op [EOL] [EOL] BUILDSET_TABLE = [string] [EOL] BUILD_TABLE = [string] [EOL] [EOL] [EOL] def upgrade ( table_prefix = [string] ) : [EOL] prefixed_buildset = table_prefix + BUILDSET_TABLE [EOL] prefixed_build = table_prefix + BUILD_TABLE [EOL] [EOL] [comment] [EOL] [comment] [EOL] op . create_index ( table_prefix + [string] , prefixed_buildset , [ [string] , [string] ] ) [EOL] [EOL] [comment] [EOL] op . create_index ( table_prefix + [string] , prefixed_buildset , [ [string] , [string] ] ) [EOL] [EOL] [comment] [EOL] op . create_index ( table_prefix + [string] , prefixed_buildset , [ [string] ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] op . create_index ( table_prefix + [string] , prefixed_build , [ [string] , [string] ] ) [EOL] [EOL] [EOL] def downgrade ( ) : [EOL] raise Exception ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [docstring] [EOL] [EOL] [comment] [EOL] revision = [string] [EOL] down_revision = [string] [EOL] branch_labels = None [EOL] depends_on = None [EOL] [EOL] from alembic import op [EOL] import sqlalchemy as sa [EOL] [EOL] [EOL] def upgrade ( table_prefix = [string] ) : [EOL] op . add_column ( table_prefix + [string] , sa . Column ( [string] , sa . TEXT ( ) ) ) [EOL] [EOL] [EOL] def downgrade ( ) : [EOL] raise Exception ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] class BaseWebController ( object ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] from cryptography . hazmat . backends import default_backend [EOL] from cryptography . hazmat . primitives . asymmetric import rsa [EOL] from cryptography . hazmat . primitives import serialization [EOL] from cryptography . hazmat . primitives . asymmetric import padding [EOL] from cryptography . hazmat . primitives import hashes [EOL] from functools import lru_cache [EOL] [EOL] [EOL] [comment] [EOL] def generate_rsa_keypair ( ) : [EOL] [docstring] [EOL] private_key = rsa . generate_private_key ( public_exponent = [number] , key_size = [number] , backend = default_backend ( ) ) [EOL] public_key = private_key . public_key ( ) [EOL] return ( private_key , public_key ) [EOL] [EOL] [EOL] [comment] [EOL] def serialize_rsa_private_key ( private_key ) : [EOL] [docstring] [EOL] return private_key . private_bytes ( encoding = serialization . Encoding . PEM , format = serialization . PrivateFormat . TraditionalOpenSSL , encryption_algorithm = serialization . NoEncryption ( ) ) [EOL] [EOL] [EOL] def serialize_rsa_public_key ( public_key ) : [EOL] [docstring] [EOL] return public_key . public_bytes ( encoding = serialization . Encoding . PEM , format = serialization . PublicFormat . SubjectPublicKeyInfo ) [EOL] [EOL] [EOL] [comment] [EOL] def deserialize_rsa_keypair ( data ) : [EOL] [docstring] [EOL] private_key = serialization . load_pem_private_key ( data , password = None , backend = default_backend ( ) ) [EOL] public_key = private_key . public_key ( ) [EOL] return ( private_key , public_key ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] @ lru_cache ( maxsize = [number] ) def decrypt_pkcs1_oaep ( ciphertext , private_key ) : [EOL] [docstring] [EOL] return private_key . decrypt ( ciphertext , padding . OAEP ( mgf = padding . MGF1 ( algorithm = hashes . SHA1 ( ) ) , algorithm = hashes . SHA1 ( ) , label = None ) ) [EOL] [EOL] [EOL] [comment] [EOL] def encrypt_pkcs1_oaep ( plaintext , public_key ) : [EOL] [docstring] [EOL] return public_key . encrypt ( plaintext , padding . OAEP ( mgf = padding . MGF1 ( algorithm = hashes . SHA1 ( ) ) , algorithm = hashes . SHA1 ( ) , label = None ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import json [EOL] import types [EOL] [EOL] [EOL] class ZuulJSONEncoder ( json . JSONEncoder ) : [EOL] def default ( self , o ) : [EOL] if isinstance ( o , types . MappingProxyType ) : [EOL] return dict ( o ) [EOL] return json . JSONEncoder . default ( self , o ) [EOL] [EOL] [EOL] def json_dumps ( obj ) : [EOL] return json . dumps ( obj , cls = ZuulJSONEncoder ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Union , List , Dict , Type , Any [EOL] import typing [EOL] import voluptuous as v [EOL] import urllib . parse [EOL] [EOL] artifact = { [string] : v . Required ( str ) , [string] : v . Required ( str ) , [string] : dict , } [EOL] [EOL] zuul_data = { [string] : { [string] : str , [string] : [ artifact ] , v . Extra : object , } , v . Extra : object , } [EOL] [EOL] artifact_schema = v . Schema ( zuul_data ) [EOL] [EOL] [EOL] def validate_artifact_schema ( data ) : [EOL] try : [EOL] artifact_schema ( data ) [EOL] except Exception : [EOL] return False [EOL] return True [EOL] [EOL] [EOL] def get_artifacts_from_result_data ( result_data , logger = None ) : [EOL] ret = [ ] [EOL] if validate_artifact_schema ( result_data ) : [EOL] artifacts = result_data . get ( [string] , { } ) . get ( [string] , [ ] ) [EOL] default_url = result_data . get ( [string] , { } ) . get ( [string] ) [EOL] if default_url : [EOL] if default_url [ - [number] ] != [string] : [EOL] default_url += [string] [EOL] for artifact in artifacts : [EOL] url = artifact [ [string] ] [EOL] if default_url : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] try : [EOL] url = urllib . parse . urljoin ( default_url , url ) [EOL] except Exception : [EOL] if logger : [EOL] logger . debug ( [string] , exc_info = [number] ) [EOL] d = artifact . copy ( ) [EOL] d [ [string] ] = url [EOL] ret . append ( d ) [EOL] else : [EOL] logger . debug ( [string] [string] , result_data ) [EOL] return ret [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any , Dict [EOL] import logging [EOL] import typing [EOL] import gear [EOL] import logging [EOL] [EOL] log = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] def getGearmanFunctions ( gearman ) : [EOL] functions = { } [EOL] for connection in gearman . active_connections : [EOL] try : [EOL] req = gear . StatusAdminRequest ( ) [EOL] connection . sendAdminRequest ( req , timeout = [number] ) [EOL] except Exception : [EOL] log . exception ( [string] ) [EOL] gearman . _lostConnection ( connection ) [EOL] continue [EOL] for line in req . response . decode ( [string] ) . split ( [string] ) : [EOL] parts = [ x . strip ( ) for x in line . split ( [string] ) ] [EOL] if len ( parts ) < [number] : [EOL] continue [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] data = functions . setdefault ( parts [ [number] ] , [ [number] , [number] , [number] ] ) [EOL] for i in range ( [number] ) : [EOL] data [ i ] += int ( parts [ i + [number] ] ) [EOL] return functions [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import gear [EOL] [EOL] MASS_DO = [number] [EOL] [EOL] [EOL] class GearServer ( gear . Server ) : [EOL] def handlePacket ( self , packet ) : [EOL] if packet . ptype == MASS_DO : [EOL] self . log . info ( [string] % ( packet . connection , packet ) ) [EOL] self . handleMassDo ( packet ) [EOL] else : [EOL] return super ( GearServer , self ) . handlePacket ( packet ) [EOL] [EOL] def handleMassDo ( self , packet ) : [EOL] packet . connection . functions = set ( ) [EOL] for name in packet . data . split ( [string] ) : [EOL] self . log . debug ( [string] % ( name , packet . connection ) ) [EOL] packet . connection . functions . add ( name ) [EOL] self . functions . add ( name ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import os [EOL] [EOL] [EOL] def get_default ( config , section , option , default = None , expand_user = False ) : [EOL] if config . has_option ( section , option ) : [EOL] [comment] [EOL] [comment] [EOL] if isinstance ( default , bool ) : [EOL] value = config . getboolean ( section , option ) [EOL] elif isinstance ( default , int ) : [EOL] value = config . getint ( section , option ) [EOL] else : [EOL] value = config . get ( section , option ) [EOL] else : [EOL] value = default [EOL] if expand_user and value : [EOL] return os . path . expanduser ( value ) [EOL] return value [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import builtins [EOL] from typing import Type , Any , List [EOL] import paramiko [EOL] import zuul [EOL] import typing [EOL] import tempfile [EOL] import logging [EOL] import os [EOL] [EOL] import paramiko [EOL] [EOL] RSA_KEY_SIZE = [number] [EOL] [EOL] [EOL] class Migration ( object ) : [EOL] log = logging . getLogger ( [string] ) [EOL] version = [number] [EOL] parent = None [EOL] [EOL] def verify ( self , root ) : [EOL] fn = os . path . join ( root , [string] ) [EOL] if not os . path . exists ( fn ) : [EOL] return False [EOL] with open ( fn ) as f : [EOL] data = int ( f . read ( ) . strip ( ) ) [EOL] if data == self . version : [EOL] return True [EOL] return False [EOL] [EOL] def writeVersion ( self , root ) : [EOL] fn = os . path . join ( root , [string] ) [EOL] with open ( fn , [string] ) as f : [EOL] f . write ( str ( self . version ) ) [EOL] [EOL] def upgrade ( self , root ) : [EOL] pass [EOL] [EOL] def verifyAndUpgrade ( self , root ) : [EOL] if self . verify ( root ) : [EOL] return [EOL] if self . parent : [EOL] self . parent . verifyAndUpgrade ( root ) [EOL] self . log . info ( [string] % self . version ) [EOL] self . upgrade ( root ) [EOL] self . writeVersion ( root ) [EOL] self . log . info ( [string] % self . version ) [EOL] if not self . verify ( root ) : [EOL] raise Exception ( [string] ) [EOL] [EOL] [EOL] class MigrationV1 ( Migration ) : [EOL] version = [number] [EOL] parent = None [EOL] [EOL] [docstring] [EOL] [EOL] def upgrade ( self , root ) : [EOL] tmpdir = tempfile . mkdtemp ( dir = root ) [EOL] tmpdirname = os . path . basename ( tmpdir ) [EOL] connection_names = [ ] [EOL] for connection_name in os . listdir ( root ) : [EOL] if connection_name == tmpdirname : [EOL] continue [EOL] [comment] [EOL] [comment] [EOL] os . rename ( os . path . join ( root , connection_name ) , os . path . join ( tmpdir , connection_name ) ) [EOL] connection_names . append ( connection_name ) [EOL] os . makedirs ( os . path . join ( root , [string] , [string] ) , [number] ) [EOL] os . makedirs ( os . path . join ( root , [string] , [string] ) , [number] ) [EOL] os . makedirs ( os . path . join ( root , [string] , [string] ) , [number] ) [EOL] for connection_name in connection_names : [EOL] connection_root = os . path . join ( tmpdir , connection_name ) [EOL] for ( dirpath , dirnames , filenames ) in os . walk ( connection_root ) : [EOL] subdir = os . path . relpath ( dirpath , connection_root ) [EOL] for fn in filenames : [EOL] key_name = os . path . join ( subdir , fn ) [EOL] project_name = key_name [ : - len ( [string] ) ] [EOL] key_dir = os . path . join ( root , [string] , [string] , connection_name , project_name ) [EOL] os . makedirs ( key_dir , [number] ) [EOL] old = os . path . join ( tmpdir , connection_name , key_name ) [EOL] new = os . path . join ( key_dir , [string] ) [EOL] self . log . debug ( [string] , old , new ) [EOL] os . rename ( old , new ) [EOL] for ( dirpath , dirnames , filenames ) in os . walk ( connection_root , topdown = False ) : [EOL] os . rmdir ( dirpath ) [EOL] os . rmdir ( tmpdir ) [EOL] [EOL] [EOL] class KeyStorage ( object ) : [EOL] log = logging . getLogger ( [string] ) [EOL] current_version = MigrationV1 [EOL] [EOL] def __init__ ( self , root ) : [EOL] self . root = root [EOL] migration = self . current_version ( ) [EOL] migration . verifyAndUpgrade ( root ) [EOL] [EOL] def getProjectSecretsKeyFile ( self , connection , project , version = None ) : [EOL] [docstring] [EOL] [comment] [EOL] if version is None : [EOL] version = [string] [EOL] return os . path . join ( self . root , [string] , [string] , connection , project , version + [string] ) [EOL] [EOL] def getProjectSSHKeyFile ( self , connection , project , version = None ) : [EOL] [docstring] [EOL] [comment] [EOL] if version is None : [EOL] version = [string] [EOL] return os . path . join ( self . root , [string] , [string] , connection , project , version + [string] ) [EOL] [EOL] def getProjectSSHKeys ( self , connection , project ) : [EOL] [docstring] [EOL] [EOL] private_key_file = self . getProjectSSHKeyFile ( connection , project ) [EOL] if not os . path . exists ( private_key_file ) : [EOL] self . log . info ( [string] , project ) [EOL] self . _createSSHKey ( private_key_file ) [EOL] key = paramiko . RSAKey . from_private_key_file ( private_key_file ) [EOL] with open ( private_key_file , [string] ) as f : [EOL] private_key = f . read ( ) [EOL] public_key = key . get_base64 ( ) [EOL] return ( private_key , [string] + public_key ) [EOL] [EOL] def _createSSHKey ( self , fn ) : [EOL] key_dir = os . path . dirname ( fn ) [EOL] if not os . path . isdir ( key_dir ) : [EOL] os . makedirs ( key_dir , [number] ) [EOL] [EOL] pk = paramiko . RSAKey . generate ( bits = RSA_KEY_SIZE ) [EOL] pk . write_private_key_file ( fn ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[zuul.lib.keystorage.MigrationV1]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zuul.lib.keystorage.MigrationV1$ 0 0 0 0 0 0 0 $zuul.lib.keystorage.MigrationV1$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $paramiko.rsakey.RSAKey$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $paramiko.rsakey.RSAKey$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $paramiko.rsakey.RSAKey$ 0 0 0 0 0 0 0 0 0 0 0 0 $paramiko.rsakey.RSAKey$ 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import builtins [EOL] from typing import Type , Any [EOL] import zuul [EOL] import os [EOL] import typing [EOL] import logging [EOL] import os [EOL] [EOL] from zuul . executor . sensors import SensorInterface [EOL] from zuul . lib . config import get_default [EOL] [EOL] [EOL] def get_avail_hdd_pct ( path ) : [EOL] s = os . statvfs ( path ) [EOL] used = float ( s . f_blocks - s . f_bfree ) [EOL] percent = ( used / s . f_blocks ) * [number] [EOL] [EOL] return ( [number] - percent ) [EOL] [EOL] [EOL] class HDDSensor ( SensorInterface ) : [EOL] log = logging . getLogger ( [string] ) [EOL] [EOL] def __init__ ( self , config = None ) : [EOL] self . min_avail_hdd = float ( get_default ( config , [string] , [string] , [string] ) ) [EOL] self . state_dir = get_default ( config , [string] , [string] , [string] , expand_user = True ) [EOL] [EOL] def isOk ( self ) : [EOL] avail_hdd_pct = get_avail_hdd_pct ( self . state_dir ) [EOL] [EOL] if avail_hdd_pct < self . min_avail_hdd : [EOL] return False , [string] . format ( avail_hdd_pct , self . min_avail_hdd ) [EOL] [EOL] return True , [string] . format ( avail_hdd_pct , self . min_avail_hdd ) [EOL] [EOL] def reportStats ( self , statsd , base_key ) : [EOL] avail_hdd_pct = get_avail_hdd_pct ( self . state_dir ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] statsd . gauge ( base_key + [string] , int ( ( [number] - avail_hdd_pct ) * [number] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import abc [EOL] [EOL] [EOL] class SensorInterface ( object , metaclass = abc . ABCMeta ) : [EOL] [docstring] [EOL] [EOL] @ abc . abstractmethod def isOk ( self ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] @ abc . abstractmethod def reportStats ( self , statsd , base_key ) : [EOL] [docstring] [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import abc [EOL] [EOL] [EOL] class BaseExecutionContext ( object , metaclass = abc . ABCMeta ) : [EOL] [docstring] [EOL] [EOL] @ abc . abstractmethod def getPopen ( self , ** kwargs ) : [EOL] [docstring] [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from ansible . errors import AnsibleError [EOL] from ansible . plugins . lookup import LookupBase [EOL] [EOL] [EOL] class LookupModule ( LookupBase ) : [EOL] [EOL] def run ( self , * args , ** kwargs ) : [EOL] raise AnsibleError ( [string] [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from ansible . errors import AnsibleError [EOL] from ansible . plugins . lookup import LookupBase [EOL] [EOL] [EOL] class LookupModule ( LookupBase ) : [EOL] [EOL] def run ( self , * args , ** kwargs ) : [EOL] raise AnsibleError ( [string] [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from ansible . errors import AnsibleError [EOL] from ansible . plugins . lookup import LookupBase [EOL] [EOL] [EOL] class LookupModule ( LookupBase ) : [EOL] [EOL] def run ( self , * args , ** kwargs ) : [EOL] raise AnsibleError ( [string] [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from ansible . errors import AnsibleError [EOL] from ansible . plugins . lookup import LookupBase [EOL] [EOL] [EOL] class LookupModule ( LookupBase ) : [EOL] [EOL] def run ( self , * args , ** kwargs ) : [EOL] raise AnsibleError ( [string] [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from ansible . errors import AnsibleError [EOL] from ansible . plugins . lookup import LookupBase [EOL] [EOL] [EOL] class LookupModule ( LookupBase ) : [EOL] [EOL] def run ( self , * args , ** kwargs ) : [EOL] raise AnsibleError ( [string] [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from ansible . errors import AnsibleError [EOL] from ansible . plugins . lookup import LookupBase [EOL] [EOL] [EOL] class LookupModule ( LookupBase ) : [EOL] [EOL] def run ( self , * args , ** kwargs ) : [EOL] raise AnsibleError ( [string] [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from ansible . errors import AnsibleError [EOL] from ansible . plugins . lookup import LookupBase [EOL] [EOL] [EOL] class LookupModule ( LookupBase ) : [EOL] [EOL] def run ( self , * args , ** kwargs ) : [EOL] raise AnsibleError ( [string] [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from ansible . errors import AnsibleError [EOL] from ansible . plugins . lookup import LookupBase [EOL] [EOL] [EOL] class LookupModule ( LookupBase ) : [EOL] [EOL] def run ( self , * args , ** kwargs ) : [EOL] raise AnsibleError ( [string] [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from ansible . errors import AnsibleError [EOL] from ansible . plugins . lookup import LookupBase [EOL] [EOL] [EOL] class LookupModule ( LookupBase ) : [EOL] [EOL] def run ( self , * args , ** kwargs ) : [EOL] raise AnsibleError ( [string] [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from ansible . errors import AnsibleError [EOL] from ansible . plugins . lookup import LookupBase [EOL] [EOL] [EOL] class LookupModule ( LookupBase ) : [EOL] [EOL] def run ( self , * args , ** kwargs ) : [EOL] raise AnsibleError ( [string] [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from ansible . errors import AnsibleError [EOL] from ansible . plugins . lookup import LookupBase [EOL] [EOL] [EOL] class LookupModule ( LookupBase ) : [EOL] [EOL] def run ( self , * args , ** kwargs ) : [EOL] raise AnsibleError ( [string] [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from ansible . errors import AnsibleError [EOL] from ansible . plugins . lookup import LookupBase [EOL] [EOL] [EOL] class LookupModule ( LookupBase ) : [EOL] [EOL] def run ( self , * args , ** kwargs ) : [EOL] raise AnsibleError ( [string] [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from ansible . errors import AnsibleError [EOL] from ansible . plugins . lookup import LookupBase [EOL] [EOL] [EOL] class LookupModule ( LookupBase ) : [EOL] [EOL] def run ( self , * args , ** kwargs ) : [EOL] raise AnsibleError ( [string] [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from ansible . errors import AnsibleError [EOL] from ansible . plugins . lookup import LookupBase [EOL] [EOL] [EOL] class LookupModule ( LookupBase ) : [EOL] [EOL] def run ( self , * args , ** kwargs ) : [EOL] raise AnsibleError ( [string] [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from ansible . errors import AnsibleError [EOL] from ansible . plugins . lookup import LookupBase [EOL] [EOL] [EOL] class LookupModule ( LookupBase ) : [EOL] [EOL] def run ( self , * args , ** kwargs ) : [EOL] raise AnsibleError ( [string] [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from ansible . errors import AnsibleError [EOL] from ansible . plugins . lookup import LookupBase [EOL] [EOL] [EOL] class LookupModule ( LookupBase ) : [EOL] [EOL] def run ( self , * args , ** kwargs ) : [EOL] raise AnsibleError ( [string] [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from ansible . errors import AnsibleError [EOL] from ansible . plugins . lookup import LookupBase [EOL] [EOL] [EOL] class LookupModule ( LookupBase ) : [EOL] [EOL] def run ( self , * args , ** kwargs ) : [EOL] raise AnsibleError ( [string] [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from ansible . errors import AnsibleError [EOL] from ansible . plugins . lookup import LookupBase [EOL] [EOL] [EOL] class LookupModule ( LookupBase ) : [EOL] [EOL] def run ( self , * args , ** kwargs ) : [EOL] raise AnsibleError ( [string] [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from ansible . errors import AnsibleError [EOL] from ansible . plugins . lookup import LookupBase [EOL] [EOL] [EOL] class LookupModule ( LookupBase ) : [EOL] [EOL] def run ( self , * args , ** kwargs ) : [EOL] raise AnsibleError ( [string] [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from ansible . errors import AnsibleError [EOL] from ansible . plugins . lookup import LookupBase [EOL] [EOL] [EOL] class LookupModule ( LookupBase ) : [EOL] [EOL] def run ( self , * args , ** kwargs ) : [EOL] raise AnsibleError ( [string] [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from ansible . errors import AnsibleError [EOL] from ansible . plugins . lookup import LookupBase [EOL] [EOL] [EOL] class LookupModule ( LookupBase ) : [EOL] [EOL] def run ( self , * args , ** kwargs ) : [EOL] raise AnsibleError ( [string] [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from ansible . errors import AnsibleError [EOL] from ansible . plugins . lookup import LookupBase [EOL] [EOL] [EOL] class LookupModule ( LookupBase ) : [EOL] [EOL] def run ( self , * args , ** kwargs ) : [EOL] raise AnsibleError ( [string] [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import argparse [EOL] import logging [EOL] import typing [EOL] [docstring] [EOL] [EOL] import argparse [EOL] import git [EOL] import logging [EOL] import time [EOL] import sys [EOL] [EOL] NOW = int ( time . time ( ) ) [EOL] DEFAULT_DAYS = [number] [EOL] ZUUL_REF_PREFIX = [string] [EOL] [EOL] parser = argparse . ArgumentParser ( description = __doc__ , formatter_class = argparse . RawDescriptionHelpFormatter , ) [EOL] parser . add_argument ( [string] , dest = [string] , default = DEFAULT_DAYS , type = int , help = [string] [string] % DEFAULT_DAYS ) [EOL] parser . add_argument ( [string] , [string] , dest = [string] , action = [string] , help = [string] ) [EOL] parser . add_argument ( [string] , [string] , dest = [string] , action = [string] , help = [string] ) [EOL] parser . add_argument ( [string] , help = [string] ) [EOL] args = parser . parse_args ( ) [EOL] [EOL] logging . basicConfig ( ) [EOL] log = logging . getLogger ( [string] ) [EOL] if args . verbose : [EOL] log . setLevel ( logging . DEBUG ) [EOL] else : [EOL] log . setLevel ( logging . INFO ) [EOL] [EOL] try : [EOL] repo = git . Repo ( args . gitrepo ) [EOL] except git . exc . InvalidGitRepositoryError : [EOL] log . error ( [string] % args . gitrepo ) [EOL] sys . exit ( [number] ) [EOL] [EOL] for ref in repo . references : [EOL] [EOL] if not ref . path . startswith ( ZUUL_REF_PREFIX ) : [EOL] continue [EOL] if type ( ref ) is not git . refs . reference . Reference : [EOL] [comment] [EOL] continue [EOL] [EOL] try : [EOL] commit_ts = ref . commit . committed_date [EOL] except LookupError : [EOL] [comment] [EOL] log . exception ( [string] , ref . commit , ref . path , type ( ref ) ) [EOL] continue [EOL] [EOL] commit_age = int ( ( NOW - commit_ts ) / [number] ) [comment] [EOL] log . debug ( [string] , ref . commit , ref . path , commit_age , ) [EOL] if commit_age > args . days_ago : [EOL] if args . dryrun : [EOL] log . info ( [string] , ref . path , ref . commit ) [EOL] else : [EOL] log . info ( [string] , ref . path , ref . commit ) [EOL] ref . delete ( repo , ref . path ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 $argparse.Namespace$ 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import argparse [EOL] import typing [EOL] import urllib2 [EOL] import json [EOL] import argparse [EOL] [EOL] parser = argparse . ArgumentParser ( ) [EOL] parser . add_argument ( [string] , help = [string] ) [EOL] parser . add_argument ( [string] , help = [string] ) [EOL] parser . add_argument ( [string] , help = [string] ) [EOL] options = parser . parse_args ( ) [EOL] [EOL] [comment] [EOL] info = json . loads ( urllib2 . urlopen ( [string] % options . url ) . read ( ) ) [EOL] api_tenant = info . get ( [string] , { } ) . get ( [string] ) [EOL] if api_tenant : [EOL] if api_tenant == options . tenant : [EOL] status_url = [string] % options . url [EOL] else : [EOL] print ( [string] % ( options . url , options . tenant , api_tenant ) ) [EOL] exit ( [number] ) [EOL] else : [EOL] status_url = [string] % ( options . url , options . tenant ) [EOL] [EOL] data = json . loads ( urllib2 . urlopen ( status_url ) . read ( ) ) [EOL] [EOL] for pipeline in data [ [string] ] : [EOL] if pipeline [ [string] ] != options . pipeline : [EOL] continue [EOL] for queue in pipeline [ [string] ] : [EOL] for head in queue [ [string] ] : [EOL] for change in head : [EOL] if not change [ [string] ] : [EOL] continue [EOL] cid , cps = change [ [string] ] . split ( [string] ) [EOL] print ( [string] [string] % ( options . tenant , options . pipeline , change [ [string] ] , cid , cps ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $argparse.Namespace$ 0 0 0 0 $builtins.str$ 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 $argparse.Namespace$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $argparse.Namespace$ 0 0 0 $argparse.Namespace$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 0 0 $argparse.Namespace$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0