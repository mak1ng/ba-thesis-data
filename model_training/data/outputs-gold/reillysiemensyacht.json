import pytest [EOL] [EOL] from yacht import Category , InvalidCategory , score [EOL] [EOL] [EOL] def test_yacht ( ) : [EOL] assert score ( [ [number] , [number] , [number] , [number] , [number] ] , Category . YACHT ) == [number] [EOL] [EOL] [EOL] def test_not_yacht ( ) : [EOL] assert score ( [ [number] , [number] , [number] , [number] , [number] ] , Category . YACHT ) == [number] [EOL] [EOL] [EOL] def test_ones ( ) : [EOL] assert score ( [ [number] , [number] , [number] , [number] , [number] ] , Category . ONES ) == [number] [EOL] [EOL] [EOL] def test_ones_out_of_order ( ) : [EOL] assert score ( [ [number] , [number] , [number] , [number] , [number] ] , Category . ONES ) == [number] [EOL] [EOL] [EOL] def test_no_ones ( ) : [EOL] assert score ( [ [number] , [number] , [number] , [number] , [number] ] , Category . ONES ) == [number] [EOL] [EOL] [EOL] def test_twos ( ) : [EOL] assert score ( [ [number] , [number] , [number] , [number] , [number] ] , Category . TWOS ) == [number] [EOL] [EOL] [EOL] def test_fours ( ) : [EOL] assert score ( [ [number] , [number] , [number] , [number] , [number] ] , Category . FOURS ) == [number] [EOL] [EOL] [EOL] def test_yacht_counted_as_threes ( ) : [EOL] assert score ( [ [number] , [number] , [number] , [number] , [number] ] , Category . THREES ) == [number] [EOL] [EOL] [EOL] def test_yacht_of_threes_counted_as_fives ( ) : [EOL] assert score ( [ [number] , [number] , [number] , [number] , [number] ] , Category . FIVES ) == [number] [EOL] [EOL] [EOL] def test_sixes ( ) : [EOL] assert score ( [ [number] , [number] , [number] , [number] , [number] ] , Category . SIXES ) == [number] [EOL] [EOL] [EOL] def test_full_house_two_small_three_big ( ) : [EOL] assert score ( [ [number] , [number] , [number] , [number] , [number] ] , Category . FULL_HOUSE ) == [number] [EOL] [EOL] [EOL] def test_full_house_three_small_two_big ( ) : [EOL] assert score ( [ [number] , [number] , [number] , [number] , [number] ] , Category . FULL_HOUSE ) == [number] [EOL] [EOL] [EOL] def test_two_pair_is_not_a_full_house ( ) : [EOL] assert score ( [ [number] , [number] , [number] , [number] , [number] ] , Category . FULL_HOUSE ) == [number] [EOL] [EOL] [EOL] def test_four_of_a_kind_is_not_a_full_house ( ) : [EOL] assert score ( [ [number] , [number] , [number] , [number] , [number] ] , Category . FULL_HOUSE ) == [number] [EOL] [EOL] [EOL] def test_yacht_is_not_a_full_house ( ) : [EOL] assert score ( [ [number] , [number] , [number] , [number] , [number] ] , Category . FULL_HOUSE ) == [number] [EOL] [EOL] [EOL] def test_four_of_a_kind ( ) : [EOL] assert score ( [ [number] , [number] , [number] , [number] , [number] ] , Category . FOUR_OF_A_KIND ) == [number] [EOL] [EOL] [EOL] def test_yacht_can_be_scored_as_four_of_a_kind ( ) : [EOL] assert score ( [ [number] , [number] , [number] , [number] , [number] ] , Category . FOUR_OF_A_KIND ) == [number] [EOL] [EOL] [EOL] def test_full_house_is_not_four_of_a_kind ( ) : [EOL] assert score ( [ [number] , [number] , [number] , [number] , [number] ] , Category . FOUR_OF_A_KIND ) == [number] [EOL] [EOL] [EOL] def test_little_straight ( ) : [EOL] assert score ( [ [number] , [number] , [number] , [number] , [number] ] , Category . LITTLE_STRAIGHT ) == [number] [EOL] [EOL] [EOL] def test_little_straight_as_big_straight ( ) : [EOL] assert score ( [ [number] , [number] , [number] , [number] , [number] ] , Category . BIG_STRAIGHT ) == [number] [EOL] [EOL] [EOL] def test_four_in_order_but_not_a_little_straight ( ) : [EOL] assert score ( [ [number] , [number] , [number] , [number] , [number] ] , Category . LITTLE_STRAIGHT ) == [number] [EOL] [EOL] [EOL] def test_no_pairs_but_not_a_little_straight ( ) : [EOL] assert score ( [ [number] , [number] , [number] , [number] , [number] ] , Category . LITTLE_STRAIGHT ) == [number] [EOL] [EOL] [EOL] def test_min_1_max_5_but_not_a_little_straight ( ) : [EOL] assert score ( [ [number] , [number] , [number] , [number] , [number] ] , Category . LITTLE_STRAIGHT ) == [number] [EOL] [EOL] [EOL] def test_big_straight ( ) : [EOL] assert score ( [ [number] , [number] , [number] , [number] , [number] ] , Category . BIG_STRAIGHT ) == [number] [EOL] [EOL] [EOL] def test_big_straight_as_little_straight ( ) : [EOL] assert score ( [ [number] , [number] , [number] , [number] , [number] ] , Category . LITTLE_STRAIGHT ) == [number] [EOL] [EOL] [EOL] def test_choice ( ) : [EOL] assert score ( [ [number] , [number] , [number] , [number] , [number] ] , Category . CHOICE ) == [number] [EOL] [EOL] [EOL] def test_yacht_as_choice ( ) : [EOL] assert score ( [ [number] , [number] , [number] , [number] , [number] ] , Category . CHOICE ) == [number] [EOL] [EOL] [EOL] def test_invalid_category_raises_error ( ) : [EOL] with pytest . raises ( InvalidCategory ) as exc : [EOL] score ( [ [number] , [number] , [number] , [number] , [number] ] , [string] ) == - [number] [EOL] assert str ( exc . value ) == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0