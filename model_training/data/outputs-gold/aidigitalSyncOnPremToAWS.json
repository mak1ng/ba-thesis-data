from typing import Union , Dict , List [EOL] import typing [EOL] import builtins [EOL] [docstring] [EOL] [EOL] tables_to_update = [ { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , { [string] : [string] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : False } , ] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] if __name__ == [string] : [EOL] from typing import List , Dict , Union [EOL] TVH_tables = [ d for d in tables_to_update if d [ [string] ] == [string] ] [EOL] MTH_Test_tables = [ d for d in tables_to_update if d [ [string] ] == [string] ] [EOL] MTH_Live_tables = [ d for d in tables_to_update if d [ [string] ] == [string] ] [EOL] [EOL] print ( [string] , len ( tables_to_update ) ) [EOL] [EOL] print ( [string] , len ( TVH_tables ) ) [EOL] print ( [string] , len ( MTH_Test_tables ) ) [EOL] print ( [string] , len ( MTH_Live_tables ) )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.strtyping.List[typing.Dict[builtins.str,typing.Union[builtins.str,builtins.int,builtins.bool]]]$ 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[builtins.str,builtins.int,builtins.bool]]]$ 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[builtins.str,builtins.int,builtins.bool]]]$ 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[builtins.str,builtins.int,builtins.bool]]]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[builtins.str,builtins.int,builtins.bool]]]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[builtins.str,builtins.int,builtins.bool]]]$ 0 0
from typing import List [EOL] import builtins [EOL] import typing [EOL] import datetime [EOL] import sys [EOL] import os [EOL] import logging [EOL] from typing import List [EOL] [EOL] def set_logging ( environment , path_to_logs = None , file_name_time = False ) : [EOL] def path_to_desktop ( ) : [comment] [EOL] desktop = os . path . join ( os . path . join ( os . environ [ [string] ] ) , [string] ) [EOL] return desktop + [string] [EOL] [EOL] path_to_logs = path_to_logs if path_to_logs is not None else path_to_desktop ( ) if [string] in sys . platform else [string] if [string] in sys . platform else [string] [EOL] [EOL] now_str = datetime . datetime . now ( ) . strftime ( [string] ) [EOL] file_name = environment if file_name_time is False else environment + [string] + now_str [EOL] filename = path_to_logs + [string] + file_name + [string] [EOL] [EOL] print ( [string] , filename ) [EOL] logging . basicConfig ( filename = filename , level = logging . DEBUG , format = [string] , filemode = [string] ) [EOL] [EOL] [EOL] def all_next_words_after_word ( my_string , after_this_word = [string] , split_string_by = [string] ) : [EOL] def find_between_helper ( s = my_string , w = after_this_word ) : [EOL] if s . find ( w ) < [number] : [comment] [EOL] return None [EOL] else : [EOL] res = s [ s . find ( w ) + len ( w ) : ] . split ( ) [ [number] ] [EOL] return res [EOL] [EOL] final = map ( find_between_helper , my_string . split ( split_string_by ) ) [EOL] final = filter ( None , final ) [comment] [EOL] final = [string] . join ( final ) [EOL] return final [EOL] [EOL] def modify_script ( old_script , modification ) : [comment] [EOL] [docstring] [EOL] split_by_comma = old_script . split ( [string] ) [EOL] contains_DISTINCT = [ x for x in split_by_comma if [string] in x ] [EOL] other_ELEMENTS = split_by_comma [ len ( contains_DISTINCT ) : ] [EOL] [EOL] if not contains_DISTINCT : [comment] [EOL] after_SELECT = other_ELEMENTS [ [number] ] . split ( [string] ) [ [number] ] [comment] [EOL] if len ( other_ELEMENTS ) == [number] : [EOL] new_script = [string] + modification . strip ( ) + [string] + after_SELECT [EOL] else : [EOL] new_script = [string] + modification . strip ( ) + [string] + after_SELECT + [string] + [string] . join ( other_ELEMENTS [ [number] : ] ) [EOL] [comment] [EOL] return replace_star ( new_script ) [EOL] [EOL] if not other_ELEMENTS : [comment] [EOL] before_FROM = contains_DISTINCT [ - [number] ] . split ( [string] ) [ [number] ] . strip ( ) [EOL] after_FROM = contains_DISTINCT [ - [number] ] . split ( [string] ) [ [number] ] [EOL] [EOL] new_script = [string] . join ( contains_DISTINCT [ : - [number] ] ) + [string] + before_FROM + [string] + modification + [string] + after_FROM [EOL] [comment] [EOL] return replace_star ( new_script ) [EOL] [EOL] contains_DISTINCT = [ [string] ] if not contains_DISTINCT else contains_DISTINCT [EOL] modification = ( [string] if contains_DISTINCT != [ [string] ] else [string] ) + modification [EOL] [EOL] new_script = [string] . join ( contains_DISTINCT ) + modification + [string] + [string] . join ( other_ELEMENTS ) [EOL] return replace_star ( new_script ) [EOL] [EOL] [EOL] def replace_star ( script ) : [EOL] [docstring] [EOL] [EOL] if [string] not in script : [comment] [EOL] return script [EOL] [EOL] sql_script_as_list = script . split ( ) [EOL] star_position_in_sql_script = sql_script_as_list . index ( [string] ) [EOL] [EOL] try : [EOL] two_words_after_star = sql_script_as_list [ star_position_in_sql_script + [number] ] [EOL] except IndexError : [comment] [EOL] return script [EOL] [EOL] if two_words_after_star != [string] : [EOL] script = script . replace ( [string] , two_words_after_star + [string] ) [EOL] return script [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] sql = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [EOL] s = [string] [EOL] [EOL] old_script = [string] [EOL] [comment] [EOL] [comment] [EOL] a = all_next_words_after_word ( my_string = old_script , after_this_word = [string] , split_string_by = [string] ) [EOL] print ( a , type ( a ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any , List [EOL] import typing [EOL] import onPremise_Connecter [EOL] import sqlalchemy [EOL] import logging [EOL] import inspect [EOL] import pandas as pd ; pd . set_option ( [string] , [number] ) [EOL] [EOL] from config import config [EOL] [EOL] class OnPremise_Connecter ( ) : [EOL] [docstring] [EOL] def __init__ ( self , server , database ) : [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] user = config [ [string] ] [ [string] ] [EOL] password = config [ [string] ] [ [string] ] [EOL] port = config [ [string] ] [ [string] ] [EOL] driver = [string] [EOL] [EOL] connection_string = [string] . format ( user = user , password = password , server = server , db = database , port = port , driver = driver ) [EOL] self . engine = sqlalchemy . create_engine ( connection_string ) [EOL] self . connection = self . engine . connect ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] logging . info ( [string] . format ( __class__ . __name__ , database ) ) [EOL] [EOL] def execute_sql ( self , sql_statement ) : [EOL] logger = logging . getLogger ( __name__ ) ; logger . info ( [string] . format ( inspect . stack ( ) [ [number] ] [ [number] ] ) ) [EOL] result = self . connection . execute ( sql_statement ) [EOL] [comment] [EOL] return result [EOL] [EOL] def fetch_results ( self , sql_statement ) : [EOL] logger = logging . getLogger ( __name__ ) ; logger . info ( [string] . format ( inspect . stack ( ) [ [number] ] [ [number] ] ) ) [EOL] [comment] [EOL] [comment] [EOL] [EOL] results = self . execute_sql ( sql_statement ) [EOL] fetch_results = results . fetchall ( ) [EOL] [EOL] df = pd . DataFrame ( fetch_results ) [EOL] [comment] [EOL] return df [EOL] [EOL] def fetch_to_pandas ( self , sql_statement ) : [EOL] [comment] [EOL] [docstring] [EOL] logger = logging . getLogger ( __name__ ) ; logger . info ( [string] . format ( inspect . stack ( ) [ [number] ] [ [number] ] ) ) [EOL] df = pd . read_sql ( sql_statement , self . connection ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] return df [EOL] [EOL] def get_columns_deprecated ( self , table ) : [EOL] logger = logging . getLogger ( __name__ ) ; logger . info ( [string] . format ( inspect . stack ( ) [ [number] ] [ [number] ] ) ) [EOL] [EOL] t = self . connection . execute ( [string] + table ) [EOL] print ( t . description ) [EOL] print ( [string] ) [EOL] columns = [ column [ [number] : [number] ] for column in t . description ] [EOL] return columns [EOL] [EOL] def _get_columns ( self , table ) : [EOL] logger = logging . getLogger ( __name__ ) ; logger . info ( [string] . format ( inspect . stack ( ) [ [number] ] [ [number] ] ) ) [EOL] [comment] [EOL] inspector = sqlalchemy . inspect ( self . engine ) [EOL] x = [ tuple ( d . values ( ) ) for d in inspector . get_columns ( table ) ] [EOL] print ( x ) [EOL] return x [EOL] [EOL] def _get_tables ( self ) : [EOL] logger = logging . getLogger ( __name__ ) ; logger . info ( [string] . format ( inspect . stack ( ) [ [number] ] [ [number] ] ) ) [EOL] inspector = sqlalchemy . inspect ( self . engine ) [EOL] print ( [string] , inspector . get_table_names ( ) ) [EOL] print ( [string] , inspector . get_view_names ( ) ) [comment] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] onPremise = OnPremise_Connecter ( server = config [ [string] ] [ [string] ] , database = [string] ) [EOL] x = onPremise . fetch_to_pandas ( sql_statement = [string] ) [EOL] print ( x ) [EOL] print ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Any,...]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Any,...]]$ 0 0 0 $typing.List[typing.Tuple[typing.Any,...]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $onPremise_Connecter.OnPremise_Connecter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $onPremise_Connecter.OnPremise_Connecter$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any , List [EOL] import singleton [EOL] import typing [EOL] import builtins [EOL] from typing import Dict , List , Any [EOL] [EOL] class Borg : [EOL] [docstring] [EOL] _shared_state = { } [comment] [EOL] [EOL] def __init__ ( self ) : [comment] [EOL] print ( [string] ) [EOL] self . __dict__ = self . _shared_state [comment] [EOL] [EOL] [EOL] class Singleton ( Borg ) : [comment] [EOL] [docstring] [EOL] [comment] [EOL] [EOL] def __init__ ( self , key , value ) : [EOL] [comment] [EOL] [comment] [EOL] self . _shared_state . update ( { key : value } ) [EOL] [EOL] def __str__ ( self ) : [EOL] [comment] [EOL] return str ( self . _shared_state ) [EOL] [EOL] def sort_values_of_dict ( myDict , sortByNthElement = [number] ) : [EOL] [docstring] [EOL] list_of_dict_values = list ( myDict . values ( ) ) [EOL] list_of_dict_values_sorted = sorted ( list_of_dict_values , key = lambda v : v [ sortByNthElement ] ) [EOL] [EOL] return list_of_dict_values_sorted [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] x = Singleton ( [number] , [ [number] , [string] ] ) [comment] [EOL] y = Singleton ( [number] , [ [number] , [string] ] ) [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] z = Singleton ( [number] , [ [number] , [string] ] ) [EOL] myDict = Borg ( ) . __dict__ [comment] [EOL] print ( [string] , myDict ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] a = sort_values_of_dict ( myDict ) [EOL] print ( [string] , a ) [EOL] [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $singleton.Singleton$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $singleton.Singleton$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $singleton.Singleton$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[typing.Any]]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.List[typing.Any]]$ 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] import matplotlib . pyplot as plt [EOL] import numpy as np [EOL] import pandas as pd [EOL] [EOL] [comment] [EOL] df = pd . DataFrame ( { [string] : range ( [number] , [number] ) , [string] : np . random . randn ( [number] ) , [string] : np . random . randn ( [number] ) + range ( [number] , [number] ) , [string] : np . random . randn ( [number] ) + range ( [number] , [number] ) , [string] : np . random . randn ( [number] ) + range ( [number] , [number] ) , [string] : np . random . randn ( [number] ) + range ( [number] , [number] ) + ( [number] , [number] , [number] , [number] , [number] , [number] , [number] , - [number] , - [number] , - [number] ) , [string] : np . random . randn ( [number] ) + range ( [number] , [number] ) , [string] : np . random . randn ( [number] ) + range ( [number] , [number] ) , [string] : np . random . randn ( [number] ) + range ( [number] , [number] ) , [string] : np . random . randn ( [number] ) + range ( [number] , [number] ) } ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] plt . style . use ( [string] ) [EOL] [EOL] [comment] [EOL] palette = plt . get_cmap ( [string] ) [EOL] [EOL] [comment] [EOL] num = [number] [EOL] for column in df . drop ( [string] , axis = [number] ) : [EOL] num += [number] [EOL] [EOL] [comment] [EOL] plt . subplot ( [number] , [number] , num ) [EOL] [EOL] [comment] [EOL] for v in df . drop ( [string] , axis = [number] ) : [EOL] plt . plot ( df [ [string] ] , df [ v ] , marker = [string] , color = [string] , linewidth = [number] , alpha = [number] ) [EOL] [EOL] [comment] [EOL] plt . plot ( df [ [string] ] , df [ column ] , marker = [string] , color = palette ( num ) , linewidth = [number] , alpha = [number] , label = column ) [EOL] [EOL] [comment] [EOL] plt . xlim ( [number] , [number] ) [EOL] plt . ylim ( - [number] , [number] ) [EOL] [EOL] [comment] [EOL] if num in range ( [number] ) : [EOL] plt . tick_params ( labelbottom = False ) [EOL] if num not in [ [number] , [number] , [number] ] : [EOL] plt . tick_params ( labelleft = False ) [EOL] [EOL] [comment] [EOL] plt . title ( column , loc = [string] , fontsize = [number] , fontweight = [number] , color = palette ( num ) ) [EOL] [EOL] [comment] [EOL] plt . suptitle ( [string] , fontsize = [number] , fontweight = [number] , color = [string] , style = [string] , y = [number] ) [EOL] [EOL] [comment] [EOL] plt . text ( [number] , [number] , [string] , ha = [string] , va = [string] ) [EOL] plt . text ( [number] , [number] , [string] , ha = [string] , va = [string] , rotation = [string] ) [EOL] [EOL] plt . show ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Any , List [EOL] import typing [EOL] import onPremise_Connecter2 [EOL] import pandas [EOL] import builtins [EOL] import sqlalchemy [EOL] import logging [EOL] import inspect [EOL] import cx_Oracle [EOL] import pandas as pd ; pd . set_option ( [string] , [number] ) [EOL] from pandas import DataFrame [EOL] from typing import Any , List , Tuple [EOL] [EOL] from config import config [EOL] [EOL] class OnPremise_Connecter2 ( ) : [EOL] [docstring] [EOL] def __init__ ( self , server , database , company = [string] ) : [EOL] [EOL] [comment] [EOL] self . server = server [EOL] self . database = database [EOL] self . driver = [string] [EOL] [EOL] self . user = config [ [string] ] [ [string] ] if company == [string] else config [ [string] ] [ [string] ] if company == [string] else config [ [string] ] [ [string] ] [EOL] self . password = config [ [string] ] [ [string] ] if company == [string] else config [ [string] ] [ [string] ] if company == [string] else config [ [string] ] [ [string] ] [EOL] self . port = config [ [string] ] [ [string] ] if company == [string] else config [ [string] ] [ [string] ] if company == [string] else config [ [string] ] [ [string] ] [EOL] self . host = config [ [string] ] [ [string] ] if company == [string] else config [ [string] ] [ [string] ] [EOL] [EOL] [comment] [EOL] def _connect_to_SQL_Server ( ) : [EOL] connection_string = [string] . format ( user = self . user , password = self . password , server = self . server , db = self . database , port = self . port , driver = self . driver ) [EOL] self . engine = sqlalchemy . create_engine ( connection_string ) [EOL] self . connection = self . engine . connect ( ) [EOL] [EOL] [comment] [EOL] def _connect_to_Oracle ( ) : [EOL] self . DSN = cx_Oracle . makedsn ( self . host , self . port , service_name = self . database ) [comment] [EOL] self . connection = cx_Oracle . connect ( user = self . user , password = self . password , dsn = self . DSN ) [comment] [EOL] [EOL] if company == [string] : [EOL] _connect_to_SQL_Server ( ) [EOL] elif company in [ [string] , [string] ] : [EOL] _connect_to_Oracle ( ) [EOL] else : [EOL] print ( f' [string] { company } [string] ' ) [EOL] [EOL] logging . info ( f' [string] { __class__ . __name__ } [string] { database } [string] { company }' ) [EOL] [EOL] [EOL] def execute_sql ( self , sql_statement ) : [EOL] logger = logging . getLogger ( __name__ ) ; logger . info ( [string] . format ( inspect . stack ( ) [ [number] ] [ [number] ] ) ) [EOL] result = self . connection . execute ( sql_statement ) [EOL] [comment] [EOL] return result [EOL] [EOL] def fetch_results ( self , sql_statement ) : [EOL] logger = logging . getLogger ( __name__ ) ; logger . info ( [string] . format ( inspect . stack ( ) [ [number] ] [ [number] ] ) ) [EOL] [comment] [EOL] [comment] [EOL] [EOL] results = self . execute_sql ( sql_statement ) [EOL] fetch_results = results . fetchall ( ) [EOL] [EOL] df = pd . DataFrame ( fetch_results ) [EOL] [comment] [EOL] return df [EOL] [EOL] def fetch_to_pandas ( self , sql_statement ) : [EOL] [comment] [EOL] [docstring] [EOL] logger = logging . getLogger ( __name__ ) ; logger . info ( [string] . format ( inspect . stack ( ) [ [number] ] [ [number] ] ) ) [EOL] df = pd . read_sql ( sql_statement , self . connection ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] return df [EOL] [EOL] def get_columns_deprecated ( self , table ) : [EOL] logger = logging . getLogger ( __name__ ) ; logger . info ( [string] . format ( inspect . stack ( ) [ [number] ] [ [number] ] ) ) [EOL] [EOL] t = self . connection . execute ( [string] + table ) [EOL] print ( t . description ) [EOL] print ( [string] ) [EOL] columns = [ column [ [number] : [number] ] for column in t . description ] [EOL] return columns [EOL] [EOL] def _get_columns ( self , table ) : [EOL] logger = logging . getLogger ( __name__ ) ; logger . info ( [string] . format ( inspect . stack ( ) [ [number] ] [ [number] ] ) ) [EOL] [comment] [EOL] inspector = sqlalchemy . inspect ( self . engine ) [EOL] x = [ tuple ( d . values ( ) ) for d in inspector . get_columns ( table ) ] [EOL] print ( x ) [EOL] return x [EOL] [EOL] def _get_tables ( self ) : [EOL] logger = logging . getLogger ( __name__ ) ; logger . info ( [string] . format ( inspect . stack ( ) [ [number] ] [ [number] ] ) ) [EOL] inspector = sqlalchemy . inspect ( self . engine ) [EOL] print ( [string] , inspector . get_table_names ( ) ) [EOL] print ( [string] , inspector . get_view_names ( ) ) [comment] [EOL] [EOL] if __name__ == [string] : [EOL] [comment] [EOL] [comment] [EOL] [EOL] onPremise = OnPremise_Connecter2 ( server = config [ [string] ] [ [string] ] , database = config [ [string] ] [ [string] ] , company = [string] ) [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] verbose_script = [string] [EOL] verbose_script_2 = [string] [EOL] [EOL] verbose_script_3 = [string] [EOL] df = onPremise . fetch_to_pandas ( sql_statement = verbose_script_3 ) [EOL] print ( f' [string] { df . shape [ [number] ] } [string] { df . shape [ [number] ] } [string] { df . columns . values } [string] ' ) [EOL] print ( df . head ) [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 $pandas.DataFrame$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $pandas.DataFrame$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $pandas.DataFrame$ 0 0 0 $pandas.DataFrame$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pandas.DataFrame$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pandas.DataFrame$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Tuple]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Any,...]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[typing.Tuple[typing.Any,...]]$ 0 0 0 $typing.List[typing.Tuple[typing.Any,...]]$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , Literal [EOL] import typing_extensions [EOL] import typing [EOL] import configparser [EOL] import os [EOL] import configparser [EOL] [EOL] config_env = os . getenv ( [string] , [string] ) [EOL] config = configparser . ConfigParser ( ) [EOL] config . read ( os . path . join ( os . path . dirname ( __file__ ) , config_env ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 $configparser.ConfigParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0