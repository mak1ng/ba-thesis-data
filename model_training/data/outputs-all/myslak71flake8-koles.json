from typing import Dict , Any , List [EOL] import typing [EOL] [docstring] [EOL] import os [EOL] [EOL] from pkg_resources import parse_requirements [EOL] from setuptools import setup [EOL] [EOL] DIR_PATH = os . path . abspath ( os . path . dirname ( __file__ ) ) [EOL] [EOL] install_requires = [ [string] ] [EOL] [EOL] with open ( os . path . join ( DIR_PATH , [string] ) , encoding = [string] ) as file : [EOL] long_description = file . read ( ) [EOL] [EOL] about = { } [EOL] with open ( os . path . join ( DIR_PATH , [string] , [string] ) , [string] , encoding = [string] ) as file : [EOL] exec ( file . read ( ) , about ) [EOL] [EOL] with open ( os . path . join ( DIR_PATH , [string] ) , encoding = [string] ) as file : [EOL] requirements_dev = [ str ( req ) for req in parse_requirements ( file . read ( ) ) ] [EOL] [EOL] setup ( name = about [ [string] ] , description = about [ [string] ] , long_description = long_description , long_description_content_type = [string] , version = about [ [string] ] , author = about [ [string] ] , author_email = about [ [string] ] , license = about [ [string] ] , keywords = about [ [string] ] , download_url = about [ [string] ] , packages = [ [string] ] , package_data = { [string] : [ [string] ] } , py_modules = [ [string] ] , python_requires = [string] , install_requires = install_requires , extras_require = { [string] : requirements_dev } , entry_points = { [string] : [ [string] ] } , classifiers = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import flake8_koles [EOL] import typing [EOL] [docstring] [EOL] from unittest . mock import patch [EOL] [EOL] import pytest [EOL] [EOL] from flake8_koles . checker import KolesChecker [EOL] [EOL] [EOL] @ pytest . fixture def koles_checker ( ) : [EOL] [docstring] [EOL] with patch ( [string] ) as mock_init : [EOL] mock_init . return_value = None [EOL] koles_checker = KolesChecker ( [string] , [string] ) [EOL] yield koles_checker [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List , Any , Dict , Type [EOL] import flake8_koles [EOL] import typing [EOL] import optparse [EOL] [docstring] [EOL] import re [EOL] from unittest import mock [EOL] from unittest . mock import Mock [EOL] [EOL] import pytest [EOL] from flake8 . options . manager import Option , OptionManager [EOL] [EOL] from flake8_koles . checker import KolesChecker [EOL] [EOL] [EOL] @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_run ( mock_get_pattern , mock_readlines ) : [EOL] [docstring] [EOL] mock_get_pattern . return_value = [string] [EOL] mock_readlines . return_value = [ [string] , [string] , [string] ] [EOL] koles_checker = KolesChecker ( tree = [string] , filename = [string] ) [EOL] koles_checker . options = Mock ( censor_msg = True ) [EOL] result = [ * koles_checker . run ( ) ] [EOL] [EOL] assert result == [ ( [number] , [number] , [string] , KolesChecker ) , ( [number] , [number] , [string] , KolesChecker ) , ( [number] , [number] , [string] , KolesChecker ) , ] [EOL] [EOL] [EOL] def test_add_options ( koles_checker ) : [EOL] [docstring] [EOL] option_manager = OptionManager ( ) [EOL] koles_checker . add_options ( option_manager ) [EOL] assert repr ( option_manager . options ) == repr ( [ Option ( long_option_name = [string] , default = [number] , parse_from_config = True , action = [string] , ) , Option ( long_option_name = [string] , default = [number] , type = [string] , parse_from_config = True , ) , Option ( long_option_name = [string] , default = [string] , parse_from_config = True , comma_separated_list = True , ) , Option ( long_option_name = [string] , default = [string] , parse_from_config = True , comma_separated_list = True , ) , ] ) [EOL] [EOL] [EOL] def test_parse_options ( koles_checker ) : [EOL] [docstring] [EOL] test_options = { [string] : True } [EOL] koles_checker . parse_options ( test_options ) [EOL] [EOL] assert koles_checker . options == test_options [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( ( [number] , [ ] , [ [string] , [string] , [string] ] , [string] ) , ( [number] , [ ] , [ [string] , [string] , [string] ] , [string] ) , ( [number] , [ ] , [ [string] , [string] ] , [string] ) , ( [number] , [ ] , [ [string] ] , [string] ) , ( [number] , [ ] , [ ] , [string] ) , ( [number] , [ ] , [ [string] , [string] , [string] ] , [string] ) , ( [number] , [ [string] ] , [ [string] , [string] ] , [string] ) , ( [number] , [ [string] , [string] , [string] ] , [ ] , [string] ) , ) , ) @ mock . patch ( [string] ) def test_get_pattern ( mock_get_swears_data , ignore_shorties , ignore_swears , expected_result , get_swears_data_value , koles_checker , ) : [EOL] [docstring] [EOL] mock_get_swears_data . return_value = get_swears_data_value [EOL] koles_checker . options = Mock ( ignore_shorties = ignore_shorties , ignore_swears = ignore_swears ) [EOL] result = koles_checker . _get_pattern ( ) [EOL] [EOL] assert result . count ( [string] ) == max ( len ( expected_result ) - [number] , [number] ) [EOL] assert all ( ( word in result for word in expected_result ) ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( ( [ [string] ] , [ [string] ] , [string] ) , ( [ [string] , [string] ] , [ [string] , [string] ] , [string] , ) , ) , ) @ mock . patch ( [string] ) def test_get_swears_data ( mock_resource_string , lang , resource_string_value , expected_result , koles_checker ) : [EOL] [docstring] [EOL] mock_resource_string . side_effect = resource_string_value [EOL] koles_checker . options = Mock ( lang = lang ) [EOL] result = koles_checker . _get_swears_data ( ) [EOL] [EOL] assert result == expected_result [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( [string] , [string] , None ) ) @ mock . patch ( [string] ) def test_get_file_content_stdin ( mock_stdin_get_value , filename , koles_checker ) : [EOL] [docstring] [EOL] koles_checker . filename = filename [EOL] koles_checker . _get_file_content ( ) [EOL] [EOL] mock_stdin_get_value . assert_called_once ( ) [EOL] [EOL] [EOL] @ mock . patch ( [string] ) def test_get_file_content_regular_filename ( mock_readlines , koles_checker ) : [EOL] [docstring] [EOL] koles_checker . filename = [string] [EOL] koles_checker . _get_file_content ( ) [EOL] [EOL] mock_readlines . assert_called_once ( ) [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( ( [string] , [ ] , [ ] , [ ] ) , ( [string] , [ ( [number] , [string] ) ] , [ [string] ] , [ ( [number] , [number] , [string] , KolesChecker ) ] , ) , ( [string] , [ ( [number] , [string] ) , ( [number] , [string] ) ] , [ [string] , [string] ] , [ ( [number] , [number] , [string] , KolesChecker ) , ( [number] , [number] , [string] , KolesChecker ) , ] , ) , ) , ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_get_filename_errors ( mock_censor_word , mock_check_row , filename , check_row_value , censor_word_value , expected_result , koles_checker , ) : [EOL] [docstring] [EOL] mock_check_row . return_value = check_row_value [EOL] mock_censor_word . side_effect = censor_word_value [EOL] koles_checker . filename = filename [EOL] result = [ * koles_checker . _get_filename_errors ( ) ] [EOL] [EOL] assert result == expected_result [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( ( [ [string] ] , [ [ ] ] , [ ] , [ ] ) , ( [ [string] ] , [ [ ( [number] , [string] ) ] ] , [ [string] ] , [ ( [number] , [number] , [string] , KolesChecker ) ] , ) , ( [ [string] , [string] ] , [ [ ( [number] , [string] ) ] , [ ( [number] , [string] ) ] ] , [ [string] , [string] ] , [ ( [number] , [number] , [string] , KolesChecker ) , ( [number] , [number] , [string] , KolesChecker ) , ] , ) , ) , ) @ mock . patch ( [string] ) @ mock . patch ( [string] ) def test_get_content_errors ( mock_censor_word , mock_check_row , content , check_row_value , censor_word_value , expected_result , koles_checker , ) : [EOL] [docstring] [EOL] koles_checker . _pattern = [string] [EOL] mock_check_row . side_effect = check_row_value [EOL] mock_censor_word . side_effect = censor_word_value [EOL] result = [ * koles_checker . _get_content_errors ( content ) ] [EOL] [EOL] assert result == expected_result [EOL] [EOL] def test_get_content_errors_empty_pattern ( koles_checker , ) : [EOL] [docstring] [EOL] koles_checker . _pattern = [string] [EOL] result = [ * koles_checker . _get_content_errors ( [ [string] ] ) ] [EOL] [EOL] assert result == [ ] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( ( [string] , [string] , [ ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) ] ) , ( [string] , [string] , [ ( [number] , [string] ) , ( [number] , [string] ) ] ) , ( [string] , [string] , [ ] ) , ( [string] , [string] , [ ( [number] , [string] ) , ( [number] , [string] ) , ( [number] , [string] ) ] ) , ) , ) def test_check_row ( pattern , string , expected_result , koles_checker ) : [EOL] [docstring] [EOL] koles_checker . _regex = re . compile ( f' [string] { pattern } [string] ' , flags = re . IGNORECASE ) [EOL] result = koles_checker . _check_row ( string ) [EOL] [EOL] assert [ * result ] == expected_result [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( ( [string] , True , [string] ) , ( [string] , False , [string] ) , ( [string] , True , [string] ) , ( [string] , False , [string] ) , ( [string] , True , [string] ) , ( [string] , False , [string] ) , ) , ) def test_censor_word ( word , censor_msg , expected_result , koles_checker ) : [EOL] [docstring] [EOL] koles_checker . options = Mock ( censor_msg = censor_msg ) [EOL] result = koles_checker . _censor_word ( word ) [EOL] [EOL] assert result == expected_result [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , ( ( [ ] , [ ] ) , ( [ [string] ] , [ [string] ] ) , ( [ [string] , [string] ] , [ [string] , [string] , [string] , [string] ] , ) , ) , ) @ mock . patch ( [string] ) def test_get_lang_choices ( listdir_mock , listdir_value , expected_result , koles_checker ) : [EOL] [docstring] [EOL] listdir_mock . return_value = listdir_value [EOL] [EOL] assert koles_checker . _get_lang_choices ( ) == expected_result [EOL]	
[docstring] [EOL] from flake8_koles . __about__ import ( __author__ , __author_email__ , __copyright__ , __description__ , __download_url__ , __keywords__ , __license__ , __title__ , __url__ , __version__ , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0