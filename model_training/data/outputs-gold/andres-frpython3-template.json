[comment] [EOL] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] from time import time [EOL] [comment] [EOL] from dummypackage . foo_module import Foo [EOL] from dummypackage . bar_module import Bar [EOL] from dummypackage . nested . baz_module import Baz [EOL] [EOL] [EOL] def do_loop ( clss , memsize , loopsize ) : [EOL] [docstring] [EOL] print ( [string] , ( clss . __name__ , memsize , loopsize ) ) [EOL] x = clss ( memsize ) [EOL] t = time ( ) [EOL] x . loop ( loopsize ) [EOL] print ( [string] , time ( ) - t , [string] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] MEMSIZE = [number] [EOL] LOOPSIZE = [number] [EOL] do_loop ( Foo , MEMSIZE , LOOPSIZE ) [EOL] do_loop ( Bar , MEMSIZE , LOOPSIZE ) [EOL] print ( [string] , Baz . d ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple , List , Dict [EOL] import typing [EOL] from os . path import abspath , dirname [EOL] import sys [EOL] MODULE_ROOT_DIR = dirname ( dirname ( abspath ( __file__ ) ) ) [EOL] [comment] [EOL] if MODULE_ROOT_DIR not in sys . path : [EOL] sys . path . insert ( [number] , MODULE_ROOT_DIR ) [EOL] [EOL] html_theme = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] project = [string] [EOL] copyright = [string] [EOL] author = [string] [EOL] [EOL] [comment] [EOL] version = [string] [EOL] [comment] [EOL] release = [string] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] extensions = [ [string] , [string] , [string] , [string] , ] [EOL] [EOL] [comment] [EOL] templates_path = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] source_suffix = [string] [EOL] [EOL] [comment] [EOL] master_doc = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] language = None [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] exclude_patterns = [ [string] , [string] , [string] ] [EOL] [EOL] [comment] [EOL] pygments_style = None [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] html_static_path = [ [string] ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] htmlhelp_basename = [string] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] latex_elements = { } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] latex_documents = [ ( master_doc , [string] , [string] , [string] , [string] ) , ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] man_pages = [ ( master_doc , [string] , [string] , [ author ] , [number] ) ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] texinfo_documents = [ ( master_doc , [string] , [string] , author , [string] , [string] , [string] ) , ] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] epub_title = project [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] epub_exclude_files = [ [string] ] [EOL] [EOL] [EOL] [comment] [EOL] latex_elements = { [string] : [string] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,typing.List[builtins.str],builtins.int]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]]$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] from typing import Iterable [EOL] import builtins [EOL] import typing [EOL] [docstring] [EOL] [EOL] [EOL] from typing import Iterable [EOL] [EOL] [EOL] class Foo ( object ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , size = [number] ) : [EOL] [docstring] [EOL] assert size > [number] , [string] [EOL] self . _x = range ( size ) [EOL] self . _result = [number] [EOL] [EOL] def _computation ( self ) : [EOL] [docstring] [EOL] self . _result += [number] [EOL] [EOL] def loop ( self , times ) : [EOL] [docstring] [EOL] self . _result = [number] [EOL] for i in range ( times ) : [EOL] self . _computation ( ) [EOL] [EOL] def get_result ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] return self . _result [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Iterable[builtins.int]$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] from typing import List [EOL] import builtins [EOL] import typing [EOL] [docstring] [EOL] [EOL] from typing import List [EOL] from . foo_module import Foo [EOL] [EOL] [EOL] class Bar ( Foo ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , size = [number] ) : [EOL] [docstring] [EOL] super ( Bar , self ) . __init__ ( size ) [EOL] self . _x = list ( self . _x ) [comment] [EOL] [EOL] def _computation ( self ) : [EOL] [docstring] [EOL] super ( Bar , self ) . _computation ( ) [EOL] self . _x . index ( len ( self . _x ) - [number] ) [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] [docstring] [EOL] [EOL] [EOL] name = [string] [EOL] __author__ = [string] [EOL]	0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
	0
[comment] [EOL] [EOL] [EOL] import builtins [EOL] [docstring] [EOL] [EOL] [EOL] class Baz ( object ) : [EOL] [docstring] [EOL] a = [number] [EOL] b = [number] [EOL] c = [number] [EOL] d = [number] [EOL] e = [number] [EOL] f = [number] [EOL] g = [number] [EOL] h = [number] [EOL] i = [number] [EOL] j = [number] [EOL] k = [number] [EOL] m = [number] [EOL] n = [number] [EOL] o = [number] [EOL] p = [number] [EOL] q = [number] [EOL] r = [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0
[comment] [EOL] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import environment [comment] [EOL] from dummypackage . foo_module import Foo [EOL] from dummypackage . bar_module import Bar [EOL] from memory_profiler import profile [EOL] [EOL] [EOL] @ profile def do_loop ( clss , memsize , loopsize ) : [EOL] [docstring] [EOL] x = clss ( memsize ) [EOL] x . loop ( loopsize ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] MEMSIZE = [number] [EOL] LOOPSIZE = [number] [EOL] do_loop ( Foo , MEMSIZE , LOOPSIZE ) [EOL] do_loop ( Bar , MEMSIZE , LOOPSIZE ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0
[comment] [EOL] [EOL] [EOL] [docstring] [EOL] [EOL] import sys [EOL] from os . path import abspath , dirname [EOL] [EOL] [EOL] MODULE_ROOT_DIR = dirname ( dirname ( abspath ( __file__ ) ) ) [EOL] [comment] [EOL] if MODULE_ROOT_DIR not in sys . path : [EOL] sys . path . append ( MODULE_ROOT_DIR ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
[comment] [EOL] [EOL] [EOL] [docstring] [EOL] [EOL] import sys [EOL] from os . path import abspath , dirname [EOL] [EOL] [EOL] MODULE_ROOT_DIR = dirname ( dirname ( abspath ( __file__ ) ) ) [EOL] [comment] [EOL] if MODULE_ROOT_DIR not in sys . path : [EOL] sys . path . append ( MODULE_ROOT_DIR ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
[comment] [EOL] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import argparse [EOL] [docstring] [EOL] [EOL] import os [EOL] import sys [EOL] import coverage [EOL] import argparse [EOL] [comment] [EOL] import environment [comment] [EOL] import dummypackage_utest [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] [comment] [EOL] [comment] [EOL] relative_path = os . path . dirname ( __file__ ) [EOL] if relative_path : [EOL] os . chdir ( relative_path ) [EOL] [comment] [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] [comment] [EOL] parser = argparse . ArgumentParser ( ) [EOL] parser . add_argument ( [string] , [string] , type = str , required = True , help = [string] ) [EOL] parser . add_argument ( [string] , [string] , type = float , default = [number] , help = [string] ) [EOL] args = parser . parse_args ( ) [EOL] [comment] [EOL] PACKAGE_NAME = args . package_name [EOL] COV_PERCENT = args . min_coverage_percent [EOL] assert [number] <= COV_PERCENT <= [number] , [string] + str ( COV_PERCENT ) [EOL] [EOL] [comment] [EOL] c = coverage . Coverage ( data_file = [string] , data_suffix = True , branch = True , source = [ PACKAGE_NAME ] ) [EOL] [EOL] [comment] [EOL] c . start ( ) [EOL] test_results = dummypackage_utest . run_all_tests ( ) [EOL] c . stop ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] cov_percentage = c . report ( ) [EOL] [comment] [EOL] num_tests = test_results . testsRun [EOL] num_errors = len ( test_results . errors ) [EOL] num_failures = len ( test_results . failures ) [EOL] [comment] [EOL] print ( [string] , num_tests , [string] ) [EOL] print ( [string] , num_errors ) [EOL] print ( [string] , num_failures ) [EOL] print ( [string] , cov_percentage ) [EOL] print ( [string] , COV_PERCENT ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] [comment] [EOL] if num_errors > [number] or num_failures > [number] or cov_percentage < COV_PERCENT : [EOL] print ( [string] ) [EOL] sys . exit ( [number] ) [EOL] else : [EOL] [comment] [EOL] sys . exit ( [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 $typing.Any$ 0 $argparse.Namespace$ 0 0 0 $typing.Any$ 0 $argparse.Namespace$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import argparse [EOL] [docstring] [EOL] [EOL] import sys [EOL] import argparse [EOL] from memory_profiler import memory_usage [EOL] [comment] [EOL] import environment [comment] [EOL] from dummypackage . foo_module import Foo [EOL] from dummypackage . bar_module import Bar [EOL] from dummyapp import do_loop [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] [comment] [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] [comment] [EOL] parser = argparse . ArgumentParser ( ) [EOL] parser . add_argument ( [string] , [string] , type = float , default = [number] , help = [string] ) [EOL] parser . add_argument ( [string] , [string] , type = float , default = [number] , help = [string] ) [EOL] [EOL] args = parser . parse_args ( ) [EOL] [comment] [EOL] MAX_ALLOWED = args . max_megabytes_allowed [EOL] assert MAX_ALLOWED > [number] , [string] + str ( MAX_ALLOWED ) [EOL] TIME_INTERVAL = args . time_interval [EOL] assert TIME_INTERVAL > [number] , [string] + str ( TIME_INTERVAL ) [EOL] [comment] [EOL] MEMSIZE = [number] [EOL] LOOPSIZE = [number] [EOL] foo_mem = memory_usage ( ( do_loop , ( Foo , MEMSIZE , LOOPSIZE ) ) , interval = TIME_INTERVAL ) [EOL] bar_mem = memory_usage ( ( do_loop , ( Bar , MEMSIZE , LOOPSIZE ) ) , interval = TIME_INTERVAL ) [EOL] [comment] [EOL] foo_max = max ( foo_mem ) [EOL] bar_max = max ( bar_mem ) [EOL] print ( [string] , foo_max ) [EOL] print ( [string] , bar_max ) [EOL] print ( [string] , MAX_ALLOWED ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] [comment] [EOL] if foo_max > MAX_ALLOWED or bar_max > MAX_ALLOWED : [EOL] sys . exit ( [number] ) [EOL] else : [EOL] [comment] [EOL] sys . exit ( [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 $typing.Any$ 0 $argparse.Namespace$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $argparse.Namespace$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] from typing import Any [EOL] import io [EOL] import typing [EOL] import cProfile [EOL] import argparse [EOL] import pstats [EOL] [docstring] [EOL] [EOL] import sys [EOL] import argparse [EOL] import cProfile [EOL] import pstats [EOL] from io import StringIO [EOL] [comment] [EOL] import environment [comment] [EOL] from dummypackage . foo_module import Foo [EOL] from dummypackage . bar_module import Bar [EOL] from dummyapp import do_loop [EOL] [EOL] [EOL] def get_total_time_and_calls ( fn , sort_by = [string] ) : [EOL] [docstring] [EOL] pr = cProfile . Profile ( ) [EOL] pr . enable ( ) [EOL] fn ( ) [EOL] pr . disable ( ) [EOL] [comment] [EOL] s = StringIO ( ) [EOL] ps = pstats . Stats ( pr , stream = s ) [EOL] ps . strip_dirs ( ) . sort_stats ( sort_by ) [EOL] ps . print_stats ( ) [EOL] print ( s . getvalue ( ) ) [EOL] [comment] [EOL] return ps . total_tt , ps . total_calls [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] [comment] [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] [comment] [EOL] parser = argparse . ArgumentParser ( ) [EOL] parser . add_argument ( [string] , [string] , type = float , default = [number] , help = [string] ) [EOL] args = parser . parse_args ( ) [EOL] [comment] [EOL] MAX_ALLOWED = args . max_seconds_allowed [EOL] assert MAX_ALLOWED > [number] , [string] + str ( MAX_ALLOWED ) [EOL] [comment] [EOL] MEMSIZE = [number] [EOL] LOOPSIZE = [number] [EOL] [comment] [EOL] foo_secs , _ = get_total_time_and_calls ( lambda : do_loop ( Foo , MEMSIZE , LOOPSIZE ) ) [EOL] bar_secs , _ = get_total_time_and_calls ( lambda : do_loop ( Bar , MEMSIZE , LOOPSIZE ) ) [EOL] [comment] [EOL] print ( [string] , foo_secs ) [EOL] print ( [string] , bar_secs ) [EOL] print ( [string] , MAX_ALLOWED ) [EOL] print ( [string] ) [EOL] print ( [string] ) [EOL] [comment] [EOL] if foo_secs > MAX_ALLOWED or bar_secs > MAX_ALLOWED : [EOL] sys . exit ( [number] ) [EOL] else : [EOL] [comment] [EOL] sys . exit ( [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $argparse.Namespace$ 0 $argparse.ArgumentParser$ 0 0 0 0 0 0 0 $typing.Any$ 0 $argparse.Namespace$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] [docstring] [EOL] [EOL] [EOL] import unittest [EOL] [EOL] [EOL] class Tautology ( unittest . TestCase ) : [EOL] [docstring] [EOL] [EOL] def test_tautology ( self ) : [EOL] [docstring] [EOL] self . assertTrue ( True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] import unittest [EOL] [docstring] [EOL] [EOL] from os . path import dirname , abspath [EOL] import unittest [EOL] [EOL] [EOL] TEST_DIR = dirname ( abspath ( __file__ ) ) [comment] [EOL] REPO_DIR = dirname ( TEST_DIR ) [comment] [EOL] [EOL] [EOL] def run_testmethod ( moduleclassmethod , verbosity = [number] ) : [EOL] [docstring] [EOL] [comment] [EOL] tests = unittest . TestLoader ( ) . loadTestsFromName ( moduleclassmethod ) [EOL] [comment] [EOL] test_results = unittest . TextTestRunner ( verbosity = verbosity ) . run ( tests ) [EOL] return test_results [EOL] [EOL] [EOL] def run_testmethods ( moduleclassmethods , verbosity = [number] ) : [EOL] [docstring] [EOL] tests = unittest . TestLoader ( ) . loadTestsFromNames ( moduleclassmethods ) [EOL] [comment] [EOL] test_results = unittest . TextTestRunner ( verbosity = verbosity ) . run ( tests ) [EOL] return test_results [EOL] [EOL] [EOL] def run_testcase ( testcase , verbosity = [number] ) : [EOL] [docstring] [EOL] [comment] [EOL] tests = unittest . TestLoader ( ) . loadTestsFromTestCase ( testcase ) [EOL] [comment] [EOL] test_results = unittest . TextTestRunner ( verbosity = verbosity ) . run ( tests ) [EOL] return test_results [EOL] [EOL] [EOL] def run_testcases ( testcases , verbosity = [number] ) : [EOL] [docstring] [EOL] tests = unittest . TestSuite ( ) [EOL] for c in testcases : [EOL] tests . addTests ( unittest . TestLoader ( ) . loadTestsFromTestCase ( c ) ) [EOL] [comment] [EOL] test_results = unittest . TextTestRunner ( verbosity = verbosity ) . run ( tests ) [EOL] return test_results [EOL] [EOL] [EOL] def run_module ( module , verbosity = [number] ) : [EOL] [docstring] [EOL] [comment] [EOL] tests = unittest . TestLoader ( ) . loadTestsFromModule ( module ) [EOL] [comment] [EOL] test_results = unittest . TextTestRunner ( verbosity = verbosity ) . run ( tests ) [EOL] return test_results [EOL] [EOL] [EOL] def run_modules ( modules , verbosity = [number] ) : [EOL] [docstring] [EOL] tests = unittest . TestSuite ( ) [EOL] for m in modules : [EOL] tests . addTests ( unittest . TestLoader ( ) . loadTestsFromModule ( m ) ) [EOL] [comment] [EOL] test_results = unittest . TextTestRunner ( verbosity = verbosity ) . run ( tests ) [EOL] return test_results [EOL] [EOL] [EOL] def run_all_tests ( test_rootdir = TEST_DIR , verbosity = [number] ) : [EOL] [docstring] [EOL] suite = unittest . TestLoader ( ) . discover ( test_rootdir , [string] , REPO_DIR ) [EOL] results = unittest . TextTestRunner ( verbosity = verbosity ) . run ( suite ) [EOL] return results [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.strbuiltins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] from typing import Type [EOL] import builtins [EOL] import typing [EOL] import dummypackage [EOL] [docstring] [EOL] [EOL] [EOL] import unittest [EOL] from dummypackage . foo_module import Foo [EOL] [EOL] [EOL] class FooTestCaseCpu ( unittest . TestCase ) : [EOL] [docstring] [EOL] CLASS = Foo [EOL] [EOL] def test_init_parameter ( self ) : [EOL] [docstring] [EOL] self . assertRaises ( TypeError , self . CLASS , [number] ) [EOL] self . assertRaises ( TypeError , self . CLASS , None ) [EOL] self . assertRaises ( AssertionError , self . CLASS , [number] ) [EOL] self . assertRaises ( AssertionError , self . CLASS , - [number] ) [EOL] [EOL] def test_loop ( self ) : [EOL] [docstring] [EOL] v1 = [number] [EOL] v2 = [number] [EOL] f = self . CLASS ( ) [EOL] [comment] [EOL] f . loop ( v1 ) [EOL] self . assertEqual ( f . get_result ( ) , v1 ) [EOL] [comment] [EOL] f . loop ( v2 ) [EOL] self . assertEqual ( f . get_result ( ) , v2 ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dummypackage.foo_module.Foo]$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $dummypackage.foo_module.Foo$ 0 0 0 0 0 0 0 0 0 $dummypackage.foo_module.Foo$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $dummypackage.foo_module.Foo$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $dummypackage.foo_module.Foo$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $dummypackage.foo_module.Foo$ 0 0 0 0 0 $builtins.int$ 0 0
[comment] [EOL] [EOL] [EOL] from typing import Type [EOL] import typing [EOL] import dummypackage [EOL] [docstring] [EOL] [EOL] [EOL] from dummypackage . foo_module import Foo [EOL] from dummypackage . bar_module import Bar [EOL] from . foo_test import FooTestCaseCpu [EOL] [EOL] [EOL] class BarTestCaseCpu ( FooTestCaseCpu ) : [EOL] [docstring] [EOL] CLASS = Bar [EOL] [EOL] def test_inheritance ( self ) : [EOL] [docstring] [EOL] b = Bar ( ) [EOL] self . assertIsInstance ( b , Bar ) [EOL] self . assertIsInstance ( b , Foo ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dummypackage.bar_module.Bar]$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $dummypackage.bar_module.Bar$ 0 0 0 0 0 0 0 0 0 $dummypackage.bar_module.Bar$ 0 0 0 0 0 0 0 0 $dummypackage.bar_module.Bar$ 0 0 0 0
[comment] [EOL] [EOL] [EOL] import builtins [EOL] import dummypackage [EOL] [docstring] [EOL] [EOL] [EOL] import unittest [EOL] from dummypackage . foo_module import Foo [EOL] from dummypackage . bar_module import Bar [EOL] [EOL] [EOL] class QuackTestCaseCpu ( unittest . TestCase ) : [EOL] [docstring] [EOL] def test_dummy ( self ) : [EOL] [docstring] [EOL] f = Foo ( ) [EOL] b = Bar ( ) [EOL] f . loop ( [number] ) [EOL] b . loop ( [number] ) [EOL] fb = f . get_result ( ) + b . get_result ( ) [EOL] self . assertEqual ( fb , [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $dummypackage.foo_module.Foo$ 0 0 0 0 0 $dummypackage.bar_module.Bar$ 0 0 0 0 0 $dummypackage.foo_module.Foo$ 0 0 0 0 0 0 $dummypackage.bar_module.Bar$ 0 0 0 0 0 0 $builtins.int$ 0 $dummypackage.foo_module.Foo$ 0 0 0 0 0 $dummypackage.bar_module.Bar$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0
	0