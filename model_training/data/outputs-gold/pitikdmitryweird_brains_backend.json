[comment] [EOL] [comment] [EOL] [EOL] from setuptools import setup , find_packages [EOL] [EOL] [EOL] setup ( name = [string] , description = [string] , url = [string] , python_requires = [string] , zip_safe = True , include_package_data = True , packages = find_packages ( exclude = [ [string] ] ) , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] from aiohttp import web [EOL] [EOL] import marshmallow as ma [EOL] [EOL] [EOL] async def handle_404 ( request ) : [EOL] return web . json_response ( request , status = [number] , content_type = [string] ) [EOL] [EOL] [EOL] async def handle_validation_error ( ex ) : [EOL] return web . json_response ( str ( ex ) , status = [number] , content_type = [string] ) [EOL] [EOL] [EOL] async def handle_internal_server_error ( ex ) : [EOL] return web . json_response ( f' [string] { request }' , status = [number] , content_type = [string] ) [EOL] [EOL] [EOL] async def handle_500 ( request ) : [EOL] return web . json_response ( f' [string] { request }' , status = [number] , content_type = [string] ) [EOL] [EOL] [EOL] def create_error_middleware ( overrides ) : [EOL] [EOL] @ web . middleware async def error_middleware ( request , handler ) : [EOL] [EOL] try : [EOL] response = await handler ( request ) [EOL] [EOL] override = overrides . get ( response . status ) [EOL] if override : [EOL] return await override ( request ) [EOL] [EOL] return response [EOL] [EOL] except ma . ValidationError as ex : [EOL] return await handle_validation_error ( ex ) [EOL] [EOL] except web . HTTPException as ex : [EOL] override = overrides . get ( ex . status ) [EOL] if override : [EOL] return await override ( request ) [EOL] [EOL] raise [EOL] except BaseException as ex : [EOL] return await handle_internal_server_error ( ex ) [EOL] [EOL] return error_middleware [EOL] [EOL] [EOL] def setup_middlewares ( app ) : [EOL] error_middleware = create_error_middleware ( { [number] : handle_404 , [number] : handle_500 } ) [EOL] app . middlewares . append ( error_middleware )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import asyncio [EOL] import logging [EOL] import typing [EOL] import builtins [EOL] import asyncio [EOL] import logging [EOL] from typing import Any [EOL] [EOL] import aiohttp [EOL] import aiohttp . test_utils [EOL] import click [EOL] [EOL] from app import create_app [EOL] [EOL] logger = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] @ click . group ( ) @ click . option ( [string] , default = [string] , help = [string] ) @ click . pass_context def cli ( ctx , config ) : [EOL] [docstring] [EOL] ctx . obj = { } [EOL] ctx . obj [ [string] ] = config [EOL] [EOL] [EOL] @ cli . command ( help = [string] ) @ click . option ( [string] , default = [string] , help = [string] ) @ click . option ( [string] , default = [number] , help = [string] ) @ click . pass_context def server ( ctx , host , port ) : [EOL] loop = asyncio . get_event_loop ( ) [EOL] app = create_app ( ctx . obj [ [string] ] , loop ) [EOL] logging . basicConfig ( level = logging . DEBUG , format = [string] , datefmt = [string] , ) [EOL] aiohttp . web . run_app ( app , host = host , port = port ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] cli ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] [docstring] [EOL] import aiopg . sa [EOL] from aiohttp import web [EOL] [EOL] from blog . category_api import get_all as get_all_categories [EOL] from blog . post_api import get_all as get_all_posts [EOL] from blog . post_api import add as add_post [EOL] from middlewares import setup_middlewares [EOL] from utils . config import load_config [EOL] [EOL] from utils . const import URL_PREFIX [EOL] [EOL] import aiohttp_cors [EOL] [EOL] [EOL] def setup_routes ( app ) : [EOL] app . router . add_get ( f'{ URL_PREFIX } [string] ' , get_all_posts , ) [EOL] app . router . add_post ( f'{ URL_PREFIX } [string] ' , add_post , ) [EOL] app . router . add_get ( f'{ URL_PREFIX } [string] ' , get_all_categories , ) [EOL] [EOL] [EOL] def setup_routes_cors ( app , cors ) : [EOL] category_get_all_resource = cors . add ( app . router . add_resource ( f'{ URL_PREFIX } [string] ' ) ) [EOL] cors . add ( category_get_all_resource . add_route ( [string] , get_all_categories ) ) [EOL] [EOL] post_add_resource = cors . add ( app . router . add_resource ( f'{ URL_PREFIX } [string] ' ) ) [EOL] cors . add ( post_add_resource . add_route ( [string] , add_post ) ) [EOL] [EOL] post_get_all_resource = cors . add ( app . router . add_resource ( f'{ URL_PREFIX } [string] ' ) ) [EOL] cors . add ( post_get_all_resource . add_route ( [string] , get_all_posts ) ) [EOL] [EOL] [EOL] def setup_database ( app ) : [EOL] async def init_pg ( app ) : [EOL] conf = app [ [string] ] [ [string] ] [EOL] engine = await aiopg . sa . create_engine ( database = conf [ [string] ] , user = conf [ [string] ] , password = conf [ [string] ] , host = conf [ [string] ] , port = conf [ [string] ] , ) [EOL] app [ [string] ] = engine [EOL] [EOL] async def close_pg ( app ) : [EOL] app [ [string] ] . close ( ) [EOL] await app [ [string] ] . wait_closed ( ) [EOL] [EOL] app . on_startup . append ( init_pg ) [EOL] app . on_cleanup . append ( close_pg ) [EOL] [EOL] [EOL] def create_app ( config_path , loop ) : [EOL] [docstring] [EOL] [comment] [EOL] config = load_config ( config_path ) [EOL] [EOL] [comment] [EOL] debug_mode = config . get ( [string] , { } ) . get ( [string] , False ) [EOL] [EOL] app = web . Application ( loop = loop , debug = debug_mode ) [EOL] [EOL] [comment] [EOL] setup_middlewares ( app ) [EOL] [EOL] app [ [string] ] = config [EOL] cors = aiohttp_cors . setup ( app ) [EOL] [comment] [EOL] setup_routes_cors ( app , cors ) [EOL] setup_database ( app ) [EOL] [EOL] return app [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type [EOL] import typing [EOL] import src [EOL] import yaml [EOL] import marshmallow as ma [EOL] [EOL] from utils . errors import ImproperlyConfigured [EOL] [EOL] [EOL] class AppSection ( ma . Schema ) : [EOL] environment = ma . fields . String ( required = True , validate = ma . validate . OneOf ( ( [string] , [string] ) ) , ) [EOL] debug = ma . fields . Boolean ( missing = False ) [EOL] [EOL] [EOL] class PostgresSection ( ma . Schema ) : [EOL] database = ma . fields . String ( required = True ) [EOL] user = ma . fields . String ( required = True ) [EOL] password = ma . fields . String ( required = True ) [EOL] host = ma . fields . String ( required = True ) [EOL] port = ma . fields . Integer ( required = True ) [EOL] minsize = ma . fields . Integer ( required = False ) [EOL] maxsize = ma . fields . Integer ( required = False ) [EOL] [EOL] [EOL] class ConfigSchema ( ma . Schema ) : [EOL] app = ma . fields . Nested ( AppSection , required = True ) [EOL] postgres = ma . fields . Nested ( PostgresSection , required = True ) [EOL] [EOL] [EOL] def load_config ( path ) : [EOL] [docstring] [EOL] [EOL] with open ( path ) as config_file : [EOL] raw_config = yaml . load ( config_file ) [EOL] [EOL] if raw_config is None : [EOL] raise ImproperlyConfigured ( [string] ) [EOL] [EOL] schema = ConfigSchema ( strict = True ) [EOL] try : [EOL] return schema . load ( raw_config ) . data [EOL] except ma . ValidationError as exc : [EOL] raise ImproperlyConfigured ( str ( exc ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] [EOL] from typing import Any , Dict [EOL] import typing [EOL] import builtins [EOL] class ImproperlyConfigured ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class FilterValidationError ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class RequestError ( Exception ) : [EOL] [docstring] [EOL] def __init__ ( self , message , status = [number] , payload = None ) : [EOL] super ( ) . __init__ ( ) [EOL] self . message = message [EOL] self . status = status [EOL] self . payload = payload [EOL] [EOL] def __str__ ( self ) : [EOL] return self . message [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.int$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import os [EOL] [EOL] URL_PREFIX = [string] [EOL] ROOT_DIR = os . path . dirname ( os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) ) [EOL]	0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import aiohttp [EOL] from aiohttp import web [EOL] [EOL] from blog . schemas import CategoryResponseSchema [EOL] from database . category_queries import get_all as get_all_categories [EOL] [EOL] [EOL] async def get_all ( request ) : [EOL] async with request . app [ [string] ] . acquire ( ) as conn : [EOL] raw_categories = await get_all_categories ( conn ) [EOL] [EOL] schema = CategoryResponseSchema ( many = True , strict = True ) [EOL] categories = schema . dump ( raw_categories ) . data [EOL] [EOL] return web . json_response ( categories , content_type = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aiohttp.web.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import typing [EOL] import logging [EOL] import aiohttp [EOL] import logging [EOL] from datetime import datetime [EOL] [EOL] from aiohttp import web , MultipartReader , hdrs [EOL] [EOL] from blog . api_utils import get_file_format , get_random_filename [EOL] from blog . schemas import PostRequestSchema , PostResponseSchema , GetPostsRequestSchema [EOL] from database . category_queries import get_category_by_title [EOL] from database . post_queries import add_post , get_all_by_category_id [EOL] from database . post_queries import get_all as get_all_posts [EOL] from utils . const import ROOT_DIR [EOL] [EOL] logger = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] async def add ( request ) : [EOL] async with request . app [ [string] ] . acquire ( ) as conn : [EOL] reader = MultipartReader . from_response ( request ) [EOL] request_data = { } [EOL] [EOL] while True : [EOL] part = await reader . next ( ) [EOL] if part is None : [EOL] break [EOL] [EOL] logger . debug ( f" [string] { part . name }" ) [EOL] [EOL] if hdrs . CONTENT_TYPE in part . headers and part . headers [ hdrs . CONTENT_TYPE ] . startswith ( [string] ) : [EOL] metadata = await part . read ( ) [EOL] [EOL] filename = get_random_filename ( ) [EOL] filename += get_file_format ( part . headers [ hdrs . CONTENT_TYPE ] ) [EOL] db_path = [string] + filename [EOL] path = ROOT_DIR + db_path [EOL] [EOL] with open ( path , [string] ) as f : [EOL] f . write ( metadata ) [EOL] [EOL] request_data [ part . name ] = db_path [EOL] else : [EOL] metadata = await part . text ( ) [EOL] request_data [ part . name ] = metadata [EOL] [EOL] current_time = datetime . now ( ) . isoformat ( ) [EOL] request_data [ [string] ] = current_time [EOL] request_data [ [string] ] = current_time [EOL] [EOL] schema = PostRequestSchema ( strict = True ) [EOL] request = schema . load ( request_data ) . data [EOL] [EOL] category_id = await get_category_by_title ( conn , request [ [string] ] ) [EOL] request [ [string] ] = category_id [EOL] [EOL] await add_post ( conn , request ) [EOL] [EOL] return web . json_response ( [string] ) [EOL] [EOL] [EOL] async def get_all ( request ) : [EOL] async with request . app [ [string] ] . acquire ( ) as conn : [EOL] schema = GetPostsRequestSchema ( strict = True ) [EOL] request = schema . load ( request . rel_url . query ) . data [EOL] [EOL] if request . get ( [string] ) : [EOL] category_id = await get_category_by_title ( conn , request [ [string] ] ) [EOL] request [ [string] ] = category_id [EOL] raw_posts = await get_all_by_category_id ( conn , request ) [EOL] else : [EOL] raw_posts = await get_all_posts ( conn , request ) [EOL] [EOL] schema = PostResponseSchema ( many = True , strict = True ) [EOL] posts = schema . dump ( raw_posts ) . data [EOL] [EOL] return web . json_response ( posts ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 $aiohttp.web.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $aiohttp.web.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] import builtins [EOL] from uuid import uuid4 [EOL] [EOL] import marshmallow as ma [EOL] [EOL] [EOL] def get_file_format ( s ) : [EOL] arr = s . split ( [string] ) [EOL] if len ( arr ) == [number] : [EOL] raise ma . ValidationError ( message = f" [string] { s }" ) [EOL] [EOL] return [string] + s . split ( [string] ) [ - [number] ] [EOL] [EOL] [EOL] def get_random_filename ( ) : [EOL] return uuid4 ( ) . hex [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type [EOL] import typing [EOL] import src [EOL] from marshmallow import Schema , fields , validate [EOL] [EOL] [EOL] class PostRequestSchema ( Schema ) : [EOL] category = fields . String ( required = True , validate = validate . Length ( min = [number] ) ) [EOL] title = fields . String ( required = True , validate = validate . Length ( min = [number] ) ) [EOL] text = fields . String ( required = True , validate = validate . Length ( min = [number] ) ) [EOL] main_img = fields . String ( required = True , validate = validate . Length ( min = [number] ) ) [EOL] created_at = fields . DateTime ( required = True ) [EOL] last_updated = fields . DateTime ( required = True ) [EOL] [EOL] [EOL] class PostResponseSchema ( Schema ) : [EOL] id = fields . Integer ( required = True ) [EOL] category_id = fields . Integer ( required = True ) [EOL] title = fields . String ( required = True ) [EOL] text = fields . String ( required = True ) [EOL] main_img = fields . String ( required = True ) [EOL] created_at = fields . DateTime ( required = True ) [EOL] last_updated = fields . DateTime ( required = True ) [EOL] [EOL] [EOL] class GetPostsRequestSchema ( Schema ) : [EOL] offset = fields . Integer ( required = False , missing = [number] , validate = validate . Range ( min = [number] ) ) [EOL] limit = fields . Integer ( required = False , missing = [number] , validate = validate . Range ( min = [number] , max = [number] ) ) [EOL] category = fields . String ( required = False , validate = validate . OneOf ( [string] ) ) [EOL] [EOL] [EOL] class CategoryResponseSchema ( Schema ) : [EOL] id = fields . Integer ( required = True ) [EOL] title = fields . String ( required = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , Dict , List [EOL] import typing [EOL] import logging [EOL] import logging [EOL] [EOL] import sqlalchemy [EOL] from sqlalchemy import MetaData , create_engine [EOL] [EOL] from database . models import PostCategories , Post [EOL] [EOL] DSN = [string] [EOL] logger = logging . getLogger ( [string] ) [EOL] [EOL] [EOL] def create_tables ( engine ) : [EOL] meta = MetaData ( ) [EOL] meta . create_all ( bind = engine , tables = [ PostCategories , Post ] ) [EOL] [EOL] [EOL] def sample_data ( engine ) : [EOL] conn = engine . connect ( ) [EOL] categories = [ { [string] : [string] } , { [string] : [string] } , { [string] : [string] } ] [EOL] [EOL] for category in categories : [EOL] try : [EOL] conn . execute ( PostCategories . insert ( ) , category ) [EOL] except sqlalchemy . exc . IntegrityError : [EOL] pass [EOL] [EOL] conn . close ( ) [EOL] [EOL] [EOL] def fill_db ( ) : [EOL] [comment] [EOL] db_url = [string] [EOL] [comment] [EOL] engine = create_engine ( db_url ) [EOL] [EOL] create_tables ( engine ) [EOL] sample_data ( engine ) [EOL] logger . info ( [string] ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] fill_db ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import marshmallow as ma [EOL] [EOL] from database . models import PostCategories [EOL] [EOL] [EOL] async def get_all ( conn ) : [EOL] stmt = await conn . execute ( PostCategories . select ( ) ) [EOL] return await stmt . fetchall ( ) [EOL] [EOL] [EOL] async def get_category_by_title ( conn , title ) : [EOL] stmt = await conn . execute ( PostCategories . select ( ) . where ( PostCategories . c . title == title ) ) [EOL] category = await stmt . first ( ) [EOL] if not category : [EOL] raise ma . ValidationError ( message = f' [string] { title }' ) [EOL] return category [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , Dict [EOL] import typing [EOL] import builtins [EOL] from typing import Dict [EOL] [EOL] from database . models import Post [EOL] [EOL] [EOL] async def add_post ( conn , data ) : [EOL] stmt = Post . insert ( ) . values ( category_id = data [ [string] ] , title = data [ [string] ] , text = data [ [string] ] , main_img = data [ [string] ] , created_at = data [ [string] ] , last_updated = data [ [string] ] ) [EOL] await conn . execute ( stmt ) [EOL] [EOL] [EOL] async def get_all ( conn , data ) : [EOL] [comment] [EOL] [EOL] if data . get ( [string] ) and data . get ( [string] ) : [EOL] query = Post . select ( ) . order_by ( Post . c . last_updated . desc ( ) ) . limit ( data [ [string] ] ) . offset ( data [ [string] ] ) [EOL] elif data . get ( [string] ) : [EOL] query = Post . select ( ) . order_by ( Post . c . last_updated . desc ( ) ) . limit ( data [ [string] ] ) [EOL] elif data . get ( [string] ) : [EOL] query = Post . select ( ) . order_by ( Post . c . last_updated . desc ( ) ) . offset ( data [ [string] ] ) [EOL] else : [EOL] query = Post . select ( ) . order_by ( Post . c . last_updated . desc ( ) ) [EOL] [EOL] result = await conn . execute ( query ) [EOL] return await result . fetchall ( ) [EOL] [EOL] [EOL] async def get_all_by_category_id ( conn , data ) : [EOL] [comment] [EOL] [EOL] if data . get ( [string] ) and data . get ( [string] ) : [EOL] query = Post . select ( ) . where ( Post . c . category_id == data [ [string] ] ) . order_by ( Post . c . last_updated . desc ( ) ) . limit ( data [ [string] ] ) . offset ( data [ [string] ] ) [EOL] elif data . get ( [string] ) : [EOL] query = Post . select ( ) . where ( Post . c . category_id == data [ [string] ] ) . order_by ( Post . c . last_updated . desc ( ) ) . limit ( data [ [string] ] ) [EOL] elif data . get ( [string] ) : [EOL] query = Post . select ( ) . where ( Post . c . category_id == data [ [string] ] ) . order_by ( Post . c . last_updated . desc ( ) ) . offset ( data [ [string] ] ) [EOL] else : [EOL] query = Post . select ( ) . where ( Post . c . category_id == data [ [string] ] ) . order_by ( Post . c . last_updated . desc ( ) ) [EOL] [EOL] result = await conn . execute ( query ) [EOL] return await result . fetchall ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from sqlalchemy import Table , Column , MetaData , Integer , String , ForeignKeyConstraint , DateTime [EOL] [EOL] [EOL] metadata = MetaData ( ) [EOL] metadata . clear ( ) [EOL] [EOL] PostCategories = Table ( [string] , metadata , Column ( [string] , Integer , primary_key = True ) , Column ( [string] , String ( length = [number] ) , nullable = False , unique = True ) , ) [EOL] [EOL] Post = Table ( [string] , metadata , Column ( [string] , Integer , primary_key = True ) , Column ( [string] , Integer , nullable = False ) , Column ( [string] , String ( length = [number] ) , nullable = False ) , Column ( [string] , String , nullable = False ) , Column ( [string] , String , nullable = False ) , Column ( [string] , DateTime , nullable = False ) , Column ( [string] , DateTime , nullable = False ) , ForeignKeyConstraint ( [ [string] ] , [ PostCategories . c . id ] , name = [string] , ondelete = [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0