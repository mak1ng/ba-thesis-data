[comment] [EOL] from typing import List [EOL] import pathlib [EOL] import argparse [EOL] import typing [EOL] [docstring] [EOL] from pathlib import Path [EOL] import hdf5tester as h5t [EOL] [EOL] if __name__ == [string] : [EOL] from argparse import ArgumentParser [EOL] [EOL] p = ArgumentParser ( ) [EOL] p . add_argument ( [string] , help = [string] ) [EOL] p . add_argument ( [string] , help = [string] , nargs = [string] ) [EOL] p . add_argument ( [string] , [string] , action = [string] , default = [number] ) [EOL] P = p . parse_args ( ) [EOL] [EOL] f = Path ( P . fn ) . expanduser ( ) . resolve ( strict = True ) [EOL] if f . is_dir ( ) : [EOL] flist = list ( f . glob ( [string] ) ) [EOL] elif f . is_file ( ) : [EOL] flist = [ f ] [EOL] else : [EOL] raise FileNotFoundError ( f" [string] { flist } [string] " ) [EOL] [EOL] for fn in flist : [EOL] h5t . checkh5 ( fn , P . var ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $typing.List[pathlib.Path]$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $typing.List[pathlib.Path]$ 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[pathlib.Path]$ 0 0 0 0 0 0 0 0 0 $typing.List[pathlib.Path]$ 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from setuptools import setup [EOL] [EOL] setup ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import argparse [EOL] import builtins [EOL] [docstring] [EOL] import h5py [EOL] import argparse [EOL] from pathlib import Path [EOL] [EOL] [EOL] p = argparse . ArgumentParser ( description = [string] ) [EOL] p . add_argument ( [string] , help = [string] ) [EOL] P = p . parse_args ( ) [EOL] [EOL] [EOL] def print_key ( name , obj ) : [EOL] if obj . file . filename . endswith ( [string] ) : [EOL] if [string] in obj . name : [EOL] return [EOL] try : [EOL] print ( name , obj . dtype , obj . shape ) [EOL] except AttributeError : [EOL] pass [EOL] [EOL] [EOL] with h5py . File ( Path ( P . filename ) . expanduser ( ) ) as f : [EOL] f . visititems ( print_key ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import pathlib [EOL] from pathlib import Path [EOL] import hdf5tester as h5t [EOL] import pytest [EOL] [EOL] R = Path ( __file__ ) . parent [EOL] FN = R / [string] [EOL] VAR = [string] [EOL] [EOL] [EOL] def test_file ( ) : [EOL] [EOL] h5t . checkh5 ( FN ) [EOL] [EOL] [EOL] def test_var ( ) : [EOL] [EOL] h5t . checkh5_var ( FN , VAR ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] pytest . main ( [ [string] , __file__ ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple , List , Union , Any [EOL] import pathlib [EOL] import typing [EOL] import builtins [EOL] import logging [EOL] from pathlib import Path [EOL] import h5py [EOL] from typing import Union , List , Tuple [EOL] [EOL] __all__ = [ [string] ] [EOL] [EOL] [EOL] def checkh5 ( fn , var = None ) : [EOL] fn = Path ( fn ) . expanduser ( ) . resolve ( strict = True ) [EOL] [EOL] if var : [EOL] if isinstance ( var , str ) : [EOL] var = var . split ( ) [EOL] [EOL] for v in var : [EOL] checkh5_var ( fn , v ) [EOL] [EOL] return [EOL] [comment] [EOL] with h5py . File ( fn , [string] ) as f : [EOL] f . visititems ( h5print ) [EOL] [EOL] [EOL] def h5print ( name , obj ) : [EOL] [EOL] if isinstance ( obj , h5py . Dataset ) : [EOL] try : [EOL] print ( f"{ name } [string] { obj . dtype } [string] { obj . shape }" ) [EOL] except RuntimeError : [EOL] logging . error ( f" [string] { name } [string] { obj . file . filename }" ) [EOL] elif isinstance ( obj , h5py . Group ) : [EOL] obj . visititems ( h5print ) [EOL] [EOL] [EOL] def checkh5_var ( fn , var ) : [EOL] assert isinstance ( var , str ) [EOL] print ( [string] , fn . name , var ) [EOL] with h5py . File ( fn , [string] ) as f : [EOL] print ( f" [string] { f [ var ] . fletcher32 } [string] { f [ var ] . chunks } [string] { f [ var ] . shape }" ) [EOL] [comment] [EOL] Nframe = f [ var ] . shape [ [number] ] [EOL] for i in range ( Nframe ) : [EOL] try : [EOL] f [ var ] [ i ] [EOL] if i and not i % [number] : [EOL] print ( i ) [EOL] except OSError as e : [EOL] logging . error ( f"{ e } [string] { i }" ) [EOL] [EOL] return f [ var ] . shape [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0