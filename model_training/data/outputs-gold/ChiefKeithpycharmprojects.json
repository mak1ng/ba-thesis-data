print ( [string] ) [EOL]	0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Tuple , Any , Dict , List [EOL] import typing [EOL] import random , sys , time , math , pygame [EOL] from pygame . locals import * [EOL] [EOL] FPS = [number] [comment] [EOL] WINWIDTH = [number] [comment] [EOL] WINHEIGHT = [number] [comment] [EOL] HALF_WINWIDTH = int ( WINWIDTH / [number] ) [EOL] HALF_WINHEIGHT = int ( WINHEIGHT / [number] ) [EOL] [EOL] GRASSCOLOR = ( [number] , [number] , [number] ) [EOL] WHITE = ( [number] , [number] , [number] ) [EOL] RED = ( [number] , [number] , [number] ) [EOL] [EOL] CAMERASLACK = [number] [comment] [EOL] MOVERATE = [number] [comment] [EOL] BOUNCERATE = [number] [comment] [EOL] BOUNCEHEIGHT = [number] [comment] [EOL] STARTSIZE = [number] [comment] [EOL] WINSIZE = [number] [comment] [EOL] INVULNTIME = [number] [comment] [EOL] GAMEOVERTIME = [number] [comment] [EOL] MAXHEALTH = [number] [comment] [EOL] [EOL] NUMGRASS = [number] [comment] [EOL] NUMSQUIRRELS = [number] [comment] [EOL] SQUIRRELMINSPEED = [number] [comment] [EOL] SQUIRRELMAXSPEED = [number] [comment] [EOL] DIRCHANGEFREQ = [number] [comment] [EOL] LEFT = [string] [EOL] RIGHT = [string] [EOL] [EOL] [docstring] [EOL] [EOL] def main ( ) : [EOL] global FPSCLOCK , DISPLAYSURF , BASICFONT , L_SQUIR_IMG , R_SQUIR_IMG , GRASSIMAGES [EOL] [EOL] pygame . init ( ) [EOL] FPSCLOCK = pygame . time . Clock ( ) [EOL] pygame . display . set_icon ( pygame . image . load ( [string] ) ) [EOL] DISPLAYSURF = pygame . display . set_mode ( ( WINWIDTH , WINHEIGHT ) ) [EOL] pygame . display . set_caption ( [string] ) [EOL] BASICFONT = pygame . font . Font ( [string] , [number] ) [EOL] [EOL] [comment] [EOL] L_SQUIR_IMG = pygame . image . load ( [string] ) [EOL] R_SQUIR_IMG = pygame . transform . flip ( L_SQUIR_IMG , True , False ) [EOL] GRASSIMAGES = [ ] [EOL] for i in range ( [number] , [number] ) : [EOL] GRASSIMAGES . append ( pygame . image . load ( [string] % i ) ) [EOL] [EOL] while True : [EOL] runGame ( ) [EOL] [EOL] [EOL] def runGame ( ) : [EOL] [comment] [EOL] invulnerableMode = False [comment] [EOL] invulnerableStartTime = [number] [comment] [EOL] gameOverMode = False [comment] [EOL] gameOverStartTime = [number] [comment] [EOL] winMode = False [comment] [EOL] [EOL] [comment] [EOL] gameOverSurf = BASICFONT . render ( [string] , True , WHITE ) [EOL] gameOverRect = gameOverSurf . get_rect ( ) [EOL] gameOverRect . center = ( HALF_WINWIDTH , HALF_WINHEIGHT ) [EOL] [EOL] winSurf = BASICFONT . render ( [string] , True , WHITE ) [EOL] winRect = winSurf . get_rect ( ) [EOL] winRect . center = ( HALF_WINWIDTH , HALF_WINHEIGHT ) [EOL] [EOL] winSurf2 = BASICFONT . render ( [string] , True , WHITE ) [EOL] winRect2 = winSurf2 . get_rect ( ) [EOL] winRect2 . center = ( HALF_WINWIDTH , HALF_WINHEIGHT + [number] ) [EOL] [EOL] [comment] [EOL] camerax = [number] [EOL] cameray = [number] [EOL] [EOL] grassObjs = [ ] [comment] [EOL] squirrelObjs = [ ] [comment] [EOL] [comment] [EOL] playerObj = { [string] : pygame . transform . scale ( L_SQUIR_IMG , ( STARTSIZE , STARTSIZE ) ) , [string] : LEFT , [string] : STARTSIZE , [string] : HALF_WINWIDTH , [string] : HALF_WINHEIGHT , [string] : [number] , [string] : MAXHEALTH } [EOL] [EOL] moveLeft = False [EOL] moveRight = False [EOL] moveUp = False [EOL] moveDown = False [EOL] [EOL] [comment] [EOL] for i in range ( [number] ) : [EOL] grassObjs . append ( makeNewGrass ( camerax , cameray ) ) [EOL] grassObjs [ i ] [ [string] ] = random . randint ( [number] , WINWIDTH ) [EOL] grassObjs [ i ] [ [string] ] = random . randint ( [number] , WINHEIGHT ) [EOL] [EOL] while True : [comment] [EOL] [comment] [EOL] if invulnerableMode and time . time ( ) - invulnerableStartTime > INVULNTIME : [EOL] invulnerableMode = False [EOL] [EOL] [comment] [EOL] for sObj in squirrelObjs : [EOL] [comment] [EOL] sObj [ [string] ] += sObj [ [string] ] [EOL] sObj [ [string] ] += sObj [ [string] ] [EOL] sObj [ [string] ] += [number] [EOL] if sObj [ [string] ] > sObj [ [string] ] : [EOL] sObj [ [string] ] = [number] [comment] [EOL] [EOL] [comment] [EOL] if random . randint ( [number] , [number] ) < DIRCHANGEFREQ : [EOL] sObj [ [string] ] = getRandomVelocity ( ) [EOL] sObj [ [string] ] = getRandomVelocity ( ) [EOL] if sObj [ [string] ] > [number] : [comment] [EOL] sObj [ [string] ] = pygame . transform . scale ( R_SQUIR_IMG , ( sObj [ [string] ] , sObj [ [string] ] ) ) [EOL] else : [comment] [EOL] sObj [ [string] ] = pygame . transform . scale ( L_SQUIR_IMG , ( sObj [ [string] ] , sObj [ [string] ] ) ) [EOL] [EOL] [EOL] [comment] [EOL] for i in range ( len ( grassObjs ) - [number] , - [number] , - [number] ) : [EOL] if isOutsideActiveArea ( camerax , cameray , grassObjs [ i ] ) : [EOL] del grassObjs [ i ] [EOL] for i in range ( len ( squirrelObjs ) - [number] , - [number] , - [number] ) : [EOL] if isOutsideActiveArea ( camerax , cameray , squirrelObjs [ i ] ) : [EOL] del squirrelObjs [ i ] [EOL] [EOL] [comment] [EOL] while len ( grassObjs ) < NUMGRASS : [EOL] grassObjs . append ( makeNewGrass ( camerax , cameray ) ) [EOL] while len ( squirrelObjs ) < NUMSQUIRRELS : [EOL] squirrelObjs . append ( makeNewSquirrel ( camerax , cameray ) ) [EOL] [EOL] [comment] [EOL] playerCenterx = playerObj [ [string] ] + int ( playerObj [ [string] ] / [number] ) [EOL] playerCentery = playerObj [ [string] ] + int ( playerObj [ [string] ] / [number] ) [EOL] if ( camerax + HALF_WINWIDTH ) - playerCenterx > CAMERASLACK : [EOL] camerax = playerCenterx + CAMERASLACK - HALF_WINWIDTH [EOL] elif playerCenterx - ( camerax + HALF_WINWIDTH ) > CAMERASLACK : [EOL] camerax = playerCenterx - CAMERASLACK - HALF_WINWIDTH [EOL] if ( cameray + HALF_WINHEIGHT ) - playerCentery > CAMERASLACK : [EOL] cameray = playerCentery + CAMERASLACK - HALF_WINHEIGHT [EOL] elif playerCentery - ( cameray + HALF_WINHEIGHT ) > CAMERASLACK : [EOL] cameray = playerCentery - CAMERASLACK - HALF_WINHEIGHT [EOL] [EOL] [comment] [EOL] DISPLAYSURF . fill ( GRASSCOLOR ) [EOL] [EOL] [comment] [EOL] for gObj in grassObjs : [EOL] gRect = pygame . Rect ( ( gObj [ [string] ] - camerax , gObj [ [string] ] - cameray , gObj [ [string] ] , gObj [ [string] ] ) ) [EOL] DISPLAYSURF . blit ( GRASSIMAGES [ gObj [ [string] ] ] , gRect ) [EOL] [EOL] [EOL] [comment] [EOL] for sObj in squirrelObjs : [EOL] sObj [ [string] ] = pygame . Rect ( ( sObj [ [string] ] - camerax , sObj [ [string] ] - cameray - getBounceAmount ( sObj [ [string] ] , sObj [ [string] ] , sObj [ [string] ] ) , sObj [ [string] ] , sObj [ [string] ] ) ) [EOL] DISPLAYSURF . blit ( sObj [ [string] ] , sObj [ [string] ] ) [EOL] [EOL] [EOL] [comment] [EOL] flashIsOn = round ( time . time ( ) , [number] ) * [number] % [number] == [number] [EOL] if not gameOverMode and not ( invulnerableMode and flashIsOn ) : [EOL] playerObj [ [string] ] = pygame . Rect ( ( playerObj [ [string] ] - camerax , playerObj [ [string] ] - cameray - getBounceAmount ( playerObj [ [string] ] , BOUNCERATE , BOUNCEHEIGHT ) , playerObj [ [string] ] , playerObj [ [string] ] ) ) [EOL] DISPLAYSURF . blit ( playerObj [ [string] ] , playerObj [ [string] ] ) [EOL] [EOL] [EOL] [comment] [EOL] drawHealthMeter ( playerObj [ [string] ] ) [EOL] [EOL] for event in pygame . event . get ( ) : [comment] [EOL] if event . type == QUIT : [EOL] terminate ( ) [EOL] [EOL] elif event . type == KEYDOWN : [EOL] if event . key in ( K_UP , K_w ) : [EOL] moveDown = False [EOL] moveUp = True [EOL] elif event . key in ( K_DOWN , K_s ) : [EOL] moveUp = False [EOL] moveDown = True [EOL] elif event . key in ( K_LEFT , K_a ) : [EOL] moveRight = False [EOL] moveLeft = True [EOL] if playerObj [ [string] ] != LEFT : [comment] [EOL] playerObj [ [string] ] = pygame . transform . scale ( L_SQUIR_IMG , ( playerObj [ [string] ] , playerObj [ [string] ] ) ) [EOL] playerObj [ [string] ] = LEFT [EOL] elif event . key in ( K_RIGHT , K_d ) : [EOL] moveLeft = False [EOL] moveRight = True [EOL] if playerObj [ [string] ] != RIGHT : [comment] [EOL] playerObj [ [string] ] = pygame . transform . scale ( R_SQUIR_IMG , ( playerObj [ [string] ] , playerObj [ [string] ] ) ) [EOL] playerObj [ [string] ] = RIGHT [EOL] elif winMode and event . key == K_r : [EOL] return [EOL] [EOL] elif event . type == KEYUP : [EOL] [comment] [EOL] if event . key in ( K_LEFT , K_a ) : [EOL] moveLeft = False [EOL] elif event . key in ( K_RIGHT , K_d ) : [EOL] moveRight = False [EOL] elif event . key in ( K_UP , K_w ) : [EOL] moveUp = False [EOL] elif event . key in ( K_DOWN , K_s ) : [EOL] moveDown = False [EOL] [EOL] elif event . key == K_ESCAPE : [EOL] terminate ( ) [EOL] [EOL] if not gameOverMode : [EOL] [comment] [EOL] if moveLeft : [EOL] playerObj [ [string] ] -= MOVERATE [EOL] if moveRight : [EOL] playerObj [ [string] ] += MOVERATE [EOL] if moveUp : [EOL] playerObj [ [string] ] -= MOVERATE [EOL] if moveDown : [EOL] playerObj [ [string] ] += MOVERATE [EOL] [EOL] if ( moveLeft or moveRight or moveUp or moveDown ) or playerObj [ [string] ] != [number] : [EOL] playerObj [ [string] ] += [number] [EOL] [EOL] if playerObj [ [string] ] > BOUNCERATE : [EOL] playerObj [ [string] ] = [number] [comment] [EOL] [EOL] [comment] [EOL] for i in range ( len ( squirrelObjs ) - [number] , - [number] , - [number] ) : [EOL] sqObj = squirrelObjs [ i ] [EOL] if [string] in sqObj and playerObj [ [string] ] . colliderect ( sqObj [ [string] ] ) : [EOL] [comment] [EOL] [EOL] if sqObj [ [string] ] * sqObj [ [string] ] <= playerObj [ [string] ] ** [number] : [EOL] [comment] [EOL] playerObj [ [string] ] += int ( ( sqObj [ [string] ] * sqObj [ [string] ] ) ** [number] ) + [number] [EOL] del squirrelObjs [ i ] [EOL] [EOL] if playerObj [ [string] ] == LEFT : [EOL] playerObj [ [string] ] = pygame . transform . scale ( L_SQUIR_IMG , ( playerObj [ [string] ] , playerObj [ [string] ] ) ) [EOL] if playerObj [ [string] ] == RIGHT : [EOL] playerObj [ [string] ] = pygame . transform . scale ( R_SQUIR_IMG , ( playerObj [ [string] ] , playerObj [ [string] ] ) ) [EOL] [EOL] if playerObj [ [string] ] > WINSIZE : [EOL] winMode = True [comment] [EOL] [EOL] elif not invulnerableMode : [EOL] [comment] [EOL] invulnerableMode = True [EOL] invulnerableStartTime = time . time ( ) [EOL] playerObj [ [string] ] -= [number] [EOL] if playerObj [ [string] ] == [number] : [EOL] gameOverMode = True [comment] [EOL] gameOverStartTime = time . time ( ) [EOL] else : [EOL] [comment] [EOL] DISPLAYSURF . blit ( gameOverSurf , gameOverRect ) [EOL] if time . time ( ) - gameOverStartTime > GAMEOVERTIME : [EOL] return [comment] [EOL] [EOL] [comment] [EOL] if winMode : [EOL] DISPLAYSURF . blit ( winSurf , winRect ) [EOL] DISPLAYSURF . blit ( winSurf2 , winRect2 ) [EOL] [EOL] pygame . display . update ( ) [EOL] FPSCLOCK . tick ( FPS ) [EOL] [EOL] [EOL] [EOL] [EOL] def drawHealthMeter ( currentHealth ) : [EOL] for i in range ( currentHealth ) : [comment] [EOL] pygame . draw . rect ( DISPLAYSURF , RED , ( [number] , [number] + ( [number] * MAXHEALTH ) - i * [number] , [number] , [number] ) ) [EOL] for i in range ( MAXHEALTH ) : [comment] [EOL] pygame . draw . rect ( DISPLAYSURF , WHITE , ( [number] , [number] + ( [number] * MAXHEALTH ) - i * [number] , [number] , [number] ) , [number] ) [EOL] [EOL] [EOL] def terminate ( ) : [EOL] pygame . quit ( ) [EOL] sys . exit ( ) [EOL] [EOL] [EOL] def getBounceAmount ( currentBounce , bounceRate , bounceHeight ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] return int ( math . sin ( ( math . pi / float ( bounceRate ) ) * currentBounce ) * bounceHeight ) [EOL] [EOL] def getRandomVelocity ( ) : [EOL] speed = random . randint ( SQUIRRELMINSPEED , SQUIRRELMAXSPEED ) [EOL] if random . randint ( [number] , [number] ) == [number] : [EOL] return speed [EOL] else : [EOL] return - speed [EOL] [EOL] [EOL] def getRandomOffCameraPos ( camerax , cameray , objWidth , objHeight ) : [EOL] [comment] [EOL] cameraRect = pygame . Rect ( camerax , cameray , WINWIDTH , WINHEIGHT ) [EOL] while True : [EOL] x = random . randint ( camerax - WINWIDTH , camerax + ( [number] * WINWIDTH ) ) [EOL] y = random . randint ( cameray - WINHEIGHT , cameray + ( [number] * WINHEIGHT ) ) [EOL] [comment] [EOL] [comment] [EOL] objRect = pygame . Rect ( x , y , objWidth , objHeight ) [EOL] if not objRect . colliderect ( cameraRect ) : [EOL] return x , y [EOL] [EOL] [EOL] def makeNewSquirrel ( camerax , cameray ) : [EOL] sq = { } [EOL] generalSize = random . randint ( [number] , [number] ) [EOL] multiplier = random . randint ( [number] , [number] ) [EOL] sq [ [string] ] = ( generalSize + random . randint ( [number] , [number] ) ) * multiplier [EOL] sq [ [string] ] = ( generalSize + random . randint ( [number] , [number] ) ) * multiplier [EOL] sq [ [string] ] , sq [ [string] ] = getRandomOffCameraPos ( camerax , cameray , sq [ [string] ] , sq [ [string] ] ) [EOL] sq [ [string] ] = getRandomVelocity ( ) [EOL] sq [ [string] ] = getRandomVelocity ( ) [EOL] if sq [ [string] ] < [number] : [comment] [EOL] sq [ [string] ] = pygame . transform . scale ( L_SQUIR_IMG , ( sq [ [string] ] , sq [ [string] ] ) ) [EOL] else : [comment] [EOL] sq [ [string] ] = pygame . transform . scale ( R_SQUIR_IMG , ( sq [ [string] ] , sq [ [string] ] ) ) [EOL] sq [ [string] ] = [number] [EOL] sq [ [string] ] = random . randint ( [number] , [number] ) [EOL] sq [ [string] ] = random . randint ( [number] , [number] ) [EOL] return sq [EOL] [EOL] [EOL] def makeNewGrass ( camerax , cameray ) : [EOL] gr = { } [EOL] gr [ [string] ] = random . randint ( [number] , len ( GRASSIMAGES ) - [number] ) [EOL] gr [ [string] ] = GRASSIMAGES [ [number] ] . get_width ( ) [EOL] gr [ [string] ] = GRASSIMAGES [ [number] ] . get_height ( ) [EOL] gr [ [string] ] , gr [ [string] ] = getRandomOffCameraPos ( camerax , cameray , gr [ [string] ] , gr [ [string] ] ) [EOL] gr [ [string] ] = pygame . Rect ( ( gr [ [string] ] , gr [ [string] ] , gr [ [string] ] , gr [ [string] ] ) ) [EOL] return gr [EOL] [EOL] [EOL] def isOutsideActiveArea ( camerax , cameray , obj ) : [EOL] [comment] [EOL] [comment] [EOL] boundsLeftEdge = camerax - WINWIDTH [EOL] boundsTopEdge = cameray - WINHEIGHT [EOL] boundsRect = pygame . Rect ( boundsLeftEdge , boundsTopEdge , WINWIDTH * [number] , WINHEIGHT * [number] ) [EOL] objRect = pygame . Rect ( obj [ [string] ] , obj [ [string] ] , obj [ [string] ] , obj [ [string] ] ) [EOL] return not boundsRect . colliderect ( objRect ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import random , pygame , sys [EOL] from pygame . locals import * [EOL] def hhh ( ) : [EOL] global a , b [EOL] pygame . init ( ) [EOL] a = pygame . time . Clock ( ) [EOL] b = pygame . display . set_mode ( ( [number] , [number] ) ) [EOL] j = [number] [EOL] k = [number] [EOL] pygame . display . set_caption ( [string] ) [EOL] i = c ( ) [EOL] hh = d ( False ) [EOL] h = None [EOL] b . fill ( ( [number] , [number] , [number] ) ) [EOL] g ( i ) [EOL] while True : [EOL] e = False [EOL] b . fill ( ( [number] , [number] , [number] ) ) [EOL] f ( i , hh ) [EOL] for eee in pygame . event . get ( ) : [EOL] if eee . type == QUIT or ( eee . type == KEYUP and eee . key == K_ESCAPE ) : [EOL] pygame . quit ( ) [EOL] sys . exit ( ) [EOL] elif eee . type == MOUSEMOTION : [EOL] j , k = eee . pos [EOL] elif eee . type == MOUSEBUTTONUP : [EOL] j , k = eee . pos [EOL] e = True [EOL] bb , ee = m ( j , k ) [EOL] if bb != None and ee != None : [EOL] if not hh [ bb ] [ ee ] : [EOL] n ( bb , ee ) [EOL] if not hh [ bb ] [ ee ] and e : [EOL] o ( i , [ ( bb , ee ) ] ) [EOL] hh [ bb ] [ ee ] = True [EOL] if h == None : [EOL] h = ( bb , ee ) [EOL] else : [EOL] q , fff = s ( i , h [ [number] ] , h [ [number] ] ) [EOL] r , ggg = s ( i , bb , ee ) [EOL] if q != r or fff != ggg : [EOL] pygame . time . wait ( [number] ) [EOL] p ( i , [ ( h [ [number] ] , h [ [number] ] ) , ( bb , ee ) ] ) [EOL] hh [ h [ [number] ] ] [ h [ [number] ] ] = False [EOL] hh [ bb ] [ ee ] = False [EOL] elif ii ( hh ) : [EOL] jj ( i ) [EOL] pygame . time . wait ( [number] ) [EOL] i = c ( ) [EOL] hh = d ( False ) [EOL] f ( i , hh ) [EOL] pygame . display . update ( ) [EOL] pygame . time . wait ( [number] ) [EOL] g ( i ) [EOL] h = None [EOL] pygame . display . update ( ) [EOL] a . tick ( [number] ) [EOL] def d ( ccc ) : [EOL] hh = [ ] [EOL] for i in range ( [number] ) : [EOL] hh . append ( [ ccc ] * [number] ) [EOL] return hh [EOL] def c ( ) : [EOL] rr = [ ] [EOL] for tt in ( ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) ) : [EOL] for ss in ( [string] , [string] , [string] , [string] , [string] ) : [EOL] rr . append ( ( ss , tt ) ) [EOL] random . shuffle ( rr ) [EOL] rr = rr [ : [number] ] * [number] [EOL] random . shuffle ( rr ) [EOL] bbb = [ ] [EOL] for x in range ( [number] ) : [EOL] v = [ ] [EOL] for y in range ( [number] ) : [EOL] v . append ( rr [ [number] ] ) [EOL] del rr [ [number] ] [EOL] bbb . append ( v ) [EOL] return bbb [EOL] def t ( vv , uu ) : [EOL] ww = [ ] [EOL] for i in range ( [number] , len ( uu ) , vv ) : [EOL] ww . append ( uu [ i : i + vv ] ) [EOL] return ww [EOL] def aa ( bb , ee ) : [EOL] return ( bb * [number] + [number] , ee * [number] + [number] ) [EOL] def m ( x , y ) : [EOL] for bb in range ( [number] ) : [EOL] for ee in range ( [number] ) : [EOL] oo , ddd = aa ( bb , ee ) [EOL] aaa = pygame . Rect ( oo , ddd , [number] , [number] ) [EOL] if aaa . collidepoint ( x , y ) : [EOL] return ( bb , ee ) [EOL] return ( None , None ) [EOL] def w ( ss , tt , bb , ee ) : [EOL] oo , ddd = aa ( bb , ee ) [EOL] if ss == [string] : [EOL] pygame . draw . circle ( b , tt , ( oo + [number] , ddd + [number] ) , [number] ) [EOL] pygame . draw . circle ( b , ( [number] , [number] , [number] ) , ( oo + [number] , ddd + [number] ) , [number] ) [EOL] elif ss == [string] : [EOL] pygame . draw . rect ( b , tt , ( oo + [number] , ddd + [number] , [number] , [number] ) ) [EOL] elif ss == [string] : [EOL] pygame . draw . polygon ( b , tt , ( ( oo + [number] , ddd ) , ( oo + [number] - [number] , ddd + [number] ) , ( oo + [number] , ddd + [number] - [number] ) , ( oo , ddd + [number] ) ) ) [EOL] elif ss == [string] : [EOL] for i in range ( [number] , [number] , [number] ) : [EOL] pygame . draw . line ( b , tt , ( oo , ddd + i ) , ( oo + i , ddd ) ) [EOL] pygame . draw . line ( b , tt , ( oo + i , ddd + [number] ) , ( oo + [number] , ddd + i ) ) [EOL] elif ss == [string] : [EOL] pygame . draw . ellipse ( b , tt , ( oo , ddd + [number] , [number] , [number] ) ) [EOL] def s ( bbb , bb , ee ) : [EOL] return bbb [ bb ] [ ee ] [ [number] ] , bbb [ bb ] [ ee ] [ [number] ] [EOL] def dd ( bbb , boxes , gg ) : [EOL] for box in boxes : [EOL] oo , ddd = aa ( box [ [number] ] , box [ [number] ] ) [EOL] pygame . draw . rect ( b , ( [number] , [number] , [number] ) , ( oo , ddd , [number] , [number] ) ) [EOL] ss , tt = s ( bbb , box [ [number] ] , box [ [number] ] ) [EOL] w ( ss , tt , box [ [number] ] , box [ [number] ] ) [EOL] if gg > [number] : [EOL] pygame . draw . rect ( b , ( [number] , [number] , [number] ) , ( oo , ddd , gg , [number] ) ) [EOL] pygame . display . update ( ) [EOL] a . tick ( [number] ) [EOL] def o ( bbb , cc ) : [EOL] for gg in range ( [number] , ( - [number] ) - [number] , - [number] ) : [EOL] dd ( bbb , cc , gg ) [EOL] def p ( bbb , ff ) : [EOL] for gg in range ( [number] , [number] , [number] ) : [EOL] dd ( bbb , ff , gg ) [EOL] def f ( bbb , pp ) : [EOL] for bb in range ( [number] ) : [EOL] for ee in range ( [number] ) : [EOL] oo , ddd = aa ( bb , ee ) [EOL] if not pp [ bb ] [ ee ] : [EOL] pygame . draw . rect ( b , ( [number] , [number] , [number] ) , ( oo , ddd , [number] , [number] ) ) [EOL] else : [EOL] ss , tt = s ( bbb , bb , ee ) [EOL] w ( ss , tt , bb , ee ) [EOL] def n ( bb , ee ) : [EOL] oo , ddd = aa ( bb , ee ) [EOL] pygame . draw . rect ( b , ( [number] , [number] , [number] ) , ( oo - [number] , ddd - [number] , [number] , [number] ) , [number] ) [EOL] def g ( bbb ) : [EOL] mm = d ( False ) [EOL] boxes = [ ] [EOL] for x in range ( [number] ) : [EOL] for y in range ( [number] ) : [EOL] boxes . append ( ( x , y ) ) [EOL] random . shuffle ( boxes ) [EOL] kk = t ( [number] , boxes ) [EOL] f ( bbb , mm ) [EOL] for nn in kk : [EOL] o ( bbb , nn ) [EOL] p ( bbb , nn ) [EOL] def jj ( bbb ) : [EOL] mm = d ( True ) [EOL] tt1 = ( [number] , [number] , [number] ) [EOL] tt2 = ( [number] , [number] , [number] ) [EOL] for i in range ( [number] ) : [EOL] tt1 , tt2 = tt2 , tt1 [EOL] b . fill ( tt1 ) [EOL] f ( bbb , mm ) [EOL] pygame . display . update ( ) [EOL] pygame . time . wait ( [number] ) [EOL] def ii ( hh ) : [EOL] for i in hh : [EOL] if False in i : [EOL] return False [EOL] return True [EOL] if __name__ == [string] : [EOL] hhh ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import builtins [EOL] import io [EOL] import os [EOL] import sys [EOL] [EOL] if len ( sys . argv ) != [number] : [EOL] raise Exception ( [string] ) [EOL] [EOL] f = open ( sys . argv [ [number] ] , [string] ) [EOL] try : [EOL] for key , value in os . environ . items ( ) : [EOL] s = [string] % ( key , value ) [EOL] f . write ( s . encode ( [string] ) ) [EOL] finally : [EOL] f . close ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import sys [EOL] import os . path [EOL] for x in sys . path : [EOL] if x != os . path . dirname ( sys . argv [ [number] ] ) and x != [string] : sys . stdout . write ( x + chr ( [number] ) )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import tarfile [EOL] import sys [EOL] import traceback [EOL] import getopt [EOL] import os [EOL] [EOL] ERROR_WRONG_USAGE = [number] [EOL] ERROR_NO_PIP = [number] [EOL] ERROR_NO_SETUPTOOLS = [number] [EOL] ERROR_EXCEPTION = [number] [EOL] [EOL] os . putenv ( [string] , [string] ) [EOL] [EOL] def exit ( retcode ) : [EOL] major , minor , micro , release , serial = sys . version_info [EOL] version = major * [number] + minor [EOL] if version < [number] : [EOL] import os [EOL] os . _exit ( retcode ) [EOL] else : [EOL] sys . exit ( retcode ) [EOL] [EOL] [EOL] def usage ( ) : [EOL] sys . stderr . write ( [string] ) [EOL] sys . stderr . flush ( ) [EOL] exit ( ERROR_WRONG_USAGE ) [EOL] [EOL] [EOL] def error ( message , retcode ) : [EOL] sys . stderr . write ( [string] % message ) [EOL] sys . stderr . flush ( ) [EOL] exit ( retcode ) [EOL] [EOL] [EOL] def error_no_pip ( ) : [EOL] type , value , tb = sys . exc_info ( ) [EOL] if tb is not None and tb . tb_next is None : [EOL] error ( [string] , ERROR_NO_PIP ) [EOL] else : [EOL] error ( traceback . format_exc ( ) , ERROR_EXCEPTION ) [EOL] [EOL] [EOL] def do_list ( ) : [EOL] try : [EOL] import pkg_resources [EOL] except ImportError : [EOL] error ( [string] , ERROR_NO_SETUPTOOLS ) [EOL] for pkg in pkg_resources . working_set : [EOL] try : [EOL] requirements = pkg . requires ( ) [EOL] except Exception : [EOL] requirements = [ ] [EOL] requires = [string] . join ( [ str ( x ) for x in requirements ] ) [EOL] sys . stdout . write ( [string] . join ( [ pkg . project_name , pkg . version , pkg . location , requires ] ) + chr ( [number] ) ) [EOL] sys . stdout . flush ( ) [EOL] [EOL] [EOL] def do_get_versions ( urls , req ) : [EOL] if req is not None : [EOL] for version in VersionsFinder ( urls ) . get_versions ( req ) : [EOL] if len ( version ) > [number] : [EOL] sys . stdout . write ( version [ [number] ] + chr ( [number] ) ) [EOL] sys . stdout . flush ( ) [EOL] [EOL] [EOL] [EOL] def do_get_latest_version ( urls , req ) : [EOL] try : [EOL] from pip . index import PackageFinder , Link [EOL] except ImportError : [EOL] error_no_pip ( ) [EOL] [EOL] class VersionsFinder ( PackageFinder ) : [EOL] def __init__ ( self , index_urls , * args , ** kwargs ) : [EOL] super ( VersionsFinder , self ) . __init__ ( [ ] , index_urls , * args , ** kwargs ) [EOL] [EOL] def get_versions ( self , req ) : [EOL] class Req : [EOL] def __init__ ( self , name ) : [EOL] self . name = name [EOL] [EOL] def mkurl_pypi_url ( url ) : [EOL] loc = os . path . join ( url , req ) [EOL] if not loc . endswith ( [string] ) : [EOL] loc += [string] [EOL] return loc [EOL] [EOL] locations = [ mkurl_pypi_url ( url ) for url in self . index_urls ] + self . find_links [EOL] locations = [ Link ( url , trusted = True ) for url in locations ] [EOL] [EOL] versions = [ ] [EOL] for page in self . _get_pages ( locations , Req ( req ) ) : [EOL] versions . extend ( self . _package_versions ( page . links , req . lower ( ) ) ) [EOL] [EOL] return sorted ( list ( versions ) , reverse = True ) [EOL] if req is not None : [EOL] for version in VersionsFinder ( urls ) . get_versions ( req ) : [EOL] if len ( version ) > [number] : [EOL] sys . stdout . write ( version [ [number] ] + chr ( [number] ) ) [EOL] sys . stdout . flush ( ) [EOL] return [EOL] return [string] [EOL] [EOL] def do_install ( pkgs ) : [EOL] try : [EOL] import pip [EOL] except ImportError : [EOL] error_no_pip ( ) [EOL] return pip . main ( [ [string] ] + pkgs ) [EOL] [EOL] [EOL] def do_uninstall ( pkgs ) : [EOL] try : [EOL] import pip [EOL] except ImportError : [EOL] error_no_pip ( ) [EOL] return pip . main ( [ [string] , [string] ] + pkgs ) [EOL] [EOL] [EOL] def do_pyvenv ( path , system_site_packages ) : [EOL] try : [EOL] import venv [EOL] except ImportError : [EOL] error ( [string] , ERROR_EXCEPTION ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] venv . create ( path , system_site_packages = system_site_packages ) [EOL] [EOL] [EOL] def do_untar ( name ) : [EOL] import tempfile [EOL] [EOL] directory_name = tempfile . mkdtemp ( [string] ) [EOL] [EOL] import tarfile [EOL] [EOL] tar = tarfile . open ( name ) [EOL] for item in tar : [EOL] tar . extract ( item , directory_name ) [EOL] [EOL] sys . stdout . write ( directory_name + chr ( [number] ) ) [EOL] sys . stdout . flush ( ) [EOL] return [number] [EOL] [EOL] [EOL] def mkdtemp_ifneeded ( ) : [EOL] try : [EOL] ind = sys . argv . index ( [string] ) [EOL] if not os . path . exists ( sys . argv [ ind + [number] ] ) : [EOL] import tempfile [EOL] [EOL] sys . argv [ ind + [number] ] = tempfile . mkdtemp ( [string] ) [EOL] return sys . argv [ ind + [number] ] [EOL] except : [EOL] pass [EOL] [EOL] return None [EOL] [EOL] [EOL] def main ( ) : [EOL] retcode = [number] [EOL] try : [EOL] if len ( sys . argv ) < [number] : [EOL] usage ( ) [EOL] cmd = sys . argv [ [number] ] [EOL] if cmd == [string] : [EOL] if len ( sys . argv ) != [number] : [EOL] usage ( ) [EOL] do_list ( ) [EOL] elif cmd == [string] : [EOL] if len ( sys . argv ) < [number] : [EOL] usage ( ) [EOL] do_get_latest_version ( sys . argv [ [number] : ] , sys . argv [ [number] ] ) [EOL] elif cmd == [string] : [EOL] if len ( sys . argv ) < [number] : [EOL] usage ( ) [EOL] [EOL] rmdir = mkdtemp_ifneeded ( ) [EOL] [EOL] pkgs = sys . argv [ [number] : ] [EOL] retcode = do_install ( pkgs ) [EOL] [EOL] if rmdir is not None : [EOL] import shutil [EOL] shutil . rmtree ( rmdir ) [EOL] [EOL] [EOL] elif cmd == [string] : [EOL] if len ( sys . argv ) < [number] : [EOL] usage ( ) [EOL] name = sys . argv [ [number] ] [EOL] retcode = do_untar ( name ) [EOL] elif cmd == [string] : [EOL] if len ( sys . argv ) < [number] : [EOL] usage ( ) [EOL] pkgs = sys . argv [ [number] : ] [EOL] retcode = do_uninstall ( pkgs ) [EOL] elif cmd == [string] : [EOL] opts , args = getopt . getopt ( sys . argv [ [number] : ] , [string] , [ [string] ] ) [EOL] if len ( args ) != [number] : [EOL] usage ( ) [EOL] path = args [ [number] ] [EOL] system_site_packages = False [EOL] for opt , arg in opts : [EOL] if opt == [string] : [EOL] system_site_packages = True [EOL] do_pyvenv ( path , system_site_packages ) [EOL] else : [EOL] usage ( ) [EOL] except Exception : [EOL] traceback . print_exc ( ) [EOL] exit ( ERROR_EXCEPTION ) [EOL] exit ( retcode ) [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [docstring] [EOL] [EOL] __import__ ( [string] ) . declare_namespace ( __name__ ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] __version__ = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Tuple [EOL] import typing [EOL] [docstring] [EOL] [EOL] from docutils import writers [EOL] [EOL] [EOL] class Writer ( writers . UnfilteredWriter ) : [EOL] [EOL] supported = ( [string] , ) [EOL] [docstring] [EOL] [EOL] config_section = [string] [EOL] config_section_dependencies = ( [string] , ) [EOL] [EOL] def translate ( self ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [EOL] schemes = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] [string] ) , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] ) , [string] : ( [string] [string] ) , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Tuple [EOL] import typing [EOL] [docstring] [EOL] [EOL] from docutils import parsers [EOL] [EOL] [EOL] class Parser ( parsers . Parser ) : [EOL] [EOL] [docstring] [EOL] [EOL] supported = ( [string] , ) [EOL] [EOL] config_section = [string] [EOL] config_section_dependencies = ( [string] , ) [EOL] [EOL] def parse ( self , inputstring , document ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [EOL] schemes = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] [string] ) , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] ) , [string] : ( [string] [string] ) , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : ( [string] [string] ) , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Tuple [EOL] import typing [EOL] [docstring] [EOL] [EOL] from docutils import writers [EOL] [EOL] [EOL] class Writer ( writers . UnfilteredWriter ) : [EOL] [EOL] supported = ( [string] , ) [EOL] [docstring] [EOL] [EOL] config_section = [string] [EOL] config_section_dependencies = ( [string] , ) [EOL] [EOL] def translate ( self ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Tuple [EOL] import typing [EOL] [docstring] [EOL] [EOL] from docutils import parsers [EOL] [EOL] [EOL] class Parser ( parsers . Parser ) : [EOL] [EOL] [docstring] [EOL] [EOL] supported = ( [string] , ) [EOL] [EOL] config_section = [string] [EOL] config_section_dependencies = ( [string] , ) [EOL] [EOL] def parse ( self , inputstring , document ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from typing import Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] __docformat__ = [string] [EOL] [EOL] [EOL] directives = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [docstring] [EOL] [EOL] roles = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import io [EOL] import yappi [EOL] [EOL] class YappiProfile ( object ) : [EOL] [docstring] [EOL] def __init__ ( self ) : [EOL] self . stats = None [EOL] [EOL] def runcall ( self , func , * args , ** kw ) : [EOL] self . enable ( ) [EOL] try : [EOL] return func ( * args , ** kw ) [EOL] finally : [EOL] self . disable ( ) [EOL] [EOL] def enable ( self ) : [EOL] yappi . start ( ) [EOL] [EOL] def disable ( self ) : [EOL] yappi . stop ( ) [EOL] [EOL] def create_stats ( self ) : [EOL] self . stats = yappi . convert2pstats ( yappi . get_func_stats ( ) ) . stats [EOL] [EOL] def getstats ( self ) : [EOL] self . create_stats ( ) [EOL] [EOL] return self . stats [EOL] [EOL] def dump_stats ( self , file ) : [EOL] import marshal [EOL] f = open ( file , [string] ) [EOL] marshal . dump ( self . getstats ( ) , f ) [EOL] f . close ( ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $io.BufferedWriter$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $io.BufferedWriter$ 0 0 $io.BufferedWriter$ 0 0 0 0 0 0
__author__ = [string] [EOL]	$builtins.str$ 0 0 0
[comment] [EOL] [EOL] from typing import List [EOL] import sys [EOL] import typing [EOL] import sys [EOL] [EOL] from . hook import install_import_hook , remove_import_hook [EOL] from . parser import load , load_module , load_fp [EOL] [EOL] __version__ = [string] [EOL] __python__ = sys . version_info [EOL] __all__ = [ [string] , [string] , [string] , [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $sys._version_info$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from __future__ import absolute_import [EOL] [EOL] import sys [EOL] [EOL] from . parser import load_module [EOL] [EOL] [EOL] class ThriftImporter ( object ) : [EOL] def __init__ ( self , extension = [string] ) : [EOL] self . extension = extension [EOL] [EOL] def __eq__ ( self , other ) : [EOL] return self . __class__ . __module__ == other . __class__ . __module__ and self . __class__ . __name__ == other . __class__ . __name__ and self . extension == other . extension [EOL] [EOL] def find_module ( self , fullname , path = None ) : [EOL] if fullname . endswith ( self . extension ) : [EOL] return self [EOL] [EOL] def load_module ( self , fullname ) : [EOL] return load_module ( fullname ) [EOL] _imp = ThriftImporter ( ) [EOL] [EOL] [EOL] def install_import_hook ( ) : [EOL] global _imp [EOL] sys . meta_path [ : ] = [ x for x in sys . meta_path if _imp != x ] + [ _imp ] [EOL] [EOL] [EOL] def remove_import_hook ( ) : [EOL] global _imp [EOL] sys . meta_path [ : ] = [ x for x in sys . meta_path if _imp != x ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from __future__ import absolute_import [EOL] [EOL] [EOL] class ThriftParserError ( Exception ) : [EOL] pass [EOL] [EOL] [EOL] class ThriftLexerError ( ThriftParserError ) : [EOL] pass [EOL] [EOL] [EOL] class ThriftGrammerError ( ThriftParserError ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] import builtins [EOL] from typing import Tuple , Any , Literal , Dict [EOL] import typing [EOL] import typing_extensions [EOL] from __future__ import absolute_import [EOL] [EOL] from . exc import ThriftLexerError [EOL] [EOL] [EOL] literals = [string] [EOL] [EOL] [EOL] thrift_reserved_keywords = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] keywords = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] tokens = ( [string] , [string] , [string] , [string] , [string] , ) + tuple ( map ( lambda kw : kw . upper ( ) , keywords ) ) [EOL] [EOL] [EOL] t_ignore = [string] [comment] [EOL] [EOL] [EOL] def t_error ( t ) : [EOL] raise ThriftLexerError ( [string] % ( t . value [ [number] ] , t . lineno ) ) [EOL] [EOL] [EOL] def t_newline ( t ) : [EOL] [docstring] [EOL] t . lexer . lineno += len ( t . value ) [EOL] [EOL] [EOL] def t_ignore_SILLYCOMM ( t ) : [EOL] [docstring] [EOL] t . lexer . lineno += t . value . count ( [string] ) [EOL] [EOL] [EOL] def t_ignore_MULTICOMM ( t ) : [EOL] [docstring] [EOL] t . lexer . lineno += t . value . count ( [string] ) [EOL] [EOL] [EOL] def t_ignore_DOCTEXT ( t ) : [EOL] [docstring] [EOL] t . lexer . lineno += t . value . count ( [string] ) [EOL] [EOL] [EOL] def t_ignore_UNIXCOMMENT ( t ) : [EOL] [docstring] [EOL] [EOL] [EOL] def t_ignore_COMMENT ( t ) : [EOL] [docstring] [EOL] [EOL] [EOL] def t_BOOLCONSTANT ( t ) : [EOL] [docstring] [EOL] t . value = t . value == [string] [EOL] return t [EOL] [EOL] [EOL] def t_DUBCONSTANT ( t ) : [EOL] [docstring] [EOL] t . value = float ( t . value ) [EOL] return t [EOL] [EOL] [EOL] def t_HEXCONSTANT ( t ) : [EOL] [docstring] [EOL] t . value = int ( t . value , [number] ) [EOL] t . type = [string] [EOL] return t [EOL] [EOL] [EOL] def t_INTCONSTANT ( t ) : [EOL] [docstring] [EOL] t . value = int ( t . value ) [EOL] return t [EOL] [EOL] [EOL] def t_LITERAL ( t ) : [EOL] [docstring] [EOL] s = t . value [ [number] : - [number] ] [EOL] maps = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] i = [number] [EOL] length = len ( s ) [EOL] val = [string] [EOL] while i < length : [EOL] if s [ i ] == [string] : [EOL] i += [number] [EOL] if s [ i ] in maps : [EOL] val += maps [ s [ i ] ] [EOL] else : [EOL] msg = [string] % s [ i ] [EOL] raise ThriftLexerError ( msg ) [EOL] else : [EOL] val += s [ i ] [EOL] [EOL] i += [number] [EOL] [EOL] t . value = val [EOL] return t [EOL] [EOL] [EOL] def t_IDENTIFIER ( t ) : [EOL] [docstring] [EOL] [EOL] if t . value in keywords : [EOL] t . type = t . value . upper ( ) [EOL] return t [EOL] if t . value in thrift_reserved_keywords : [EOL] raise ThriftLexerError ( [string] [string] % ( t . value , t . lineno ) ) [EOL] return t [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] from typing import List [EOL] import typing [EOL] __version__ = [string] [EOL] __all__ = [ [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] __version__ = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import List , Any , Dict [EOL] import typing [EOL] import os [EOL] import sys [EOL] helpers_dir = os . getenv ( [string] , sys . path [ [number] ] ) [EOL] if sys . path [ [number] ] != helpers_dir : [EOL] sys . path . insert ( [number] , helpers_dir ) [EOL] [EOL] from tcmessages import TeamcityServiceMessages [EOL] from pycharm_run_utils import adjust_sys_path [EOL] [EOL] adjust_sys_path ( False ) [EOL] [EOL] [comment] [EOL] CURRENT_DIR_NAME = [string] [EOL] if sys . argv : [EOL] last_arg = sys . argv [ - [number] ] [EOL] [EOL] if os . path . isfile ( last_arg ) : [EOL] CURRENT_DIR_NAME = os . path . dirname ( last_arg ) [EOL] else : [EOL] CURRENT_DIR_NAME = last_arg [EOL] if not str ( last_arg ) . endswith ( os . sep ) : [EOL] CURRENT_DIR_NAME = last_arg + os . sep [EOL] [EOL] messages = TeamcityServiceMessages ( prepend_linebreak = True ) [EOL] if not [string] in os . environ : [EOL] messages . testMatrixEntered ( ) [EOL] try : [EOL] import pytest [EOL] PYVERSION = [ int ( x ) for x in pytest . __version__ . split ( [string] ) ] [EOL] except : [EOL] import py [EOL] PYVERSION = [ int ( x ) for x in py . __version__ . split ( [string] ) ] [EOL] [EOL] def get_name ( nodeid ) : [EOL] return nodeid . split ( [string] ) [ - [number] ] [EOL] [EOL] def fspath_to_url ( fspath ) : [EOL] return [string] + str ( fspath ) . replace ( [string] , [string] ) [EOL] [EOL] if PYVERSION > [ [number] , [number] , [number] ] : [EOL] items = { } [EOL] current_suite = None [EOL] current_file = None [EOL] current_file_suite = None [EOL] [EOL] def pytest_collection_finish ( session ) : [EOL] messages . testCount ( len ( session . items ) ) [EOL] [EOL] def pytest_runtest_logstart ( nodeid , location ) : [EOL] path = [string] + os . path . realpath ( os . path . join ( CURRENT_DIR_NAME , location [ [number] ] ) ) [EOL] if location [ [number] ] : [EOL] path += [string] + str ( location [ [number] ] + [number] ) [EOL] global current_suite , current_file , current_file_suite [EOL] current_file = nodeid . split ( [string] ) [ [number] ] [EOL] [EOL] file_suite = current_file . split ( [string] ) [ - [number] ] [EOL] if file_suite != current_file_suite : [EOL] if current_suite : [EOL] messages . testSuiteFinished ( current_suite ) [EOL] if current_file_suite : [EOL] messages . testSuiteFinished ( current_file_suite ) [EOL] current_file_suite = file_suite [EOL] if current_file_suite : [EOL] messages . testSuiteStarted ( current_file_suite , location = path ) [EOL] [EOL] if location [ [number] ] . find ( [string] ) != - [number] : [EOL] suite = location [ [number] ] . split ( [string] ) [ [number] ] [EOL] name = location [ [number] ] . split ( [string] ) [ - [number] ] [EOL] else : [EOL] name = location [ [number] ] [EOL] splitted = nodeid . split ( [string] ) [EOL] try : [EOL] ind = splitted . index ( name . split ( [string] ) [ [number] ] ) [EOL] except ValueError : [EOL] try : [EOL] ind = splitted . index ( name ) [EOL] except ValueError : [EOL] ind = [number] [EOL] if splitted [ ind - [number] ] == current_file : [EOL] suite = None [EOL] else : [EOL] suite = current_suite [EOL] if suite != current_suite : [EOL] if current_suite : [EOL] messages . testSuiteFinished ( current_suite ) [EOL] current_suite = suite [EOL] if current_suite : [EOL] messages . testSuiteStarted ( current_suite , location = path ) [EOL] messages . testStarted ( name , location = path ) [EOL] items [ nodeid ] = name [EOL] [EOL] def pytest_runtest_logreport ( report ) : [EOL] name = items [ report . nodeid ] [EOL] [EOL] if report . skipped : [EOL] messages . testIgnored ( name ) [EOL] elif report . failed : [comment] [EOL] messages . testFailed ( name , details = report . longrepr , duration = int ( report . duration * [number] ) ) [EOL] elif report . when == [string] : [EOL] messages . testFinished ( name , duration = int ( report . duration * [number] ) ) [EOL] [EOL] def pytest_sessionfinish ( session , exitstatus ) : [EOL] if not messages . number_of_tests and not current_suite and not current_file_suite : [EOL] messages . testError ( [string] , [string] ) [EOL] if current_suite : [EOL] messages . testSuiteFinished ( current_suite ) [EOL] if current_file_suite : [EOL] messages . testSuiteFinished ( current_file_suite ) [EOL] [EOL] from _pytest . terminal import TerminalReporter [EOL] class PycharmTestReporter ( TerminalReporter ) : [EOL] def __init__ ( self , config , file = None ) : [EOL] TerminalReporter . __init__ ( self , config , file ) [EOL] [EOL] def summary_errors ( self ) : [EOL] reports = self . getreports ( [string] ) [EOL] if not reports : [EOL] return [EOL] for rep in self . stats [ [string] ] : [EOL] name = rep . nodeid . split ( [string] ) [ - [number] ] [EOL] location = None [EOL] if hasattr ( rep , [string] ) : [EOL] location , lineno , domain = rep . location [EOL] [EOL] messages . testSuiteStarted ( name , location = fspath_to_url ( location ) ) [EOL] messages . testStarted ( [string] , location = fspath_to_url ( location ) ) [EOL] TerminalReporter . summary_errors ( self ) [EOL] messages . testError ( [string] ) [EOL] messages . testSuiteFinished ( name ) [EOL] [EOL] else : [EOL] def pytest_collectstart ( collector ) : [EOL] if collector . name != [string] : [EOL] messages . testSuiteStarted ( collector . name , location = fspath_to_url ( collector . fspath ) ) [EOL] [EOL] def pytest_runtest_makereport ( item , call ) : [EOL] if call . when == [string] : [EOL] fspath , lineno , msg = item . reportinfo ( ) [EOL] url = fspath_to_url ( fspath ) [EOL] if lineno : url += [string] + str ( lineno ) [EOL] [comment] [EOL] [EOL] def pytest_runtest_logreport ( report ) : [EOL] if report . item . _args : [EOL] name = report . item . function . __name__ + str ( report . item . _args ) [EOL] else : [EOL] name = report . item . name [EOL] if report . failed : [EOL] messages . testFailed ( name , details = report . longrepr ) [EOL] elif report . skipped : [EOL] messages . testIgnored ( name ) [EOL] else : [EOL] messages . testFinished ( name ) [EOL] [EOL] def pytest_collectreport ( report ) : [EOL] if report . collector . name != [string] : [EOL] messages . testSuiteFinished ( report . collector . name ) [EOL] [EOL] def pytest_itemstart ( item , node = None ) : [EOL] if item . _args : [EOL] name = item . function . __name__ + str ( item . _args ) [EOL] else : [EOL] name = item . name [EOL] if hasattr ( item , [string] ) : [EOL] path = fspath_to_url ( item . _fslineno [ [number] ] ) + [string] + str ( item . _fslineno [ [number] ] + [number] ) [EOL] else : [EOL] path = fspath_to_url ( item . fspath ) [EOL] messages . testStarted ( name , location = path ) [EOL] [EOL] [EOL] try : [EOL] @ pytest . hookimpl ( trylast = True ) def pytest_configure ( config ) : [EOL] reporter = PycharmTestReporter ( config , sys . stdout ) [EOL] config . pluginmanager . unregister ( name = [string] ) [EOL] config . pluginmanager . register ( reporter , [string] ) [EOL] except AttributeError as e : [EOL] sys . stderr . write ( [string] . format ( e ) )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $None$ 0 0 0 $None$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 $None$ 0 $None$ 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $None$ 0 0 $typing.Any$ 0 0 0 $None$ 0 0 0 $None$ 0 0 $typing.Any$ 0 0 0 $None$ 0 0 $None$ 0 0 0 0 $None$ 0 0 $typing.Any$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $None$ 0 0 0 $None$ 0 0 $typing.Any$ 0 0 0 $None$ 0 0 $None$ 0 0 0 0 $None$ 0 0 $typing.Any$ 0 0 0 $None$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $None$ 0 0 $None$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 $typing.Any$ 0 0 0 $None$ 0 0 0 $None$ 0 0 $typing.Any$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] from typing import List , Any [EOL] import typing [EOL] import re [EOL] import sys [EOL] [EOL] import pytest [EOL] from _pytest . config import get_plugin_manager [EOL] [EOL] from _jb_runner_tools import jb_start_tests , jb_patch_separator , jb_doc_args [EOL] from teamcity import pytest_plugin [EOL] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] path , targets , additional_args = jb_start_tests ( ) [EOL] sys . argv += additional_args [EOL] joined_targets = jb_patch_separator ( targets , fs_glue = [string] , python_glue = [string] , fs_to_python_glue = [string] ) [EOL] [comment] [EOL] joined_targets = [ t + [string] if [string] not in t else t for t in joined_targets ] [EOL] sys . argv += [ path ] if path else joined_targets [EOL] jb_doc_args ( [string] , sys . argv [ [number] : ] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] plugins_to_load = [ ] [EOL] if not get_plugin_manager ( ) . hasplugin ( [string] ) : [EOL] plugins_to_load . append ( pytest_plugin ) [EOL] pytest . main ( sys . argv [ [number] : ] , plugins_to_load ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0
from typing import Any [EOL] import typing [EOL] import io [EOL] import re [EOL] from io import BytesIO [EOL] [EOL] from flake8 . formatting import base [EOL] [EOL] from teamcity . messages import TeamcityServiceMessages [EOL] from teamcity import __version__ , is_running_under_teamcity [EOL] [EOL] [EOL] class TeamcityReport ( base . BaseFormatter ) : [EOL] name = [string] [EOL] version = __version__ [EOL] [EOL] options_added = False [EOL] [EOL] @ classmethod def add_options ( cls , parser ) : [EOL] if not cls . options_added : [EOL] parser . add_option ( [string] , default = is_running_under_teamcity ( ) , help = [string] ) [EOL] parser . add_option ( [string] , default = False , help = [string] ) [EOL] cls . options_added = True [EOL] [EOL] @ classmethod def parse_options ( cls , options ) : [EOL] if not options . no_teamcity : [EOL] if options . teamcity or is_running_under_teamcity ( ) : [EOL] options . format = [string] [EOL] [EOL] def format ( self , error ) : [EOL] normalized_filename = error . filename . replace ( [string] , [string] ) [EOL] position = [string] % ( normalized_filename , error . line_number , error . column_number ) [EOL] error_message = [string] % ( error . code , error . text ) [EOL] test_name = [string] % ( position , error_message ) [EOL] [EOL] line = error . physical_line [EOL] offset = error . column_number [EOL] details = [ line . rstrip ( ) , re . sub ( [string] , [string] , line [ : offset ] ) + [string] , ] [EOL] details = [string] . join ( details ) [EOL] [EOL] bytesio = BytesIO ( ) [EOL] messages = TeamcityServiceMessages ( output = bytesio ) [EOL] [EOL] messages . testStarted ( test_name ) [EOL] messages . testFailed ( test_name , error_message , details ) [EOL] messages . testFinished ( test_name ) [EOL] [EOL] return bytesio . getvalue ( ) . decode ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 $io.BytesIO$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $io.BytesIO$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 $io.BytesIO$ 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import List [EOL] import typing [EOL] import os [EOL] [EOL] __all__ = [ [string] ] [EOL] [EOL] __version__ = [string] [EOL] [EOL] teamcity_presence_env_var = [string] [EOL] [EOL] [EOL] def is_running_under_teamcity ( ) : [EOL] return os . getenv ( teamcity_presence_env_var ) is not None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0
from __future__ import absolute_import [EOL] from django . test . runner import DiscoverRunner [EOL] from teamcity . unittestpy import TeamcityTestRunner [EOL] [EOL] [EOL] class TeamcityDjangoRunner ( DiscoverRunner ) : [EOL] def run_suite ( self , suite , ** kwargs ) : [EOL] return TeamcityTestRunner ( ) . run ( suite ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
try : [EOL] from flake8 . formatting import base [comment] [EOL] except ImportError : [EOL] from teamcity . flake8_v2_plugin import * [comment] [EOL] else : [EOL] from teamcity . flake8_v3_plugin import * [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
__author__ = [string] [EOL]	$builtins.str$ 0 0 0
[comment] [EOL] [docstring] [EOL] __author__ = [string] [EOL]	0 0 0 0 $builtins.str$ 0 0 0
[comment]	0
from nose_helper . suite import ContextSuite [EOL] from nose_helper . loader import TestLoader [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0
try : [EOL] from nose_helper . _2 import * [EOL] except ( ImportError , SyntaxError ) : [EOL] from nose_helper . _3 import * [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def reraise ( exc_class , exc_val , tb ) : [EOL] raise exc_class ( exc_val ) . with_traceback ( tb ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import unittest [EOL] [EOL] from nose_helper . raise_compat import reraise [EOL] [EOL] class Failure ( unittest . TestCase ) : [EOL] [docstring] [EOL] __test__ = False [comment] [EOL] def __init__ ( self , exc_class , exc_val , tb = None ) : [EOL] self . exc_class = exc_class [EOL] self . exc_val = exc_val [EOL] unittest . TestCase . __init__ ( self ) [EOL] self . tb = tb [EOL] def __str__ ( self ) : [EOL] return [string] % ( getattr ( self . exc_class , [string] , self . exc_class ) , self . exc_val ) [EOL] [EOL] def runTest ( self ) : [EOL] if self . tb is not None : [EOL] reraise ( self . exc_class , self . exc_val , self . tb ) [EOL] else : [EOL] raise self . exc_class ( self . exc_val )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Dict [EOL] import typing [EOL] [docstring] [EOL] [EOL] [EOL] from setuptools import setup [EOL] from setuptools . dist import Distribution [EOL] from distutils . extension import Extension [EOL] import os [EOL] [EOL] class BinaryDistribution ( Distribution ) : [EOL] def is_pure ( self ) : [EOL] return False [EOL] [EOL] data_files = [ ] [EOL] [EOL] def accept_file ( f ) : [EOL] f = f . lower ( ) [EOL] for ext in [string] . split ( ) : [EOL] if f . endswith ( ext ) : [EOL] return True [EOL] [EOL] return f in [ [string] , [string] ] [EOL] [EOL] data_files . append ( ( [string] , [ os . path . join ( [string] , f ) for f in os . listdir ( [string] ) if accept_file ( f ) ] ) ) [EOL] for root , dirs , files in os . walk ( [string] ) : [EOL] for d in dirs : [EOL] data_files . append ( ( os . path . join ( root , d ) , [ os . path . join ( root , d , f ) for f in os . listdir ( os . path . join ( root , d ) ) if accept_file ( f ) ] ) ) [EOL] [EOL] import pydevd [EOL] version = pydevd . __version__ [EOL] [EOL] args = dict ( name = [string] , version = version , description = [string] , author = [string] , url = [string] , license = [string] , packages = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , py_modules = [ [string] , [string] , [string] , [string] , [string] , [string] , ] , classifiers = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , data_files = data_files , keywords = [ [string] , [string] , [string] ] , include_package_data = True , zip_safe = False , ) [EOL] [EOL] [EOL] [EOL] import sys [EOL] try : [EOL] args_with_binaries = args . copy ( ) [EOL] args_with_binaries . update ( dict ( distclass = BinaryDistribution , ext_modules = [ Extension ( [string] , [ [string] , ] ) ] ) ) [EOL] setup ( ** args_with_binaries ) [EOL] except : [EOL] [comment] [EOL] setup ( ** args ) [EOL] sys . stdout . write ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring]	0
	0
def Exec ( exp , global_vars , local_vars = None ) : [EOL] if local_vars is not None : [EOL] exec ( exp , global_vars , local_vars ) [EOL] else : [EOL] exec ( exp , global_vars )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from _pydevd_bundle . pydevd_comm import PyDBDaemonThread [EOL] from _pydevd_bundle . pydevd_constants import dict_keys [EOL] [EOL] def kill_all_pydev_threads ( ) : [EOL] threads = dict_keys ( PyDBDaemonThread . created_pydb_daemon_threads ) [EOL] for t in threads : [EOL] if hasattr ( t , [string] ) : [EOL] t . do_kill_pydev_thread ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Optional , Dict [EOL] import types [EOL] import typing [EOL] import sys [EOL] from _pydevd_bundle . pydevd_constants import STATE_RUN , PYTHON_SUSPEND [EOL] [comment] [EOL] [comment] [EOL] from _pydevd_bundle . pydevd_frame import PyDBFrame [EOL] [comment] [EOL] [EOL] version = [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] class PyDBAdditionalThreadInfo ( object ) : [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] __slots__ = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [comment] [EOL] [EOL] def __init__ ( self ) : [EOL] self . pydev_state = STATE_RUN [EOL] self . pydev_step_stop = None [EOL] self . pydev_step_cmd = - [number] [comment] [EOL] self . pydev_notify_kill = False [EOL] self . pydev_smart_step_stop = None [EOL] self . pydev_django_resolve_frame = False [EOL] self . pydev_call_from_jinja2 = None [EOL] self . pydev_call_inside_jinja2 = None [EOL] self . is_tracing = False [EOL] self . conditional_breakpoint_exception = None [EOL] self . pydev_message = [string] [EOL] self . suspend_type = PYTHON_SUSPEND [EOL] self . pydev_next_line = - [number] [EOL] self . pydev_func_name = [string] [comment] [EOL] [EOL] [EOL] def iter_frames ( self , t ) : [EOL] [comment] [EOL] current_frames = sys . _current_frames ( ) [EOL] v = current_frames . get ( t . ident ) [EOL] if v is not None : [EOL] return [ v ] [EOL] return [ ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] create_db_frame = PyDBFrame [EOL] [comment] [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] % ( self . pydev_state , self . pydev_step_stop , self . pydev_step_cmd , self . pydev_notify_kill ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,types.FrameType]$ 0 0 0 0 0 0 0 $typing.Optional[types.FrameType]$ 0 $typing.Dict[builtins.int,types.FrameType]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[types.FrameType]$ 0 0 0 0 0 0 0 $typing.Optional[types.FrameType]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Any , Pattern , Dict [EOL] import typing [EOL] [docstring] [EOL] import linecache [EOL] import re [EOL] from _pydevd_bundle . pydevd_constants import dict_contains [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] DONT_TRACE_TAG = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] RE_DECORATOR = re . compile ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] _filename_to_ignored_lines = { } [EOL] [EOL] def default_should_trace_hook ( frame , filename ) : [EOL] [docstring] [EOL] [comment] [EOL] ignored_lines = _filename_to_ignored_lines . get ( filename ) [EOL] if ignored_lines is None : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] ignored_lines = { } [EOL] lines = linecache . getlines ( filename ) [EOL] i_line = [number] [comment] [EOL] for line in lines : [EOL] j = line . find ( [string] ) [EOL] if j >= [number] : [EOL] comment = line [ j : ] [EOL] if DONT_TRACE_TAG in comment : [EOL] ignored_lines [ i_line ] = [number] [EOL] [EOL] [comment] [EOL] k = i_line - [number] [EOL] while k >= [number] : [EOL] if RE_DECORATOR . match ( lines [ k ] ) : [EOL] ignored_lines [ k ] = [number] [EOL] k -= [number] [EOL] else : [EOL] break [EOL] [EOL] k = i_line + [number] [EOL] while k <= len ( lines ) : [EOL] if RE_DECORATOR . match ( lines [ k ] ) : [EOL] ignored_lines [ k ] = [number] [EOL] k += [number] [EOL] else : [EOL] break [EOL] [EOL] i_line += [number] [EOL] [EOL] [EOL] _filename_to_ignored_lines [ filename ] = ignored_lines [EOL] [EOL] func_line = frame . f_code . co_firstlineno - [number] [comment] [EOL] return not ( dict_contains ( ignored_lines , func_line - [number] ) or dict_contains ( ignored_lines , func_line ) ) [comment] [EOL] [EOL] [EOL] should_trace_hook = None [EOL] [EOL] [EOL] def clear_trace_filter_cache ( ) : [EOL] [docstring] [EOL] global should_trace_hook [EOL] try : [EOL] [comment] [EOL] [comment] [EOL] old_hook = should_trace_hook [EOL] should_trace_hook = None [EOL] [EOL] [comment] [EOL] linecache . clearcache ( ) [EOL] _filename_to_ignored_lines . clear ( ) [EOL] [EOL] finally : [EOL] should_trace_hook = old_hook [EOL] [EOL] [EOL] def trace_filter ( mode ) : [EOL] [docstring] [EOL] global should_trace_hook [EOL] if mode is None : [EOL] mode = should_trace_hook is None [EOL] [EOL] if mode : [EOL] should_trace_hook = default_should_trace_hook [EOL] else : [EOL] should_trace_hook = None [EOL] [EOL] return mode [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0
	0
from typing import TextIO , List , Any [EOL] import socket [EOL] import typing [EOL] import sys [EOL] import unittest [EOL] import threading [EOL] import os [EOL] from nose . tools import eq_ [EOL] from _pydev_bundle . pydev_imports import StringIO , SimpleXMLRPCServer [EOL] from _pydev_bundle . pydev_localhost import get_localhost [EOL] from _pydev_bundle . pydev_console_utils import StdIn [EOL] import socket [EOL] from _pydev_bundle . pydev_ipython_console_011 import get_pydev_frontend [EOL] import time [EOL] [EOL] try : [EOL] xrange [EOL] except : [EOL] xrange = range [EOL] [EOL] [EOL] class TestBase ( unittest . TestCase ) : [EOL] [EOL] [EOL] def setUp ( self ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] self . front_end = get_pydev_frontend ( get_localhost ( ) , [number] ) [EOL] [EOL] from pydev_ipython . inputhook import set_return_control_callback [EOL] set_return_control_callback ( lambda : True ) [EOL] self . front_end . clear_buffer ( ) [EOL] [EOL] def tearDown ( self ) : [EOL] pass [EOL] [EOL] def add_exec ( self , code , expected_more = False ) : [EOL] more = self . front_end . add_exec ( code ) [EOL] eq_ ( expected_more , more ) [EOL] [EOL] def redirect_stdout ( self ) : [EOL] from IPython . utils import io [EOL] [EOL] self . original_stdout = sys . stdout [EOL] sys . stdout = io . stdout = StringIO ( ) [EOL] [EOL] def restore_stdout ( self ) : [EOL] from IPython . utils import io [EOL] io . stdout = sys . stdout = self . original_stdout [EOL] [EOL] [EOL] class TestPyDevFrontEnd ( TestBase ) : [EOL] [EOL] def testAddExec_1 ( self ) : [EOL] self . add_exec ( [string] , True ) [EOL] [EOL] def testAddExec_2 ( self ) : [EOL] [comment] [EOL] self . add_exec ( [string] , False ) [EOL] assert [string] in self . front_end . get_namespace ( ) [EOL] [EOL] def testAddExec_3 ( self ) : [EOL] assert [string] not in self . front_end . get_namespace ( ) [EOL] self . add_exec ( [string] ) [EOL] assert [string] in self . front_end . get_namespace ( ) [EOL] eq_ ( self . front_end . get_namespace ( ) [ [string] ] , [number] ) [EOL] [EOL] def test_get_namespace ( self ) : [EOL] assert [string] not in self . front_end . get_namespace ( ) [EOL] self . add_exec ( [string] ) [EOL] assert [string] in self . front_end . get_namespace ( ) [EOL] eq_ ( self . front_end . get_namespace ( ) [ [string] ] , [number] ) [EOL] [EOL] def test_complete ( self ) : [EOL] unused_text , matches = self . front_end . complete ( [string] ) [EOL] assert len ( matches ) > [number] , [string] [EOL] [EOL] def test_complete_does_not_do_python_matches ( self ) : [EOL] [comment] [EOL] [comment] [EOL] self . add_exec ( [string] ) [EOL] self . add_exec ( [string] ) [EOL] self . add_exec ( [string] ) [EOL] unused_text , matches = self . front_end . complete ( [string] ) [EOL] assert len ( matches ) == [number] [EOL] [EOL] def testGetCompletions_1 ( self ) : [EOL] [comment] [EOL] self . add_exec ( [string] ) [EOL] self . add_exec ( [string] ) [EOL] self . add_exec ( [string] ) [EOL] res = self . front_end . getCompletions ( [string] , [string] ) [EOL] matches = [ f [ [number] ] for f in res ] [EOL] assert len ( matches ) == [number] [EOL] eq_ ( set ( [ [string] , [string] , [string] ] ) , set ( matches ) ) [EOL] [EOL] def testGetCompletions_2 ( self ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] self . add_exec ( [string] ) [EOL] res = self . front_end . getCompletions ( [string] , [string] ) [EOL] matches = [ f [ [number] ] for f in res ] [EOL] assert [string] in matches [EOL] [EOL] def testGetCompletions_3 ( self ) : [EOL] [comment] [EOL] res = self . front_end . getCompletions ( [string] , [string] ) [EOL] assert len ( res ) == [number] [EOL] eq_ ( res [ [number] ] [ [number] ] , [string] ) [comment] [EOL] assert len ( res [ [number] ] [ [number] ] ) > [number] , [string] [EOL] [EOL] class TestRunningCode ( TestBase ) : [EOL] def test_print ( self ) : [EOL] self . redirect_stdout ( ) [EOL] try : [EOL] self . add_exec ( [string] ) [EOL] eq_ ( sys . stdout . getvalue ( ) , [string] ) [EOL] finally : [EOL] self . restore_stdout ( ) [EOL] [EOL] def testQuestionMark_1 ( self ) : [EOL] self . redirect_stdout ( ) [EOL] try : [EOL] self . add_exec ( [string] ) [EOL] assert len ( sys . stdout . getvalue ( ) ) > [number] , [string] [EOL] finally : [EOL] self . restore_stdout ( ) [EOL] [EOL] def testQuestionMark_2 ( self ) : [EOL] self . redirect_stdout ( ) [EOL] try : [EOL] self . add_exec ( [string] ) [EOL] assert sys . stdout . getvalue ( ) . find ( [string] ) != - [number] [EOL] finally : [EOL] self . restore_stdout ( ) [EOL] [EOL] [EOL] def test_gui ( self ) : [EOL] try : [EOL] import Tkinter [EOL] except : [EOL] return [EOL] else : [EOL] from pydev_ipython . inputhook import get_inputhook [EOL] assert get_inputhook ( ) is None [EOL] self . add_exec ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] assert get_inputhook ( ) is not None [EOL] self . add_exec ( [string] ) [EOL] assert get_inputhook ( ) is None [EOL] [EOL] def test_history ( self ) : [EOL] [docstring] [EOL] self . redirect_stdout ( ) [EOL] try : [EOL] self . add_exec ( [string] ) [EOL] self . add_exec ( [string] ) [EOL] _ih = self . front_end . get_namespace ( ) [ [string] ] [EOL] eq_ ( _ih [ - [number] ] , [string] ) [EOL] eq_ ( _ih [ - [number] ] , [string] ) [EOL] [EOL] self . add_exec ( [string] ) [EOL] hist = sys . stdout . getvalue ( ) . split ( [string] ) [EOL] eq_ ( hist [ - [number] ] , [string] ) [EOL] eq_ ( hist [ - [number] ] , [string] ) [EOL] eq_ ( hist [ - [number] ] , [string] ) [EOL] eq_ ( hist [ - [number] ] , [string] ) [EOL] finally : [EOL] self . restore_stdout ( ) [EOL] [EOL] def test_edit ( self ) : [EOL] [docstring] [EOL] called_RequestInput = [ False ] [EOL] called_IPythonEditor = [ False ] [EOL] def start_client_thread ( client_port ) : [EOL] class ClientThread ( threading . Thread ) : [EOL] def __init__ ( self , client_port ) : [EOL] threading . Thread . __init__ ( self ) [EOL] self . client_port = client_port [EOL] def run ( self ) : [EOL] class HandleRequestInput : [EOL] def RequestInput ( self ) : [EOL] called_RequestInput [ [number] ] = True [EOL] return [string] [EOL] def IPythonEditor ( self , name , line ) : [EOL] called_IPythonEditor [ [number] ] = ( name , line ) [EOL] return True [EOL] [EOL] handle_request_input = HandleRequestInput ( ) [EOL] [EOL] from _pydev_bundle import pydev_localhost [EOL] self . client_server = client_server = SimpleXMLRPCServer ( ( pydev_localhost . get_localhost ( ) , self . client_port ) , logRequests = False ) [EOL] client_server . register_function ( handle_request_input . RequestInput ) [EOL] client_server . register_function ( handle_request_input . IPythonEditor ) [EOL] client_server . serve_forever ( ) [EOL] [EOL] def shutdown ( self ) : [EOL] return [EOL] self . client_server . shutdown ( ) [EOL] [EOL] client_thread = ClientThread ( client_port ) [EOL] client_thread . setDaemon ( True ) [EOL] client_thread . start ( ) [EOL] return client_thread [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] s = socket . socket ( ) [EOL] s . bind ( ( [string] , [number] ) ) [EOL] self . client_port = client_port = s . getsockname ( ) [ [number] ] [EOL] s . close ( ) [EOL] self . front_end = get_pydev_frontend ( get_localhost ( ) , client_port ) [EOL] [EOL] client_thread = start_client_thread ( self . client_port ) [EOL] orig_stdin = sys . stdin [EOL] sys . stdin = StdIn ( self , get_localhost ( ) , self . client_port , orig_stdin ) [EOL] try : [EOL] filename = [string] [EOL] self . add_exec ( [string] + filename ) [EOL] [EOL] for i in xrange ( [number] ) : [EOL] if called_IPythonEditor [ [number] ] == ( os . path . abspath ( filename ) , [string] ) : [EOL] break [EOL] time . sleep ( [number] ) [EOL] [EOL] if not called_IPythonEditor [ [number] ] : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] sys . stderr . write ( [string] ) [EOL] return [EOL] [EOL] eq_ ( called_IPythonEditor [ [number] ] , ( os . path . abspath ( filename ) , [string] ) ) [EOL] assert called_RequestInput [ [number] ] , [string] [EOL] finally : [EOL] sys . stdin = orig_stdin [EOL] client_thread . shutdown ( ) [EOL] [EOL] if __name__ == [string] : [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] unittest . TextTestRunner ( verbosity = [number] ) . run ( unittest . makeSuite ( TestRunningCode ) ) [EOL] unittest . TextTestRunner ( verbosity = [number] ) . run ( unittest . makeSuite ( TestPyDevFrontEnd ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Anytyping.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.bool]$ 0 0 0 0 0 $typing.List[builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $socket.socket$ 0 0 0 0 0 0 0 $socket.socket$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $socket.socket$ 0 0 0 0 0 0 0 0 $socket.socket$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.TextIO$ 0 0 0 $typing.TextIO$ 0 0 0 $typing.TextIO$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.TextIO$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.List[builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.TextIO$ 0 $typing.TextIO$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import time [EOL] if __name__ == [string] : [EOL] for i in range ( [number] ) : [EOL] print ( [string] ) [EOL] time . sleep ( [number] ) [EOL] [EOL] print ( [string] ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def method ( ) : [EOL] a = [number] [EOL] print ( [string] % ( a , ) ) [EOL] a = [number] [EOL] print ( [string] % ( a , ) ) [EOL] a = [number] [EOL] [EOL] if __name__ == [string] : [EOL] method ( ) [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import time [EOL] if __name__ == [string] : [EOL] for i in range ( [number] ) : [EOL] print ( [string] % i ) [EOL] time . sleep ( [number] ) [EOL] [EOL] print ( [string] ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] import numpy [EOL] [EOL] def main ( ) : [EOL] smallarray = numpy . arange ( [number] ) * [number] + [number] [EOL] bigarray = numpy . arange ( [number] ) . reshape ( ( [number] , [number] ) ) [comment] [EOL] hugearray = numpy . arange ( [number] ) [comment] [EOL] [EOL] pass [comment] [EOL] [EOL] main ( ) [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def Call ( ) : [EOL] variable_for_test_1 = [number] [EOL] variable_for_test_2 = [number] [EOL] variable_for_test_3 = [number] [EOL] [EOL] if __name__ == [string] : [EOL] Call ( ) [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . import _debugger_case_m_switch_2 [EOL] print ( _debugger_case_m_switch_2 . ClassToBeImported ) [EOL] print ( [string] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def Call2 ( ) : [EOL] print ( [string] ) [EOL] [EOL] def Call1 ( a ) : [EOL] print ( [string] ) [EOL] [EOL] if __name__ == [string] : [EOL] Call1 ( Call2 ( ) ) [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def m1 ( ) : [EOL] print ( [string] ) [EOL] [EOL] def m2 ( ) : [comment] [EOL] m1 ( ) [EOL] print ( [string] ) [EOL] [EOL] def m3 ( ) : [EOL] m2 ( ) [EOL] print ( [string] ) [EOL] [EOL] if __name__ == [string] : [EOL] m3 ( ) [EOL] [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
class ClassToBeImported ( object ) : [EOL] pass	0 0 0 0 0 0 0 0
def Method1 ( ) : [EOL] print ( [string] ) [EOL] [EOL] def Method2 ( ) : [EOL] print ( [string] ) [EOL] Method1 ( ) [EOL] print ( [string] ) [EOL] [EOL] def Method3 ( ) : [EOL] print ( [string] ) [EOL] Method2 ( ) [EOL] print ( [string] ) [EOL] [EOL] if __name__ == [string] : [EOL] Method3 ( ) [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] import os [EOL] import sys [EOL] [EOL] if __name__ == [string] : [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] from django . core . management import execute_from_command_line [EOL] [EOL] execute_from_command_line ( sys . argv ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . db import models [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] try : [EOL] from _pydevd_frame_eval . pydevd_frame_evaluator import frame_eval_func , stop_frame_eval , set_use_code_extra [EOL] except ImportError : [EOL] try : [EOL] import struct [EOL] import sys [EOL] try : [EOL] is_64bits = sys . maxsize > [number] ** [number] [EOL] except : [EOL] [comment] [EOL] raise ImportError [EOL] plat = [string] [EOL] if is_64bits : [EOL] plat = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] mod_name = [string] % ( sys . platform , sys . version_info [ [number] ] , sys . version_info [ [number] ] , plat ) [EOL] check_name = [string] % ( mod_name , ) [EOL] mod = __import__ ( check_name ) [EOL] mod = getattr ( mod , mod_name ) [EOL] frame_eval_func , stop_frame_eval , set_use_code_extra = mod . frame_eval_func , mod . stop_frame_eval , mod . set_use_code_extra [EOL] except ImportError : [EOL] raise	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
	0
	0
[comment] [EOL] [docstring] [EOL] [EOL] if __name__ == [string] : [EOL] [EOL] [comment] [EOL] import sys [EOL] import OpenGL . GL as gl [EOL] import OpenGL . GLUT as glut [EOL] [EOL] def close ( ) : [EOL] glut . glutDestroyWindow ( glut . glutGetWindow ( ) ) [EOL] [EOL] def display ( ) : [EOL] gl . glClear ( gl . GL_COLOR_BUFFER_BIT | gl . GL_DEPTH_BUFFER_BIT ) [EOL] glut . glutSwapBuffers ( ) [EOL] [EOL] def resize ( width , height ) : [EOL] gl . glViewport ( [number] , [number] , width , height + [number] ) [EOL] gl . glMatrixMode ( gl . GL_PROJECTION ) [EOL] gl . glLoadIdentity ( ) [EOL] gl . glOrtho ( [number] , width , [number] , height + [number] , - [number] , [number] ) [EOL] gl . glMatrixMode ( gl . GL_MODELVIEW ) [EOL] [EOL] if glut . glutGetWindow ( ) > [number] : [EOL] interactive = True [EOL] glut . glutInit ( sys . argv ) [EOL] glut . glutInitDisplayMode ( glut . GLUT_DOUBLE | glut . GLUT_RGBA | glut . GLUT_DEPTH ) [EOL] else : [EOL] interactive = False [EOL] [EOL] glut . glutCreateWindow ( [string] ) [EOL] glut . glutDisplayFunc ( display ) [EOL] glut . glutReshapeFunc ( resize ) [EOL] [comment] [EOL] [comment] [EOL] if sys . platform == [string] and not bool ( glut . HAVE_FREEGLUT ) : [EOL] glut . glutWMCloseFunc ( close ) [EOL] gl . glClearColor ( [number] , [number] , [number] , [number] ) [EOL] [EOL] if not interactive : [EOL] glut . glutMainLoop ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] if __name__ == [string] : [EOL] [EOL] import wx [EOL] [EOL] [EOL] class MyFrame ( wx . Frame ) : [EOL] [docstring] [EOL] def __init__ ( self , parent , title ) : [EOL] wx . Frame . __init__ ( self , parent , - [number] , title , pos = ( [number] , [number] ) , size = ( [number] , [number] ) ) [EOL] [EOL] [comment] [EOL] menuBar = wx . MenuBar ( ) [EOL] [EOL] [comment] [EOL] menu = wx . Menu ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] menu . Append ( wx . ID_EXIT , [string] , [string] ) [EOL] [EOL] [comment] [EOL] self . Bind ( wx . EVT_MENU , self . on_time_to_close , id = wx . ID_EXIT ) [EOL] [EOL] [comment] [EOL] menuBar . Append ( menu , [string] ) [EOL] self . SetMenuBar ( menuBar ) [EOL] [EOL] self . CreateStatusBar ( ) [EOL] [EOL] [comment] [EOL] panel = wx . Panel ( self ) [EOL] [EOL] [comment] [EOL] text = wx . StaticText ( panel , - [number] , [string] ) [EOL] text . SetFont ( wx . Font ( [number] , wx . SWISS , wx . NORMAL , wx . BOLD ) ) [EOL] text . SetSize ( text . GetBestSize ( ) ) [EOL] btn = wx . Button ( panel , - [number] , [string] ) [EOL] funbtn = wx . Button ( panel , - [number] , [string] ) [EOL] [EOL] [comment] [EOL] self . Bind ( wx . EVT_BUTTON , self . on_time_to_close , btn ) [EOL] self . Bind ( wx . EVT_BUTTON , self . on_fun_button , funbtn ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] sizer = wx . BoxSizer ( wx . VERTICAL ) [EOL] sizer . Add ( text , [number] , wx . ALL , [number] ) [EOL] sizer . Add ( btn , [number] , wx . ALL , [number] ) [EOL] sizer . Add ( funbtn , [number] , wx . ALL , [number] ) [EOL] panel . SetSizer ( sizer ) [EOL] panel . Layout ( ) [EOL] [EOL] [EOL] def on_time_to_close ( self , evt ) : [EOL] [docstring] [EOL] print ( [string] ) [EOL] self . Close ( ) [EOL] [EOL] def on_fun_button ( self , evt ) : [EOL] [docstring] [EOL] print ( [string] ) [EOL] [EOL] [EOL] class MyApp ( wx . App ) : [EOL] def OnInit ( self ) : [EOL] frame = MyFrame ( None , [string] ) [EOL] self . SetTopWindow ( frame ) [EOL] [EOL] print ( [string] ) [EOL] [EOL] frame . Show ( True ) [EOL] return True [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] [EOL] app = wx . GetApp ( ) [EOL] if app is None : [EOL] app = MyApp ( redirect = False , clearSigInt = False ) [EOL] else : [EOL] frame = MyFrame ( None , [string] ) [EOL] app . SetTopWindow ( frame ) [EOL] print ( [string] ) [EOL] frame . Show ( True ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from _pydev_imps . _pydev_saved_modules import threading [EOL] [EOL] [EOL] def wrapper ( fun ) : [EOL] def pydev_after_run_call ( ) : [EOL] pass [EOL] [EOL] def inner ( * args , ** kwargs ) : [EOL] fun ( * args , ** kwargs ) [EOL] pydev_after_run_call ( ) [EOL] return inner [EOL] [EOL] [EOL] def wrap_attr ( obj , attr ) : [EOL] t_save_start = getattr ( obj , attr ) [EOL] setattr ( obj , attr , wrapper ( t_save_start ) ) [EOL] setattr ( obj , [string] , True ) [EOL] [EOL] [EOL] class ObjectWrapper ( object ) : [EOL] def __init__ ( self , obj ) : [EOL] self . wrapped_object = obj [EOL] try : [EOL] import functools [EOL] functools . update_wrapper ( self , obj ) [EOL] except : [EOL] pass [EOL] [EOL] def __getattr__ ( self , attr ) : [EOL] orig_attr = getattr ( self . wrapped_object , attr ) [comment] [EOL] if callable ( orig_attr ) : [EOL] def patched_attr ( * args , ** kwargs ) : [EOL] self . call_begin ( attr ) [EOL] result = orig_attr ( * args , ** kwargs ) [EOL] self . call_end ( attr ) [EOL] if result == self . wrapped_object : [EOL] return self [EOL] return result [EOL] return patched_attr [EOL] else : [EOL] return orig_attr [EOL] [EOL] def call_begin ( self , attr ) : [EOL] pass [EOL] [EOL] def call_end ( self , attr ) : [EOL] pass [EOL] [EOL] def __enter__ ( self ) : [EOL] self . call_begin ( [string] ) [EOL] self . wrapped_object . __enter__ ( ) [EOL] self . call_end ( [string] ) [EOL] [EOL] def __exit__ ( self , exc_type , exc_val , exc_tb ) : [EOL] self . call_begin ( [string] ) [EOL] self . wrapped_object . __exit__ ( exc_type , exc_val , exc_tb ) [EOL] [EOL] [EOL] def factory_wrapper ( fun ) : [EOL] def inner ( * args , ** kwargs ) : [EOL] obj = fun ( * args , ** kwargs ) [EOL] return ObjectWrapper ( obj ) [EOL] return inner [EOL] [EOL] [EOL] def wrap_threads ( ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] import threading [EOL] threading . Lock = factory_wrapper ( threading . Lock ) [EOL] threading . RLock = factory_wrapper ( threading . RLock ) [EOL] [EOL] [comment] [EOL] try : [EOL] import queue [comment] [EOL] queue . Queue = factory_wrapper ( queue . Queue ) [EOL] except : [EOL] import Queue [EOL] Queue . Queue = factory_wrapper ( Queue . Queue ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
[comment] [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import gtk , gobject [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def _main_quit ( * args , ** kwargs ) : [EOL] gtk . main_quit ( ) [EOL] return False [EOL] [EOL] def create_inputhook_gtk ( stdin_file ) : [EOL] def inputhook_gtk ( ) : [EOL] gobject . io_add_watch ( stdin_file , gobject . IO_IN , _main_quit ) [EOL] gtk . main ( ) [EOL] return [number] [EOL] return inputhook_gtk [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from pydev_ipython . qt_loaders import ( load_qt , QT_API_PYSIDE , QT_API_PYQT , QT_API_PYQT5 ) [EOL] [EOL] QT_API = os . environ . get ( [string] , None ) [EOL] if QT_API not in [ QT_API_PYSIDE , QT_API_PYQT , QT_API_PYQT5 , None ] : [EOL] raise RuntimeError ( [string] % ( QT_API , QT_API_PYSIDE , QT_API_PYQT , QT_API_PYQT5 ) ) [EOL] if QT_API is None : [EOL] api_opts = [ QT_API_PYSIDE , QT_API_PYQT , QT_API_PYQT5 ] [EOL] else : [EOL] api_opts = [ QT_API ] [EOL] [EOL] QtCore , QtGui , QtSvg , QT_API = load_qt ( api_opts ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0
	0
[comment] [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from distutils . version import LooseVersion [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def check_version ( v , check ) : [EOL] [docstring] [EOL] try : [EOL] return LooseVersion ( v ) >= LooseVersion ( check ) [EOL] except TypeError : [EOL] return True [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] from pydev_ipython . inputhook import stdin_ready [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] TCL_DONT_WAIT = [number] << [number] [EOL] [EOL] def create_inputhook_tk ( app ) : [EOL] def inputhook_tk ( ) : [EOL] while app . dooneevent ( TCL_DONT_WAIT ) == [number] : [EOL] if stdin_ready ( ) : [EOL] break [EOL] return [number] [EOL] return inputhook_tk [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] NAMES = [string]	0 0 $builtins.str$ 0 0
import sys [EOL] from . main import main [EOL] [EOL] sys . exit ( main ( [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL]	0 0
[comment] [EOL] [comment] [EOL] [EOL] [docstring] [EOL]	0 0 0 0 0 0 0
[comment] [EOL]	0 0
[docstring] [EOL] [EOL] __version__ = [string] [EOL]	0 0 0 $builtins.str$ 0 0 0
from typing import List , Any , Tuple [EOL] import typing [EOL] import threading [EOL] import traceback [EOL] import warnings [EOL] [EOL] from _pydev_bundle . _pydev_filesystem_encoding import getfilesystemencoding [EOL] from _pydev_bundle . pydev_imports import xmlrpclib , _queue [EOL] Queue = _queue . Queue [EOL] from _pydevd_bundle . pydevd_constants import * [EOL] [EOL] [comment] [EOL] [comment] [EOL] warnings . filterwarnings ( [string] , [string] , DeprecationWarning ) [EOL] [EOL] [EOL] file_system_encoding = getfilesystemencoding ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] class _ServerHolder : [EOL] [docstring] [EOL] SERVER = None [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def set_server ( server ) : [EOL] _ServerHolder . SERVER = server [EOL] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] class ParallelNotification ( object ) : [EOL] [EOL] def __init__ ( self , method , args ) : [EOL] self . method = method [EOL] self . args = args [EOL] [EOL] def to_tuple ( self ) : [EOL] return self . method , self . args [EOL] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] class KillServer ( object ) : [EOL] pass [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] class ServerFacade ( object ) : [EOL] [EOL] [EOL] def __init__ ( self , notifications_queue ) : [EOL] self . notifications_queue = notifications_queue [EOL] [EOL] [EOL] def notifyTestsCollected ( self , * args ) : [EOL] self . notifications_queue . put_nowait ( ParallelNotification ( [string] , args ) ) [EOL] [EOL] def notifyConnected ( self , * args ) : [EOL] self . notifications_queue . put_nowait ( ParallelNotification ( [string] , args ) ) [EOL] [EOL] [EOL] def notifyTestRunFinished ( self , * args ) : [EOL] self . notifications_queue . put_nowait ( ParallelNotification ( [string] , args ) ) [EOL] [EOL] [EOL] def notifyStartTest ( self , * args ) : [EOL] self . notifications_queue . put_nowait ( ParallelNotification ( [string] , args ) ) [EOL] [EOL] [EOL] def notifyTest ( self , * args ) : [EOL] new_args = [ ] [EOL] for arg in args : [EOL] new_args . append ( _encode_if_needed ( arg ) ) [EOL] args = tuple ( new_args ) [EOL] self . notifications_queue . put_nowait ( ParallelNotification ( [string] , args ) ) [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] class ServerComm ( threading . Thread ) : [EOL] [EOL] [EOL] [EOL] def __init__ ( self , notifications_queue , port , daemon = False ) : [EOL] threading . Thread . __init__ ( self ) [EOL] self . setDaemon ( daemon ) [comment] [EOL] self . finished = False [EOL] self . notifications_queue = notifications_queue [EOL] [EOL] from _pydev_bundle import pydev_localhost [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] encoding = file_system_encoding [EOL] if encoding == [string] : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] encoding = [string] [EOL] [EOL] self . server = xmlrpclib . Server ( [string] % ( pydev_localhost . get_localhost ( ) , port ) , encoding = encoding ) [EOL] [EOL] [EOL] def run ( self ) : [EOL] while True : [EOL] kill_found = False [EOL] commands = [ ] [EOL] command = self . notifications_queue . get ( block = True ) [EOL] if isinstance ( command , KillServer ) : [EOL] kill_found = True [EOL] else : [EOL] assert isinstance ( command , ParallelNotification ) [EOL] commands . append ( command . to_tuple ( ) ) [EOL] [EOL] try : [EOL] while True : [EOL] command = self . notifications_queue . get ( block = False ) [comment] [EOL] if isinstance ( command , KillServer ) : [EOL] kill_found = True [EOL] else : [EOL] assert isinstance ( command , ParallelNotification ) [EOL] commands . append ( command . to_tuple ( ) ) [EOL] except : [EOL] pass [comment] [EOL] [EOL] [EOL] if commands : [EOL] try : [EOL] self . server . notifyCommands ( commands ) [EOL] except : [EOL] traceback . print_exc ( ) [EOL] [EOL] if kill_found : [EOL] self . finished = True [EOL] return [EOL] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def initialize_server ( port , daemon = False ) : [EOL] if _ServerHolder . SERVER is None : [EOL] if port is not None : [EOL] notifications_queue = Queue ( ) [EOL] _ServerHolder . SERVER = ServerFacade ( notifications_queue ) [EOL] _ServerHolder . SERVER_COMM = ServerComm ( notifications_queue , port , daemon ) [EOL] _ServerHolder . SERVER_COMM . start ( ) [EOL] else : [EOL] [comment] [EOL] _ServerHolder . SERVER = Null ( ) [EOL] _ServerHolder . SERVER_COMM = Null ( ) [EOL] [EOL] try : [EOL] _ServerHolder . SERVER . notifyConnected ( ) [EOL] except : [EOL] traceback . print_exc ( ) [EOL] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def notifyTestsCollected ( tests_count ) : [EOL] assert tests_count is not None [EOL] try : [EOL] _ServerHolder . SERVER . notifyTestsCollected ( tests_count ) [EOL] except : [EOL] traceback . print_exc ( ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def notifyStartTest ( file , test ) : [EOL] [docstring] [EOL] assert file is not None [EOL] if test is None : [EOL] test = [string] [comment] [EOL] [EOL] try : [EOL] _ServerHolder . SERVER . notifyStartTest ( file , test ) [EOL] except : [EOL] traceback . print_exc ( ) [EOL] [EOL] [EOL] def _encode_if_needed ( obj ) : [EOL] [comment] [EOL] if not IS_PY3K : [EOL] if isinstance ( obj , str ) : [EOL] try : [EOL] return xmlrpclib . Binary ( obj . decode ( sys . stdin . encoding ) . encode ( [string] , [string] ) ) [EOL] except : [EOL] return xmlrpclib . Binary ( obj ) [EOL] [EOL] elif isinstance ( obj , unicode ) : [EOL] return xmlrpclib . Binary ( obj . encode ( [string] , [string] ) ) [EOL] [EOL] else : [EOL] if isinstance ( obj , str ) : [comment] [EOL] return xmlrpclib . Binary ( obj . encode ( [string] , [string] ) ) [EOL] [EOL] elif isinstance ( obj , bytes ) : [EOL] try : [EOL] return xmlrpclib . Binary ( obj . decode ( sys . stdin . encoding ) . encode ( [string] , [string] ) ) [EOL] except : [EOL] return xmlrpclib . Binary ( obj ) [comment] [EOL] [EOL] return obj [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def notifyTest ( cond , captured_output , error_contents , file , test , time ) : [EOL] [docstring] [EOL] assert cond is not None [EOL] assert captured_output is not None [EOL] assert error_contents is not None [EOL] assert file is not None [EOL] if test is None : [EOL] test = [string] [comment] [EOL] assert time is not None [EOL] try : [EOL] captured_output = _encode_if_needed ( captured_output ) [EOL] error_contents = _encode_if_needed ( error_contents ) [EOL] [EOL] _ServerHolder . SERVER . notifyTest ( cond , captured_output , error_contents , file , test , time ) [EOL] except : [EOL] traceback . print_exc ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def notifyTestRunFinished ( total_time ) : [EOL] assert total_time is not None [EOL] try : [EOL] _ServerHolder . SERVER . notifyTestRunFinished ( total_time ) [EOL] except : [EOL] traceback . print_exc ( ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def force_server_kill ( ) : [EOL] _ServerHolder . SERVER_COMM . notifications_queue . put_nowait ( KillServer ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,...]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,...]$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,...]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
def overrides ( method ) : [EOL] [docstring] [EOL] return [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def implements ( method ) : [EOL] return [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import sys [EOL] [EOL] def versionok_for_gui ( ) : [EOL] [docstring] [EOL] [comment] [EOL] if sys . hexversion < [number] : [EOL] return False [EOL] [comment] [EOL] if sys . hexversion >= [number] and sys . hexversion < [number] : [EOL] return False [EOL] [comment] [EOL] if sys . platform . startswith ( [string] ) or sys . platform . startswith ( [string] ) : [EOL] return False [EOL] [EOL] return True [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] [EOL] import os [EOL] import sys [EOL] import unittest [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] class Test ( unittest . TestCase ) : [EOL] [docstring] [EOL] [EOL] def setUp ( self , nused = None ) : [EOL] self . tempdir = os . path . join ( os . path . dirname ( os . path . dirname ( __file__ ) ) ) [EOL] sys . path . insert ( [number] , self . tempdir ) [EOL] from _pydevd_bundle import pydevd_traceproperty [EOL] self . old = pydevd_traceproperty . replace_builtin_property ( ) [EOL] [EOL] [EOL] def tearDown ( self , unused = None ) : [EOL] from _pydevd_bundle import pydevd_traceproperty [EOL] pydevd_traceproperty . replace_builtin_property ( self . old ) [EOL] sys . path . remove ( self . tempdir ) [EOL] [EOL] [EOL] def test_property ( self ) : [EOL] [docstring] [EOL] [EOL] from _pydevd_bundle import pydevd_traceproperty [EOL] class TestProperty ( object ) : [EOL] [EOL] def __init__ ( self ) : [EOL] self . _get = [number] [EOL] self . _set = [number] [EOL] self . _del = [number] [EOL] [EOL] def get_name ( self ) : [EOL] self . _get += [number] [EOL] return self . __name [EOL] [EOL] def set_name ( self , value ) : [EOL] self . _set += [number] [EOL] self . __name = value [EOL] [EOL] def del_name ( self ) : [EOL] self . _del += [number] [EOL] del self . __name [EOL] name = property ( get_name , set_name , del_name , [string] ) [EOL] self . assertEqual ( name . __class__ , pydevd_traceproperty . DebugProperty ) [EOL] [EOL] testObj = TestProperty ( ) [EOL] self . _check ( testObj ) [EOL] [EOL] [EOL] def test_property2 ( self ) : [EOL] [docstring] [EOL] [EOL] class TestProperty ( object ) : [EOL] [EOL] def __init__ ( self ) : [EOL] self . _get = [number] [EOL] self . _set = [number] [EOL] self . _del = [number] [EOL] [EOL] def name ( self ) : [EOL] self . _get += [number] [EOL] return self . __name [EOL] name = property ( name ) [EOL] [EOL] def set_name ( self , value ) : [EOL] self . _set += [number] [EOL] self . __name = value [EOL] name . setter ( set_name ) [EOL] [EOL] def del_name ( self ) : [EOL] self . _del += [number] [EOL] del self . __name [EOL] name . deleter ( del_name ) [EOL] [EOL] testObj = TestProperty ( ) [EOL] self . _check ( testObj ) [EOL] [EOL] [EOL] def test_property3 ( self ) : [EOL] [docstring] [EOL] [EOL] class TestProperty ( object ) : [EOL] [EOL] def __init__ ( self ) : [EOL] self . _name = [string] [EOL] [EOL] def name ( self ) : [EOL] return self . _name [EOL] name = property ( name ) [EOL] [EOL] testObj = TestProperty ( ) [EOL] self . assertRaises ( AttributeError , setattr , testObj , [string] , [string] ) [EOL] self . assertRaises ( AttributeError , delattr , testObj , [string] ) [EOL] [EOL] [EOL] def _check ( self , testObj ) : [EOL] testObj . name = [string] [EOL] self . assertEqual ( [number] , testObj . _set ) [EOL] [EOL] self . assertEqual ( testObj . name , [string] ) [EOL] self . assertEqual ( [number] , testObj . _get ) [EOL] [EOL] self . assert_ ( hasattr ( testObj , [string] ) ) [EOL] del testObj . name [EOL] self . assertEqual ( [number] , testObj . _del ) [EOL] [EOL] self . assert_ ( not hasattr ( testObj , [string] ) ) [EOL] testObj . name = [string] [EOL] self . assertEqual ( testObj . name , [string] ) [EOL] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if __name__ == [string] : [EOL] [comment] [EOL] [comment] [EOL] unittest . TextTestRunner ( ) . run ( unittest . makeSuite ( Test ) ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.property$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.property$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.property$ 0 0 0 $builtins.property$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.property$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.property$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.property$ 0 0 0 $builtins.property$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import unittest [EOL] [EOL] class YetAnotherSampleTest ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] return [EOL] [EOL] def tearDown ( self ) : [EOL] return [EOL] [EOL] def test_abc ( self ) : [EOL] pass [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import unittest [EOL] [EOL] class StillYetAnotherSampleTest ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] return [EOL] [EOL] def tearDown ( self ) : [EOL] return [EOL] [EOL] def test_non_unique_name ( self ) : [EOL] pass [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] [docstring] [EOL] pass [EOL]	0 0 0 0 0
import unittest [EOL] [EOL] class SampleTest ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] pass [EOL] [EOL] def tearDown ( self ) : [EOL] pass [EOL] [EOL] def test_xxxxxx1 ( self ) : [EOL] self . fail ( [string] ) [EOL] def test_xxxxxx2 ( self ) : [EOL] pass [EOL] def test_xxxxxx3 ( self ) : [EOL] pass [EOL] def test_xxxxxx4 ( self ) : [EOL] pass [EOL] def test_non_unique_name ( self ) : [EOL] print ( [string] ) [EOL] [EOL] [EOL] class AnotherSampleTest ( unittest . TestCase ) : [EOL] def setUp ( self ) : [EOL] pass [EOL] [EOL] def tearDown ( self ) : [EOL] pass [EOL] [EOL] def test_1 ( self ) : [EOL] pass [EOL] def test_2 ( self ) : [EOL] [docstring] [EOL] pass [EOL] def todo_not_tested ( self ) : [EOL] [docstring] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] unittest . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import unittest [EOL] [EOL] class SetUpClassTest ( unittest . TestCase ) : [EOL] [EOL] @ classmethod def setUpClass ( cls ) : [EOL] raise ValueError ( [string] ) [EOL] [EOL] def test_blank ( self ) : [EOL] pass [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import unittest [EOL] [EOL] def setUpModule ( ) : [EOL] raise ValueError ( [string] ) [EOL] [EOL] class SetUpModuleTest ( unittest . TestCase ) : [EOL] [EOL] def setUp ( cls ) : [EOL] pass [EOL] [EOL] def test_blank ( self ) : [EOL] pass [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import unittest [EOL] [EOL] class NestedSampleTest ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] return [EOL] [EOL] def tearDown ( self ) : [EOL] return [EOL] [EOL] def test_non_unique_name ( self ) : [EOL] pass [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL]	0
[EOL] [docstring] [EOL] pass [EOL]	0 0 0 0 0
[EOL] [docstring] [EOL] pass [EOL]	0 0 0 0 0
[EOL]	0
import unittest [EOL] [EOL] class SampleTest ( unittest . TestCase ) : [EOL] [EOL] def setUp ( self ) : [EOL] return [EOL] [EOL] def tearDown ( self ) : [EOL] return [EOL] [EOL] def test_non_unique_name ( self ) : [EOL] pass [EOL] [EOL] def test_asdf2 ( self ) : [EOL] pass [EOL] [EOL] def test_i_am_a_unique_test_name ( self ) : [EOL] pass [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] [docstring] [EOL] pass [EOL]	0 0 0 0 0
[EOL]	0
[comment] [EOL] [EOL] def __unicode__ ( self ) : [EOL] [docstring] [EOL] [EOL] def _copy_to_model ( self , model ) : [EOL] [docstring] [EOL] [EOL] [EOL] def _db ( self ) : [EOL] [docstring] [EOL] [EOL] [EOL] def _get_queryset_methods ( cls , queryset_class ) : [EOL] [docstring] [EOL] [EOL] [EOL] def _hints ( self ) : [EOL] [docstring] [EOL] [EOL] [EOL] def _inherited ( self ) : [EOL] [docstring] [EOL] [EOL] [EOL] def _insert ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [EOL] def _queryset_class ( self ) : [EOL] [docstring] [EOL] [EOL] [EOL] def _set_creation_counter ( self ) : [EOL] [docstring] [EOL] [EOL] [EOL] def _update ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [EOL] def aggregate ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [EOL] def all ( self ) : [EOL] [docstring] [EOL] [EOL] [EOL] def annotate ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [EOL] def bulk_create ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [EOL] def check ( self , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [EOL] def complex_filter ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [EOL] def contribute_to_class ( self , model , name ) : [EOL] [docstring] [EOL] [EOL] [EOL] def count ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [EOL] def create ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [EOL] def creation_counter ( self ) : [EOL] [docstring] [EOL] [EOL] [EOL] def dates ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [EOL] def datetimes ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [EOL] def db ( self ) : [EOL] [docstring] [EOL] [EOL] [EOL] def db_manager ( self , using = None , hints = None ) : [EOL] [docstring] [EOL] [EOL] [EOL] def defer ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [EOL] def distinct ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [EOL] def earliest ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [EOL] def exclude ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [EOL] def exists ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [EOL] def extra ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [EOL] def filter ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [EOL] def first ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [EOL] def from_queryset ( cls , queryset_class , class_name = None ) : [EOL] [docstring] [EOL] [EOL] [EOL] def get ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [EOL] def get_or_create ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [EOL] def get_queryset ( self ) : [EOL] [docstring] [EOL] [EOL] [EOL] def in_bulk ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [EOL] def iterator ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [EOL] def last ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [EOL] def latest ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [EOL] def model ( self ) : [EOL] [docstring] [EOL] [EOL] [EOL] def none ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [EOL] def only ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [EOL] def order_by ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [EOL] def prefetch_related ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [EOL] def raw ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [EOL] def reverse ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [EOL] def select_for_update ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [EOL] def select_related ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [EOL] def update ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [EOL] def update_or_create ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [EOL] def using ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [EOL] def values ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [EOL] def values_list ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Type , Tuple , Any , Union [EOL] import types [EOL] import typing [EOL] [docstring] [EOL] from _pydev_bundle import _pydev_imports_tipper [EOL] import traceback [EOL] import StringIO [EOL] import sys [EOL] import urllib [EOL] import pycompletionserver [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def GetImports ( module_name ) : [EOL] try : [EOL] processor = pycompletionserver . Processor ( ) [EOL] data = urllib . unquote_plus ( module_name ) [EOL] def_file , completions = _pydev_imports_tipper . GenerateTip ( data ) [EOL] return processor . formatCompletionMessage ( def_file , completions ) [EOL] except : [EOL] s = StringIO . StringIO ( ) [EOL] exc_info = sys . exc_info ( ) [EOL] [EOL] traceback . print_exception ( exc_info [ [number] ] , exc_info [ [number] ] , exc_info [ [number] ] , limit = None , file = s ) [EOL] err = s . getvalue ( ) [EOL] pycompletionserver . dbg ( [string] + str ( err ) , pycompletionserver . ERROR ) [EOL] raise [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if __name__ == [string] : [EOL] mod_name = sys . argv [ [number] ] [EOL] [EOL] print ( GetImports ( mod_name ) ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0
__author__ = [string] [EOL]	$builtins.str$ 0 0 0
__author__ = [string] [EOL]	$builtins.str$ 0 0 0
__author__ = [string] [EOL] [EOL] if __name__ == [string] : [EOL] try : [EOL] from sphinx import cmdline [EOL] except : [EOL] raise NameError ( [string] ) [EOL] [EOL] import sys [EOL] cmdline . main ( sys . argv )	$builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
__author__ = [string] [EOL]	$builtins.str$ 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import io [EOL] import os [EOL] import re [EOL] [EOL] from coverage . files import flat_rootname [EOL] from coverage . misc import isolate_module [EOL] from coverage . report import Reporter [EOL] [EOL] os = isolate_module ( os ) [EOL] [EOL] [EOL] class AnnotateReporter ( Reporter ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , coverage , config ) : [EOL] super ( AnnotateReporter , self ) . __init__ ( coverage , config ) [EOL] self . directory = None [EOL] [EOL] blank_re = re . compile ( [string] ) [EOL] else_re = re . compile ( [string] ) [EOL] [EOL] def report ( self , morfs , directory = None ) : [EOL] [docstring] [EOL] self . report_files ( self . annotate_file , morfs , directory ) [EOL] [EOL] def annotate_file ( self , fr , analysis ) : [EOL] [docstring] [EOL] statements = sorted ( analysis . statements ) [EOL] missing = sorted ( analysis . missing ) [EOL] excluded = sorted ( analysis . excluded ) [EOL] [EOL] if self . directory : [EOL] dest_file = os . path . join ( self . directory , flat_rootname ( fr . relative_filename ( ) ) ) [EOL] if dest_file . endswith ( [string] ) : [EOL] dest_file = dest_file [ : - [number] ] + [string] [EOL] dest_file += [string] [EOL] else : [EOL] dest_file = fr . filename + [string] [EOL] [EOL] with io . open ( dest_file , [string] , encoding = [string] ) as dest : [EOL] i = [number] [EOL] j = [number] [EOL] covered = True [EOL] source = fr . source ( ) [EOL] for lineno , line in enumerate ( source . splitlines ( True ) , start = [number] ) : [EOL] while i < len ( statements ) and statements [ i ] < lineno : [EOL] i += [number] [EOL] while j < len ( missing ) and missing [ j ] < lineno : [EOL] j += [number] [EOL] if i < len ( statements ) and statements [ i ] == lineno : [EOL] covered = j >= len ( missing ) or missing [ j ] > lineno [EOL] if self . blank_re . match ( line ) : [EOL] dest . write ( [string] ) [EOL] elif self . else_re . match ( line ) : [EOL] [comment] [EOL] if i >= len ( statements ) and j >= len ( missing ) : [EOL] dest . write ( [string] ) [EOL] elif i >= len ( statements ) or j >= len ( missing ) : [EOL] dest . write ( [string] ) [EOL] elif statements [ i ] == missing [ j ] : [EOL] dest . write ( [string] ) [EOL] else : [EOL] dest . write ( [string] ) [EOL] elif lineno in excluded : [EOL] dest . write ( [string] ) [EOL] elif covered : [EOL] dest . write ( [string] ) [EOL] else : [EOL] dest . write ( [string] ) [EOL] [EOL] dest . write ( line ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.List[typing.Any]$ 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.List[typing.Any]$ 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.List[typing.Any]$ 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.List[typing.Any]$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 $builtins.int$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $builtins.int$ 0 0 $typing.List[typing.Any]$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any , Dict , Tuple [EOL] import typing [EOL] [docstring] [EOL] [EOL] import datetime [EOL] import json [EOL] import os [EOL] import shutil [EOL] [EOL] import coverage [EOL] from coverage import env [EOL] from coverage . backward import iitems [EOL] from coverage . files import flat_rootname [EOL] from coverage . misc import CoverageException , Hasher , isolate_module [EOL] from coverage . report import Reporter [EOL] from coverage . results import Numbers [EOL] from coverage . templite import Templite [EOL] [EOL] os = isolate_module ( os ) [EOL] [EOL] [EOL] [comment] [EOL] STATIC_PATH = [ [string] , os . path . join ( os . path . dirname ( __file__ ) , [string] ) , ] [EOL] [EOL] [EOL] def data_filename ( fname , pkgdir = [string] ) : [EOL] [docstring] [EOL] tried = [ ] [EOL] for static_dir in STATIC_PATH : [EOL] static_filename = os . path . join ( static_dir , fname ) [EOL] if os . path . exists ( static_filename ) : [EOL] return static_filename [EOL] else : [EOL] tried . append ( static_filename ) [EOL] if pkgdir : [EOL] static_filename = os . path . join ( static_dir , pkgdir , fname ) [EOL] if os . path . exists ( static_filename ) : [EOL] return static_filename [EOL] else : [EOL] tried . append ( static_filename ) [EOL] raise CoverageException ( [string] % ( fname , os . getcwd ( ) , tried ) ) [EOL] [EOL] [EOL] def read_data ( fname ) : [EOL] [docstring] [EOL] with open ( data_filename ( fname ) ) as data_file : [EOL] return data_file . read ( ) [EOL] [EOL] [EOL] def write_html ( fname , html ) : [EOL] [docstring] [EOL] with open ( fname , [string] ) as fout : [EOL] fout . write ( html . encode ( [string] , [string] ) ) [EOL] [EOL] [EOL] class HtmlReporter ( Reporter ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] STATIC_FILES = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] [EOL] def __init__ ( self , cov , config ) : [EOL] super ( HtmlReporter , self ) . __init__ ( cov , config ) [EOL] self . directory = None [EOL] title = self . config . html_title [EOL] if env . PY2 : [EOL] title = title . decode ( [string] ) [EOL] self . template_globals = { [string] : escape , [string] : pair , [string] : title , [string] : coverage . __url__ , [string] : coverage . __version__ , } [EOL] self . source_tmpl = Templite ( read_data ( [string] ) , self . template_globals ) [EOL] [EOL] self . coverage = cov [EOL] [EOL] self . files = [ ] [EOL] self . has_arcs = self . coverage . data . has_arcs ( ) [EOL] self . status = HtmlStatus ( ) [EOL] self . extra_css = None [EOL] self . totals = Numbers ( ) [EOL] self . time_stamp = datetime . datetime . now ( ) . strftime ( [string] ) [EOL] [EOL] def report ( self , morfs ) : [EOL] [docstring] [EOL] assert self . config . html_dir , [string] [EOL] [EOL] [comment] [EOL] self . status . read ( self . config . html_dir ) [EOL] [EOL] [comment] [EOL] m = Hasher ( ) [EOL] m . update ( self . config ) [EOL] these_settings = m . hexdigest ( ) [EOL] if self . status . settings_hash ( ) != these_settings : [EOL] self . status . reset ( ) [EOL] self . status . set_settings_hash ( these_settings ) [EOL] [EOL] [comment] [EOL] if self . config . extra_css : [EOL] self . extra_css = os . path . basename ( self . config . extra_css ) [EOL] [EOL] [comment] [EOL] self . report_files ( self . html_file , morfs , self . config . html_dir ) [EOL] [EOL] if not self . files : [EOL] raise CoverageException ( [string] ) [EOL] [EOL] [comment] [EOL] self . index_file ( ) [EOL] [EOL] self . make_local_static_report_files ( ) [EOL] return self . totals . n_statements and self . totals . pc_covered [EOL] [EOL] def make_local_static_report_files ( self ) : [EOL] [docstring] [EOL] [comment] [EOL] for static , pkgdir in self . STATIC_FILES : [EOL] shutil . copyfile ( data_filename ( static , pkgdir ) , os . path . join ( self . directory , static ) ) [EOL] [EOL] [comment] [EOL] if self . extra_css : [EOL] shutil . copyfile ( self . config . extra_css , os . path . join ( self . directory , self . extra_css ) ) [EOL] [EOL] def file_hash ( self , source , fr ) : [EOL] [docstring] [EOL] m = Hasher ( ) [EOL] m . update ( source ) [EOL] self . coverage . data . add_to_hash ( fr . filename , m ) [EOL] return m . hexdigest ( ) [EOL] [EOL] def html_file ( self , fr , analysis ) : [EOL] [docstring] [EOL] source = fr . source ( ) [EOL] [EOL] [comment] [EOL] rootname = flat_rootname ( fr . relative_filename ( ) ) [EOL] this_hash = self . file_hash ( source . encode ( [string] ) , fr ) [EOL] that_hash = self . status . file_hash ( rootname ) [EOL] if this_hash == that_hash : [EOL] [comment] [EOL] self . files . append ( self . status . index_info ( rootname ) ) [EOL] return [EOL] [EOL] self . status . set_file_hash ( rootname , this_hash ) [EOL] [EOL] [comment] [EOL] nums = analysis . numbers [EOL] [EOL] if self . has_arcs : [EOL] missing_branch_arcs = analysis . missing_branch_arcs ( ) [EOL] arcs_executed = analysis . arcs_executed ( ) [EOL] [EOL] [comment] [EOL] c_run = [string] [EOL] c_exc = [string] [EOL] c_mis = [string] [EOL] c_par = [string] + c_run [EOL] [EOL] lines = [ ] [EOL] [EOL] for lineno , line in enumerate ( fr . source_token_lines ( ) , start = [number] ) : [EOL] [comment] [EOL] line_class = [ ] [EOL] annotate_html = [string] [EOL] annotate_long = [string] [EOL] if lineno in analysis . statements : [EOL] line_class . append ( [string] ) [EOL] if lineno in analysis . excluded : [EOL] line_class . append ( c_exc ) [EOL] elif lineno in analysis . missing : [EOL] line_class . append ( c_mis ) [EOL] elif self . has_arcs and lineno in missing_branch_arcs : [EOL] line_class . append ( c_par ) [EOL] shorts = [ ] [EOL] longs = [ ] [EOL] for b in missing_branch_arcs [ lineno ] : [EOL] if b < [number] : [EOL] shorts . append ( [string] ) [EOL] else : [EOL] shorts . append ( b ) [EOL] longs . append ( fr . missing_arc_description ( lineno , b , arcs_executed ) ) [EOL] [comment] [EOL] [comment] [EOL] short_fmt = [string] [EOL] annotate_html = [string] . join ( short_fmt % ( lineno , d ) for d in shorts ) [EOL] [EOL] if len ( longs ) == [number] : [EOL] annotate_long = longs [ [number] ] [EOL] else : [EOL] annotate_long = [string] % ( len ( longs ) , [string] . join ( [string] % ( num , ann_long ) for num , ann_long in enumerate ( longs , start = [number] ) ) , ) [EOL] elif lineno in analysis . statements : [EOL] line_class . append ( c_run ) [EOL] [EOL] [comment] [EOL] html = [ ] [EOL] for tok_type , tok_text in line : [EOL] if tok_type == [string] : [EOL] html . append ( escape ( tok_text ) ) [EOL] else : [EOL] tok_html = escape ( tok_text ) or [string] [EOL] html . append ( [string] % ( tok_type , tok_html ) ) [EOL] [EOL] lines . append ( { [string] : [string] . join ( html ) , [string] : lineno , [string] : [string] . join ( line_class ) or [string] , [string] : annotate_html , [string] : annotate_long , } ) [EOL] [EOL] [comment] [EOL] html = self . source_tmpl . render ( { [string] : c_exc , [string] : c_mis , [string] : c_par , [string] : c_run , [string] : self . has_arcs , [string] : self . extra_css , [string] : fr , [string] : nums , [string] : lines , [string] : self . time_stamp , } ) [EOL] [EOL] html_filename = rootname + [string] [EOL] html_path = os . path . join ( self . directory , html_filename ) [EOL] write_html ( html_path , html ) [EOL] [EOL] [comment] [EOL] index_info = { [string] : nums , [string] : html_filename , [string] : fr . relative_filename ( ) , } [EOL] self . files . append ( index_info ) [EOL] self . status . set_index_info ( rootname , index_info ) [EOL] [EOL] def index_file ( self ) : [EOL] [docstring] [EOL] index_tmpl = Templite ( read_data ( [string] ) , self . template_globals ) [EOL] [EOL] self . totals = sum ( f [ [string] ] for f in self . files ) [EOL] [EOL] html = index_tmpl . render ( { [string] : self . has_arcs , [string] : self . extra_css , [string] : self . files , [string] : self . totals , [string] : self . time_stamp , } ) [EOL] [EOL] write_html ( os . path . join ( self . directory , [string] ) , html ) [EOL] [EOL] [comment] [EOL] self . status . write ( self . directory ) [EOL] [EOL] [EOL] class HtmlStatus ( object ) : [EOL] [docstring] [EOL] [EOL] STATUS_FILE = [string] [EOL] STATUS_FORMAT = [number] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] def __init__ ( self ) : [EOL] self . reset ( ) [EOL] [EOL] def reset ( self ) : [EOL] [docstring] [EOL] self . settings = [string] [EOL] self . files = { } [EOL] [EOL] def read ( self , directory ) : [EOL] [docstring] [EOL] usable = False [EOL] try : [EOL] status_file = os . path . join ( directory , self . STATUS_FILE ) [EOL] with open ( status_file , [string] ) as fstatus : [EOL] status = json . load ( fstatus ) [EOL] except ( IOError , ValueError ) : [EOL] usable = False [EOL] else : [EOL] usable = True [EOL] if status [ [string] ] != self . STATUS_FORMAT : [EOL] usable = False [EOL] elif status [ [string] ] != coverage . __version__ : [EOL] usable = False [EOL] [EOL] if usable : [EOL] self . files = { } [EOL] for filename , fileinfo in iitems ( status [ [string] ] ) : [EOL] fileinfo [ [string] ] [ [string] ] = Numbers ( * fileinfo [ [string] ] [ [string] ] ) [EOL] self . files [ filename ] = fileinfo [EOL] self . settings = status [ [string] ] [EOL] else : [EOL] self . reset ( ) [EOL] [EOL] def write ( self , directory ) : [EOL] [docstring] [EOL] status_file = os . path . join ( directory , self . STATUS_FILE ) [EOL] files = { } [EOL] for filename , fileinfo in iitems ( self . files ) : [EOL] fileinfo [ [string] ] [ [string] ] = fileinfo [ [string] ] [ [string] ] . init_args ( ) [EOL] files [ filename ] = fileinfo [EOL] [EOL] status = { [string] : self . STATUS_FORMAT , [string] : coverage . __version__ , [string] : self . settings , [string] : files , } [EOL] with open ( status_file , [string] ) as fout : [EOL] json . dump ( status , fout ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if [string] in os . environ : [EOL] with open ( os . path . join ( directory , [string] ) , [string] ) as dat : [EOL] dat . write ( [string] ) [EOL] [EOL] def settings_hash ( self ) : [EOL] [docstring] [EOL] return self . settings [EOL] [EOL] def set_settings_hash ( self , settings ) : [EOL] [docstring] [EOL] self . settings = settings [EOL] [EOL] def file_hash ( self , fname ) : [EOL] [docstring] [EOL] return self . files . get ( fname , { } ) . get ( [string] , [string] ) [EOL] [EOL] def set_file_hash ( self , fname , val ) : [EOL] [docstring] [EOL] self . files . setdefault ( fname , { } ) [ [string] ] = val [EOL] [EOL] def index_info ( self , fname ) : [EOL] [docstring] [EOL] return self . files . get ( fname , { } ) . get ( [string] , { } ) [EOL] [EOL] def set_index_info ( self , fname , info ) : [EOL] [docstring] [EOL] self . files . setdefault ( fname , { } ) [ [string] ] = info [EOL] [EOL] [EOL] [comment] [EOL] [EOL] def escape ( t ) : [EOL] [docstring] [EOL] [comment] [EOL] return t . replace ( [string] , [string] ) . replace ( [string] , [string] ) [EOL] [EOL] [EOL] def pair ( ratio ) : [EOL] [docstring] [EOL] return [string] % ratio [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $builtins.str$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any [EOL] import inspect [EOL] import typing [EOL] [docstring] [EOL] [EOL] import inspect [EOL] import os [EOL] import sys [EOL] [EOL] from coverage . misc import isolate_module [EOL] [EOL] os = isolate_module ( os ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] FORCED_DEBUG = [ ] [EOL] [EOL] [comment] [EOL] _TEST_NAME_FILE = [string] [comment] [EOL] [EOL] [EOL] class DebugControl ( object ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , options , output ) : [EOL] [docstring] [EOL] self . options = options [EOL] self . output = output [EOL] [EOL] def __repr__ ( self ) : [EOL] return [string] % ( self . options , self . output ) [EOL] [EOL] def should ( self , option ) : [EOL] [docstring] [EOL] return ( option in self . options or option in FORCED_DEBUG ) [EOL] [EOL] def write ( self , msg ) : [EOL] [docstring] [EOL] if self . should ( [string] ) : [EOL] msg = [string] % ( os . getpid ( ) , msg ) [EOL] self . output . write ( msg + [string] ) [EOL] if self . should ( [string] ) : [EOL] dump_stack_frames ( out = self . output ) [EOL] self . output . flush ( ) [EOL] [EOL] def write_formatted_info ( self , header , info ) : [EOL] [docstring] [EOL] self . write ( info_header ( header ) ) [EOL] for line in info_formatter ( info ) : [EOL] self . write ( [string] % line ) [EOL] [EOL] [EOL] def info_header ( label ) : [EOL] [docstring] [EOL] return [string] . format ( [string] + label + [string] ) [EOL] [EOL] [EOL] def info_formatter ( info ) : [EOL] [docstring] [EOL] info = list ( info ) [EOL] if not info : [EOL] return [EOL] label_len = max ( len ( l ) for l , _d in info ) [EOL] for label , data in info : [EOL] if data == [ ] : [EOL] data = [string] [EOL] if isinstance ( data , ( list , set , tuple ) ) : [EOL] prefix = [string] % ( label_len , label ) [EOL] for e in data : [EOL] yield [string] % ( label_len + [number] , prefix , e ) [EOL] prefix = [string] [EOL] else : [EOL] yield [string] % ( label_len , label , data ) [EOL] [EOL] [EOL] def short_stack ( limit = None ) : [comment] [EOL] [docstring] [EOL] stack = inspect . stack ( ) [ limit : [number] : - [number] ] [EOL] return [string] . join ( [string] % ( t [ [number] ] , t [ [number] ] , t [ [number] ] ) for t in stack ) [EOL] [EOL] [EOL] def dump_stack_frames ( limit = None , out = None ) : [comment] [EOL] [docstring] [EOL] out = out or sys . stdout [EOL] out . write ( short_stack ( limit = limit ) ) [EOL] out . write ( [string] ) [EOL] [EOL] [EOL] def log ( msg , stack = False ) : [comment] [EOL] [docstring] [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] . format ( pid = os . getpid ( ) , msg = msg ) ) [EOL] if stack : [EOL] dump_stack_frames ( out = f ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] [docstring] [EOL] [EOL] import sys [EOL] from coverage . cmdline import main [EOL] sys . exit ( main ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] import os . path [EOL] import sys [EOL] import time [EOL] import xml . dom . minidom [EOL] [EOL] from coverage import env [EOL] from coverage import __url__ , __version__ , files [EOL] from coverage . backward import iitems [EOL] from coverage . misc import isolate_module [EOL] from coverage . report import Reporter [EOL] [EOL] os = isolate_module ( os ) [EOL] [EOL] [EOL] DTD_URL = ( [string] [string] [string] ) [EOL] [EOL] [EOL] def rate ( hit , num ) : [EOL] [docstring] [EOL] if num == [number] : [EOL] return [string] [EOL] else : [EOL] return [string] % ( float ( hit ) / num ) [EOL] [EOL] [EOL] class XmlReporter ( Reporter ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , coverage , config ) : [EOL] super ( XmlReporter , self ) . __init__ ( coverage , config ) [EOL] [EOL] self . source_paths = set ( ) [EOL] if config . source : [EOL] for src in config . source : [EOL] if os . path . exists ( src ) : [EOL] self . source_paths . add ( files . canonical_filename ( src ) ) [EOL] self . packages = { } [EOL] self . xml_out = None [EOL] self . has_arcs = coverage . data . has_arcs ( ) [EOL] [EOL] def report ( self , morfs , outfile = None ) : [EOL] [docstring] [EOL] [comment] [EOL] outfile = outfile or sys . stdout [EOL] [EOL] [comment] [EOL] impl = xml . dom . minidom . getDOMImplementation ( ) [EOL] self . xml_out = impl . createDocument ( None , [string] , None ) [EOL] [EOL] [comment] [EOL] xcoverage = self . xml_out . documentElement [EOL] xcoverage . setAttribute ( [string] , __version__ ) [EOL] xcoverage . setAttribute ( [string] , str ( int ( time . time ( ) * [number] ) ) ) [EOL] xcoverage . appendChild ( self . xml_out . createComment ( [string] % __url__ ) ) [EOL] xcoverage . appendChild ( self . xml_out . createComment ( [string] % DTD_URL ) ) [EOL] [EOL] [comment] [EOL] self . report_files ( self . xml_file , morfs ) [EOL] [EOL] xsources = self . xml_out . createElement ( [string] ) [EOL] xcoverage . appendChild ( xsources ) [EOL] [EOL] [comment] [EOL] for path in sorted ( self . source_paths ) : [EOL] xsource = self . xml_out . createElement ( [string] ) [EOL] xsources . appendChild ( xsource ) [EOL] txt = self . xml_out . createTextNode ( path ) [EOL] xsource . appendChild ( txt ) [EOL] [EOL] lnum_tot , lhits_tot = [number] , [number] [EOL] bnum_tot , bhits_tot = [number] , [number] [EOL] [EOL] xpackages = self . xml_out . createElement ( [string] ) [EOL] xcoverage . appendChild ( xpackages ) [EOL] [EOL] [comment] [EOL] for pkg_name , pkg_data in sorted ( iitems ( self . packages ) ) : [EOL] class_elts , lhits , lnum , bhits , bnum = pkg_data [EOL] xpackage = self . xml_out . createElement ( [string] ) [EOL] xpackages . appendChild ( xpackage ) [EOL] xclasses = self . xml_out . createElement ( [string] ) [EOL] xpackage . appendChild ( xclasses ) [EOL] for _ , class_elt in sorted ( iitems ( class_elts ) ) : [EOL] xclasses . appendChild ( class_elt ) [EOL] xpackage . setAttribute ( [string] , pkg_name . replace ( os . sep , [string] ) ) [EOL] xpackage . setAttribute ( [string] , rate ( lhits , lnum ) ) [EOL] if self . has_arcs : [EOL] branch_rate = rate ( bhits , bnum ) [EOL] else : [EOL] branch_rate = [string] [EOL] xpackage . setAttribute ( [string] , branch_rate ) [EOL] xpackage . setAttribute ( [string] , [string] ) [EOL] [EOL] lnum_tot += lnum [EOL] lhits_tot += lhits [EOL] bnum_tot += bnum [EOL] bhits_tot += bhits [EOL] [EOL] xcoverage . setAttribute ( [string] , rate ( lhits_tot , lnum_tot ) ) [EOL] if self . has_arcs : [EOL] branch_rate = rate ( bhits_tot , bnum_tot ) [EOL] else : [EOL] branch_rate = [string] [EOL] xcoverage . setAttribute ( [string] , branch_rate ) [EOL] [EOL] [comment] [EOL] out = self . xml_out . toprettyxml ( ) [EOL] if env . PY2 : [EOL] out = out . encode ( [string] ) [EOL] outfile . write ( out ) [EOL] [EOL] [comment] [EOL] denom = lnum_tot + bnum_tot [EOL] if denom == [number] : [EOL] pct = [number] [EOL] else : [EOL] pct = [number] * ( lhits_tot + bhits_tot ) / denom [EOL] return pct [EOL] [EOL] def xml_file ( self , fr , analysis ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] filename = fr . filename . replace ( [string] , [string] ) [EOL] for source_path in self . source_paths : [EOL] if filename . startswith ( source_path . replace ( [string] , [string] ) + [string] ) : [EOL] rel_name = filename [ len ( source_path ) + [number] : ] [EOL] break [EOL] else : [EOL] rel_name = fr . relative_filename ( ) [EOL] [EOL] dirname = os . path . dirname ( rel_name ) or [string] [EOL] dirname = [string] . join ( dirname . split ( [string] ) [ : self . config . xml_package_depth ] ) [EOL] package_name = dirname . replace ( [string] , [string] ) [EOL] [EOL] if rel_name != fr . filename : [EOL] self . source_paths . add ( fr . filename [ : - len ( rel_name ) ] . rstrip ( [string] ) ) [EOL] package = self . packages . setdefault ( package_name , [ { } , [number] , [number] , [number] , [number] ] ) [EOL] [EOL] xclass = self . xml_out . createElement ( [string] ) [EOL] [EOL] xclass . appendChild ( self . xml_out . createElement ( [string] ) ) [EOL] [EOL] xlines = self . xml_out . createElement ( [string] ) [EOL] xclass . appendChild ( xlines ) [EOL] [EOL] xclass . setAttribute ( [string] , os . path . relpath ( rel_name , dirname ) ) [EOL] xclass . setAttribute ( [string] , fr . relative_filename ( ) . replace ( [string] , [string] ) ) [EOL] xclass . setAttribute ( [string] , [string] ) [EOL] [EOL] branch_stats = analysis . branch_stats ( ) [EOL] missing_branch_arcs = analysis . missing_branch_arcs ( ) [EOL] [EOL] [comment] [EOL] for line in sorted ( analysis . statements ) : [EOL] xline = self . xml_out . createElement ( [string] ) [EOL] xline . setAttribute ( [string] , str ( line ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] xline . setAttribute ( [string] , str ( int ( line not in analysis . missing ) ) ) [EOL] [EOL] if self . has_arcs : [EOL] if line in branch_stats : [EOL] total , taken = branch_stats [ line ] [EOL] xline . setAttribute ( [string] , [string] ) [EOL] xline . setAttribute ( [string] , [string] % ( [number] * taken / total , taken , total ) ) [EOL] if line in missing_branch_arcs : [EOL] annlines = [ [string] if b < [number] else str ( b ) for b in missing_branch_arcs [ line ] ] [EOL] xline . setAttribute ( [string] , [string] . join ( annlines ) ) [EOL] xlines . appendChild ( xline ) [EOL] [EOL] class_lines = len ( analysis . statements ) [EOL] class_hits = class_lines - len ( analysis . missing ) [EOL] [EOL] if self . has_arcs : [EOL] class_branches = sum ( t for t , k in branch_stats . values ( ) ) [EOL] missing_branches = sum ( t - k for t , k in branch_stats . values ( ) ) [EOL] class_br_hits = class_branches - missing_branches [EOL] else : [EOL] class_branches = [number] [EOL] class_br_hits = [number] [EOL] [EOL] [comment] [EOL] xclass . setAttribute ( [string] , rate ( class_hits , class_lines ) ) [EOL] if self . has_arcs : [EOL] branch_rate = rate ( class_br_hits , class_branches ) [EOL] else : [EOL] branch_rate = [string] [EOL] xclass . setAttribute ( [string] , branch_rate ) [EOL] [EOL] package [ [number] ] [ rel_name ] = xclass [EOL] package [ [number] ] += class_hits [EOL] package [ [number] ] += class_lines [EOL] package [ [number] ] += class_br_hits [EOL] package [ [number] ] += class_branches [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 $builtins.float$ 0
[comment] [EOL] [comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import optparse [EOL] [docstring] [EOL] [EOL] from coverage . backward import pickle [EOL] from coverage . data import CoverageData [EOL] [EOL] [EOL] def pickle_read_raw_data ( cls_unused , file_obj ) : [EOL] [docstring] [EOL] return pickle . load ( file_obj ) [EOL] [EOL] [EOL] def pickle2json ( infile , outfile ) : [EOL] [docstring] [EOL] try : [EOL] old_read_raw_data = CoverageData . _read_raw_data [EOL] CoverageData . _read_raw_data = pickle_read_raw_data [EOL] [EOL] covdata = CoverageData ( ) [EOL] [EOL] with open ( infile , [string] ) as inf : [EOL] covdata . read_fileobj ( inf ) [EOL] [EOL] covdata . write_file ( outfile ) [EOL] finally : [EOL] CoverageData . _read_raw_data = old_read_raw_data [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] from optparse import OptionParser [EOL] [EOL] parser = OptionParser ( usage = [string] % __file__ ) [EOL] parser . description = [string] [EOL] parser . add_option ( [string] , [string] , action = [string] , default = [string] , help = [string] , ) [EOL] parser . add_option ( [string] , [string] , action = [string] , default = [string] , help = [string] , ) [EOL] [EOL] ( options , args ) = parser . parse_args ( ) [EOL] [EOL] pickle2json ( options . input_file , options . output_file ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] [EOL] [EOL] def getsizeof ( object , default = None ) : [EOL] [docstring] [EOL] return [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [docstring] [EOL] __docformat__ = [string] [EOL] [EOL] __version__ = [string] [EOL] [docstring] [EOL] [EOL] __author__ = [string] [EOL] [docstring] [EOL] [EOL] __url__ = [string] [EOL] [docstring] [EOL] [EOL] __license__ = [string] [EOL] [docstring] [EOL] [EOL] [comment] [EOL] DEBUG = False [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [docstring] [EOL] __docformat__ = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [docstring] [EOL] __docformat__ = [string] [EOL] [EOL] [comment] [EOL] HTML_HELP = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0