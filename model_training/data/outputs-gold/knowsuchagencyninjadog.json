[comment] [EOL] [comment] [EOL] [EOL] from typing import List , Any [EOL] import typing [EOL] import configparser [EOL] import builtins [EOL] [docstring] [EOL] from configparser import ConfigParser [EOL] [EOL] from setuptools import setup [EOL] [EOL] [EOL] def get_requirements ( section ) : [EOL] [docstring] [EOL] pip_config = ConfigParser ( ) [EOL] pip_config . read ( [string] ) [EOL] def gen ( ) : [EOL] for item in pip_config . items ( section ) : [EOL] lib , version = item [EOL] lib , version = lib . strip ( [string] ) , version . strip ( [string] ) [EOL] [comment] [EOL] if version == [string] : version = [string] [EOL] yield lib + version [EOL] return list ( gen ( ) ) [EOL] [EOL] packages = get_requirements ( [string] ) [EOL] dev_packages = get_requirements ( [string] ) [EOL] [EOL] setup ( install_requires = packages , tests_require = dev_packages , entry_points = { [string] : [ [string] ] , } , extras_require = { [string] : dev_packages , } , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.list$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pathlib [EOL] def test_cli_string_argument ( ) : [EOL] from ninjadog . cli import main [EOL] assert main ( ( [string] , [string] ) ) == [string] [EOL] [EOL] [EOL] def test_cli_file_argument ( ) : [EOL] from ninjadog . cli import main [EOL] from ninjadog . utils import jsonify [EOL] from tempfile import NamedTemporaryFile [EOL] [EOL] context = jsonify ( { [string] : [string] } ) [EOL] [EOL] with NamedTemporaryFile ( [string] ) as file : [EOL] file . write ( [string] ) ; [EOL] file . seek ( [number] ) [EOL] assert main ( ( [string] , file . name , [string] , context ) ) == [string] [EOL] [EOL] [EOL] def test_cli_dir_argument ( capsys ) : [EOL] from ninjadog . cli import main [EOL] from tempfile import TemporaryDirectory [EOL] from pathlib import Path [EOL] [EOL] templates_dir = Path ( Path ( __file__ ) . parent , [string] ) [EOL] [EOL] with TemporaryDirectory ( ) as d : [EOL] tempdir = Path ( d ) [EOL] with capsys . disabled ( ) : [EOL] print ( ) [EOL] main ( ( [string] , str ( templates_dir ) , str ( tempdir ) ) ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] from typing import Dict , Any , Optional [EOL] import typing [EOL] import pathlib [EOL] [docstring] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def test_npm_installed ( ) : [EOL] from subprocess import Popen [EOL] assert Popen ( ( [string] , [string] ) ) . wait ( ) == [number] , [string] [EOL] [EOL] [EOL] def test_pug_cli_exists ( ) : [EOL] from pathlib import Path [EOL] from ninjadog . constants import PUG_CLI_PATH [EOL] assert Path ( PUG_CLI_PATH ) . exists ( ) [EOL] [EOL] [EOL] def test_hello_world ( ) : [EOL] from ninjadog import render [EOL] assert render ( [string] ) == [string] [EOL] [EOL] [EOL] def test_pug_variable ( ) : [EOL] from ninjadog import render [EOL] assert render ( [string] , context = { [string] : [string] } ) == [string] [EOL] [EOL] [EOL] def test_jinja2_variable ( ) : [EOL] from ninjadog import render [EOL] assert render ( [string] , context = { [string] : [string] } , with_jinja = True ) == [string] [EOL] [EOL] [EOL] def test_context ( ) : [EOL] import ninjadog [EOL] context = { [string] : [string] } [EOL] assert ninjadog . render ( [string] , context = context ) == [string] [EOL] assert ninjadog . render ( [string] , context = context ) == [string] [EOL] [EOL] [EOL] def test_conditional ( ) : [EOL] from textwrap import dedent [EOL] import ninjadog [EOL] string = dedent ( [string] ) [EOL] assert ninjadog . render ( string , context = { [string] : [string] } ) == [string] [EOL] [EOL] string = dedent ( [string] ) [EOL] assert ninjadog . render ( string , context = { [string] : { [string] : [string] } } ) == [string] [EOL] [EOL] [EOL] def test_render_no_string_argument ( ) : [EOL] from tempfile import NamedTemporaryFile [EOL] import ninjadog [EOL] string = [string] [EOL] with NamedTemporaryFile ( [string] ) as tempfile : [EOL] tempfile . write ( string ) [EOL] tempfile . seek ( [number] ) [EOL] assert ninjadog . render ( file = tempfile . name ) == ninjadog . render ( string ) == [string] [EOL] [EOL] [EOL] def test_with_pug_with_jinja2 ( ) : [EOL] from textwrap import dedent [EOL] from ninjadog import render [EOL] string = dedent ( [string] ) . strip ( ) [EOL] [EOL] context = { [string] : { [string] : [string] } , [string] : None } [EOL] [EOL] expected_output = dedent ( [string] ) . strip ( ) [EOL] [EOL] actual_output = render ( string , context = context , pretty = True , with_jinja = True ) . strip ( ) [EOL] [EOL] assert expected_output == actual_output [EOL] [EOL] [EOL] def test_cli_string ( ) : [EOL] from ninjadog . cli import main [EOL] from ninjadog . utils import jsonify [EOL] context = jsonify ( { [string] : [string] } ) [EOL] assert main ( ( [string] , [string] , [string] , context ) ) == [string] [EOL] [EOL] [EOL] def test_extends ( ) : [EOL] from tempfile import gettempdir [EOL] from textwrap import dedent [EOL] from pathlib import Path [EOL] from ninjadog import render [EOL] [EOL] parent_string = dedent ( [string] ) [EOL] [EOL] child_string = dedent ( [string] ) [EOL] [EOL] parent_path = Path ( gettempdir ( ) , [string] ) [EOL] child_path = Path ( gettempdir ( ) , [string] ) [EOL] [EOL] with parent_path . open ( [string] ) as parent , child_path . open ( [string] ) as child : [EOL] parent . write ( parent_string ) [EOL] parent . seek ( [number] ) [EOL] child . write ( child_string ) [EOL] child . seek ( [number] ) [EOL] [EOL] assert render ( file = child_path ) == [string] [EOL] assert render ( file = str ( child_path ) ) == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [docstring] [EOL]	0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import configparser [EOL] from webtest import TestApp as _TestApp [EOL] [EOL] import pytest [EOL] [EOL] [EOL] @ pytest . fixture def settings ( ) : [EOL] from textwrap import dedent [EOL] from configparser import ConfigParser [EOL] [EOL] config_ini = dedent ( [string] ) [EOL] config = ConfigParser ( ) [EOL] config . read_string ( config_ini ) [EOL] return dict ( config . items ( [string] ) ) [EOL] [EOL] [EOL] @ pytest . fixture def testapp ( settings ) : [EOL] from pyramid . config import Configurator [EOL] with Configurator ( settings = settings ) as config : [EOL] config . include ( [string] ) [EOL] config . add_route ( [string] , [string] ) [EOL] config . add_view ( lambda request : { [string] : [string] , [string] : [string] , [string] : [string] } , route_name = [string] , renderer = [string] , ) [EOL] app = config . make_wsgi_app ( ) [EOL] [EOL] yield _TestApp ( app ) [EOL] [EOL] [EOL] def test_rendering ( testapp ) : [EOL] response = testapp . get ( [string] , status = [number] ) [EOL] assert [string] in response . body [EOL] assert [string] in response . body [EOL] assert [string] in response . body [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] from functools import wraps [EOL] from time import time [EOL] [EOL] [EOL] def idempotent ( func ) : [EOL] [docstring] [EOL] cache = { } [EOL] now = hash ( time ( ) ) [EOL] [EOL] @ wraps ( func ) def wrapped ( * args ) : [EOL] if cache . get ( args , now ) == now : [EOL] cache [ args ] = func ( * args ) [EOL] return cache [ args ] [EOL] return wrapped [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Optional , Iterator , Any , Iterable [EOL] import typing [EOL] import pathlib [EOL] [docstring] [EOL] import sys [EOL] import typing as T [EOL] from pathlib import Path [EOL] [EOL] from docopt import docopt [EOL] [EOL] from ninjadog import render [EOL] [EOL] [EOL] def render_directory ( source , destination = None , ** kwargs ) : [EOL] [docstring] [EOL] destination = destination or source [EOL] destination . mkdir ( exist_ok = True ) [EOL] [EOL] pug_templates = filter ( lambda p : p . suffix == [string] , source . iterdir ( ) ) [EOL] [EOL] for template in pug_templates : [EOL] rendered_template = render ( file = template , ** kwargs ) [EOL] new_template = Path ( destination , template . stem ) . with_suffix ( [string] ) [EOL] new_template . write_text ( rendered_template ) [EOL] print ( [string] , new_template . absolute ( ) ) [EOL] [EOL] [EOL] def main ( argv = None ) : [EOL] [docstring] [EOL] args = docopt ( __doc__ , argv = argv , version = [string] ) [EOL] [EOL] if args [ [string] ] and args [ [string] ] : [EOL] raise ValueError ( [string] ) [EOL] [EOL] string = sys . stdin . read ( ) if args [ [string] ] else args [ [string] ] [EOL] file = args [ [string] ] or args [ [string] ] [EOL] pretty = args [ [string] ] [EOL] context = args [ [string] ] [EOL] with_jinja = args [ [string] ] [EOL] verbose = args [ [string] ] [EOL] dry_run = args [ [string] ] [EOL] source = args [ [string] ] [EOL] destination = args [ [string] ] [EOL] [EOL] if dry_run or verbose : [EOL] print ( args , file = sys . stderr , end = [string] ) [EOL] if dry_run : [EOL] print ( [string] , file = sys . stderr ) [EOL] return [EOL] [EOL] if source : [EOL] render_directory ( Path ( source ) , Path ( destination ) , pretty = pretty , context = context , with_jinja = with_jinja ) [EOL] return [EOL] [EOL] output = render ( string = string , file = file , pretty = pretty , context = context , with_jinja = with_jinja ) [EOL] return output [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Dict , Union , Any , Literal [EOL] import pathlib [EOL] import typing_extensions [EOL] import typing [EOL] import builtins [EOL] import jinja2 [EOL] import subprocess [EOL] [docstring] [EOL] import json [EOL] import shlex [EOL] import subprocess as sp [EOL] import typing as T [EOL] from pathlib import Path [EOL] [EOL] from jinja2 import Environment [EOL] [EOL] from ninjadog . constants import PUG_CLI_PATH [EOL] from ninjadog . utils import jsonify [EOL] [EOL] [EOL] def render ( string = [string] , file = None , context = None , pretty = False , pug_cli_path = None , with_jinja = False ) : [EOL] [docstring] [EOL] [EOL] if pug_cli_path is None and PUG_CLI_PATH is None : [EOL] msg = [string] [string] [string] [EOL] raise ValueError ( msg ) [EOL] elif pug_cli_path is None : [EOL] pug_cli_path = PUG_CLI_PATH [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] filepath = Path ( str ( file ) ) if file is not None else file [EOL] [EOL] [comment] [EOL] [comment] [EOL] if filepath and not string : [EOL] with filepath . open ( ) as fp : [EOL] return render ( fp . read ( ) , filepath , context = context , pretty = pretty , pug_cli_path = pug_cli_path , with_jinja = with_jinja , ) [EOL] [EOL] cmd = shlex . quote ( pug_cli_path ) [EOL] path = [string] . format ( shlex . quote ( str ( filepath ) ) ) if filepath else [string] [EOL] pretty_print = [string] if pretty else [string] [EOL] [EOL] if context is None : [EOL] context_arg = [string] [EOL] elif isinstance ( context , str ) : [EOL] context_arg = [string] . format ( shlex . quote ( context ) ) [EOL] else : [EOL] context_arg = [string] . format ( shlex . quote ( jsonify ( context ) ) ) [EOL] [EOL] [comment] [EOL] if with_jinja : [EOL] env = Environment ( ) [EOL] env . globals = context [EOL] if isinstance ( context , str ) : [EOL] context = json . loads ( context ) [EOL] string = env . from_string ( string ) . render ( ) [EOL] [EOL] pug_cli = sp . Popen ( shlex . split ( [string] . format ( cmd , context_arg , path , pretty_print ) ) , stdin = sp . PIPE , stdout = sp . PIPE , cwd = str ( filepath . parent ) if filepath else None , universal_newlines = True , ) [EOL] html , _ = pug_cli . communicate ( string ) [EOL] [EOL] return html if not with_jinja else env . from_string ( html ) . render ( ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Pattern , Optional [EOL] import typing [EOL] import pathlib [EOL] import re [EOL] import subprocess as sp [EOL] from pathlib import Path [EOL] from tempfile import gettempdir [EOL] [EOL] [EOL] EXTENSION_PATT = re . compile ( [string] ) [EOL] PUG_CLI_PATH = str ( Path ( sp . Popen ( ( [string] , [string] ) , stdout = sp . PIPE ) . communicate ( ) [ [number] ] . decode ( [string] ) . strip ( ) ) . absolute ( ) ) \ [EOL] if sp . Popen ( ( [string] , [string] ) , stdout = sp . DEVNULL ) . wait ( ) == [number] else None [EOL] [EOL] [comment] [EOL] TEMPDIR = Path ( gettempdir ( ) , [string] ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0
import functools [EOL] from functools import partial [EOL] from json import dumps [EOL] [EOL] [EOL] jsonify = partial ( dumps , skipkeys = True , default = lambda _ : [string] , ensure_ascii = False ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $functools.partial[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [docstring] [EOL] [EOL] __author__ = [string] [EOL] __email__ = [string] [EOL] __version__ = [string] [EOL] [EOL] from ninjadog . ext . pyramid import includeme [EOL] from ninjadog . ninjadog import render [EOL]	0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any , Union [EOL] import pathlib [EOL] import typing [EOL] import ninjadog [EOL] import builtins [EOL] import typing as T [EOL] from pathlib import Path [EOL] [EOL] from pyramid . path import AssetResolver [EOL] [EOL] from ninjadog . ninjadog import render [EOL] from ninjadog . decorators import idempotent [EOL] [EOL] [EOL] def changed ( dictionary , key , value ) : [EOL] [docstring] [EOL] previous = dictionary . get ( key ) [EOL] dictionary [ key ] = value [EOL] return previous != value [EOL] [EOL] [EOL] def truth ( value ) : [EOL] [docstring] [EOL] if isinstance ( value , bool ) : [EOL] return value [EOL] elif isinstance ( value , str ) : [EOL] return value . lower ( ) . startswith ( [string] ) [EOL] [EOL] [EOL] def resolve ( path , caller = None ) : [EOL] [docstring] [EOL] if [string] in path : [EOL] return Path ( AssetResolver ( ) . resolve ( path ) . abspath ( ) ) [EOL] elif Path ( path ) . is_absolute ( ) : [EOL] return Path ( path ) [EOL] [EOL] return Path ( Path ( caller . __file__ ) . parent , path ) . absolute ( ) [EOL] [EOL] [EOL] @ idempotent def remove_file_if_exists ( file ) : [EOL] [docstring] [EOL] if file . exists ( ) : [EOL] file . unlink ( ) [EOL] [EOL] return True [EOL] [EOL] [EOL] class PugRendererFactory : [EOL] template_cache = { } [EOL] [EOL] def __init__ ( self , info ) : [EOL] self . reload = info . settings [ [string] ] or info . settings [ [string] ] [EOL] self . cached = truth ( info . settings . get ( [string] , False ) ) [EOL] [EOL] self . template_path = resolve ( info . name , info . package ) [EOL] [EOL] def __call__ ( self , value , system ) : [EOL] if not isinstance ( value , dict ) : raise ValueError ( [string] ) [EOL] [EOL] context = system [EOL] context . update ( value ) [EOL] [EOL] if self . cached : [EOL] html_file = self . template_path . with_suffix ( [string] ) [EOL] remove_file_if_exists ( html_file ) [EOL] template_changed = False [EOL] [EOL] if self . reload : [EOL] template_text = self . template_path . read_text ( ) [EOL] template_changed = changed ( PugRendererFactory . template_cache , self . template_path , template_text ) [EOL] [EOL] if ( not html_file . exists ( ) ) or ( self . reload and template_changed ) : [EOL] html = render ( file = self . template_path , context = context , with_jinja = True ) [EOL] html_file . write_text ( html ) [EOL] [EOL] return html [EOL] [EOL] return html_file . read_text ( ) [EOL] [EOL] return render ( file = self . template_path , context = context , with_jinja = True ) [EOL] [EOL] [EOL] def includeme ( config ) : [EOL] config . add_renderer ( [string] , PugRendererFactory ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL]	0