[comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] HAS_AUTOCOMPLETE = True [EOL] try : [EOL] import dal [EOL] except ImportError : [EOL] HAS_AUTOCOMPLETE = False [EOL] [EOL] HAS_TASK_MERGE = False [EOL] if HAS_AUTOCOMPLETE : [EOL] import dal . autocomplete [EOL] [EOL] if getattr ( dal . autocomplete , [string] , None ) is not None : [EOL] HAS_TASK_MERGE = True [EOL]	0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0
from typing import List , Tuple [EOL] import typing [EOL] from django . contrib import admin [EOL] [EOL] from project . todo . models import Attachment , Comment , Task , TaskList [EOL] [EOL] [EOL] class TaskAdmin ( admin . ModelAdmin ) : [EOL] list_display = ( [string] , [string] , [string] , [string] , [string] ) [EOL] list_filter = ( [string] , ) [EOL] ordering = ( [string] , ) [EOL] search_fields = ( [string] , ) [EOL] [EOL] [EOL] class CommentAdmin ( admin . ModelAdmin ) : [EOL] list_display = ( [string] , [string] , [string] ) [EOL] [EOL] [EOL] class AttachmentAdmin ( admin . ModelAdmin ) : [EOL] list_display = ( [string] , [string] , [string] , [string] ) [EOL] autocomplete_fields = [ [string] , [string] ] [EOL] [EOL] [EOL] admin . site . register ( TaskList ) [EOL] admin . site . register ( Comment , CommentAdmin ) [EOL] admin . site . register ( Task , TaskAdmin ) [EOL] admin . site . register ( Attachment , AttachmentAdmin ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Type , List , Any , Tuple [EOL] import typing [EOL] import project [EOL] from django import forms [EOL] from django . contrib . auth . models import Group [EOL] from django . forms import ModelForm [EOL] from project . todo . models import Task , TaskList [EOL] [EOL] [EOL] class AddTaskListForm ( ModelForm ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , user , * args , ** kwargs ) : [EOL] super ( AddTaskListForm , self ) . __init__ ( * args , ** kwargs ) [EOL] self . fields [ [string] ] . queryset = Group . objects . filter ( user = user ) [EOL] self . fields [ [string] ] . widget . attrs = { [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] class Meta : [EOL] model = TaskList [EOL] exclude = [ [string] , [string] ] [EOL] [EOL] [EOL] class AddEditTaskForm ( ModelForm ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , user , * args , ** kwargs ) : [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] task_list = kwargs . get ( [string] ) . get ( [string] ) [EOL] members = task_list . group . user_set . all ( ) [EOL] self . fields [ [string] ] . queryset = members [EOL] self . fields [ [string] ] . label_from_instance = lambda obj : [string] % ( obj . get_full_name ( ) , obj . username , ) [EOL] self . fields [ [string] ] . widget . attrs = { [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] self . fields [ [string] ] . value = kwargs [ [string] ] [ [string] ] . id [EOL] [EOL] due_date = forms . DateField ( widget = forms . DateInput ( attrs = { [string] : [string] } ) , required = False ) [EOL] [EOL] title = forms . CharField ( widget = forms . widgets . TextInput ( ) ) [EOL] [EOL] note = forms . CharField ( widget = forms . Textarea ( ) , required = False ) [EOL] [EOL] def clean_created_by ( self ) : [EOL] [docstring] [EOL] return self . instance . created_by [EOL] [EOL] class Meta : [EOL] model = Task [EOL] exclude = [ ] [EOL] [EOL] [EOL] class AddExternalTaskForm ( ModelForm ) : [EOL] [docstring] [EOL] [EOL] title = forms . CharField ( widget = forms . widgets . TextInput ( attrs = { [string] : [number] } ) , label = [string] ) [EOL] note = forms . CharField ( widget = forms . widgets . Textarea ( ) , label = [string] ) [EOL] priority = forms . IntegerField ( widget = forms . HiddenInput ( ) ) [EOL] [EOL] class Meta : [EOL] model = Task [EOL] exclude = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class SearchForm ( forms . Form ) : [EOL] [docstring] [EOL] [EOL] q = forms . CharField ( widget = forms . widgets . TextInput ( attrs = { [string] : [number] } ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project.todo.forms.AddExternalTaskForm.Meta]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project.todo.forms.AddEditTaskForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project.todo.forms.AddEditTaskForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project.todo.forms.AddEditTaskForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project.todo.forms.AddExternalTaskForm.Meta]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project.todo.forms.AddExternalTaskForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project.todo.forms.AddExternalTaskForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project.todo.forms.AddExternalTaskForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project.todo.forms.AddExternalTaskForm.Meta]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[project.todo.forms.SearchForm]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
def imap_producer ( ** kwargs ) : [EOL] def imap_producer_factory ( ) : [EOL] [comment] [EOL] [comment] [EOL] from . imap import imap_producer [EOL] [EOL] return imap_producer ( ** kwargs ) [EOL] [EOL] return imap_producer_factory [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
def tracker_consumer ( ** kwargs ) : [EOL] def tracker_factory ( producer ) : [EOL] [comment] [EOL] [comment] [EOL] from . tracker import tracker_consumer [EOL] [EOL] return tracker_consumer ( producer , ** kwargs ) [EOL] [EOL] return tracker_factory [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , Dict [EOL] import typing [EOL] import bleach [EOL] import pytest [EOL] [EOL] from django . contrib . auth import get_user_model [EOL] from django . contrib . auth . models import Group [EOL] from django . urls import reverse [EOL] [EOL] from project . todo . models import Task , TaskList [EOL] [EOL] [docstring] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_todo_setup ( todo_setup ) : [EOL] assert Task . objects . all ( ) . count ( ) == [number] [EOL] [EOL] [EOL] def test_view_list_lists ( todo_setup , admin_client ) : [EOL] url = reverse ( [string] ) [EOL] response = admin_client . get ( url ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_view_reorder ( todo_setup , admin_client ) : [EOL] url = reverse ( [string] ) [EOL] response = admin_client . get ( url ) [EOL] assert response . status_code == [number] [comment] [EOL] [EOL] [EOL] def test_view_external_add ( todo_setup , admin_client , settings ) : [EOL] default_list = TaskList . objects . first ( ) [EOL] settings . TODO_DEFAULT_LIST_SLUG = default_list . slug [EOL] assert settings . TODO_DEFAULT_LIST_SLUG == default_list . slug [EOL] url = reverse ( [string] ) [EOL] response = admin_client . get ( url ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_view_mine ( todo_setup , admin_client ) : [EOL] url = reverse ( [string] ) [EOL] response = admin_client . get ( url ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_view_list_completed ( todo_setup , admin_client ) : [EOL] tlist = TaskList . objects . get ( slug = [string] ) [EOL] url = reverse ( [string] , kwargs = { [string] : tlist . id , [string] : tlist . slug } ) [EOL] response = admin_client . get ( url ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_view_list ( todo_setup , admin_client ) : [EOL] tlist = TaskList . objects . get ( slug = [string] ) [EOL] url = reverse ( [string] , kwargs = { [string] : tlist . id , [string] : tlist . slug } ) [EOL] response = admin_client . get ( url ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_view_add_list ( todo_setup , admin_client ) : [EOL] url = reverse ( [string] ) [EOL] response = admin_client . get ( url ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_view_task_detail ( todo_setup , admin_client ) : [EOL] task = Task . objects . first ( ) [EOL] url = reverse ( [string] , kwargs = { [string] : task . id } ) [EOL] response = admin_client . get ( url ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_del_task ( todo_setup , admin_user , client ) : [EOL] task = Task . objects . first ( ) [EOL] url = reverse ( [string] , kwargs = { [string] : task . id } ) [EOL] [comment] [EOL] client . login ( username = [string] , password = [string] ) [EOL] response = client . get ( url ) [EOL] assert response . status_code == [number] [EOL] response = client . post ( url ) [EOL] assert not Task . objects . filter ( id = task . id ) . exists ( ) [EOL] [EOL] [EOL] def test_task_toggle_done ( todo_setup , admin_user , client ) : [EOL] task = Task . objects . first ( ) [EOL] assert not task . completed [EOL] url = reverse ( [string] , kwargs = { [string] : task . id } ) [EOL] [comment] [EOL] client . login ( username = [string] , password = [string] ) [EOL] response = client . get ( url ) [EOL] assert response . status_code == [number] [EOL] [EOL] client . post ( url ) [EOL] task . refresh_from_db ( ) [EOL] assert task . completed [EOL] [EOL] [EOL] def test_view_search ( todo_setup , admin_client ) : [EOL] url = reverse ( [string] ) [EOL] response = admin_client . get ( url ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_no_javascript_in_task_note ( todo_setup , client ) : [EOL] task_list = TaskList . objects . first ( ) [EOL] user = get_user_model ( ) . objects . get ( username = [string] ) [EOL] title = [string] [EOL] note = [string] [EOL] data = { [string] : task_list . id , [string] : user . id , [string] : [number] , [string] : title , [string] : note , [string] : [string] , } [EOL] [EOL] client . login ( username = [string] , password = [string] ) [EOL] url = reverse ( [string] , kwargs = { [string] : task_list . id , [string] : task_list . slug } ) [EOL] [EOL] response = client . post ( url , data ) [EOL] assert response . status_code == [number] [EOL] [EOL] [comment] [EOL] task = Task . objects . get ( title = title ) [EOL] assert task . note != note [comment] [EOL] assert task . note == bleach . clean ( note , strip = True ) [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_created_by_unchanged ( todo_setup , client ) : [EOL] [EOL] task_list = TaskList . objects . first ( ) [EOL] u2 = get_user_model ( ) . objects . get ( username = [string] ) [EOL] title = [string] [EOL] note = [string] [EOL] data = { [string] : task_list . id , [string] : u2 . id , [string] : [number] , [string] : title , [string] : note , [string] : [string] , } [EOL] [EOL] client . login ( username = [string] , password = [string] ) [EOL] url_add_task = reverse ( [string] , kwargs = { [string] : task_list . id , [string] : task_list . slug } ) [EOL] [EOL] response = client . post ( url_add_task , data ) [EOL] assert response . status_code == [number] [EOL] [EOL] [comment] [EOL] task = Task . objects . get ( title = title ) [EOL] assert task . created_by == u2 [EOL] [EOL] [comment] [EOL] [comment] [EOL] extra_g2_user = get_user_model ( ) . objects . get ( username = [string] ) [EOL] [EOL] client . login ( username = [string] , password = [string] ) [EOL] [EOL] url_edit_task = reverse ( [string] , kwargs = { [string] : task . id } ) [EOL] [EOL] dataTwo = { [string] : task . task_list . id , [string] : extra_g2_user . id , [string] : [number] , [string] : task . title , [string] : [string] , [string] : [string] , } [EOL] [EOL] response = client . post ( url_edit_task , dataTwo ) [EOL] assert response . status_code == [number] [EOL] [EOL] task . refresh_from_db ( ) [EOL] [EOL] [comment] [EOL] assert task . note == [string] [EOL] [EOL] [comment] [EOL] assert task . created_by == u2 [EOL] [EOL] [EOL] @ pytest . mark . django_db def test_no_javascript_in_comments ( todo_setup , client ) : [EOL] user = get_user_model ( ) . objects . get ( username = [string] ) [EOL] client . login ( username = [string] , password = [string] ) [EOL] [EOL] task = Task . objects . first ( ) [EOL] task . created_by = user [EOL] task . save ( ) [EOL] [EOL] user . groups . add ( task . task_list . group ) [EOL] [EOL] comment = [string] [EOL] data = { [string] : comment , [string] : [string] } [EOL] url = reverse ( [string] , kwargs = { [string] : task . id } ) [EOL] [EOL] response = client . post ( url , data ) [EOL] assert response . status_code == [number] [EOL] [EOL] task . refresh_from_db ( ) [EOL] newcomment = task . comment_set . last ( ) [EOL] assert newcomment != comment [comment] [EOL] assert newcomment . body == bleach . clean ( comment , strip = True ) [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def test_view_add_list_nonadmin ( todo_setup , client ) : [EOL] url = reverse ( [string] ) [EOL] client . login ( username = [string] , password = [string] ) [EOL] response = client . get ( url ) [EOL] assert response . status_code == [number] [comment] [EOL] [EOL] [EOL] def test_view_del_list_nonadmin ( todo_setup , client ) : [EOL] tlist = TaskList . objects . get ( slug = [string] ) [EOL] url = reverse ( [string] , kwargs = { [string] : tlist . id , [string] : tlist . slug } ) [EOL] client . login ( username = [string] , password = [string] ) [EOL] response = client . get ( url ) [EOL] assert response . status_code == [number] [comment] [EOL] [EOL] [EOL] def test_del_list_not_in_list_group ( todo_setup , admin_client ) : [EOL] tlist = TaskList . objects . get ( slug = [string] ) [EOL] url = reverse ( [string] , kwargs = { [string] : tlist . id , [string] : tlist . slug } ) [EOL] response = admin_client . get ( url ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_view_list_mine ( todo_setup , client ) : [EOL] [docstring] [EOL] tlist = TaskList . objects . get ( slug = [string] ) [comment] [EOL] url = reverse ( [string] , kwargs = { [string] : tlist . id , [string] : tlist . slug } ) [EOL] client . login ( username = [string] , password = [string] ) [EOL] response = client . get ( url ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_view_list_not_mine ( todo_setup , client ) : [EOL] [docstring] [EOL] tlist = TaskList . objects . get ( slug = [string] ) [comment] [EOL] url = reverse ( [string] , kwargs = { [string] : tlist . id , [string] : tlist . slug } ) [EOL] client . login ( username = [string] , password = [string] ) [EOL] response = client . get ( url ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_view_task_mine ( todo_setup , client ) : [EOL] [comment] [EOL] task = Task . objects . filter ( created_by__username = [string] ) . first ( ) [EOL] client . login ( username = [string] , password = [string] ) [EOL] url = reverse ( [string] , kwargs = { [string] : task . id } ) [EOL] response = client . get ( url ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_view_task_my_group ( todo_setup , client , django_user_model ) : [EOL] [docstring] [EOL] g1 = Group . objects . get ( name = [string] ) [EOL] u2 = django_user_model . objects . get ( username = [string] ) [EOL] u2 . groups . add ( g1 ) [EOL] [EOL] [comment] [EOL] task = Task . objects . filter ( created_by__username = [string] ) . first ( ) [EOL] url = reverse ( [string] , kwargs = { [string] : task . id } ) [EOL] client . login ( username = [string] , password = [string] ) [EOL] response = client . get ( url ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_view_task_not_in_my_group ( todo_setup , client ) : [EOL] [comment] [EOL] [comment] [EOL] task = Task . objects . filter ( created_by__username = [string] ) . first ( ) [EOL] url = reverse ( [string] , kwargs = { [string] : task . id } ) [EOL] client . login ( username = [string] , password = [string] ) [EOL] response = client . get ( url ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_setting_TODO_STAFF_ONLY_False ( todo_setup , client , settings ) : [EOL] [comment] [EOL] [comment] [EOL] settings . TODO_STAFF_ONLY = False [EOL] url = reverse ( [string] ) [EOL] client . login ( username = [string] , password = [string] ) [EOL] response = client . get ( url ) [EOL] assert response . status_code == [number] [EOL] [EOL] [EOL] def test_setting_TODO_STAFF_ONLY_True ( todo_setup , client , settings , django_user_model ) : [EOL] [comment] [EOL] [comment] [EOL] settings . TODO_STAFF_ONLY = True [EOL] url = reverse ( [string] ) [EOL] [EOL] [comment] [EOL] u2 = django_user_model . objects . get ( username = [string] ) [EOL] u2 . is_staff = False [EOL] u2 . save ( ) [EOL] [EOL] client . login ( username = [string] , password = [string] ) [EOL] response = client . get ( url ) [EOL] assert response . status_code == [number] [comment] [EOL]	
	0
from typing import Any [EOL] import typing [EOL] import email [EOL] import pytest [EOL] [EOL] from django . core import mail [EOL] [EOL] from project . todo . models import Task , Comment [EOL] from project . todo . mail . consumers import tracker_consumer [EOL] from email . message import EmailMessage [EOL] [EOL] [EOL] def consumer ( * args , title_format = [string] , ** kwargs ) : [EOL] return tracker_consumer ( group = [string] , task_list_slug = [string] , priority = [number] , task_title_format = title_format ) ( * args , ** kwargs ) [EOL] [EOL] [EOL] def make_message ( subject , content ) : [EOL] msg = EmailMessage ( ) [EOL] msg . set_content ( content ) [EOL] msg [ [string] ] = subject [EOL] return msg [EOL] [EOL] [EOL] def test_tracker_task_creation ( todo_setup , django_user_model ) : [EOL] msg = make_message ( [string] , [string] ) [EOL] msg [ [string] ] = [string] [EOL] msg [ [string] ] = [string] [EOL] [EOL] [comment] [EOL] task_count = Task . objects . count ( ) [EOL] consumer ( [ msg ] ) [EOL] [EOL] assert task_count + [number] == Task . objects . count ( ) , [string] [EOL] task = Task . objects . filter ( title = [string] ) . first ( ) [EOL] assert task is not None , [string] [EOL] [EOL] [comment] [EOL] msg = make_message ( [string] , [string] ) [EOL] msg [ [string] ] = [string] [EOL] msg [ [string] ] = [string] [EOL] msg [ [string] ] = [string] [EOL] [EOL] task_count = Task . objects . count ( ) [EOL] consumer ( [ msg ] ) [EOL] assert task_count == Task . objects . count ( ) , [string] [EOL] Comment . objects . get ( task = task , body__contains = [string] , email_message_id = [string] ) [EOL] [EOL] [comment] [EOL] msg = make_message ( [string] , [string] ) [EOL] msg [ [string] ] = [string] [EOL] msg [ [string] ] = [string] [EOL] msg [ [string] ] = [string] . format ( task . pk ) [EOL] [EOL] task_count = Task . objects . count ( ) [EOL] consumer ( [ msg ] ) [EOL] assert task_count == Task . objects . count ( ) , [string] [EOL] Comment . objects . get ( task = task , body__contains = [string] , email_message_id = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Any [EOL] import django [EOL] import typing [EOL] import pathlib [EOL] import sys [EOL] from typing import Any [EOL] from pathlib import Path [EOL] [EOL] from django . core . management . base import BaseCommand , CommandParser [EOL] [EOL] from project . todo . operations . csv_importer import CSVImporter [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] [EOL] parser . add_argument ( [string] , [string] , dest = [string] , default = None , help = [string] ) [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] [comment] [EOL] if not options . get ( [string] ) : [EOL] print ( [string] ) [EOL] sys . exit ( [number] ) [EOL] [EOL] filepath = Path ( options [ [string] ] ) [EOL] [EOL] if not filepath . exists ( ) : [EOL] print ( f" [string] { filepath }" ) [EOL] sys . exit ( [number] ) [EOL] [EOL] [comment] [EOL] with filepath . open ( mode = [string] , encoding = [string] ) as fileobj : [EOL] importer = CSVImporter ( ) [EOL] results = importer . upsert ( fileobj , as_string_obj = True ) [EOL] [EOL] [comment] [EOL] print ( ) [EOL] if results [ [string] ] : [EOL] for upsert_msg in results [ [string] ] : [EOL] print ( upsert_msg ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if results [ [string] ] : [EOL] for error_dict in results [ [string] ] : [EOL] for k , error_list in error_dict . items ( ) : [EOL] print ( f" [string] { k } [string] " ) [EOL] for msg in error_list : [EOL] print ( f" [string] { msg }" ) [EOL] [EOL] print ( ) [EOL] if results [ [string] ] : [EOL] for summary_msg in results [ [string] ] : [EOL] print ( summary_msg ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 $django.core.management.base.CommandParser$ 0 0 0 0 $django.core.management.base.CommandParser$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any , Dict [EOL] import django [EOL] import typing [EOL] from django . contrib . auth . decorators import login_required , user_passes_test [EOL] from django . db . models import Q [EOL] from django . http import HttpResponse [EOL] from django . shortcuts import render [EOL] [EOL] from project . todo . models import Task [EOL] from project . todo . utils import staff_check [EOL] [EOL] [EOL] @ login_required @ user_passes_test ( staff_check ) def search ( request ) : [EOL] [docstring] [EOL] [EOL] query_string = [string] [EOL] [EOL] if request . GET : [EOL] [EOL] found_tasks = None [EOL] if ( [string] in request . GET ) and request . GET [ [string] ] . strip ( ) : [EOL] query_string = request . GET [ [string] ] [EOL] [EOL] found_tasks = Task . objects . filter ( Q ( title__icontains = query_string ) | Q ( note__icontains = query_string ) ) [EOL] else : [EOL] [comment] [EOL] [comment] [EOL] found_tasks = Task . objects . all ( ) [EOL] [EOL] if [string] in request . GET : [EOL] found_tasks = found_tasks . exclude ( completed = True ) [EOL] [EOL] else : [EOL] found_tasks = None [EOL] [EOL] [comment] [EOL] if not request . user . is_superuser : [EOL] found_tasks = found_tasks . filter ( task_list__group__in = request . user . groups . all ( ) ) [EOL] [EOL] context = { [string] : query_string , [string] : found_tasks } [EOL] return render ( request , [string] , context ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.http.HttpResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import django [EOL] import builtins [EOL] import typing [EOL] from django . contrib import messages [EOL] from django . contrib . auth . decorators import login_required [EOL] from django . core . exceptions import PermissionDenied [EOL] from django . http import HttpResponse [EOL] from django . shortcuts import get_object_or_404 , redirect [EOL] from django . urls import reverse [EOL] [EOL] from project . todo . models import Attachment [EOL] from project . todo . utils import remove_attachment_file [EOL] [EOL] [EOL] @ login_required def remove_attachment ( request , attachment_id ) : [EOL] [docstring] [EOL] [EOL] if request . method == [string] : [EOL] attachment = get_object_or_404 ( Attachment , pk = attachment_id ) [EOL] [EOL] redir_url = reverse ( [string] , kwargs = { [string] : attachment . task . id } ) [EOL] [EOL] [comment] [EOL] if not ( attachment . task . task_list . group in request . user . groups . all ( ) or request . user . is_superuser ) : [EOL] raise PermissionDenied [EOL] [EOL] if remove_attachment_file ( attachment . id ) : [EOL] messages . success ( request , f" [string] { attachment . id } [string] " ) [EOL] else : [EOL] messages . error ( request , f" [string] { attachment . id } [string] " ) [EOL] [EOL] return redirect ( redir_url ) [EOL] [EOL] else : [EOL] raise PermissionDenied [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.http.HttpResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from project . todo . views . add_list import add_list [comment] [EOL] from project . todo . views . del_list import del_list [comment] [EOL] from project . todo . views . delete_task import delete_task [comment] [EOL] from project . todo . views . external_add import external_add [comment] [EOL] from project . todo . views . import_csv import import_csv [comment] [EOL] from project . todo . views . list_detail import list_detail [comment] [EOL] from project . todo . views . list_lists import list_lists [comment] [EOL] from project . todo . views . remove_attachment import remove_attachment [comment] [EOL] from project . todo . views . reorder_tasks import reorder_tasks [comment] [EOL] from project . todo . views . search import search [comment] [EOL] from project . todo . views . task_detail import task_detail [comment] [EOL] from project . todo . views . toggle_done import toggle_done [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Any , Dict [EOL] import django [EOL] import typing [EOL] import project [EOL] import bleach [EOL] from django . contrib import messages [EOL] from django . contrib . auth . decorators import login_required , user_passes_test [EOL] from django . contrib . admin . views . decorators import staff_member_required [EOL] from django . core . exceptions import PermissionDenied [EOL] from django . http import HttpResponse [EOL] from django . shortcuts import get_object_or_404 , redirect , render [EOL] from django . utils import timezone [EOL] [EOL] from project . todo . forms import AddEditTaskForm [EOL] from project . todo . models import Task , TaskList [EOL] from project . todo . utils import send_notify_mail , staff_check [EOL] [EOL] [EOL] def my_tickets ( request , list_id = None , list_slug = None , view_completed = False ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] task_list = None [EOL] form = None [EOL] [EOL] [comment] [EOL] if list_slug == [string] : [EOL] tasks = Task . objects . filter ( assigned_to = request . user ) [EOL] [EOL] else : [EOL] [comment] [EOL] task_list = get_object_or_404 ( TaskList , id = list_id ) [EOL] if task_list . group not in request . user . groups . all ( ) and not request . user . is_superuser : [EOL] raise PermissionDenied [EOL] tasks = Task . objects . filter ( task_list = task_list . id ) [EOL] [EOL] [comment] [EOL] if view_completed : [EOL] tasks = tasks . filter ( completed = True ) [EOL] else : [EOL] tasks = tasks . filter ( completed = False ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] if request . POST . getlist ( [string] ) : [EOL] form = AddEditTaskForm ( request . user , request . POST , initial = { [string] : request . user . id , [string] : [number] , [string] : task_list } , ) [EOL] [EOL] if form . is_valid ( ) : [EOL] new_task = form . save ( commit = False ) [EOL] new_task . created_by = request . user [EOL] new_task . note = bleach . clean ( form . cleaned_data [ [string] ] , strip = True ) [EOL] form . save ( ) [EOL] [EOL] [comment] [EOL] if ( [string] in request . POST [EOL] and new_task . assigned_to [EOL] and new_task . assigned_to != request . user ) : [EOL] send_notify_mail ( new_task ) [EOL] [EOL] messages . success ( request , [string] . format ( t = new_task . title ) ) [EOL] return redirect ( request . path ) [EOL] else : [EOL] [comment] [EOL] if list_slug not in [ [string] , [string] , [string] ] : [EOL] form = AddEditTaskForm ( request . user , initial = { [string] : request . user . id , [string] : [number] , [string] : task_list } , ) [EOL] [EOL] context = { [string] : list_id , [string] : list_slug , [string] : task_list , [string] : form , [string] : tasks , [string] : view_completed , } [EOL] [EOL] return render ( request , [string] , context ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.http.HttpResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Dict [EOL] import django [EOL] import typing [EOL] import builtins [EOL] from django . contrib import messages [EOL] from django . contrib . auth . decorators import login_required , user_passes_test [EOL] from django . contrib . admin . views . decorators import staff_member_required [EOL] from django . core . exceptions import PermissionDenied [EOL] from django . http import HttpResponse [EOL] from django . shortcuts import get_object_or_404 , redirect , render [EOL] [EOL] from project . todo . models import Task , TaskList [EOL] from project . todo . utils import staff_check [EOL] [EOL] [EOL] @ staff_member_required ( redirect_field_name = [string] , login_url = [string] ) @ login_required @ user_passes_test ( staff_check ) def del_list ( request , list_id , list_slug ) : [EOL] [docstring] [EOL] task_list = get_object_or_404 ( TaskList , id = list_id ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if task_list . group not in request . user . groups . all ( ) : [EOL] raise PermissionDenied [EOL] if not request . user . is_staff : [EOL] raise PermissionDenied [EOL] [EOL] if request . method == [string] : [EOL] TaskList . objects . get ( id = task_list . id ) . delete ( ) [EOL] messages . success ( request , [string] . format ( list_name = task_list . name ) ) [EOL] return redirect ( [string] ) [EOL] else : [EOL] task_count_done = Task . objects . filter ( task_list = task_list . id , completed = True ) . count ( ) [EOL] task_count_undone = Task . objects . filter ( task_list = task_list . id , completed = False ) . count ( ) [EOL] task_count_total = Task . objects . filter ( task_list = task_list . id ) . count ( ) [EOL] [EOL] context = { [string] : task_list , [string] : task_count_done , [string] : task_count_undone , [string] : task_count_total , } [EOL] [EOL] return render ( request , [string] , context ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $django.http.HttpResponse$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0