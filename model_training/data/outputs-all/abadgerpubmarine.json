[comment] [EOL] [docstring] [EOL] from io import open [EOL] from setuptools import setup [EOL] from sphinx_rtd_theme import __version__ [EOL] [EOL] [EOL] setup ( name = [string] , version = __version__ , url = [string] , license = [string] , author = [string] , author_email = [string] , description = [string] , long_description = open ( [string] , encoding = [string] ) . read ( ) , zip_safe = False , packages = [ [string] ] , package_data = { [string] : [ [string] , [string] , [string] , [string] , [string] ] } , include_package_data = True , entry_points = { [string] : [ [string] , ] } , classifiers = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import os [EOL] [EOL] import pytest [EOL] import sphinx [EOL] from sphinx import addnodes [EOL] from sphinx . builders . html import SingleFileHTMLBuilder , DirectoryHTMLBuilder [EOL] [EOL] from . util import build_all [EOL] [EOL] [EOL] def test_basic ( ) : [EOL] for ( app , status , warning ) in build_all ( [string] ) : [EOL] assert app . env . get_doctree ( [string] ) . traverse ( addnodes . toctree ) [EOL] content = open ( os . path . join ( app . outdir , [string] ) ) . read ( ) [EOL] [EOL] if isinstance ( app . builder , DirectoryHTMLBuilder ) : [EOL] search = ( [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] ) [EOL] assert search in content [EOL] elif isinstance ( app . builder , SingleFileHTMLBuilder ) : [EOL] search = ( [string] [string] [string] [string] [string] [string] [string] [string] ) [EOL] assert search in content [EOL] else : [EOL] search = ( [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] [string] ) [EOL] assert search in content , ( [string] . format ( app . builder . name ) ) [EOL] [EOL] [EOL] def test_empty ( ) : [EOL] [docstring] [EOL] for ( app , status , warning ) in build_all ( [string] ) : [EOL] assert app . env . get_doctree ( [string] ) . traverse ( addnodes . toctree ) [EOL] content = open ( os . path . join ( app . outdir , [string] ) ) . read ( ) [EOL] if sphinx . version_info < ( [number] , [number] ) : [EOL] if isinstance ( app . builder , SingleFileHTMLBuilder ) : [EOL] assert [string] in content [EOL] assert [string] in content [EOL] else : [EOL] global_toc = ( [string] [string] [string] ) [EOL] local_toc = ( [string] [string] ) [EOL] assert global_toc in content [EOL] assert local_toc not in content [EOL] else : [EOL] global_toc = [string] [EOL] local_toc = ( [string] [string] [string] ) [EOL] assert global_toc in content [EOL] assert local_toc not in content [EOL] [EOL] [EOL] def test_missing_toctree ( ) : [EOL] [docstring] [EOL] for ( app , status , warning ) in build_all ( [string] ) : [EOL] assert app . env . get_doctree ( [string] ) . traverse ( addnodes . toctree ) == [ ] [EOL] content = open ( os . path . join ( app . outdir , [string] ) ) . read ( ) [EOL] assert [string] not in content [EOL] assert [string] in content [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from __future__ import print_function [EOL] [EOL] import os [EOL] import tempfile [EOL] import shutil [EOL] from contextlib import contextmanager [EOL] [EOL] import pytest [EOL] from sphinx . application import Sphinx [EOL] [EOL] try : [EOL] from StringIO import StringIO [EOL] except ImportError : [EOL] from io import StringIO [EOL] [EOL] [EOL] @ contextmanager def build ( root , builder = [string] , ** kwargs ) : [EOL] tmpdir = tempfile . mkdtemp ( ) [EOL] [EOL] srcdir = os . path . join ( os . path . dirname ( __file__ ) , [string] , root ) [EOL] destdir = os . path . join ( tmpdir , builder ) [EOL] doctreedir = os . path . join ( tmpdir , [string] ) [EOL] [EOL] status = StringIO ( ) [EOL] warning = StringIO ( ) [EOL] [EOL] kwargs . update ( { [string] : status , [string] : warning , } ) [EOL] [EOL] confoverrides = kwargs . pop ( [string] , { } ) [EOL] confoverrides [ [string] ] = [string] [EOL] extensions = confoverrides . get ( [string] , [ ] ) [EOL] extensions . append ( [string] ) [EOL] confoverrides [ [string] ] = extensions [EOL] kwargs [ [string] ] = confoverrides [EOL] [EOL] try : [EOL] app = Sphinx ( srcdir , srcdir , destdir , doctreedir , builder , ** kwargs ) [EOL] app . builder . build_all ( ) [EOL] yield ( app , status . getvalue ( ) , warning . getvalue ( ) ) [EOL] except Exception as e : [EOL] print ( [string] , root ) [EOL] print ( [string] , builder ) [EOL] print ( [string] , srcdir ) [EOL] print ( [string] , destdir ) [EOL] print ( [string] , [string] + status . getvalue ( ) ) [EOL] print ( [string] , [string] + warning . getvalue ( ) ) [EOL] raise [EOL] finally : [EOL] shutil . rmtree ( tmpdir ) [EOL] [EOL] [EOL] def build_all ( root , ** kwargs ) : [EOL] for builder in [ [string] , [string] , [string] , [string] , [string] , [string] ] : [EOL] with build ( root , builder , ** kwargs ) as ret : [EOL] yield ret [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import List [EOL] import typing [EOL] master_doc = [string] [EOL] exclude_patterns = [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List [EOL] import typing [EOL] master_doc = [string] [EOL] exclude_patterns = [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List [EOL] import typing [EOL] master_doc = [string] [EOL] exclude_patterns = [ [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0
[comment] [EOL] [docstring] [EOL] [EOL] [EOL] class Foo : [EOL] [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] bar = [number] [EOL] [EOL] flox = [number] [comment] [EOL] [EOL] baz = [number] [EOL] [docstring] [EOL] [EOL] def __init__ ( self , qux , spam = False ) : [EOL] [docstring] [EOL] [comment] [EOL] self . qux = [number] [EOL] [EOL] self . spam = [number] [EOL] [docstring] [EOL] [EOL] def add ( self , val1 , val2 ) : [EOL] [docstring] [EOL] [EOL] return val1 + val2 [EOL] [EOL] def capitalize ( self , myvalue ) : [EOL] [docstring] [EOL] [EOL] return myvalue . upper ( ) [EOL] [EOL] def another_function ( self , a , b , ** kwargs ) : [EOL] [docstring] [EOL] return sum ( kwargs . values ( ) ) / len ( kwargs ) , a + b [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Set , Any [EOL] import typing [EOL] import pubmarine [EOL] import asyncio [EOL] import asyncio [EOL] [EOL] import pytest [EOL] [EOL] from pubmarine import PubPen [EOL] [EOL] [EOL] @ pytest . fixture def pubpen ( request , event_loop ) : [EOL] pubpen = PubPen ( event_loop ) [EOL] return pubpen [EOL] [EOL] [EOL] class Function : [EOL] def __init__ ( self ) : [EOL] self . called = [number] [EOL] [EOL] def __call__ ( self , * args ) : [EOL] self . called += [number] [EOL] [EOL] [EOL] @ pytest . fixture def function1 ( request ) : [EOL] request . cls . function1 = Function ( ) [EOL] [EOL] [EOL] @ pytest . fixture def function2 ( request ) : [EOL] request . cls . function2 = Function ( ) [EOL] [EOL] [EOL] @ pytest . mark . usefixtures ( [string] , [string] ) class TestFunctionalUnsubscribe : [EOL] [EOL] def test_no_callbacks_made ( self , pubpen ) : [EOL] [docstring] [EOL] first = pubpen . subscribe ( [string] , self . function1 ) [EOL] pubpen . unsubscribe ( first ) [EOL] assert self . function1 . called == [number] [EOL] [EOL] for iteration in range ( [number] , [number] ) : [EOL] pubpen . emit ( [string] ) [EOL] pending = asyncio . Task . all_tasks ( loop = pubpen . loop ) [EOL] pubpen . loop . run_until_complete ( asyncio . gather ( * pending , loop = pubpen . loop ) ) [EOL] assert self . function1 . called == [number] [EOL] [EOL] def test_no_further_callbacks_made ( self , pubpen ) : [EOL] [docstring] [EOL] first = pubpen . subscribe ( [string] , self . function1 ) [EOL] assert self . function1 . called == [number] [EOL] pubpen . emit ( [string] ) [EOL] pubpen . unsubscribe ( first ) [EOL] [EOL] for iteration in range ( [number] , [number] ) : [EOL] pubpen . emit ( [string] ) [EOL] pending = asyncio . Task . all_tasks ( loop = pubpen . loop ) [EOL] pubpen . loop . run_until_complete ( asyncio . gather ( * pending , loop = pubpen . loop ) ) [EOL] assert self . function1 . called == [number] [EOL] [EOL] def test_events_and_callbacks_isolated ( self , pubpen ) : [EOL] [docstring] [EOL] first = pubpen . subscribe ( [string] , self . function1 ) [EOL] second = pubpen . subscribe ( [string] , self . function2 ) [EOL] pubpen . unsubscribe ( first ) [EOL] assert self . function1 . called == [number] [EOL] assert self . function2 . called == [number] [EOL] [EOL] for iteration in range ( [number] , [number] ) : [EOL] pubpen . emit ( [string] ) [EOL] pubpen . emit ( [string] ) [EOL] pending = asyncio . Task . all_tasks ( loop = pubpen . loop ) [EOL] pubpen . loop . run_until_complete ( asyncio . gather ( * pending , loop = pubpen . loop ) ) [EOL] assert self . function1 . called == [number] [EOL] assert self . function2 . called == [number] * iteration [EOL] [EOL] def test_events_isolated ( self , pubpen ) : [EOL] [docstring] [EOL] first = pubpen . subscribe ( [string] , self . function1 ) [EOL] second = pubpen . subscribe ( [string] , self . function1 ) [EOL] pubpen . unsubscribe ( first ) [EOL] assert self . function1 . called == [number] [EOL] [EOL] for iteration in range ( [number] , [number] ) : [EOL] pubpen . emit ( [string] ) [EOL] pubpen . emit ( [string] ) [EOL] pending = asyncio . Task . all_tasks ( loop = pubpen . loop ) [EOL] pubpen . loop . run_until_complete ( asyncio . gather ( * pending , loop = pubpen . loop ) ) [EOL] assert self . function1 . called == [number] * iteration [EOL] [EOL] def test_callbacks_isolated ( self , pubpen ) : [EOL] [docstring] [EOL] first = pubpen . subscribe ( [string] , self . function1 ) [EOL] second = pubpen . subscribe ( [string] , self . function2 ) [EOL] pubpen . unsubscribe ( first ) [EOL] assert self . function1 . called == [number] [EOL] assert self . function2 . called == [number] [EOL] [EOL] for iteration in range ( [number] , [number] ) : [EOL] pubpen . emit ( [string] ) [EOL] pending = asyncio . Task . all_tasks ( loop = pubpen . loop ) [EOL] pubpen . loop . run_until_complete ( asyncio . gather ( * pending , loop = pubpen . loop ) ) [EOL] assert self . function1 . called == [number] [EOL] assert self . function2 . called == [number] * iteration [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[asyncio.tasks.Task[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[asyncio.tasks.Task[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[asyncio.tasks.Task[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[asyncio.tasks.Task[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[asyncio.tasks.Task[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[asyncio.tasks.Task[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[asyncio.tasks.Task[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[asyncio.tasks.Task[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[asyncio.tasks.Task[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[asyncio.tasks.Task[typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import tests [EOL] import typing [EOL] import pubmarine [EOL] import weakref [EOL] [EOL] import pytest [EOL] [EOL] import pubmarine [EOL] from pubmarine import PubPen [EOL] [EOL] [EOL] @ pytest . fixture def pubpen ( event_loop ) : [EOL] pubpen = PubPen ( event_loop ) [EOL] return pubpen [EOL] [EOL] [EOL] @ pytest . fixture def pubpen_predefined ( event_loop ) : [EOL] pubpen = PubPen ( event_loop , event_list = [ [string] , [string] ] ) [EOL] return pubpen [EOL] [EOL] [EOL] class Foo : [EOL] def method ( self ) : [EOL] pass [EOL] [EOL] [EOL] def function ( ) : [EOL] pass [EOL] [EOL] [EOL] class TestPubPenSubscribe : [EOL] [EOL] def test_pubpen_id_integer ( self , pubpen ) : [EOL] id_ = pubpen . subscribe ( [string] , function ) [EOL] assert isinstance ( id_ , int ) [EOL] [EOL] def test_pubpen_id_increments ( self , pubpen ) : [EOL] first = pubpen . subscribe ( [string] , lambda : None ) [EOL] second = pubpen . subscribe ( [string] , lambda : None ) [EOL] assert second > first [EOL] [EOL] def test_subscribe_function ( self , pubpen ) : [EOL] [docstring] [EOL] first = pubpen . subscribe ( [string] , function ) [EOL] [EOL] [comment] [EOL] assert pubpen . _subscriptions [ first ] == [string] [EOL] assert len ( pubpen . _event_handlers [ [string] ] ) == [number] [EOL] [EOL] event = pubpen . _event_handlers [ [string] ] [EOL] assert list ( event . keys ( ) ) == [ first ] [EOL] assert list ( event . values ( ) ) == [ weakref . ref ( function ) ] [EOL] [EOL] def test_subscribe_method ( self , pubpen ) : [EOL] [docstring] [EOL] foo = Foo ( ) [EOL] first = pubpen . subscribe ( [string] , foo . method ) [EOL] [EOL] [comment] [EOL] assert pubpen . _subscriptions [ first ] == [string] [EOL] assert len ( pubpen . _event_handlers [ [string] ] ) == [number] [EOL] [EOL] event = pubpen . _event_handlers [ [string] ] [EOL] assert list ( event . keys ( ) ) == [ first ] [EOL] assert list ( event . values ( ) ) == [ weakref . WeakMethod ( foo . method ) ] [EOL] [EOL] def test_in_event_list ( self , pubpen_predefined ) : [EOL] [docstring] [EOL] first = pubpen_predefined . subscribe ( [string] , function ) [EOL] [EOL] [comment] [EOL] assert pubpen_predefined . _subscriptions [ first ] == [string] [EOL] assert len ( pubpen_predefined . _event_handlers [ [string] ] ) == [number] [EOL] [EOL] event = pubpen_predefined . _event_handlers [ [string] ] [EOL] assert list ( event . keys ( ) ) == [ first ] [EOL] assert list ( event . values ( ) ) == [ weakref . ref ( function ) ] [EOL] [EOL] def test_not_in_event_list ( self , pubpen_predefined ) : [EOL] [docstring] [EOL] with pytest . raises ( pubmarine . EventNotFoundError ) as e : [EOL] first = pubpen_predefined . subscribe ( [string] , function ) [EOL] assert [string] in [string] . format ( e ) [EOL] [EOL] def test_subscribe_same_callback_same_event ( self , pubpen ) : [EOL] first = pubpen . subscribe ( [string] , function ) [EOL] second = pubpen . subscribe ( [string] , function ) [EOL] [EOL] [comment] [EOL] assert pubpen . _subscriptions [ first ] == [string] [EOL] assert pubpen . _subscriptions [ second ] == [string] [EOL] assert len ( pubpen . _event_handlers [ [string] ] ) == [number] [EOL] [EOL] events = pubpen . _event_handlers [ [string] ] [EOL] assert events [ first ] == weakref . ref ( function ) [EOL] assert events [ second ] == weakref . ref ( function ) [EOL] [EOL] def test_subscribe_same_callback_diff_event ( self , pubpen ) : [EOL] first = pubpen . subscribe ( [string] , function ) [EOL] second = pubpen . subscribe ( [string] , function ) [EOL] [EOL] [comment] [EOL] assert pubpen . _subscriptions [ first ] == [string] [EOL] assert pubpen . _subscriptions [ second ] == [string] [EOL] assert len ( pubpen . _event_handlers [ [string] ] ) == [number] [EOL] assert len ( pubpen . _event_handlers [ [string] ] ) == [number] [EOL] [EOL] events = pubpen . _event_handlers [ [string] ] [EOL] assert events [ first ] == weakref . ref ( function ) [EOL] events = pubpen . _event_handlers [ [string] ] [EOL] assert events [ second ] == weakref . ref ( function ) [EOL] [EOL] def test_subscribe_diff_callback_same_event ( self , pubpen ) : [EOL] first = pubpen . subscribe ( [string] , function ) [EOL] foo = Foo ( ) [EOL] second = pubpen . subscribe ( [string] , foo . method ) [EOL] [EOL] [comment] [EOL] assert pubpen . _subscriptions [ first ] == [string] [EOL] assert pubpen . _subscriptions [ second ] == [string] [EOL] assert len ( pubpen . _event_handlers [ [string] ] ) == [number] [EOL] [EOL] events = pubpen . _event_handlers [ [string] ] [EOL] assert events [ first ] != events [ second ] [EOL] assert events [ first ] in ( weakref . ref ( function ) , weakref . WeakMethod ( foo . method ) ) [EOL] assert events [ second ] in ( weakref . ref ( function ) , weakref . WeakMethod ( foo . method ) ) [EOL] [EOL] def test_subscribe_diff_callback_diff_event ( self , pubpen ) : [EOL] first = pubpen . subscribe ( [string] , function ) [EOL] foo = Foo ( ) [EOL] second = pubpen . subscribe ( [string] , foo . method ) [EOL] [EOL] [comment] [EOL] assert pubpen . _subscriptions [ first ] == [string] [EOL] assert pubpen . _subscriptions [ second ] == [string] [EOL] assert len ( pubpen . _event_handlers [ [string] ] ) == [number] [EOL] assert len ( pubpen . _event_handlers [ [string] ] ) == [number] [EOL] [EOL] events = pubpen . _event_handlers [ [string] ] [EOL] assert events [ first ] == weakref . ref ( function ) [EOL] events = pubpen . _event_handlers [ [string] ] [EOL] assert events [ second ] == weakref . WeakMethod ( foo . method ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.units.test_subscribe.Foo$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $tests.units.test_subscribe.Foo$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $tests.units.test_subscribe.Foo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $tests.units.test_subscribe.Foo$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $tests.units.test_subscribe.Foo$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.units.test_subscribe.Foo$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $tests.units.test_subscribe.Foo$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $tests.units.test_subscribe.Foo$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $tests.units.test_subscribe.Foo$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $tests.units.test_subscribe.Foo$ 0 0 0 0
import pubmarine [EOL] from pubmarine import PubPen [EOL] [EOL] [EOL] class TestPubPenCreate : [EOL] def test_create ( self , event_loop ) : [EOL] [docstring] [EOL] pubpen = PubPen ( event_loop ) [EOL] [EOL] [comment] [EOL] assert len ( pubpen . _event_handlers ) == [number] [EOL] assert len ( pubpen . _event_list ) == [number] [EOL] [EOL] def test_create_with_event_list ( self , event_loop ) : [EOL] [docstring] [EOL] pubpen = PubPen ( event_loop , [ [string] , [string] ] ) [EOL] [EOL] [comment] [EOL] assert len ( pubpen . _event_handlers ) == [number] [EOL] assert len ( pubpen . _event_list ) == [number] [EOL] assert [string] in pubpen . _event_list [EOL] assert [string] in pubpen . _event_list [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pubmarine.PubPen$ 0 0 0 0 0 0 0 0 0 0 0 0 $pubmarine.PubPen$ 0 0 0 0 0 0 0 0 0 $pubmarine.PubPen$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pubmarine.PubPen$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pubmarine.PubPen$ 0 0 0 0 0 0 0 0 0 $pubmarine.PubPen$ 0 0 0 0 0 0 0 0 0 $pubmarine.PubPen$ 0 0 0 0 0 0 $pubmarine.PubPen$ 0 0 0
from typing import Any [EOL] import typing [EOL] import pubmarine [EOL] import pytest [EOL] [EOL] from pubmarine import PubPen [EOL] [EOL] [EOL] @ pytest . fixture def pubpen ( event_loop ) : [EOL] pubpen = PubPen ( event_loop ) [EOL] return pubpen [EOL] [EOL] [EOL] @ pytest . fixture def pubpen_multi_event ( event_loop ) : [EOL] pubpen = PubPen ( event_loop ) [EOL] [EOL] [comment] [EOL] pubpen . _subscriptions [ [number] ] = [string] [EOL] pubpen . _subscriptions [ [number] ] = [string] [EOL] pubpen . _event_handlers [ [string] ] [ [number] ] = [string] [EOL] pubpen . _event_handlers [ [string] ] [ [number] ] = [string] [EOL] [EOL] return pubpen [EOL] [EOL] [EOL] @ pytest . fixture def pubpen_multi_callback ( event_loop ) : [EOL] pubpen = PubPen ( event_loop ) [EOL] [EOL] [comment] [EOL] pubpen . _subscriptions [ [number] ] = [string] [EOL] pubpen . _subscriptions [ [number] ] = [string] [EOL] pubpen . _subscriptions [ [number] ] = [string] [EOL] pubpen . _event_handlers [ [string] ] [ [number] ] = [string] [EOL] pubpen . _event_handlers [ [string] ] [ [number] ] = [string] [EOL] pubpen . _event_handlers [ [string] ] [ [number] ] = [string] [EOL] [EOL] return pubpen [EOL] [EOL] [EOL] @ pytest . fixture def pubpen_partially_dealloc ( event_loop ) : [EOL] [docstring] [EOL] pubpen = PubPen ( event_loop ) [EOL] pubpen . _subscriptions [ [number] ] = [string] [EOL] return pubpen [EOL] [EOL] class Foo : [EOL] def method ( self ) : [EOL] pass [EOL] [EOL] [EOL] def function ( ) : [EOL] pass [EOL] [EOL] [EOL] class TestPubPenUnsubscribe : [EOL] [EOL] def test_unsubscribe_nonexisting ( self , pubpen ) : [EOL] result = pubpen . unsubscribe ( [number] ) [EOL] assert result is None [EOL] [EOL] [comment] [EOL] assert len ( pubpen . _subscriptions ) == [number] [EOL] assert len ( pubpen . _event_handlers ) == [number] [EOL] [EOL] def test_unsubscribe_multi_event_remove_first ( self , pubpen_multi_event ) : [EOL] result = pubpen_multi_event . unsubscribe ( [number] ) [EOL] assert result is None [EOL] [EOL] [comment] [EOL] assert len ( pubpen_multi_event . _subscriptions ) == [number] [EOL] assert pubpen_multi_event . _subscriptions [ [number] ] == [string] [EOL] [EOL] assert len ( pubpen_multi_event . _event_handlers [ [string] ] ) == [number] [EOL] assert len ( pubpen_multi_event . _event_handlers [ [string] ] ) == [number] [EOL] assert ( [number] , [string] ) in pubpen_multi_event . _event_handlers [ [string] ] . items ( ) [EOL] [EOL] [EOL] def test_unsubscribe_multi_event_remove_last ( self , pubpen_multi_event ) : [EOL] result = pubpen_multi_event . unsubscribe ( [number] ) [EOL] assert result is None [EOL] [EOL] [comment] [EOL] assert len ( pubpen_multi_event . _subscriptions ) == [number] [EOL] assert pubpen_multi_event . _subscriptions [ [number] ] == [string] [EOL] [EOL] assert len ( pubpen_multi_event . _event_handlers [ [string] ] ) == [number] [EOL] assert len ( pubpen_multi_event . _event_handlers [ [string] ] ) == [number] [EOL] assert ( [number] , [string] ) in pubpen_multi_event . _event_handlers [ [string] ] . items ( ) [EOL] [EOL] def test_unsubscribe_multi_callback_remove_first ( self , pubpen_multi_callback ) : [EOL] result = pubpen_multi_callback . unsubscribe ( [number] ) [EOL] assert result is None [EOL] [EOL] [comment] [EOL] assert len ( pubpen_multi_callback . _subscriptions ) == [number] [EOL] assert pubpen_multi_callback . _subscriptions [ [number] ] == [string] [EOL] assert pubpen_multi_callback . _subscriptions [ [number] ] == [string] [EOL] [EOL] assert len ( pubpen_multi_callback . _event_handlers [ [string] ] ) == [number] [EOL] assert ( [number] , [string] ) in pubpen_multi_callback . _event_handlers [ [string] ] . items ( ) [EOL] assert ( [number] , [string] ) in pubpen_multi_callback . _event_handlers [ [string] ] . items ( ) [EOL] [EOL] def test_unsubscribe_multi_callback_remove_last ( self , pubpen_multi_callback ) : [EOL] result = pubpen_multi_callback . unsubscribe ( [number] ) [EOL] assert result is None [EOL] [EOL] [comment] [EOL] assert len ( pubpen_multi_callback . _subscriptions ) == [number] [EOL] assert pubpen_multi_callback . _subscriptions [ [number] ] == [string] [EOL] assert pubpen_multi_callback . _subscriptions [ [number] ] == [string] [EOL] [EOL] assert len ( pubpen_multi_callback . _event_handlers [ [string] ] ) == [number] [EOL] assert ( [number] , [string] ) in pubpen_multi_callback . _event_handlers [ [string] ] . items ( ) [EOL] assert ( [number] , [string] ) in pubpen_multi_callback . _event_handlers [ [string] ] . items ( ) [EOL] [EOL] def test_unsubscribe_partially_deallocated_handler ( self , pubpen_partially_dealloc ) : [EOL] pubpenpd = pubpen_partially_dealloc [EOL] result = pubpenpd . unsubscribe ( [number] ) [EOL] assert result is None [EOL] [EOL] [comment] [EOL] assert len ( pubpenpd . _subscriptions ) == [number] [EOL] assert len ( pubpenpd . _event_handlers [ [string] ] ) == [number] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Coroutine , Any [EOL] import typing [EOL] import pubmarine [EOL] import asyncio [EOL] [docstring] [EOL] import asyncio [EOL] import curses [EOL] import os . path [EOL] import sys [EOL] from functools import partial [EOL] [EOL] from pubmarine import PubPen [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] PY37 = sys . version_info >= ( [number] , [number] ) [EOL] [EOL] PATH = os . path . expanduser ( [string] ) [EOL] [EOL] [EOL] class Display : [EOL] def __init__ ( self , pubpen ) : [EOL] self . pubpen = pubpen [EOL] [EOL] self . pubpen . subscribe ( [string] , self . show_message ) [EOL] self . pubpen . subscribe ( [string] , self . show_typing ) [EOL] self . pubpen . subscribe ( [string] , self . show_error ) [EOL] self . pubpen . subscribe ( [string] , self . show_error ) [EOL] self . pubpen . subscribe ( [string] , self . show_error ) [EOL] [EOL] def __enter__ ( self ) : [EOL] self . stdscr = curses . initscr ( ) [EOL] [EOL] curses . noecho ( ) [EOL] curses . cbreak ( ) [EOL] self . stdscr . keypad ( [number] ) [EOL] [EOL] max_y , max_x = self . stdscr . getmaxyx ( ) [EOL] [EOL] self . error_buffer = self . stdscr . derwin ( [number] , max_x , [number] , [number] ) [EOL] [EOL] self . separator1 = self . stdscr . derwin ( [number] , max_x , [number] , [number] ) [EOL] sep_txt = [string] * ( max_x - [number] ) [EOL] self . separator1 . addstr ( [number] , [number] , sep_txt ) [EOL] [EOL] self . chat_log = self . stdscr . derwin ( max_y - [number] , max_x , [number] , [number] ) [EOL] self . chat_max_y , self . chat_max_x = self . chat_log . getmaxyx ( ) [EOL] self . current_chat_line = [number] [EOL] [EOL] self . separator2 = self . stdscr . derwin ( [number] , max_x , max_y - [number] , [number] ) [EOL] sep_txt = [string] * ( max_x - [number] ) [EOL] self . separator2 . addstr ( [number] , [number] , sep_txt ) [EOL] [EOL] self . input_buffer = self . stdscr . derwin ( [number] , max_x , max_y - [number] , [number] ) [EOL] self . input_max_y , self . input_max_x = self . input_buffer . getmaxyx ( ) [EOL] self . input_current_x = [number] [EOL] self . input_contents = [string] [EOL] [EOL] self . stdscr . refresh ( ) [EOL] return self [EOL] [EOL] def __exit__ ( self , * args ) : [EOL] curses . nocbreak ( ) [EOL] self . stdscr . keypad ( [number] ) [EOL] curses . echo ( ) [EOL] curses . endwin ( ) [EOL] [EOL] return False [EOL] [EOL] async def get_ch ( self ) : [EOL] char = chr ( await self . pubpen . loop . run_in_executor ( None , self . stdscr . getch ) ) [EOL] self . pubpen . publish ( [string] , char ) [EOL] [EOL] def show_message ( self , message , user ) : [EOL] [comment] [EOL] if self . current_chat_line >= self . chat_max_y : [EOL] self . pubpen . loop . stop ( ) [EOL] return [EOL] [EOL] message = [string] % ( user , message ) [EOL] [EOL] [comment] [EOL] if len ( message ) > self . chat_max_x : [EOL] message = message [ : self . chat_max_x ] [EOL] [EOL] self . chat_log . addstr ( self . current_chat_line , [number] , message . encode ( [string] ) ) [EOL] self . current_chat_line += [number] [EOL] self . chat_log . refresh ( ) [EOL] [EOL] def show_typing ( self , char ) : [EOL] if char == [string] : [EOL] if self . input_contents == [string] : [EOL] self . pubpen . loop . stop ( ) [EOL] return [EOL] self . pubpen . publish ( [string] , self . input_contents ) [EOL] self . show_message ( self . input_contents , [string] ) [EOL] self . clear_typing ( ) [EOL] return [EOL] [EOL] self . input_current_x += [number] [EOL] self . input_contents += char [EOL] self . input_buffer . addstr ( [number] , self . input_current_x - [number] , char . encode ( [string] ) ) [EOL] self . input_buffer . refresh ( ) [EOL] [EOL] def clear_typing ( self ) : [EOL] self . input_current_x = [number] [EOL] self . input_buffer . clear ( ) [EOL] self . input_contents = [string] [EOL] self . input_buffer . refresh ( ) [EOL] [EOL] def show_error ( self , exc ) : [EOL] self . error_buffer . clear ( ) [EOL] self . error_buffer . addstr ( [number] , [number] , str ( exc ) . encode ( [string] ) ) [EOL] self . error_buffer . refresh ( ) [EOL] [EOL] [EOL] class TalkProtocol ( asyncio . Protocol ) : [EOL] def __init__ ( self , pubpen ) : [EOL] self . pubpen = pubpen [EOL] [EOL] self . pubpen . subscribe ( [string] , self . send_message ) [EOL] [EOL] def send_message ( self , message ) : [EOL] self . transport . write ( message . encode ( [string] ) ) [EOL] [EOL] def connection_made ( self , transport ) : [EOL] self . transport = transport [EOL] [EOL] def data_received ( self , data ) : [EOL] self . pubpen . publish ( [string] , data . decode ( [string] , errors = [string] ) , [string] ) [EOL] [EOL] def error_received ( self , exc ) : [EOL] self . pubpen . publish ( [string] , exc ) [EOL] [EOL] def connection_lost ( self , exc ) : [EOL] self . pubpen . publish ( [string] , exc ) [EOL] self . pubpen . loop . stop ( ) [EOL] [EOL] [EOL] async def start ( ) : [EOL] if PY37 : [EOL] loop = asyncio . get_running_loop ( ) [EOL] else : [EOL] loop = asyncio . get_event_loop ( ) [EOL] [EOL] pubpen = PubPen ( loop ) [EOL] [EOL] with Display ( pubpen ) as display : [EOL] try : [EOL] [comment] [EOL] connection = loop . create_unix_connection ( partial ( TalkProtocol , pubpen ) , PATH ) [EOL] await connection [EOL] except ( ConnectionRefusedError , FileNotFoundError ) : [EOL] [comment] [EOL] connection = loop . create_unix_server ( partial ( TalkProtocol , pubpen ) , PATH ) [EOL] await connection [EOL] [EOL] while True : [EOL] await display . get_ch ( ) [EOL] [EOL] [EOL] def main ( ) : [EOL] [comment] [EOL] [comment] [EOL] loop = asyncio . get_event_loop ( ) [EOL] try : [EOL] loop . run_until_complete ( start ( ) ) [EOL] except RuntimeError : [EOL] [comment] [EOL] [comment] [EOL] for task in asyncio . Task . all_tasks ( ) : [EOL] task . cancel ( ) [EOL] finally : [EOL] loop . run_until_complete ( loop . shutdown_asyncgens ( ) ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] import pubmarine [EOL] import examples [EOL] import asyncio [EOL] [docstring] [EOL] import asyncio [EOL] import sys [EOL] [EOL] from pubmarine import PubPen [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] PY37 = sys . version_info >= ( [number] , [number] ) [EOL] [EOL] [EOL] class Server : [EOL] def __init__ ( self , pubpen ) : [EOL] self . pubpen = pubpen [EOL] self . beats = [number] [EOL] [EOL] async def heartbeat ( self ) : [EOL] self . pubpen . publish ( [string] , self . beats ) [EOL] self . beats += [number] [EOL] if self . beats <= [number] : [EOL] await asyncio . sleep ( [number] ) [EOL] await self . heartbeat ( ) [EOL] [EOL] [EOL] class Client : [EOL] def __init__ ( self , pubpen ) : [EOL] self . pubpen = pubpen [EOL] self . pubpen . subscribe ( [string] , self . display ) [EOL] [EOL] @ staticmethod def display ( message ) : [EOL] print ( message ) [EOL] [EOL] [EOL] async def start ( ) : [EOL] if PY37 : [EOL] loop = asyncio . get_running_loop ( ) [EOL] else : [EOL] loop = asyncio . get_event_loop ( ) [EOL] [EOL] pubpen = PubPen ( loop ) [EOL] server = Server ( pubpen ) [EOL] [comment] [EOL] [comment] [EOL] client = Client ( pubpen ) [EOL] [EOL] await server . heartbeat ( ) [EOL] [EOL] [EOL] def main ( ) : [EOL] if PY37 : [EOL] asyncio . run ( start ( ) ) [EOL] else : [EOL] loop = asyncio . get_event_loop ( ) [EOL] try : [EOL] loop . run_until_complete ( start ( ) ) [EOL] finally : [EOL] loop . close ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Any [EOL] import typing [EOL] import examples [EOL] import asyncio [EOL] import example [EOL] import pubmarine [EOL] [docstring] [EOL] import asyncio [EOL] import sys [EOL] [EOL] from pubmarine import PubPen [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] PY37 = sys . version_info >= ( [number] , [number] ) [EOL] [EOL] class Server : [EOL] def __init__ ( self , pubpen ) : [EOL] self . pubpen = pubpen [EOL] self . beats = [number] [EOL] self . pubpen . subscribe ( [string] , self . broadcast ) [EOL] [EOL] def broadcast ( self , message ) : [EOL] self . pubpen . publish ( [string] , [string] . format ( message ) ) [EOL] [EOL] async def heartbeat ( self ) : [EOL] self . pubpen . publish ( [string] , self . beats ) [EOL] self . beats += [number] [EOL] await asyncio . sleep ( [number] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] self . pubpen . loop . create_task ( self . heartbeat ( ) ) [EOL] [EOL] [EOL] class Client : [EOL] def __init__ ( self , pubpen , input_queue ) : [EOL] self . pubpen = pubpen [EOL] self . input = input_queue [EOL] self . pubpen . subscribe ( [string] , self . display ) [EOL] [EOL] @ staticmethod def display ( message ) : [EOL] print ( [string] . format ( message ) ) [EOL] [EOL] async def await_input ( self ) : [EOL] while True : [EOL] message = await self . input . get ( ) [EOL] if message . strip ( ) == [string] : [EOL] self . pubpen . loop . stop ( ) [EOL] break [EOL] self . pubpen . publish ( [string] , message ) [EOL] [EOL] [EOL] def get_stdin_data ( loop , queue ) : [EOL] loop . create_task ( queue . put ( sys . stdin . readline ( ) ) ) [EOL] [EOL] [EOL] async def start ( ) : [EOL] if PY37 : [EOL] loop = asyncio . get_running_loop ( ) [EOL] else : [EOL] loop = asyncio . get_event_loop ( ) [EOL] [EOL] queue = asyncio . Queue ( ) [EOL] loop . add_reader ( sys . stdin , get_stdin_data , loop , queue ) [EOL] [EOL] pubpen = PubPen ( loop ) [EOL] server = Server ( pubpen ) [EOL] client = Client ( pubpen , queue ) [EOL] [EOL] await asyncio . wait ( ( client . await_input ( ) , server . heartbeat ( ) ) ) [EOL] [EOL] [EOL] def main ( ) : [EOL] if PY37 : [EOL] asyncio . run ( start ( ) ) [EOL] else : [EOL] loop = asyncio . get_event_loop ( ) [EOL] try : [EOL] loop . run_until_complete ( start ( ) ) [EOL] finally : [EOL] loop . close ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0