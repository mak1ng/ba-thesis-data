from typing import Any , Pattern , List [EOL] import dateutil [EOL] import mariprog [EOL] import datetime [EOL] import csv [EOL] import typing [EOL] import _csv [EOL] [docstring] [EOL] import csv [EOL] import datetime [EOL] import re [EOL] from dataclasses import dataclass [EOL] from datetime import date [EOL] from typing import List [EOL] [EOL] from dateutil . relativedelta import * [EOL] [EOL] inspections_in_programme = [ ] [EOL] presentable_inspections = [ ] [EOL] LIST_OF_PORTS = [ ] [EOL] INITIALS = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] WEEKS = [ ] [EOL] DATE_PATTERN = re . compile ( [string] ) [EOL] [EOL] [EOL] def parse_programme_date ( date_string ) : [EOL] dstring = date_string . split ( [string] ) [EOL] return date . fromisoformat ( [string] . join ( [ _convert_year_str ( dstring [ [number] ] ) , dstring [ [number] ] , dstring [ [number] ] ] ) ) [EOL] [EOL] [EOL] def _convert_year_str ( year_str ) : [EOL] if len ( year_str ) == [number] : [EOL] return f" [string] { year_str }" [EOL] elif len ( year_str ) == [number] : [EOL] return year_str [EOL] else : [EOL] return year_str [EOL] [EOL] [EOL] class Inspection : [EOL] def __init__ ( self , week_begining , inspection_data ) : [EOL] self . _inspection_data = inspection_data [EOL] self . week_begining = parse_programme_date ( week_begining ) [EOL] [EOL] def __repr__ ( self ) : [EOL] return [ item [ [number] ] for item in self . _inspection_data if item [ [number] ] == [string] ] [ [number] ] [EOL] [EOL] @ property def facility ( self ) : [EOL] return [ item [ [number] ] for item in self . _inspection_data if item [ [number] ] == [string] ] [ [number] ] [EOL] [EOL] @ property def location ( self ) : [EOL] return [ item [ [number] ] for item in self . _inspection_data if item [ [number] ] == [string] ] [ [number] ] [EOL] [EOL] @ property def inspectors ( self ) : [EOL] return [ item [ [number] ] for item in self . _inspection_data if item [ [number] ] == [string] and item [ [number] ] in INITIALS ] [EOL] [EOL] @ property def comments ( self ) : [EOL] return [ item [ [number] ] for item in self . _inspection_data if item [ [number] ] == [string] ] [ [number] ] [EOL] [EOL] [EOL] [EOL] [EOL] def _get_header_key_from_csv ( opened_csv ) : [EOL] reader = csv . reader ( opened_csv ) [EOL] for row in reader : [EOL] if row [ [number] ] == [string] : [EOL] return row [EOL] [EOL] [EOL] @ dataclass class PresentableInspection : [EOL] week_begining = ... [EOL] location = ... [EOL] facility = ... [EOL] inspectors = ... [EOL] comments = ... [EOL] pfsa_expiry = ... [EOL] pfsa_approval = ... [EOL] [EOL] [EOL] @ dataclass class PSAMeeting : [EOL] psa = ... [EOL] date = ... [EOL] pso = ... [EOL] comments = ... [EOL] comments_from_meeting = ... [EOL] inspectors = ... [EOL] psp_reviewed = ... [EOL] psra_reviewed = ... [EOL] minutes_held = ... [EOL] [EOL] [EOL] def _convert_str_to_bool ( bstr ) : [EOL] if bstr in [ [string] , [string] , [string] , [string] , [string] , [string] ] : [EOL] return True [EOL] elif bstr in [ [string] , [string] , [string] , [string] , [string] , [string] ] : [EOL] return False [EOL] else : [EOL] raise ValueError ( [string] . format ( bst ) ) [EOL] [EOL] [EOL] def _convert_datetime_str_to_datetime ( dstr ) : [EOL] [docstring] [EOL] if not dstr : [EOL] return [string] [EOL] year = int ( dstr . split ( ) [ [number] ] . split ( [string] ) [ [number] ] ) [EOL] month = int ( dstr . split ( ) [ [number] ] . split ( [string] ) [ [number] ] ) [EOL] day = int ( dstr . split ( ) [ [number] ] . split ( [string] ) [ [number] ] ) [EOL] hour = int ( dstr . split ( ) [ [number] ] . split ( [string] ) [ [number] ] ) [EOL] minute = int ( dstr . split ( ) [ [number] ] . split ( [string] ) [ [number] ] ) [EOL] return datetime . datetime ( year , month , day , hour , minute ) [EOL] [EOL] [EOL] def psa_meetings ( csv_file ) : [EOL] psa_meetings_lst = [ ] [EOL] with open ( csv_file , [string] , encoding = [string] ) as csvfile : [EOL] csv_reader = csv . DictReader ( csvfile ) [EOL] for row in csv_reader : [EOL] psa_meeting = PSAMeeting ( row [ [string] ] , _convert_datetime_str_to_datetime ( row [ [string] ] ) , row [ [string] ] , row [ [string] ] , row [ [string] ] , row [ [string] ] , _convert_str_to_bool ( row [ [string] ] ) , _convert_str_to_bool ( row [ [string] ] ) , _convert_str_to_bool ( row [ [string] ] ) ) [EOL] psa_meetings_lst . append ( psa_meeting ) [EOL] return psa_meetings_lst [EOL] [EOL] [EOL] def parse_programme ( csv_file ) : [EOL] [docstring] [EOL] current_week = [string] [EOL] [EOL] pfsa_expiry_data_lst = list ( parse_pfsa_csv ( [string] ) ) [EOL] [EOL] with open ( csv_file , [string] , encoding = [string] ) as csvfile : [EOL] csv_reader = csv . reader ( csvfile ) [EOL] key = _get_header_key_from_csv ( csvfile ) [EOL] for row in csv_reader : [EOL] if re . match ( DATE_PATTERN , row [ [number] ] ) : [EOL] WEEKS . append ( parse_programme_date ( row [ [number] ] ) ) [EOL] inspection = Inspection ( row [ [number] ] , list ( zip ( key , row ) ) ) [EOL] current_week = row [ [number] ] [EOL] inspections_in_programme . append ( inspection ) [EOL] elif row [ [number] ] == [string] : [EOL] inspection = Inspection ( current_week , list ( zip ( key , row ) ) ) [EOL] inspections_in_programme . append ( inspection ) [EOL] [EOL] for inspection in inspections_in_programme : [EOL] try : [EOL] pfsa_expiry_entry = [ x for x in pfsa_expiry_data_lst if x . site_name == inspection . facility . rstrip ( ) ] [ [number] ] [EOL] _pfsa_exp = pfsa_expiry_entry . pfsa_expiry_date [EOL] _pfsa_apr = pfsa_expiry_entry . pfsa_approval_date [EOL] except IndexError : [EOL] _pfsa_exp = [string] [EOL] pi = PresentableInspection ( inspection . week_begining , inspection . location , inspection . facility , [string] . join ( inspection . inspectors ) , inspection . comments . rstrip ( ) , _pfsa_exp , _pfsa_apr ) [EOL] presentable_inspections . append ( pi ) [EOL] for inspection in presentable_inspections : [EOL] print ( inspection . week_begining , f"{ inspection . location : [string] }" , f"{ inspection . facility : [string] }" , f"{ inspection . inspectors : [string] }" , f"{ inspection . comments : [string] }" , f"{ inspection . pfsa_approval }" , f"{ inspection . pfsa_expiry }" ) [EOL] [EOL] [EOL] class PortFromPFSARow : [EOL] def __init__ ( self , row ) : [EOL] self . site_name = row [ [string] ] . strip ( ) [EOL] self . pfsa_approval_date = self . parse_date_string ( row [ [string] ] ) [EOL] self . pfsa_expiry_date = self . parse_date_string ( row [ [string] ] ) [EOL] [EOL] def parse_date_string ( self , date_string ) : [EOL] try : [EOL] dstring = date_string . split ( ) [ [number] ] [EOL] except IndexError : [EOL] return date ( [number] , [number] , [number] ) [EOL] year = dstring . split ( [string] ) [ [number] ] [EOL] month = dstring . split ( [string] ) [ [number] ] [EOL] day = dstring . split ( [string] ) [ [number] ] [EOL] return date . fromisoformat ( [string] . join ( [ year , month , day ] ) ) [EOL] [EOL] [EOL] def parse_pfsa_csv ( csv_file ) : [EOL] [docstring] [EOL] list_of_ports = [ ] [EOL] try : [EOL] with open ( csv_file , [string] , encoding = [string] ) as csvfile : [EOL] reader = csv . DictReader ( csvfile ) [EOL] for row in reader : [EOL] port = PortFromPFSARow ( row ) [EOL] list_of_ports . append ( port ) [EOL] except UnicodeDecodeError : [EOL] [comment] [EOL] with open ( csv_file , [string] , encoding = [string] ) as csvfile : [EOL] reader = csv . DictReader ( csvfile ) [EOL] for row in reader : [EOL] port = PortFromPFSARow ( row ) [EOL] list_of_ports . append ( port ) [EOL] return sorted ( list_of_ports , key = lambda x : x . pfsa_expiry_date ) [EOL] [EOL] [EOL] [EOL] class PortFromCSVRow : [EOL] def __init__ ( self , row ) : [EOL] self . site_name = row [ [string] ] . strip ( ) [EOL] try : [EOL] self . county = row [ [string] ] . strip ( ) [EOL] except KeyError : [EOL] pass [EOL] self . last_inspection_date = self . parse_date_string ( row [ [string] ] ) [EOL] self . frequency_target = ( row [ [string] ] . strip ( ) if row [ [string] ] else [string] ) [EOL] self . pfsi_category = row [ [string] ] . strip ( ) [EOL] self . site_category = row [ [string] ] . strip ( ) [EOL] [EOL] def parse_date_string ( self , date_string ) : [EOL] try : [EOL] dstring = date_string . split ( ) [ [number] ] [EOL] except IndexError : [EOL] return date ( [number] , [number] , [number] ) [EOL] year = dstring . split ( [string] ) [ [number] ] [EOL] month = dstring . split ( [string] ) [ [number] ] [EOL] day = dstring . split ( [string] ) [ [number] ] [EOL] return date . fromisoformat ( [string] . join ( [ year , month , day ] ) ) [EOL] [EOL] def __repr__ ( self ) : [EOL] return f"{ self . site_name } [string] { self . pfsi_category }" [EOL] [EOL] [EOL] [EOL] def parse_csv ( csv_file ) : [EOL] [docstring] [EOL] try : [EOL] with open ( csv_file , [string] , encoding = [string] ) as csvfile : [EOL] csv_reader = csv . DictReader ( csvfile ) [EOL] for row in csv_reader : [EOL] port = PortFromCSVRow ( row ) [EOL] if row [ [string] ] == [string] : [EOL] LIST_OF_PORTS . append ( port ) [EOL] except UnicodeDecodeError : [EOL] [comment] [EOL] with open ( csv_file , [string] , encoding = [string] ) as csvfile : [EOL] csv_reader = csv . DictReader ( csvfile ) [EOL] for row in csv_reader : [EOL] port = PortFromCSVRow ( row ) [EOL] if row [ [string] ] == [string] : [EOL] LIST_OF_PORTS . append ( port ) [EOL] [EOL] [EOL] def print_site_data_to_terminal ( filename ) : [EOL] parse_csv ( filename ) [EOL] sorted_list = sorted ( LIST_OF_PORTS , key = lambda port : port . last_inspection_date ) [EOL] for port in sorted_list : [EOL] print ( f"{ port . site_name : [string] } [string] { port . county : [string] } [string] { port . pfsi_category : [string] } [string] { port . site_category : [string] } [string] { port . frequency_target : [string] } [string] { port . last_inspection_date }" ) [EOL] [EOL] [EOL] [comment] [EOL] def week_port_is_in_programme ( port ) : [EOL] for p in LIST_OF_PORTS : [EOL] if p . site_name == port : [EOL] for inspection in inspections_in_programme : [EOL] if port == inspection . facility : [EOL] print ( port , inspection . week_begining ) [EOL] [EOL] [EOL] def count_inspections_for_inspector ( initials ) : [EOL] count = [number] [EOL] for inspection in inspections_in_programme : [EOL] if initials in inspection . inspectors : [EOL] count += [number] [EOL] return count [EOL] [EOL] [EOL] def calculate_port_within_allowed_period ( port ) : [EOL] ft = int ( port . frequency_target ) [EOL] last_insp = port . last_inspection_date [EOL] calc = last_insp + relativedelta ( months = + ft ) [EOL] in_prog = in_current_programme ( port ) [EOL] print ( f"{ port . site_name : [string] } [string] { calc } [string] { in_prog } [string] " ) [EOL] [EOL] [EOL] def in_current_programme ( port ) : [EOL] for p in inspections_in_programme : [EOL] if p . facility == port . site_name : [EOL] return ( True , p . week_begining ) [EOL] else : [EOL] continue [EOL] return False [EOL] [EOL] [EOL] def print_port_inspection_expiry ( ) : [EOL] for port in LIST_OF_PORTS : [EOL] calculate_port_within_allowed_period ( port ) [EOL] [EOL] [EOL] def print_psa_meetings_from_date ( date , comments = False ) : [EOL] meetings = psa_meetings ( [string] ) [EOL] [comment] [EOL] after_date = sorted ( [ m for m in meetings if m . date > date ] , key = lambda x : x . date ) [EOL] for m in after_date : [EOL] if comments : [EOL] print ( m . date , f"{ m . psa : [string] }" , m . comments ) [EOL] else : [EOL] print ( m . date , f"{ m . psa : [string] }" , m . inspectors ) [EOL] [EOL] [EOL] @ dataclass class PSAData : [EOL] psa = ... [EOL] pso = ... [EOL] psa_approval_date = ... [EOL] date_of_last_inspection = ... [EOL] due_inspection = ... [EOL] [EOL] [EOL] def get_psa_assessment_data ( csv_file ) : [EOL] output = [ ] [EOL] with open ( csv_file , [string] , encoding = [string] ) as f : [EOL] reader = csv . DictReader ( f ) [EOL] for row in reader : [EOL] if row [ [string] ] == [string] : [EOL] psa = PSAData ( row [ [string] ] , row [ [string] ] , _convert_datetime_str_to_datetime ( row [ [string] ] ) , _convert_datetime_str_to_datetime ( row [ [string] ] ) , _convert_datetime_str_to_datetime ( row [ [string] ] ) ) [EOL] output . append ( psa ) [EOL] return output [EOL] [EOL] [EOL] [EOL] def print_psa_assessment_data ( ) : [EOL] psa_assessment_data = sorted ( get_psa_assessment_data ( [string] ) , key = lambda x : x . due_inspection ) [EOL] for psa in psa_assessment_data : [EOL] print ( f"{ psa . psa : [string] }" , f"{ psa . pso : [string] }" , f" [string] { psa . due_inspection }" ) [EOL] [EOL] [EOL] [EOL] def main ( ) : [EOL] [docstring] [EOL] print_psa_assessment_data ( ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $datetime.date$ 0 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $datetime.datetime$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[PSAMeeting]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Pattern[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $datetime.datetime$ 0 0 0 $datetime.datetime$ 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0