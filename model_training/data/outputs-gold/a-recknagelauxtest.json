from typing import List [EOL] import typing [EOL] from auxtest import __version__ [EOL] [EOL] [EOL] [comment] [EOL] project = [string] [EOL] copyright = [string] [EOL] author = [string] [EOL] release = __version__ [EOL] [EOL] [EOL] [comment] [EOL] templates_path = [ [string] ] [EOL] extensions = [ [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] [EOL] [comment] [EOL] html_theme = [string] [comment] [EOL] html_static_path = [ [string] ] [EOL] html_logo = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Tuple [EOL] import datetime [EOL] import pathlib [EOL] import builtins [EOL] import logging [EOL] import typing [EOL] [docstring] [EOL] from logging import getLogger [EOL] from logging . config import dictConfig [EOL] from datetime import time [EOL] from pathlib import Path , PurePath [EOL] [EOL] log = getLogger ( __name__ ) [EOL] [EOL] [EOL] [comment] [EOL] ROOT_DIR = PurePath ( __file__ ) . parent . parent [EOL] CWD = Path . cwd ( ) [EOL] [EOL] [comment] [EOL] WEATHER_API_KEY = [string] [EOL] WEATHER_API_URL = [string] [EOL] WEATHER_API_UNITS = [string] [EOL] [EOL] [comment] [EOL] SUNRISE = time ( [number] , [number] ) [EOL] SUNDOWN = time ( [number] , [number] ) [EOL] DAY_TEMP = ( [number] , [number] ) [EOL] NIGHT_TEMP = ( [number] , [number] ) [EOL] [EOL] [comment] [EOL] RIVAL_CITY = [string] [EOL] [EOL] [EOL] def setup_logging ( loglevel = [string] ) : [EOL] [docstring] [EOL] dictConfig ( { [string] : [number] , [string] : False , [string] : { [string] : { [string] : [string] } } , [string] : { [string] : { [string] : loglevel , [string] : [string] , [string] : [string] , [string] : [string] , } } , [string] : { [string] : { [string] : [ [string] ] , [string] : loglevel , [string] : True } } , } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 $pathlib.PurePath$ 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $datetime.time$ 0 0 0 0 0 0 0 0 $datetime.time$ 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
__version__ = [string] [EOL]	$builtins.str$ 0 0 0
import logging [EOL] [docstring] [EOL] from logging import getLogger [EOL] [EOL] import click [EOL] [EOL] from auxtest . entrypoint import api [EOL] from auxtest . util import setup_logging [EOL] [EOL] log = getLogger ( __name__ ) [EOL] [EOL] [EOL] @ click . group ( ) @ click . option ( [string] , default = [string] , type = click . Choice ( [ [string] , [string] , [string] , [string] ] ) , help = [string] , ) def cli ( loglevel ) : [EOL] [docstring] [EOL] setup_logging ( loglevel ) [EOL] log . info ( f" [string] { loglevel } [string] " ) [EOL] [EOL] [EOL] @ cli . command ( ) @ click . option ( [string] , type = str , default = [string] , help = [string] ) @ click . option ( [string] , is_flag = True , help = [string] ) def run ( host , debug ) : [EOL] [docstring] [EOL] api . app . run ( host = host , debug = debug ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import flask [EOL] import logging [EOL] import builtins [EOL] [docstring] [EOL] from logging import getLogger [EOL] [EOL] from flask import Flask , jsonify , request , Response [EOL] [EOL] from auxtest . checks . check_funcs import daytemp , naming , rival [EOL] from auxtest import __version__ [EOL] [EOL] log = getLogger ( __name__ ) [EOL] app = Flask ( __name__ ) [EOL] CITY_KWARG = [string] [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def route_to_status ( ) : [EOL] [docstring] [EOL] log . debug ( [string] ) [EOL] return jsonify ( { [string] : f" [string] { __version__ } [string] " } ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def route_to_city_check ( ) : [EOL] [docstring] [EOL] [comment] [EOL] if CITY_KWARG not in request . args or not request . args [ CITY_KWARG ] : [EOL] log . info ( f" [string] " f" [string] { { ** request . args } } [string] " ) [EOL] return jsonify ( { [string] : True } ) [EOL] else : [EOL] city = request . args [ CITY_KWARG ] [EOL] [EOL] log . debug ( [string] ) [EOL] try : [EOL] check_naming = naming ( city ) [EOL] check_daytemp = daytemp ( city ) [EOL] check_rival = rival ( city ) [EOL] except ValueError as e : [EOL] log . warning ( f" [string] { e } [string] " ) [EOL] return jsonify ( { [string] : True } ) [EOL] return jsonify ( { [string] : check_naming and check_daytemp and check_rival , [string] : { [string] : check_naming , [string] : check_daytemp , [string] : check_rival , } , } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 $flask.Response$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Iterator , Any [EOL] import pathlib [EOL] import typing [EOL] import json [EOL] from pathlib import PurePath [EOL] import warnings [EOL] [EOL] import pytest [EOL] [EOL] TEST_DIR = PurePath ( __file__ ) . parent [EOL] RESPONSE_QUEUE = iter ( [ ] ) [EOL] [EOL] [EOL] @ pytest . fixture def add_responses ( ) : [EOL] [docstring] [EOL] [EOL] def inner ( * args ) : [EOL] global RESPONSE_QUEUE [EOL] RESPONSE_QUEUE = iter ( args ) [EOL] [EOL] return inner [EOL] [EOL] [EOL] @ pytest . fixture def request_get ( ) : [EOL] [docstring] [EOL] [EOL] def jsonify ( ) : [EOL] response = next ( RESPONSE_QUEUE ) [EOL] with open ( TEST_DIR / [string] / [string] / response ) as fixture : [EOL] return json . load ( fixture ) [EOL] [EOL] ret = type ( [string] , ( ) , { } ) ( ) [comment] [EOL] ret . json = jsonify [EOL] ret . status_code = [number] [EOL] return lambda * args , ** kwargs : ret [EOL] [EOL] [EOL] @ pytest . fixture def entrypoint ( ) : [EOL] from auxtest . entrypoint . api import app [EOL] [EOL] with warnings . catch_warnings ( ) : [EOL] warnings . filterwarnings ( [string] ) [EOL] return app . test_client ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.PurePath$ 0 0 0 0 0 0 0 0 $typing.Iterator[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[typing.Any]$ 0 $typing.Iterator[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Iterator[typing.Any]$ 0 0 0 0 0 $pathlib.PurePath$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from auxtest . util import setup_logging [EOL] [EOL] [EOL] def test_setup_logging ( ) : [EOL] import logging [EOL] [EOL] [comment] [EOL] assert logging . root . level == [number] [EOL] [EOL] [comment] [EOL] setup_logging ( [string] ) [EOL] assert logging . root . level == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] [docstring] [EOL] import json [EOL] from pathlib import Path [EOL] [EOL] import pytest [EOL] [EOL] from auxtest import __version__ [EOL] from . . . conftest import TEST_DIR [EOL] [EOL] fixtures = [ ] [EOL] for path in Path ( TEST_DIR / [string] / [string] ) . iterdir ( ) : [EOL] with path . open ( ) as fixture_file : [EOL] fx = json . load ( fixture_file ) [EOL] fixtures . append ( pytest . param ( fx [ [string] ] , fx [ [string] ] , id = path . name ) ) [EOL] [EOL] [EOL] def test_route_to_status ( entrypoint ) : [EOL] response = entrypoint . get ( [string] ) . json [EOL] assert response [ [string] ] == f" [string] { __version__ } [string] " [EOL] [EOL] [EOL] @ pytest . mark . parametrize ( [string] , fixtures ) def test_route_to_check ( entrypoint , query , response ) : [EOL] test_response = entrypoint . get ( query ) . json [EOL] if test_response == response : [EOL] assert test_response == response [EOL] else : [EOL] for key in response : [EOL] if isinstance ( response [ key ] , dict ) : [EOL] assert response [ key ] . items ( ) <= test_response [ key ] . items ( ) [EOL] else : [EOL] assert response [ key ] == test_response [ key ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] import requests [EOL] [EOL] from auxtest . checks . check_funcs import daytemp , naming , rival , run_weathermap_query [EOL] [EOL] [EOL] def test_naming ( ) : [EOL] assert naming ( [string] ) is False [EOL] assert naming ( [string] ) is True [EOL] assert naming ( [string] ) is False [EOL] assert naming ( [string] ) is True [EOL] assert naming ( [string] ) is False [EOL] assert naming ( [string] ) is False [comment] [EOL] [EOL] [EOL] def test_rival ( monkeypatch , request_get , add_responses ) : [EOL] from auxtest . checks import check_funcs [EOL] [EOL] monkeypatch . setattr ( check_funcs , [string] , request_get ) [EOL] [EOL] add_responses ( [string] , [string] ) [EOL] assert rival ( [string] , [string] ) is True [EOL] add_responses ( [string] , [string] ) [EOL] assert rival ( [string] , [string] ) is False [EOL] add_responses ( [string] , [string] ) [EOL] assert rival ( [string] , [string] ) is False [EOL] add_responses ( [string] , [string] ) [EOL] assert rival ( [string] , [string] ) is True [EOL] [EOL] [EOL] def test_daytemp ( monkeypatch , request_get , add_responses ) : [EOL] from auxtest . checks import check_funcs [EOL] [EOL] monkeypatch . setattr ( check_funcs , [string] , request_get ) [EOL] [EOL] add_responses ( [string] ) [EOL] assert daytemp ( [string] ) is False [EOL] add_responses ( [string] ) [EOL] assert daytemp ( [string] ) is False [EOL] add_responses ( [string] ) [EOL] assert daytemp ( [string] ) is False [EOL] add_responses ( [string] ) [EOL] assert daytemp ( [string] ) is True [EOL] add_responses ( [string] ) [EOL] assert daytemp ( [string] ) is True [EOL] add_responses ( [string] ) [EOL] assert daytemp ( [string] ) is False [EOL] add_responses ( [string] ) [EOL] assert daytemp ( [string] ) is False [EOL] add_responses ( [string] ) [EOL] assert daytemp ( [string] ) is False [EOL] [EOL] [EOL] def test_run_weathermap_query ( monkeypatch ) : [EOL] from auxtest . checks import check_funcs [EOL] [EOL] def throws ( * _ , ** __ ) : [EOL] raise requests . exceptions . RequestException ( ) [EOL] [EOL] monkeypatch . setattr ( check_funcs , [string] , throws ) [EOL] with pytest . raises ( ValueError ) : [EOL] run_weathermap_query ( [string] , [string] , [string] ) [EOL] [EOL] def wrong_status ( * _ , ** __ ) : [EOL] ret = type ( [string] , ( ) , { } ) ( ) [EOL] ret . status_code = [number] [EOL] ret . text = [string] [EOL] return ret [EOL] [EOL] monkeypatch . setattr ( check_funcs , [string] , wrong_status ) [EOL] with pytest . raises ( ValueError ) : [EOL] run_weathermap_query ( [string] , [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0