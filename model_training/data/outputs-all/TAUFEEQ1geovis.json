from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] from django . contrib import admin [EOL] from django . urls import path , include [EOL] [EOL] urlpatterns = [ path ( [string] , admin . site . urls ) , path ( [string] , include ( [string] ) ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . contrib import admin [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class GeovisConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
import builtins [EOL] from typing import Tuple , Type [EOL] import typing [EOL] import cepa [EOL] from rest_framework import serializers [EOL] from . models import Event , SubEventType , ActorsGroup , Actors , Media [EOL] from . models import EventType , Confict , Location [EOL] [EOL] class EventSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = Event [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] [EOL] class SubEventTypeSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = SubEventType [EOL] fields = ( [string] , [string] , [string] ) [EOL] depth = [number] [EOL] [EOL] class ActorsSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = Actors [EOL] fields = ( [string] , [string] ) [EOL] class ActorsGroupSerializer ( serializers . ModelSerializer ) : [EOL] [comment] [EOL] [EOL] class Meta : [EOL] model = ActorsGroup [EOL] fields = ( [string] , [string] , [string] ) [EOL] depth = [number] [EOL] class EventTypeSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = EventType [EOL] fields = ( [string] , [string] ) [EOL] depth = [number] [EOL] [EOL] class ConflictSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = Confict [EOL] fields = ( [string] , [string] ) [EOL] [EOL] class LocationSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = Location [EOL] fields = ( [string] , [string] ) [EOL] [EOL] class MediaSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = Media [EOL] fields = ( [string] , [string] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import cepa [EOL] from django . db import models [EOL] [EOL] [EOL] class Actors ( models . Model ) : [EOL] name = models . CharField ( max_length = [number] ) [EOL] [EOL] class Meta : [EOL] managed = False [EOL] db_table = [string] [EOL] [EOL] [EOL] class ActorsGroup ( models . Model ) : [EOL] actor1 = models . ForeignKey ( Actors , models . DO_NOTHING , db_column = [string] , related_name = [string] ) [EOL] actor2 = models . ForeignKey ( Actors , models . DO_NOTHING , db_column = [string] , related_name = [string] ) [EOL] [EOL] class Meta : [EOL] managed = False [EOL] db_table = [string] [EOL] [EOL] [EOL] class Confict ( models . Model ) : [EOL] description = models . TextField ( ) [EOL] [EOL] class Meta : [EOL] managed = False [EOL] db_table = [string] [EOL] [EOL] class Media ( models . Model ) : [EOL] description = models . CharField ( max_length = [number] , blank = True , null = True ) [EOL] [EOL] class Meta : [EOL] managed = False [EOL] db_table = [string] [EOL] [EOL] class Event ( models . Model ) : [EOL] latitude = models . FloatField ( ) [EOL] longitude = models . FloatField ( ) [EOL] location = models . ForeignKey ( [string] , models . DO_NOTHING ) [EOL] sub_event = models . ForeignKey ( [string] , models . DO_NOTHING ) [EOL] event_date = models . DateField ( ) [EOL] actors_group = models . ForeignKey ( ActorsGroup , models . DO_NOTHING , db_column = [string] ) [EOL] conflict = models . ForeignKey ( Confict , models . DO_NOTHING ) [EOL] media = models . ForeignKey ( Media , models . DO_NOTHING ) [EOL] [EOL] class Meta : [EOL] managed = False [EOL] db_table = [string] [EOL] [EOL] [EOL] class EventType ( models . Model ) : [EOL] description = models . CharField ( max_length = [number] ) [EOL] class Meta : [EOL] managed = False [EOL] db_table = [string] [EOL] [EOL] [EOL] class Location ( models . Model ) : [EOL] name = models . CharField ( max_length = [number] ) [EOL] [EOL] class Meta : [EOL] managed = False [EOL] db_table = [string] [EOL] [EOL] [EOL] class SubEventType ( models . Model ) : [EOL] e_type = models . ForeignKey ( EventType , models . DO_NOTHING , db_column = [string] , related_name = [string] ) [EOL] description = models . CharField ( max_length = [number] , blank = True , null = True ) [EOL] [EOL] class Meta : [EOL] managed = False [EOL] db_table = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any , Type [EOL] import typing [EOL] import cepa [EOL] from django . shortcuts import render [EOL] from django . db . models import Q [EOL] from rest_framework import viewsets [EOL] from rest_framework . decorators import list_route [EOL] from rest_framework . response import Response [EOL] from . models import Event , ActorsGroup , SubEventType , EventType , Confict , Location , Media [EOL] from . serializers import EventSerializer , ActorsGroupSerializer , SubEventTypeSerializer , MediaSerializer [EOL] from . serializers import EventTypeSerializer , ConflictSerializer , LocationSerializer [EOL] [comment] [EOL] class EventView ( viewsets . ModelViewSet ) : [EOL] queryset = Event . objects . all ( ) [EOL] serializer_class = EventSerializer [EOL] [EOL] def by_date ( self , startdate , enddate ) : [EOL] [EOL] return events [EOL] @ list_route ( url_path = [string] ) def by_date ( self , request ) : [EOL] startdate = self . request . query_params . get ( [string] ) [EOL] enddate = self . request . query_params . get ( [string] ) [EOL] events = self . queryset . filter ( event_date__gte = startdate , event_date__lte = enddate ) [EOL] result = [ self . serializer_class ( event ) . data for event in events ] [EOL] return Response ( result ) [EOL] [EOL] @ list_route ( url_path = [string] ) def by_date_and_event_type ( self , request ) : [EOL] startdate = self . request . query_params . get ( [string] ) [EOL] enddate = self . request . query_params . get ( [string] ) [EOL] events = self . queryset . filter ( event_date__gte = startdate , event_date__lte = enddate ) [EOL] event_type_id = self . request . query_params . get ( [string] ) [EOL] subevents = SubEventType . objects . filter ( e_type = event_type_id ) [EOL] sub_event_ids = map ( lambda subevent : subevent . id , subevents ) [EOL] sub_event_ids = list ( sub_event_ids ) [EOL] def isincat ( event ) : [EOL] checked_id = event . sub_event . id [EOL] if checked_id in sub_event_ids : [EOL] return event [EOL] filtered_events = map ( isincat , events ) [EOL] filtered_events = [ i for i in filtered_events if i ] [EOL] print ( filtered_events ) [EOL] serializer = EventSerializer ( filtered_events , many = True ) [EOL] return Response ( serializer . data ) [EOL] [EOL] [EOL] [EOL] [EOL] class ActorsGroupsView ( viewsets . ModelViewSet ) : [EOL] queryset = ActorsGroup . objects . all ( ) [EOL] serializer_class = ActorsGroupSerializer [EOL] @ list_route ( url_path = [string] ) def by_group ( self , request ) : [EOL] group_id = self . request . query_params . get ( [string] ) [EOL] group = self . queryset . get ( id = group_id ) [EOL] result = self . serializer_class ( group ) . data [EOL] return Response ( result ) [EOL] [EOL] class SubEventTypeView ( viewsets . ModelViewSet ) : [EOL] queryset = SubEventType . objects . all ( ) [EOL] serializer_class = SubEventTypeSerializer [EOL] [EOL] @ list_route ( url_path = [string] ) def by_sub_event ( self , request ) : [EOL] sub_event_id = self . request . query_params . get ( [string] ) [EOL] sub_event = self . queryset . get ( id = sub_event_id ) [EOL] result = self . serializer_class ( sub_event ) . data [EOL] return Response ( result ) [EOL] [EOL] class EventTypeView ( viewsets . ModelViewSet ) : [EOL] queryset = EventType . objects . all ( ) [EOL] serializer_class = EventTypeSerializer [EOL] [EOL] @ list_route ( url_path = [string] ) def all_event_types ( self , request ) : [EOL] event_types = self . queryset . all ( ) [EOL] results = [ self . serializer_class ( event_type ) . data for event_type in event_types ] [EOL] return Response ( results ) [EOL] [EOL] @ list_route ( url_path = [string] ) def get_sub_events ( self , request ) : [EOL] event_type_id = self . request . query_params . get ( [string] ) [EOL] subevents = SubEventType . objects . filter ( e_type = event_type_id ) [EOL] results = [ SubEventTypeSerializer ( event_type ) . data for event_type in subevents ] [EOL] return Response ( results ) [EOL] [EOL] class ConflictView ( viewsets . ModelViewSet ) : [EOL] queryset = Confict . objects . all ( ) [EOL] serializer_class = ConflictSerializer [EOL] [EOL] @ list_route ( url_path = [string] ) def conflict_details ( self , request ) : [EOL] conflict_id = self . request . query_params . get ( [string] ) [EOL] conflict = self . queryset . get ( id = conflict_id ) [EOL] result = self . serializer_class ( conflict ) . data [EOL] return Response ( result ) [EOL] class LocationView ( viewsets . ModelViewSet ) : [EOL] queryset = Location . objects . all ( ) [EOL] serializer_class = LocationSerializer [EOL] [EOL] @ list_route ( url_path = [string] ) def location_details ( self , request ) : [EOL] location_id = self . request . query_params . get ( [string] ) [EOL] location = self . queryset . get ( id = location_id ) [EOL] result = self . serializer_class ( location ) . data [EOL] return Response ( result ) [EOL] [EOL] class MediaView ( viewsets . ModelViewSet ) : [EOL] queryset = Media . objects . all ( ) [EOL] serializer_class = MediaSerializer [EOL] [EOL] @ list_route ( url_path = [string] ) def media_details ( self , request ) : [EOL] media_id = self . request . query_params . get ( [string] ) [EOL] media = self . queryset . get ( id = media_id ) [EOL] result = self . serializer_class ( media ) . data [EOL] return Response ( result )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path , include [EOL] from . import views [EOL] from rest_framework import routers [EOL] router = routers . DefaultRouter ( ) [EOL] router . register ( [string] , views . EventView ) [EOL] router . register ( [string] , views . ActorsGroupsView ) [EOL] router . register ( [string] , views . SubEventTypeView ) [EOL] router . register ( [string] , views . EventTypeView ) [EOL] router . register ( [string] , views . ConflictView ) [EOL] router . register ( [string] , views . LocationView ) [EOL] router . register ( [string] , views . MediaView ) [EOL] urlpatterns = [ path ( [string] , include ( router . urls ) ) ]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0