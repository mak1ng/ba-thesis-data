from typing import Tuple , Union [EOL] import typing [EOL] __version__ = [string] [EOL] __version_info__ = tuple ( [ int ( num ) if num . isdigit ( ) else num for num in __version__ . replace ( [string] , [string] , [number] ) . split ( [string] ) ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[typing.Union[builtins.int,builtins.str],...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Tuple , Type [EOL] import typing [EOL] import inmobi [EOL] from django . db import models [EOL] [EOL] [EOL] class TimeStampedModel ( models . Model ) : [EOL] created_at = models . DateTimeField ( auto_now_add = True ) [EOL] updated_at = models . DateTimeField ( auto_now = True ) [EOL] [EOL] class Meta : [EOL] abstract = True [EOL] [EOL] [EOL] class Device ( TimeStampedModel ) : [EOL] [EOL] [docstring] [EOL] [EOL] OS_CHOICES = ( ( [string] , [string] ) , ( [string] , [string] ) ) [EOL] [EOL] owner = models . CharField ( max_length = [number] ) [EOL] device_name = models . CharField ( max_length = [number] ) [EOL] model_name = models . CharField ( max_length = [number] , blank = True ) [EOL] os = models . CharField ( max_length = [number] , choices = OS_CHOICES ) [EOL] os_version = models . CharField ( max_length = [number] , blank = True ) [EOL] phone_number = models . CharField ( max_length = [number] , null = True , blank = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . owner , self . device_name ) [EOL] [EOL] [EOL] class DeviceAdId ( TimeStampedModel ) : [EOL] [EOL] [docstring] [EOL] [EOL] device = models . ForeignKey ( Device , on_delete = models . PROTECT , null = True , related_name = [string] ) [EOL] adid = models . CharField ( max_length = [number] , null = False ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . device . owner , self . device . device_name ) [EOL] [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple [EOL] import typing [EOL] from django . contrib import admin [EOL] from . models import Device , DeviceAdId [EOL] [EOL] @ admin . register ( Device ) class devicesAdmin ( admin . ModelAdmin ) : [EOL] list_display = ( [string] , [string] , [string] ) [EOL] [EOL] [EOL] @ admin . register ( DeviceAdId ) class deviceAdIdAdmin ( admin . ModelAdmin ) : [EOL] list_display = ( [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import inmobi [EOL] from django . shortcuts import render [EOL] from rest_framework . views import APIView [EOL] from rest_framework . response import Response [EOL] from . import models , serializers [EOL] [EOL] [EOL] class ListAllDevices ( APIView ) : [EOL] [EOL] def get ( self , request , format = None ) : [EOL] [EOL] all_devices = models . Device . objects . all ( ) [EOL] [EOL] serializer = serializers . DeviceSerializer ( all_devices , many = True ) [EOL] [EOL] return Response ( data = serializer . data ) [EOL] [EOL] class ListAllDeviceAdIds ( APIView ) : [EOL] [EOL] def get ( self , request , format = None ) : [EOL] [EOL] all_devices_adids = models . DeviceAdId . objects . all ( ) [EOL] [EOL] serializer = serializers . DeviceAdIdSerializer ( all_devices_adids , many = True ) [EOL] [EOL] return Response ( data = serializer . data )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $inmobi.inmobi.devices.serializers.DeviceSerializer$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $inmobi.inmobi.devices.serializers.DeviceSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $inmobi.inmobi.devices.serializers.DeviceAdIdSerializer$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $inmobi.inmobi.devices.serializers.DeviceAdIdSerializer$ 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class DevicesConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Tuple , Type [EOL] import typing [EOL] import inmobi [EOL] from rest_framework import serializers [EOL] from . models import Device , DeviceAdId [EOL] [EOL] [EOL] class DeviceAdIdSerializer ( serializers . ModelSerializer ) : [EOL] [EOL] [comment] [EOL] [EOL] class Meta : [EOL] model = DeviceAdId [EOL] fields = ( [string] , ) [EOL] [EOL] [EOL] class DeviceSerializer ( serializers . ModelSerializer ) : [EOL] [EOL] adids = DeviceAdIdSerializer ( many = True ) [EOL] [EOL] class Meta : [EOL] model = Device [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] from inmobi . devices . views import ( ListAllDevices , ListAllDeviceAdIds , ) [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ path ( [string] , ListAllDevices . as_view ( ) , name = [string] ) , path ( [string] , ListAllDeviceAdIds . as_view ( ) , name = [string] ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RenameModel ( old_name = [string] , new_name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Tuple , Type [EOL] import typing [EOL] import inmobi [EOL] from django . contrib . auth . models import AbstractUser [EOL] from django . db import models [EOL] from django . urls import reverse [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from django . utils . encoding import python_2_unicode_compatible [EOL] [EOL] [EOL] @ python_2_unicode_compatible class User ( AbstractUser ) : [EOL] [EOL] TEAM_CHOICES = ( ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] name = models . CharField ( _ ( [string] ) , blank = True , max_length = [number] ) [EOL] phone = models . CharField ( max_length = [number] , null = True ) [EOL] team = models . CharField ( max_length = [number] , null = True , choices = TEAM_CHOICES ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . username [EOL] [EOL] def get_absolute_url ( self ) : [EOL] return reverse ( [string] , kwargs = { [string] : self . username } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class UsersAppConfig ( AppConfig ) : [EOL] [EOL] name = [string] [EOL] verbose_name = [string] [EOL] [EOL] def ready ( self ) : [EOL] try : [EOL] import users . signals [comment] [EOL] except ImportError : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import django [EOL] import pytest [EOL] from django . conf import settings [EOL] [EOL] pytestmark = pytest . mark . django_db [EOL] [EOL] [EOL] def test_user_get_absolute_url ( user ) : [EOL] assert user . get_absolute_url ( ) == f" [string] { user . username } [string] " [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Tuple , Type [EOL] import typing [EOL] import inmobi [EOL] from django . db import models [EOL] from . . devices import models as devices_models [EOL] from inmobi . users import models as user_models [EOL] [EOL] [EOL] class App ( devices_models . TimeStampedModel ) : [EOL] [EOL] [docstring] [EOL] [EOL] app_title = models . CharField ( max_length = [number] ) [EOL] app_title_eng = models . CharField ( max_length = [number] , blank = True ) [EOL] creator = models . ForeignKey ( user_models . User , on_delete = models . PROTECT , null = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . app_title [EOL] [EOL] [EOL] class Content ( devices_models . TimeStampedModel ) : [EOL] [EOL] [docstring] [EOL] [EOL] OS_CHOICES = ( ( [string] , [string] ) , ( [string] , [string] ) ) [EOL] [EOL] owner = models . ForeignKey ( App , on_delete = models . PROTECT , null = True , related_name = [string] ) [EOL] store_url = models . TextField ( null = True , blank = True ) [EOL] os = models . CharField ( max_length = [number] , choices = OS_CHOICES , null = True ) [EOL] events = models . TextField ( blank = True ) [EOL] adid = models . ForeignKey ( devices_models . DeviceAdId , on_delete = models . PROTECT , null = True , blank = True ) [EOL] tracking_url = models . TextField ( null = True ) [EOL] impression_id = models . TextField ( blank = True ) [EOL] modified_url = models . TextField ( blank = True ) [EOL] [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . owner . app_title , self . os ) [EOL] [EOL] [EOL] class Result ( devices_models . TimeStampedModel ) : [EOL] [EOL] [docstring] [EOL] [EOL] owner = models . ForeignKey ( Content , on_delete = models . PROTECT , null = True , related_name = [string] ) [EOL] result_msg = models . TextField ( blank = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return [string] . format ( self . owner . owner . app_title , self . result_msg ) [EOL] [EOL] @ property def os ( self ) : [EOL] return self . owner . os [EOL] [EOL] @ property def impression_id ( self ) : [EOL] return self . owner . impression_id [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] from django . urls import path [EOL] from inmobi . oneonone . views import ( ListAllApps , AppListView , ) [EOL] [EOL] app_name = [string] [EOL] [EOL] urlpatterns = [ path ( [string] , ListAllApps . as_view ( ) , name = [string] ) , path ( [string] , AppListView . as_view ( ) , name = [string] ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any [EOL] import typing [EOL] import inmobi [EOL] from rest_framework . views import APIView [EOL] from rest_framework . response import Response [EOL] from inmobi . oneonone import models , serializers [EOL] from django . urls import reverse [EOL] from django . views . generic import DetailView , ListView , RedirectView , UpdateView [EOL] [EOL] [EOL] class ListAllApps ( APIView ) : [EOL] [EOL] def get ( self , request , format = None ) : [EOL] [EOL] all_apps = models . App . objects . all ( ) [EOL] [EOL] serializer = serializers . AppSerializer ( all_apps , many = True ) [EOL] [EOL] return Response ( data = serializer . data ) [EOL] [EOL] [EOL] class AppListView ( ListView ) : [EOL] [EOL] model = models . App [EOL] [EOL] def get_queryset ( self ) : [EOL] qs = models . App . objects . all ( ) [EOL] print ( qs ) [EOL] return qs [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class OneononeConfig ( AppConfig ) : [EOL] name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Tuple , Type [EOL] import typing [EOL] import inmobi [EOL] from rest_framework import serializers [EOL] from . import models [EOL] [EOL] class ResultSerializer ( serializers . ModelSerializer ) : [EOL] [EOL] class Meta : [EOL] model = models . Result [EOL] fields = [string] [EOL] [EOL] [EOL] class ContentSerializer ( serializers . ModelSerializer ) : [EOL] [EOL] result = ResultSerializer ( many = True ) [EOL] [EOL] class Meta : [EOL] model = models . Content [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class AppSerializer ( serializers . ModelSerializer ) : [EOL] [EOL] content = ContentSerializer ( many = True ) [EOL] [EOL] class Meta : [EOL] model = models . App [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
	0
	0