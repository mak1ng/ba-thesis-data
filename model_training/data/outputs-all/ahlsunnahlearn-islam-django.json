[comment] [EOL]	0 0
from typing import Union , Tuple [EOL] import typing [EOL] __version__ = [string] [EOL] __version_info__ = tuple ( [ int ( num ) if num . isdigit ( ) else num for num in __version__ . replace ( [string] , [string] , [number] ) . split ( [string] ) ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[typing.Union[builtins.int,builtins.str],...]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
[docstring] [EOL]	0 0
	0
from typing import Any [EOL] import typing [EOL] import graphene [EOL] [EOL] from learn_islam . chapters . schema import ChapterQueries [EOL] from learn_islam . courses . schema import CourseQueries [EOL] from learn_islam . quizzes . schema import QuizQueries [EOL] from learn_islam . topics . schema import TopicQueries [EOL] from learn_islam . tracks . schema import TrackQueries [EOL] from learn_islam . users . mutations import UserMutation [EOL] [EOL] [EOL] class Query ( ChapterQueries , CourseQueries , QuizQueries , TopicQueries , TrackQueries , graphene . ObjectType , graphene . InputObjectType ) : [EOL] pass [EOL] [EOL] [EOL] class Mutation ( UserMutation , graphene . ObjectType , graphene . InputObjectType ) : [EOL] [comment] [EOL] [comment] [EOL] pass [EOL] [EOL] [EOL] schema = graphene . Schema ( query = Query , mutation = Mutation ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Type , Any [EOL] import learn_islam [EOL] import typing [EOL] import decimal [EOL] import graphene [EOL] [EOL] [EOL] class Decimal ( graphene . Float ) : [EOL] [docstring] [EOL] [EOL] @ staticmethod def parse_literal ( node ) : [EOL] try : [EOL] return decimal . Decimal ( node . value ) [EOL] except decimal . DecimalException : [EOL] return None [EOL] [EOL] @ staticmethod def parse_value ( value ) : [EOL] try : [EOL] [comment] [EOL] [comment] [EOL] value = str ( value ) [EOL] return decimal . Decimal ( value ) [EOL] except decimal . DecimalException : [EOL] return None [EOL] [EOL] [EOL] class Upload ( graphene . types . Scalar ) : [EOL] @ staticmethod def serialize ( value ) : [EOL] return value [EOL] [EOL] @ staticmethod def parse_literal ( node ) : [EOL] return node [EOL] [EOL] @ staticmethod def parse_value ( value ) : [EOL] return value [EOL] [EOL] [EOL] class Error ( graphene . ObjectType ) : [EOL] field = graphene . String ( description = [string] , required = False ) [EOL] message = graphene . String ( description = [string] ) [EOL] [EOL] class Meta : [EOL] description = [string] [EOL] [EOL] [EOL] class Image ( graphene . ObjectType ) : [EOL] url = graphene . String ( required = True , description = [string] ) [EOL] [EOL] class Meta : [EOL] description = [string] [EOL] [EOL] def resolve_url ( self , info ) : [EOL] return self . url [EOL] [EOL] [EOL] class File ( graphene . ObjectType ) : [EOL] url = graphene . String ( required = True , description = [string] ) [EOL] [EOL] class Meta : [EOL] description = [string] [EOL] [EOL] def resolve_url ( self , info ) : [EOL] return self . url	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.graphql.core.types.Error]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.graphql.core.types.Error]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.graphql.core.types.Image]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.graphql.core.types.File]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any , List [EOL] import typing [EOL] import graphene [EOL] from graphene_django . registry import get_global_registry [EOL] from graphql_relay import from_global_id [EOL] [EOL] registry = get_global_registry ( ) [EOL] [EOL] [EOL] def get_model_name ( model ) : [EOL] [docstring] [EOL] model_name = model . __name__ [EOL] return model_name [ : [number] ] . lower ( ) + model_name [ [number] : ] [EOL] [EOL] [EOL] def get_output_fields ( model , return_field_name ) : [EOL] [docstring] [EOL] model_type = registry . get_type_for_model ( model ) [EOL] fields = { return_field_name : graphene . Field ( model_type ) } [EOL] return fields [EOL] [EOL] [EOL] def clean_seo_fields ( data ) : [EOL] [docstring] [EOL] seo_fields = data . pop ( [string] , None ) [EOL] if seo_fields : [EOL] data [ [string] ] = seo_fields . get ( [string] ) [EOL] data [ [string] ] = seo_fields . get ( [string] ) [EOL] [EOL] [EOL] def snake_to_camel_case ( name ) : [EOL] [docstring] [EOL] if isinstance ( name , str ) : [EOL] split_name = name . split ( [string] ) [EOL] return split_name [ [number] ] + [string] . join ( map ( str . capitalize , split_name [ [number] : ] ) ) [EOL] return name [EOL] [EOL] [EOL] def get_nodes ( ids , graphene_type = None ) : [EOL] pks = [ ] [EOL] types = [ ] [EOL] for graphql_id in ids : [EOL] _type , _id = from_global_id ( graphql_id ) [EOL] if graphene_type : [EOL] assert str ( graphene_type ) == _type , ( [string] ) . format ( graphene_type . _meta . name ) [EOL] pks . append ( _id ) [EOL] types . append ( _type ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if types and not graphene_type : [EOL] assert len ( set ( types ) ) == [number] , [string] [EOL] [comment] [EOL] type_name = types [ [number] ] [EOL] for model , _type in registry . _registry . items ( ) : [EOL] if _type . _meta . name == type_name : [EOL] graphene_type = _type [EOL] break [EOL] [EOL] nodes = list ( graphene_type . _meta . model . objects . filter ( pk__in = pks ) ) [EOL] if not nodes : [EOL] raise Exception ( [string] % ids ) [EOL] nodes_pk_list = [ str ( node . pk ) for node in nodes ] [EOL] for pk in pks : [EOL] assert pk in nodes_pk_list , ( [string] . format ( _type , pk ) ) [EOL] return nodes [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL]	0
from typing import Any [EOL] import typing [EOL] from functools import wraps [EOL] [EOL] from django . core . exceptions import PermissionDenied [EOL] from graphql . execution . base import ResolveInfo [EOL] [EOL] [EOL] def permission_required ( permissions ) : [EOL] def decorator ( func ) : [EOL] @ wraps ( func ) def wrapper ( * args , ** kwargs ) : [EOL] info = args [ [number] ] [EOL] assert isinstance ( info , ResolveInfo ) [EOL] user = info . context . user [EOL] if not user . has_perm ( permissions ) : [EOL] raise PermissionDenied ( [string] % info . field_name ) [EOL] return func ( * args , ** kwargs ) [EOL] return wrapper [EOL] return decorator [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Tuple , List [EOL] import learn_islam [EOL] import typing [EOL] from django . db import models [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from learn_islam . core import models as core_models [EOL] [EOL] [EOL] class Track ( models . Model ) : [EOL] order = models . PositiveIntegerField ( _ ( [string] ) , blank = True ) [EOL] slug = models . CharField ( _ ( [string] ) , blank = True , max_length = [number] ) [EOL] soon = models . BooleanField ( _ ( [string] ) , default = False , blank = True ) [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . slug [EOL] [EOL] [EOL] class TrackTranslation ( models . Model ) : [EOL] track = models . ForeignKey ( Track , related_name = [string] , on_delete = models . CASCADE ) [EOL] description = models . CharField ( _ ( [string] ) , blank = True , max_length = [number] ) [EOL] locale = core_models . LocaleField ( ) [EOL] title = models . CharField ( _ ( [string] ) , max_length = [number] ) [EOL] [EOL] class Meta : [EOL] unique_together = ( ( [string] , [string] ) , ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . title [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.tracks.models.Track]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.tracks.models.Track]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.tracks.models.Track]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.tracks.models.TrackTranslation]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.tracks.models.TrackTranslation]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $learn_islam.core.models.LocaleField$ 0 0 0 0 0 0 0 $typing.Type[learn_islam.tracks.models.TrackTranslation]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import learn_islam [EOL] import typing [EOL] from graphene import relay [EOL] from graphene_django . filter import DjangoFilterConnectionField [EOL] [EOL] from . import types [EOL] [EOL] [EOL] class TrackQueries ( object ) : [EOL] track = relay . Node . Field ( types . TrackNode ) [EOL] all_tracks = DjangoFilterConnectionField ( types . TrackNode ) [EOL] [EOL] track_translation = relay . Node . Field ( types . TrackTranslationNode ) [EOL] all_tracks_translations = DjangoFilterConnectionField ( types . TrackTranslationNode ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.tracks.schema.TrackQueries]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.tracks.schema.TrackQueries]$ 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.tracks.schema.TrackQueries]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.tracks.schema.TrackQueries]$ 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class TracksAppConfig ( AppConfig ) : [EOL] [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from typing import Type , List , Tuple [EOL] import learn_islam [EOL] import typing [EOL] from django . contrib import admin [EOL] [EOL] from . models import Track , TrackTranslation [EOL] [EOL] [EOL] class TrackTranslationInline ( admin . TabularInline ) : [EOL] model = TrackTranslation [EOL] fields = ( [string] , [string] , [string] ) [EOL] ordering = ( [string] , ) [EOL] min_num = [number] [EOL] extra = [number] [EOL] [EOL] [EOL] @ admin . register ( Track ) class TrackAdmin ( admin . ModelAdmin ) : [EOL] list_display = ( [string] , [string] , [string] ) [EOL] list_filter = ( [string] , ) [EOL] inlines = [ TrackTranslationInline , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.tracks.models.TrackTranslation]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 $typing.List[typing.Type[learn_islam.tracks.admin.TrackTranslationInline]]$ 0 0 0 0 0 0
import builtins [EOL] from typing import Type , List [EOL] import learn_islam [EOL] import typing [EOL] import graphene [EOL] from graphene import relay [EOL] from graphene_django . types import DjangoObjectType [EOL] [EOL] from learn_islam . tracks import models [EOL] [EOL] [EOL] class TrackNode ( DjangoObjectType ) : [EOL] class Meta : [EOL] interfaces = ( relay . Node , ) [EOL] model = models . Track [EOL] filter_fields = [ [string] , ] [EOL] [EOL] [EOL] class TrackTranslationNode ( DjangoObjectType ) : [EOL] locale = graphene . String ( ) [EOL] [EOL] class Meta : [EOL] interfaces = ( relay . Node , ) [EOL] model = models . TrackTranslation [EOL] filter_fields = [ [string] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.tracks.models.TrackTranslation]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.tracks.types.TrackTranslationNode]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.tracks.models.TrackTranslation]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0
	0
	0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterModelOptions ( name = [string] , options = { [string] : [ [string] ] } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type , List , Tuple [EOL] import learn_islam [EOL] import typing [EOL] from django . db import models [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from learn_islam . core import models as core_models [EOL] [EOL] [EOL] class Topic ( models . Model ) : [EOL] color = models . CharField ( _ ( [string] ) , blank = True , max_length = [number] ) [EOL] level = models . PositiveIntegerField ( _ ( [string] ) , blank = True ) [EOL] order = models . PositiveIntegerField ( _ ( [string] ) , blank = True ) [EOL] slug = models . CharField ( _ ( [string] ) , blank = True , max_length = [number] ) [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . slug [EOL] [EOL] [EOL] class TopicTranslation ( models . Model ) : [EOL] topic = models . ForeignKey ( Topic , related_name = [string] , on_delete = models . CASCADE ) [EOL] locale = core_models . LocaleField ( ) [EOL] title = models . CharField ( _ ( [string] ) , max_length = [number] ) [EOL] [EOL] class Meta : [EOL] unique_together = ( ( [string] , [string] ) , ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . title [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.topics.models.Topic]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.topics.models.Topic]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.topics.models.Topic]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.topics.models.Topic]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.topics.models.TopicTranslation]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $learn_islam.core.models.LocaleField$ 0 0 0 0 0 0 0 $typing.Type[learn_islam.topics.models.TopicTranslation]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import learn_islam [EOL] import typing [EOL] from graphene import relay [EOL] from graphene_django . filter import DjangoFilterConnectionField [EOL] [EOL] from . import types [EOL] [EOL] [EOL] class TopicQueries ( object ) : [EOL] topic = relay . Node . Field ( types . TopicNode ) [EOL] all_topics = DjangoFilterConnectionField ( types . TopicNode ) [EOL] [EOL] topic_translation = relay . Node . Field ( types . TopicTranslationNode ) [EOL] all_topics_translations = DjangoFilterConnectionField ( types . TopicTranslationNode ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.topics.schema.TopicQueries]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.topics.schema.TopicQueries]$ 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.topics.schema.TopicQueries]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.topics.schema.TopicQueries]$ 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Type , List [EOL] import learn_islam [EOL] import typing [EOL] import graphene [EOL] from graphene import relay [EOL] from graphene_django . types import DjangoObjectType [EOL] [EOL] from learn_islam . topics import models [EOL] [EOL] [EOL] class TopicNode ( DjangoObjectType ) : [EOL] class Meta : [EOL] interfaces = ( relay . Node , ) [EOL] model = models . Topic [EOL] filter_fields = [ [string] , ] [EOL] [EOL] [EOL] class TopicTranslationNode ( DjangoObjectType ) : [EOL] locale = graphene . String ( ) [EOL] [EOL] class Meta : [EOL] interfaces = ( relay . Node , ) [EOL] model = models . TopicTranslation [EOL] filter_fields = [ [string] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.topics.models.TopicTranslation]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.topics.types.TopicTranslationNode]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.topics.models.TopicTranslation]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class TopicsAppConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Type , List , Tuple [EOL] import learn_islam [EOL] import typing [EOL] from django . contrib import admin [EOL] [EOL] from . models import Topic , TopicTranslation [EOL] [EOL] [EOL] class TopicTranslationInline ( admin . TabularInline ) : [EOL] model = TopicTranslation [EOL] ordering = ( [string] , ) [EOL] min_num = [number] [EOL] extra = [number] [EOL] [EOL] [EOL] @ admin . register ( Topic ) class TopicAdmin ( admin . ModelAdmin ) : [EOL] fields = ( [string] , [string] , [string] , [string] ) [EOL] list_display = ( [string] , [string] , [string] ) [EOL] inlines = [ TopicTranslationInline , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.topics.models.TopicTranslation]$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Type[learn_islam.topics.admin.TopicTranslationInline]]$ 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterModelOptions ( name = [string] , options = { [string] : [ [string] ] } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Type [EOL] import learn_islam [EOL] import typing [EOL] from graphene import relay [EOL] from graphene_django . filter import DjangoFilterConnectionField [EOL] [EOL] from . import types [EOL] [EOL] [EOL] class CourseQueries ( object ) : [EOL] course = relay . Node . Field ( types . CourseNode ) [EOL] all_courses = DjangoFilterConnectionField ( types . CourseNode ) [EOL] [EOL] course_translations = relay . Node . Field ( types . CourseTranslationNode ) [EOL] all_courses_translations = DjangoFilterConnectionField ( types . CourseTranslationNode ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.courses.schema.CourseQueries]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.courses.schema.CourseQueries]$ 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.courses.schema.CourseQueries]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.courses.schema.CourseQueries]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Type , List [EOL] import learn_islam [EOL] import typing [EOL] import graphene [EOL] from graphene import relay [EOL] from graphene_django . types import DjangoObjectType [EOL] [EOL] from learn_islam . courses import models [EOL] [EOL] [EOL] class CourseNode ( DjangoObjectType ) : [EOL] quiz_difficulties = graphene . List ( graphene . Int , source = [string] ) [EOL] [EOL] class Meta : [EOL] interfaces = ( relay . Node , ) [EOL] model = models . Course [EOL] filter_fields = [ [string] , ] [EOL] [EOL] [EOL] class CourseTranslationNode ( DjangoObjectType ) : [EOL] locale = graphene . String ( ) [EOL] [EOL] class Meta : [EOL] interfaces = ( relay . Node , ) [EOL] model = models . CourseTranslation [EOL] filter_fields = [ [string] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.courses.models.CourseTranslation]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.courses.types.CourseTranslationNode]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.courses.models.CourseTranslation]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0
from typing import Type , List , Any , Tuple [EOL] import learn_islam [EOL] import typing [EOL] from django . db import models [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from learn_islam . core import models as core_models [EOL] from learn_islam . topics . models import Topic [EOL] from learn_islam . tracks . models import Track [EOL] [EOL] [EOL] class Course ( models . Model ) : [EOL] topic = models . ForeignKey ( Topic , null = True , blank = True , on_delete = models . SET_NULL ) [EOL] track = models . ForeignKey ( Track , null = True , blank = True , on_delete = models . SET_NULL ) [EOL] level = models . PositiveIntegerField ( _ ( [string] ) , blank = True ) [EOL] order = models . PositiveIntegerField ( _ ( [string] ) , blank = True ) [EOL] slug = models . CharField ( _ ( [string] ) , blank = True , max_length = [number] ) [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . slug [EOL] [EOL] @ property def quiz_difficulties ( self ) : [EOL] one_quiz_by_difficulty = self . quiz_set . order_by ( [string] ) . distinct ( [string] ) [EOL] return list ( map ( lambda quiz : quiz . difficulty , one_quiz_by_difficulty ) ) [EOL] [EOL] [EOL] class CourseTranslation ( models . Model ) : [EOL] course = models . ForeignKey ( Course , related_name = [string] , on_delete = models . CASCADE ) [EOL] description = models . CharField ( _ ( [string] ) , blank = True , max_length = [number] ) [EOL] locale = core_models . LocaleField ( ) [EOL] title = models . CharField ( _ ( [string] ) , max_length = [number] ) [EOL] [EOL] class Meta : [EOL] unique_together = ( ( [string] , [string] ) , ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . title [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.courses.models.Course]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.courses.models.Course]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.courses.models.Course]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.courses.models.Course]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.courses.models.Course]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.courses.models.CourseTranslation]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.courses.models.CourseTranslation]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $learn_islam.core.models.LocaleField$ 0 0 0 0 0 0 0 $typing.Type[learn_islam.courses.models.CourseTranslation]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import learn_islam [EOL] import typing [EOL] import graphene [EOL] [EOL] class CourseInput ( graphene . InputObjectType ) : [EOL] order = graphene . String ( ) [EOL] level = graphene . String ( ) [EOL] slug = graphene . String ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.courses.inputs.CourseInput]$ 0 0 0 0 0 0 0 $typing.Type[learn_islam.courses.inputs.CourseInput]$ 0 0 0 0 0 0 0 $typing.Type[learn_islam.courses.inputs.CourseInput]$ 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class CoursesAppConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from django . test import TestCase [EOL] [EOL] from . . models import Course [EOL] [EOL] [EOL] class CourseModelTests ( TestCase ) : [EOL] def setUp ( self ) : [EOL] Course . objects . create ( level = [number] , order = [number] , slug = [string] ) [EOL] [EOL] def test_quiz_difficulties_with_no_quiz ( self ) : [EOL] c = Course . objects . get ( slug = [string] ) [EOL] [EOL] self . assertEqual ( c . quiz_difficulties , [ ] ) [EOL] [EOL] def test_quiz_difficulties_with_one_quiz ( self ) : [EOL] c = Course . objects . get ( slug = [string] ) [EOL] c . quiz_set . create ( difficulty = [number] ) [EOL] [EOL] self . assertEqual ( c . quiz_difficulties , [ [number] ] ) [EOL] [EOL] def test_quiz_difficulties_with_two_quiz ( self ) : [EOL] c = Course . objects . get ( slug = [string] ) [EOL] c . quiz_set . create ( difficulty = [number] ) [EOL] c . quiz_set . create ( difficulty = [number] ) [EOL] [EOL] self . assertEqual ( c . quiz_difficulties , [ [number] ] ) [EOL] [EOL] def test_quiz_difficulties_with_two_quiz_two_difficulties ( self ) : [EOL] c = Course . objects . get ( slug = [string] ) [EOL] c . quiz_set . create ( difficulty = [number] ) [EOL] c . quiz_set . create ( difficulty = [number] ) [EOL] [EOL] self . assertEqual ( c . quiz_difficulties , [ [number] , [number] ] ) [EOL] [EOL] def test_quiz_difficulties_with_three_quiz_two_difficulties ( self ) : [EOL] c = Course . objects . get ( slug = [string] ) [EOL] c . quiz_set . create ( difficulty = [number] ) [EOL] c . quiz_set . create ( difficulty = [number] ) [EOL] c . quiz_set . create ( difficulty = [number] ) [EOL] [EOL] self . assertEqual ( c . quiz_difficulties , [ [number] , [number] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0
[EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterModelOptions ( name = [string] , options = { [string] : [ [string] ] } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Any [EOL] import learn_islam [EOL] import typing [EOL] import graphene [EOL] import graphql_jwt [EOL] [EOL] from django . http import HttpResponse [EOL] from django . utils . encoding import force_text [EOL] from django . utils . http import urlsafe_base64_decode [EOL] from rest_framework . generics import get_object_or_404 [EOL] [EOL] from learn_islam . users . models import User [EOL] [EOL] from . types import UserType [EOL] [EOL] [EOL] class CreateUser ( graphene . Mutation ) : [EOL] user = graphene . Field ( UserType ) [EOL] [EOL] class Arguments : [EOL] username = graphene . String ( required = True ) [EOL] first_name = graphene . String ( required = True ) [EOL] last_name = graphene . String ( required = True ) [EOL] password = graphene . String ( required = True ) [EOL] email = graphene . String ( required = True ) [EOL] [EOL] def mutate ( self , info , username , password , email , first_name , last_name ) : [EOL] user = User ( username = username , email = email , first_name = first_name , last_name = last_name ) [EOL] user . set_password ( password ) [EOL] user . save ( ) [EOL] [EOL] return CreateUser ( user = user ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] class UserMutation ( graphene . ObjectType ) : [EOL] create_user = CreateUser . Field ( ) [EOL] [comment] [EOL] token_auth = graphql_jwt . ObtainJSONWebToken . Field ( ) [EOL] verify_token = graphql_jwt . Verify . Field ( ) [EOL] refresh_token = graphql_jwt . Refresh . Field ( ) [EOL] [comment] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.users.mutations.CreateUser]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.users.mutations.CreateUser.Arguments]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.users.mutations.CreateUser.Arguments]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.users.mutations.CreateUser.Arguments]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.users.mutations.CreateUser.Arguments]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.users.mutations.CreateUser.Arguments]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.users.mutations.UserMutation]$ 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.users.mutations.UserMutation]$ 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.users.mutations.UserMutation]$ 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.users.mutations.UserMutation]$ 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Tuple [EOL] import learn_islam [EOL] import typing [EOL] from learn_islam . users . models import User [EOL] from graphene_django . types import DjangoObjectType [EOL] [EOL] [EOL] class UserType ( DjangoObjectType ) : [EOL] class Meta : [EOL] model = User [EOL] exclude = ( [string] , ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.users.types.UserType.Meta]$ 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 0
	0
	0
	0
import django [EOL] import pytest [EOL] from django . conf import settings [EOL] [EOL] pytestmark = pytest . mark . django_db [EOL] [EOL] [EOL] def test_user_get_absolute_url ( user ) : [EOL] assert user . get_absolute_url ( ) == f" [string] { user . username } [string] " [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class ChaptersAppConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
	0
from typing import Type , Tuple , List [EOL] import learn_islam [EOL] import typing [EOL] from django . db import models [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from learn_islam . core import models as core_models [EOL] from learn_islam . courses . models import Course [EOL] [EOL] [EOL] class Chapter ( models . Model ) : [EOL] course = models . ForeignKey ( Course , null = True , blank = True , on_delete = models . SET_NULL ) [EOL] audio = models . URLField ( _ ( [string] ) , blank = True , max_length = [number] ) [EOL] duration = models . PositiveIntegerField ( _ ( [string] ) , blank = True ) [EOL] order = models . PositiveIntegerField ( _ ( [string] ) , blank = True ) [EOL] slug = models . CharField ( _ ( [string] ) , blank = True , max_length = [number] ) [EOL] [EOL] class Meta : [EOL] ordering = [ [string] ] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . slug [EOL] [EOL] [EOL] class ChapterTranslation ( models . Model ) : [EOL] chapter = models . ForeignKey ( Chapter , related_name = [string] , on_delete = models . CASCADE ) [EOL] locale = core_models . LocaleField ( ) [EOL] title = models . CharField ( _ ( [string] ) , max_length = [number] ) [EOL] transcription = models . TextField ( _ ( [string] ) , blank = True ) [EOL] video = models . CharField ( _ ( [string] ) , max_length = [number] ) [EOL] vocabulary = models . TextField ( _ ( [string] ) , blank = True ) [EOL] [EOL] class Meta : [EOL] unique_together = ( ( [string] , [string] ) , ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . title [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.chapters.models.Chapter]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.chapters.models.Chapter]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.chapters.models.Chapter]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.chapters.models.Chapter]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.chapters.models.Chapter]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.chapters.models.ChapterTranslation]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $learn_islam.core.models.LocaleField$ 0 0 0 0 0 0 0 $typing.Type[learn_islam.chapters.models.ChapterTranslation]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.chapters.models.ChapterTranslation]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.chapters.models.ChapterTranslation]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.chapters.models.ChapterTranslation]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . AlterModelOptions ( name = [string] , options = { [string] : [ [string] ] } , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] from django . db import migrations [EOL] [EOL] [EOL] class Migration ( migrations . Migration ) : [EOL] [EOL] dependencies = [ ( [string] , [string] ) , ] [EOL] [EOL] operations = [ migrations . RemoveField ( model_name = [string] , name = [string] , ) , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type , Tuple , List [EOL] import learn_islam [EOL] import typing [EOL] from django . contrib import admin [EOL] [EOL] from . models import Quiz , QuizTranslation [EOL] from . forms import QuizTranslationForm [EOL] [EOL] [EOL] class QuizTranslationInline ( admin . TabularInline ) : [EOL] model = QuizTranslation [EOL] form = QuizTranslationForm [EOL] fields = ( [string] , [string] ) [EOL] ordering = ( [string] , ) [EOL] min_num = [number] [EOL] extra = [number] [EOL] [EOL] [EOL] @ admin . register ( Quiz ) class QuizAdmin ( admin . ModelAdmin ) : [EOL] list_display = ( [string] , [string] , [string] ) [EOL] fields = ( [string] , [string] , [string] ) [EOL] inlines = [ QuizTranslationInline , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.quizzes.models.QuizTranslation]$ 0 0 0 $typing.Type[learn_islam.quizzes.forms.QuizTranslationForm]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Type[learn_islam.quizzes.admin.QuizTranslationInline]]$ 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class QuizzesAppConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
	0
from typing import List [EOL] import typing [EOL] from django import forms [EOL] [EOL] class Quiz ( forms . Widget ) : [EOL] class Media : [EOL] js = [ [string] , [string] ] [EOL] [EOL] template_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Type , Dict [EOL] import learn_islam [EOL] import typing [EOL] from django import forms [EOL] from . widgets import Quiz [EOL] [EOL] class QuizTranslationForm ( forms . ModelForm ) : [EOL] class Meta : [EOL] widgets = { [string] : Quiz } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Type[learn_islam.quizzes.widgets.Quiz]]$ 0 0 0 0 0 0 0
from typing import Type , List , Tuple [EOL] import learn_islam [EOL] import typing [EOL] from django . contrib . postgres . fields import JSONField [EOL] from django . db import models [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from learn_islam . core import models as core_models [EOL] from learn_islam . courses . models import Course [EOL] [EOL] [EOL] class Quiz ( models . Model ) : [EOL] TYPES_CHOICES = [ ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ( [string] , [string] ) , ] [EOL] course = models . ForeignKey ( Course , null = True , blank = True , on_delete = models . SET_NULL ) [EOL] difficulty = models . PositiveIntegerField ( _ ( [string] ) , blank = True ) [EOL] type = models . CharField ( _ ( [string] ) , choices = TYPES_CHOICES , blank = True , max_length = [number] ) [EOL] pub_date = models . DateTimeField ( verbose_name = [string] , auto_now_add = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return str ( self . id ) + [string] + self . type [EOL] [EOL] class Meta : [EOL] verbose_name_plural = [string] [EOL] [EOL] [EOL] class QuizTranslation ( models . Model ) : [EOL] quiz = models . ForeignKey ( Quiz , related_name = [string] , on_delete = models . CASCADE ) [EOL] data = JSONField ( ) [EOL] [comment] [EOL] locale = core_models . LocaleField ( ) [EOL] [EOL] class Meta : [EOL] unique_together = ( ( [string] , [string] ) , ) [EOL] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.quizzes.models.Quiz]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.quizzes.models.Quiz]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.quizzes.models.Quiz]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.quizzes.models.Quiz]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.quizzes.models.QuizTranslation]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[learn_islam.quizzes.models.QuizTranslation]$ 0 0 0 0 0 0 0 $learn_islam.core.models.LocaleField$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import pytest [EOL] import django . utils . timezone [EOL] from learn_islam . quizzes import models [EOL] [EOL] pytestmark = pytest . mark . django_db [EOL] [EOL] def test_quizzes_models_creation ( ) : [EOL] before = django . utils . timezone . now ( ) [EOL] models . Quiz . objects . create ( difficulty = [number] ) [EOL] [EOL] quizzes = models . Quiz . objects . all ( ) [EOL] assert quizzes . count ( ) == [number] [EOL] assert quizzes [ [number] ] . difficulty == [number] [EOL] assert quizzes [ [number] ] . pub_date >= before [EOL] assert quizzes [ [number] ] . pub_date <= django . utils . timezone . now ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
from typing import List , Tuple [EOL] import typing [EOL] from django . db import models [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] [EOL] LANGUAGES_CHOICES = [ ( [string] , [string] ) , ( [string] , [string] ) ] [EOL] [EOL] class LocaleField ( models . CharField ) : [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] kwargs [ [string] ] = _ ( [string] ) [EOL] kwargs [ [string] ] = LANGUAGES_CHOICES [EOL] kwargs [ [string] ] = [number] [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class CoreAppConfig ( AppConfig ) : [EOL] name = [string] [EOL] verbose_name = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from typing import Any [EOL] import typing [EOL] import os [EOL] from celery import Celery [EOL] [EOL] [comment] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] app = Celery ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] app . config_from_object ( [string] , namespace = [string] ) [EOL] [EOL] [comment] [EOL] app . autodiscover_tasks ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Tuple [EOL] import typing [EOL] from . celery_app import app as celery_app [EOL] [EOL] __all__ = ( [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0
	0