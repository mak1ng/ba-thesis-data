from typing import Any , Optional , Match [EOL] import typing [EOL] from pathlib import Path [EOL] import re [EOL] [EOL] from setuptools import setup [EOL] [EOL] [EOL] with open ( str ( Path ( __file__ ) . parent / [string] / [string] ) ) as file : [EOL] version = file . read ( ) . strip ( ) [EOL] match = re . search ( [string] , version , re . MULTILINE ) [EOL] if match : [EOL] version = match . group ( [number] ) [EOL] else : [EOL] raise ValueError ( [string] ) [EOL] [EOL] [EOL] setup ( name = [string] , version = version , description = [string] , packages = [ [string] ] , package_data = { [string] : [ [string] ] } , author = [string] , url = [string] , python_requires = [string] , zip_safe = False , classifiers = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 $typing.Any$ 0 $typing.Optional[typing.Match[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] [EOL] __version__ = [string] [EOL]	0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [EOL] from typing import List [EOL] import typing [EOL] import threading [EOL] import builtins [EOL] [docstring] [EOL] [EOL] import threading [EOL] [EOL] [EOL] __all__ = [ [string] , [string] , [string] ] [EOL] [EOL] [EOL] _flag = threading . Event ( ) [EOL] [EOL] [EOL] def request ( ) : [EOL] [docstring] [EOL] _flag . set ( ) [EOL] [EOL] [EOL] def reset ( ) : [EOL] [docstring] [EOL] _flag . clear ( ) [EOL] [EOL] [EOL] def requested ( ) : [EOL] [docstring] [EOL] return _flag . is_set ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $threading.Event$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 $threading.Event$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 $threading.Event$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $threading.Event$ 0 0 0 0 0
[comment] [EOL] [EOL] import unittest [EOL] [EOL] from wrapitup import request , reset , requested [EOL] [EOL] [EOL] class TestRequest ( unittest . TestCase ) : [EOL] [EOL] def test_request ( self ) : [EOL] self . assertFalse ( requested ( ) ) [EOL] request ( ) [EOL] self . assertTrue ( requested ( ) ) [EOL] reset ( ) [EOL] self . assertFalse ( requested ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from distutils . version import StrictVersion [EOL] import unittest [EOL] [EOL] from wrapitup import __version__ [EOL] [EOL] [EOL] class TestVersion ( unittest . TestCase ) : [EOL] [EOL] [docstring] [EOL] [EOL] def test_version ( self ) : [EOL] StrictVersion ( __version__ ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any , Callable , Union [EOL] import typing [EOL] import types [EOL] import signal [EOL] import os [EOL] import signal [EOL] import sys [EOL] import time [EOL] import unittest [EOL] [EOL] from wrapitup import request , reset , Timer [EOL] [EOL] [EOL] class TestTimer ( unittest . TestCase ) : [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] if os . name == [string] or sys . implementation . name == [string] : [EOL] time_limit = [number] [EOL] decimal_places = [number] [EOL] elif os . name == [string] : [EOL] time_limit = [number] [EOL] decimal_places = [number] [EOL] [EOL] def test_wrapitup_timer ( self ) : [EOL] [docstring] [EOL] request ( ) [EOL] self . assertTrue ( Timer ( ) . expired ( ) ) [EOL] [EOL] def test_bad_time_limit ( self ) : [EOL] self . assertRaises ( TypeError , Timer , type ) [EOL] self . assertRaises ( TypeError , Timer , [number] ) [EOL] self . assertRaises ( TypeError , Timer , [string] ) [EOL] self . assertRaises ( TypeError , Timer , None ) [EOL] self . assertRaises ( ValueError , Timer , float ( [string] ) ) [EOL] [EOL] def test_default_no_time_limit ( self ) : [EOL] [docstring] [EOL] s = Timer ( ) [EOL] t1 = s . remaining ( ) [EOL] u1 = s . expired ( ) [EOL] time . sleep ( self . time_limit ) [EOL] t2 = s . remaining ( ) [EOL] u2 = s . expired ( ) [EOL] self . assertEqual ( t1 , float ( [string] ) ) [EOL] self . assertEqual ( t2 , float ( [string] ) ) [EOL] self . assertFalse ( u1 ) [EOL] self . assertFalse ( u2 ) [EOL] self . assertFalse ( s . expired ( ) ) [EOL] [EOL] def test_time_limit ( self ) : [EOL] s = Timer ( self . time_limit ) [EOL] t1 = s . remaining ( ) [EOL] u1 = s . expired ( ) [EOL] time . sleep ( self . time_limit / [number] ) [EOL] t2 = s . remaining ( ) [EOL] u2 = s . expired ( ) [EOL] time . sleep ( self . time_limit / [number] ) [EOL] t3 = s . remaining ( ) [EOL] u3 = s . expired ( ) [EOL] self . assertAlmostEqual ( t1 , self . time_limit , places = self . decimal_places ) [EOL] self . assertGreater ( t1 , self . time_limit / [number] ) [EOL] self . assertFalse ( u1 ) [EOL] self . assertGreater ( t1 - t2 , self . time_limit / [number] , { [string] : t1 , [string] : t2 } ) [EOL] self . assertFalse ( u2 ) [EOL] self . assertLess ( t3 , [number] ) [EOL] self . assertTrue ( u3 ) [EOL] s . stop ( ) [EOL] self . assertTrue ( s . expired ( ) ) [EOL] [EOL] s = Timer ( self . time_limit ) [EOL] s . stop ( ) [EOL] self . assertFalse ( s . expired ( ) ) [EOL] time . sleep ( self . time_limit ) [EOL] self . assertFalse ( s . expired ( ) ) [comment] [EOL] [EOL] def test_stop ( self ) : [EOL] s = Timer ( ) [EOL] time . sleep ( self . time_limit ) [comment] [EOL] self . assertGreater ( s . stop ( ) , [number] ) [EOL] self . assertAlmostEqual ( s . stop ( ) , self . time_limit , places = self . decimal_places ) [EOL] s = Timer ( self . time_limit ) [EOL] time . sleep ( s . remaining ( ) ) [EOL] self . assertGreater ( s . stop ( ) , self . time_limit ) [EOL] self . assertAlmostEqual ( s . stop ( ) , self . time_limit , places = self . decimal_places - [number] ) [EOL] [EOL] def test_remaining ( self ) : [EOL] [EOL] [comment] [EOL] s = Timer ( self . time_limit ) [EOL] request ( ) [EOL] self . assertEqual ( s . remaining ( ) , [number] ) [EOL] reset ( ) [EOL] [EOL] [comment] [EOL] s . start ( self . time_limit ) [EOL] self . assertGreater ( s . remaining ( ) , [number] ) [EOL] time . sleep ( self . time_limit ) [EOL] self . assertLess ( s . remaining ( ) , [number] ) [EOL] [EOL] [comment] [EOL] s . start ( self . time_limit ) [EOL] self . assertGreater ( self . time_limit , s . stop ( ) ) [EOL] self . assertEqual ( s . remaining ( ) , [number] ) [EOL] [EOL] @ unittest . skipIf ( not hasattr ( signal , [string] ) , [string] ) def test_alarm ( self ) : [EOL] called = False [EOL] [EOL] def handler ( signum , stack_frame ) : [EOL] nonlocal called [EOL] called = True [EOL] prev_handler = signal . signal ( signal . SIGALRM , handler ) [EOL] prev_delay , prev_interval = signal . setitimer ( signal . ITIMER_REAL , [number] , [number] ) [EOL] if prev_delay : [EOL] outer = Timer ( prev_delay ) [comment] [EOL] try : [EOL] s = Timer ( self . time_limit ) [EOL] delay , interval = s . alarm ( ) [EOL] self . assertAlmostEqual ( delay , [number] , places = [number] ) [EOL] self . assertAlmostEqual ( interval , [number] , places = [number] ) [EOL] time . sleep ( self . time_limit ) [EOL] self . assertTrue ( called ) [EOL] [EOL] self . assertLess ( s . remaining ( ) , [number] ) [EOL] self . assertRaisesRegex ( ValueError , [string] , s . alarm ) [EOL] finally : [EOL] if prev_delay : [EOL] signal . setitimer ( signal . ITIMER_REAL , outer . remaining ( ) , prev_interval ) [EOL] else : [EOL] signal . setitimer ( signal . ITIMER_REAL , [number] , [number] ) [EOL] signal . signal ( signal . SIGALRM , prev_handler ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.Union[typing.Callable[[signal.Signals,types.FrameType],typing.Any],None,builtins.int,signal.Handlers]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Union[typing.Callable[[signal.Signals,types.FrameType],typing.Any],None,builtins.int,signal.Handlers]$ 0 0
[docstring] [EOL]	0 0