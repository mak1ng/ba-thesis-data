from typing import Any , List [EOL] import typing [EOL] from django . conf . urls import include , url [EOL] from django . contrib import admin [EOL] from rest_framework . schemas import get_schema_view [EOL] from rest_framework . documentation import include_docs_urls [EOL] [EOL] API_TITLE = [string] [EOL] API_DESCRIPTION = [string] [EOL] schema_view = get_schema_view ( title = API_TITLE ) [EOL] [EOL] urlpatterns = [ url ( [string] , include ( ( [string] , [string] ) , namespace = [string] ) ) , url ( [string] , include ( [string] , namespace = [string] ) ) , url ( [string] , admin . site . urls ) , url ( [string] , schema_view ) , url ( [string] , include_docs_urls ( title = API_TITLE , description = API_DESCRIPTION ) ) ]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import os [EOL] [EOL] from django . core . wsgi import get_wsgi_application [EOL] [EOL] os . environ . setdefault ( [string] , [string] ) [EOL] [EOL] application = get_wsgi_application ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
	0
default_app_config = [string]	$builtins.str$ 0 0
from typing import Type [EOL] import festivals [EOL] import typing [EOL] from rest_framework import viewsets , permissions [EOL] [EOL] from festivals . models import Artist , Festival , Show , Participation , Attendance , Party , Task , PartyInvite [EOL] [EOL] from festivals . serializers import FestivalSerializer , ArtistSerializer , ShowSerializer , ParticipationSerializer , AttendanceSerializer , PartySerializer , TaskSerializer , PartyInviteSerializer [EOL] [EOL] [EOL] class ArtistViewSet ( viewsets . ReadOnlyModelViewSet ) : [EOL] queryset = Artist . objects . all ( ) [EOL] serializer_class = ArtistSerializer [EOL] permission_classes = ( permissions . IsAuthenticated , ) [EOL] [EOL] [EOL] class ShowViewSet ( viewsets . ReadOnlyModelViewSet ) : [EOL] queryset = Show . objects . all ( ) [EOL] serializer_class = ShowSerializer [EOL] permission_classes = ( permissions . IsAuthenticated , ) [EOL] [EOL] [EOL] class FestivalViewSet ( viewsets . ReadOnlyModelViewSet ) : [EOL] queryset = Festival . objects . all ( ) [EOL] serializer_class = FestivalSerializer [EOL] permission_classes = ( permissions . IsAuthenticated , ) [EOL] [EOL] [EOL] class ParticipationViewSet ( viewsets . ModelViewSet ) : [EOL] queryset = Participation . objects . all ( ) [EOL] serializer_class = ParticipationSerializer [EOL] permission_classes = ( permissions . IsAuthenticated , ) [EOL] [EOL] [EOL] class AttendanceViewSet ( viewsets . ModelViewSet ) : [EOL] queryset = Attendance . objects . all ( ) [EOL] serializer_class = AttendanceSerializer [EOL] permission_classes = ( permissions . IsAuthenticated , ) [EOL] [EOL] [EOL] class PartyViewSet ( viewsets . ModelViewSet ) : [EOL] queryset = Party . objects . all ( ) [EOL] serializer_class = PartySerializer [EOL] permission_classes = ( permissions . IsAuthenticated , ) [EOL] [EOL] [EOL] class PartyInviteViewSet ( viewsets . ModelViewSet ) : [EOL] queryset = PartyInvite . objects . all ( ) [EOL] serializer_class = PartyInviteSerializer [EOL] permission_classes = ( permissions . IsAuthenticated , ) [EOL] [EOL] [EOL] class TaskViewSet ( viewsets . ModelViewSet ) : [EOL] queryset = Task . objects . all ( ) [EOL] serializer_class = TaskSerializer [EOL] permission_classes = ( permissions . IsAuthenticated , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , List [EOL] import typing [EOL] from django . conf . urls import include , url [EOL] from rest_framework . routers import DefaultRouter [EOL] from rest_framework . authtoken import views as auth_views [EOL] [EOL] from festivals import views [EOL] [EOL] [EOL] router = DefaultRouter ( ) [EOL] router . register ( [string] , views . ArtistViewSet , [string] ) [EOL] router . register ( [string] , views . FestivalViewSet , [string] ) [EOL] router . register ( [string] , views . ShowViewSet , [string] ) [EOL] router . register ( [string] , views . ParticipationViewSet , [string] ) [EOL] router . register ( [string] , views . AttendanceViewSet , [string] ) [EOL] router . register ( [string] , views . PartyViewSet , [string] ) [EOL] router . register ( [string] , views . PartyInviteViewSet , [string] ) [EOL] router . register ( [string] , views . TaskViewSet , [string] ) [EOL] [EOL] [EOL] urlpatterns = [ url ( [string] , include ( router . urls ) ) , url ( [string] , auth_views . obtain_auth_token ) ]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type [EOL] import festivals [EOL] import typing [EOL] from django . contrib . auth . models import User [EOL] from django . db import models [EOL] [EOL] [EOL] class Artist ( models . Model ) : [EOL] name = models . CharField ( max_length = [number] ) [EOL] description = models . CharField ( max_length = [number] , blank = True , null = True ) [EOL] infoconcert_url = models . CharField ( max_length = [number] , blank = True , null = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] [EOL] class Festival ( models . Model ) : [EOL] name = models . CharField ( max_length = [number] ) [EOL] description = models . CharField ( max_length = [number] , blank = True , null = True ) [EOL] start_date = models . DateField ( blank = True , null = True ) [EOL] end_date = models . DateField ( blank = True , null = True ) [EOL] address = models . CharField ( max_length = [number] , blank = True , null = True ) [EOL] zip_code = models . CharField ( max_length = [number] , blank = True , null = True ) [EOL] city = models . CharField ( max_length = [number] , blank = True , null = True ) [EOL] infoconcert_url = models . CharField ( max_length = [number] , blank = True , null = True ) [EOL] [EOL] @ property def time_table ( self ) : [EOL] days = { } [EOL] for show in self . line_up . all ( ) : [EOL] day = show . start_datetime . strftime ( [string] ) [EOL] days . setdefault ( day , [ ] ) [EOL] days [ day ] . append ( { [string] : { [string] : show . artist . name , [string] : show . artist . description , } , [string] : show . stage . name if show . stage else None , [string] : show . start_datetime , [string] : show . end_datetime , } ) [EOL] [EOL] return days [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] [EOL] class Stage ( models . Model ) : [EOL] festival = models . ForeignKey ( Festival , on_delete = models . CASCADE ) [EOL] name = models . CharField ( max_length = [number] ) [EOL] description = models . CharField ( max_length = [number] , blank = True , null = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return self . name [EOL] [EOL] [EOL] class Show ( models . Model ) : [EOL] festival = models . ForeignKey ( Festival , on_delete = models . CASCADE , related_name = [string] ) [EOL] artist = models . ForeignKey ( Artist , on_delete = models . CASCADE , related_name = [string] ) [EOL] stage = models . ForeignKey ( Stage , on_delete = models . CASCADE , related_name = [string] , null = True , blank = True ) [EOL] name = models . CharField ( max_length = [number] , null = True , blank = True ) [EOL] start_datetime = models . DateTimeField ( blank = True , null = True ) [EOL] end_datetime = models . DateTimeField ( blank = True , null = True ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f'{ self . artist } [string] { self . festival }' [EOL] [EOL] [EOL] class Party ( models . Model ) : [EOL] name = models . CharField ( max_length = [number] ) [EOL] festival = models . ForeignKey ( Festival , on_delete = models . CASCADE ) [EOL] created_by = models . ForeignKey ( User , on_delete = models . SET_NULL , blank = True , null = True ) [EOL] [EOL] [EOL] class Participation ( models . Model ) : [EOL] festival = models . ForeignKey ( Festival , on_delete = models . CASCADE , related_name = [string] ) [EOL] user = models . ForeignKey ( User , on_delete = models . CASCADE , related_name = [string] ) [EOL] party = models . ForeignKey ( Party , on_delete = models . SET_NULL , related_name = [string] , null = True , blank = True ) [EOL] start_date = models . DateField ( blank = True , null = True ) [EOL] end_date = models . DateField ( blank = True , null = True ) [EOL] [EOL] [EOL] class PartyInvite ( models . Model ) : [EOL] party = models . ForeignKey ( Party , on_delete = models . CASCADE , related_name = [string] ) [EOL] receiver = models . ForeignKey ( Participation , on_delete = models . CASCADE , related_name = [string] ) [EOL] sender = models . ForeignKey ( Participation , on_delete = models . CASCADE , related_name = [string] ) [EOL] accepted = models . NullBooleanField ( default = None ) [EOL] [EOL] [EOL] class Task ( models . Model ) : [EOL] party = models . ForeignKey ( Party , on_delete = models . CASCADE , related_name = [string] ) [EOL] assignee = models . ForeignKey ( Participation , on_delete = models . SET_NULL , blank = True , null = True , related_name = [string] ) [EOL] assignor = models . ForeignKey ( Participation , on_delete = models . SET_NULL , blank = True , null = True , related_name = [string] ) [EOL] [EOL] [EOL] class Attendance ( models . Model ) : [EOL] participation = models . ForeignKey ( Participation , on_delete = models . CASCADE , related_name = [string] ) [EOL] show = models . ForeignKey ( Show , on_delete = models . CASCADE , related_name = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Artist]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Artist]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Artist]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Festival]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Festival]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Festival]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Festival]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Festival]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Festival]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Festival]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Festival]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Stage]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Stage]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Stage]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Show]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Show]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Show]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Show]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Show]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Show]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Party]$ 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Party]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Party]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Participation]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Participation]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Participation]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Participation]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Participation]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.PartyInvite]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.PartyInvite]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.PartyInvite]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.PartyInvite]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Task]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Task]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Task]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Attendance]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Attendance]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . test import TestCase [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0
from typing import Type , Tuple [EOL] import festivals [EOL] import typing [EOL] from django . contrib . auth . models import User [EOL] from rest_framework import serializers [EOL] from rest_framework . fields import CurrentUserDefault [EOL] [EOL] from festivals . models import Artist , Festival , Show , Participation , Attendance , Party , Task , PartyInvite [EOL] [EOL] [EOL] class UserSerializer ( serializers . ModelSerializer ) : [EOL] class Meta : [EOL] model = User [EOL] fields = ( [string] , ) [EOL] [EOL] [EOL] class ShowSerializer ( serializers . ModelSerializer ) : [EOL] festival = serializers . SerializerMethodField ( ) [EOL] artist = serializers . SerializerMethodField ( ) [EOL] stage = serializers . SerializerMethodField ( ) [EOL] [EOL] class Meta : [EOL] model = Show [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] [EOL] def get_festival ( self , show ) : [EOL] return { [string] : show . festival . id , [string] : show . festival . name , [string] : show . festival . description , [string] : show . festival . start_date , [string] : show . festival . end_date , } [EOL] [EOL] def get_artist ( self , show ) : [EOL] return { [string] : show . artist . id , [string] : show . artist . name , [string] : show . artist . description , } [EOL] [EOL] def get_stage ( self , show ) : [EOL] return { [string] : show . stage . id , [string] : show . stage . name , [string] : show . stage . description , } if show . stage else None [EOL] [EOL] [EOL] class ArtistSerializer ( serializers . ModelSerializer ) : [EOL] tour = ShowSerializer ( many = True ) [EOL] [EOL] class Meta : [EOL] model = Artist [EOL] fields = ( [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class ParticipationSerializer ( serializers . ModelSerializer ) : [EOL] festival = serializers . SerializerMethodField ( ) [EOL] festival_id = serializers . PrimaryKeyRelatedField ( source = [string] , queryset = Festival . objects . all ( ) ) [EOL] user = UserSerializer ( default = serializers . CurrentUserDefault ( ) ) [EOL] [EOL] class Meta : [EOL] model = Participation [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] def get_festival ( self , participation ) : [EOL] return { [string] : participation . festival . id , [string] : participation . festival . name , [string] : participation . festival . description , [string] : participation . festival . start_date , [string] : participation . festival . end_date , } [EOL] [EOL] [EOL] class AttendanceSerializer ( serializers . ModelSerializer ) : [EOL] participation = ParticipationSerializer ( required = False ) [EOL] participation_id = serializers . PrimaryKeyRelatedField ( source = [string] , queryset = Participation . objects . all ( ) , ) [EOL] show = ShowSerializer ( required = False ) [EOL] show_id = serializers . PrimaryKeyRelatedField ( source = [string] , queryset = Show . objects . all ( ) , ) [EOL] [EOL] class Meta : [EOL] model = Attendance [EOL] fields = ( [string] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] class FestivalSerializer ( serializers . ModelSerializer ) : [EOL] line_up = ShowSerializer ( many = True ) [EOL] participants = ParticipationSerializer ( many = True ) [EOL] [EOL] class Meta : [EOL] model = Festival [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] def get_time_table ( self , festival ) : [EOL] print ( festival . time_table ( ) ) [EOL] return festival . time_table ( ) [EOL] [EOL] [EOL] class PartySerializer ( serializers . ModelSerializer ) : [EOL] festival = FestivalSerializer ( required = False ) [EOL] festival_id = serializers . PrimaryKeyRelatedField ( source = [string] , queryset = Festival . objects . all ( ) , ) [EOL] created_by = UserSerializer ( default = CurrentUserDefault ( ) ) [EOL] [EOL] class Meta : [EOL] model = Party [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class PartyInviteSerializer ( serializers . ModelSerializer ) : [EOL] party = PartySerializer ( required = False ) [EOL] party_id = serializers . PrimaryKeyRelatedField ( source = [string] , queryset = Party . objects . all ( ) , ) [EOL] sender = ParticipationSerializer ( required = False ) [EOL] sender_id = serializers . PrimaryKeyRelatedField ( source = [string] , queryset = Participation . objects . all ( ) , ) [EOL] receiver = ParticipationSerializer ( ) [EOL] receiver_id = serializers . PrimaryKeyRelatedField ( source = [string] , queryset = Participation . objects . all ( ) , ) [EOL] [EOL] class Meta : [EOL] model = PartyInvite [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , ) [EOL] [EOL] [EOL] class TaskSerializer ( serializers . ModelSerializer ) : [EOL] party = PartySerializer ( required = False ) [EOL] party_id = serializers . PrimaryKeyRelatedField ( source = [string] , queryset = Party . objects . all ( ) , ) [EOL] assignee = ParticipationSerializer ( required = False ) [EOL] assignee_id = serializers . PrimaryKeyRelatedField ( source = [string] , queryset = Participation . objects . all ( ) , ) [EOL] assignor = ParticipationSerializer ( ) [EOL] assignor_id = serializers . PrimaryKeyRelatedField ( source = [string] , queryset = Participation . objects . all ( ) , ) [EOL] [EOL] class Meta : [EOL] model = Task [EOL] fields = ( [string] , [string] , [string] , [string] , [string] , [string] , )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Task]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.serializers.ShowSerializer]$ 0 0 0 0 0 0 0 $typing.Type[festivals.serializers.ShowSerializer]$ 0 0 0 0 0 0 0 $typing.Type[festivals.serializers.ShowSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Task]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $festivals.serializers.ShowSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Task]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.serializers.ParticipationSerializer]$ 0 0 0 0 0 0 0 $typing.Type[festivals.serializers.ParticipationSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $festivals.serializers.UserSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Task]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $festivals.serializers.ParticipationSerializer$ 0 0 0 0 0 0 0 0 $typing.Type[festivals.serializers.AttendanceSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $festivals.serializers.ShowSerializer$ 0 0 0 0 0 0 0 0 $typing.Type[festivals.serializers.AttendanceSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Task]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $festivals.serializers.ShowSerializer$ 0 0 0 0 0 0 0 0 $festivals.serializers.ParticipationSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Task]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $festivals.serializers.FestivalSerializer$ 0 0 0 0 0 0 0 0 $typing.Type[festivals.serializers.PartySerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $festivals.serializers.UserSerializer$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Task]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $festivals.serializers.PartySerializer$ 0 0 0 0 0 0 0 0 $typing.Type[festivals.serializers.PartyInviteSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $festivals.serializers.ParticipationSerializer$ 0 0 0 0 0 0 0 0 $typing.Type[festivals.serializers.PartyInviteSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $festivals.serializers.ParticipationSerializer$ 0 0 0 0 0 $typing.Type[festivals.serializers.PartyInviteSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Task]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $festivals.serializers.PartySerializer$ 0 0 0 0 0 0 0 0 $typing.Type[festivals.serializers.TaskSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $festivals.serializers.ParticipationSerializer$ 0 0 0 0 0 0 0 0 $typing.Type[festivals.serializers.TaskSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $festivals.serializers.ParticipationSerializer$ 0 0 0 0 0 $typing.Type[festivals.serializers.TaskSerializer]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[festivals.models.Task]$ 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps import AppConfig [EOL] [EOL] [EOL] class FestivalsConfig ( AppConfig ) : [EOL] name = [string] [EOL] [EOL] def ready ( self ) : [EOL] import festivals . services . signals	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Dict [EOL] import typing [EOL] from algoliasearch_django import AlgoliaIndex [EOL] from algoliasearch_django . decorators import register [EOL] [EOL] from . models import Festival , Artist [EOL] [EOL] [EOL] @ register ( Artist ) class ArtistIndex ( AlgoliaIndex ) : [EOL] settings = { [string] : [ [string] ] } [EOL] index_name = [string] [EOL] [EOL] [EOL] @ register ( Festival ) class FestivalIndex ( AlgoliaIndex ) : [EOL] settings = { [string] : [ [string] ] } [EOL] index_name = [string]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.List[builtins.str]]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0
from typing import Any [EOL] import typing [EOL] from django . core . management . base import BaseCommand [EOL] [EOL] from festivals . models import Festival [EOL] from festivals . services . scraping import InfoconcertScraper [EOL] [EOL] [EOL] class Command ( BaseCommand ) : [EOL] help = [string] [EOL] [EOL] def add_arguments ( self , parser ) : [EOL] pass [EOL] [EOL] def handle ( self , * args , ** options ) : [EOL] festivals = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] for festival_url in festivals : [EOL] self . stdout . write ( self . style . SUCCESS ( f' [string] { festival_url } [string] ' ) ) [EOL] festival = Festival . objects . create ( infoconcert_url = festival_url ) [EOL] InfoconcertScraper ( festival ) . scrap ( ) [EOL] self . stdout . write ( self . style . SUCCESS ( f' [string] { festival } [string] ' ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
	0
from django . contrib . auth . models import User [EOL] from django . db . models . signals import post_save [EOL] from django . dispatch import receiver [EOL] from rest_framework . authtoken . models import Token [EOL] [EOL] from festivals . models import Festival [EOL] from festivals . services . scraping import InfoconcertScraper [EOL] [EOL] [EOL] @ receiver ( post_save , sender = User ) def create_auth_token ( sender , instance = None , created = False , ** kwargs ) : [EOL] if created : [EOL] Token . objects . create ( user = instance ) [EOL] [EOL] [EOL] @ receiver ( post_save , sender = Festival ) def scrap_festival_data ( sender , instance = None , created = False , ** kwargs ) : [EOL] if created : [EOL] InfoconcertScraper ( instance ) . scrap ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import builtins [EOL] from typing import Any , Type [EOL] import requests [EOL] import festivals [EOL] import typing [EOL] import requests [EOL] import datetime [EOL] [EOL] from bs4 import BeautifulSoup [EOL] [EOL] from festivals . models import Festival , Artist , Show [EOL] from django . core . exceptions import ObjectDoesNotExist [EOL] [EOL] [EOL] def generate_url ( path ) : [EOL] return f' [string] { path }' [EOL] [EOL] [EOL] class InfoconcertScraper : [EOL] [EOL] days = [ ] [EOL] [EOL] def __init__ ( self , festival ) : [EOL] self . festival = festival [EOL] [EOL] def scrap ( self ) : [EOL] result = requests . get ( self . festival . infoconcert_url ) [EOL] result . raise_for_status ( ) [EOL] festival_soup = BeautifulSoup ( result . content , [string] ) [EOL] [EOL] self . festival . name = festival_soup . find ( [string] , { [string] : [string] } ) . find ( [string] , { [string] : [string] } ) . get_text ( ) . title ( ) [EOL] [EOL] description_url = festival_soup . find ( [string] , { [string] : [string] } ) . find ( [string] , { [string] : [string] } ) . find ( [string] , { [string] : [string] } ) . find_all ( [string] ) [ [number] ] . find ( [string] ) [ [string] ] [EOL] [EOL] self . scrap_description ( generate_url ( description_url ) ) [EOL] [EOL] for day in festival_soup . find_all ( [string] , { [string] : [string] } ) : [EOL] day_url = day . find ( [string] , { [string] : [string] } ) . find ( [string] ) [ [string] ] [EOL] self . scrap_day ( generate_url ( day_url ) ) [EOL] [EOL] self . festival . start_date = self . days [ [number] ] [EOL] self . festival . end_date = self . days [ - [number] ] [EOL] [EOL] self . festival . save ( ) [EOL] [EOL] def scrap_description ( self , description_url ) : [EOL] result = requests . get ( description_url ) [EOL] result . raise_for_status ( ) [EOL] description_soup = BeautifulSoup ( result . content , [string] ) [EOL] self . festival . description = description_soup . find ( [string] , { [string] : [string] } ) . find_all ( [string] , { [string] : [string] } ) [ [number] ] . get_text ( ) [EOL] [EOL] def scrap_day ( self , day_url ) : [EOL] result = requests . get ( day_url ) [EOL] result . raise_for_status ( ) [EOL] day_soup = BeautifulSoup ( result . content , [string] ) [EOL] date = datetime . datetime . strptime ( day_soup . find ( [string] , { [string] : [string] } ) . find ( [string] ) [ [string] ] , [string] ) . strftime ( [string] ) [EOL] self . days . append ( date ) [EOL] [EOL] for artist_div in day_soup . find ( [string] , { [string] : [string] } ) . find_all ( [string] , { [string] : [string] } ) : [EOL] artist = self . scrap_artist ( artist_div ) [EOL] [EOL] show = Show . objects . create ( festival = self . festival , artist = artist , start_datetime = date , end_datetime = date , ) [EOL] print ( f' [string] { show } [string] ' ) [EOL] [EOL] return [EOL] [EOL] def scrap_artist ( self , artist_div ) : [EOL] artist_title = artist_div . find ( [string] ) . find ( [string] ) [EOL] artist_url = generate_url ( artist_title [ [string] ] ) [EOL] try : [EOL] artist = Artist . objects . get ( infoconcert_url = artist_url ) [EOL] except ( ObjectDoesNotExist , Artist . DoesNotExist ) : [EOL] description = artist_div . find ( [string] , { [string] : [string] } ) . get_text ( ) [EOL] artist = Artist . objects . create ( name = artist_title . get_text ( ) . title ( ) , description = description , infoconcert_url = artist_url , ) [EOL] print ( f' [string] { artist } [string] ' ) [EOL] [EOL] return artist [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $festivals.models.Festival$ 0 0 0 0 0 $festivals.models.Festival$ 0 $festivals.models.Festival$ 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 $typing.Any$ 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 $typing.Any$ 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 $typing.Any$ 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0
from . infoconcert import InfoconcertScraper	0 0 0 0 0