from progress_bar import printProgressBar [EOL] [EOL] class LinearRegression : [EOL] def __init__ ( self , fix , epocs ) : [EOL] self . fix = fix [EOL] self . t0 = [number] [EOL] self . t1 = [number] [EOL] self . epocs = epocs [EOL] [EOL] def fit ( self , x , y ) : [EOL] _t0 = self . t0 or [number] [EOL] _t1 = self . t1 or [number] [EOL] _epocs = self . epocs or [number] [EOL] _m = len ( x ) [EOL] [EOL] printProgressBar ( [number] , _epocs , prefix = [string] , suffix = [string] , length = [number] ) [EOL] for i in range ( [number] , _epocs ) : [EOL] printProgressBar ( i , _epocs - [number] , prefix = [string] , suffix = [string] , length = [number] ) [EOL] _sum0 = [number] [EOL] _sum1 = [number] [EOL] for j in range ( [number] , _m ) : [EOL] _sum0 += _t0 + _t1 * x [ j ] - y [ j ] [EOL] for j in range ( [number] , _m ) : [EOL] _sum1 += ( _t0 + _t1 * x [ j ] - y [ j ] ) * x [ j ] [EOL] [EOL] _t0 = _t0 - self . fix * _sum0 / _m [EOL] _t1 = _t1 - self . fix * _sum1 / _m [EOL] self . t0 = _t0 [EOL] self . t1 = _t1 [EOL] [EOL] def predict ( self , x ) : [EOL] return [ ( self . t0 + self . t1 * x [ i ] ) [ [number] ] for i in range ( len ( x ) ) ] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] import numpy as np [EOL] import matplotlib . pyplot as plt [EOL] from sklearn . metrics import mean_squared_error , r2_score [EOL] from linearRegressionModelMultiple import LinearRegressionMultiple [EOL] from data import getDiabetesDataMultipleFeatures , getHousingData [EOL] from sklearn . externals import joblib [EOL] import os [EOL] from normalize_data import normalize [EOL] [EOL] limiter = - [number] [EOL] featuresSlice = [number] [EOL] [EOL] [comment] [EOL] data , target = getDiabetesDataMultipleFeatures ( featuresSlice ) [EOL] [EOL] [comment] [EOL] data = data * [number] [EOL] target = target / [number] [EOL] [EOL] [comment] [EOL] v = np . ones ( ( [number] , [number] ) ) [EOL] data = np . c_ [ v , data ] [EOL] [EOL] x_train = data [ : limiter ] [EOL] x_test = data [ limiter : ] [EOL] [EOL] y_target_train = target [ : limiter ] [EOL] y_target_test = target [ limiter : ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] lr = joblib . load ( os . path . join ( [string] , [string] ) ) [EOL] [EOL] res = lr . predict ( x_test ) [EOL] [EOL] print ( x_test ) [EOL] print ( y_target_test ) [EOL] [EOL] plt . scatter ( x_test [ : , [number] ] , y_target_test , color = [string] ) [EOL] plt . plot ( x_test [ : , [number] ] , res , color = [string] , linewidth = [number] ) [EOL] [EOL] plt . show ( ) [EOL] [EOL] x_test = x_test / [number] [EOL] y_target_test = y_target_test * [number] [EOL] res = [ i * [number] for i in res ] [EOL] [EOL] print ( [string] % mean_squared_error ( y_target_test , res ) ) [EOL] print ( [string] % r2_score ( y_target_test , res ) ) [EOL] [EOL] [comment]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $builtins.int$ 0 0 $typing.Any$ 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $builtins.int$ 0 0 $typing.Any$ 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] def printProgressBar ( iteration , total , prefix = [string] , suffix = [string] , decimals = [number] , length = [number] , fill = [string] ) : [EOL] [docstring] [EOL] percent = ( [string] + str ( decimals ) + [string] ) . format ( [number] * ( iteration / float ( total ) ) ) [EOL] filledLength = int ( length * iteration // total ) [EOL] bar = fill * filledLength + [string] * ( length - filledLength ) [EOL] print ( [string] % ( prefix , bar , percent , suffix ) , end = [string] ) [EOL] [comment] [EOL] if iteration == total : [EOL] print ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] import numpy as np [EOL] from progress_bar import printProgressBar [EOL] [EOL] class LinearRegressionMultiple : [EOL] def __init__ ( self , fix , epocs ) : [EOL] self . fix = fix [EOL] self . epocs = epocs [EOL] self . tetha = [ [number] , [number] , [number] , [number] ] [EOL] [EOL] def fit ( self , x , y ) : [EOL] _epocs = self . epocs [EOL] _m , _n = x . shape [EOL] [EOL] printProgressBar ( [number] , _epocs - [number] , prefix = [string] , suffix = [string] , length = [number] ) [EOL] for e in range ( [number] , _epocs ) : [EOL] printProgressBar ( e , _epocs - [number] , prefix = [string] , suffix = [string] , length = [number] ) [EOL] [EOL] for j in range ( _n ) : [EOL] _sum = [number] [EOL] for i in range ( [number] , _m ) : [EOL] _sum += ( np . dot ( self . tetha , x [ i ] ) - y [ i ] ) * x [ i ] [ j ] [EOL] [EOL] self . tetha [ j ] = self . tetha [ j ] - self . fix * _sum / _m [EOL] [EOL] def predict ( self , x ) : [EOL] return [ np . dot ( self . tetha , x [ i ] ) for i in range ( len ( x ) ) ]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] from sklearn import datasets [EOL] import numpy as np [EOL] [EOL] def getDiabetesData ( featuresSlice ) : [EOL] diabetes = datasets . load_diabetes ( ) [EOL] data_chunk = [number] [EOL] data = diabetes . data [ : data_chunk , np . newaxis , featuresSlice ] [EOL] target = diabetes . target [ : data_chunk ] [EOL] return data , target [EOL] [EOL] def getDiabetesDataMultipleFeatures ( featuresSlice ) : [EOL] diabetes = datasets . load_diabetes ( ) [EOL] data_chunk = [number] [EOL] data = diabetes . data [ : data_chunk , : featuresSlice ] [EOL] target = diabetes . target [ : data_chunk ] [EOL] return data , target [EOL] [EOL] def getHousingData ( ) : [EOL] diabetes = datasets . load_boston ( ) [EOL] data_chunk = [number] [EOL] column = [number] [EOL] data = diabetes . data [ : data_chunk , column ] [EOL] target = diabetes . target [ : data_chunk ] [EOL] return data , target	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from statistics import mean , median [EOL] [EOL] def normalize ( x , coeficient ) : [EOL] return [ i * coeficient for i in x ]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0