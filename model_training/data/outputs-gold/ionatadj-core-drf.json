[comment] [EOL] from setuptools import setup [EOL] [EOL] [EOL] setup ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import dj_core_drf [EOL] from django . conf import settings [EOL] from django . contrib . auth import get_user_model [EOL] from django . db import models [EOL] from django . utils . http import urlsafe_base64_encode as b64e [EOL] from enumfields . fields import EnumFieldMixin [EOL] from rest_auth . registration . serializers import RegisterSerializer as RARegisterSerializer [EOL] from rest_auth . serializers import LoginSerializer as RALoginSerializer [EOL] from rest_auth . serializers import PasswordResetSerializer as RAPasswordResetSerializer [EOL] from rest_framework . serializers import ModelSerializer as BaseModelSerializer [EOL] [EOL] from . fields import LocalDateTimeField , RestEnumField [EOL] [EOL] [EOL] class ModelSerializer ( BaseModelSerializer ) : [EOL] serializer_field_mapping = BaseModelSerializer . serializer_field_mapping . copy ( ) [EOL] serializer_field_mapping . update ( { models . DateTimeField : LocalDateTimeField } ) [EOL] [EOL] def build_standard_field ( self , field_name , model_field ) : [EOL] cls , kwargs = super ( ) . build_standard_field ( field_name , model_field ) [EOL] if isinstance ( model_field , EnumFieldMixin ) : [EOL] cls = RestEnumField [EOL] kwargs [ [string] ] = model_field . enum [EOL] return cls , kwargs [EOL] [EOL] [EOL] class UserDetailsSerializer ( ModelSerializer ) : [EOL] class Meta : [EOL] model = get_user_model ( ) [EOL] read_only_fields = fields = list ( set ( [ [string] , model . USERNAME_FIELD , model . EMAIL_FIELD ] ) ) [EOL] [EOL] [EOL] class LoginSerializer ( RALoginSerializer ) : [comment] [EOL] def validate_email ( self , value ) : [comment] [EOL] return value . casefold ( ) [EOL] [EOL] [EOL] class PasswordResetSerializer ( RAPasswordResetSerializer ) : [comment] [EOL] def get_email_context ( self ) : [EOL] return { [string] : b64e ( self . data [ [string] ] . casefold ( ) . encode ( [string] ) ) , [string] : settings . DJCORE . FRONTEND_URL , [string] : settings . DJCORE . SITE_URL , } [EOL] [EOL] def get_email_options ( self ) : [comment] [EOL] return { ** super ( ) . get_email_options ( ) , ** { [string] : [string] , [string] : [string] , [string] : self . get_email_context ( ) , } } [EOL] [EOL] def validate_email ( self , value ) : [comment] [EOL] return super ( ) . validate_email ( value . casefold ( ) ) [EOL] [EOL] [EOL] class RegisterSerializer ( RARegisterSerializer ) : [EOL] [docstring] [EOL] [EOL] def validate_email ( self , email ) : [comment] [EOL] [docstring] [EOL] return super ( ) . validate_email ( email . casefold ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import dj_core_drf [EOL] [docstring] [EOL] from datetime import timedelta [EOL] [EOL] from dj_core . config import Config as BaseConfig , DefaultProxy [EOL] [EOL] [EOL] class Config ( BaseConfig ) : [EOL] [docstring] [EOL] [EOL] defaults = BaseConfig . defaults . copy ( ) [EOL] defaults . update ( { [string] : [string] , [string] : True , [string] : [string] , [string] : None , [string] : False , [string] : [string] , [string] : True , [string] : { [string] : [string] } , [string] : { [string] : timedelta ( hours = [number] ) , [string] : [string] , } , [string] : DefaultProxy ( { } , [string] ) , [string] : DefaultProxy ( { } , [string] ) , [string] : DefaultProxy ( { } , [string] ) , } ) [EOL] defaults . INSTALLED_APPS_REQUIRED = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] + defaults . INSTALLED_APPS_REQUIRED [EOL] defaults . INSTALLED_APPS_OPTIONAL += [ [string] , ] [EOL] [EOL] [comment] [EOL] def get_drf_settings ( self , settings ) : [EOL] [docstring] [EOL] return { [string] : [ [string] ] , [string] : [ [string] , [string] , [string] , ] , [string] : [string] , [string] : [ [string] , ] , [string] : [string] , } [EOL] [EOL] [comment] [EOL] def get_rest_auth_serializers ( self , settings ) : [EOL] [docstring] [EOL] return { [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] [comment] [EOL] def get_rest_auth_register_serializers ( self , settings ) : [EOL] [docstring] [EOL] return { [string] : [string] , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] from itertools import chain [EOL] [EOL] from django . conf import settings [EOL] from django . conf . urls import include , url [EOL] from rest_auth import urls as rest_auth_urls [EOL] from rest_auth . registration import urls as rest_auth_registration_urls [EOL] from rest_framework . documentation import include_docs_urls [EOL] from rest_framework . routers import DefaultRouter [EOL] from rest_framework . viewsets import ViewSetMixin [EOL] from rest_framework_jwt import views as jwt_views [EOL] from dj_core . utils import get_app_submodules [EOL] [EOL] from . views import get_schema_view [EOL] [EOL] [EOL] v1_router = DefaultRouter ( ) [EOL] [EOL] [comment] [EOL] viewsets = [ module . routes for app_name , module in get_app_submodules ( [string] ) if app_name != __package__ and hasattr ( module , [string] ) ] [EOL] for regex , viewset in chain . from_iterable ( viewsets ) : [EOL] if not issubclass ( viewset , ViewSetMixin ) : [EOL] raise TypeError ( [string] ) [EOL] v1_router . register ( regex , viewset , base_name = regex ) [EOL] [EOL] api_v1 = [ url ( [string] , include ( v1_router . urls ) ) , url ( [string] , get_schema_view ( title = settings . DJCORE . SITE_NAME ) ) , url ( [string] , include_docs_urls ( title = settings . DJCORE . SITE_NAME ) ) , url ( [string] , include ( rest_auth_urls ) ) , url ( [string] , include ( [ url ( [string] , jwt_views . obtain_jwt_token ) , url ( [string] , jwt_views . refresh_jwt_token ) , url ( [string] , jwt_views . verify_jwt_token ) , ] ) ) , ] [EOL] [EOL] if settings . ACCOUNT_REGISTRATION . lower ( ) == [string] : [EOL] api_v1 . append ( url ( [string] , include ( rest_auth_registration_urls ) ) ) [EOL] [EOL] [EOL] urlpatterns = [ url ( [string] , include ( api_v1 ) ) ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0
from typing import Type , Dict , Any [EOL] import typing [EOL] import dj_core_drf [EOL] from django . utils . translation import ugettext_lazy as _ [EOL] from rest_framework . exceptions import ValidationError [EOL] from rest_framework . utils . representation import smart_repr [EOL] from rest_framework . compat import unicode_to_repr [EOL] [EOL] [EOL] class RequiredValidator : [EOL] [docstring] [EOL] message = _ ( [string] ) [EOL] [EOL] def __init__ ( self , fields ) : [EOL] self . fields = fields [EOL] [EOL] def enforce_required_fields ( self , attrs ) : [EOL] missing = { name : self . message for name in self . fields if name not in attrs } [EOL] if missing : [EOL] raise ValidationError ( missing ) [EOL] [EOL] def __call__ ( self , attrs ) : [EOL] self . enforce_required_fields ( attrs ) [EOL] [EOL] def __repr__ ( self ) : [EOL] return unicode_to_repr ( [string] . format ( self . __class__ . __name__ , smart_repr ( self . fields ) ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dj_core_drf.validators.RequiredValidator]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,unknown]$ 0 0 0 0 0 $typing.Dict[typing.Any,unknown]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import typing [EOL] import dj_core_drf [EOL] from django . utils import timezone [EOL] from rest_framework . fields import ChoiceField , DateTimeField [EOL] from rest_framework . serializers import PrimaryKeyRelatedField [EOL] [EOL] [EOL] class LocalDateTimeField ( DateTimeField ) : [EOL] def default_timezone ( self ) : [EOL] return timezone . get_current_timezone ( ) [EOL] [EOL] def to_representation ( self , value ) : [EOL] return super ( ) . to_representation ( timezone . localtime ( value ) ) [EOL] [EOL] [EOL] class RestEnumField ( ChoiceField ) : [EOL] default_error_messages = ChoiceField . default_error_messages . copy ( ) [EOL] default_error_messages . update ( { [string] : [string] } ) [EOL] [EOL] def __init__ ( self , ** kwargs ) : [EOL] self . enum_type = kwargs . pop ( [string] ) [EOL] kwargs . pop ( [string] , None ) [EOL] super ( ) . __init__ ( self . enum_type . choices ( ) , ** kwargs ) [EOL] [EOL] def to_internal_value ( self , data ) : [EOL] try : [EOL] data_int = int ( data ) [EOL] except ValueError : [EOL] data_int = None [EOL] for choice in self . enum_type : [EOL] if choice . name == data or str ( choice . value ) == data or choice == data_int : [EOL] return choice [EOL] self . fail ( [string] ) [EOL] [EOL] def to_representation ( self , value ) : [EOL] return None if value is None else value . value [EOL] [EOL] [EOL] class ModelChoicesFieldMixin ( ) : [EOL] def __init__ ( self , ** kwargs ) : [EOL] self . value_attr = kwargs . pop ( [string] , [string] ) [EOL] self . str_attr = kwargs . pop ( [string] , None ) [EOL] self . filtered_queryset = kwargs . pop ( [string] , kwargs . get ( [string] , None ) ) [EOL] super ( ) . __init__ ( ** kwargs ) [EOL] [EOL] [EOL] class ModelChoicesPrimaryKeyRelatedField ( ModelChoicesFieldMixin , PrimaryKeyRelatedField ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[dj_core_drf.fields.RestEnumField]$ 0 0 0 $typing.Type[dj_core_drf.fields.RestEnumField]$ 0 0 0 0 0 $typing.Type[dj_core_drf.fields.RestEnumField]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from rest_framework . decorators import api_view , renderer_classes [EOL] from rest_framework . renderers import CoreJSONRenderer [EOL] from rest_framework . response import Response [EOL] from rest_framework . schemas import SchemaGenerator [EOL] from rest_framework_swagger . renderers import SwaggerUIRenderer , OpenAPIRenderer [EOL] [EOL] [EOL] def get_schema_view ( title ) : [EOL] @ api_view ( ) @ renderer_classes ( [ SwaggerUIRenderer , OpenAPIRenderer , CoreJSONRenderer ] ) def schema_view ( request ) : [EOL] return Response ( SchemaGenerator ( title = title ) . get_schema ( request ) ) [EOL] [EOL] return schema_view [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from django . apps . config import AppConfig [EOL] [EOL] [EOL] class DjCoreDRFConfig ( AppConfig ) : [EOL] name = label = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] [EOL] __version__ = [string] [EOL] [EOL] default_app_config = [string] [EOL]	0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0
from typing import List , Set , Dict , Any [EOL] import typing [EOL] from django . core . exceptions import PermissionDenied [EOL] from django . http import Http404 [EOL] from rest_framework import exceptions [EOL] from rest_framework . metadata import SimpleMetadata [EOL] from rest_framework . request import clone_request [EOL] [EOL] from . fields import RestEnumField , ModelChoicesFieldMixin [EOL] [EOL] [EOL] class ModelChoicesMetadata ( SimpleMetadata ) : [EOL] [docstring] [EOL] [comment] [EOL] def get_field_info ( self , field ) : [EOL] response = super ( ) . get_field_info ( field ) [EOL] if isinstance ( field , ModelChoicesFieldMixin ) : [EOL] value_attr = field . value_attr [EOL] str_attr = field . str_attr [EOL] choices = [ { value_attr : getattr ( item , value_attr ) , [string] if str_attr is None else str_attr : str ( item ) if str_attr is None else getattr ( item , str_attr ) } for item in field . queryset . all ( ) ] [EOL] response [ [string] ] = choices [EOL] elif isinstance ( field , RestEnumField ) : [EOL] response [ [string] ] = field . choices [EOL] return response [EOL] [EOL] def determine_actions ( self , request , view ) : [EOL] [docstring] [EOL] from rest_framework . generics import GenericAPIView [EOL] actions = { } [EOL] excluded_methods = { [string] , [string] , [string] , [string] } [EOL] for method in set ( view . allowed_methods ) - excluded_methods : [EOL] view . request = clone_request ( request , method ) [EOL] try : [EOL] if isinstance ( view , GenericAPIView ) : [EOL] has_object = view . lookup_url_kwarg or view . lookup_field in view . kwargs [EOL] elif method in { [string] , [string] } : [EOL] has_object = method in { [string] } [EOL] else : [EOL] continue [EOL] [comment] [EOL] if hasattr ( view , [string] ) : [EOL] view . check_permissions ( view . request ) [EOL] [comment] [EOL] if has_object and hasattr ( view , [string] ) : [EOL] view . get_object ( ) [EOL] except ( exceptions . APIException , PermissionDenied , Http404 ) : [EOL] pass [EOL] else : [EOL] [comment] [EOL] [comment] [EOL] serializer = view . get_serializer ( ) [EOL] actions [ method ] = self . get_serializer_info ( serializer ) [EOL] finally : [EOL] view . request = request [EOL] [EOL] return actions [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[unknown,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Dict[unknown,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Dict[unknown,typing.Any]]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0
from rest_framework . pagination import LimitOffsetPagination [EOL] [EOL] [EOL] class ThousandMaxLimitOffsetPagination ( LimitOffsetPagination ) : [EOL] default_limit = [number] [EOL] max_limit = [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0