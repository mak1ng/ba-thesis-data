from typing import List , Dict [EOL] import typing [EOL] import builtins [EOL] from typing import Dict , List [EOL] [EOL] [EOL] class Transition : [EOL] def __init__ ( self , name , rate , input , output , inhibit , control_rate , player_control , fire_cost = [number] , ) : [EOL] self . name = name [EOL] self . rate = rate [EOL] self . input = input [EOL] self . output = set ( output ) [EOL] self . inhibit = set ( inhibit ) [EOL] self . control_rate = control_rate [EOL] self . player_control = player_control [EOL] self . fire_cost = fire_cost [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0
import builtins [EOL] from dataclasses import dataclass [EOL] [EOL] [EOL] @ dataclass class Arc : [EOL] place = ... [EOL] arc_type = ... [EOL] weight = [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0
import builtins [EOL] from dataclasses import dataclass [EOL] from typing import Any [EOL] [EOL] [EOL] @ dataclass class Place : [EOL] name = ... [EOL] marking = ... [EOL] success_place = ... [EOL] player_observable = ... [EOL] control = ... [EOL] visited = False [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 $builtins.bool$ 0 0 0 $typing.Any$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] import builtins [EOL] from typing import List [EOL] [EOL] [EOL] class DesTracking : [EOL] def __init__ ( self , transitions_fired_list = [ ] , transitions_fired_cost = [ ] ) : [EOL] self . transitions_fired_list = list ( transitions_fired_list ) [EOL] self . transitions_fired_cost = list ( transitions_fired_cost ) [EOL] [EOL] def add_to_transitions_fired_list ( self , transition_name , transitions_fired_cost ) : [EOL] self . transitions_fired_list . append ( transition_name ) [EOL] self . transitions_fired_cost . append ( transitions_fired_cost ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0
	0