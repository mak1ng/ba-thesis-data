from typing import Union , Dict , Type [EOL] import typing [EOL] import argparse [EOL] import tests [EOL] import figcan [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import argparse [EOL] from collections import namedtuple [EOL] [EOL] import pytest [EOL] [EOL] from figcan import Configuration , Extensible [EOL] [EOL] [EOL] def test_apply_nested_dict ( base_config ) : [EOL] cfg = Configuration ( base_config ) [EOL] cfg . apply ( { [string] : [string] , [string] : { [string] : [number] } } ) [EOL] [EOL] assert cfg [ [string] ] == [string] [EOL] assert cfg [ [string] ] [ [string] ] == [number] [EOL] assert cfg [ [string] ] [ [string] ] == [string] [EOL] [EOL] [EOL] def test_apply_nested_dict_base_not_modified ( base_config ) : [EOL] cfg = Configuration ( base_config ) [EOL] cfg . apply ( { [string] : [string] , [string] : { [string] : [number] } } ) [EOL] assert base_config [ [string] ] == [string] [EOL] [EOL] [EOL] def test_apply_nokey_raises ( base_config ) : [EOL] cfg = Configuration ( base_config ) [EOL] with pytest . raises ( KeyError ) : [EOL] cfg . apply ( { [string] : [string] } ) [EOL] [EOL] [EOL] def test_apply_nokey_ignored ( base_config ) : [EOL] cfg = Configuration ( base_config ) [EOL] cfg . apply ( { [string] : [string] } , raise_on_unknown_key = False ) [EOL] assert [string] not in cfg [EOL] [EOL] [EOL] def test_apply_nokey_flexible_config_added ( base_config ) : [EOL] base_config [ [string] ] [ [string] ] = Extensible ( base_config [ [string] ] [ [string] ] ) [EOL] cfg = Configuration ( base_config ) [EOL] cfg . apply ( { [string] : [string] , [string] : { [string] : { [string] : [string] } } } ) [EOL] [EOL] assert cfg [ [string] ] == [string] [EOL] assert cfg [ [string] ] [ [string] ] == [number] [EOL] assert cfg [ [string] ] [ [string] ] [ [string] ] == [string] [EOL] assert cfg [ [string] ] [ [string] ] [ [string] ] == [string] [EOL] [EOL] [EOL] def test_apply_flat_dict ( base_config ) : [EOL] cfg = Configuration ( base_config ) [EOL] flat_overrides = { [string] : [string] , [string] : True , [string] : [number] , [string] : [string] } [EOL] cfg . apply_flat ( flat_overrides ) [EOL] [EOL] assert cfg [ [string] ] == [string] [EOL] assert cfg [ [string] ] is True [EOL] assert cfg [ [string] ] [ [string] ] == [number] [EOL] assert cfg [ [string] ] [ [string] ] [ [string] ] == [string] [EOL] [EOL] [EOL] def test_apply_flat_dict_prefix_stripped ( base_config ) : [EOL] cfg = Configuration ( base_config ) [EOL] flat_overrides = { [string] : [string] , [string] : True , [string] : [number] , [string] : [string] , [string] : [number] } [EOL] [EOL] cfg . apply_flat ( flat_overrides , prefix = [string] ) [EOL] [EOL] assert cfg [ [string] ] == [string] [EOL] assert cfg [ [string] ] is True [EOL] assert cfg [ [string] ] [ [string] ] [ [string] ] == [string] [EOL] assert cfg [ [string] ] [ [string] ] == [number] [EOL] [EOL] [EOL] def test_apply_flat_dict_prefix_stripped_missing_keys ( base_config ) : [EOL] cfg = Configuration ( base_config ) [EOL] flat_overrides = { [string] : [number] , [string] : [number] } [EOL] [EOL] cfg . apply_flat ( flat_overrides , prefix = [string] ) [EOL] [EOL] assert [string] not in cfg [ [string] ] [EOL] assert [string] not in cfg [EOL] [EOL] [EOL] def test_apply_flat_dict_custom_nesting_separator ( base_config ) : [EOL] cfg = Configuration ( base_config ) [EOL] flat_overrides = { [string] : True , [string] : False , [string] : [number] , [string] : [string] } [EOL] [EOL] cfg . apply_flat ( flat_overrides , namespace_separator = [string] ) [EOL] assert cfg [ [string] ] is True [EOL] assert cfg [ [string] ] [ [string] ] == [number] [EOL] assert cfg [ [string] ] [ [string] ] [ [string] ] == [string] [EOL] [EOL] [EOL] def test_apply_object ( base_config ) : [EOL] cfg = Configuration ( base_config ) [EOL] ConfigOverrides = namedtuple ( [string] , ( [string] , [string] ) ) [EOL] cfg . apply_object ( ConfigOverrides ( foo = [string] , is_enabled = True ) ) [EOL] [EOL] assert cfg [ [string] ] == [string] [EOL] assert cfg [ [string] ] is True [EOL] [EOL] [EOL] def test_apply_object_to_subkey ( base_config ) : [EOL] cfg = Configuration ( base_config ) [EOL] ConfigOverrides = namedtuple ( [string] , ( [string] , [string] ) ) [EOL] cfg . apply_object ( ConfigOverrides ( level = [number] , format = [string] ) , apply_on = ( [string] , ) ) [EOL] [EOL] assert cfg [ [string] ] [ [string] ] == [number] [EOL] assert cfg [ [string] ] [ [string] ] == [string] [EOL] [EOL] [EOL] def test_apply_object_from_argparse ( base_config ) : [EOL] parser = argparse . ArgumentParser ( ) [EOL] parser . add_argument ( [string] , type = int ) [EOL] parser . add_argument ( [string] , type = str ) [EOL] parser . add_argument ( [string] , action = [string] ) [EOL] args = parser . parse_args ( [ [string] , [string] , [string] , [string] , [string] ] ) [EOL] [EOL] cfg = Configuration ( base_config ) [EOL] cfg . apply_object ( args , apply_on = ( [string] , ) ) [EOL] [EOL] assert cfg [ [string] ] [ [string] ] == [number] [EOL] assert cfg [ [string] ] [ [string] ] == [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] import figcan [EOL] [docstring] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import pytest [EOL] [EOL] from figcan import Configuration [EOL] [EOL] [EOL] def test_can_read_existing_items ( base_config ) : [EOL] cfg = Configuration ( base_config ) [EOL] assert cfg [ [string] ] is False [EOL] assert cfg [ [string] ] [ [number] ] == [number] [EOL] assert cfg [ [string] ] [ [string] ] [ [string] ] == [string] [EOL] [EOL] [EOL] def test_throw_if_read_nonexisting_items ( base_config ) : [EOL] cfg = Configuration ( base_config ) [EOL] with pytest . raises ( KeyError ) : [EOL] assert cfg [ [string] ] is False [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] assert cfg [ [string] ] [ [string] ] == [number] [EOL] [EOL] [EOL] def test_can_read_nonexisting_key_with_default ( base_config ) : [EOL] cfg = Configuration ( base_config ) [EOL] assert cfg . get ( [string] , [string] ) == [string] [EOL] [EOL] [EOL] def test_throw_on_write ( base_config ) : [EOL] cfg = Configuration ( base_config ) [EOL] with pytest . raises ( TypeError ) : [EOL] cfg [ [string] ] = True [EOL] [EOL] with pytest . raises ( TypeError ) : [EOL] cfg [ [string] ] = [string] [EOL] [EOL] [EOL] def test_can_check_for_items_in ( base_config ) : [EOL] cfg = Configuration ( base_config ) [EOL] assert [string] in cfg [EOL] assert [string] in cfg [ [string] ] [EOL] [EOL] [EOL] def test_is_iterable ( base_config ) : [EOL] cfg = Configuration ( base_config ) [EOL] cfg_keys = [ k for k in cfg ] [EOL] assert len ( cfg_keys ) == [number] [EOL] assert len ( cfg . keys ( ) ) == [number] [EOL] assert len ( cfg . values ( ) ) == [number] [EOL] assert len ( cfg . items ( ) ) == [number] [EOL] [EOL] [EOL] def test_has_len ( base_config ) : [EOL] cfg = Configuration ( base_config ) [EOL] assert len ( cfg ) == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[docstring] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] import pytest [EOL] [EOL] [EOL] @ pytest . fixture ( ) def base_config ( ) : [EOL] return { [string] : [string] , [string] : { [string] : [number] , [string] : [string] , [string] : { [string] : [string] , [string] : [string] } } , [string] : [ [number] , [number] , [number] ] , [string] : False , [string] : None } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0