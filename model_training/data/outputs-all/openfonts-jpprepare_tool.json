from typing import List , Any [EOL] import prepare_tool [EOL] import pathlib [EOL] import typing [EOL] import json [EOL] from typing import List [EOL] from dataclasses import dataclass [EOL] from pathlib import Path [EOL] from tempfile import TemporaryDirectory [EOL] [EOL] from prepare_tool . models import Package , Font [EOL] [EOL] [EOL] @ dataclass ( ) class Directories ( ) : [EOL] tmp = ... [EOL] output = ... [EOL] archives = ... [EOL] webfonts = ... [EOL] [EOL] [EOL] class Core : [EOL] def __init__ ( self , json_file , output_dir ) : [EOL] if not json_file . is_file ( ) : [EOL] raise FileNotFoundError ( f"{ json_file } [string] " ) [EOL] [EOL] with open ( json_file , [string] , encoding = [string] ) as file : [EOL] json_dict = json . loads ( file . read ( ) ) [EOL] self . package = Package ( ** json_dict ) [EOL] [EOL] self . __tmp_directory = TemporaryDirectory ( prefix = [string] ) [EOL] self . directories = Directories ( tmp = Path ( self . __tmp_directory . name ) , output = output_dir , archives = output_dir . joinpath ( [string] ) , webfonts = output_dir . joinpath ( f" [string] { self . package . id }" ) , ) [EOL] [EOL] for dir_path in vars ( self . directories ) . values ( ) : [comment] [EOL] dir_path . mkdir ( parents = True , exist_ok = True ) [EOL] [EOL] def __enter__ ( self ) : [EOL] return self [EOL] [EOL] def __exit__ ( self , exc_type , exc_value , traceback ) : [EOL] self . cleanup ( ) [EOL] [EOL] def cleanup ( self ) : [EOL] self . __tmp_directory . cleanup ( ) [EOL] [EOL] def findFontfilePath ( self , font ) : [EOL] matched = list ( self . directories . tmp . glob ( f" [string] { font . filename }" ) ) [EOL] if len ( matched ) == [number] : [EOL] raise Exception ( f"{ font . filename } [string] " ) [EOL] elif len ( matched ) != [number] : [EOL] raise Exception ( f" [string] { font . filename } [string] " ) [EOL] return matched [ [number] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 $pathlib.Path$ 0 0 0 $pathlib.Path$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $prepare_tool.core.Directories$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $prepare_tool.core.Directories$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 $prepare_tool.models.Font$ 0 0 0 $typing.List[pathlib.Path]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $prepare_tool.models.Font$ 0 0 0 0 0 0 0 0 0 $typing.List[pathlib.Path]$ 0 0 0 0 0 0 0 0 0 $prepare_tool.models.Font$ 0 0 0 0 0 0 0 0 0 0 $typing.List[pathlib.Path]$ 0 0 0 0 0 0 0 0 0 0 0 $prepare_tool.models.Font$ 0 0 0 0 0 0 0 0 $typing.List[pathlib.Path]$ 0 0 0 0
from typing import Dict , Any [EOL] import pathlib [EOL] import argparse [EOL] import typing [EOL] import builtins [EOL] import argparse [EOL] from pathlib import Path [EOL] [EOL] from prepare_tool . core import Core [EOL] from prepare_tool . models import Package [EOL] from prepare_tool . download import Downloader [EOL] from prepare_tool . validate import Validator [EOL] from prepare_tool . generate import ArchiveGenerator , StyleSheetGenerator , WebFontGenerator [EOL] [EOL] [EOL] def cli ( ) : [EOL] parser = argparse . ArgumentParser ( prog = [string] , add_help = False ) [EOL] parser . add_argument ( [string] , action = [string] ) [EOL] [EOL] subparsers = parser . add_subparsers ( dest = [string] , metavar = [string] ) [EOL] [EOL] subparsers . add_parser ( [string] , help = [string] ) [EOL] [EOL] validate_command_parser = subparsers . add_parser ( [string] , help = [string] ) [EOL] validate_command_parser . add_argument ( [string] , metavar = [string] , type = Path , help = [string] ) [EOL] [EOL] generate_command_parser = subparsers . add_parser ( [string] , help = [string] ) [EOL] generate_command_parser . add_argument ( [string] , metavar = [string] , type = Path , help = [string] ) [EOL] generate_command_parser . add_argument ( [string] , dest = [string] , type = Path , required = True ) [EOL] generate_command_parser . add_argument ( [string] , dest = [string] , action = [string] ) [EOL] generate_command_parser . add_argument ( [string] , dest = [string] , action = [string] ) [EOL] generate_command_parser . add_argument ( [string] , dest = [string] , action = [string] ) [EOL] [EOL] args = vars ( parser . parse_args ( ) ) [EOL] return main ( parser = parser , ** args ) [EOL] [EOL] [EOL] def print_schema ( ) : [EOL] print ( Package . schema_json ( indent = [number] , sort_keys = True ) ) [EOL] [EOL] [EOL] def generate ( json_path , output_dir , ** options ) : [EOL] with Core ( json_path , output_dir ) as prepare_tool : [EOL] Downloader ( prepare_tool ) . download ( ) [EOL] Validator ( prepare_tool ) . validate ( ) [EOL] [EOL] if options [ [string] ] is True : [EOL] ArchiveGenerator ( prepare_tool ) . generate ( ) [EOL] if options [ [string] ] is True : [EOL] WebFontGenerator ( prepare_tool ) . generate ( ) [EOL] if options [ [string] ] is True : [EOL] StyleSheetGenerator ( prepare_tool ) . generate ( ) [EOL] [EOL] [EOL] def validate ( json_path ) : [EOL] with Core ( json_path , output_dir = Path ( ) ) as prepare_tool : [EOL] Downloader ( prepare_tool ) . download ( ) [EOL] Validator ( prepare_tool ) . validate ( ) [EOL] [EOL] [EOL] def main ( parser , command , ** args ) : [EOL] if command == [string] : [EOL] print_schema ( ) [EOL] elif command == [string] : [EOL] generate ( ** args ) [EOL] elif command == [string] : [EOL] validate ( ** args ) [EOL] else : [EOL] parser . print_help ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import pathlib [EOL] import prepare_tool [EOL] import typing [EOL] from dataclasses import dataclass [EOL] from pathlib import Path [EOL] [EOL] ROOT_DIR_PATH = Path ( __file__ ) . parent . resolve ( ) [EOL] [EOL] [EOL] @ dataclass ( init = False , frozen = True ) class __NameId ( ) : [EOL] COPYRIGHT = [number] [EOL] LEGACY_FAMILY = [number] [EOL] LEGACY_SUBFAMILY = [number] [EOL] TRUETYPE_UNIQUE_ID = [number] [EOL] FULL_NAME = [number] [EOL] POSTSCRIPT_NAME = [number] [EOL] PREFERRED_FAMILY = [number] [EOL] PREFERRED_SUBFAMILY = [number] [EOL] WWS_FAMILY = [number] [EOL] [EOL] [EOL] @ dataclass ( init = False , frozen = True ) class __WeightNumber ( ) : [EOL] thin = [string] [EOL] extraLight = [string] [EOL] light = [string] [EOL] normal = [string] [EOL] medium = [string] [EOL] semiBold = [string] [EOL] bold = [string] [EOL] extraBold = [string] [EOL] black = [string] [EOL] [EOL] [EOL] @ dataclass ( init = False , frozen = True ) class __FileDir ( ) : [EOL] UNICODE_TEXT = ROOT_DIR_PATH . joinpath ( [string] ) [EOL] LICENSE_TEMPLATE = ROOT_DIR_PATH . joinpath ( [string] ) [EOL] METADATA_TEMPLATE = ROOT_DIR_PATH . joinpath ( [string] ) [EOL] STYLESHEETS_TEMPLATE = ROOT_DIR_PATH . joinpath ( [string] ) [EOL] [EOL] [EOL] NAME_ID = __NameId ( ) [EOL] WEIGHT_NUMBER = __WeightNumber ( ) [EOL] FILE_DIR = __FileDir ( ) [EOL] [EOL] FAMILY_RELATED_NAME_ID = [ NAME_ID . LEGACY_FAMILY , NAME_ID . TRUETYPE_UNIQUE_ID , NAME_ID . FULL_NAME , NAME_ID . POSTSCRIPT_NAME , NAME_ID . PREFERRED_FAMILY , NAME_ID . WWS_FAMILY , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import sys [EOL] from prepare_tool import cli [EOL] [EOL] if __name__ == [string] : [EOL] sys . exit ( cli ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import pathlib [EOL] import requests [EOL] import prepare_tool [EOL] import cgi [EOL] import requests [EOL] from pathlib import Path [EOL] from urllib . parse import urlparse [EOL] from tarfile import TarFile [EOL] from zipfile import ZipFile [EOL] [EOL] from prepare_tool . core import Core [EOL] [EOL] ZIP_FILENAME_UTF8_FLAG = [number] [EOL] [EOL] [EOL] class Downloader ( ) : [EOL] def __init__ ( self , core ) : [EOL] self . __core = core [EOL] [EOL] def download ( self ) : [EOL] self . __fetch ( ) [EOL] [EOL] def __fetch ( self ) : [EOL] package = self . __core . package [EOL] tmp_dir = self . __core . directories . tmp [EOL] [EOL] for source in package . sources : [EOL] res = requests . get ( source . url , headers = { [string] : package . homepage } ) [EOL] _ , params = cgi . parse_header ( res . headers . get ( [string] , [string] ) ) [EOL] file_name = params . get ( [string] , Path ( urlparse ( res . url ) . path ) . name ) [EOL] file_path = tmp_dir . joinpath ( file_name ) [EOL] [EOL] with open ( file_path , [string] ) as file : [EOL] file . write ( res . content ) [EOL] [EOL] if file_name . endswith ( [string] ) : [EOL] return self . __extractTarXz ( file_path ) [EOL] elif file_name . endswith ( [string] ) : [EOL] return self . __extractZip ( file_path ) [EOL] elif file_name . endswith ( [string] ) or file_name . endswith ( [string] ) : [EOL] return None [EOL] else : [EOL] raise Exception ( f"{ file_name } [string] " ) [EOL] [EOL] def __extractZip ( self , file_path ) : [EOL] tmp_dir = self . __core . directories . tmp [EOL] with ZipFile ( file_path , mode = [string] ) as archive : [EOL] for info in archive . filelist : [EOL] if info . is_dir ( ) : [EOL] continue [EOL] [EOL] filename = info . filename [EOL] if ( info . flag_bits & ZIP_FILENAME_UTF8_FLAG ) == [number] : [EOL] [comment] [EOL] filename = filename . encode ( [string] ) . decode ( [string] ) [EOL] [EOL] export_filepath = tmp_dir . joinpath ( filename ) [EOL] export_filepath . parent . mkdir ( parents = True , exist_ok = True ) [EOL] with archive . open ( info ) as file , open ( export_filepath , mode = [string] ) as export : [EOL] export . write ( file . read ( ) ) [EOL] [EOL] def __extractTarXz ( self , file_path ) : [EOL] tmp_dir = self . __core . directories . tmp [EOL] with TarFile . open ( file_path , mode = [string] ) as archive : [EOL] archive . extractall ( tmp_dir ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $prepare_tool.core.Core$ 0 0 0 0 0 $prepare_tool.core.Core$ 0 $prepare_tool.core.Core$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 $requests.models.Response$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $None$ 0 0 0 $pathlib.Path$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 $builtins.str$ 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $pathlib.Path$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0
import pathlib [EOL] import prepare_tool [EOL] import builtins [EOL] import hashlib [EOL] [EOL] from prepare_tool . core import Core [EOL] from prepare_tool . models import Font [EOL] [EOL] [EOL] class Validator ( ) : [EOL] def __init__ ( self , core ) : [EOL] self . __core = core [EOL] [EOL] def validate ( self ) : [EOL] package = self . __core . package [EOL] [EOL] for source in package . sources : [EOL] for weight , font in source . fonts : [EOL] if font is None : [EOL] continue [EOL] self . __validateFont ( font ) [EOL] [EOL] return True [EOL] [EOL] def __validateFont ( self , font ) : [EOL] font_path = self . __core . findFontfilePath ( font ) [EOL] with open ( font_path , [string] ) as fd : [EOL] hash_hex = hashlib . sha256 ( fd . read ( ) ) . hexdigest ( ) [EOL] if font . sha256 != hash_hex : [EOL] raise Exception ( f' [string] { font_path . name } [string] ' ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $prepare_tool.core.Core$ 0 0 0 0 0 $prepare_tool.core.Core$ 0 $prepare_tool.core.Core$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $prepare_tool.models.Font$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $prepare_tool.models.Font$ 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $prepare_tool.models.Font$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0
from typing import Dict , Generator , List , Optional , Tuple , Type [EOL] import prepare_tool [EOL] import pydantic [EOL] import typing [EOL] import builtins [EOL] from typing import Optional , List , Generator , Tuple [EOL] from enum import Enum [EOL] from pydantic import BaseModel , Field , AnyUrl , Extra [EOL] [EOL] [EOL] class License ( str , Enum ) : [EOL] MIT = [string] [EOL] IPA = [string] [EOL] OFL_1_1 = [string] [EOL] APACHE_2_0 = [string] [EOL] BSD_3_CLAUSE = [string] [EOL] MPLUS = [string] [EOL] [EOL] [EOL] class Category ( str , Enum ) : [EOL] MINCHO = [string] [EOL] GOTHIC = [string] [EOL] MARU_GOTHIC = [string] [EOL] BRASH = [string] [EOL] HAND_WRITING = [string] [EOL] ARTISTIC = [string] [EOL] OTHERS = [string] [EOL] [EOL] [EOL] class Character ( str , Enum ) : [EOL] ALPHABET = [string] [EOL] HIRAGANA = [string] [EOL] KATAKANA = [string] [EOL] KANJI = [string] [EOL] [EOL] [EOL] class Font ( BaseModel ) : [EOL] filename = ... [EOL] sha256 = ... [EOL] number = Field ( [number] ) [EOL] [EOL] class Config : [EOL] extra = Extra . forbid [EOL] [EOL] [EOL] class FontWeight ( BaseModel ) : [EOL] thin = Field ( None ) [EOL] extraLight = Field ( None ) [EOL] light = Field ( None ) [EOL] normal = Field ( None ) [EOL] medium = Field ( None ) [EOL] semiBold = Field ( None ) [EOL] bold = Field ( None ) [EOL] extraBold = Field ( None ) [EOL] black = Field ( None ) [EOL] [EOL] def __iter__ ( self ) : [EOL] return super ( ) . __iter__ ( ) [EOL] [EOL] class Config : [EOL] extra = Extra . forbid [EOL] [EOL] [EOL] class Source ( BaseModel ) : [EOL] url = ... [EOL] fonts = ... [EOL] [EOL] class Config : [EOL] extra = Extra . forbid [EOL] [EOL] [EOL] class Features ( BaseModel ) : [EOL] vert = Field ( False ) [EOL] [EOL] class Config : [EOL] extra = Extra . forbid [EOL] [EOL] [EOL] class Package ( BaseModel ) : [EOL] [docstring] [EOL] schema_url = Field ( ... , alias = [string] ) [EOL] id = Field ( ... , regex = [string] ) [EOL] name = ... [EOL] version = ... [EOL] description = ... [EOL] homepage = ... [EOL] license = ... [EOL] authors = Field ( ... , min_items = [number] ) [EOL] sources = Field ( ... , min_items = [number] ) [EOL] features = ... [EOL] category = ... [EOL] characters = Field ( ... , min_items = [number] ) [EOL] copyrights = Field ( ... , min_items = [number] ) [EOL] [EOL] class Config : [EOL] extra = Extra . forbid [EOL] schema_extra = { [string] : [string] , } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[prepare_tool.models.Package.Config]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[Font]$ 0 0 0 0 0 0 $typing.Optional[Font]$ 0 0 0 0 0 0 $typing.Optional[Font]$ 0 0 0 0 0 0 $typing.Optional[Font]$ 0 0 0 0 0 0 $typing.Optional[Font]$ 0 0 0 0 0 0 $typing.Optional[Font]$ 0 0 0 0 0 0 $typing.Optional[Font]$ 0 0 0 0 0 0 $typing.Optional[Font]$ 0 0 0 0 0 0 $typing.Optional[Font]$ 0 0 0 0 0 0 0 0 $typing.Generator[typing.Tuple[builtins.str,typing.Optional[Font]],None,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[prepare_tool.models.Package.Config]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pydantic.AnyUrl$ 0 0 0 $FontWeight$ 0 0 0 0 0 0 0 0 $typing.Type[prepare_tool.models.Package.Config]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[prepare_tool.models.Package.Config]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pydantic.AnyUrl$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $pydantic.AnyUrl$ 0 0 0 $License$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[Source]$ 0 0 0 0 0 0 0 0 0 0 $Features$ 0 0 0 $Category$ 0 0 0 $typing.List[Character]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[prepare_tool.models.Package.Config]$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0
from typing import List , Set , Any [EOL] import pathlib [EOL] import prepare_tool [EOL] import builtins [EOL] import typing [EOL] import pystache [EOL] from typing import Set , List [EOL] from fontTools . ttLib import TTFont [EOL] from css_html_js_minify import css_minify [EOL] [EOL] from prepare_tool . core import Core [EOL] from prepare_tool . models import Font [EOL] from prepare_tool . const import NAME_ID , FILE_DIR , WEIGHT_NUMBER [EOL] [EOL] with open ( FILE_DIR . STYLESHEETS_TEMPLATE . joinpath ( [string] ) , [string] , encoding = [string] ) as base_template_read_io : [EOL] BASE_TEMPLATE = pystache . parse ( base_template_read_io . read ( ) ) [EOL] with open ( FILE_DIR . STYLESHEETS_TEMPLATE . joinpath ( [string] ) , [string] , encoding = [string] ) as local_template_read_io : [EOL] LOCAL_TEMPLATE = pystache . parse ( local_template_read_io . read ( ) ) [EOL] [EOL] [EOL] class StyleSheetGenerator ( ) : [EOL] def __init__ ( self , core ) : [EOL] self . __core = core [EOL] [EOL] def generate ( self ) : [EOL] package = self . __core . package [EOL] output_dir = self . __core . directories . webfonts [EOL] [EOL] license_template_path = FILE_DIR . STYLESHEETS_TEMPLATE . joinpath ( f" [string] { package . license } [string] " ) [EOL] if not license_template_path . exists ( ) : [EOL] raise Exception ( f"{ package . license } [string] " ) [EOL] with open ( license_template_path , [string] , encoding = [string] ) as license_template_read_io : [EOL] license_template = pystache . parse ( license_template_read_io . read ( ) ) [EOL] [EOL] generated_style = [string] [EOL] for source in package . sources : [EOL] for weight , font in source . fonts : [EOL] if font is None : [EOL] continue [EOL] generated_style += self . __generateStyleForWeight ( weight = weight , font = font ) [EOL] [EOL] with open ( output_dir . joinpath ( [string] ) , [string] ) as style_io : [EOL] minified = pystache . render ( license_template , { [string] : css_minify ( generated_style ) } ) [EOL] style_io . write ( minified . encode ( [string] ) ) [EOL] [EOL] def __generateStyleForWeight ( self , weight , font ) : [EOL] style = [string] [EOL] package = self . __core . package [EOL] weight_number = getattr ( WEIGHT_NUMBER , weight ) [EOL] local_name_list = self . __getLocalFamilyName ( font ) [EOL] [EOL] style += pystache . render ( LOCAL_TEMPLATE , { [string] : package , [string] : weight_number , [string] : [string] . join ( map ( lambda n : f" [string] { n } [string] " , local_name_list ) ) , } , ) [EOL] [EOL] for unicodes_file in FILE_DIR . UNICODE_TEXT . glob ( [string] ) : [EOL] idx = unicodes_file . stem [EOL] with open ( unicodes_file , [string] ) as fd : [EOL] style += pystache . render ( BASE_TEMPLATE , { [string] : package , [string] : weight_number , [string] : fd . read ( ) . replace ( [string] , [string] ) , [string] : f" [string] { package . version } [string] { weight } [string] { idx }" , } , ) [EOL] return style [EOL] [EOL] def __getLocalFamilyName ( self , font ) : [EOL] family_name_set = set ( ) [EOL] font_path = self . __core . findFontfilePath ( font ) [EOL] [EOL] with TTFont ( file = font_path , lazy = True , fontNumber = font . number ) as ttfont : [EOL] [EOL] def getName ( name_id ) : [EOL] return ttfont [ [string] ] . getName ( nameID = name_id , platformID = [number] , platEncID = [number] , langID = [number] , ) [EOL] [EOL] name_record = getName ( NAME_ID . LEGACY_FAMILY ) [EOL] weight_record = getName ( NAME_ID . LEGACY_SUBFAMILY ) [EOL] if name_record is not None and weight_record is not None : [EOL] family_name_set . add ( f"{ name_record . toUnicode ( ) } [string] { weight_record . toUnicode ( ) }" ) [EOL] family_name_set . add ( f"{ name_record . toUnicode ( ) } [string] { weight_record . toUnicode ( ) }" ) [EOL] [EOL] name_record = getName ( NAME_ID . POSTSCRIPT_NAME ) [EOL] if name_record is not None : [EOL] family_name_set . add ( name_record . toUnicode ( ) ) [EOL] name_record = getName ( NAME_ID . FULL_NAME ) [EOL] if name_record is not None : [EOL] family_name_set . add ( name_record . toUnicode ( ) ) [EOL] [EOL] return list ( family_name_set ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $prepare_tool.core.Core$ 0 0 0 0 0 $prepare_tool.core.Core$ 0 $prepare_tool.core.Core$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $prepare_tool.models.Font$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $prepare_tool.models.Font$ 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 $prepare_tool.models.Font$ 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $prepare_tool.models.Font$ 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $prepare_tool.models.Font$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0
import pathlib [EOL] import prepare_tool [EOL] import builtins [EOL] import pystache [EOL] import gzip [EOL] from tempfile import TemporaryDirectory [EOL] from pathlib import Path [EOL] from shutil import copyfile [EOL] from io import BytesIO [EOL] from tarfile import TarFile [EOL] [EOL] from prepare_tool . core import Core [EOL] from prepare_tool . const import FILE_DIR [EOL] [EOL] [EOL] class ArchiveGenerator ( ) : [EOL] def __init__ ( self , core ) : [EOL] self . __core = core [EOL] [EOL] def generate ( self ) : [EOL] package = self . __core . package [EOL] output_dir = self . __core . directories . archives [EOL] [EOL] with TemporaryDirectory ( ) as tmp_dir_pathstr : [EOL] tmp_dir = Path ( tmp_dir_pathstr ) [EOL] archive_file = output_dir . joinpath ( f" [string] { package . id } [string] " ) [EOL] [EOL] self . __generateLicenseFile ( tmp_dir ) [EOL] self . __copyFontfile ( tmp_dir ) [EOL] self . __archive ( target_path = tmp_dir , output_path = archive_file ) [EOL] [EOL] def __generateLicenseFile ( self , dest_dir ) : [EOL] package = self . __core . package [EOL] [EOL] template_path = FILE_DIR . LICENSE_TEMPLATE . joinpath ( f" [string] { package . license } [string] " ) [EOL] if not template_path . exists ( ) : [EOL] raise Exception ( f"{ package . license } [string] " ) [EOL] [EOL] with open ( template_path , [string] , encoding = [string] ) as read_io : [EOL] license_text = pystache . render ( read_io . read ( ) , package ) [EOL] with open ( dest_dir . joinpath ( [string] ) , [string] , encoding = [string] ) as write_io : [EOL] write_io . write ( license_text ) [EOL] [EOL] def __copyFontfile ( self , dest_dir ) : [EOL] package = self . __core . package [EOL] [EOL] for source in package . sources : [EOL] for weight , font in source . fonts : [EOL] if font is None : [EOL] continue [EOL] font_path = self . __core . findFontfilePath ( font ) [EOL] copyfile ( font_path , dest_dir . joinpath ( font_path . name ) ) [EOL] [EOL] def __archive ( self , target_path , output_path ) : [EOL] with BytesIO ( ) as stream , TarFile . open ( mode = [string] , fileobj = stream ) as archive : [EOL] for file_path in target_path . glob ( [string] ) : [EOL] archive . add ( str ( file_path ) , arcname = file_path . name , recursive = False ) [EOL] [EOL] with open ( output_path , [string] ) as archive_io : [EOL] archive_io . write ( gzip . compress ( stream . getvalue ( ) ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $prepare_tool.core.Core$ 0 0 0 0 0 $prepare_tool.core.Core$ 0 $prepare_tool.core.Core$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 $pathlib.Path$ 0 0 0 0 $None$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $None$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 $None$ 0 0 0 $pathlib.Path$ 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $pathlib.Path$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] from . archive import ArchiveGenerator [EOL] from . stylesheet import StyleSheetGenerator [EOL] from . webfont import WebFontGenerator [EOL] [EOL] __all__ = [ [string] , [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0