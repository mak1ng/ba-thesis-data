from zocalo . appserver import main [EOL] [EOL] if __name__ == [string] : [EOL] main ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Dict , Any [EOL] import typing [EOL] import jwt [EOL] import json [EOL] from datetime import datetime , timedelta [EOL] [EOL] [comment] [EOL] JWT_SECRET = [string] [EOL] JWT_ALGORITHM = [string] [EOL] JWT_EXP_MINUTES = [number] [EOL] [EOL] [EOL] class AuthUtil : [EOL] def checkToken ( self , auth_header ) : [EOL] if auth_header is None or not auth_header . startswith ( [string] ) : [EOL] return ( [number] , json . dumps ( { [string] : [number] , [string] : [string] } ) ) [EOL] [EOL] jwt_token = auth_header . split ( [string] ) [ [number] ] [EOL] if jwt_token : [EOL] try : [EOL] payload = jwt . decode ( jwt_token , JWT_SECRET , algorithms = [ JWT_ALGORITHM ] ) [EOL] except ( jwt . DecodeError , jwt . ExpiredSignatureError ) : [EOL] return ( [number] , json . dumps ( { [string] : [number] , [string] : [string] } ) ) [EOL] return ( [number] , payload ) [EOL] [EOL] def generateToken ( self , username ) : [EOL] print ( datetime . now ( ) ) [EOL] payload = { [string] : username } [EOL] return jwt . encode ( payload , JWT_SECRET , JWT_ALGORITHM ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 $builtins.str$ 0 $builtins.str$ 0 0
	0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] import datetime [EOL] import hashlib , binascii [EOL] from sqlalchemy import create_engine [EOL] from sqlalchemy . orm import sessionmaker [EOL] from zocalo . database . schema import Base , School , Course , Tag , User , UserCourse , Post , Reply , PostTag [EOL] [EOL] [EOL] def hash_password ( pwd ) : [EOL] dk = hashlib . pbkdf2_hmac ( [string] , pwd . encode ( ) , [string] , [number] ) [EOL] password = binascii . hexlify ( dk ) [EOL] return password [EOL] [EOL] [EOL] def create_tmp_data ( base , engine ) : [EOL] base . metadata . bind = engine [EOL] Session = sessionmaker ( bind = engine ) [EOL] session = Session ( ) [EOL] [EOL] [comment] [EOL] s1 = School ( school_name = [string] ) [EOL] [EOL] [comment] [EOL] c1 = Course ( course_name = [string] , school_id = [number] , course_title = [string] , term_id = [number] ) [EOL] c2 = Course ( course_name = [string] , school_id = [number] , course_title = [string] , term_id = [number] ) [EOL] [EOL] [comment] [EOL] tg1 = Tag ( course_id = [number] , name = [string] ) [EOL] tg2 = Tag ( course_id = [number] , name = [string] ) [EOL] tg3 = Tag ( course_id = [number] , name = [string] ) [EOL] tg4 = Tag ( course_id = [number] , name = [string] ) [EOL] tg5 = Tag ( course_id = [number] , name = [string] ) [EOL] [EOL] [comment] [EOL] p1 = hash_password ( [string] ) [EOL] p2 = hash_password ( [string] ) [EOL] p3 = hash_password ( [string] ) [EOL] p4 = hash_password ( [string] ) [EOL] u1 = User ( username = [string] , password = p1 , name = [string] , email = [string] , school_id = [number] ) [EOL] u2 = User ( username = [string] , password = p2 , name = [string] , email = [string] , school_id = [number] ) [EOL] u3 = User ( username = [string] , password = p3 , name = [string] , email = [string] , school_id = [number] ) [EOL] u4 = User ( username = [string] , password = p4 , name = [string] , email = [string] , school_id = [number] ) [EOL] [EOL] [comment] [EOL] uc1 = UserCourse ( username = [string] , course_id = [number] , role_id = [number] ) [EOL] uc2 = UserCourse ( username = [string] , course_id = [number] , role_id = [number] ) [EOL] uc3 = UserCourse ( username = [string] , course_id = [number] , role_id = [number] ) [EOL] uc4 = UserCourse ( username = [string] , course_id = [number] , role_id = [number] ) [EOL] uc5 = UserCourse ( username = [string] , course_id = [number] , role_id = [number] ) [EOL] [EOL] [comment] [EOL] p1 = Post ( header = [string] , create_time = datetime . datetime . now ( ) , last_edit_time = datetime . datetime . now ( ) , description = [string] , up_vote = [number] , down_vote = [number] , post_username = [string] , course_id = [number] , post_type_id = [number] , visibility_type_id = [number] ) [EOL] [EOL] p2 = Post ( header = [string] , description = [string] , up_vote = [number] , down_vote = [number] , post_username = [string] , course_id = [number] , post_type_id = [number] , visibility_type_id = [number] , create_time = datetime . datetime . now ( ) , last_edit_time = datetime . datetime . now ( ) , ) [EOL] [EOL] p3 = Post ( header = [string] , create_time = datetime . datetime . now ( ) , last_edit_time = datetime . datetime . now ( ) , description = [string] , up_vote = [number] , down_vote = [number] , post_username = [string] , course_id = [number] , post_type_id = [number] , visibility_type_id = [number] ) [EOL] [EOL] [comment] [EOL] r1 = Reply ( post_id = [number] , username = [string] , answer = [string] , up_vote = [number] , down_vote = [number] , create_time = datetime . datetime . now ( ) , last_edit_time = datetime . datetime . now ( ) ) [EOL] r2 = Reply ( post_id = [number] , username = [string] , answer = [string] , up_vote = [number] , down_vote = [number] , create_time = datetime . datetime . now ( ) , last_edit_time = datetime . datetime . now ( ) ) [EOL] r3 = Reply ( post_id = [number] , username = [string] , answer = [string] , up_vote = [number] , down_vote = [number] , create_time = datetime . datetime . now ( ) , last_edit_time = datetime . datetime . now ( ) ) [EOL] [EOL] [comment] [EOL] pt1 = PostTag ( post_id = [number] , tag_id = [number] ) [EOL] pt2 = PostTag ( post_id = [number] , tag_id = [number] ) [EOL] pt3 = PostTag ( post_id = [number] , tag_id = [number] ) [EOL] pt4 = PostTag ( post_id = [number] , tag_id = [number] ) [EOL] [EOL] [comment] [EOL] session . add ( s1 ) [EOL] session . add ( c1 ) [EOL] session . add ( c2 ) [EOL] session . add ( tg1 ) [EOL] session . add ( tg2 ) [EOL] session . add ( tg3 ) [EOL] session . add ( tg4 ) [EOL] session . add ( tg5 ) [EOL] session . add ( u1 ) [EOL] session . add ( u2 ) [EOL] session . add ( u3 ) [EOL] session . add ( u4 ) [EOL] session . add ( uc1 ) [EOL] session . add ( uc2 ) [EOL] session . add ( uc3 ) [EOL] session . add ( uc4 ) [EOL] session . add ( uc5 ) [EOL] session . add ( p1 ) [EOL] session . add ( p2 ) [EOL] session . add ( p3 ) [EOL] session . add ( r1 ) [EOL] session . add ( r2 ) [EOL] session . add ( r3 ) [EOL] session . add ( pt1 ) [EOL] session . add ( pt2 ) [EOL] session . add ( pt3 ) [EOL] session . add ( pt4 ) [EOL] [EOL] session . commit ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] engine = create_engine ( [string] ) [EOL] create_tmp_data ( Base , engine ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Anytyping.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] from sqlalchemy import create_engine [EOL] from sqlalchemy . orm import sessionmaker [EOL] from zocalo . database . schema import Base , Term , EmailSetting , Role , PostType , VisibilityType [EOL] [EOL] [EOL] def create_schema ( base , engine ) : [EOL] [docstring] [EOL] base . metadata . create_all ( engine ) [EOL] return engine [EOL] [EOL] def create_lookup_data ( base , engine ) : [EOL] [docstring] [EOL] base . metadata . bind = engine [EOL] Session = sessionmaker ( bind = engine ) [EOL] session = Session ( ) [EOL] [EOL] [comment] [EOL] t1 = Term ( name = [string] ) [EOL] t2 = Term ( name = [string] ) [EOL] t3 = Term ( name = [string] ) [EOL] t4 = Term ( name = [string] ) [EOL] session . add ( t1 ) [EOL] session . add ( t2 ) [EOL] session . add ( t3 ) [EOL] session . add ( t4 ) [EOL] [EOL] [comment] [EOL] es1 = EmailSetting ( type = [string] ) [EOL] es2 = EmailSetting ( type = [string] ) [EOL] es3 = EmailSetting ( type = [string] ) [EOL] session . add ( es1 ) [EOL] session . add ( es2 ) [EOL] session . add ( es3 ) [EOL] [EOL] [comment] [EOL] r1 = Role ( type = [string] ) [EOL] r2 = Role ( type = [string] ) [EOL] r3 = Role ( type = [string] ) [EOL] session . add ( r1 ) [EOL] session . add ( r2 ) [EOL] session . add ( r3 ) [EOL] [EOL] [comment] [EOL] pt1 = PostType ( type = [string] ) [EOL] pt2 = PostType ( type = [string] ) [EOL] pt3 = PostType ( type = [string] ) [EOL] session . add ( pt1 ) [EOL] session . add ( pt2 ) [EOL] session . add ( pt3 ) [EOL] [EOL] [comment] [EOL] vt1 = VisibilityType ( type = [string] ) [EOL] vt2 = VisibilityType ( type = [string] ) [EOL] session . add ( vt1 ) [EOL] session . add ( vt2 ) [EOL] [EOL] session . commit ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] engine = create_engine ( [string] ) [EOL] create_schema ( Base , engine ) [EOL] create_lookup_data ( Base , engine ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0
	0
from typing import Dict , Any , List [EOL] import typing [EOL] from sqlalchemy import exists [EOL] from sqlalchemy import create_engine , and_ [EOL] from sqlalchemy . orm import sessionmaker [EOL] from sqlalchemy . orm . exc import NoResultFound [EOL] from sqlalchemy . orm . exc import MultipleResultsFound [EOL] from zocalo . database . schema import * [EOL] [EOL] [EOL] engine = create_engine ( [string] ) [EOL] Session = sessionmaker ( bind = engine ) [EOL] session = Session ( ) [EOL] [EOL] [EOL] class CourseService : [EOL] def check_register ( self , username , cid ) : [EOL] return session . query ( exists ( ) . where ( and_ ( UserCourse . username == username , UserCourse . course_id == cid ) ) ) . scalar ( ) [EOL] [EOL] def create_tag ( self , cid , data ) : [EOL] if not self . check_register ( data [ [string] ] , cid ) : [EOL] return { [string] : [number] , [string] : [string] } [EOL] [EOL] [comment] [EOL] try : [EOL] count = session . query ( exists ( ) . where ( and_ ( Tag . course_id == cid , Tag . name == data [ [string] ] ) ) ) . scalar ( ) [EOL] except KeyError : [EOL] return { [string] : [number] , [string] : [string] } [EOL] [EOL] if count != [number] : [EOL] return { [string] : [number] , [string] : [string] } [EOL] [EOL] try : [EOL] new_tag = Tag ( name = data [ [string] ] , course_id = cid ) [EOL] except KeyError : [EOL] return { [string] : [number] , [string] : [string] } [EOL] [EOL] session . add ( new_tag ) [EOL] session . commit ( ) [EOL] return { [string] : [number] , [string] : [string] } [EOL] [EOL] def edit_tag ( self , data ) : [EOL] pass [EOL] [EOL] def delete_tag ( self , cid , tag_name , data ) : [EOL] if not self . check_register ( data [ [string] ] , cid ) : [EOL] return { [string] : [number] , [string] : [string] } [EOL] [EOL] try : [EOL] tag = session . query ( Tag ) . filter_by ( course_id = cid ) . filter_by ( name = tag_name ) . one ( ) [EOL] except NoResultFound : [EOL] return { [string] : [number] , [string] : [string] } [EOL] except MultipleResultsFound : [EOL] print ( [string] ) [EOL] [EOL] session . delete ( tag ) [EOL] session . commit ( ) [EOL] return { [string] : [number] , [string] : [string] } [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def createCourse ( self , data ) : [EOL] try : [EOL] [comment] [EOL] if session . query ( exists ( ) . where ( and_ ( Course . school_id == data [ [string] ] , Course . course_name == data [ [string] ] ) ) ) . scalar ( ) : [EOL] return { [string] : [number] , [string] : [string] } [EOL] [comment] [EOL] if session . query ( exists ( ) . where ( and_ ( Course . school_id == data [ [string] ] , Course . course_title == data [ [string] ] ) ) ) . scalar ( ) : [EOL] return { [string] : [number] , [string] : [string] } [EOL] [EOL] new_course = Course ( course_name = data [ [string] ] , school_id = data [ [string] ] , course_title = data [ [string] ] ) [EOL] except KeyError : [EOL] return { [string] : [number] , [string] : [string] } [EOL] [EOL] session . add ( new_course ) [EOL] session . commit ( ) [EOL] return { [string] : [number] , [string] : [string] } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def getCourse ( self , data ) : [EOL] [comment] [EOL] try : [EOL] user = session . query ( User ) . filter_by ( user_name = data [ [string] ] ) . one ( ) [EOL] sch_id = user . school_id [EOL] except NoResultFound : [EOL] return { [string] : [number] , [string] : [string] , [string] : [ ] } [EOL] except MultipleResultsFound : [EOL] print ( [string] ) [EOL] [EOL] [comment] [EOL] try : [EOL] courses = session . query ( Course ) . filter_by ( school_id = sch_id ) . one ( ) [EOL] except NoResultFound : [EOL] return { [string] : [number] , [string] : [string] , [string] : [ ] } [EOL] except MultipleResultsFound : [EOL] print ( [string] ) [EOL] [EOL] course_list = [ ] [EOL] for c in courses : [EOL] d = { } [EOL] d [ [string] ] = c . id [EOL] d [ [string] ] = c . course_name [EOL] course_list . append ( d ) [EOL] [EOL] return { [string] : [number] , [string] : [string] , [string] : course_list } [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] def enrollStudent ( self , data ) : [EOL] [comment] [EOL] new_enrollment = UserCourse ( user_name = data [ [string] ] , course_id = data [ [string] ] , role_id = [number] ) [EOL] session . add ( new_enrollment ) [EOL] session . commit ( ) [EOL] return { [string] : [number] , [string] : [string] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import Dict , Any , List [EOL] import typing [EOL] import zocalo [EOL] import sys [EOL] import os [EOL] import hashlib , binascii [EOL] from sqlalchemy import create_engine , exists [EOL] from sqlalchemy . orm import sessionmaker [EOL] from sqlalchemy . orm . exc import NoResultFound [EOL] from sqlalchemy . orm . exc import MultipleResultsFound [EOL] from zocalo . database . schema import * [EOL] from zocalo . util . auth_util import AuthUtil [EOL] [EOL] engine = create_engine ( [string] ) [EOL] Session = sessionmaker ( bind = engine ) [EOL] session = Session ( ) [EOL] [EOL] [EOL] class UserService : [EOL] def hash_password ( self , pwd ) : [EOL] dk = hashlib . pbkdf2_hmac ( [string] , pwd . encode ( ) , [string] , [number] ) [EOL] password = binascii . hexlify ( dk ) [EOL] return password [EOL] [EOL] def login ( self , data ) : [EOL] try : [EOL] user = session . query ( User ) . filter_by ( username = data [ [string] ] ) . one ( ) [EOL] except KeyError : [EOL] return { [string] : [number] , [string] : [string] , [string] : [ ] } [EOL] except NoResultFound : [EOL] return { [string] : [number] , [string] : [string] , [string] : [ ] } [EOL] except MultipleResultsFound : [EOL] pass [EOL] [EOL] try : [EOL] if user . password != self . hash_password ( data [ [string] ] ) : [EOL] return { [string] : [number] , [string] : [string] , [string] : [ ] } [EOL] except KeyError : [EOL] return { [string] : [number] , [string] : [string] , [string] : [ ] } [EOL] [EOL] [comment] [EOL] course_list = [ ] [EOL] for uc in user . courses : [EOL] c = uc . u_c [EOL] d = { } [EOL] d [ [string] ] = c . id [EOL] d [ [string] ] = c . course_name [EOL] d [ [string] ] = c . course_title [EOL] course_list . append ( d ) [EOL] [EOL] [comment] [EOL] a_u = AuthUtil ( ) [EOL] jwt_token = a_u . generateToken ( user . username ) [EOL] [EOL] return { [string] : [number] , [string] : [string] , [string] : course_list , [string] : jwt_token . decode ( [string] ) } [EOL] [EOL] def register ( self , data ) : [EOL] [comment] [EOL] try : [EOL] if session . query ( exists ( ) . where ( User . username == data [ [string] ] ) ) . scalar ( ) : [EOL] return { [string] : [number] , [string] : [string] } [EOL] if session . query ( exists ( ) . where ( User . email == data [ [string] ] ) ) . scalar ( ) : [EOL] return { [string] : [number] , [string] : [string] } [EOL] pwd = self . hash_password ( data [ [string] ] ) [EOL] new_user = User ( username = data [ [string] ] , password = pwd , name = data [ [string] ] , email = data [ [string] ] ) [EOL] except KeyError : [EOL] return { [string] : [number] , [string] : [string] } [EOL] [EOL] session . add ( new_user ) [EOL] session . commit ( ) [EOL] return { [string] : [number] , [string] : [string] } [EOL] [EOL] def change_password ( self , data ) : [EOL] try : [EOL] user = session . query ( User ) . filter_by ( username = data [ [string] ] ) . one ( ) [EOL] except KeyError : [EOL] return { [string] : [number] , [string] : [string] } [EOL] except NoResultFound : [EOL] return { [string] : [number] , [string] : [string] } [EOL] except MultipleResultsFound : [EOL] pass [EOL] [EOL] try : [EOL] user . password = self . hash_password ( data [ [string] ] ) [EOL] except KeyError : [EOL] return { [string] : [number] , [string] : [string] } [EOL] [EOL] session . commit ( ) [EOL] return { [string] : [number] , [string] : [string] } [EOL] [EOL] def forget_password ( self ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 $builtins.bytes$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 $zocalo.util.auth_util.AuthUtil$ 0 0 0 0 0 $typing.Any$ 0 $zocalo.util.auth_util.AuthUtil$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any , List [EOL] import typing [EOL] import zocalo [EOL] from zocalo . service . user_service import UserService [EOL] from zocalo . service . post_service import PostService [EOL] from zocalo . service . course_service import CourseService [EOL] import pandas as pd [EOL] import datetime [EOL] import json [EOL] [EOL] class IndexService : [EOL] def __init__ ( self ) : [EOL] self . service = PostService ( ) [EOL] self . dataFrame = None [EOL] self . lastUpdatedTime = None [EOL] [EOL] [comment] [EOL] def runTimeIndex ( self ) : [EOL] print ( [string] ) [EOL] data = self . service . get_all_data ( ) [EOL] self . dataFrame = pd . DataFrame ( data ) [EOL] self . lastUpdatedTime = datetime . datetime . now ( ) [EOL] return self . dataFrame [EOL] [EOL] [comment] [EOL] def updateIndex ( self ) : [EOL] print ( [string] ) [EOL] data = self . service . get_all_data ( self . lastUpdatedTime ) [EOL] df = pd . DataFrame ( data ) [EOL] self . dataFrame . append ( df ) [EOL] [EOL] def createIndex ( self ) : [EOL] return self . runTimeIndex ( ) [EOL] [EOL] [comment] [EOL] def searchIndexedData ( self , query ) : [EOL] documents = list ( ) [EOL] for ( idx , row ) in self . dataFrame . iterrows ( ) : [EOL] doc = dict ( ) [EOL] if self . stringSearch ( row . loc [ [string] ] , query ) or self . stringSearch ( row . loc [ [string] ] , query ) : [EOL] doc [ [string] ] = row . loc [ [string] ] [EOL] doc [ [string] ] = row . loc [ [string] ] [EOL] doc [ [string] ] = row . loc [ [string] ] [EOL] documents . append ( doc ) [EOL] return documents [EOL] [EOL] [comment] [EOL] def convertDftoJson ( self , data ) : [EOL] print ( [string] ) [EOL] return json . dumps ( data ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] def stringSearch ( self , text , pattern ) : [EOL] la = self . computePatternList ( pattern ) [EOL] i , j = [number] , [number] [EOL] while i < len ( text ) and j < len ( pattern ) : [EOL] if text [ i ] == pattern [ j ] : [EOL] i += [number] [EOL] j += [number] [EOL] else : [EOL] if j != [number] : [EOL] j = la [ j - [number] ] [EOL] else : [EOL] i += [number] [EOL] if j == len ( pattern ) : [EOL] return True [EOL] return False [EOL] [EOL] [comment] [EOL] def computePatternList ( self , pattern ) : [EOL] index = [number] [EOL] lookupArray = [ [number] ] * len ( pattern ) [EOL] i = [number] [EOL] while i < len ( pattern ) : [EOL] if pattern [ i ] == pattern [ index ] : [EOL] lookupArray [ i ] = index + [number] [EOL] index += [number] [EOL] i += [number] [EOL] else : [EOL] if index != [number] : [EOL] index = lookupArray [ index - [number] ] [EOL] else : [EOL] lookupArray [ i ] = [number] [EOL] i += [number] [EOL] return lookupArray	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $zocalo.service.post_service.PostService$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $typing.List[builtins.int]$ 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 $typing.List[builtins.int]$ 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.List[builtins.int]$
from typing import Dict , Any , List [EOL] import typing [EOL] import datetime [EOL] import sys [EOL] import os [EOL] import datetime [EOL] from sqlalchemy import create_engine , and_ , exists [EOL] from sqlalchemy . orm import sessionmaker [EOL] from sqlalchemy . orm . exc import NoResultFound [EOL] from sqlalchemy . orm . exc import MultipleResultsFound [EOL] from zocalo . database . schema import * [EOL] [EOL] engine = create_engine ( [string] ) [EOL] Session = sessionmaker ( bind = engine ) [EOL] session = Session ( ) [EOL] [EOL] [EOL] class PostService : [EOL] def check_register ( self , username , cid ) : [EOL] return session . query ( exists ( ) . where ( and_ ( UserCourse . username == username , UserCourse . course_id == cid ) ) ) . scalar ( ) [EOL] [EOL] def get_all_data ( self , start = None ) : [EOL] end = datetime . datetime . now ( ) [EOL] posts = session . query ( Post ) . all ( ) [EOL] data = [ ] [EOL] for p in posts : [EOL] post = { } [EOL] post [ [string] ] = [ ] [EOL] for r in p . replies : [EOL] if start is None or r . last_edit_time > start and r . last_edit_time < end : [EOL] reply = { } [EOL] reply [ [string] ] = r . id [EOL] reply [ [string] ] = r . answer [EOL] reply [ [string] ] = r . up_vote [EOL] reply [ [string] ] = r . down_vote [EOL] reply [ [string] ] = str ( r . create_time ) [EOL] reply [ [string] ] = str ( r . last_edit_time ) [EOL] reply [ [string] ] = r . username [EOL] post [ [string] ] . append ( reply ) [EOL] [EOL] if start is not None and ( post [ [string] ] == [ ] and p . last_edit_time < start ) : [EOL] continue [EOL] [EOL] post [ [string] ] = p . id [EOL] post [ [string] ] = p . header [EOL] post [ [string] ] = p . description [EOL] post [ [string] ] = p . up_vote [EOL] post [ [string] ] = p . down_vote [EOL] post [ [string] ] = str ( p . create_time ) [EOL] post [ [string] ] = str ( p . last_edit_time ) [EOL] post [ [string] ] = p . post_username [EOL] post [ [string] ] = p . visibility_type . type [EOL] post [ [string] ] = p . post_type . type [EOL] post [ [string] ] = [ ] [EOL] for tg in p . tags : [EOL] post [ [string] ] . append ( tg . p_t . name ) [EOL] post [ [string] ] = p . course . id [EOL] post [ [string] ] = p . course . course_name [EOL] post [ [string] ] = p . course . course_title [EOL] data . append ( post ) [EOL] return data [EOL] [EOL] def get_questions ( self , data ) : [EOL] try : [EOL] course = session . query ( Course ) . filter_by ( id = data [ [string] ] ) . one ( ) [EOL] except NoResultFound : [EOL] print ( [string] ) [EOL] return { [string] : [number] , [string] : [string] , [string] : [ ] } [EOL] except MultipleResultsFound : [EOL] print ( [string] ) [EOL] [EOL] if not self . check_register ( data [ [string] ] , data [ [string] ] ) : [EOL] return { [string] : [number] , [string] : [string] , [string] : [ ] } [EOL] [EOL] post_list = [ ] [EOL] for p in course . posts : [EOL] if p . visibility_type . type == [string] or p . visibility_type . type == [string] and data [ [string] ] == p . post_username : [EOL] d = { } [EOL] d [ [string] ] = p . id [EOL] d [ [string] ] = p . header [EOL] d [ [string] ] = p . description [EOL] d [ [string] ] = [ ] [EOL] for tg in p . tags : [EOL] d [ [string] ] . append ( tg . p_t . name ) [EOL] d [ [string] ] = p . up_vote [EOL] d [ [string] ] = str ( p . create_time ) [EOL] d [ [string] ] = p . post_username [EOL] d [ [string] ] = p . post_type . type [EOL] d [ [string] ] = p . visibility_type . type [EOL] post_list . append ( d ) [EOL] [EOL] return { [string] : [number] , [string] : [string] , [string] : post_list } [EOL] [EOL] def get_post ( self , pid , data ) : [EOL] try : [EOL] post = session . query ( Post ) . filter_by ( id = pid ) . one ( ) [EOL] except NoResultFound : [EOL] return { [string] : [number] , [string] : [string] , [string] : [ ] } [EOL] except MultipleResultsFound : [EOL] print ( [string] ) [EOL] [EOL] if not self . check_register ( data [ [string] ] , data [ [string] ] ) : [EOL] return { [string] : [number] , [string] : [string] , [string] : [ ] } [EOL] [EOL] try : [EOL] user_post = session . query ( UserPost ) . filter_by ( username = data [ [string] ] ) . filter_by ( post_id = pid ) . one ( ) [EOL] user_post . viewed = True [EOL] except NoResultFound : [EOL] user_post = UserPost ( post_id = pid , username = data [ [string] ] , viewed = True , vote = [number] ) [EOL] except MultipleResultsFound : [EOL] print ( [string] ) [EOL] [EOL] post . view_count += [number] [EOL] session . add ( post ) [EOL] session . add ( user_post ) [EOL] session . commit ( ) [EOL] [EOL] p = { } [EOL] p [ [string] ] = post . id [EOL] p [ [string] ] = post . header [EOL] p [ [string] ] = post . description [EOL] p [ [string] ] = post . post_type . type [EOL] p [ [string] ] = post . visibility_type . type [EOL] p [ [string] ] = str ( post . last_edit_time ) [EOL] p [ [string] ] = user_post . vote [EOL] p [ [string] ] = post . up_vote [EOL] p [ [string] ] = post . post_username [EOL] p [ [string] ] = [ ] [EOL] for tg in post . tags : [EOL] p [ [string] ] . append ( tg . p_t . name ) [EOL] p [ [string] ] = [ ] [EOL] for r in post . replies : [EOL] try : [EOL] user_reply = session . query ( UserReply ) . filter_by ( username = data [ [string] ] ) . filter_by ( reply_id = r . id ) . one ( ) [EOL] except NoResultFound : [EOL] user_reply = UserReply ( reply_id = r . id , username = data [ [string] ] ) [EOL] except MultipleResultsFound : [EOL] print ( [string] ) [EOL] session . add ( user_reply ) [EOL] session . commit ( ) [EOL] rd = { } [EOL] rd [ [string] ] = r . id [EOL] rd [ [string] ] = r . username [EOL] rd [ [string] ] = str ( r . last_edit_time ) [EOL] rd [ [string] ] = r . up_vote [EOL] rd [ [string] ] = user_reply . vote [EOL] rd [ [string] ] = r . answer [EOL] p [ [string] ] . append ( rd ) [EOL] [EOL] return { [string] : [number] , [string] : [string] , [string] : p } [EOL] [EOL] def delete_post ( self , p_id , data ) : [EOL] try : [EOL] post = session . query ( Post ) . filter_by ( id = p_id ) . one ( ) [EOL] except NoResultFound : [EOL] return { [string] : [number] , [string] : [string] } [EOL] except MultipleResultsFound : [EOL] print ( [string] ) [EOL] [EOL] if not self . check_register ( data [ [string] ] , post . course_id ) : [EOL] return { [string] : [number] , [string] : [string] } [EOL] [EOL] if post . post_username != data [ [string] ] : [EOL] return { [string] : [number] , [string] : [string] } [EOL] [EOL] session . delete ( post ) [EOL] session . commit ( ) [EOL] return { [string] : [number] , [string] : [string] } [EOL] [EOL] def delete_reply ( self , r_id , data ) : [EOL] try : [EOL] reply = session . query ( Reply ) . filter_by ( id = r_id ) . one ( ) [EOL] except NoResultFound : [EOL] return { [string] : [number] , [string] : [string] } [EOL] except MultipleResultsFound : [EOL] print ( [string] ) [EOL] [EOL] if not self . check_register ( data [ [string] ] , reply . post . course_id ) : [EOL] return { [string] : [number] , [string] : [string] } [EOL] [EOL] if reply . username != data [ [string] ] : [EOL] return { [string] : [number] , [string] : [string] } [EOL] [EOL] session . delete ( reply ) [EOL] session . commit ( ) [EOL] return { [string] : [number] , [string] : [string] } [EOL] [EOL] def edit_post ( self , pid , data ) : [EOL] try : [EOL] post = session . query ( Post ) . filter_by ( id = pid ) . one ( ) [EOL] except NoResultFound : [EOL] return { [string] : [number] , [string] : [string] } [EOL] except MultipleResultsFound : [EOL] print ( [string] ) [EOL] [EOL] if not self . check_register ( data [ [string] ] , post . course_id ) : [EOL] return { [string] : [number] , [string] : [string] } [EOL] [EOL] if post . post_username != data [ [string] ] : [EOL] return { [string] : [number] , [string] : [string] } [EOL] [EOL] try : [EOL] vt = session . query ( VisibilityType ) . filter_by ( type = data [ [string] ] ) . one ( ) [EOL] except KeyError : [EOL] return { [string] : [number] , [string] : [string] } [EOL] except NoResultFound : [EOL] return { [string] : [number] , [string] : [string] } [EOL] except MultipleResultsFound : [EOL] print ( [string] ) [EOL] [EOL] try : [EOL] post . header = data [ [string] ] [EOL] post . description = data [ [string] ] [EOL] post . visibility_type_id = vt . id [EOL] post . last_edit_time = datetime . datetime . now ( ) [EOL] except KeyError : [EOL] return { [string] : [number] , [string] : [string] } [EOL] [EOL] session . add ( post ) [EOL] session . commit ( ) [EOL] return { [string] : [number] , [string] : [string] } [EOL] [EOL] def edit_reply ( self , rid , data ) : [EOL] try : [EOL] reply = session . query ( Reply ) . filter_by ( id = rid ) . one ( ) [EOL] except NoResultFound : [EOL] return { [string] : [number] , [string] : [string] } [EOL] except MultipleResultsFound : [EOL] print ( [string] ) [EOL] [EOL] if not self . check_register ( data [ [string] ] , reply . post . course_id ) : [EOL] return { [string] : [number] , [string] : [string] } [EOL] [EOL] if reply . username != data [ [string] ] : [EOL] return { [string] : [number] , [string] : [string] } [EOL] [EOL] try : [EOL] reply . answer = data [ [string] ] [EOL] reply . last_edit_time = datetime . datetime . now ( ) [EOL] except KeyError : [EOL] return { [string] : [number] , [string] : [string] } [EOL] [EOL] session . add ( reply ) [EOL] session . commit ( ) [EOL] return { [string] : [number] , [string] : [string] } [EOL] [EOL] def create_post ( self , data ) : [EOL] if not self . check_register ( data [ [string] ] , data [ [string] ] ) : [EOL] return { [string] : [number] , [string] : [string] } [EOL] [EOL] try : [EOL] pt = session . query ( PostType ) . filter_by ( type = data [ [string] ] ) . one ( ) [EOL] except KeyError : [EOL] return { [string] : [number] , [string] : [string] } [EOL] except NoResultFound : [EOL] return { [string] : [number] , [string] : [string] } [EOL] except MultipleResultsFound : [EOL] print ( [string] ) [EOL] [EOL] try : [EOL] vt = session . query ( VisibilityType ) . filter_by ( type = data [ [string] ] ) . one ( ) [EOL] except KeyError : [EOL] return { [string] : [number] , [string] : [string] } [EOL] except NoResultFound : [EOL] return { [string] : [number] , [string] : [string] } [EOL] except MultipleResultsFound : [EOL] print ( [string] ) [EOL] [EOL] pt_id = pt . id [EOL] vt_id = vt . id [EOL] try : [EOL] new_post = Post ( header = data [ [string] ] , description = data [ [string] ] , post_username = data [ [string] ] , course_id = data [ [string] ] , post_type_id = pt_id , visibility_type_id = vt_id , last_edit_time = datetime . datetime . now ( ) , create_time = datetime . datetime . now ( ) ) [EOL] except KeyError : [EOL] return { [string] : [number] , [string] : [string] } [EOL] [EOL] session . add ( new_post ) [EOL] session . commit ( ) [EOL] return { [string] : [number] , [string] : [string] } [EOL] [EOL] def create_reply ( self , pid , data ) : [EOL] try : [EOL] post = session . query ( Post ) . filter_by ( id = pid ) . one ( ) [EOL] except NoResultFound : [EOL] return { [string] : [number] , [string] : [string] , [string] : [ ] } [EOL] except MultipleResultsFound : [EOL] print ( [string] ) [EOL] [EOL] if not self . check_register ( data [ [string] ] , post . course_id ) : [EOL] return { [string] : [number] , [string] : [string] } [EOL] [EOL] try : [EOL] new_reply = Reply ( post_id = pid , answer = data [ [string] ] , username = data [ [string] ] , create_time = datetime . datetime . now ( ) , last_edit_time = datetime . datetime . now ( ) ) [EOL] except KeyError : [EOL] return { [string] : [number] , [string] : [string] } [EOL] [EOL] session . add ( new_reply ) [EOL] session . commit ( ) [EOL] return { [string] : [number] , [string] : [string] } [EOL] [EOL] def update_post_vote ( self , pid , data ) : [EOL] try : [EOL] post = session . query ( Post ) . filter_by ( id = pid ) . one ( ) [EOL] except NoResultFound : [EOL] return { [string] : [number] , [string] : [string] } [EOL] except MultipleResultsFound : [EOL] print ( [string] ) [EOL] [EOL] try : [EOL] user_post = session . query ( UserPost ) . filter_by ( username = data [ [string] ] ) . filter_by ( post_id = pid ) . one ( ) [EOL] user_post . viewed = True [EOL] except NoResultFound : [EOL] user_post = UserPost ( post_id = pid , username = data [ [string] ] , viewed = True , vote = [number] ) [EOL] except MultipleResultsFound : [EOL] print ( [string] ) [EOL] [EOL] [comment] [EOL] try : [EOL] if data [ [string] ] == [string] : [EOL] if user_post . vote == [number] : [EOL] post . up_vote += [number] [EOL] user_post . vote = [number] [EOL] elif user_post . vote == [number] : [EOL] return { [string] : [number] , [string] : [string] } [EOL] else : [EOL] post . up_vote += [number] [EOL] post . down_vote -= [number] [EOL] user_post . vote = [number] [EOL] elif data [ [string] ] == [string] : [EOL] if user_post . vote == [number] : [EOL] post . down_vote += [number] [EOL] user_post . vote = - [number] [EOL] elif user_post . vote == - [number] : [EOL] return { [string] : [number] , [string] : [string] } [EOL] else : [EOL] post . up_vote -= [number] [EOL] post . down_vote += [number] [EOL] user_post . vote = - [number] [EOL] else : [EOL] return { [string] : [number] , [string] : [string] } [EOL] except : [EOL] return { [string] : [number] , [string] : [string] } [EOL] [EOL] session . add ( post ) [EOL] session . add ( user_post ) [EOL] session . commit ( ) [EOL] return { [string] : [number] , [string] : [string] } [EOL] [EOL] def update_reply_vote ( self , rid , data ) : [EOL] try : [EOL] reply = session . query ( Reply ) . filter_by ( id = rid ) . one ( ) [EOL] except NoResultFound : [EOL] return { [string] : [number] , [string] : [string] } [EOL] except MultipleResultsFound : [EOL] print ( [string] ) [EOL] [EOL] try : [EOL] user_reply = session . query ( UserReply ) . filter_by ( username = data [ [string] ] ) . filter_by ( reply_id = rid ) . one ( ) [EOL] except NoResultFound : [EOL] user_reply = UserReply ( reply_id = rid , username = data [ [string] ] , vote = [number] ) [EOL] except MultipleResultsFound : [EOL] print ( [string] ) [EOL] [EOL] [comment] [EOL] try : [EOL] if data [ [string] ] == [string] : [EOL] if user_reply . vote == [number] : [EOL] reply . up_vote += [number] [EOL] user_reply . vote = [number] [EOL] elif user_reply . vote == [number] : [EOL] return { [string] : [number] , [string] : [string] } [EOL] else : [EOL] reply . down_vote -= [number] [EOL] reply . up_vote += [number] [EOL] user_reply . vote = [number] [EOL] elif data [ [string] ] == [string] : [EOL] if user_reply . vote == [number] : [EOL] reply . down_vote += [number] [EOL] user_reply . vote = - [number] [EOL] elif user_reply . vote == - [number] : [EOL] return { [string] : [number] , [string] : [string] } [EOL] else : [EOL] reply . down_vote += [number] [EOL] reply . up_vote -= [number] [EOL] user_reply . vote = - [number] [EOL] else : [EOL] return { [string] : [number] , [string] : [string] } [EOL] except : [EOL] return { [string] : [number] , [string] : [string] } [EOL] [EOL] session . add ( reply ) [EOL] session . add ( user_reply ) [EOL] session . commit ( ) [EOL] return { [string] : [number] , [string] : [string] } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $datetime.datetime$ 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0