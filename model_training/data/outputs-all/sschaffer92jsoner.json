[comment] [EOL] [comment] [EOL] [EOL] from typing import List [EOL] import typing [EOL] [docstring] [EOL] [EOL] from setuptools import find_packages [EOL] from setuptools import setup [EOL] [EOL] with open ( [string] ) as readme_file : [EOL] readme = readme_file . read ( ) [EOL] [EOL] with open ( [string] ) as history_file : [EOL] history = history_file . read ( ) [EOL] [EOL] requirements = [ [string] ] [EOL] [EOL] setup_requirements = [ [string] , ] [EOL] [EOL] test_requirements = [ [string] , ] [EOL] [EOL] setup ( author = [string] , classifiers = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , description = [string] [string] , long_description_content_type = [string] , install_requires = requirements , license = [string] , long_description = readme + [string] + history , include_package_data = True , keywords = [string] , name = [string] , packages = find_packages ( include = [ [string] ] ) , setup_requires = setup_requirements , test_suite = [string] , tests_require = test_requirements , url = [string] , version = [string] , zip_safe = False , python_requires = [string] , project_urls = { [string] : [string] , [string] : [string] , [string] : [string] , } , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Callable , Any [EOL] import typing [EOL] import builtins [EOL] import jsoner [EOL] import pydoc [EOL] import typing as T [EOL] from collections import UserDict [EOL] from typing import Callable [EOL] [EOL] [EOL] class Registry ( UserDict ) : [EOL] [docstring] [EOL] [EOL] @ property def registry ( self ) : [EOL] [docstring] [EOL] return self . data [EOL] [EOL] def add ( self , key , value ) : [EOL] [docstring] [EOL] if key in self . data : [EOL] msg = [string] . format ( key ) [EOL] raise KeyError ( msg ) [EOL] [EOL] self . data [ key ] = value [EOL] [EOL] def register ( self , key ) : [EOL] [docstring] [EOL] [EOL] def inner ( func ) : [EOL] self . add ( key , func ) [EOL] return inner [EOL] [EOL] return inner [EOL] [EOL] def __contains__ ( self , item ) : [EOL] in_regestry = super ( ) . __contains__ ( item ) [EOL] if not in_regestry : [EOL] try : [EOL] self . __getitem__ ( item ) [EOL] in_regestry = True [EOL] except KeyError : [EOL] pass [EOL] return in_regestry [EOL] [EOL] [EOL] class SubclassRegistry ( Registry ) : [EOL] [docstring] [EOL] [EOL] def __getitem__ ( self , key ) : [EOL] [docstring] [EOL] msg = [string] . format ( key ) [EOL] [EOL] value = self . data . get ( key ) [EOL] [EOL] if value is not None : [EOL] return value [EOL] [EOL] if isinstance ( key , str ) : [EOL] try : [EOL] obj_type = import_object ( key ) [EOL] except ImportError : [EOL] raise KeyError ( msg ) [EOL] [EOL] [comment] [EOL] elif isinstance ( key , type ) : [EOL] obj_type = key [EOL] else : [EOL] obj_type = key . __class__ [EOL] [EOL] try : [EOL] return self . data [ obj_type ] [EOL] except KeyError : [EOL] pass [EOL] [EOL] try : [EOL] mro = obj_type . mro ( ) [EOL] except AttributeError : [EOL] raise KeyError ( msg ) [EOL] [EOL] [comment] [EOL] for cls in mro : [EOL] for registered_cls , value in self . data . items ( ) : [EOL] if isinstance ( registered_cls , str ) : [EOL] try : [EOL] registered_cls = import_object ( registered_cls ) [EOL] except ImportError : [EOL] continue [EOL] if cls is registered_cls : [EOL] return value [EOL] else : [EOL] raise KeyError ( msg ) [EOL] [EOL] [EOL] def import_object ( path ) : [EOL] [docstring] [EOL] t = pydoc . locate ( path ) [EOL] if t is None : [EOL] msg = [string] . format ( path ) [EOL] raise ImportError ( msg ) [EOL] return t [EOL] [EOL] [EOL] encoders = SubclassRegistry ( ) [EOL] [docstring] [EOL] [EOL] decoders = SubclassRegistry ( ) [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 $typing.Callable$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Tuple [EOL] import typing [EOL] [docstring] [EOL] [EOL] __author__ = [string] [EOL] __version__ = [string] [EOL] [EOL] [EOL] from . registry import decoders [EOL] from . registry import encoders [EOL] from . serialization import dump [EOL] from . serialization import dumps [EOL] from . serialization import load [EOL] from . serialization import loads [EOL] [EOL] __all__ = ( [string] , [string] , [string] , [string] , [string] , [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] class JsonerException ( Exception ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [EOL] class JsonEncodingError ( JsonerException ) : [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Union , Optional , Dict , Any [EOL] import typing [EOL] import functools [EOL] import builtins [EOL] import inspect [EOL] import abc [EOL] import json [EOL] import typing as T [EOL] from functools import partial [EOL] from inspect import signature [EOL] [EOL] from . registry import decoders [EOL] from . registry import encoders [EOL] from . registry import import_object [EOL] [EOL] [EOL] class DictConvertible ( abc . ABC ) : [EOL] [docstring] [EOL] @ abc . abstractmethod def to_dict ( self ) : [EOL] raise NotImplementedError [EOL] [EOL] @ classmethod @ abc . abstractmethod def from_dict ( cls , data_dict ) : [EOL] raise NotImplementedError [EOL] [EOL] @ classmethod def __subclasshook__ ( cls , other_cls ) : [EOL] is_dict_convertible = ( hasattr ( other_cls , [string] ) and hasattr ( other_cls , [string] ) ) [EOL] return is_dict_convertible [EOL] [EOL] [EOL] class StrConvertible ( abc . ABC ) : [EOL] [docstring] [EOL] @ abc . abstractmethod def to_str ( self ) : [EOL] raise NotImplementedError [EOL] [EOL] @ classmethod @ abc . abstractmethod def from_str ( cls , json_str ) : [EOL] raise NotImplementedError [EOL] [EOL] @ classmethod def __subclasshook__ ( cls , other_cls ) : [EOL] is_str_convertible = ( hasattr ( other_cls , [string] ) and hasattr ( other_cls , [string] ) ) [EOL] return is_str_convertible [EOL] [EOL] [EOL] class JsonerSerializable ( abc . ABC ) : [EOL] [docstring] [EOL] @ classmethod def __subclasshook__ ( cls , other_cls ) : [EOL] try : [EOL] is_serializable = other_cls in decoders and other_cls in encoders [EOL] except TypeError : [EOL] return False [EOL] [EOL] if not is_serializable : [EOL] is_serializable |= ( issubclass ( other_cls , StrConvertible ) or issubclass ( other_cls , DictConvertible ) ) [EOL] [EOL] return is_serializable [EOL] [EOL] [EOL] def _is_instance_of_type ( obj_or_type ) : [EOL] [docstring] [EOL] is_a_cls = isinstance ( obj_or_type , type ) [EOL] is_a_cls &= [string] not in obj_spec ( obj_or_type ) [EOL] [EOL] return is_a_cls [EOL] [EOL] [EOL] def obj_spec ( obj_or_type ) : [EOL] [docstring] [EOL] if isinstance ( obj_or_type , type ) : [EOL] path = obj_or_type . __module__ + [string] + obj_or_type . __qualname__ [EOL] else : [EOL] path = obj_or_type . __class__ . __module__ + [string] + obj_or_type . __class__ . __qualname__ [EOL] return path [EOL] [EOL] [EOL] class JsonEncoder ( json . JSONEncoder ) : [EOL] [docstring] [EOL] def default ( self , obj , * args , ** kwargs ) : [EOL] [EOL] if isinstance ( obj , JsonerSerializable ) : [EOL] obj_dict = { [string] : obj_spec ( obj ) , [string] : None } [EOL] if isinstance ( obj , DictConvertible ) : [EOL] obj_data = obj . to_dict ( ) [EOL] elif isinstance ( obj , StrConvertible ) : [EOL] obj_data = obj . to_str ( ) [EOL] else : [EOL] encoder = encoders . get ( obj ) [EOL] if isinstance ( encoder , T . Callable ) : [EOL] obj_data = encoder ( obj ) [EOL] else : [EOL] obj_data = encoder [EOL] obj_dict [ [string] ] = obj_data [EOL] return obj_dict [EOL] [EOL] elif _is_instance_of_type ( obj ) : [EOL] return { [string] : obj_spec ( obj ) } [EOL] [EOL] else : [EOL] return super ( ) . default ( obj ) [EOL] [EOL] [EOL] def json_hook ( primitive ) : [EOL] [docstring] [EOL] if not isinstance ( primitive , T . Dict ) : [EOL] return primitive [EOL] else : [EOL] return maybe_convert_to_obj ( primitive ) [EOL] [EOL] [EOL] def maybe_convert_to_obj ( data ) : [EOL] [docstring] [EOL] if [string] in data : [EOL] _cls = data . get ( [string] , [string] ) [EOL] [EOL] try : [EOL] return import_object ( _cls ) [EOL] except ImportError : [EOL] return data [EOL] [EOL] elif [string] in data : [EOL] _cls = data . get ( [string] , [string] ) [EOL] try : [EOL] cls = import_object ( _cls ) [EOL] except ImportError : [EOL] return data [EOL] [EOL] obj_data = data . get ( [string] ) [EOL] [EOL] if issubclass ( cls , DictConvertible ) : [EOL] return cls . from_dict ( obj_data ) [EOL] elif issubclass ( cls , StrConvertible ) : [EOL] return cls . from_str ( obj_data ) [EOL] else : [EOL] decoder = decoders . get ( cls ) [EOL] if decoder is None : [EOL] return data [EOL] if callable ( decoder ) : [EOL] sig = signature ( decoder ) [EOL] if len ( sig . parameters ) == [number] : [EOL] return decoder ( obj_data ) [EOL] else : [EOL] return decoder ( obj_data , cls ) [EOL] else : [EOL] return decoder or data [EOL] else : [EOL] return data [EOL] [EOL] [EOL] dump = partial ( json . dump , cls = JsonEncoder ) [EOL] dumps = partial ( json . dumps , cls = JsonEncoder ) [EOL] load = partial ( json . load , object_hook = json_hook ) [EOL] loads = partial ( json . loads , object_hook = json_hook ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.type$ 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.type$ 0 0 0 0 0 0 $builtins.type$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.type$ 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.type$ 0 0 0 0 0 0 $builtins.type$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.type$ 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.type$ 0 0 0 $builtins.type$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 $builtins.bool$ 0 0 0 0 $builtins.type$ 0 0 0 0 0 0 $builtins.type$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Optional[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Optional[builtins.str]]$ 0 0 0 0 $typing.Any$ 0 0 $typing.Dict[builtins.str,typing.Optional[builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $functools.partial[typing.Any]$ 0 0 0 0 0 $functools.partial[typing.Any]$ 0 0 0 0 0 0 $functools.partial[typing.Any]$ 0 0 0 0 0 $functools.partial[typing.Any]$ 0 0 0 0 0 0
	0
[EOL] [EOL] from typing import Union , Dict , Any [EOL] import typing [EOL] import builtins [EOL] import jsoner [EOL] import json [EOL] import unittest [EOL] [EOL] from . . registry import decoders [EOL] from . . registry import encoders [EOL] from . . serialization import DictConvertible [EOL] from . . serialization import JsonEncoder [EOL] from . . serialization import JsonerSerializable [EOL] from . . serialization import StrConvertible [EOL] from . . serialization import json_hook [EOL] from . . serialization import maybe_convert_to_obj [EOL] [EOL] [EOL] class TestStrSerializable ( unittest . TestCase ) : [EOL] [EOL] def test_000_primitive_type ( self ) : [EOL] self . assertFalse ( isinstance ( [number] , JsonerSerializable ) ) [EOL] [EOL] def test_001_registered_type ( self ) : [EOL] class Dummy : [EOL] pass [EOL] [EOL] encoders . add ( Dummy , [number] ) [EOL] decoders . add ( Dummy , [number] ) [EOL] [EOL] self . assertTrue ( isinstance ( Dummy ( ) , JsonerSerializable ) ) [EOL] [EOL] del encoders [ Dummy ] [EOL] del decoders [ Dummy ] [EOL] [EOL] def test_002_registered_type ( self ) : [EOL] class Dummy : [EOL] pass [EOL] [EOL] encoders . add ( Dummy , [number] ) [EOL] decoders . add ( Dummy , [number] ) [EOL] [EOL] self . assertFalse ( isinstance ( Dummy , JsonerSerializable ) ) [EOL] [EOL] del encoders [ Dummy ] [EOL] del decoders [ Dummy ] [EOL] [EOL] def test_003_registered_type ( self ) : [EOL] class Dummy : [EOL] pass [EOL] [EOL] encoders . add ( Dummy , [number] ) [EOL] decoders . add ( Dummy , [number] ) [EOL] [EOL] self . assertTrue ( issubclass ( Dummy , JsonerSerializable ) ) [EOL] [EOL] del encoders [ Dummy ] [EOL] del decoders [ Dummy ] [EOL] [EOL] def test_004_dict_convertible ( self ) : [EOL] class A : [EOL] def to_dict ( self ) : [EOL] return { } [EOL] [EOL] def from_dict ( self , d ) : [EOL] return A ( ) [EOL] [EOL] self . assertTrue ( isinstance ( A ( ) , JsonerSerializable ) ) [EOL] self . assertTrue ( issubclass ( A , JsonerSerializable ) ) [EOL] [EOL] def test_005_dict_convertible ( self ) : [EOL] with self . assertRaises ( NotImplementedError ) : [EOL] DictConvertible . from_dict ( { } ) [EOL] with self . assertRaises ( NotImplementedError ) : [EOL] DictConvertible . to_dict ( { } ) [EOL] [EOL] [EOL] class TestDictConvertible ( unittest . TestCase ) : [EOL] def test_000_dict_convertible ( self ) : [EOL] class A : [EOL] def to_dict ( self ) : [EOL] return { } [EOL] [EOL] @ classmethod def from_dict ( cls , d ) : [EOL] return A ( ) [EOL] [EOL] self . assertTrue ( isinstance ( A ( ) , DictConvertible ) ) [EOL] self . assertTrue ( issubclass ( A , DictConvertible ) ) [EOL] [EOL] [EOL] class TestStrConvertible ( unittest . TestCase ) : [EOL] def test_000_str_convertible ( self ) : [EOL] class A : [EOL] def to_str ( self ) : [EOL] return [string] [EOL] [EOL] @ classmethod def from_str ( cls , s ) : [EOL] return A ( ) [EOL] [EOL] self . assertTrue ( isinstance ( A ( ) , StrConvertible ) ) [EOL] self . assertTrue ( issubclass ( A , StrConvertible ) ) [EOL] [EOL] def test_002_str_convertible ( self ) : [EOL] with self . assertRaises ( NotImplementedError ) : [EOL] StrConvertible . from_str ( [string] ) [EOL] with self . assertRaises ( NotImplementedError ) : [EOL] StrConvertible . to_str ( [string] ) [EOL] [EOL] [EOL] class Dummy : [EOL] def __eq__ ( self , other ) : [EOL] assert isinstance ( other , Dummy ) [EOL] return True [EOL] [EOL] [EOL] class DummyDictConvertible : [EOL] def to_dict ( self ) : [EOL] return { } [EOL] [EOL] @ classmethod def from_dict ( cls , d ) : [EOL] return cls ( ) [EOL] [EOL] [EOL] class DummyStrConvertible : [EOL] def to_str ( self ) : [EOL] return [string] [EOL] [EOL] @ classmethod def from_str ( cls , s ) : [EOL] return cls ( ) [EOL] [EOL] [EOL] class TestJsonEncoder ( unittest . TestCase ) : [EOL] [EOL] def test_000_default_pass_dict ( self ) : [EOL] encoder = JsonEncoder ( ) [EOL] [EOL] result = encoder . encode ( { [string] : [number] } ) [EOL] expected = [string] [EOL] [EOL] self . assertEqual ( result , expected ) [EOL] [EOL] def test_001_default_pass_int ( self ) : [EOL] encoder = JsonEncoder ( ) [EOL] [EOL] result = encoder . encode ( [number] ) [EOL] expected = [string] [EOL] [EOL] self . assertEqual ( result , expected ) [EOL] [EOL] def test_002_pass_dict_convertible_object ( self ) : [EOL] encoder = JsonEncoder ( ) [EOL] [EOL] result = encoder . encode ( DummyDictConvertible ( ) ) [EOL] result = json . loads ( result ) [EOL] expected = [string] [string] [EOL] expected = json . loads ( expected ) [EOL] [EOL] self . assertDictEqual ( result , expected ) [EOL] [EOL] def test_003_pass_str_convertible_object ( self ) : [EOL] encoder = JsonEncoder ( ) [EOL] [EOL] result = encoder . encode ( DummyStrConvertible ( ) ) [EOL] result = json . loads ( result ) [EOL] expected = [string] [string] [EOL] expected = json . loads ( expected ) [EOL] [EOL] self . assertDictEqual ( result , expected ) [EOL] [EOL] def test_004_in_registry ( self ) : [EOL] encoder = JsonEncoder ( ) [EOL] [EOL] class A : [EOL] pass [EOL] [EOL] @ encoders . register ( A ) def encode ( obj ) : [EOL] return [string] [EOL] [EOL] @ decoders . register ( A ) def decode ( data ) : [EOL] return A ( ) [EOL] [EOL] result = encoder . encode ( A ( ) ) [EOL] [EOL] expected = { [string] : A . __module__ + [string] + A . __qualname__ , [string] : [string] } [EOL] self . assertDictEqual ( json . loads ( result ) , expected ) [EOL] [EOL] del encoders [ A ] [EOL] del decoders [ A ] [EOL] [EOL] def test_005_in_registry ( self ) : [EOL] encoder = JsonEncoder ( ) [EOL] [EOL] class A : [EOL] pass [EOL] [EOL] encoders . add ( A , [number] ) [EOL] decoders . add ( A , A ( ) ) [EOL] [EOL] result = encoder . encode ( A ( ) ) [EOL] expected = { [string] : A . __module__ + [string] + A . __qualname__ , [string] : [number] } [EOL] [EOL] self . assertDictEqual ( json . loads ( result ) , expected ) [EOL] [EOL] del encoders [ A ] [EOL] del decoders [ A ] [EOL] [EOL] def test_006_encode_cls ( self ) : [EOL] encoder = JsonEncoder ( ) [EOL] [EOL] encoders . add ( Dummy , [number] ) [EOL] decoders . add ( Dummy , Dummy ( ) ) [EOL] [EOL] self . assertTrue ( issubclass ( Dummy , JsonerSerializable ) ) [EOL] [EOL] result = encoder . encode ( Dummy ) [EOL] expected = { [string] : Dummy . __module__ + [string] + Dummy . __qualname__ } [EOL] self . assertDictEqual ( json . loads ( result ) , expected ) [EOL] [EOL] del encoders [ Dummy ] [EOL] del decoders [ Dummy ] [EOL] [EOL] def test_007_encode_str ( self ) : [EOL] encoder = JsonEncoder ( ) [EOL] [EOL] result = encoder . encode ( [string] ) [EOL] expected = [string] [EOL] self . assertEqual ( json . loads ( result ) , expected ) [EOL] [EOL] def test_008_not_in_registry ( self ) : [EOL] encoder = JsonEncoder ( ) [EOL] [EOL] class Dummy : [EOL] pass [EOL] [EOL] self . assertRaises ( TypeError , encoder . encode , Dummy ( ) ) [EOL] [EOL] [EOL] class TestDecoding ( unittest . TestCase ) : [EOL] def test_000_maybe_convert_to_obj ( self ) : [EOL] self . assertDictEqual ( maybe_convert_to_obj ( { } ) , { } ) [EOL] [EOL] def test_001_maybe_convert_to_obj ( self ) : [EOL] data = { [string] : Dummy . __module__ + [string] + Dummy . __qualname__ } [EOL] self . assertIs ( maybe_convert_to_obj ( data ) , Dummy ) [EOL] [EOL] def test_002_maybe_convert_to_dict ( self ) : [EOL] data = { [string] : Dummy . __module__ + [string] + Dummy . __qualname__ } [EOL] decoders . add ( Dummy , lambda d : Dummy ( ) ) [EOL] [EOL] self . assertEqual ( maybe_convert_to_obj ( data ) , Dummy ( ) ) [EOL] [EOL] del decoders [ Dummy ] [EOL] [EOL] def test_003_object_not_found ( self ) : [EOL] data = { [string] : [string] } [EOL] [EOL] self . assertIs ( maybe_convert_to_obj ( data ) , data ) [EOL] [EOL] def test_005_object_not_found ( self ) : [EOL] data = { [string] : [string] } [EOL] [EOL] self . assertIs ( maybe_convert_to_obj ( data ) , data ) [EOL] [EOL] def test_006_str_convertible ( self ) : [EOL] data = { [string] : [string] , [string] : [string] } [EOL] [EOL] result = maybe_convert_to_obj ( data ) [EOL] [EOL] self . assertIsInstance ( result , DummyStrConvertible ) [EOL] [EOL] def test_007_dict_convertible ( self ) : [EOL] data = { [string] : [string] , [string] : { } } [EOL] [EOL] result = maybe_convert_to_obj ( data ) [EOL] [EOL] self . assertIsInstance ( result , DummyDictConvertible ) [EOL] [EOL] def test_008_not_registered ( self ) : [EOL] data = { [string] : [string] , [string] : { } } [EOL] [EOL] result = maybe_convert_to_obj ( data ) [EOL] [EOL] self . assertDictEqual ( result , data ) [EOL] [EOL] def test_009_registered_obj ( self ) : [EOL] data = { [string] : Dummy . __module__ + [string] + Dummy . __qualname__ } [EOL] [EOL] @ decoders . register ( Dummy ) def decode ( data , cls ) : [EOL] assert cls is Dummy [EOL] return cls ( ) [EOL] [EOL] self . assertEqual ( maybe_convert_to_obj ( data ) , Dummy ( ) ) [EOL] [EOL] del decoders [ Dummy ] [EOL] [EOL] def test_010_register_arbitrary_objects ( self ) : [EOL] data = { [string] : Dummy . __module__ + [string] + Dummy . __qualname__ } [EOL] [EOL] decoders . add ( Dummy , [number] ) [EOL] [EOL] self . assertEqual ( maybe_convert_to_obj ( data ) , [number] ) [EOL] [EOL] del decoders [ Dummy ] [EOL] [EOL] [EOL] class TestJsonHook ( unittest . TestCase ) : [EOL] def test_000_json_hook ( self ) : [EOL] self . assertEqual ( json_hook ( [string] ) , [string] ) [EOL] [EOL] def test_001_json_hook ( self ) : [EOL] self . assertEqual ( json_hook ( { } ) , { } ) [EOL] [EOL] def test_002_json_hook ( self ) : [EOL] data = { [string] : [string] , [string] : { } } [EOL] [EOL] result = json_hook ( data ) [EOL] [EOL] self . assertDictEqual ( result , data ) [EOL] [EOL] def test_003_dict_convertible ( self ) : [EOL] data = { [string] : [string] , [string] : { } } [EOL] [EOL] result = json_hook ( data ) [EOL] [EOL] self . assertIsInstance ( result , DummyDictConvertible ) [EOL] [EOL] def test_004_str_convertible ( self ) : [EOL] data = { [string] : [string] , [string] : [string] } [EOL] [EOL] result = json_hook ( data ) [EOL] [EOL] self . assertIsInstance ( result , DummyStrConvertible ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 $'A'$ 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $'A'$ 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $'A'$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.object$ 0 0 0 0 0 0 $builtins.object$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $'DummyDictConvertible'$ 0 0 0 $builtins.dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $'DummyStrConvertible'$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.serialization.JsonEncoder$ 0 0 0 0 0 0 $builtins.str$ 0 $jsoner.serialization.JsonEncoder$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $jsoner.serialization.JsonEncoder$ 0 0 0 0 0 0 $builtins.str$ 0 $jsoner.serialization.JsonEncoder$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $jsoner.serialization.JsonEncoder$ 0 0 0 0 0 0 $typing.Any$ 0 $jsoner.serialization.JsonEncoder$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $jsoner.serialization.JsonEncoder$ 0 0 0 0 0 0 $typing.Any$ 0 $jsoner.serialization.JsonEncoder$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $jsoner.serialization.JsonEncoder$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $A$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $A$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $jsoner.serialization.JsonEncoder$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.serialization.JsonEncoder$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $jsoner.serialization.JsonEncoder$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Dict[builtins.str,typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.serialization.JsonEncoder$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $jsoner.serialization.JsonEncoder$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.serialization.JsonEncoder$ 0 0 0 0 0 0 $builtins.str$ 0 $jsoner.serialization.JsonEncoder$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $jsoner.serialization.JsonEncoder$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.serialization.JsonEncoder$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[typing.Any,typing.Any],builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[typing.Any,typing.Any],builtins.str]]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[typing.Any,typing.Any],builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[typing.Any,typing.Any],builtins.str]]$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[typing.Any,typing.Any],builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[typing.Any,typing.Any],builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[typing.Any,typing.Any],builtins.str]]$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[typing.Any,typing.Any],builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[typing.Any,typing.Any],builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,typing.Union[typing.Dict[typing.Any,typing.Any],builtins.str]]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0
from typing import Any [EOL] import jsoner [EOL] import typing [EOL] from unittest import TestCase [EOL] [EOL] from jsoner . registry import Registry [EOL] from jsoner . registry import SubclassRegistry [EOL] from jsoner . registry import import_object [EOL] [EOL] [EOL] class TestRegistry ( TestCase ) : [EOL] def test_000_init ( self ) : [EOL] r = Registry ( ) [EOL] [EOL] self . assertDictEqual ( r . registry , { } ) [EOL] [EOL] def test_001_add ( self ) : [EOL] r = Registry ( ) [EOL] r . add ( [string] , [number] ) [EOL] [EOL] self . assertEqual ( r [ [string] ] , [number] ) [EOL] self . assertDictEqual ( dict ( r . registry ) , { [string] : [number] } ) [EOL] [EOL] def test_002_add_causes_error_if_key_exists ( self ) : [EOL] r = Registry ( ) [EOL] r . add ( [string] , [number] ) [EOL] [EOL] self . assertRaises ( KeyError , r . add , [string] , [number] ) [EOL] [EOL] def test_003_register_decorator ( self ) : [EOL] r = Registry ( ) [EOL] [EOL] @ r . register ( [string] ) def foo ( ) : [EOL] return [number] [EOL] [EOL] self . assertEqual ( r [ [string] ] ( ) , [number] ) [EOL] [EOL] def test_004_register_same_key_twice ( self ) : [EOL] [docstring] [EOL] r = Registry ( ) [EOL] [EOL] def foo ( ) : [EOL] return [number] [EOL] foo ( ) [EOL] r . register ( [string] ) ( foo ) [EOL] [EOL] self . assertIs ( r . get ( [string] ) , foo ) [EOL] with self . assertRaises ( KeyError ) : [EOL] r . register ( [string] ) ( foo ) [EOL] [EOL] def test_005_add_none ( self ) : [EOL] r = Registry ( ) [EOL] [EOL] r . add ( [string] , None ) [EOL] [EOL] self . assertEqual ( r [ [string] ] , None ) [EOL] [EOL] def test_006_get ( self ) : [EOL] r = Registry ( ) [EOL] [EOL] r . add ( [string] , [number] ) [EOL] [EOL] self . assertEqual ( r . get ( [string] ) , [number] ) [EOL] [EOL] def test_007_get_key_not_found ( self ) : [EOL] r = Registry ( ) [EOL] [EOL] self . assertIsNone ( r . get ( [number] ) ) [EOL] [EOL] [EOL] class DummyObject : [EOL] pass [EOL] [EOL] [EOL] class DummyObject2 ( DummyObject ) : [EOL] pass [EOL] [EOL] [EOL] class TestSubclassRegistry ( TestCase ) : [EOL] def test_000_get_subclass_of_class ( self ) : [EOL] class A : [EOL] pass [EOL] [EOL] class B ( A ) : [EOL] pass [EOL] [EOL] r = SubclassRegistry ( ) [EOL] r . add ( A , [number] ) [EOL] [EOL] self . assertEqual ( r . get ( A ) , [number] ) [EOL] self . assertEqual ( r . get ( B ) , [number] ) [EOL] [EOL] def test_001_get_subclass_of_object ( self ) : [EOL] class A : [EOL] pass [EOL] [EOL] class B ( A ) : [EOL] pass [EOL] [EOL] r = SubclassRegistry ( ) [EOL] r . add ( A , [number] ) [EOL] [EOL] a = A ( ) [EOL] b = B ( ) [EOL] [EOL] self . assertEqual ( r . get ( a ) , [number] ) [EOL] self . assertEqual ( r . get ( b ) , [number] ) [EOL] [EOL] def test_002_register_as_string ( self ) : [EOL] r = SubclassRegistry ( ) [EOL] r . add ( [string] , [number] ) [EOL] [EOL] self . assertEqual ( r . get ( DummyObject ) , [number] ) [EOL] [EOL] def test_003_register_as_type_and_get_as_string ( self ) : [EOL] r = SubclassRegistry ( ) [EOL] r . add ( DummyObject , [number] ) [EOL] [EOL] self . assertEqual ( r . get ( [string] ) , [number] ) [EOL] [EOL] def test_004_register_normal_string ( self ) : [EOL] r = SubclassRegistry ( ) [EOL] r . add ( [string] , [number] ) [EOL] [EOL] self . assertEqual ( r . get ( [string] ) , [number] ) [EOL] [EOL] def test_005_register_normal_string ( self ) : [EOL] r = SubclassRegistry ( ) [EOL] [EOL] self . assertEqual ( r . get ( [string] ) , None ) [EOL] [EOL] def test_006_not_existing_module ( self ) : [EOL] r = SubclassRegistry ( ) [EOL] r . add ( [string] , [number] ) [EOL] [EOL] self . assertEqual ( r . get ( [string] ) , [number] ) [EOL] self . assertIsNone ( r . get ( DummyObject ) ) [EOL] [EOL] def test_007_add_integer_as_key ( self ) : [EOL] r = SubclassRegistry ( ) [EOL] r . add ( [number] , [string] ) [EOL] [EOL] self . assertEqual ( r . get ( [number] ) , [string] ) [EOL] self . assertIsNone ( r . get ( DummyObject ) ) [EOL] [EOL] def test_008_pass_list ( self ) : [EOL] r = SubclassRegistry ( ) [EOL] [EOL] self . assertEqual ( r . get ( ( [number] , [number] , [number] ) ) , None ) [EOL] self . assertIsNone ( r . get ( DummyObject ) ) [EOL] [EOL] def test_009_load_from_str ( self ) : [EOL] r = SubclassRegistry ( ) [EOL] [EOL] r . add ( [string] , [number] ) [EOL] [EOL] self . assertEqual ( r . get ( [string] ) , [number] ) [EOL] [EOL] def test_010_add_none ( self ) : [EOL] r = SubclassRegistry ( ) [EOL] [EOL] r . add ( [string] , None ) [EOL] [EOL] self . assertEqual ( r . get ( [string] ) , None ) [EOL] [EOL] def test_011_add_none ( self ) : [EOL] r = SubclassRegistry ( ) [EOL] [EOL] r . add ( [string] , None ) [EOL] [EOL] self . assertEqual ( r . get ( [string] ) , None ) [EOL] [EOL] def test_012_contains ( self ) : [EOL] r = SubclassRegistry ( ) [EOL] [EOL] r . add ( [string] , None ) [EOL] [EOL] self . assertIn ( [string] , r ) [EOL] [EOL] def test_013_contains ( self ) : [EOL] r = SubclassRegistry ( ) [EOL] [EOL] r . add ( DummyObject , [number] ) [EOL] [EOL] self . assertIn ( DummyObject , r ) [EOL] [EOL] def test_014_contains ( self ) : [EOL] r = SubclassRegistry ( ) [EOL] [EOL] r . add ( DummyObject , [number] ) [EOL] [EOL] self . assertIn ( DummyObject2 , r ) [EOL] [EOL] def test_015_contains ( self ) : [EOL] r = SubclassRegistry ( ) [EOL] [EOL] self . assertNotIn ( DummyObject2 , r ) [EOL] [EOL] [EOL] class TestImportObject ( TestCase ) : [EOL] def test_000_import_dummy_object ( self ) : [EOL] obj = import_object ( [string] ) [EOL] self . assertIs ( obj , DummyObject ) [EOL] [EOL] def test_001_invalid_str ( self ) : [EOL] with self . assertRaises ( ImportError ) : [EOL] import_object ( [string] ) [EOL] [EOL] def test_001_pass_invalid_module ( self ) : [EOL] with self . assertRaises ( ImportError ) : [EOL] import_object ( [string] ) [EOL] [EOL] def test_002_pass_invalid_argument ( self ) : [EOL] with self . assertRaises ( ImportError ) : [EOL] import_object ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.Registry$ 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.Registry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.Registry$ 0 0 0 0 0 $jsoner.registry.Registry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.Registry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.Registry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.Registry$ 0 0 0 0 0 $jsoner.registry.Registry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.Registry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.Registry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.Registry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.Registry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.Registry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.Registry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.Registry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.Registry$ 0 0 0 0 0 0 $jsoner.registry.Registry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.Registry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.Registry$ 0 0 0 0 0 0 $jsoner.registry.Registry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.Registry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.Registry$ 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.Registry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 0 0 0 $jsoner.tests.test_registry.TestSubclassRegistry.test_001_get_subclass_of_object.A$ 0 0 0 0 0 $jsoner.tests.test_registry.TestSubclassRegistry.test_001_get_subclass_of_object.B$ 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 $jsoner.tests.test_registry.TestSubclassRegistry.test_001_get_subclass_of_object.A$ 0 0 0 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 $jsoner.tests.test_registry.TestSubclassRegistry.test_001_get_subclass_of_object.B$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 0 0 0 0 0 0 $jsoner.registry.SubclassRegistry$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0