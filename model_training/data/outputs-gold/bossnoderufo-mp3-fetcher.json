from typing import Literal , Tuple , Any [EOL] import typing [EOL] import threading [EOL] import typing_extensions [EOL] import gi [EOL] gi . require_version ( [string] , [string] ) [EOL] from gi . repository import Gtk [EOL] import os , sys [EOL] from soundspider import SoundSpider [EOL] from time import sleep [EOL] import threading [EOL] [EOL] class Handler : [EOL] def onDestroy ( self , * args ) : [EOL] try : [EOL] download_thread . _stop ( ) [EOL] except : [EOL] pass [EOL] Gtk . main_quit ( ) [EOL] [EOL] def onToggleDownload ( self , button ) : [EOL] status = [string] [EOL] builder . get_object ( [string] ) . set_text ( status ) [EOL] button . set_sensitive ( False ) [EOL] builder . get_object ( [string] ) . set_sensitive ( False ) [EOL] builder . get_object ( [string] ) . set_sensitive ( False ) [EOL] [comment] [EOL] [comment] [EOL] verbose = False [EOL] params = ( builder . get_object ( [string] ) . get_text ( ) , builder . get_object ( [string] ) . get_text ( ) , verbose , builder . get_object ( [string] ) , button , builder . get_object ( [string] ) , builder . get_object ( [string] ) ) [EOL] download_thread = threading . Thread ( target = SoundSpider . convert , args = params ) [EOL] download_thread . start ( ) [EOL] return [EOL] [EOL] def resource_path ( relative_path ) : [EOL] [docstring] [EOL] try : [EOL] [comment] [EOL] base_path = sys . _MEIPASS [EOL] except Exception : [EOL] base_path = os . path . abspath ( [string] ) [EOL] [EOL] return os . path . join ( base_path , relative_path ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] download_thread = threading . Thread ( ) [EOL] [EOL] builder = Gtk . Builder ( ) [EOL] builder . add_from_file ( resource_path ( [string] ) ) [EOL] builder . connect_signals ( Handler ( ) ) [EOL] [EOL] window = builder . get_object ( [string] ) [EOL] window . show_all ( ) [EOL] [EOL] Gtk . main ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $threading.Thread$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Tuple[typing.Any,typing.Any,typing_extensions.Literal[False],typing.Any,typing.Any,typing.Any,typing.Any]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $threading.Thread$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Any,typing.Any,typing_extensions.Literal[False],typing.Any,typing.Any,typing.Any,typing.Any]$ 0 0 $threading.Thread$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $threading.Thread$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Any [EOL] import typing [EOL] from __future__ import unicode_literals [EOL] import youtube_dl [EOL] import sys , os [EOL] from datetime import datetime [EOL] class SoundSpider ( ) : [EOL] [EOL] @ staticmethod def convert ( url , extra_path , verbose , label_object , button_object , url_label , folder_label ) : [EOL] [comment] [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( [string] ) [EOL] f . close ( ) [EOL] [EOL] sub_path = [string] [comment] [EOL] if extra_path : [EOL] sub_path = extra_path . replace ( [string] , [string] ) . replace ( [string] , [string] ) . replace ( [string] , [string] ) + [string] [EOL] download_path = os . path . join ( os . path . dirname ( __file__ ) , [string] + sub_path ) [EOL] if not os . path . exists ( download_path ) : [EOL] os . makedirs ( download_path ) [EOL] options = { [string] : [string] , [string] : True , [string] : [string] , [string] : True , [string] : [string] + sub_path + [string] , [string] : False , [string] : verbose , [string] : True , [string] : download_path , [string] : True , [string] : [ { [string] : [string] , [string] : [string] , [string] : [string] } ] , } [EOL] try : [EOL] with youtube_dl . YoutubeDL ( options ) as ydl : [EOL] ydl . download ( [ url ] ) [EOL] [EOL] [comment] [EOL] label_object . set_text ( [string] ) [EOL] button_object . set_sensitive ( True ) [EOL] folder_label . set_sensitive ( True ) [EOL] url_label . set_sensitive ( True ) [EOL] folder_label . set_text ( [string] ) [EOL] url_label . set_text ( [string] ) [EOL] return True [EOL] except Exception as e : [EOL] with open ( [string] , [string] ) as f : [EOL] f . write ( str ( datetime . now ( ) ) + [string] + str ( e ) ) [EOL] f . close ( ) [EOL] [EOL] [comment] [EOL] label_object . set_text ( [string] ) [EOL] button_object . set_sensitive ( True ) [EOL] folder_label . set_sensitive ( True ) [EOL] url_label . set_sensitive ( True ) [EOL] folder_label . set_text ( [string] ) [EOL] url_label . set_text ( [string] ) [EOL] return False [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0