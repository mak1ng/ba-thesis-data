[comment] [EOL] [EOL] [comment] [EOL] from typing import List [EOL] import typing [EOL] from setuptools import find_packages , setup [EOL] [EOL] with open ( [string] , encoding = [string] ) as readme_file : [EOL] readme = readme_file . read ( ) [EOL] [EOL] with open ( [string] ) as f : [EOL] requirements = f . read ( ) . splitlines ( ) [EOL] [EOL] test_requirements = [ [string] , [string] , [string] , [string] , [string] , ] [EOL] [EOL] setup ( name = [string] , version = [string] , description = [string] , long_description = readme , long_description_content_type = [string] , author = [string] , author_email = [string] , url = [string] , packages = find_packages ( exclude = [ [string] , [string] ] ) , include_package_data = True , install_requires = requirements , tests_require = test_requirements , license = [string] , zip_safe = False , keywords = [ [string] [string] , [string] ] , classifiers = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] , test_suite = [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] from typing import List , Callable , Tuple , Any [EOL] import typing [EOL] import builtins [EOL] import numpy [EOL] import seagull [EOL] import random [EOL] from math import sqrt [EOL] from typing import Tuple [EOL] [EOL] [comment] [EOL] import matplotlib . pyplot as plt [EOL] import matplotlib . cm as cm [EOL] import matplotlib as mpl [EOL] import numpy as np [EOL] import seagull as sg [EOL] import seagull . lifeforms as lf [EOL] import streamlit as st [EOL] from loguru import logger [EOL] from scipy . signal import convolve2d [EOL] [EOL] [EOL] def main ( ) : [EOL] [comment] [EOL] st . sidebar . header ( [string] ) [EOL] st . sidebar . markdown ( [string] ) [EOL] repro_rate = st . sidebar . slider ( [string] , min_value = [number] , max_value = [number] , value = [number] , ) [EOL] stasis_rate = st . sidebar . slider ( [string] , min_value = [number] , max_value = [number] , value = [number] , ) [EOL] n_iters = st . sidebar . slider ( [string] , min_value = [number] , max_value = [number] , value = [number] ) [EOL] [EOL] st . sidebar . header ( [string] ) [EOL] st . sidebar . markdown ( [string] ) [EOL] n_sprites = st . sidebar . radio ( [string] , options = [ [number] , [number] , [number] , [number] ] , index = [number] ) [EOL] [EOL] [comment] [EOL] st . title ( [string] ) [EOL] st . markdown ( [string] ) [EOL] [EOL] if st . button ( [string] ) : [EOL] with st . spinner ( [string] ) : [EOL] fig = make_sprite ( n_sprites = n_sprites , n_iters = n_iters , repro_rate = repro_rate , stasis_rate = stasis_rate , ) [EOL] else : [EOL] with st . spinner ( [string] ) : [EOL] fig = make_sprite ( n_sprites = n_sprites , n_iters = n_iters , repro_rate = repro_rate , stasis_rate = stasis_rate , ) [EOL] [EOL] st . pyplot ( fig = fig , bbox_inches = [string] ) [EOL] [EOL] st . markdown ( [string] ) [EOL] [EOL] st . markdown ( [string] ) [EOL] [EOL] st . markdown ( [string] ) [EOL] [EOL] [EOL] def make_sprite ( n_sprites , n_iters , repro_rate , stasis_rate , ) : [EOL] [docstring] [EOL] logger . info ( [string] ) [EOL] board = sg . Board ( size = ( [number] , [number] ) ) [EOL] [EOL] logger . info ( [string] ) [EOL] sprator_list = [ ] [EOL] [EOL] for sprite in range ( n_sprites ) : [EOL] noise = np . random . choice ( [ [number] , [number] ] , size = ( [number] , [number] ) ) [EOL] custom_lf = lf . Custom ( noise ) [EOL] board . add ( custom_lf , loc = ( [number] , [number] ) ) [EOL] sim = sg . Simulator ( board ) [EOL] sim . run ( custom_rule , iters = n_iters , repro_rate = repro_rate , stasis_rate = stasis_rate , ) [EOL] fstate = sim . get_history ( ) [ - [number] ] [EOL] [EOL] logger . info ( f" [string] { sprite }" ) [EOL] sprator = np . hstack ( [ fstate , np . fliplr ( fstate ) ] ) [EOL] sprator = np . pad ( sprator , mode = [string] , pad_width = [number] , constant_values = [number] ) [EOL] sprator_with_outline = add_outline ( sprator ) [EOL] sprator_gradient = get_gradient ( sprator_with_outline ) [EOL] sprator_final = combine ( sprator_with_outline , sprator_gradient ) [EOL] sprator_list . append ( sprator_final ) [EOL] [EOL] [comment] [EOL] n_grid = int ( sqrt ( n_sprites ) ) [EOL] [EOL] [comment] [EOL] r = lambda : [string] % ( random . randint ( [number] , [number] ) , random . randint ( [number] , [number] ) , random . randint ( [number] , [number] ) , ) [EOL] colors = [ [string] , [string] , r ( ) , r ( ) , r ( ) ] [EOL] cm . register_cmap ( cmap = mpl . colors . LinearSegmentedColormap . from_list ( [string] , colors ) . reversed ( ) ) [EOL] [EOL] if n_grid == [number] : [EOL] fig , axs = plt . subplots ( n_grid , n_grid , figsize = ( [number] , [number] ) ) [EOL] axs = fig . add_axes ( [ [number] , [number] , [number] , [number] ] , xticks = [ ] , yticks = [ ] , frameon = False ) [EOL] axs . imshow ( sprator_list [ [number] ] , cmap = [string] , interpolation = [string] ) [EOL] fig . text ( [number] , - [number] , [string] , ha = [string] , color = [string] ) [EOL] else : [EOL] fig , axs = plt . subplots ( n_grid , n_grid , figsize = ( [number] , [number] ) ) [EOL] for ax , sprator in zip ( axs . flat , sprator_list ) : [EOL] [comment] [EOL] [comment] [EOL] r = lambda : [string] % ( random . randint ( [number] , [number] ) , random . randint ( [number] , [number] ) , random . randint ( [number] , [number] ) , ) [EOL] colors = [ [string] , [string] , r ( ) , r ( ) , r ( ) ] [EOL] cm . register_cmap ( cmap = mpl . colors . LinearSegmentedColormap . from_list ( [string] , colors ) . reversed ( ) ) [EOL] ax . imshow ( sprator , cmap = [string] , interpolation = [string] ) [EOL] ax . set_axis_off ( ) [EOL] fig . text ( [number] , [number] , [string] , ha = [string] ) [EOL] [EOL] return fig [EOL] [EOL] [EOL] def custom_rule ( X , repro_rate = [number] , stasis_rate = [number] ) : [EOL] [docstring] [EOL] n = convolve2d ( X , np . ones ( ( [number] , [number] ) ) , mode = [string] , boundary = [string] ) - X [EOL] reproduction_rule = ( X == [number] ) & ( n <= repro_rate ) [EOL] stasis_rule = ( X == [number] ) & ( ( n == [number] ) | ( n == stasis_rate ) ) [EOL] return reproduction_rule | stasis_rule [EOL] [EOL] [EOL] def add_outline ( mat ) : [EOL] [docstring] [EOL] m = np . ones ( mat . shape ) [EOL] for idx , orig_val in np . ndenumerate ( mat ) : [EOL] x , y = idx [EOL] neighbors = [ ( x , y + [number] ) , ( x + [number] , y ) , ( x , y - [number] ) , ( x - [number] , y ) ] [EOL] if orig_val == [number] : [EOL] m [ idx ] = [number] [comment] [EOL] for n_coord in neighbors : [EOL] try : [EOL] m [ n_coord ] = [number] if mat [ n_coord ] == [number] else [number] [EOL] except IndexError : [EOL] pass [EOL] [EOL] m = np . pad ( m , mode = [string] , pad_width = [number] , constant_values = [number] ) [EOL] [comment] [EOL] [comment] [EOL] m [ m == [number] ] = np . inf [EOL] m [ m == [number] ] = [number] [EOL] m [ m == np . inf ] = [number] [EOL] [EOL] return m [EOL] [EOL] [EOL] def get_gradient ( mat ) : [EOL] [docstring] [EOL] grad = np . gradient ( mat ) [ [number] ] [EOL] [EOL] def _remap ( new_range , matrix ) : [EOL] old_min , old_max = np . min ( matrix ) , np . max ( matrix ) [EOL] new_min , new_max = new_range [EOL] old = old_max - old_min [EOL] new = new_max - new_min [EOL] return ( ( ( matrix - old_min ) * new ) / old ) + new_min [EOL] [EOL] return _remap ( ( [number] , [number] ) , grad ) [EOL] [EOL] [EOL] def combine ( mat_outline , mat_gradient ) : [EOL] [docstring] [EOL] mat_final = np . copy ( mat_outline ) [EOL] mask = mat_outline == [number] [EOL] mat_final [ mask ] = mat_gradient [ mask ] [EOL] return mat_final [EOL] [EOL] [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $numpy.ndarray$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $numpy.ndarray$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $numpy.ndarray$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0