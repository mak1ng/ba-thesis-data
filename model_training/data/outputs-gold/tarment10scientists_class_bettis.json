[comment] [EOL] [EOL] import builtins [EOL] from typing import Type [EOL] import carddeck [EOL] import typing [EOL] import random [EOL] [EOL] class CardDeck ( ) : [EOL] RANKS = [string] . split ( ) [EOL] SUITS = [string] . split ( ) [EOL] [EOL] def __init__ ( self , color ) : [EOL] self . _color = color [EOL] self . _cards = [ ] [EOL] for suit in self . SUITS : [EOL] for rank in self . RANKS : [EOL] card = f"{ rank } [string] { suit }" [EOL] self . _cards . append ( card ) [EOL] [EOL] def get_cards ( obj ) : [EOL] return obj . _cards [EOL] [EOL] def shuffle ( self ) : [EOL] random . shuffle ( self . _cards ) [EOL] [EOL] def draw ( self ) : [EOL] return self . _cards . pop ( ) [EOL] [EOL] def __len__ ( self ) : [EOL] return len ( self . _cards ) [EOL] [EOL] def __str__ ( self ) : [EOL] return f" [string] { len ( self . _cards ) } [string] " [EOL] [EOL] def get_color ( self ) : [comment] [EOL] return self . _color [EOL] [EOL] def set_color ( self , new_color ) : [comment] [EOL] [comment] [EOL] if isinstance ( new_color , str ) : [EOL] self . _color = new_color [EOL] else : [EOL] raise TypeError ( [string] ) [EOL] [EOL] if __name__ == [string] : [EOL] c1 = CardDeck ( [string] ) [EOL] c2 = CardDeck ( [string] ) [EOL] c3 = CardDeck ( [string] ) [EOL] print ( c1 . get_color ( ) ) [EOL] print ( c3 . get_color ( ) ) [EOL] print ( CardDeck . get_color ( c3 ) ) [EOL] c1 . set_color ( [string] ) [EOL] print ( c1 . get_color ( ) ) [EOL] print ( c1 . get_cards ( ) ) [EOL] c1 . shuffle ( ) [EOL] for i in range ( [number] ) : [EOL] print ( c1 . draw ( ) ) [EOL] print ( c1 ) [EOL] print ( len ( c1 ) ) [EOL] print ( type ( c1 ) ) [EOL] [EOL] s = [string] [EOL] print ( s . upper ( ) ) [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str
[comment] [EOL] [EOL] from typing import List [EOL] import typing [EOL] spam = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL]	0 0
[comment] [EOL] import sys [EOL] [EOL] from nnl . bettis . misc import bettislib as bl [EOL] [EOL] bl . spam ( ) [EOL] bl . ham ( ) [EOL] [EOL] for path in sys . path : [EOL] print ( path ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import mpl_lineseg [EOL] import typing [EOL] from matplotlib import pyplot as plt [EOL] [EOL] class LineBuilder : [EOL] def __init__ ( self , line ) : [EOL] self . line = line [EOL] self . xs = list ( line . get_xdata ( ) ) [EOL] self . ys = list ( line . get_ydata ( ) ) [EOL] self . cid = line . figure . canvas . mpl_connect ( [string] , self ) [EOL] [EOL] def __call__ ( self , event ) : [EOL] print ( [string] , event ) [EOL] if event . inaxes != self . line . axes : return [EOL] self . xs . append ( event . xdata ) [EOL] self . ys . append ( event . ydata ) [EOL] self . line . set_data ( self . xs , self . ys ) [EOL] self . line . figure . canvas . draw ( ) [EOL] [EOL] fig = plt . figure ( ) [EOL] ax = fig . add_subplot ( [number] ) [EOL] ax . set_title ( [string] ) [EOL] line , = ax . plot ( [ [number] ] , [ [number] ] ) [comment] [EOL] linebuilder = LineBuilder ( line ) [EOL] [EOL] plt . show ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $mpl_lineseg.LineBuilder$ 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Any , Tuple [EOL] import typing [EOL] import matplotlib [EOL] matplotlib . use ( [string] ) [EOL] import matplotlib . pyplot as plt [EOL] import seaborn as sbs [EOL] [EOL] sbs . set_style ( [string] ) [EOL] import numpy as np [EOL] from numpy . random import rand [EOL] [EOL] x , y , c , s = rand ( [number] , [number] ) [EOL] [EOL] def remove_annotations ( ) : [EOL] for child in plt . gca ( ) . get_children ( ) : [EOL] if isinstance ( child , matplotlib . text . Annotation ) : [EOL] child . remove ( ) [EOL] [EOL] def add_annotation ( x , y ) : [EOL] text_location = ( x - [number] , y - [number] ) [EOL] message = [string] . format ( x , y ) [EOL] ann = plt . gca ( ) . annotate ( message , xy = ( x , y ) , xytext = text_location , bbox = dict ( facecolor = [string] , alpha = [number] ) ) [EOL] return ann [EOL] [EOL] def on_pick ( event ) : [EOL] ind = event . ind [EOL] x_val = np . take ( x , ind ) [ [number] ] [EOL] y_val = np . take ( y , ind ) [ [number] ] [EOL] [comment] [EOL] old_ann = add_annotation ( x_val , y_val ) [EOL] plt . draw ( ) [EOL] [comment] [EOL] [EOL] plt . scatter ( x , y , [number] * s , c , picker = [number] ) [EOL] fig = plt . gcf ( ) [EOL] fig . canvas . mpl_connect ( [string] , on_pick ) [EOL] [comment] [EOL] [comment] [EOL] [EOL] plt . show ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List [EOL] import typing [EOL] ctemps = [ - [number] , [number] , [number] , [number] , [number] ] [EOL] [EOL] fruits = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] import builtins [EOL] from typing import List , Generator [EOL] import typing [EOL] d1 = dict ( ) [comment] [EOL] d2 = { [string] : [string] , [string] : [string] } [EOL] d3 = { } [EOL] [EOL] print ( d2 , [string] ) [EOL] print ( d2 . keys ( ) ) [EOL] print ( d2 . values ( ) ) [EOL] [EOL] for abbr , airport in d2 . items ( ) : [EOL] print ( abbr , airport ) [EOL] print ( ) [EOL] [EOL] for abbr , airport in sorted ( d2 . items ( ) ) : [EOL] print ( abbr , airport ) [EOL] [EOL] x = list ( d2 . keys ( ) ) [EOL] print ( x ) [EOL] [EOL] ds = [ [number] , [number] , [number] ] [EOL] [EOL] t1 = ( i * [number] for i in ds ) [EOL] t2 = ( i + [number] for i in t1 ) [EOL] t3 = ( i ** [number] for i in t2 ) [EOL] [EOL] print ( t3 ) [EOL] [EOL] for i in t3 : [EOL] print ( i ) [EOL] [EOL] [EOL] for abbr , airport in sorted ( d2 . items ( ) ) : [EOL] print ( abbr , airport ) [EOL] [EOL] [EOL] d2 [ [string] ] = [string] [EOL] print ( d2 ) [EOL] d2 [ [string] ] = [string] [EOL] print ( d2 ) [EOL] [EOL] [EOL] del d2 [ [string] ] [EOL] [EOL] print ( d2 ) [EOL] [EOL] print ( d2 [ [string] ] ) [EOL] [EOL] [EOL] print ( d2 . get ( [string] ) ) [EOL] [EOL] print ( d2 . get ( [string] , [string] ) ) [EOL] [EOL] x = None [EOL] [EOL] print ( x ) [EOL] print ( type ( None ) ) [EOL] print ( bool ( None ) ) [EOL] [EOL] print ( d2 . setdefault ( [string] , [string] ) ) [EOL] [EOL] print ( d2 ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Generator[builtins.int,None,None]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Generator[builtins.int,None,None]$ 0 0 0 0 0 0 0 0 $typing.Generator[builtins.int,None,None]$ 0 0 $typing.Generator[builtins.int,None,None]$ 0 0 0 0 0 0 0 0 $typing.Generator[builtins.int,None,None]$ 0 0 0 0 0 $typing.Generator[builtins.int,None,None]$ 0 0 0 0 0 0 $typing.Generator[builtins.int,None,None]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from nnl . bettis . misc . bettislib import spam , ham [EOL] [EOL] spam ( ) [EOL] ham ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] knight_name = input ( [string] ) [EOL] knight_quest = input ( [string] ) [EOL] [EOL] print ( [string] . format ( knight_name , knight_quest ) ) [EOL] [EOL]	0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0
[comment] [EOL] from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] from pprint import pprint [EOL] [EOL] FILE_NAME = [string] [EOL] [EOL] def main ( ) : [EOL] [docstring] [EOL] data = read_data ( FILE_NAME ) [EOL] print_data ( data ) [EOL] [EOL] def read_data ( file_name ) : [EOL] [docstring] [EOL] all_knights = [ ] [EOL] with open ( file_name ) as knights_in : [EOL] for line in knights_in : [EOL] fields = line . rstrip ( ) . split ( [string] ) [EOL] all_knights . append ( fields ) [EOL] [EOL] return all_knights [EOL] [EOL] def print_data ( data ) : [EOL] [docstring] [EOL] pprint ( data ) [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from nnl . bettis . misc . bettislib import * [EOL] [EOL] spam ( ) [EOL] ham ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Any [EOL] import mpl_draggable_rectangle [EOL] import typing [EOL] import numpy as np [EOL] import matplotlib . pyplot as plt [EOL] [EOL] class DraggableRectangle : [EOL] def __init__ ( self , rect ) : [EOL] self . rect = rect [EOL] self . press = None [EOL] [EOL] def connect ( self ) : [EOL] [docstring] [EOL] self . cidpress = self . rect . figure . canvas . mpl_connect ( [string] , self . on_press ) [EOL] self . cidrelease = self . rect . figure . canvas . mpl_connect ( [string] , self . on_release ) [EOL] self . cidmotion = self . rect . figure . canvas . mpl_connect ( [string] , self . on_motion ) [EOL] [EOL] def on_press ( self , event ) : [EOL] [docstring] [EOL] if event . inaxes != self . rect . axes : return [EOL] [EOL] contains , attrd = self . rect . contains ( event ) [EOL] if not contains : return [EOL] print ( [string] , self . rect . xy ) [EOL] x0 , y0 = self . rect . xy [EOL] self . press = x0 , y0 , event . xdata , event . ydata [EOL] [EOL] def on_motion ( self , event ) : [EOL] [docstring] [EOL] if self . press is None : return [EOL] if event . inaxes != self . rect . axes : return [EOL] x0 , y0 , xpress , ypress = self . press [EOL] dx = event . xdata - xpress [EOL] dy = event . ydata - ypress [EOL] [comment] [EOL] [comment] [EOL] self . rect . set_x ( x0 + dx ) [EOL] self . rect . set_y ( y0 + dy ) [EOL] [EOL] self . rect . figure . canvas . draw ( ) [EOL] [EOL] [EOL] def on_release ( self , event ) : [EOL] [docstring] [EOL] self . press = None [EOL] self . rect . figure . canvas . draw ( ) [EOL] [EOL] def disconnect ( self ) : [EOL] [docstring] [EOL] self . rect . figure . canvas . mpl_disconnect ( self . cidpress ) [EOL] self . rect . figure . canvas . mpl_disconnect ( self . cidrelease ) [EOL] self . rect . figure . canvas . mpl_disconnect ( self . cidmotion ) [EOL] [EOL] fig = plt . figure ( ) [EOL] ax = fig . add_subplot ( [number] ) [EOL] rects = ax . bar ( range ( [number] ) , [number] * np . random . rand ( [number] ) ) [EOL] drs = [ ] [EOL] for rect in rects : [EOL] dr = DraggableRectangle ( rect ) [EOL] dr . connect ( ) [EOL] drs . append ( dr ) [EOL] [EOL] plt . show ( ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 $mpl_draggable_rectangle.DraggableRectangle$ 0 0 0 0 0 0 $mpl_draggable_rectangle.DraggableRectangle$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $mpl_draggable_rectangle.DraggableRectangle$ 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] from nnl . bettis . misc import bettislib [EOL] [EOL] bettislib . spam ( ) [EOL] bettislib . ham ( ) [EOL] bettislib . _eggs ( ) [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] import sys [EOL] [EOL] temp_str = input ( [string] ) [EOL] c = float ( temp_str ) [EOL] f = ( ( [number] * c ) / [number] ) + [number] [EOL] [EOL] print ( [string] . format ( c , f ) ) [EOL] [EOL]	0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.str$ 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0
[comment] [EOL] [EOL] x = [number] [EOL] [EOL] y = x or [number] [EOL] [EOL] print ( y ) [EOL] [EOL] x = [number] [EOL] y = x or [number] [EOL] [EOL] print ( y ) [EOL] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0
[comment] [EOL] import unittest [EOL] import sys [EOL] from president import President [EOL] [EOL] class TestPresident ( unittest . TestCase ) : [EOL] @ classmethod def setUpClass ( cls ) : [EOL] pass [EOL] [EOL] @ classmethod def tearDownClass ( cls ) : [EOL] pass [EOL] [EOL] def setUp ( self ) : [EOL] self . pres = President ( [number] ) [EOL] [EOL] @ unittest . skipIf ( sys . platform == [string] , [string] ) def test_gw_first_name_george ( self ) : [EOL] self . assertEqual ( self . pres . first_name , [string] , [string] ) [EOL] [EOL] def test_gw_last_name_washington ( self ) : [EOL] self . assertEqual ( self . pres . last_name , [string] ) [EOL] [EOL] def tearDown ( self ) : [EOL] pass [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Any [EOL] import typing [EOL] fruits = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] print ( len ( fruits ) ) [EOL] print ( fruits [ [number] ] , fruits [ [number] ] , fruits [ len ( fruits ) - [number] ] ) [EOL] print ( fruits [ [number] : [number] ] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] print ( fruits [ [number] : ] ) [EOL] [EOL] [EOL] nums = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] [EOL] n = [ float ( i ) for i in nums if i > [number] if i < [number] ] [EOL] print ( n ) [EOL] [EOL] e = [ ] [EOL] [EOL] e = list ( ) [EOL] [EOL] words = [string] . split ( ) [EOL] [EOL] e . append ( [string] ) [EOL] e . append ( [string] ) [EOL] e . append ( [string] ) [EOL] [EOL] print ( e ) [EOL] [EOL] e . insert ( [number] , [string] ) [EOL] e . insert ( - [number] , [string] ) [EOL] [EOL] print ( e ) [EOL] del e [ [number] ] [EOL] print ( e ) [EOL] [EOL] e . remove ( [string] ) [EOL] print ( e ) [EOL] [EOL] x = e . pop ( [number] ) [EOL] print ( x ) [EOL] print ( e ) [EOL] [EOL] more_creatures = [ [string] , [string] , [string] ] [EOL] [EOL] e . extend ( more_creatures ) [EOL] [EOL] print ( e ) [EOL] print ( ) [EOL] [EOL] for creature in e : [EOL] print ( creature , len ( creature ) , creature . upper ( ) ) [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.float]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.float]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] import sys [EOL] [EOL] c = float ( sys . argv [ [number] ] ) [EOL] [EOL] f = ( ( [number] * c ) / [number] ) + [number] [EOL] [EOL] print ( [string] . format ( c , f ) ) [EOL] [EOL]	0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0
[comment] [EOL] [EOL] import inheritance_examples [EOL] class Spam ( ) : [EOL] def bark ( self ) : [EOL] print ( [string] ) [EOL] [EOL] class Ham ( Spam ) : [EOL] pass [EOL] [EOL] print ( Ham . mro ( ) ) [EOL] h = Ham ( ) [EOL] h . bark ( ) [EOL] [EOL] def doit ( spam ) : [EOL] [comment] [EOL] if isinstance ( spam , Spam ) : [EOL] print ( [string] ) [EOL] else : [EOL] print ( [string] ) [EOL] [EOL] s = Spam ( ) [EOL] doit ( s ) [EOL] doit ( h ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $inheritance_examples.Ham$ 0 0 0 0 0 $inheritance_examples.Ham$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $inheritance_examples.Spam$ 0 0 0 0 0 0 0 $inheritance_examples.Spam$ 0 0 0 0 $inheritance_examples.Ham$ 0 0
[comment] [EOL] [EOL] import fake_string [EOL] class MyString ( str ) : [EOL] def startswith ( self , * args ) : [EOL] return [number] [EOL] [EOL] [EOL] s = MyString ( ) [EOL] [EOL] print ( s . startswith ( [string] ) ) [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $fake_string.MyString$ 0 0 0 0 0 0 0 0 $fake_string.MyString$ 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] i = [number] [EOL] while i < [number] : [EOL] print ( i ) [EOL] i += [number] [EOL] [EOL] while True : [EOL] name = input ( [string] ) [EOL] if name == [string] : [EOL] break [EOL] if name == [string] : [EOL] continue [EOL] print ( [string] . format ( name ) ) [EOL]	0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] def trimmed ( file_name ) : [EOL] with open ( file_name ) as file_in : [EOL] for line in file_in : [EOL] line = line . rstrip ( [string] ) [EOL] yield line [comment] [EOL] [EOL] t = trimmed ( [string] ) [EOL] for line in t : [comment] [EOL] print ( line ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0
[comment] [EOL] import os [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] with os . popen ( [string] ) as netstat_in : [EOL] for line in netstat_in : [EOL] if [string] in line : [EOL] print ( line , end = [string] ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] [docstring] [EOL] import numpy as np [EOL] [EOL] a = np . arange ( [number] ) [EOL] [EOL] print ( a ) [EOL] print ( ) [EOL] [EOL] a . shape = ( [number] , [number] ) [EOL] [EOL] print ( a ) [EOL] print ( ) [EOL] [EOL] a . shape = ( [number] , [number] ) [EOL] [EOL] print ( a ) [EOL] print ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any , List [EOL] import typing [EOL] import os [EOL] [EOL] path = os . getenv ( [string] ) [EOL] paths = path . split ( os . pathsep ) [EOL] [EOL] for path_dir in paths : [EOL] all_files = os . listdir ( path_dir ) [EOL] print ( [string] . format ( path_dir , len ( all_files ) ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0
	0
[comment] [EOL] [EOL] from typing import Any , List [EOL] import typing [EOL] import numpy as np [EOL] [EOL] VALUES = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ] [EOL] [EOL] a = np . array ( VALUES ) [EOL] [EOL] values_x_3 = a * [number] [EOL] [EOL] print ( values_x_3 )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[builtins.float]$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] [docstring] [EOL] import numpy as np [EOL] [EOL] a = np . linspace ( [number] , [number] , num = [number] ) [EOL] [EOL] a . shape = ( [number] , [number] , [number] ) [EOL] [EOL] a *= [number] [EOL] [EOL] print ( a )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0
[EOL] from typing import List [EOL] import typing [EOL] from datetime import date [EOL] [EOL] class President ( ) : [EOL] [EOL] def __init__ ( self , index ) : [EOL] self . _get_data ( index ) [EOL] [EOL] @ staticmethod def _mkdate ( raw_date ) : [EOL] if raw_date != [string] : [EOL] raw_year , raw_month , raw_day = raw_date . split ( [string] ) [EOL] d = date ( int ( raw_year ) , int ( raw_month ) , int ( raw_day ) ) [EOL] else : [EOL] d = None [EOL] [EOL] return d [EOL] [EOL] [EOL] def _get_data ( self , index ) : [EOL] with open ( [string] ) as pfile : [EOL] for line in pfile : [EOL] flds = line . split ( [string] ) [EOL] if int ( flds [ [number] ] ) == int ( index ) : [EOL] self . _lname = flds [ [number] ] [EOL] [EOL] self . _fname = flds [ [number] ] [EOL] [EOL] self . _bdate = self . _mkdate ( flds [ [number] ] ) [EOL] self . _ddate = self . _mkdate ( flds [ [number] ] ) [EOL] [EOL] self . _bplace = flds [ [number] ] [EOL] self . _bstate = flds [ [number] ] [EOL] [EOL] self . _ts_date = self . _mkdate ( flds [ [number] ] ) [EOL] self . _te_date = self . _mkdate ( flds [ [number] ] ) [EOL] [EOL] self . _party = flds [ [number] ] [EOL] [EOL] break [EOL] [EOL] @ property def last_name ( self ) : [EOL] return self . _lname [EOL] [EOL] @ property def first_name ( self ) : [EOL] return self . _fname [EOL] [EOL] @ property def birth_date ( self ) : [EOL] return self . _bdate [EOL] [EOL] @ property def death_date ( self ) : [EOL] return self . _ddate [EOL] [EOL] @ property def birth_place ( self ) : [EOL] return self . _bplace [EOL] [EOL] @ property def birth_state ( self ) : [EOL] return self . _bstate [EOL] [EOL] @ property def term_start_date ( self ) : [EOL] return self . _ts_date [EOL] [EOL] @ property def term_end_date ( self ) : [EOL] return self . _te_date [EOL] [EOL] @ property def party ( self ) : [EOL] return self . _party [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] [docstring] [EOL] import Image [EOL] [EOL] im = Image . open ( [string] ) [EOL] [EOL] im_flipped = im . transpose ( Image . FLIP_LEFT_RIGHT ) [EOL] im_flipped . save ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import unittest [EOL] from president import President [EOL] [EOL] class TestPresident ( unittest . TestCase ) : [EOL] [EOL] def test_president_one_last_name_is_washington ( self ) : [EOL] p = President ( [number] ) [EOL] self . assertEqual ( p . last_name , [string] ) [EOL] [EOL] [comment] [EOL] [EOL] if __name__ == [string] : [EOL] [EOL] unittest . main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import List , Any [EOL] import typing [EOL] import sys [EOL] try : [EOL] import lxml . etree as ET [EOL] except ImportError : [EOL] import xml . etree . ElementTree as ET [EOL] [EOL] with open ( [string] ) as WORDS : [EOL] xwords = [ word [ : - [number] ] for word in WORDS if word . startswith ( [string] ) ] [EOL] [EOL] root = ET . Element ( [string] ) [EOL] for word in xwords : [EOL] word_element = ET . Element ( [string] ) [EOL] word_element . text = word [EOL] root . append ( word_element ) [EOL] [EOL] tree = ET . ElementTree ( root ) [EOL] [EOL] if sys . modules [ [string] ] : [EOL] tree . write ( [string] , pretty_print = True ) [EOL] else : [EOL] tree . write ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List [EOL] import typing [EOL] name_slice = slice ( [number] , [number] ) [EOL] bd_slice = slice ( [number] , [number] ) [EOL] [EOL] with open ( [string] ) as PRES : [EOL] for line in PRES : [EOL] flds = line . split ( [string] ) [EOL] names = flds [ name_slice ] [EOL] bd = flds [ bd_slice ] [EOL] print ( ( [string] . format ( names , bd ) ) )	0 0 0 0 0 0 0 0 0 0 0 $builtins.slice$ 0 0 0 0 0 0 0 0 $builtins.slice$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 $builtins.slice$ 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 $builtins.slice$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 $typing.List[builtins.str]$ 0 0 0
[comment] [EOL] [EOL] import sys [EOL] [EOL] try : [EOL] c = float ( input ( [string] ) ) [EOL] except ValueError as e : [EOL] print ( [string] , e ) [EOL] sys . exit ( [number] ) [EOL] [EOL] f = ( ( [number] * c ) / [number] ) + [number] [EOL] [EOL] print ( [string] . format ( c , f ) ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0
[comment] [EOL] [EOL] import sys [EOL] [EOL] try : [EOL] c = float ( sys . argv [ [number] ] ) [EOL] except ValueError as e : [EOL] print ( [string] , e ) [EOL] sys . exit ( [number] ) [EOL] [EOL] f = ( ( [number] * c ) / [number] ) + [number] [EOL] [EOL] print ( [string] . format ( c , f ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0
[comment] [EOL] from typing import Any , Tuple [EOL] import typing [EOL] [docstring] [EOL] import Image [EOL] [EOL] im = Image . open ( [string] ) [EOL] [EOL] size = [number] , [number] [EOL] im . thumbnail ( size ) [EOL] im . save ( [string] ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Any [EOL] import typing [EOL] from . pres_amb import get_info , get_oldest , get_youngest [EOL] [EOL] print ( [string] ) [EOL] for k , v in list ( get_info ( [number] ) . items ( ) ) : [EOL] print ( ( k , v ) ) [EOL] print ( ) [EOL] print ( [string] ) [EOL] for k , v in list ( get_info ( [number] ) . items ( ) ) : [EOL] print ( ( k , v ) ) [EOL] print ( ) [EOL] [EOL] oldster = get_oldest ( ) [EOL] print ( ( [string] , oldster [ [string] ] , oldster [ [string] ] ) ) [EOL] [EOL] youngster = get_youngest ( ) [EOL] print ( ( [string] , youngster [ [string] ] , youngster [ [string] ] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List [EOL] import typing [EOL] pres_lname = input ( [string] ) [EOL] [EOL] with open ( [string] ) as PRES : [EOL] for rec in PRES : [EOL] flds = rec . split ( [string] ) [EOL] if flds [ [number] ] . lower ( ) . startswith ( pres_lname . lower ( ) ) : [EOL] if flds [ [number] ] is None : [EOL] alive = True [EOL] else : [EOL] alive = False [EOL] [EOL] print ( [string] . format ( flds [ [number] ] , flds [ [number] ] ) ) [EOL] print ( [string] , flds [ [number] ] ) [EOL] print ( [string] , end = [string] ) [EOL] if alive : [EOL] print ( [string] ) [EOL] else : [EOL] print ( flds [ [number] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Any , Dict [EOL] import typing [EOL] from datetime import date , timedelta [EOL] [EOL] def mkdate ( raw_date ) : [EOL] if raw_date != [string] : [EOL] raw_year , raw_month , raw_day = raw_date . split ( [string] ) [EOL] d = date ( int ( raw_year ) , int ( raw_month ) , int ( raw_day ) ) [EOL] else : [EOL] d = None [EOL] [EOL] return d [EOL] [EOL] def get_info ( index ) : [EOL] pres_data = { } [EOL] with open ( [string] ) as pres_in : [EOL] for line in pres_in : [EOL] flds = line [ : - [number] ] . split ( [string] ) [EOL] if int ( flds [ [number] ] ) == index : [EOL] pres_data [ [string] ] = flds [ [number] ] [EOL] pres_data [ [string] ] = flds [ [number] ] [EOL] [EOL] pres_data [ [string] ] = mkdate ( flds [ [number] ] ) [EOL] pres_data [ [string] ] = mkdate ( flds [ [number] ] ) [EOL] [EOL] pres_data [ [string] ] = flds [ [number] ] [EOL] pres_data [ [string] ] = flds [ [number] ] [EOL] [EOL] pres_data [ [string] ] = mkdate ( flds [ [number] ] ) [EOL] pres_data [ [string] ] = mkdate ( flds [ [number] ] ) [EOL] [EOL] pres_data [ [string] ] = flds [ [number] ] [EOL] [EOL] break [EOL] [EOL] return pres_data [EOL] [EOL] def get_all_data ( ) : [EOL] all_data = [ ] [EOL] for i in range ( [number] , [number] ) : [EOL] all_data . append ( get_info ( i ) ) [EOL] return all_data [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] [docstring] [EOL] import pandas as pd [EOL] [EOL] df = pd . read_csv ( [string] ) [EOL] [EOL] print ( df ) [EOL] print ( ) [EOL] [EOL] df2 = df [ df [ [string] ] >= [number] ] [EOL] print ( df2 ) [EOL] print ( ) [EOL] [EOL] print ( df2 . values ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0
[comment] [EOL] from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] from random import random [EOL] import numpy as np [EOL] import pandas as pd [EOL] [EOL] cols = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] raw_values = [ random ( ) * [number] for i in range ( [number] ) ] [EOL] [EOL] raw_array = np . array ( raw_values ) [EOL] raw_array . shape = ( [number] , [number] ) [EOL] [EOL] df = pd . core . frame . DataFrame ( raw_array , columns = cols ) [EOL] [EOL] print ( df ) [EOL] print ( ) [EOL] [EOL] print ( df [ [ [string] , [string] ] ] ) [EOL] print ( ) [EOL] [EOL] print ( df * [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[builtins.float]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0
from setuptools import setup [EOL] [EOL] setup ( name = [string] , version = [string] , description = [string] , long_description = [string] , author = [string] , author_email = [string] , license = [string] , url = [string] , py_modules = [ [string] ] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] print ( [string] ) [EOL]	0 0 0 0 0 0 0 0
[comment] [EOL] [docstring] [EOL] [EOL] [EOL] def spam ( ) : [EOL] [docstring] [EOL] print ( [string] ) [EOL] [EOL] def ham ( ) : [EOL] [docstring] [EOL] print ( [string] ) [EOL] [EOL] def _eggs ( ) : [EOL] [docstring] [EOL] print ( [string] ) [EOL] [EOL] def doit ( x , y ) : [EOL] [docstring] [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL]	0 0
[comment] [EOL] [EOL] from scipy import constants as K [EOL] [EOL] print ( [string] . format ( K . pi ) ) [EOL] print ( [string] . format ( K . Planck ) ) [EOL] print ( [string] . format ( K . c ) ) [EOL] [EOL] print ( [string] . format ( K . value ( [string] ) ) ) [EOL] print ( [string] . format ( K . unit ( [string] ) ) )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import sys [EOL] import os [EOL] [EOL] if sys . platform != [string] : [EOL] print ( [string] ) [EOL] sys . exit ( [number] ) [EOL] [EOL] [comment] [EOL] os . system ( [string] ) [EOL] [EOL] [comment] [EOL] d = os . popen ( [string] ) [EOL] [EOL] for entry in d : [EOL] print ( entry , end = [string] ) [EOL] [EOL] [comment] [EOL] hostname = os . popen ( [string] ) . read ( ) [ : - [number] ] [EOL] [EOL] print ( [string] , hostname ) [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0
[comment] [EOL] [EOL] from typing import List [EOL] import typing [EOL] fruits = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] sorted_fruits = sorted ( fruits , key = lambda e : e . lower ( ) ) [EOL] [EOL] print ( [string] . join ( sorted_fruits ) ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0
[comment] [EOL] [comment] [EOL] from typing import Any [EOL] import typing [EOL] import openpyxl as px [EOL] [EOL] def main ( ) : [EOL] [docstring] [EOL] wb = px . load_workbook ( [string] ) [EOL] ws = wb . get_sheet_by_name ( [string] ) [EOL] [EOL] update_last_names ( ws ) [EOL] [EOL] wb . save ( [string] ) [EOL] [EOL] def update_last_names ( ws ) : [EOL] [docstring] [EOL] for row in ws [ [string] ] : [EOL] cell = row [ [number] ] [EOL] cell . value = cell . value . upper ( ) [EOL] cell . font = px . styles . Font ( color = [string] , name = [string] ) [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] import numpy as np [EOL] [EOL] m1 = np . matrix ( [ [ [number] , [number] , [number] ] , [ [number] , [number] , [number] ] ] ) [EOL] [EOL] m2 = np . matrix ( [ [ [number] , [number] ] , [ [number] , [number] ] , [ [number] , [number] ] ] ) [EOL] [EOL] print ( [string] , m1 ) [EOL] print ( ) [EOL] [EOL] print ( [string] , m2 ) [EOL] print ( ) [EOL] [EOL] print ( [string] , m1 * [number] ) [EOL] print ( ) [EOL] [EOL] print ( [string] , m1 * m2 ) [EOL] print ( ) [EOL] [EOL] print ( [string] , m1 . A . transpose ( ) ) [EOL] print ( ) [EOL] [EOL] print ( [string] , m1 . A . transpose ( ) * m2 . A )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] import h5py [EOL] [EOL] H5_FILE = [string] [EOL] [EOL] with h5py . File ( H5_FILE ) as hfile : [EOL] pass [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] [docstring] [EOL] import numpy as np [EOL] from pandas import DataFrame [EOL] from printheader import print_header [EOL] [EOL] dataset1 = np . arange ( [number] ) . reshape ( ( [number] , [number] ) ) [EOL] [EOL] df1 = DataFrame ( dataset1 , columns = [ [string] , [string] , [string] ] , index = [ [string] , [string] , [string] ] ) [EOL] [EOL] dataset2 = np . arange ( [number] ) . reshape ( ( [number] , [number] ) ) [EOL] [EOL] df2 = DataFrame ( dataset2 , columns = [ [string] , [string] , [string] ] , index = [ [string] , [string] , [string] , [string] ] ) [EOL] [EOL] print_header ( [string] ) [EOL] print ( df1 ) [EOL] print ( ) [EOL] [EOL] print_header ( [string] ) [EOL] print ( df2 ) [EOL] print ( ) [EOL] [EOL] print_header ( [string] ) [EOL] print ( df1 + df2 ) [EOL] [EOL] print_header ( [string] ) [EOL] print ( df1 . add ( df2 , fill_value = [number] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
[comment] [EOL] [EOL] with open ( [string] ) as f : [EOL] for line in f : [EOL] print ( line [ : - [number] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] import unittest [EOL] [EOL] class TestSpam ( unittest . TestCase ) : [EOL] [EOL] def test_one_is_one ( self ) : [EOL] self . assertEqual ( [number] , [number] ) [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any , Tuple [EOL] import typing [EOL] from PIL import Image [EOL] [EOL] size = [number] , [number] [EOL] im = Image . open ( [string] ) [EOL] im . thumbnail ( size ) [EOL] im . save ( [string] ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Tuple[builtins.int,builtins.int]$ 0 0 $typing.Any$ 0 0 0 0 0 0 0
[comment] [EOL] [EOL] import unittest [EOL] [EOL] class TestEggs ( unittest . TestCase ) : [EOL] [EOL] def test_two_plus_two_is_four ( self ) : [EOL] self . assertEqual ( [number] + [number] , [number] ) [EOL] [EOL] if __name__ == [string] : [EOL] unittest . main ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import json [EOL] with open ( [string] ) as solar_in : [EOL] solar = json . load ( solar_in ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] print ( solar [ [string] ] ) [EOL] print ( [string] * [number] ) [EOL] print ( solar [ [string] ] [ [number] ] [ [string] ] ) [EOL] print ( [string] * [number] ) [EOL] for planet in solar [ [string] ] + solar [ [string] ] : [EOL] print ( planet [ [string] ] ) [EOL] [EOL] print ( [string] * [number] ) [EOL] for group in solar : [EOL] if group . endswith ( [string] ) : [EOL] for planet in solar [ group ] : [EOL] print ( planet [ [string] ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] import time [EOL] import sys [EOL] [EOL] import time [EOL] [EOL] right_now = time . time ( ) [EOL] print ( [string] . format ( right_now ) ) [EOL] [EOL] time . sleep ( [number] ) [EOL] [EOL] now_asc = time . asctime ( ) [EOL] print ( [string] , now_asc ) [EOL] now_ctime = time . ctime ( ) [EOL] print ( [string] , now_ctime ) [EOL] [EOL] time_str = [string] [EOL] print ( [string] , time_str ) [EOL] [EOL] parsed_time = time . strptime ( time_str , [string] ) [EOL] print ( [string] , parsed_time ) [EOL] [EOL] print ( [string] , time . strftime ( [string] , parsed_time ) ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $time.struct_time$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $time.struct_time$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $time.struct_time$ 0 0 0 0
[comment] [EOL] [EOL] s = ( [string] [string] [string] [string] [string] [string] ) [EOL] [EOL] print ( len ( s ) ) [EOL] print ( s )	0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] from pandas . core . frame import Index , Series , DataFrame [EOL] from printheader import print_header [EOL] [EOL] index1 = Index ( [ [string] , [string] , [string] ] , name = [string] ) [EOL] index2 = Index ( [ [string] , [string] , [string] ] ) [EOL] index3 = Index ( [ [string] , [string] , [string] ] ) [EOL] index4 = Index ( [ [string] , [string] , [string] ] , name = [string] ) [EOL] [EOL] print_header ( [string] , [number] ) [EOL] print ( index1 ) [EOL] print ( index2 ) [EOL] print ( index3 ) [EOL] print ( ) [EOL] [EOL] print_header ( [string] , [number] ) [EOL] [comment] [EOL] print ( index2 & index3 ) [EOL] print ( index2 . intersection ( index3 ) ) [EOL] print ( ) [EOL] [EOL] print_header ( [string] , [number] ) [EOL] [comment] [EOL] print ( index2 | index3 ) [EOL] print ( index2 . union ( index3 ) ) [EOL] print ( ) [EOL] [EOL] print_header ( [string] , [number] ) [EOL] print ( index1 . difference ( index3 ) ) [EOL] print ( ) [EOL] [EOL] print_header ( [string] , [number] ) [EOL] series1 = Series ( [ [number] , [number] , [number] ] , index = index1 ) [EOL] print ( series1 ) [EOL] print ( ) [EOL] [EOL] print_header ( [string] , [number] ) [EOL] dataframe1 = DataFrame ( [ ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) ] , index = index1 , columns = index4 ) [EOL] print ( dataframe1 ) [EOL] print ( ) [EOL] [EOL] print_header ( [string] , [number] ) [EOL] dataframe2 = DataFrame ( [ ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) ] , index = index4 , columns = index1 ) [EOL] print ( dataframe2 ) [EOL] print ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
[comment] [EOL] [EOL] import calendar [EOL] import sys [EOL] import calendar [EOL] [EOL] tcal = calendar . TextCalendar ( ) [EOL] print ( tcal . formatmonth ( [number] , [number] ) ) [EOL] [EOL] print ( ) [EOL] [EOL] hcal = calendar . HTMLCalendar ( ) [EOL] print ( hcal . formatmonth ( [number] , [number] ) ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 $calendar.TextCalendar$ 0 0 0 0 0 0 0 0 0 $calendar.TextCalendar$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $calendar.HTMLCalendar$ 0 0 0 0 0 0 0 0 0 $calendar.HTMLCalendar$ 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] import numpy as np [EOL] import scipy as sp [EOL] [EOL] def set_default ( value , limit , default ) : [EOL] if value > limit : [EOL] value = default [EOL] [EOL] return value [EOL] [EOL] [EOL] raw_samples = np . array ( [ [number] , [number] , [number] , [number] , [number] , [number] ] ) [EOL] [EOL] try : [EOL] print ( [string] ) [EOL] norm_samples = set_default ( raw_samples , [number] , [number] ) [EOL] except ValueError as err : [EOL] print ( [string] , err ) [EOL] else : [EOL] print ( norm_samples ) [EOL] finally : [EOL] print ( ) [EOL] [EOL] set_default_vect = sp . vectorize ( set_default ) [EOL] try : [EOL] print ( [string] ) [EOL] norm_samples = set_default_vect ( raw_samples , [number] , [number] ) [EOL] except ValueError as err : [EOL] print ( [string] , err ) [EOL] else : [EOL] print ( norm_samples ) [EOL] finally : [EOL] print ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Tuple [EOL] import _csv [EOL] import typing [EOL] [docstring] [EOL] import csv [EOL] [EOL] data = ( ( [string] , [number] , [string] ) , ( [string] , [number] , [string] ) , ( [string] , [number] , [string] ) , ) [EOL] [EOL] with open ( [string] , [string] ) as STUFF : [EOL] wtr = csv . writer ( STUFF ) [EOL] for row in data : [EOL] wtr . writerow ( row ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.int,builtins.str],typing.Tuple[builtins.str,builtins.int,builtins.str],typing.Tuple[builtins.str,builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_csv._writer$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[typing.Tuple[builtins.str,builtins.int,builtins.str],typing.Tuple[builtins.str,builtins.int,builtins.str],typing.Tuple[builtins.str,builtins.int,builtins.str]]$ 0 0 $_csv._writer$ 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Union [EOL] import typing [EOL] fruits = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] values = [ [number] , [number] , [number] , [number] , [string] , [ [string] , [string] , [string] ] ] [EOL] [EOL] ufruits = [ fruit . upper ( ) for fruit in fruits ] [EOL] [EOL] afruits = [ fruit for fruit in fruits if fruit . startswith ( [string] ) ] [EOL] [EOL] doubles = [ v * [number] for v in values ] [EOL] [EOL] [EOL] print ( [string] , [string] . join ( ufruits ) ) [EOL] print ( [string] , [string] . join ( afruits ) ) [EOL] print ( [string] , end = [string] ) [EOL] for d in doubles : [EOL] print ( d , end = [string] ) [EOL] print ( ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Union[typing.List[builtins.str],builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Union[typing.List[builtins.str],builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 $typing.List[typing.Union[typing.List[builtins.str],builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Union[typing.List[builtins.str],builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] HAS_LXML = False [EOL] [EOL] try : [EOL] import lxml . etree as ET [EOL] HAS_LXML = True [EOL] except ImportError : [EOL] import xml . etree . ElementTree as ET [EOL] [EOL] def main ( ) : [EOL] [docstring] [EOL] root = build_tree ( ) [EOL] doc = ET . ElementTree ( root ) [EOL] print_doc ( root ) [EOL] write_doc ( doc ) [EOL] [EOL] def build_tree ( ) : [EOL] [docstring] [EOL] root = ET . Element ( [string] ) [EOL] [EOL] for movie in ( [string] , [string] ) : [EOL] movie_element = ET . Element ( [string] ) [EOL] movie_element . text = movie [EOL] root . append ( movie_element ) [EOL] [EOL] movie = ET . Element ( [string] , director = [string] ) [EOL] root . append ( movie ) [EOL] movie . text = [string] [EOL] [EOL] movie = ET . Element ( [string] , director = [string] ) [EOL] movie . text = [string] [EOL] actor1 = ET . Element ( [string] ) [EOL] actor1 . text = [string] [EOL] movie . append ( actor1 ) [EOL] actor2 = ET . Element ( [string] ) [EOL] actor2 . text = [string] [EOL] movie . append ( actor2 ) [EOL] root . append ( movie ) [EOL] [EOL] movie3 = ET . Element ( [string] , director = [string] ) [EOL] movie3 . text = [string] [EOL] root . append ( movie3 ) [EOL] [EOL] return root [EOL] [EOL] def print_doc ( root ) : [EOL] [docstring] [EOL] if HAS_LXML : [EOL] print ( ET . tostring ( root , pretty_print = True ) . decode ( ) ) [EOL] else : [EOL] print ( ET . tostring ( root ) . decode ( ) ) [EOL] [EOL] def write_doc ( doc ) : [EOL] [docstring] [EOL] if HAS_LXML : [EOL] doc . write ( [string] , pretty_print = True ) [EOL] else : [EOL] doc . write ( [string] ) [EOL] [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Tuple , Dict [EOL] import typing [EOL] import os [EOL] [EOL] values = ( [number] , [number] , [number] , [number] , [number] ) [EOL] d1 = { v : v ** [number] for v in values } [EOL] print ( d1 ) [EOL] print ( ) [EOL] [EOL] DIR = [string] [EOL] files = os . listdir ( DIR ) [EOL] file_sizes = { f : os . path . getsize ( DIR + f ) for f in files } [EOL] print ( file_sizes ) [EOL] print ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int,builtins.int,builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.int,builtins.int,builtins.int,builtins.int,builtins.int]$ 0 0 0 0 $typing.Dict[builtins.int,builtins.int]$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $builtins.str$ 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.Dict[builtins.str,builtins.int]$ 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import scipy [EOL] print ( dir ( scipy ) ) [EOL] print ( scipy . version . short_version ) [EOL] from scipy import weave [EOL] import numpy as np [EOL] [EOL] def times_n ( seq , n ) : [EOL] [EOL] code = [string] [EOL] [EOL] return weave . inline ( code , [ [string] , [string] ] ) [EOL] [EOL] times_n ( [ [number] , [number] , [number] ] , [number] ) [EOL] times_n ( [ [number] , [number] , [number] , [number] , [number] , [number] ] , [number] ) [EOL] [EOL] [EOL] def blitz_test ( values ) : [EOL] c_code = [string] [EOL] [EOL] x = np . arange ( [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] import pandas as pd [EOL] from pandas import DataFrame , Series [EOL] from printheader import print_header [EOL] [EOL] cols = [ [string] , [string] , [string] , [string] , [string] ] [EOL] index = pd . date_range ( [string] , periods = [number] , freq = [string] ) [EOL] [EOL] print ( index , [string] ) [EOL] [EOL] values = [ [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , ] [EOL] [EOL] ser1 = Series ( [ [number] , [number] , [number] , [number] , [number] ] ) [EOL] [EOL] df = DataFrame ( values , index , cols ) [EOL] print_header ( [string] ) [EOL] print ( df ) [EOL] print ( ) [EOL] [EOL] [EOL] [EOL] [EOL] print_header ( [string] ) [EOL] print ( df * [number] ) [EOL] print ( ) [EOL] [EOL] print_header ( [string] ) [EOL] df [ [string] ] *= [number] [EOL] [EOL] print ( df [ [string] ] . astype ( int ) ) [EOL] [EOL] [EOL] [EOL] print ( df ) [EOL] print ( ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.List[builtins.int]]$ 0 $typing.Any$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Union , Dict [EOL] import typing [EOL] import json [EOL] [EOL] george = [ { [string] : [number] , [string] : [string] , [string] : [string] , [string] : [ [number] , [number] , [number] ] , [string] : [ [number] , [number] , [number] ] , [string] : [string] , [string] : [string] , [string] : [ [number] , [number] , [number] ] , [string] : [ [number] , [number] , [number] ] , [string] : False , [string] : None , } ] [EOL] [EOL] js = json . dumps ( george , indent = [number] ) [EOL] print ( js ) [EOL] [EOL] with open ( [string] , [string] ) as JS : [EOL] json . dump ( george , JS , indent = [number] )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[None,typing.List[builtins.int],builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[None,typing.List[builtins.int],builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Dict[builtins.str,typing.Union[None,typing.List[builtins.int],builtins.int,builtins.str]]]$ 0 0 0 0 0 0 0
[comment] [EOL] [EOL] import sys [EOL] import os . path [EOL] [EOL] unix_p1 = [string] [EOL] unix_p2 = [string] [EOL] [EOL] win_p1 = [string] [EOL] win_p2 = [string] [EOL] [EOL] if sys . platform == [string] : [EOL] print ( [string] , os . path . dirname ( win_p1 ) ) [EOL] print ( [string] , os . path . dirname ( win_p2 ) ) [EOL] print ( [string] , os . path . basename ( win_p1 ) ) [EOL] print ( [string] , os . path . basename ( win_p2 ) ) [EOL] print ( [string] . format ( os . path . split ( win_p1 ) ) ) [EOL] print ( [string] . format ( os . path . split ( win_p2 ) ) ) [EOL] print ( [string] . format ( os . path . splitunc ( win_p1 ) ) ) [EOL] print ( [string] . format ( os . path . splitunc ( win_p2 ) ) ) [EOL] else : [EOL] print ( [string] , os . path . dirname ( unix_p1 ) ) [EOL] print ( [string] , os . path . dirname ( unix_p2 ) ) [EOL] print ( [string] , os . path . basename ( unix_p1 ) ) [EOL] print ( [string] , os . path . basename ( unix_p2 ) ) [EOL] print ( [string] , os . path . expanduser ( [string] ) ) [EOL] print ( [string] , os . path . expanduser ( [string] ) ) [EOL] print ( [string] , os . path . isabs ( unix_p1 ) ) [EOL] print ( [string] , os . path . isabs ( unix_p2 ) ) [EOL] print ( [string] . format ( os . path . split ( unix_p1 ) ) ) [EOL] print ( [string] . format ( os . path . split ( unix_p2 ) ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0
[comment] [EOL] [EOL] from typing import Optional [EOL] import typing [EOL] import os [EOL] import os . path [EOL] [EOL] os . environ [ [string] ] = [string] [EOL] print ( [string] , os . environ [ [string] ] , [string] , os . environ [ [string] ] ) [EOL] print ( [string] , os . environ . get ( [string] ) , [string] , os . environ . get ( [string] ) ) [EOL] user = os . getenv ( [string] ) [EOL] count = os . getenv ( [string] ) [EOL] print ( [string] , count , [string] , user ) [EOL] print ( os . path . expandvars ( [string] ) ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import _csv [EOL] [docstring] [EOL] import csv [EOL] [EOL] with open ( [string] ) as computer_people_in : [EOL] rdr = csv . reader ( computer_people_in , delimiter = [string] ) [EOL] [EOL] for first_name , last_name , known_for in rdr : [EOL] print ( [string] . format ( last_name , known_for ) ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_csv._reader$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_csv._reader$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import _csv [EOL] [docstring] [EOL] import csv [EOL] [EOL] with open ( [string] ) as presidents_in : [EOL] rdr = csv . reader ( presidents_in ) [EOL] for row in rdr : [EOL] print ( [string] . format ( row [ [number] ] , row [ [number] ] , row [ - [number] ] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $_csv._reader$ 0 0 0 0 0 0 0 0 0 0 0 $_csv._reader$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] import xml . etree . ElementTree as ET [EOL] [docstring] [EOL] [EOL] def main ( ) : [EOL] [docstring] [EOL] for planet in ET . parse ( [string] ) . findall ( [string] ) : [EOL] print ( planet . get ( [string] ) ) [EOL] [EOL] main ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] def line_trimmer ( file_name ) : [EOL] with open ( file_name ) as file_in : [EOL] for line in file_in : [EOL] yield line . rstrip ( [string] ) [EOL] [EOL] mary_in = line_trimmer ( [string] ) [EOL] for line in mary_in : [EOL] print ( line ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import Optional [EOL] import xml [EOL] import typing [EOL] [docstring] [EOL] [EOL] import xml . etree . ElementTree as ET [EOL] from itertools import chain [EOL] [EOL] def main ( ) : [EOL] [docstring] [EOL] doc = ET . parse ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] inner_planets = doc . find ( [string] ) [EOL] outer_planets = doc . find ( [string] ) [EOL] [EOL] print ( [string] ) [EOL] for planet in inner_planets : [EOL] print ( [string] , planet . get ( [string] ) ) [EOL] [EOL] print ( [string] ) [EOL] for planet in outer_planets : [comment] [EOL] print ( [string] , planet . get ( [string] ) ) [EOL] [EOL] print ( [string] * [number] ) [EOL] [comment] [EOL] for planet in chain ( inner_planets , outer_planets ) : [EOL] print ( planet . get ( [string] ) ) [EOL] [EOL] main ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] from PIL import Image [EOL] [EOL] im = Image . open ( [string] ) [EOL] print ( im . format ) [EOL] print ( im . size ) [EOL] print ( im . mode ) [EOL] [EOL] im . save ( [string] ) [EOL] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0
[comment] [EOL] import builtins [EOL] from typing import List , Set , Dict [EOL] import io [EOL] import typing [EOL] import re [EOL] [EOL] [comment] [EOL] [comment] [EOL] s1 = sum ( [ x * x for x in range ( [number] ) ] ) [EOL] [comment] [EOL] s2 = sum ( x * x for x in range ( [number] ) ) [EOL] print ( s1 , s2 ) [EOL] print ( ) [EOL] [EOL] [comment] [EOL] pg = open ( [string] ) [EOL] s = set ( word . lower ( ) for line in pg for word in re . split ( [string] , line ) ) [EOL] pg . close ( ) [EOL] print ( s ) [EOL] print ( ) [EOL] [EOL] keylist = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [comment] [EOL] d = dict ( ( k . lower ( ) , k ) for k in keylist ) [EOL] print ( d ) [EOL] print ( ) [EOL] [EOL] [comment] [EOL] with open ( [string] ) as M : [EOL] max_line_len = max ( len ( line ) for line in M if line . strip ( ) ) [EOL] [EOL] print ( [string] , max_line_len ) [EOL] [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0
[comment] [EOL] from typing import List , Tuple [EOL] import datetime [EOL] import typing [EOL] from datetime import date [EOL] [EOL] date_tuples = [ ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ( [number] , [number] , [number] ) , ] [EOL] [EOL] for dt in date_tuples : [EOL] d = date ( * dt ) [comment] [EOL] print ( d )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,builtins.int,builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.int,builtins.int,builtins.int]]$ 0 0 $datetime.date$ 0 0 0 0 0 0 0 0 0 0 $datetime.date$ 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Any [EOL] import typing [EOL] import h5py [EOL] import numpy as np [EOL] [EOL] H5_FILE = [string] [EOL] [EOL] a = np . array ( [ [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] ] ) [EOL] [EOL] [EOL] with h5py . File ( H5_FILE ) as hfile : [EOL] ds1 = hfile . create_dataset ( [string] , ( [number] , [number] ) ) [EOL] ds2 = hfile . create_dataset ( [string] , ( [number] , [number] ) , dtype = [string] ) [EOL] ds3 = hfile . create_dataset ( [string] , data = a ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0
	0
[comment] [EOL] [EOL] import EXAMPLES [EOL] class Animal ( object ) : [EOL] _COUNT = [number] [EOL] [EOL] def __init__ ( self , species , name , sound ) : [EOL] self . _species = species [EOL] self . _name = name [EOL] self . _sound = sound [EOL] Animal . _COUNT += [number] [EOL] [EOL] def kill ( self ) : [EOL] Animal . _COUNT -= [number] [EOL] [EOL] @ property def species ( self ) : [EOL] return self . _species [EOL] [EOL] @ property def name ( self ) : [EOL] return self . _name [EOL] [EOL] @ property def sound ( self ) : [EOL] return self . _sound [EOL] [EOL] @ property def id ( self ) : [EOL] return [string] . format ( self . species , self . sound ) [EOL] [EOL] def make_sound ( self ) : [EOL] print ( self . sound ) [EOL] [EOL] @ classmethod def get_zoo_size ( cls ) : [EOL] return cls . _COUNT [EOL] [EOL] if __name__ == [string] : [EOL] leo = Animal ( [string] , [string] , [string] ) [EOL] garfield = Animal ( [string] , [string] , [string] ) [EOL] felix = Animal ( [string] , [string] , [string] ) [EOL] [EOL] print ( leo . name , [string] , leo . species , [string] , end = [string] ) [EOL] leo . make_sound ( ) [EOL] [EOL] print ( garfield . name , [string] , garfield . species , [string] , end = [string] ) [EOL] garfield . make_sound ( ) [EOL] [EOL] print ( felix . name , [string] , felix . species , [string] , end = [string] ) [EOL] felix . make_sound ( ) [EOL] [EOL] print ( [string] , Animal . get_zoo_size ( ) ) [EOL] leo . kill ( ) [comment] [EOL] print ( [string] , Animal . get_zoo_size ( ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $EXAMPLES.animal.Animal$ 0 0 0 0 0 0 0 0 0 0 $EXAMPLES.animal.Animal$ 0 0 0 0 0 0 0 0 0 0 $EXAMPLES.animal.Animal$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $EXAMPLES.animal.Animal$ 0 0 0 0 0 $EXAMPLES.animal.Animal$ 0 0 0 0 0 0 0 0 0 0 $EXAMPLES.animal.Animal$ 0 0 0 0 0 0 0 0 $EXAMPLES.animal.Animal$ 0 0 0 0 0 $EXAMPLES.animal.Animal$ 0 0 0 0 0 0 0 0 0 0 $EXAMPLES.animal.Animal$ 0 0 0 0 0 0 0 0 $EXAMPLES.animal.Animal$ 0 0 0 0 0 $EXAMPLES.animal.Animal$ 0 0 0 0 0 0 0 0 0 0 $EXAMPLES.animal.Animal$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $EXAMPLES.animal.Animal$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] import numpy as np [EOL] [EOL] a = np . array ( [ [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] ] ) [EOL] [EOL] b = np . array ( [ [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] ] ) [EOL] print ( [string] , a ) [EOL] print ( ) [EOL] [EOL] print ( [string] , b ) [EOL] print ( ) [EOL] [EOL] print ( [string] ) [EOL] for row in a : [EOL] print ( [string] , row ) [EOL] print ( ) [EOL] [EOL] print ( [string] ) [EOL] for elem in a . flat : [EOL] print ( [string] , elem )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [docstring] [EOL] import sys [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] def main ( args ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] [comment] [EOL] def function1 ( ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] if __name__ == [string] : [EOL] main ( sys . argv [ [number] : ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import List [EOL] import typing [EOL] colors = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] for color in colors : [EOL] print ( color ) [EOL] print ( ) [EOL] [EOL] with open ( [string] ) as MARY : [EOL] for line in MARY : [EOL] print ( line , end = [string] ) [EOL] print ( ) [EOL] [EOL] while True : [EOL] name = input ( [string] ) [EOL] if name . lower ( ) == [string] : [EOL] break [EOL] print ( [string] , name )	0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0
[comment] [EOL] [EOL] from typing import Any [EOL] import typing [EOL] import scipy as sp [EOL] [EOL] [comment] [EOL] p1 = sp . poly1d ( [ [number] , [number] , [number] ] ) [EOL] print ( p1 ) [EOL] print ( ) [EOL] [comment] [EOL] print ( p1 ( [number] ) ) [EOL] [comment] [EOL] print ( p1 . r ) [EOL] print ( ) [EOL] [EOL] [comment] [EOL] p2 = sp . poly1d ( [ [number] , [number] , - [number] ] , True ) [EOL] print ( p2 ) [EOL] print ( ) [EOL] [comment] [EOL] print ( p2 ( [number] ) ) [EOL] [comment] [EOL] print ( p2 . r ) [EOL] print ( ) [EOL] [EOL] [EOL] [comment] [EOL] p3 = sp . poly1d ( [ [number] , [number] , [number] ] , False , [string] ) [EOL] print ( p3 ) [EOL] print ( ) [EOL] [comment] [EOL] print ( p3 ( [number] ) ) [EOL] [comment] [EOL] print ( p3 . r ) [EOL] print ( ) [EOL] [EOL] [comment] [EOL] p4 = sp . poly1d ( [ [number] , [number] ] ) [EOL] p5 = sp . poly1d ( [ [number] , [number] ] ) [EOL] print ( ) [EOL] print ( p4 ) [EOL] print ( ) [EOL] print ( p5 ) [EOL] print ( ) [EOL] print ( p4 + p5 ) [EOL] print ( ) [EOL] print ( p4 - p5 ) [EOL] print ( ) [EOL] print ( p4 ** [number] ) [EOL] print ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Any [EOL] import typing [EOL] import h5py [EOL] import numpy as np [EOL] [EOL] H5_FILE = [string] [EOL] [EOL] hfile = h5py . File ( H5_FILE ) [EOL] [EOL] print ( [string] ) [EOL] for group in hfile : [EOL] print ( group ) [EOL] print ( ) [EOL] [EOL] print ( [string] ) [EOL] for dataset in hfile [ [string] ] : [EOL] print ( dataset ) [EOL] [EOL] dset = hfile [ [string] ] [EOL] [EOL] x = np . array ( dset ) [EOL] [EOL] print ( x ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0
[EOL] from typing import Literal , Union [EOL] import typing_extensions [EOL] import EXAMPLES [EOL] import typing [EOL] from animal import Animal [EOL] [EOL] class Insect ( Animal ) : [EOL] [docstring] [EOL] def __init__ ( self , species , name , sound , can_fly = True ) : [EOL] super ( ) . __init__ ( species , name , sound ) [EOL] self . _can_fly = can_fly [EOL] [EOL] @ property def can_fly ( self ) : [EOL] return self . _can_fly [EOL] [EOL] if __name__ == [string] : [EOL] mon = Insect ( [string] , [string] , None ) [EOL] scar = Insect ( [string] , [string] , [string] , False ) [EOL] [EOL] for insect in mon , scar : [EOL] flying_status = [string] if insect . can_fly else [string] [EOL] print ( [string] . format ( insect . name , insect . species , flying_status ) , ) [EOL] insect . make_sound ( ) [EOL] print ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] with open ( [string] , [string] ) as tyger_in : [comment] [EOL] for line in tyger_in : [comment] [EOL] print ( line , end = [string] ) [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Any [EOL] import typing [EOL] import h5py [EOL] import numpy as np [EOL] [EOL] H5_FILE = [string] [EOL] [EOL] H5_DATASET = [string] [EOL] [EOL] with h5py . File ( H5_FILE ) as hfile : [EOL] [EOL] dset = hfile [ H5_DATASET ] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] for i , row in enumerate ( dset ) : [EOL] print ( [string] . format ( i , row ) ) [EOL] print ( ) [EOL] [EOL] print ( [string] , type ( dset ) ) [EOL] [EOL] print ( [string] ) [EOL] print ( dset [ [number] ] ) [EOL] print ( ) [EOL] [EOL] [EOL] print ( [string] ) [EOL] print ( dset [ : , [number] ] ) [EOL] print ( ) [EOL] [EOL] print ( [string] ) [EOL] print ( dset [ [number] : [number] , [number] : [number] ] ) [EOL] [EOL] result = np . mean ( dset [ : [number] ] ) [EOL] print ( result ) [EOL] [EOL] dset [ [number] , [number] ] = [number] [EOL] [EOL] for i in range ( [number] , [number] ) : [EOL] dset [ [number] , i ] = [number] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] import io [EOL] from io import StringIO as sio [EOL] [EOL] mary = sio ( [string] ) [EOL] [EOL] for line in mary : [EOL] print ( line , end = [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $io.StringIO$ 0 0 0 0 0 0 0 0 0 0 $io.StringIO$ 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [docstring] [EOL] import numpy as np [EOL] import scipy as sp [EOL] import matplotlib . pyplot as plt [EOL] import pandas as pd [EOL] [EOL] [EOL] def main ( ) : [EOL] pass [comment] [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] import timeit [EOL] import timeit [EOL] [EOL] setup = [string] [EOL] [EOL] test1 = [string] [EOL] [EOL] test2 = [string] [EOL] [EOL] timer1 = timeit . Timer ( test1 , setup ) [EOL] print ( [string] , timer1 . timeit ( [number] ) ) [EOL] [EOL] timer2 = timeit . Timer ( test2 , setup ) [EOL] print ( [string] , timer2 . timeit ( [number] ) ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 $timeit.Timer$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $timeit.Timer$ 0 0 0 0 0 0 0 0 $timeit.Timer$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 $timeit.Timer$ 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] from pandas import DataFrame [EOL] from printheader import print_header [EOL] [EOL] cols = [ [string] , [string] , [string] , [string] , [string] ] [EOL] indices = [ [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] values = [ [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , [ [number] , [number] , [number] , [number] , [number] ] , ] [EOL] print_header ( [string] ) [EOL] print ( cols , [string] ) [EOL] [EOL] print_header ( [string] ) [EOL] print ( indices , [string] ) [EOL] [EOL] print_header ( [string] ) [EOL] print ( values , [string] ) [EOL] [EOL] df = DataFrame ( values , index = indices , columns = cols ) [EOL] print_header ( [string] ) , [EOL] print ( df , [string] ) [EOL] [EOL] print_header ( [string] ) [EOL] print ( df [ [string] ] ) [EOL] [EOL] print ( df . head ( ) ) [EOL] print ( df . tail ( ) ) [EOL] print ( ) [EOL] [EOL] print ( df . describe ( ) ) [EOL] print ( df . shape ) [EOL] print ( df . memory_usage ( deep = True ) ) [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[builtins.int]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.List[builtins.int]]$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.List[builtins.int]]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] from typing import List , Tuple [EOL] import typing [EOL] values = [ [string] , [string] , [string] ] [EOL] [EOL] x , y , z = values [EOL] [EOL] print ( x , y , z ) [EOL] print ( ) [EOL] [EOL] people = [ ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) , ( [string] , [string] , [string] ) , ] [EOL] [EOL] for row in people : [EOL] first_name , last_name , _ = row [EOL] print ( first_name , last_name ) [EOL] print ( ) [EOL] [EOL] for first_name , last_name , _ in people : [EOL] print ( first_name , last_name ) [EOL] print ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[builtins.str,builtins.str,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] from typing import List , Any [EOL] import typing [EOL] [docstring] [EOL] from collections import namedtuple [EOL] [EOL] HAS_LXML = False [EOL] [EOL] try : [EOL] import lxml . etree as ET [EOL] HAS_LXML = True [EOL] except ImportError : [EOL] import xml . etree . ElementTree as ET [EOL] [EOL] FILE_NAME = [string] [EOL] FIELDS = [ [string] , [string] , [string] , [string] ] [EOL] [EOL] def main ( ) : [EOL] [docstring] [EOL] knight_info = get_knight_info ( ) [EOL] knight_root = build_tree ( knight_info ) [EOL] knight_doc = ET . ElementTree ( knight_root ) [EOL] write_doc ( knight_doc ) [EOL] [EOL] def get_knight_info ( ) : [EOL] [docstring] [EOL] info = [ ] [EOL] with open ( [string] ) as kn : [EOL] for line in kn : [EOL] flds = line [ : - [number] ] . split ( [string] ) [EOL] info . append ( flds ) [EOL] return info [EOL] [EOL] def build_tree ( knight_recs ) : [EOL] [docstring] [EOL] tree = ET . Element ( [string] ) [EOL] for knight_rec in knight_recs : [EOL] knight_element = ET . Element ( [string] , name = knight_rec [ [number] ] ) [EOL] for tag_name , tag_value in zip ( FIELDS , knight_rec [ [number] : ] ) : [EOL] sub_element = ET . Element ( tag_name ) [EOL] sub_element . text = tag_value [EOL] knight_element . append ( sub_element ) [EOL] tree . append ( knight_element ) [EOL] return tree [EOL] [EOL] def write_doc ( doc ) : [EOL] [docstring] [EOL] if HAS_LXML : [EOL] doc . write ( FILE_NAME , pretty_print = True ) [EOL] else : [EOL] doc . write ( FILE_NAME ) [EOL] [EOL] main ( )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [comment] [EOL] from typing import Any [EOL] import typing [EOL] import h5py [EOL] [comment] [EOL] [comment] [EOL] import matplotlib . pyplot as plt [EOL] [EOL] DATA_FILE = [string] [EOL] [EOL] DATASET_NAME = [string] [EOL] [EOL] [EOL] hfile = h5py . File ( DATA_FILE ) [EOL] [EOL] dset = hfile [ DATASET_NAME ] [EOL] [EOL] print ( dset [ [number] : [number] , [number] : [number] ] ) [EOL] [EOL] rows = range ( [number] , [number] , [number] ) [EOL] [EOL] for row in rows : [EOL] plt . plot ( dset [ row , [number] : [number] ] , [string] , lixnewidth = [number] ) [EOL] [EOL] plt . show ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.range$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.range$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] def c2f ( cel ) : [EOL] cel = float ( cel ) [EOL] f = ( ( [number] * cel ) / [number] ) + [number] [EOL] [EOL] return f [EOL] [EOL] def f2c ( fahr ) : [EOL] fahr = float ( fahr ) [EOL] c = ( fahr - [number] ) * ( [number] / [number] ) [EOL] [EOL] return c [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0