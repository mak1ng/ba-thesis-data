from typing import Tuple [EOL] import typing [EOL] from TEMPLATE . app import app [EOL] [EOL] __all__ = ( [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0
[docstring] [EOL] from . db import db [EOL] import flask_migrate [EOL] [EOL] [EOL] def drop_all_tables ( app ) : [EOL] if not app . config [ [string] ] : [EOL] raise Exception ( [string] ) [EOL] db . engine . execute ( [string] ) [EOL] db . engine . execute ( [string] ) [EOL] [EOL] [EOL] def init_cli ( app , manager ) : [EOL] if app . debug : [EOL] [comment] [EOL] from TEMPLATE . db . fixtures import seed_db [EOL] [EOL] @ app . cli . command ( [string] , help = [string] ) def seed_db_cmd ( ) : [EOL] seed_db ( ) [EOL] [EOL] manager . add_command ( seed_db_cmd ) [EOL] [EOL] [comment] [EOL] @ app . cli . command ( [string] , help = [string] ) def init_db_cmd ( ) : [EOL] print ( f" [string] { db . engine . url }" ) [EOL] db . drop_all ( app = app ) [EOL] db . create_all ( app = app ) [EOL] print ( [string] ) [EOL] [EOL] manager . add_command ( init_db_cmd ) [EOL] [EOL] @ app . cli . command ( [string] , help = [string] ) def drop_db_cmd ( ) : [EOL] print ( f" [string] { db . engine . url }" ) [EOL] db . reflect ( app = app ) [EOL] db . drop_all ( app = app ) [EOL] print ( [string] ) [EOL] [EOL] manager . add_command ( drop_db_cmd ) [EOL] [EOL] [comment] [EOL] @ app . cli . command ( [string] , help = [string] ) def config_cmd ( ) : [EOL] import pprint [EOL] [EOL] pprint . pprint ( app . config ) [EOL] [EOL] manager . add_command ( config_cmd ) [EOL] [EOL] [EOL] def init_handler ( event , context ) : [EOL] from TEMPLATE . app import app [EOL] [EOL] if not app . config . get ( [string] ) : [EOL] raise Exception ( [string] ) [EOL] with app . app_context ( ) : [EOL] drop_all_tables ( app = app ) [EOL] db . create_all ( app = app ) [EOL] return [string] [EOL] [EOL] [EOL] def seed_handler ( event , context ) : [EOL] [docstring] [EOL] from TEMPLATE . app import app [EOL] [EOL] if not app . config . get ( [string] ) : [EOL] raise Exception ( [string] ) [EOL] [EOL] from TEMPLATE . db . fixtures import seed_db [EOL] [EOL] with app . app_context ( ) : [EOL] seed_db ( ) [EOL] [EOL] return [string] [EOL] [EOL] [EOL] def migrate_handler ( event , context ) : [EOL] from TEMPLATE . app import app [EOL] [EOL] with app . app_context ( ) : [EOL] flask_migrate . upgrade ( ) [EOL] return [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import builtins [EOL] import typing [EOL] import logging [EOL] [docstring] [EOL] import boto3 [EOL] import base64 [EOL] import json [EOL] import logging [EOL] [EOL] log = logging . getLogger ( __name__ ) [EOL] [EOL] [EOL] def get_secret ( secret_name ) : [EOL] [docstring] [EOL] client = boto3 . client ( service_name = [string] ) [EOL] get_secret_value_response = client . get_secret_value ( SecretId = secret_name ) [EOL] [EOL] if [string] in get_secret_value_response : [EOL] secret = get_secret_value_response [ [string] ] [EOL] return json . loads ( secret ) [EOL] else : [EOL] decoded_binary_secret = base64 . b64decode ( get_secret_value_response [ [string] ] ) [EOL] return decoded_binary_secret [EOL] [EOL] [EOL] def update_app_config ( app , secret_name ) : [EOL] secrets = get_secret ( secret_name = secret_name ) [EOL] if secrets : [EOL] log . debug ( f"{ len ( secrets . keys ( ) ) } [string] " ) [EOL] app . config . update ( secrets ) [EOL] else : [EOL] log . warning ( f" [string] { secret_name } [string] " ) [EOL] [EOL] [EOL] def db_secret_to_url ( secrets ) : [EOL] [docstring] [EOL] password = secrets . get ( [string] , [string] ) [EOL] dbname = secrets . get ( [string] , [string] ) [EOL] engine = secrets . get ( [string] , [string] ) [EOL] port = secrets . get ( [string] , [string] ) [EOL] host = secrets . get ( [string] , [string] ) [EOL] username = secrets . get ( [string] , [string] ) [EOL] return f"{ engine } [string] { username } [string] { password } [string] { host } [string] { port } [string] { dbname }" [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $logging.Logger$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type , Tuple [EOL] import builtins [EOL] import TEMPLATE [EOL] import datetime [EOL] import typing [EOL] import os [EOL] from datetime import timedelta [EOL] import logging [EOL] [EOL] CONFIG_EXPECTED_KEYS = ( [string] , [string] , [string] ) [EOL] [comment] [EOL] DEFAULT_DB_URL = [string] [EOL] [EOL] [EOL] class Config : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] LOAD_APP_SECRETS = os . getenv ( [string] , False ) [EOL] APP_SECRETS_NAME = os . getenv ( [string] , [string] ) [EOL] LOAD_RDS_SECRETS = os . getenv ( [string] , False ) [EOL] RDS_SECRETS_NAME = os . getenv ( [string] ) [EOL] [EOL] [comment] [EOL] AURORA_SECRET_ARN = os . getenv ( [string] ) [EOL] AURORA_CLUSTER_ARN = os . getenv ( [string] ) [EOL] DATABASE_NAME = os . getenv ( [string] ) [EOL] AURORA_DATA_API_ENABLED = os . getenv ( [string] , False ) [EOL] [EOL] DEV_DB_SCRIPTS_ENABLED = False [comment] [EOL] [EOL] SQLALCHEMY_DATABASE_URI = os . getenv ( [string] , DEFAULT_DB_URL ) [EOL] SQLALCHEMY_TRACK_MODIFICATIONS = False [EOL] [EOL] [comment] [EOL] SQLALCHEMY_ECHO = bool ( os . getenv ( [string] ) ) [EOL] DEBUG = os . getenv ( [string] , False ) [EOL] TESTING = bool ( os . getenv ( [string] ) ) [EOL] XRAY = bool ( os . getenv ( [string] ) ) [EOL] [EOL] [comment] [EOL] OPENAPI_VERSION = [string] [EOL] OPENAPI_URL_PREFIX = [string] [EOL] OPENAPI_JSON_PATH = [string] [EOL] OPENAPI_REDOC_PATH = [string] [EOL] OPENAPI_SWAGGER_UI_PATH = [string] [EOL] OPENAPI_SWAGGER_UI_URL = [string] [EOL] [comment] [EOL] API_SPEC_OPTIONS = { [string] : { [string] : { [string] : { [string] : [string] , [string] : [string] , [string] : [string] , } } } , [string] : [ { [string] : [ ] } ] , } [EOL] JWT_SECRET_KEY = os . getenv ( [string] , [string] ) [EOL] JWT_ACCESS_TOKEN_EXPIRES = timedelta ( hours = [number] ) [EOL] [EOL] NPLUSONE_LOGGER = logging . getLogger ( [string] ) [EOL] NPLUSONE_LOG_LEVEL = logging . WARNING [EOL] [EOL] [EOL] class LocalDevConfig ( Config ) : [EOL] [docstring] [EOL] [EOL] DEBUG = True [EOL] DEV_DB_SCRIPTS_ENABLED = True [EOL] [EOL] [EOL] class DevConfig ( Config ) : [EOL] [docstring] [EOL] [EOL] DEV_DB_SCRIPTS_ENABLED = True [EOL] [EOL] [EOL] class ProductionConfig ( Config ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] APP_SECRETS_NAME = [string] [EOL] LOAD_APP_SECRETS = False [EOL] DEV_DB_SCRIPTS_ENABLED = False [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [EOL] class ConfigurationInvalidError ( Exception ) : [EOL] def __init__ ( self , message ) : [EOL] self . message = message [EOL] [EOL] def __str__ ( self ) : [EOL] return self . message [comment] [EOL] [EOL] [EOL] class ConfigurationKeyMissingError ( ConfigurationInvalidError ) : [EOL] def __init__ ( self , key ) : [EOL] super ( ) . __init__ ( message = f" [string] { key } [string] " ) [EOL] [EOL] [EOL] class ConfigurationValueMissingError ( ConfigurationInvalidError ) : [EOL] def __init__ ( self , key ) : [EOL] super ( ) . __init__ ( message = f" [string] { key } [string] " ) [EOL] [EOL] [EOL] def check_valid ( conf ) : [EOL] [docstring] [EOL] [EOL] def need_key ( k ) : [EOL] if k not in conf : [EOL] raise ConfigurationKeyMissingError ( k ) [EOL] if not conf . get ( k ) : [EOL] raise ConfigurationValueMissingError ( k ) [EOL] [EOL] [ need_key ( k ) for k in CONFIG_EXPECTED_KEYS ] [EOL] return True [EOL] [EOL] [EOL] def check_valid_handler ( event , context ) : [EOL] [comment] [EOL] config_class = event . get ( [string] , [string] ) [EOL] [EOL] [comment] [EOL] from . flask import App [EOL] [EOL] app = App ( __name__ ) [EOL] app . config . from_object ( config_class ) [EOL] conf = app . config [EOL] [EOL] ok = check_valid ( conf ) [EOL] [EOL] return dict ( ok = ok ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Tuple [EOL] import TEMPLATE [EOL] import typing [EOL] [docstring] [EOL] from . create_app import create_app [EOL] from . api import init_views [EOL] [EOL] app = create_app ( ) [EOL] init_views ( ) [EOL] [EOL] __all__ = ( [string] , ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $TEMPLATE.flaskapp.App$ 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str]$ 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] [docstring] [EOL] [EOL] from flask import Flask [EOL] from flask . config import Config [EOL] from TEMPLATE . config import ConfigurationValueMissingError [EOL] [EOL] [EOL] class App ( Flask ) : [EOL] config = ... [EOL] [EOL] def get_config_value_or_raise ( self , key ) : [EOL] [docstring] [EOL] val = self . config . get ( key ) [EOL] if val : [EOL] return val [EOL] raise ConfigurationValueMissingError ( key ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.config.Config$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] from TEMPLATE . db . fixtures import DEFAULT_PASSWORD [EOL] [EOL] [EOL] def test_login ( client_unauthenticated , user , db_session ) : [EOL] response = client_unauthenticated . post ( [string] , json = dict ( email = user . email , password = DEFAULT_PASSWORD ) ) [EOL] assert response . status_code == [number] [EOL] assert response . json . get ( [string] ) [EOL] assert response . json . get ( [string] ) [EOL] [EOL] [comment] [EOL] refresh_token = response . json . get ( [string] ) [EOL] response = client_unauthenticated . post ( [string] , headers = { [string] : f" [string] { refresh_token }" } ) . json [EOL] access_token = response . get ( [string] ) [EOL] [EOL] [comment] [EOL] response = client_unauthenticated . get ( [string] , headers = { [string] : f" [string] { access_token }" } ) [EOL] assert response . status_code == [number] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import TEMPLATE [EOL] from TEMPLATE . create_app import create_app [EOL] from TEMPLATE . config import check_valid [EOL] [EOL] [EOL] def test_config ( ) : [EOL] app = create_app ( test_config = dict ( TESTING = True ) ) [EOL] assert check_valid ( app . config ) , [string] [EOL] assert app . config [ [string] ] [EOL] [EOL] [EOL] def test_db ( db_session ) : [EOL] assert db_session . execute ( [string] ) . scalar ( ) == [number] , [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import TEMPLATE [EOL] import typing [EOL] import os [EOL] import sqlalchemy as sa [EOL] from faker import Faker [EOL] import pytest [EOL] [EOL] from TEMPLATE . api import init_views [EOL] from TEMPLATE . create_app import create_app [EOL] from flask_jwt_extended import create_access_token [EOL] from TEMPLATE . db . fixtures import NormalUserFactory [EOL] from pytest_factoryboy import register [EOL] from pytest_postgresql . factories import DatabaseJanitor [EOL] [EOL] register ( NormalUserFactory ) [EOL] [EOL] [comment] [EOL] LOCALE = [string] [EOL] [EOL] [comment] [EOL] [comment] [EOL] DB_CONN = os . getenv ( [string] , [string] . lower ( ) ) [EOL] DB_OPTS = sa . engine . url . make_url ( DB_CONN ) . translate_connect_args ( ) [EOL] DB_VERSION = [string] [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def database ( request ) : [EOL] [docstring] [EOL] host = DB_OPTS . get ( [string] ) [EOL] port = DB_OPTS . get ( [string] ) [EOL] user = DB_OPTS . get ( [string] ) [EOL] db_name = DB_OPTS [ [string] ] [EOL] [EOL] with DatabaseJanitor ( user , host , port , db_name , DB_VERSION ) : [EOL] yield [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def app ( database ) : [EOL] [docstring] [EOL] [comment] [EOL] app = create_app ( test_config = dict ( SQLALCHEMY_DATABASE_URI = DB_CONN , TESTING = True ) ) [EOL] init_views ( ) [EOL] [EOL] with app . app_context ( ) : [EOL] yield app [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def _db ( app ) : [EOL] [docstring] [EOL] from TEMPLATE . db import db [EOL] [EOL] [comment] [EOL] db . create_all ( ) [EOL] [EOL] return db [EOL] [EOL] [EOL] @ pytest . fixture def client_unauthenticated ( app ) : [EOL] return app . test_client ( ) [EOL] [EOL] [EOL] @ pytest . fixture def client ( app , user ) : [EOL] [comment] [EOL] client = app . test_client ( ) [EOL] [EOL] access_token = create_access_token ( identity = user ) [EOL] [EOL] [comment] [EOL] client . environ_base [ [string] ] = f" [string] { access_token }" [EOL] [EOL] return client [EOL] [EOL] [EOL] @ pytest . fixture ( scope = [string] ) def faker ( ) : [EOL] return Faker ( LOCALE ) [EOL] [EOL] [EOL] @ pytest . fixture def user ( normal_user_factory , db_session ) : [EOL] user = normal_user_factory . create ( ) [EOL] db_session . commit ( ) [EOL] return user [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from TEMPLATE . commands import drop_all_tables [EOL] import flask_migrate [EOL] from TEMPLATE . db . fixtures import seed_db [EOL] from TEMPLATE . db import db [EOL] [EOL] [EOL] def test_db_init_seed ( app ) : [EOL] [docstring] [EOL] drop_all_tables ( app = app ) [EOL] db . create_all ( app = app ) [EOL] seed_db ( ) [EOL] drop_all_tables ( app = app ) [EOL] [EOL] [EOL] def test_db_migrate_seed ( ) : [EOL] [docstring] [EOL] flask_migrate . upgrade ( ) [EOL] seed_db ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import flask_sqlalchemy [EOL] from flask_sqlalchemy import SQLAlchemy [EOL] from jetkit . db import BaseQuery as JKBaseQuery , BaseModel as JKBaseModel , SQLA [EOL] [EOL] [EOL] class BaseQuery ( JKBaseQuery ) : [EOL] [docstring] [EOL] [EOL] [EOL] class BaseModel ( JKBaseModel ) : [EOL] [docstring] [EOL] [EOL] [EOL] [comment] [EOL] db = SQLA ( model_class = BaseModel , query_class = BaseQuery ) [EOL] [EOL] [comment] [EOL] import TEMPLATE . model [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 $flask_sqlalchemy.SQLAlchemy$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask_sqlalchemy.SQLAlchemy$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import TEMPLATE [EOL] import faker [EOL] import typing [EOL] [docstring] [EOL] from faker import Factory as FakerFactory [EOL] import factory [EOL] import random [EOL] from TEMPLATE . model . user import NormalUser , User [EOL] from TEMPLATE . db import db [EOL] from jetkit . db import Session [EOL] [EOL] faker = FakerFactory . create ( ) [EOL] DEFAULT_NORMAL_USER_EMAIL = [string] [EOL] DEFAULT_PASSWORD = [string] [EOL] [EOL] [EOL] def seed_db ( ) : [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] if not User . query . filter_by ( email = DEFAULT_NORMAL_USER_EMAIL ) . one_or_none ( ) : [EOL] [comment] [EOL] db . session . add ( NormalUserFactory . create ( email = DEFAULT_NORMAL_USER_EMAIL , password = DEFAULT_PASSWORD ) ) [EOL] print ( f" [string] { DEFAULT_NORMAL_USER_EMAIL } [string] " f" [string] { DEFAULT_PASSWORD } [string] " ) [EOL] [EOL] db . session . commit ( ) [EOL] print ( [string] ) [EOL] [EOL] [EOL] class SQLAFactory ( factory . alchemy . SQLAlchemyModelFactory ) : [EOL] [docstring] [EOL] [EOL] class Meta : [EOL] abstract = True [EOL] sqlalchemy_session = Session [EOL] [EOL] [EOL] class UserFactoryFactory ( SQLAFactory ) : [EOL] class Meta : [EOL] abstract = True [EOL] [EOL] dob = factory . LazyAttribute ( lambda x : faker . simple_profile ( ) [ [string] ] ) [EOL] name = factory . LazyAttribute ( lambda x : faker . name ( ) ) [EOL] password = DEFAULT_PASSWORD [EOL] avatar_url = factory . LazyAttribute ( lambda x : f" [string] { random . randint ( [number] , [number] ) }" ) [EOL] [EOL] [EOL] class NormalUserFactory ( UserFactoryFactory ) : [EOL] class Meta : [EOL] model = NormalUser [EOL] [EOL] email = factory . Sequence ( lambda n : f" [string] { n } [string] " ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[TEMPLATE.db.fixtures.UserFactoryFactory]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[TEMPLATE.model.user.NormalUser]$ 0 0 0 0 $typing.Type[TEMPLATE.db.fixtures.NormalUserFactory]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from . user import User [comment] [EOL]	0 0 0 0 0 0 0 0 0
from typing import Any , Type , Mapping [EOL] import builtins [EOL] import TEMPLATE [EOL] import typing [EOL] from enum import Enum , unique [EOL] from sqlalchemy . types import Text , Enum as SQLAEnum [EOL] from sqlalchemy import Column [EOL] from jetkit . db . extid import ExtID [EOL] from jetkit . model . user import CoreUser [EOL] from typing import Any , Mapping [EOL] [EOL] from TEMPLATE . db import db [EOL] [EOL] [EOL] @ unique class UserType ( Enum ) : [EOL] normal = [string] [EOL] [EOL] [EOL] class User ( db . Model , CoreUser , ExtID [ [string] ] ) : [EOL] _user_type = Column ( SQLAEnum ( UserType ) , nullable = False , server_default = UserType . normal . value ) [EOL] avatar_url = db . Column ( Text ( ) ) [EOL] __mapper_args__ = { [string] : _user_type } [EOL] [EOL] [EOL] User . add_create_uuid_extension_trigger ( ) [EOL] [EOL] [EOL] class NormalUser ( User ) : [EOL] __mapper_args__ = { [string] : UserType . normal } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Tuple [EOL] import typing [EOL] from flask_smorest import Api [EOL] [EOL] api = Api ( ) [EOL] [EOL] [EOL] def init_views ( ) : [EOL] from . import monitor , auth [EOL] [EOL] apis = ( monitor , auth ) [EOL] [EOL] [comment] [EOL] for blp in ( a . blp for a in apis ) : [EOL] api . register_blueprint ( blp ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0
from typing import Any , Type [EOL] import TEMPLATE [EOL] import typing [EOL] [docstring] [EOL] from flask_smorest import Blueprint [EOL] from flask . views import MethodView [EOL] from marshmallow import fields as f , Schema [EOL] from TEMPLATE . db import db [EOL] [EOL] blp = Blueprint ( [string] , __name__ , url_prefix = [string] ) [EOL] [EOL] [EOL] class MonitoringSchema ( Schema ) : [EOL] ok = f . Boolean ( dump_only = True ) [EOL] [EOL] [EOL] @ blp . route ( [string] ) class Monitoring ( MethodView ) : [EOL] @ blp . response ( MonitoringSchema ( ) ) def get ( self ) : [EOL] [docstring] [EOL] return { [string] : bool ( db . engine . execute ( [string] ) . scalar ( ) ) } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Type [EOL] import TEMPLATE [EOL] import typing [EOL] from marshmallow import fields as f , Schema [EOL] [EOL] [EOL] class UserSchema ( Schema ) : [EOL] extid = f . Str ( dump_only = True ) [EOL] name = f . Str ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from jetkit . api . auth import blp , use_core_auth_api [comment] [EOL] from TEMPLATE . model . user import User [EOL] from . schema import UserSchema [EOL] [EOL] use_core_auth_api ( auth_model = User , user_schema = UserSchema ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0