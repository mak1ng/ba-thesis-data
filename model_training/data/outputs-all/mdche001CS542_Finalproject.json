from typing import Any , Dict , List [EOL] import typing [EOL] import gc [EOL] import time [EOL] import numpy as np [EOL] import pandas as pd [EOL] from sklearn . model_selection import train_test_split [EOL] import xgboost as xgb [EOL] from xgboost import plot_importance [EOL] import matplotlib . pyplot as plt [EOL] [EOL] model = xgb . Booster ( { [string] : [number] } ) [comment] [EOL] model . load_model ( [string] ) [comment] [EOL] [EOL] path = [string] [EOL] [EOL] def timeFeatures ( df ) : [EOL] [comment] [EOL] df [ [string] ] = pd . to_datetime ( df [ [string] ] ) [EOL] df [ [string] ] = df [ [string] ] . dt . dayofweek [EOL] df [ [string] ] = df [ [string] ] . dt . dayofyear [EOL] [comment] [EOL] df . drop ( [ [string] , [string] ] , axis = [number] , inplace = True ) [EOL] return df [EOL] [EOL] train_columns = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] test_columns = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] dtypes = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] [comment] [EOL] train = pd . read_csv ( path + [string] , skiprows = range ( [number] , [number] ) , nrows = [number] , usecols = train_columns , dtype = dtypes ) [EOL] test = pd . read_csv ( path + [string] , usecols = test_columns , dtype = dtypes ) [EOL] [EOL] [EOL] [comment] [EOL] y = train [ [string] ] [EOL] train . drop ( [ [string] ] , axis = [number] , inplace = True ) [EOL] [EOL] [comment] [EOL] sub = pd . DataFrame ( ) [EOL] [comment] [EOL] test . drop ( [ [string] ] , axis = [number] , inplace = True ) [EOL] gc . collect ( ) [EOL] [EOL] nrow_train = train . shape [ [number] ] [EOL] merge = pd . concat ( [ train , test ] ) [EOL] [EOL] ip_count = merge . groupby ( [ [string] ] ) [ [string] ] . count ( ) . reset_index ( ) [EOL] ip_count . columns = [ [string] , [string] ] [EOL] [comment] [EOL] test = pd . read_csv ( path + [string] , usecols = test_columns , dtype = dtypes ) [EOL] test = pd . merge ( test , ip_count , on = [string] , how = [string] , sort = False ) [EOL] del ip_count [EOL] gc . collect ( ) [EOL] [EOL] sub [ [string] ] = test [ [string] ] . astype ( [string] ) [EOL] [EOL] test [ [string] ] = test [ [string] ] . astype ( [string] ) [EOL] test = timeFeatures ( test ) [EOL] test . drop ( [ [string] , [string] ] , axis = [number] , inplace = True ) [EOL] dtest = xgb . DMatrix ( test ) [EOL] del test [EOL] gc . collect ( ) [EOL] [EOL] [comment] [EOL] sub [ [string] ] = model . predict ( dtest ) [EOL] sub . to_csv ( [string] , float_format = [string] , index = False ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Dict , Union , Any , List [EOL] import typing [EOL] import gc [EOL] import numpy as np [EOL] import pandas as pd [EOL] import matplotlib . pyplot as plt [EOL] import datetime [EOL] import seaborn as sns [EOL] [EOL] dtype = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , } [EOL] [EOL] predictor = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [EOL] def group_label ( df , group_cols ) : [EOL] for i , cols in enumerate ( group_cols ) : [EOL] col_name = [string] . join ( group_cols ) [EOL] print ( i , col_name ) [EOL] group_idx = df . drop_duplicates ( cols ) [ cols ] . reset_index ( ) [EOL] group_idx . rename ( columns = { [string] : col_name } , inplace = True ) [EOL] df = df . merge ( group_idx , on = cols , how = [string] ) [EOL] del group_idx [EOL] gc . collect ( ) [EOL] predictor . append ( col_name ) [EOL] return df [EOL] [EOL] [EOL] def count_agg ( df , group_cols ) : [EOL] for i , cols in enumerate ( group_cols ) : [EOL] col_name = [string] . join ( cols ) + [string] [EOL] print ( i , col_name ) [EOL] count = df . groupby ( cols ) . size ( ) . reset_index ( name = col_name ) [EOL] df = df . merge ( count , on = cols , how = [string] ) [EOL] del count [EOL] gc . collect ( ) [EOL] predictor . append ( col_name ) [EOL] return df [EOL] [EOL] [EOL] def variance ( df , group_cols ) : [EOL] for i , cols in enumerate ( group_cols ) : [EOL] col_name = [string] . join ( cols ) + [string] [EOL] print ( i , col_name ) [EOL] temp = df . groupby ( cols ) [ [ [string] ] ] . var ( ) . reset_index ( ) . rename ( index = str , columns = { [string] : col_name } ) [EOL] df = df . merge ( temp , on = cols , how = [string] ) [EOL] del temp [EOL] gc . collect ( ) [EOL] predictor . append ( col_name ) [EOL] return df [EOL] [EOL] [EOL] def count_cum ( df , group_cols ) : [EOL] for i , cols in enumerate ( group_cols ) : [EOL] col_name = [string] . join ( cols ) + [string] [EOL] print ( i , col_name ) [EOL] df [ col_name ] = df . groupby ( cols ) . cumcount ( ) [EOL] gc . collect ( ) [EOL] predictor . append ( col_name ) [EOL] return df [EOL] [EOL] [EOL] def count_uniq ( df , group_uniq_cols ) : [EOL] for i , cols in enumerate ( group_uniq_cols ) : [EOL] group_cols , uniq_col = cols [ [number] ] , cols [ [number] ] [EOL] col_name = [string] . join ( group_cols ) + [string] + uniq_col + [string] [EOL] print ( i , col_name ) [EOL] tmp = df . groupby ( group_cols ) [ uniq_col ] . nunique ( ) . reset_index ( name = col_name ) [EOL] df = df . merge ( tmp , on = group_cols , how = [string] ) [EOL] del tmp [EOL] gc . collect ( ) [EOL] predictor . append ( col_name ) [EOL] return df [EOL] [EOL] [EOL] def next_click ( df , group_cols ) : [EOL] for i , cols in enumerate ( group_cols ) : [EOL] col_name = [string] . join ( cols ) + [string] [EOL] print ( i , col_name ) [EOL] df [ col_name ] = ( df . groupby ( cols ) . date . shift ( - [number] ) - df . date ) . dt . seconds . astype ( type ) [EOL] gc . collect ( ) [EOL] predictor . append ( col_name ) [EOL] return df [EOL] [EOL] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def time_features ( df ) : [EOL] df [ [string] ] = pd . to_datetime ( df . click_time ) [EOL] df [ [string] ] = pd . to_datetime ( df . click_time ) . dt . hour . astype ( [string] ) [EOL] df [ [string] ] = pd . to_datetime ( df . click_time ) . dt . day . astype ( [string] ) [EOL] df [ [string] ] = pd . to_datetime ( df . click_time ) . dt . minute . astype ( [string] ) [EOL] df [ [string] ] = pd . to_datetime ( df . click_time ) . dt . second . astype ( [string] ) [EOL] df [ [string] ] = ( [number] - [number] * df [ [string] ] . isin ( [ [number] , [number] , [number] , [number] , [number] , [number] ] ) - [number] * df [ [string] ] . isin ( [ [number] , [number] , [number] ] ) ) . astype ( [string] ) [comment] [EOL] [comment] [EOL] [comment] [EOL] predictor . append ( [string] ) [EOL] predictor . append ( [string] ) [EOL] predictor . append ( [string] ) [EOL] predictor . append ( [string] ) [EOL] predictor . append ( [string] ) [EOL] predictor . append ( [string] ) [EOL] print ( df . head ( ) ) [EOL] print ( [string] ) [EOL] gc . collect ( ) [EOL] return df [EOL] [EOL] [EOL] def time_frequence ( df ) : [EOL] frequent_hour = df . hour . value_counts ( ) . sort_index ( ) [EOL] frequent_day = df . day . value_counts ( ) . sort_index ( ) [EOL] frequent_minute = df . minute . value_counts ( ) . sort_index ( ) [EOL] frequent_second = df . second . value_counts ( ) . sort_index ( ) [EOL] plt . figure ( figsize = ( [number] , [number] ) ) [EOL] [EOL] plt . subplot ( [number] ) [EOL] frequent_hour . plot ( kind = [string] ) [EOL] plt . title ( [string] ) [EOL] plt . xlabel ( [string] ) [EOL] plt . ylabel ( [string] ) [EOL] [EOL] plt . subplot ( [number] ) [EOL] frequent_day . plot ( kind = [string] ) [EOL] plt . title ( [string] ) [EOL] plt . xlabel ( [string] ) [EOL] plt . ylabel ( [string] ) [EOL] [EOL] plt . subplot ( [number] ) [EOL] frequent_minute . plot ( kind = [string] ) [EOL] plt . xticks ( np . arange ( [number] , [number] , step = [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) [EOL] plt . title ( [string] ) [EOL] plt . xlabel ( [string] ) [EOL] plt . ylabel ( [string] ) [EOL] [EOL] plt . subplot ( [number] ) [EOL] frequent_second . plot ( kind = [string] ) [EOL] plt . xticks ( np . arange ( [number] , [number] , step = [number] ) , ( [number] , [number] , [number] , [number] , [number] , [number] , [number] ) ) [EOL] plt . title ( [string] ) [EOL] plt . xlabel ( [string] ) [EOL] plt . ylabel ( [string] ) [EOL] plt . show ( ) [EOL] [EOL] [EOL] def attributedAnalysis ( df ) : [EOL] var = [ [string] , [string] ] [EOL] for feature in var : [EOL] fig , ax = plt . subplots ( figsize = ( [number] , [number] ) ) [EOL] [comment] [EOL] cat_perc = df [ [ feature , [string] ] ] . groupby ( [ feature ] , as_index = False ) . mean ( ) [EOL] cat_perc . sort_values ( by = [string] , ascending = False , inplace = True ) [EOL] [comment] [EOL] sns . barplot ( ax = ax , x = feature , y = [string] , data = cat_perc ) [EOL] plt . ylabel ( [string] , fontsize = [number] ) [EOL] plt . xlabel ( feature , fontsize = [number] ) [EOL] plt . tick_params ( axis = [string] , which = [string] , labelsize = [number] ) [EOL] plt . show ( ) [EOL] [EOL] [EOL] [EOL] [EOL] [EOL] def generate_features ( df ) : [EOL] print ( [string] ) [EOL] time_features ( df ) [EOL] gc . collect ( ) [EOL] [EOL] group_combinations = [ ] [EOL] [EOL] var_combination = [ [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , ] [EOL] [EOL] count_combinations = [ [ [string] ] , [ [string] ] , [ [string] ] , [ [string] ] , [ [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] ] , [ [string] , [string] , [string] , [string] ] , [ [string] , [string] , [string] , [string] ] , [ [string] , [string] , [string] ] ] [EOL] [EOL] countUniq_combinations = [ [ [ [string] ] , [string] ] , [ [ [string] , [string] , [string] , [string] ] , [string] ] , [ [ [string] ] , [string] ] , [ [ [string] ] , [string] ] , [ [ [string] ] , [string] ] ] [EOL] [EOL] nextClick_combinations = [ [ [string] , [string] ] , [ [string] , [string] , [string] ] , [ [string] , [string] , [string] , [string] ] , [ [string] , [string] , [string] , [string] , [string] ] ] [EOL] [EOL] freq_combinations = [ [ [string] , [string] , [string] , [string] ] ] [EOL] [EOL] accum_combinations = [ [ [string] ] , [ [string] ] , [ [string] ] , [ [string] ] , [ [string] ] ] [EOL] [EOL] df = group_label ( df , group_combinations ) [EOL] df = count_agg ( df , count_combinations ) [EOL] df = variance ( df , var_combination ) [EOL] df = count_cum ( df , accum_combinations ) [EOL] df = count_uniq ( df , countUniq_combinations ) [EOL] df [ [string] ] = ( df [ [string] ] . astype ( np . int64 ) ) . astype ( np . int32 ) [EOL] df = next_click ( df , nextClick_combinations ) [EOL] [comment] [EOL] print ( df . info ( ) ) [EOL] gc . collect ( ) [EOL] return df [EOL] [EOL] [EOL] [EOL] train_cols = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] [comment] [EOL] [EOL] train_df = pd . read_csv ( [string] , dtype = dtype , usecols = train_cols , parse_dates = [ [string] ] , nrows = [number] ) [EOL] [EOL] time_features ( train_df ) [EOL] [comment] [EOL] [EOL] all_df = generate_features ( train_df ) [EOL] gc . collect ( ) [EOL] print ( [string] ) [EOL] all_df . to_csv ( path_or_buf = [string] ) [EOL] print ( [string] ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 $typing.List[builtins.strtyping.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , Tuple , List , Dict , Any [EOL] import typing [EOL] import gc [EOL] import time [EOL] import numpy as np [EOL] import pandas as pd [EOL] from sklearn . model_selection import train_test_split [EOL] import xgboost as xgb [EOL] from xgboost import plot_importance [EOL] import matplotlib . pyplot as plt [EOL] [EOL] [comment] [EOL] is_valid = False [EOL] [EOL] path = [string] [EOL] [EOL] def timeFeatures ( df ) : [EOL] [comment] [EOL] df [ [string] ] = pd . to_datetime ( df [ [string] ] ) [EOL] df [ [string] ] = df [ [string] ] . dt . dayofweek [EOL] df [ [string] ] = df [ [string] ] . dt . dayofyear [EOL] [comment] [EOL] df . drop ( [ [string] , [string] ] , axis = [number] , inplace = True ) [EOL] return df [EOL] [EOL] start_time = time . time ( ) [EOL] [EOL] train_columns = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] test_columns = [ [string] , [string] , [string] , [string] , [string] , [string] , [string] ] [EOL] dtypes = { [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] [comment] [EOL] train = pd . read_csv ( path + [string] , skiprows = range ( [number] , [number] ) , nrows = [number] , usecols = train_columns , dtype = dtypes ) [EOL] test = pd . read_csv ( path + [string] , usecols = test_columns , dtype = dtypes ) [EOL] [EOL] print ( [string] . format ( time . time ( ) - start_time ) ) [EOL] [EOL] [comment] [EOL] y = train [ [string] ] [EOL] train . drop ( [ [string] ] , axis = [number] , inplace = True ) [EOL] [EOL] [comment] [EOL] sub = pd . DataFrame ( ) [EOL] [comment] [EOL] test . drop ( [ [string] ] , axis = [number] , inplace = True ) [EOL] gc . collect ( ) [EOL] [EOL] nrow_train = train . shape [ [number] ] [EOL] merge = pd . concat ( [ train , test ] ) [EOL] [EOL] del train , test [EOL] gc . collect ( ) [EOL] [EOL] [comment] [EOL] ip_count = merge . groupby ( [ [string] ] ) [ [string] ] . count ( ) . reset_index ( ) [EOL] ip_count . columns = [ [string] , [string] ] [EOL] merge = pd . merge ( merge , ip_count , on = [string] , how = [string] , sort = False ) [EOL] merge [ [string] ] = merge [ [string] ] . astype ( [string] ) [EOL] merge . drop ( [string] , axis = [number] , inplace = True ) [EOL] [EOL] train = merge [ : nrow_train ] [EOL] test = merge [ nrow_train : ] [EOL] [EOL] del test , merge [EOL] gc . collect ( ) [EOL] [EOL] print ( [string] . format ( time . time ( ) - start_time ) ) [EOL] [EOL] train = timeFeatures ( train ) [EOL] gc . collect ( ) [EOL] [EOL] print ( [string] . format ( time . time ( ) - start_time ) ) [EOL] [EOL] [comment] [EOL] params = { [string] : [number] , [string] : [string] , [string] : [string] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [string] , [string] : [number] , [string] : [string] , [string] : [number] , [string] : [number] , [string] : True } [EOL] [EOL] [EOL] if ( is_valid == True ) : [EOL] [comment] [EOL] x1 , x2 , y1 , y2 = train_test_split ( train , y , test_size = [number] , random_state = [number] ) [EOL] dtrain = xgb . DMatrix ( x1 , y1 ) [EOL] dvalid = xgb . DMatrix ( x2 , y2 ) [EOL] del x1 , y1 , x2 , y2 [EOL] gc . collect ( ) [EOL] watchlist = [ ( dtrain , [string] ) , ( dvalid , [string] ) ] [EOL] model = xgb . train ( params , dtrain , [number] , watchlist , maximize = True , early_stopping_rounds = [number] , verbose_eval = [number] ) [EOL] del dvalid [EOL] else : [EOL] dtrain = xgb . DMatrix ( train , y ) [EOL] del train , y [EOL] gc . collect ( ) [EOL] watchlist = [ ( dtrain , [string] ) ] [EOL] model = xgb . train ( params , dtrain , [number] , watchlist , maximize = True , verbose_eval = [number] ) [EOL] [EOL] del dtrain [EOL] gc . collect ( ) [EOL] [EOL] print ( [string] . format ( time . time ( ) - start_time ) ) [EOL] [EOL] [EOL] model . save_model ( [string] ) [EOL] [EOL] [EOL] [comment] [EOL] plot_importance ( model ) [EOL] plt . gcf ( ) . savefig ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 $typing.Any$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Union[builtins.float,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Any,builtins.str]]$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Union[builtins.float,builtins.str]]$ 0 $typing.Any$ 0 0 0 $typing.List[typing.Tuple[typing.Any,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Any,builtins.str]]$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Union[builtins.float,builtins.str]]$ 0 $typing.Any$ 0 0 0 $typing.List[typing.Tuple[typing.Any,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0