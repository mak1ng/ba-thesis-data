import uuid [EOL] [EOL] mac_addr = hex ( uuid . getnode ( ) ) . replace ( [string] , [string] ) [EOL] print ( [string] . join ( mac_addr [ i : i + [number] ] for i in range ( [number] , [number] , [number] ) ) ) [EOL]	0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[EOL] NUM_ENTRIES = [number] [EOL] CYCLE_DURATION_MINUTES = [number] [EOL] INTENSITY_INCREMENT_PAR = [number] [EOL] [EOL] [comment] [EOL] print ( [string] ) [EOL] spectrum = [string] [EOL] distance = [string] [EOL] for i in range ( [number] , NUM_ENTRIES + [number] ) : [EOL] par = INTENSITY_INCREMENT_PAR * i [EOL] key = [string] . format ( par ) [EOL] name = [string] . format ( par ) [EOL] intensity = [string] . format ( par ) [EOL] entry = key + [string] + name + spectrum + distance + intensity + [string] [EOL] print ( entry ) [EOL] [EOL] [comment] [EOL] print ( [string] ) [EOL] duration = [string] . format ( CYCLE_DURATION_MINUTES ) [EOL] for i in range ( [number] , NUM_ENTRIES + [number] ) : [EOL] par = INTENSITY_INCREMENT_PAR * i [EOL] name = [string] . format ( i , NUM_ENTRIES ) [EOL] environment = [string] . format ( par ) [EOL] entry = [string] + name + environment + duration + [string] [EOL] print ( entry ) [EOL] [EOL] [comment] [EOL] print ( [string] ) [EOL] duration = [string] . format ( CYCLE_DURATION_MINUTES ) [EOL] for i in range ( [number] , NUM_ENTRIES + [number] ) : [EOL] par = [number] - INTENSITY_INCREMENT_PAR * i [EOL] name = [string] . format ( i , NUM_ENTRIES ) [EOL] environment = [string] . format ( par ) [EOL] entry = [string] + name + environment + duration + [string] [EOL] print ( entry ) [EOL]	0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.int$ 0 0 $builtins.str$ 0 0 0 0 0 $builtins.int$ 0 0 $builtins.str$ 0 0 0 0 0 $builtins.int$ 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 $builtins.str$ 0 0 0 0 0 $builtins.int$ 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 $builtins.str$ 0 0 0 0 0 $builtins.int$ 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0
DISPLAY_TIME = [string] [EOL]	$builtins.str$ 0 0 0
from device . utilities . exceptions import ExceptionLogger [EOL] [EOL] [EOL] class DriverError ( ExceptionLogger ) : [EOL] pass [EOL] [EOL] [EOL] class InitError ( DriverError ) : [EOL] message_base = [string] [EOL] [EOL] [EOL] class SetupError ( DriverError ) : [EOL] message_base = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] from typing import Type , Optional [EOL] import builtins [EOL] import device [EOL] import time [EOL] import typing [EOL] import threading [EOL] import time , threading [EOL] [EOL] [comment] [EOL] from typing import NamedTuple , Optional , Dict [EOL] [EOL] [comment] [EOL] from device . utilities . logger import Logger [EOL] from device . utilities import bitwise [EOL] from device . utilities . communication . i2c . main import I2C [EOL] from device . utilities . communication . i2c . exceptions import I2CError [EOL] from device . utilities . communication . i2c . mux_simulator import MuxSimulator [EOL] [EOL] [comment] [EOL] from device . peripherals . modules . actuator_grove_rgb_lcd import exceptions , simulator [EOL] [EOL] [EOL] class GroveRGBLCDDriver : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] [comment] [EOL] CMD = [number] [EOL] CLEAR = [number] [EOL] DISPLAY_ON_NO_CURSOR = [number] | [number] [EOL] TWO_LINES = [number] [EOL] CHAR = [number] [EOL] NEWLINE = [number] [EOL] RGB_ADDRESS = [number] [EOL] LCD_ADDRESS = [number] [EOL] [EOL] [comment] [EOL] def __init__ ( self , name , i2c_lock , bus , rgb_address = RGB_ADDRESS , lcd_address = LCD_ADDRESS , mux = None , channel = None , simulate = False , mux_simulator = None , ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] logname = [string] . format ( name ) [EOL] self . logger = Logger ( logname , __name__ ) [EOL] [EOL] [comment] [EOL] if simulate : [EOL] self . logger . info ( [string] ) [EOL] Simulator = simulator . GroveRGBLCDSimulator [EOL] else : [EOL] Simulator = None [EOL] [EOL] [comment] [EOL] try : [EOL] self . i2c_rgb = I2C ( name = [string] . format ( name ) , i2c_lock = i2c_lock , bus = bus , address = rgb_address , mux = mux , channel = channel , mux_simulator = mux_simulator , PeripheralSimulator = Simulator , ) [EOL] self . i2c_lcd = I2C ( name = [string] . format ( name ) , i2c_lock = i2c_lock , bus = bus , address = lcd_address , mux = mux , channel = channel , mux_simulator = mux_simulator , PeripheralSimulator = Simulator , ) [EOL] except I2CError as e : [EOL] raise exceptions . InitError ( logger = self . logger ) from e [EOL] [EOL] [comment] [EOL] try : [EOL] [comment] [EOL] self . i2c_lcd . write ( bytes ( [ self . CMD , self . CLEAR ] ) ) [EOL] time . sleep ( [number] ) [comment] [EOL] [EOL] [comment] [EOL] self . i2c_lcd . write ( bytes ( [ self . CMD , self . DISPLAY_ON_NO_CURSOR ] ) ) [EOL] [EOL] [comment] [EOL] self . i2c_lcd . write ( bytes ( [ self . CMD , self . TWO_LINES ] ) ) [EOL] time . sleep ( [number] ) [comment] [EOL] [EOL] except I2CError as e : [EOL] raise exceptions . DriverError ( logger = self . logger ) from e [EOL] [EOL] [comment] [EOL] def set_backlight ( self , R = [number] , G = [number] , B = [number] ) : [EOL] [docstring] [EOL] [comment] [EOL] if R < [number] or R > [number] or G < [number] or G > [number] or B < [number] or B > [number] : [EOL] self . logger . error ( [string] ) [EOL] raise exceptions . DriverError ( logger = self . logger ) [EOL] [EOL] message = [string] . format ( R , G , B ) [EOL] self . logger . debug ( message ) [EOL] [EOL] [comment] [EOL] try : [EOL] self . i2c_rgb . write ( bytes ( [ [number] , [number] ] ) ) [EOL] self . i2c_rgb . write ( bytes ( [ [number] , [number] ] ) ) [EOL] self . i2c_rgb . write ( bytes ( [ [number] , [number] ] ) ) [EOL] self . i2c_rgb . write ( bytes ( [ [number] , R ] ) ) [EOL] self . i2c_rgb . write ( bytes ( [ [number] , G ] ) ) [EOL] self . i2c_rgb . write ( bytes ( [ [number] , B ] ) ) [EOL] except I2CError as e : [EOL] raise exceptions . DriverError ( logger = self . logger ) from e [EOL] [EOL] [comment] [EOL] def write_string ( self , message = [string] ) : [EOL] [docstring] [EOL] self . logger . debug ( [string] . format ( message ) ) [EOL] try : [EOL] [comment] [EOL] self . i2c_lcd . write ( bytes ( [ self . CMD , self . CLEAR ] ) ) [EOL] time . sleep ( [number] ) [comment] [EOL] for char in message : [EOL] [comment] [EOL] if char == [string] : [EOL] self . i2c_lcd . write ( bytes ( [ self . CMD , self . NEWLINE ] ) ) [EOL] continue [EOL] [comment] [EOL] c = ord ( char ) [EOL] self . i2c_lcd . write ( bytes ( [ self . CHAR , c ] ) ) [EOL] [comment] [EOL] except I2CError as e : [EOL] raise exceptions . DriverError ( logger = self . logger ) from e [EOL] [EOL] [comment] [EOL] def display_time ( self , retry = True ) : [EOL] [docstring] [EOL] [comment] [EOL] lt = time . localtime ( ) [EOL] now = [string] . format ( time . strftime ( [string] , lt ) ) [EOL] self . logger . debug ( [string] . format ( now ) ) [EOL] try : [EOL] [comment] [EOL] self . i2c_lcd . write ( bytes ( [ self . CMD , self . CLEAR ] ) ) [EOL] time . sleep ( [number] ) [comment] [EOL] self . write_string ( now ) [EOL] except exceptions . DriverError as e : [EOL] raise exceptions . DriverError ( logger = self . logger ) from e [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $threading.RLock$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $builtins.bool$ 0 0 0 $typing.Optional[device.utilities.communication.i2c.mux_simulator.MuxSimulator]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $threading.RLock$ 0 $threading.RLock$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.int$ 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[device.utilities.communication.i2c.mux_simulator.MuxSimulator]$ 0 $typing.Optional[device.utilities.communication.i2c.mux_simulator.MuxSimulator]$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $threading.RLock$ 0 $threading.RLock$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.int$ 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[device.utilities.communication.i2c.mux_simulator.MuxSimulator]$ 0 $typing.Optional[device.utilities.communication.i2c.mux_simulator.MuxSimulator]$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 $time.struct_time$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $time.struct_time$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
from device . utilities . exceptions import ExceptionLogger [EOL] [EOL] [EOL] class DriverError ( ExceptionLogger ) : [EOL] pass [EOL] [EOL] [EOL] class InitError ( DriverError ) : [EOL] message_base = [string] [EOL] [EOL] [EOL] class SetupError ( DriverError ) : [EOL] message_base = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
TURN_ON = [string] [EOL] TURN_OFF = [string] [EOL]	$builtins.str$ 0 0 0 $builtins.str$ 0 0 0
	0
[comment] [EOL] from typing import Any , Optional [EOL] import device [EOL] import threading [EOL] import typing [EOL] import builtins [EOL] import time , threading [EOL] [EOL] [comment] [EOL] from typing import Optional , Tuple , NamedTuple [EOL] [EOL] [comment] [EOL] from device . utilities . logger import Logger [EOL] from device . utilities import logger , maths [EOL] [EOL] [comment] [EOL] [comment] [EOL] from device . utilities . communication . i2c . mux_simulator import MuxSimulator [EOL] [EOL] [comment] [EOL] from device . peripherals . classes . atlas import driver [EOL] from device . peripherals . modules . atlas_do import simulator , exceptions [EOL] [EOL] [EOL] class AtlasDODriver ( driver . AtlasDriver ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] do_accuracy = [number] [comment] [EOL] min_do = [number] [EOL] max_do = [number] [EOL] [EOL] def __init__ ( self , name , i2c_lock , bus , address , mux = None , channel = None , simulate = False , mux_simulator = None , ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] if simulate : [EOL] Simulator = simulator . AtlasDOSimulator [EOL] else : [EOL] Simulator = None [EOL] [EOL] [comment] [EOL] super ( ) . __init__ ( name = name , i2c_lock = i2c_lock , bus = bus , address = address , mux = mux , channel = channel , simulate = simulate , mux_simulator = mux_simulator , Simulator = Simulator , ) [EOL] [EOL] def setup ( self , retry = True ) : [EOL] [docstring] [EOL] self . logger . info ( [string] ) [EOL] try : [EOL] self . enable_led ( retry = retry ) [EOL] info = self . read_info ( retry = retry ) [EOL] if info . firmware_version > [number] : [EOL] self . enable_protocol_lock ( retry = retry ) [EOL] self . enable_mg_l_output ( retry = retry ) [EOL] self . disable_percent_saturation_output ( retry = retry ) [EOL] except Exception as e : [EOL] raise exceptions . SetupError ( logger = self . logger ) from e [EOL] [EOL] def read_do ( self , retry = True ) : [EOL] [docstring] [EOL] self . logger . debug ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] try : [EOL] response = self . process_command ( [string] , process_seconds = [number] , retry = retry ) [EOL] except Exception as e : [EOL] raise exceptions . ReadDOError ( logger = self . logger ) from e [EOL] [EOL] [comment] [EOL] do_raw = float ( response ) [comment] [EOL] [EOL] [comment] [EOL] error_magnitude = maths . magnitude ( self . do_accuracy ) [EOL] significant_figures = error_magnitude * - [number] [EOL] do = round ( do_raw , significant_figures ) [EOL] [EOL] [comment] [EOL] if do > self . min_do and do < self . min_do : [EOL] self . logger . warning ( [string] ) [EOL] return None [EOL] [EOL] [comment] [EOL] self . logger . debug ( [string] . format ( do ) ) [EOL] return do [EOL] [EOL] def enable_mg_l_output ( self , retry = True ) : [EOL] [docstring] [EOL] self . logger . info ( [string] ) [EOL] try : [EOL] self . process_command ( [string] , process_seconds = [number] , retry = retry ) [EOL] except Exception as e : [EOL] raise exceptions . EnableMgLOutputError ( logger = self . logger ) from e [EOL] [EOL] def disable_mg_l_output ( self , retry = True ) : [EOL] [docstring] [EOL] self . logger . info ( [string] ) [EOL] try : [EOL] self . process_command ( [string] , process_seconds = [number] , retry = retry ) [EOL] except Exception as e : [EOL] raise exceptions . DisableMgLOutputError ( logger = self . logger ) from e [EOL] [EOL] def enable_percent_saturation_output ( self , retry = True ) : [EOL] [docstring] [EOL] self . logger . info ( [string] ) [EOL] try : [EOL] self . process_command ( [string] , process_seconds = [number] , retry = retry ) [EOL] except Exception as e : [EOL] raise exceptions . EnablePercentSaturationOutputError ( logger = self . logger ) from e [EOL] [EOL] def disable_percent_saturation_output ( self , retry = True ) : [EOL] [docstring] [EOL] self . logger . info ( [string] ) [EOL] try : [EOL] self . process_command ( [string] , process_seconds = [number] , retry = retry ) [EOL] except Exception as e : [EOL] raise exceptions . DisablePercentSaturationOutputError ( logger = self . logger ) from e [EOL] [EOL] def set_compensation_ec ( self , value_ms_cm , retry = True ) : [EOL] [docstring] [EOL] self . logger . info ( [string] ) [EOL] [EOL] [comment] [EOL] value_us_cm = value_ms_cm * [number] [EOL] command = [string] . format ( value_us_cm ) [EOL] [EOL] [comment] [EOL] try : [EOL] self . process_command ( command , process_seconds = [number] , retry = retry ) [EOL] except Exception as e : [EOL] raise exceptions . SetCompensationECError ( logger = self . logger ) from e [EOL] [EOL] def set_compensation_pressure ( self , value , retry = True ) : [EOL] [docstring] [EOL] self . logger . info ( [string] ) [EOL] try : [EOL] command = [string] . format ( value ) [EOL] self . process_command ( command , process_seconds = [number] , retry = retry ) [EOL] except Exception as e : [EOL] raise exceptions . SetCompensationPressureError ( logger = self . logger ) from e [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 $builtins.int$ 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $threading.RLock$ 0 $builtins.int$ 0 $builtins.int$ 0 $typing.Optional[builtins.int]$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $builtins.bool$ 0 0 0 $typing.Optional[device.utilities.communication.i2c.mux_simulator.MuxSimulator]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 $None$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $threading.RLock$ 0 $threading.RLock$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[builtins.int]$ 0 $builtins.bool$ 0 $builtins.bool$ 0 $typing.Optional[device.utilities.communication.i2c.mux_simulator.MuxSimulator]$ 0 $typing.Optional[device.utilities.communication.i2c.mux_simulator.MuxSimulator]$ 0 $None$ 0 $None$ 0 0 0 0 0 $None$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 $typing.Any$ 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.float]$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $None$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.float$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.float$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] import os , sys , json , threading [EOL] [EOL] [comment] [EOL] ROOT_DIR = os . environ [ [string] ] [EOL] sys . path . append ( ROOT_DIR ) [EOL] os . chdir ( ROOT_DIR ) [EOL] [EOL] [comment] [EOL] from device . utilities . accessors import get_peripheral_config [EOL] from device . utilities . state . main import State [EOL] from device . utilities . communication . i2c . mux_simulator import MuxSimulator [EOL] [EOL] [comment] [EOL] from device . peripherals . modules . atlas_do . manager import AtlasDOManager [EOL] [EOL] [comment] [EOL] CONFIG_PATH = ROOT_DIR + [string] [EOL] device_config = json . load ( open ( CONFIG_PATH ) ) [EOL] peripheral_config = get_peripheral_config ( device_config [ [string] ] , [string] ) [EOL] [EOL] [EOL] def test_init ( ) : [EOL] manager = AtlasDOManager ( name = [string] , i2c_lock = threading . RLock ( ) , state = State ( ) , config = peripheral_config , simulate = True , mux_simulator = MuxSimulator ( ) , ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from device . utilities . exceptions import ExceptionLogger [EOL] [EOL] [EOL] class DriverError ( ExceptionLogger ) : [EOL] pass [EOL] [EOL] [EOL] class InitError ( DriverError ) : [EOL] message_base = [string] [EOL] [EOL] [EOL] class SetupError ( DriverError ) : [EOL] message_base = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
TURN_ON = [string] [EOL] TURN_OFF = [string] [EOL]	$builtins.str$ 0 0 0 $builtins.str$ 0 0 0
	0
[comment] [EOL] from typing import Dict , Any [EOL] import typing [EOL] from typing import Any , Dict [EOL] [EOL] [comment] [EOL] from device . utilities . bitwise import byte_str [EOL] [EOL] [comment] [EOL] from device . peripherals . classes . atlas . simulator import AtlasSimulator , ATLAS_SUCCESS_31 [EOL] [EOL] [EOL] class AtlasCo2Simulator ( AtlasSimulator ) : [comment] [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] self . registers = { } [EOL] [EOL] [comment] [EOL] CO2_WRITE_BYTES = bytes ( [ [number] , [number] ] ) [EOL] CO2_RESPONSE_BYTES = bytes ( [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ] ) [EOL] self . writes [ byte_str ( CO2_WRITE_BYTES ) ] = CO2_RESPONSE_BYTES [EOL] [EOL] [comment] [EOL] READ_TEMP_WRITE_BYTES = bytes ( [ [number] , [number] ] ) [EOL] READ_TEMP_RESPONSE_BYTES = bytes ( [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ] ) [EOL] self . writes [ byte_str ( READ_TEMP_WRITE_BYTES ) ] = READ_TEMP_RESPONSE_BYTES [EOL] [EOL] [comment] [EOL] INFO_WRITE_BYTES = bytes ( [ [number] , [number] ] ) [EOL] INFO_RESPONSE_BYTES = bytes ( [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ] ) [EOL] self . writes [ byte_str ( INFO_WRITE_BYTES ) ] = INFO_RESPONSE_BYTES [EOL] [EOL] [comment] [EOL] ENABLE_TEMP_WRITE_BYTES = bytes ( [ [number] , [number] , [number] , [number] , [number] , [number] ] ) [EOL] ENABLE_TEMP_RESPONSE_BYTES = ATLAS_SUCCESS_31 [EOL] self . writes [ byte_str ( ENABLE_TEMP_WRITE_BYTES ) ] = ENABLE_TEMP_RESPONSE_BYTES [EOL] [EOL] [comment] [EOL] DISABLE_TEMP_WRITE_BYTES = bytes ( [ [number] , [number] , [number] , [number] , [number] , [number] ] ) [EOL] DISABLE_TEMP_RESPONSE_BYTES = ATLAS_SUCCESS_31 [EOL] self . writes [ byte_str ( DISABLE_TEMP_WRITE_BYTES ) ] = DISABLE_TEMP_RESPONSE_BYTES [EOL] [EOL] [comment] [EOL] DISABLE_ALARM_WRITE_BYTES = bytes ( [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] ) [EOL] DISABLE_ALARM_RESPONSE_BYTES = ATLAS_SUCCESS_31 [EOL] self . writes [ byte_str ( DISABLE_ALARM_WRITE_BYTES ) ] = DISABLE_ALARM_RESPONSE_BYTES [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 $builtins.bytes$ 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 $builtins.bytes$ 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 $builtins.bytes$ 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0
	0
from device . peripherals . classes . atlas import exceptions [EOL] [EOL] [EOL] SetupError = exceptions . SetupError [EOL] [EOL] [EOL] class ReadCo2Error ( exceptions . DriverError ) : [EOL] message_base = [string] [EOL] [EOL] [EOL] class ReadInternalTemperatureError ( exceptions . DriverError ) : [EOL] message_base = [string] [EOL] [EOL] [EOL] class EnableInternalTemperatureError ( exceptions . DriverError ) : [EOL] message_base = [string] [EOL] [EOL] [EOL] class DisableInternalTemperatureError ( exceptions . DriverError ) : [EOL] message_base = [string] [EOL] [EOL] [EOL] class EnableAlarmError ( exceptions . DriverError ) : [EOL] message_base = [string] [EOL] [EOL] [EOL] class DisableAlarmError ( exceptions . DriverError ) : [EOL] message_base = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
[comment] [EOL] from typing import Any , Optional [EOL] import typing [EOL] import builtins [EOL] from typing import Optional , Tuple , Dict , Any [EOL] [EOL] [comment] [EOL] from device . peripherals . classes . peripheral import manager , modes [EOL] [EOL] [comment] [EOL] from device . peripherals . modules . t6713 import driver , exceptions [EOL] [EOL] [EOL] class T6713Manager ( manager . PeripheralManager ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] [comment] [EOL] self . co2_name = self . variables [ [string] ] [ [string] ] [EOL] [EOL] [comment] [EOL] self . default_sampling_interval = [number] [EOL] [EOL] @ property def co2 ( self ) : [EOL] [docstring] [EOL] value = self . state . get_peripheral_reported_sensor_value ( self . name , self . co2_name ) [EOL] if value != None : [EOL] return float ( value ) [EOL] return None [EOL] [EOL] @ co2 . setter def co2 ( self , value ) : [EOL] [docstring] [EOL] self . state . set_peripheral_reported_sensor_value ( self . name , self . co2_name , value ) [EOL] if self . mode != modes . CALIBRATE : [EOL] self . state . set_environment_reported_sensor_value ( self . name , self . co2_name , value ) [EOL] [EOL] def initialize_peripheral ( self ) : [EOL] [docstring] [EOL] self . logger . info ( [string] ) [EOL] [EOL] [comment] [EOL] self . clear_reported_values ( ) [EOL] [EOL] [comment] [EOL] self . health = [number] [EOL] [EOL] [comment] [EOL] try : [EOL] self . driver = driver . T6713Driver ( name = self . name , i2c_lock = self . i2c_lock , bus = self . bus , mux = self . mux , channel = self . channel , address = self . address , simulate = self . simulate , mux_simulator = self . mux_simulator , ) [EOL] except exceptions . DriverError as e : [EOL] self . logger . exception ( [string] ) [EOL] self . health = [number] [EOL] self . mode = modes . ERROR [EOL] [EOL] def setup_peripheral ( self ) : [EOL] [docstring] [EOL] self . logger . debug ( [string] ) [EOL] [EOL] try : [EOL] self . driver . setup ( ) [EOL] except exceptions . DriverError as e : [EOL] self . logger . exception ( [string] ) [EOL] self . mode = modes . ERROR [EOL] self . health = [number] [EOL] [EOL] def update_peripheral ( self ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] try : [EOL] co2 = self . driver . read_co2 ( ) [EOL] except exceptions . DriverError : [EOL] self . logger . exception ( [string] ) [EOL] self . mode = modes . ERROR [EOL] self . health = [number] [EOL] return [EOL] [EOL] [comment] [EOL] self . co2 = co2 [EOL] self . health = [number] [EOL] [EOL] def reset_peripheral ( self ) : [EOL] [docstring] [EOL] self . logger . info ( [string] ) [EOL] self . clear_reported_values ( ) [EOL] [EOL] [comment] [EOL] try : [EOL] if self . mode != modes . ERROR : [EOL] self . driver . reset ( ) [EOL] except exceptions . DriverError : [EOL] self . logger . exception ( [string] ) [EOL] [EOL] def shutdown_peripheral ( self ) : [EOL] [docstring] [EOL] self . logger . info ( [string] ) [EOL] self . clear_reported_values ( ) [EOL] [EOL] def clear_reported_values ( self ) : [EOL] [docstring] [EOL] self . co2 = None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0
	0
[comment] [EOL] from typing import Any [EOL] import device [EOL] import typing [EOL] import os , sys , threading [EOL] [EOL] [comment] [EOL] from typing import Any [EOL] [EOL] [comment] [EOL] sys . path . append ( os . environ [ [string] ] ) [EOL] [EOL] [comment] [EOL] from device . peripherals . classes . peripheral . scripts . run_peripheral import RunnerBase [EOL] [EOL] [comment] [EOL] from device . peripherals . modules . t6713 . driver import T6713Driver [EOL] [EOL] [EOL] class DriverRunner ( RunnerBase ) : [comment] [EOL] [docstring] [EOL] [EOL] [comment] [EOL] default_device = [string] [EOL] default_name = [string] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] [comment] [EOL] self . parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] self . parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] self . parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] self . parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] self . parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] self . parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] [EOL] def run ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] super ( ) . run ( * args , ** kwargs ) [EOL] [EOL] [comment] [EOL] self . driver = T6713Driver ( name = self . args . name , i2c_lock = threading . RLock ( ) , bus = self . bus , address = self . address , mux = self . mux , channel = self . channel , ) [EOL] [EOL] [comment] [EOL] if self . args . status : [EOL] status = self . driver . read_status ( ) [EOL] print ( [string] . format ( status ) ) [EOL] [EOL] [comment] [EOL] if self . args . setup : [EOL] self . driver . setup ( ) [EOL] [EOL] [comment] [EOL] elif self . args . co2 : [EOL] co2 = self . driver . read_co2 ( ) [EOL] print ( [string] . format ( co2 ) ) [EOL] [EOL] [comment] [EOL] elif self . args . reset : [EOL] self . driver . reset ( ) [EOL] [EOL] [comment] [EOL] elif self . args . enable_abc : [EOL] self . driver . enable_abc_logic ( ) [EOL] [EOL] [comment] [EOL] elif self . args . disable_abc : [EOL] self . driver . disable_abc_logic ( ) [EOL] [EOL] [EOL] [comment] [EOL] if __name__ == [string] : [EOL] dr = DriverRunner ( ) [EOL] dr . run ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $device.peripherals.modules.t6713.scripts.run_driver.DriverRunner$ 0 0 0 0 0 $device.peripherals.modules.t6713.scripts.run_driver.DriverRunner$ 0 0 0 0 0
	0
from device . utilities . exceptions import ExceptionLogger [EOL] [EOL] [EOL] class DriverError ( ExceptionLogger ) : [EOL] pass [EOL] [EOL] [EOL] class InitError ( DriverError ) : [EOL] message_base = [string] [EOL] [EOL] [EOL] class SetupError ( DriverError ) : [EOL] message_base = [string] [EOL] [EOL] [EOL] class ReadTemperatureError ( DriverError ) : [comment] [EOL] message_base = [string] [EOL] [EOL] [EOL] class ReadHumidityError ( DriverError ) : [comment] [EOL] message_base = [string] [EOL] [EOL] [EOL] class ReadUserRegisterError ( DriverError ) : [comment] [EOL] message_base = [string] [EOL] [EOL] [EOL] class ResetError ( DriverError ) : [comment] [EOL] message_base = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
	0
	0
CALIBRATE_DRY = [string] [EOL] CALIBRATE_SINGLE = [string] [EOL] CALIBRATE_LOW = [string] [EOL] CALIBRATE_HIGH = [string] [EOL] CLEAR_CALIBRATION = [string] [EOL]	$builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
	0
	0
CAPTURE = [string] [EOL]	$builtins.str$ 0 0 0
	0
from typing import Dict , Any , Optional [EOL] import device [EOL] import threading [EOL] import typing [EOL] import builtins [EOL] import datetime [EOL] from abc import ABC , abstractmethod [EOL] [EOL] import threading , os [EOL] [EOL] from typing import Optional , Tuple , Dict , Any , List [EOL] [EOL] from device . utilities import logger [EOL] from device . utilities . communication . i2c . exceptions import I2CError [EOL] from device . utilities . communication . i2c . mux_simulator import MuxSimulator [EOL] [EOL] from django . conf import settings [EOL] [EOL] [EOL] class CameraDriver ( ABC ) : [EOL] [EOL] @ abstractmethod def __init__ ( self , name , vendor_id , product_id , resolution , num_cameras = [number] , simulate = False , usb_mux_comms = None , usb_mux_channel = None , i2c_lock = None , mux_simulator = None , ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] self . IMAGE_DIR = settings . DATA_PATH + [string] [EOL] self . CAPTURE_DIR = self . IMAGE_DIR + [string] [EOL] self . MODULE_DIR = [string] [EOL] self . SIMULATE_IMAGE_DIR = self . MODULE_DIR + [string] [EOL] self . DUMMY_IMAGE_PATH = self . MODULE_DIR + [string] [EOL] self . ACTIVE_IMAGE_PATH = self . MODULE_DIR + [string] [EOL] self . SIMULATION_IMAGE_PATH = self . MODULE_DIR + [string] [EOL] [EOL] [comment] [EOL] self . name = name [EOL] self . vendor_id = vendor_id [EOL] self . product_id = product_id [EOL] self . resolution = resolution [EOL] self . num_cameras = num_cameras [EOL] self . simulate = simulate [EOL] self . usb_mux_enabled = True [EOL] [EOL] [comment] [EOL] logname = [string] . format ( name ) [EOL] self . logger = logger . Logger ( logname , [string] ) [EOL] [EOL] [comment] [EOL] if self . simulate : [EOL] self . logger . info ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] self . directory = self . IMAGE_DIR [EOL] self . usb_mux_enabled = False [EOL] else : [EOL] self . directory = self . IMAGE_DIR [EOL] self . capture_dir = self . CAPTURE_DIR [EOL] [EOL] [comment] [EOL] if not os . path . exists ( self . directory ) : [EOL] os . makedirs ( self . directory ) [EOL] [EOL] if not os . path . exists ( self . capture_dir ) : [EOL] os . makedirs ( self . capture_dir ) [EOL] [EOL] [comment] [EOL] if usb_mux_comms is None or usb_mux_channel is None : [EOL] self . usb_mux_enabled = False [EOL] return [EOL] [EOL] [comment] [EOL] self . bus = usb_mux_comms . get ( [string] ) [EOL] self . mux = usb_mux_comms . get ( [string] ) [EOL] self . channel = usb_mux_comms . get ( [string] ) [EOL] self . address = usb_mux_comms . get ( [string] ) [EOL] [EOL] [comment] [EOL] if self . bus == [string] : [EOL] self . logger . debug ( [string] ) [EOL] self . bus = os . getenv ( [string] ) [EOL] [EOL] [comment] [EOL] if self . bus == [string] : [EOL] self . bus = None [EOL] [EOL] if self . bus is not None : [EOL] self . bus = int ( self . bus ) [EOL] [EOL] [comment] [EOL] if self . mux == [string] : [EOL] self . logger . debug ( [string] ) [EOL] self . mux = os . getenv ( [string] ) [EOL] [EOL] [comment] [EOL] if self . mux == [string] : [EOL] self . mux = None [EOL] self . logger . debug ( [string] . format ( self . mux ) ) [EOL] [EOL] [comment] [EOL] if self . address is not None : [EOL] address = int ( self . address , [number] ) [EOL] if self . mux is not None : [EOL] self . mux = int ( self . mux , [number] ) [EOL] [EOL] @ abstractmethod def capture ( self , retry = True ) : [EOL] [docstring] [EOL] timestring = datetime . datetime . utcnow ( ) . strftime ( [string] ) [EOL] [comment] [EOL] filename = [string] . format ( timestring , self . name ) [EOL] self . logger . info ( f" [string] { filename }" ) [EOL] return [EOL] [EOL] def _simulate_capture ( self , filename ) : [EOL] [comment] [EOL] if self . simulate : [EOL] message = [string] . format ( filename ) [EOL] self . logger . info ( message ) [EOL] command = [string] . format ( self . SIMULATION_IMAGE_PATH , filename ) [EOL] os . system ( command ) [EOL] return True [EOL] return False [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.str$ 0 $builtins.int$ 0 0 0 $builtins.bool$ 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $typing.Optional[threading.RLock]$ 0 0 0 $typing.Optional[device.utilities.communication.i2c.mux_simulator.MuxSimulator]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0
from typing import List , Dict , Any , Optional [EOL] import device [EOL] import threading [EOL] import typing [EOL] import builtins [EOL] import threading [EOL] import os [EOL] import datetime [EOL] import time [EOL] import shutil [EOL] [EOL] from typing import Optional , Dict , Any [EOL] [EOL] from picamera import PiCamera [EOL] [EOL] from device . peripherals . modules . camera . drivers . base_driver import CameraDriver [EOL] from device . utilities . communication . i2c . mux_simulator import MuxSimulator [EOL] [EOL] PLATFORM = os . getenv ( [string] ) [EOL] [EOL] [EOL] class PiCameraDriver ( CameraDriver ) : [EOL] def __init__ ( self , name , vendor_id , product_id , resolution , num_cameras = [number] , simulate = False , usb_mux_comms = None , usb_mux_channel = None , i2c_lock = None , mux_simulator = None ) : [EOL] [EOL] [comment] [EOL] if PLATFORM is not None and ( PLATFORM . startswith ( [string] ) or PLATFORM == [string] ) : [EOL] self . camera = PiCamera ( ) [EOL] picam_loaded = True [EOL] self . simulate = simulate [EOL] else : [EOL] self . simulate = True [EOL] picam_loaded = False [EOL] [EOL] super ( ) . __init__ ( name = name , vendor_id = vendor_id , product_id = product_id , resolution = resolution , num_cameras = num_cameras , simulate = self . simulate , usb_mux_comms = usb_mux_comms , usb_mux_channel = usb_mux_channel , i2c_lock = i2c_lock , mux_simulator = mux_simulator ) [EOL] [EOL] if not picam_loaded : [EOL] self . logger . info ( [string] ) [EOL] [EOL] def capture ( self , retry = True ) : [EOL] [docstring] [EOL] super ( ) . capture ( retry = retry ) [EOL] [EOL] timestring = datetime . datetime . utcnow ( ) . strftime ( [string] ) [EOL] [comment] [EOL] filename = [string] . format ( timestring , self . name ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] if not self . _simulate_capture ( filename ) : [EOL] resolution_array = self . resolution . split ( [string] ) [EOL] self . camera . resolution = ( int ( resolution_array [ [number] ] ) , int ( resolution_array [ [number] ] ) ) [EOL] self . camera . start_preview ( ) [EOL] [comment] [EOL] time . sleep ( [number] ) [EOL] [comment] [EOL] self . logger . debug ( [string] + filename ) [EOL] self . camera . capture ( self . capture_dir + filename ) [EOL] self . camera . stop_preview ( ) [EOL] self . logger . debug ( [string] ) [comment] [EOL] shutil . move ( self . capture_dir + filename , self . directory + filename ) [EOL] [EOL] return [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.str$ 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $typing.Optional[threading.RLock]$ 0 0 0 $typing.Optional[device.utilities.communication.i2c.mux_simulator.MuxSimulator]$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 $typing.Optional[typing.Dict[builtins.str,typing.Any]]$ 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[threading.RLock]$ 0 $typing.Optional[threading.RLock]$ 0 $typing.Optional[device.utilities.communication.i2c.mux_simulator.MuxSimulator]$ 0 $typing.Optional[device.utilities.communication.i2c.mux_simulator.MuxSimulator]$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0
[comment] [EOL] from typing import Optional , Tuple , Dict , Any [EOL] import typing [EOL] import builtins [EOL] from typing import Optional , Tuple , Dict , Any [EOL] [EOL] [comment] [EOL] from device . peripherals . classes . peripheral import manager , modes [EOL] from device . peripherals . classes . atlas import exceptions [EOL] from device . peripherals . modules . atlas_ph import driver , events [EOL] [EOL] [EOL] class AtlasPHManager ( manager . PeripheralManager ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] temperature_threshold = [number] [comment] [EOL] prev_temperature = [number] [comment] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] [comment] [EOL] self . ph_name = self . variables [ [string] ] [ [string] ] [EOL] self . temperature_name = self . variables [ [string] ] [ [string] ] [EOL] [EOL] [comment] [EOL] self . default_sampling_interval = [number] [EOL] [EOL] @ property def ph ( self ) : [EOL] [docstring] [EOL] value = self . state . get_peripheral_reported_sensor_value ( self . name , self . ph_name ) [EOL] if value != None : [EOL] return float ( value ) [EOL] return None [EOL] [EOL] @ ph . setter def ph ( self , value ) : [EOL] [docstring] [EOL] self . state . set_peripheral_reported_sensor_value ( self . name , self . ph_name , value ) [EOL] if self . mode != modes . CALIBRATE : [EOL] self . state . set_environment_reported_sensor_value ( self . name , self . ph_name , value ) [EOL] [EOL] @ property def temperature ( self ) : [EOL] [docstring] [EOL] value = self . state . get_environment_reported_sensor_value ( self . temperature_name ) [EOL] if value != None : [EOL] return float ( value ) [EOL] return None [EOL] [EOL] def initialize_peripheral ( self ) : [EOL] [docstring] [EOL] self . logger . info ( [string] ) [EOL] [EOL] [comment] [EOL] self . clear_reported_values ( ) [EOL] [EOL] [comment] [EOL] self . health = [number] [EOL] [EOL] [comment] [EOL] try : [EOL] self . driver = driver . AtlasPHDriver ( name = self . name , i2c_lock = self . i2c_lock , bus = self . bus , address = self . address , mux = self . mux , channel = self . channel , simulate = self . simulate , mux_simulator = self . mux_simulator , ) [EOL] except exceptions . DriverError as e : [EOL] self . logger . exception ( [string] ) [EOL] self . health = [number] [EOL] self . mode = modes . ERROR [EOL] [EOL] def setup_peripheral ( self ) : [EOL] [docstring] [EOL] self . logger . info ( [string] ) [EOL] [EOL] try : [EOL] self . driver . setup ( ) [EOL] except exceptions . DriverError as e : [EOL] self . logger . exception ( [string] ) [EOL] self . mode = modes . ERROR [EOL] self . health = [number] [EOL] [EOL] def update_peripheral ( self ) : [EOL] [docstring] [EOL] self . logger . info ( [string] ) [EOL] [EOL] try : [EOL] [comment] [EOL] if self . new_compensation_temperature ( ) : [EOL] self . driver . set_compensation_temperature ( self . temperature ) [EOL] [EOL] [comment] [EOL] self . ph = self . driver . read_ph ( ) [EOL] self . health = [number] [EOL] [EOL] except exceptions . DriverError as e : [EOL] self . logger . error ( [string] ) [EOL] self . mode = modes . ERROR [EOL] self . health = [number] [EOL] [EOL] def clear_reported_values ( self ) : [EOL] [docstring] [EOL] self . ph = None [EOL] [EOL] def new_compensation_temperature ( self ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] if self . mode == modes . CALIBRATE : [EOL] return False [EOL] [EOL] [comment] [EOL] if self . temperature == None : [EOL] return False [EOL] [EOL] [comment] [EOL] delta = abs ( self . temperature - self . prev_temperature ) [comment] [EOL] if delta < self . temperature_threshold : [EOL] return False [EOL] [EOL] [comment] [EOL] return True [EOL] [EOL] [comment] [EOL] [EOL] def create_peripheral_specific_event ( self , request ) : [EOL] [docstring] [EOL] if request [ [string] ] == events . CALIBRATE_LOW : [EOL] return self . calibrate_low ( request ) [EOL] elif request [ [string] ] == events . CALIBRATE_MID : [EOL] return self . calibrate_mid ( request ) [EOL] elif request [ [string] ] == events . CALIBRATE_HIGH : [EOL] return self . calibrate_high ( request ) [EOL] elif request [ [string] ] == events . CLEAR_CALIBRATION : [EOL] return self . clear_calibration ( ) [EOL] else : [EOL] return [string] , [number] [EOL] [EOL] def check_peripheral_specific_events ( self , request ) : [EOL] [docstring] [EOL] if request [ [string] ] == events . CALIBRATE_LOW : [EOL] self . _calibrate_low ( request ) [EOL] elif request [ [string] ] == events . CALIBRATE_MID : [EOL] self . _calibrate_mid ( request ) [EOL] elif request [ [string] ] == events . CALIBRATE_HIGH : [EOL] self . _calibrate_high ( request ) [EOL] elif request [ [string] ] == events . CLEAR_CALIBRATION : [EOL] self . _clear_calibration ( ) [EOL] else : [EOL] message = [string] . format ( request [ [string] ] ) [EOL] self . logger . error ( message ) [EOL] [EOL] def calibrate_low ( self , request ) : [EOL] [docstring] [EOL] self . logger . info ( [string] ) [EOL] [EOL] [comment] [EOL] try : [EOL] value = float ( request [ [string] ] ) [EOL] except KeyError as e : [EOL] message = [string] . format ( e ) [EOL] self . logger . debug ( message ) [EOL] return message , [number] [EOL] except ValueError as e : [EOL] message = [string] . format ( request [ [string] ] ) [EOL] self . logger . debug ( message ) [EOL] return message , [number] [EOL] [EOL] [comment] [EOL] if value not in range ( [number] , [number] ) : [EOL] message = [string] [EOL] self . logger . debug ( message ) [EOL] return message , [number] [EOL] [EOL] [comment] [EOL] if self . mode != modes . CALIBRATE : [EOL] message = [string] [EOL] self . logger . debug ( message ) [EOL] return message , [number] [EOL] [EOL] [comment] [EOL] request = { [string] : events . CALIBRATE_LOW , [string] : value } [EOL] self . event_queue . put ( request ) [EOL] [EOL] [comment] [EOL] return [string] , [number] [EOL] [EOL] def _calibrate_low ( self , request ) : [EOL] [docstring] [EOL] self . logger . info ( [string] ) [EOL] [EOL] [comment] [EOL] if self . mode != modes . CALIBRATE : [EOL] message = [string] . format ( self . mode ) [EOL] self . logger . critical ( message ) [EOL] return [EOL] [EOL] [comment] [EOL] try : [EOL] value = float ( request [ [string] ] ) [EOL] self . driver . calibrate_low ( value ) [EOL] except exceptions . DriverError : [EOL] self . logger . exception ( [string] ) [EOL] [EOL] def calibrate_mid ( self , request ) : [EOL] [docstring] [EOL] self . logger . info ( [string] ) [EOL] [EOL] [comment] [EOL] try : [EOL] value = float ( request [ [string] ] ) [EOL] except KeyError as e : [EOL] message = [string] . format ( e ) [EOL] self . logger . debug ( message ) [EOL] return message , [number] [EOL] except ValueError as e : [EOL] message = [string] . format ( request [ [string] ] ) [EOL] self . logger . debug ( message ) [EOL] return message , [number] [EOL] [EOL] [comment] [EOL] if value not in range ( [number] , [number] ) : [EOL] message = [string] [EOL] self . logger . debug ( message ) [EOL] return message , [number] [EOL] [EOL] [comment] [EOL] if self . mode != modes . CALIBRATE : [EOL] message = [string] [EOL] self . logger . debug ( message ) [EOL] return message , [number] [EOL] [EOL] [comment] [EOL] request = { [string] : events . CALIBRATE_MID , [string] : value } [EOL] self . event_queue . put ( request ) [EOL] [EOL] [comment] [EOL] return [string] , [number] [EOL] [EOL] def _calibrate_mid ( self , request ) : [EOL] [docstring] [EOL] self . logger . info ( [string] ) [EOL] [EOL] [comment] [EOL] if self . mode != modes . CALIBRATE : [EOL] message = [string] . format ( self . mode ) [EOL] self . logger . critical ( message ) [EOL] return [EOL] [EOL] [comment] [EOL] try : [EOL] value = float ( request [ [string] ] ) [EOL] self . driver . calibrate_mid ( value ) [EOL] except exceptions . DriverError : [EOL] self . logger . exception ( [string] ) [EOL] [EOL] def calibrate_high ( self , request ) : [EOL] [docstring] [EOL] self . logger . info ( [string] ) [EOL] [EOL] [comment] [EOL] try : [EOL] value = float ( request [ [string] ] ) [EOL] except KeyError as e : [EOL] message = [string] . format ( e ) [EOL] self . logger . debug ( message ) [EOL] return message , [number] [EOL] except ValueError as e : [EOL] message = [string] . format ( request [ [string] ] ) [EOL] self . logger . debug ( message ) [EOL] return message , [number] [EOL] [EOL] [comment] [EOL] if value not in range ( [number] , [number] ) : [EOL] message = [string] [EOL] self . logger . debug ( message ) [EOL] return message , [number] [EOL] [EOL] [comment] [EOL] if self . mode != modes . CALIBRATE : [EOL] message = [string] [EOL] self . logger . debug ( message ) [EOL] return message , [number] [EOL] [EOL] [comment] [EOL] request = { [string] : events . CALIBRATE_HIGH , [string] : value } [EOL] self . event_queue . put ( request ) [EOL] [EOL] [comment] [EOL] return [string] , [number] [EOL] [EOL] def _calibrate_high ( self , request ) : [EOL] [docstring] [EOL] self . logger . debug ( [string] ) [EOL] [EOL] [comment] [EOL] if self . mode != modes . CALIBRATE : [EOL] message = [string] . format ( self . mode ) [EOL] self . logger . critical ( message ) [EOL] return [EOL] [EOL] [comment] [EOL] try : [EOL] value = float ( request [ [string] ] ) [EOL] self . driver . calibrate_high ( value ) [EOL] except exceptions . DriverError : [EOL] self . logger . exception ( [string] ) [EOL] [EOL] def clear_calibration ( self ) : [EOL] [docstring] [EOL] self . logger . debug ( [string] ) [EOL] [EOL] [comment] [EOL] if self . mode != modes . CALIBRATE : [EOL] message = [string] [EOL] self . logger . debug ( message ) [EOL] return message , [number] [EOL] [EOL] [comment] [EOL] request = { [string] : events . CLEAR_CALIBRATION } [EOL] self . event_queue . put ( request ) [EOL] [EOL] [comment] [EOL] return [string] , [number] [EOL] [EOL] def _clear_calibration ( self ) : [EOL] [docstring] [EOL] self . logger . info ( [string] ) [EOL] [EOL] [comment] [EOL] if self . mode != modes . CALIBRATE : [EOL] message = [string] . format ( self . mode ) [EOL] self . logger . debug ( message ) [EOL] return [EOL] [EOL] [comment] [EOL] try : [EOL] self . driver . clear_calibrations ( ) [EOL] except exceptions . DriverError : [EOL] self . logger . exception ( [string] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $typing.Optional[builtins.float]$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.int]$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Tuple[builtins.str,builtins.int]$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.int]$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.int]$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
CALIBRATE_LOW = [string] [EOL] CALIBRATE_MID = [string] [EOL] CALIBRATE_HIGH = [string] [EOL] CLEAR_CALIBRATION = [string] [EOL]	$builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] from typing import Dict , Any [EOL] import typing [EOL] from typing import Any , Dict [EOL] [EOL] [comment] [EOL] from device . utilities . bitwise import byte_str [EOL] [EOL] [comment] [EOL] from device . peripherals . classes . atlas . simulator import AtlasSimulator [EOL] [EOL] [EOL] class AtlasPHSimulator ( AtlasSimulator ) : [comment] [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] self . registers = { } [EOL] [EOL] [comment] [EOL] PH_WRITE_BYTES = bytes ( [ [number] , [number] ] ) [EOL] PH_RESPONSE_BYTES = bytes ( [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ] ) [EOL] [EOL] self . writes [ byte_str ( PH_WRITE_BYTES ) ] = PH_RESPONSE_BYTES [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 $builtins.bytes$ 0
[comment] [EOL] from typing import Any , Optional [EOL] import device [EOL] import threading [EOL] import typing [EOL] import builtins [EOL] import time , threading [EOL] [EOL] [comment] [EOL] from typing import Optional , Tuple , NamedTuple [EOL] [EOL] [comment] [EOL] from device . utilities import maths [EOL] from device . utilities . communication . i2c . main import I2C [EOL] from device . utilities . communication . i2c . exceptions import I2CError [EOL] from device . utilities . communication . i2c . mux_simulator import MuxSimulator [EOL] [EOL] [comment] [EOL] from device . peripherals . classes . atlas import driver [EOL] from device . peripherals . modules . atlas_ph import simulator , exceptions [EOL] [EOL] [EOL] class AtlasPHDriver ( driver . AtlasDriver ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] ph_accuracy = [number] [EOL] min_ph = [number] [EOL] max_ph = [number] [EOL] [EOL] def __init__ ( self , name , i2c_lock , bus , address , mux = None , channel = None , simulate = False , mux_simulator = None , ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] if simulate : [EOL] Simulator = simulator . AtlasPHSimulator [EOL] else : [EOL] Simulator = None [EOL] [EOL] [comment] [EOL] super ( ) . __init__ ( name = name , i2c_lock = i2c_lock , bus = bus , address = address , mux = mux , channel = channel , simulate = simulate , mux_simulator = mux_simulator , Simulator = Simulator , ) [EOL] [EOL] def setup ( self , retry = True ) : [EOL] [docstring] [EOL] self . logger . info ( [string] ) [EOL] try : [EOL] self . enable_led ( retry = retry ) [EOL] info = self . read_info ( retry = retry ) [EOL] if info . firmware_version > [number] : [EOL] self . enable_protocol_lock ( retry = retry ) [EOL] except Exception as e : [EOL] raise exceptions . SetupError ( logger = self . logger ) from e [EOL] [EOL] def read_ph ( self , retry = True ) : [EOL] [docstring] [EOL] self . logger . info ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] try : [EOL] response = self . process_command ( [string] , process_seconds = [number] , retry = retry ) [EOL] except Exception as e : [EOL] raise exceptions . ReadPHError ( logger = self . logger ) from e [EOL] [EOL] [comment] [EOL] ph_raw = float ( response ) [comment] [EOL] [EOL] [comment] [EOL] error_magnitude = maths . magnitude ( self . ph_accuracy ) [EOL] significant_figures = error_magnitude * - [number] [EOL] ph = round ( ph_raw , significant_figures ) [EOL] [EOL] [comment] [EOL] if ph < self . min_ph or ph > self . max_ph : [EOL] self . logger . warning ( [string] ) [EOL] return None [EOL] [EOL] [comment] [EOL] self . logger . info ( [string] . format ( ph ) ) [EOL] return ph [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $threading.RLock$ 0 $builtins.int$ 0 $builtins.int$ 0 $typing.Optional[builtins.int]$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $builtins.bool$ 0 0 0 $typing.Optional[device.utilities.communication.i2c.mux_simulator.MuxSimulator]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 $None$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $threading.RLock$ 0 $threading.RLock$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[builtins.int]$ 0 $builtins.bool$ 0 $builtins.bool$ 0 $typing.Optional[device.utilities.communication.i2c.mux_simulator.MuxSimulator]$ 0 $typing.Optional[device.utilities.communication.i2c.mux_simulator.MuxSimulator]$ 0 $None$ 0 $None$ 0 0 0 0 0 $None$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 $typing.Any$ 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.float]$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0
from device . peripherals . classes . atlas import exceptions [EOL] [EOL] [EOL] SetupError = exceptions . SetupError [EOL] [EOL] [EOL] class ReadPHError ( exceptions . DriverError ) : [EOL] message_base = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
	0
[comment] [EOL] from typing import Dict , Any [EOL] import typing [EOL] from typing import Any , Dict [EOL] [EOL] [comment] [EOL] from device . utilities . bitwise import byte_str [EOL] [EOL] [comment] [EOL] from device . utilities . communication . i2c . peripheral_simulator import ( PeripheralSimulator , verify_mux , ) [EOL] [EOL] [EOL] class CCS811Simulator ( PeripheralSimulator ) : [comment] [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] [comment] [EOL] self . registers = { } [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] self . writes = { } [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0
	0
	0
	0
from device . utilities . exceptions import ExceptionLogger [EOL] [EOL] [EOL] class DriverError ( ExceptionLogger ) : [EOL] pass [EOL] [EOL] [EOL] class InitError ( DriverError ) : [EOL] message_base = [string] [EOL] [EOL] [EOL] class SetupError ( DriverError ) : [EOL] message_base = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
TURN_ON = [string] [EOL] TURN_OFF = [string] [EOL] SET_DUTY_CYCLE = [string]	$builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0
	0
[comment] [EOL] [EOL] [comment] [EOL] from typing import List , Any [EOL] import typing [EOL] import os , logging [EOL] [EOL] [comment] [EOL] from pyftdi . i2c import I2cController , I2cNackError [EOL] [EOL] [comment] [EOL] if os . getenv ( [string] ) == None : [EOL] print ( [string] ) [EOL] exit ( [number] ) [EOL] [EOL] [comment] [EOL] if os . getenv ( [string] ) == None : [EOL] print ( [string] ) [EOL] exit ( [number] ) [EOL] [EOL] [comment] [EOL] if os . getenv ( [string] ) != [string] : [EOL] print ( [string] ) [EOL] exit ( [number] ) [EOL] [EOL] [comment] [EOL] url = os . environ . get ( [string] , [string] ) [EOL] i2c = I2cController ( ) [EOL] slaves = [ ] [EOL] logging . getLogger ( [string] ) . setLevel ( logging . ERROR ) [EOL] [EOL] [comment] [EOL] try : [EOL] i2c . set_retry_count ( [number] ) [EOL] i2c . configure ( url ) [EOL] for addr in range ( i2c . HIGHEST_I2C_ADDRESS + [number] ) : [EOL] port = i2c . get_port ( addr ) [EOL] try : [EOL] port . read ( [number] ) [EOL] slaves . append ( [string] ) [EOL] except I2cNackError : [EOL] slaves . append ( [string] ) [EOL] finally : [EOL] i2c . terminate ( ) [EOL] [EOL] [comment] [EOL] columns = [number] [EOL] row = [number] [EOL] [EOL] [comment] [EOL] print ( [string] % [string] . join ( [string] % col for col in range ( columns ) ) ) [EOL] while True : [EOL] chunk = slaves [ row : row + columns ] [EOL] if not chunk : [EOL] break [EOL] print ( [string] % ( row // columns ) , [string] . join ( chunk ) ) [EOL] row += columns [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 $typing.List[typing.Any]$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0
	0
[comment] [EOL] from typing import Tuple , Optional , List , Any , Dict [EOL] import typing [EOL] import builtins [EOL] import threading , time [EOL] [EOL] [comment] [EOL] from typing import Optional , Tuple , Dict , Any [EOL] [EOL] [comment] [EOL] from device . utilities import maths [EOL] [EOL] [comment] [EOL] from device . peripherals . utilities import light [EOL] [EOL] [comment] [EOL] from device . peripherals . classes . peripheral import manager , modes [EOL] from device . peripherals . modules . led_dac5578 import driver , exceptions , events [EOL] [EOL] [EOL] class LEDDAC5578Manager ( manager . PeripheralManager ) : [EOL] [docstring] [EOL] [EOL] prev_desired_intensity = None [EOL] prev_desired_spectrum = None [EOL] prev_desired_distance = None [EOL] prev_heartbeat_time = [number] [EOL] heartbeat_interval = [number] [comment] [EOL] prev_reinit_time = [number] [EOL] reinit_interval = [number] [comment] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] [comment] [EOL] self . panel_configs = self . communication . get ( [string] ) [EOL] self . panel_properties = self . setup_dict . get ( [string] ) [EOL] [EOL] [comment] [EOL] self . intensity_name = self . variables [ [string] ] [ [string] ] [EOL] self . spectrum_name = self . variables [ [string] ] [ [string] ] [EOL] self . distance_name = self . variables [ [string] ] [ [string] ] [EOL] self . channel_setpoints_name = self . variables [ [string] ] [ [string] ] [EOL] [EOL] [comment] [EOL] self . channel_types = self . panel_properties . get ( [string] , { } ) [EOL] channels = self . panel_properties . get ( [string] , { } ) [comment] [EOL] self . channel_names = channels . keys ( ) [EOL] [EOL] @ property def spectrum ( self ) : [EOL] [docstring] [EOL] return self . state . get_peripheral_reported_sensor_value ( self . name , self . spectrum_name ) [EOL] [EOL] @ spectrum . setter def spectrum ( self , value ) : [EOL] [docstring] [EOL] self . state . set_peripheral_reported_sensor_value ( self . name , self . spectrum_name , value ) [EOL] self . state . set_environment_reported_sensor_value ( self . name , self . spectrum_name , value , simple = True ) [EOL] [EOL] @ property def desired_spectrum ( self ) : [EOL] [docstring] [EOL] if self . mode != modes . MANUAL : [EOL] return self . state . get_environment_desired_sensor_value ( self . spectrum_name ) [EOL] else : [EOL] return self . state . get_peripheral_desired_sensor_value ( self . name , self . spectrum_name ) [EOL] [EOL] @ desired_spectrum . setter def desired_spectrum ( self , value ) : [EOL] [docstring] [EOL] self . state . set_peripheral_desired_sensor_value ( self . name , self . spectrum_name , value ) [EOL] [EOL] @ property def intensity ( self ) : [EOL] [docstring] [EOL] value = self . state . get_peripheral_reported_sensor_value ( self . name , self . intensity_name ) [EOL] if value != None : [EOL] return float ( value ) [EOL] return None [EOL] [EOL] @ intensity . setter def intensity ( self , value ) : [EOL] [docstring] [EOL] self . state . set_peripheral_reported_sensor_value ( self . name , self . intensity_name , value ) [EOL] self . state . set_environment_reported_sensor_value ( self . name , self . intensity_name , value , simple = True ) [EOL] [EOL] @ property def desired_intensity ( self ) : [EOL] [docstring] [EOL] if self . mode != modes . MANUAL : [EOL] value = self . state . get_environment_desired_sensor_value ( self . intensity_name ) [EOL] if value != None : [EOL] return float ( value ) [EOL] return None [EOL] else : [EOL] value = self . state . get_peripheral_desired_sensor_value ( self . name , self . intensity_name ) [EOL] if value != None : [EOL] return float ( value ) [EOL] return None [EOL] [EOL] @ desired_intensity . setter def desired_intensity ( self , value ) : [EOL] [docstring] [EOL] self . state . set_peripheral_desired_sensor_value ( self . name , self . intensity_name , value ) [EOL] [EOL] @ property def distance ( self ) : [EOL] [docstring] [EOL] value = self . state . get_peripheral_reported_sensor_value ( self . name , self . distance_name ) [EOL] if value != None : [EOL] return float ( value ) [EOL] return None [EOL] [EOL] @ distance . setter def distance ( self , value ) : [EOL] [docstring] [EOL] self . state . set_peripheral_reported_sensor_value ( self . name , self . distance_name , value ) [EOL] self . state . set_environment_reported_sensor_value ( self . name , self . distance_name , value , simple = True ) [EOL] [EOL] @ property def desired_distance ( self ) : [EOL] [docstring] [EOL] if self . mode != modes . MANUAL : [EOL] value = self . state . get_environment_desired_sensor_value ( self . distance_name ) [EOL] if value != None : [EOL] return float ( value ) [EOL] return None [EOL] else : [EOL] value = self . state . get_peripheral_desired_sensor_value ( self . name , self . distance_name ) [EOL] if value != None : [EOL] return float ( value ) [EOL] return None [EOL] [EOL] @ desired_distance . setter def desired_distance ( self , value ) : [EOL] [docstring] [EOL] self . state . set_peripheral_desired_sensor_value ( self . name , self . distance_name , value ) [EOL] [EOL] @ property def channel_setpoints ( self ) : [EOL] [docstring] [EOL] return self . state . get_peripheral_reported_actuator_value ( self . name , self . channel_setpoints_name ) [EOL] [EOL] @ channel_setpoints . setter def channel_setpoints ( self , value ) : [EOL] [docstring] [EOL] self . state . set_peripheral_reported_actuator_value ( self . name , self . channel_setpoints_name , value ) [EOL] self . state . set_environment_reported_actuator_value ( self . channel_setpoints_name , value ) [EOL] [EOL] @ property def desired_channel_setpoints ( self ) : [EOL] [docstring] [EOL] if self . mode != modes . MANUAL : [EOL] return self . state . get_environment_desired_actuator_value ( self . channel_setpoints_name ) [EOL] else : [EOL] return self . state . get_peripheral_desired_actuator_value ( self . name , self . channel_setpoints_name ) [EOL] [EOL] def initialize_peripheral ( self ) : [EOL] [docstring] [EOL] self . logger . info ( [string] ) [EOL] [EOL] [comment] [EOL] self . clear_reported_values ( ) [EOL] [EOL] [comment] [EOL] self . health = [number] [EOL] [EOL] [comment] [EOL] try : [EOL] self . driver = driver . LEDDAC5578Driver ( name = self . name , panel_configs = self . panel_configs , panel_properties = self . panel_properties , i2c_lock = self . i2c_lock , simulate = self . simulate , mux_simulator = self . mux_simulator , ) [EOL] self . health = ( [number] * self . driver . num_active_panels / self . driver . num_expected_panels ) [EOL] except exceptions . DriverError as e : [EOL] self . logger . exception ( [string] ) [EOL] self . health = [number] [EOL] self . mode = modes . ERROR [EOL] [EOL] def setup_peripheral ( self ) : [EOL] [docstring] [EOL] self . logger . debug ( [string] ) [EOL] try : [EOL] self . channel_setpoints = self . driver . turn_off ( ) [EOL] self . health = ( [number] * self . driver . num_active_panels / self . driver . num_expected_panels ) [EOL] except exceptions . DriverError as e : [EOL] self . logger . exception ( [string] ) [EOL] self . mode = modes . ERROR [EOL] return [EOL] [EOL] [comment] [EOL] self . update_reported_variables ( ) [EOL] [EOL] def update_peripheral ( self ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] update_required = False [EOL] [EOL] [comment] [EOL] if ( self . desired_intensity != None [EOL] and self . desired_intensity != self . prev_desired_intensity ) : [EOL] self . logger . info ( [string] ) [EOL] self . logger . debug ( [string] . format ( self . desired_intensity ) ) [EOL] self . distance = self . desired_distance [EOL] update_required = True [EOL] [EOL] [comment] [EOL] if ( self . desired_spectrum != None [EOL] and self . desired_spectrum != self . prev_desired_spectrum ) : [EOL] self . logger . info ( [string] ) [EOL] self . logger . debug ( [string] . format ( self . desired_spectrum ) ) [EOL] update_required = True [EOL] [EOL] [comment] [EOL] if ( self . desired_distance != None [EOL] and self . desired_distance != self . prev_desired_distance ) : [EOL] self . logger . info ( [string] ) [EOL] self . logger . debug ( [string] . format ( self . desired_distance ) ) [EOL] update_required = True [EOL] [EOL] [comment] [EOL] all_desired_values_exist = True [EOL] if ( self . desired_intensity == None or self . desired_spectrum == None or self . desired_distance == None ) : [EOL] all_desired_values_exist = False [EOL] [EOL] [comment] [EOL] heartbeat_required = False [EOL] if self . heartbeat_interval != None : [EOL] heartbeat_delta = time . time ( ) - self . prev_heartbeat_time [EOL] if heartbeat_delta > self . heartbeat_interval : [EOL] heartbeat_required = True [EOL] self . prev_heartbeat_time = time . time ( ) [EOL] [EOL] [comment] [EOL] if not update_required and heartbeat_required and all_desired_values_exist : [EOL] self . logger . debug ( [string] ) [EOL] self . driver . set_outputs ( self . channel_setpoints ) [EOL] [EOL] [comment] [EOL] reinit_delta = time . time ( ) - self . prev_reinit_time [EOL] if reinit_delta > self . reinit_interval : [EOL] for panel in self . driver . panels : [EOL] if panel == None : [EOL] try : [EOL] message = [string] . format ( panel . name ) [EOL] self . logger . debug ( message ) [EOL] panel . initialize ( ) [EOL] except Exception as e : [EOL] message = [string] . format ( panel . name ) [EOL] self . logger . exception ( message ) [EOL] self . pre_reinit_time = time . time ( ) [EOL] [EOL] [comment] [EOL] if not update_required : [EOL] return [EOL] [EOL] [comment] [EOL] try : [EOL] result = self . driver . set_spd ( self . desired_distance , self . desired_intensity , self . desired_spectrum ) [EOL] self . health = ( [number] * self . driver . num_active_panels / self . driver . num_expected_panels ) [EOL] except exceptions . DriverError as e : [EOL] self . logger . exception ( [string] ) [EOL] self . mode = modes . ERROR [EOL] self . health = [number] [EOL] return [EOL] [EOL] [comment] [EOL] self . logger . debug ( [string] . format ( self . spectrum ) ) [EOL] self . channel_setpoints = result [ [number] ] [EOL] self . spectrum = result [ [number] ] [EOL] self . intensity = result [ [number] ] [EOL] [EOL] [comment] [EOL] self . prev_desired_intensity = self . desired_intensity [EOL] self . prev_desired_spectrum = self . desired_spectrum [EOL] self . prev_desired_distance = self . desired_distance [EOL] [EOL] [comment] [EOL] self . prev_heartbeat_time = time . time ( ) [EOL] [EOL] def clear_reported_values ( self ) : [EOL] [docstring] [EOL] self . intensity = None [EOL] self . spectrum = None [EOL] self . distance = None [EOL] self . channel_setpoints = None [EOL] self . prev_desired_intensity = None [EOL] self . prev_desired_spectrum = None [EOL] self . prev_desired_distance = None [EOL] [EOL] def update_reported_variables ( self ) : [EOL] [docstring] [EOL] self . logger . debug ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] if self . distance == None : [EOL] [EOL] [comment] [EOL] intensity_map = self . panel_properties . get ( [string] , { } ) [EOL] distance_list = [ ] [EOL] intensity_list = [ ] [EOL] for distance_ , intensity in intensity_map . items ( ) : [EOL] distance_list . append ( float ( distance_ ) ) [EOL] intensity_list . append ( intensity ) [EOL] min_distance = min ( distance_list ) [EOL] max_distance = max ( distance_list ) [EOL] [EOL] [comment] [EOL] raw_distance = ( min_distance + max_distance ) / [number] [EOL] self . distance = round ( raw_distance , [number] ) [EOL] [EOL] [comment] [EOL] if self . spectrum != None : [EOL] reference_spectrum = self . spectrum [EOL] else : [EOL] for channel_key , channel_dict in self . channel_types . items ( ) : [EOL] reference_spectrum = channel_dict . get ( [string] , { } ) [EOL] break [EOL] [EOL] [comment] [EOL] self . spectrum , self . intensity = light . calculate_resultant_spd ( self . panel_properties , reference_spectrum , self . channel_setpoints , self . distance , ) [EOL] [EOL] [comment] [EOL] [EOL] def create_peripheral_specific_event ( self , request ) : [EOL] [docstring] [EOL] if request [ [string] ] == events . TURN_ON : [EOL] return self . turn_on ( ) [EOL] elif request [ [string] ] == events . TURN_OFF : [EOL] return self . turn_off ( ) [EOL] elif request [ [string] ] == events . SET_CHANNEL : [EOL] return self . set_channel ( request ) [EOL] elif request [ [string] ] == events . SET_SPD : [EOL] return self . set_spd ( request ) [EOL] elif request [ [string] ] == events . FADE : [EOL] return self . fade ( ) [EOL] else : [EOL] return [string] , [number] [EOL] [EOL] def check_peripheral_specific_events ( self , request ) : [EOL] [docstring] [EOL] if request [ [string] ] == events . TURN_ON : [EOL] self . _turn_on ( ) [EOL] elif request [ [string] ] == events . TURN_OFF : [EOL] self . _turn_off ( ) [EOL] elif request [ [string] ] == events . SET_CHANNEL : [EOL] self . _set_channel ( request ) [EOL] elif request [ [string] ] == events . SET_SPD : [EOL] self . _set_spd ( request ) [EOL] elif request [ [string] ] == events . FADE : [EOL] self . _fade ( ) [EOL] else : [EOL] message = [string] . format ( request [ [string] ] ) [EOL] self . logger . error ( message ) [EOL] [EOL] def turn_on ( self ) : [EOL] [docstring] [EOL] self . logger . debug ( [string] ) [EOL] [EOL] [comment] [EOL] if self . mode != modes . MANUAL : [EOL] return [string] , [number] [EOL] [EOL] [comment] [EOL] request = { [string] : events . TURN_ON } [EOL] self . event_queue . put ( request ) [EOL] [EOL] [comment] [EOL] return [string] , [number] [EOL] [EOL] def _turn_on ( self ) : [EOL] [docstring] [EOL] self . logger . debug ( [string] ) [EOL] [EOL] [comment] [EOL] if self . mode != modes . MANUAL : [EOL] self . logger . critical ( [string] . format ( self . mode ) ) [EOL] [EOL] [comment] [EOL] try : [EOL] self . channel_setpoints = self . driver . turn_on ( ) [EOL] self . update_reported_variables ( ) [EOL] except exceptions . DriverError as e : [EOL] self . mode = modes . ERROR [EOL] message = [string] . format ( e ) [EOL] self . logger . debug ( message ) [EOL] except : [EOL] self . mode = modes . ERROR [EOL] message = [string] [EOL] self . logger . exception ( message ) [EOL] [EOL] def turn_off ( self ) : [EOL] [docstring] [EOL] self . logger . debug ( [string] ) [EOL] [EOL] [comment] [EOL] if self . mode != modes . MANUAL : [EOL] return [string] , [number] [EOL] [EOL] [comment] [EOL] request = { [string] : events . TURN_OFF } [EOL] self . event_queue . put ( request ) [EOL] [EOL] [comment] [EOL] return [string] , [number] [EOL] [EOL] def _turn_off ( self ) : [EOL] [docstring] [EOL] self . logger . debug ( [string] ) [EOL] [EOL] [comment] [EOL] if self . mode != modes . MANUAL : [EOL] self . logger . critical ( [string] . format ( self . mode ) ) [EOL] [EOL] [comment] [EOL] try : [EOL] self . channel_setpoints = self . driver . turn_off ( ) [EOL] self . update_reported_variables ( ) [EOL] except exceptions . DriverError as e : [EOL] self . mode = modes . ERROR [EOL] message = [string] . format ( e ) [EOL] self . logger . debug ( message ) [EOL] except : [EOL] self . mode = modes . ERROR [EOL] message = [string] [EOL] self . logger . exception ( message ) [EOL] [EOL] def set_channel ( self , request ) : [EOL] [docstring] [EOL] self . logger . debug ( [string] ) [EOL] [EOL] [comment] [EOL] if self . mode != modes . MANUAL : [EOL] message = [string] [EOL] self . logger . debug ( message ) [EOL] return message , [number] [EOL] [EOL] [comment] [EOL] try : [EOL] response = request [ [string] ] . split ( [string] ) [EOL] channel = str ( response [ [number] ] ) [EOL] percent = float ( response [ [number] ] ) [EOL] except KeyError as e : [EOL] message = [string] . format ( e ) [EOL] self . logger . debug ( message ) [EOL] return message , [number] [EOL] except ValueError as e : [EOL] message = [string] . format ( e ) [EOL] self . logger . debug ( message ) [EOL] return message , [number] [EOL] except : [EOL] message = [string] [EOL] self . logger . exception ( message ) [EOL] return message , [number] [EOL] [EOL] [comment] [EOL] if channel not in self . channel_names : [EOL] message = [string] . format ( channel ) [EOL] self . logger . debug ( message ) [EOL] return message , [number] [EOL] [EOL] [comment] [EOL] if percent < [number] or percent > [number] : [EOL] message = [string] . format ( percent ) [EOL] self . logger . debug ( message ) [EOL] return message , [number] [EOL] [EOL] [comment] [EOL] request = { [string] : events . SET_CHANNEL , [string] : channel , [string] : percent } [EOL] self . event_queue . put ( request ) [EOL] [EOL] [comment] [EOL] return [string] . format ( channel , percent ) , [number] [EOL] [EOL] def _set_channel ( self , request ) : [EOL] [docstring] [EOL] self . logger . debug ( [string] ) [EOL] [EOL] [comment] [EOL] if self . mode != modes . MANUAL : [EOL] self . logger . critical ( [string] . format ( self . mode ) ) [EOL] [EOL] [comment] [EOL] channel = request . get ( [string] ) [EOL] percent = float ( request . get ( [string] ) ) [comment] [EOL] [EOL] [comment] [EOL] try : [EOL] self . driver . set_output ( channel , percent ) [EOL] self . channel_setpoints [ channel ] = percent [EOL] self . update_reported_variables ( ) [EOL] except exceptions . DriverError as e : [EOL] self . mode = modes . ERROR [EOL] message = [string] . format ( e ) [EOL] self . logger . debug ( message ) [EOL] except : [EOL] self . mode = modes . ERROR [EOL] message = [string] [EOL] self . logger . exception ( message ) [EOL] [EOL] def set_spd ( self , request ) : [EOL] [docstring] [EOL] self . logger . debug ( [string] ) [EOL] [EOL] [comment] [EOL] if self . mode != modes . MANUAL : [EOL] message = [string] [EOL] self . logger . debug ( message ) [EOL] return message , [number] [EOL] [EOL] [comment] [EOL] distance = request . get ( [string] ) [EOL] intensity = request . get ( [string] ) [EOL] spectrum = request . get ( [string] ) [EOL] [EOL] [comment] [EOL] if distance is None : [EOL] return [string] , [number] [EOL] if intensity is None : [EOL] return [string] , [number] [EOL] if spectrum is None : [EOL] return [string] , [number] [EOL] [EOL] [comment] [EOL] request = { [string] : events . SET_SPD , [string] : distance , [string] : intensity , [string] : spectrum , } [EOL] self . event_queue . put ( request ) [EOL] [EOL] [comment] [EOL] return [string] , [number] [EOL] [EOL] def _set_spd ( self , request ) : [EOL] [docstring] [EOL] self . logger . debug ( [string] ) [EOL] [EOL] [comment] [EOL] if self . mode != modes . MANUAL : [EOL] self . logger . critical ( [string] . format ( self . mode ) ) [EOL] [EOL] [comment] [EOL] distance = request . get ( [string] ) [EOL] intensity = request . get ( [string] ) [EOL] spectrum = request . get ( [string] ) [EOL] [EOL] [comment] [EOL] try : [EOL] [comment] [EOL] result = self . driver . set_spd ( distance , intensity , spectrum ) [EOL] [EOL] [comment] [EOL] self . channel_setpoints = result [ [number] ] [EOL] self . spectrum = result [ [number] ] [EOL] self . intensity = result [ [number] ] [EOL] self . distance = distance [EOL] [EOL] [comment] [EOL] self . desired_distance = distance [EOL] self . desired_intensity = intensity [EOL] self . desired_spectrum = spectrum [EOL] [EOL] except exceptions . DriverError as e : [EOL] self . mode = modes . ERROR [EOL] message = [string] . format ( e ) [EOL] self . logger . debug ( message ) [EOL] except : [EOL] self . mode = modes . ERROR [EOL] message = [string] [EOL] self . logger . exception ( message ) [EOL] [EOL] [EOL] def fade ( self ) : [EOL] [docstring] [EOL] self . logger . debug ( [string] ) [EOL] [EOL] [comment] [EOL] if self . mode != modes . MANUAL : [EOL] return [string] , [number] [EOL] [EOL] [comment] [EOL] request = { [string] : events . FADE } [EOL] self . event_queue . put ( request ) [EOL] [EOL] [comment] [EOL] return [string] , [number] [EOL] [EOL] def _fade ( self , channel_name = None ) : [EOL] [docstring] [EOL] self . logger . debug ( [string] ) [EOL] [EOL] [comment] [EOL] if self . mode != modes . MANUAL : [EOL] self . logger . critical ( [string] . format ( self . mode ) ) [EOL] [EOL] [comment] [EOL] try : [EOL] self . driver . turn_off ( ) [EOL] except Exception as e : [EOL] self . logger . exception ( [string] ) [EOL] return [EOL] [EOL] [comment] [EOL] if channel_name != None : [EOL] channel_names = [ channel_name ] [EOL] else : [EOL] channel_outputs = self . driver . build_channel_outputs ( [number] ) [EOL] channel_names = channel_outputs . keys ( ) [EOL] [EOL] [comment] [EOL] while True : [EOL] [EOL] [comment] [EOL] for channel_name in channel_names : [EOL] [EOL] [comment] [EOL] for value in range ( [number] , [number] , [number] ) : [EOL] [EOL] [comment] [EOL] self . logger . info ( [string] . format ( channel_name , value ) ) [EOL] try : [EOL] self . driver . set_output ( channel_name , value ) [EOL] except Exception as e : [EOL] self . logger . exception ( [string] ) [EOL] return [EOL] [EOL] [comment] [EOL] if not self . event_queue . empty ( ) : [EOL] return [EOL] [EOL] [comment] [EOL] time . sleep ( [number] ) [EOL] [EOL] [comment] [EOL] for value in range ( [number] , - [number] , - [number] ) : [EOL] [EOL] [comment] [EOL] self . logger . info ( [string] . format ( channel_name , value ) ) [EOL] try : [EOL] self . driver . set_output ( channel_name , value ) [EOL] except Exception as e : [EOL] self . logger . exception ( [string] ) [EOL] return [EOL] [EOL] [comment] [EOL] if not self . event_queue . empty ( ) : [EOL] return [EOL] [EOL] [comment] [EOL] time . sleep ( [number] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.float]$ 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.float]]$ 0 0 0 $typing.Optional[builtins.float]$ 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.float]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.float]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.float]]$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Dict[builtins.str,builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.float]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.float]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 $builtins.float$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.float]$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.float]]$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.float]$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.float]]$ 0 $typing.Any$ 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.float]$ 0 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.float]]$ 0 0 0 0 0 0 0 $typing.Optional[builtins.float]$ 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.float]]$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.float]$ 0 0 0 0 0 $typing.Optional[builtins.float]$ 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.float]]$ 0 0 0 0 0 $typing.Optional[builtins.float]$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.int]$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Tuple[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Tuple[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.float]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Tuple[builtins.str,builtins.int]$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 0 0 0 $None$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $builtins.float$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $builtins.float$ 0 0 0 0 0 0 $typing.Any$ 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 $typing.Tuple[builtins.str,builtins.int]$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.float$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $builtins.float$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.float]]$ 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 $typing.Optional[typing.Dict[builtins.str,builtins.float]]$ 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.float]$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Optional[typing.Dict[builtins.str,builtins.float]]$ 0 $typing.Any$ 0 0 0 0 0 0 $builtins.float$ 0 $typing.Any$ 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 $typing.Any$ 0 $typing.Optional[typing.Dict[builtins.str,builtins.float]]$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 $typing.Any$ 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
TURN_ON = [string] [EOL] TURN_OFF = [string] [EOL] SET_CHANNEL = [string] [EOL] FADE = [string] [EOL] SET_SPD = [string] [EOL]	$builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
increment = [number] [EOL] values = [ ] [EOL] value = [number] [EOL] while value < [number] : [EOL] values . append ( value ) [EOL] value = int ( increment ** [number] ) [EOL] increment += [number] [EOL] values . append ( [number] ) [EOL] print ( values ) [EOL] print ( list ( reversed ( values ) ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Dict , Any [EOL] import typing [EOL] import os , sys , pytest , json , threading [EOL] [EOL] [comment] [EOL] root_dir = os . environ [ [string] ] [EOL] sys . path . append ( root_dir ) [EOL] os . chdir ( root_dir ) [EOL] [EOL] [comment] [EOL] from device . utilities . accessors import get_peripheral_config [EOL] [EOL] [comment] [EOL] from device . utilities . communication . i2c . mux_simulator import MuxSimulator [EOL] [EOL] [comment] [EOL] from device . peripherals . modules . led_dac5578 . driver import LEDDAC5578Driver [EOL] [EOL] [comment] [EOL] base_path = root_dir + [string] [EOL] device_config = json . load ( open ( base_path + [string] ) ) [EOL] peripheral_config = get_peripheral_config ( device_config [ [string] ] , [string] ) [EOL] panel_configs = peripheral_config [ [string] ] [ [string] ] [ [string] ] [EOL] peripheral_setup = json . load ( open ( base_path + [string] ) ) [EOL] panel_properties = peripheral_setup [ [string] ] [EOL] [EOL] [EOL] def test_init ( ) : [EOL] driver = LEDDAC5578Driver ( name = [string] , panel_configs = panel_configs , panel_properties = panel_properties , i2c_lock = threading . RLock ( ) , simulate = True , mux_simulator = MuxSimulator ( ) , ) [EOL] [EOL] [EOL] def test_turn_on ( ) : [EOL] driver = LEDDAC5578Driver ( name = [string] , panel_configs = panel_configs , panel_properties = panel_properties , i2c_lock = threading . RLock ( ) , simulate = True , mux_simulator = MuxSimulator ( ) , ) [EOL] driver . turn_on ( ) [EOL] [EOL] [EOL] def test_turn_off ( ) : [EOL] driver = LEDDAC5578Driver ( name = [string] , panel_configs = panel_configs , panel_properties = panel_properties , i2c_lock = threading . RLock ( ) , simulate = True , mux_simulator = MuxSimulator ( ) , ) [EOL] driver . turn_off ( ) [EOL] [EOL] [EOL] def test_set_spd ( ) : [EOL] driver = LEDDAC5578Driver ( name = [string] , panel_configs = panel_configs , panel_properties = panel_properties , i2c_lock = threading . RLock ( ) , simulate = True , mux_simulator = MuxSimulator ( ) , ) [EOL] distance = [number] [EOL] ppfd = [number] [EOL] spectrum = { [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , [string] : [number] , } [EOL] driver . set_spd ( distance , ppfd , spectrum ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
CALIBRATE = [string] [EOL]	$builtins.str$ 0 0 0
	0
	0
[comment] [EOL] [EOL] import device [EOL] import builtins [EOL] from device . utilities . logger import Logger [EOL] from device . peripherals . modules . bacnet import bnet_base [EOL] [EOL] class Bnet ( bnet_base . BnetBase ) : [EOL] [EOL] def __init__ ( self , logger , ini_file = None , config_file = None , debug = False ) : [EOL] self . ini_file = ini_file [EOL] self . config_file = config_file [EOL] self . debug = debug [EOL] self . logger = logger [EOL] self . logger . info ( [string] ) [EOL] [EOL] def setup ( self ) : [EOL] self . logger . info ( [string] ) [EOL] [EOL] def reset ( self ) : [EOL] self . logger . info ( [string] ) [EOL] [EOL] def ping ( self ) : [EOL] self . logger . info ( [string] ) [EOL] [EOL] def set_test_voltage ( self , voltage ) : [EOL] self . logger . info ( f" [string] { voltage }" ) [EOL] [EOL] def set_air_temp ( self , tempC ) : [EOL] self . logger . info ( f" [string] { tempC }" ) [EOL] [EOL] def set_air_RH ( self , RH ) : [EOL] self . logger . info ( f" [string] { RH }" ) [EOL] [EOL] def get_air_temp ( self ) : [EOL] self . logger . info ( f" [string] " ) [EOL] return [number] [EOL] [EOL] def get_air_RH ( self ) : [EOL] self . logger . info ( f" [string] " ) [EOL] return [number] [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $None$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $None$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [comment] [EOL] [EOL] import builtins [EOL] from abc import ABC , abstractmethod [EOL] [EOL] class BnetBase ( ABC ) : [EOL] [EOL] @ abstractmethod def setup ( self ) : [EOL] pass [EOL] [EOL] @ abstractmethod def reset ( self ) : [EOL] pass [EOL] [EOL] @ abstractmethod def ping ( self ) : [EOL] pass [EOL] [EOL] @ abstractmethod def set_test_voltage ( self , voltage ) : [EOL] pass [EOL] [EOL] @ abstractmethod def set_air_temp ( self , tempC ) : [EOL] pass [EOL] [EOL] @ abstractmethod def set_air_RH ( self , RH ) : [EOL] pass [EOL] [EOL] @ abstractmethod def get_air_temp ( self ) : [EOL] pass [EOL] [EOL] @ abstractmethod def get_air_RH ( self ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0
	0
[comment] [EOL] [comment] [EOL] [EOL] from typing import List , Dict , Any [EOL] import device [EOL] import typing [EOL] import builtins [EOL] import sys , traceback , os , socket , json , time , asyncore [EOL] [EOL] from typing import Dict [EOL] [EOL] from bacpypes . apdu import WhoIsRequest , SimpleAckPDU , ReadPropertyRequest , ReadPropertyACK , WritePropertyRequest [EOL] from bacpypes . app import BIPSimpleApplication [EOL] from bacpypes . consolelogging import ConfigArgumentParser [EOL] from bacpypes . core import run_once , stop , enable_sleeping [EOL] from bacpypes . debugging import bacpypes_debugging [EOL] from bacpypes . iocb import IOCB [EOL] from bacpypes . local . device import LocalDeviceObject [EOL] from bacpypes . pdu import Address , GlobalBroadcast [EOL] from bacpypes . object import get_datatype , get_object_class [EOL] from bacpypes . primitivedata import ObjectIdentifier [EOL] from bacpypes . constructeddata import Any [EOL] from bacpypes . task import TaskManager [EOL] [EOL] from device . utilities . logger import Logger [EOL] from device . peripherals . modules . bacnet import bnet_base [EOL] [EOL] [comment] [EOL] _debug = [number] [EOL] [EOL] [EOL] [comment] [EOL] @ bacpypes_debugging class Bnet ( bnet_base . BnetBase ) : [EOL] [EOL] def __init__ ( self , logger , ini_file = None , config_file = None , debug = False ) : [EOL] path = os . path . dirname ( bnet_base . __file__ ) [EOL] self . ini_file = path + [string] + ini_file [EOL] self . config_file = path + [string] + config_file [EOL] self . debug = debug [EOL] self . logger = logger [EOL] self . logger . debug ( f" [string] { self . ini_file }" ) [EOL] [EOL] cmd_line_args_simulated = [ ] [EOL] if self . debug : [EOL] cmd_line_args_simulated . append ( [string] ) [EOL] cmd_line_args_simulated . append ( __name__ ) [EOL] cmd_line_args_simulated . append ( [string] ) [EOL] cmd_line_args_simulated . append ( self . ini_file ) [EOL] self . args = ConfigArgumentParser ( ) . parse_args ( cmd_line_args_simulated ) [EOL] [EOL] [comment] [EOL] self . bacnet_config = json . load ( open ( self . config_file , [string] ) ) [EOL] self . logger . debug ( f" [string] { self . bacnet_config . get ( [string] ) }" ) [EOL] [EOL] [comment] [EOL] self . device = LocalDeviceObject ( ini = self . args . ini ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] self . logger . debug ( f" [string] { self . args . ini . address }" ) [EOL] [EOL] [comment] [EOL] self . app = BIPSimpleApplication ( self . device , self . args . ini . address ) [EOL] enable_sleeping ( ) [comment] [EOL] self . taskman = TaskManager ( ) [EOL] [EOL] [EOL] def setup ( self ) : [EOL] self . logger . debug ( [string] ) [EOL] [EOL] [EOL] def reset ( self ) : [EOL] self . logger . debug ( [string] ) [EOL] [EOL] [EOL] [comment] [EOL] def __get_object ( self , obj_id ) : [EOL] for obj in self . bacnet_config . get ( [string] ) : [EOL] if obj . get ( [string] ) == obj_id : [EOL] return obj [EOL] return { } [EOL] [EOL] def __get_device ( self ) : [EOL] return self . bacnet_config . get ( [string] ) . get ( [string] ) [EOL] [EOL] def __get_prop ( self ) : [EOL] return self . bacnet_config . get ( [string] ) . get ( [string] ) [EOL] [EOL] [comment] [EOL] def ping ( self ) : [EOL] try : [EOL] [comment] [EOL] request = WhoIsRequest ( ) [EOL] [comment] [EOL] request . pduDestination = GlobalBroadcast ( ) [EOL] [comment] [EOL] iocb = IOCB ( request ) [EOL] self . app . request_io ( iocb ) [EOL] self . logger . debug ( [string] ) [EOL] loopCount = [number] [EOL] while loopCount < [number] and not iocb . ioResponse : [EOL] loopCount += [number] [EOL] run_once ( ) [EOL] asyncore . loop ( timeout = [number] , count = [number] ) [EOL] time . sleep ( [number] ) [EOL] self . logger . debug ( f" [string] { loopCount }" ) [EOL] stop ( ) [EOL] [EOL] [comment] [EOL] if iocb . ioResponse : [EOL] self . logger . debug ( f" [string] " ) [EOL] apdu = iocb . ioResponse [EOL] if not isinstance ( apdu , IAmRequest ) : [EOL] self . logger . error ( f" [string] " ) [EOL] return [EOL] device_type , device_instance = apdu . iAmDeviceIdentifier [EOL] if device_type != [string] : [EOL] raise DecodingError ( [string] ) [EOL] self . logger . info ( f" [string] { repr ( apdu . pduSource ) }" ) [EOL] self . logger . info ( f" [string] { str ( apdu . iAmDeviceIdentifier ) }" ) [EOL] [EOL] [comment] [EOL] if iocb . ioError : [EOL] self . logger . error ( f" [string] { str ( iocb . ioError ) }" ) [EOL] [EOL] except Exception as err : [EOL] exc_type , exc_value , exc_traceback = sys . exc_info ( ) [EOL] traceback . print_tb ( exc_traceback , file = sys . stdout ) [EOL] self . logger . critical ( f" [string] { err }" ) [EOL] [EOL] [EOL] [comment] [EOL] def __read_value ( self , config_obj_id ) : [EOL] try : [EOL] [comment] [EOL] obj = self . __get_object ( config_obj_id ) [EOL] obj_id = obj . get ( [string] ) [EOL] obj_id = ObjectIdentifier ( obj_id ) . value [comment] [EOL] addr = self . __get_device ( ) [EOL] prop_id = self . __get_prop ( ) [EOL] [EOL] [comment] [EOL] self . logger . debug ( f" [string] { config_obj_id } [string] { obj . get ( [string] ) } [string] { addr } [string] { str ( obj_id ) } [string] { prop_id }" ) [EOL] [EOL] request = ReadPropertyRequest ( objectIdentifier = obj_id , propertyIdentifier = prop_id ) [EOL] request . pduDestination = Address ( addr ) [EOL] [EOL] iocb = IOCB ( request ) [EOL] self . app . request_io ( iocb ) [EOL] self . logger . debug ( [string] ) [EOL] loopCount = [number] [EOL] while loopCount < [number] and not iocb . ioResponse : [EOL] loopCount += [number] [EOL] run_once ( ) [EOL] asyncore . loop ( timeout = [number] , count = [number] ) [EOL] time . sleep ( [number] ) [EOL] self . logger . debug ( f" [string] { loopCount }" ) [EOL] stop ( ) [EOL] [EOL] [comment] [EOL] if iocb . ioResponse : [EOL] self . logger . debug ( f" [string] " ) [EOL] apdu = iocb . ioResponse [EOL] [EOL] [comment] [EOL] if not isinstance ( apdu , ReadPropertyACK ) : [EOL] self . logger . error ( f" [string] " ) [EOL] return [number] [EOL] [EOL] [comment] [EOL] datatype = get_datatype ( apdu . objectIdentifier [ [number] ] , apdu . propertyIdentifier ) [EOL] self . logger . debug ( f" [string] { datatype }" ) [EOL] if not datatype : [EOL] self . logger . error ( f" [string] " ) [EOL] return [EOL] [EOL] value = apdu . propertyValue . cast_out ( datatype ) [EOL] self . logger . debug ( f" [string] { value }" ) [EOL] [EOL] if hasattr ( value , [string] ) : [EOL] value . debug_contents ( file = sys . stdout ) [EOL] sys . stdout . flush ( ) [EOL] [EOL] return value [EOL] [EOL] [comment] [EOL] if iocb . ioError : [EOL] self . logger . error ( f" [string] { str ( iocb . ioError ) }" ) [EOL] [EOL] except Exception as err : [EOL] exc_type , exc_value , exc_traceback = sys . exc_info ( ) [EOL] traceback . print_tb ( exc_traceback , file = sys . stdout ) [EOL] self . logger . critical ( f" [string] { err }" ) [EOL] return None [EOL] [EOL] [EOL] [comment] [EOL] def __write_value ( self , config_obj_id , _value ) : [EOL] try : [EOL] [comment] [EOL] obj = self . __get_object ( config_obj_id ) [EOL] obj_id = obj . get ( [string] ) [EOL] obj_id = ObjectIdentifier ( obj_id ) . value [comment] [EOL] addr = self . __get_device ( ) [EOL] prop_id = self . __get_prop ( ) [EOL] [EOL] [comment] [EOL] value = float ( _value ) [EOL] self . logger . debug ( f" [string] { config_obj_id } [string] { _value } [string] { obj . get ( [string] ) } [string] { str ( obj_id ) } [string] { prop_id } [string] { value }" ) [EOL] [EOL] request = WritePropertyRequest ( objectIdentifier = obj_id , propertyIdentifier = prop_id ) [EOL] request . pduDestination = Address ( addr ) [EOL] [EOL] [comment] [EOL] datatype = get_datatype ( obj_id [ [number] ] , prop_id ) [EOL] value = datatype ( value ) [EOL] request . propertyValue = Any ( ) [EOL] try : [EOL] request . propertyValue . cast_in ( value ) [EOL] except Exception as err : [EOL] self . logger . critical ( f" [string] { err }" ) [EOL] [EOL] iocb = IOCB ( request ) [EOL] self . app . request_io ( iocb ) [EOL] self . logger . debug ( [string] ) [EOL] loopCount = [number] [EOL] while loopCount < [number] and not iocb . ioResponse : [EOL] loopCount += [number] [EOL] run_once ( ) [EOL] asyncore . loop ( timeout = [number] , count = [number] ) [EOL] time . sleep ( [number] ) [EOL] self . logger . debug ( f" [string] { loopCount }" ) [EOL] stop ( ) [EOL] [EOL] [comment] [EOL] if iocb . ioResponse : [EOL] self . logger . debug ( f" [string] " ) [EOL] [EOL] apdu = iocb . ioResponse [EOL] [EOL] [comment] [EOL] if not isinstance ( iocb . ioResponse , SimpleAckPDU ) : [EOL] self . logger . error ( f" [string] " ) [EOL] return [EOL] self . logger . debug ( f" [string] " ) [EOL] [EOL] [comment] [EOL] if iocb . ioError : [EOL] self . logger . error ( f" [string] { str ( iocb . ioError ) }" ) [EOL] [EOL] except Exception as err : [EOL] exc_type , exc_value , exc_traceback = sys . exc_info ( ) [EOL] traceback . print_tb ( exc_traceback , file = sys . stdout ) [EOL] self . logger . critical ( f" [string] { err }" ) [EOL] [EOL] [EOL] def set_test_voltage ( self , voltage ) : [EOL] self . logger . info ( f" [string] { voltage }" ) [EOL] self . __write_value ( [string] , voltage ) [EOL] [EOL] [EOL] def set_air_temp ( self , tempC ) : [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] self . logger . info ( f" [string] { tempC } [string] " ) [EOL] self . __write_value ( [string] , tempC ) [comment] [EOL] [EOL] [EOL] def set_air_RH ( self , RH ) : [EOL] self . logger . info ( f" [string] { RH }" ) [EOL] self . __write_value ( [string] , RH ) [EOL] [EOL] [EOL] def get_air_temp ( self ) : [EOL] [comment] [EOL] tempC = self . __read_value ( [string] ) [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] self . logger . info ( f" [string] { tempC } [string] " ) [EOL] return tempC [EOL] [EOL] [EOL] def get_air_RH ( self ) : [EOL] RH = self . __read_value ( [string] ) [EOL] self . logger . info ( f" [string] { RH } [string] " ) [EOL] return RH [EOL] [EOL] [EOL]	one$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $None$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $None$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 0 0
from device . utilities . exceptions import ExceptionLogger [EOL] [EOL] [EOL] class DriverError ( ExceptionLogger ) : [EOL] pass [EOL] [EOL] [EOL] class InitError ( DriverError ) : [EOL] message_base = [string] [EOL] [EOL] [EOL] class SetupError ( DriverError ) : [EOL] message_base = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
[comment] [EOL] from typing import Any , Optional [EOL] import device [EOL] import threading [EOL] import typing [EOL] import builtins [EOL] import time , threading [EOL] [EOL] [comment] [EOL] from typing import NamedTuple , Optional , Tuple [EOL] [EOL] [comment] [EOL] from device . utilities import logger , bitwise [EOL] from device . utilities . communication . i2c . main import I2C [EOL] from device . utilities . communication . i2c . exceptions import I2CError [EOL] from device . utilities . communication . i2c . mux_simulator import MuxSimulator [EOL] [EOL] [comment] [EOL] from device . peripherals . modules . adafruit_soil import simulator , exceptions [EOL] [EOL] [EOL] class AdafruitSoilDriver : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] min_moisture = [number] [EOL] max_moisture = [number] [EOL] [EOL] def __init__ ( self , name , i2c_lock , bus , address , mux = None , channel = None , simulate = False , mux_simulator = None , ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] logname = [string] . format ( name ) [EOL] self . logger = logger . Logger ( logname , [string] ) [EOL] [EOL] [comment] [EOL] if simulate : [EOL] self . logger . info ( [string] ) [EOL] Simulator = simulator . AdafruitSoilSimulator [EOL] else : [EOL] Simulator = None [EOL] [EOL] [comment] [EOL] try : [EOL] self . i2c = I2C ( name = name , i2c_lock = i2c_lock , bus = bus , address = address , mux = mux , channel = channel , mux_simulator = mux_simulator , PeripheralSimulator = Simulator , verify_device = False , ) [EOL] [comment] [EOL] except I2CError as e : [EOL] raise exceptions . InitError ( logger = self . logger ) from e [EOL] [EOL] def read_hardware_id ( self , retry = True ) : [EOL] [docstring] [EOL] self . logger . debug ( [string] ) [EOL] [EOL] try : [EOL] self . i2c . write ( bytes ( [ [number] , [number] ] ) , retry = retry ) [EOL] except I2CError as e : [EOL] raise exceptions . ReadHwIdError ( logger = self . logger ) from e [EOL] [EOL] [comment] [EOL] time . sleep ( [number] ) [EOL] [EOL] try : [EOL] bytes_ = self . i2c . read ( [number] , retry = retry ) [EOL] except I2CError as e : [EOL] raise exceptions . ReadHwIdError ( logger = self . logger ) from e [EOL] [EOL] hwid = int . from_bytes ( bytes_ , byteorder = [string] , signed = False ) [EOL] [EOL] return hwid [EOL] [EOL] def read_moisture ( self , retry = True , total_sample_attempts = [number] ) : [EOL] [docstring] [EOL] [EOL] try : [EOL] self . i2c . write ( bytes ( [ [number] , [number] ] ) , retry = retry ) [EOL] except I2CError as e : [EOL] raise exceptions . ReadMoistureError ( logger = self . logger ) from e [EOL] [EOL] time . sleep ( [number] ) [EOL] [EOL] try : [EOL] bytes_ = self . i2c . read ( [number] , retry = retry ) [EOL] except I2CError as e : [EOL] raise exceptions . ReadMoistureError ( logger = self . logger ) from e [EOL] [EOL] raw = int . from_bytes ( bytes_ , byteorder = [string] , signed = False ) [EOL] [EOL] [comment] [EOL] if raw > self . max_moisture : [EOL] if total_sample_attempts > [number] : [EOL] time . sleep ( [number] ) [EOL] return self . read_moisture ( retry = retry , total_sample_attempts = total_sample_attempts - [number] ) [EOL] else : [EOL] raise exceptions . BadMoistureReading ( logger = self . logger ) [EOL] [EOL] return raw [EOL] [EOL] def read_temperature ( self , retry = True ) : [EOL] [docstring] [EOL] [EOL] try : [EOL] self . i2c . write ( bytes ( [ [number] , [number] ] ) , retry = retry ) [EOL] except I2CError as e : [EOL] raise exceptions . ReadTemperatureError ( logger = self . logger ) from e [EOL] [EOL] [comment] [EOL] time . sleep ( [number] ) [EOL] [EOL] try : [EOL] bytes_ = self . i2c . read ( [number] , retry = retry ) [EOL] except I2CError as e : [EOL] raise exceptions . ReadTemperatureError ( logger = self . logger ) from e [EOL] [EOL] raw = int . from_bytes ( bytes_ , byteorder = [string] , signed = False ) [EOL] [comment] [EOL] return ( [number] / ( [number] << [number] ) ) * raw [EOL] [EOL] def reset ( self , retry = True ) : [EOL] [docstring] [EOL] self . logger . info ( [string] ) [EOL] [EOL] [comment] [EOL] try : [EOL] self . i2c . write ( bytes ( [ [number] , [number] ] ) , retry = retry ) [EOL] except I2CError as e : [EOL] raise exceptions . ResetError ( logger = self . logger ) from e [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $threading.RLock$ 0 $builtins.int$ 0 $builtins.int$ 0 $typing.Optional[builtins.int]$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 $typing.Optional[device.utilities.communication.i2c.mux_simulator.MuxSimulator]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $typing.Optional[builtins.bool]$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $threading.RLock$ 0 $threading.RLock$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[device.utilities.communication.i2c.mux_simulator.MuxSimulator]$ 0 $typing.Optional[device.utilities.communication.i2c.mux_simulator.MuxSimulator]$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $builtins.bool$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Optional[builtins.float]$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $None$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] from typing import Optional , Any [EOL] import typing [EOL] import builtins [EOL] from typing import Optional , Tuple , Dict , Any [EOL] [EOL] [comment] [EOL] from device . peripherals . classes . peripheral import manager , modes [EOL] [EOL] [comment] [EOL] from device . peripherals . modules . adafruit_soil import driver , exceptions [EOL] [EOL] [EOL] class AdafruitSoilManager ( manager . PeripheralManager ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] self . temperature_name = self . variables [ [string] ] [ [string] ] [EOL] self . moisture_name = self . variables [ [string] ] [ [string] ] [EOL] [EOL] @ property def temperature ( self ) : [EOL] [docstring] [EOL] value = self . state . get_peripheral_reported_sensor_value ( self . name , self . temperature_name ) [EOL] if value != None : [EOL] return float ( value ) [EOL] return None [EOL] [EOL] @ temperature . setter def temperature ( self , value ) : [EOL] [docstring] [EOL] self . state . set_peripheral_reported_sensor_value ( self . name , self . temperature_name , value ) [EOL] if self . mode != modes . CALIBRATE : [EOL] self . state . set_environment_reported_sensor_value ( self . name , self . temperature_name , value ) [EOL] [EOL] @ property def moisture ( self ) : [EOL] [docstring] [EOL] value = self . state . get_peripheral_reported_sensor_value ( self . name , self . moisture_name ) [EOL] if value != None : [EOL] return int ( value ) [EOL] return None [EOL] [EOL] @ moisture . setter def moisture ( self , value ) : [EOL] [docstring] [EOL] self . state . set_peripheral_reported_sensor_value ( self . name , self . moisture_name , value ) [EOL] if self . mode != modes . CALIBRATE : [EOL] self . state . set_environment_reported_sensor_value ( self . name , self . moisture_name , value ) [EOL] [EOL] def initialize_peripheral ( self ) : [EOL] [docstring] [EOL] self . logger . info ( [string] ) [EOL] [EOL] self . clear_reported_values ( ) [EOL] [EOL] self . health = [number] [EOL] [EOL] try : [EOL] self . driver = driver . AdafruitSoilDriver ( name = self . name , i2c_lock = self . i2c_lock , bus = self . bus , mux = self . mux , channel = self . channel , address = self . address , simulate = self . simulate , mux_simulator = self . mux_simulator , ) [EOL] except exceptions . DriverError as e : [EOL] self . logger . debug ( [string] . format ( e ) ) [EOL] self . health = [number] [EOL] self . mode = modes . ERROR [EOL] [EOL] def setup_peripheral ( self ) : [EOL] [docstring] [EOL] self . logger . debug ( [string] ) [EOL] [EOL] def update_peripheral ( self ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] try : [EOL] temperature = self . driver . read_temperature ( ) [EOL] except exceptions . DriverError as e : [EOL] self . logger . debug ( [string] . format ( e ) ) [EOL] self . mode = modes . ERROR [EOL] self . health = [number] [EOL] return [EOL] [EOL] [comment] [EOL] try : [EOL] moisture = self . driver . read_moisture ( ) [EOL] except exceptions . DriverError as e : [EOL] self . logger . debug ( [string] . format ( e ) ) [EOL] self . mode = modes . ERROR [EOL] self . health = [number] [EOL] return [EOL] [EOL] [comment] [EOL] self . temperature = temperature [EOL] self . moisture = moisture [EOL] self . health = [number] [EOL] [EOL] def reset_peripheral ( self ) : [EOL] [docstring] [EOL] self . logger . info ( [string] ) [EOL] [EOL] [comment] [EOL] self . clear_reported_values ( ) [EOL] [EOL] [comment] [EOL] try : [EOL] self . driver . reset ( ) [EOL] except exceptions . DriverError as e : [EOL] self . logger . debug ( [string] . format ( e ) ) [EOL] [EOL] [comment] [EOL] self . logger . debug ( [string] ) [EOL] [EOL] def shutdown_peripheral ( self ) : [EOL] [docstring] [EOL] self . logger . info ( [string] ) [EOL] self . clear_reported_values ( ) [EOL] [EOL] def clear_reported_values ( self ) : [EOL] [docstring] [EOL] self . temperature = None [EOL] self . moisture = None [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 $builtins.float$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.float$ 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $builtins.int$ 0 0 0
	0
	0
[comment] [EOL] from typing import Any [EOL] import device [EOL] import typing [EOL] import os , sys , json , threading , pytest [EOL] [EOL] [comment] [EOL] ROOT_DIR = os . environ [ [string] ] [EOL] sys . path . append ( ROOT_DIR ) [EOL] os . chdir ( ROOT_DIR ) [EOL] [EOL] [comment] [EOL] from device . utilities import accessors [EOL] from device . utilities . communication . i2c . mux_simulator import MuxSimulator [EOL] from device . utilities . state . main import State [EOL] [EOL] [comment] [EOL] from device . peripherals . modules . adafruit_soil . manager import AdafruitSoilManager [EOL] [EOL] [comment] [EOL] CONFIG_PATH = ROOT_DIR + [string] [EOL] device_config = json . load ( open ( CONFIG_PATH ) ) [EOL] peripheral_config = accessors . get_peripheral_config ( device_config [ [string] ] , [string] ) [EOL] [EOL] [EOL] def test_init ( ) : [EOL] manager = AdafruitSoilManager ( name = [string] , i2c_lock = threading . RLock ( ) , state = State ( ) , config = peripheral_config , simulate = True , mux_simulator = MuxSimulator ( ) , ) [EOL] [EOL] [EOL] def test_initialize_peripheral ( ) : [EOL] manager = AdafruitSoilManager ( name = [string] , i2c_lock = threading . RLock ( ) , state = State ( ) , config = peripheral_config , simulate = True , mux_simulator = MuxSimulator ( ) , ) [EOL] manager . initialize_peripheral ( ) [EOL] [EOL] [EOL] def test_setup_peripheral ( ) : [EOL] manager = AdafruitSoilManager ( name = [string] , i2c_lock = threading . RLock ( ) , state = State ( ) , config = peripheral_config , simulate = True , mux_simulator = MuxSimulator ( ) , ) [EOL] manager . initialize_peripheral ( ) [EOL] manager . setup_peripheral ( ) [EOL] [EOL] [EOL] def test_update_peripheral ( ) : [EOL] manager = AdafruitSoilManager ( name = [string] , i2c_lock = threading . RLock ( ) , state = State ( ) , config = peripheral_config , simulate = True , mux_simulator = MuxSimulator ( ) , ) [EOL] manager . initialize_peripheral ( ) [EOL] manager . update_peripheral ( ) [EOL] [EOL] [EOL] def test_reset_peripheral ( ) : [EOL] manager = AdafruitSoilManager ( name = [string] , i2c_lock = threading . RLock ( ) , state = State ( ) , config = peripheral_config , simulate = True , mux_simulator = MuxSimulator ( ) , ) [EOL] manager . initialize_peripheral ( ) [EOL] manager . reset_peripheral ( ) [EOL] [EOL] [EOL] def test_shutdown_peripheral ( ) : [EOL] manager = AdafruitSoilManager ( name = [string] , i2c_lock = threading . RLock ( ) , state = State ( ) , config = peripheral_config , simulate = True , mux_simulator = MuxSimulator ( ) , ) [EOL] manager . initialize_peripheral ( ) [EOL] manager . shutdown_peripheral ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
SET_USER_LED = [string] [EOL]	$builtins.str$ 0 0 0
from device . utilities . exceptions import ExceptionLogger [EOL] [EOL] [EOL] class DriverError ( ExceptionLogger ) : [EOL] pass [EOL] [EOL] [EOL] class InitError ( DriverError ) : [EOL] message_base = [string] [EOL] [EOL] [EOL] class SetupError ( DriverError ) : [EOL] message_base = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
	0
	0
[comment] [EOL] from typing import Dict , Any [EOL] import device [EOL] import typing [EOL] import os , sys , threading [EOL] [EOL] [comment] [EOL] from typing import Any , Dict [EOL] [EOL] [comment] [EOL] sys . path . append ( os . environ [ [string] ] ) [EOL] [EOL] [comment] [EOL] from device . peripherals . classes . peripheral . scripts . run_peripheral import RunnerBase [EOL] [EOL] [comment] [EOL] from device . peripherals . common . dac5578 . driver import DAC5578Driver [EOL] [EOL] [comment] [EOL] if os . getenv ( [string] ) == None : [EOL] print ( [string] ) [EOL] exit ( [number] ) [EOL] [EOL] [comment] [EOL] if os . getenv ( [string] ) == None : [EOL] print ( [string] ) [EOL] exit ( [number] ) [EOL] [EOL] [EOL] class DriverRunner ( RunnerBase ) : [comment] [EOL] [docstring] [EOL] [EOL] [comment] [EOL] default_device = [string] [EOL] default_name = [string] [EOL] [EOL] [comment] [EOL] communication = ... [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] [comment] [EOL] self . parser . add_argument ( [string] , type = str , help = [string] ) [EOL] self . parser . add_argument ( [string] , type = int , help = [string] ) [EOL] self . parser . add_argument ( [string] , type = int , help = [string] ) [EOL] self . parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] self . parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] self . parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] self . parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] [EOL] def run ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] super ( ) . run ( * args , ** kwargs ) [EOL] [EOL] [comment] [EOL] if [string] in self . communication : [EOL] [EOL] [comment] [EOL] if self . args . panel_name != None : [EOL] [EOL] [comment] [EOL] name = None [EOL] for entry in self . communication [ [string] ] : [EOL] if entry [ [string] ] == self . args . panel_name : [EOL] self . communication = entry [EOL] name = entry [ [string] ] [EOL] break [EOL] [EOL] [comment] [EOL] if name == None : [EOL] print ( [string] . format ( self . args . panel_name ) ) [EOL] else : [EOL] [comment] [EOL] self . communication = self . communication [ [string] ] [ [number] ] [EOL] [EOL] [comment] [EOL] mux = self . communication . get ( [string] , None ) [EOL] if mux != None : [EOL] mux = int ( mux , [number] ) [EOL] [EOL] [comment] [EOL] self . driver = DAC5578Driver ( name = self . args . name , i2c_lock = threading . RLock ( ) , bus = self . communication [ [string] ] , address = int ( self . communication [ [string] ] , [number] ) , mux = mux , channel = self . communication . get ( [string] , None ) , ) [EOL] [EOL] [comment] [EOL] if self . args . channel != None and self . args . percent != None : [EOL] self . driver . write_output ( self . args . channel , self . args . percent ) [EOL] [EOL] [comment] [EOL] elif self . args . channel == None and self . args . percent != None : [EOL] outputs = { } [EOL] for i in range ( [number] ) : [EOL] outputs [ i ] = self . args . percent [EOL] self . driver . write_outputs ( outputs ) [EOL] [EOL] [comment] [EOL] elif self . args . high : [EOL] self . driver . set_high ( channel = self . args . channel ) [EOL] [EOL] [comment] [EOL] elif self . args . low : [EOL] self . driver . set_low ( channel = self . args . channel ) [EOL] [EOL] [comment] [EOL] elif self . args . fade : [EOL] self . driver . fade ( cycles = [number] , channel = self . args . channel ) [EOL] [EOL] [comment] [EOL] elif self . args . reset : [EOL] self . driver . reset ( ) [EOL] [EOL] [EOL] [comment] [EOL] if __name__ == [string] : [EOL] dr = DriverRunner ( ) [EOL] dr . run ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Any]$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $device.peripherals.common.dac5578.scripts.run_driver.DriverRunner$ 0 0 0 0 0 $device.peripherals.common.dac5578.scripts.run_driver.DriverRunner$ 0 0 0 0 0
	0
[comment] [EOL] from typing import Dict , Any , Optional [EOL] import typing [EOL] import builtins [EOL] from typing import Any , Dict , Optional [EOL] [EOL] [comment] [EOL] from device . utilities . bitwise import byte_str [EOL] [EOL] [comment] [EOL] from device . utilities . communication . i2c . peripheral_simulator import PeripheralSimulator [EOL] [EOL] [EOL] class PCF8574Simulator ( PeripheralSimulator ) : [comment] [EOL] [docstring] [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] [comment] [EOL] self . registers = { } [EOL] self . writes = { } [EOL] [EOL] [comment] [EOL] self . port_status_byte = [number] [EOL] [EOL] def get_write_response_bytes ( self , write_bytes ) : [EOL] [docstring] [EOL] self . port_status_byte = write_bytes [ [number] ] [EOL] return bytes ( [ [number] ] ) [comment] [EOL] [EOL] def get_read_response_bytes ( self , num_bytes ) : [EOL] [docstring] [EOL] return bytes ( [ self . port_status_byte ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 $typing.Dict$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Optional[builtins.bytes]$ 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
[comment] [EOL] from typing import Optional , Any [EOL] import device [EOL] import threading [EOL] import typing [EOL] import builtins [EOL] import time , threading [EOL] [EOL] [comment] [EOL] from typing import NamedTuple , Optional , Dict [EOL] [EOL] [comment] [EOL] from device . utilities import bitwise , logger [EOL] from device . utilities . communication . i2c . main import I2C [EOL] from device . utilities . communication . i2c . exceptions import I2CError [EOL] from device . utilities . communication . i2c . mux_simulator import MuxSimulator [EOL] [EOL] [comment] [EOL] from device . peripherals . common . pca9633 . simulator import PCA9633Simulator [EOL] from device . peripherals . common . pca9633 import exceptions [EOL] [EOL] [comment] [EOL] VERSION_REGISTER = [number] [EOL] [EOL] [comment] [EOL] CONFIG_REGISTER_1 = [number] [EOL] CONFIG_REGISTER_2 = [number] [EOL] [EOL] [comment] [EOL] TEMPERATURE_BASE_REGISTER = [number] [EOL] MAXIMUM_TEMPERATURE_REGISTER = [number] [EOL] [EOL] [comment] [EOL] PWM_CONFIG_BASE_REGISTER = [number] [EOL] PWM_MINIMUM_DUTY_CYCLE_BASE_REGISTER = [number] [EOL] PWM_MAXIMUM_DUTY_CYCLE_BASE_REGISTER = [number] [EOL] PWM_CURRENT_DUTY_CYCLE_BASE_REGISTER = [number] [EOL] THERMAL_ZONE_CONFIG_BASE_REGISTER = [number] [EOL] THERMAL_ZONE_MINIMUM_TEMPERATURE_BASE_REGISTER = [number] [EOL] TACHOMETER_BASE_REGISTER = [number] [EOL] FAN_PULSES_PER_REVOLUTION_REGISTER = [number] [EOL] [EOL] [EOL] class ADT7470Driver : [EOL] [docstring] [EOL] [EOL] def __init__ ( self , name , i2c_lock , bus , address , mux = None , channel = None , simulate = False , mux_simulator = None , ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] logname = [string] . format ( name ) [EOL] self . logger = logger . Logger ( logname , [string] ) [EOL] [EOL] [comment] [EOL] self . i2c_lock = i2c_lock [EOL] [EOL] [comment] [EOL] if simulate : [EOL] self . logger . info ( [string] ) [EOL] Simulator = PCA9633Simulator [EOL] else : [EOL] Simulator = None [EOL] [EOL] [comment] [EOL] self . name = name [EOL] [EOL] [comment] [EOL] try : [EOL] self . i2c = I2C ( name = [string] . format ( name ) , i2c_lock = i2c_lock , bus = bus , address = address , mux = mux , channel = channel , mux_simulator = mux_simulator , PeripheralSimulator = Simulator , ) [EOL] self . hardware_version = self . read_version ( ) [EOL] except I2CError as e : [EOL] raise exceptions . InitError ( logger = self . logger ) from e [EOL] [EOL] def read_version ( self , retry = True ) : [EOL] [docstring] [EOL] self . logger . debug ( [string] ) [EOL] [EOL] [comment] [EOL] with self . i2c_lock : [EOL] try : [EOL] version = self . i2c . read_register ( VERSION_REGISTER ) [EOL] self . logger . debug ( [string] . format ( version ) ) [EOL] return version [EOL] except I2CError as e : [EOL] raise exceptions . ReadVersionError ( logger = self . logger ) from e [EOL] [EOL] def enable_manual_fan_control ( self , fan_id ) : [EOL] [docstring] [EOL] self . logger . debug ( [string] . format ( fan_id ) ) [EOL] [EOL] [comment] [EOL] if fan_id < [number] or fan_id > [number] : [EOL] raise ValueError ( [string] ) [EOL] [EOL] [comment] [EOL] with self . i2c_lock : [EOL] try : [EOL] register_address = PWM_CONFIG_BASE_REGISTER + int ( fan_id / [number] ) [EOL] register_byte = self . i2c . read_register ( register_address ) [EOL] register_byte &= [number] - ( [number] << [number] - fan_id % [number] ) [EOL] self . i2c . write_register ( register_address , register_byte ) [EOL] except I2CError as e : [EOL] raise exceptions . EnableManualFanControlError ( logger = self . logger ) from e [EOL] [EOL] def enable_automatic_fan_control ( self , fan_id ) : [EOL] [docstring] [EOL] self . logger . debug ( [string] . format ( fan_id ) ) [EOL] [EOL] [comment] [EOL] if fan_id < [number] or fan_id > [number] : [EOL] raise ValueError ( [string] ) [EOL] [EOL] [comment] [EOL] with self . i2c_lock : [EOL] try : [EOL] register_address = PWM_CONFIG_BASE_REGISTER + int ( fan_id / [number] ) [EOL] register_byte = self . i2c . read_register ( register_address ) [EOL] register_byte |= [number] << [number] - fan_id % [number] [EOL] self . i2c . write_register ( register_address , register_byte ) [EOL] except I2CError as e : [EOL] raise exceptions . EnableAutomaticFanControlError ( logger = self . logger ) from e [EOL] [EOL] def write_thermal_zone_config ( self , fan_id , control_sensor_id ) : [EOL] [docstring] [EOL] self . logger . debug ( [string] ) [EOL] [EOL] [comment] [EOL] if fan_id < [number] or fan_id > [number] : [EOL] raise ValueError ( [string] ) [EOL] [EOL] [comment] [EOL] if control_sensor_id is None : [EOL] raise ValueError ( [string] ) [EOL] [EOL] [comment] [EOL] if type ( control_sensor_id ) is str and control_sensor_id == [string] : [EOL] register_nibble = [number] [EOL] elif ( type ( control_sensor_id ) is int [EOL] and control_sensor_id >= [number] [EOL] and control_sensor_id <= [number] ) : [EOL] register_nibble = control_sensor_id + [number] [EOL] else : [EOL] raise ValueError ( [string] ) [EOL] [EOL] [comment] [EOL] with self . i2c_lock : [EOL] try : [EOL] register_address = THERMAL_ZONE_CONFIG_BASE_REGISTER + int ( fan_id / [number] ) [EOL] register_byte = self . i2c . read_register ( register_address ) [EOL] [comment] [EOL] nibble_index = ( ( fan_id + [number] ) % [number] ) * [number] [EOL] [comment] [EOL] register_byte &= [number] << ( [number] - nibble_index ) [comment] [EOL] [comment] [EOL] register_byte += register_nibble << nibble_index [EOL] self . i2c . write_register ( register_address , register_byte ) [EOL] except I2CError as e : [EOL] raise exceptions . WriteThermalZoneConfigError ( logger = self . logger ) from e [EOL] [EOL] def write_thermal_zone_minimum_temperature ( self , fan_id , minimum_temperature ) : [EOL] [docstring] [EOL] self . logger . debug ( [string] . format ( fan_id ) ) [EOL] [EOL] [comment] [EOL] if fan_id < [number] or fan_id > [number] : [EOL] raise ValueError ( [string] ) [EOL] [EOL] [comment] [EOL] if minimum_temperature < - [number] or minimum_temperature > [number] : [EOL] raise ValueError ( [string] ) [EOL] [EOL] [comment] [EOL] temperature_int = int ( minimum_temperature ) [EOL] [EOL] [comment] [EOL] if temperature_int < [number] : [EOL] temperature_byte = [number] - temperature_int [EOL] else : [EOL] temperature_byte = temperature_int [EOL] self . logger . debug ( [string] . format ( temperature_byte ) ) [EOL] [EOL] [comment] [EOL] with self . i2c_lock : [EOL] try : [EOL] register_address = ( THERMAL_ZONE_MINIMUM_TEMPERATURE_BASE_REGISTER + fan_id ) [EOL] self . i2c . write_register ( register_address , temperature_byte ) [EOL] except I2CError as e : [EOL] raise exceptions . WriteThermalZoneMinimumTemperature ( logger = self . logger ) from e [EOL] [EOL] def write_minimum_duty_cycle ( self , fan_id , duty_cycle ) : [EOL] [docstring] [EOL] self . logger . debug ( [string] . format ( fan_id ) ) [EOL] [EOL] [comment] [EOL] if fan_id < [number] or fan_id > [number] : [EOL] raise ValueError ( [string] ) [EOL] [EOL] [comment] [EOL] if duty_cycle < [number] or duty_cycle > [number] : [EOL] raise ValueError ( [string] ) [EOL] [EOL] [comment] [EOL] duty_cycle_byte = int ( duty_cycle / [number] ) [EOL] [EOL] [comment] [EOL] with self . i2c_lock : [EOL] try : [EOL] address = PWM_MINIMUM_DUTY_CYCLE_BASE_REGISTER + fan_id [EOL] self . i2c . write_register ( address , duty_cycle_byte ) [EOL] except I2CError as e : [EOL] raise exceptions . WriteMinDutyCycleError ( logger = self . logger ) from e [EOL] [EOL] def write_maximum_duty_cycle ( self , fan_id , duty_cycle ) : [EOL] [docstring] [EOL] self . logger . debug ( [string] . format ( fan_id ) ) [EOL] [EOL] [comment] [EOL] if duty_cycle < [number] or duty_cycle > [number] : [EOL] raise ValueError ( [string] ) [EOL] [EOL] [comment] [EOL] if fan_id < [number] or fan_id > [number] : [EOL] raise ValueError ( [string] ) [EOL] [EOL] [comment] [EOL] duty_cycle_byte = int ( duty_cycle / [number] ) [EOL] [EOL] [comment] [EOL] with self . i2c_lock : [EOL] try : [EOL] address = PWM_MAXIMUM_DUTY_CYCLE_BASE_REGISTER + fan_id [EOL] self . i2c . write_register ( address , duty_cycle_byte ) [EOL] except I2CError as e : [EOL] raise exceptions . WriteMaxDutyCycleError ( logger = self . logger ) from e [EOL] [EOL] def read_current_duty_cycle ( self , fan_id ) : [EOL] [docstring] [EOL] self . logger . debug ( [string] . format ( fan_id ) ) [EOL] [EOL] [comment] [EOL] if fan_id < [number] or fan_id > [number] : [EOL] raise ValueError ( [string] ) [EOL] [EOL] [comment] [EOL] with self . i2c_lock : [EOL] try : [EOL] low_address = PWM_CURRENT_DUTY_CYCLE_BASE_REGISTER + fan_id [EOL] register_byte = self . i2c . read_register ( low_address ) [EOL] except I2CError as e : [EOL] raise exceptions . ReadCurrentDutyCycleError ( logger = self . logger ) from e [EOL] [EOL] [comment] [EOL] duty_cycle = round ( [number] * register_byte , [number] ) [EOL] [EOL] [comment] [EOL] self . logger . debug ( [string] . format ( duty_cycle ) ) [EOL] return duty_cycle [EOL] [EOL] def write_current_duty_cycle ( self , fan_id , duty_cycle ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] if fan_id < [number] or fan_id > [number] : [EOL] raise ValueError ( [string] ) [EOL] [EOL] [comment] [EOL] if duty_cycle < [number] or duty_cycle > [number] : [EOL] raise ValueError ( [string] ) [EOL] [EOL] [comment] [EOL] duty_cycle_byte = int ( duty_cycle / [number] ) [EOL] [EOL] [comment] [EOL] with self . i2c_lock : [EOL] try : [EOL] address = PWM_CURRENT_DUTY_CYCLE_BASE_REGISTER + fan_id [EOL] self . i2c . write_register ( address , duty_cycle_byte ) [EOL] except I2CError as e : [EOL] raise exceptions . WriteCurrentDutyCycleError ( logger = self . logger ) from e [EOL] [EOL] def write_fan_pulses_per_revolution ( self , fan_id , pulses_per_revolution ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] if fan_id < [number] or fan_id > [number] : [EOL] raise ValueError ( [string] ) [EOL] [EOL] [comment] [EOL] if pulses_per_revolution < [number] or pulses_per_revolution > [number] : [EOL] raise ValueError ( [string] ) [EOL] [EOL] [comment] [EOL] with self . i2c_lock : [EOL] try : [EOL] register_address = FAN_PULSES_PER_REVOLUTION_REGISTER [EOL] register_byte = self . i2c . read_register ( register_address ) [EOL] mask = [number] - ( [number] << ( fan_id * [number] ) ) [EOL] register_byte &= mask [comment] [EOL] print ( [string] . format ( pulses_per_revolution ) ) [EOL] register_byte |= ( pulses_per_revolution - [number] ) << ( fan_id * [number] ) [comment] [EOL] self . i2c . write_register ( register_address , register_byte ) [EOL] except I2CError as e : [EOL] raise exceptions . WriteFanPulsesPerRevolutionError ( logger = self . logger ) from e [EOL] [EOL] def enable_monitoring ( self , retry = True ) : [EOL] [docstring] [EOL] self . logger . debug ( [string] ) [EOL] [EOL] [comment] [EOL] with self . i2c_lock : [EOL] try : [EOL] register_byte = self . i2c . read_register ( CONFIG_REGISTER_1 ) [EOL] register_byte |= [number] [EOL] self . i2c . write_register ( CONFIG_REGISTER_1 , register_byte ) [EOL] except I2CError as e : [EOL] raise exceptions . EnableMonitoringError ( logger = self . logger ) from e [EOL] [EOL] def disable_monitoring ( self , retry = True ) : [EOL] [docstring] [EOL] self . logger . debug ( [string] ) [EOL] [EOL] [comment] [EOL] with self . i2c_lock : [EOL] try : [EOL] register_byte = self . i2c . read_register ( CONFIG_REGISTER_1 ) [EOL] register_byte &= [number] [EOL] self . i2c . write_register ( CONFIG_REGISTER_1 , register_byte ) [EOL] except I2CError as e : [EOL] raise exceptions . DisableMonitoringError ( logger = self . logger ) from e [EOL] [EOL] def enable_high_frequency_fan_drive ( self , retry = True ) : [EOL] [docstring] [EOL] self . logger . debug ( [string] ) [EOL] [EOL] [comment] [EOL] with self . i2c_lock : [EOL] try : [EOL] register_byte = self . i2c . read_register ( CONFIG_REGISTER_1 ) [EOL] register_byte &= [number] [EOL] self . i2c . write_register ( CONFIG_REGISTER_1 , register_byte ) [EOL] except I2CError as e : [EOL] raise exceptions . EnableHighFrequencyFanDriveError ( logger = self . logger ) from e [EOL] [EOL] def enable_low_frequency_fan_drive ( self , retry = True ) : [EOL] [docstring] [EOL] self . logger . debug ( [string] ) [EOL] [EOL] [comment] [EOL] with self . i2c_lock : [EOL] try : [EOL] register_byte = self . i2c . read_register ( CONFIG_REGISTER_1 ) [EOL] register_byte |= [number] [EOL] self . logger . debug ( [string] . format ( hex ( register_byte ) ) ) [EOL] self . i2c . write_register ( CONFIG_REGISTER_1 , register_byte ) [EOL] except I2CError as e : [EOL] raise exceptions . EnableLowFrequencyFanDriveError ( logger = self . logger ) from e [EOL] [EOL] def read_temperature ( self , sensor_id , retry = True , reset_monitor = True ) : [EOL] [docstring] [EOL] self . logger . debug ( [string] . format ( sensor_id ) ) [EOL] [EOL] [comment] [EOL] if sensor_id < [number] or sensor_id > [number] : [EOL] raise ValueError ( [string] ) [EOL] [EOL] [comment] [EOL] with self . i2c_lock : [EOL] try : [EOL] [comment] [EOL] if reset_monitor : [EOL] self . enable_monitoring ( ) [EOL] time . sleep ( [number] ) [comment] [EOL] self . disable_monitoring ( ) [EOL] [EOL] [comment] [EOL] register_address = TEMPERATURE_BASE_REGISTER + sensor_id [EOL] temperature_byte = self . i2c . read_register ( register_address ) [EOL] [EOL] [comment] [EOL] if reset_monitor : [EOL] self . enable_monitoring ( ) [EOL] except I2CError as e : [EOL] raise exceptions . ReadTemperatureError ( logger = self . logger ) from e [EOL] [EOL] [comment] [EOL] if temperature_byte > [number] : [EOL] temperature = float ( temperature_byte - [number] ) [EOL] else : [EOL] temperature = float ( temperature_byte ) [EOL] [EOL] [comment] [EOL] self . logger . debug ( [string] . format ( temperature ) ) [EOL] return temperature [EOL] [EOL] def read_maximum_temperature ( self , retry = True ) : [EOL] [docstring] [EOL] self . logger . debug ( [string] ) [EOL] [EOL] with self . i2c_lock : [EOL] try : [EOL] [comment] [EOL] max_temperature_byte = self . i2c . read_register ( MAXIMUM_TEMPERATURE_REGISTER ) [EOL] except I2CError as e : [EOL] raise exceptions . ReadMaximumTemperatureError ( logger = self . logger ) from e [EOL] [EOL] [comment] [EOL] if max_temperature_byte > [number] : [EOL] max_temperature = float ( max_temperature_byte - [number] ) [EOL] else : [EOL] max_temperature = float ( max_temperature_byte ) [EOL] [EOL] [comment] [EOL] self . logger . debug ( [string] . format ( max_temperature ) ) [EOL] return max_temperature [EOL] [EOL] def read_fan_speed ( self , fan_id ) : [EOL] [docstring] [EOL] self . logger . debug ( [string] . format ( fan_id ) ) [EOL] [EOL] [comment] [EOL] with self . i2c_lock : [EOL] try : [EOL] low_address = TACHOMETER_BASE_REGISTER + [number] * fan_id [EOL] high_address = low_address + [number] [EOL] low_byte = self . i2c . read_register ( low_address ) [comment] [EOL] high_byte = self . i2c . read_register ( high_address ) [comment] [EOL] tachometer_word = ( high_byte << [number] ) + low_byte [EOL] self . logger . debug ( [string] . format ( hex ( low_address ) , hex ( low_byte ) ) ) [EOL] self . logger . debug ( [string] . format ( hex ( high_address ) , hex ( high_byte ) ) ) [EOL] self . logger . debug ( [string] . format ( hex ( tachometer_word ) ) ) [EOL] except I2CError as e : [EOL] raise exceptions . ReadTachometerError ( logger = self . logger ) from e [EOL] [EOL] [comment] [EOL] if tachometer_word == [number] : [EOL] fan_speed_rpm = [number] [EOL] else : [EOL] fan_speed_rpm = round ( [number] * [number] / tachometer_word , [number] ) [EOL] self . logger . debug ( [string] . format ( fan_speed_rpm ) ) [EOL] return fan_speed_rpm [EOL] [EOL] def shutdown ( self , retry = True ) : [EOL] [docstring] [EOL] self . logger . debug ( [string] ) [EOL] [EOL] [comment] [EOL] with self . i2c_lock : [EOL] try : [EOL] register_byte = self . i2c . read_register ( CONFIG_REGISTER_2 ) [EOL] register_byte |= [number] [EOL] self . i2c . write_register ( CONFIG_REGISTER_2 , register_byte ) [EOL] except I2CError as e : [EOL] raise exceptions . ShutdownError ( logger = self . logger ) from e [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.str$ 0 $threading._RLock$ 0 $builtins.int$ 0 $builtins.int$ 0 $typing.Optional[builtins.int]$ 0 0 0 $typing.Optional[builtins.int]$ 0 0 0 $builtins.bool$ 0 0 0 $typing.Optional[device.utilities.communication.i2c.mux_simulator.MuxSimulator]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $threading._RLock$ 0 $threading._RLock$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 0 $threading._RLock$ 0 $threading._RLock$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[builtins.int]$ 0 $typing.Optional[device.utilities.communication.i2c.mux_simulator.MuxSimulator]$ 0 $typing.Optional[device.utilities.communication.i2c.mux_simulator.MuxSimulator]$ 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 $None$ 0 0 0 $builtins.int$ 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.Any$ 0 $builtins.int$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 $builtins.int$ 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $builtins.int$ 0 $builtins.bool$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 $builtins.float$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $builtins.int$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.float$ 0 0 0 0 $builtins.float$ 0 0 0 $None$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.int$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] from typing import Any [EOL] import device [EOL] import typing [EOL] import os , sys , threading [EOL] [EOL] [comment] [EOL] from typing import Any , Dict [EOL] [EOL] [comment] [EOL] sys . path . append ( str ( os . getenv ( [string] , [string] ) ) ) [EOL] [EOL] [EOL] [comment] [EOL] from device . peripherals . classes . peripheral . scripts . run_peripheral import RunnerBase [EOL] [EOL] [comment] [EOL] from device . peripherals . common . adt7470 . driver import ADT7470Driver [EOL] [EOL] [EOL] class DriverRunner ( RunnerBase ) : [comment] [EOL] [docstring] [EOL] [EOL] [comment] [EOL] default_device = [string] [EOL] default_name = [string] [EOL] [EOL] [comment] [EOL] communication = ... [EOL] [EOL] def __init__ ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] super ( ) . __init__ ( * args , ** kwargs ) [EOL] [EOL] [comment] [EOL] self . parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] self . parser . add_argument ( [string] , type = int , help = [string] ) [EOL] self . parser . add_argument ( [string] , type = int , help = [string] , ) [EOL] self . parser . add_argument ( [string] , type = int , help = [string] , nargs = [string] , ) [EOL] self . parser . add_argument ( [string] , type = int , help = [string] , nargs = [string] , ) [EOL] self . parser . add_argument ( [string] , type = int , help = [string] , nargs = [string] , ) [EOL] self . parser . add_argument ( [string] , type = int , help = [string] , nargs = [string] , ) [EOL] self . parser . add_argument ( [string] , type = int , help = [string] ) [EOL] self . parser . add_argument ( [string] , type = int , help = [string] ) [EOL] self . parser . add_argument ( [string] , type = int , help = [string] , nargs = [string] , ) [EOL] self . parser . add_argument ( [string] , type = int , help = [string] , nargs = [string] , ) [EOL] self . parser . add_argument ( [string] , action = [string] , help = [string] , ) [EOL] self . parser . add_argument ( [string] , action = [string] , help = [string] , ) [EOL] self . parser . add_argument ( [string] , action = [string] , help = [string] , ) [EOL] self . parser . add_argument ( [string] , action = [string] , help = [string] , ) [EOL] self . parser . add_argument ( [string] , type = int , help = [string] ) [EOL] self . parser . add_argument ( [string] , action = [string] , help = [string] , ) [EOL] self . parser . add_argument ( [string] , action = [string] , help = [string] , ) [EOL] self . parser . add_argument ( [string] , action = [string] , help = [string] ) [EOL] [EOL] def run ( self , * args , ** kwargs ) : [EOL] [docstring] [EOL] [EOL] [comment] [EOL] super ( ) . run ( * args , ** kwargs ) [EOL] [EOL] [comment] [EOL] self . driver = ADT7470Driver ( name = self . args . name , i2c_lock = threading . RLock ( ) , bus = self . bus , address = self . address , mux = self . mux , channel = self . channel , ) [EOL] [EOL] [comment] [EOL] if self . args . version : [EOL] self . driver . read_version ( ) [EOL] [EOL] [comment] [EOL] elif self . args . enable_manual_fan_control != None : [EOL] self . driver . enable_manual_fan_control ( self . args . enable_manual_fan_control ) [EOL] [EOL] [comment] [EOL] elif self . args . enable_automatic_fan_control != None : [EOL] self . driver . enable_automatic_fan_control ( self . args . enable_automatic_fan_control ) [EOL] [EOL] [comment] [EOL] elif self . args . write_minimum_duty_cycle != None : [EOL] fan_id = self . args . write_minimum_duty_cycle [ [number] ] [EOL] duty_cycle = self . args . write_minimum_duty_cycle [ [number] ] [EOL] self . driver . write_minimum_duty_cycle ( fan_id , duty_cycle ) [EOL] [EOL] [comment] [EOL] elif self . args . write_maximum_duty_cycle != None : [EOL] fan_id = self . args . write_maximum_duty_cycle [ [number] ] [EOL] duty_cycle = self . args . write_maximum_duty_cycle [ [number] ] [EOL] self . driver . write_maximum_duty_cycle ( fan_id , duty_cycle ) [EOL] [EOL] [comment] [EOL] elif self . args . write_current_duty_cycle != None : [EOL] fan_id = self . args . write_current_duty_cycle [ [number] ] [EOL] duty_cycle = self . args . write_current_duty_cycle [ [number] ] [EOL] self . driver . write_current_duty_cycle ( fan_id , duty_cycle ) [EOL] [EOL] [comment] [EOL] elif self . args . write_fan_pulses_per_revolution != None : [EOL] fan_id = self . args . write_fan_pulses_per_revolution [ [number] ] [EOL] pulses_per_revolution = self . args . write_fan_pulses_per_revolution [ [number] ] [EOL] self . driver . write_fan_pulses_per_revolution ( fan_id , pulses_per_revolution ) [EOL] [EOL] [comment] [EOL] elif self . args . read_fan_speed != None : [EOL] self . driver . read_fan_speed ( self . args . read_fan_speed ) [EOL] [EOL] [comment] [EOL] elif self . args . read_current_duty_cycle != None : [EOL] self . driver . read_current_duty_cycle ( self . args . read_current_duty_cycle ) [EOL] [EOL] [comment] [EOL] elif self . args . write_thermal_zone_config != None : [EOL] fan_id = self . args . write_thermal_zone_config [ [number] ] [EOL] if self . args . write_thermal_zone_config [ [number] ] == - [number] : [EOL] sensor_id = [string] [EOL] else : [EOL] sensor_id = self . args . write_thermal_zone_config [ [number] ] [EOL] self . driver . write_thermal_zone_config ( fan_id , sensor_id ) [EOL] [EOL] [comment] [EOL] elif self . args . write_thermal_zone_minimum_temperature != None : [EOL] fan_id = self . args . write_thermal_zone_minimum_temperature [ [number] ] [EOL] temperature = self . args . write_thermal_zone_minimum_temperature [ [number] ] [EOL] self . driver . write_thermal_zone_minimum_temperature ( fan_id , temperature ) [EOL] [EOL] [comment] [EOL] elif self . args . enable_monitoring : [EOL] self . driver . enable_monitoring ( ) [EOL] [EOL] [comment] [EOL] elif self . args . disable_monitoring : [EOL] self . driver . disable_monitoring ( ) [EOL] [EOL] [comment] [EOL] elif self . args . read_temperature != None : [EOL] self . driver . read_temperature ( self . args . read_temperature ) [EOL] [EOL] [comment] [EOL] elif self . args . read_maximum_temperature : [EOL] self . driver . read_maximum_temperature ( ) [EOL] [EOL] [comment] [EOL] elif self . args . write_temperature_limits : [EOL] self . driver . write_temperature_limits ( [number] , [number] , [number] ) [EOL] [EOL] [comment] [EOL] elif self . args . enable_high_frequency_fan_drive : [EOL] self . driver . enable_high_frequency_fan_drive ( ) [EOL] [EOL] [comment] [EOL] elif self . args . enable_low_frequency_fan_drive : [EOL] self . driver . enable_low_frequency_fan_drive ( ) [EOL] [EOL] [comment] [EOL] elif self . args . shutdown : [EOL] self . driver . shutdown ( ) [EOL] [EOL] [EOL] [comment] [EOL] if __name__ == [string] : [EOL] driver_runner = DriverRunner ( ) [EOL] driver_runner . run ( ) [EOL] [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 $typing.Dict[builtins.str,typing.Any]$ 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $device.peripherals.common.adt7470.scripts.run_driver.DriverRunner$ 0 0 0 0 0 $device.peripherals.common.adt7470.scripts.run_driver.DriverRunner$ 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] from typing import Any [EOL] import typing [EOL] import os , sys , time [EOL] [EOL] [comment] [EOL] from pyftdi . ftdi import Ftdi [EOL] from pyftdi . i2c import I2cController [EOL] [EOL] [comment] [EOL] if os . getenv ( [string] ) == None : [EOL] print ( [string] ) [EOL] exit ( [number] ) [EOL] [EOL] [comment] [EOL] if os . getenv ( [string] ) == None : [EOL] print ( [string] ) [EOL] exit ( [number] ) [EOL] [EOL] [comment] [EOL] if os . getenv ( [string] ) != [string] : [EOL] print ( [string] ) [EOL] exit ( [number] ) [EOL] [EOL] [comment] [EOL] I2C_ADDRESS = [number] [EOL] [EOL] [comment] [EOL] VERSION_REGISTER = [number] [EOL] CONFIG_REGISTER_1 = [number] [EOL] CONFIG_REGISTER_2 = [number] [EOL] TEMPERATURE_BASE_REGISTER = [number] [EOL] MAX_TEMPERATURE_REGISTER = [number] [EOL] TEMPERATURE_LIMIT_BASE_REGISTER = [number] [EOL] [EOL] [comment] [EOL] START_MONITORING_MASK = [number] [EOL] STOP_MONITORING_MASK = [number] [EOL] POWER_DOWN_MASK = [number] [EOL] [EOL] [comment] [EOL] i2c_controller = I2cController ( ) [EOL] i2c_controller . configure ( [string] ) [EOL] i2c = i2c_controller . get_port ( I2C_ADDRESS ) [EOL] [EOL] [EOL] [comment] [EOL] print ( [string] ) [EOL] register_byte = bytes ( i2c . read_from ( VERSION_REGISTER , [number] ) ) [EOL] print ( [string] . format ( register_byte ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0
[comment] [EOL] from device . utilities . exceptions import ExceptionLogger [EOL] [EOL] [EOL] class DriverError ( ExceptionLogger ) : [EOL] pass [EOL] [EOL] [EOL] class InitError ( DriverError ) : [EOL] message_base = [string] [EOL] [EOL] [EOL] class SetupError ( DriverError ) : [EOL] message_base = [string] [EOL] [EOL] [EOL] class SetRgbError ( DriverError ) : [EOL] message_base = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] from typing import List , Any [EOL] import typing [EOL] import os , sys , time [EOL] [EOL] [comment] [EOL] from pyftdi . ftdi import Ftdi [EOL] from pyftdi . i2c import I2cController [EOL] [EOL] [comment] [EOL] if os . getenv ( [string] ) == None : [EOL] print ( [string] ) [EOL] exit ( [number] ) [EOL] [EOL] [comment] [EOL] if os . getenv ( [string] ) == None : [EOL] print ( [string] ) [EOL] exit ( [number] ) [EOL] [EOL] [comment] [EOL] if os . getenv ( [string] ) != [string] : [EOL] print ( [string] ) [EOL] exit ( [number] ) [EOL] [EOL] [comment] [EOL] i2c_controller = I2cController ( ) [EOL] i2c_controller . configure ( [string] ) [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] PCA9632_I2C_ADDRESS = [number] [EOL] R_BYTE = [number] [EOL] G_BYTE = [number] [EOL] B_BYTE = [number] [EOL] [EOL] led = i2c_controller . get_port ( PCA9632_I2C_ADDRESS ) [EOL] [EOL] [comment] [EOL] init = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] data = init [EOL] led . write ( data ) [EOL] [EOL] [comment] [EOL] for count in range ( [number] ) : [EOL] data [ [number] + ( ( ( count >> [number] ) + [number] ) % [number] ) ] = [number] - ( count & [number] ) [EOL] data [ [number] + ( ( ( count >> [number] ) + [number] ) % [number] ) ] = [number] [EOL] data [ [number] + ( ( ( count >> [number] ) + [number] ) % [number] ) ] = count & [number] [EOL] data [ [number] ] = [number] [EOL] data [ [number] ] = [number] [EOL] led . write ( data ) [EOL] count += [number] [EOL] time . sleep ( [number] ) [EOL] [EOL] [comment] [EOL] data = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] ] [EOL] led . write ( data ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 $builtins.int$ 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 $typing.List[builtins.int]$ 0 $typing.Any$ 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[builtins.int]$ 0 0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] import os , sys , pytest , threading [EOL] [EOL] [comment] [EOL] from typing import Dict [EOL] [EOL] [comment] [EOL] sys . path . append ( str ( os . getenv ( [string] , [string] ) ) ) [EOL] [EOL] [comment] [EOL] from device . utilities . communication . i2c . mux_simulator import MuxSimulator [EOL] [EOL] [comment] [EOL] from device . peripherals . common . pca9633 . driver import PCA9633Driver [EOL] from device . peripherals . common . pca9633 import exceptions [EOL] [EOL] [EOL] def test_init ( ) : [EOL] driver = PCA9633Driver ( [string] , i2c_lock = threading . RLock ( ) , bus = [number] , address = [number] , mux = [number] , channel = [number] , simulate = True , mux_simulator = MuxSimulator ( ) , ) [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] import sys , os , pytest , threading [EOL] [EOL] [comment] [EOL] sys . path . append ( os . environ [ [string] ] ) [EOL] [EOL] [comment] [EOL] from device . peripherals . classes . atlas . driver import AtlasDriver [EOL] from device . peripherals . classes . atlas . simulator import AtlasSimulator [EOL] from device . utilities . communication . i2c . mux_simulator import MuxSimulator [EOL] [EOL] [EOL] def test_init ( ) : [EOL] driver = AtlasDriver ( name = [string] , i2c_lock = threading . RLock ( ) , bus = [number] , address = [number] , simulate = True , mux_simulator = MuxSimulator ( ) , Simulator = AtlasSimulator , ) [EOL] [EOL] [EOL] def test_read_info ( ) : [EOL] driver = AtlasDriver ( name = [string] , i2c_lock = threading . RLock ( ) , bus = [number] , address = [number] , simulate = True , mux_simulator = MuxSimulator ( ) , Simulator = AtlasSimulator , ) [EOL] info = driver . read_info ( ) [EOL] assert info . sensor_type == [string] [EOL] assert info . firmware_version == [number] [EOL] [EOL] [EOL] def test_read_status ( ) : [EOL] driver = AtlasDriver ( name = [string] , i2c_lock = threading . RLock ( ) , bus = [number] , address = [number] , simulate = True , mux_simulator = MuxSimulator ( ) , Simulator = AtlasSimulator , ) [EOL] status = driver . read_status ( ) [EOL] assert status . prev_restart_reason == [string] [EOL] assert status . voltage == [number] [EOL] [EOL] [EOL] def test_enable_protocol_lock ( ) : [EOL] driver = AtlasDriver ( name = [string] , i2c_lock = threading . RLock ( ) , bus = [number] , address = [number] , simulate = True , mux_simulator = MuxSimulator ( ) , Simulator = AtlasSimulator , ) [EOL] driver . enable_protocol_lock ( ) [EOL] [EOL] [EOL] def test_disable_protocol_lock ( ) : [EOL] driver = AtlasDriver ( name = [string] , i2c_lock = threading . RLock ( ) , bus = [number] , address = [number] , simulate = True , mux_simulator = MuxSimulator ( ) , Simulator = AtlasSimulator , ) [EOL] driver . disable_protocol_lock ( ) [EOL] [EOL] [EOL] def test_enable_led ( ) : [EOL] driver = AtlasDriver ( name = [string] , i2c_lock = threading . RLock ( ) , bus = [number] , address = [number] , simulate = True , mux_simulator = MuxSimulator ( ) , Simulator = AtlasSimulator , ) [EOL] driver . enable_led ( ) [EOL] [EOL] [EOL] def test_disable_led ( ) : [EOL] driver = AtlasDriver ( name = [string] , i2c_lock = threading . RLock ( ) , bus = [number] , address = [number] , simulate = True , mux_simulator = MuxSimulator ( ) , Simulator = AtlasSimulator , ) [EOL] driver . disable_led ( ) [EOL] [EOL] [EOL] def test_enable_sleep_mode ( ) : [EOL] driver = AtlasDriver ( name = [string] , i2c_lock = threading . RLock ( ) , bus = [number] , address = [number] , simulate = True , mux_simulator = MuxSimulator ( ) , Simulator = AtlasSimulator , ) [EOL] driver . enable_sleep_mode ( ) [EOL] [EOL] [EOL] def test_set_compensation_temperature ( ) : [EOL] driver = AtlasDriver ( name = [string] , i2c_lock = threading . RLock ( ) , bus = [number] , address = [number] , simulate = True , mux_simulator = MuxSimulator ( ) , Simulator = AtlasSimulator , ) [EOL] driver . set_compensation_temperature ( [number] ) [EOL] [EOL] [EOL] def test_calibrate_low ( ) : [EOL] driver = AtlasDriver ( name = [string] , i2c_lock = threading . RLock ( ) , bus = [number] , address = [number] , simulate = True , mux_simulator = MuxSimulator ( ) , Simulator = AtlasSimulator , ) [EOL] driver . calibrate_low ( [number] ) [EOL] [EOL] [EOL] def test_calibrate_mid ( ) : [EOL] driver = AtlasDriver ( name = [string] , i2c_lock = threading . RLock ( ) , bus = [number] , address = [number] , simulate = True , mux_simulator = MuxSimulator ( ) , Simulator = AtlasSimulator , ) [EOL] driver . calibrate_mid ( [number] ) [EOL] [EOL] [EOL] def test_calibrate_high ( ) : [EOL] driver = AtlasDriver ( name = [string] , i2c_lock = threading . RLock ( ) , bus = [number] , address = [number] , simulate = True , mux_simulator = MuxSimulator ( ) , Simulator = AtlasSimulator , ) [EOL] driver . calibrate_high ( [number] ) [EOL] [EOL] [EOL] def test_clear_calibrations ( ) : [EOL] driver = AtlasDriver ( name = [string] , i2c_lock = threading . RLock ( ) , bus = [number] , address = [number] , simulate = True , mux_simulator = MuxSimulator ( ) , Simulator = AtlasSimulator , ) [EOL] driver . clear_calibrations ( ) [EOL] [EOL] [EOL] def test_factory_reset ( ) : [EOL] driver = AtlasDriver ( name = [string] , i2c_lock = threading . RLock ( ) , bus = [number] , address = [number] , simulate = True , mux_simulator = MuxSimulator ( ) , Simulator = AtlasSimulator , ) [EOL] driver . factory_reset ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
INIT = [string] [EOL] NORMAL = [string] [EOL] RESET = [string] [EOL] ERROR = [string] [EOL] SHUTDOWN = [string] [EOL] INVALID = [string] [EOL]	$builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
	0
	0
	0
	0
	0
	0
	0
[comment] [EOL] from typing import Any [EOL] import typing [EOL] import os , sys , json , pytest [EOL] [EOL] [comment] [EOL] ROOT_DIR = str ( os . getenv ( [string] , [string] ) ) [EOL] sys . path . append ( ROOT_DIR ) [EOL] os . chdir ( ROOT_DIR ) [EOL] [EOL] [comment] [EOL] from device . utilities import accessors [EOL] from device . utilities . state . main import State [EOL] [EOL] [comment] [EOL] from device . controllers . modules . water_aeration . manager import WaterAerationControllerManager [EOL] [EOL] [comment] [EOL] CONFIG_PATH = ROOT_DIR + [string] [EOL] device_config = json . load ( open ( CONFIG_PATH ) ) [EOL] controller_config = accessors . get_controller_config ( device_config [ [string] ] , [string] ) [EOL] [EOL] [EOL] def test_init ( ) : [EOL] manager = WaterAerationControllerManager ( name = [string] , state = State ( ) , config = controller_config ) [EOL] [EOL] def test_initialize_controller ( ) : [EOL] manager = WaterAerationControllerManager ( name = [string] , state = State ( ) , config = controller_config ) [EOL] manager . initialize_controller ( ) [EOL] [EOL] def test_reset_controller ( ) : [EOL] manager = WaterAerationControllerManager ( name = [string] , state = State ( ) , config = controller_config ) [EOL] manager . initialize_controller ( ) [EOL] manager . reset_controller ( ) [EOL] [EOL] def test_shutdown_controller ( ) : [EOL] manager = WaterAerationControllerManager ( name = [string] , state = State ( ) , config = controller_config ) [EOL] manager . initialize_controller ( ) [EOL] manager . shutdown_controller ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import os , sys , pytest , threading [EOL] [EOL] [comment] [EOL] sys . path . append ( os . environ [ [string] ] ) [EOL] [EOL] [comment] [EOL] from device . utilities . state . main import State [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import sys , os [EOL] [EOL] [comment] [EOL] ROOT_DIR = os . environ [ [string] ] [EOL] sys . path . append ( ROOT_DIR ) [EOL] os . chdir ( ROOT_DIR ) [EOL] [EOL] [comment] [EOL] [EOL] [EOL] def test_init ( ) : [EOL] assert True [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0
[comment] [EOL] from typing import List , Any [EOL] import typing [EOL] import sys [EOL] [EOL] [comment] [EOL] try : [EOL] [comment] [EOL] sys . path . append ( [string] ) [EOL] except : [EOL] [comment] [EOL] sys . path . append ( [string] ) [EOL] [EOL] [EOL] from device . utilities . maths import * [EOL] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] def test_interpolate2 ( ) : [EOL] x_list = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ] [EOL] y_list = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ] [EOL] x = [number] [EOL] y = interpolate ( x_list , y_list , x ) [EOL] assert y == [number] [EOL] [EOL] [EOL] def test_interpolate2_reverse ( ) : [EOL] x_list = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ] [EOL] y_list = [ [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , [number] , ] [EOL] y = [number] [EOL] x = interpolate ( y_list , x_list , y ) [EOL] assert round ( x , [number] ) == [number] [EOL] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] import sys , os [EOL] [EOL] [comment] [EOL] ROOT_DIR = os . environ [ [string] ] [EOL] sys . path . append ( ROOT_DIR ) [EOL] os . chdir ( ROOT_DIR ) [EOL] [EOL] [comment] [EOL] from device . utilities import system [EOL] [EOL] [EOL] def test_init ( ) : [EOL] assert True [EOL]	0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0
[comment] [EOL] from typing import List , Dict , Any [EOL] import typing [EOL] import os , sys , pytest , numpy [EOL] [EOL] [comment] [EOL] sys . path . append ( os . environ [ [string] ] ) [EOL] [EOL] [comment] [EOL] from device . utilities import accessors , constants [EOL] [EOL] [EOL] def test_listify_dict ( ) : [EOL] dict_ = { [string] : [number] , [string] : [number] } [EOL] expected = [ [number] , [number] ] [EOL] list_ = accessors . listify_dict ( dict_ ) [EOL] assert list_ == expected [EOL] [EOL] [EOL] def test_vectorize_dict ( ) : [EOL] dict_ = { [string] : [number] , [string] : [number] } [EOL] expected = numpy . array ( [ [number] , [number] ] ) [EOL] vector = accessors . vectorize_dict ( dict_ ) [EOL] assert vector . tolist ( ) == expected . tolist ( ) [EOL] [EOL] [EOL] def test_matrixify_nested_dict ( ) : [EOL] ndict = { [string] : { [string] : [number] , [string] : [number] } , [string] : { [string] : [number] , [string] : [number] } } [EOL] expected = numpy . array ( [ [ [number] , [number] ] , [ [number] , [number] ] ] ) [EOL] matrix = accessors . matrixify_nested_dict ( ndict ) [EOL] assert matrix . tolist ( ) == expected . tolist ( ) [EOL] [EOL] [EOL] def test_dictify_list ( ) : [EOL] list_ = [ [number] , [number] , [number] ] [EOL] reference_dict = { [string] : [number] , [string] : [number] , [string] : [number] } [EOL] expected = { [string] : [number] , [string] : [number] , [string] : [number] } [EOL] dict_ = accessors . dictify_list ( list_ , reference_dict ) [EOL] assert dict_ == expected [EOL] [EOL] [EOL] def test_floatify_string_kilo ( ) : [EOL] string = [string] [EOL] float_ = accessors . floatify_string ( string ) [EOL] expected_float = [number] * constants . KILOBYTE [EOL] assert float_ == expected_float [EOL] [EOL] [EOL] def test_floatify_string_mega ( ) : [EOL] string = [string] [EOL] float_ = accessors . floatify_string ( string ) [EOL] expected_float = [number] * constants . MEGABYTE [EOL] assert float_ == expected_float [EOL] [EOL] [EOL] def test_floatify_string_giga ( ) : [EOL] string = [string] [EOL] float_ = accessors . floatify_string ( string ) [EOL] expected_float = [number] * constants . GIGABYTE [EOL] assert float_ == expected_float [EOL] [EOL] [EOL] def test_floatify_string_invalid ( ) : [EOL] string = [string] [EOL] with pytest . raises ( ValueError ) : [EOL] float_ = accessors . floatify_string ( string ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0