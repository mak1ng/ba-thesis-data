from typing import Any [EOL] import typing [EOL] import packages [EOL] from unittest . mock import patch [EOL] from injector import Injector , Module [EOL] from injector_provider . providers import InjectorProvider [EOL] [EOL] [EOL] class TestObjectGraphBuilder : [EOL] def test_can_build_without_any_configurations ( self ) : [EOL] provider = InjectorProvider ( ) [EOL] assert isinstance ( provider . get_injector ( ) , Injector ) [EOL] [EOL] @ patch ( [string] ) def test_add_class ( self , mocked_injector_init ) : [EOL] mocked_injector_init . return_value = None [EOL] provider = InjectorProvider ( ) [EOL] [EOL] class Configurator ( Module ) : [EOL] pass [EOL] [EOL] configurator1 = Configurator ( ) [EOL] provider . add_configurator ( configurator1 ) [EOL] provider . get_injector ( ) [EOL] [EOL] mocked_injector_init . assert_called_once_with ( [ configurator1 ] ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $packages.injector_provider.tests.test_injector_provider.TestObjectGraphBuilder.test_add_class.Configurator$ 0 0 0 0 0 $typing.Any$ 0 0 0 $packages.injector_provider.tests.test_injector_provider.TestObjectGraphBuilder.test_add_class.Configurator$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $packages.injector_provider.tests.test_injector_provider.TestObjectGraphBuilder.test_add_class.Configurator$ 0 0 0
import sys [EOL] import os [EOL] [EOL] sys . path . append ( os . path . realpath ( os . path . dirname ( __file__ ) + [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . providers import InjectorProvider [EOL]	0 0 0 0 0 0
from typing import List [EOL] import typing [EOL] version_info = [ [number] , [number] , [number] ] [EOL] __version__ = [string] [EOL]	0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import Any , Dict , List [EOL] import typing [EOL] from glob import glob [EOL] from os . path import abspath , dirname , join as pjoin [EOL] from setuptools import setup , find_packages [EOL] [EOL] root = dirname ( abspath ( __file__ ) ) [EOL] [EOL] [EOL] def execfile ( fname , globs , locs = None ) : [EOL] locs = locs or globs [EOL] exec ( compile ( open ( fname ) . read ( ) , fname , [string] ) , globs , locs ) [EOL] [EOL] [EOL] source_path = [string] [EOL] packages = find_packages ( source_path ) [EOL] root_packages = [ package for package in packages if [string] not in package ] [EOL] [EOL] assert len ( root_packages ) == [number] [EOL] package = root_packages [ [number] ] [EOL] package_directory = pjoin ( root , source_path , package ) [EOL] [EOL] [EOL] def get_variable_from_file ( filepath , variable ) : [EOL] filepath_in_package = pjoin ( package_directory , filepath ) [EOL] globs = { } [EOL] execfile ( filepath_in_package , globs ) [EOL] variable_value = globs [ variable ] [EOL] [EOL] return variable_value [EOL] [EOL] [EOL] version = get_variable_from_file ( [string] , [string] ) [EOL] install_requires = get_variable_from_file ( [string] , [string] ) [EOL] [EOL] [EOL] setup ( name = package , version = version , python_requires = [string] , author = [string] , author_email = [string] , description = [string] , classifiers = [ [string] , [string] , ] , packages = packages , package_dir = { [string] : source_path } , include_package_data = True , package_data = { package : [ ] } , license = [string] , install_requires = install_requires , extras_require = { [string] : [ [string] ] } ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Any$ 0 0 0 $builtins.str$ 0 0 $typing.List[typing.Any]$ 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 $typing.Any$ 0 $typing.List[typing.Any]$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 $builtins.str$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Union [EOL] import typing [EOL] version_info = [ [number] , [number] , [number] , [string] ] [EOL] __version__ = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Union[builtins.int,builtins.str]]$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
from typing import List [EOL] import typing [EOL] install_requires = [ [string] , [string] , [string] ] [EOL]	0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Any , Dict , Optional [EOL] import typing [EOL] import os [EOL] import sys [EOL] import json [EOL] import subprocess [EOL] import shutil [EOL] [EOL] from . build import PackageTree [EOL] [EOL] [EOL] def serialise_imports ( imports ) : [EOL] new_imports = { } [EOL] for module_path_raw , values in imports . items ( ) : [EOL] module_path = module_path_raw . replace ( os . sep , [string] ) [EOL] new_imports [ module_path ] = { } [EOL] [EOL] for where , a_set in values . items ( ) : [EOL] new_imports [ module_path ] [ where ] = sorted ( list ( a_set ) ) [EOL] [EOL] return json . dumps ( new_imports , sort_keys = True , indent = [number] ) [EOL] [EOL] [EOL] def is_imports_json_up_to_date ( directory ) : [EOL] packages = os . path . join ( directory , [string] ) [EOL] imports_json = os . path . join ( directory , [string] ) [EOL] [EOL] with open ( imports_json ) as file : [EOL] data = json . load ( file ) [EOL] [EOL] file_data = json . dumps ( data , sort_keys = True , indent = [number] ) [EOL] calced_data = serialise_imports ( PackageTree ( packages ) . imports ) [EOL] [EOL] return file_data == calced_data [EOL] [EOL] [EOL] def commit_hook ( directory ) : [EOL] if not is_imports_json_up_to_date ( directory ) : [EOL] [EOL] print ( [string] [string] [string] [string] ) [EOL] [EOL] sys . stdout . flush ( ) [EOL] [EOL] yarn = shutil . which ( [string] ) [EOL] git = shutil . which ( [string] ) [EOL] [EOL] subprocess . call ( [ yarn , [string] ] ) [EOL] [EOL] subprocess . call ( [ git , [string] , [string] ] ) [EOL] subprocess . call ( [ git , [string] , [string] ] ) [EOL] subprocess . call ( [ git , [string] , [string] ] ) [EOL] subprocess . call ( [ git , [string] , [string] ] ) [EOL] subprocess . call ( [ git , [string] , [string] ] ) [EOL] [EOL] subprocess . call ( [ git , [string] ] ) [EOL] [EOL] print ( [string] [string] [string] [string] [string] [string] [string] ) [EOL] [EOL] sys . exit ( [number] ) [EOL] [EOL] [EOL] def update_imports_json ( directory ) : [EOL] packages = os . path . join ( directory , [string] ) [EOL] imports_json = os . path . join ( directory , [string] ) [EOL] [EOL] with open ( imports_json , [string] ) as file : [EOL] file . write ( serialise_imports ( PackageTree ( packages ) . imports ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Any , Dict , Tuple , Set , List , Iterator [EOL] import typing [EOL] import packages [EOL] import os [EOL] import json [EOL] from copy import copy , deepcopy [EOL] import difflib [EOL] [EOL] import networkx as nx [EOL] [EOL] from . . parse . imports import get_imports [EOL] [EOL] [EOL] DEPENDENCIES_JSON_FILEPATH = [string] [EOL] DEFAULT_EXCLUDE_DIRS = { [string] , [string] , [string] , [string] , [string] } [EOL] DEFAULT_EXCLUDE_FILES = { [string] , [string] , [string] } [EOL] DEFAULT_KEYS_TO_KEEP = { [string] , [string] , [string] } [EOL] [EOL] [EOL] class PackageTree : [EOL] def __init__ ( self , directory , exclude_dirs = None , exclude_files = None ) : [EOL] if exclude_dirs is None : [EOL] exclude_dirs = DEFAULT_EXCLUDE_DIRS [EOL] [EOL] if exclude_files is None : [EOL] exclude_files = DEFAULT_EXCLUDE_FILES [EOL] [EOL] self . exclude_dirs = exclude_dirs [EOL] self . exclude_files = exclude_files [EOL] [EOL] self . directory = directory [EOL] [EOL] def trim_path ( self , path ) : [EOL] relpath = os . path . relpath ( path , self . directory ) [EOL] split = relpath . split ( os . sep ) [EOL] assert split [ [number] ] == split [ [number] ] [EOL] assert split [ [number] ] == [string] [EOL] [EOL] if split [ - [number] ] == [string] : [EOL] split = split [ : - [number] ] [EOL] [EOL] return os . path . join ( * split [ [number] : ] ) [EOL] [EOL] def expand_path ( self , path ) : [EOL] split = path . split ( os . sep ) [EOL] relpath = os . path . join ( split [ [number] ] , [string] , path ) [EOL] [EOL] if not relpath . endswith ( [string] ) : [EOL] relpath = os . path . join ( relpath , [string] ) [EOL] [EOL] return os . path . join ( self . directory , relpath ) [EOL] [EOL] def build_directory_digraph ( self ) : [EOL] digraph = nx . DiGraph ( ) [EOL] depth = { } [EOL] [EOL] for root , dirs , files in os . walk ( self . _directory , topdown = True ) : [EOL] dirs [ : ] = [ d for d in dirs if d not in self . exclude_dirs ] [EOL] [EOL] if [string] in files : [EOL] module = self . trim_path ( os . path . join ( root , [string] ) ) [EOL] current_depth = module . count ( os . sep ) + [number] [EOL] files [ : ] = [ f for f in files if f not in self . exclude_files ] [EOL] [EOL] digraph . add_node ( module ) [EOL] depth [ module ] = current_depth [EOL] parent_init = os . path . join ( os . path . dirname ( root ) , [string] ) [EOL] if os . path . exists ( parent_init ) : [EOL] digraph . add_edge ( self . trim_path ( parent_init ) , module ) [EOL] [EOL] for f in files : [EOL] if f . endswith ( [string] ) : [EOL] filepath = self . trim_path ( os . path . join ( root , f ) ) [EOL] digraph . add_node ( filepath ) [EOL] depth [ filepath ] = current_depth [EOL] digraph . add_edge ( module , filepath ) [EOL] [EOL] if not digraph . nodes : [EOL] raise ValueError ( [string] ) [EOL] [EOL] self . digraph = digraph [EOL] self . depth = depth [EOL] self . calc_properties ( ) [EOL] [EOL] def calc_properties ( self ) : [EOL] self . roots = [ n for n , d in self . digraph . in_degree ( ) if d == [number] ] [EOL] self . imports = { filepath : get_imports ( self . expand_path ( filepath ) , filepath , self . roots , self . depth [ filepath ] ) for filepath in self . digraph . nodes ( ) } [EOL] self . _cache = { } [EOL] self . _cache [ [string] ] = { } [EOL] [EOL] @ property def directory ( self ) : [EOL] return self . _directory [EOL] [EOL] @ directory . setter def directory ( self , value ) : [EOL] self . _directory = value [EOL] self . build_directory_digraph ( ) [EOL] [EOL] def descendants_dependencies ( self , filepath ) : [EOL] try : [EOL] return self . _cache [ [string] ] [ filepath ] [EOL] except KeyError : [EOL] dependencies = deepcopy ( self . imports [ filepath ] ) [EOL] [EOL] for descendant in nx . descendants ( self . digraph , filepath ) : [EOL] for key in dependencies : [EOL] dependencies [ key ] |= self . imports [ descendant ] [ key ] [EOL] [EOL] for key in dependencies : [EOL] dependencies [ key ] = list ( dependencies [ key ] ) [EOL] dependencies [ key ] . sort ( ) [EOL] [EOL] self . _cache [ [string] ] [ filepath ] = dependencies [EOL] return dependencies [EOL] [EOL] @ property def package_dependencies_dict ( self ) : [EOL] try : [EOL] return self . _cache [ [string] ] [EOL] except KeyError : [EOL] key_map = { [string] : [string] , [string] : [string] , [string] : [string] } [EOL] [EOL] tree = { package : { key_map [ key ] : sorted ( list ( { package . split ( [string] ) [ [number] ] for package in packages } ) ) for key , packages in self . descendants_dependencies ( package ) . items ( ) if key in key_map . keys ( ) } for package in self . roots } [EOL] [EOL] self . _cache [ [string] ] = tree [EOL] return tree [EOL] [EOL] @ property def package_dependencies_digraph ( self ) : [EOL] try : [EOL] return self . _cache [ [string] ] [EOL] except KeyError : [EOL] dag = nx . DiGraph ( ) [EOL] [EOL] for key , values in self . package_dependencies_dict . items ( ) : [EOL] dag . add_node ( key ) [EOL] dag . add_nodes_from ( values [ [string] ] ) [EOL] edge_tuples = [ ( key , value ) for value in values [ [string] ] ] [EOL] dag . add_edges_from ( edge_tuples ) [EOL] [EOL] self . _cache [ [string] ] = dag [EOL] return dag [EOL] [EOL] def is_acyclic ( self ) : [EOL] return nx . is_directed_acyclic_graph ( self . package_dependencies_digraph ) [EOL] [EOL] [EOL] def build_tree ( directory ) : [EOL] with open ( DEPENDENCIES_JSON_FILEPATH , [string] ) as file : [EOL] data = json . load ( file ) [EOL] [EOL] data [ [string] ] = PackageTree ( directory ) . package_dependencies_dict [EOL] [EOL] with open ( DEPENDENCIES_JSON_FILEPATH , [string] ) as file : [EOL] json . dump ( data , file , indent = [number] , sort_keys = True ) [EOL] [EOL] [EOL] def test_tree ( directory ) : [EOL] package_tree = PackageTree ( directory ) [EOL] assert package_tree . is_acyclic ( ) [EOL] assert_tree_unchanged ( package_tree . package_dependencies_dict ) [EOL] [EOL] [EOL] def assert_tree_unchanged ( tree ) : [EOL] with open ( DEPENDENCIES_JSON_FILEPATH , [string] ) as file : [EOL] data = json . load ( file ) [EOL] [EOL] file_data = json . dumps ( data [ [string] ] , sort_keys = True , indent = [number] ) [EOL] calced_data = json . dumps ( tree , sort_keys = True , indent = [number] ) [EOL] if file_data != calced_data : [EOL] diff = difflib . unified_diff ( file_data . split ( [string] ) , calced_data . split ( [string] ) ) [EOL] print ( [string] . join ( diff ) ) [EOL] raise AssertionError [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 $typing.Set[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 $builtins.bytes$ 0 0 0 0 0 0 0 0 $typing.List[builtins.bytes]$ 0 $builtins.bytes$ 0 $typing.List[builtins.bytes]$ 0 0 0 0 0 0 0 $typing.List[builtins.bytes]$ 0 0 0 0 $typing.List[builtins.bytes]$ 0 0 0 0 0 $typing.List[builtins.bytes]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.bytes]$ 0 0 0 0 0 0 0 0 $typing.List[builtins.bytes]$ 0 $typing.List[builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.bytes]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Dict[builtins.str,typing.List[typing.Any]]]$ 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Dict[typing.Any,typing.Dict[builtins.str,typing.List[typing.Any]]]$ 0 0 $typing.Dict[typing.Any,typing.Dict[builtins.str,typing.List[typing.Any]]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.List[typing.Tuple[typing.Any,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.List[typing.Tuple[typing.Any,typing.Any]]$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . build import build_tree , test_tree , PackageTree [EOL] from . check import is_imports_json_up_to_date , update_imports_json [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Any , Dict , Set , List [EOL] import typing [EOL] import packages [EOL] import os [EOL] [EOL] import networkx as nx [EOL] from copy import copy [EOL] [EOL] from . . tree import PackageTree [EOL] from . utilities import ( save_dot_file , remove_prefix , get_levels , create_labels , create_href ) [EOL] [EOL] [EOL] ROOT = os . getcwd ( ) [EOL] [EOL] [EOL] def draw_directory_modules ( save_directory ) : [EOL] package_tree = PackageTree ( os . path . join ( ROOT , [string] ) ) [EOL] [EOL] internal_packages = copy ( package_tree . roots ) [EOL] internal_packages . remove ( [string] ) [EOL] [EOL] module_paths = [ item for package in internal_packages for item in package_tree . digraph . neighbors ( package ) ] [EOL] [EOL] modules = { item : os . path . splitext ( item ) [ [number] ] . replace ( os . sep , [string] ) for item in module_paths } [EOL] [EOL] dependencies = { module . replace ( os . sep , [string] ) : { [string] . join ( item . split ( [string] ) [ [number] : [number] ] ) for item in package_tree . descendants_dependencies ( module ) [ [string] ] + package_tree . descendants_dependencies ( module ) [ [string] ] } for module in modules . keys ( ) } [EOL] [EOL] dependents = { key : set ( ) for key in dependencies . keys ( ) } [EOL] try : [EOL] for key , values in dependencies . items ( ) : [EOL] for item in values : [EOL] dependents [ item ] . add ( key ) [comment] [EOL] except KeyError : [EOL] print ( [string] . format ( dependents . keys ( ) ) ) [EOL] print ( [string] . format ( dependencies ) ) [EOL] raise [EOL] [EOL] for package in internal_packages : [EOL] build_graph_for_a_module ( package , package_tree , dependencies , dependents , save_directory ) [EOL] [EOL] [EOL] def build_graph_for_a_module ( graphed_package , package_tree , dependencies , dependents , save_directory ) : [EOL] print ( graphed_package ) [EOL] [EOL] current_modules = sorted ( [ item . replace ( os . sep , [string] ) for item in package_tree . digraph . neighbors ( graphed_package ) ] ) [EOL] [EOL] outfilepath = os . path . join ( save_directory , [string] . format ( graphed_package . replace ( os . sep , [string] ) ) ) [EOL] [EOL] if not current_modules : [EOL] dot_file_contents = [string] . format ( graphed_package ) [EOL] [EOL] save_dot_file ( dot_file_contents , outfilepath ) [EOL] return [EOL] [EOL] module_internal_relationships = { module . replace ( os . sep , [string] ) : [ [string] . join ( item . split ( [string] ) [ [number] : [number] ] ) for item in package_tree . descendants_dependencies ( module ) [ [string] ] ] for module in sorted ( list ( package_tree . digraph . neighbors ( graphed_package ) ) ) } [EOL] [EOL] levels = get_levels ( module_internal_relationships ) [EOL] [EOL] internal_nodes = sorted ( list ( set ( module_internal_relationships . keys ( ) ) ) ) [EOL] external_nodes = set ( ) [EOL] for module in current_modules : [EOL] external_nodes |= dependencies [ module ] [EOL] external_nodes |= dependents [ module ] [EOL] [EOL] external_nodes = sorted ( list ( external_nodes ) ) [EOL] [EOL] all_nodes = internal_nodes + external_nodes [EOL] [EOL] def simplify ( text ) : [EOL] text = remove_prefix ( text , [string] . format ( graphed_package ) ) [EOL] text = remove_prefix ( text , [string] ) [EOL] [EOL] return text [EOL] [EOL] label_map = { node : simplify ( node ) for node in all_nodes } [EOL] [EOL] nodes = [string] [EOL] [EOL] for level in range ( max ( levels . keys ( ) ) + [number] ) : [EOL] if levels [ level ] : [EOL] grouped_packages = [string] . join ( sorted ( list ( levels [ level ] ) ) ) [EOL] nodes += [string] . format ( grouped_packages ) [EOL] [EOL] edges = [string] [EOL] current_packages = [string] [EOL] [EOL] current_dependents = set ( ) [EOL] current_dependencies = set ( ) [EOL] [EOL] for module in current_modules : [EOL] current_packages += [string] . format ( module ) [EOL] [EOL] for dependency in sorted ( list ( dependencies [ module ] ) ) : [EOL] edges += [string] . format ( module , dependency ) [EOL] if not dependency in current_modules : [EOL] current_dependencies . add ( dependency ) [EOL] [EOL] for dependent in sorted ( list ( dependents [ module ] ) ) : [EOL] edges += [string] . format ( dependent , module ) [EOL] if not dependent in current_modules : [EOL] current_dependents . add ( dependent ) [EOL] [EOL] external_ranks = [string] [EOL] if current_dependents : [EOL] grouped_dependents = [string] . join ( sorted ( list ( current_dependents ) ) ) [EOL] external_ranks += [string] . format ( grouped_dependents ) [EOL] [EOL] if current_dependencies : [EOL] grouped_dependencies = [string] . join ( sorted ( list ( current_dependencies ) ) ) [EOL] external_ranks += [string] . format ( grouped_dependencies ) [EOL] [EOL] external_labels = create_labels ( label_map ) [EOL] [EOL] dot_file_contents = [string] . format ( current_packages , graphed_package , create_href ( graphed_package ) , nodes , external_labels , external_ranks , edges ) [EOL] [EOL] save_dot_file ( dot_file_contents , outfilepath ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . api import draw_all [EOL]	0 0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from . packages import draw_packages [EOL] from . directories import draw_directory_modules [EOL] from . files import draw_file_modules [EOL] [EOL] [EOL] def draw_all ( save_directory ) : [EOL] draw_packages ( save_directory ) [EOL] draw_directory_modules ( save_directory ) [EOL] draw_file_modules ( save_directory ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Any , Optional , List , Tuple [EOL] import typing [EOL] import os [EOL] import shutil [EOL] from glob import glob [EOL] import subprocess [EOL] import json [EOL] [EOL] [EOL] WHITELIST = ( [string] , [string] , [string] , [string] , [string] , [string] , [string] , [string] ) [EOL] [EOL] [EOL] def build_wheels_with_yarn ( ) : [EOL] yarn = shutil . which ( [string] ) [EOL] subprocess . call ( [ yarn , [string] ] ) [EOL] for package in WHITELIST : [EOL] subprocess . call ( [ yarn , [string] , [string] , [string] , [string] . format ( package ) ] ) [EOL] [EOL] [EOL] def copy_wheels ( packages_dir , new_dir ) : [EOL] wheel_filepaths = glob ( os . path . join ( packages_dir , [string] , [string] , [string] ) ) [EOL] [EOL] pymedphys_wheel_urls = [ ] [EOL] for filepath in wheel_filepaths : [EOL] filename = os . path . basename ( filepath ) [EOL] if not filename . split ( [string] ) [ [number] ] in WHITELIST : [EOL] continue [EOL] [EOL] pymedphys_wheel_urls . append ( filename ) [EOL] new_filepath = os . path . join ( new_dir , filename ) [EOL] shutil . copy ( filepath , new_filepath ) [EOL] [EOL] filenames_filepath = os . path . join ( new_dir , [string] ) [EOL] with open ( filenames_filepath , [string] ) as filenames_file : [EOL] json . dump ( pymedphys_wheel_urls , filenames_file ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from . api import package_wheels [EOL]	0 0 0 0 0 0
from . api import pre_docs_build [EOL]	0 0 0 0 0 0
[comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [comment] [EOL] [EOL] [EOL] from typing import Any , List [EOL] import typing [EOL] import os [EOL] import textwrap [EOL] [EOL] from glob import glob [EOL] from . . draw . utilities import remove_postfix [EOL] [EOL] ROOT = os . getcwd ( ) [EOL] [EOL] [EOL] def write_graphs_rst ( save_directory ) : [EOL] search_string = os . path . join ( save_directory , [string] ) [EOL] [EOL] svg_files = [ os . path . basename ( filepath ) for filepath in sorted ( glob ( search_string ) , key = os . path . splitext ) ] [EOL] [EOL] modules = [ remove_postfix ( filepath , [string] ) for filepath in svg_files ] [EOL] images_paths = [ [string] . format ( module ) for module in modules ] [EOL] [EOL] sections = [string] [EOL] for module , images_path in zip ( modules , images_paths ) : [EOL] header_border = [string] * len ( module ) [EOL] sections += textwrap . dedent ( [string] . format ( header_border , module , images_path ) ) [EOL] [EOL] save_file = os . path . join ( save_directory , [string] ) [EOL] with open ( save_file , [string] ) as file : [EOL] file . write ( sections ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import shutil [EOL] [EOL] try : [EOL] shutil . rmtree ( [string] ) [EOL] except FileNotFoundError : [EOL] pass [EOL] [EOL] [EOL] try : [EOL] shutil . rmtree ( [string] ) [EOL] except FileNotFoundError : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import sys [EOL] import os [EOL] [EOL] sys . path . append ( os . path . realpath ( os . path . dirname ( __file__ ) + [string] ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
	0
	0
	0
from typing import Any [EOL] import unittest [EOL] import typing [EOL] import uuid [EOL] from unittest import mock [EOL] [EOL] from meerkat . domain . post . events import PostCreated [EOL] from meerkat . domain . post . use_cases . add_new_post import AddNewPostUseCase , AddNewPostCommand [EOL] [EOL] [EOL] class TestCreatePost : [EOL] [EOL] @ mock . patch ( [string] ) def test_can_add_new_post ( self , uuid4_mock ) : [EOL] uuid4_mock . return_value = uuid . uuid4 ( ) [EOL] data_provider_mock = mock . Mock ( ) [EOL] event_bus_mock = mock . Mock ( ) [EOL] [EOL] use_case = AddNewPostUseCase ( data_provider_mock , event_bus_mock ) [EOL] [EOL] command = AddNewPostCommand ( title = [string] , body = [string] ) [EOL] [EOL] use_case . exec ( command ) [EOL] [EOL] data_provider_mock . save . assert_called_once ( ) [EOL] [EOL] post = self . first_called_arg ( data_provider_mock . save ) [EOL] assert str ( post . id ) == str ( uuid4_mock . return_value ) [EOL] assert post . title . value == command . title [EOL] assert post . body . value == command . body [EOL] assert post . is_published ( ) is False [EOL] [EOL] post_created_event = self . first_called_arg ( event_bus_mock . publish ) [EOL] assert isinstance ( post_created_event , PostCreated ) [EOL] assert post_created_event . post == post [EOL] [EOL] def first_called_arg ( self , method_mock ) : [EOL] return method_mock . call_args_list [ [number] ] [ [number] ] [ [number] ] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $unittest.mock.Mock$ 0 $unittest.mock.Mock$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $unittest.mock.Mock$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[comment] [EOL]	0 0
from typing import List [EOL] import typing [EOL] version_info = [ [number] , [number] , [number] ] [EOL] __version__ = [string] [EOL]	0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0
	0
	0
[comment] [EOL] from . repositories import PostMongoRepository [EOL]	0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import meerkat [EOL] from injector import inject [EOL] [EOL] from meerkat . domain . post . data_providers import PostDataProvider [EOL] from meerkat . domain . post . entities import Post [EOL] from meerkat . domain . post . value_objects import Id [EOL] from meerkat . domain . post . data_providers . exceptions import EntityNotFoundException [EOL] from meerkat . data_providers . database . mongo . transformers import PostDocumentTransformer [EOL] from meerkat . data_providers . database . mongo . documents import PostDocument [EOL] [EOL] [EOL] class PostMongoRepository ( PostDataProvider ) : [EOL] @ inject def __init__ ( self , transformer ) : [EOL] self . transformer = transformer [EOL] [EOL] def save ( self , post ) : [EOL] post_document = self . transformer . transform_to_document ( post ) [EOL] post_document . save ( ) [EOL] [EOL] def get ( self , id ) : [EOL] posts = PostDocument . objects ( id = id . value ) [EOL] if posts . count ( ) < [number] : [EOL] raise EntityNotFoundException ( [string] . format ( str ( id ) ) ) [EOL] [EOL] return self . transformer . transform_to_domain_object ( next ( posts ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $meerkat.domain.post.entities.Post$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $meerkat.domain.post.entities.Post$ 0 0 $typing.Any$ 0 0 0 0 0 0 0 $meerkat.domain.post.entities.Post$ 0 0 0 $meerkat.domain.post.value_objects.Id$ 0 0 0 $typing.Any$ 0 0 0 0 0 $meerkat.domain.post.value_objects.Id$ 0 $meerkat.domain.post.value_objects.Id$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $meerkat.domain.post.value_objects.Id$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0
from typing import Any [EOL] import typing [EOL] import meerkat [EOL] from meerkat . data_providers . database . mongo . documents import PostDocument [EOL] from meerkat . domain . post . entities import Post [EOL] from meerkat . domain . post . value_objects import Id , Title , Body [EOL] [EOL] [EOL] class PostDocumentTransformer : [EOL] def transform_to_document ( self , post ) : [EOL] return PostDocument ( id = post . id . value , title = post . title . value , body = post . body . value , published = post . is_published ( ) ) [EOL] [EOL] def transform_to_domain_object ( self , post_document ) : [EOL] post = Post . create ( Id ( post_document . id ) , Title ( post_document . title ) , Body ( post_document . body ) ) [EOL] post . published = post_document . published [EOL] return post [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $meerkat.domain.post.entities.Post$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $typing.Any$ 0
from typing import Type [EOL] import typing [EOL] import packages [EOL] from mongoengine import Document [EOL] from mongoengine . fields import StringField , UUIDField , BooleanField [EOL] [EOL] [EOL] class PostDocument ( Document ) : [EOL] id = UUIDField ( binary = False , primary_key = True ) [EOL] title = StringField ( max_length = [number] , required = True ) [EOL] body = StringField ( max_length = [number] , required = True ) [EOL] published = BooleanField ( ) [EOL] [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[packages.meerkat.src.meerkat.data_providers.database.mongo.documents.PostDocument]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[packages.meerkat.src.meerkat.data_providers.database.mongo.documents.PostDocument]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[packages.meerkat.src.meerkat.data_providers.database.mongo.documents.PostDocument]$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[packages.meerkat.src.meerkat.data_providers.database.mongo.documents.PostDocument]$ 0 0 0 0 0 0 0
	0
class DomainException ( Exception ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0
	0
from dataclasses import dataclass [EOL] [EOL] from buslane . events import Event [EOL] [EOL] from meerkat . domain . post . entities . post import Post [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class PostCreated ( Event ) : [EOL] post = ... [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $meerkat.domain.post.entities.post.Post$ 0 0 0
from . post_created import PostCreated [EOL] from . post_published import PostPublished [EOL]	0 0 0 0 0 0 0 0 0 0 0 0
from dataclasses import dataclass [EOL] [EOL] from buslane . events import Event [EOL] [EOL] from meerkat . domain . post . entities . post import Post [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class PostPublished ( Event ) : [EOL] post = ... [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $meerkat.domain.post.entities.post.Post$ 0 0 0
from . post import Post [EOL]	0 0 0 0 0 0
import builtins [EOL] import packages [EOL] import meerkat [EOL] from meerkat . domain . post . entities . exceptions import PublishingFailedException [EOL] from meerkat . domain . post . value_objects import Title , Body , Id [EOL] [EOL] [EOL] class Post : [EOL] id = ... [EOL] title = ... [EOL] body = ... [EOL] published = False [EOL] [EOL] @ staticmethod def create ( id , title , body ) : [EOL] instance = Post ( ) [EOL] instance . id = id [EOL] instance . title = title [EOL] instance . body = body [EOL] [EOL] return instance [EOL] [EOL] def publish ( self ) : [EOL] if not self . title . is_valid ( ) : [EOL] raise PublishingFailedException ( [string] ) [EOL] [EOL] if not self . id . is_valid ( ) : [EOL] raise PublishingFailedException ( [string] ) [EOL] [EOL] self . published = True [EOL] [EOL] def is_published ( self ) : [EOL] return self . published [EOL] [EOL] [EOL] [docstring] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $meerkat.domain.post.value_objects.Id$ 0 0 0 $meerkat.domain.post.value_objects.Title$ 0 0 0 $meerkat.domain.post.value_objects.Body$ 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $packages.meerkat.src.meerkat.domain.post.entities.post.Post$ 0 0 0 0 0 $packages.meerkat.src.meerkat.domain.post.entities.post.Post$ 0 0 0 0 0 $packages.meerkat.src.meerkat.domain.post.entities.post.Post$ 0 0 0 0 0 $packages.meerkat.src.meerkat.domain.post.entities.post.Post$ 0 0 0 0 0 0 0 $packages.meerkat.src.meerkat.domain.post.entities.post.Post$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 $builtins.bool$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from meerkat . domain . exceptions import DomainException [EOL] [EOL] [EOL] class PublishingFailedException ( DomainException ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import meerkat [EOL] import abc [EOL] from meerkat . domain . post . entities . post import Post [EOL] from meerkat . domain . post . value_objects import Id [EOL] [EOL] [EOL] class PostDataProvider ( metaclass = abc . ABCMeta ) : [EOL] [EOL] @ abc . abstractmethod def save ( self , post ) : [EOL] [docstring] [EOL] pass [EOL] [EOL] @ abc . abstractmethod def get ( self , id ) : [EOL] [docstring] [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $meerkat.domain.post.entities.post.Post$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $meerkat.domain.post.entities.post.Post$ 0 0 0 $meerkat.domain.post.value_objects.Id$ 0 0 0 0 0 0 0
class EntityNotFoundException ( Exception ) : [EOL] pass [EOL]	0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import typing [EOL] import buslane [EOL] import meerkat [EOL] import uuid [EOL] from buslane . events import EventBus [EOL] from dataclasses import dataclass [EOL] [EOL] from meerkat . domain . post . data_providers import PostDataProvider [EOL] from meerkat . domain . post . entities import Post [EOL] from meerkat . domain . post . events import PostCreated [EOL] from meerkat . domain . post . value_objects import Title , Body , Id [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class AddNewPostCommand : [EOL] title = ... [EOL] body = ... [EOL] [EOL] [EOL] class AddNewPostUseCase : [EOL] def __init__ ( self , data_provider , event_bus ) : [EOL] self . data_provider = data_provider [EOL] self . event_bus = event_bus [EOL] [EOL] def exec ( self , command ) : [EOL] post = Post . create ( Id ( uuid . uuid4 ( ) ) , Title ( command . title ) , Body ( command . body ) ) [EOL] self . data_provider . save ( post ) [EOL] self . event_bus . publish ( PostCreated ( post ) ) [EOL] return post [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $meerkat.domain.post.entities.Post$ 0 0 0 $AddNewPostCommand$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $AddNewPostCommand$ 0 0 0 0 0 0 $AddNewPostCommand$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0
from typing import Any [EOL] import typing [EOL] import meerkat [EOL] import buslane [EOL] from buslane . events import EventBus [EOL] from dataclasses import dataclass [EOL] [EOL] from meerkat . domain . post . data_providers import PostDataProvider [EOL] from meerkat . domain . post . events import PostPublished [EOL] from meerkat . domain . post . value_objects import Id [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class PublishPostCommand : [EOL] id = ... [EOL] [EOL] [EOL] class PublishPostUseCase : [EOL] def __init__ ( self , data_provider , event_bus ) : [EOL] self . data_provider = data_provider [EOL] self . event_bus = event_bus [EOL] [EOL] def exec ( self , command ) : [EOL] post = self . data_provider . get ( command . id ) [EOL] post . publish ( ) [EOL] self . data_provider . save ( post ) [EOL] self . event_bus . publish ( PostPublished ( post ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $meerkat.domain.post.value_objects.Id$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $None$ 0 0 0 $PublishPostCommand$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $PublishPostCommand$ 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0
from . add_new_post import AddNewPostUseCase [EOL] from . publish_post import PublishPostUseCase [EOL]	0 0 0 0 0 0 0 0 0 0 0 0
from . title import Title [EOL] from . body import Body [EOL] from . id import Id [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
class Title : [EOL] value = ... [EOL] [EOL] def __init__ ( self , value ) : [EOL] self . value = value [EOL] [EOL] def is_valid ( self ) : [EOL] return len ( self . value ) > [number] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . value [EOL]	0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 $builtins.str$ 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from dataclasses import dataclass [EOL] [EOL] [EOL] @ dataclass ( frozen = True ) class Body : [EOL] value = ... [EOL] [EOL] def is_valid ( self ) : [EOL] return len ( self . value ) > [number] [EOL] [EOL] def __str__ ( self ) : [EOL] return self . value [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import uuid [EOL] from uuid import UUID [EOL] [EOL] [EOL] class Id : [EOL] value = ... [EOL] [EOL] def __init__ ( self , value ) : [EOL] self . value = value [EOL] [EOL] def is_valid ( self ) : [EOL] return len ( str ( self ) ) > [number] [EOL] [EOL] def __str__ ( self ) : [EOL] return str ( self . value ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 $uuid.UUID$ 0 0 0 0 0 0 0 0 0 $uuid.UUID$ 0 0 0 0 0 $uuid.UUID$ 0 $uuid.UUID$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
import marshmallow [EOL] import packages [EOL] import meerkat [EOL] from marshmallow import fields , Schema [EOL] [EOL] from meerkat . domain . post . entities import Post [EOL] [EOL] [EOL] class PostSchema ( Schema ) : [EOL] class Meta : [EOL] ordered = True [EOL] [EOL] id = fields . Str ( ) [EOL] title = fields . Str ( required = True ) [EOL] body = fields . Str ( required = True ) [EOL] [EOL] @ classmethod def from_domain_object ( cls , post ) : [EOL] object = cls ( ) [EOL] return object . load ( { [string] : str ( post . id ) , [string] : str ( post . title ) , [string] : str ( post . body ) } ) [EOL] [EOL] [EOL] class AddNewPostSchema ( Schema ) : [EOL] class Meta : [EOL] ordered = True [EOL] [EOL] title = fields . Str ( required = True ) [EOL] body = fields . Str ( required = True ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $marshmallow.fields.Str$ 0 0 0 0 0 0 0 $marshmallow.fields.Str$ 0 0 0 0 0 0 0 0 0 0 $marshmallow.fields.Str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $meerkat.domain.post.entities.Post$ 0 0 0 $packages.meerkat.src.meerkat.entrypoints.rest.post.schemas.PostSchema$ 0 0 0 0 0 0 $packages.meerkat.src.meerkat.entrypoints.rest.post.schemas.PostSchema$ 0 0 0 0 0 0 0 0 $meerkat.domain.post.entities.Post$ 0 0 0 0 0 0 0 0 $meerkat.domain.post.entities.Post$ 0 0 0 0 0 0 0 0 $meerkat.domain.post.entities.Post$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.bool$ 0 0 0 0 $marshmallow.fields.Str$ 0 0 0 0 0 0 0 0 0 0 $marshmallow.fields.Str$ 0 0 0 0 0 0 0 0 0 0
from typing import Any , Container [EOL] import registry [EOL] import typing [EOL] from meerkat . configurations . app import settings [EOL] from meerkat . entrypoints . rest . post . definitions import PostConfigurator [EOL] from meerkat . entrypoints . rest . post . resources import PostCollection , Post [EOL] from registry . services import BootableService , Container [EOL] [EOL] [EOL] class PostService ( BootableService ) : [EOL] def boot ( self , container ) : [EOL] provider = container . get ( settings . Props . DI_PROVIDER ) [EOL] provider . add_configurator ( PostConfigurator ) [EOL] [EOL] def post_boot ( self , container ) : [EOL] falcon = container . get ( settings . Props . FALCON ) [EOL] provider = container . get ( settings . Props . DI_PROVIDER ) [EOL] [EOL] injector = provider . get_injector ( ) [EOL] [EOL] falcon . add_route ( [string] , injector . get ( PostCollection ) ) [EOL] falcon . add_route ( [string] , injector . get ( Post ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $registry.services.Container$ 0 0 0 $typing.Any$ 0 $registry.services.Container$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
	0
import meerkat [EOL] from injector import singleton , provider , Module [EOL] [EOL] from meerkat . domain . post . use_cases import AddNewPostUseCase , PublishPostUseCase [EOL] from meerkat . entrypoints . rest . post . resources import PostCollection , Post [EOL] [EOL] [EOL] class PostConfigurator ( Module ) : [EOL] @ singleton @ provider def post_collection ( self ) : [EOL] return PostCollection ( self . __injector__ . get ( AddNewPostUseCase ) ) [EOL] [EOL] @ singleton @ provider def post_item ( self ) : [EOL] return Post ( self . __injector__ . get ( PublishPostUseCase ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $meerkat.entrypoints.rest.post.resources.PostCollection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $meerkat.entrypoints.rest.post.resources.Post$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Type [EOL] import builtins [EOL] import packages [EOL] import typing [EOL] import falcon [EOL] import meerkat [EOL] import json [EOL] import logging [EOL] import uuid [EOL] [EOL] import falcon [EOL] [EOL] from meerkat . configurations . app . middlewares import HTTPValidationError [EOL] from meerkat . domain . post . use_cases import AddNewPostUseCase , PublishPostUseCase [EOL] from meerkat . domain . post . use_cases . add_new_post import AddNewPostCommand [EOL] from meerkat . domain . post . use_cases . publish_post import PublishPostCommand [EOL] from meerkat . domain . post . value_objects import Id [EOL] from meerkat . entrypoints . rest . post . schemas import PostSchema , AddNewPostSchema [EOL] [EOL] [EOL] class PostCollection : [EOL] schema = PostSchema ( ) [EOL] post_schema = AddNewPostSchema ( ) [EOL] [EOL] def __init__ ( self , add_new_post ) : [EOL] self . add_new_post = add_new_post [EOL] [EOL] def on_post ( self , req , resp ) : [EOL] [docstring] [EOL] [comment] [EOL] try : [EOL] request_json = req . context [ [string] ] [EOL] except KeyError : [EOL] raise HTTPValidationError ( status = falcon . status_codes . HTTP_400 , errors = [ [string] ] ) [EOL] [EOL] command = AddNewPostCommand ( ** request_json ) [EOL] [EOL] post = self . add_new_post . exec ( command ) [EOL] [EOL] resp . status = falcon . HTTP_201 [EOL] resp . body = json . dumps ( PostSchema . from_domain_object ( post ) ) [EOL] [EOL] [EOL] class Post : [EOL] schema = PostSchema ( ) [EOL] [EOL] def __init__ ( self , publish_post ) : [EOL] self . publish_post_usecase = publish_post [EOL] [EOL] def on_put ( self , req , resp , id ) : [EOL] [docstring] [EOL] [EOL] command = PublishPostCommand ( Id ( uuid . UUID ( id ) ) ) [EOL] [EOL] self . publish_post_usecase . exec ( command ) [EOL] [EOL] resp . status = falcon . HTTP_204 [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Type[packages.meerkat.src.meerkat.entrypoints.rest.post.resources.PostCollection]$ 0 0 0 0 0 $typing.Type[packages.meerkat.src.meerkat.entrypoints.rest.post.resources.PostCollection]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Type[packages.meerkat.src.meerkat.entrypoints.rest.post.resources.Post]$ 0 0 0 0 0 0 0 0 0 0 0 $meerkat.domain.post.use_cases.PublishPostUseCase$ 0 0 0 0 0 0 0 $meerkat.domain.post.use_cases.PublishPostUseCase$ 0 0 0 $None$ 0 0 0 $falcon.Request$ 0 $falcon.Response$ 0 $builtins.str$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $falcon.Response$ 0 0 0 0 0 0 0
	0
from typing import Any [EOL] import typing [EOL] import falcon [EOL] from meerkat . configurations . app import settings [EOL] from falcon_marshmallow import JSONEnforcer , EmptyRequestDropper [EOL] [EOL] from meerkat . configurations . app . middlewares import RequestLoader [EOL] from injector_provider import InjectorProvider [EOL] from registry . services import Container , Registry [EOL] [EOL] app = falcon . API ( middleware = [ JSONEnforcer ( ) , EmptyRequestDropper ( ) , RequestLoader ( ) ] ) [EOL] [EOL] container = Container ( ) [EOL] [EOL] container . set ( settings . Props . DI_PROVIDER , InjectorProvider ( ) ) [EOL] container . set ( settings . Props . FALCON , app ) [EOL] [EOL] service_registry = Registry ( ) [EOL] [EOL] for service in settings . services : [EOL] service_registry . register ( service ) [EOL] [EOL] service_registry . boot ( container ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 $typing.Any$ 0 0
from typing import Any , List [EOL] import typing [EOL] from meerkat . configurations . infrastructure . db import DataBaseService [EOL] from meerkat . configurations . infrastructure . di . service import DiService [EOL] from meerkat . configurations . infrastructure . environment import EnvironmentService [EOL] from meerkat . configurations . infrastructure . logging import LoggingService [EOL] from meerkat . configurations . infrastructure . rest . health . registry import HealthService [EOL] from meerkat . configurations . infrastructure . rest . swagger . registry import SwaggerService [EOL] from meerkat . entrypoints . rest . post . registry import PostService [EOL] from registry . services import Props as BaseProps [EOL] [EOL] services = [ LoggingService ( ) , EnvironmentService ( ) , DataBaseService ( ) , DiService ( ) , PostService ( ) , HealthService ( ) , SwaggerService ( ) ] [EOL] [EOL] [EOL] class Props ( BaseProps ) : [EOL] DI_PROVIDER = [number] [EOL] FALCON = [number] [EOL] [EOL] APP_URL = [string] [EOL] [EOL] MONGO_HOST = [string] [EOL] MONGO_PORT = [string] [EOL] MONGO_DB = [string] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $builtins.int$ 0 0 0 0 $builtins.str$ 0 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0 $builtins.str$ 0 0 0
	0
	0
from typing import Any [EOL] import falcon [EOL] import typing [EOL] import json [EOL] [EOL] import falcon [EOL] from apispec import APISpec [EOL] from apispec . ext . marshmallow import MarshmallowPlugin [EOL] from falcon import Request [EOL] from falcon . response import Response [EOL] from falcon_apispec import FalconPlugin [EOL] [EOL] from meerkat . configurations . infrastructure . rest . health import HealthSchema , HealthCheck [EOL] from meerkat . entrypoints . rest . post . resources import PostCollection , Post [EOL] from meerkat . entrypoints . rest . post . schemas import PostSchema [EOL] [EOL] [EOL] class SwaggerResource : [EOL] def __init__ ( self ) : [EOL] from meerkat . configurations . app . settings import Props [EOL] from meerkat . configurations . app . main import app [EOL] from meerkat . configurations . app . main import container [EOL] [comment] [EOL] self . spec = APISpec ( title = [string] , version = [string] , openapi_version = [string] , plugins = [ FalconPlugin ( app ) , MarshmallowPlugin ( ) , ] ) [EOL] injector = container . get ( Props . DI_PROVIDER ) . get_injector ( ) [EOL] [EOL] self . spec . components . schema ( [string] , schema = injector . get ( HealthSchema ) ) [EOL] self . spec . path ( resource = injector . get ( HealthCheck ) ) [EOL] [EOL] self . spec . components . schema ( [string] , schema = injector . get ( PostSchema ) ) [EOL] [EOL] self . spec . path ( resource = injector . get ( PostCollection ) ) [EOL] self . spec . path ( resource = injector . get ( Post ) ) [EOL] [EOL] def on_get ( self , req , resp ) : [EOL] resp . status = falcon . HTTP_200 [EOL] resp . body = json . dumps ( self . spec . to_dict ( ) , ensure_ascii = False ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $falcon.Request$ 0 $falcon.response.Response$ 0 0 0 $falcon.response.Response$ 0 0 0 0 0 0 0 $falcon.response.Response$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
import meerkat [EOL] from injector import Module , singleton , provider [EOL] [EOL] from meerkat . configurations . infrastructure . rest . health import HealthCheck [EOL] [EOL] [EOL] class HealthConfigurator ( Module ) : [EOL] @ singleton @ provider def provide_health_check_resource ( self ) : [EOL] return HealthCheck ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $meerkat.configurations.infrastructure.rest.health.HealthCheck$ 0 0 0 0 0 0 0 0 0 0
import marshmallow [EOL] import falcon [EOL] [EOL] import json [EOL] [EOL] from marshmallow import Schema , fields [EOL] [EOL] [EOL] [comment] [EOL] class HealthSchema ( Schema ) : [EOL] status = fields . Str ( required = True ) [EOL] message = fields . Str ( required = True ) [EOL] [EOL] [EOL] class HealthCheck : [EOL] [comment] [EOL] def on_get ( self , req , resp ) : [EOL] [docstring] [EOL] resp . status = falcon . HTTP_200 [EOL] resp . body = json . dumps ( { [string] : resp . status , [string] : [string] } ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $marshmallow.fields.Str$ 0 0 0 0 0 0 0 0 0 0 $marshmallow.fields.Str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Container [EOL] import registry [EOL] import typing [EOL] from meerkat . configurations . app import settings [EOL] from meerkat . configurations . infrastructure . rest . health import HealthCheck [EOL] from meerkat . configurations . infrastructure . rest . health . definitions import HealthConfigurator [EOL] from registry . services import BootableService , Container [EOL] [EOL] [EOL] class HealthService ( BootableService ) : [EOL] def boot ( self , container ) : [EOL] provider = container . get ( settings . Props . DI_PROVIDER ) [EOL] provider . add_configurator ( HealthConfigurator ( ) ) [EOL] [EOL] def post_boot ( self , container ) : [EOL] falcon = container . get ( settings . Props . FALCON ) [EOL] provider = container . get ( settings . Props . DI_PROVIDER ) [EOL] injector = provider . get_injector ( ) [EOL] [EOL] health_check = injector . get ( HealthCheck ) [EOL] falcon . add_route ( [string] , health_check ) [EOL] falcon . add_route ( [string] , health_check ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $registry.services.Container$ 0 0 0 $typing.Any$ 0 $registry.services.Container$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0 $typing.Any$ 0 0 0 0 0 $typing.Any$ 0 0
from typing import Container [EOL] import registry [EOL] import os [EOL] [EOL] from registry . services import BootableService , Container [EOL] [EOL] [EOL] class EnvironmentService ( BootableService ) : [EOL] [EOL] def boot ( self , container ) : [EOL] from meerkat . configurations . app . settings import Props [EOL] [EOL] container . set ( Props . APP_URL , os . environ . get ( Props . APP_URL . value ) ) [EOL] [EOL] container . set ( Props . MONGO_HOST , os . environ . get ( Props . MONGO_HOST . value ) ) [EOL] container . set ( Props . MONGO_PORT , os . environ . get ( Props . MONGO_PORT . value ) ) [EOL] container . set ( Props . MONGO_DB , os . environ . get ( Props . MONGO_DB . value ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $registry.services.Container$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $registry.services.Container$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $registry.services.Container$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $registry.services.Container$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $registry.services.Container$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Container [EOL] import registry [EOL] import typing [EOL] from registry . services import BootableService , Container [EOL] from mongoengine import connect [EOL] [EOL] [EOL] class DataBaseService ( BootableService ) : [EOL] [EOL] def boot ( self , container ) : [EOL] from meerkat . configurations . app . settings import Props [EOL] [EOL] host = container . get ( Props . MONGO_HOST ) [EOL] port = int ( container . get ( Props . MONGO_PORT ) ) [EOL] db = container . get ( Props . MONGO_DB ) [EOL] [EOL] connect ( db , host = host , port = port ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $registry.services.Container$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $registry.services.Container$ 0 0 0 0 0 0 0 0 $builtins.int$ 0 0 0 $registry.services.Container$ 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $registry.services.Container$ 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.Any$ 0 $typing.Any$ 0 $builtins.int$ 0 $builtins.int$ 0 0 0
import meerkat [EOL] from buslane . events import EventBus [EOL] from injector import singleton , provider , Module [EOL] [EOL] from meerkat . data_providers . database . mongo import PostMongoRepository [EOL] from meerkat . domain . post . use_cases import AddNewPostUseCase , PublishPostUseCase [EOL] [EOL] [EOL] class UseCasesConfigurator ( Module ) : [EOL] @ singleton @ provider def add_new ( self ) : [EOL] return AddNewPostUseCase ( self . __injector__ . get ( PostMongoRepository ) , self . __injector__ . get ( EventBus ) ) [EOL] [EOL] @ singleton @ provider def publish ( self ) : [EOL] return PublishPostUseCase ( self . __injector__ . get ( PostMongoRepository ) , self . __injector__ . get ( EventBus ) ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $meerkat.domain.post.use_cases.AddNewPostUseCase$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $meerkat.domain.post.use_cases.PublishPostUseCase$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any , Container [EOL] import registry [EOL] import typing [EOL] from meerkat . configurations . app import settings [EOL] from meerkat . configurations . infrastructure . di . domain import UseCasesConfigurator [EOL] from registry . services import BootableService , Container [EOL] [EOL] [EOL] class DiService ( BootableService ) : [EOL] def boot ( self , container ) : [EOL] provider = container . get ( settings . Props . DI_PROVIDER ) [EOL] provider . add_configurator ( UseCasesConfigurator ) [EOL] [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $registry.services.Container$ 0 0 0 $typing.Any$ 0 $registry.services.Container$ 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0
	0
from . import services [EOL]	0 0 0 0 0
from typing import Container [EOL] import builtins [EOL] from abc import ABC , abstractmethod [EOL] [EOL] from enum import Enum [EOL] [EOL] [EOL] class Props ( Enum ) : [EOL] pass [EOL] [EOL] [EOL] class Container ( object ) : [EOL] def __init__ ( self ) : [EOL] self . vars = { } [EOL] [EOL] def set ( self , prop , value ) : [EOL] self . vars [ prop ] = value [EOL] [EOL] def get ( self , key ) : [EOL] return self . vars [ key ] [EOL] [EOL] [EOL] class BootableService ( ABC ) : [EOL] [EOL] @ abstractmethod def boot ( self , container ) : [EOL] raise NotImplemented ( [string] ) [EOL] [EOL] def post_boot ( self , container ) : [EOL] pass [EOL] [EOL] [EOL] class Registry ( object ) : [EOL] [docstring] [EOL] [EOL] def __init__ ( self ) : [EOL] self . services = [ ] [EOL] [EOL] def register ( self , service ) : [EOL] self . services . append ( service ) [EOL] [EOL] def boot ( self , container ) : [EOL] for service in self . services : [EOL] service . boot ( container ) [EOL] [EOL] for service in self . services : [EOL] service . post_boot ( container ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.list$ 0 0 0 0 0 0 0 0 0 0 $BootableService$ 0 0 0 0 0 0 0 0 0 $BootableService$ 0 0 0 0 0 0 0 0 $typing.Container$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Container$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Container$ 0 0
from typing import List [EOL] import typing [EOL] version_info = [ [number] , [number] , [number] ] [EOL] __version__ = [string] [EOL]	0 0 0 0 0 0 0 0 $typing.List[builtins.int]$ 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0