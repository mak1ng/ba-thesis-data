from typing import Any [EOL] import sqlite3 [EOL] import typing [EOL] from dpflask import db [EOL] import pandas as pd [EOL] [EOL] [EOL] def create_db ( ) : [EOL] connection = db . connect_db ( ) [EOL] dataset = pd . read_json ( [string] ) [EOL] dataset = dataset . drop ( [string] , [number] ) [EOL] dataset [ [string] ] = dataset [ [string] ] . dt . month [EOL] dataset . to_sql ( [string] , connection , if_exists = [string] ) [EOL] connection . commit ( ) [EOL] connection . close ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] create_db ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from setuptools import setup [EOL] [EOL] setup ( name = [string] , version = [string] , description = [string] , packages = [ [string] ] , install_requires = [ [string] , [string] ] , test_suite = [string] , setup_requires = [ [string] ] , tests_require = [ [string] , [string] ] , zip_safe = False )	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Any [EOL] import sqlite3 [EOL] import typing [EOL] import werkzeug [EOL] import flask [EOL] from flask import Flask , request [EOL] [EOL] from dpflask import db [EOL] [EOL] app = Flask ( __name__ ) [EOL] connection = db . connect_db ( ) [EOL] [EOL] [EOL] @ app . route ( [string] , methods = [ [string] ] ) def get_voters ( ) : [EOL] args = request . args [EOL] result = db . get_voters_where ( args , connection ) [EOL] return result [EOL] [EOL] [EOL] def main ( ) : [EOL] app . run ( ) [EOL] [EOL] [EOL] if __name__ == [string] : [EOL] main ( ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 $sqlite3.dbapi2.Connection$ 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $sqlite3.dbapi2.Connection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 $flask.app.Flask$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
from typing import Union , Any , Tuple , List , Dict [EOL] import sqlite3 [EOL] import typing [EOL] import builtins [EOL] import os [EOL] import sqlite3 [EOL] from typing import List , Dict , Tuple , Union [EOL] from flask import abort , jsonify [EOL] [EOL] import pandas as pd [EOL] [EOL] [EOL] def connect_db ( ) : [EOL] return sqlite3 . connect ( os . path . join ( os . path . dirname ( __file__ ) , [string] ) ) [EOL] [EOL] [EOL] def get_cols ( connection ) : [EOL] colcurs = connection . cursor ( ) [EOL] colcurs . execute ( [string] ) [EOL] columns = next ( zip ( * colcurs . description ) ) [EOL] return columns [EOL] [EOL] [EOL] def filter_columns ( party , status ) : [EOL] new_cols = [ [string] , [string] ] [EOL] parties = [ [string] , [string] , [string] , [string] , [string] ] [EOL] activity = [ [string] , [string] ] [EOL] ps = [ ] [EOL] if party and party in parties : [EOL] ps . append ( party ) [EOL] else : [EOL] ps = parties [EOL] if status and status in activity : [EOL] ps = [ [string] . join ( ( p , status ) ) for p in ps ] [EOL] else : [EOL] ps = [ [string] . join ( ( p , s ) ) for p in ps for s in activity ] [EOL] return new_cols + ps [EOL] [EOL] [EOL] def get_args ( args ) : [EOL] county = args . get ( [string] , [string] ) [EOL] party = args . get ( [string] , [string] ) [EOL] status = args . get ( [string] , [string] ) [EOL] month = args . get ( [string] , [string] ) [EOL] limit = args . get ( [string] , [string] ) [EOL] return county , party , status , month , limit [EOL] [EOL] [EOL] def get_voters_where ( args , connection ) : [EOL] county , party , status , month , limit = get_args ( args ) [EOL] new_columns = filter_columns ( party , status ) [EOL] base_query = [string] . format ( [string] . join ( new_columns ) ) [EOL] cursor = connection . cursor ( ) [EOL] params = [ ] [EOL] for param , name in zip ( ( county , month ) , ( [string] , [string] ) ) : [EOL] if param : [EOL] params . append ( param ) [EOL] if [string] in base_query : [EOL] base_query += f' [string] { name } [string] ' [EOL] else : [EOL] base_query += f' [string] { name } [string] ' [EOL] [EOL] if limit is not None : [EOL] try : [EOL] numlim = int ( limit ) [EOL] except ValueError : [EOL] return abort ( [number] ) [EOL] else : [EOL] if numlim < [number] : [EOL] return abort ( [number] ) [EOL] base_query += [string] [EOL] params . append ( numlim ) [EOL] [EOL] cursor . execute ( base_query , params ) [EOL] connection . commit ( ) [EOL] df = pd . DataFrame ( cursor . fetchall ( ) , columns = new_columns ) [EOL] output = [ row . to_dict ( ) for _ , row in df . iterrows ( ) ] [EOL] [EOL] return jsonify ( output ) [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Tuple[builtins.str,builtins.str,builtins.str,builtins.str,builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $builtins.str$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0
from typing import List , Any [EOL] import sqlite3 [EOL] import typing [EOL] from hypothesis import given , assume , strategies as st [EOL] import dpflask . db as database [EOL] import pandas as pd [EOL] import math [EOL] data = pd . read_json ( [string] ) [EOL] connection = database . connect_db ( ) [EOL] [EOL] [EOL] @ given ( st . sampled_from ( data . columns . values . tolist ( ) ) , st . integers ( min_value = [number] , max_value = ( data . shape [ [number] ] ) ) ) def test_db ( column , index ) : [EOL] [EOL] assume ( column != [string] ) [EOL] cursor = connection . cursor ( ) [EOL] cursor . execute ( f' [string] { column } [string] ' , ( index , ) ) [EOL] test = cursor . fetchone ( ) [ [number] ] [EOL] actual = data . loc [ index , column ] [EOL] if column == [string] : [EOL] actual = str ( actual ) [EOL] if isinstance ( actual , float ) : [EOL] assume ( not math . isnan ( actual ) ) [EOL] assert test == actual [EOL] [EOL] [EOL] columns = database . get_cols ( connection ) [EOL] parties = [ [string] , [string] , [string] , [string] , [string] , None , st . text ( ) . example ( ) ] [EOL] activity = [ [string] , [string] , None , st . text ( ) . example ( ) ] [EOL] [EOL] [EOL] @ given ( st . sampled_from ( parties ) , st . sampled_from ( activity ) ) def test_filtercols ( party , status ) : [EOL] gen_cols = database . filter_columns ( party , status ) [EOL] for col in gen_cols : [EOL] assert col in columns [EOL]	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 $sqlite3.dbapi2.Connection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 $typing.List[builtins.str]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $sqlite3.dbapi2.Connection$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.Any$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0 0 0 0 0 $sqlite3.dbapi2.Connection$ 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 $typing.List[typing.Any]$ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 $typing.List[builtins.str]$ 0